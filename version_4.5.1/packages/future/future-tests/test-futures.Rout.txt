
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-futures.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("futures")
Test ‘futures’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-futures.R’

> library(future)
[08:07:58.956] Option 'future.startup.script': TRUE
[08:07:58.957] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:07:58.957] Future startup scripts found: <none>

> library(listenv)

> dims <- list(NULL, c(1, 6), c(2, 3), c(2, 3, 1), c(2, 
+     1, 3, 1))

> message("*** futures() / resolved() / value() ...")
*** futures() / resolved() / value() ...

> for (cores in 1:availCores) {
+     message(sprintf("Testing with %d cores ...", cores))
+     options(mc.cores = cores)
+     for (type in c("list" .... [TRUNCATED] 
Testing with 1 cores ...
Type of object: list
Type of future: sequential
[08:07:58.997] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:58.998] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:07:58.998] | : all.equal() for FutureStrategyList ...
[08:07:58.998] | : . New stack:
[08:07:58.998] | : . List of 1
[08:07:58.998] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:58.998] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:58.998] | : .   ..- attr(*, "init")= logi TRUE
[08:07:58.998] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:58.998] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.998] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:58.998] | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:58.998] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.002] | : . Old stack:
[08:07:59.002] | : . List of 1
[08:07:59.002] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.002] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.002] | : .   ..- attr(*, "init")= logi TRUE
[08:07:59.002] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.002] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.002] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.002] | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:59.002] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.005] | : . Not identical
[08:07:59.005] | : . all.equal() for future ...
[08:07:59.005] | : . ' List of 2
[08:07:59.005] | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.005] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.005] | : . '   ..- attr(*, "init")= logi TRUE
[08:07:59.005] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.005] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.005] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.005] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:59.005] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.005] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.005] | : . '   ..- attr(*, "init")= logi TRUE
[08:07:59.005] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.005] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.005] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.005] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:07:59.009] | : . all.equal() for future ... done
[08:07:59.009] | : all.equal() for FutureStrategyList ... done
[08:07:59.010] | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.010] | : List of future strategies:
[08:07:59.010] | : 1. sequential:
[08:07:59.010] | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.010] | :    - tweaked: FALSE
[08:07:59.010] | :    - call: plan(sequential)
[08:07:59.010] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:07:59.010] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Dimensions: NULL
[08:07:59.011] future(..., label = NULL) ...
[08:07:59.011] | lazy: FALSE
[08:07:59.011] | stdout: TRUE
[08:07:59.011] | conditions: [n=1] ‘condition’
[08:07:59.011] | gc: FALSE
[08:07:59.011] | earlySignal: FALSE
[08:07:59.012] | getGlobalsAndPackages() ...
[08:07:59.012] | : Searching for globals ...
[08:07:59.020] | : . globals found: [0] 
[08:07:59.020] | : Searching for globals ... done
[08:07:59.020] | : globals: [0] <none>
[08:07:59.020] | : packages: [0] <none>
[08:07:59.020] | getGlobalsAndPackages() ... done
[08:07:59.021] | run() for ‘Future’ (<unnamed-1>) ...
[08:07:59.021] | : state: ‘created’
[08:07:59.021] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.021] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:59.021] | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.021] | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.021] | : . '  - attr(*, "init")= logi TRUE
[08:07:59.021] | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.021] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.021] | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.021] | : . '  - attr(*, "call")= language plan(sequential)
[08:07:59.023] | : . ' init: TRUE
[08:07:59.023] | : . ' makeFutureBackend(<sequential>) ...
[08:07:59.023] | : . ' , Backend function: <‘NULL’>
[08:07:59.024] | : . ' , Evaluator tweak arguments: [n=0]
[08:07:59.024] | : . ' ,  list()
[08:07:59.024] | : . ' , Evaluator formal arguments: [n=2]
[08:07:59.024] | : . ' ,  list()
[08:07:59.024] | : . ' , Backend factory arguments: [n=2]
[08:07:59.024] | : . ' , Dotted pair list of 2
[08:07:59.024] | : . ' ,  $ gc         : logi FALSE
[08:07:59.024] | : . ' ,  $ earlySignal: logi FALSE
[08:07:59.025] | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:59.026] | : . ' makeFutureBackend(<sequential>) ... done
[08:07:59.026] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:59.026] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.026] | : Using SequentialFutureBackend ...
[08:07:59.026] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:07:59.026] | : . Launching futures ...
[08:07:59.026] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:59.027] | : . ' , getFutureData() ...
[08:07:59.027] | : . ' , ; getFutureCore() ...
[08:07:59.027] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:59.027] | : . ' , ; getFutureCore() ... done
[08:07:59.027] | : . ' , ; getFutureCapture() ...
[08:07:59.027] | : . ' , ; getFutureCapture() ... done
[08:07:59.027] | : . ' , ; getFutureContext() ...
[08:07:59.028] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.028] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:59.028] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.028] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:59.028] | : . ' , ; getFutureContext() ... done
[08:07:59.028] | : . ' , getFutureData() ... done
[08:07:59.030] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.031] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:59.031] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.031] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.031] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.031] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:59.032] | : . ' , ; ` | New stack:
[08:07:59.032] | : . ' , ; ` | List of 1
[08:07:59.032] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.032] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.032] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:59.032] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.032] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.032] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.032] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.032] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.034] | : . ' , ; ` | Old stack:
[08:07:59.034] | : . ' , ; ` | List of 1
[08:07:59.034] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.034] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.034] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:59.034] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.034] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.034] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.034] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:59.034] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.034] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.034] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.034] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.038] | : . ' , ; ` | Not identical
[08:07:59.038] | : . ' , ; ` | all.equal() for future ...
[08:07:59.038] | : . ' , ; ` | : List of 2
[08:07:59.038] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.038] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.038] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:59.038] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.038] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.038] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.038] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.038] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.038] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.038] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.038] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.038] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.038] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.038] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.038] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.038] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.038] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.046] | : . ' , ; ` | all.equal() for future ... done
[08:07:59.046] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:59.046] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.046] | : . ' , ; ` List of future strategies:
[08:07:59.046] | : . ' , ; ` 1. sequential:
[08:07:59.046] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.046] | : . ' , ; `    - tweaked: FALSE
[08:07:59.046] | : . ' , ; `    - call: plan(sequential)
[08:07:59.047] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.047] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.049] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.049] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.049] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.050] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:59.050] | : . ' , ; ` | : New stack:
[08:07:59.050] | : . ' , ; ` | : List of 1
[08:07:59.050] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.050] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.050] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.050] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.050] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.050] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.050] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.050] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.050] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.050] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.050] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.053] | : . ' , ; ` | : Old stack:
[08:07:59.053] | : . ' , ; ` | : List of 1
[08:07:59.053] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.053] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.053] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.053] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.053] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.053] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.053] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.053] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.053] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.053] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.053] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.056] | : . ' , ; ` | : Identical
[08:07:59.056] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:59.056] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.057] | : . ' , ; ` | List of future strategies:
[08:07:59.057] | : . ' , ; ` | 1. sequential:
[08:07:59.057] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.057] | : . ' , ; ` |    - tweaked: FALSE
[08:07:59.057] | : . ' , ; ` |    - call: plan(sequential)
[08:07:59.057] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.057] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.057] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.060] | : . ' , SequentialFuture started (and completed)
[08:07:59.060] | : . ' , signalConditions() ...
[08:07:59.060] | : . ' , ; include = ‘immediateCondition’
[08:07:59.061] | : . ' , ; exclude = 
[08:07:59.061] | : . ' , ; resignal = FALSE
[08:07:59.061] | : . ' , ; Number of conditions: 6
[08:07:59.061] | : . ' , ;  int 6
[08:07:59.061] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.061] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.062] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.062] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.062] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.062] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.062] | : . ' , signalConditions() ... done
[08:07:59.062] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:59.062] | : . Launching futures ... done
[08:07:59.062] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:59.063] | : Using SequentialFutureBackend ... done
[08:07:59.063] | run() for ‘Future’ (<unnamed-1>) ... done
[08:07:59.063] future(..., label = NULL) ... done
[08:07:59.063] future(..., label = NULL) ...
[08:07:59.063] | lazy: FALSE
[08:07:59.063] | stdout: TRUE
[08:07:59.063] | conditions: [n=1] ‘condition’
[08:07:59.063] | gc: FALSE
[08:07:59.063] | earlySignal: FALSE
[08:07:59.063] | getGlobalsAndPackages() ...
[08:07:59.064] | : Searching for globals ...
[08:07:59.065] | : . globals found: [0] 
[08:07:59.065] | : Searching for globals ... done
[08:07:59.065] | : globals: [0] <none>
[08:07:59.065] | : packages: [0] <none>
[08:07:59.065] | getGlobalsAndPackages() ... done
[08:07:59.065] | run() for ‘Future’ (<unnamed-2>) ...
[08:07:59.065] | : state: ‘created’
[08:07:59.066] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.066] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.066] | : Using SequentialFutureBackend ...
[08:07:59.066] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:07:59.067] | : . Launching futures ...
[08:07:59.067] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:59.068] | : . ' , getFutureData() ...
[08:07:59.068] | : . ' , ; getFutureCore() ...
[08:07:59.068] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:59.068] | : . ' , ; getFutureCore() ... done
[08:07:59.068] | : . ' , ; getFutureCapture() ...
[08:07:59.068] | : . ' , ; getFutureCapture() ... done
[08:07:59.068] | : . ' , ; getFutureContext() ...
[08:07:59.068] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.068] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:59.068] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.069] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:59.069] | : . ' , ; getFutureContext() ... done
[08:07:59.069] | : . ' , getFutureData() ... done
[08:07:59.070] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.070] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:59.070] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.071] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.071] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.071] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:59.071] | : . ' , ; ` | New stack:
[08:07:59.071] | : . ' , ; ` | List of 1
[08:07:59.071] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.071] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.071] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:59.071] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.071] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.071] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.071] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.071] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.074] | : . ' , ; ` | Old stack:
[08:07:59.074] | : . ' , ; ` | List of 1
[08:07:59.074] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.074] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.074] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:59.074] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.074] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.074] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.074] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:59.074] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.074] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.074] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.074] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.077] | : . ' , ; ` | Not identical
[08:07:59.077] | : . ' , ; ` | all.equal() for future ...
[08:07:59.077] | : . ' , ; ` | : List of 2
[08:07:59.077] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.077] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.077] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:59.077] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.077] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.077] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.077] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.077] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.077] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.077] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.077] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.077] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.077] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.077] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.077] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.077] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.077] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.082] | : . ' , ; ` | all.equal() for future ... done
[08:07:59.082] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:59.082] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.082] | : . ' , ; ` List of future strategies:
[08:07:59.082] | : . ' , ; ` 1. sequential:
[08:07:59.082] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.082] | : . ' , ; `    - tweaked: FALSE
[08:07:59.082] | : . ' , ; `    - call: plan(sequential)
[08:07:59.083] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.083] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.084] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.084] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.085] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.085] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:59.085] | : . ' , ; ` | : New stack:
[08:07:59.085] | : . ' , ; ` | : List of 1
[08:07:59.085] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.085] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.085] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.085] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.085] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.085] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.085] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.085] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.085] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.085] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.085] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.089] | : . ' , ; ` | : Old stack:
[08:07:59.089] | : . ' , ; ` | : List of 1
[08:07:59.089] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.089] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.089] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.089] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.089] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.089] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.089] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.089] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.089] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.089] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.089] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.092] | : . ' , ; ` | : Identical
[08:07:59.092] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:59.093] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.093] | : . ' , ; ` | List of future strategies:
[08:07:59.093] | : . ' , ; ` | 1. sequential:
[08:07:59.093] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.093] | : . ' , ; ` |    - tweaked: FALSE
[08:07:59.093] | : . ' , ; ` |    - call: plan(sequential)
[08:07:59.093] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.093] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.093] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.094] | : . ' , SequentialFuture started (and completed)
[08:07:59.094] | : . ' , signalConditions() ...
[08:07:59.094] | : . ' , ; include = ‘immediateCondition’
[08:07:59.094] | : . ' , ; exclude = 
[08:07:59.094] | : . ' , ; resignal = FALSE
[08:07:59.094] | : . ' , ; Number of conditions: 6
[08:07:59.094] | : . ' , ;  int 6
[08:07:59.095] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.095] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.095] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.095] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.095] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.095] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.095] | : . ' , signalConditions() ... done
[08:07:59.095] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:59.095] | : . Launching futures ... done
[08:07:59.096] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:59.096] | : Using SequentialFutureBackend ... done
[08:07:59.096] | run() for ‘Future’ (<unnamed-2>) ... done
[08:07:59.096] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x556758c33e40> 
 $ c:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x55675afb7da8> 
 $  : NULL
 $  : NULL
 $  : num 6
List of 6
 $ a: num 1
 $ b:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x556758c33e40> 
 $ c:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x55675afb7da8> 
 $  : NULL
 $  : NULL
 $  : num 6
[08:07:59.100] resolved() for list ...
[08:07:59.100] | Number of elements: 6
[08:07:59.100] | Number of futures: 6
[08:07:59.100] | resolved() for SequentialFuture (<unnamed-1>) ...
[08:07:59.100] | : state: ‘finished’
[08:07:59.100] | : run: TRUE
[08:07:59.100] | : result: ‘FutureResult’
[08:07:59.100] | resolved() for SequentialFuture (<unnamed-1>) ... done
[08:07:59.100] | resolved() for SequentialFuture (<unnamed-2>) ...
[08:07:59.101] | : state: ‘finished’
[08:07:59.101] | : run: TRUE
[08:07:59.101] | : result: ‘FutureResult’
[08:07:59.101] | resolved() for SequentialFuture (<unnamed-2>) ... done
[08:07:59.101] resolved() for list ... done
 Named logi [1:6] TRUE TRUE TRUE TRUE TRUE TRUE
 - attr(*, "names")= chr [1:6] "a" "b" "c" "" ...
[08:07:59.102] value() for list ...
[08:07:59.102] | recursive: 0
[08:07:59.102] | reduce: FALSE
[08:07:59.103] | length: 6
[08:07:59.103] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:07:59.103] | Number of remaining objects: 6
[08:07:59.103] | checking value #1:
[08:07:59.103] | 'obj' is atomic
[08:07:59.103] | signalConditionsASAP(numeric, pos=1) ...
[08:07:59.103] | : nx: 6
[08:07:59.103] | : relay: TRUE
[08:07:59.103] | : stdout: TRUE
[08:07:59.103] | : signal: TRUE
[08:07:59.103] | : resignal: FALSE
[08:07:59.104] | : force: TRUE
[08:07:59.104] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.104] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.104] | : until=2
[08:07:59.104] | : relaying element #2
[08:07:59.104] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.104] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.104] | signalConditionsASAP(numeric, pos=1) ... done
[08:07:59.104] | length: 5 (resolved future 1)
[08:07:59.104] value() for list ... done
[08:07:59.105] checking value #2:
[08:07:59.105] 'obj' is SequentialFuture
[08:07:59.105] resolved() for SequentialFuture (<unnamed-1>) ...
[08:07:59.105] | state: ‘finished’
[08:07:59.105] | run: TRUE
[08:07:59.105] | result: ‘FutureResult’
[08:07:59.105] resolved() for SequentialFuture (<unnamed-1>) ... done
[08:07:59.105] SequentialFuture #2
[08:07:59.105] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:07:59.105] | nx: 6
[08:07:59.105] | relay: TRUE
[08:07:59.106] | stdout: TRUE
[08:07:59.106] | signal: TRUE
[08:07:59.106] | resignal: FALSE
[08:07:59.106] | force: TRUE
[08:07:59.106] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.106] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.106] | until=2
[08:07:59.106] | relaying element #2
[08:07:59.107] | value() for SequentialFuture (<unnamed-1>) ...
[08:07:59.107] | : signalConditions() ...
[08:07:59.107] | : . include = ‘immediateCondition’
[08:07:59.107] | : . exclude = 
[08:07:59.107] | : . resignal = FALSE
[08:07:59.107] | : . Number of conditions: 6
[08:07:59.107] | : .  int 6
[08:07:59.108] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.108] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.108] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.108] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.108] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.108] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.108] | : signalConditions() ... done
[08:07:59.108] | : relay stdout ...
[08:07:59.109] | : relay stdout ... done
[08:07:59.109] | : check for misuse ...
[08:07:59.110] | : check for misuse ... done
[08:07:59.110] | value() for SequentialFuture (<unnamed-1>) ... done
[08:07:59.110] | signalConditions() ...
[08:07:59.110] | : include = ‘immediateCondition’
[08:07:59.110] | : exclude = 
[08:07:59.110] | : resignal = FALSE
[08:07:59.110] | : Number of conditions: 6
[08:07:59.110] | :  int 6
[08:07:59.111] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.111] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.111] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.111] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.111] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.111] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.111] | signalConditions() ... done
[08:07:59.111] | signalConditions() ...
[08:07:59.112] | : include = ‘condition’
[08:07:59.112] | : exclude = ‘error’, ‘immediateCondition’
[08:07:59.112] | : resignal = TRUE
[08:07:59.112] | : Number of conditions: 6
[08:07:59.112] | :  int 6
[08:07:59.112] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.112] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.029] | : . ' , attachPackages() ...
[08:07:59.113] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.113] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.030] | : . ' , ; packages: [n=1] ‘future’
[08:07:59.113] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.113] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.030] | : . ' , attachPackages() ... done
[08:07:59.113] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.113] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.030] | : . ' , attachPackages() ...
[08:07:59.113] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.113] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.030] | : . ' , ; packages: [n=0] 
[08:07:59.113] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.114] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.030] | : . ' , attachPackages() ... done
[08:07:59.114] | signalConditions() ... done
[08:07:59.114] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.114] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.114] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:07:59.114] value(<SequentialFuture>, ...) ...
[08:07:59.114] value(<SequentialFuture>, ...) ... done
[08:07:59.114] value() for SequentialFuture (<unnamed-1>) ...
[08:07:59.114] | signalConditions() ...
[08:07:59.114] | : include = ‘immediateCondition’
[08:07:59.115] | : exclude = 
[08:07:59.115] | : resignal = FALSE
[08:07:59.115] | : Number of conditions: 6
[08:07:59.115] | :  int 6
[08:07:59.115] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.115] | : already signaled, skipping
[08:07:59.115] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.115] | : already signaled, skipping
[08:07:59.116] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.116] | : already signaled, skipping
[08:07:59.116] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.116] | : already signaled, skipping
[08:07:59.116] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.116] | : already signaled, skipping
[08:07:59.116] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.116] | : already signaled, skipping
[08:07:59.116] | signalConditions() ... done
[08:07:59.116] | check for misuse ...
[08:07:59.116] | check for misuse ... done
[08:07:59.117] value() for SequentialFuture (<unnamed-1>) ... done
[08:07:59.117] value: <numeric>
[08:07:59.117] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:07:59.117] | nx: 6
[08:07:59.117] | relay: TRUE
[08:07:59.117] | stdout: TRUE
[08:07:59.117] | signal: TRUE
[08:07:59.117] | resignal: FALSE
[08:07:59.117] | force: TRUE
[08:07:59.117] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.117] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.118] | until=3
[08:07:59.118] | relaying element #3
[08:07:59.118] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.118] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.118] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:07:59.118] resolve() for SequentialFuture ...
[08:07:59.118] resolve() for SequentialFuture ... done
[08:07:59.118] length: 4 (resolved future 2)

[08:07:59.118] checking value #3:
[08:07:59.119] 'obj' is SequentialFuture
[08:07:59.119] resolved() for SequentialFuture (<unnamed-2>) ...
[08:07:59.119] | state: ‘finished’
[08:07:59.119] | run: TRUE
[08:07:59.119] | result: ‘FutureResult’
[08:07:59.119] resolved() for SequentialFuture (<unnamed-2>) ... done
[08:07:59.119] SequentialFuture #3
[08:07:59.119] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:07:59.119] | nx: 6
[08:07:59.119] | relay: TRUE
[08:07:59.119] | stdout: TRUE
[08:07:59.120] | signal: TRUE
[08:07:59.120] | resignal: FALSE
[08:07:59.120] | force: TRUE
[08:07:59.120] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.120] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.120] | until=3
[08:07:59.120] | relaying element #3
[08:07:59.120] | value() for SequentialFuture (<unnamed-2>) ...
[08:07:59.120] | : signalConditions() ...
[08:07:59.120] | : . include = ‘immediateCondition’
[08:07:59.121] | : . exclude = 
[08:07:59.121] | : . resignal = FALSE
[08:07:59.121] | : . Number of conditions: 6
[08:07:59.121] | : .  int 6
[08:07:59.121] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.121] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.121] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.122] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.122] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.122] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.122] | : signalConditions() ... done
[08:07:59.122] | : relay stdout ...
[08:07:59.122] | : relay stdout ... done
[08:07:59.122] | : check for misuse ...
[08:07:59.122] | : check for misuse ... done
[08:07:59.122] | value() for SequentialFuture (<unnamed-2>) ... done
[08:07:59.122] | signalConditions() ...
[08:07:59.123] | : include = ‘immediateCondition’
[08:07:59.123] | : exclude = 
[08:07:59.123] | : resignal = FALSE
[08:07:59.123] | : Number of conditions: 6
[08:07:59.123] | :  int 6
[08:07:59.123] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.123] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.123] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.124] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.124] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.124] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.124] | signalConditions() ... done
[08:07:59.124] | signalConditions() ...
[08:07:59.124] | : include = ‘condition’
[08:07:59.124] | : exclude = ‘error’, ‘immediateCondition’
[08:07:59.124] | : resignal = TRUE
[08:07:59.124] | : Number of conditions: 6
[08:07:59.124] | :  int 6
[08:07:59.125] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.125] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.069] | : . ' , attachPackages() ...
[08:07:59.125] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.125] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.069] | : . ' , ; packages: [n=1] ‘future’
[08:07:59.125] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.125] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.069] | : . ' , attachPackages() ... done
[08:07:59.126] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.126] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.069] | : . ' , attachPackages() ...
[08:07:59.126] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.126] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.070] | : . ' , ; packages: [n=0] 
[08:07:59.126] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.126] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.070] | : . ' , attachPackages() ... done
[08:07:59.126] | signalConditions() ... done
[08:07:59.126] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.126] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.127] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:07:59.127] value(<SequentialFuture>, ...) ...
[08:07:59.127] value(<SequentialFuture>, ...) ... done
[08:07:59.127] value() for SequentialFuture (<unnamed-2>) ...
[08:07:59.127] | signalConditions() ...
[08:07:59.127] | : include = ‘immediateCondition’
[08:07:59.127] | : exclude = 
[08:07:59.127] | : resignal = FALSE
[08:07:59.127] | : Number of conditions: 6
[08:07:59.127] | :  int 6
[08:07:59.128] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.128] | : already signaled, skipping
[08:07:59.129] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.129] | : already signaled, skipping
[08:07:59.129] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.129] | : already signaled, skipping
[08:07:59.129] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.129] | : already signaled, skipping
[08:07:59.129] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.129] | : already signaled, skipping
[08:07:59.130] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.130] | : already signaled, skipping
[08:07:59.130] | signalConditions() ... done
[08:07:59.130] | check for misuse ...
[08:07:59.130] | check for misuse ... done
[08:07:59.130] value() for SequentialFuture (<unnamed-2>) ... done
[08:07:59.130] value: <NULL>
[08:07:59.130] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:07:59.130] | nx: 6
[08:07:59.130] | relay: TRUE
[08:07:59.130] | stdout: TRUE
[08:07:59.131] | signal: TRUE
[08:07:59.131] | resignal: FALSE
[08:07:59.131] | force: TRUE
[08:07:59.131] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.131] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.131] | until=4
[08:07:59.131] | relaying element #4
[08:07:59.131] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.131] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.131] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:07:59.131] resolve() for SequentialFuture ...
[08:07:59.132] resolve() for SequentialFuture ... done
[08:07:59.132] length: 3 (resolved future 3)

[08:07:59.132] checking value #4:
[08:07:59.132] 'obj' is NULL
[08:07:59.132] signalConditionsASAP(NULL, pos=4) ...
[08:07:59.132] | nx: 6
[08:07:59.132] | relay: TRUE
[08:07:59.132] | stdout: TRUE
[08:07:59.132] | signal: TRUE
[08:07:59.132] | resignal: FALSE
[08:07:59.133] | force: TRUE
[08:07:59.133] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.133] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.133] | until=5
[08:07:59.133] | relaying element #5
[08:07:59.133] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:07:59.133] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.133] signalConditionsASAP(NULL, pos=4) ... done
[08:07:59.133] signalConditionsASAP(NULL, pos=4) ...
[08:07:59.133] | nx: 6
[08:07:59.133] | relay: TRUE
[08:07:59.133] | stdout: TRUE
[08:07:59.134] | signal: TRUE
[08:07:59.134] | resignal: FALSE
[08:07:59.134] | force: TRUE
[08:07:59.134] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:07:59.134] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.134] | until=5
[08:07:59.134] | relaying element #5
[08:07:59.134] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:07:59.134] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.134] signalConditionsASAP(NULL, pos=4) ... done
[08:07:59.134] length: 2 (resolved future 4)

[08:07:59.135] checking value #5:
[08:07:59.135] 'obj' is NULL
[08:07:59.135] signalConditionsASAP(NULL, pos=5) ...
[08:07:59.135] | nx: 6
[08:07:59.135] | relay: TRUE
[08:07:59.135] | stdout: TRUE
[08:07:59.135] | signal: TRUE
[08:07:59.135] | resignal: FALSE
[08:07:59.135] | force: TRUE
[08:07:59.135] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:07:59.135] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.136] | until=6
[08:07:59.136] | relaying element #6
[08:07:59.136] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:07:59.136] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.136] signalConditionsASAP(NULL, pos=5) ... done
[08:07:59.136] signalConditionsASAP(NULL, pos=5) ...
[08:07:59.136] | nx: 6
[08:07:59.136] | relay: TRUE
[08:07:59.136] | stdout: TRUE
[08:07:59.136] | signal: TRUE
[08:07:59.136] | resignal: FALSE
[08:07:59.137] | force: TRUE
[08:07:59.137] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:07:59.137] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.137] | until=6
[08:07:59.137] | relaying element #6
[08:07:59.137] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:07:59.137] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.137] signalConditionsASAP(NULL, pos=5) ... done
[08:07:59.137] length: 1 (resolved future 5)

[08:07:59.137] checking value #6:
[08:07:59.138] 'obj' is atomic
[08:07:59.138] signalConditionsASAP(numeric, pos=6) ...
[08:07:59.138] | nx: 6
[08:07:59.138] | relay: TRUE
[08:07:59.138] | stdout: TRUE
[08:07:59.138] | signal: TRUE
[08:07:59.138] | resignal: FALSE
[08:07:59.138] | force: TRUE
[08:07:59.138] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:07:59.138] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.138] | until=6
[08:07:59.138] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:07:59.139] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.139] signalConditionsASAP(numeric, pos=6) ... done
[08:07:59.139] length: 0 (resolved future 6)

[08:07:59.139] Relaying remaining futures ...
[08:07:59.139] | signalConditionsASAP(NULL, pos=0) ...
[08:07:59.139] | : nx: 6
[08:07:59.139] | : relay: TRUE
[08:07:59.139] | : stdout: TRUE
[08:07:59.139] | : signal: TRUE
[08:07:59.139] | : resignal: FALSE
[08:07:59.139] | : force: TRUE
[08:07:59.140] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:07:59.140] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:07:59.140] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:07:59.140] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.140] | signalConditionsASAP(NULL, pos=0) ... done
[08:07:59.140] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
Dimensions: c(1, 6)
[08:07:59.142] future(..., label = NULL) ...
[08:07:59.142] | lazy: FALSE
[08:07:59.142] | stdout: TRUE
[08:07:59.142] | conditions: [n=1] ‘condition’
[08:07:59.143] | gc: FALSE
[08:07:59.143] | earlySignal: FALSE
[08:07:59.143] | getGlobalsAndPackages() ...
[08:07:59.143] | : Searching for globals ...
[08:07:59.144] | : . globals found: [0] 
[08:07:59.144] | : Searching for globals ... done
[08:07:59.144] | : globals: [0] <none>
[08:07:59.144] | : packages: [0] <none>
[08:07:59.144] | getGlobalsAndPackages() ... done
[08:07:59.145] | run() for ‘Future’ (<unnamed-3>) ...
[08:07:59.145] | : state: ‘created’
[08:07:59.145] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.145] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.145] | : Using SequentialFutureBackend ...
[08:07:59.145] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:07:59.145] | : . Launching futures ...
[08:07:59.145] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:59.145] | : . ' , getFutureData() ...
[08:07:59.146] | : . ' , ; getFutureCore() ...
[08:07:59.146] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:59.146] | : . ' , ; getFutureCore() ... done
[08:07:59.146] | : . ' , ; getFutureCapture() ...
[08:07:59.146] | : . ' , ; getFutureCapture() ... done
[08:07:59.146] | : . ' , ; getFutureContext() ...
[08:07:59.146] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.146] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:59.146] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.146] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:59.147] | : . ' , ; getFutureContext() ... done
[08:07:59.147] | : . ' , getFutureData() ... done
[08:07:59.149] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.149] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:59.149] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.149] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.149] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.149] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:59.150] | : . ' , ; ` | New stack:
[08:07:59.150] | : . ' , ; ` | List of 1
[08:07:59.150] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.150] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.150] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:59.150] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.150] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.150] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.150] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.150] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.152] | : . ' , ; ` | Old stack:
[08:07:59.152] | : . ' , ; ` | List of 1
[08:07:59.152] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.152] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.152] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:59.152] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.152] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.152] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.152] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:59.152] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.152] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.152] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.152] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.155] | : . ' , ; ` | Not identical
[08:07:59.155] | : . ' , ; ` | all.equal() for future ...
[08:07:59.155] | : . ' , ; ` | : List of 2
[08:07:59.155] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.155] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.155] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:59.155] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.155] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.155] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.155] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.155] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.155] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.155] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.155] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.155] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.155] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.155] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.155] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.155] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.155] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.160] | : . ' , ; ` | all.equal() for future ... done
[08:07:59.160] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:59.160] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.161] | : . ' , ; ` List of future strategies:
[08:07:59.161] | : . ' , ; ` 1. sequential:
[08:07:59.161] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.161] | : . ' , ; `    - tweaked: FALSE
[08:07:59.161] | : . ' , ; `    - call: plan(sequential)
[08:07:59.161] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.161] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.163] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.163] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.163] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.163] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:59.163] | : . ' , ; ` | : New stack:
[08:07:59.163] | : . ' , ; ` | : List of 1
[08:07:59.163] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.163] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.163] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.163] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.163] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.163] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.163] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.163] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.163] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.163] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.163] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.167] | : . ' , ; ` | : Old stack:
[08:07:59.167] | : . ' , ; ` | : List of 1
[08:07:59.167] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.167] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.167] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.167] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.167] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.167] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.167] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.167] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.167] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.167] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.167] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.170] | : . ' , ; ` | : Identical
[08:07:59.170] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:59.170] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.170] | : . ' , ; ` | List of future strategies:
[08:07:59.170] | : . ' , ; ` | 1. sequential:
[08:07:59.170] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.170] | : . ' , ; ` |    - tweaked: FALSE
[08:07:59.170] | : . ' , ; ` |    - call: plan(sequential)
[08:07:59.171] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.171] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.171] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.171] | : . ' , SequentialFuture started (and completed)
[08:07:59.171] | : . ' , signalConditions() ...
[08:07:59.172] | : . ' , ; include = ‘immediateCondition’
[08:07:59.172] | : . ' , ; exclude = 
[08:07:59.172] | : . ' , ; resignal = FALSE
[08:07:59.172] | : . ' , ; Number of conditions: 6
[08:07:59.172] | : . ' , ;  int 6
[08:07:59.172] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.172] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.173] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.173] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.173] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.173] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.173] | : . ' , signalConditions() ... done
[08:07:59.173] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:59.173] | : . Launching futures ... done
[08:07:59.173] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:59.173] | : Using SequentialFutureBackend ... done
[08:07:59.173] | run() for ‘Future’ (<unnamed-3>) ... done
[08:07:59.174] future(..., label = NULL) ... done
[08:07:59.174] future(..., label = NULL) ...
[08:07:59.174] | lazy: FALSE
[08:07:59.174] | stdout: TRUE
[08:07:59.174] | conditions: [n=1] ‘condition’
[08:07:59.174] | gc: FALSE
[08:07:59.174] | earlySignal: FALSE
[08:07:59.174] | getGlobalsAndPackages() ...
[08:07:59.174] | : Searching for globals ...
[08:07:59.175] | : . globals found: [0] 
[08:07:59.175] | : Searching for globals ... done
[08:07:59.176] | : globals: [0] <none>
[08:07:59.176] | : packages: [0] <none>
[08:07:59.176] | getGlobalsAndPackages() ... done
[08:07:59.176] | run() for ‘Future’ (<unnamed-4>) ...
[08:07:59.176] | : state: ‘created’
[08:07:59.176] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.176] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.176] | : Using SequentialFutureBackend ...
[08:07:59.176] | : . Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:07:59.177] | : . Launching futures ...
[08:07:59.177] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:59.177] | : . ' , getFutureData() ...
[08:07:59.177] | : . ' , ; getFutureCore() ...
[08:07:59.177] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:59.177] | : . ' , ; getFutureCore() ... done
[08:07:59.177] | : . ' , ; getFutureCapture() ...
[08:07:59.177] | : . ' , ; getFutureCapture() ... done
[08:07:59.177] | : . ' , ; getFutureContext() ...
[08:07:59.177] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.178] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:59.178] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.178] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:59.178] | : . ' , ; getFutureContext() ... done
[08:07:59.178] | : . ' , getFutureData() ... done
[08:07:59.179] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.179] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:59.179] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.180] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.180] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.180] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:59.180] | : . ' , ; ` | New stack:
[08:07:59.180] | : . ' , ; ` | List of 1
[08:07:59.180] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.180] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.180] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:59.180] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.180] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.180] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.180] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.180] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.182] | : . ' , ; ` | Old stack:
[08:07:59.183] | : . ' , ; ` | List of 1
[08:07:59.183] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.183] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.183] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:59.183] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.183] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.183] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.183] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:59.183] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.183] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.183] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.183] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.186] | : . ' , ; ` | Not identical
[08:07:59.186] | : . ' , ; ` | all.equal() for future ...
[08:07:59.187] | : . ' , ; ` | : List of 2
[08:07:59.187] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.187] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.187] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:59.187] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.187] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.187] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.187] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.187] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.187] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.187] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.187] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.187] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.187] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.187] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.187] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.187] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.187] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.191] | : . ' , ; ` | all.equal() for future ... done
[08:07:59.192] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:59.192] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.192] | : . ' , ; ` List of future strategies:
[08:07:59.192] | : . ' , ; ` 1. sequential:
[08:07:59.192] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.192] | : . ' , ; `    - tweaked: FALSE
[08:07:59.192] | : . ' , ; `    - call: plan(sequential)
[08:07:59.192] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.192] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.194] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.194] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.194] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.194] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:59.194] | : . ' , ; ` | : New stack:
[08:07:59.194] | : . ' , ; ` | : List of 1
[08:07:59.194] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.194] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.194] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.194] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.194] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.194] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.194] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.194] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.194] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.194] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.194] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.197] | : . ' , ; ` | : Old stack:
[08:07:59.197] | : . ' , ; ` | : List of 1
[08:07:59.197] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.197] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.197] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.197] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.197] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.197] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.197] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.197] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.197] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.197] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.197] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.200] | : . ' , ; ` | : Identical
[08:07:59.200] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:59.201] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.201] | : . ' , ; ` | List of future strategies:
[08:07:59.201] | : . ' , ; ` | 1. sequential:
[08:07:59.201] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.201] | : . ' , ; ` |    - tweaked: FALSE
[08:07:59.201] | : . ' , ; ` |    - call: plan(sequential)
[08:07:59.201] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.201] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.201] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.202] | : . ' , SequentialFuture started (and completed)
[08:07:59.202] | : . ' , signalConditions() ...
[08:07:59.202] | : . ' , ; include = ‘immediateCondition’
[08:07:59.202] | : . ' , ; exclude = 
[08:07:59.202] | : . ' , ; resignal = FALSE
[08:07:59.202] | : . ' , ; Number of conditions: 6
[08:07:59.202] | : . ' , ;  int 6
[08:07:59.203] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.203] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.203] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.204] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.204] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.204] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.204] | : . ' , signalConditions() ... done
[08:07:59.204] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:59.204] | : . Launching futures ... done
[08:07:59.204] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:59.204] | : Using SequentialFutureBackend ... done
[08:07:59.205] | run() for ‘Future’ (<unnamed-4>) ... done
[08:07:59.205] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x55675ab4c4c0> 
 $ c:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x55675a25a678> 
 $  : NULL
 $  : NULL
 $  : num 6
List of 6
 $ a: num 1
 $ b:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x55675ab4c4c0> 
 $ c:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x55675a25a678> 
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 1 6
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
[08:07:59.209] resolved() for matrix ...
[08:07:59.209] | Number of elements: 6
[08:07:59.210] | Number of futures: 6
[08:07:59.210] | resolved() for SequentialFuture (<unnamed-3>) ...
[08:07:59.210] | : state: ‘finished’
[08:07:59.210] | : run: TRUE
[08:07:59.210] | : result: ‘FutureResult’
[08:07:59.210] | resolved() for SequentialFuture (<unnamed-3>) ... done
[08:07:59.210] | resolved() for SequentialFuture (<unnamed-4>) ...
[08:07:59.210] | : state: ‘finished’
[08:07:59.210] | : run: TRUE
[08:07:59.210] | : result: ‘FutureResult’
[08:07:59.211] | resolved() for SequentialFuture (<unnamed-4>) ... done
[08:07:59.211] resolved() for matrix ... done
 logi [1, 1:6] TRUE TRUE TRUE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
 - attr(*, "names")= chr [1:6] "a" "b" "c" "" ...
[08:07:59.212] value() for matrix ...
[08:07:59.212] | recursive: 0
[08:07:59.212] | reduce: FALSE
[08:07:59.213] | length: 6
[08:07:59.213] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:07:59.213] | Number of remaining objects: 6
[08:07:59.213] | checking value #1:
[08:07:59.213] | 'obj' is atomic
[08:07:59.213] | signalConditionsASAP(numeric, pos=1) ...
[08:07:59.213] | : nx: 6
[08:07:59.213] | : relay: TRUE
[08:07:59.213] | : stdout: TRUE
[08:07:59.214] | : signal: TRUE
[08:07:59.214] | : resignal: FALSE
[08:07:59.214] | : force: TRUE
[08:07:59.214] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.214] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.214] | : until=2
[08:07:59.214] | : relaying element #2
[08:07:59.214] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.214] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.214] | signalConditionsASAP(numeric, pos=1) ... done
[08:07:59.215] | length: 5 (resolved future 1)
[08:07:59.215] value() for matrix ... done
[08:07:59.215] checking value #2:
[08:07:59.215] 'obj' is SequentialFuture
[08:07:59.215] resolved() for SequentialFuture (<unnamed-3>) ...
[08:07:59.215] | state: ‘finished’
[08:07:59.215] | run: TRUE
[08:07:59.215] | result: ‘FutureResult’
[08:07:59.215] resolved() for SequentialFuture (<unnamed-3>) ... done
[08:07:59.215] SequentialFuture #2
[08:07:59.215] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:07:59.216] | nx: 6
[08:07:59.216] | relay: TRUE
[08:07:59.216] | stdout: TRUE
[08:07:59.216] | signal: TRUE
[08:07:59.216] | resignal: FALSE
[08:07:59.216] | force: TRUE
[08:07:59.216] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.216] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.216] | until=2
[08:07:59.216] | relaying element #2
[08:07:59.216] | value() for SequentialFuture (<unnamed-3>) ...
[08:07:59.217] | : signalConditions() ...
[08:07:59.217] | : . include = ‘immediateCondition’
[08:07:59.217] | : . exclude = 
[08:07:59.217] | : . resignal = FALSE
[08:07:59.217] | : . Number of conditions: 6
[08:07:59.217] | : .  int 6
[08:07:59.217] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.218] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.218] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.218] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.218] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.218] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.218] | : signalConditions() ... done
[08:07:59.218] | : relay stdout ...
[08:07:59.218] | : relay stdout ... done
[08:07:59.218] | : check for misuse ...
[08:07:59.218] | : check for misuse ... done
[08:07:59.219] | value() for SequentialFuture (<unnamed-3>) ... done
[08:07:59.219] | signalConditions() ...
[08:07:59.219] | : include = ‘immediateCondition’
[08:07:59.219] | : exclude = 
[08:07:59.219] | : resignal = FALSE
[08:07:59.219] | : Number of conditions: 6
[08:07:59.219] | :  int 6
[08:07:59.220] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.220] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.220] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.220] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.220] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.220] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.220] | signalConditions() ... done
[08:07:59.220] | signalConditions() ...
[08:07:59.220] | : include = ‘condition’
[08:07:59.220] | : exclude = ‘error’, ‘immediateCondition’
[08:07:59.221] | : resignal = TRUE
[08:07:59.221] | : Number of conditions: 6
[08:07:59.221] | :  int 6
[08:07:59.221] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.221] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.148] | : . ' , attachPackages() ...
[08:07:59.221] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.221] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.148] | : . ' , ; packages: [n=1] ‘future’
[08:07:59.222] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.222] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.148] | : . ' , attachPackages() ... done
[08:07:59.222] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.223] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.148] | : . ' , attachPackages() ...
[08:07:59.223] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.223] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.148] | : . ' , ; packages: [n=0] 
[08:07:59.223] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.223] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.148] | : . ' , attachPackages() ... done
[08:07:59.223] | signalConditions() ... done
[08:07:59.224] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.224] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.224] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:07:59.224] value(<SequentialFuture>, ...) ...
[08:07:59.224] value(<SequentialFuture>, ...) ... done
[08:07:59.224] value() for SequentialFuture (<unnamed-3>) ...
[08:07:59.224] | signalConditions() ...
[08:07:59.224] | : include = ‘immediateCondition’
[08:07:59.224] | : exclude = 
[08:07:59.224] | : resignal = FALSE
[08:07:59.225] | : Number of conditions: 6
[08:07:59.225] | :  int 6
[08:07:59.225] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.225] | : already signaled, skipping
[08:07:59.225] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.225] | : already signaled, skipping
[08:07:59.225] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.225] | : already signaled, skipping
[08:07:59.226] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.226] | : already signaled, skipping
[08:07:59.226] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.226] | : already signaled, skipping
[08:07:59.226] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.226] | : already signaled, skipping
[08:07:59.226] | signalConditions() ... done
[08:07:59.226] | check for misuse ...
[08:07:59.226] | check for misuse ... done
[08:07:59.226] value() for SequentialFuture (<unnamed-3>) ... done
[08:07:59.226] value: <numeric>
[08:07:59.227] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:07:59.227] | nx: 6
[08:07:59.227] | relay: TRUE
[08:07:59.227] | stdout: TRUE
[08:07:59.227] | signal: TRUE
[08:07:59.227] | resignal: FALSE
[08:07:59.227] | force: TRUE
[08:07:59.227] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.227] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.227] | until=3
[08:07:59.227] | relaying element #3
[08:07:59.228] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.228] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.228] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:07:59.228] resolve() for SequentialFuture ...
[08:07:59.228] resolve() for SequentialFuture ... done
[08:07:59.228] length: 4 (resolved future 2)

[08:07:59.228] checking value #3:
[08:07:59.228] 'obj' is SequentialFuture
[08:07:59.228] resolved() for SequentialFuture (<unnamed-4>) ...
[08:07:59.228] | state: ‘finished’
[08:07:59.229] | run: TRUE
[08:07:59.229] | result: ‘FutureResult’
[08:07:59.229] resolved() for SequentialFuture (<unnamed-4>) ... done
[08:07:59.229] SequentialFuture #3
[08:07:59.229] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:07:59.229] | nx: 6
[08:07:59.229] | relay: TRUE
[08:07:59.229] | stdout: TRUE
[08:07:59.229] | signal: TRUE
[08:07:59.229] | resignal: FALSE
[08:07:59.229] | force: TRUE
[08:07:59.230] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.230] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.230] | until=3
[08:07:59.230] | relaying element #3
[08:07:59.230] | value() for SequentialFuture (<unnamed-4>) ...
[08:07:59.230] | : signalConditions() ...
[08:07:59.230] | : . include = ‘immediateCondition’
[08:07:59.230] | : . exclude = 
[08:07:59.230] | : . resignal = FALSE
[08:07:59.230] | : . Number of conditions: 6
[08:07:59.230] | : .  int 6
[08:07:59.231] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.231] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.231] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.231] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.231] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.231] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.231] | : signalConditions() ... done
[08:07:59.232] | : relay stdout ...
[08:07:59.232] | : relay stdout ... done
[08:07:59.232] | : check for misuse ...
[08:07:59.232] | : check for misuse ... done
[08:07:59.232] | value() for SequentialFuture (<unnamed-4>) ... done
[08:07:59.232] | signalConditions() ...
[08:07:59.232] | : include = ‘immediateCondition’
[08:07:59.232] | : exclude = 
[08:07:59.232] | : resignal = FALSE
[08:07:59.232] | : Number of conditions: 6
[08:07:59.232] | :  int 6
[08:07:59.233] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.233] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.233] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.233] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.233] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.233] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.233] | signalConditions() ... done
[08:07:59.234] | signalConditions() ...
[08:07:59.234] | : include = ‘condition’
[08:07:59.234] | : exclude = ‘error’, ‘immediateCondition’
[08:07:59.234] | : resignal = TRUE
[08:07:59.234] | : Number of conditions: 6
[08:07:59.234] | :  int 6
[08:07:59.234] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.235] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.178] | : . ' , attachPackages() ...
[08:07:59.235] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.235] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.178] | : . ' , ; packages: [n=1] ‘future’
[08:07:59.235] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.235] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.178] | : . ' , attachPackages() ... done
[08:07:59.235] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.235] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.179] | : . ' , attachPackages() ...
[08:07:59.235] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.236] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.179] | : . ' , ; packages: [n=0] 
[08:07:59.236] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.236] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.179] | : . ' , attachPackages() ... done
[08:07:59.236] | signalConditions() ... done
[08:07:59.236] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.236] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.236] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:07:59.236] value(<SequentialFuture>, ...) ...
[08:07:59.236] value(<SequentialFuture>, ...) ... done
[08:07:59.236] value() for SequentialFuture (<unnamed-4>) ...
[08:07:59.237] | signalConditions() ...
[08:07:59.237] | : include = ‘immediateCondition’
[08:07:59.237] | : exclude = 
[08:07:59.237] | : resignal = FALSE
[08:07:59.237] | : Number of conditions: 6
[08:07:59.237] | :  int 6
[08:07:59.237] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.237] | : already signaled, skipping
[08:07:59.238] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.238] | : already signaled, skipping
[08:07:59.238] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.238] | : already signaled, skipping
[08:07:59.238] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.238] | : already signaled, skipping
[08:07:59.238] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.238] | : already signaled, skipping
[08:07:59.238] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.238] | : already signaled, skipping
[08:07:59.239] | signalConditions() ... done
[08:07:59.239] | check for misuse ...
[08:07:59.239] | check for misuse ... done
[08:07:59.239] value() for SequentialFuture (<unnamed-4>) ... done
[08:07:59.239] value: <NULL>
[08:07:59.239] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:07:59.239] | nx: 6
[08:07:59.239] | relay: TRUE
[08:07:59.239] | stdout: TRUE
[08:07:59.239] | signal: TRUE
[08:07:59.239] | resignal: FALSE
[08:07:59.240] | force: TRUE
[08:07:59.240] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.240] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.240] | until=4
[08:07:59.240] | relaying element #4
[08:07:59.240] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.240] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.240] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:07:59.240] resolve() for SequentialFuture ...
[08:07:59.240] resolve() for SequentialFuture ... done
[08:07:59.242] length: 3 (resolved future 3)

[08:07:59.242] checking value #4:
[08:07:59.242] 'obj' is NULL
[08:07:59.242] signalConditionsASAP(NULL, pos=4) ...
[08:07:59.242] | nx: 6
[08:07:59.242] | relay: TRUE
[08:07:59.242] | stdout: TRUE
[08:07:59.242] | signal: TRUE
[08:07:59.242] | resignal: FALSE
[08:07:59.242] | force: TRUE
[08:07:59.242] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.243] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.243] | until=5
[08:07:59.243] | relaying element #5
[08:07:59.243] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:07:59.243] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.243] signalConditionsASAP(NULL, pos=4) ... done
[08:07:59.243] signalConditionsASAP(NULL, pos=4) ...
[08:07:59.243] | nx: 6
[08:07:59.243] | relay: TRUE
[08:07:59.243] | stdout: TRUE
[08:07:59.244] | signal: TRUE
[08:07:59.244] | resignal: FALSE
[08:07:59.244] | force: TRUE
[08:07:59.244] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:07:59.244] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.244] | until=5
[08:07:59.244] | relaying element #5
[08:07:59.244] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:07:59.244] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.244] signalConditionsASAP(NULL, pos=4) ... done
[08:07:59.244] length: 2 (resolved future 4)

[08:07:59.245] checking value #5:
[08:07:59.245] 'obj' is NULL
[08:07:59.245] signalConditionsASAP(NULL, pos=5) ...
[08:07:59.245] | nx: 6
[08:07:59.245] | relay: TRUE
[08:07:59.245] | stdout: TRUE
[08:07:59.245] | signal: TRUE
[08:07:59.245] | resignal: FALSE
[08:07:59.245] | force: TRUE
[08:07:59.245] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:07:59.245] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.246] | until=6
[08:07:59.246] | relaying element #6
[08:07:59.246] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:07:59.246] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.246] signalConditionsASAP(NULL, pos=5) ... done
[08:07:59.246] signalConditionsASAP(NULL, pos=5) ...
[08:07:59.246] | nx: 6
[08:07:59.246] | relay: TRUE
[08:07:59.246] | stdout: TRUE
[08:07:59.246] | signal: TRUE
[08:07:59.246] | resignal: FALSE
[08:07:59.246] | force: TRUE
[08:07:59.247] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:07:59.247] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.247] | until=6
[08:07:59.247] | relaying element #6
[08:07:59.247] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:07:59.247] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.247] signalConditionsASAP(NULL, pos=5) ... done
[08:07:59.247] length: 1 (resolved future 5)

[08:07:59.247] checking value #6:
[08:07:59.247] 'obj' is atomic
[08:07:59.248] signalConditionsASAP(numeric, pos=6) ...
[08:07:59.248] | nx: 6
[08:07:59.248] | relay: TRUE
[08:07:59.248] | stdout: TRUE
[08:07:59.248] | signal: TRUE
[08:07:59.248] | resignal: FALSE
[08:07:59.248] | force: TRUE
[08:07:59.248] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:07:59.248] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.248] | until=6
[08:07:59.248] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:07:59.249] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.249] signalConditionsASAP(numeric, pos=6) ... done
[08:07:59.249] length: 0 (resolved future 6)

[08:07:59.249] Relaying remaining futures ...
[08:07:59.249] | signalConditionsASAP(NULL, pos=0) ...
[08:07:59.249] | : nx: 6
[08:07:59.249] | : relay: TRUE
[08:07:59.249] | : stdout: TRUE
[08:07:59.249] | : signal: TRUE
[08:07:59.249] | : resignal: FALSE
[08:07:59.250] | : force: TRUE
[08:07:59.250] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:07:59.250] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:07:59.250] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:07:59.250] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.250] | signalConditionsASAP(NULL, pos=0) ... done
[08:07:59.250] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 1 6
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
Dimensions: c(2, 3)
[08:07:59.253] future(..., label = NULL) ...
[08:07:59.253] | lazy: FALSE
[08:07:59.253] | stdout: TRUE
[08:07:59.254] | conditions: [n=1] ‘condition’
[08:07:59.254] | gc: FALSE
[08:07:59.254] | earlySignal: FALSE
[08:07:59.254] | getGlobalsAndPackages() ...
[08:07:59.254] | : Searching for globals ...
[08:07:59.255] | : . globals found: [0] 
[08:07:59.255] | : Searching for globals ... done
[08:07:59.255] | : globals: [0] <none>
[08:07:59.255] | : packages: [0] <none>
[08:07:59.255] | getGlobalsAndPackages() ... done
[08:07:59.256] | run() for ‘Future’ (<unnamed-5>) ...
[08:07:59.256] | : state: ‘created’
[08:07:59.256] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.256] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.256] | : Using SequentialFutureBackend ...
[08:07:59.256] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:07:59.256] | : . Launching futures ...
[08:07:59.256] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:59.257] | : . ' , getFutureData() ...
[08:07:59.257] | : . ' , ; getFutureCore() ...
[08:07:59.257] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:59.257] | : . ' , ; getFutureCore() ... done
[08:07:59.257] | : . ' , ; getFutureCapture() ...
[08:07:59.257] | : . ' , ; getFutureCapture() ... done
[08:07:59.257] | : . ' , ; getFutureContext() ...
[08:07:59.257] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.257] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:59.257] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.258] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:59.258] | : . ' , ; getFutureContext() ... done
[08:07:59.258] | : . ' , getFutureData() ... done
[08:07:59.259] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.259] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:59.260] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.260] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.260] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.261] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:59.261] | : . ' , ; ` | New stack:
[08:07:59.261] | : . ' , ; ` | List of 1
[08:07:59.261] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.261] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.261] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:59.261] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.261] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.261] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.261] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.261] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.263] | : . ' , ; ` | Old stack:
[08:07:59.263] | : . ' , ; ` | List of 1
[08:07:59.263] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.263] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.263] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:59.263] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.263] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.263] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.263] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:59.263] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.263] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.263] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.263] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.266] | : . ' , ; ` | Not identical
[08:07:59.266] | : . ' , ; ` | all.equal() for future ...
[08:07:59.266] | : . ' , ; ` | : List of 2
[08:07:59.266] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.266] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.266] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:59.266] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.266] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.266] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.266] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.266] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.266] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.266] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.266] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.266] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.266] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.266] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.266] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.266] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.266] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.271] | : . ' , ; ` | all.equal() for future ... done
[08:07:59.271] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:59.272] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.272] | : . ' , ; ` List of future strategies:
[08:07:59.272] | : . ' , ; ` 1. sequential:
[08:07:59.272] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.272] | : . ' , ; `    - tweaked: FALSE
[08:07:59.272] | : . ' , ; `    - call: plan(sequential)
[08:07:59.272] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.272] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.274] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.274] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.274] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.274] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:59.274] | : . ' , ; ` | : New stack:
[08:07:59.274] | : . ' , ; ` | : List of 1
[08:07:59.274] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.274] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.274] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.274] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.274] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.274] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.274] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.274] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.274] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.274] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.274] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.278] | : . ' , ; ` | : Old stack:
[08:07:59.278] | : . ' , ; ` | : List of 1
[08:07:59.278] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.278] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.278] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.278] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.278] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.278] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.278] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.278] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.278] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.278] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.278] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.281] | : . ' , ; ` | : Identical
[08:07:59.281] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:59.282] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.282] | : . ' , ; ` | List of future strategies:
[08:07:59.282] | : . ' , ; ` | 1. sequential:
[08:07:59.282] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.282] | : . ' , ; ` |    - tweaked: FALSE
[08:07:59.282] | : . ' , ; ` |    - call: plan(sequential)
[08:07:59.282] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.282] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.282] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.283] | : . ' , SequentialFuture started (and completed)
[08:07:59.283] | : . ' , signalConditions() ...
[08:07:59.283] | : . ' , ; include = ‘immediateCondition’
[08:07:59.283] | : . ' , ; exclude = 
[08:07:59.283] | : . ' , ; resignal = FALSE
[08:07:59.283] | : . ' , ; Number of conditions: 6
[08:07:59.283] | : . ' , ;  int 6
[08:07:59.284] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.284] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.284] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.284] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.284] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.284] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.284] | : . ' , signalConditions() ... done
[08:07:59.284] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:59.284] | : . Launching futures ... done
[08:07:59.285] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:59.285] | : Using SequentialFutureBackend ... done
[08:07:59.285] | run() for ‘Future’ (<unnamed-5>) ... done
[08:07:59.285] future(..., label = NULL) ... done
[08:07:59.285] future(..., label = NULL) ...
[08:07:59.285] | lazy: FALSE
[08:07:59.285] | stdout: TRUE
[08:07:59.285] | conditions: [n=1] ‘condition’
[08:07:59.285] | gc: FALSE
[08:07:59.285] | earlySignal: FALSE
[08:07:59.286] | getGlobalsAndPackages() ...
[08:07:59.286] | : Searching for globals ...
[08:07:59.287] | : . globals found: [0] 
[08:07:59.287] | : Searching for globals ... done
[08:07:59.287] | : globals: [0] <none>
[08:07:59.287] | : packages: [0] <none>
[08:07:59.287] | getGlobalsAndPackages() ... done
[08:07:59.287] | run() for ‘Future’ (<unnamed-6>) ...
[08:07:59.287] | : state: ‘created’
[08:07:59.288] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.288] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.288] | : Using SequentialFutureBackend ...
[08:07:59.288] | : . Number of futures since start: 5 (5 created, 5 launched, 5 finished)
[08:07:59.288] | : . Launching futures ...
[08:07:59.288] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:59.288] | : . ' , getFutureData() ...
[08:07:59.288] | : . ' , ; getFutureCore() ...
[08:07:59.288] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:59.288] | : . ' , ; getFutureCore() ... done
[08:07:59.289] | : . ' , ; getFutureCapture() ...
[08:07:59.289] | : . ' , ; getFutureCapture() ... done
[08:07:59.289] | : . ' , ; getFutureContext() ...
[08:07:59.289] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.289] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:59.289] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.289] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:59.289] | : . ' , ; getFutureContext() ... done
[08:07:59.289] | : . ' , getFutureData() ... done
[08:07:59.291] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.291] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:59.291] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.291] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.291] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.291] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:59.291] | : . ' , ; ` | New stack:
[08:07:59.292] | : . ' , ; ` | List of 1
[08:07:59.292] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.292] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.292] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:59.292] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.292] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.292] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.292] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.292] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.294] | : . ' , ; ` | Old stack:
[08:07:59.294] | : . ' , ; ` | List of 1
[08:07:59.294] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.294] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.294] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:59.294] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.294] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.294] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.294] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:59.294] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.294] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.294] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.294] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.298] | : . ' , ; ` | Not identical
[08:07:59.298] | : . ' , ; ` | all.equal() for future ...
[08:07:59.298] | : . ' , ; ` | : List of 2
[08:07:59.298] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.298] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.298] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:59.298] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.298] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.298] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.298] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.298] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.298] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.298] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.298] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.298] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.298] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.298] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.298] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.298] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.298] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.303] | : . ' , ; ` | all.equal() for future ... done
[08:07:59.303] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:59.303] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.304] | : . ' , ; ` List of future strategies:
[08:07:59.304] | : . ' , ; ` 1. sequential:
[08:07:59.304] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.304] | : . ' , ; `    - tweaked: FALSE
[08:07:59.304] | : . ' , ; `    - call: plan(sequential)
[08:07:59.304] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.304] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.305] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.306] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.306] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.306] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:59.306] | : . ' , ; ` | : New stack:
[08:07:59.306] | : . ' , ; ` | : List of 1
[08:07:59.306] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.306] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.306] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.306] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.306] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.306] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.306] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.306] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.306] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.306] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.306] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.309] | : . ' , ; ` | : Old stack:
[08:07:59.309] | : . ' , ; ` | : List of 1
[08:07:59.309] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.309] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.309] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.309] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.309] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.309] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.309] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.309] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.309] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.309] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.309] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.312] | : . ' , ; ` | : Identical
[08:07:59.312] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:59.312] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.313] | : . ' , ; ` | List of future strategies:
[08:07:59.313] | : . ' , ; ` | 1. sequential:
[08:07:59.313] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.313] | : . ' , ; ` |    - tweaked: FALSE
[08:07:59.313] | : . ' , ; ` |    - call: plan(sequential)
[08:07:59.313] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.313] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.313] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.313] | : . ' , SequentialFuture started (and completed)
[08:07:59.314] | : . ' , signalConditions() ...
[08:07:59.314] | : . ' , ; include = ‘immediateCondition’
[08:07:59.315] | : . ' , ; exclude = 
[08:07:59.315] | : . ' , ; resignal = FALSE
[08:07:59.315] | : . ' , ; Number of conditions: 6
[08:07:59.315] | : . ' , ;  int 6
[08:07:59.315] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.315] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.315] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.316] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.316] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.316] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.316] | : . ' , signalConditions() ... done
[08:07:59.316] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:59.316] | : . Launching futures ... done
[08:07:59.316] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:59.316] | : Using SequentialFutureBackend ... done
[08:07:59.316] | run() for ‘Future’ (<unnamed-6>) ... done
[08:07:59.316] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x55675aa55ef0> 
 $ c:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x55675a2338d8> 
 $  : NULL
 $  : NULL
 $  : num 6
List of 6
 $ a: num 1
 $ b:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x55675aa55ef0> 
 $ c:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x55675a2338d8> 
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 2 3
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
[08:07:59.321] resolved() for matrix ...
[08:07:59.321] | Number of elements: 6
[08:07:59.321] | Number of futures: 6
[08:07:59.321] | resolved() for SequentialFuture (<unnamed-5>) ...
[08:07:59.321] | : state: ‘finished’
[08:07:59.322] | : run: TRUE
[08:07:59.322] | : result: ‘FutureResult’
[08:07:59.322] | resolved() for SequentialFuture (<unnamed-5>) ... done
[08:07:59.322] | resolved() for SequentialFuture (<unnamed-6>) ...
[08:07:59.322] | : state: ‘finished’
[08:07:59.322] | : run: TRUE
[08:07:59.322] | : result: ‘FutureResult’
[08:07:59.322] | resolved() for SequentialFuture (<unnamed-6>) ... done
[08:07:59.322] resolved() for matrix ... done
 logi [1:2, 1:3] TRUE TRUE TRUE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "" ...
[08:07:59.324] value() for matrix ...
[08:07:59.324] | recursive: 0
[08:07:59.324] | reduce: FALSE
[08:07:59.324] | length: 6
[08:07:59.324] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:07:59.324] | Number of remaining objects: 6
[08:07:59.324] | checking value #1:
[08:07:59.325] | 'obj' is atomic
[08:07:59.325] | signalConditionsASAP(numeric, pos=1) ...
[08:07:59.325] | : nx: 6
[08:07:59.325] | : relay: TRUE
[08:07:59.325] | : stdout: TRUE
[08:07:59.325] | : signal: TRUE
[08:07:59.325] | : resignal: FALSE
[08:07:59.325] | : force: TRUE
[08:07:59.325] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.325] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.325] | : until=2
[08:07:59.325] | : relaying element #2
[08:07:59.326] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.326] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.326] | signalConditionsASAP(numeric, pos=1) ... done
[08:07:59.326] | length: 5 (resolved future 1)
[08:07:59.326] value() for matrix ... done
[08:07:59.326] checking value #2:
[08:07:59.326] 'obj' is SequentialFuture
[08:07:59.326] resolved() for SequentialFuture (<unnamed-5>) ...
[08:07:59.326] | state: ‘finished’
[08:07:59.326] | run: TRUE
[08:07:59.327] | result: ‘FutureResult’
[08:07:59.327] resolved() for SequentialFuture (<unnamed-5>) ... done
[08:07:59.327] SequentialFuture #2
[08:07:59.327] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:07:59.327] | nx: 6
[08:07:59.327] | relay: TRUE
[08:07:59.327] | stdout: TRUE
[08:07:59.327] | signal: TRUE
[08:07:59.327] | resignal: FALSE
[08:07:59.327] | force: TRUE
[08:07:59.327] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.327] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.328] | until=2
[08:07:59.328] | relaying element #2
[08:07:59.328] | value() for SequentialFuture (<unnamed-5>) ...
[08:07:59.328] | : signalConditions() ...
[08:07:59.328] | : . include = ‘immediateCondition’
[08:07:59.328] | : . exclude = 
[08:07:59.328] | : . resignal = FALSE
[08:07:59.328] | : . Number of conditions: 6
[08:07:59.328] | : .  int 6
[08:07:59.329] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.329] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.329] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.329] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.329] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.329] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.329] | : signalConditions() ... done
[08:07:59.329] | : relay stdout ...
[08:07:59.329] | : relay stdout ... done
[08:07:59.330] | : check for misuse ...
[08:07:59.330] | : check for misuse ... done
[08:07:59.330] | value() for SequentialFuture (<unnamed-5>) ... done
[08:07:59.330] | signalConditions() ...
[08:07:59.330] | : include = ‘immediateCondition’
[08:07:59.330] | : exclude = 
[08:07:59.330] | : resignal = FALSE
[08:07:59.330] | : Number of conditions: 6
[08:07:59.330] | :  int 6
[08:07:59.331] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.331] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.331] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.331] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.331] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.331] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.331] | signalConditions() ... done
[08:07:59.331] | signalConditions() ...
[08:07:59.332] | : include = ‘condition’
[08:07:59.332] | : exclude = ‘error’, ‘immediateCondition’
[08:07:59.357] | : resignal = TRUE
[08:07:59.357] | : Number of conditions: 6
[08:07:59.357] | :  int 6
[08:07:59.358] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.358] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.258] | : . ' , attachPackages() ...
[08:07:59.358] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.358] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.258] | : . ' , ; packages: [n=1] ‘future’
[08:07:59.358] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.358] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.258] | : . ' , attachPackages() ... done
[08:07:59.359] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.359] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.258] | : . ' , attachPackages() ...
[08:07:59.359] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.359] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.259] | : . ' , ; packages: [n=0] 
[08:07:59.359] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.359] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.259] | : . ' , attachPackages() ... done
[08:07:59.359] | signalConditions() ... done
[08:07:59.359] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.360] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.360] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:07:59.360] value(<SequentialFuture>, ...) ...
[08:07:59.360] value(<SequentialFuture>, ...) ... done
[08:07:59.360] value() for SequentialFuture (<unnamed-5>) ...
[08:07:59.360] | signalConditions() ...
[08:07:59.360] | : include = ‘immediateCondition’
[08:07:59.360] | : exclude = 
[08:07:59.360] | : resignal = FALSE
[08:07:59.360] | : Number of conditions: 6
[08:07:59.361] | :  int 6
[08:07:59.361] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.361] | : already signaled, skipping
[08:07:59.361] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.361] | : already signaled, skipping
[08:07:59.361] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.361] | : already signaled, skipping
[08:07:59.362] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.362] | : already signaled, skipping
[08:07:59.362] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.362] | : already signaled, skipping
[08:07:59.362] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.362] | : already signaled, skipping
[08:07:59.362] | signalConditions() ... done
[08:07:59.362] | check for misuse ...
[08:07:59.362] | check for misuse ... done
[08:07:59.362] value() for SequentialFuture (<unnamed-5>) ... done
[08:07:59.363] value: <numeric>
[08:07:59.363] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:07:59.363] | nx: 6
[08:07:59.363] | relay: TRUE
[08:07:59.363] | stdout: TRUE
[08:07:59.363] | signal: TRUE
[08:07:59.363] | resignal: FALSE
[08:07:59.363] | force: TRUE
[08:07:59.363] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.363] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.363] | until=3
[08:07:59.363] | relaying element #3
[08:07:59.364] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.364] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.364] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:07:59.364] resolve() for SequentialFuture ...
[08:07:59.364] resolve() for SequentialFuture ... done
[08:07:59.364] length: 4 (resolved future 2)

[08:07:59.364] checking value #3:
[08:07:59.364] 'obj' is SequentialFuture
[08:07:59.364] resolved() for SequentialFuture (<unnamed-6>) ...
[08:07:59.365] | state: ‘finished’
[08:07:59.365] | run: TRUE
[08:07:59.365] | result: ‘FutureResult’
[08:07:59.365] resolved() for SequentialFuture (<unnamed-6>) ... done
[08:07:59.365] SequentialFuture #3
[08:07:59.365] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:07:59.365] | nx: 6
[08:07:59.365] | relay: TRUE
[08:07:59.365] | stdout: TRUE
[08:07:59.365] | signal: TRUE
[08:07:59.365] | resignal: FALSE
[08:07:59.366] | force: TRUE
[08:07:59.366] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.366] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.366] | until=3
[08:07:59.366] | relaying element #3
[08:07:59.366] | value() for SequentialFuture (<unnamed-6>) ...
[08:07:59.366] | : signalConditions() ...
[08:07:59.366] | : . include = ‘immediateCondition’
[08:07:59.366] | : . exclude = 
[08:07:59.366] | : . resignal = FALSE
[08:07:59.367] | : . Number of conditions: 6
[08:07:59.367] | : .  int 6
[08:07:59.367] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.367] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.367] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.367] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.367] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.368] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.368] | : signalConditions() ... done
[08:07:59.368] | : relay stdout ...
[08:07:59.368] | : relay stdout ... done
[08:07:59.368] | : check for misuse ...
[08:07:59.368] | : check for misuse ... done
[08:07:59.368] | value() for SequentialFuture (<unnamed-6>) ... done
[08:07:59.368] | signalConditions() ...
[08:07:59.368] | : include = ‘immediateCondition’
[08:07:59.369] | : exclude = 
[08:07:59.369] | : resignal = FALSE
[08:07:59.369] | : Number of conditions: 6
[08:07:59.369] | :  int 6
[08:07:59.369] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.369] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.369] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.370] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.370] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.370] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.370] | signalConditions() ... done
[08:07:59.370] | signalConditions() ...
[08:07:59.370] | : include = ‘condition’
[08:07:59.370] | : exclude = ‘error’, ‘immediateCondition’
[08:07:59.370] | : resignal = TRUE
[08:07:59.370] | : Number of conditions: 6
[08:07:59.370] | :  int 6
[08:07:59.371] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.371] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.290] | : . ' , attachPackages() ...
[08:07:59.371] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.371] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.290] | : . ' , ; packages: [n=1] ‘future’
[08:07:59.371] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.371] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.290] | : . ' , attachPackages() ... done
[08:07:59.372] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.372] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.290] | : . ' , attachPackages() ...
[08:07:59.372] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.372] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.290] | : . ' , ; packages: [n=0] 
[08:07:59.372] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.372] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.290] | : . ' , attachPackages() ... done
[08:07:59.372] | signalConditions() ... done
[08:07:59.372] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.373] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.373] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:07:59.373] value(<SequentialFuture>, ...) ...
[08:07:59.373] value(<SequentialFuture>, ...) ... done
[08:07:59.373] value() for SequentialFuture (<unnamed-6>) ...
[08:07:59.373] | signalConditions() ...
[08:07:59.373] | : include = ‘immediateCondition’
[08:07:59.373] | : exclude = 
[08:07:59.373] | : resignal = FALSE
[08:07:59.373] | : Number of conditions: 6
[08:07:59.373] | :  int 6
[08:07:59.374] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.374] | : already signaled, skipping
[08:07:59.374] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.374] | : already signaled, skipping
[08:07:59.374] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.374] | : already signaled, skipping
[08:07:59.374] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.375] | : already signaled, skipping
[08:07:59.375] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.375] | : already signaled, skipping
[08:07:59.375] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.375] | : already signaled, skipping
[08:07:59.375] | signalConditions() ... done
[08:07:59.375] | check for misuse ...
[08:07:59.375] | check for misuse ... done
[08:07:59.375] value() for SequentialFuture (<unnamed-6>) ... done
[08:07:59.375] value: <NULL>
[08:07:59.376] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:07:59.376] | nx: 6
[08:07:59.376] | relay: TRUE
[08:07:59.376] | stdout: TRUE
[08:07:59.376] | signal: TRUE
[08:07:59.376] | resignal: FALSE
[08:07:59.376] | force: TRUE
[08:07:59.376] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.376] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.376] | until=4
[08:07:59.376] | relaying element #4
[08:07:59.377] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.377] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.377] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:07:59.377] resolve() for SequentialFuture ...
[08:07:59.377] resolve() for SequentialFuture ... done
[08:07:59.377] length: 3 (resolved future 3)

[08:07:59.377] checking value #4:
[08:07:59.377] 'obj' is NULL
[08:07:59.377] signalConditionsASAP(NULL, pos=4) ...
[08:07:59.378] | nx: 6
[08:07:59.378] | relay: TRUE
[08:07:59.378] | stdout: TRUE
[08:07:59.378] | signal: TRUE
[08:07:59.379] | resignal: FALSE
[08:07:59.379] | force: TRUE
[08:07:59.379] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.379] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.379] | until=5
[08:07:59.379] | relaying element #5
[08:07:59.379] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:07:59.379] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.379] signalConditionsASAP(NULL, pos=4) ... done
[08:07:59.379] signalConditionsASAP(NULL, pos=4) ...
[08:07:59.380] | nx: 6
[08:07:59.380] | relay: TRUE
[08:07:59.380] | stdout: TRUE
[08:07:59.380] | signal: TRUE
[08:07:59.380] | resignal: FALSE
[08:07:59.380] | force: TRUE
[08:07:59.380] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:07:59.380] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.380] | until=5
[08:07:59.380] | relaying element #5
[08:07:59.380] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:07:59.380] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.381] signalConditionsASAP(NULL, pos=4) ... done
[08:07:59.381] length: 2 (resolved future 4)

[08:07:59.381] checking value #5:
[08:07:59.381] 'obj' is NULL
[08:07:59.381] signalConditionsASAP(NULL, pos=5) ...
[08:07:59.381] | nx: 6
[08:07:59.381] | relay: TRUE
[08:07:59.381] | stdout: TRUE
[08:07:59.381] | signal: TRUE
[08:07:59.381] | resignal: FALSE
[08:07:59.382] | force: TRUE
[08:07:59.382] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:07:59.382] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.382] | until=6
[08:07:59.382] | relaying element #6
[08:07:59.382] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:07:59.382] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.382] signalConditionsASAP(NULL, pos=5) ... done
[08:07:59.382] signalConditionsASAP(NULL, pos=5) ...
[08:07:59.382] | nx: 6
[08:07:59.382] | relay: TRUE
[08:07:59.383] | stdout: TRUE
[08:07:59.383] | signal: TRUE
[08:07:59.383] | resignal: FALSE
[08:07:59.383] | force: TRUE
[08:07:59.383] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:07:59.383] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.383] | until=6
[08:07:59.383] | relaying element #6
[08:07:59.383] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:07:59.383] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.383] signalConditionsASAP(NULL, pos=5) ... done
[08:07:59.384] length: 1 (resolved future 5)

[08:07:59.384] checking value #6:
[08:07:59.384] 'obj' is atomic
[08:07:59.384] signalConditionsASAP(numeric, pos=6) ...
[08:07:59.384] | nx: 6
[08:07:59.384] | relay: TRUE
[08:07:59.384] | stdout: TRUE
[08:07:59.384] | signal: TRUE
[08:07:59.384] | resignal: FALSE
[08:07:59.384] | force: TRUE
[08:07:59.384] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:07:59.385] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.385] | until=6
[08:07:59.385] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:07:59.385] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.385] signalConditionsASAP(numeric, pos=6) ... done
[08:07:59.385] length: 0 (resolved future 6)

[08:07:59.385] Relaying remaining futures ...
[08:07:59.385] | signalConditionsASAP(NULL, pos=0) ...
[08:07:59.385] | : nx: 6
[08:07:59.385] | : relay: TRUE
[08:07:59.386] | : stdout: TRUE
[08:07:59.386] | : signal: TRUE
[08:07:59.386] | : resignal: FALSE
[08:07:59.386] | : force: TRUE
[08:07:59.386] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:07:59.386] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:07:59.386] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:07:59.386] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.386] | signalConditionsASAP(NULL, pos=0) ... done
[08:07:59.386] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 2 3
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
Dimensions: c(2, 3, 1)
[08:07:59.389] future(..., label = NULL) ...
[08:07:59.390] | lazy: FALSE
[08:07:59.390] | stdout: TRUE
[08:07:59.390] | conditions: [n=1] ‘condition’
[08:07:59.390] | gc: FALSE
[08:07:59.390] | earlySignal: FALSE
[08:07:59.390] | getGlobalsAndPackages() ...
[08:07:59.390] | : Searching for globals ...
[08:07:59.391] | : . globals found: [0] 
[08:07:59.391] | : Searching for globals ... done
[08:07:59.391] | : globals: [0] <none>
[08:07:59.392] | : packages: [0] <none>
[08:07:59.392] | getGlobalsAndPackages() ... done
[08:07:59.392] | run() for ‘Future’ (<unnamed-7>) ...
[08:07:59.392] | : state: ‘created’
[08:07:59.392] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.392] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.392] | : Using SequentialFutureBackend ...
[08:07:59.392] | : . Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:07:59.393] | : . Launching futures ...
[08:07:59.393] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:59.393] | : . ' , getFutureData() ...
[08:07:59.393] | : . ' , ; getFutureCore() ...
[08:07:59.393] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:59.393] | : . ' , ; getFutureCore() ... done
[08:07:59.393] | : . ' , ; getFutureCapture() ...
[08:07:59.393] | : . ' , ; getFutureCapture() ... done
[08:07:59.393] | : . ' , ; getFutureContext() ...
[08:07:59.393] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.394] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:59.394] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.394] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:59.394] | : . ' , ; getFutureContext() ... done
[08:07:59.394] | : . ' , getFutureData() ... done
[08:07:59.395] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.395] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:59.396] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.396] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.396] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.396] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:59.396] | : . ' , ; ` | New stack:
[08:07:59.396] | : . ' , ; ` | List of 1
[08:07:59.396] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.396] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.396] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:59.396] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.396] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.396] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.396] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.396] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.400] | : . ' , ; ` | Old stack:
[08:07:59.400] | : . ' , ; ` | List of 1
[08:07:59.400] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.400] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.400] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:59.400] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.400] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.400] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.400] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:59.400] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.400] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.400] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.400] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.403] | : . ' , ; ` | Not identical
[08:07:59.403] | : . ' , ; ` | all.equal() for future ...
[08:07:59.403] | : . ' , ; ` | : List of 2
[08:07:59.403] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.403] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.403] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:59.403] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.403] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.403] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.403] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.403] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.403] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.403] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.403] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.403] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.403] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.403] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.403] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.403] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.403] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.408] | : . ' , ; ` | all.equal() for future ... done
[08:07:59.408] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:59.408] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.408] | : . ' , ; ` List of future strategies:
[08:07:59.408] | : . ' , ; ` 1. sequential:
[08:07:59.408] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.408] | : . ' , ; `    - tweaked: FALSE
[08:07:59.408] | : . ' , ; `    - call: plan(sequential)
[08:07:59.409] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.409] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.410] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.410] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.410] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.411] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:59.411] | : . ' , ; ` | : New stack:
[08:07:59.411] | : . ' , ; ` | : List of 1
[08:07:59.411] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.411] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.411] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.411] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.411] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.411] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.411] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.411] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.411] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.411] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.411] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.414] | : . ' , ; ` | : Old stack:
[08:07:59.414] | : . ' , ; ` | : List of 1
[08:07:59.414] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.414] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.414] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.414] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.414] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.414] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.414] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.414] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.414] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.414] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.414] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.417] | : . ' , ; ` | : Identical
[08:07:59.417] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:59.417] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.417] | : . ' , ; ` | List of future strategies:
[08:07:59.417] | : . ' , ; ` | 1. sequential:
[08:07:59.417] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.417] | : . ' , ; ` |    - tweaked: FALSE
[08:07:59.417] | : . ' , ; ` |    - call: plan(sequential)
[08:07:59.418] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.419] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.419] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.419] | : . ' , SequentialFuture started (and completed)
[08:07:59.419] | : . ' , signalConditions() ...
[08:07:59.419] | : . ' , ; include = ‘immediateCondition’
[08:07:59.419] | : . ' , ; exclude = 
[08:07:59.419] | : . ' , ; resignal = FALSE
[08:07:59.419] | : . ' , ; Number of conditions: 6
[08:07:59.420] | : . ' , ;  int 6
[08:07:59.420] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.420] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.420] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.420] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.420] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.420] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.421] | : . ' , signalConditions() ... done
[08:07:59.421] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:59.421] | : . Launching futures ... done
[08:07:59.421] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:59.421] | : Using SequentialFutureBackend ... done
[08:07:59.421] | run() for ‘Future’ (<unnamed-7>) ... done
[08:07:59.421] future(..., label = NULL) ... done
[08:07:59.421] future(..., label = NULL) ...
[08:07:59.421] | lazy: FALSE
[08:07:59.421] | stdout: TRUE
[08:07:59.422] | conditions: [n=1] ‘condition’
[08:07:59.422] | gc: FALSE
[08:07:59.422] | earlySignal: FALSE
[08:07:59.422] | getGlobalsAndPackages() ...
[08:07:59.422] | : Searching for globals ...
[08:07:59.423] | : . globals found: [0] 
[08:07:59.423] | : Searching for globals ... done
[08:07:59.423] | : globals: [0] <none>
[08:07:59.423] | : packages: [0] <none>
[08:07:59.423] | getGlobalsAndPackages() ... done
[08:07:59.424] | run() for ‘Future’ (<unnamed-8>) ...
[08:07:59.424] | : state: ‘created’
[08:07:59.424] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.424] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.424] | : Using SequentialFutureBackend ...
[08:07:59.424] | : . Number of futures since start: 7 (7 created, 7 launched, 7 finished)
[08:07:59.424] | : . Launching futures ...
[08:07:59.424] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:59.424] | : . ' , getFutureData() ...
[08:07:59.425] | : . ' , ; getFutureCore() ...
[08:07:59.425] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:59.425] | : . ' , ; getFutureCore() ... done
[08:07:59.425] | : . ' , ; getFutureCapture() ...
[08:07:59.425] | : . ' , ; getFutureCapture() ... done
[08:07:59.425] | : . ' , ; getFutureContext() ...
[08:07:59.425] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.425] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:59.425] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.425] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:59.426] | : . ' , ; getFutureContext() ... done
[08:07:59.426] | : . ' , getFutureData() ... done
[08:07:59.427] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.427] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:59.427] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.427] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.427] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.428] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:59.428] | : . ' , ; ` | New stack:
[08:07:59.428] | : . ' , ; ` | List of 1
[08:07:59.428] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.428] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.428] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:59.428] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.428] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.428] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.428] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.428] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.430] | : . ' , ; ` | Old stack:
[08:07:59.430] | : . ' , ; ` | List of 1
[08:07:59.430] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.430] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.430] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:59.430] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.430] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.430] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.430] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:59.430] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.430] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.430] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.430] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.433] | : . ' , ; ` | Not identical
[08:07:59.433] | : . ' , ; ` | all.equal() for future ...
[08:07:59.434] | : . ' , ; ` | : List of 2
[08:07:59.434] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.434] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.434] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:59.434] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.434] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.434] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.434] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.434] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.434] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.434] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.434] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.434] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.434] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.434] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.434] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.434] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.434] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.440] | : . ' , ; ` | all.equal() for future ... done
[08:07:59.440] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:59.440] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.440] | : . ' , ; ` List of future strategies:
[08:07:59.440] | : . ' , ; ` 1. sequential:
[08:07:59.440] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.440] | : . ' , ; `    - tweaked: FALSE
[08:07:59.440] | : . ' , ; `    - call: plan(sequential)
[08:07:59.441] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.441] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.442] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.442] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.442] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.443] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:59.443] | : . ' , ; ` | : New stack:
[08:07:59.443] | : . ' , ; ` | : List of 1
[08:07:59.443] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.443] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.443] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.443] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.443] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.443] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.443] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.443] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.443] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.443] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.443] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.446] | : . ' , ; ` | : Old stack:
[08:07:59.446] | : . ' , ; ` | : List of 1
[08:07:59.446] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.446] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.446] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.446] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.446] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.446] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.446] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.446] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.446] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.446] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.446] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.449] | : . ' , ; ` | : Identical
[08:07:59.449] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:59.449] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.449] | : . ' , ; ` | List of future strategies:
[08:07:59.449] | : . ' , ; ` | 1. sequential:
[08:07:59.449] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.449] | : . ' , ; ` |    - tweaked: FALSE
[08:07:59.449] | : . ' , ; ` |    - call: plan(sequential)
[08:07:59.450] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.450] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.450] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.450] | : . ' , SequentialFuture started (and completed)
[08:07:59.451] | : . ' , signalConditions() ...
[08:07:59.451] | : . ' , ; include = ‘immediateCondition’
[08:07:59.451] | : . ' , ; exclude = 
[08:07:59.451] | : . ' , ; resignal = FALSE
[08:07:59.451] | : . ' , ; Number of conditions: 6
[08:07:59.451] | : . ' , ;  int 6
[08:07:59.451] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.452] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.452] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.452] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.452] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.452] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.452] | : . ' , signalConditions() ... done
[08:07:59.452] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:59.452] | : . Launching futures ... done
[08:07:59.452] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:59.452] | : Using SequentialFutureBackend ... done
[08:07:59.453] | run() for ‘Future’ (<unnamed-8>) ... done
[08:07:59.453] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x55675a839648> 
 $ c:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x5567584c85b0> 
 $  : NULL
 $  : NULL
 $  : num 6
List of 6
 $ a: num 1
 $ b:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x55675a839648> 
 $ c:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x5567584c85b0> 
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:3] 2 3 1
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
[08:07:59.458] resolved() for array ...
[08:07:59.458] | Number of elements: 6
[08:07:59.458] | Number of futures: 6
[08:07:59.458] | resolved() for SequentialFuture (<unnamed-7>) ...
[08:07:59.458] | : state: ‘finished’
[08:07:59.458] | : run: TRUE
[08:07:59.458] | : result: ‘FutureResult’
[08:07:59.458] | resolved() for SequentialFuture (<unnamed-7>) ... done
[08:07:59.459] | resolved() for SequentialFuture (<unnamed-8>) ...
[08:07:59.459] | : state: ‘finished’
[08:07:59.459] | : run: TRUE
[08:07:59.460] | : result: ‘FutureResult’
[08:07:59.460] | resolved() for SequentialFuture (<unnamed-8>) ... done
[08:07:59.460] resolved() for array ... done
 logi [1:2, 1:3, 1] TRUE TRUE TRUE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "" ...
[08:07:59.462] value() for array ...
[08:07:59.462] | recursive: 0
[08:07:59.462] | reduce: FALSE
[08:07:59.462] | length: 6
[08:07:59.462] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:07:59.462] | Number of remaining objects: 6
[08:07:59.462] | checking value #1:
[08:07:59.462] | 'obj' is atomic
[08:07:59.462] | signalConditionsASAP(numeric, pos=1) ...
[08:07:59.463] | : nx: 6
[08:07:59.463] | : relay: TRUE
[08:07:59.463] | : stdout: TRUE
[08:07:59.463] | : signal: TRUE
[08:07:59.463] | : resignal: FALSE
[08:07:59.463] | : force: TRUE
[08:07:59.463] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.463] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.463] | : until=2
[08:07:59.463] | : relaying element #2
[08:07:59.463] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.463] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.464] | signalConditionsASAP(numeric, pos=1) ... done
[08:07:59.464] | length: 5 (resolved future 1)
[08:07:59.464] value() for array ... done
[08:07:59.464] checking value #2:
[08:07:59.464] 'obj' is SequentialFuture
[08:07:59.464] resolved() for SequentialFuture (<unnamed-7>) ...
[08:07:59.464] | state: ‘finished’
[08:07:59.464] | run: TRUE
[08:07:59.464] | result: ‘FutureResult’
[08:07:59.464] resolved() for SequentialFuture (<unnamed-7>) ... done
[08:07:59.465] SequentialFuture #2
[08:07:59.465] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:07:59.465] | nx: 6
[08:07:59.465] | relay: TRUE
[08:07:59.465] | stdout: TRUE
[08:07:59.465] | signal: TRUE
[08:07:59.465] | resignal: FALSE
[08:07:59.465] | force: TRUE
[08:07:59.465] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.465] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.465] | until=2
[08:07:59.466] | relaying element #2
[08:07:59.466] | value() for SequentialFuture (<unnamed-7>) ...
[08:07:59.466] | : signalConditions() ...
[08:07:59.466] | : . include = ‘immediateCondition’
[08:07:59.466] | : . exclude = 
[08:07:59.466] | : . resignal = FALSE
[08:07:59.466] | : . Number of conditions: 6
[08:07:59.466] | : .  int 6
[08:07:59.467] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.467] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.467] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.467] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.467] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.467] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.467] | : signalConditions() ... done
[08:07:59.467] | : relay stdout ...
[08:07:59.467] | : relay stdout ... done
[08:07:59.468] | : check for misuse ...
[08:07:59.468] | : check for misuse ... done
[08:07:59.468] | value() for SequentialFuture (<unnamed-7>) ... done
[08:07:59.468] | signalConditions() ...
[08:07:59.468] | : include = ‘immediateCondition’
[08:07:59.468] | : exclude = 
[08:07:59.468] | : resignal = FALSE
[08:07:59.468] | : Number of conditions: 6
[08:07:59.468] | :  int 6
[08:07:59.469] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.469] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.469] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.469] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.469] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.469] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.469] | signalConditions() ... done
[08:07:59.469] | signalConditions() ...
[08:07:59.470] | : include = ‘condition’
[08:07:59.470] | : exclude = ‘error’, ‘immediateCondition’
[08:07:59.470] | : resignal = TRUE
[08:07:59.470] | : Number of conditions: 6
[08:07:59.470] | :  int 6
[08:07:59.470] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.470] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.394] | : . ' , attachPackages() ...
[08:07:59.471] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.471] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.394] | : . ' , ; packages: [n=1] ‘future’
[08:07:59.471] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.471] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.395] | : . ' , attachPackages() ... done
[08:07:59.471] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.471] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.395] | : . ' , attachPackages() ...
[08:07:59.471] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.471] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.395] | : . ' , ; packages: [n=0] 
[08:07:59.471] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.472] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.395] | : . ' , attachPackages() ... done
[08:07:59.472] | signalConditions() ... done
[08:07:59.472] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.472] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.472] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:07:59.472] value(<SequentialFuture>, ...) ...
[08:07:59.472] value(<SequentialFuture>, ...) ... done
[08:07:59.472] value() for SequentialFuture (<unnamed-7>) ...
[08:07:59.472] | signalConditions() ...
[08:07:59.472] | : include = ‘immediateCondition’
[08:07:59.473] | : exclude = 
[08:07:59.473] | : resignal = FALSE
[08:07:59.473] | : Number of conditions: 6
[08:07:59.473] | :  int 6
[08:07:59.473] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.473] | : already signaled, skipping
[08:07:59.473] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.473] | : already signaled, skipping
[08:07:59.474] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.474] | : already signaled, skipping
[08:07:59.474] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.474] | : already signaled, skipping
[08:07:59.474] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.474] | : already signaled, skipping
[08:07:59.474] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.474] | : already signaled, skipping
[08:07:59.474] | signalConditions() ... done
[08:07:59.474] | check for misuse ...
[08:07:59.474] | check for misuse ... done
[08:07:59.475] value() for SequentialFuture (<unnamed-7>) ... done
[08:07:59.475] value: <numeric>
[08:07:59.475] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:07:59.475] | nx: 6
[08:07:59.475] | relay: TRUE
[08:07:59.475] | stdout: TRUE
[08:07:59.475] | signal: TRUE
[08:07:59.475] | resignal: FALSE
[08:07:59.475] | force: TRUE
[08:07:59.475] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.475] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.476] | until=3
[08:07:59.476] | relaying element #3
[08:07:59.476] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.476] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.476] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:07:59.476] resolve() for SequentialFuture ...
[08:07:59.476] resolve() for SequentialFuture ... done
[08:07:59.476] length: 4 (resolved future 2)

[08:07:59.476] checking value #3:
[08:07:59.477] 'obj' is SequentialFuture
[08:07:59.477] resolved() for SequentialFuture (<unnamed-8>) ...
[08:07:59.477] | state: ‘finished’
[08:07:59.477] | run: TRUE
[08:07:59.477] | result: ‘FutureResult’
[08:07:59.477] resolved() for SequentialFuture (<unnamed-8>) ... done
[08:07:59.477] SequentialFuture #3
[08:07:59.477] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:07:59.477] | nx: 6
[08:07:59.477] | relay: TRUE
[08:07:59.477] | stdout: TRUE
[08:07:59.477] | signal: TRUE
[08:07:59.478] | resignal: FALSE
[08:07:59.478] | force: TRUE
[08:07:59.478] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.478] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.478] | until=3
[08:07:59.478] | relaying element #3
[08:07:59.478] | value() for SequentialFuture (<unnamed-8>) ...
[08:07:59.478] | : signalConditions() ...
[08:07:59.479] | : . include = ‘immediateCondition’
[08:07:59.479] | : . exclude = 
[08:07:59.479] | : . resignal = FALSE
[08:07:59.479] | : . Number of conditions: 6
[08:07:59.480] | : .  int 6
[08:07:59.480] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.480] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.480] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.480] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.480] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.480] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.481] | : signalConditions() ... done
[08:07:59.481] | : relay stdout ...
[08:07:59.481] | : relay stdout ... done
[08:07:59.481] | : check for misuse ...
[08:07:59.481] | : check for misuse ... done
[08:07:59.481] | value() for SequentialFuture (<unnamed-8>) ... done
[08:07:59.481] | signalConditions() ...
[08:07:59.481] | : include = ‘immediateCondition’
[08:07:59.481] | : exclude = 
[08:07:59.482] | : resignal = FALSE
[08:07:59.482] | : Number of conditions: 6
[08:07:59.482] | :  int 6
[08:07:59.482] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.482] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.482] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.482] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.482] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.483] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.483] | signalConditions() ... done
[08:07:59.483] | signalConditions() ...
[08:07:59.483] | : include = ‘condition’
[08:07:59.483] | : exclude = ‘error’, ‘immediateCondition’
[08:07:59.483] | : resignal = TRUE
[08:07:59.483] | : Number of conditions: 6
[08:07:59.483] | :  int 6
[08:07:59.484] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.484] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.426] | : . ' , attachPackages() ...
[08:07:59.484] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.484] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.426] | : . ' , ; packages: [n=1] ‘future’
[08:07:59.484] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.484] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.426] | : . ' , attachPackages() ... done
[08:07:59.484] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.484] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.426] | : . ' , attachPackages() ...
[08:07:59.485] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.485] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.426] | : . ' , ; packages: [n=0] 
[08:07:59.485] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.485] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.426] | : . ' , attachPackages() ... done
[08:07:59.485] | signalConditions() ... done
[08:07:59.485] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.485] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.485] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:07:59.485] value(<SequentialFuture>, ...) ...
[08:07:59.486] value(<SequentialFuture>, ...) ... done
[08:07:59.486] value() for SequentialFuture (<unnamed-8>) ...
[08:07:59.486] | signalConditions() ...
[08:07:59.486] | : include = ‘immediateCondition’
[08:07:59.486] | : exclude = 
[08:07:59.486] | : resignal = FALSE
[08:07:59.486] | : Number of conditions: 6
[08:07:59.486] | :  int 6
[08:07:59.487] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.487] | : already signaled, skipping
[08:07:59.487] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.487] | : already signaled, skipping
[08:07:59.487] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.487] | : already signaled, skipping
[08:07:59.487] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.487] | : already signaled, skipping
[08:07:59.487] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.487] | : already signaled, skipping
[08:07:59.488] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.488] | : already signaled, skipping
[08:07:59.488] | signalConditions() ... done
[08:07:59.488] | check for misuse ...
[08:07:59.488] | check for misuse ... done
[08:07:59.488] value() for SequentialFuture (<unnamed-8>) ... done
[08:07:59.488] value: <NULL>
[08:07:59.488] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:07:59.488] | nx: 6
[08:07:59.488] | relay: TRUE
[08:07:59.488] | stdout: TRUE
[08:07:59.489] | signal: TRUE
[08:07:59.489] | resignal: FALSE
[08:07:59.489] | force: TRUE
[08:07:59.489] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.489] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.489] | until=4
[08:07:59.489] | relaying element #4
[08:07:59.489] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.489] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.489] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:07:59.489] resolve() for SequentialFuture ...
[08:07:59.490] resolve() for SequentialFuture ... done
[08:07:59.490] length: 3 (resolved future 3)

[08:07:59.490] checking value #4:
[08:07:59.490] 'obj' is NULL
[08:07:59.490] signalConditionsASAP(NULL, pos=4) ...
[08:07:59.490] | nx: 6
[08:07:59.490] | relay: TRUE
[08:07:59.490] | stdout: TRUE
[08:07:59.490] | signal: TRUE
[08:07:59.490] | resignal: FALSE
[08:07:59.490] | force: TRUE
[08:07:59.491] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.491] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.491] | until=5
[08:07:59.491] | relaying element #5
[08:07:59.491] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:07:59.491] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.491] signalConditionsASAP(NULL, pos=4) ... done
[08:07:59.491] signalConditionsASAP(NULL, pos=4) ...
[08:07:59.491] | nx: 6
[08:07:59.491] | relay: TRUE
[08:07:59.491] | stdout: TRUE
[08:07:59.492] | signal: TRUE
[08:07:59.492] | resignal: FALSE
[08:07:59.492] | force: TRUE
[08:07:59.492] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:07:59.492] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.492] | until=5
[08:07:59.492] | relaying element #5
[08:07:59.492] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:07:59.492] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.492] signalConditionsASAP(NULL, pos=4) ... done
[08:07:59.492] length: 2 (resolved future 4)

[08:07:59.493] checking value #5:
[08:07:59.493] 'obj' is NULL
[08:07:59.493] signalConditionsASAP(NULL, pos=5) ...
[08:07:59.493] | nx: 6
[08:07:59.493] | relay: TRUE
[08:07:59.493] | stdout: TRUE
[08:07:59.493] | signal: TRUE
[08:07:59.493] | resignal: FALSE
[08:07:59.493] | force: TRUE
[08:07:59.493] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:07:59.493] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.494] | until=6
[08:07:59.494] | relaying element #6
[08:07:59.494] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:07:59.494] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.494] signalConditionsASAP(NULL, pos=5) ... done
[08:07:59.494] signalConditionsASAP(NULL, pos=5) ...
[08:07:59.494] | nx: 6
[08:07:59.494] | relay: TRUE
[08:07:59.494] | stdout: TRUE
[08:07:59.494] | signal: TRUE
[08:07:59.494] | resignal: FALSE
[08:07:59.494] | force: TRUE
[08:07:59.495] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:07:59.495] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.495] | until=6
[08:07:59.495] | relaying element #6
[08:07:59.495] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:07:59.495] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.495] signalConditionsASAP(NULL, pos=5) ... done
[08:07:59.495] length: 1 (resolved future 5)

[08:07:59.495] checking value #6:
[08:07:59.496] 'obj' is atomic
[08:07:59.496] signalConditionsASAP(numeric, pos=6) ...
[08:07:59.496] | nx: 6
[08:07:59.496] | relay: TRUE
[08:07:59.496] | stdout: TRUE
[08:07:59.496] | signal: TRUE
[08:07:59.496] | resignal: FALSE
[08:07:59.496] | force: TRUE
[08:07:59.496] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:07:59.496] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.496] | until=6
[08:07:59.496] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:07:59.497] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.497] signalConditionsASAP(numeric, pos=6) ... done
[08:07:59.497] length: 0 (resolved future 6)

[08:07:59.497] Relaying remaining futures ...
[08:07:59.497] | signalConditionsASAP(NULL, pos=0) ...
[08:07:59.497] | : nx: 6
[08:07:59.497] | : relay: TRUE
[08:07:59.497] | : stdout: TRUE
[08:07:59.497] | : signal: TRUE
[08:07:59.497] | : resignal: FALSE
[08:07:59.498] | : force: TRUE
[08:07:59.498] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:07:59.498] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:07:59.499] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:07:59.499] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.499] | signalConditionsASAP(NULL, pos=0) ... done
[08:07:59.499] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:3] 2 3 1
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
Dimensions: c(2, 1, 3, 1)
[08:07:59.502] future(..., label = NULL) ...
[08:07:59.503] | lazy: FALSE
[08:07:59.503] | stdout: TRUE
[08:07:59.503] | conditions: [n=1] ‘condition’
[08:07:59.503] | gc: FALSE
[08:07:59.503] | earlySignal: FALSE
[08:07:59.503] | getGlobalsAndPackages() ...
[08:07:59.503] | : Searching for globals ...
[08:07:59.504] | : . globals found: [0] 
[08:07:59.504] | : Searching for globals ... done
[08:07:59.504] | : globals: [0] <none>
[08:07:59.505] | : packages: [0] <none>
[08:07:59.505] | getGlobalsAndPackages() ... done
[08:07:59.505] | run() for ‘Future’ (<unnamed-9>) ...
[08:07:59.505] | : state: ‘created’
[08:07:59.505] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.505] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.505] | : Using SequentialFutureBackend ...
[08:07:59.505] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:07:59.506] | : . Launching futures ...
[08:07:59.506] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:59.506] | : . ' , getFutureData() ...
[08:07:59.506] | : . ' , ; getFutureCore() ...
[08:07:59.506] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:59.506] | : . ' , ; getFutureCore() ... done
[08:07:59.506] | : . ' , ; getFutureCapture() ...
[08:07:59.506] | : . ' , ; getFutureCapture() ... done
[08:07:59.506] | : . ' , ; getFutureContext() ...
[08:07:59.507] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.507] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:59.507] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.507] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:59.507] | : . ' , ; getFutureContext() ... done
[08:07:59.507] | : . ' , getFutureData() ... done
[08:07:59.508] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.508] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:59.509] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.509] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.509] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.509] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:59.509] | : . ' , ; ` | New stack:
[08:07:59.509] | : . ' , ; ` | List of 1
[08:07:59.509] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.509] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.509] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:59.509] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.509] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.509] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.509] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.509] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.512] | : . ' , ; ` | Old stack:
[08:07:59.512] | : . ' , ; ` | List of 1
[08:07:59.512] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.512] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.512] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:59.512] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.512] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.512] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.512] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:59.512] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.512] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.512] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.512] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.515] | : . ' , ; ` | Not identical
[08:07:59.515] | : . ' , ; ` | all.equal() for future ...
[08:07:59.515] | : . ' , ; ` | : List of 2
[08:07:59.515] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.515] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.515] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:59.515] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.515] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.515] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.515] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.515] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.515] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.515] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.515] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.515] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.515] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.515] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.515] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.515] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.515] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.521] | : . ' , ; ` | all.equal() for future ... done
[08:07:59.521] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:59.521] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.521] | : . ' , ; ` List of future strategies:
[08:07:59.521] | : . ' , ; ` 1. sequential:
[08:07:59.521] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.521] | : . ' , ; `    - tweaked: FALSE
[08:07:59.521] | : . ' , ; `    - call: plan(sequential)
[08:07:59.522] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.522] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.523] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.523] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.524] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.524] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:59.524] | : . ' , ; ` | : New stack:
[08:07:59.524] | : . ' , ; ` | : List of 1
[08:07:59.524] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.524] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.524] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.524] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.524] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.524] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.524] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.524] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.524] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.524] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.524] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.527] | : . ' , ; ` | : Old stack:
[08:07:59.527] | : . ' , ; ` | : List of 1
[08:07:59.527] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.527] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.527] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.527] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.527] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.527] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.527] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.527] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.527] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.527] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.527] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.530] | : . ' , ; ` | : Identical
[08:07:59.530] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:59.530] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.530] | : . ' , ; ` | List of future strategies:
[08:07:59.530] | : . ' , ; ` | 1. sequential:
[08:07:59.530] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.530] | : . ' , ; ` |    - tweaked: FALSE
[08:07:59.530] | : . ' , ; ` |    - call: plan(sequential)
[08:07:59.531] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.531] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.531] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.531] | : . ' , SequentialFuture started (and completed)
[08:07:59.531] | : . ' , signalConditions() ...
[08:07:59.532] | : . ' , ; include = ‘immediateCondition’
[08:07:59.532] | : . ' , ; exclude = 
[08:07:59.532] | : . ' , ; resignal = FALSE
[08:07:59.532] | : . ' , ; Number of conditions: 6
[08:07:59.532] | : . ' , ;  int 6
[08:07:59.532] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.532] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.533] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.533] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.533] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.533] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.533] | : . ' , signalConditions() ... done
[08:07:59.533] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:59.533] | : . Launching futures ... done
[08:07:59.533] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:59.533] | : Using SequentialFutureBackend ... done
[08:07:59.533] | run() for ‘Future’ (<unnamed-9>) ... done
[08:07:59.534] future(..., label = NULL) ... done
[08:07:59.534] future(..., label = NULL) ...
[08:07:59.534] | lazy: FALSE
[08:07:59.534] | stdout: TRUE
[08:07:59.534] | conditions: [n=1] ‘condition’
[08:07:59.534] | gc: FALSE
[08:07:59.534] | earlySignal: FALSE
[08:07:59.534] | getGlobalsAndPackages() ...
[08:07:59.534] | : Searching for globals ...
[08:07:59.535] | : . globals found: [0] 
[08:07:59.536] | : Searching for globals ... done
[08:07:59.536] | : globals: [0] <none>
[08:07:59.536] | : packages: [0] <none>
[08:07:59.536] | getGlobalsAndPackages() ... done
[08:07:59.536] | run() for ‘Future’ (<unnamed-10>) ...
[08:07:59.536] | : state: ‘created’
[08:07:59.536] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.536] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.536] | : Using SequentialFutureBackend ...
[08:07:59.537] | : . Number of futures since start: 9 (9 created, 9 launched, 9 finished)
[08:07:59.537] | : . Launching futures ...
[08:07:59.537] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:59.537] | : . ' , getFutureData() ...
[08:07:59.537] | : . ' , ; getFutureCore() ...
[08:07:59.537] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:59.537] | : . ' , ; getFutureCore() ... done
[08:07:59.537] | : . ' , ; getFutureCapture() ...
[08:07:59.537] | : . ' , ; getFutureCapture() ... done
[08:07:59.537] | : . ' , ; getFutureContext() ...
[08:07:59.538] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.539] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:59.539] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.539] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:59.539] | : . ' , ; getFutureContext() ... done
[08:07:59.539] | : . ' , getFutureData() ... done
[08:07:59.540] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.540] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:59.541] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.541] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.541] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.541] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:59.541] | : . ' , ; ` | New stack:
[08:07:59.541] | : . ' , ; ` | List of 1
[08:07:59.541] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.541] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.541] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:59.541] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.541] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.541] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.541] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.541] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.544] | : . ' , ; ` | Old stack:
[08:07:59.544] | : . ' , ; ` | List of 1
[08:07:59.544] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.544] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.544] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:59.544] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.544] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.544] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.544] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:59.544] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.544] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.544] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.544] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.547] | : . ' , ; ` | Not identical
[08:07:59.547] | : . ' , ; ` | all.equal() for future ...
[08:07:59.547] | : . ' , ; ` | : List of 2
[08:07:59.547] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.547] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.547] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:59.547] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.547] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.547] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.547] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.547] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.547] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.547] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.547] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.547] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.547] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.547] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.547] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.547] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.547] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.552] | : . ' , ; ` | all.equal() for future ... done
[08:07:59.552] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:59.552] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.552] | : . ' , ; ` List of future strategies:
[08:07:59.552] | : . ' , ; ` 1. sequential:
[08:07:59.552] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.552] | : . ' , ; `    - tweaked: FALSE
[08:07:59.552] | : . ' , ; `    - call: plan(sequential)
[08:07:59.553] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.553] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.554] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.554] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.554] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.555] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:59.555] | : . ' , ; ` | : New stack:
[08:07:59.555] | : . ' , ; ` | : List of 1
[08:07:59.555] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.555] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.555] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.555] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.555] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.555] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.555] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.555] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.555] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.555] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.555] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.559] | : . ' , ; ` | : Old stack:
[08:07:59.559] | : . ' , ; ` | : List of 1
[08:07:59.559] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.559] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.559] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.559] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.559] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.559] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.559] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.559] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.559] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.559] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.559] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.562] | : . ' , ; ` | : Identical
[08:07:59.562] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:59.562] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.562] | : . ' , ; ` | List of future strategies:
[08:07:59.562] | : . ' , ; ` | 1. sequential:
[08:07:59.562] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.562] | : . ' , ; ` |    - tweaked: FALSE
[08:07:59.562] | : . ' , ; ` |    - call: plan(sequential)
[08:07:59.563] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.563] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.563] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.563] | : . ' , SequentialFuture started (and completed)
[08:07:59.563] | : . ' , signalConditions() ...
[08:07:59.564] | : . ' , ; include = ‘immediateCondition’
[08:07:59.564] | : . ' , ; exclude = 
[08:07:59.564] | : . ' , ; resignal = FALSE
[08:07:59.564] | : . ' , ; Number of conditions: 6
[08:07:59.564] | : . ' , ;  int 6
[08:07:59.564] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.564] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.565] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.565] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.565] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.565] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.565] | : . ' , signalConditions() ... done
[08:07:59.565] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:59.565] | : . Launching futures ... done
[08:07:59.565] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:59.565] | : Using SequentialFutureBackend ... done
[08:07:59.565] | run() for ‘Future’ (<unnamed-10>) ... done
[08:07:59.566] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x556758334e88> 
 $ c:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x55675ab86e00> 
 $  : NULL
 $  : NULL
 $  : num 6
List of 6
 $ a: num 1
 $ b:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x556758334e88> 
 $ c:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x55675ab86e00> 
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:4] 2 1 3 1
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
[08:07:59.571] resolved() for array ...
[08:07:59.571] | Number of elements: 6
[08:07:59.571] | Number of futures: 6
[08:07:59.571] | resolved() for SequentialFuture (<unnamed-9>) ...
[08:07:59.571] | : state: ‘finished’
[08:07:59.571] | : run: TRUE
[08:07:59.571] | : result: ‘FutureResult’
[08:07:59.571] | resolved() for SequentialFuture (<unnamed-9>) ... done
[08:07:59.572] | resolved() for SequentialFuture (<unnamed-10>) ...
[08:07:59.572] | : state: ‘finished’
[08:07:59.572] | : run: TRUE
[08:07:59.572] | : result: ‘FutureResult’
[08:07:59.572] | resolved() for SequentialFuture (<unnamed-10>) ... done
[08:07:59.572] resolved() for array ... done
 logi [1:2, 1, 1:3, 1] TRUE TRUE TRUE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "" ...
[08:07:59.574] value() for array ...
[08:07:59.574] | recursive: 0
[08:07:59.574] | reduce: FALSE
[08:07:59.574] | length: 6
[08:07:59.574] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:07:59.574] | Number of remaining objects: 6
[08:07:59.575] | checking value #1:
[08:07:59.575] | 'obj' is atomic
[08:07:59.575] | signalConditionsASAP(numeric, pos=1) ...
[08:07:59.575] | : nx: 6
[08:07:59.575] | : relay: TRUE
[08:07:59.575] | : stdout: TRUE
[08:07:59.575] | : signal: TRUE
[08:07:59.575] | : resignal: FALSE
[08:07:59.575] | : force: TRUE
[08:07:59.575] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.575] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.576] | : until=2
[08:07:59.576] | : relaying element #2
[08:07:59.576] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.576] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.576] | signalConditionsASAP(numeric, pos=1) ... done
[08:07:59.576] | length: 5 (resolved future 1)
[08:07:59.576] value() for array ... done
[08:07:59.576] checking value #2:
[08:07:59.576] 'obj' is SequentialFuture
[08:07:59.576] resolved() for SequentialFuture (<unnamed-9>) ...
[08:07:59.577] | state: ‘finished’
[08:07:59.578] | run: TRUE
[08:07:59.578] | result: ‘FutureResult’
[08:07:59.578] resolved() for SequentialFuture (<unnamed-9>) ... done
[08:07:59.578] SequentialFuture #2
[08:07:59.578] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:07:59.578] | nx: 6
[08:07:59.578] | relay: TRUE
[08:07:59.578] | stdout: TRUE
[08:07:59.578] | signal: TRUE
[08:07:59.578] | resignal: FALSE
[08:07:59.578] | force: TRUE
[08:07:59.579] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.579] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:07:59.579] | until=2
[08:07:59.579] | relaying element #2
[08:07:59.579] | value() for SequentialFuture (<unnamed-9>) ...
[08:07:59.579] | : signalConditions() ...
[08:07:59.579] | : . include = ‘immediateCondition’
[08:07:59.579] | : . exclude = 
[08:07:59.579] | : . resignal = FALSE
[08:07:59.579] | : . Number of conditions: 6
[08:07:59.580] | : .  int 6
[08:07:59.580] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.580] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.580] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.580] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.580] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.580] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.581] | : signalConditions() ... done
[08:07:59.581] | : relay stdout ...
[08:07:59.581] | : relay stdout ... done
[08:07:59.581] | : check for misuse ...
[08:07:59.581] | : check for misuse ... done
[08:07:59.581] | value() for SequentialFuture (<unnamed-9>) ... done
[08:07:59.581] | signalConditions() ...
[08:07:59.581] | : include = ‘immediateCondition’
[08:07:59.581] | : exclude = 
[08:07:59.581] | : resignal = FALSE
[08:07:59.582] | : Number of conditions: 6
[08:07:59.582] | :  int 6
[08:07:59.582] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.582] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.582] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.582] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.582] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.583] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.583] | signalConditions() ... done
[08:07:59.583] | signalConditions() ...
[08:07:59.583] | : include = ‘condition’
[08:07:59.583] | : exclude = ‘error’, ‘immediateCondition’
[08:07:59.583] | : resignal = TRUE
[08:07:59.583] | : Number of conditions: 6
[08:07:59.583] | :  int 6
[08:07:59.584] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.584] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.507] | : . ' , attachPackages() ...
[08:07:59.584] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.584] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.507] | : . ' , ; packages: [n=1] ‘future’
[08:07:59.584] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.584] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.508] | : . ' , attachPackages() ... done
[08:07:59.584] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.584] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.508] | : . ' , attachPackages() ...
[08:07:59.585] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.585] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.508] | : . ' , ; packages: [n=0] 
[08:07:59.585] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.585] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.508] | : . ' , attachPackages() ... done
[08:07:59.585] | signalConditions() ... done
[08:07:59.585] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.585] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.585] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:07:59.585] value(<SequentialFuture>, ...) ...
[08:07:59.585] value(<SequentialFuture>, ...) ... done
[08:07:59.586] value() for SequentialFuture (<unnamed-9>) ...
[08:07:59.586] | signalConditions() ...
[08:07:59.586] | : include = ‘immediateCondition’
[08:07:59.586] | : exclude = 
[08:07:59.586] | : resignal = FALSE
[08:07:59.586] | : Number of conditions: 6
[08:07:59.586] | :  int 6
[08:07:59.587] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.587] | : already signaled, skipping
[08:07:59.587] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.587] | : already signaled, skipping
[08:07:59.587] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.587] | : already signaled, skipping
[08:07:59.587] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.587] | : already signaled, skipping
[08:07:59.587] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.587] | : already signaled, skipping
[08:07:59.587] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.588] | : already signaled, skipping
[08:07:59.588] | signalConditions() ... done
[08:07:59.588] | check for misuse ...
[08:07:59.588] | check for misuse ... done
[08:07:59.588] value() for SequentialFuture (<unnamed-9>) ... done
[08:07:59.588] value: <numeric>
[08:07:59.588] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:07:59.588] | nx: 6
[08:07:59.588] | relay: TRUE
[08:07:59.588] | stdout: TRUE
[08:07:59.588] | signal: TRUE
[08:07:59.589] | resignal: FALSE
[08:07:59.589] | force: TRUE
[08:07:59.589] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.589] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.589] | until=3
[08:07:59.589] | relaying element #3
[08:07:59.589] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.589] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.589] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:07:59.589] resolve() for SequentialFuture ...
[08:07:59.589] resolve() for SequentialFuture ... done
[08:07:59.590] length: 4 (resolved future 2)

[08:07:59.590] checking value #3:
[08:07:59.590] 'obj' is SequentialFuture
[08:07:59.590] resolved() for SequentialFuture (<unnamed-10>) ...
[08:07:59.590] | state: ‘finished’
[08:07:59.590] | run: TRUE
[08:07:59.590] | result: ‘FutureResult’
[08:07:59.590] resolved() for SequentialFuture (<unnamed-10>) ... done
[08:07:59.590] SequentialFuture #3
[08:07:59.591] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:07:59.591] | nx: 6
[08:07:59.591] | relay: TRUE
[08:07:59.591] | stdout: TRUE
[08:07:59.591] | signal: TRUE
[08:07:59.591] | resignal: FALSE
[08:07:59.591] | force: TRUE
[08:07:59.591] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.591] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:07:59.591] | until=3
[08:07:59.591] | relaying element #3
[08:07:59.591] | value() for SequentialFuture (<unnamed-10>) ...
[08:07:59.592] | : signalConditions() ...
[08:07:59.592] | : . include = ‘immediateCondition’
[08:07:59.592] | : . exclude = 
[08:07:59.592] | : . resignal = FALSE
[08:07:59.592] | : . Number of conditions: 6
[08:07:59.592] | : .  int 6
[08:07:59.592] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.593] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.593] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.593] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.593] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.593] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.593] | : signalConditions() ... done
[08:07:59.593] | : relay stdout ...
[08:07:59.593] | : relay stdout ... done
[08:07:59.593] | : check for misuse ...
[08:07:59.594] | : check for misuse ... done
[08:07:59.594] | value() for SequentialFuture (<unnamed-10>) ... done
[08:07:59.594] | signalConditions() ...
[08:07:59.594] | : include = ‘immediateCondition’
[08:07:59.594] | : exclude = 
[08:07:59.594] | : resignal = FALSE
[08:07:59.594] | : Number of conditions: 6
[08:07:59.594] | :  int 6
[08:07:59.595] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.595] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.595] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.595] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.595] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.595] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.595] | signalConditions() ... done
[08:07:59.595] | signalConditions() ...
[08:07:59.595] | : include = ‘condition’
[08:07:59.596] | : exclude = ‘error’, ‘immediateCondition’
[08:07:59.596] | : resignal = TRUE
[08:07:59.596] | : Number of conditions: 6
[08:07:59.596] | :  int 6
[08:07:59.597] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.597] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.539] | : . ' , attachPackages() ...
[08:07:59.597] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.597] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.539] | : . ' , ; packages: [n=1] ‘future’
[08:07:59.598] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.598] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.540] | : . ' , attachPackages() ... done
[08:07:59.598] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.598] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.540] | : . ' , attachPackages() ...
[08:07:59.598] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.598] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.540] | : . ' , ; packages: [n=0] 
[08:07:59.598] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.598] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.540] | : . ' , attachPackages() ... done
[08:07:59.599] | signalConditions() ... done
[08:07:59.599] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.599] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.599] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:07:59.599] value(<SequentialFuture>, ...) ...
[08:07:59.599] value(<SequentialFuture>, ...) ... done
[08:07:59.599] value() for SequentialFuture (<unnamed-10>) ...
[08:07:59.599] | signalConditions() ...
[08:07:59.599] | : include = ‘immediateCondition’
[08:07:59.600] | : exclude = 
[08:07:59.600] | : resignal = FALSE
[08:07:59.600] | : Number of conditions: 6
[08:07:59.600] | :  int 6
[08:07:59.600] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.600] | : already signaled, skipping
[08:07:59.600] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.600] | : already signaled, skipping
[08:07:59.601] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.601] | : already signaled, skipping
[08:07:59.601] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.601] | : already signaled, skipping
[08:07:59.601] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.601] | : already signaled, skipping
[08:07:59.601] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.601] | : already signaled, skipping
[08:07:59.601] | signalConditions() ... done
[08:07:59.601] | check for misuse ...
[08:07:59.602] | check for misuse ... done
[08:07:59.602] value() for SequentialFuture (<unnamed-10>) ... done
[08:07:59.602] value: <NULL>
[08:07:59.602] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:07:59.602] | nx: 6
[08:07:59.602] | relay: TRUE
[08:07:59.602] | stdout: TRUE
[08:07:59.602] | signal: TRUE
[08:07:59.602] | resignal: FALSE
[08:07:59.602] | force: TRUE
[08:07:59.602] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.602] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.603] | until=4
[08:07:59.603] | relaying element #4
[08:07:59.603] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.603] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.603] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:07:59.603] resolve() for SequentialFuture ...
[08:07:59.603] resolve() for SequentialFuture ... done
[08:07:59.603] length: 3 (resolved future 3)

[08:07:59.603] checking value #4:
[08:07:59.604] 'obj' is NULL
[08:07:59.604] signalConditionsASAP(NULL, pos=4) ...
[08:07:59.604] | nx: 6
[08:07:59.604] | relay: TRUE
[08:07:59.604] | stdout: TRUE
[08:07:59.604] | signal: TRUE
[08:07:59.604] | resignal: FALSE
[08:07:59.604] | force: TRUE
[08:07:59.604] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.604] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.604] | until=5
[08:07:59.604] | relaying element #5
[08:07:59.605] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:07:59.605] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.605] signalConditionsASAP(NULL, pos=4) ... done
[08:07:59.605] signalConditionsASAP(NULL, pos=4) ...
[08:07:59.605] | nx: 6
[08:07:59.605] | relay: TRUE
[08:07:59.605] | stdout: TRUE
[08:07:59.605] | signal: TRUE
[08:07:59.605] | resignal: FALSE
[08:07:59.605] | force: TRUE
[08:07:59.605] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:07:59.606] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.606] | until=5
[08:07:59.606] | relaying element #5
[08:07:59.606] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:07:59.606] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.606] signalConditionsASAP(NULL, pos=4) ... done
[08:07:59.606] length: 2 (resolved future 4)

[08:07:59.606] checking value #5:
[08:07:59.606] 'obj' is NULL
[08:07:59.606] signalConditionsASAP(NULL, pos=5) ...
[08:07:59.607] | nx: 6
[08:07:59.607] | relay: TRUE
[08:07:59.607] | stdout: TRUE
[08:07:59.607] | signal: TRUE
[08:07:59.607] | resignal: FALSE
[08:07:59.607] | force: TRUE
[08:07:59.607] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:07:59.607] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.607] | until=6
[08:07:59.607] | relaying element #6
[08:07:59.607] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:07:59.607] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.608] signalConditionsASAP(NULL, pos=5) ... done
[08:07:59.608] signalConditionsASAP(NULL, pos=5) ...
[08:07:59.608] | nx: 6
[08:07:59.608] | relay: TRUE
[08:07:59.608] | stdout: TRUE
[08:07:59.608] | signal: TRUE
[08:07:59.608] | resignal: FALSE
[08:07:59.608] | force: TRUE
[08:07:59.608] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:07:59.608] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.608] | until=6
[08:07:59.608] | relaying element #6
[08:07:59.609] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:07:59.609] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.609] signalConditionsASAP(NULL, pos=5) ... done
[08:07:59.609] length: 1 (resolved future 5)

[08:07:59.609] checking value #6:
[08:07:59.609] 'obj' is atomic
[08:07:59.609] signalConditionsASAP(numeric, pos=6) ...
[08:07:59.609] | nx: 6
[08:07:59.609] | relay: TRUE
[08:07:59.609] | stdout: TRUE
[08:07:59.610] | signal: TRUE
[08:07:59.610] | resignal: FALSE
[08:07:59.610] | force: TRUE
[08:07:59.610] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:07:59.610] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.610] | until=6
[08:07:59.610] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:07:59.610] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.610] signalConditionsASAP(numeric, pos=6) ... done
[08:07:59.610] length: 0 (resolved future 6)

[08:07:59.611] Relaying remaining futures ...
[08:07:59.611] | signalConditionsASAP(NULL, pos=0) ...
[08:07:59.611] | : nx: 6
[08:07:59.611] | : relay: TRUE
[08:07:59.611] | : stdout: TRUE
[08:07:59.611] | : signal: TRUE
[08:07:59.611] | : resignal: FALSE
[08:07:59.611] | : force: TRUE
[08:07:59.611] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:07:59.611] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:07:59.611] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:07:59.612] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:07:59.612] | signalConditionsASAP(NULL, pos=0) ... done
[08:07:59.612] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:4] 2 1 3 1
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
*** futures() - list ... DONE
Type of object: environment
Type of future: sequential
[08:07:59.616] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.617] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:07:59.617] | : all.equal() for FutureStrategyList ...
[08:07:59.617] | : . New stack:
[08:07:59.617] | : . List of 1
[08:07:59.617] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.617] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.617] | : .   ..- attr(*, "init")= logi TRUE
[08:07:59.617] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.617] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.617] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.617] | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:59.617] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.619] | : . Old stack:
[08:07:59.620] | : . List of 1
[08:07:59.620] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.620] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.620] | : .   ..- attr(*, "init")= chr "done"
[08:07:59.620] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.620] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.620] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.620] | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:59.620] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.620] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.620] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.620] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.623] | : . Not identical
[08:07:59.623] | : . all.equal() for future ...
[08:07:59.623] | : . ' List of 2
[08:07:59.623] | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.623] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.623] | : . '   ..- attr(*, "init")= logi TRUE
[08:07:59.623] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.623] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.623] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.623] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:59.623] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.623] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.623] | : . '   ..- attr(*, "init")= chr "done"
[08:07:59.623] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.623] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.623] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.623] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:07:59.623] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.623] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.623] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.628] | : . all.equal() for future ... done
[08:07:59.628] | : all.equal() for FutureStrategyList ... done
[08:07:59.628] | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.628] | : List of future strategies:
[08:07:59.628] | : 1. sequential:
[08:07:59.628] | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.628] | :    - tweaked: FALSE
[08:07:59.628] | :    - call: plan(sequential)
[08:07:59.628] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:07:59.629] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Dimensions: NULL
[08:07:59.629] future(..., label = NULL) ...
[08:07:59.629] | lazy: FALSE
[08:07:59.629] | stdout: TRUE
[08:07:59.629] | conditions: [n=1] ‘condition’
[08:07:59.629] | gc: FALSE
[08:07:59.629] | earlySignal: FALSE
[08:07:59.629] | getGlobalsAndPackages() ...
[08:07:59.629] | : Searching for globals ...
[08:07:59.630] | : . globals found: [0] 
[08:07:59.631] | : Searching for globals ... done
[08:07:59.631] | : globals: [0] <none>
[08:07:59.631] | : packages: [0] <none>
[08:07:59.631] | getGlobalsAndPackages() ... done
[08:07:59.631] | run() for ‘Future’ (<unnamed-11>) ...
[08:07:59.631] | : state: ‘created’
[08:07:59.631] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.631] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.632] | : Using SequentialFutureBackend ...
[08:07:59.632] | : . Number of futures since start: 10 (10 created, 10 launched, 10 finished)
[08:07:59.632] | : . Launching futures ...
[08:07:59.632] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:59.632] | : . ' , getFutureData() ...
[08:07:59.632] | : . ' , ; getFutureCore() ...
[08:07:59.632] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:59.632] | : . ' , ; getFutureCore() ... done
[08:07:59.632] | : . ' , ; getFutureCapture() ...
[08:07:59.633] | : . ' , ; getFutureCapture() ... done
[08:07:59.633] | : . ' , ; getFutureContext() ...
[08:07:59.633] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.633] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:59.633] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.633] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:59.633] | : . ' , ; getFutureContext() ... done
[08:07:59.633] | : . ' , getFutureData() ... done
[08:07:59.636] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.636] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:59.636] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.636] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.636] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.636] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:59.637] | : . ' , ; ` | New stack:
[08:07:59.637] | : . ' , ; ` | List of 1
[08:07:59.637] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.637] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.637] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:59.637] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.637] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.637] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.637] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.637] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.639] | : . ' , ; ` | Old stack:
[08:07:59.639] | : . ' , ; ` | List of 1
[08:07:59.639] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.639] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.639] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:59.639] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.639] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.639] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.639] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:59.639] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.639] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.639] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.639] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.642] | : . ' , ; ` | Not identical
[08:07:59.642] | : . ' , ; ` | all.equal() for future ...
[08:07:59.643] | : . ' , ; ` | : List of 2
[08:07:59.643] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.643] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.643] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:59.643] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.643] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.643] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.643] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.643] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.643] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.643] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.643] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.643] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.643] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.643] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.643] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.643] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.643] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.647] | : . ' , ; ` | all.equal() for future ... done
[08:07:59.648] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:59.648] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.648] | : . ' , ; ` List of future strategies:
[08:07:59.648] | : . ' , ; ` 1. sequential:
[08:07:59.648] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.648] | : . ' , ; `    - tweaked: FALSE
[08:07:59.648] | : . ' , ; `    - call: plan(sequential)
[08:07:59.648] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.648] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.650] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.650] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.650] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.650] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:59.650] | : . ' , ; ` | : New stack:
[08:07:59.650] | : . ' , ; ` | : List of 1
[08:07:59.650] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.650] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.650] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.650] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.650] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.650] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.650] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.650] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.650] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.650] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.650] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.655] | : . ' , ; ` | : Old stack:
[08:07:59.655] | : . ' , ; ` | : List of 1
[08:07:59.655] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.655] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.655] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.655] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.655] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.655] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.655] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.655] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.655] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.655] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.655] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.658] | : . ' , ; ` | : Identical
[08:07:59.658] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:59.658] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.658] | : . ' , ; ` | List of future strategies:
[08:07:59.658] | : . ' , ; ` | 1. sequential:
[08:07:59.658] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.658] | : . ' , ; ` |    - tweaked: FALSE
[08:07:59.658] | : . ' , ; ` |    - call: plan(sequential)
[08:07:59.659] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.659] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.659] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.659] | : . ' , SequentialFuture started (and completed)
[08:07:59.659] | : . ' , signalConditions() ...
[08:07:59.659] | : . ' , ; include = ‘immediateCondition’
[08:07:59.659] | : . ' , ; exclude = 
[08:07:59.660] | : . ' , ; resignal = FALSE
[08:07:59.660] | : . ' , ; Number of conditions: 6
[08:07:59.660] | : . ' , ;  int 6
[08:07:59.660] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.660] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.660] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.660] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.661] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.661] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.661] | : . ' , signalConditions() ... done
[08:07:59.661] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:59.661] | : . Launching futures ... done
[08:07:59.661] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:59.661] | : Using SequentialFutureBackend ... done
[08:07:59.661] | run() for ‘Future’ (<unnamed-11>) ... done
[08:07:59.661] future(..., label = NULL) ... done
[08:07:59.661] future(..., label = NULL) ...
[08:07:59.662] | lazy: FALSE
[08:07:59.662] | stdout: TRUE
[08:07:59.662] | conditions: [n=1] ‘condition’
[08:07:59.662] | gc: FALSE
[08:07:59.662] | earlySignal: FALSE
[08:07:59.662] | getGlobalsAndPackages() ...
[08:07:59.662] | : Searching for globals ...
[08:07:59.663] | : . globals found: [0] 
[08:07:59.663] | : Searching for globals ... done
[08:07:59.663] | : globals: [0] <none>
[08:07:59.664] | : packages: [0] <none>
[08:07:59.664] | getGlobalsAndPackages() ... done
[08:07:59.664] | run() for ‘Future’ (<unnamed-12>) ...
[08:07:59.664] | : state: ‘created’
[08:07:59.664] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.664] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.664] | : Using SequentialFutureBackend ...
[08:07:59.664] | : . Number of futures since start: 11 (11 created, 11 launched, 11 finished)
[08:07:59.664] | : . Launching futures ...
[08:07:59.665] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:59.665] | : . ' , getFutureData() ...
[08:07:59.665] | : . ' , ; getFutureCore() ...
[08:07:59.665] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:59.665] | : . ' , ; getFutureCore() ... done
[08:07:59.665] | : . ' , ; getFutureCapture() ...
[08:07:59.665] | : . ' , ; getFutureCapture() ... done
[08:07:59.665] | : . ' , ; getFutureContext() ...
[08:07:59.665] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.666] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:59.666] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.666] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:59.666] | : . ' , ; getFutureContext() ... done
[08:07:59.666] | : . ' , getFutureData() ... done
[08:07:59.667] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.667] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:59.667] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.668] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.668] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.668] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:59.668] | : . ' , ; ` | New stack:
[08:07:59.668] | : . ' , ; ` | List of 1
[08:07:59.668] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.668] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.668] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:59.668] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.668] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.668] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.668] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.668] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.671] | : . ' , ; ` | Old stack:
[08:07:59.671] | : . ' , ; ` | List of 1
[08:07:59.671] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.671] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.671] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:59.671] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.671] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.671] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.671] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:59.671] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.671] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.671] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.671] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.675] | : . ' , ; ` | Not identical
[08:07:59.675] | : . ' , ; ` | all.equal() for future ...
[08:07:59.675] | : . ' , ; ` | : List of 2
[08:07:59.675] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.675] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.675] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:59.675] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.675] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.675] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.675] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.675] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.675] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.675] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.675] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.675] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.675] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.675] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.675] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.675] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.675] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.680] | : . ' , ; ` | all.equal() for future ... done
[08:07:59.680] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:59.680] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.680] | : . ' , ; ` List of future strategies:
[08:07:59.680] | : . ' , ; ` 1. sequential:
[08:07:59.680] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.680] | : . ' , ; `    - tweaked: FALSE
[08:07:59.680] | : . ' , ; `    - call: plan(sequential)
[08:07:59.681] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.681] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.682] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.682] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.683] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.683] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:59.683] | : . ' , ; ` | : New stack:
[08:07:59.683] | : . ' , ; ` | : List of 1
[08:07:59.683] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.683] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.683] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.683] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.683] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.683] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.683] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.683] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.683] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.683] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.683] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.686] | : . ' , ; ` | : Old stack:
[08:07:59.686] | : . ' , ; ` | : List of 1
[08:07:59.686] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.686] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.686] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.686] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.686] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.686] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.686] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.686] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.686] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.686] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.686] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.689] | : . ' , ; ` | : Identical
[08:07:59.689] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:59.689] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.690] | : . ' , ; ` | List of future strategies:
[08:07:59.690] | : . ' , ; ` | 1. sequential:
[08:07:59.690] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.690] | : . ' , ; ` |    - tweaked: FALSE
[08:07:59.690] | : . ' , ; ` |    - call: plan(sequential)
[08:07:59.690] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.690] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.690] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.690] | : . ' , SequentialFuture started (and completed)
[08:07:59.691] | : . ' , signalConditions() ...
[08:07:59.691] | : . ' , ; include = ‘immediateCondition’
[08:07:59.691] | : . ' , ; exclude = 
[08:07:59.691] | : . ' , ; resignal = FALSE
[08:07:59.691] | : . ' , ; Number of conditions: 6
[08:07:59.691] | : . ' , ;  int 6
[08:07:59.692] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.693] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.693] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.693] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.693] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.693] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.694] | : . ' , signalConditions() ... done
[08:07:59.694] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:59.694] | : . Launching futures ... done
[08:07:59.694] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:59.694] | : Using SequentialFutureBackend ... done
[08:07:59.694] | run() for ‘Future’ (<unnamed-12>) ... done
[08:07:59.694] future(..., label = NULL) ... done
[08:07:59.695] future(..., label = NULL) ...
[08:07:59.695] | lazy: FALSE
[08:07:59.695] | stdout: TRUE
[08:07:59.696] | conditions: [n=1] ‘condition’
[08:07:59.696] | gc: FALSE
[08:07:59.696] | earlySignal: FALSE
[08:07:59.696] | getGlobalsAndPackages() ...
[08:07:59.696] | : Searching for globals ...
[08:07:59.700] | : . globals found: [1] ‘{’
[08:07:59.700] | : Searching for globals ... done
[08:07:59.700] | : Resolving globals: FALSE
[08:07:59.700] | : Search for packages associated with the globals ...
[08:07:59.700] | : . Packages associated with globals: [1] ‘base’
[08:07:59.701] | : . Packages: [1] ‘base’
[08:07:59.701] | : Search for packages associated with the globals ... done
[08:07:59.701] | : Packages after dropping 'base': [0] 
[08:07:59.701] | : globals: [0] 
[08:07:59.701] | : packages: [0] 
[08:07:59.701] | getGlobalsAndPackages() ... done
[08:07:59.701] | run() for ‘Future’ (<unnamed-13>) ...
[08:07:59.701] | : state: ‘created’
[08:07:59.702] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.702] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.702] | : Using SequentialFutureBackend ...
[08:07:59.702] | : . Number of futures since start: 12 (12 created, 12 launched, 12 finished)
[08:07:59.702] | : . Launching futures ...
[08:07:59.702] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:59.702] | : . ' , getFutureData() ...
[08:07:59.702] | : . ' , ; getFutureCore() ...
[08:07:59.702] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:59.702] | : . ' , ; getFutureCore() ... done
[08:07:59.703] | : . ' , ; getFutureCapture() ...
[08:07:59.703] | : . ' , ; getFutureCapture() ... done
[08:07:59.703] | : . ' , ; getFutureContext() ...
[08:07:59.703] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.703] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:59.703] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.703] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:59.703] | : . ' , ; getFutureContext() ... done
[08:07:59.703] | : . ' , getFutureData() ... done
[08:07:59.705] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.705] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:59.705] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.705] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.705] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.705] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:59.706] | : . ' , ; ` | New stack:
[08:07:59.706] | : . ' , ; ` | List of 1
[08:07:59.706] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.706] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.706] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:59.706] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.706] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.706] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.706] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.706] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.708] | : . ' , ; ` | Old stack:
[08:07:59.708] | : . ' , ; ` | List of 1
[08:07:59.708] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.708] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.708] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:59.708] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.708] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.708] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.708] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:59.708] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.708] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.708] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.708] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.711] | : . ' , ; ` | Not identical
[08:07:59.711] | : . ' , ; ` | all.equal() for future ...
[08:07:59.711] | : . ' , ; ` | : List of 2
[08:07:59.711] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.711] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.711] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:59.711] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.711] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.711] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.711] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.711] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.711] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.711] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.711] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.711] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.711] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.711] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.711] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.711] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.711] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.718] | : . ' , ; ` | all.equal() for future ... done
[08:07:59.718] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:59.718] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.718] | : . ' , ; ` List of future strategies:
[08:07:59.718] | : . ' , ; ` 1. sequential:
[08:07:59.718] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.718] | : . ' , ; `    - tweaked: FALSE
[08:07:59.718] | : . ' , ; `    - call: plan(sequential)
[08:07:59.719] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.719] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.720] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.721] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.721] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.721] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:59.721] | : . ' , ; ` | : New stack:
[08:07:59.721] | : . ' , ; ` | : List of 1
[08:07:59.721] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.721] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.721] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.721] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.721] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.721] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.721] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.721] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.721] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.721] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.721] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.724] | : . ' , ; ` | : Old stack:
[08:07:59.724] | : . ' , ; ` | : List of 1
[08:07:59.724] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.724] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.724] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.724] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.724] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.724] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.724] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.724] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.724] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.724] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.724] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.727] | : . ' , ; ` | : Identical
[08:07:59.727] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:59.727] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.728] | : . ' , ; ` | List of future strategies:
[08:07:59.728] | : . ' , ; ` | 1. sequential:
[08:07:59.728] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.728] | : . ' , ; ` |    - tweaked: FALSE
[08:07:59.728] | : . ' , ; ` |    - call: plan(sequential)
[08:07:59.728] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.728] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.728] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.728] | : . ' , SequentialFuture started (and completed)
[08:07:59.729] | : . ' , signalConditions() ...
[08:07:59.729] | : . ' , ; include = ‘immediateCondition’
[08:07:59.729] | : . ' , ; exclude = 
[08:07:59.729] | : . ' , ; resignal = FALSE
[08:07:59.729] | : . ' , ; Number of conditions: 6
[08:07:59.729] | : . ' , ;  int 6
[08:07:59.730] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.730] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.730] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.730] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.730] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.730] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.731] | : . ' , signalConditions() ... done
[08:07:59.731] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:59.732] | : . Launching futures ... done
[08:07:59.732] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:59.732] | : Using SequentialFutureBackend ... done
[08:07:59.732] | run() for ‘Future’ (<unnamed-13>) ... done
[08:07:59.732] future(..., label = NULL) ... done
<environment: 0x55675a858950> 
<environment: 0x556759c126a8> 
[08:07:59.733] resolved() for environment ...
[08:07:59.733] | resolved() for list ...
[08:07:59.734] | : Number of elements: 4
[08:07:59.734] | : Number of futures: 4
[08:07:59.734] | : resolved() for SequentialFuture (<unnamed-11>) ...
[08:07:59.734] | : . state: ‘finished’
[08:07:59.734] | : . run: TRUE
[08:07:59.734] | : . result: ‘FutureResult’
[08:07:59.734] | : resolved() for SequentialFuture (<unnamed-11>) ... done
[08:07:59.734] | : resolved() for SequentialFuture (<unnamed-12>) ...
[08:07:59.734] | : . state: ‘finished’
[08:07:59.735] | : . run: TRUE
[08:07:59.735] | : . result: ‘FutureResult’
[08:07:59.735] | : resolved() for SequentialFuture (<unnamed-12>) ... done
[08:07:59.735] | : resolved() for SequentialFuture (<unnamed-13>) ...
[08:07:59.735] | : . state: ‘finished’
[08:07:59.735] | : . run: TRUE
[08:07:59.735] | : . result: ‘FutureResult’
[08:07:59.735] | : resolved() for SequentialFuture (<unnamed-13>) ... done
[08:07:59.735] | resolved() for list ... done
[08:07:59.735] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE TRUE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:07:59.736] value() for SequentialFuture (<unnamed-13>) ...
[08:07:59.736] | signalConditions() ...
[08:07:59.736] | : include = ‘immediateCondition’
[08:07:59.736] | : exclude = 
[08:07:59.737] | : resignal = FALSE
[08:07:59.737] | : Number of conditions: 6
[08:07:59.737] | :  int 6
[08:07:59.737] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.737] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.737] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.737] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.738] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.738] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.738] | signalConditions() ... done
[08:07:59.738] | relay stdout ...
[08:07:59.738] | relay stdout ... done
[08:07:59.738] | check for misuse ...
[08:07:59.738] | check for misuse ... done
[08:07:59.738] | relay conditions ...
[08:07:59.738] | : Future state: ‘finished’
[08:07:59.738] | : signalConditions() ...
[08:07:59.739] | : . include = ‘condition’
[08:07:59.739] | : . exclude = ‘immediateCondition’
[08:07:59.739] | : . resignal = TRUE
[08:07:59.739] | : . Number of conditions: 6
[08:07:59.739] | : .  int 6
[08:07:59.739] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.739] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.704] | : . ' , attachPackages() ...
[08:07:59.740] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.740] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.704] | : . ' , ; packages: [n=1] ‘future’
[08:07:59.740] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.740] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.704] | : . ' , attachPackages() ... done
[08:07:59.740] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.740] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.704] | : . ' , attachPackages() ...
[08:07:59.740] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.740] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.704] | : . ' , ; packages: [n=0] 
[08:07:59.740] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.741] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.704] | : . ' , attachPackages() ... done
[08:07:59.741] | : signalConditions() ... done
[08:07:59.741] | relay conditions ... done
[08:07:59.741] value() for SequentialFuture (<unnamed-13>) ... done
[08:07:59.742] value() for listenv ...
[08:07:59.742] | recursive: 0
[08:07:59.742] | reduce: FALSE
[08:07:59.743] | length: 4
[08:07:59.743] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:07:59.743] | Number of remaining objects: 4
[08:07:59.743] | checking value #1:
[08:07:59.743] | 'obj' is atomic
[08:07:59.743] | signalConditionsASAP(numeric, pos=1) ...
[08:07:59.743] | : nx: 4
[08:07:59.744] | : relay: TRUE
[08:07:59.744] | : stdout: TRUE
[08:07:59.744] | : signal: TRUE
[08:07:59.744] | : resignal: FALSE
[08:07:59.744] | : force: TRUE
[08:07:59.744] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:07:59.744] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:07:59.744] | : until=2
[08:07:59.744] | : relaying element #2
[08:07:59.744] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:07:59.744] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:07:59.745] | signalConditionsASAP(numeric, pos=1) ... done
[08:07:59.745] | length: 3 (resolved future 1)
[08:07:59.745] value() for listenv ... done
[08:07:59.745] checking value #2:
[08:07:59.745] 'obj' is SequentialFuture
[08:07:59.745] resolved() for SequentialFuture (<unnamed-11>) ...
[08:07:59.745] | state: ‘finished’
[08:07:59.746] | run: TRUE
[08:07:59.746] | result: ‘FutureResult’
[08:07:59.746] resolved() for SequentialFuture (<unnamed-11>) ... done
[08:07:59.746] SequentialFuture #2
[08:07:59.746] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:07:59.746] | nx: 4
[08:07:59.746] | relay: TRUE
[08:07:59.746] | stdout: TRUE
[08:07:59.746] | signal: TRUE
[08:07:59.746] | resignal: FALSE
[08:07:59.746] | force: TRUE
[08:07:59.747] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:07:59.747] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:07:59.747] | until=2
[08:07:59.747] | relaying element #2
[08:07:59.747] | value() for SequentialFuture (<unnamed-11>) ...
[08:07:59.747] | : signalConditions() ...
[08:07:59.747] | : . include = ‘immediateCondition’
[08:07:59.747] | : . exclude = 
[08:07:59.747] | : . resignal = FALSE
[08:07:59.747] | : . Number of conditions: 6
[08:07:59.748] | : .  int 6
[08:07:59.748] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.748] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.748] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.748] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.748] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.748] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.749] | : signalConditions() ... done
[08:07:59.749] | : relay stdout ...
[08:07:59.749] | : relay stdout ... done
[08:07:59.749] | : check for misuse ...
[08:07:59.750] | : check for misuse ... done
[08:07:59.750] | value() for SequentialFuture (<unnamed-11>) ... done
[08:07:59.750] | signalConditions() ...
[08:07:59.751] | : include = ‘immediateCondition’
[08:07:59.751] | : exclude = 
[08:07:59.751] | : resignal = FALSE
[08:07:59.751] | : Number of conditions: 6
[08:07:59.751] | :  int 6
[08:07:59.751] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.751] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.752] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.752] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.752] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.752] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.752] | signalConditions() ... done
[08:07:59.752] | signalConditions() ...
[08:07:59.752] | : include = ‘condition’
[08:07:59.752] | : exclude = ‘error’, ‘immediateCondition’
[08:07:59.752] | : resignal = TRUE
[08:07:59.753] | : Number of conditions: 6
[08:07:59.753] | :  int 6
[08:07:59.753] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.753] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.634] | : . ' , attachPackages() ...
[08:07:59.753] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.753] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.634] | : . ' , ; packages: [n=1] ‘future’
[08:07:59.753] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.754] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.635] | : . ' , attachPackages() ... done
[08:07:59.754] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.754] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.635] | : . ' , attachPackages() ...
[08:07:59.754] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.754] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.635] | : . ' , ; packages: [n=0] 
[08:07:59.754] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.754] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.635] | : . ' , attachPackages() ... done
[08:07:59.754] | signalConditions() ... done
[08:07:59.754] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:07:59.755] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:07:59.755] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:07:59.755] value(<SequentialFuture>, ...) ...
[08:07:59.755] value(<SequentialFuture>, ...) ... done
[08:07:59.755] value() for SequentialFuture (<unnamed-11>) ...
[08:07:59.755] | signalConditions() ...
[08:07:59.755] | : include = ‘immediateCondition’
[08:07:59.755] | : exclude = 
[08:07:59.755] | : resignal = FALSE
[08:07:59.755] | : Number of conditions: 6
[08:07:59.756] | :  int 6
[08:07:59.756] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.756] | : already signaled, skipping
[08:07:59.756] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.756] | : already signaled, skipping
[08:07:59.756] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.756] | : already signaled, skipping
[08:07:59.756] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.757] | : already signaled, skipping
[08:07:59.757] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.757] | : already signaled, skipping
[08:07:59.757] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.757] | : already signaled, skipping
[08:07:59.757] | signalConditions() ... done
[08:07:59.757] | check for misuse ...
[08:07:59.757] | check for misuse ... done
[08:07:59.757] value() for SequentialFuture (<unnamed-11>) ... done
[08:07:59.757] value: <numeric>
[08:07:59.758] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:07:59.758] | nx: 4
[08:07:59.758] | relay: TRUE
[08:07:59.758] | stdout: TRUE
[08:07:59.758] | signal: TRUE
[08:07:59.758] | resignal: FALSE
[08:07:59.758] | force: TRUE
[08:07:59.758] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:07:59.758] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:07:59.758] | until=3
[08:07:59.758] | relaying element #3
[08:07:59.759] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:07:59.759] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:07:59.759] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:07:59.759] resolve() for SequentialFuture ...
[08:07:59.759] resolve() for SequentialFuture ... done
[08:07:59.759] length: 2 (resolved future 2)

[08:07:59.759] checking value #3:
[08:07:59.759] 'obj' is SequentialFuture
[08:07:59.759] resolved() for SequentialFuture (<unnamed-12>) ...
[08:07:59.759] | state: ‘finished’
[08:07:59.760] | run: TRUE
[08:07:59.760] | result: ‘FutureResult’
[08:07:59.760] resolved() for SequentialFuture (<unnamed-12>) ... done
[08:07:59.760] SequentialFuture #3
[08:07:59.760] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:07:59.760] | nx: 4
[08:07:59.760] | relay: TRUE
[08:07:59.760] | stdout: TRUE
[08:07:59.760] | signal: TRUE
[08:07:59.760] | resignal: FALSE
[08:07:59.760] | force: TRUE
[08:07:59.761] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:07:59.761] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:07:59.761] | until=3
[08:07:59.761] | relaying element #3
[08:07:59.761] | value() for SequentialFuture (<unnamed-12>) ...
[08:07:59.761] | : signalConditions() ...
[08:07:59.761] | : . include = ‘immediateCondition’
[08:07:59.761] | : . exclude = 
[08:07:59.761] | : . resignal = FALSE
[08:07:59.761] | : . Number of conditions: 6
[08:07:59.761] | : .  int 6
[08:07:59.762] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.762] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.762] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.762] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.762] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.762] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.763] | : signalConditions() ... done
[08:07:59.763] | : relay stdout ...
[08:07:59.763] | : relay stdout ... done
[08:07:59.763] | : check for misuse ...
[08:07:59.763] | : check for misuse ... done
[08:07:59.763] | value() for SequentialFuture (<unnamed-12>) ... done
[08:07:59.763] | signalConditions() ...
[08:07:59.763] | : include = ‘immediateCondition’
[08:07:59.763] | : exclude = 
[08:07:59.763] | : resignal = FALSE
[08:07:59.764] | : Number of conditions: 6
[08:07:59.764] | :  int 6
[08:07:59.764] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.764] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.764] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.764] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.764] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.765] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.765] | signalConditions() ... done
[08:07:59.765] | signalConditions() ...
[08:07:59.765] | : include = ‘condition’
[08:07:59.765] | : exclude = ‘error’, ‘immediateCondition’
[08:07:59.765] | : resignal = TRUE
[08:07:59.765] | : Number of conditions: 6
[08:07:59.765] | :  int 6
[08:07:59.766] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.766] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.666] | : . ' , attachPackages() ...
[08:07:59.766] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.766] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.666] | : . ' , ; packages: [n=1] ‘future’
[08:07:59.766] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.766] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.667] | : . ' , attachPackages() ... done
[08:07:59.769] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.769] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.667] | : . ' , attachPackages() ...
[08:07:59.769] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.769] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.667] | : . ' , ; packages: [n=0] 
[08:07:59.769] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.769] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.667] | : . ' , attachPackages() ... done
[08:07:59.770] | signalConditions() ... done
[08:07:59.770] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:07:59.770] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:07:59.770] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:07:59.770] value(<SequentialFuture>, ...) ...
[08:07:59.770] value(<SequentialFuture>, ...) ... done
[08:07:59.770] value() for SequentialFuture (<unnamed-12>) ...
[08:07:59.770] | signalConditions() ...
[08:07:59.770] | : include = ‘immediateCondition’
[08:07:59.771] | : exclude = 
[08:07:59.771] | : resignal = FALSE
[08:07:59.771] | : Number of conditions: 6
[08:07:59.771] | :  int 6
[08:07:59.771] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.771] | : already signaled, skipping
[08:07:59.772] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.772] | : already signaled, skipping
[08:07:59.772] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.772] | : already signaled, skipping
[08:07:59.772] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.772] | : already signaled, skipping
[08:07:59.772] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.772] | : already signaled, skipping
[08:07:59.772] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.772] | : already signaled, skipping
[08:07:59.772] | signalConditions() ... done
[08:07:59.773] | check for misuse ...
[08:07:59.773] | check for misuse ... done
[08:07:59.773] value() for SequentialFuture (<unnamed-12>) ... done
[08:07:59.773] value: <NULL>
[08:07:59.773] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:07:59.773] | nx: 4
[08:07:59.773] | relay: TRUE
[08:07:59.773] | stdout: TRUE
[08:07:59.773] | signal: TRUE
[08:07:59.773] | resignal: FALSE
[08:07:59.774] | force: TRUE
[08:07:59.774] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:07:59.774] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:07:59.774] | until=4
[08:07:59.774] | relaying element #4
[08:07:59.774] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:07:59.774] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:07:59.774] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:07:59.774] resolve() for SequentialFuture ...
[08:07:59.774] resolve() for SequentialFuture ... done
[08:07:59.775] length: 1 (resolved future 3)

[08:07:59.775] checking value #4:
[08:07:59.775] 'obj' is atomic
[08:07:59.775] signalConditionsASAP(numeric, pos=4) ...
[08:07:59.775] | nx: 4
[08:07:59.775] | relay: TRUE
[08:07:59.775] | stdout: TRUE
[08:07:59.775] | signal: TRUE
[08:07:59.775] | resignal: FALSE
[08:07:59.775] | force: TRUE
[08:07:59.775] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:07:59.776] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:07:59.776] | until=4
[08:07:59.776] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:07:59.776] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:07:59.776] signalConditionsASAP(numeric, pos=4) ... done
[08:07:59.776] length: 0 (resolved future 4)

[08:07:59.776] Relaying remaining futures ...
[08:07:59.776] | signalConditionsASAP(NULL, pos=0) ...
[08:07:59.776] | : nx: 4
[08:07:59.777] | : relay: TRUE
[08:07:59.777] | : stdout: TRUE
[08:07:59.777] | : signal: TRUE
[08:07:59.777] | : resignal: FALSE
[08:07:59.777] | : force: TRUE
[08:07:59.777] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:07:59.777] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:07:59.777] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:07:59.777] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:07:59.777] | signalConditionsASAP(NULL, pos=0) ... done
[08:07:59.778] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(1, 6)
[08:07:59.779] future(..., label = NULL) ...
[08:07:59.779] | lazy: FALSE
[08:07:59.779] | stdout: TRUE
[08:07:59.779] | conditions: [n=1] ‘condition’
[08:07:59.780] | gc: FALSE
[08:07:59.780] | earlySignal: FALSE
[08:07:59.780] | getGlobalsAndPackages() ...
[08:07:59.780] | : Searching for globals ...
[08:07:59.781] | : . globals found: [0] 
[08:07:59.781] | : Searching for globals ... done
[08:07:59.781] | : globals: [0] <none>
[08:07:59.781] | : packages: [0] <none>
[08:07:59.781] | getGlobalsAndPackages() ... done
[08:07:59.782] | run() for ‘Future’ (<unnamed-14>) ...
[08:07:59.782] | : state: ‘created’
[08:07:59.782] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.782] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.782] | : Using SequentialFutureBackend ...
[08:07:59.782] | : . Number of futures since start: 13 (13 created, 13 launched, 13 finished)
[08:07:59.782] | : . Launching futures ...
[08:07:59.782] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:59.783] | : . ' , getFutureData() ...
[08:07:59.783] | : . ' , ; getFutureCore() ...
[08:07:59.783] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:59.783] | : . ' , ; getFutureCore() ... done
[08:07:59.783] | : . ' , ; getFutureCapture() ...
[08:07:59.783] | : . ' , ; getFutureCapture() ... done
[08:07:59.783] | : . ' , ; getFutureContext() ...
[08:07:59.783] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.783] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:59.784] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.784] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:59.784] | : . ' , ; getFutureContext() ... done
[08:07:59.784] | : . ' , getFutureData() ... done
[08:07:59.785] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.785] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:59.785] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.786] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.786] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.786] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:59.786] | : . ' , ; ` | New stack:
[08:07:59.786] | : . ' , ; ` | List of 1
[08:07:59.786] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.786] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.786] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:59.786] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.786] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.786] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.786] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.786] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.790] | : . ' , ; ` | Old stack:
[08:07:59.790] | : . ' , ; ` | List of 1
[08:07:59.790] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.790] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.790] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:59.790] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.790] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.790] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.790] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:59.790] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.790] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.790] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.790] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.793] | : . ' , ; ` | Not identical
[08:07:59.793] | : . ' , ; ` | all.equal() for future ...
[08:07:59.793] | : . ' , ; ` | : List of 2
[08:07:59.793] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.793] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.793] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:59.793] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.793] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.793] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.793] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.793] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.793] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.793] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.793] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.793] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.793] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.793] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.793] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.793] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.793] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.798] | : . ' , ; ` | all.equal() for future ... done
[08:07:59.798] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:59.798] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.799] | : . ' , ; ` List of future strategies:
[08:07:59.799] | : . ' , ; ` 1. sequential:
[08:07:59.799] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.799] | : . ' , ; `    - tweaked: FALSE
[08:07:59.799] | : . ' , ; `    - call: plan(sequential)
[08:07:59.799] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.799] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.801] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.801] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.801] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.801] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:59.801] | : . ' , ; ` | : New stack:
[08:07:59.801] | : . ' , ; ` | : List of 1
[08:07:59.801] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.801] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.801] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.801] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.801] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.801] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.801] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.801] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.801] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.801] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.801] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.804] | : . ' , ; ` | : Old stack:
[08:07:59.804] | : . ' , ; ` | : List of 1
[08:07:59.804] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.804] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.804] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.804] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.804] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.804] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.804] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.804] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.804] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.804] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.804] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.809] | : . ' , ; ` | : Identical
[08:07:59.809] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:59.809] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.809] | : . ' , ; ` | List of future strategies:
[08:07:59.809] | : . ' , ; ` | 1. sequential:
[08:07:59.809] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.809] | : . ' , ; ` |    - tweaked: FALSE
[08:07:59.809] | : . ' , ; ` |    - call: plan(sequential)
[08:07:59.809] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.810] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.810] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.810] | : . ' , SequentialFuture started (and completed)
[08:07:59.810] | : . ' , signalConditions() ...
[08:07:59.810] | : . ' , ; include = ‘immediateCondition’
[08:07:59.810] | : . ' , ; exclude = 
[08:07:59.810] | : . ' , ; resignal = FALSE
[08:07:59.810] | : . ' , ; Number of conditions: 6
[08:07:59.811] | : . ' , ;  int 6
[08:07:59.811] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.811] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.811] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.811] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.811] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.811] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.812] | : . ' , signalConditions() ... done
[08:07:59.812] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:59.812] | : . Launching futures ... done
[08:07:59.812] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:59.812] | : Using SequentialFutureBackend ... done
[08:07:59.812] | run() for ‘Future’ (<unnamed-14>) ... done
[08:07:59.812] future(..., label = NULL) ... done
[08:07:59.812] future(..., label = NULL) ...
[08:07:59.812] | lazy: FALSE
[08:07:59.812] | stdout: TRUE
[08:07:59.813] | conditions: [n=1] ‘condition’
[08:07:59.813] | gc: FALSE
[08:07:59.813] | earlySignal: FALSE
[08:07:59.813] | getGlobalsAndPackages() ...
[08:07:59.813] | : Searching for globals ...
[08:07:59.814] | : . globals found: [0] 
[08:07:59.814] | : Searching for globals ... done
[08:07:59.814] | : globals: [0] <none>
[08:07:59.814] | : packages: [0] <none>
[08:07:59.814] | getGlobalsAndPackages() ... done
[08:07:59.815] | run() for ‘Future’ (<unnamed-15>) ...
[08:07:59.815] | : state: ‘created’
[08:07:59.815] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.815] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.815] | : Using SequentialFutureBackend ...
[08:07:59.815] | : . Number of futures since start: 14 (14 created, 14 launched, 14 finished)
[08:07:59.815] | : . Launching futures ...
[08:07:59.815] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:59.815] | : . ' , getFutureData() ...
[08:07:59.816] | : . ' , ; getFutureCore() ...
[08:07:59.816] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:59.816] | : . ' , ; getFutureCore() ... done
[08:07:59.816] | : . ' , ; getFutureCapture() ...
[08:07:59.816] | : . ' , ; getFutureCapture() ... done
[08:07:59.816] | : . ' , ; getFutureContext() ...
[08:07:59.816] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.816] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:59.816] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.816] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:59.817] | : . ' , ; getFutureContext() ... done
[08:07:59.817] | : . ' , getFutureData() ... done
[08:07:59.818] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.818] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:59.818] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.818] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.819] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.819] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:59.819] | : . ' , ; ` | New stack:
[08:07:59.819] | : . ' , ; ` | List of 1
[08:07:59.819] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.819] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.819] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:59.819] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.819] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.819] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.819] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.819] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.821] | : . ' , ; ` | Old stack:
[08:07:59.821] | : . ' , ; ` | List of 1
[08:07:59.821] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.821] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.821] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:59.821] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.821] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.821] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.821] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:59.821] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.821] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.821] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.821] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.825] | : . ' , ; ` | Not identical
[08:07:59.826] | : . ' , ; ` | all.equal() for future ...
[08:07:59.826] | : . ' , ; ` | : List of 2
[08:07:59.826] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.826] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.826] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:59.826] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.826] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.826] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.826] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.826] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.826] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.826] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.826] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.826] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.826] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.826] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.826] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.826] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.826] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.831] | : . ' , ; ` | all.equal() for future ... done
[08:07:59.831] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:59.831] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.831] | : . ' , ; ` List of future strategies:
[08:07:59.831] | : . ' , ; ` 1. sequential:
[08:07:59.831] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.831] | : . ' , ; `    - tweaked: FALSE
[08:07:59.831] | : . ' , ; `    - call: plan(sequential)
[08:07:59.832] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.832] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.833] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.833] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.833] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.833] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:59.834] | : . ' , ; ` | : New stack:
[08:07:59.834] | : . ' , ; ` | : List of 1
[08:07:59.834] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.834] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.834] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.834] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.834] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.834] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.834] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.834] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.834] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.834] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.834] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.837] | : . ' , ; ` | : Old stack:
[08:07:59.837] | : . ' , ; ` | : List of 1
[08:07:59.837] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.837] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.837] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.837] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.837] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.837] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.837] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.837] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.837] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.837] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.837] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.840] | : . ' , ; ` | : Identical
[08:07:59.840] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:59.840] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.840] | : . ' , ; ` | List of future strategies:
[08:07:59.840] | : . ' , ; ` | 1. sequential:
[08:07:59.840] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.840] | : . ' , ; ` |    - tweaked: FALSE
[08:07:59.840] | : . ' , ; ` |    - call: plan(sequential)
[08:07:59.841] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.841] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.841] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.841] | : . ' , SequentialFuture started (and completed)
[08:07:59.841] | : . ' , signalConditions() ...
[08:07:59.841] | : . ' , ; include = ‘immediateCondition’
[08:07:59.841] | : . ' , ; exclude = 
[08:07:59.841] | : . ' , ; resignal = FALSE
[08:07:59.842] | : . ' , ; Number of conditions: 6
[08:07:59.843] | : . ' , ;  int 6
[08:07:59.843] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.843] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.843] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.843] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.843] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.844] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.844] | : . ' , signalConditions() ... done
[08:07:59.844] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:59.844] | : . Launching futures ... done
[08:07:59.844] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:59.844] | : Using SequentialFutureBackend ... done
[08:07:59.844] | run() for ‘Future’ (<unnamed-15>) ... done
[08:07:59.844] future(..., label = NULL) ... done
[08:07:59.845] future(..., label = NULL) ...
[08:07:59.845] | lazy: FALSE
[08:07:59.845] | stdout: TRUE
[08:07:59.845] | conditions: [n=1] ‘condition’
[08:07:59.845] | gc: FALSE
[08:07:59.845] | earlySignal: FALSE
[08:07:59.845] | getGlobalsAndPackages() ...
[08:07:59.845] | : Searching for globals ...
[08:07:59.848] | : . globals found: [1] ‘{’
[08:07:59.848] | : Searching for globals ... done
[08:07:59.848] | : Resolving globals: FALSE
[08:07:59.849] | : Search for packages associated with the globals ...
[08:07:59.849] | : . Packages associated with globals: [1] ‘base’
[08:07:59.849] | : . Packages: [1] ‘base’
[08:07:59.849] | : Search for packages associated with the globals ... done
[08:07:59.849] | : Packages after dropping 'base': [0] 
[08:07:59.849] | : globals: [0] 
[08:07:59.849] | : packages: [0] 
[08:07:59.850] | getGlobalsAndPackages() ... done
[08:07:59.850] | run() for ‘Future’ (<unnamed-16>) ...
[08:07:59.850] | : state: ‘created’
[08:07:59.850] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.850] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.850] | : Using SequentialFutureBackend ...
[08:07:59.850] | : . Number of futures since start: 15 (15 created, 15 launched, 15 finished)
[08:07:59.850] | : . Launching futures ...
[08:07:59.851] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:59.851] | : . ' , getFutureData() ...
[08:07:59.851] | : . ' , ; getFutureCore() ...
[08:07:59.851] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:59.851] | : . ' , ; getFutureCore() ... done
[08:07:59.851] | : . ' , ; getFutureCapture() ...
[08:07:59.851] | : . ' , ; getFutureCapture() ... done
[08:07:59.851] | : . ' , ; getFutureContext() ...
[08:07:59.851] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.852] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:59.852] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.852] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:59.852] | : . ' , ; getFutureContext() ... done
[08:07:59.852] | : . ' , getFutureData() ... done
[08:07:59.853] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.853] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:59.853] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.854] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.854] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.854] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:59.854] | : . ' , ; ` | New stack:
[08:07:59.854] | : . ' , ; ` | List of 1
[08:07:59.854] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.854] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.854] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:59.854] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.854] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.854] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.854] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.854] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.857] | : . ' , ; ` | Old stack:
[08:07:59.857] | : . ' , ; ` | List of 1
[08:07:59.857] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.857] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.857] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:59.857] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.857] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.857] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.857] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:59.857] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.857] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.857] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.857] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.860] | : . ' , ; ` | Not identical
[08:07:59.861] | : . ' , ; ` | all.equal() for future ...
[08:07:59.861] | : . ' , ; ` | : List of 2
[08:07:59.861] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.861] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.861] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:59.861] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.861] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.861] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.861] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.861] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.861] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.861] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.861] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.861] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.861] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.861] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.861] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.861] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.861] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.867] | : . ' , ; ` | all.equal() for future ... done
[08:07:59.867] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:59.867] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.867] | : . ' , ; ` List of future strategies:
[08:07:59.867] | : . ' , ; ` 1. sequential:
[08:07:59.867] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.867] | : . ' , ; `    - tweaked: FALSE
[08:07:59.867] | : . ' , ; `    - call: plan(sequential)
[08:07:59.867] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.868] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.869] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.869] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.869] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.869] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:59.870] | : . ' , ; ` | : New stack:
[08:07:59.870] | : . ' , ; ` | : List of 1
[08:07:59.870] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.870] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.870] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.870] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.870] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.870] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.870] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.870] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.870] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.870] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.870] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.873] | : . ' , ; ` | : Old stack:
[08:07:59.873] | : . ' , ; ` | : List of 1
[08:07:59.873] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.873] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.873] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.873] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.873] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.873] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.873] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.873] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.873] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.873] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.873] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.876] | : . ' , ; ` | : Identical
[08:07:59.876] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:59.876] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.876] | : . ' , ; ` | List of future strategies:
[08:07:59.876] | : . ' , ; ` | 1. sequential:
[08:07:59.876] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.876] | : . ' , ; ` |    - tweaked: FALSE
[08:07:59.876] | : . ' , ; ` |    - call: plan(sequential)
[08:07:59.877] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.877] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.877] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.877] | : . ' , SequentialFuture started (and completed)
[08:07:59.877] | : . ' , signalConditions() ...
[08:07:59.877] | : . ' , ; include = ‘immediateCondition’
[08:07:59.877] | : . ' , ; exclude = 
[08:07:59.878] | : . ' , ; resignal = FALSE
[08:07:59.878] | : . ' , ; Number of conditions: 6
[08:07:59.878] | : . ' , ;  int 6
[08:07:59.879] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.879] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.879] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.880] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.880] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.880] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.880] | : . ' , signalConditions() ... done
[08:07:59.880] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:59.880] | : . Launching futures ... done
[08:07:59.880] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:59.880] | : Using SequentialFutureBackend ... done
[08:07:59.880] | run() for ‘Future’ (<unnamed-16>) ... done
[08:07:59.881] future(..., label = NULL) ... done
<environment: 0x556759f98798> 
<environment: 0x55675b042200> 
[08:07:59.881] resolved() for environment ...
[08:07:59.882] | resolved() for list ...
[08:07:59.882] | : Number of elements: 4
[08:07:59.882] | : Number of futures: 4
[08:07:59.882] | : resolved() for SequentialFuture (<unnamed-14>) ...
[08:07:59.882] | : . state: ‘finished’
[08:07:59.883] | : . run: TRUE
[08:07:59.883] | : . result: ‘FutureResult’
[08:07:59.883] | : resolved() for SequentialFuture (<unnamed-14>) ... done
[08:07:59.883] | : resolved() for SequentialFuture (<unnamed-15>) ...
[08:07:59.883] | : . state: ‘finished’
[08:07:59.883] | : . run: TRUE
[08:07:59.883] | : . result: ‘FutureResult’
[08:07:59.883] | : resolved() for SequentialFuture (<unnamed-15>) ... done
[08:07:59.883] | : resolved() for SequentialFuture (<unnamed-16>) ...
[08:07:59.883] | : . state: ‘finished’
[08:07:59.884] | : . run: TRUE
[08:07:59.884] | : . result: ‘FutureResult’
[08:07:59.884] | : resolved() for SequentialFuture (<unnamed-16>) ... done
[08:07:59.884] | resolved() for list ... done
[08:07:59.884] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE TRUE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:07:59.885] value() for SequentialFuture (<unnamed-16>) ...
[08:07:59.885] | signalConditions() ...
[08:07:59.885] | : include = ‘immediateCondition’
[08:07:59.885] | : exclude = 
[08:07:59.885] | : resignal = FALSE
[08:07:59.885] | : Number of conditions: 6
[08:07:59.885] | :  int 6
[08:07:59.886] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.886] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.886] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.886] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.886] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.886] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.886] | signalConditions() ... done
[08:07:59.886] | relay stdout ...
[08:07:59.887] | relay stdout ... done
[08:07:59.887] | check for misuse ...
[08:07:59.887] | check for misuse ... done
[08:07:59.887] | relay conditions ...
[08:07:59.887] | : Future state: ‘finished’
[08:07:59.887] | : signalConditions() ...
[08:07:59.887] | : . include = ‘condition’
[08:07:59.887] | : . exclude = ‘immediateCondition’
[08:07:59.887] | : . resignal = TRUE
[08:07:59.887] | : . Number of conditions: 6
[08:07:59.888] | : .  int 6
[08:07:59.888] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.888] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.852] | : . ' , attachPackages() ...
[08:07:59.888] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.888] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.852] | : . ' , ; packages: [n=1] ‘future’
[08:07:59.888] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.889] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.852] | : . ' , attachPackages() ... done
[08:07:59.889] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.889] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.853] | : . ' , attachPackages() ...
[08:07:59.889] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.889] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.853] | : . ' , ; packages: [n=0] 
[08:07:59.889] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.889] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.853] | : . ' , attachPackages() ... done
[08:07:59.889] | : signalConditions() ... done
[08:07:59.889] | relay conditions ... done
[08:07:59.890] value() for SequentialFuture (<unnamed-16>) ... done
[08:07:59.890] value() for listenv ...
[08:07:59.890] | recursive: 0
[08:07:59.890] | reduce: FALSE
[08:07:59.891] | length: 4
[08:07:59.891] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:07:59.891] | Number of remaining objects: 4
[08:07:59.891] | checking value #1:
[08:07:59.891] | 'obj' is atomic
[08:07:59.891] | signalConditionsASAP(numeric, pos=1) ...
[08:07:59.891] | : nx: 4
[08:07:59.891] | : relay: TRUE
[08:07:59.891] | : stdout: TRUE
[08:07:59.891] | : signal: TRUE
[08:07:59.892] | : resignal: FALSE
[08:07:59.892] | : force: TRUE
[08:07:59.892] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:07:59.892] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:07:59.892] | : until=2
[08:07:59.892] | : relaying element #2
[08:07:59.892] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:07:59.892] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:07:59.892] | signalConditionsASAP(numeric, pos=1) ... done
[08:07:59.892] | length: 3 (resolved future 1)
[08:07:59.893] value() for listenv ... done
[08:07:59.893] checking value #2:
[08:07:59.893] 'obj' is SequentialFuture
[08:07:59.893] resolved() for SequentialFuture (<unnamed-14>) ...
[08:07:59.893] | state: ‘finished’
[08:07:59.893] | run: TRUE
[08:07:59.893] | result: ‘FutureResult’
[08:07:59.893] resolved() for SequentialFuture (<unnamed-14>) ... done
[08:07:59.893] SequentialFuture #2
[08:07:59.893] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:07:59.894] | nx: 4
[08:07:59.894] | relay: TRUE
[08:07:59.894] | stdout: TRUE
[08:07:59.894] | signal: TRUE
[08:07:59.894] | resignal: FALSE
[08:07:59.894] | force: TRUE
[08:07:59.894] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:07:59.894] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:07:59.894] | until=2
[08:07:59.894] | relaying element #2
[08:07:59.894] | value() for SequentialFuture (<unnamed-14>) ...
[08:07:59.895] | : signalConditions() ...
[08:07:59.895] | : . include = ‘immediateCondition’
[08:07:59.895] | : . exclude = 
[08:07:59.895] | : . resignal = FALSE
[08:07:59.895] | : . Number of conditions: 6
[08:07:59.895] | : .  int 6
[08:07:59.895] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.895] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.896] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.896] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.896] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.896] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.896] | : signalConditions() ... done
[08:07:59.896] | : relay stdout ...
[08:07:59.896] | : relay stdout ... done
[08:07:59.896] | : check for misuse ...
[08:07:59.896] | : check for misuse ... done
[08:07:59.898] | value() for SequentialFuture (<unnamed-14>) ... done
[08:07:59.898] | signalConditions() ...
[08:07:59.898] | : include = ‘immediateCondition’
[08:07:59.898] | : exclude = 
[08:07:59.898] | : resignal = FALSE
[08:07:59.898] | : Number of conditions: 6
[08:07:59.898] | :  int 6
[08:07:59.899] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.899] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.899] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.899] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.899] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.899] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.899] | signalConditions() ... done
[08:07:59.899] | signalConditions() ...
[08:07:59.899] | : include = ‘condition’
[08:07:59.900] | : exclude = ‘error’, ‘immediateCondition’
[08:07:59.900] | : resignal = TRUE
[08:07:59.900] | : Number of conditions: 6
[08:07:59.900] | :  int 6
[08:07:59.900] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.900] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.784] | : . ' , attachPackages() ...
[08:07:59.901] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.901] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.784] | : . ' , ; packages: [n=1] ‘future’
[08:07:59.901] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.901] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.784] | : . ' , attachPackages() ... done
[08:07:59.901] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.901] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.785] | : . ' , attachPackages() ...
[08:07:59.901] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.901] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.785] | : . ' , ; packages: [n=0] 
[08:07:59.901] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.902] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.785] | : . ' , attachPackages() ... done
[08:07:59.902] | signalConditions() ... done
[08:07:59.902] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:07:59.902] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:07:59.902] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:07:59.902] value(<SequentialFuture>, ...) ...
[08:07:59.902] value(<SequentialFuture>, ...) ... done
[08:07:59.902] value() for SequentialFuture (<unnamed-14>) ...
[08:07:59.902] | signalConditions() ...
[08:07:59.902] | : include = ‘immediateCondition’
[08:07:59.903] | : exclude = 
[08:07:59.903] | : resignal = FALSE
[08:07:59.903] | : Number of conditions: 6
[08:07:59.903] | :  int 6
[08:07:59.903] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.903] | : already signaled, skipping
[08:07:59.903] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.904] | : already signaled, skipping
[08:07:59.904] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.904] | : already signaled, skipping
[08:07:59.904] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.904] | : already signaled, skipping
[08:07:59.904] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.904] | : already signaled, skipping
[08:07:59.904] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.904] | : already signaled, skipping
[08:07:59.904] | signalConditions() ... done
[08:07:59.905] | check for misuse ...
[08:07:59.905] | check for misuse ... done
[08:07:59.905] value() for SequentialFuture (<unnamed-14>) ... done
[08:07:59.905] value: <numeric>
[08:07:59.905] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:07:59.905] | nx: 4
[08:07:59.905] | relay: TRUE
[08:07:59.905] | stdout: TRUE
[08:07:59.905] | signal: TRUE
[08:07:59.905] | resignal: FALSE
[08:07:59.905] | force: TRUE
[08:07:59.906] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:07:59.906] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:07:59.906] | until=3
[08:07:59.906] | relaying element #3
[08:07:59.906] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:07:59.906] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:07:59.906] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:07:59.906] resolve() for SequentialFuture ...
[08:07:59.906] resolve() for SequentialFuture ... done
[08:07:59.906] length: 2 (resolved future 2)

[08:07:59.907] checking value #3:
[08:07:59.907] 'obj' is SequentialFuture
[08:07:59.907] resolved() for SequentialFuture (<unnamed-15>) ...
[08:07:59.907] | state: ‘finished’
[08:07:59.907] | run: TRUE
[08:07:59.907] | result: ‘FutureResult’
[08:07:59.907] resolved() for SequentialFuture (<unnamed-15>) ... done
[08:07:59.907] SequentialFuture #3
[08:07:59.907] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:07:59.908] | nx: 4
[08:07:59.908] | relay: TRUE
[08:07:59.908] | stdout: TRUE
[08:07:59.908] | signal: TRUE
[08:07:59.908] | resignal: FALSE
[08:07:59.908] | force: TRUE
[08:07:59.908] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:07:59.908] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:07:59.908] | until=3
[08:07:59.908] | relaying element #3
[08:07:59.908] | value() for SequentialFuture (<unnamed-15>) ...
[08:07:59.909] | : signalConditions() ...
[08:07:59.909] | : . include = ‘immediateCondition’
[08:07:59.909] | : . exclude = 
[08:07:59.909] | : . resignal = FALSE
[08:07:59.909] | : . Number of conditions: 6
[08:07:59.909] | : .  int 6
[08:07:59.909] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.909] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.910] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.910] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.910] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.910] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.910] | : signalConditions() ... done
[08:07:59.910] | : relay stdout ...
[08:07:59.910] | : relay stdout ... done
[08:07:59.910] | : check for misuse ...
[08:07:59.910] | : check for misuse ... done
[08:07:59.910] | value() for SequentialFuture (<unnamed-15>) ... done
[08:07:59.911] | signalConditions() ...
[08:07:59.911] | : include = ‘immediateCondition’
[08:07:59.911] | : exclude = 
[08:07:59.911] | : resignal = FALSE
[08:07:59.911] | : Number of conditions: 6
[08:07:59.911] | :  int 6
[08:07:59.911] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.912] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.912] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.912] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.912] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.912] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.912] | signalConditions() ... done
[08:07:59.912] | signalConditions() ...
[08:07:59.912] | : include = ‘condition’
[08:07:59.912] | : exclude = ‘error’, ‘immediateCondition’
[08:07:59.912] | : resignal = TRUE
[08:07:59.913] | : Number of conditions: 6
[08:07:59.913] | :  int 6
[08:07:59.913] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.913] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.817] | : . ' , attachPackages() ...
[08:07:59.913] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.913] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.817] | : . ' , ; packages: [n=1] ‘future’
[08:07:59.914] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.914] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.817] | : . ' , attachPackages() ... done
[08:07:59.914] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.914] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.817] | : . ' , attachPackages() ...
[08:07:59.914] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.914] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.817] | : . ' , ; packages: [n=0] 
[08:07:59.914] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.914] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.818] | : . ' , attachPackages() ... done
[08:07:59.915] | signalConditions() ... done
[08:07:59.916] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:07:59.916] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:07:59.916] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:07:59.916] value(<SequentialFuture>, ...) ...
[08:07:59.916] value(<SequentialFuture>, ...) ... done
[08:07:59.916] value() for SequentialFuture (<unnamed-15>) ...
[08:07:59.916] | signalConditions() ...
[08:07:59.916] | : include = ‘immediateCondition’
[08:07:59.916] | : exclude = 
[08:07:59.916] | : resignal = FALSE
[08:07:59.917] | : Number of conditions: 6
[08:07:59.917] | :  int 6
[08:07:59.917] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.917] | : already signaled, skipping
[08:07:59.917] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.917] | : already signaled, skipping
[08:07:59.917] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.918] | : already signaled, skipping
[08:07:59.918] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.918] | : already signaled, skipping
[08:07:59.918] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.918] | : already signaled, skipping
[08:07:59.918] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.918] | : already signaled, skipping
[08:07:59.918] | signalConditions() ... done
[08:07:59.918] | check for misuse ...
[08:07:59.918] | check for misuse ... done
[08:07:59.919] value() for SequentialFuture (<unnamed-15>) ... done
[08:07:59.919] value: <NULL>
[08:07:59.919] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:07:59.919] | nx: 4
[08:07:59.919] | relay: TRUE
[08:07:59.919] | stdout: TRUE
[08:07:59.919] | signal: TRUE
[08:07:59.919] | resignal: FALSE
[08:07:59.919] | force: TRUE
[08:07:59.919] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:07:59.920] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:07:59.920] | until=4
[08:07:59.920] | relaying element #4
[08:07:59.920] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:07:59.920] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:07:59.920] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:07:59.920] resolve() for SequentialFuture ...
[08:07:59.920] resolve() for SequentialFuture ... done
[08:07:59.920] length: 1 (resolved future 3)

[08:07:59.921] checking value #4:
[08:07:59.921] 'obj' is atomic
[08:07:59.921] signalConditionsASAP(numeric, pos=4) ...
[08:07:59.921] | nx: 4
[08:07:59.921] | relay: TRUE
[08:07:59.921] | stdout: TRUE
[08:07:59.921] | signal: TRUE
[08:07:59.921] | resignal: FALSE
[08:07:59.921] | force: TRUE
[08:07:59.921] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:07:59.921] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:07:59.921] | until=4
[08:07:59.922] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:07:59.922] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:07:59.922] signalConditionsASAP(numeric, pos=4) ... done
[08:07:59.922] length: 0 (resolved future 4)

[08:07:59.922] Relaying remaining futures ...
[08:07:59.922] | signalConditionsASAP(NULL, pos=0) ...
[08:07:59.922] | : nx: 4
[08:07:59.922] | : relay: TRUE
[08:07:59.922] | : stdout: TRUE
[08:07:59.923] | : signal: TRUE
[08:07:59.923] | : resignal: FALSE
[08:07:59.923] | : force: TRUE
[08:07:59.923] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:07:59.923] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:07:59.923] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:07:59.923] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:07:59.923] | signalConditionsASAP(NULL, pos=0) ... done
[08:07:59.923] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(2, 3)
[08:07:59.925] future(..., label = NULL) ...
[08:07:59.925] | lazy: FALSE
[08:07:59.925] | stdout: TRUE
[08:07:59.925] | conditions: [n=1] ‘condition’
[08:07:59.925] | gc: FALSE
[08:07:59.925] | earlySignal: FALSE
[08:07:59.926] | getGlobalsAndPackages() ...
[08:07:59.926] | : Searching for globals ...
[08:07:59.927] | : . globals found: [0] 
[08:07:59.927] | : Searching for globals ... done
[08:07:59.927] | : globals: [0] <none>
[08:07:59.927] | : packages: [0] <none>
[08:07:59.927] | getGlobalsAndPackages() ... done
[08:07:59.927] | run() for ‘Future’ (<unnamed-17>) ...
[08:07:59.927] | : state: ‘created’
[08:07:59.928] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.928] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.928] | : Using SequentialFutureBackend ...
[08:07:59.928] | : . Number of futures since start: 16 (16 created, 16 launched, 16 finished)
[08:07:59.928] | : . Launching futures ...
[08:07:59.928] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:59.928] | : . ' , getFutureData() ...
[08:07:59.928] | : . ' , ; getFutureCore() ...
[08:07:59.928] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:59.929] | : . ' , ; getFutureCore() ... done
[08:07:59.929] | : . ' , ; getFutureCapture() ...
[08:07:59.929] | : . ' , ; getFutureCapture() ... done
[08:07:59.929] | : . ' , ; getFutureContext() ...
[08:07:59.929] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.929] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:59.929] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.929] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:59.929] | : . ' , ; getFutureContext() ... done
[08:07:59.929] | : . ' , getFutureData() ... done
[08:07:59.931] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.931] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:59.931] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.931] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.931] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.931] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:59.932] | : . ' , ; ` | New stack:
[08:07:59.932] | : . ' , ; ` | List of 1
[08:07:59.932] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.932] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.932] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:59.932] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.932] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.932] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.932] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.932] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.935] | : . ' , ; ` | Old stack:
[08:07:59.935] | : . ' , ; ` | List of 1
[08:07:59.935] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.935] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.935] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:59.935] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.935] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.935] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.935] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:59.935] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.935] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.935] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.935] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.938] | : . ' , ; ` | Not identical
[08:07:59.939] | : . ' , ; ` | all.equal() for future ...
[08:07:59.939] | : . ' , ; ` | : List of 2
[08:07:59.939] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.939] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.939] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:59.939] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.939] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.939] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.939] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.939] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.939] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.939] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.939] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.939] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.939] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.939] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.939] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.939] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.939] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.944] | : . ' , ; ` | all.equal() for future ... done
[08:07:59.944] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:59.944] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.944] | : . ' , ; ` List of future strategies:
[08:07:59.944] | : . ' , ; ` 1. sequential:
[08:07:59.944] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.944] | : . ' , ; `    - tweaked: FALSE
[08:07:59.944] | : . ' , ; `    - call: plan(sequential)
[08:07:59.944] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.944] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.946] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.946] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.946] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.946] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:59.946] | : . ' , ; ` | : New stack:
[08:07:59.947] | : . ' , ; ` | : List of 1
[08:07:59.947] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.947] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.947] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.947] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.947] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.947] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.947] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.947] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.947] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.947] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.947] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.951] | : . ' , ; ` | : Old stack:
[08:07:59.951] | : . ' , ; ` | : List of 1
[08:07:59.951] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.951] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.951] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.951] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.951] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.951] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.951] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.951] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.951] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.951] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.951] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.954] | : . ' , ; ` | : Identical
[08:07:59.954] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:59.954] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.954] | : . ' , ; ` | List of future strategies:
[08:07:59.954] | : . ' , ; ` | 1. sequential:
[08:07:59.954] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.954] | : . ' , ; ` |    - tweaked: FALSE
[08:07:59.954] | : . ' , ; ` |    - call: plan(sequential)
[08:07:59.955] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.955] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.955] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.955] | : . ' , SequentialFuture started (and completed)
[08:07:59.955] | : . ' , signalConditions() ...
[08:07:59.955] | : . ' , ; include = ‘immediateCondition’
[08:07:59.956] | : . ' , ; exclude = 
[08:07:59.956] | : . ' , ; resignal = FALSE
[08:07:59.956] | : . ' , ; Number of conditions: 6
[08:07:59.956] | : . ' , ;  int 6
[08:07:59.956] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.956] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.956] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.957] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.957] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.957] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.957] | : . ' , signalConditions() ... done
[08:07:59.957] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:59.957] | : . Launching futures ... done
[08:07:59.957] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:59.957] | : Using SequentialFutureBackend ... done
[08:07:59.957] | run() for ‘Future’ (<unnamed-17>) ... done
[08:07:59.957] future(..., label = NULL) ... done
[08:07:59.958] future(..., label = NULL) ...
[08:07:59.958] | lazy: FALSE
[08:07:59.958] | stdout: TRUE
[08:07:59.958] | conditions: [n=1] ‘condition’
[08:07:59.958] | gc: FALSE
[08:07:59.958] | earlySignal: FALSE
[08:07:59.958] | getGlobalsAndPackages() ...
[08:07:59.958] | : Searching for globals ...
[08:07:59.959] | : . globals found: [0] 
[08:07:59.959] | : Searching for globals ... done
[08:07:59.960] | : globals: [0] <none>
[08:07:59.960] | : packages: [0] <none>
[08:07:59.960] | getGlobalsAndPackages() ... done
[08:07:59.960] | run() for ‘Future’ (<unnamed-18>) ...
[08:07:59.960] | : state: ‘created’
[08:07:59.960] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.960] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.960] | : Using SequentialFutureBackend ...
[08:07:59.960] | : . Number of futures since start: 17 (17 created, 17 launched, 17 finished)
[08:07:59.961] | : . Launching futures ...
[08:07:59.961] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:59.961] | : . ' , getFutureData() ...
[08:07:59.961] | : . ' , ; getFutureCore() ...
[08:07:59.961] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:59.961] | : . ' , ; getFutureCore() ... done
[08:07:59.961] | : . ' , ; getFutureCapture() ...
[08:07:59.961] | : . ' , ; getFutureCapture() ... done
[08:07:59.961] | : . ' , ; getFutureContext() ...
[08:07:59.961] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.962] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:59.962] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.962] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:59.962] | : . ' , ; getFutureContext() ... done
[08:07:59.962] | : . ' , getFutureData() ... done
[08:07:59.963] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.963] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:59.964] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.964] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.964] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.964] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:59.964] | : . ' , ; ` | New stack:
[08:07:59.964] | : . ' , ; ` | List of 1
[08:07:59.964] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.964] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.964] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:59.964] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.964] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.964] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.964] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.964] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.967] | : . ' , ; ` | Old stack:
[08:07:59.967] | : . ' , ; ` | List of 1
[08:07:59.967] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.967] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.967] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:59.967] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.967] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.967] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.967] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:59.967] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.967] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.967] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.967] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.971] | : . ' , ; ` | Not identical
[08:07:59.971] | : . ' , ; ` | all.equal() for future ...
[08:07:59.971] | : . ' , ; ` | : List of 2
[08:07:59.971] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.971] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.971] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:59.971] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.971] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.971] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.971] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.971] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.971] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.971] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.971] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.971] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.971] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.971] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.971] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.971] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.971] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.976] | : . ' , ; ` | all.equal() for future ... done
[08:07:59.976] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:59.976] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.976] | : . ' , ; ` List of future strategies:
[08:07:59.976] | : . ' , ; ` 1. sequential:
[08:07:59.976] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.976] | : . ' , ; `    - tweaked: FALSE
[08:07:59.976] | : . ' , ; `    - call: plan(sequential)
[08:07:59.977] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.977] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.978] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.979] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.979] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.979] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:59.979] | : . ' , ; ` | : New stack:
[08:07:59.979] | : . ' , ; ` | : List of 1
[08:07:59.979] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.979] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.979] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.979] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.979] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.979] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.979] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.979] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.979] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.979] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.979] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.982] | : . ' , ; ` | : Old stack:
[08:07:59.982] | : . ' , ; ` | : List of 1
[08:07:59.982] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.982] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.982] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:59.982] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.982] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.982] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.982] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:59.982] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:07:59.982] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.982] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.982] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:59.986] | : . ' , ; ` | : Identical
[08:07:59.986] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:59.986] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:59.986] | : . ' , ; ` | List of future strategies:
[08:07:59.986] | : . ' , ; ` | 1. sequential:
[08:07:59.986] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:59.986] | : . ' , ; ` |    - tweaked: FALSE
[08:07:59.986] | : . ' , ; ` |    - call: plan(sequential)
[08:07:59.987] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:59.987] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.987] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:59.987] | : . ' , SequentialFuture started (and completed)
[08:07:59.988] | : . ' , signalConditions() ...
[08:07:59.988] | : . ' , ; include = ‘immediateCondition’
[08:07:59.988] | : . ' , ; exclude = 
[08:07:59.988] | : . ' , ; resignal = FALSE
[08:07:59.988] | : . ' , ; Number of conditions: 6
[08:07:59.988] | : . ' , ;  int 6
[08:07:59.988] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.989] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.989] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.989] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.989] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.989] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:59.989] | : . ' , signalConditions() ... done
[08:07:59.989] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:59.989] | : . Launching futures ... done
[08:07:59.989] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:59.990] | : Using SequentialFutureBackend ... done
[08:07:59.990] | run() for ‘Future’ (<unnamed-18>) ... done
[08:07:59.990] future(..., label = NULL) ... done
[08:07:59.990] future(..., label = NULL) ...
[08:07:59.990] | lazy: FALSE
[08:07:59.990] | stdout: TRUE
[08:07:59.990] | conditions: [n=1] ‘condition’
[08:07:59.990] | gc: FALSE
[08:07:59.990] | earlySignal: FALSE
[08:07:59.991] | getGlobalsAndPackages() ...
[08:07:59.991] | : Searching for globals ...
[08:07:59.993] | : . globals found: [1] ‘{’
[08:07:59.993] | : Searching for globals ... done
[08:07:59.994] | : Resolving globals: FALSE
[08:07:59.994] | : Search for packages associated with the globals ...
[08:07:59.994] | : . Packages associated with globals: [1] ‘base’
[08:07:59.994] | : . Packages: [1] ‘base’
[08:07:59.994] | : Search for packages associated with the globals ... done
[08:07:59.994] | : Packages after dropping 'base': [0] 
[08:07:59.994] | : globals: [0] 
[08:07:59.995] | : packages: [0] 
[08:07:59.995] | getGlobalsAndPackages() ... done
[08:07:59.995] | run() for ‘Future’ (<unnamed-19>) ...
[08:07:59.995] | : state: ‘created’
[08:07:59.995] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.995] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.995] | : Using SequentialFutureBackend ...
[08:07:59.995] | : . Number of futures since start: 18 (18 created, 18 launched, 18 finished)
[08:07:59.996] | : . Launching futures ...
[08:07:59.996] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:59.996] | : . ' , getFutureData() ...
[08:07:59.996] | : . ' , ; getFutureCore() ...
[08:07:59.996] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:59.996] | : . ' , ; getFutureCore() ... done
[08:07:59.996] | : . ' , ; getFutureCapture() ...
[08:07:59.996] | : . ' , ; getFutureCapture() ... done
[08:07:59.996] | : . ' , ; getFutureContext() ...
[08:07:59.996] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.997] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:59.997] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.997] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:59.997] | : . ' , ; getFutureContext() ... done
[08:07:59.997] | : . ' , getFutureData() ... done
[08:07:59.998] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:59.998] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:59.998] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:59.999] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:59.999] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:59.999] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:59.999] | : . ' , ; ` | New stack:
[08:07:59.999] | : . ' , ; ` | List of 1
[08:07:59.999] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:59.999] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:59.999] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:59.999] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:59.999] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.999] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:59.999] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:59.999] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.003] | : . ' , ; ` | Old stack:
[08:08:00.003] | : . ' , ; ` | List of 1
[08:08:00.003] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.003] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.003] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:00.003] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.003] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.003] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.003] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:00.003] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.003] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.003] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.003] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.006] | : . ' , ; ` | Not identical
[08:08:00.007] | : . ' , ; ` | all.equal() for future ...
[08:08:00.007] | : . ' , ; ` | : List of 2
[08:08:00.007] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.007] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.007] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:00.007] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.007] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.007] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.007] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.007] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.007] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.007] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.007] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.007] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.007] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.007] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.007] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.007] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.007] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.012] | : . ' , ; ` | all.equal() for future ... done
[08:08:00.012] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:00.012] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.012] | : . ' , ; ` List of future strategies:
[08:08:00.012] | : . ' , ; ` 1. sequential:
[08:08:00.012] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.012] | : . ' , ; `    - tweaked: FALSE
[08:08:00.012] | : . ' , ; `    - call: plan(sequential)
[08:08:00.013] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.013] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.014] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.014] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.015] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.015] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:00.015] | : . ' , ; ` | : New stack:
[08:08:00.015] | : . ' , ; ` | : List of 1
[08:08:00.015] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.015] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.015] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.015] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.015] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.015] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.015] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.015] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.015] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.015] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.015] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.018] | : . ' , ; ` | : Old stack:
[08:08:00.018] | : . ' , ; ` | : List of 1
[08:08:00.018] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.018] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.018] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.018] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.018] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.018] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.018] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.018] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.018] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.018] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.018] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.024] | : . ' , ; ` | : Identical
[08:08:00.024] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:00.024] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.024] | : . ' , ; ` | List of future strategies:
[08:08:00.024] | : . ' , ; ` | 1. sequential:
[08:08:00.024] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.024] | : . ' , ; ` |    - tweaked: FALSE
[08:08:00.024] | : . ' , ; ` |    - call: plan(sequential)
[08:08:00.025] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.025] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.025] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.025] | : . ' , SequentialFuture started (and completed)
[08:08:00.025] | : . ' , signalConditions() ...
[08:08:00.026] | : . ' , ; include = ‘immediateCondition’
[08:08:00.026] | : . ' , ; exclude = 
[08:08:00.026] | : . ' , ; resignal = FALSE
[08:08:00.026] | : . ' , ; Number of conditions: 6
[08:08:00.026] | : . ' , ;  int 6
[08:08:00.026] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.027] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.027] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.027] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.027] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.027] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.027] | : . ' , signalConditions() ... done
[08:08:00.027] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:00.027] | : . Launching futures ... done
[08:08:00.027] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:00.028] | : Using SequentialFutureBackend ... done
[08:08:00.028] | run() for ‘Future’ (<unnamed-19>) ... done
[08:08:00.028] future(..., label = NULL) ... done
<environment: 0x556759f22008> 
<environment: 0x556758375128> 
[08:08:00.029] resolved() for environment ...
[08:08:00.029] | resolved() for list ...
[08:08:00.029] | : Number of elements: 4
[08:08:00.029] | : Number of futures: 4
[08:08:00.029] | : resolved() for SequentialFuture (<unnamed-17>) ...
[08:08:00.030] | : . state: ‘finished’
[08:08:00.030] | : . run: TRUE
[08:08:00.030] | : . result: ‘FutureResult’
[08:08:00.030] | : resolved() for SequentialFuture (<unnamed-17>) ... done
[08:08:00.030] | : resolved() for SequentialFuture (<unnamed-18>) ...
[08:08:00.030] | : . state: ‘finished’
[08:08:00.030] | : . run: TRUE
[08:08:00.030] | : . result: ‘FutureResult’
[08:08:00.030] | : resolved() for SequentialFuture (<unnamed-18>) ... done
[08:08:00.031] | : resolved() for SequentialFuture (<unnamed-19>) ...
[08:08:00.031] | : . state: ‘finished’
[08:08:00.031] | : . run: TRUE
[08:08:00.031] | : . result: ‘FutureResult’
[08:08:00.031] | : resolved() for SequentialFuture (<unnamed-19>) ... done
[08:08:00.031] | resolved() for list ... done
[08:08:00.031] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE TRUE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:00.032] value() for SequentialFuture (<unnamed-19>) ...
[08:08:00.032] | signalConditions() ...
[08:08:00.032] | : include = ‘immediateCondition’
[08:08:00.032] | : exclude = 
[08:08:00.032] | : resignal = FALSE
[08:08:00.032] | : Number of conditions: 6
[08:08:00.033] | :  int 6
[08:08:00.033] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.033] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.033] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.033] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.033] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.033] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.034] | signalConditions() ... done
[08:08:00.034] | relay stdout ...
[08:08:00.034] | relay stdout ... done
[08:08:00.034] | check for misuse ...
[08:08:00.034] | check for misuse ... done
[08:08:00.034] | relay conditions ...
[08:08:00.034] | : Future state: ‘finished’
[08:08:00.034] | : signalConditions() ...
[08:08:00.035] | : . include = ‘condition’
[08:08:00.035] | : . exclude = ‘immediateCondition’
[08:08:00.035] | : . resignal = TRUE
[08:08:00.035] | : . Number of conditions: 6
[08:08:00.035] | : .  int 6
[08:08:00.035] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.035] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.997] | : . ' , attachPackages() ...
[08:08:00.036] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.036] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.997] | : . ' , ; packages: [n=1] ‘future’
[08:08:00.036] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.036] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.998] | : . ' , attachPackages() ... done
[08:08:00.036] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.036] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.998] | : . ' , attachPackages() ...
[08:08:00.036] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.036] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.998] | : . ' , ; packages: [n=0] 
[08:08:00.037] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.037] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.998] | : . ' , attachPackages() ... done
[08:08:00.037] | : signalConditions() ... done
[08:08:00.037] | relay conditions ... done
[08:08:00.037] value() for SequentialFuture (<unnamed-19>) ... done
[08:08:00.037] value() for listenv ...
[08:08:00.037] | recursive: 0
[08:08:00.038] | reduce: FALSE
[08:08:00.038] | length: 4
[08:08:00.038] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:00.038] | Number of remaining objects: 4
[08:08:00.039] | checking value #1:
[08:08:00.040] | 'obj' is atomic
[08:08:00.040] | signalConditionsASAP(numeric, pos=1) ...
[08:08:00.040] | : nx: 4
[08:08:00.041] | : relay: TRUE
[08:08:00.041] | : stdout: TRUE
[08:08:00.041] | : signal: TRUE
[08:08:00.041] | : resignal: FALSE
[08:08:00.041] | : force: TRUE
[08:08:00.041] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:00.041] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:00.041] | : until=2
[08:08:00.041] | : relaying element #2
[08:08:00.042] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:00.042] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:00.042] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:00.042] | length: 3 (resolved future 1)
[08:08:00.042] value() for listenv ... done
[08:08:00.042] checking value #2:
[08:08:00.042] 'obj' is SequentialFuture
[08:08:00.043] resolved() for SequentialFuture (<unnamed-17>) ...
[08:08:00.043] | state: ‘finished’
[08:08:00.043] | run: TRUE
[08:08:00.043] | result: ‘FutureResult’
[08:08:00.043] resolved() for SequentialFuture (<unnamed-17>) ... done
[08:08:00.043] SequentialFuture #2
[08:08:00.043] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:00.043] | nx: 4
[08:08:00.043] | relay: TRUE
[08:08:00.044] | stdout: TRUE
[08:08:00.044] | signal: TRUE
[08:08:00.044] | resignal: FALSE
[08:08:00.044] | force: TRUE
[08:08:00.044] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:00.044] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:00.044] | until=2
[08:08:00.044] | relaying element #2
[08:08:00.044] | value() for SequentialFuture (<unnamed-17>) ...
[08:08:00.044] | : signalConditions() ...
[08:08:00.044] | : . include = ‘immediateCondition’
[08:08:00.045] | : . exclude = 
[08:08:00.045] | : . resignal = FALSE
[08:08:00.045] | : . Number of conditions: 6
[08:08:00.045] | : .  int 6
[08:08:00.045] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.045] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.046] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.046] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.046] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.046] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.046] | : signalConditions() ... done
[08:08:00.046] | : relay stdout ...
[08:08:00.046] | : relay stdout ... done
[08:08:00.046] | : check for misuse ...
[08:08:00.046] | : check for misuse ... done
[08:08:00.046] | value() for SequentialFuture (<unnamed-17>) ... done
[08:08:00.047] | signalConditions() ...
[08:08:00.047] | : include = ‘immediateCondition’
[08:08:00.047] | : exclude = 
[08:08:00.047] | : resignal = FALSE
[08:08:00.047] | : Number of conditions: 6
[08:08:00.047] | :  int 6
[08:08:00.047] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.048] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.048] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.048] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.048] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.048] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.048] | signalConditions() ... done
[08:08:00.048] | signalConditions() ...
[08:08:00.048] | : include = ‘condition’
[08:08:00.048] | : exclude = ‘error’, ‘immediateCondition’
[08:08:00.049] | : resignal = TRUE
[08:08:00.049] | : Number of conditions: 6
[08:08:00.049] | :  int 6
[08:08:00.049] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.049] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.930] | : . ' , attachPackages() ...
[08:08:00.049] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.049] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.930] | : . ' , ; packages: [n=1] ‘future’
[08:08:00.050] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.050] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.930] | : . ' , attachPackages() ... done
[08:08:00.050] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.050] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.930] | : . ' , attachPackages() ...
[08:08:00.050] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.050] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.930] | : . ' , ; packages: [n=0] 
[08:08:00.050] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.050] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.930] | : . ' , attachPackages() ... done
[08:08:00.051] | signalConditions() ... done
[08:08:00.051] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:00.051] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:00.051] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:00.051] value(<SequentialFuture>, ...) ...
[08:08:00.051] value(<SequentialFuture>, ...) ... done
[08:08:00.051] value() for SequentialFuture (<unnamed-17>) ...
[08:08:00.051] | signalConditions() ...
[08:08:00.051] | : include = ‘immediateCondition’
[08:08:00.051] | : exclude = 
[08:08:00.052] | : resignal = FALSE
[08:08:00.052] | : Number of conditions: 6
[08:08:00.052] | :  int 6
[08:08:00.052] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.052] | : already signaled, skipping
[08:08:00.052] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.052] | : already signaled, skipping
[08:08:00.053] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.053] | : already signaled, skipping
[08:08:00.053] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.053] | : already signaled, skipping
[08:08:00.053] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.053] | : already signaled, skipping
[08:08:00.053] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.053] | : already signaled, skipping
[08:08:00.053] | signalConditions() ... done
[08:08:00.053] | check for misuse ...
[08:08:00.054] | check for misuse ... done
[08:08:00.054] value() for SequentialFuture (<unnamed-17>) ... done
[08:08:00.054] value: <numeric>
[08:08:00.054] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:00.054] | nx: 4
[08:08:00.054] | relay: TRUE
[08:08:00.054] | stdout: TRUE
[08:08:00.054] | signal: TRUE
[08:08:00.054] | resignal: FALSE
[08:08:00.054] | force: TRUE
[08:08:00.055] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:00.055] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:00.055] | until=3
[08:08:00.055] | relaying element #3
[08:08:00.055] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:00.055] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:00.055] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:00.055] resolve() for SequentialFuture ...
[08:08:00.055] resolve() for SequentialFuture ... done
[08:08:00.055] length: 2 (resolved future 2)

[08:08:00.056] checking value #3:
[08:08:00.056] 'obj' is SequentialFuture
[08:08:00.056] resolved() for SequentialFuture (<unnamed-18>) ...
[08:08:00.056] | state: ‘finished’
[08:08:00.056] | run: TRUE
[08:08:00.056] | result: ‘FutureResult’
[08:08:00.056] resolved() for SequentialFuture (<unnamed-18>) ... done
[08:08:00.056] SequentialFuture #3
[08:08:00.056] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:00.057] | nx: 4
[08:08:00.057] | relay: TRUE
[08:08:00.057] | stdout: TRUE
[08:08:00.057] | signal: TRUE
[08:08:00.057] | resignal: FALSE
[08:08:00.059] | force: TRUE
[08:08:00.059] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:00.059] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:00.059] | until=3
[08:08:00.059] | relaying element #3
[08:08:00.059] | value() for SequentialFuture (<unnamed-18>) ...
[08:08:00.059] | : signalConditions() ...
[08:08:00.059] | : . include = ‘immediateCondition’
[08:08:00.059] | : . exclude = 
[08:08:00.060] | : . resignal = FALSE
[08:08:00.060] | : . Number of conditions: 6
[08:08:00.060] | : .  int 6
[08:08:00.060] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.060] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.061] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.061] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.061] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.061] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.061] | : signalConditions() ... done
[08:08:00.061] | : relay stdout ...
[08:08:00.061] | : relay stdout ... done
[08:08:00.061] | : check for misuse ...
[08:08:00.062] | : check for misuse ... done
[08:08:00.062] | value() for SequentialFuture (<unnamed-18>) ... done
[08:08:00.062] | signalConditions() ...
[08:08:00.062] | : include = ‘immediateCondition’
[08:08:00.062] | : exclude = 
[08:08:00.062] | : resignal = FALSE
[08:08:00.062] | : Number of conditions: 6
[08:08:00.062] | :  int 6
[08:08:00.063] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.063] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.063] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.063] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.063] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.063] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.063] | signalConditions() ... done
[08:08:00.064] | signalConditions() ...
[08:08:00.064] | : include = ‘condition’
[08:08:00.064] | : exclude = ‘error’, ‘immediateCondition’
[08:08:00.064] | : resignal = TRUE
[08:08:00.064] | : Number of conditions: 6
[08:08:00.064] | :  int 6
[08:08:00.064] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.065] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.962] | : . ' , attachPackages() ...
[08:08:00.065] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.065] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.962] | : . ' , ; packages: [n=1] ‘future’
[08:08:00.065] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.065] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.963] | : . ' , attachPackages() ... done
[08:08:00.065] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.065] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.963] | : . ' , attachPackages() ...
[08:08:00.065] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.066] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.963] | : . ' , ; packages: [n=0] 
[08:08:00.066] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.066] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:59.963] | : . ' , attachPackages() ... done
[08:08:00.066] | signalConditions() ... done
[08:08:00.066] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:00.066] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:00.066] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:00.066] value(<SequentialFuture>, ...) ...
[08:08:00.066] value(<SequentialFuture>, ...) ... done
[08:08:00.066] value() for SequentialFuture (<unnamed-18>) ...
[08:08:00.067] | signalConditions() ...
[08:08:00.067] | : include = ‘immediateCondition’
[08:08:00.067] | : exclude = 
[08:08:00.067] | : resignal = FALSE
[08:08:00.067] | : Number of conditions: 6
[08:08:00.067] | :  int 6
[08:08:00.068] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.068] | : already signaled, skipping
[08:08:00.068] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.068] | : already signaled, skipping
[08:08:00.068] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.068] | : already signaled, skipping
[08:08:00.068] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.068] | : already signaled, skipping
[08:08:00.068] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.068] | : already signaled, skipping
[08:08:00.069] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.069] | : already signaled, skipping
[08:08:00.069] | signalConditions() ... done
[08:08:00.069] | check for misuse ...
[08:08:00.069] | check for misuse ... done
[08:08:00.069] value() for SequentialFuture (<unnamed-18>) ... done
[08:08:00.069] value: <NULL>
[08:08:00.069] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:00.069] | nx: 4
[08:08:00.070] | relay: TRUE
[08:08:00.070] | stdout: TRUE
[08:08:00.070] | signal: TRUE
[08:08:00.070] | resignal: FALSE
[08:08:00.070] | force: TRUE
[08:08:00.070] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:00.070] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:00.070] | until=4
[08:08:00.070] | relaying element #4
[08:08:00.070] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:00.070] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:00.071] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:00.071] resolve() for SequentialFuture ...
[08:08:00.071] resolve() for SequentialFuture ... done
[08:08:00.071] length: 1 (resolved future 3)

[08:08:00.071] checking value #4:
[08:08:00.071] 'obj' is atomic
[08:08:00.071] signalConditionsASAP(numeric, pos=4) ...
[08:08:00.071] | nx: 4
[08:08:00.071] | relay: TRUE
[08:08:00.072] | stdout: TRUE
[08:08:00.072] | signal: TRUE
[08:08:00.072] | resignal: FALSE
[08:08:00.072] | force: TRUE
[08:08:00.072] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:00.072] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:00.072] | until=4
[08:08:00.072] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:00.072] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:00.072] signalConditionsASAP(numeric, pos=4) ... done
[08:08:00.073] length: 0 (resolved future 4)

[08:08:00.073] Relaying remaining futures ...
[08:08:00.073] | signalConditionsASAP(NULL, pos=0) ...
[08:08:00.073] | : nx: 4
[08:08:00.073] | : relay: TRUE
[08:08:00.073] | : stdout: TRUE
[08:08:00.073] | : signal: TRUE
[08:08:00.073] | : resignal: FALSE
[08:08:00.073] | : force: TRUE
[08:08:00.074] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:00.074] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:00.074] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:00.074] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:00.074] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:00.074] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(2, 3, 1)
[08:08:00.078] future(..., label = NULL) ...
[08:08:00.078] | lazy: FALSE
[08:08:00.078] | stdout: TRUE
[08:08:00.078] | conditions: [n=1] ‘condition’
[08:08:00.078] | gc: FALSE
[08:08:00.078] | earlySignal: FALSE
[08:08:00.078] | getGlobalsAndPackages() ...
[08:08:00.078] | : Searching for globals ...
[08:08:00.080] | : . globals found: [0] 
[08:08:00.080] | : Searching for globals ... done
[08:08:00.080] | : globals: [0] <none>
[08:08:00.080] | : packages: [0] <none>
[08:08:00.080] | getGlobalsAndPackages() ... done
[08:08:00.080] | run() for ‘Future’ (<unnamed-20>) ...
[08:08:00.081] | : state: ‘created’
[08:08:00.081] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.081] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.081] | : Using SequentialFutureBackend ...
[08:08:00.081] | : . Number of futures since start: 19 (19 created, 19 launched, 19 finished)
[08:08:00.081] | : . Launching futures ...
[08:08:00.081] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:00.081] | : . ' , getFutureData() ...
[08:08:00.082] | : . ' , ; getFutureCore() ...
[08:08:00.082] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:00.082] | : . ' , ; getFutureCore() ... done
[08:08:00.082] | : . ' , ; getFutureCapture() ...
[08:08:00.082] | : . ' , ; getFutureCapture() ... done
[08:08:00.082] | : . ' , ; getFutureContext() ...
[08:08:00.082] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.082] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:00.082] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.082] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:00.083] | : . ' , ; getFutureContext() ... done
[08:08:00.083] | : . ' , getFutureData() ... done
[08:08:00.084] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.084] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:00.084] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.085] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.085] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.085] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:00.085] | : . ' , ; ` | New stack:
[08:08:00.085] | : . ' , ; ` | List of 1
[08:08:00.085] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.085] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.085] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:00.085] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.085] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.085] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.085] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.085] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.088] | : . ' , ; ` | Old stack:
[08:08:00.088] | : . ' , ; ` | List of 1
[08:08:00.088] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.088] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.088] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:00.088] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.088] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.088] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.088] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:00.088] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.088] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.088] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.088] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.091] | : . ' , ; ` | Not identical
[08:08:00.091] | : . ' , ; ` | all.equal() for future ...
[08:08:00.091] | : . ' , ; ` | : List of 2
[08:08:00.091] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.091] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.091] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:00.091] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.091] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.091] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.091] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.091] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.091] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.091] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.091] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.091] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.091] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.091] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.091] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.091] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.091] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.098] | : . ' , ; ` | all.equal() for future ... done
[08:08:00.098] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:00.098] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.099] | : . ' , ; ` List of future strategies:
[08:08:00.099] | : . ' , ; ` 1. sequential:
[08:08:00.099] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.099] | : . ' , ; `    - tweaked: FALSE
[08:08:00.099] | : . ' , ; `    - call: plan(sequential)
[08:08:00.099] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.099] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.101] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.101] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.101] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.101] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:00.101] | : . ' , ; ` | : New stack:
[08:08:00.101] | : . ' , ; ` | : List of 1
[08:08:00.101] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.101] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.101] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.101] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.101] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.101] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.101] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.101] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.101] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.101] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.101] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.105] | : . ' , ; ` | : Old stack:
[08:08:00.105] | : . ' , ; ` | : List of 1
[08:08:00.105] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.105] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.105] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.105] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.105] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.105] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.105] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.105] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.105] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.105] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.105] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.108] | : . ' , ; ` | : Identical
[08:08:00.108] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:00.108] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.108] | : . ' , ; ` | List of future strategies:
[08:08:00.108] | : . ' , ; ` | 1. sequential:
[08:08:00.108] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.108] | : . ' , ; ` |    - tweaked: FALSE
[08:08:00.108] | : . ' , ; ` |    - call: plan(sequential)
[08:08:00.108] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.109] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.109] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.109] | : . ' , SequentialFuture started (and completed)
[08:08:00.109] | : . ' , signalConditions() ...
[08:08:00.109] | : . ' , ; include = ‘immediateCondition’
[08:08:00.109] | : . ' , ; exclude = 
[08:08:00.109] | : . ' , ; resignal = FALSE
[08:08:00.110] | : . ' , ; Number of conditions: 6
[08:08:00.110] | : . ' , ;  int 6
[08:08:00.110] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.110] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.110] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.110] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.110] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.111] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.111] | : . ' , signalConditions() ... done
[08:08:00.111] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:00.111] | : . Launching futures ... done
[08:08:00.111] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:00.111] | : Using SequentialFutureBackend ... done
[08:08:00.111] | run() for ‘Future’ (<unnamed-20>) ... done
[08:08:00.111] future(..., label = NULL) ... done
[08:08:00.111] future(..., label = NULL) ...
[08:08:00.112] | lazy: FALSE
[08:08:00.112] | stdout: TRUE
[08:08:00.112] | conditions: [n=1] ‘condition’
[08:08:00.113] | gc: FALSE
[08:08:00.113] | earlySignal: FALSE
[08:08:00.113] | getGlobalsAndPackages() ...
[08:08:00.114] | : Searching for globals ...
[08:08:00.115] | : . globals found: [0] 
[08:08:00.115] | : Searching for globals ... done
[08:08:00.115] | : globals: [0] <none>
[08:08:00.115] | : packages: [0] <none>
[08:08:00.115] | getGlobalsAndPackages() ... done
[08:08:00.115] | run() for ‘Future’ (<unnamed-21>) ...
[08:08:00.116] | : state: ‘created’
[08:08:00.116] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.116] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.116] | : Using SequentialFutureBackend ...
[08:08:00.116] | : . Number of futures since start: 20 (20 created, 20 launched, 20 finished)
[08:08:00.116] | : . Launching futures ...
[08:08:00.116] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:00.116] | : . ' , getFutureData() ...
[08:08:00.117] | : . ' , ; getFutureCore() ...
[08:08:00.117] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:00.117] | : . ' , ; getFutureCore() ... done
[08:08:00.117] | : . ' , ; getFutureCapture() ...
[08:08:00.117] | : . ' , ; getFutureCapture() ... done
[08:08:00.117] | : . ' , ; getFutureContext() ...
[08:08:00.117] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.117] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:00.117] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.117] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:00.118] | : . ' , ; getFutureContext() ... done
[08:08:00.118] | : . ' , getFutureData() ... done
[08:08:00.119] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.119] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:00.119] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.119] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.120] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.120] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:00.120] | : . ' , ; ` | New stack:
[08:08:00.120] | : . ' , ; ` | List of 1
[08:08:00.120] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.120] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.120] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:00.120] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.120] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.120] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.120] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.120] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.122] | : . ' , ; ` | Old stack:
[08:08:00.122] | : . ' , ; ` | List of 1
[08:08:00.122] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.122] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.122] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:00.122] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.122] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.122] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.122] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:00.122] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.122] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.122] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.122] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.126] | : . ' , ; ` | Not identical
[08:08:00.126] | : . ' , ; ` | all.equal() for future ...
[08:08:00.126] | : . ' , ; ` | : List of 2
[08:08:00.126] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.126] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.126] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:00.126] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.126] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.126] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.126] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.126] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.126] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.126] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.126] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.126] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.126] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.126] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.126] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.126] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.126] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.133] | : . ' , ; ` | all.equal() for future ... done
[08:08:00.133] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:00.133] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.133] | : . ' , ; ` List of future strategies:
[08:08:00.133] | : . ' , ; ` 1. sequential:
[08:08:00.133] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.133] | : . ' , ; `    - tweaked: FALSE
[08:08:00.133] | : . ' , ; `    - call: plan(sequential)
[08:08:00.133] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.134] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.135] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.135] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.135] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.135] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:00.136] | : . ' , ; ` | : New stack:
[08:08:00.136] | : . ' , ; ` | : List of 1
[08:08:00.136] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.136] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.136] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.136] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.136] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.136] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.136] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.136] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.136] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.136] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.136] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.139] | : . ' , ; ` | : Old stack:
[08:08:00.139] | : . ' , ; ` | : List of 1
[08:08:00.139] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.139] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.139] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.139] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.139] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.139] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.139] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.139] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.139] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.139] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.139] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.142] | : . ' , ; ` | : Identical
[08:08:00.142] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:00.142] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.142] | : . ' , ; ` | List of future strategies:
[08:08:00.142] | : . ' , ; ` | 1. sequential:
[08:08:00.142] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.142] | : . ' , ; ` |    - tweaked: FALSE
[08:08:00.142] | : . ' , ; ` |    - call: plan(sequential)
[08:08:00.143] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.143] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.143] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.143] | : . ' , SequentialFuture started (and completed)
[08:08:00.143] | : . ' , signalConditions() ...
[08:08:00.143] | : . ' , ; include = ‘immediateCondition’
[08:08:00.143] | : . ' , ; exclude = 
[08:08:00.144] | : . ' , ; resignal = FALSE
[08:08:00.144] | : . ' , ; Number of conditions: 6
[08:08:00.144] | : . ' , ;  int 6
[08:08:00.144] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.144] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.144] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.144] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.145] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.145] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.145] | : . ' , signalConditions() ... done
[08:08:00.145] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:00.145] | : . Launching futures ... done
[08:08:00.145] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:00.145] | : Using SequentialFutureBackend ... done
[08:08:00.145] | run() for ‘Future’ (<unnamed-21>) ... done
[08:08:00.145] future(..., label = NULL) ... done
[08:08:00.146] future(..., label = NULL) ...
[08:08:00.146] | lazy: FALSE
[08:08:00.146] | stdout: TRUE
[08:08:00.146] | conditions: [n=1] ‘condition’
[08:08:00.148] | gc: FALSE
[08:08:00.148] | earlySignal: FALSE
[08:08:00.148] | getGlobalsAndPackages() ...
[08:08:00.148] | : Searching for globals ...
[08:08:00.151] | : . globals found: [1] ‘{’
[08:08:00.151] | : Searching for globals ... done
[08:08:00.151] | : Resolving globals: FALSE
[08:08:00.152] | : Search for packages associated with the globals ...
[08:08:00.152] | : . Packages associated with globals: [1] ‘base’
[08:08:00.152] | : . Packages: [1] ‘base’
[08:08:00.152] | : Search for packages associated with the globals ... done
[08:08:00.152] | : Packages after dropping 'base': [0] 
[08:08:00.152] | : globals: [0] 
[08:08:00.152] | : packages: [0] 
[08:08:00.153] | getGlobalsAndPackages() ... done
[08:08:00.153] | run() for ‘Future’ (<unnamed-22>) ...
[08:08:00.153] | : state: ‘created’
[08:08:00.153] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.153] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.153] | : Using SequentialFutureBackend ...
[08:08:00.153] | : . Number of futures since start: 21 (21 created, 21 launched, 21 finished)
[08:08:00.153] | : . Launching futures ...
[08:08:00.154] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:00.154] | : . ' , getFutureData() ...
[08:08:00.154] | : . ' , ; getFutureCore() ...
[08:08:00.154] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:00.154] | : . ' , ; getFutureCore() ... done
[08:08:00.154] | : . ' , ; getFutureCapture() ...
[08:08:00.154] | : . ' , ; getFutureCapture() ... done
[08:08:00.154] | : . ' , ; getFutureContext() ...
[08:08:00.154] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.154] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:00.155] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.155] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:00.155] | : . ' , ; getFutureContext() ... done
[08:08:00.155] | : . ' , getFutureData() ... done
[08:08:00.156] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.156] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:00.156] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.157] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.157] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.157] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:00.157] | : . ' , ; ` | New stack:
[08:08:00.157] | : . ' , ; ` | List of 1
[08:08:00.157] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.157] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.157] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:00.157] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.157] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.157] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.157] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.157] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.159] | : . ' , ; ` | Old stack:
[08:08:00.160] | : . ' , ; ` | List of 1
[08:08:00.160] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.160] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.160] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:00.160] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.160] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.160] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.160] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:00.160] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.160] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.160] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.160] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.163] | : . ' , ; ` | Not identical
[08:08:00.163] | : . ' , ; ` | all.equal() for future ...
[08:08:00.163] | : . ' , ; ` | : List of 2
[08:08:00.163] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.163] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.163] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:00.163] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.163] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.163] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.163] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.163] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.163] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.163] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.163] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.163] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.163] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.163] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.163] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.163] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.163] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.169] | : . ' , ; ` | all.equal() for future ... done
[08:08:00.169] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:00.169] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.169] | : . ' , ; ` List of future strategies:
[08:08:00.169] | : . ' , ; ` 1. sequential:
[08:08:00.169] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.169] | : . ' , ; `    - tweaked: FALSE
[08:08:00.169] | : . ' , ; `    - call: plan(sequential)
[08:08:00.170] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.170] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.171] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.171] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.171] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.171] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:00.172] | : . ' , ; ` | : New stack:
[08:08:00.172] | : . ' , ; ` | : List of 1
[08:08:00.172] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.172] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.172] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.172] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.172] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.172] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.172] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.172] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.172] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.172] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.172] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.175] | : . ' , ; ` | : Old stack:
[08:08:00.175] | : . ' , ; ` | : List of 1
[08:08:00.175] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.175] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.175] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.175] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.175] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.175] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.175] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.175] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.175] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.175] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.175] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.178] | : . ' , ; ` | : Identical
[08:08:00.178] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:00.178] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.178] | : . ' , ; ` | List of future strategies:
[08:08:00.178] | : . ' , ; ` | 1. sequential:
[08:08:00.178] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.178] | : . ' , ; ` |    - tweaked: FALSE
[08:08:00.178] | : . ' , ; ` |    - call: plan(sequential)
[08:08:00.179] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.179] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.179] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.179] | : . ' , SequentialFuture started (and completed)
[08:08:00.179] | : . ' , signalConditions() ...
[08:08:00.179] | : . ' , ; include = ‘immediateCondition’
[08:08:00.179] | : . ' , ; exclude = 
[08:08:00.180] | : . ' , ; resignal = FALSE
[08:08:00.180] | : . ' , ; Number of conditions: 6
[08:08:00.180] | : . ' , ;  int 6
[08:08:00.180] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.180] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.180] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.180] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.181] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.181] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.181] | : . ' , signalConditions() ... done
[08:08:00.181] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:00.181] | : . Launching futures ... done
[08:08:00.181] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:00.181] | : Using SequentialFutureBackend ... done
[08:08:00.181] | run() for ‘Future’ (<unnamed-22>) ... done
[08:08:00.181] future(..., label = NULL) ... done
<environment: 0x556759ba1de8> 
<environment: 0x55675aab9a18> 
[08:08:00.182] resolved() for environment ...
[08:08:00.184] | resolved() for list ...
[08:08:00.184] | : Number of elements: 4
[08:08:00.184] | : Number of futures: 4
[08:08:00.184] | : resolved() for SequentialFuture (<unnamed-20>) ...
[08:08:00.184] | : . state: ‘finished’
[08:08:00.184] | : . run: TRUE
[08:08:00.184] | : . result: ‘FutureResult’
[08:08:00.184] | : resolved() for SequentialFuture (<unnamed-20>) ... done
[08:08:00.184] | : resolved() for SequentialFuture (<unnamed-21>) ...
[08:08:00.185] | : . state: ‘finished’
[08:08:00.185] | : . run: TRUE
[08:08:00.185] | : . result: ‘FutureResult’
[08:08:00.185] | : resolved() for SequentialFuture (<unnamed-21>) ... done
[08:08:00.185] | : resolved() for SequentialFuture (<unnamed-22>) ...
[08:08:00.185] | : . state: ‘finished’
[08:08:00.185] | : . run: TRUE
[08:08:00.185] | : . result: ‘FutureResult’
[08:08:00.185] | : resolved() for SequentialFuture (<unnamed-22>) ... done
[08:08:00.185] | resolved() for list ... done
[08:08:00.186] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE TRUE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:00.186] value() for SequentialFuture (<unnamed-22>) ...
[08:08:00.186] | signalConditions() ...
[08:08:00.186] | : include = ‘immediateCondition’
[08:08:00.187] | : exclude = 
[08:08:00.187] | : resignal = FALSE
[08:08:00.187] | : Number of conditions: 6
[08:08:00.187] | :  int 6
[08:08:00.187] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.187] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.188] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.188] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.188] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.188] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.188] | signalConditions() ... done
[08:08:00.188] | relay stdout ...
[08:08:00.188] | relay stdout ... done
[08:08:00.188] | check for misuse ...
[08:08:00.188] | check for misuse ... done
[08:08:00.188] | relay conditions ...
[08:08:00.189] | : Future state: ‘finished’
[08:08:00.189] | : signalConditions() ...
[08:08:00.189] | : . include = ‘condition’
[08:08:00.189] | : . exclude = ‘immediateCondition’
[08:08:00.189] | : . resignal = TRUE
[08:08:00.189] | : . Number of conditions: 6
[08:08:00.189] | : .  int 6
[08:08:00.190] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.190] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.155] | : . ' , attachPackages() ...
[08:08:00.190] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.190] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.155] | : . ' , ; packages: [n=1] ‘future’
[08:08:00.190] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.190] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.155] | : . ' , attachPackages() ... done
[08:08:00.190] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.190] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.156] | : . ' , attachPackages() ...
[08:08:00.190] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.191] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.156] | : . ' , ; packages: [n=0] 
[08:08:00.191] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.191] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.156] | : . ' , attachPackages() ... done
[08:08:00.191] | : signalConditions() ... done
[08:08:00.191] | relay conditions ... done
[08:08:00.191] value() for SequentialFuture (<unnamed-22>) ... done
[08:08:00.191] value() for listenv ...
[08:08:00.191] | recursive: 0
[08:08:00.192] | reduce: FALSE
[08:08:00.192] | length: 4
[08:08:00.192] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:00.192] | Number of remaining objects: 4
[08:08:00.192] | checking value #1:
[08:08:00.193] | 'obj' is atomic
[08:08:00.193] | signalConditionsASAP(numeric, pos=1) ...
[08:08:00.193] | : nx: 4
[08:08:00.193] | : relay: TRUE
[08:08:00.193] | : stdout: TRUE
[08:08:00.193] | : signal: TRUE
[08:08:00.193] | : resignal: FALSE
[08:08:00.193] | : force: TRUE
[08:08:00.193] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:00.193] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:00.193] | : until=2
[08:08:00.194] | : relaying element #2
[08:08:00.194] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:00.194] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:00.194] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:00.194] | length: 3 (resolved future 1)
[08:08:00.194] value() for listenv ... done
[08:08:00.194] checking value #2:
[08:08:00.194] 'obj' is SequentialFuture
[08:08:00.194] resolved() for SequentialFuture (<unnamed-20>) ...
[08:08:00.195] | state: ‘finished’
[08:08:00.195] | run: TRUE
[08:08:00.195] | result: ‘FutureResult’
[08:08:00.195] resolved() for SequentialFuture (<unnamed-20>) ... done
[08:08:00.195] SequentialFuture #2
[08:08:00.195] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:00.195] | nx: 4
[08:08:00.195] | relay: TRUE
[08:08:00.195] | stdout: TRUE
[08:08:00.195] | signal: TRUE
[08:08:00.195] | resignal: FALSE
[08:08:00.195] | force: TRUE
[08:08:00.196] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:00.196] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:00.196] | until=2
[08:08:00.196] | relaying element #2
[08:08:00.196] | value() for SequentialFuture (<unnamed-20>) ...
[08:08:00.196] | : signalConditions() ...
[08:08:00.196] | : . include = ‘immediateCondition’
[08:08:00.196] | : . exclude = 
[08:08:00.196] | : . resignal = FALSE
[08:08:00.196] | : . Number of conditions: 6
[08:08:00.197] | : .  int 6
[08:08:00.197] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.197] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.197] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.197] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.197] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.197] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.198] | : signalConditions() ... done
[08:08:00.198] | : relay stdout ...
[08:08:00.198] | : relay stdout ... done
[08:08:00.198] | : check for misuse ...
[08:08:00.198] | : check for misuse ... done
[08:08:00.198] | value() for SequentialFuture (<unnamed-20>) ... done
[08:08:00.198] | signalConditions() ...
[08:08:00.198] | : include = ‘immediateCondition’
[08:08:00.198] | : exclude = 
[08:08:00.198] | : resignal = FALSE
[08:08:00.199] | : Number of conditions: 6
[08:08:00.199] | :  int 6
[08:08:00.199] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.199] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.199] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.199] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.199] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.200] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.200] | signalConditions() ... done
[08:08:00.200] | signalConditions() ...
[08:08:00.200] | : include = ‘condition’
[08:08:00.200] | : exclude = ‘error’, ‘immediateCondition’
[08:08:00.200] | : resignal = TRUE
[08:08:00.200] | : Number of conditions: 6
[08:08:00.200] | :  int 6
[08:08:00.201] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.202] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.083] | : . ' , attachPackages() ...
[08:08:00.202] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.202] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.083] | : . ' , ; packages: [n=1] ‘future’
[08:08:00.202] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.202] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.083] | : . ' , attachPackages() ... done
[08:08:00.202] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.202] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.083] | : . ' , attachPackages() ...
[08:08:00.202] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.203] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.084] | : . ' , ; packages: [n=0] 
[08:08:00.203] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.203] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.084] | : . ' , attachPackages() ... done
[08:08:00.203] | signalConditions() ... done
[08:08:00.203] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:00.203] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:00.203] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:00.203] value(<SequentialFuture>, ...) ...
[08:08:00.203] value(<SequentialFuture>, ...) ... done
[08:08:00.204] value() for SequentialFuture (<unnamed-20>) ...
[08:08:00.204] | signalConditions() ...
[08:08:00.204] | : include = ‘immediateCondition’
[08:08:00.204] | : exclude = 
[08:08:00.204] | : resignal = FALSE
[08:08:00.204] | : Number of conditions: 6
[08:08:00.204] | :  int 6
[08:08:00.205] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.205] | : already signaled, skipping
[08:08:00.205] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.205] | : already signaled, skipping
[08:08:00.205] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.205] | : already signaled, skipping
[08:08:00.205] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.205] | : already signaled, skipping
[08:08:00.205] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.205] | : already signaled, skipping
[08:08:00.206] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.206] | : already signaled, skipping
[08:08:00.206] | signalConditions() ... done
[08:08:00.206] | check for misuse ...
[08:08:00.206] | check for misuse ... done
[08:08:00.206] value() for SequentialFuture (<unnamed-20>) ... done
[08:08:00.206] value: <numeric>
[08:08:00.206] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:00.206] | nx: 4
[08:08:00.206] | relay: TRUE
[08:08:00.207] | stdout: TRUE
[08:08:00.207] | signal: TRUE
[08:08:00.207] | resignal: FALSE
[08:08:00.207] | force: TRUE
[08:08:00.207] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:00.207] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:00.207] | until=3
[08:08:00.207] | relaying element #3
[08:08:00.207] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:00.207] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:00.207] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:00.208] resolve() for SequentialFuture ...
[08:08:00.208] resolve() for SequentialFuture ... done
[08:08:00.208] length: 2 (resolved future 2)

[08:08:00.208] checking value #3:
[08:08:00.208] 'obj' is SequentialFuture
[08:08:00.208] resolved() for SequentialFuture (<unnamed-21>) ...
[08:08:00.208] | state: ‘finished’
[08:08:00.208] | run: TRUE
[08:08:00.208] | result: ‘FutureResult’
[08:08:00.208] resolved() for SequentialFuture (<unnamed-21>) ... done
[08:08:00.209] SequentialFuture #3
[08:08:00.209] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:00.209] | nx: 4
[08:08:00.209] | relay: TRUE
[08:08:00.209] | stdout: TRUE
[08:08:00.209] | signal: TRUE
[08:08:00.209] | resignal: FALSE
[08:08:00.209] | force: TRUE
[08:08:00.209] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:00.209] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:00.209] | until=3
[08:08:00.210] | relaying element #3
[08:08:00.210] | value() for SequentialFuture (<unnamed-21>) ...
[08:08:00.210] | : signalConditions() ...
[08:08:00.210] | : . include = ‘immediateCondition’
[08:08:00.210] | : . exclude = 
[08:08:00.210] | : . resignal = FALSE
[08:08:00.210] | : . Number of conditions: 6
[08:08:00.210] | : .  int 6
[08:08:00.211] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.211] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.211] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.211] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.211] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.211] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.211] | : signalConditions() ... done
[08:08:00.211] | : relay stdout ...
[08:08:00.211] | : relay stdout ... done
[08:08:00.211] | : check for misuse ...
[08:08:00.212] | : check for misuse ... done
[08:08:00.212] | value() for SequentialFuture (<unnamed-21>) ... done
[08:08:00.212] | signalConditions() ...
[08:08:00.212] | : include = ‘immediateCondition’
[08:08:00.212] | : exclude = 
[08:08:00.212] | : resignal = FALSE
[08:08:00.212] | : Number of conditions: 6
[08:08:00.212] | :  int 6
[08:08:00.213] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.213] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.213] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.213] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.213] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.213] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.213] | signalConditions() ... done
[08:08:00.213] | signalConditions() ...
[08:08:00.213] | : include = ‘condition’
[08:08:00.214] | : exclude = ‘error’, ‘immediateCondition’
[08:08:00.214] | : resignal = TRUE
[08:08:00.214] | : Number of conditions: 6
[08:08:00.214] | :  int 6
[08:08:00.214] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.214] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.118] | : . ' , attachPackages() ...
[08:08:00.214] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.215] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.118] | : . ' , ; packages: [n=1] ‘future’
[08:08:00.215] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.215] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.118] | : . ' , attachPackages() ... done
[08:08:00.215] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.215] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.118] | : . ' , attachPackages() ...
[08:08:00.215] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.215] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.119] | : . ' , ; packages: [n=0] 
[08:08:00.215] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.215] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.119] | : . ' , attachPackages() ... done
[08:08:00.216] | signalConditions() ... done
[08:08:00.216] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:00.216] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:00.216] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:00.216] value(<SequentialFuture>, ...) ...
[08:08:00.216] value(<SequentialFuture>, ...) ... done
[08:08:00.216] value() for SequentialFuture (<unnamed-21>) ...
[08:08:00.216] | signalConditions() ...
[08:08:00.216] | : include = ‘immediateCondition’
[08:08:00.216] | : exclude = 
[08:08:00.217] | : resignal = FALSE
[08:08:00.217] | : Number of conditions: 6
[08:08:00.217] | :  int 6
[08:08:00.217] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.217] | : already signaled, skipping
[08:08:00.217] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.217] | : already signaled, skipping
[08:08:00.218] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.218] | : already signaled, skipping
[08:08:00.218] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.218] | : already signaled, skipping
[08:08:00.219] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.219] | : already signaled, skipping
[08:08:00.219] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.219] | : already signaled, skipping
[08:08:00.219] | signalConditions() ... done
[08:08:00.219] | check for misuse ...
[08:08:00.219] | check for misuse ... done
[08:08:00.220] value() for SequentialFuture (<unnamed-21>) ... done
[08:08:00.220] value: <NULL>
[08:08:00.220] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:00.220] | nx: 4
[08:08:00.220] | relay: TRUE
[08:08:00.220] | stdout: TRUE
[08:08:00.220] | signal: TRUE
[08:08:00.220] | resignal: FALSE
[08:08:00.220] | force: TRUE
[08:08:00.220] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:00.221] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:00.221] | until=4
[08:08:00.221] | relaying element #4
[08:08:00.221] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:00.221] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:00.221] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:00.221] resolve() for SequentialFuture ...
[08:08:00.221] resolve() for SequentialFuture ... done
[08:08:00.221] length: 1 (resolved future 3)

[08:08:00.222] checking value #4:
[08:08:00.222] 'obj' is atomic
[08:08:00.222] signalConditionsASAP(numeric, pos=4) ...
[08:08:00.222] | nx: 4
[08:08:00.222] | relay: TRUE
[08:08:00.222] | stdout: TRUE
[08:08:00.222] | signal: TRUE
[08:08:00.222] | resignal: FALSE
[08:08:00.222] | force: TRUE
[08:08:00.222] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:00.222] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:00.223] | until=4
[08:08:00.223] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:00.223] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:00.223] signalConditionsASAP(numeric, pos=4) ... done
[08:08:00.223] length: 0 (resolved future 4)

[08:08:00.223] Relaying remaining futures ...
[08:08:00.223] | signalConditionsASAP(NULL, pos=0) ...
[08:08:00.223] | : nx: 4
[08:08:00.223] | : relay: TRUE
[08:08:00.224] | : stdout: TRUE
[08:08:00.224] | : signal: TRUE
[08:08:00.224] | : resignal: FALSE
[08:08:00.224] | : force: TRUE
[08:08:00.224] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:00.224] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:00.224] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:00.224] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:00.224] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:00.224] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(2, 1, 3, 1)
[08:08:00.226] future(..., label = NULL) ...
[08:08:00.226] | lazy: FALSE
[08:08:00.226] | stdout: TRUE
[08:08:00.226] | conditions: [n=1] ‘condition’
[08:08:00.226] | gc: FALSE
[08:08:00.227] | earlySignal: FALSE
[08:08:00.227] | getGlobalsAndPackages() ...
[08:08:00.227] | : Searching for globals ...
[08:08:00.228] | : . globals found: [0] 
[08:08:00.228] | : Searching for globals ... done
[08:08:00.228] | : globals: [0] <none>
[08:08:00.228] | : packages: [0] <none>
[08:08:00.228] | getGlobalsAndPackages() ... done
[08:08:00.228] | run() for ‘Future’ (<unnamed-23>) ...
[08:08:00.229] | : state: ‘created’
[08:08:00.229] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.229] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.229] | : Using SequentialFutureBackend ...
[08:08:00.229] | : . Number of futures since start: 22 (22 created, 22 launched, 22 finished)
[08:08:00.229] | : . Launching futures ...
[08:08:00.229] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:00.229] | : . ' , getFutureData() ...
[08:08:00.229] | : . ' , ; getFutureCore() ...
[08:08:00.230] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:00.230] | : . ' , ; getFutureCore() ... done
[08:08:00.230] | : . ' , ; getFutureCapture() ...
[08:08:00.230] | : . ' , ; getFutureCapture() ... done
[08:08:00.230] | : . ' , ; getFutureContext() ...
[08:08:00.230] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.230] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:00.230] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.230] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:00.231] | : . ' , ; getFutureContext() ... done
[08:08:00.231] | : . ' , getFutureData() ... done
[08:08:00.232] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.232] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:00.232] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.232] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.233] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.233] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:00.233] | : . ' , ; ` | New stack:
[08:08:00.233] | : . ' , ; ` | List of 1
[08:08:00.233] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.233] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.233] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:00.233] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.233] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.233] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.233] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.233] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.235] | : . ' , ; ` | Old stack:
[08:08:00.235] | : . ' , ; ` | List of 1
[08:08:00.235] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.235] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.235] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:00.235] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.235] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.235] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.235] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:00.235] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.235] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.235] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.235] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.240] | : . ' , ; ` | Not identical
[08:08:00.240] | : . ' , ; ` | all.equal() for future ...
[08:08:00.240] | : . ' , ; ` | : List of 2
[08:08:00.240] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.240] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.240] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:00.240] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.240] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.240] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.240] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.240] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.240] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.240] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.240] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.240] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.240] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.240] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.240] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.240] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.240] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.245] | : . ' , ; ` | all.equal() for future ... done
[08:08:00.245] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:00.245] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.245] | : . ' , ; ` List of future strategies:
[08:08:00.245] | : . ' , ; ` 1. sequential:
[08:08:00.245] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.245] | : . ' , ; `    - tweaked: FALSE
[08:08:00.245] | : . ' , ; `    - call: plan(sequential)
[08:08:00.246] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.246] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.247] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.247] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.248] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.248] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:00.248] | : . ' , ; ` | : New stack:
[08:08:00.248] | : . ' , ; ` | : List of 1
[08:08:00.248] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.248] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.248] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.248] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.248] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.248] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.248] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.248] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.248] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.248] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.248] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.251] | : . ' , ; ` | : Old stack:
[08:08:00.251] | : . ' , ; ` | : List of 1
[08:08:00.251] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.251] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.251] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.251] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.251] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.251] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.251] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.251] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.251] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.251] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.251] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.255] | : . ' , ; ` | : Identical
[08:08:00.255] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:00.256] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.256] | : . ' , ; ` | List of future strategies:
[08:08:00.256] | : . ' , ; ` | 1. sequential:
[08:08:00.256] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.256] | : . ' , ; ` |    - tweaked: FALSE
[08:08:00.256] | : . ' , ; ` |    - call: plan(sequential)
[08:08:00.256] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.256] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.256] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.257] | : . ' , SequentialFuture started (and completed)
[08:08:00.257] | : . ' , signalConditions() ...
[08:08:00.257] | : . ' , ; include = ‘immediateCondition’
[08:08:00.257] | : . ' , ; exclude = 
[08:08:00.257] | : . ' , ; resignal = FALSE
[08:08:00.257] | : . ' , ; Number of conditions: 6
[08:08:00.257] | : . ' , ;  int 6
[08:08:00.258] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.258] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.258] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.258] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.258] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.258] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.259] | : . ' , signalConditions() ... done
[08:08:00.259] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:00.259] | : . Launching futures ... done
[08:08:00.259] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:00.259] | : Using SequentialFutureBackend ... done
[08:08:00.259] | run() for ‘Future’ (<unnamed-23>) ... done
[08:08:00.259] future(..., label = NULL) ... done
[08:08:00.259] future(..., label = NULL) ...
[08:08:00.259] | lazy: FALSE
[08:08:00.259] | stdout: TRUE
[08:08:00.260] | conditions: [n=1] ‘condition’
[08:08:00.260] | gc: FALSE
[08:08:00.260] | earlySignal: FALSE
[08:08:00.260] | getGlobalsAndPackages() ...
[08:08:00.260] | : Searching for globals ...
[08:08:00.261] | : . globals found: [0] 
[08:08:00.261] | : Searching for globals ... done
[08:08:00.261] | : globals: [0] <none>
[08:08:00.261] | : packages: [0] <none>
[08:08:00.261] | getGlobalsAndPackages() ... done
[08:08:00.262] | run() for ‘Future’ (<unnamed-24>) ...
[08:08:00.262] | : state: ‘created’
[08:08:00.262] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.262] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.262] | : Using SequentialFutureBackend ...
[08:08:00.262] | : . Number of futures since start: 23 (23 created, 23 launched, 23 finished)
[08:08:00.262] | : . Launching futures ...
[08:08:00.262] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:00.263] | : . ' , getFutureData() ...
[08:08:00.263] | : . ' , ; getFutureCore() ...
[08:08:00.263] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:00.263] | : . ' , ; getFutureCore() ... done
[08:08:00.263] | : . ' , ; getFutureCapture() ...
[08:08:00.263] | : . ' , ; getFutureCapture() ... done
[08:08:00.263] | : . ' , ; getFutureContext() ...
[08:08:00.263] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.263] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:00.264] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.264] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:00.264] | : . ' , ; getFutureContext() ... done
[08:08:00.264] | : . ' , getFutureData() ... done
[08:08:00.265] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.265] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:00.265] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.266] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.266] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.266] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:00.266] | : . ' , ; ` | New stack:
[08:08:00.266] | : . ' , ; ` | List of 1
[08:08:00.266] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.266] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.266] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:00.266] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.266] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.266] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.266] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.266] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.269] | : . ' , ; ` | Old stack:
[08:08:00.269] | : . ' , ; ` | List of 1
[08:08:00.269] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.269] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.269] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:00.269] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.269] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.269] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.269] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:00.269] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.269] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.269] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.269] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.273] | : . ' , ; ` | Not identical
[08:08:00.273] | : . ' , ; ` | all.equal() for future ...
[08:08:00.273] | : . ' , ; ` | : List of 2
[08:08:00.273] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.273] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.273] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:00.273] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.273] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.273] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.273] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.273] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.273] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.273] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.273] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.273] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.273] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.273] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.273] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.273] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.273] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.279] | : . ' , ; ` | all.equal() for future ... done
[08:08:00.279] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:00.280] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.280] | : . ' , ; ` List of future strategies:
[08:08:00.280] | : . ' , ; ` 1. sequential:
[08:08:00.280] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.280] | : . ' , ; `    - tweaked: FALSE
[08:08:00.280] | : . ' , ; `    - call: plan(sequential)
[08:08:00.280] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.280] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.282] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.282] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.282] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.282] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:00.282] | : . ' , ; ` | : New stack:
[08:08:00.282] | : . ' , ; ` | : List of 1
[08:08:00.282] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.282] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.282] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.282] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.282] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.282] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.282] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.282] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.282] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.282] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.282] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.286] | : . ' , ; ` | : Old stack:
[08:08:00.286] | : . ' , ; ` | : List of 1
[08:08:00.286] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.286] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.286] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.286] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.286] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.286] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.286] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.286] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.286] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.286] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.286] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.289] | : . ' , ; ` | : Identical
[08:08:00.289] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:00.289] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.289] | : . ' , ; ` | List of future strategies:
[08:08:00.289] | : . ' , ; ` | 1. sequential:
[08:08:00.289] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.289] | : . ' , ; ` |    - tweaked: FALSE
[08:08:00.289] | : . ' , ; ` |    - call: plan(sequential)
[08:08:00.290] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.290] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.290] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.290] | : . ' , SequentialFuture started (and completed)
[08:08:00.292] | : . ' , signalConditions() ...
[08:08:00.292] | : . ' , ; include = ‘immediateCondition’
[08:08:00.293] | : . ' , ; exclude = 
[08:08:00.293] | : . ' , ; resignal = FALSE
[08:08:00.293] | : . ' , ; Number of conditions: 6
[08:08:00.293] | : . ' , ;  int 6
[08:08:00.293] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.294] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.294] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.294] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.294] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.294] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.294] | : . ' , signalConditions() ... done
[08:08:00.294] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:00.295] | : . Launching futures ... done
[08:08:00.295] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:00.295] | : Using SequentialFutureBackend ... done
[08:08:00.295] | run() for ‘Future’ (<unnamed-24>) ... done
[08:08:00.295] future(..., label = NULL) ... done
[08:08:00.295] future(..., label = NULL) ...
[08:08:00.296] | lazy: FALSE
[08:08:00.296] | stdout: TRUE
[08:08:00.296] | conditions: [n=1] ‘condition’
[08:08:00.296] | gc: FALSE
[08:08:00.296] | earlySignal: FALSE
[08:08:00.296] | getGlobalsAndPackages() ...
[08:08:00.296] | : Searching for globals ...
[08:08:00.300] | : . globals found: [1] ‘{’
[08:08:00.300] | : Searching for globals ... done
[08:08:00.300] | : Resolving globals: FALSE
[08:08:00.300] | : Search for packages associated with the globals ...
[08:08:00.300] | : . Packages associated with globals: [1] ‘base’
[08:08:00.300] | : . Packages: [1] ‘base’
[08:08:00.301] | : Search for packages associated with the globals ... done
[08:08:00.301] | : Packages after dropping 'base': [0] 
[08:08:00.301] | : globals: [0] 
[08:08:00.301] | : packages: [0] 
[08:08:00.301] | getGlobalsAndPackages() ... done
[08:08:00.301] | run() for ‘Future’ (<unnamed-25>) ...
[08:08:00.301] | : state: ‘created’
[08:08:00.302] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.302] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.302] | : Using SequentialFutureBackend ...
[08:08:00.302] | : . Number of futures since start: 24 (24 created, 24 launched, 24 finished)
[08:08:00.302] | : . Launching futures ...
[08:08:00.302] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:00.302] | : . ' , getFutureData() ...
[08:08:00.302] | : . ' , ; getFutureCore() ...
[08:08:00.302] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:00.303] | : . ' , ; getFutureCore() ... done
[08:08:00.303] | : . ' , ; getFutureCapture() ...
[08:08:00.303] | : . ' , ; getFutureCapture() ... done
[08:08:00.303] | : . ' , ; getFutureContext() ...
[08:08:00.303] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.303] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:00.303] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.303] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:00.303] | : . ' , ; getFutureContext() ... done
[08:08:00.304] | : . ' , getFutureData() ... done
[08:08:00.305] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.305] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:00.305] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.305] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.305] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.306] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:00.306] | : . ' , ; ` | New stack:
[08:08:00.306] | : . ' , ; ` | List of 1
[08:08:00.306] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.306] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.306] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:00.306] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.306] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.306] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.306] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.306] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.308] | : . ' , ; ` | Old stack:
[08:08:00.309] | : . ' , ; ` | List of 1
[08:08:00.309] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.309] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.309] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:00.309] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.309] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.309] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.309] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:00.309] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.309] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.309] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.309] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.313] | : . ' , ; ` | Not identical
[08:08:00.313] | : . ' , ; ` | all.equal() for future ...
[08:08:00.314] | : . ' , ; ` | : List of 2
[08:08:00.314] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.314] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.314] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:00.314] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.314] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.314] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.314] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.314] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.314] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.314] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.314] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.314] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.314] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.314] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.314] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.314] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.314] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.319] | : . ' , ; ` | all.equal() for future ... done
[08:08:00.319] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:00.319] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.319] | : . ' , ; ` List of future strategies:
[08:08:00.319] | : . ' , ; ` 1. sequential:
[08:08:00.319] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.319] | : . ' , ; `    - tweaked: FALSE
[08:08:00.319] | : . ' , ; `    - call: plan(sequential)
[08:08:00.320] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.320] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.322] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.322] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.322] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.322] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:00.322] | : . ' , ; ` | : New stack:
[08:08:00.322] | : . ' , ; ` | : List of 1
[08:08:00.322] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.322] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.322] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.322] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.322] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.322] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.322] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.322] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.322] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.322] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.322] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.325] | : . ' , ; ` | : Old stack:
[08:08:00.326] | : . ' , ; ` | : List of 1
[08:08:00.326] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.326] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.326] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.326] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.326] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.326] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.326] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.326] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.326] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.326] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.326] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.330] | : . ' , ; ` | : Identical
[08:08:00.330] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:00.330] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.331] | : . ' , ; ` | List of future strategies:
[08:08:00.331] | : . ' , ; ` | 1. sequential:
[08:08:00.331] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.331] | : . ' , ; ` |    - tweaked: FALSE
[08:08:00.331] | : . ' , ; ` |    - call: plan(sequential)
[08:08:00.331] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.331] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.331] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.332] | : . ' , SequentialFuture started (and completed)
[08:08:00.332] | : . ' , signalConditions() ...
[08:08:00.332] | : . ' , ; include = ‘immediateCondition’
[08:08:00.332] | : . ' , ; exclude = 
[08:08:00.332] | : . ' , ; resignal = FALSE
[08:08:00.332] | : . ' , ; Number of conditions: 6
[08:08:00.332] | : . ' , ;  int 6
[08:08:00.333] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.333] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.333] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.333] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.333] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.333] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.334] | : . ' , signalConditions() ... done
[08:08:00.334] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:00.334] | : . Launching futures ... done
[08:08:00.334] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:00.334] | : Using SequentialFutureBackend ... done
[08:08:00.334] | run() for ‘Future’ (<unnamed-25>) ... done
[08:08:00.334] future(..., label = NULL) ... done
<environment: 0x556758459868> 
<environment: 0x55675abf3158> 
[08:08:00.335] resolved() for environment ...
[08:08:00.336] | resolved() for list ...
[08:08:00.336] | : Number of elements: 4
[08:08:00.336] | : Number of futures: 4
[08:08:00.336] | : resolved() for SequentialFuture (<unnamed-23>) ...
[08:08:00.336] | : . state: ‘finished’
[08:08:00.336] | : . run: TRUE
[08:08:00.336] | : . result: ‘FutureResult’
[08:08:00.337] | : resolved() for SequentialFuture (<unnamed-23>) ... done
[08:08:00.337] | : resolved() for SequentialFuture (<unnamed-24>) ...
[08:08:00.337] | : . state: ‘finished’
[08:08:00.337] | : . run: TRUE
[08:08:00.337] | : . result: ‘FutureResult’
[08:08:00.337] | : resolved() for SequentialFuture (<unnamed-24>) ... done
[08:08:00.337] | : resolved() for SequentialFuture (<unnamed-25>) ...
[08:08:00.337] | : . state: ‘finished’
[08:08:00.337] | : . run: TRUE
[08:08:00.337] | : . result: ‘FutureResult’
[08:08:00.338] | : resolved() for SequentialFuture (<unnamed-25>) ... done
[08:08:00.338] | resolved() for list ... done
[08:08:00.338] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE TRUE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:00.338] value() for SequentialFuture (<unnamed-25>) ...
[08:08:00.339] | signalConditions() ...
[08:08:00.339] | : include = ‘immediateCondition’
[08:08:00.339] | : exclude = 
[08:08:00.339] | : resignal = FALSE
[08:08:00.339] | : Number of conditions: 6
[08:08:00.339] | :  int 6
[08:08:00.339] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.340] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.340] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.340] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.340] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.340] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.340] | signalConditions() ... done
[08:08:00.340] | relay stdout ...
[08:08:00.340] | relay stdout ... done
[08:08:00.341] | check for misuse ...
[08:08:00.341] | check for misuse ... done
[08:08:00.341] | relay conditions ...
[08:08:00.341] | : Future state: ‘finished’
[08:08:00.341] | : signalConditions() ...
[08:08:00.341] | : . include = ‘condition’
[08:08:00.341] | : . exclude = ‘immediateCondition’
[08:08:00.341] | : . resignal = TRUE
[08:08:00.341] | : . Number of conditions: 6
[08:08:00.341] | : .  int 6
[08:08:00.342] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.342] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.304] | : . ' , attachPackages() ...
[08:08:00.342] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.342] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.304] | : . ' , ; packages: [n=1] ‘future’
[08:08:00.342] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.342] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.304] | : . ' , attachPackages() ... done
[08:08:00.343] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.343] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.304] | : . ' , attachPackages() ...
[08:08:00.343] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.343] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.304] | : . ' , ; packages: [n=0] 
[08:08:00.343] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.343] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.304] | : . ' , attachPackages() ... done
[08:08:00.343] | : signalConditions() ... done
[08:08:00.343] | relay conditions ... done
[08:08:00.344] value() for SequentialFuture (<unnamed-25>) ... done
[08:08:00.344] value() for listenv ...
[08:08:00.344] | recursive: 0
[08:08:00.344] | reduce: FALSE
[08:08:00.345] | length: 4
[08:08:00.345] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:00.345] | Number of remaining objects: 4
[08:08:00.345] | checking value #1:
[08:08:00.345] | 'obj' is atomic
[08:08:00.345] | signalConditionsASAP(numeric, pos=1) ...
[08:08:00.345] | : nx: 4
[08:08:00.345] | : relay: TRUE
[08:08:00.345] | : stdout: TRUE
[08:08:00.346] | : signal: TRUE
[08:08:00.346] | : resignal: FALSE
[08:08:00.346] | : force: TRUE
[08:08:00.346] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:00.346] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:00.346] | : until=2
[08:08:00.346] | : relaying element #2
[08:08:00.346] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:00.346] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:00.346] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:00.347] | length: 3 (resolved future 1)
[08:08:00.347] value() for listenv ... done
[08:08:00.347] checking value #2:
[08:08:00.347] 'obj' is SequentialFuture
[08:08:00.347] resolved() for SequentialFuture (<unnamed-23>) ...
[08:08:00.347] | state: ‘finished’
[08:08:00.347] | run: TRUE
[08:08:00.347] | result: ‘FutureResult’
[08:08:00.347] resolved() for SequentialFuture (<unnamed-23>) ... done
[08:08:00.348] SequentialFuture #2
[08:08:00.348] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:00.348] | nx: 4
[08:08:00.349] | relay: TRUE
[08:08:00.349] | stdout: TRUE
[08:08:00.349] | signal: TRUE
[08:08:00.350] | resignal: FALSE
[08:08:00.350] | force: TRUE
[08:08:00.350] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:00.350] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:00.350] | until=2
[08:08:00.350] | relaying element #2
[08:08:00.350] | value() for SequentialFuture (<unnamed-23>) ...
[08:08:00.350] | : signalConditions() ...
[08:08:00.350] | : . include = ‘immediateCondition’
[08:08:00.351] | : . exclude = 
[08:08:00.351] | : . resignal = FALSE
[08:08:00.351] | : . Number of conditions: 6
[08:08:00.351] | : .  int 6
[08:08:00.351] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.351] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.352] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.352] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.352] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.352] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.352] | : signalConditions() ... done
[08:08:00.352] | : relay stdout ...
[08:08:00.352] | : relay stdout ... done
[08:08:00.352] | : check for misuse ...
[08:08:00.352] | : check for misuse ... done
[08:08:00.353] | value() for SequentialFuture (<unnamed-23>) ... done
[08:08:00.353] | signalConditions() ...
[08:08:00.353] | : include = ‘immediateCondition’
[08:08:00.353] | : exclude = 
[08:08:00.353] | : resignal = FALSE
[08:08:00.353] | : Number of conditions: 6
[08:08:00.353] | :  int 6
[08:08:00.354] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.354] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.354] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.354] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.354] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.354] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.354] | signalConditions() ... done
[08:08:00.355] | signalConditions() ...
[08:08:00.355] | : include = ‘condition’
[08:08:00.355] | : exclude = ‘error’, ‘immediateCondition’
[08:08:00.355] | : resignal = TRUE
[08:08:00.355] | : Number of conditions: 6
[08:08:00.355] | :  int 6
[08:08:00.355] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.356] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.231] | : . ' , attachPackages() ...
[08:08:00.356] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.356] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.231] | : . ' , ; packages: [n=1] ‘future’
[08:08:00.356] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.356] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.231] | : . ' , attachPackages() ... done
[08:08:00.356] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.356] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.231] | : . ' , attachPackages() ...
[08:08:00.356] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.357] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.231] | : . ' , ; packages: [n=0] 
[08:08:00.357] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.357] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.232] | : . ' , attachPackages() ... done
[08:08:00.357] | signalConditions() ... done
[08:08:00.357] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:00.357] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:00.357] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:00.357] value(<SequentialFuture>, ...) ...
[08:08:00.357] value(<SequentialFuture>, ...) ... done
[08:08:00.358] value() for SequentialFuture (<unnamed-23>) ...
[08:08:00.358] | signalConditions() ...
[08:08:00.358] | : include = ‘immediateCondition’
[08:08:00.358] | : exclude = 
[08:08:00.358] | : resignal = FALSE
[08:08:00.358] | : Number of conditions: 6
[08:08:00.358] | :  int 6
[08:08:00.358] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.359] | : already signaled, skipping
[08:08:00.359] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.359] | : already signaled, skipping
[08:08:00.359] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.359] | : already signaled, skipping
[08:08:00.359] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.359] | : already signaled, skipping
[08:08:00.359] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.359] | : already signaled, skipping
[08:08:00.359] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.360] | : already signaled, skipping
[08:08:00.360] | signalConditions() ... done
[08:08:00.360] | check for misuse ...
[08:08:00.360] | check for misuse ... done
[08:08:00.360] value() for SequentialFuture (<unnamed-23>) ... done
[08:08:00.360] value: <numeric>
[08:08:00.360] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:00.360] | nx: 4
[08:08:00.360] | relay: TRUE
[08:08:00.361] | stdout: TRUE
[08:08:00.361] | signal: TRUE
[08:08:00.361] | resignal: FALSE
[08:08:00.361] | force: TRUE
[08:08:00.361] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:00.361] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:00.361] | until=3
[08:08:00.361] | relaying element #3
[08:08:00.361] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:00.361] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:00.361] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:00.362] resolve() for SequentialFuture ...
[08:08:00.362] resolve() for SequentialFuture ... done
[08:08:00.362] length: 2 (resolved future 2)

[08:08:00.362] checking value #3:
[08:08:00.362] 'obj' is SequentialFuture
[08:08:00.362] resolved() for SequentialFuture (<unnamed-24>) ...
[08:08:00.362] | state: ‘finished’
[08:08:00.362] | run: TRUE
[08:08:00.362] | result: ‘FutureResult’
[08:08:00.363] resolved() for SequentialFuture (<unnamed-24>) ... done
[08:08:00.363] SequentialFuture #3
[08:08:00.363] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:00.363] | nx: 4
[08:08:00.363] | relay: TRUE
[08:08:00.363] | stdout: TRUE
[08:08:00.363] | signal: TRUE
[08:08:00.363] | resignal: FALSE
[08:08:00.363] | force: TRUE
[08:08:00.363] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:00.363] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:00.364] | until=3
[08:08:00.364] | relaying element #3
[08:08:00.364] | value() for SequentialFuture (<unnamed-24>) ...
[08:08:00.364] | : signalConditions() ...
[08:08:00.364] | : . include = ‘immediateCondition’
[08:08:00.364] | : . exclude = 
[08:08:00.364] | : . resignal = FALSE
[08:08:00.364] | : . Number of conditions: 6
[08:08:00.364] | : .  int 6
[08:08:00.365] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.365] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.365] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.365] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.365] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.365] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.365] | : signalConditions() ... done
[08:08:00.365] | : relay stdout ...
[08:08:00.366] | : relay stdout ... done
[08:08:00.366] | : check for misuse ...
[08:08:00.366] | : check for misuse ... done
[08:08:00.366] | value() for SequentialFuture (<unnamed-24>) ... done
[08:08:00.368] | signalConditions() ...
[08:08:00.368] | : include = ‘immediateCondition’
[08:08:00.368] | : exclude = 
[08:08:00.368] | : resignal = FALSE
[08:08:00.368] | : Number of conditions: 6
[08:08:00.368] | :  int 6
[08:08:00.369] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.369] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.369] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.369] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.369] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.369] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.369] | signalConditions() ... done
[08:08:00.369] | signalConditions() ...
[08:08:00.370] | : include = ‘condition’
[08:08:00.370] | : exclude = ‘error’, ‘immediateCondition’
[08:08:00.370] | : resignal = TRUE
[08:08:00.370] | : Number of conditions: 6
[08:08:00.370] | :  int 6
[08:08:00.370] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.371] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.264] | : . ' , attachPackages() ...
[08:08:00.371] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.371] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.264] | : . ' , ; packages: [n=1] ‘future’
[08:08:00.371] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.371] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.264] | : . ' , attachPackages() ... done
[08:08:00.371] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.371] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.265] | : . ' , attachPackages() ...
[08:08:00.372] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.372] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.265] | : . ' , ; packages: [n=0] 
[08:08:00.372] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.372] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.265] | : . ' , attachPackages() ... done
[08:08:00.372] | signalConditions() ... done
[08:08:00.372] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:00.372] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:00.372] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:00.373] value(<SequentialFuture>, ...) ...
[08:08:00.373] value(<SequentialFuture>, ...) ... done
[08:08:00.373] value() for SequentialFuture (<unnamed-24>) ...
[08:08:00.373] | signalConditions() ...
[08:08:00.373] | : include = ‘immediateCondition’
[08:08:00.373] | : exclude = 
[08:08:00.373] | : resignal = FALSE
[08:08:00.373] | : Number of conditions: 6
[08:08:00.373] | :  int 6
[08:08:00.374] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.374] | : already signaled, skipping
[08:08:00.374] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.374] | : already signaled, skipping
[08:08:00.374] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.374] | : already signaled, skipping
[08:08:00.374] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.374] | : already signaled, skipping
[08:08:00.374] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.375] | : already signaled, skipping
[08:08:00.375] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.375] | : already signaled, skipping
[08:08:00.375] | signalConditions() ... done
[08:08:00.375] | check for misuse ...
[08:08:00.375] | check for misuse ... done
[08:08:00.375] value() for SequentialFuture (<unnamed-24>) ... done
[08:08:00.375] value: <NULL>
[08:08:00.375] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:00.376] | nx: 4
[08:08:00.376] | relay: TRUE
[08:08:00.376] | stdout: TRUE
[08:08:00.376] | signal: TRUE
[08:08:00.376] | resignal: FALSE
[08:08:00.376] | force: TRUE
[08:08:00.376] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:00.376] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:00.376] | until=4
[08:08:00.376] | relaying element #4
[08:08:00.376] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:00.377] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:00.377] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:00.377] resolve() for SequentialFuture ...
[08:08:00.377] resolve() for SequentialFuture ... done
[08:08:00.377] length: 1 (resolved future 3)

[08:08:00.377] checking value #4:
[08:08:00.377] 'obj' is atomic
[08:08:00.377] signalConditionsASAP(numeric, pos=4) ...
[08:08:00.377] | nx: 4
[08:08:00.377] | relay: TRUE
[08:08:00.378] | stdout: TRUE
[08:08:00.378] | signal: TRUE
[08:08:00.378] | resignal: FALSE
[08:08:00.378] | force: TRUE
[08:08:00.378] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:00.378] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:00.378] | until=4
[08:08:00.378] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:00.378] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:00.378] signalConditionsASAP(numeric, pos=4) ... done
[08:08:00.379] length: 0 (resolved future 4)

[08:08:00.379] Relaying remaining futures ...
[08:08:00.379] | signalConditionsASAP(NULL, pos=0) ...
[08:08:00.379] | : nx: 4
[08:08:00.379] | : relay: TRUE
[08:08:00.379] | : stdout: TRUE
[08:08:00.379] | : signal: TRUE
[08:08:00.379] | : resignal: FALSE
[08:08:00.379] | : force: TRUE
[08:08:00.379] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:00.379] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:00.380] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:00.380] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:00.380] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:00.380] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
*** futures() - environment ... DONE
Type of object: listenv
Type of future: sequential
[08:08:00.382] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.382] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:00.382] | : all.equal() for FutureStrategyList ...
[08:08:00.382] | : . New stack:
[08:08:00.382] | : . List of 1
[08:08:00.382] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.382] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.382] | : .   ..- attr(*, "init")= logi TRUE
[08:08:00.382] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.382] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.382] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.382] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:00.382] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.386] | : . Old stack:
[08:08:00.387] | : . List of 1
[08:08:00.387] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.387] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.387] | : .   ..- attr(*, "init")= chr "done"
[08:08:00.387] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.387] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.387] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.387] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:00.387] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.387] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.387] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.387] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.390] | : . Not identical
[08:08:00.390] | : . all.equal() for future ...
[08:08:00.390] | : . ' List of 2
[08:08:00.390] | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.390] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.390] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:00.390] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.390] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.390] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.390] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:00.390] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.390] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.390] | : . '   ..- attr(*, "init")= chr "done"
[08:08:00.390] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.390] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.390] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.390] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:00.390] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.390] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.390] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.395] | : . all.equal() for future ... done
[08:08:00.395] | : all.equal() for FutureStrategyList ... done
[08:08:00.396] | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.396] | : List of future strategies:
[08:08:00.396] | : 1. sequential:
[08:08:00.396] | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.396] | :    - tweaked: FALSE
[08:08:00.396] | :    - call: plan(sequential)
[08:08:00.396] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:00.396] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Dimensions: NULL
[08:08:00.397] future(..., label = NULL) ...
[08:08:00.397] | lazy: FALSE
[08:08:00.397] | stdout: TRUE
[08:08:00.397] | conditions: [n=1] ‘condition’
[08:08:00.397] | gc: FALSE
[08:08:00.397] | earlySignal: FALSE
[08:08:00.397] | getGlobalsAndPackages() ...
[08:08:00.397] | : Searching for globals ...
[08:08:00.398] | : . globals found: [0] 
[08:08:00.399] | : Searching for globals ... done
[08:08:00.399] | : globals: [0] <none>
[08:08:00.399] | : packages: [0] <none>
[08:08:00.399] | getGlobalsAndPackages() ... done
[08:08:00.399] | run() for ‘Future’ (<unnamed-26>) ...
[08:08:00.399] | : state: ‘created’
[08:08:00.399] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.399] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.400] | : Using SequentialFutureBackend ...
[08:08:00.400] | : . Number of futures since start: 25 (25 created, 25 launched, 25 finished)
[08:08:00.400] | : . Launching futures ...
[08:08:00.400] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:00.400] | : . ' , getFutureData() ...
[08:08:00.400] | : . ' , ; getFutureCore() ...
[08:08:00.400] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:00.400] | : . ' , ; getFutureCore() ... done
[08:08:00.400] | : . ' , ; getFutureCapture() ...
[08:08:00.401] | : . ' , ; getFutureCapture() ... done
[08:08:00.401] | : . ' , ; getFutureContext() ...
[08:08:00.401] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.401] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:00.401] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.401] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:00.401] | : . ' , ; getFutureContext() ... done
[08:08:00.401] | : . ' , getFutureData() ... done
[08:08:00.404] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.404] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:00.404] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.404] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.405] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.405] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:00.405] | : . ' , ; ` | New stack:
[08:08:00.405] | : . ' , ; ` | List of 1
[08:08:00.405] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.405] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.405] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:00.405] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.405] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.405] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.405] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.405] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.408] | : . ' , ; ` | Old stack:
[08:08:00.408] | : . ' , ; ` | List of 1
[08:08:00.408] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.408] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.408] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:00.408] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.408] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.408] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.408] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:00.408] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.408] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.408] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.408] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.411] | : . ' , ; ` | Not identical
[08:08:00.411] | : . ' , ; ` | all.equal() for future ...
[08:08:00.411] | : . ' , ; ` | : List of 2
[08:08:00.411] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.411] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.411] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:00.411] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.411] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.411] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.411] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.411] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.411] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.411] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.411] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.411] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.411] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.411] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.411] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.411] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.411] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.416] | : . ' , ; ` | all.equal() for future ... done
[08:08:00.416] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:00.416] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.416] | : . ' , ; ` List of future strategies:
[08:08:00.416] | : . ' , ; ` 1. sequential:
[08:08:00.416] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.416] | : . ' , ; `    - tweaked: FALSE
[08:08:00.416] | : . ' , ; `    - call: plan(sequential)
[08:08:00.417] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.417] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.419] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.419] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.419] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.419] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:00.419] | : . ' , ; ` | : New stack:
[08:08:00.420] | : . ' , ; ` | : List of 1
[08:08:00.420] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.420] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.420] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.420] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.420] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.420] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.420] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.420] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.420] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.420] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.420] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.424] | : . ' , ; ` | : Old stack:
[08:08:00.424] | : . ' , ; ` | : List of 1
[08:08:00.424] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.424] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.424] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.424] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.424] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.424] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.424] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.424] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.424] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.424] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.424] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.427] | : . ' , ; ` | : Identical
[08:08:00.427] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:00.427] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.427] | : . ' , ; ` | List of future strategies:
[08:08:00.427] | : . ' , ; ` | 1. sequential:
[08:08:00.427] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.427] | : . ' , ; ` |    - tweaked: FALSE
[08:08:00.427] | : . ' , ; ` |    - call: plan(sequential)
[08:08:00.428] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.428] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.428] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.428] | : . ' , SequentialFuture started (and completed)
[08:08:00.428] | : . ' , signalConditions() ...
[08:08:00.428] | : . ' , ; include = ‘immediateCondition’
[08:08:00.428] | : . ' , ; exclude = 
[08:08:00.429] | : . ' , ; resignal = FALSE
[08:08:00.429] | : . ' , ; Number of conditions: 6
[08:08:00.429] | : . ' , ;  int 6
[08:08:00.429] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.429] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.429] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.429] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.429] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.430] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.430] | : . ' , signalConditions() ... done
[08:08:00.430] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:00.430] | : . Launching futures ... done
[08:08:00.430] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:00.430] | : Using SequentialFutureBackend ... done
[08:08:00.430] | run() for ‘Future’ (<unnamed-26>) ... done
[08:08:00.430] future(..., label = NULL) ... done
[08:08:00.430] future(..., label = NULL) ...
[08:08:00.431] | lazy: FALSE
[08:08:00.431] | stdout: TRUE
[08:08:00.431] | conditions: [n=1] ‘condition’
[08:08:00.431] | gc: FALSE
[08:08:00.431] | earlySignal: FALSE
[08:08:00.431] | getGlobalsAndPackages() ...
[08:08:00.431] | : Searching for globals ...
[08:08:00.432] | : . globals found: [0] 
[08:08:00.432] | : Searching for globals ... done
[08:08:00.432] | : globals: [0] <none>
[08:08:00.432] | : packages: [0] <none>
[08:08:00.433] | getGlobalsAndPackages() ... done
[08:08:00.433] | run() for ‘Future’ (<unnamed-27>) ...
[08:08:00.433] | : state: ‘created’
[08:08:00.433] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.433] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.433] | : Using SequentialFutureBackend ...
[08:08:00.433] | : . Number of futures since start: 26 (26 created, 26 launched, 26 finished)
[08:08:00.433] | : . Launching futures ...
[08:08:00.434] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:00.434] | : . ' , getFutureData() ...
[08:08:00.434] | : . ' , ; getFutureCore() ...
[08:08:00.434] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:00.434] | : . ' , ; getFutureCore() ... done
[08:08:00.434] | : . ' , ; getFutureCapture() ...
[08:08:00.434] | : . ' , ; getFutureCapture() ... done
[08:08:00.434] | : . ' , ; getFutureContext() ...
[08:08:00.434] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.434] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:00.435] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.435] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:00.435] | : . ' , ; getFutureContext() ... done
[08:08:00.435] | : . ' , getFutureData() ... done
[08:08:00.436] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.437] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:00.438] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.438] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.438] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.438] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:00.438] | : . ' , ; ` | New stack:
[08:08:00.438] | : . ' , ; ` | List of 1
[08:08:00.438] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.438] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.438] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:00.438] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.438] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.438] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.438] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.438] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.441] | : . ' , ; ` | Old stack:
[08:08:00.441] | : . ' , ; ` | List of 1
[08:08:00.441] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.441] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.441] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:00.441] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.441] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.441] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.441] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:00.441] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.441] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.441] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.441] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.444] | : . ' , ; ` | Not identical
[08:08:00.444] | : . ' , ; ` | all.equal() for future ...
[08:08:00.444] | : . ' , ; ` | : List of 2
[08:08:00.444] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.444] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.444] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:00.444] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.444] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.444] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.444] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.444] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.444] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.444] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.444] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.444] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.444] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.444] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.444] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.444] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.444] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.449] | : . ' , ; ` | all.equal() for future ... done
[08:08:00.449] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:00.449] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.449] | : . ' , ; ` List of future strategies:
[08:08:00.449] | : . ' , ; ` 1. sequential:
[08:08:00.449] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.449] | : . ' , ; `    - tweaked: FALSE
[08:08:00.449] | : . ' , ; `    - call: plan(sequential)
[08:08:00.450] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.450] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.451] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.452] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.452] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.452] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:00.452] | : . ' , ; ` | : New stack:
[08:08:00.452] | : . ' , ; ` | : List of 1
[08:08:00.452] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.452] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.452] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.452] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.452] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.452] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.452] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.452] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.452] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.452] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.452] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.456] | : . ' , ; ` | : Old stack:
[08:08:00.456] | : . ' , ; ` | : List of 1
[08:08:00.456] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.456] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.456] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.456] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.456] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.456] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.456] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.456] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.456] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.456] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.456] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.459] | : . ' , ; ` | : Identical
[08:08:00.460] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:00.460] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.460] | : . ' , ; ` | List of future strategies:
[08:08:00.460] | : . ' , ; ` | 1. sequential:
[08:08:00.460] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.460] | : . ' , ; ` |    - tweaked: FALSE
[08:08:00.460] | : . ' , ; ` |    - call: plan(sequential)
[08:08:00.460] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.460] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.460] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.461] | : . ' , SequentialFuture started (and completed)
[08:08:00.461] | : . ' , signalConditions() ...
[08:08:00.461] | : . ' , ; include = ‘immediateCondition’
[08:08:00.461] | : . ' , ; exclude = 
[08:08:00.461] | : . ' , ; resignal = FALSE
[08:08:00.461] | : . ' , ; Number of conditions: 6
[08:08:00.461] | : . ' , ;  int 6
[08:08:00.462] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.462] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.462] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.462] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.462] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.462] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.462] | : . ' , signalConditions() ... done
[08:08:00.462] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:00.463] | : . Launching futures ... done
[08:08:00.463] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:00.463] | : Using SequentialFutureBackend ... done
[08:08:00.463] | run() for ‘Future’ (<unnamed-27>) ... done
[08:08:00.463] future(..., label = NULL) ... done
[08:08:00.463] future(..., label = NULL) ...
[08:08:00.463] | lazy: FALSE
[08:08:00.464] | stdout: TRUE
[08:08:00.464] | conditions: [n=1] ‘condition’
[08:08:00.464] | gc: FALSE
[08:08:00.464] | earlySignal: FALSE
[08:08:00.464] | getGlobalsAndPackages() ...
[08:08:00.464] | : Searching for globals ...
[08:08:00.467] | : . globals found: [1] ‘{’
[08:08:00.467] | : Searching for globals ... done
[08:08:00.467] | : Resolving globals: FALSE
[08:08:00.467] | : Search for packages associated with the globals ...
[08:08:00.467] | : . Packages associated with globals: [1] ‘base’
[08:08:00.468] | : . Packages: [1] ‘base’
[08:08:00.468] | : Search for packages associated with the globals ... done
[08:08:00.468] | : Packages after dropping 'base': [0] 
[08:08:00.468] | : globals: [0] 
[08:08:00.468] | : packages: [0] 
[08:08:00.468] | getGlobalsAndPackages() ... done
[08:08:00.468] | run() for ‘Future’ (<unnamed-28>) ...
[08:08:00.468] | : state: ‘created’
[08:08:00.469] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.470] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.470] | : Using SequentialFutureBackend ...
[08:08:00.470] | : . Number of futures since start: 27 (27 created, 27 launched, 27 finished)
[08:08:00.470] | : . Launching futures ...
[08:08:00.470] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:00.470] | : . ' , getFutureData() ...
[08:08:00.470] | : . ' , ; getFutureCore() ...
[08:08:00.470] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:00.470] | : . ' , ; getFutureCore() ... done
[08:08:00.471] | : . ' , ; getFutureCapture() ...
[08:08:00.471] | : . ' , ; getFutureCapture() ... done
[08:08:00.471] | : . ' , ; getFutureContext() ...
[08:08:00.471] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.471] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:00.471] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.471] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:00.471] | : . ' , ; getFutureContext() ... done
[08:08:00.471] | : . ' , getFutureData() ... done
[08:08:00.473] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.473] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:00.473] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.473] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.473] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.473] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:00.474] | : . ' , ; ` | New stack:
[08:08:00.474] | : . ' , ; ` | List of 1
[08:08:00.474] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.474] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.474] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:00.474] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.474] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.474] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.474] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.474] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.476] | : . ' , ; ` | Old stack:
[08:08:00.476] | : . ' , ; ` | List of 1
[08:08:00.476] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.476] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.476] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:00.476] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.476] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.476] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.476] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:00.476] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.476] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.476] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.476] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.479] | : . ' , ; ` | Not identical
[08:08:00.479] | : . ' , ; ` | all.equal() for future ...
[08:08:00.479] | : . ' , ; ` | : List of 2
[08:08:00.479] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.479] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.479] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:00.479] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.479] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.479] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.479] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.479] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.479] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.479] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.479] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.479] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.479] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.479] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.479] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.479] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.479] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.484] | : . ' , ; ` | all.equal() for future ... done
[08:08:00.486] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:00.486] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.486] | : . ' , ; ` List of future strategies:
[08:08:00.486] | : . ' , ; ` 1. sequential:
[08:08:00.486] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.486] | : . ' , ; `    - tweaked: FALSE
[08:08:00.486] | : . ' , ; `    - call: plan(sequential)
[08:08:00.487] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.487] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.488] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.488] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.489] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.489] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:00.489] | : . ' , ; ` | : New stack:
[08:08:00.489] | : . ' , ; ` | : List of 1
[08:08:00.489] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.489] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.489] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.489] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.489] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.489] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.489] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.489] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.489] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.489] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.489] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.492] | : . ' , ; ` | : Old stack:
[08:08:00.492] | : . ' , ; ` | : List of 1
[08:08:00.492] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.492] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.492] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.492] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.492] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.492] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.492] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.492] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.492] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.492] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.492] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.495] | : . ' , ; ` | : Identical
[08:08:00.496] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:00.496] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.496] | : . ' , ; ` | List of future strategies:
[08:08:00.496] | : . ' , ; ` | 1. sequential:
[08:08:00.496] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.496] | : . ' , ; ` |    - tweaked: FALSE
[08:08:00.496] | : . ' , ; ` |    - call: plan(sequential)
[08:08:00.496] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.496] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.496] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.497] | : . ' , SequentialFuture started (and completed)
[08:08:00.497] | : . ' , signalConditions() ...
[08:08:00.497] | : . ' , ; include = ‘immediateCondition’
[08:08:00.497] | : . ' , ; exclude = 
[08:08:00.497] | : . ' , ; resignal = FALSE
[08:08:00.497] | : . ' , ; Number of conditions: 6
[08:08:00.497] | : . ' , ;  int 6
[08:08:00.498] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.498] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.498] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.498] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.498] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.498] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.498] | : . ' , signalConditions() ... done
[08:08:00.498] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:00.498] | : . Launching futures ... done
[08:08:00.499] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:00.499] | : Using SequentialFutureBackend ... done
[08:08:00.499] | run() for ‘Future’ (<unnamed-28>) ... done
[08:08:00.499] future(..., label = NULL) ... done
Classes 'listenv', 'environment' <environment: 0x556759f59480> 
Classes 'listenv', 'environment' <environment: 0x55675a3107c8> 
[08:08:00.500] resolved() for listenv ...
[08:08:00.501] | resolved() for list ...
[08:08:00.501] | : Number of elements: 6
[08:08:00.501] | : Number of futures: 6
[08:08:00.501] | : resolved() for SequentialFuture (<unnamed-26>) ...
[08:08:00.502] | : . state: ‘finished’
[08:08:00.502] | : . run: TRUE
[08:08:00.502] | : . result: ‘FutureResult’
[08:08:00.502] | : resolved() for SequentialFuture (<unnamed-26>) ... done
[08:08:00.502] | : resolved() for SequentialFuture (<unnamed-27>) ...
[08:08:00.502] | : . state: ‘finished’
[08:08:00.502] | : . run: TRUE
[08:08:00.502] | : . result: ‘FutureResult’
[08:08:00.502] | : resolved() for SequentialFuture (<unnamed-27>) ... done
[08:08:00.503] | : resolved() for SequentialFuture (<unnamed-28>) ...
[08:08:00.504] | : . state: ‘finished’
[08:08:00.504] | : . run: TRUE
[08:08:00.504] | : . result: ‘FutureResult’
[08:08:00.504] | : resolved() for SequentialFuture (<unnamed-28>) ... done
[08:08:00.504] | resolved() for list ... done
[08:08:00.504] resolved() for listenv ... done
 Named logi [1:6] TRUE TRUE TRUE TRUE TRUE TRUE
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:00.505] value() for listenv ...
[08:08:00.505] | recursive: 0
[08:08:00.505] | reduce: FALSE
[08:08:00.506] | length: 6
[08:08:00.506] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:00.506] | Number of remaining objects: 6
[08:08:00.506] | checking value #1:
[08:08:00.506] | 'obj' is atomic
[08:08:00.506] | signalConditionsASAP(numeric, pos=1) ...
[08:08:00.506] | : nx: 6
[08:08:00.507] | : relay: TRUE
[08:08:00.507] | : stdout: TRUE
[08:08:00.507] | : signal: TRUE
[08:08:00.507] | : resignal: FALSE
[08:08:00.507] | : force: TRUE
[08:08:00.507] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:00.507] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:00.507] | : until=2
[08:08:00.507] | : relaying element #2
[08:08:00.507] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:00.507] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:00.508] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:00.508] | length: 5 (resolved future 1)
[08:08:00.508] value() for listenv ... done
[08:08:00.508] checking value #2:
[08:08:00.508] 'obj' is SequentialFuture
[08:08:00.508] resolved() for SequentialFuture (<unnamed-26>) ...
[08:08:00.508] | state: ‘finished’
[08:08:00.508] | run: TRUE
[08:08:00.509] | result: ‘FutureResult’
[08:08:00.509] resolved() for SequentialFuture (<unnamed-26>) ... done
[08:08:00.509] SequentialFuture #2
[08:08:00.509] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:00.509] | nx: 6
[08:08:00.509] | relay: TRUE
[08:08:00.509] | stdout: TRUE
[08:08:00.509] | signal: TRUE
[08:08:00.509] | resignal: FALSE
[08:08:00.509] | force: TRUE
[08:08:00.509] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:00.509] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:00.510] | until=2
[08:08:00.510] | relaying element #2
[08:08:00.510] | value() for SequentialFuture (<unnamed-26>) ...
[08:08:00.510] | : signalConditions() ...
[08:08:00.510] | : . include = ‘immediateCondition’
[08:08:00.510] | : . exclude = 
[08:08:00.510] | : . resignal = FALSE
[08:08:00.510] | : . Number of conditions: 6
[08:08:00.510] | : .  int 6
[08:08:00.511] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.511] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.511] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.511] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.511] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.511] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.511] | : signalConditions() ... done
[08:08:00.511] | : relay stdout ...
[08:08:00.512] | : relay stdout ... done
[08:08:00.512] | : check for misuse ...
[08:08:00.512] | : check for misuse ... done
[08:08:00.512] | value() for SequentialFuture (<unnamed-26>) ... done
[08:08:00.512] | signalConditions() ...
[08:08:00.512] | : include = ‘immediateCondition’
[08:08:00.512] | : exclude = 
[08:08:00.512] | : resignal = FALSE
[08:08:00.512] | : Number of conditions: 6
[08:08:00.512] | :  int 6
[08:08:00.513] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.513] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.513] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.513] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.513] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.513] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.513] | signalConditions() ... done
[08:08:00.514] | signalConditions() ...
[08:08:00.514] | : include = ‘condition’
[08:08:00.514] | : exclude = ‘error’, ‘immediateCondition’
[08:08:00.514] | : resignal = TRUE
[08:08:00.514] | : Number of conditions: 6
[08:08:00.514] | :  int 6
[08:08:00.514] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.514] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.402] | : . ' , attachPackages() ...
[08:08:00.515] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.515] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.402] | : . ' , ; packages: [n=1] ‘future’
[08:08:00.515] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.515] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.403] | : . ' , attachPackages() ... done
[08:08:00.515] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.515] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.403] | : . ' , attachPackages() ...
[08:08:00.515] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.515] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.403] | : . ' , ; packages: [n=0] 
[08:08:00.516] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.516] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.404] | : . ' , attachPackages() ... done
[08:08:00.516] | signalConditions() ... done
[08:08:00.516] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.516] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.516] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:00.516] value(<SequentialFuture>, ...) ...
[08:08:00.516] value(<SequentialFuture>, ...) ... done
[08:08:00.516] value() for SequentialFuture (<unnamed-26>) ...
[08:08:00.516] | signalConditions() ...
[08:08:00.517] | : include = ‘immediateCondition’
[08:08:00.517] | : exclude = 
[08:08:00.517] | : resignal = FALSE
[08:08:00.517] | : Number of conditions: 6
[08:08:00.517] | :  int 6
[08:08:00.517] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.517] | : already signaled, skipping
[08:08:00.517] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.518] | : already signaled, skipping
[08:08:00.518] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.518] | : already signaled, skipping
[08:08:00.518] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.518] | : already signaled, skipping
[08:08:00.518] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.518] | : already signaled, skipping
[08:08:00.518] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.518] | : already signaled, skipping
[08:08:00.518] | signalConditions() ... done
[08:08:00.518] | check for misuse ...
[08:08:00.519] | check for misuse ... done
[08:08:00.519] value() for SequentialFuture (<unnamed-26>) ... done
[08:08:00.519] value: <numeric>
[08:08:00.519] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:00.519] | nx: 6
[08:08:00.519] | relay: TRUE
[08:08:00.519] | stdout: TRUE
[08:08:00.519] | signal: TRUE
[08:08:00.519] | resignal: FALSE
[08:08:00.519] | force: TRUE
[08:08:00.520] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.521] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.521] | until=3
[08:08:00.521] | relaying element #3
[08:08:00.521] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.521] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.521] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:00.521] resolve() for SequentialFuture ...
[08:08:00.521] resolve() for SequentialFuture ... done
[08:08:00.521] length: 4 (resolved future 2)

[08:08:00.522] checking value #3:
[08:08:00.522] 'obj' is SequentialFuture
[08:08:00.522] resolved() for SequentialFuture (<unnamed-27>) ...
[08:08:00.522] | state: ‘finished’
[08:08:00.522] | run: TRUE
[08:08:00.522] | result: ‘FutureResult’
[08:08:00.522] resolved() for SequentialFuture (<unnamed-27>) ... done
[08:08:00.522] SequentialFuture #3
[08:08:00.522] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:00.522] | nx: 6
[08:08:00.522] | relay: TRUE
[08:08:00.523] | stdout: TRUE
[08:08:00.523] | signal: TRUE
[08:08:00.523] | resignal: FALSE
[08:08:00.523] | force: TRUE
[08:08:00.523] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.523] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.523] | until=3
[08:08:00.523] | relaying element #3
[08:08:00.523] | value() for SequentialFuture (<unnamed-27>) ...
[08:08:00.523] | : signalConditions() ...
[08:08:00.524] | : . include = ‘immediateCondition’
[08:08:00.524] | : . exclude = 
[08:08:00.524] | : . resignal = FALSE
[08:08:00.524] | : . Number of conditions: 6
[08:08:00.524] | : .  int 6
[08:08:00.524] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.524] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.525] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.525] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.525] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.525] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.525] | : signalConditions() ... done
[08:08:00.525] | : relay stdout ...
[08:08:00.525] | : relay stdout ... done
[08:08:00.525] | : check for misuse ...
[08:08:00.525] | : check for misuse ... done
[08:08:00.526] | value() for SequentialFuture (<unnamed-27>) ... done
[08:08:00.526] | signalConditions() ...
[08:08:00.526] | : include = ‘immediateCondition’
[08:08:00.526] | : exclude = 
[08:08:00.526] | : resignal = FALSE
[08:08:00.526] | : Number of conditions: 6
[08:08:00.526] | :  int 6
[08:08:00.526] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.527] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.527] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.527] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.527] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.527] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.527] | signalConditions() ... done
[08:08:00.527] | signalConditions() ...
[08:08:00.527] | : include = ‘condition’
[08:08:00.527] | : exclude = ‘error’, ‘immediateCondition’
[08:08:00.527] | : resignal = TRUE
[08:08:00.528] | : Number of conditions: 6
[08:08:00.528] | :  int 6
[08:08:00.528] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.528] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.435] | : . ' , attachPackages() ...
[08:08:00.528] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.528] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.435] | : . ' , ; packages: [n=1] ‘future’
[08:08:00.528] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.529] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.436] | : . ' , attachPackages() ... done
[08:08:00.529] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.529] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.436] | : . ' , attachPackages() ...
[08:08:00.529] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.529] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.436] | : . ' , ; packages: [n=0] 
[08:08:00.529] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.529] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.436] | : . ' , attachPackages() ... done
[08:08:00.529] | signalConditions() ... done
[08:08:00.529] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.530] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.530] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:00.530] value(<SequentialFuture>, ...) ...
[08:08:00.530] value(<SequentialFuture>, ...) ... done
[08:08:00.530] value() for SequentialFuture (<unnamed-27>) ...
[08:08:00.530] | signalConditions() ...
[08:08:00.530] | : include = ‘immediateCondition’
[08:08:00.530] | : exclude = 
[08:08:00.530] | : resignal = FALSE
[08:08:00.530] | : Number of conditions: 6
[08:08:00.530] | :  int 6
[08:08:00.531] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.531] | : already signaled, skipping
[08:08:00.531] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.531] | : already signaled, skipping
[08:08:00.531] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.531] | : already signaled, skipping
[08:08:00.531] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.532] | : already signaled, skipping
[08:08:00.532] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.532] | : already signaled, skipping
[08:08:00.532] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.532] | : already signaled, skipping
[08:08:00.532] | signalConditions() ... done
[08:08:00.532] | check for misuse ...
[08:08:00.532] | check for misuse ... done
[08:08:00.532] value() for SequentialFuture (<unnamed-27>) ... done
[08:08:00.532] value: <NULL>
[08:08:00.533] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:00.533] | nx: 6
[08:08:00.533] | relay: TRUE
[08:08:00.533] | stdout: TRUE
[08:08:00.533] | signal: TRUE
[08:08:00.533] | resignal: FALSE
[08:08:00.533] | force: TRUE
[08:08:00.533] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.533] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.533] | until=4
[08:08:00.533] | relaying element #4
[08:08:00.534] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.534] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.534] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:00.534] resolve() for SequentialFuture ...
[08:08:00.534] resolve() for SequentialFuture ... done
[08:08:00.534] length: 3 (resolved future 3)

[08:08:00.534] checking value #4:
[08:08:00.534] 'obj' is SequentialFuture
[08:08:00.534] resolved() for SequentialFuture (<unnamed-28>) ...
[08:08:00.534] | state: ‘finished’
[08:08:00.535] | run: TRUE
[08:08:00.535] | result: ‘FutureResult’
[08:08:00.535] resolved() for SequentialFuture (<unnamed-28>) ... done
[08:08:00.535] SequentialFuture #4
[08:08:00.535] signalConditionsASAP(SequentialFuture, pos=4) ...
[08:08:00.535] | nx: 6
[08:08:00.535] | relay: TRUE
[08:08:00.535] | stdout: TRUE
[08:08:00.535] | signal: TRUE
[08:08:00.535] | resignal: FALSE
[08:08:00.535] | force: TRUE
[08:08:00.536] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.536] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.536] | until=4
[08:08:00.536] | relaying element #4
[08:08:00.536] | value() for SequentialFuture (<unnamed-28>) ...
[08:08:00.536] | : signalConditions() ...
[08:08:00.536] | : . include = ‘immediateCondition’
[08:08:00.536] | : . exclude = 
[08:08:00.537] | : . resignal = FALSE
[08:08:00.537] | : . Number of conditions: 6
[08:08:00.538] | : .  int 6
[08:08:00.538] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.538] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.538] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.538] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.538] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.538] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.539] | : signalConditions() ... done
[08:08:00.539] | : relay stdout ...
[08:08:00.539] | : relay stdout ... done
[08:08:00.539] | : check for misuse ...
[08:08:00.539] | : check for misuse ... done
[08:08:00.539] | value() for SequentialFuture (<unnamed-28>) ... done
[08:08:00.539] | signalConditions() ...
[08:08:00.539] | : include = ‘immediateCondition’
[08:08:00.539] | : exclude = 
[08:08:00.540] | : resignal = FALSE
[08:08:00.540] | : Number of conditions: 6
[08:08:00.540] | :  int 6
[08:08:00.540] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.540] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.540] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.540] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.541] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.541] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.541] | signalConditions() ... done
[08:08:00.541] | signalConditions() ...
[08:08:00.541] | : include = ‘condition’
[08:08:00.541] | : exclude = ‘error’, ‘immediateCondition’
[08:08:00.541] | : resignal = TRUE
[08:08:00.541] | : Number of conditions: 6
[08:08:00.541] | :  int 6
[08:08:00.542] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.542] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.472] | : . ' , attachPackages() ...
[08:08:00.542] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.542] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.472] | : . ' , ; packages: [n=1] ‘future’
[08:08:00.542] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.542] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.472] | : . ' , attachPackages() ... done
[08:08:00.542] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.543] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.472] | : . ' , attachPackages() ...
[08:08:00.543] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.543] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.472] | : . ' , ; packages: [n=0] 
[08:08:00.543] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.543] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.472] | : . ' , attachPackages() ... done
[08:08:00.543] | signalConditions() ... done
[08:08:00.543] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.543] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.543] signalConditionsASAP(SequentialFuture, pos=4) ... done
[08:08:00.544] value(<SequentialFuture>, ...) ...
[08:08:00.544] value(<SequentialFuture>, ...) ... done
[08:08:00.544] value() for SequentialFuture (<unnamed-28>) ...
[08:08:00.544] | signalConditions() ...
[08:08:00.544] | : include = ‘immediateCondition’
[08:08:00.544] | : exclude = 
[08:08:00.544] | : resignal = FALSE
[08:08:00.544] | : Number of conditions: 6
[08:08:00.544] | :  int 6
[08:08:00.545] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.545] | : already signaled, skipping
[08:08:00.545] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.545] | : already signaled, skipping
[08:08:00.545] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.545] | : already signaled, skipping
[08:08:00.545] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.545] | : already signaled, skipping
[08:08:00.545] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.546] | : already signaled, skipping
[08:08:00.546] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.546] | : already signaled, skipping
[08:08:00.546] | signalConditions() ... done
[08:08:00.546] | check for misuse ...
[08:08:00.546] | check for misuse ... done
[08:08:00.546] value() for SequentialFuture (<unnamed-28>) ... done
[08:08:00.546] value: <numeric>
[08:08:00.546] signalConditionsASAP(SequentialFuture, pos=4) ...
[08:08:00.546] | nx: 6
[08:08:00.547] | relay: TRUE
[08:08:00.547] | stdout: TRUE
[08:08:00.547] | signal: TRUE
[08:08:00.547] | resignal: FALSE
[08:08:00.547] | force: TRUE
[08:08:00.547] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.547] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.547] | until=5
[08:08:00.547] | relaying element #5
[08:08:00.547] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.547] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.547] signalConditionsASAP(SequentialFuture, pos=4) ... done
[08:08:00.548] resolve() for SequentialFuture ...
[08:08:00.548] resolve() for SequentialFuture ... done
[08:08:00.548] length: 2 (resolved future 4)

[08:08:00.548] checking value #5:
[08:08:00.548] 'obj' is NULL
[08:08:00.548] signalConditionsASAP(NULL, pos=5) ...
[08:08:00.548] | nx: 6
[08:08:00.548] | relay: TRUE
[08:08:00.548] | stdout: TRUE
[08:08:00.548] | signal: TRUE
[08:08:00.549] | resignal: FALSE
[08:08:00.549] | force: TRUE
[08:08:00.549] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.549] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.549] | until=6
[08:08:00.549] | relaying element #6
[08:08:00.549] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:00.549] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.549] signalConditionsASAP(NULL, pos=5) ... done
[08:08:00.549] signalConditionsASAP(NULL, pos=5) ...
[08:08:00.550] | nx: 6
[08:08:00.550] | relay: TRUE
[08:08:00.550] | stdout: TRUE
[08:08:00.550] | signal: TRUE
[08:08:00.550] | resignal: FALSE
[08:08:00.550] | force: TRUE
[08:08:00.550] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:00.550] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.550] | until=6
[08:08:00.550] | relaying element #6
[08:08:00.550] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:00.550] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.551] signalConditionsASAP(NULL, pos=5) ... done
[08:08:00.551] length: 1 (resolved future 5)

[08:08:00.551] checking value #6:
[08:08:00.551] 'obj' is atomic
[08:08:00.551] signalConditionsASAP(numeric, pos=6) ...
[08:08:00.551] | nx: 6
[08:08:00.551] | relay: TRUE
[08:08:00.551] | stdout: TRUE
[08:08:00.551] | signal: TRUE
[08:08:00.551] | resignal: FALSE
[08:08:00.552] | force: TRUE
[08:08:00.552] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:00.552] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.552] | until=6
[08:08:00.552] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:00.552] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.552] signalConditionsASAP(numeric, pos=6) ... done
[08:08:00.552] length: 0 (resolved future 6)

[08:08:00.552] Relaying remaining futures ...
[08:08:00.553] | signalConditionsASAP(NULL, pos=0) ...
[08:08:00.553] | : nx: 6
[08:08:00.553] | : relay: TRUE
[08:08:00.553] | : stdout: TRUE
[08:08:00.553] | : signal: TRUE
[08:08:00.553] | : resignal: FALSE
[08:08:00.583] | : force: TRUE
[08:08:00.584] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:00.584] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:00.584] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:00.584] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.584] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:00.584] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
Dimensions: c(1, 6)
[08:08:00.587] future(..., label = NULL) ...
[08:08:00.587] | lazy: FALSE
[08:08:00.587] | stdout: TRUE
[08:08:00.587] | conditions: [n=1] ‘condition’
[08:08:00.587] | gc: FALSE
[08:08:00.587] | earlySignal: FALSE
[08:08:00.587] | getGlobalsAndPackages() ...
[08:08:00.587] | : Searching for globals ...
[08:08:00.588] | : . globals found: [0] 
[08:08:00.589] | : Searching for globals ... done
[08:08:00.589] | : globals: [0] <none>
[08:08:00.589] | : packages: [0] <none>
[08:08:00.589] | getGlobalsAndPackages() ... done
[08:08:00.589] | run() for ‘Future’ (<unnamed-29>) ...
[08:08:00.589] | : state: ‘created’
[08:08:00.589] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.589] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.590] | : Using SequentialFutureBackend ...
[08:08:00.590] | : . Number of futures since start: 28 (28 created, 28 launched, 28 finished)
[08:08:00.590] | : . Launching futures ...
[08:08:00.590] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:00.590] | : . ' , getFutureData() ...
[08:08:00.590] | : . ' , ; getFutureCore() ...
[08:08:00.590] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:00.590] | : . ' , ; getFutureCore() ... done
[08:08:00.590] | : . ' , ; getFutureCapture() ...
[08:08:00.591] | : . ' , ; getFutureCapture() ... done
[08:08:00.591] | : . ' , ; getFutureContext() ...
[08:08:00.591] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.591] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:00.591] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.591] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:00.591] | : . ' , ; getFutureContext() ... done
[08:08:00.591] | : . ' , getFutureData() ... done
[08:08:00.593] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.593] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:00.593] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.593] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.593] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.593] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:00.593] | : . ' , ; ` | New stack:
[08:08:00.594] | : . ' , ; ` | List of 1
[08:08:00.594] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.594] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.594] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:00.594] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.594] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.594] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.594] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.594] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.596] | : . ' , ; ` | Old stack:
[08:08:00.596] | : . ' , ; ` | List of 1
[08:08:00.596] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.596] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.596] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:00.596] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.596] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.596] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.596] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:00.596] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.596] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.596] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.596] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.599] | : . ' , ; ` | Not identical
[08:08:00.599] | : . ' , ; ` | all.equal() for future ...
[08:08:00.600] | : . ' , ; ` | : List of 2
[08:08:00.600] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.600] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.600] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:00.600] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.600] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.600] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.600] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.600] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.600] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.600] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.600] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.600] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.600] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.600] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.600] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.600] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.600] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.605] | : . ' , ; ` | all.equal() for future ... done
[08:08:00.605] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:00.605] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.605] | : . ' , ; ` List of future strategies:
[08:08:00.605] | : . ' , ; ` 1. sequential:
[08:08:00.605] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.605] | : . ' , ; `    - tweaked: FALSE
[08:08:00.605] | : . ' , ; `    - call: plan(sequential)
[08:08:00.605] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.606] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.607] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.607] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.607] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.607] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:00.608] | : . ' , ; ` | : New stack:
[08:08:00.608] | : . ' , ; ` | : List of 1
[08:08:00.608] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.608] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.608] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.608] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.608] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.608] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.608] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.608] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.608] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.608] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.608] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.611] | : . ' , ; ` | : Old stack:
[08:08:00.611] | : . ' , ; ` | : List of 1
[08:08:00.611] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.611] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.611] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.611] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.611] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.611] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.611] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.611] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.611] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.611] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.611] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.615] | : . ' , ; ` | : Identical
[08:08:00.615] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:00.615] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.615] | : . ' , ; ` | List of future strategies:
[08:08:00.615] | : . ' , ; ` | 1. sequential:
[08:08:00.615] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.615] | : . ' , ; ` |    - tweaked: FALSE
[08:08:00.615] | : . ' , ; ` |    - call: plan(sequential)
[08:08:00.616] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.616] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.616] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.616] | : . ' , SequentialFuture started (and completed)
[08:08:00.617] | : . ' , signalConditions() ...
[08:08:00.617] | : . ' , ; include = ‘immediateCondition’
[08:08:00.617] | : . ' , ; exclude = 
[08:08:00.617] | : . ' , ; resignal = FALSE
[08:08:00.617] | : . ' , ; Number of conditions: 6
[08:08:00.617] | : . ' , ;  int 6
[08:08:00.618] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.618] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.618] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.618] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.618] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.618] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.619] | : . ' , signalConditions() ... done
[08:08:00.619] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:00.619] | : . Launching futures ... done
[08:08:00.619] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:00.619] | : Using SequentialFutureBackend ... done
[08:08:00.619] | run() for ‘Future’ (<unnamed-29>) ... done
[08:08:00.619] future(..., label = NULL) ... done
[08:08:00.620] future(..., label = NULL) ...
[08:08:00.620] | lazy: FALSE
[08:08:00.620] | stdout: TRUE
[08:08:00.620] | conditions: [n=1] ‘condition’
[08:08:00.620] | gc: FALSE
[08:08:00.620] | earlySignal: FALSE
[08:08:00.620] | getGlobalsAndPackages() ...
[08:08:00.620] | : Searching for globals ...
[08:08:00.622] | : . globals found: [0] 
[08:08:00.622] | : Searching for globals ... done
[08:08:00.622] | : globals: [0] <none>
[08:08:00.622] | : packages: [0] <none>
[08:08:00.622] | getGlobalsAndPackages() ... done
[08:08:00.623] | run() for ‘Future’ (<unnamed-30>) ...
[08:08:00.623] | : state: ‘created’
[08:08:00.623] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.623] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.623] | : Using SequentialFutureBackend ...
[08:08:00.623] | : . Number of futures since start: 29 (29 created, 29 launched, 29 finished)
[08:08:00.623] | : . Launching futures ...
[08:08:00.624] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:00.624] | : . ' , getFutureData() ...
[08:08:00.624] | : . ' , ; getFutureCore() ...
[08:08:00.624] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:00.624] | : . ' , ; getFutureCore() ... done
[08:08:00.624] | : . ' , ; getFutureCapture() ...
[08:08:00.624] | : . ' , ; getFutureCapture() ... done
[08:08:00.625] | : . ' , ; getFutureContext() ...
[08:08:00.625] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.625] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:00.625] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.625] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:00.625] | : . ' , ; getFutureContext() ... done
[08:08:00.625] | : . ' , getFutureData() ... done
[08:08:00.627] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.627] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:00.627] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.627] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.628] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.628] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:00.628] | : . ' , ; ` | New stack:
[08:08:00.628] | : . ' , ; ` | List of 1
[08:08:00.628] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.628] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.628] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:00.628] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.628] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.628] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.628] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.628] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.631] | : . ' , ; ` | Old stack:
[08:08:00.631] | : . ' , ; ` | List of 1
[08:08:00.631] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.631] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.631] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:00.631] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.631] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.631] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.631] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:00.631] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.631] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.631] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.631] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.636] | : . ' , ; ` | Not identical
[08:08:00.636] | : . ' , ; ` | all.equal() for future ...
[08:08:00.636] | : . ' , ; ` | : List of 2
[08:08:00.636] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.636] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.636] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:00.636] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.636] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.636] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.636] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.636] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.636] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.636] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.636] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.636] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.636] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.636] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.636] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.636] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.636] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.642] | : . ' , ; ` | all.equal() for future ... done
[08:08:00.642] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:00.643] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.643] | : . ' , ; ` List of future strategies:
[08:08:00.643] | : . ' , ; ` 1. sequential:
[08:08:00.643] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.643] | : . ' , ; `    - tweaked: FALSE
[08:08:00.643] | : . ' , ; `    - call: plan(sequential)
[08:08:00.643] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.643] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.645] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.646] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.646] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.646] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:00.646] | : . ' , ; ` | : New stack:
[08:08:00.646] | : . ' , ; ` | : List of 1
[08:08:00.646] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.646] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.646] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.646] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.646] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.646] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.646] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.646] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.646] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.646] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.646] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.650] | : . ' , ; ` | : Old stack:
[08:08:00.650] | : . ' , ; ` | : List of 1
[08:08:00.650] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.650] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.650] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.650] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.650] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.650] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.650] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.650] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.650] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.650] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.650] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.654] | : . ' , ; ` | : Identical
[08:08:00.654] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:00.655] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.655] | : . ' , ; ` | List of future strategies:
[08:08:00.655] | : . ' , ; ` | 1. sequential:
[08:08:00.655] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.655] | : . ' , ; ` |    - tweaked: FALSE
[08:08:00.655] | : . ' , ; ` |    - call: plan(sequential)
[08:08:00.655] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.655] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.656] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.656] | : . ' , SequentialFuture started (and completed)
[08:08:00.656] | : . ' , signalConditions() ...
[08:08:00.656] | : . ' , ; include = ‘immediateCondition’
[08:08:00.656] | : . ' , ; exclude = 
[08:08:00.656] | : . ' , ; resignal = FALSE
[08:08:00.657] | : . ' , ; Number of conditions: 6
[08:08:00.657] | : . ' , ;  int 6
[08:08:00.657] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.657] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.657] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.658] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.658] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.658] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.658] | : . ' , signalConditions() ... done
[08:08:00.658] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:00.658] | : . Launching futures ... done
[08:08:00.658] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:00.659] | : Using SequentialFutureBackend ... done
[08:08:00.659] | run() for ‘Future’ (<unnamed-30>) ... done
[08:08:00.659] future(..., label = NULL) ... done
[08:08:00.659] future(..., label = NULL) ...
[08:08:00.659] | lazy: FALSE
[08:08:00.660] | stdout: TRUE
[08:08:00.660] | conditions: [n=1] ‘condition’
[08:08:00.660] | gc: FALSE
[08:08:00.660] | earlySignal: FALSE
[08:08:00.660] | getGlobalsAndPackages() ...
[08:08:00.660] | : Searching for globals ...
[08:08:00.664] | : . globals found: [1] ‘{’
[08:08:00.664] | : Searching for globals ... done
[08:08:00.664] | : Resolving globals: FALSE
[08:08:00.664] | : Search for packages associated with the globals ...
[08:08:00.665] | : . Packages associated with globals: [1] ‘base’
[08:08:00.665] | : . Packages: [1] ‘base’
[08:08:00.665] | : Search for packages associated with the globals ... done
[08:08:00.665] | : Packages after dropping 'base': [0] 
[08:08:00.665] | : globals: [0] 
[08:08:00.665] | : packages: [0] 
[08:08:00.666] | getGlobalsAndPackages() ... done
[08:08:00.666] | run() for ‘Future’ (<unnamed-31>) ...
[08:08:00.666] | : state: ‘created’
[08:08:00.666] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.666] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.666] | : Using SequentialFutureBackend ...
[08:08:00.667] | : . Number of futures since start: 30 (30 created, 30 launched, 30 finished)
[08:08:00.667] | : . Launching futures ...
[08:08:00.668] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:00.668] | : . ' , getFutureData() ...
[08:08:00.669] | : . ' , ; getFutureCore() ...
[08:08:00.669] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:00.669] | : . ' , ; getFutureCore() ... done
[08:08:00.669] | : . ' , ; getFutureCapture() ...
[08:08:00.669] | : . ' , ; getFutureCapture() ... done
[08:08:00.669] | : . ' , ; getFutureContext() ...
[08:08:00.669] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.669] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:00.669] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.669] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:00.670] | : . ' , ; getFutureContext() ... done
[08:08:00.670] | : . ' , getFutureData() ... done
[08:08:00.671] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.671] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:00.671] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.671] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.672] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.672] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:00.672] | : . ' , ; ` | New stack:
[08:08:00.672] | : . ' , ; ` | List of 1
[08:08:00.672] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.672] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.672] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:00.672] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.672] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.672] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.672] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.672] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.674] | : . ' , ; ` | Old stack:
[08:08:00.674] | : . ' , ; ` | List of 1
[08:08:00.674] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.674] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.674] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:00.674] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.674] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.674] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.674] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:00.674] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.674] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.674] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.674] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.678] | : . ' , ; ` | Not identical
[08:08:00.678] | : . ' , ; ` | all.equal() for future ...
[08:08:00.678] | : . ' , ; ` | : List of 2
[08:08:00.678] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.678] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.678] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:00.678] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.678] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.678] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.678] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.678] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.678] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.678] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.678] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.678] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.678] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.678] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.678] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.678] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.678] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.683] | : . ' , ; ` | all.equal() for future ... done
[08:08:00.683] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:00.683] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.683] | : . ' , ; ` List of future strategies:
[08:08:00.683] | : . ' , ; ` 1. sequential:
[08:08:00.683] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.683] | : . ' , ; `    - tweaked: FALSE
[08:08:00.683] | : . ' , ; `    - call: plan(sequential)
[08:08:00.684] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.684] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.685] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.685] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.686] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.686] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:00.686] | : . ' , ; ` | : New stack:
[08:08:00.686] | : . ' , ; ` | : List of 1
[08:08:00.686] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.686] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.686] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.686] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.686] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.686] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.686] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.686] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.686] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.686] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.686] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.689] | : . ' , ; ` | : Old stack:
[08:08:00.689] | : . ' , ; ` | : List of 1
[08:08:00.689] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.689] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.689] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.689] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.689] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.689] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.689] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.689] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.689] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.689] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.689] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.692] | : . ' , ; ` | : Identical
[08:08:00.692] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:00.693] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.693] | : . ' , ; ` | List of future strategies:
[08:08:00.693] | : . ' , ; ` | 1. sequential:
[08:08:00.693] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.693] | : . ' , ; ` |    - tweaked: FALSE
[08:08:00.693] | : . ' , ; ` |    - call: plan(sequential)
[08:08:00.693] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.693] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.693] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.694] | : . ' , SequentialFuture started (and completed)
[08:08:00.694] | : . ' , signalConditions() ...
[08:08:00.694] | : . ' , ; include = ‘immediateCondition’
[08:08:00.694] | : . ' , ; exclude = 
[08:08:00.694] | : . ' , ; resignal = FALSE
[08:08:00.694] | : . ' , ; Number of conditions: 6
[08:08:00.694] | : . ' , ;  int 6
[08:08:00.695] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.695] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.695] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.695] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.695] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.695] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.695] | : . ' , signalConditions() ... done
[08:08:00.695] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:00.695] | : . Launching futures ... done
[08:08:00.696] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:00.696] | : Using SequentialFutureBackend ... done
[08:08:00.696] | run() for ‘Future’ (<unnamed-31>) ... done
[08:08:00.696] future(..., label = NULL) ... done
Classes 'listenv', 'environment' <environment: 0x55675b192a48> 
Classes 'listenv', 'environment' <environment: 0x55675baae098> 
 - attr(*, "dim.")= int [1:2] 1 6
 - attr(*, "dimnames.")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
[08:08:00.699] resolved() for listenv ...
[08:08:00.700] | resolved() for matrix ...
[08:08:00.700] | : Number of elements: 6
[08:08:00.700] | : Number of futures: 6
[08:08:00.700] | : resolved() for SequentialFuture (<unnamed-29>) ...
[08:08:00.700] | : . state: ‘finished’
[08:08:00.700] | : . run: TRUE
[08:08:00.700] | : . result: ‘FutureResult’
[08:08:00.700] | : resolved() for SequentialFuture (<unnamed-29>) ... done
[08:08:00.701] | : resolved() for SequentialFuture (<unnamed-30>) ...
[08:08:00.701] | : . state: ‘finished’
[08:08:00.701] | : . run: TRUE
[08:08:00.701] | : . result: ‘FutureResult’
[08:08:00.701] | : resolved() for SequentialFuture (<unnamed-30>) ... done
[08:08:00.701] | : resolved() for SequentialFuture (<unnamed-31>) ...
[08:08:00.701] | : . state: ‘finished’
[08:08:00.701] | : . run: TRUE
[08:08:00.701] | : . result: ‘FutureResult’
[08:08:00.701] | : resolved() for SequentialFuture (<unnamed-31>) ... done
[08:08:00.702] | resolved() for matrix ... done
[08:08:00.702] resolved() for listenv ... done
 logi [1, 1:6] TRUE TRUE TRUE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:00.703] value() for listenv ...
[08:08:00.703] | recursive: 0
[08:08:00.703] | reduce: FALSE
[08:08:00.704] | length: 6
[08:08:00.704] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:00.705] | Number of remaining objects: 6
[08:08:00.705] | checking value #1:
[08:08:00.705] | 'obj' is atomic
[08:08:00.705] | signalConditionsASAP(numeric, pos=1) ...
[08:08:00.705] | : nx: 6
[08:08:00.705] | : relay: TRUE
[08:08:00.705] | : stdout: TRUE
[08:08:00.705] | : signal: TRUE
[08:08:00.705] | : resignal: FALSE
[08:08:00.705] | : force: TRUE
[08:08:00.705] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:00.706] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:00.706] | : until=2
[08:08:00.706] | : relaying element #2
[08:08:00.706] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:00.706] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:00.706] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:00.706] | length: 5 (resolved future 1)
[08:08:00.706] value() for listenv ... done
[08:08:00.706] checking value #2:
[08:08:00.707] 'obj' is SequentialFuture
[08:08:00.707] resolved() for SequentialFuture (<unnamed-29>) ...
[08:08:00.707] | state: ‘finished’
[08:08:00.707] | run: TRUE
[08:08:00.707] | result: ‘FutureResult’
[08:08:00.707] resolved() for SequentialFuture (<unnamed-29>) ... done
[08:08:00.707] SequentialFuture #2
[08:08:00.707] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:00.707] | nx: 6
[08:08:00.707] | relay: TRUE
[08:08:00.707] | stdout: TRUE
[08:08:00.708] | signal: TRUE
[08:08:00.708] | resignal: FALSE
[08:08:00.708] | force: TRUE
[08:08:00.708] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:00.708] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:00.708] | until=2
[08:08:00.708] | relaying element #2
[08:08:00.708] | value() for SequentialFuture (<unnamed-29>) ...
[08:08:00.708] | : signalConditions() ...
[08:08:00.708] | : . include = ‘immediateCondition’
[08:08:00.709] | : . exclude = 
[08:08:00.709] | : . resignal = FALSE
[08:08:00.709] | : . Number of conditions: 6
[08:08:00.709] | : .  int 6
[08:08:00.709] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.709] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.709] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.710] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.710] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.710] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.710] | : signalConditions() ... done
[08:08:00.710] | : relay stdout ...
[08:08:00.710] | : relay stdout ... done
[08:08:00.710] | : check for misuse ...
[08:08:00.710] | : check for misuse ... done
[08:08:00.710] | value() for SequentialFuture (<unnamed-29>) ... done
[08:08:00.711] | signalConditions() ...
[08:08:00.711] | : include = ‘immediateCondition’
[08:08:00.711] | : exclude = 
[08:08:00.711] | : resignal = FALSE
[08:08:00.711] | : Number of conditions: 6
[08:08:00.711] | :  int 6
[08:08:00.711] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.712] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.712] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.712] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.712] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.712] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.712] | signalConditions() ... done
[08:08:00.712] | signalConditions() ...
[08:08:00.712] | : include = ‘condition’
[08:08:00.712] | : exclude = ‘error’, ‘immediateCondition’
[08:08:00.712] | : resignal = TRUE
[08:08:00.713] | : Number of conditions: 6
[08:08:00.713] | :  int 6
[08:08:00.713] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.713] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.592] | : . ' , attachPackages() ...
[08:08:00.713] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.713] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.592] | : . ' , ; packages: [n=1] ‘future’
[08:08:00.714] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.714] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.592] | : . ' , attachPackages() ... done
[08:08:00.714] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.714] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.592] | : . ' , attachPackages() ...
[08:08:00.714] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.714] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.592] | : . ' , ; packages: [n=0] 
[08:08:00.714] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.714] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.592] | : . ' , attachPackages() ... done
[08:08:00.714] | signalConditions() ... done
[08:08:00.715] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.715] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.715] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:00.715] value(<SequentialFuture>, ...) ...
[08:08:00.715] value(<SequentialFuture>, ...) ... done
[08:08:00.715] value() for SequentialFuture (<unnamed-29>) ...
[08:08:00.715] | signalConditions() ...
[08:08:00.715] | : include = ‘immediateCondition’
[08:08:00.715] | : exclude = 
[08:08:00.715] | : resignal = FALSE
[08:08:00.716] | : Number of conditions: 6
[08:08:00.716] | :  int 6
[08:08:00.716] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.716] | : already signaled, skipping
[08:08:00.716] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.716] | : already signaled, skipping
[08:08:00.716] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.717] | : already signaled, skipping
[08:08:00.717] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.717] | : already signaled, skipping
[08:08:00.717] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.717] | : already signaled, skipping
[08:08:00.717] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.717] | : already signaled, skipping
[08:08:00.717] | signalConditions() ... done
[08:08:00.717] | check for misuse ...
[08:08:00.717] | check for misuse ... done
[08:08:00.718] value() for SequentialFuture (<unnamed-29>) ... done
[08:08:00.718] value: <numeric>
[08:08:00.718] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:00.718] | nx: 6
[08:08:00.718] | relay: TRUE
[08:08:00.718] | stdout: TRUE
[08:08:00.718] | signal: TRUE
[08:08:00.718] | resignal: FALSE
[08:08:00.718] | force: TRUE
[08:08:00.718] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.719] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.719] | until=3
[08:08:00.719] | relaying element #3
[08:08:00.719] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.719] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.719] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:00.719] resolve() for SequentialFuture ...
[08:08:00.719] resolve() for SequentialFuture ... done
[08:08:00.719] length: 4 (resolved future 2)

[08:08:00.720] checking value #3:
[08:08:00.720] 'obj' is SequentialFuture
[08:08:00.720] resolved() for SequentialFuture (<unnamed-30>) ...
[08:08:00.720] | state: ‘finished’
[08:08:00.720] | run: TRUE
[08:08:00.720] | result: ‘FutureResult’
[08:08:00.720] resolved() for SequentialFuture (<unnamed-30>) ... done
[08:08:00.720] SequentialFuture #3
[08:08:00.720] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:00.720] | nx: 6
[08:08:00.720] | relay: TRUE
[08:08:00.721] | stdout: TRUE
[08:08:00.721] | signal: TRUE
[08:08:00.721] | resignal: FALSE
[08:08:00.721] | force: TRUE
[08:08:00.721] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.721] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.721] | until=3
[08:08:00.721] | relaying element #3
[08:08:00.721] | value() for SequentialFuture (<unnamed-30>) ...
[08:08:00.721] | : signalConditions() ...
[08:08:00.722] | : . include = ‘immediateCondition’
[08:08:00.722] | : . exclude = 
[08:08:00.722] | : . resignal = FALSE
[08:08:00.722] | : . Number of conditions: 6
[08:08:00.722] | : .  int 6
[08:08:00.722] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.722] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.723] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.723] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.723] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.723] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.723] | : signalConditions() ... done
[08:08:00.723] | : relay stdout ...
[08:08:00.723] | : relay stdout ... done
[08:08:00.723] | : check for misuse ...
[08:08:00.723] | : check for misuse ... done
[08:08:00.724] | value() for SequentialFuture (<unnamed-30>) ... done
[08:08:00.724] | signalConditions() ...
[08:08:00.724] | : include = ‘immediateCondition’
[08:08:00.724] | : exclude = 
[08:08:00.724] | : resignal = FALSE
[08:08:00.724] | : Number of conditions: 6
[08:08:00.724] | :  int 6
[08:08:00.725] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.725] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.725] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.725] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.725] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.725] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.725] | signalConditions() ... done
[08:08:00.725] | signalConditions() ...
[08:08:00.725] | : include = ‘condition’
[08:08:00.726] | : exclude = ‘error’, ‘immediateCondition’
[08:08:00.726] | : resignal = TRUE
[08:08:00.726] | : Number of conditions: 6
[08:08:00.726] | :  int 6
[08:08:00.726] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.726] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.626] | : . ' , attachPackages() ...
[08:08:00.726] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.727] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.626] | : . ' , ; packages: [n=1] ‘future’
[08:08:00.727] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.727] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.626] | : . ' , attachPackages() ... done
[08:08:00.727] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.727] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.626] | : . ' , attachPackages() ...
[08:08:00.727] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.727] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.626] | : . ' , ; packages: [n=0] 
[08:08:00.727] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.728] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.626] | : . ' , attachPackages() ... done
[08:08:00.728] | signalConditions() ... done
[08:08:00.728] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.728] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.728] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:00.728] value(<SequentialFuture>, ...) ...
[08:08:00.728] value(<SequentialFuture>, ...) ... done
[08:08:00.728] value() for SequentialFuture (<unnamed-30>) ...
[08:08:00.728] | signalConditions() ...
[08:08:00.728] | : include = ‘immediateCondition’
[08:08:00.729] | : exclude = 
[08:08:00.729] | : resignal = FALSE
[08:08:00.729] | : Number of conditions: 6
[08:08:00.729] | :  int 6
[08:08:00.729] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.729] | : already signaled, skipping
[08:08:00.729] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.730] | : already signaled, skipping
[08:08:00.730] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.730] | : already signaled, skipping
[08:08:00.730] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.730] | : already signaled, skipping
[08:08:00.730] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.730] | : already signaled, skipping
[08:08:00.730] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.730] | : already signaled, skipping
[08:08:00.730] | signalConditions() ... done
[08:08:00.731] | check for misuse ...
[08:08:00.731] | check for misuse ... done
[08:08:00.731] value() for SequentialFuture (<unnamed-30>) ... done
[08:08:00.731] value: <NULL>
[08:08:00.731] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:00.731] | nx: 6
[08:08:00.731] | relay: TRUE
[08:08:00.731] | stdout: TRUE
[08:08:00.731] | signal: TRUE
[08:08:00.731] | resignal: FALSE
[08:08:00.732] | force: TRUE
[08:08:00.732] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.732] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.732] | until=4
[08:08:00.732] | relaying element #4
[08:08:00.732] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.732] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.732] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:00.732] resolve() for SequentialFuture ...
[08:08:00.732] resolve() for SequentialFuture ... done
[08:08:00.733] length: 3 (resolved future 3)

[08:08:00.733] checking value #4:
[08:08:00.733] 'obj' is SequentialFuture
[08:08:00.733] resolved() for SequentialFuture (<unnamed-31>) ...
[08:08:00.733] | state: ‘finished’
[08:08:00.733] | run: TRUE
[08:08:00.733] | result: ‘FutureResult’
[08:08:00.733] resolved() for SequentialFuture (<unnamed-31>) ... done
[08:08:00.733] SequentialFuture #4
[08:08:00.734] signalConditionsASAP(SequentialFuture, pos=4) ...
[08:08:00.734] | nx: 6
[08:08:00.734] | relay: TRUE
[08:08:00.734] | stdout: TRUE
[08:08:00.734] | signal: TRUE
[08:08:00.734] | resignal: FALSE
[08:08:00.734] | force: TRUE
[08:08:00.734] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.734] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.734] | until=4
[08:08:00.735] | relaying element #4
[08:08:00.735] | value() for SequentialFuture (<unnamed-31>) ...
[08:08:00.735] | : signalConditions() ...
[08:08:00.735] | : . include = ‘immediateCondition’
[08:08:00.735] | : . exclude = 
[08:08:00.735] | : . resignal = FALSE
[08:08:00.735] | : . Number of conditions: 6
[08:08:00.735] | : .  int 6
[08:08:00.736] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.736] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.736] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.736] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.736] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.736] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.736] | : signalConditions() ... done
[08:08:00.736] | : relay stdout ...
[08:08:00.737] | : relay stdout ... done
[08:08:00.737] | : check for misuse ...
[08:08:00.737] | : check for misuse ... done
[08:08:00.737] | value() for SequentialFuture (<unnamed-31>) ... done
[08:08:00.737] | signalConditions() ...
[08:08:00.737] | : include = ‘immediateCondition’
[08:08:00.737] | : exclude = 
[08:08:00.737] | : resignal = FALSE
[08:08:00.737] | : Number of conditions: 6
[08:08:00.738] | :  int 6
[08:08:00.738] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.738] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.738] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.738] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.738] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.739] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.739] | signalConditions() ... done
[08:08:00.739] | signalConditions() ...
[08:08:00.739] | : include = ‘condition’
[08:08:00.739] | : exclude = ‘error’, ‘immediateCondition’
[08:08:00.739] | : resignal = TRUE
[08:08:00.739] | : Number of conditions: 6
[08:08:00.739] | :  int 6
[08:08:00.740] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.740] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.670] | : . ' , attachPackages() ...
[08:08:00.741] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.742] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.670] | : . ' , ; packages: [n=1] ‘future’
[08:08:00.742] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.742] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.670] | : . ' , attachPackages() ... done
[08:08:00.742] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.742] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.670] | : . ' , attachPackages() ...
[08:08:00.742] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.742] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.671] | : . ' , ; packages: [n=0] 
[08:08:00.742] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.743] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.671] | : . ' , attachPackages() ... done
[08:08:00.743] | signalConditions() ... done
[08:08:00.743] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.743] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.743] signalConditionsASAP(SequentialFuture, pos=4) ... done
[08:08:00.743] value(<SequentialFuture>, ...) ...
[08:08:00.743] value(<SequentialFuture>, ...) ... done
[08:08:00.743] value() for SequentialFuture (<unnamed-31>) ...
[08:08:00.743] | signalConditions() ...
[08:08:00.743] | : include = ‘immediateCondition’
[08:08:00.744] | : exclude = 
[08:08:00.744] | : resignal = FALSE
[08:08:00.744] | : Number of conditions: 6
[08:08:00.744] | :  int 6
[08:08:00.744] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.744] | : already signaled, skipping
[08:08:00.744] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.745] | : already signaled, skipping
[08:08:00.745] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.745] | : already signaled, skipping
[08:08:00.745] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.745] | : already signaled, skipping
[08:08:00.745] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.745] | : already signaled, skipping
[08:08:00.745] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.745] | : already signaled, skipping
[08:08:00.745] | signalConditions() ... done
[08:08:00.745] | check for misuse ...
[08:08:00.746] | check for misuse ... done
[08:08:00.746] value() for SequentialFuture (<unnamed-31>) ... done
[08:08:00.746] value: <numeric>
[08:08:00.746] signalConditionsASAP(SequentialFuture, pos=4) ...
[08:08:00.746] | nx: 6
[08:08:00.746] | relay: TRUE
[08:08:00.746] | stdout: TRUE
[08:08:00.746] | signal: TRUE
[08:08:00.746] | resignal: FALSE
[08:08:00.746] | force: TRUE
[08:08:00.747] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.747] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.747] | until=5
[08:08:00.747] | relaying element #5
[08:08:00.747] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.747] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.747] signalConditionsASAP(SequentialFuture, pos=4) ... done
[08:08:00.747] resolve() for SequentialFuture ...
[08:08:00.747] resolve() for SequentialFuture ... done
[08:08:00.747] length: 2 (resolved future 4)

[08:08:00.748] checking value #5:
[08:08:00.748] 'obj' is NULL
[08:08:00.748] signalConditionsASAP(NULL, pos=5) ...
[08:08:00.748] | nx: 6
[08:08:00.748] | relay: TRUE
[08:08:00.748] | stdout: TRUE
[08:08:00.748] | signal: TRUE
[08:08:00.748] | resignal: FALSE
[08:08:00.748] | force: TRUE
[08:08:00.748] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.748] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.749] | until=6
[08:08:00.749] | relaying element #6
[08:08:00.749] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:00.749] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.749] signalConditionsASAP(NULL, pos=5) ... done
[08:08:00.749] signalConditionsASAP(NULL, pos=5) ...
[08:08:00.749] | nx: 6
[08:08:00.749] | relay: TRUE
[08:08:00.749] | stdout: TRUE
[08:08:00.749] | signal: TRUE
[08:08:00.749] | resignal: FALSE
[08:08:00.750] | force: TRUE
[08:08:00.750] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:00.750] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.750] | until=6
[08:08:00.750] | relaying element #6
[08:08:00.750] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:00.750] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.750] signalConditionsASAP(NULL, pos=5) ... done
[08:08:00.750] length: 1 (resolved future 5)

[08:08:00.751] checking value #6:
[08:08:00.751] 'obj' is atomic
[08:08:00.751] signalConditionsASAP(numeric, pos=6) ...
[08:08:00.751] | nx: 6
[08:08:00.751] | relay: TRUE
[08:08:00.751] | stdout: TRUE
[08:08:00.751] | signal: TRUE
[08:08:00.751] | resignal: FALSE
[08:08:00.751] | force: TRUE
[08:08:00.751] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:00.751] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.751] | until=6
[08:08:00.752] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:00.752] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.752] signalConditionsASAP(numeric, pos=6) ... done
[08:08:00.752] length: 0 (resolved future 6)

[08:08:00.752] Relaying remaining futures ...
[08:08:00.752] | signalConditionsASAP(NULL, pos=0) ...
[08:08:00.752] | : nx: 6
[08:08:00.752] | : relay: TRUE
[08:08:00.752] | : stdout: TRUE
[08:08:00.753] | : signal: TRUE
[08:08:00.753] | : resignal: FALSE
[08:08:00.753] | : force: TRUE
[08:08:00.753] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:00.753] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:00.753] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:00.753] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.753] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:00.753] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 1 6
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
Dimensions: c(2, 3)
[08:08:00.757] future(..., label = NULL) ...
[08:08:00.757] | lazy: FALSE
[08:08:00.757] | stdout: TRUE
[08:08:00.757] | conditions: [n=1] ‘condition’
[08:08:00.757] | gc: FALSE
[08:08:00.757] | earlySignal: FALSE
[08:08:00.757] | getGlobalsAndPackages() ...
[08:08:00.757] | : Searching for globals ...
[08:08:00.759] | : . globals found: [0] 
[08:08:00.759] | : Searching for globals ... done
[08:08:00.759] | : globals: [0] <none>
[08:08:00.759] | : packages: [0] <none>
[08:08:00.759] | getGlobalsAndPackages() ... done
[08:08:00.759] | run() for ‘Future’ (<unnamed-32>) ...
[08:08:00.759] | : state: ‘created’
[08:08:00.760] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.760] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.760] | : Using SequentialFutureBackend ...
[08:08:00.760] | : . Number of futures since start: 31 (31 created, 31 launched, 31 finished)
[08:08:00.760] | : . Launching futures ...
[08:08:00.760] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:00.760] | : . ' , getFutureData() ...
[08:08:00.760] | : . ' , ; getFutureCore() ...
[08:08:00.760] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:00.761] | : . ' , ; getFutureCore() ... done
[08:08:00.761] | : . ' , ; getFutureCapture() ...
[08:08:00.761] | : . ' , ; getFutureCapture() ... done
[08:08:00.761] | : . ' , ; getFutureContext() ...
[08:08:00.761] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.761] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:00.761] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.761] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:00.761] | : . ' , ; getFutureContext() ... done
[08:08:00.762] | : . ' , getFutureData() ... done
[08:08:00.763] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.763] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:00.763] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.763] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.763] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.764] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:00.764] | : . ' , ; ` | New stack:
[08:08:00.764] | : . ' , ; ` | List of 1
[08:08:00.764] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.764] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.764] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:00.764] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.764] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.764] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.764] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.764] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.766] | : . ' , ; ` | Old stack:
[08:08:00.766] | : . ' , ; ` | List of 1
[08:08:00.766] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.766] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.766] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:00.766] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.766] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.766] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.766] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:00.766] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.766] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.766] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.766] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.769] | : . ' , ; ` | Not identical
[08:08:00.770] | : . ' , ; ` | all.equal() for future ...
[08:08:00.770] | : . ' , ; ` | : List of 2
[08:08:00.770] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.770] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.770] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:00.770] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.770] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.770] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.770] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.770] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.770] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.770] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.770] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.770] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.770] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.770] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.770] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.770] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.770] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.775] | : . ' , ; ` | all.equal() for future ... done
[08:08:00.775] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:00.775] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.775] | : . ' , ; ` List of future strategies:
[08:08:00.775] | : . ' , ; ` 1. sequential:
[08:08:00.775] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.775] | : . ' , ; `    - tweaked: FALSE
[08:08:00.775] | : . ' , ; `    - call: plan(sequential)
[08:08:00.776] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.776] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.777] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.777] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.777] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.778] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:00.778] | : . ' , ; ` | : New stack:
[08:08:00.778] | : . ' , ; ` | : List of 1
[08:08:00.778] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.778] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.778] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.778] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.778] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.778] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.778] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.778] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.778] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.778] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.778] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.781] | : . ' , ; ` | : Old stack:
[08:08:00.781] | : . ' , ; ` | : List of 1
[08:08:00.781] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.781] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.781] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.781] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.781] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.781] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.781] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.781] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.781] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.781] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.781] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.784] | : . ' , ; ` | : Identical
[08:08:00.784] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:00.785] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.785] | : . ' , ; ` | List of future strategies:
[08:08:00.785] | : . ' , ; ` | 1. sequential:
[08:08:00.785] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.785] | : . ' , ; ` |    - tweaked: FALSE
[08:08:00.785] | : . ' , ; ` |    - call: plan(sequential)
[08:08:00.785] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.785] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.785] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.786] | : . ' , SequentialFuture started (and completed)
[08:08:00.786] | : . ' , signalConditions() ...
[08:08:00.786] | : . ' , ; include = ‘immediateCondition’
[08:08:00.786] | : . ' , ; exclude = 
[08:08:00.786] | : . ' , ; resignal = FALSE
[08:08:00.786] | : . ' , ; Number of conditions: 6
[08:08:00.786] | : . ' , ;  int 6
[08:08:00.787] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.787] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.787] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.787] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.787] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.787] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.787] | : . ' , signalConditions() ... done
[08:08:00.787] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:00.787] | : . Launching futures ... done
[08:08:00.788] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:00.788] | : Using SequentialFutureBackend ... done
[08:08:00.788] | run() for ‘Future’ (<unnamed-32>) ... done
[08:08:00.788] future(..., label = NULL) ... done
[08:08:00.788] future(..., label = NULL) ...
[08:08:00.788] | lazy: FALSE
[08:08:00.788] | stdout: TRUE
[08:08:00.788] | conditions: [n=1] ‘condition’
[08:08:00.788] | gc: FALSE
[08:08:00.789] | earlySignal: FALSE
[08:08:00.789] | getGlobalsAndPackages() ...
[08:08:00.789] | : Searching for globals ...
[08:08:00.790] | : . globals found: [0] 
[08:08:00.790] | : Searching for globals ... done
[08:08:00.790] | : globals: [0] <none>
[08:08:00.790] | : packages: [0] <none>
[08:08:00.790] | getGlobalsAndPackages() ... done
[08:08:00.790] | run() for ‘Future’ (<unnamed-33>) ...
[08:08:00.791] | : state: ‘created’
[08:08:00.791] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.791] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.791] | : Using SequentialFutureBackend ...
[08:08:00.791] | : . Number of futures since start: 32 (32 created, 32 launched, 32 finished)
[08:08:00.791] | : . Launching futures ...
[08:08:00.791] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:00.791] | : . ' , getFutureData() ...
[08:08:00.791] | : . ' , ; getFutureCore() ...
[08:08:00.792] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:00.792] | : . ' , ; getFutureCore() ... done
[08:08:00.792] | : . ' , ; getFutureCapture() ...
[08:08:00.792] | : . ' , ; getFutureCapture() ... done
[08:08:00.792] | : . ' , ; getFutureContext() ...
[08:08:00.792] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.792] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:00.792] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.792] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:00.793] | : . ' , ; getFutureContext() ... done
[08:08:00.793] | : . ' , getFutureData() ... done
[08:08:00.794] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.794] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:00.794] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.794] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.795] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.795] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:00.795] | : . ' , ; ` | New stack:
[08:08:00.795] | : . ' , ; ` | List of 1
[08:08:00.795] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.795] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.795] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:00.795] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.795] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.795] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.795] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.795] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.797] | : . ' , ; ` | Old stack:
[08:08:00.798] | : . ' , ; ` | List of 1
[08:08:00.798] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.798] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.798] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:00.798] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.798] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.798] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.798] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:00.798] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.798] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.798] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.798] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.801] | : . ' , ; ` | Not identical
[08:08:00.801] | : . ' , ; ` | all.equal() for future ...
[08:08:00.801] | : . ' , ; ` | : List of 2
[08:08:00.801] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.801] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.801] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:00.801] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.801] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.801] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.801] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.801] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.801] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.801] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.801] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.801] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.801] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.801] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.801] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.801] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.801] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.806] | : . ' , ; ` | all.equal() for future ... done
[08:08:00.806] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:00.806] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.806] | : . ' , ; ` List of future strategies:
[08:08:00.806] | : . ' , ; ` 1. sequential:
[08:08:00.806] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.806] | : . ' , ; `    - tweaked: FALSE
[08:08:00.806] | : . ' , ; `    - call: plan(sequential)
[08:08:00.807] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.807] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.809] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.809] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.809] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.809] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:00.809] | : . ' , ; ` | : New stack:
[08:08:00.809] | : . ' , ; ` | : List of 1
[08:08:00.809] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.809] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.809] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.809] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.809] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.809] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.809] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.809] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.809] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.809] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.809] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.814] | : . ' , ; ` | : Old stack:
[08:08:00.814] | : . ' , ; ` | : List of 1
[08:08:00.814] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.814] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.814] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.814] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.814] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.814] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.814] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.814] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.814] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.814] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.814] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.817] | : . ' , ; ` | : Identical
[08:08:00.817] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:00.817] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.817] | : . ' , ; ` | List of future strategies:
[08:08:00.817] | : . ' , ; ` | 1. sequential:
[08:08:00.817] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.817] | : . ' , ; ` |    - tweaked: FALSE
[08:08:00.817] | : . ' , ; ` |    - call: plan(sequential)
[08:08:00.818] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.818] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.818] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.818] | : . ' , SequentialFuture started (and completed)
[08:08:00.818] | : . ' , signalConditions() ...
[08:08:00.819] | : . ' , ; include = ‘immediateCondition’
[08:08:00.819] | : . ' , ; exclude = 
[08:08:00.819] | : . ' , ; resignal = FALSE
[08:08:00.819] | : . ' , ; Number of conditions: 6
[08:08:00.819] | : . ' , ;  int 6
[08:08:00.819] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.819] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.820] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.820] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.820] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.820] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.820] | : . ' , signalConditions() ... done
[08:08:00.820] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:00.820] | : . Launching futures ... done
[08:08:00.820] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:00.820] | : Using SequentialFutureBackend ... done
[08:08:00.820] | run() for ‘Future’ (<unnamed-33>) ... done
[08:08:00.821] future(..., label = NULL) ... done
[08:08:00.821] future(..., label = NULL) ...
[08:08:00.821] | lazy: FALSE
[08:08:00.821] | stdout: TRUE
[08:08:00.821] | conditions: [n=1] ‘condition’
[08:08:00.821] | gc: FALSE
[08:08:00.821] | earlySignal: FALSE
[08:08:00.822] | getGlobalsAndPackages() ...
[08:08:00.822] | : Searching for globals ...
[08:08:00.824] | : . globals found: [1] ‘{’
[08:08:00.825] | : Searching for globals ... done
[08:08:00.825] | : Resolving globals: FALSE
[08:08:00.825] | : Search for packages associated with the globals ...
[08:08:00.825] | : . Packages associated with globals: [1] ‘base’
[08:08:00.825] | : . Packages: [1] ‘base’
[08:08:00.825] | : Search for packages associated with the globals ... done
[08:08:00.825] | : Packages after dropping 'base': [0] 
[08:08:00.826] | : globals: [0] 
[08:08:00.826] | : packages: [0] 
[08:08:00.826] | getGlobalsAndPackages() ... done
[08:08:00.826] | run() for ‘Future’ (<unnamed-34>) ...
[08:08:00.826] | : state: ‘created’
[08:08:00.826] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.826] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.826] | : Using SequentialFutureBackend ...
[08:08:00.827] | : . Number of futures since start: 33 (33 created, 33 launched, 33 finished)
[08:08:00.827] | : . Launching futures ...
[08:08:00.827] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:00.827] | : . ' , getFutureData() ...
[08:08:00.827] | : . ' , ; getFutureCore() ...
[08:08:00.827] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:00.827] | : . ' , ; getFutureCore() ... done
[08:08:00.827] | : . ' , ; getFutureCapture() ...
[08:08:00.827] | : . ' , ; getFutureCapture() ... done
[08:08:00.828] | : . ' , ; getFutureContext() ...
[08:08:00.828] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.828] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:00.828] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.828] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:00.828] | : . ' , ; getFutureContext() ... done
[08:08:00.828] | : . ' , getFutureData() ... done
[08:08:00.829] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.830] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:00.830] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.830] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.830] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.830] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:00.830] | : . ' , ; ` | New stack:
[08:08:00.830] | : . ' , ; ` | List of 1
[08:08:00.830] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.830] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.830] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:00.830] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.830] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.830] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.830] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.830] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.833] | : . ' , ; ` | Old stack:
[08:08:00.833] | : . ' , ; ` | List of 1
[08:08:00.833] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.833] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.833] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:00.833] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.833] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.833] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.833] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:00.833] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.833] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.833] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.833] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.836] | : . ' , ; ` | Not identical
[08:08:00.836] | : . ' , ; ` | all.equal() for future ...
[08:08:00.836] | : . ' , ; ` | : List of 2
[08:08:00.836] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.836] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.836] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:00.836] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.836] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.836] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.836] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.836] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.836] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.836] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.836] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.836] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.836] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.836] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.836] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.836] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.836] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.842] | : . ' , ; ` | all.equal() for future ... done
[08:08:00.842] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:00.842] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.842] | : . ' , ; ` List of future strategies:
[08:08:00.842] | : . ' , ; ` 1. sequential:
[08:08:00.842] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.842] | : . ' , ; `    - tweaked: FALSE
[08:08:00.842] | : . ' , ; `    - call: plan(sequential)
[08:08:00.842] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.842] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.844] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.844] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.844] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.844] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:00.844] | : . ' , ; ` | : New stack:
[08:08:00.845] | : . ' , ; ` | : List of 1
[08:08:00.845] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.845] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.845] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.845] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.845] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.845] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.845] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.845] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.845] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.845] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.845] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.848] | : . ' , ; ` | : Old stack:
[08:08:00.848] | : . ' , ; ` | : List of 1
[08:08:00.848] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.848] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.848] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.848] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.848] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.848] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.848] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.848] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.848] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.848] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.848] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.851] | : . ' , ; ` | : Identical
[08:08:00.851] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:00.851] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.851] | : . ' , ; ` | List of future strategies:
[08:08:00.851] | : . ' , ; ` | 1. sequential:
[08:08:00.851] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.851] | : . ' , ; ` |    - tweaked: FALSE
[08:08:00.851] | : . ' , ; ` |    - call: plan(sequential)
[08:08:00.852] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.852] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.852] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.852] | : . ' , SequentialFuture started (and completed)
[08:08:00.852] | : . ' , signalConditions() ...
[08:08:00.852] | : . ' , ; include = ‘immediateCondition’
[08:08:00.853] | : . ' , ; exclude = 
[08:08:00.853] | : . ' , ; resignal = FALSE
[08:08:00.853] | : . ' , ; Number of conditions: 6
[08:08:00.853] | : . ' , ;  int 6
[08:08:00.853] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.853] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.853] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.854] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.854] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.854] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.854] | : . ' , signalConditions() ... done
[08:08:00.854] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:00.854] | : . Launching futures ... done
[08:08:00.854] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:00.854] | : Using SequentialFutureBackend ... done
[08:08:00.854] | run() for ‘Future’ (<unnamed-34>) ... done
[08:08:00.855] future(..., label = NULL) ... done
Classes 'listenv', 'environment' <environment: 0x556759f2f9e8> 
Classes 'listenv', 'environment' <environment: 0x55675c0eac88> 
 - attr(*, "dim.")= int [1:2] 2 3
 - attr(*, "dimnames.")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
[08:08:00.857] resolved() for listenv ...
[08:08:00.858] | resolved() for matrix ...
[08:08:00.858] | : Number of elements: 6
[08:08:00.858] | : Number of futures: 6
[08:08:00.858] | : resolved() for SequentialFuture (<unnamed-32>) ...
[08:08:00.859] | : . state: ‘finished’
[08:08:00.859] | : . run: TRUE
[08:08:00.859] | : . result: ‘FutureResult’
[08:08:00.859] | : resolved() for SequentialFuture (<unnamed-32>) ... done
[08:08:00.859] | : resolved() for SequentialFuture (<unnamed-33>) ...
[08:08:00.859] | : . state: ‘finished’
[08:08:00.859] | : . run: TRUE
[08:08:00.859] | : . result: ‘FutureResult’
[08:08:00.859] | : resolved() for SequentialFuture (<unnamed-33>) ... done
[08:08:00.859] | : resolved() for SequentialFuture (<unnamed-34>) ...
[08:08:00.860] | : . state: ‘finished’
[08:08:00.860] | : . run: TRUE
[08:08:00.860] | : . result: ‘FutureResult’
[08:08:00.860] | : resolved() for SequentialFuture (<unnamed-34>) ... done
[08:08:00.860] | resolved() for matrix ... done
[08:08:00.860] resolved() for listenv ... done
 logi [1:2, 1:3] TRUE TRUE TRUE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:00.862] value() for listenv ...
[08:08:00.862] | recursive: 0
[08:08:00.862] | reduce: FALSE
[08:08:00.863] | length: 6
[08:08:00.863] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:00.863] | Number of remaining objects: 6
[08:08:00.863] | checking value #1:
[08:08:00.863] | 'obj' is atomic
[08:08:00.863] | signalConditionsASAP(numeric, pos=1) ...
[08:08:00.863] | : nx: 6
[08:08:00.863] | : relay: TRUE
[08:08:00.864] | : stdout: TRUE
[08:08:00.864] | : signal: TRUE
[08:08:00.864] | : resignal: FALSE
[08:08:00.864] | : force: TRUE
[08:08:00.864] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:00.864] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:00.864] | : until=2
[08:08:00.864] | : relaying element #2
[08:08:00.864] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:00.864] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:00.864] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:00.865] | length: 5 (resolved future 1)
[08:08:00.865] value() for listenv ... done
[08:08:00.865] checking value #2:
[08:08:00.865] 'obj' is SequentialFuture
[08:08:00.865] resolved() for SequentialFuture (<unnamed-32>) ...
[08:08:00.865] | state: ‘finished’
[08:08:00.865] | run: TRUE
[08:08:00.865] | result: ‘FutureResult’
[08:08:00.865] resolved() for SequentialFuture (<unnamed-32>) ... done
[08:08:00.866] SequentialFuture #2
[08:08:00.866] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:00.866] | nx: 6
[08:08:00.866] | relay: TRUE
[08:08:00.866] | stdout: TRUE
[08:08:00.866] | signal: TRUE
[08:08:00.866] | resignal: FALSE
[08:08:00.866] | force: TRUE
[08:08:00.866] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:00.866] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:00.867] | until=2
[08:08:00.867] | relaying element #2
[08:08:00.867] | value() for SequentialFuture (<unnamed-32>) ...
[08:08:00.867] | : signalConditions() ...
[08:08:00.867] | : . include = ‘immediateCondition’
[08:08:00.867] | : . exclude = 
[08:08:00.867] | : . resignal = FALSE
[08:08:00.867] | : . Number of conditions: 6
[08:08:00.867] | : .  int 6
[08:08:00.868] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.868] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.868] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.868] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.868] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.868] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.868] | : signalConditions() ... done
[08:08:00.869] | : relay stdout ...
[08:08:00.869] | : relay stdout ... done
[08:08:00.869] | : check for misuse ...
[08:08:00.869] | : check for misuse ... done
[08:08:00.869] | value() for SequentialFuture (<unnamed-32>) ... done
[08:08:00.869] | signalConditions() ...
[08:08:00.869] | : include = ‘immediateCondition’
[08:08:00.869] | : exclude = 
[08:08:00.869] | : resignal = FALSE
[08:08:00.869] | : Number of conditions: 6
[08:08:00.870] | :  int 6
[08:08:00.870] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.870] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.870] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.870] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.870] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.870] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.871] | signalConditions() ... done
[08:08:00.871] | signalConditions() ...
[08:08:00.871] | : include = ‘condition’
[08:08:00.871] | : exclude = ‘error’, ‘immediateCondition’
[08:08:00.871] | : resignal = TRUE
[08:08:00.871] | : Number of conditions: 6
[08:08:00.871] | :  int 6
[08:08:00.872] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.872] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.762] | : . ' , attachPackages() ...
[08:08:00.872] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.872] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.762] | : . ' , ; packages: [n=1] ‘future’
[08:08:00.872] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.872] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.762] | : . ' , attachPackages() ... done
[08:08:00.872] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.872] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.762] | : . ' , attachPackages() ...
[08:08:00.873] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.873] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.762] | : . ' , ; packages: [n=0] 
[08:08:00.873] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.873] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.762] | : . ' , attachPackages() ... done
[08:08:00.873] | signalConditions() ... done
[08:08:00.873] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.873] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.873] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:00.873] value(<SequentialFuture>, ...) ...
[08:08:00.874] value(<SequentialFuture>, ...) ... done
[08:08:00.874] value() for SequentialFuture (<unnamed-32>) ...
[08:08:00.874] | signalConditions() ...
[08:08:00.874] | : include = ‘immediateCondition’
[08:08:00.874] | : exclude = 
[08:08:00.874] | : resignal = FALSE
[08:08:00.874] | : Number of conditions: 6
[08:08:00.874] | :  int 6
[08:08:00.875] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.875] | : already signaled, skipping
[08:08:00.875] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.875] | : already signaled, skipping
[08:08:00.875] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.875] | : already signaled, skipping
[08:08:00.875] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.875] | : already signaled, skipping
[08:08:00.875] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.875] | : already signaled, skipping
[08:08:00.876] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.876] | : already signaled, skipping
[08:08:00.876] | signalConditions() ... done
[08:08:00.876] | check for misuse ...
[08:08:00.876] | check for misuse ... done
[08:08:00.876] value() for SequentialFuture (<unnamed-32>) ... done
[08:08:00.876] value: <numeric>
[08:08:00.876] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:00.876] | nx: 6
[08:08:00.877] | relay: TRUE
[08:08:00.877] | stdout: TRUE
[08:08:00.877] | signal: TRUE
[08:08:00.877] | resignal: FALSE
[08:08:00.877] | force: TRUE
[08:08:00.877] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.877] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.877] | until=3
[08:08:00.877] | relaying element #3
[08:08:00.877] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.877] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.878] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:00.878] resolve() for SequentialFuture ...
[08:08:00.878] resolve() for SequentialFuture ... done
[08:08:00.878] length: 4 (resolved future 2)

[08:08:00.878] checking value #3:
[08:08:00.878] 'obj' is SequentialFuture
[08:08:00.878] resolved() for SequentialFuture (<unnamed-33>) ...
[08:08:00.878] | state: ‘finished’
[08:08:00.878] | run: TRUE
[08:08:00.879] | result: ‘FutureResult’
[08:08:00.879] resolved() for SequentialFuture (<unnamed-33>) ... done
[08:08:00.879] SequentialFuture #3
[08:08:00.879] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:00.879] | nx: 6
[08:08:00.879] | relay: TRUE
[08:08:00.879] | stdout: TRUE
[08:08:00.879] | signal: TRUE
[08:08:00.879] | resignal: FALSE
[08:08:00.879] | force: TRUE
[08:08:00.879] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.880] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:00.880] | until=3
[08:08:00.880] | relaying element #3
[08:08:00.880] | value() for SequentialFuture (<unnamed-33>) ...
[08:08:00.880] | : signalConditions() ...
[08:08:00.880] | : . include = ‘immediateCondition’
[08:08:00.880] | : . exclude = 
[08:08:00.880] | : . resignal = FALSE
[08:08:00.880] | : . Number of conditions: 6
[08:08:00.880] | : .  int 6
[08:08:00.881] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.881] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.881] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.881] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.881] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.881] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.881] | : signalConditions() ... done
[08:08:00.882] | : relay stdout ...
[08:08:00.882] | : relay stdout ... done
[08:08:00.882] | : check for misuse ...
[08:08:00.882] | : check for misuse ... done
[08:08:00.882] | value() for SequentialFuture (<unnamed-33>) ... done
[08:08:00.882] | signalConditions() ...
[08:08:00.882] | : include = ‘immediateCondition’
[08:08:00.882] | : exclude = 
[08:08:00.882] | : resignal = FALSE
[08:08:00.883] | : Number of conditions: 6
[08:08:00.883] | :  int 6
[08:08:00.883] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.883] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.883] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.883] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.883] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.884] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.884] | signalConditions() ... done
[08:08:00.884] | signalConditions() ...
[08:08:00.884] | : include = ‘condition’
[08:08:00.884] | : exclude = ‘error’, ‘immediateCondition’
[08:08:00.884] | : resignal = TRUE
[08:08:00.886] | : Number of conditions: 6
[08:08:00.886] | :  int 6
[08:08:00.887] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.887] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.793] | : . ' , attachPackages() ...
[08:08:00.887] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.887] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.793] | : . ' , ; packages: [n=1] ‘future’
[08:08:00.887] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.887] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.793] | : . ' , attachPackages() ... done
[08:08:00.887] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.887] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.793] | : . ' , attachPackages() ...
[08:08:00.887] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.888] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.793] | : . ' , ; packages: [n=0] 
[08:08:00.888] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.888] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.794] | : . ' , attachPackages() ... done
[08:08:00.888] | signalConditions() ... done
[08:08:00.888] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.888] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.888] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:00.888] value(<SequentialFuture>, ...) ...
[08:08:00.888] value(<SequentialFuture>, ...) ... done
[08:08:00.889] value() for SequentialFuture (<unnamed-33>) ...
[08:08:00.889] | signalConditions() ...
[08:08:00.889] | : include = ‘immediateCondition’
[08:08:00.889] | : exclude = 
[08:08:00.889] | : resignal = FALSE
[08:08:00.889] | : Number of conditions: 6
[08:08:00.889] | :  int 6
[08:08:00.889] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.890] | : already signaled, skipping
[08:08:00.890] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.890] | : already signaled, skipping
[08:08:00.890] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.890] | : already signaled, skipping
[08:08:00.890] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.890] | : already signaled, skipping
[08:08:00.890] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.890] | : already signaled, skipping
[08:08:00.890] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.891] | : already signaled, skipping
[08:08:00.891] | signalConditions() ... done
[08:08:00.891] | check for misuse ...
[08:08:00.891] | check for misuse ... done
[08:08:00.891] value() for SequentialFuture (<unnamed-33>) ... done
[08:08:00.891] value: <NULL>
[08:08:00.891] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:00.891] | nx: 6
[08:08:00.891] | relay: TRUE
[08:08:00.891] | stdout: TRUE
[08:08:00.892] | signal: TRUE
[08:08:00.892] | resignal: FALSE
[08:08:00.892] | force: TRUE
[08:08:00.892] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.892] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.892] | until=4
[08:08:00.892] | relaying element #4
[08:08:00.892] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.892] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.892] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:00.892] resolve() for SequentialFuture ...
[08:08:00.893] resolve() for SequentialFuture ... done
[08:08:00.893] length: 3 (resolved future 3)

[08:08:00.893] checking value #4:
[08:08:00.893] 'obj' is SequentialFuture
[08:08:00.893] resolved() for SequentialFuture (<unnamed-34>) ...
[08:08:00.893] | state: ‘finished’
[08:08:00.893] | run: TRUE
[08:08:00.893] | result: ‘FutureResult’
[08:08:00.893] resolved() for SequentialFuture (<unnamed-34>) ... done
[08:08:00.894] SequentialFuture #4
[08:08:00.894] signalConditionsASAP(SequentialFuture, pos=4) ...
[08:08:00.894] | nx: 6
[08:08:00.894] | relay: TRUE
[08:08:00.894] | stdout: TRUE
[08:08:00.894] | signal: TRUE
[08:08:00.894] | resignal: FALSE
[08:08:00.894] | force: TRUE
[08:08:00.894] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.894] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:00.894] | until=4
[08:08:00.895] | relaying element #4
[08:08:00.895] | value() for SequentialFuture (<unnamed-34>) ...
[08:08:00.895] | : signalConditions() ...
[08:08:00.895] | : . include = ‘immediateCondition’
[08:08:00.895] | : . exclude = 
[08:08:00.895] | : . resignal = FALSE
[08:08:00.895] | : . Number of conditions: 6
[08:08:00.895] | : .  int 6
[08:08:00.896] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.896] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.896] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.896] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.896] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.896] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.896] | : signalConditions() ... done
[08:08:00.896] | : relay stdout ...
[08:08:00.896] | : relay stdout ... done
[08:08:00.897] | : check for misuse ...
[08:08:00.897] | : check for misuse ... done
[08:08:00.897] | value() for SequentialFuture (<unnamed-34>) ... done
[08:08:00.897] | signalConditions() ...
[08:08:00.897] | : include = ‘immediateCondition’
[08:08:00.897] | : exclude = 
[08:08:00.897] | : resignal = FALSE
[08:08:00.897] | : Number of conditions: 6
[08:08:00.897] | :  int 6
[08:08:00.898] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.898] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.898] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.898] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.898] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.898] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.898] | signalConditions() ... done
[08:08:00.898] | signalConditions() ...
[08:08:00.899] | : include = ‘condition’
[08:08:00.899] | : exclude = ‘error’, ‘immediateCondition’
[08:08:00.899] | : resignal = TRUE
[08:08:00.899] | : Number of conditions: 6
[08:08:00.899] | :  int 6
[08:08:00.899] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.899] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.828] | : . ' , attachPackages() ...
[08:08:00.900] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.900] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.829] | : . ' , ; packages: [n=1] ‘future’
[08:08:00.900] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.900] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.829] | : . ' , attachPackages() ... done
[08:08:00.900] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.900] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.829] | : . ' , attachPackages() ...
[08:08:00.900] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.900] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.829] | : . ' , ; packages: [n=0] 
[08:08:00.901] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.901] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.829] | : . ' , attachPackages() ... done
[08:08:00.901] | signalConditions() ... done
[08:08:00.901] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.901] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.901] signalConditionsASAP(SequentialFuture, pos=4) ... done
[08:08:00.901] value(<SequentialFuture>, ...) ...
[08:08:00.901] value(<SequentialFuture>, ...) ... done
[08:08:00.901] value() for SequentialFuture (<unnamed-34>) ...
[08:08:00.901] | signalConditions() ...
[08:08:00.902] | : include = ‘immediateCondition’
[08:08:00.902] | : exclude = 
[08:08:00.902] | : resignal = FALSE
[08:08:00.902] | : Number of conditions: 6
[08:08:00.902] | :  int 6
[08:08:00.902] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.902] | : already signaled, skipping
[08:08:00.902] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.903] | : already signaled, skipping
[08:08:00.903] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.903] | : already signaled, skipping
[08:08:00.903] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.903] | : already signaled, skipping
[08:08:00.903] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.903] | : already signaled, skipping
[08:08:00.903] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.903] | : already signaled, skipping
[08:08:00.903] | signalConditions() ... done
[08:08:00.904] | check for misuse ...
[08:08:00.904] | check for misuse ... done
[08:08:00.904] value() for SequentialFuture (<unnamed-34>) ... done
[08:08:00.904] value: <numeric>
[08:08:00.904] signalConditionsASAP(SequentialFuture, pos=4) ...
[08:08:00.904] | nx: 6
[08:08:00.904] | relay: TRUE
[08:08:00.904] | stdout: TRUE
[08:08:00.904] | signal: TRUE
[08:08:00.904] | resignal: FALSE
[08:08:00.905] | force: TRUE
[08:08:00.905] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.905] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.905] | until=5
[08:08:00.905] | relaying element #5
[08:08:00.905] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.905] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.905] signalConditionsASAP(SequentialFuture, pos=4) ... done
[08:08:00.905] resolve() for SequentialFuture ...
[08:08:00.905] resolve() for SequentialFuture ... done
[08:08:00.906] length: 2 (resolved future 4)

[08:08:00.906] checking value #5:
[08:08:00.906] 'obj' is NULL
[08:08:00.906] signalConditionsASAP(NULL, pos=5) ...
[08:08:00.906] | nx: 6
[08:08:00.906] | relay: TRUE
[08:08:00.906] | stdout: TRUE
[08:08:00.906] | signal: TRUE
[08:08:00.906] | resignal: FALSE
[08:08:00.907] | force: TRUE
[08:08:00.907] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.907] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.907] | until=6
[08:08:00.907] | relaying element #6
[08:08:00.907] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:00.907] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.907] signalConditionsASAP(NULL, pos=5) ... done
[08:08:00.907] signalConditionsASAP(NULL, pos=5) ...
[08:08:00.908] | nx: 6
[08:08:00.908] | relay: TRUE
[08:08:00.908] | stdout: TRUE
[08:08:00.908] | signal: TRUE
[08:08:00.908] | resignal: FALSE
[08:08:00.908] | force: TRUE
[08:08:00.908] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:00.908] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.908] | until=6
[08:08:00.908] | relaying element #6
[08:08:00.908] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:00.909] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.909] signalConditionsASAP(NULL, pos=5) ... done
[08:08:00.909] length: 1 (resolved future 5)

[08:08:00.909] checking value #6:
[08:08:00.909] 'obj' is atomic
[08:08:00.909] signalConditionsASAP(numeric, pos=6) ...
[08:08:00.909] | nx: 6
[08:08:00.909] | relay: TRUE
[08:08:00.909] | stdout: TRUE
[08:08:00.909] | signal: TRUE
[08:08:00.910] | resignal: FALSE
[08:08:00.910] | force: TRUE
[08:08:00.910] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:00.910] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.910] | until=6
[08:08:00.910] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:00.910] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.910] signalConditionsASAP(numeric, pos=6) ... done
[08:08:00.910] length: 0 (resolved future 6)

[08:08:00.911] Relaying remaining futures ...
[08:08:00.911] | signalConditionsASAP(NULL, pos=0) ...
[08:08:00.911] | : nx: 6
[08:08:00.911] | : relay: TRUE
[08:08:00.911] | : stdout: TRUE
[08:08:00.911] | : signal: TRUE
[08:08:00.911] | : resignal: FALSE
[08:08:00.911] | : force: TRUE
[08:08:00.911] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:00.911] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:00.912] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:00.912] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:00.912] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:00.912] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 2 3
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
Dimensions: c(2, 3, 1)
[08:08:00.915] future(..., label = NULL) ...
[08:08:00.915] | lazy: FALSE
[08:08:00.915] | stdout: TRUE
[08:08:00.916] | conditions: [n=1] ‘condition’
[08:08:00.916] | gc: FALSE
[08:08:00.916] | earlySignal: FALSE
[08:08:00.916] | getGlobalsAndPackages() ...
[08:08:00.916] | : Searching for globals ...
[08:08:00.917] | : . globals found: [0] 
[08:08:00.917] | : Searching for globals ... done
[08:08:00.917] | : globals: [0] <none>
[08:08:00.917] | : packages: [0] <none>
[08:08:00.917] | getGlobalsAndPackages() ... done
[08:08:00.918] | run() for ‘Future’ (<unnamed-35>) ...
[08:08:00.918] | : state: ‘created’
[08:08:00.918] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.918] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.918] | : Using SequentialFutureBackend ...
[08:08:00.918] | : . Number of futures since start: 34 (34 created, 34 launched, 34 finished)
[08:08:00.918] | : . Launching futures ...
[08:08:00.919] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:00.919] | : . ' , getFutureData() ...
[08:08:00.919] | : . ' , ; getFutureCore() ...
[08:08:00.919] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:00.919] | : . ' , ; getFutureCore() ... done
[08:08:00.919] | : . ' , ; getFutureCapture() ...
[08:08:00.919] | : . ' , ; getFutureCapture() ... done
[08:08:00.919] | : . ' , ; getFutureContext() ...
[08:08:00.919] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.919] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:00.920] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.920] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:00.920] | : . ' , ; getFutureContext() ... done
[08:08:00.920] | : . ' , getFutureData() ... done
[08:08:00.921] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.921] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:00.921] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.922] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.922] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.922] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:00.922] | : . ' , ; ` | New stack:
[08:08:00.922] | : . ' , ; ` | List of 1
[08:08:00.922] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.922] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.922] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:00.922] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.922] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.922] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.922] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.922] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.925] | : . ' , ; ` | Old stack:
[08:08:00.925] | : . ' , ; ` | List of 1
[08:08:00.925] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.925] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.925] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:00.925] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.925] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.925] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.925] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:00.925] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.925] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.925] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.925] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.928] | : . ' , ; ` | Not identical
[08:08:00.928] | : . ' , ; ` | all.equal() for future ...
[08:08:00.928] | : . ' , ; ` | : List of 2
[08:08:00.928] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.928] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.928] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:00.928] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.928] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.928] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.928] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.928] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.928] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.928] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.928] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.928] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.928] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.928] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.928] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.928] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.928] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.933] | : . ' , ; ` | all.equal() for future ... done
[08:08:00.933] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:00.934] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.934] | : . ' , ; ` List of future strategies:
[08:08:00.934] | : . ' , ; ` 1. sequential:
[08:08:00.934] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.934] | : . ' , ; `    - tweaked: FALSE
[08:08:00.934] | : . ' , ; `    - call: plan(sequential)
[08:08:00.934] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.934] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.936] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.936] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.936] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.936] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:00.936] | : . ' , ; ` | : New stack:
[08:08:00.936] | : . ' , ; ` | : List of 1
[08:08:00.936] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.936] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.936] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.936] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.936] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.936] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.936] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.936] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.936] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.936] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.936] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.940] | : . ' , ; ` | : Old stack:
[08:08:00.940] | : . ' , ; ` | : List of 1
[08:08:00.940] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.940] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.940] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.940] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.940] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.940] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.940] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.940] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.940] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.940] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.940] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.943] | : . ' , ; ` | : Identical
[08:08:00.943] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:00.943] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.943] | : . ' , ; ` | List of future strategies:
[08:08:00.943] | : . ' , ; ` | 1. sequential:
[08:08:00.943] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.943] | : . ' , ; ` |    - tweaked: FALSE
[08:08:00.943] | : . ' , ; ` |    - call: plan(sequential)
[08:08:00.944] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.944] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.944] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.944] | : . ' , SequentialFuture started (and completed)
[08:08:00.944] | : . ' , signalConditions() ...
[08:08:00.944] | : . ' , ; include = ‘immediateCondition’
[08:08:00.944] | : . ' , ; exclude = 
[08:08:00.944] | : . ' , ; resignal = FALSE
[08:08:00.945] | : . ' , ; Number of conditions: 6
[08:08:00.945] | : . ' , ;  int 6
[08:08:00.945] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.945] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.945] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.945] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.945] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.946] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.946] | : . ' , signalConditions() ... done
[08:08:00.946] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:00.946] | : . Launching futures ... done
[08:08:00.946] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:00.946] | : Using SequentialFutureBackend ... done
[08:08:00.946] | run() for ‘Future’ (<unnamed-35>) ... done
[08:08:00.946] future(..., label = NULL) ... done
[08:08:00.946] future(..., label = NULL) ...
[08:08:00.947] | lazy: FALSE
[08:08:00.947] | stdout: TRUE
[08:08:00.947] | conditions: [n=1] ‘condition’
[08:08:00.947] | gc: FALSE
[08:08:00.947] | earlySignal: FALSE
[08:08:00.947] | getGlobalsAndPackages() ...
[08:08:00.947] | : Searching for globals ...
[08:08:00.948] | : . globals found: [0] 
[08:08:00.948] | : Searching for globals ... done
[08:08:00.948] | : globals: [0] <none>
[08:08:00.949] | : packages: [0] <none>
[08:08:00.949] | getGlobalsAndPackages() ... done
[08:08:00.949] | run() for ‘Future’ (<unnamed-36>) ...
[08:08:00.949] | : state: ‘created’
[08:08:00.949] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.949] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.949] | : Using SequentialFutureBackend ...
[08:08:00.949] | : . Number of futures since start: 35 (35 created, 35 launched, 35 finished)
[08:08:00.950] | : . Launching futures ...
[08:08:00.950] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:00.950] | : . ' , getFutureData() ...
[08:08:00.950] | : . ' , ; getFutureCore() ...
[08:08:00.950] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:00.950] | : . ' , ; getFutureCore() ... done
[08:08:00.950] | : . ' , ; getFutureCapture() ...
[08:08:00.950] | : . ' , ; getFutureCapture() ... done
[08:08:00.950] | : . ' , ; getFutureContext() ...
[08:08:00.951] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.951] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:00.951] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.951] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:00.951] | : . ' , ; getFutureContext() ... done
[08:08:00.951] | : . ' , getFutureData() ... done
[08:08:00.952] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.953] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:00.953] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.953] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.953] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.953] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:00.953] | : . ' , ; ` | New stack:
[08:08:00.953] | : . ' , ; ` | List of 1
[08:08:00.953] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.953] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.953] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:00.953] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.953] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.953] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.953] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.953] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.956] | : . ' , ; ` | Old stack:
[08:08:00.956] | : . ' , ; ` | List of 1
[08:08:00.956] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.956] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.956] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:00.956] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.956] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.956] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.956] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:00.956] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.956] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.956] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.956] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.961] | : . ' , ; ` | Not identical
[08:08:00.961] | : . ' , ; ` | all.equal() for future ...
[08:08:00.961] | : . ' , ; ` | : List of 2
[08:08:00.961] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.961] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.961] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:00.961] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.961] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.961] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.961] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.961] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.961] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.961] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.961] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.961] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.961] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.961] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.961] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.961] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.961] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.966] | : . ' , ; ` | all.equal() for future ... done
[08:08:00.966] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:00.966] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.966] | : . ' , ; ` List of future strategies:
[08:08:00.966] | : . ' , ; ` 1. sequential:
[08:08:00.966] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.966] | : . ' , ; `    - tweaked: FALSE
[08:08:00.966] | : . ' , ; `    - call: plan(sequential)
[08:08:00.967] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.967] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.968] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.969] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.969] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.969] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:00.969] | : . ' , ; ` | : New stack:
[08:08:00.969] | : . ' , ; ` | : List of 1
[08:08:00.969] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.969] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.969] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.969] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.969] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.969] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.969] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.969] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.969] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.969] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.969] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.972] | : . ' , ; ` | : Old stack:
[08:08:00.972] | : . ' , ; ` | : List of 1
[08:08:00.972] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.972] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.972] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.972] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.972] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.972] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.972] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.972] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.972] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.972] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.972] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.975] | : . ' , ; ` | : Identical
[08:08:00.976] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:00.976] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.976] | : . ' , ; ` | List of future strategies:
[08:08:00.976] | : . ' , ; ` | 1. sequential:
[08:08:00.976] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.976] | : . ' , ; ` |    - tweaked: FALSE
[08:08:00.976] | : . ' , ; ` |    - call: plan(sequential)
[08:08:00.976] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.976] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.976] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.977] | : . ' , SequentialFuture started (and completed)
[08:08:00.977] | : . ' , signalConditions() ...
[08:08:00.977] | : . ' , ; include = ‘immediateCondition’
[08:08:00.977] | : . ' , ; exclude = 
[08:08:00.977] | : . ' , ; resignal = FALSE
[08:08:00.977] | : . ' , ; Number of conditions: 6
[08:08:00.977] | : . ' , ;  int 6
[08:08:00.978] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.978] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.978] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.978] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.978] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.978] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.978] | : . ' , signalConditions() ... done
[08:08:00.979] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:00.979] | : . Launching futures ... done
[08:08:00.979] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:00.979] | : Using SequentialFutureBackend ... done
[08:08:00.979] | run() for ‘Future’ (<unnamed-36>) ... done
[08:08:00.979] future(..., label = NULL) ... done
[08:08:00.979] future(..., label = NULL) ...
[08:08:00.980] | lazy: FALSE
[08:08:00.980] | stdout: TRUE
[08:08:00.980] | conditions: [n=1] ‘condition’
[08:08:00.980] | gc: FALSE
[08:08:00.980] | earlySignal: FALSE
[08:08:00.980] | getGlobalsAndPackages() ...
[08:08:00.980] | : Searching for globals ...
[08:08:00.983] | : . globals found: [1] ‘{’
[08:08:00.983] | : Searching for globals ... done
[08:08:00.983] | : Resolving globals: FALSE
[08:08:00.983] | : Search for packages associated with the globals ...
[08:08:00.984] | : . Packages associated with globals: [1] ‘base’
[08:08:00.984] | : . Packages: [1] ‘base’
[08:08:00.984] | : Search for packages associated with the globals ... done
[08:08:00.984] | : Packages after dropping 'base': [0] 
[08:08:00.984] | : globals: [0] 
[08:08:00.984] | : packages: [0] 
[08:08:00.984] | getGlobalsAndPackages() ... done
[08:08:00.985] | run() for ‘Future’ (<unnamed-37>) ...
[08:08:00.985] | : state: ‘created’
[08:08:00.985] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.985] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.985] | : Using SequentialFutureBackend ...
[08:08:00.985] | : . Number of futures since start: 36 (36 created, 36 launched, 36 finished)
[08:08:00.985] | : . Launching futures ...
[08:08:00.985] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:00.986] | : . ' , getFutureData() ...
[08:08:00.986] | : . ' , ; getFutureCore() ...
[08:08:00.986] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:00.986] | : . ' , ; getFutureCore() ... done
[08:08:00.986] | : . ' , ; getFutureCapture() ...
[08:08:00.986] | : . ' , ; getFutureCapture() ... done
[08:08:00.986] | : . ' , ; getFutureContext() ...
[08:08:00.986] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.986] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:00.987] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.987] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:00.987] | : . ' , ; getFutureContext() ... done
[08:08:00.987] | : . ' , getFutureData() ... done
[08:08:00.988] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.988] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:00.988] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.989] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.989] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.989] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:00.989] | : . ' , ; ` | New stack:
[08:08:00.989] | : . ' , ; ` | List of 1
[08:08:00.989] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.989] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.989] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:00.989] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.989] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.989] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.989] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.989] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.992] | : . ' , ; ` | Old stack:
[08:08:00.992] | : . ' , ; ` | List of 1
[08:08:00.992] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.992] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.992] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:00.992] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.992] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.992] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.992] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:00.992] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.992] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.992] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.992] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.995] | : . ' , ; ` | Not identical
[08:08:00.995] | : . ' , ; ` | all.equal() for future ...
[08:08:00.995] | : . ' , ; ` | : List of 2
[08:08:00.995] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.995] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.995] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:00.995] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.995] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.995] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.995] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.995] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.995] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.995] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.995] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.995] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.995] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.995] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.995] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:00.995] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.995] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.000] | : . ' , ; ` | all.equal() for future ... done
[08:08:01.000] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:01.000] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:01.001] | : . ' , ; ` List of future strategies:
[08:08:01.001] | : . ' , ; ` 1. sequential:
[08:08:01.001] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.001] | : . ' , ; `    - tweaked: FALSE
[08:08:01.001] | : . ' , ; `    - call: plan(sequential)
[08:08:01.001] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.001] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.003] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.003] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.003] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.003] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:01.003] | : . ' , ; ` | : New stack:
[08:08:01.003] | : . ' , ; ` | : List of 1
[08:08:01.003] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.003] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.003] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.003] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.003] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.003] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.003] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:01.003] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:01.003] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.003] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.003] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.006] | : . ' , ; ` | : Old stack:
[08:08:01.006] | : . ' , ; ` | : List of 1
[08:08:01.006] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.006] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.006] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.006] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.006] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.006] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.006] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:01.006] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:01.006] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.006] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.006] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.010] | : . ' , ; ` | : Identical
[08:08:01.010] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:01.010] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:01.010] | : . ' , ; ` | List of future strategies:
[08:08:01.010] | : . ' , ; ` | 1. sequential:
[08:08:01.010] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.010] | : . ' , ; ` |    - tweaked: FALSE
[08:08:01.010] | : . ' , ; ` |    - call: plan(sequential)
[08:08:01.010] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.010] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.011] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.011] | : . ' , SequentialFuture started (and completed)
[08:08:01.011] | : . ' , signalConditions() ...
[08:08:01.011] | : . ' , ; include = ‘immediateCondition’
[08:08:01.011] | : . ' , ; exclude = 
[08:08:01.011] | : . ' , ; resignal = FALSE
[08:08:01.011] | : . ' , ; Number of conditions: 6
[08:08:01.011] | : . ' , ;  int 6
[08:08:01.012] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.012] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.012] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.012] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.012] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.012] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.013] | : . ' , signalConditions() ... done
[08:08:01.013] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:01.013] | : . Launching futures ... done
[08:08:01.013] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:01.013] | : Using SequentialFutureBackend ... done
[08:08:01.013] | run() for ‘Future’ (<unnamed-37>) ... done
[08:08:01.013] future(..., label = NULL) ... done
Classes 'listenv', 'environment' <environment: 0x55675bae31b8> 
Classes 'listenv', 'environment' <environment: 0x55675c7ec398> 
 - attr(*, "dim.")= int [1:3] 2 3 1
 - attr(*, "dimnames.")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
[08:08:01.016] resolved() for listenv ...
[08:08:01.017] | resolved() for array ...
[08:08:01.017] | : Number of elements: 6
[08:08:01.017] | : Number of futures: 6
[08:08:01.017] | : resolved() for SequentialFuture (<unnamed-35>) ...
[08:08:01.017] | : . state: ‘finished’
[08:08:01.017] | : . run: TRUE
[08:08:01.018] | : . result: ‘FutureResult’
[08:08:01.018] | : resolved() for SequentialFuture (<unnamed-35>) ... done
[08:08:01.018] | : resolved() for SequentialFuture (<unnamed-36>) ...
[08:08:01.018] | : . state: ‘finished’
[08:08:01.018] | : . run: TRUE
[08:08:01.018] | : . result: ‘FutureResult’
[08:08:01.018] | : resolved() for SequentialFuture (<unnamed-36>) ... done
[08:08:01.018] | : resolved() for SequentialFuture (<unnamed-37>) ...
[08:08:01.018] | : . state: ‘finished’
[08:08:01.019] | : . run: TRUE
[08:08:01.019] | : . result: ‘FutureResult’
[08:08:01.019] | : resolved() for SequentialFuture (<unnamed-37>) ... done
[08:08:01.019] | resolved() for array ... done
[08:08:01.019] resolved() for listenv ... done
 logi [1:2, 1:3, 1] TRUE TRUE TRUE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:01.021] value() for listenv ...
[08:08:01.021] | recursive: 0
[08:08:01.021] | reduce: FALSE
[08:08:01.022] | length: 6
[08:08:01.022] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:01.022] | Number of remaining objects: 6
[08:08:01.022] | checking value #1:
[08:08:01.022] | 'obj' is atomic
[08:08:01.022] | signalConditionsASAP(numeric, pos=1) ...
[08:08:01.022] | : nx: 6
[08:08:01.023] | : relay: TRUE
[08:08:01.023] | : stdout: TRUE
[08:08:01.023] | : signal: TRUE
[08:08:01.023] | : resignal: FALSE
[08:08:01.023] | : force: TRUE
[08:08:01.023] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.023] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.023] | : until=2
[08:08:01.023] | : relaying element #2
[08:08:01.023] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.024] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.024] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:01.024] | length: 5 (resolved future 1)
[08:08:01.024] value() for listenv ... done
[08:08:01.024] checking value #2:
[08:08:01.024] 'obj' is SequentialFuture
[08:08:01.024] resolved() for SequentialFuture (<unnamed-35>) ...
[08:08:01.024] | state: ‘finished’
[08:08:01.024] | run: TRUE
[08:08:01.025] | result: ‘FutureResult’
[08:08:01.025] resolved() for SequentialFuture (<unnamed-35>) ... done
[08:08:01.025] SequentialFuture #2
[08:08:01.025] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:01.025] | nx: 6
[08:08:01.025] | relay: TRUE
[08:08:01.025] | stdout: TRUE
[08:08:01.025] | signal: TRUE
[08:08:01.025] | resignal: FALSE
[08:08:01.025] | force: TRUE
[08:08:01.025] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.026] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.026] | until=2
[08:08:01.026] | relaying element #2
[08:08:01.026] | value() for SequentialFuture (<unnamed-35>) ...
[08:08:01.026] | : signalConditions() ...
[08:08:01.026] | : . include = ‘immediateCondition’
[08:08:01.026] | : . exclude = 
[08:08:01.026] | : . resignal = FALSE
[08:08:01.026] | : . Number of conditions: 6
[08:08:01.027] | : .  int 6
[08:08:01.027] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.027] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.027] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.027] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.027] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.028] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.028] | : signalConditions() ... done
[08:08:01.028] | : relay stdout ...
[08:08:01.028] | : relay stdout ... done
[08:08:01.028] | : check for misuse ...
[08:08:01.030] | : check for misuse ... done
[08:08:01.030] | value() for SequentialFuture (<unnamed-35>) ... done
[08:08:01.030] | signalConditions() ...
[08:08:01.030] | : include = ‘immediateCondition’
[08:08:01.030] | : exclude = 
[08:08:01.030] | : resignal = FALSE
[08:08:01.030] | : Number of conditions: 6
[08:08:01.030] | :  int 6
[08:08:01.031] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.031] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.031] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.031] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.031] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.031] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.032] | signalConditions() ... done
[08:08:01.032] | signalConditions() ...
[08:08:01.032] | : include = ‘condition’
[08:08:01.032] | : exclude = ‘error’, ‘immediateCondition’
[08:08:01.032] | : resignal = TRUE
[08:08:01.032] | : Number of conditions: 6
[08:08:01.032] | :  int 6
[08:08:01.032] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.033] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.920] | : . ' , attachPackages() ...
[08:08:01.033] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.033] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.920] | : . ' , ; packages: [n=1] ‘future’
[08:08:01.033] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.033] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.920] | : . ' , attachPackages() ... done
[08:08:01.033] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.033] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.921] | : . ' , attachPackages() ...
[08:08:01.033] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.034] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.921] | : . ' , ; packages: [n=0] 
[08:08:01.034] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.034] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.921] | : . ' , attachPackages() ... done
[08:08:01.034] | signalConditions() ... done
[08:08:01.034] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.034] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.034] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:01.034] value(<SequentialFuture>, ...) ...
[08:08:01.034] value(<SequentialFuture>, ...) ... done
[08:08:01.034] value() for SequentialFuture (<unnamed-35>) ...
[08:08:01.035] | signalConditions() ...
[08:08:01.035] | : include = ‘immediateCondition’
[08:08:01.035] | : exclude = 
[08:08:01.035] | : resignal = FALSE
[08:08:01.035] | : Number of conditions: 6
[08:08:01.035] | :  int 6
[08:08:01.035] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.036] | : already signaled, skipping
[08:08:01.036] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.036] | : already signaled, skipping
[08:08:01.036] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.036] | : already signaled, skipping
[08:08:01.036] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.036] | : already signaled, skipping
[08:08:01.036] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.036] | : already signaled, skipping
[08:08:01.036] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.037] | : already signaled, skipping
[08:08:01.037] | signalConditions() ... done
[08:08:01.037] | check for misuse ...
[08:08:01.037] | check for misuse ... done
[08:08:01.037] value() for SequentialFuture (<unnamed-35>) ... done
[08:08:01.037] value: <numeric>
[08:08:01.037] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:01.037] | nx: 6
[08:08:01.037] | relay: TRUE
[08:08:01.038] | stdout: TRUE
[08:08:01.038] | signal: TRUE
[08:08:01.038] | resignal: FALSE
[08:08:01.038] | force: TRUE
[08:08:01.038] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.038] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.038] | until=3
[08:08:01.038] | relaying element #3
[08:08:01.038] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.038] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.039] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:01.039] resolve() for SequentialFuture ...
[08:08:01.039] resolve() for SequentialFuture ... done
[08:08:01.039] length: 4 (resolved future 2)

[08:08:01.039] checking value #3:
[08:08:01.039] 'obj' is SequentialFuture
[08:08:01.039] resolved() for SequentialFuture (<unnamed-36>) ...
[08:08:01.039] | state: ‘finished’
[08:08:01.039] | run: TRUE
[08:08:01.040] | result: ‘FutureResult’
[08:08:01.040] resolved() for SequentialFuture (<unnamed-36>) ... done
[08:08:01.040] SequentialFuture #3
[08:08:01.040] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:01.040] | nx: 6
[08:08:01.040] | relay: TRUE
[08:08:01.040] | stdout: TRUE
[08:08:01.040] | signal: TRUE
[08:08:01.040] | resignal: FALSE
[08:08:01.040] | force: TRUE
[08:08:01.040] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.041] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.041] | until=3
[08:08:01.041] | relaying element #3
[08:08:01.041] | value() for SequentialFuture (<unnamed-36>) ...
[08:08:01.041] | : signalConditions() ...
[08:08:01.041] | : . include = ‘immediateCondition’
[08:08:01.041] | : . exclude = 
[08:08:01.041] | : . resignal = FALSE
[08:08:01.041] | : . Number of conditions: 6
[08:08:01.041] | : .  int 6
[08:08:01.042] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.042] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.042] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.042] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.042] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.042] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.043] | : signalConditions() ... done
[08:08:01.043] | : relay stdout ...
[08:08:01.043] | : relay stdout ... done
[08:08:01.043] | : check for misuse ...
[08:08:01.043] | : check for misuse ... done
[08:08:01.043] | value() for SequentialFuture (<unnamed-36>) ... done
[08:08:01.043] | signalConditions() ...
[08:08:01.043] | : include = ‘immediateCondition’
[08:08:01.043] | : exclude = 
[08:08:01.043] | : resignal = FALSE
[08:08:01.044] | : Number of conditions: 6
[08:08:01.044] | :  int 6
[08:08:01.044] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.044] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.044] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.044] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.044] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.045] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.045] | signalConditions() ... done
[08:08:01.045] | signalConditions() ...
[08:08:01.045] | : include = ‘condition’
[08:08:01.045] | : exclude = ‘error’, ‘immediateCondition’
[08:08:01.045] | : resignal = TRUE
[08:08:01.045] | : Number of conditions: 6
[08:08:01.045] | :  int 6
[08:08:01.046] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.046] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.951] | : . ' , attachPackages() ...
[08:08:01.046] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.046] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.952] | : . ' , ; packages: [n=1] ‘future’
[08:08:01.046] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.046] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.952] | : . ' , attachPackages() ... done
[08:08:01.046] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.047] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.952] | : . ' , attachPackages() ...
[08:08:01.047] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.047] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.952] | : . ' , ; packages: [n=0] 
[08:08:01.047] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.047] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.952] | : . ' , attachPackages() ... done
[08:08:01.047] | signalConditions() ... done
[08:08:01.047] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.047] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.047] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:01.048] value(<SequentialFuture>, ...) ...
[08:08:01.048] value(<SequentialFuture>, ...) ... done
[08:08:01.048] value() for SequentialFuture (<unnamed-36>) ...
[08:08:01.048] | signalConditions() ...
[08:08:01.048] | : include = ‘immediateCondition’
[08:08:01.048] | : exclude = 
[08:08:01.048] | : resignal = FALSE
[08:08:01.048] | : Number of conditions: 6
[08:08:01.048] | :  int 6
[08:08:01.049] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.049] | : already signaled, skipping
[08:08:01.049] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.049] | : already signaled, skipping
[08:08:01.049] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.049] | : already signaled, skipping
[08:08:01.049] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.049] | : already signaled, skipping
[08:08:01.050] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.050] | : already signaled, skipping
[08:08:01.050] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.050] | : already signaled, skipping
[08:08:01.050] | signalConditions() ... done
[08:08:01.050] | check for misuse ...
[08:08:01.050] | check for misuse ... done
[08:08:01.050] value() for SequentialFuture (<unnamed-36>) ... done
[08:08:01.050] value: <NULL>
[08:08:01.051] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:01.051] | nx: 6
[08:08:01.051] | relay: TRUE
[08:08:01.051] | stdout: TRUE
[08:08:01.051] | signal: TRUE
[08:08:01.051] | resignal: FALSE
[08:08:01.051] | force: TRUE
[08:08:01.051] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.051] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.051] | until=4
[08:08:01.051] | relaying element #4
[08:08:01.052] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.052] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.052] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:01.052] resolve() for SequentialFuture ...
[08:08:01.052] resolve() for SequentialFuture ... done
[08:08:01.052] length: 3 (resolved future 3)

[08:08:01.052] checking value #4:
[08:08:01.052] 'obj' is SequentialFuture
[08:08:01.052] resolved() for SequentialFuture (<unnamed-37>) ...
[08:08:01.053] | state: ‘finished’
[08:08:01.053] | run: TRUE
[08:08:01.053] | result: ‘FutureResult’
[08:08:01.053] resolved() for SequentialFuture (<unnamed-37>) ... done
[08:08:01.053] SequentialFuture #4
[08:08:01.053] signalConditionsASAP(SequentialFuture, pos=4) ...
[08:08:01.053] | nx: 6
[08:08:01.053] | relay: TRUE
[08:08:01.053] | stdout: TRUE
[08:08:01.053] | signal: TRUE
[08:08:01.054] | resignal: FALSE
[08:08:01.054] | force: TRUE
[08:08:01.054] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.054] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.054] | until=4
[08:08:01.054] | relaying element #4
[08:08:01.054] | value() for SequentialFuture (<unnamed-37>) ...
[08:08:01.054] | : signalConditions() ...
[08:08:01.054] | : . include = ‘immediateCondition’
[08:08:01.054] | : . exclude = 
[08:08:01.055] | : . resignal = FALSE
[08:08:01.055] | : . Number of conditions: 6
[08:08:01.055] | : .  int 6
[08:08:01.055] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.055] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.055] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.055] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.056] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.056] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.056] | : signalConditions() ... done
[08:08:01.056] | : relay stdout ...
[08:08:01.056] | : relay stdout ... done
[08:08:01.056] | : check for misuse ...
[08:08:01.056] | : check for misuse ... done
[08:08:01.056] | value() for SequentialFuture (<unnamed-37>) ... done
[08:08:01.056] | signalConditions() ...
[08:08:01.056] | : include = ‘immediateCondition’
[08:08:01.057] | : exclude = 
[08:08:01.057] | : resignal = FALSE
[08:08:01.057] | : Number of conditions: 6
[08:08:01.057] | :  int 6
[08:08:01.057] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.057] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.057] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.058] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.058] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.058] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.058] | signalConditions() ... done
[08:08:01.058] | signalConditions() ...
[08:08:01.058] | : include = ‘condition’
[08:08:01.058] | : exclude = ‘error’, ‘immediateCondition’
[08:08:01.058] | : resignal = TRUE
[08:08:01.058] | : Number of conditions: 6
[08:08:01.059] | :  int 6
[08:08:01.059] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.059] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.987] | : . ' , attachPackages() ...
[08:08:01.059] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.059] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.987] | : . ' , ; packages: [n=1] ‘future’
[08:08:01.059] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.060] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.987] | : . ' , attachPackages() ... done
[08:08:01.060] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.060] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.988] | : . ' , attachPackages() ...
[08:08:01.060] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.060] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.988] | : . ' , ; packages: [n=0] 
[08:08:01.060] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.060] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.988] | : . ' , attachPackages() ... done
[08:08:01.060] | signalConditions() ... done
[08:08:01.061] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.061] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.061] signalConditionsASAP(SequentialFuture, pos=4) ... done
[08:08:01.061] value(<SequentialFuture>, ...) ...
[08:08:01.061] value(<SequentialFuture>, ...) ... done
[08:08:01.061] value() for SequentialFuture (<unnamed-37>) ...
[08:08:01.061] | signalConditions() ...
[08:08:01.061] | : include = ‘immediateCondition’
[08:08:01.061] | : exclude = 
[08:08:01.061] | : resignal = FALSE
[08:08:01.062] | : Number of conditions: 6
[08:08:01.062] | :  int 6
[08:08:01.062] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.062] | : already signaled, skipping
[08:08:01.062] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.062] | : already signaled, skipping
[08:08:01.062] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.062] | : already signaled, skipping
[08:08:01.063] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.063] | : already signaled, skipping
[08:08:01.063] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.063] | : already signaled, skipping
[08:08:01.063] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.063] | : already signaled, skipping
[08:08:01.063] | signalConditions() ... done
[08:08:01.063] | check for misuse ...
[08:08:01.063] | check for misuse ... done
[08:08:01.063] value() for SequentialFuture (<unnamed-37>) ... done
[08:08:01.064] value: <numeric>
[08:08:01.064] signalConditionsASAP(SequentialFuture, pos=4) ...
[08:08:01.064] | nx: 6
[08:08:01.064] | relay: TRUE
[08:08:01.064] | stdout: TRUE
[08:08:01.064] | signal: TRUE
[08:08:01.064] | resignal: FALSE
[08:08:01.064] | force: TRUE
[08:08:01.064] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.064] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.065] | until=5
[08:08:01.065] | relaying element #5
[08:08:01.065] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.065] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.065] signalConditionsASAP(SequentialFuture, pos=4) ... done
[08:08:01.065] resolve() for SequentialFuture ...
[08:08:01.065] resolve() for SequentialFuture ... done
[08:08:01.065] length: 2 (resolved future 4)

[08:08:01.065] checking value #5:
[08:08:01.066] 'obj' is NULL
[08:08:01.066] signalConditionsASAP(NULL, pos=5) ...
[08:08:01.066] | nx: 6
[08:08:01.066] | relay: TRUE
[08:08:01.066] | stdout: TRUE
[08:08:01.066] | signal: TRUE
[08:08:01.066] | resignal: FALSE
[08:08:01.066] | force: TRUE
[08:08:01.066] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.066] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.066] | until=6
[08:08:01.067] | relaying element #6
[08:08:01.067] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.067] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.067] signalConditionsASAP(NULL, pos=5) ... done
[08:08:01.067] signalConditionsASAP(NULL, pos=5) ...
[08:08:01.067] | nx: 6
[08:08:01.067] | relay: TRUE
[08:08:01.067] | stdout: TRUE
[08:08:01.067] | signal: TRUE
[08:08:01.067] | resignal: FALSE
[08:08:01.068] | force: TRUE
[08:08:01.068] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.068] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.068] | until=6
[08:08:01.068] | relaying element #6
[08:08:01.068] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.068] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.068] signalConditionsASAP(NULL, pos=5) ... done
[08:08:01.068] length: 1 (resolved future 5)

[08:08:01.069] checking value #6:
[08:08:01.069] 'obj' is atomic
[08:08:01.069] signalConditionsASAP(numeric, pos=6) ...
[08:08:01.069] | nx: 6
[08:08:01.069] | relay: TRUE
[08:08:01.069] | stdout: TRUE
[08:08:01.069] | signal: TRUE
[08:08:01.069] | resignal: FALSE
[08:08:01.069] | force: TRUE
[08:08:01.069] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.069] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.070] | until=6
[08:08:01.070] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:01.070] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.070] signalConditionsASAP(numeric, pos=6) ... done
[08:08:01.070] length: 0 (resolved future 6)

[08:08:01.070] Relaying remaining futures ...
[08:08:01.070] | signalConditionsASAP(NULL, pos=0) ...
[08:08:01.070] | : nx: 6
[08:08:01.070] | : relay: TRUE
[08:08:01.071] | : stdout: TRUE
[08:08:01.071] | : signal: TRUE
[08:08:01.071] | : resignal: FALSE
[08:08:01.071] | : force: TRUE
[08:08:01.071] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:01.071] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:01.071] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:01.071] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.071] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:01.071] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:3] 2 3 1
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
Dimensions: c(2, 1, 3, 1)
[08:08:01.075] future(..., label = NULL) ...
[08:08:01.075] | lazy: FALSE
[08:08:01.075] | stdout: TRUE
[08:08:01.076] | conditions: [n=1] ‘condition’
[08:08:01.076] | gc: FALSE
[08:08:01.076] | earlySignal: FALSE
[08:08:01.076] | getGlobalsAndPackages() ...
[08:08:01.076] | : Searching for globals ...
[08:08:01.077] | : . globals found: [0] 
[08:08:01.077] | : Searching for globals ... done
[08:08:01.077] | : globals: [0] <none>
[08:08:01.077] | : packages: [0] <none>
[08:08:01.078] | getGlobalsAndPackages() ... done
[08:08:01.078] | run() for ‘Future’ (<unnamed-38>) ...
[08:08:01.078] | : state: ‘created’
[08:08:01.078] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.078] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.078] | : Using SequentialFutureBackend ...
[08:08:01.078] | : . Number of futures since start: 37 (37 created, 37 launched, 37 finished)
[08:08:01.079] | : . Launching futures ...
[08:08:01.079] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:01.079] | : . ' , getFutureData() ...
[08:08:01.079] | : . ' , ; getFutureCore() ...
[08:08:01.079] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:01.079] | : . ' , ; getFutureCore() ... done
[08:08:01.079] | : . ' , ; getFutureCapture() ...
[08:08:01.079] | : . ' , ; getFutureCapture() ... done
[08:08:01.079] | : . ' , ; getFutureContext() ...
[08:08:01.080] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.080] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:01.080] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.080] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:01.080] | : . ' , ; getFutureContext() ... done
[08:08:01.080] | : . ' , getFutureData() ... done
[08:08:01.082] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.082] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:01.082] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.082] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.082] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.082] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:01.082] | : . ' , ; ` | New stack:
[08:08:01.082] | : . ' , ; ` | List of 1
[08:08:01.082] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.082] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.082] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:01.082] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.082] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.082] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.082] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.082] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.085] | : . ' , ; ` | Old stack:
[08:08:01.085] | : . ' , ; ` | List of 1
[08:08:01.085] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.085] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.085] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.085] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.085] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.085] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.085] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:01.085] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:01.085] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.085] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.085] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.088] | : . ' , ; ` | Not identical
[08:08:01.089] | : . ' , ; ` | all.equal() for future ...
[08:08:01.089] | : . ' , ; ` | : List of 2
[08:08:01.089] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.089] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.089] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:01.089] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.089] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.089] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.089] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.089] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.089] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.089] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.089] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.089] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.089] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.089] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:01.089] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:01.089] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.089] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.094] | : . ' , ; ` | all.equal() for future ... done
[08:08:01.094] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:01.094] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:01.094] | : . ' , ; ` List of future strategies:
[08:08:01.094] | : . ' , ; ` 1. sequential:
[08:08:01.094] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.094] | : . ' , ; `    - tweaked: FALSE
[08:08:01.094] | : . ' , ; `    - call: plan(sequential)
[08:08:01.095] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.095] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.096] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.097] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.097] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.097] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:01.097] | : . ' , ; ` | : New stack:
[08:08:01.097] | : . ' , ; ` | : List of 1
[08:08:01.097] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.097] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.097] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.097] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.097] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.097] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.097] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:01.097] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:01.097] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.097] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.097] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.100] | : . ' , ; ` | : Old stack:
[08:08:01.100] | : . ' , ; ` | : List of 1
[08:08:01.100] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.100] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.100] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.100] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.100] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.100] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.100] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:01.100] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:01.100] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.100] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.100] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.106] | : . ' , ; ` | : Identical
[08:08:01.106] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:01.106] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:01.106] | : . ' , ; ` | List of future strategies:
[08:08:01.106] | : . ' , ; ` | 1. sequential:
[08:08:01.106] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.106] | : . ' , ; ` |    - tweaked: FALSE
[08:08:01.106] | : . ' , ; ` |    - call: plan(sequential)
[08:08:01.106] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.107] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.107] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.107] | : . ' , SequentialFuture started (and completed)
[08:08:01.107] | : . ' , signalConditions() ...
[08:08:01.107] | : . ' , ; include = ‘immediateCondition’
[08:08:01.107] | : . ' , ; exclude = 
[08:08:01.107] | : . ' , ; resignal = FALSE
[08:08:01.108] | : . ' , ; Number of conditions: 6
[08:08:01.108] | : . ' , ;  int 6
[08:08:01.108] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.108] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.108] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.108] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.108] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.109] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.109] | : . ' , signalConditions() ... done
[08:08:01.109] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:01.109] | : . Launching futures ... done
[08:08:01.109] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:01.109] | : Using SequentialFutureBackend ... done
[08:08:01.109] | run() for ‘Future’ (<unnamed-38>) ... done
[08:08:01.109] future(..., label = NULL) ... done
[08:08:01.109] future(..., label = NULL) ...
[08:08:01.110] | lazy: FALSE
[08:08:01.110] | stdout: TRUE
[08:08:01.110] | conditions: [n=1] ‘condition’
[08:08:01.110] | gc: FALSE
[08:08:01.110] | earlySignal: FALSE
[08:08:01.110] | getGlobalsAndPackages() ...
[08:08:01.110] | : Searching for globals ...
[08:08:01.111] | : . globals found: [0] 
[08:08:01.111] | : Searching for globals ... done
[08:08:01.111] | : globals: [0] <none>
[08:08:01.112] | : packages: [0] <none>
[08:08:01.112] | getGlobalsAndPackages() ... done
[08:08:01.112] | run() for ‘Future’ (<unnamed-39>) ...
[08:08:01.112] | : state: ‘created’
[08:08:01.112] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.112] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.112] | : Using SequentialFutureBackend ...
[08:08:01.112] | : . Number of futures since start: 38 (38 created, 38 launched, 38 finished)
[08:08:01.113] | : . Launching futures ...
[08:08:01.113] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:01.113] | : . ' , getFutureData() ...
[08:08:01.113] | : . ' , ; getFutureCore() ...
[08:08:01.113] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:01.113] | : . ' , ; getFutureCore() ... done
[08:08:01.113] | : . ' , ; getFutureCapture() ...
[08:08:01.113] | : . ' , ; getFutureCapture() ... done
[08:08:01.113] | : . ' , ; getFutureContext() ...
[08:08:01.114] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.114] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:01.114] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.114] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:01.114] | : . ' , ; getFutureContext() ... done
[08:08:01.114] | : . ' , getFutureData() ... done
[08:08:01.115] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.116] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:01.116] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.116] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.116] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.116] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:01.116] | : . ' , ; ` | New stack:
[08:08:01.116] | : . ' , ; ` | List of 1
[08:08:01.116] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.116] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.116] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:01.116] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.116] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.116] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.116] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.116] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.119] | : . ' , ; ` | Old stack:
[08:08:01.119] | : . ' , ; ` | List of 1
[08:08:01.119] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.119] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.119] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.119] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.119] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.119] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.119] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:01.119] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:01.119] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.119] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.119] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.122] | : . ' , ; ` | Not identical
[08:08:01.122] | : . ' , ; ` | all.equal() for future ...
[08:08:01.122] | : . ' , ; ` | : List of 2
[08:08:01.122] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.122] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.122] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:01.122] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.122] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.122] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.122] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.122] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.122] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.122] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.122] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.122] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.122] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.122] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:01.122] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:01.122] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.122] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.128] | : . ' , ; ` | all.equal() for future ... done
[08:08:01.128] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:01.128] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:01.128] | : . ' , ; ` List of future strategies:
[08:08:01.128] | : . ' , ; ` 1. sequential:
[08:08:01.128] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.128] | : . ' , ; `    - tweaked: FALSE
[08:08:01.128] | : . ' , ; `    - call: plan(sequential)
[08:08:01.128] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.129] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.130] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.130] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.130] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.130] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:01.131] | : . ' , ; ` | : New stack:
[08:08:01.131] | : . ' , ; ` | : List of 1
[08:08:01.131] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.131] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.131] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.131] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.131] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.131] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.131] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:01.131] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:01.131] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.131] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.131] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.134] | : . ' , ; ` | : Old stack:
[08:08:01.134] | : . ' , ; ` | : List of 1
[08:08:01.134] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.134] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.134] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.134] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.134] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.134] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.134] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:01.134] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:01.134] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.134] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.134] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.137] | : . ' , ; ` | : Identical
[08:08:01.137] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:01.137] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:01.137] | : . ' , ; ` | List of future strategies:
[08:08:01.137] | : . ' , ; ` | 1. sequential:
[08:08:01.137] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.137] | : . ' , ; ` |    - tweaked: FALSE
[08:08:01.137] | : . ' , ; ` |    - call: plan(sequential)
[08:08:01.138] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.138] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.138] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.138] | : . ' , SequentialFuture started (and completed)
[08:08:01.139] | : . ' , signalConditions() ...
[08:08:01.139] | : . ' , ; include = ‘immediateCondition’
[08:08:01.139] | : . ' , ; exclude = 
[08:08:01.139] | : . ' , ; resignal = FALSE
[08:08:01.139] | : . ' , ; Number of conditions: 6
[08:08:01.139] | : . ' , ;  int 6
[08:08:01.139] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.140] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.140] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.140] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.140] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.140] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.140] | : . ' , signalConditions() ... done
[08:08:01.140] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:01.140] | : . Launching futures ... done
[08:08:01.140] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:01.141] | : Using SequentialFutureBackend ... done
[08:08:01.141] | run() for ‘Future’ (<unnamed-39>) ... done
[08:08:01.141] future(..., label = NULL) ... done
[08:08:01.141] future(..., label = NULL) ...
[08:08:01.141] | lazy: FALSE
[08:08:01.141] | stdout: TRUE
[08:08:01.141] | conditions: [n=1] ‘condition’
[08:08:01.142] | gc: FALSE
[08:08:01.142] | earlySignal: FALSE
[08:08:01.142] | getGlobalsAndPackages() ...
[08:08:01.142] | : Searching for globals ...
[08:08:01.145] | : . globals found: [1] ‘{’
[08:08:01.145] | : Searching for globals ... done
[08:08:01.145] | : Resolving globals: FALSE
[08:08:01.145] | : Search for packages associated with the globals ...
[08:08:01.145] | : . Packages associated with globals: [1] ‘base’
[08:08:01.145] | : . Packages: [1] ‘base’
[08:08:01.146] | : Search for packages associated with the globals ... done
[08:08:01.146] | : Packages after dropping 'base': [0] 
[08:08:01.146] | : globals: [0] 
[08:08:01.146] | : packages: [0] 
[08:08:01.146] | getGlobalsAndPackages() ... done
[08:08:01.146] | run() for ‘Future’ (<unnamed-40>) ...
[08:08:01.146] | : state: ‘created’
[08:08:01.147] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.147] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.147] | : Using SequentialFutureBackend ...
[08:08:01.147] | : . Number of futures since start: 39 (39 created, 39 launched, 39 finished)
[08:08:01.147] | : . Launching futures ...
[08:08:01.147] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:01.147] | : . ' , getFutureData() ...
[08:08:01.147] | : . ' , ; getFutureCore() ...
[08:08:01.147] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:01.148] | : . ' , ; getFutureCore() ... done
[08:08:01.148] | : . ' , ; getFutureCapture() ...
[08:08:01.148] | : . ' , ; getFutureCapture() ... done
[08:08:01.148] | : . ' , ; getFutureContext() ...
[08:08:01.148] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.148] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:01.148] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.148] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:01.148] | : . ' , ; getFutureContext() ... done
[08:08:01.149] | : . ' , getFutureData() ... done
[08:08:01.150] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.150] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:01.150] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.150] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.150] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.151] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:01.151] | : . ' , ; ` | New stack:
[08:08:01.151] | : . ' , ; ` | List of 1
[08:08:01.151] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.151] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.151] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:01.151] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.151] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.151] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.151] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.151] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.153] | : . ' , ; ` | Old stack:
[08:08:01.153] | : . ' , ; ` | List of 1
[08:08:01.153] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.153] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.153] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.153] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.153] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.153] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.153] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:01.153] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:01.153] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.153] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.153] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.156] | : . ' , ; ` | Not identical
[08:08:01.157] | : . ' , ; ` | all.equal() for future ...
[08:08:01.157] | : . ' , ; ` | : List of 2
[08:08:01.157] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.157] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.157] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:01.157] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.157] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.157] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.157] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.157] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.157] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.157] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.157] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.157] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.157] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.157] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:01.157] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:01.157] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.157] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.162] | : . ' , ; ` | all.equal() for future ... done
[08:08:01.162] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:01.162] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:01.162] | : . ' , ; ` List of future strategies:
[08:08:01.162] | : . ' , ; ` 1. sequential:
[08:08:01.162] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.162] | : . ' , ; `    - tweaked: FALSE
[08:08:01.162] | : . ' , ; `    - call: plan(sequential)
[08:08:01.163] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.163] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.164] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.164] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.164] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.165] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:01.165] | : . ' , ; ` | : New stack:
[08:08:01.165] | : . ' , ; ` | : List of 1
[08:08:01.165] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.165] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.165] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.165] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.165] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.165] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.165] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:01.165] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:01.165] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.165] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.165] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.168] | : . ' , ; ` | : Old stack:
[08:08:01.168] | : . ' , ; ` | : List of 1
[08:08:01.168] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.168] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.168] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.168] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.168] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.168] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.168] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:01.168] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:01.168] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.168] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.168] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.171] | : . ' , ; ` | : Identical
[08:08:01.171] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:01.172] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:01.172] | : . ' , ; ` | List of future strategies:
[08:08:01.172] | : . ' , ; ` | 1. sequential:
[08:08:01.172] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.172] | : . ' , ; ` |    - tweaked: FALSE
[08:08:01.172] | : . ' , ; ` |    - call: plan(sequential)
[08:08:01.172] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.172] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.172] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.173] | : . ' , SequentialFuture started (and completed)
[08:08:01.173] | : . ' , signalConditions() ...
[08:08:01.173] | : . ' , ; include = ‘immediateCondition’
[08:08:01.173] | : . ' , ; exclude = 
[08:08:01.173] | : . ' , ; resignal = FALSE
[08:08:01.173] | : . ' , ; Number of conditions: 6
[08:08:01.175] | : . ' , ;  int 6
[08:08:01.175] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.175] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.176] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.176] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.176] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.176] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.176] | : . ' , signalConditions() ... done
[08:08:01.176] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:01.176] | : . Launching futures ... done
[08:08:01.176] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:01.176] | : Using SequentialFutureBackend ... done
[08:08:01.177] | run() for ‘Future’ (<unnamed-40>) ... done
[08:08:01.177] future(..., label = NULL) ... done
Classes 'listenv', 'environment' <environment: 0x55675c21d668> 
Classes 'listenv', 'environment' <environment: 0x55675b1bcf30> 
 - attr(*, "dim.")= int [1:4] 2 1 3 1
 - attr(*, "dimnames.")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
[08:08:01.180] resolved() for listenv ...
[08:08:01.181] | resolved() for array ...
[08:08:01.181] | : Number of elements: 6
[08:08:01.181] | : Number of futures: 6
[08:08:01.181] | : resolved() for SequentialFuture (<unnamed-38>) ...
[08:08:01.181] | : . state: ‘finished’
[08:08:01.181] | : . run: TRUE
[08:08:01.181] | : . result: ‘FutureResult’
[08:08:01.181] | : resolved() for SequentialFuture (<unnamed-38>) ... done
[08:08:01.181] | : resolved() for SequentialFuture (<unnamed-39>) ...
[08:08:01.182] | : . state: ‘finished’
[08:08:01.182] | : . run: TRUE
[08:08:01.182] | : . result: ‘FutureResult’
[08:08:01.182] | : resolved() for SequentialFuture (<unnamed-39>) ... done
[08:08:01.182] | : resolved() for SequentialFuture (<unnamed-40>) ...
[08:08:01.182] | : . state: ‘finished’
[08:08:01.182] | : . run: TRUE
[08:08:01.182] | : . result: ‘FutureResult’
[08:08:01.182] | : resolved() for SequentialFuture (<unnamed-40>) ... done
[08:08:01.182] | resolved() for array ... done
[08:08:01.183] resolved() for listenv ... done
 logi [1:2, 1, 1:3, 1] TRUE TRUE TRUE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:01.184] value() for listenv ...
[08:08:01.185] | recursive: 0
[08:08:01.185] | reduce: FALSE
[08:08:01.186] | length: 6
[08:08:01.186] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:01.186] | Number of remaining objects: 6
[08:08:01.186] | checking value #1:
[08:08:01.186] | 'obj' is atomic
[08:08:01.186] | signalConditionsASAP(numeric, pos=1) ...
[08:08:01.186] | : nx: 6
[08:08:01.186] | : relay: TRUE
[08:08:01.186] | : stdout: TRUE
[08:08:01.187] | : signal: TRUE
[08:08:01.187] | : resignal: FALSE
[08:08:01.187] | : force: TRUE
[08:08:01.187] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.187] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.187] | : until=2
[08:08:01.187] | : relaying element #2
[08:08:01.187] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.187] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.187] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:01.188] | length: 5 (resolved future 1)
[08:08:01.188] value() for listenv ... done
[08:08:01.188] checking value #2:
[08:08:01.188] 'obj' is SequentialFuture
[08:08:01.188] resolved() for SequentialFuture (<unnamed-38>) ...
[08:08:01.188] | state: ‘finished’
[08:08:01.188] | run: TRUE
[08:08:01.188] | result: ‘FutureResult’
[08:08:01.188] resolved() for SequentialFuture (<unnamed-38>) ... done
[08:08:01.188] SequentialFuture #2
[08:08:01.189] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:01.189] | nx: 6
[08:08:01.189] | relay: TRUE
[08:08:01.189] | stdout: TRUE
[08:08:01.189] | signal: TRUE
[08:08:01.189] | resignal: FALSE
[08:08:01.189] | force: TRUE
[08:08:01.189] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.189] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.189] | until=2
[08:08:01.189] | relaying element #2
[08:08:01.190] | value() for SequentialFuture (<unnamed-38>) ...
[08:08:01.190] | : signalConditions() ...
[08:08:01.190] | : . include = ‘immediateCondition’
[08:08:01.190] | : . exclude = 
[08:08:01.190] | : . resignal = FALSE
[08:08:01.190] | : . Number of conditions: 6
[08:08:01.190] | : .  int 6
[08:08:01.191] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.191] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.191] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.191] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.191] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.191] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.191] | : signalConditions() ... done
[08:08:01.191] | : relay stdout ...
[08:08:01.191] | : relay stdout ... done
[08:08:01.192] | : check for misuse ...
[08:08:01.192] | : check for misuse ... done
[08:08:01.192] | value() for SequentialFuture (<unnamed-38>) ... done
[08:08:01.192] | signalConditions() ...
[08:08:01.192] | : include = ‘immediateCondition’
[08:08:01.192] | : exclude = 
[08:08:01.192] | : resignal = FALSE
[08:08:01.192] | : Number of conditions: 6
[08:08:01.192] | :  int 6
[08:08:01.193] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.193] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.193] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.193] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.193] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.193] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.193] | signalConditions() ... done
[08:08:01.194] | signalConditions() ...
[08:08:01.194] | : include = ‘condition’
[08:08:01.194] | : exclude = ‘error’, ‘immediateCondition’
[08:08:01.194] | : resignal = TRUE
[08:08:01.194] | : Number of conditions: 6
[08:08:01.194] | :  int 6
[08:08:01.194] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.195] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.080] | : . ' , attachPackages() ...
[08:08:01.195] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.195] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.081] | : . ' , ; packages: [n=1] ‘future’
[08:08:01.195] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.195] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.081] | : . ' , attachPackages() ... done
[08:08:01.195] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.195] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.081] | : . ' , attachPackages() ...
[08:08:01.195] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.195] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.081] | : . ' , ; packages: [n=0] 
[08:08:01.196] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.196] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.081] | : . ' , attachPackages() ... done
[08:08:01.196] | signalConditions() ... done
[08:08:01.196] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.196] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.196] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:01.196] value(<SequentialFuture>, ...) ...
[08:08:01.196] value(<SequentialFuture>, ...) ... done
[08:08:01.196] value() for SequentialFuture (<unnamed-38>) ...
[08:08:01.197] | signalConditions() ...
[08:08:01.197] | : include = ‘immediateCondition’
[08:08:01.197] | : exclude = 
[08:08:01.197] | : resignal = FALSE
[08:08:01.197] | : Number of conditions: 6
[08:08:01.197] | :  int 6
[08:08:01.197] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.198] | : already signaled, skipping
[08:08:01.198] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.198] | : already signaled, skipping
[08:08:01.198] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.198] | : already signaled, skipping
[08:08:01.198] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.198] | : already signaled, skipping
[08:08:01.198] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.198] | : already signaled, skipping
[08:08:01.198] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.199] | : already signaled, skipping
[08:08:01.199] | signalConditions() ... done
[08:08:01.199] | check for misuse ...
[08:08:01.199] | check for misuse ... done
[08:08:01.199] value() for SequentialFuture (<unnamed-38>) ... done
[08:08:01.199] value: <numeric>
[08:08:01.199] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:01.199] | nx: 6
[08:08:01.199] | relay: TRUE
[08:08:01.200] | stdout: TRUE
[08:08:01.200] | signal: TRUE
[08:08:01.200] | resignal: FALSE
[08:08:01.200] | force: TRUE
[08:08:01.200] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.200] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.200] | until=3
[08:08:01.200] | relaying element #3
[08:08:01.200] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.200] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.200] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:01.201] resolve() for SequentialFuture ...
[08:08:01.201] resolve() for SequentialFuture ... done
[08:08:01.201] length: 4 (resolved future 2)

[08:08:01.201] checking value #3:
[08:08:01.201] 'obj' is SequentialFuture
[08:08:01.201] resolved() for SequentialFuture (<unnamed-39>) ...
[08:08:01.201] | state: ‘finished’
[08:08:01.201] | run: TRUE
[08:08:01.201] | result: ‘FutureResult’
[08:08:01.202] resolved() for SequentialFuture (<unnamed-39>) ... done
[08:08:01.202] SequentialFuture #3
[08:08:01.202] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:01.202] | nx: 6
[08:08:01.202] | relay: TRUE
[08:08:01.202] | stdout: TRUE
[08:08:01.202] | signal: TRUE
[08:08:01.202] | resignal: FALSE
[08:08:01.202] | force: TRUE
[08:08:01.202] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.202] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.203] | until=3
[08:08:01.203] | relaying element #3
[08:08:01.203] | value() for SequentialFuture (<unnamed-39>) ...
[08:08:01.203] | : signalConditions() ...
[08:08:01.203] | : . include = ‘immediateCondition’
[08:08:01.203] | : . exclude = 
[08:08:01.203] | : . resignal = FALSE
[08:08:01.203] | : . Number of conditions: 6
[08:08:01.203] | : .  int 6
[08:08:01.204] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.204] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.204] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.204] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.204] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.204] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.204] | : signalConditions() ... done
[08:08:01.205] | : relay stdout ...
[08:08:01.205] | : relay stdout ... done
[08:08:01.205] | : check for misuse ...
[08:08:01.205] | : check for misuse ... done
[08:08:01.205] | value() for SequentialFuture (<unnamed-39>) ... done
[08:08:01.205] | signalConditions() ...
[08:08:01.205] | : include = ‘immediateCondition’
[08:08:01.205] | : exclude = 
[08:08:01.205] | : resignal = FALSE
[08:08:01.205] | : Number of conditions: 6
[08:08:01.206] | :  int 6
[08:08:01.206] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.206] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.206] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.206] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.206] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.206] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.207] | signalConditions() ... done
[08:08:01.207] | signalConditions() ...
[08:08:01.207] | : include = ‘condition’
[08:08:01.207] | : exclude = ‘error’, ‘immediateCondition’
[08:08:01.207] | : resignal = TRUE
[08:08:01.207] | : Number of conditions: 6
[08:08:01.207] | :  int 6
[08:08:01.208] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.208] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.114] | : . ' , attachPackages() ...
[08:08:01.208] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.208] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.115] | : . ' , ; packages: [n=1] ‘future’
[08:08:01.208] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.208] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.115] | : . ' , attachPackages() ... done
[08:08:01.208] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.208] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.115] | : . ' , attachPackages() ...
[08:08:01.209] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.209] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.115] | : . ' , ; packages: [n=0] 
[08:08:01.209] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.209] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.115] | : . ' , attachPackages() ... done
[08:08:01.209] | signalConditions() ... done
[08:08:01.209] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.209] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.209] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:01.209] value(<SequentialFuture>, ...) ...
[08:08:01.209] value(<SequentialFuture>, ...) ... done
[08:08:01.210] value() for SequentialFuture (<unnamed-39>) ...
[08:08:01.210] | signalConditions() ...
[08:08:01.210] | : include = ‘immediateCondition’
[08:08:01.210] | : exclude = 
[08:08:01.210] | : resignal = FALSE
[08:08:01.210] | : Number of conditions: 6
[08:08:01.210] | :  int 6
[08:08:01.211] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.211] | : already signaled, skipping
[08:08:01.211] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.211] | : already signaled, skipping
[08:08:01.211] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.211] | : already signaled, skipping
[08:08:01.211] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.211] | : already signaled, skipping
[08:08:01.211] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.211] | : already signaled, skipping
[08:08:01.212] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.212] | : already signaled, skipping
[08:08:01.212] | signalConditions() ... done
[08:08:01.212] | check for misuse ...
[08:08:01.212] | check for misuse ... done
[08:08:01.212] value() for SequentialFuture (<unnamed-39>) ... done
[08:08:01.212] value: <NULL>
[08:08:01.212] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:01.212] | nx: 6
[08:08:01.213] | relay: TRUE
[08:08:01.213] | stdout: TRUE
[08:08:01.213] | signal: TRUE
[08:08:01.213] | resignal: FALSE
[08:08:01.213] | force: TRUE
[08:08:01.213] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.213] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.213] | until=4
[08:08:01.213] | relaying element #4
[08:08:01.213] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.213] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.214] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:01.214] resolve() for SequentialFuture ...
[08:08:01.214] resolve() for SequentialFuture ... done
[08:08:01.214] length: 3 (resolved future 3)

[08:08:01.214] checking value #4:
[08:08:01.214] 'obj' is SequentialFuture
[08:08:01.214] resolved() for SequentialFuture (<unnamed-40>) ...
[08:08:01.214] | state: ‘finished’
[08:08:01.214] | run: TRUE
[08:08:01.215] | result: ‘FutureResult’
[08:08:01.215] resolved() for SequentialFuture (<unnamed-40>) ... done
[08:08:01.215] SequentialFuture #4
[08:08:01.215] signalConditionsASAP(SequentialFuture, pos=4) ...
[08:08:01.215] | nx: 6
[08:08:01.215] | relay: TRUE
[08:08:01.215] | stdout: TRUE
[08:08:01.215] | signal: TRUE
[08:08:01.215] | resignal: FALSE
[08:08:01.215] | force: TRUE
[08:08:01.215] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.215] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.216] | until=4
[08:08:01.216] | relaying element #4
[08:08:01.216] | value() for SequentialFuture (<unnamed-40>) ...
[08:08:01.216] | : signalConditions() ...
[08:08:01.216] | : . include = ‘immediateCondition’
[08:08:01.216] | : . exclude = 
[08:08:01.216] | : . resignal = FALSE
[08:08:01.216] | : . Number of conditions: 6
[08:08:01.216] | : .  int 6
[08:08:01.217] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.217] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.217] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.217] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.217] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.217] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.218] | : signalConditions() ... done
[08:08:01.218] | : relay stdout ...
[08:08:01.218] | : relay stdout ... done
[08:08:01.218] | : check for misuse ...
[08:08:01.218] | : check for misuse ... done
[08:08:01.218] | value() for SequentialFuture (<unnamed-40>) ... done
[08:08:01.218] | signalConditions() ...
[08:08:01.218] | : include = ‘immediateCondition’
[08:08:01.218] | : exclude = 
[08:08:01.218] | : resignal = FALSE
[08:08:01.219] | : Number of conditions: 6
[08:08:01.219] | :  int 6
[08:08:01.219] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.219] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.219] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.219] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.219] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.220] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.220] | signalConditions() ... done
[08:08:01.220] | signalConditions() ...
[08:08:01.220] | : include = ‘condition’
[08:08:01.220] | : exclude = ‘error’, ‘immediateCondition’
[08:08:01.220] | : resignal = TRUE
[08:08:01.220] | : Number of conditions: 6
[08:08:01.220] | :  int 6
[08:08:01.221] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.221] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.149] | : . ' , attachPackages() ...
[08:08:01.221] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.221] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.149] | : . ' , ; packages: [n=1] ‘future’
[08:08:01.221] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.221] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.149] | : . ' , attachPackages() ... done
[08:08:01.221] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.221] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.149] | : . ' , attachPackages() ...
[08:08:01.222] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.222] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.149] | : . ' , ; packages: [n=0] 
[08:08:01.222] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.222] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.149] | : . ' , attachPackages() ... done
[08:08:01.222] | signalConditions() ... done
[08:08:01.222] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.222] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.222] signalConditionsASAP(SequentialFuture, pos=4) ... done
[08:08:01.222] value(<SequentialFuture>, ...) ...
[08:08:01.223] value(<SequentialFuture>, ...) ... done
[08:08:01.223] value() for SequentialFuture (<unnamed-40>) ...
[08:08:01.223] | signalConditions() ...
[08:08:01.223] | : include = ‘immediateCondition’
[08:08:01.223] | : exclude = 
[08:08:01.223] | : resignal = FALSE
[08:08:01.223] | : Number of conditions: 6
[08:08:01.223] | :  int 6
[08:08:01.224] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.224] | : already signaled, skipping
[08:08:01.224] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.224] | : already signaled, skipping
[08:08:01.224] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.224] | : already signaled, skipping
[08:08:01.224] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.224] | : already signaled, skipping
[08:08:01.224] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.225] | : already signaled, skipping
[08:08:01.225] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.225] | : already signaled, skipping
[08:08:01.225] | signalConditions() ... done
[08:08:01.225] | check for misuse ...
[08:08:01.225] | check for misuse ... done
[08:08:01.225] value() for SequentialFuture (<unnamed-40>) ... done
[08:08:01.225] value: <numeric>
[08:08:01.225] signalConditionsASAP(SequentialFuture, pos=4) ...
[08:08:01.225] | nx: 6
[08:08:01.226] | relay: TRUE
[08:08:01.226] | stdout: TRUE
[08:08:01.226] | signal: TRUE
[08:08:01.226] | resignal: FALSE
[08:08:01.226] | force: TRUE
[08:08:01.226] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.226] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.226] | until=5
[08:08:01.226] | relaying element #5
[08:08:01.226] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.226] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.227] signalConditionsASAP(SequentialFuture, pos=4) ... done
[08:08:01.227] resolve() for SequentialFuture ...
[08:08:01.227] resolve() for SequentialFuture ... done
[08:08:01.227] length: 2 (resolved future 4)

[08:08:01.227] checking value #5:
[08:08:01.227] 'obj' is NULL
[08:08:01.227] signalConditionsASAP(NULL, pos=5) ...
[08:08:01.227] | nx: 6
[08:08:01.227] | relay: TRUE
[08:08:01.228] | stdout: TRUE
[08:08:01.228] | signal: TRUE
[08:08:01.228] | resignal: FALSE
[08:08:01.228] | force: TRUE
[08:08:01.228] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.228] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.228] | until=6
[08:08:01.228] | relaying element #6
[08:08:01.228] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.228] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.228] signalConditionsASAP(NULL, pos=5) ... done
[08:08:01.229] signalConditionsASAP(NULL, pos=5) ...
[08:08:01.229] | nx: 6
[08:08:01.229] | relay: TRUE
[08:08:01.229] | stdout: TRUE
[08:08:01.229] | signal: TRUE
[08:08:01.229] | resignal: FALSE
[08:08:01.229] | force: TRUE
[08:08:01.229] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.229] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.229] | until=6
[08:08:01.230] | relaying element #6
[08:08:01.230] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.230] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.230] signalConditionsASAP(NULL, pos=5) ... done
[08:08:01.230] length: 1 (resolved future 5)

[08:08:01.230] checking value #6:
[08:08:01.230] 'obj' is atomic
[08:08:01.230] signalConditionsASAP(numeric, pos=6) ...
[08:08:01.230] | nx: 6
[08:08:01.230] | relay: TRUE
[08:08:01.231] | stdout: TRUE
[08:08:01.231] | signal: TRUE
[08:08:01.231] | resignal: FALSE
[08:08:01.231] | force: TRUE
[08:08:01.231] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.231] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.231] | until=6
[08:08:01.231] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:01.231] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.231] signalConditionsASAP(numeric, pos=6) ... done
[08:08:01.232] length: 0 (resolved future 6)

[08:08:01.232] Relaying remaining futures ...
[08:08:01.232] | signalConditionsASAP(NULL, pos=0) ...
[08:08:01.232] | : nx: 6
[08:08:01.232] | : relay: TRUE
[08:08:01.232] | : stdout: TRUE
[08:08:01.232] | : signal: TRUE
[08:08:01.232] | : resignal: FALSE
[08:08:01.232] | : force: TRUE
[08:08:01.232] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:01.233] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:01.233] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:01.233] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.233] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:01.233] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:4] 2 1 3 1
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
*** futures() - listenv ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
Type of object: list
Type of future: multicore
[08:08:01.237] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.238] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:01.238] | : all.equal() for FutureStrategyList ...
[08:08:01.238] | : . New stack:
[08:08:01.238] | : . List of 1
[08:08:01.238] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.238] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.238] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.238] | : .   ..- attr(*, "init")= logi TRUE
[08:08:01.238] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.238] | : .     ...)  
[08:08:01.238] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.238] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.238] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:01.238] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.240] | : . Old stack:
[08:08:01.241] | : . List of 1
[08:08:01.241] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.241] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.241] | : .   ..- attr(*, "init")= chr "done"
[08:08:01.241] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.241] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.241] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.241] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:01.241] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:01.241] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.241] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.241] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.244] | : . Not identical
[08:08:01.246] | : . all.equal() for future ...
[08:08:01.246] | : . ' List of 2
[08:08:01.246] | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.246] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.246] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.246] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:01.246] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.246] | : . '     ...)  
[08:08:01.246] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.246] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.246] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:01.246] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.246] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.246] | : . '   ..- attr(*, "init")= chr "done"
[08:08:01.246] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.246] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.246] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.246] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:01.246] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758fa1ac0> 
[08:08:01.246] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.246] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.251] | : . ' Formals differ
[08:08:01.251] | : . all.equal() for future ... done
[08:08:01.251] | : . Future strategies differ at level 1
[08:08:01.251] | : all.equal() for FutureStrategyList ... done
[08:08:01.251] | : plan(): Setting new future backend stack:
[08:08:01.251] | : List of future strategies:
[08:08:01.251] | : 1. multicore:
[08:08:01.251] | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:01.251] | :    - tweaked: FALSE
[08:08:01.251] | :    - call: plan(strategy)
[08:08:01.251] | : List of 1
[08:08:01.251] | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.251] | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.251] | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.251] | :   ..- attr(*, "init")= logi TRUE
[08:08:01.251] | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.251] | :     ...)  
[08:08:01.251] | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.251] | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.251] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.251] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.254] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:01.254] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.254] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:01.254] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.255] | : . Legacy shutdown of cluster workers ...
[08:08:01.255] | : . ' Stopping existing cluster ...
[08:08:01.255] | : . ' , No pre-existing cluster. Skipping
[08:08:01.255] | : . ' Stopping existing cluster ... done
[08:08:01.255] | : . Legacy shutdown of cluster workers ... done
[08:08:01.255] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:01.255] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:01.256] | : . function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.256] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.256] | : .  - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.256] | : .  - attr(*, "init")= logi TRUE
[08:08:01.256] | : .  - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.256] | : .     ...)  
[08:08:01.256] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.256] | : .  - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.256] | : .  - attr(*, "call")= language plan(strategy)
[08:08:01.257] | : . init: TRUE
[08:08:01.258] | : . makeFutureBackend(<multicore>) ...
[08:08:01.258] | : . ' Backend function: <‘NULL’>
[08:08:01.258] | : . ' Evaluator tweak arguments: [n=0]
[08:08:01.258] | : . '  list()
[08:08:01.258] | : . ' Evaluator formal arguments: [n=3]
[08:08:01.258] | : . '  list()
[08:08:01.259] | : . ' Backend factory arguments: [n=3]
[08:08:01.259] | : . ' Dotted pair list of 3
[08:08:01.259] | : . '  $ workers    : language availableCores(constraints = "multicore")
[08:08:01.259] | : . '  $ gc         : logi FALSE
[08:08:01.259] | : . '  $ earlySignal: logi FALSE
[08:08:01.262] | : . ' Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:01.262] | : . makeFutureBackend(<multicore>) ... done
[08:08:01.262] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:01.262] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.262] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.262] | : plan(): nbrOfWorkers() = 2
[08:08:01.262] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:01.263] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Dimensions: NULL
[08:08:01.263] future(..., label = NULL) ...
[08:08:01.263] | lazy: FALSE
[08:08:01.263] | stdout: TRUE
[08:08:01.263] | conditions: [n=1] ‘condition’
[08:08:01.263] | gc: FALSE
[08:08:01.263] | earlySignal: FALSE
[08:08:01.263] | getGlobalsAndPackages() ...
[08:08:01.263] | : Searching for globals ...
[08:08:01.265] | : . globals found: [0] 
[08:08:01.265] | : Searching for globals ... done
[08:08:01.265] | : globals: [0] <none>
[08:08:01.265] | : packages: [0] <none>
[08:08:01.265] | getGlobalsAndPackages() ... done
[08:08:01.265] | run() for ‘Future’ (<unnamed-41>) ...
[08:08:01.265] | : state: ‘created’
[08:08:01.265] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.266] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.266] | : Using MulticoreFutureBackend ...
[08:08:01.266] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:01.266] | : . Launching futures ...
[08:08:01.266] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:01.266] | : . ' , getFutureData() ...
[08:08:01.266] | : . ' , ; getFutureCore() ...
[08:08:01.267] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:01.267] | : . ' , ; getFutureCore() ... done
[08:08:01.267] | : . ' , ; getFutureCapture() ...
[08:08:01.267] | : . ' , ; getFutureCapture() ... done
[08:08:01.267] | : . ' , ; getFutureContext() ...
[08:08:01.267] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.267] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:01.267] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.267] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:01.268] | : . ' , ; getFutureContext() ... done
[08:08:01.268] | : . ' , getFutureData() ... done
[08:08:01.268] | : . ' , requestCore(..., workers = 2) ...
[08:08:01.269] | : . ' , requestCore(..., workers = 2) ... done
[08:08:01.272] | : . ' , MulticoreFuture started
[08:08:01.272] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:01.273] | : . Launching futures ... done
[08:08:01.273] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:01.273] | : Using MulticoreFutureBackend ... done
[08:08:01.273] | run() for ‘Future’ (<unnamed-41>) ... done
[08:08:01.274] future(..., label = NULL) ... done
[08:08:01.274] future(..., label = NULL) ...
[08:08:01.274] | lazy: FALSE
[08:08:01.274] | stdout: TRUE
[08:08:01.274] | conditions: [n=1] ‘condition’
[08:08:01.275] | gc: FALSE
[08:08:01.275] | earlySignal: FALSE
[08:08:01.275] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.275] | getGlobalsAndPackages() ...
[08:08:01.275] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:01.275] | : Searching for globals ...
[08:08:01.275] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.276] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.276] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.276] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:01.276] | : . ' , ; ` | New stack:
[08:08:01.278] | : . globals found: [0] 
[08:08:01.278] | : Searching for globals ... done
[08:08:01.278] | : globals: [0] <none>
[08:08:01.279] | : packages: [0] <none>
[08:08:01.279] | getGlobalsAndPackages() ... done
[08:08:01.279] | run() for ‘Future’ (<unnamed-42>) ...
[08:08:01.280] | : state: ‘created’
[08:08:01.280] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.280] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.280] | : Using MulticoreFutureBackend ...
[08:08:01.280] | : . Number of futures since start: 1 (1 created, 1 launched, 0 finished)
[08:08:01.280] | : . Launching futures ...
[08:08:01.281] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:01.276] | : . ' , ; ` | List of 1
[08:08:01.276] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.276] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.276] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:01.276] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.276] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.276] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.276] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.276] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.281] | : . ' , getFutureData() ...
[08:08:01.281] | : . ' , ; ` | Old stack:
[08:08:01.281] | : . ' , ; getFutureCore() ...
[08:08:01.281] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:01.281] | : . ' , ; getFutureCore() ... done
[08:08:01.282] | : . ' , ; getFutureCapture() ...
[08:08:01.282] | : . ' , ; getFutureCapture() ... done
[08:08:01.282] | : . ' , ; getFutureContext() ...
[08:08:01.282] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.282] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:01.282] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.283] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:01.283] | : . ' , ; getFutureContext() ... done
[08:08:01.283] | : . ' , getFutureData() ... done
[08:08:01.283] | : . ' , requestCore(..., workers = 2) ...
[08:08:01.284] | : . ' , requestCore(..., workers = 2) ... done
[08:08:01.281] | : . ' , ; ` | List of 1
[08:08:01.281] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.281] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.281] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.281] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.281] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.281] | : . ' , ; ` |     ...)  
[08:08:01.281] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.281] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.281] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.281] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.281] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.281] | : . ' , ; ` |     ...)  
[08:08:01.281] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.281] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.286] | : . ' , ; ` | Not identical
[08:08:01.286] | : . ' , ; ` | all.equal() for future ...
[08:08:01.287] | : . ' , MulticoreFuture started
[08:08:01.288] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:01.288] | : . Launching futures ... done
[08:08:01.288] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:01.289] | : Using MulticoreFutureBackend ... done
[08:08:01.289] | run() for ‘Future’ (<unnamed-42>) ... done
[08:08:01.290] future(..., label = NULL) ... done
List of 6
 $ a:[08:08:01.291] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
 num 1
 $ b:[08:08:01.292] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:01.292] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x556759bc8c90> [08:08:01.293] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...

 $ c:[08:08:01.286] | : . ' , ; ` | : List of 2
[08:08:01.286] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.286] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.286] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:01.286] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.286] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.286] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.286] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.286] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.286] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.286] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.286] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.286] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.286] | : . ' , ; ` | :     ...)  
[08:08:01.286] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.286] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.286] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.286] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.286] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.286] | : . ' , ; ` | :     ...)  
[08:08:01.286] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.293] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675b5bc6d0> 
 $  :[08:08:01.293] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:01.294] | : . ' , ; ` | : Formals differ
[08:08:01.294] | : . ' , ; ` | New stack:
[08:08:01.294] | : . ' , ; ` | all.equal() for future ... done
 NULL
[08:08:01.294] | : . ' , ; ` | Future strategies differ at level 1
 $  :[08:08:01.294] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:01.294] | : . ' , ; ` plan(): Setting new future backend stack:
 NULL
 $  :[08:08:01.294] | : . ' , ; ` List of future strategies:
[08:08:01.294] | : . ' , ; ` 1. sequential:
[08:08:01.294] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.294] | : . ' , ; `    - tweaked: FALSE
[08:08:01.294] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
 num 6
List of 6
 $ a: num 1
 $ b:Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x556759bc8c90> 
 $ c:Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675b5bc6d0> 
 $  : NULL
 $  : NULL
 $  :[08:08:01.295] | : . ' , ; ` List of 1
[08:08:01.295] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.295] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.295] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:01.295] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.295] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.295] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.295] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.295] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.299] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.299] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.299] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
 num 6
[08:08:01.300] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:01.294] | : . ' , ; ` | List of 1
[08:08:01.294] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.294] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.294] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:01.294] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.294] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.294] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.294] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.294] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.300] resolved() for list ...
[08:08:01.300] | : . ' , ; ` | Old stack:
[08:08:01.300] | Number of elements: 6
[08:08:01.300] | Number of futures: 6
[08:08:01.300] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.300] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.300] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:01.300] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.300] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.300] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.300] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.303] | : . ' , ; ` | : init: TRUE
[08:08:01.303] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:01.303] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:01.303] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:01.303] | : . ' , ; ` | : .  list()
[08:08:01.304] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:01.304] | : . ' , ; ` | : .  list()
[08:08:01.304] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:01.300] | : . ' , ; ` | List of 1
[08:08:01.300] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.300] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.300] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.300] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.300] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.300] | : . ' , ; ` |     ...)  
[08:08:01.300] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.300] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.300] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.300] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.300] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.300] | : . ' , ; ` |     ...)  
[08:08:01.300] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.300] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.305] | : . ' , ; ` | Not identical
[08:08:01.305] | : . ' , ; ` | all.equal() for future ...
[08:08:01.304] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:01.304] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:01.304] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:01.306] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:01.306] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:01.306] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:01.306] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.307] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:01.307] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.307] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.310] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.310] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.310] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.310] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:01.310] | : . ' , ; ` | : New stack:
[08:08:01.312] | readImmediateCondition() ...
[08:08:01.312] | : Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.313] | : Number of RDS files: 0
[08:08:01.313] | : Returned conditions set:
[08:08:01.306] | : . ' , ; ` | : List of 2
[08:08:01.306] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.306] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.306] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:01.306] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.306] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.306] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.306] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.306] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.306] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.306] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.306] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.306] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.306] | : . ' , ; ` | :     ...)  
[08:08:01.306] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.306] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.306] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.306] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.306] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.306] | : . ' , ; ` | :     ...)  
[08:08:01.306] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.313] | :  list()
[08:08:01.314] | readImmediateCondition() ... done
[08:08:01.314] | : . ' , ; ` | : Formals differ
[08:08:01.314] | : . ' , ; ` | all.equal() for future ... done
[08:08:01.314] | : . ' , ; ` | Future strategies differ at level 1
[08:08:01.315] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:01.315] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:01.311] | : . ' , ; ` | : List of 1
[08:08:01.311] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.311] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.311] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.311] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.311] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.311] | : . ' , ; ` | :     ...)  
[08:08:01.311] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.311] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.311] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.311] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.311] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.311] | : . ' , ; ` | :     ...)  
[08:08:01.311] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.311] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.315] | : . ' , ; ` | : Old stack:
[08:08:01.315] | : . ' , ; ` List of future strategies:
[08:08:01.315] | : . ' , ; ` 1. sequential:
[08:08:01.315] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.315] | : . ' , ; `    - tweaked: FALSE
[08:08:01.315] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.316] | : . ' , ; ` List of 1
[08:08:01.316] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.316] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.316] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:01.316] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.316] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.316] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.316] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.316] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.319] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.315] | : . ' , ; ` | : List of 1
[08:08:01.315] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.315] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.315] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.315] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.315] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.315] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.315] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.315] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c163958> 
[08:08:01.315] | : . ' , ; ` | :   .. ..- attr(*, "factory")=fun[08:08:01.319] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = Fction (..., maxSizeOfObjects = +Inf)  
[08:08:01.315] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObALSE) ... done
jects" "earlySignal" "gc" "interrupts" ...
[08:08:01.315] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.319] | : . ' , ; ` | : Not identical
[08:08:01.320] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.320] | : . ' , ; ` | : all.equal() for future ...
[08:08:01.320] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:01.320] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.320] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.320] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:01.320] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.320] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.320] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.320] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.323] | : . ' , ; ` | : init: TRUE
[08:08:01.323] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:01.323] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:01.323] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:01.323] | : . ' , ; ` | : .  list()
[08:08:01.324] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:01.324] | readImmediateCondition() ...
[08:08:01.324] | : . ' , ; ` | : .  list()
[08:08:01.324] | : Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.324] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:01.324] | : Number of RDS files: 0
[08:08:01.325] | : Returned conditions set:
[08:08:01.325] | :  list()
[08:08:01.325] | readImmediateCondition() ... done
[08:08:01.326] resolved() for list ... done
 Named logi [1:6] TRUE FALSE FALSE TRUE TRUE TRUE
 - attr(*, "names")=[08:08:01.325] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:01.325] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:01.325] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
 chr [1:6] "a" "b" "c" "" ...
[08:08:01.327] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:01.327] value() for list ...
[08:08:01.320] | : . ' , ; ` | : . List of 2
[08:08:01.320] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.320] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.320] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.320] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.320] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.320] | : . ' , ; ` | : .     ...)  
[08:08:01.320] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.320] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.320] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:01.320] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.320] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.320] | : . ' , ; ` | : .     ...)  
[08:08:01.320] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.320] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.320] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.320] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.320] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.320] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.320] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.320] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.320] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c163958> 
[08:08:01.320] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.320] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.327] | recursive: 0
[08:08:01.327] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:01.327] | reduce: FALSE
[08:08:01.327] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:01.328] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.328] | length: 6
[08:08:01.328] | : . ' , ; ` | : . Formals differ
[08:08:01.328] | : . ' , ; ` | : all.equal() for future ... done
[08:08:01.328] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:01.328] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:01.328] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:01.328] | Number of remaining objects: 6
[08:08:01.328] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:01.328] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.328] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:01.328] | checking value #1:
[08:08:01.328] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.328] | 'obj' is atomic
[08:08:01.329] | signalConditionsASAP(numeric, pos=1) ...
[08:08:01.328] | : . ' , ; ` | List of future strategies:
[08:08:01.328] | : . ' , ; ` | 1. multicore:
[08:08:01.328] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:01.328] | : . ' , ; ` |    - tweaked: FALSE
[08:08:01.328] | : . ' , ; ` |    - call: plan(strategy)
[08:08:01.329] | : nx: 6
[08:08:01.329] | : relay: TRUE
[08:08:01.329] | : stdout: TRUE
[08:08:01.329] | : signal: TRUE
[08:08:01.330] | : resignal: FALSE
[08:08:01.330] | : force: TRUE
[08:08:01.330] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.330] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.330] | : until=2
[08:08:01.331] | : relaying element #2
[08:08:01.331] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.331] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.331] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:01.331] | length: 5 (resolved future 1)
[08:08:01.332] value() for list ... done
[08:08:01.332] checking value #2:
[08:08:01.332] 'obj' is MulticoreFuture
[08:08:01.333] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.333] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.333] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.329] | : . ' , ; ` | List of 1
[08:08:01.329] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.329] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.329] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.329] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.329] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.329] | : . ' , ; ` |     ...)  
[08:08:01.329] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.329] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.329] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.329] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.329] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.329] | : . ' , ; ` |     ...)  
[08:08:01.329] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.329] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.333] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:01.333] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.333] | : . ' , ; ` | : New stack:
[08:08:01.333] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.334] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.334] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.334] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:01.334] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.334] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.334] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.335] readImmediateCondition() ...
[08:08:01.335] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.335] | Number of RDS files: 0
[08:08:01.336] | Returned conditions set:
[08:08:01.336] |  list()
[08:08:01.336] readImmediateCondition() ... done
[08:08:01.336] MulticoreFuture #2
[08:08:01.337] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:01.337] | nx: 6
[08:08:01.337] | relay: TRUE
[08:08:01.337] | stdout: TRUE
[08:08:01.337] | signal: TRUE
[08:08:01.338] | resignal: FALSE
[08:08:01.338] | force: TRUE
[08:08:01.338] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.338] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.338] | until=2
[08:08:01.339] | relaying element #2
[08:08:01.339] | value() for MulticoreFuture (<unnamed-41>) ...
[08:08:01.333] | : . ' , ; ` | : List of 1
[08:08:01.333] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.333] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.333] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.333] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.333] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.333] | : . ' , ; ` | :     ...)  
[08:08:01.333] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.333] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.333] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.333] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.333] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.333] | : . ' , ; ` | :     ...)  
[08:08:01.333] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.333] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.340] | : . ' , ; ` | : Old stack:
[08:08:01.341] | : result() for MulticoreFuture ...
[08:08:01.342] | : . readImmediateCondition() ...
[08:08:01.342] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.343] | : . ' Number of RDS files: 0
[08:08:01.343] | : . ' Returned conditions set:
[08:08:01.343] | : . '  list()
[08:08:01.343] | : . readImmediateCondition() ... done
[08:08:01.344] | : . result() for MulticoreFuture ...
[08:08:01.344] | : . result() for MulticoreFuture ... done
[08:08:01.345] | : . signalConditions() ...
[08:08:01.345] | : . ' include = ‘immediateCondition’
[08:08:01.345] | : . ' exclude = 
[08:08:01.345] | : . ' resignal = FALSE
[08:08:01.345] | : . ' Number of conditions: 6
[08:08:01.345] | : . '  int 6
[08:08:01.346] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.346] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.347] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.340] | : . ' , ; ` | : List of 1
[08:08:01.340] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.340] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.340] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.340] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.340] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.340] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.340] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.340] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c404590> 
[08:08:01.340] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.340] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.340] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.347] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.347] | : . ' , ; ` | : Not identical
[08:08:01.347] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.347] | : . ' , ; ` | : all.equal() for future ...
[08:08:01.347] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.348] | : . signalConditions() ... done
[08:08:01.348] | : result() for MulticoreFuture ... done
[08:08:01.348] | : result() for MulticoreFuture ...
[08:08:01.348] | : result() for MulticoreFuture ... done
[08:08:01.348] | : signalConditions() ...
[08:08:01.349] | : . include = ‘immediateCondition’
[08:08:01.349] | : . exclude = 
[08:08:01.349] | : . resignal = FALSE
[08:08:01.349] | : . Number of conditions: 6
[08:08:01.349] | : .  int 6
[08:08:01.350] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.350] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.351] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.351] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.351] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.351] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.351] | : signalConditions() ... done
[08:08:01.352] | : relay stdout ...
[08:08:01.352] | : relay stdout ... done
[08:08:01.352] | : check for misuse ...
[08:08:01.352] | : check for misuse ... done
[08:08:01.352] | value() for MulticoreFuture (<unnamed-41>) ... done
[08:08:01.353] | result() for MulticoreFuture ...
[08:08:01.353] | result() for MulticoreFuture ... done
[08:08:01.353] | signalConditions() ...
[08:08:01.353] | : include = ‘immediateCondition’
[08:08:01.353] | : exclude = 
[08:08:01.353] | : resignal = FALSE
[08:08:01.353] | : Number of conditions: 6
[08:08:01.353] | :  int 6
[08:08:01.354] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.354] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.354] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.354] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.354] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.355] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.355] | signalConditions() ... done
[08:08:01.355] | result() for MulticoreFuture ...
[08:08:01.355] | result() for MulticoreFuture ... done
[08:08:01.355] | signalConditions() ...
[08:08:01.355] | : include = ‘condition’
[08:08:01.355] | : exclude = ‘error’, ‘immediateCondition’
[08:08:01.356] | : resignal = TRUE
[08:08:01.356] | : Number of conditions: 6
[08:08:01.356] | :  int 6
[08:08:01.356] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.356] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.272] | : . ' , attachPackages() ...
[08:08:01.357] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.347] | : . ' , ; ` | : . List of 2
[08:08:01.347] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.347] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.347] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.347] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.347] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.347] | : . ' , ; ` | : .     ...)  
[08:08:01.347] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.347] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.347] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:01.347] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.347] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.347] | : . ' , ; ` | : .     ...)  
[08:08:01.347] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.347] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.347] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.347] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.347] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.347] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.347] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.347] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.347] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c404590> 
[08:08:01.347] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.347] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.357] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.273] | : . ' , ; packages: [n=1] ‘future’
[08:08:01.357] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.357] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.273] | : . ' , attachPackages() ... done
[08:08:01.357] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.357] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.357] | : . ' , ; ` | : . Formals differ
[08:08:01.274] | : . ' , attachPackages() ...
[08:08:01.357] | : . ' , ; ` | : all.equal() for future ... done
[08:08:01.357] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.358] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.358] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:01.274] | : . ' , ; packages: [n=0] 
[08:08:01.358] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:01.358] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.358] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:01.358] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.274] | : . ' , attachPackages() ... done
[08:08:01.358] | signalConditions() ... done
[08:08:01.358] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.358] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.358] | : . ' , ; ` | List of future strategies:
[08:08:01.358] | : . ' , ; ` | 1. multicore:
[08:08:01.358] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:01.358] | : . ' , ; ` |    - tweaked: FALSE
[08:08:01.358] | : . ' , ; ` |    - call: plan(strategy)
[08:08:01.358] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:01.359] value(<MulticoreFuture>, ...) ...
[08:08:01.359] value(<MulticoreFuture>, ...) ... done
[08:08:01.359] value() for MulticoreFuture (<unnamed-41>) ...
[08:08:01.359] | result() for MulticoreFuture ...
[08:08:01.359] | result() for MulticoreFuture ... done
[08:08:01.359] | result() for MulticoreFuture ...
[08:08:01.359] | result() for MulticoreFuture ... done
[08:08:01.359] | signalConditions() ...
[08:08:01.360] | : include = ‘immediateCondition’
[08:08:01.360] | : exclude = 
[08:08:01.360] | : resignal = FALSE
[08:08:01.360] | : Number of conditions: 6
[08:08:01.360] | :  int 6
[08:08:01.360] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.361] | : already signaled, skipping
[08:08:01.361] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.361] | : already signaled, skipping
[08:08:01.361] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.361] | : already signaled, skipping
[08:08:01.361] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.361] | : already signaled, skipping
[08:08:01.361] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.362] | : already signaled, skipping
[08:08:01.362] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.362] | : already signaled, skipping
[08:08:01.362] | signalConditions() ... done
[08:08:01.362] | check for misuse ...
[08:08:01.362] | check for misuse ... done
[08:08:01.362] value() for MulticoreFuture (<unnamed-41>) ... done
[08:08:01.362] value: <numeric>
[08:08:01.363] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:01.363] | nx: 6
[08:08:01.363] | relay: TRUE
[08:08:01.358] | : . ' , ; ` | List of 1
[08:08:01.358] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.358] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.358] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.358] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.358] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.358] | : . ' , ; ` |     ...)  
[08:08:01.358] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.358] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.358] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.358] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.358] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.358] | : . ' , ; ` |     ...)  
[08:08:01.358] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.358] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.363] | stdout: TRUE
[08:08:01.363] | signal: TRUE
[08:08:01.363] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.363] | resignal: FALSE
[08:08:01.363] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.363] | force: TRUE
[08:08:01.363] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.363] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.363] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.363] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.364] | until=3
[08:08:01.364] | relaying element #3
[08:08:01.364] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:01.364] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.364] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.364] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.364] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:01.364] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.364] resolve() for MulticoreFuture ...
[08:08:01.364] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.364] resolve() for MulticoreFuture ... done
[08:08:01.364] length: 4 (resolved future 2)

[08:08:01.365] checking value #3:
[08:08:01.365] 'obj' is MulticoreFuture
[08:08:01.365] readImmediateCondition() ...
[08:08:01.365] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.365] | Number of RDS files: 0
[08:08:01.365] | Returned conditions set:
[08:08:01.365] |  list()
[08:08:01.366] readImmediateCondition() ... done
[08:08:01.366] MulticoreFuture #3
[08:08:01.366] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:01.366] | nx: 6
[08:08:01.366] | relay: TRUE
[08:08:01.366] | stdout: TRUE
[08:08:01.366] | signal: TRUE
[08:08:01.367] | resignal: FALSE
[08:08:01.367] | force: TRUE
[08:08:01.367] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.367] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.367] | until=3
[08:08:01.367] | relaying element #3
[08:08:01.367] | value() for MulticoreFuture (<unnamed-42>) ...
[08:08:01.367] | : result() for MulticoreFuture ...
[08:08:01.368] | : . readImmediateCondition() ...
[08:08:01.368] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.368] | : . ' Number of RDS files: 0
[08:08:01.368] | : . ' Returned conditions set:
[08:08:01.368] | : . '  list()
[08:08:01.369] | : . readImmediateCondition() ... done
[08:08:01.369] | : . result() for MulticoreFuture ...
[08:08:01.369] | : . result() for MulticoreFuture ... done
[08:08:01.369] | : . signalConditions() ...
[08:08:01.369] | : . ' include = ‘immediateCondition’
[08:08:01.369] | : . ' exclude = 
[08:08:01.370] | : . ' resignal = FALSE
[08:08:01.370] | : . ' Number of conditions: 6
[08:08:01.370] | : . '  int 6
[08:08:01.370] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.370] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.371] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.371] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.371] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.371] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.371] | : . signalConditions() ... done
[08:08:01.371] | : result() for MulticoreFuture ... done
[08:08:01.371] | : result() for MulticoreFuture ...
[08:08:01.371] | : result() for MulticoreFuture ... done
[08:08:01.372] | : signalConditions() ...
[08:08:01.372] | : . include = ‘immediateCondition’
[08:08:01.372] | : . exclude = 
[08:08:01.372] | : . resignal = FALSE
[08:08:01.372] | : . Number of conditions: 6
[08:08:01.372] | : .  int 6
[08:08:01.373] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.373] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.373] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.373] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.373] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.373] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.373] | : signalConditions() ... done
[08:08:01.373] | : relay stdout ...
[08:08:01.374] | : relay stdout ... done
[08:08:01.374] | : check for misuse ...
[08:08:01.374] | : check for misuse ... done
[08:08:01.374] | value() for MulticoreFuture (<unnamed-42>) ... done
[08:08:01.374] | result() for MulticoreFuture ...
[08:08:01.374] | result() for MulticoreFuture ... done
[08:08:01.374] | signalConditions() ...
[08:08:01.374] | : include = ‘immediateCondition’
[08:08:01.375] | : exclude = 
[08:08:01.375] | : resignal = FALSE
[08:08:01.375] | : Number of conditions: 6
[08:08:01.375] | :  int 6
[08:08:01.375] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.375] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.376] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.376] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.376] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.376] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.376] | signalConditions() ... done
[08:08:01.376] | result() for MulticoreFuture ...
[08:08:01.376] | result() for MulticoreFuture ... done
[08:08:01.376] | signalConditions() ...
[08:08:01.377] | : include = ‘condition’
[08:08:01.377] | : exclude = ‘error’, ‘immediateCondition’
[08:08:01.377] | : resignal = TRUE
[08:08:01.377] | : Number of conditions: 6
[08:08:01.377] | :  int 6
[08:08:01.377] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.378] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.288] | : . ' , attachPackages() ...
[08:08:01.378] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.378] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.289] | : . ' , ; packages: [n=1] ‘future’
[08:08:01.378] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.378] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.289] | : . ' , attachPackages() ... done
[08:08:01.378] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.378] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.289] | : . ' , attachPackages() ...
[08:08:01.379] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.379] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.290] | : . ' , ; packages: [n=0] 
[08:08:01.379] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.379] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.290] | : . ' , attachPackages() ... done
[08:08:01.379] | signalConditions() ... done
[08:08:01.379] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.379] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.380] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:01.380] value(<MulticoreFuture>, ...) ...
[08:08:01.380] value(<MulticoreFuture>, ...) ... done
[08:08:01.380] value() for MulticoreFuture (<unnamed-42>) ...
[08:08:01.380] | result() for MulticoreFuture ...
[08:08:01.380] | result() for MulticoreFuture ... done
[08:08:01.380] | result() for MulticoreFuture ...
[08:08:01.380] | result() for MulticoreFuture ... done
[08:08:01.380] | signalConditions() ...
[08:08:01.381] | : include = ‘immediateCondition’
[08:08:01.381] | : exclude = 
[08:08:01.381] | : resignal = FALSE
[08:08:01.381] | : Number of conditions: 6
[08:08:01.381] | :  int 6
[08:08:01.381] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.382] | : already signaled, skipping
[08:08:01.382] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.382] | : already signaled, skipping
[08:08:01.382] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.382] | : already signaled, skipping
[08:08:01.382] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.382] | : already signaled, skipping
[08:08:01.382] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.382] | : already signaled, skipping
[08:08:01.383] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.383] | : already signaled, skipping
[08:08:01.383] | signalConditions() ... done
[08:08:01.383] | check for misuse ...
[08:08:01.386] | check for misuse ... done
[08:08:01.386] value() for MulticoreFuture (<unnamed-42>) ... done
[08:08:01.386] value: <NULL>
[08:08:01.386] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:01.386] | nx: 6
[08:08:01.386] | relay: TRUE
[08:08:01.386] | stdout: TRUE
[08:08:01.387] | signal: TRUE
[08:08:01.387] | resignal: FALSE
[08:08:01.387] | force: TRUE
[08:08:01.387] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.387] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.387] | until=4
[08:08:01.387] | relaying element #4
[08:08:01.387] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.387] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.388] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:01.388] resolve() for MulticoreFuture ...
[08:08:01.388] resolve() for MulticoreFuture ... done
[08:08:01.388] length: 3 (resolved future 3)

[08:08:01.388] checking value #4:
[08:08:01.388] 'obj' is NULL
[08:08:01.388] signalConditionsASAP(NULL, pos=4) ...
[08:08:01.388] | nx: 6
[08:08:01.389] | relay: TRUE
[08:08:01.389] | stdout: TRUE
[08:08:01.389] | signal: TRUE
[08:08:01.389] | resignal: FALSE
[08:08:01.389] | force: TRUE
[08:08:01.389] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.389] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.389] | until=5
[08:08:01.389] | relaying element #5
[08:08:01.390] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.390] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.390] signalConditionsASAP(NULL, pos=4) ... done
[08:08:01.390] signalConditionsASAP(NULL, pos=4) ...
[08:08:01.390] | nx: 6
[08:08:01.390] | relay: TRUE
[08:08:01.390] | stdout: TRUE
[08:08:01.390] | signal: TRUE
[08:08:01.390] | resignal: FALSE
[08:08:01.390] | force: TRUE
[08:08:01.391] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.391] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.391] | until=5
[08:08:01.391] | relaying element #5
[08:08:01.391] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.391] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.391] signalConditionsASAP(NULL, pos=4) ... done
[08:08:01.391] length: 2 (resolved future 4)

[08:08:01.392] checking value #5:
[08:08:01.392] 'obj' is NULL
[08:08:01.392] signalConditionsASAP(NULL, pos=5) ...
[08:08:01.392] | nx: 6
[08:08:01.392] | relay: TRUE
[08:08:01.392] | stdout: TRUE
[08:08:01.392] | signal: TRUE
[08:08:01.392] | resignal: FALSE
[08:08:01.392] | force: TRUE
[08:08:01.393] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.393] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.393] | until=6
[08:08:01.393] | relaying element #6
[08:08:01.393] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.393] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.393] signalConditionsASAP(NULL, pos=5) ... done
[08:08:01.393] signalConditionsASAP(NULL, pos=5) ...
[08:08:01.394] | nx: 6
[08:08:01.394] | relay: TRUE
[08:08:01.394] | stdout: TRUE
[08:08:01.394] | signal: TRUE
[08:08:01.394] | resignal: FALSE
[08:08:01.394] | force: TRUE
[08:08:01.394] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.394] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.394] | until=6
[08:08:01.394] | relaying element #6
[08:08:01.395] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.395] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.395] signalConditionsASAP(NULL, pos=5) ... done
[08:08:01.395] length: 1 (resolved future 5)

[08:08:01.395] checking value #6:
[08:08:01.395] 'obj' is atomic
[08:08:01.395] signalConditionsASAP(numeric, pos=6) ...
[08:08:01.395] | nx: 6
[08:08:01.396] | relay: TRUE
[08:08:01.396] | stdout: TRUE
[08:08:01.396] | signal: TRUE
[08:08:01.396] | resignal: FALSE
[08:08:01.396] | force: TRUE
[08:08:01.396] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.396] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.396] | until=6
[08:08:01.396] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:01.397] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.397] signalConditionsASAP(numeric, pos=6) ... done
[08:08:01.397] length: 0 (resolved future 6)

[08:08:01.397] Relaying remaining futures ...
[08:08:01.397] | signalConditionsASAP(NULL, pos=0) ...
[08:08:01.397] | : nx: 6
[08:08:01.397] | : relay: TRUE
[08:08:01.397] | : stdout: TRUE
[08:08:01.398] | : signal: TRUE
[08:08:01.398] | : resignal: FALSE
[08:08:01.398] | : force: TRUE
[08:08:01.398] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:01.398] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:01.398] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:01.398] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.398] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:01.399] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
Dimensions: c(1, 6)
[08:08:01.401] future(..., label = NULL) ...
[08:08:01.401] | lazy: FALSE
[08:08:01.401] | stdout: TRUE
[08:08:01.401] | conditions: [n=1] ‘condition’
[08:08:01.402] | gc: FALSE
[08:08:01.402] | earlySignal: FALSE
[08:08:01.402] | getGlobalsAndPackages() ...
[08:08:01.402] | : Searching for globals ...
[08:08:01.404] | : . globals found: [0] 
[08:08:01.404] | : Searching for globals ... done
[08:08:01.404] | : globals: [0] <none>
[08:08:01.404] | : packages: [0] <none>
[08:08:01.404] | getGlobalsAndPackages() ... done
[08:08:01.404] | run() for ‘Future’ (<unnamed-43>) ...
[08:08:01.404] | : state: ‘created’
[08:08:01.405] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.405] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.405] | : Using MulticoreFutureBackend ...
[08:08:01.405] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:08:01.405] | : . Launching futures ...
[08:08:01.405] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:01.405] | : . ' , getFutureData() ...
[08:08:01.406] | : . ' , ; getFutureCore() ...
[08:08:01.406] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:01.406] | : . ' , ; getFutureCore() ... done
[08:08:01.406] | : . ' , ; getFutureCapture() ...
[08:08:01.406] | : . ' , ; getFutureCapture() ... done
[08:08:01.406] | : . ' , ; getFutureContext() ...
[08:08:01.406] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.407] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:01.407] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.407] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:01.407] | : . ' , ; getFutureContext() ... done
[08:08:01.407] | : . ' , getFutureData() ... done
[08:08:01.407] | : . ' , requestCore(..., workers = 2) ...
[08:08:01.408] | : . ' , requestCore(..., workers = 2) ... done
[08:08:01.410] | : . ' , MulticoreFuture started
[08:08:01.411] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:01.411] | : . Launching futures ... done
[08:08:01.411] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:01.411] | : Using MulticoreFutureBackend ... done
[08:08:01.412] | run() for ‘Future’ (<unnamed-43>) ... done
[08:08:01.412] future(..., label = NULL) ... done
[08:08:01.412] future(..., label = NULL) ...
[08:08:01.412] | lazy: FALSE
[08:08:01.412] | stdout: TRUE
[08:08:01.413] | conditions: [n=1] ‘condition’
[08:08:01.413] | gc: FALSE
[08:08:01.413] | earlySignal: FALSE
[08:08:01.413] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.413] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:01.413] | getGlobalsAndPackages() ...
[08:08:01.414] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.414] | : Searching for globals ...
[08:08:01.414] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.414] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.414] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:01.415] | : . ' , ; ` | New stack:
[08:08:01.416] | : . globals found: [0] 
[08:08:01.417] | : Searching for globals ... done
[08:08:01.417] | : globals: [0] <none>
[08:08:01.417] | : packages: [0] <none>
[08:08:01.417] | getGlobalsAndPackages() ... done
[08:08:01.418] | run() for ‘Future’ (<unnamed-44>) ...
[08:08:01.418] | : state: ‘created’
[08:08:01.418] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.418] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.418] | : Using MulticoreFutureBackend ...
[08:08:01.419] | : . Number of futures since start: 3 (3 created, 3 launched, 2 finished)
[08:08:01.419] | : . Launching futures ...
[08:08:01.419] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:01.419] | : . ' , getFutureData() ...
[08:08:01.419] | : . ' , ; getFutureCore() ...
[08:08:01.419] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:01.415] | : . ' , ; ` | List of 1
[08:08:01.415] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.415] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.415] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:01.415] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.415] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.415] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.415] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.415] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.420] | : . ' , ; getFutureCore() ... done
[08:08:01.420] | : . ' , ; ` | Old stack:
[08:08:01.420] | : . ' , ; getFutureCapture() ...
[08:08:01.420] | : . ' , ; getFutureCapture() ... done
[08:08:01.420] | : . ' , ; getFutureContext() ...
[08:08:01.420] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.420] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:01.421] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.421] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:01.421] | : . ' , ; getFutureContext() ... done
[08:08:01.421] | : . ' , getFutureData() ... done
[08:08:01.421] | : . ' , requestCore(..., workers = 2) ...
[08:08:01.422] | : . ' , requestCore(..., workers = 2) ... done
[08:08:01.420] | : . ' , ; ` | List of 1
[08:08:01.420] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.420] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.420] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.420] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.420] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.420] | : . ' , ; ` |     ...)  
[08:08:01.420] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.420] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.420] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.420] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.420] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.420] | : . ' , ; ` |     ...)  
[08:08:01.420] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.420] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.425] | : . ' , ; ` | Not identical
[08:08:01.424] | : . ' , MulticoreFuture started
[08:08:01.425] | : . ' , ; ` | all.equal() for future ...
[08:08:01.425] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:01.426] | : . Launching futures ... done
[08:08:01.426] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:01.427] | : Using MulticoreFutureBackend ... done
[08:08:01.427] | run() for ‘Future’ (<unnamed-44>) ... done
[08:08:01.427] future(..., label = NULL) ... done
List of 6
 $ a:[08:08:01.429] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
 num 1
 $ b:[08:08:01.429] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:01.430] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x556759f44e50> 
 $ c:[08:08:01.430] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.431] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675853dbe0> 
 $  :[08:08:01.431] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:01.431] | : . ' , ; ` | New stack:
 NULL
 $  :[08:08:01.425] | : . ' , ; ` | : List of 2
[08:08:01.425] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.425] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.425] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:01.425] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.425] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.425] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.425] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.425] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.425] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.425] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.425] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.425] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.425] | : . ' , ; ` | :     ...)  
[08:08:01.425] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.425] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.425] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.425] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.425] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.425] | : . ' , ; ` | :     ...)  
[08:08:01.425] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
 NULL
 $  :[08:08:01.433] | : . ' , ; ` | : Formals differ
[08:08:01.433] | : . ' , ; ` | all.equal() for future ... done
 num 6
[08:08:01.433] | : . ' , ; ` | Future strategies differ at level 1
[08:08:01.434] | : . ' , ; ` all.equal() for FutureStrategyList ... done
List of 6
[08:08:01.434] | : . ' , ; ` plan(): Setting new future backend stack:
 $ a:[08:08:01.434] | : . ' , ; ` List of future strategies:
[08:08:01.434] | : . ' , ; ` 1. sequential:
[08:08:01.434] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.434] | : . ' , ; `    - tweaked: FALSE
[08:08:01.434] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
 num 1
 $ b:Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x556759f44e50> 
 $ c:Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675853dbe0> 
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")=[08:08:01.432] | : . ' , ; ` | List of 1
[08:08:01.432] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.432] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.432] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:01.432] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.432] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.432] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.432] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.432] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.438] | : . ' , ; ` | Old stack:
 int [1:2] 1 6
 - attr(*, "dimnames")=[08:08:01.435] | : . ' , ; ` List of 1
[08:08:01.435] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.435] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.435] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:01.435] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.435] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.435] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.435] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.435] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.439] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
List of 2
  ..$ :[08:08:01.439] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.439] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.439] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
 chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
[08:08:01.440] resolved() for matrix ...
[08:08:01.440] | Number of elements: 6
[08:08:01.441] | Number of futures: 6
[08:08:01.439] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.439] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.439] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:01.439] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.439] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.439] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.439] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.442] | : . ' , ; ` | : init: TRUE
[08:08:01.443] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:01.443] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:01.443] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:01.443] | : . ' , ; ` | : .  list()
[08:08:01.438] | : . ' , ; ` | List of 1
[08:08:01.438] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.438] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.438] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.438] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.438] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.438] | : . ' , ; ` |     ...)  
[08:08:01.438] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.438] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.438] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.438] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.438] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.438] | : . ' , ; ` |     ...)  
[08:08:01.438] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.438] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.444] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:01.444] | : . ' , ; ` | Not identical
[08:08:01.444] | : . ' , ; ` | all.equal() for future ...
[08:08:01.444] | : . ' , ; ` | : .  list()
[08:08:01.444] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:01.445] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:01.445] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:01.445] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:01.447] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:01.447] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:01.447] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:01.447] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.447] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:01.448] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.448] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.451] | readImmediateCondition() ...
[08:08:01.451] | : Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.444] | : . ' , ; ` | : List of 2
[08:08:01.444] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = [08:08:01.452] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
FALSE, envir = parent.frame())  
[08:08:01.444] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.444] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:01.444] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.444] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.444] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.444] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.444] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.444] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.444] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.444] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.444] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.444] | : . ' , ; ` | :     ...)  
[08:08:01.444] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.444] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.444] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.444] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.444] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.444] | : . ' , ; ` | :     ...)  
[08:08:01.444] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.452] | : Number of RDS files: 0
[08:08:01.452] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.452] | : Returned conditions set:
[08:08:01.452] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.452] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:01.452] | : . ' , ; ` | : New stack:
[08:08:01.452] | :  list()
[08:08:01.453] | readImmediateCondition() ... done
[08:08:01.453] | : . ' , ; ` | : Formals differ
[08:08:01.453] | : . ' , ; ` | all.equal() for future ... done
[08:08:01.453] | : . ' , ; ` | Future strategies differ at level 1
[08:08:01.453] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:01.454] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:01.454] | : . ' , ; ` List of future strategies:
[08:08:01.454] | : . ' , ; ` 1. sequential:
[08:08:01.454] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.454] | : . ' , ; `    - tweaked: FALSE
[08:08:01.454] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.454] | : . ' , ; ` List of 1
[08:08:01.454] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.454] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.454] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:01.454] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.454] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.454] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.454] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.454] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.453] | : . ' , ; ` | : List of 1
[08:08:01.453] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.453] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.453] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.453] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.453] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.453] | : . ' , ; ` | :     ...)  
[08:08:01.453] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.453] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.453] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.453] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.453] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.453] | : . ' , ; ` | :     ...)  
[08:08:01.453] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.453] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.458] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.458] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.458] | : . ' , ; ` | : Old stack:
[08:08:01.458] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.459] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:01.459] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.459] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.459] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:01.459] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.459] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.459] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.459] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.461] | : . ' , ; ` | : init: TRUE
[08:08:01.462] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:01.462] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:01.462] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:01.462] | : . ' , ; ` | : .  list()
[08:08:01.462] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:01.463] | : . ' , ; ` | : .  list()
[08:08:01.463] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:01.463] | readImmediateCondition() ...
[08:08:01.463] | : Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.458] | : . ' , ; ` | : List of 1
[08:08:01.458] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.458] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.458] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.458] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.458] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.458] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.458] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.458] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c02ef30> 
[08:08:01.458] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.458] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.458] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.464] | : Number of RDS files: 0
[08:08:01.464] | : . ' , ; ` | : Not identical
[08:08:01.464] | : Returned conditions set:
[08:08:01.464] | : . ' , ; ` | : all.equal() for future ...
[08:08:01.464] | :  list()
[08:08:01.464] | readImmediateCondition() ... done
[08:08:01.465] resolved() for matrix ... done
[08:08:01.463] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:01.463] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:01.463] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
 logi [1, 1:6] TRUE FALSE FALSE TRUE TRUE TRUE
 - attr(*, "dimnames")=[08:08:01.465] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:01.466] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
List of 2
  ..$ :[08:08:01.466] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:01.466] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
 chr "a"
  ..$ :[08:08:01.466] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:01.467] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
 chr [1:6] "a" "b" "c" "d" ...
 - attr(*, "names")=[08:08:01.467] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
 chr [1:6] "a" "b" "c" "" ...
[08:08:01.468] value() for matrix ...
[08:08:01.468] | recursive: 0
[08:08:01.468] | reduce: FALSE
[08:08:01.469] | length: 6
[08:08:01.469] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:01.469] | Number of remaining objects: 6
[08:08:01.469] | checking value #1:
[08:08:01.470] | 'obj' is atomic
[08:08:01.470] | signalConditionsASAP(numeric, pos=1) ...
[08:08:01.470] | : nx: 6
[08:08:01.470] | : relay: TRUE
[08:08:01.470] | : stdout: TRUE
[08:08:01.471] | : signal: TRUE
[08:08:01.471] | : resignal: FALSE
[08:08:01.471] | : force: TRUE
[08:08:01.471] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.471] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.471] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.472] | : until=2
[08:08:01.472] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.472] | : relaying element #2
[08:08:01.472] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.472] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.472] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:01.472] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.473] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:01.472] | : . ' , ; ` | : New stack:
[08:08:01.473] | length: 5 (resolved future 1)
[08:08:01.464] | : . ' , ; ` | : . List of 2
[08:08:01.464] | : . ' , ; ` | : .  $ target :function (..., workers = availableCor[08:08:01.473] value() for matrix ... done
es(constraints = "multicore"), gc = FALSE, 
[08:08:01.464] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.464] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.464] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.464] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.464] | : . ' , ; ` | : .     ...)  
[08:08:01.464] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.464] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.464] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:01.464] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.464] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.464] | : . ' , ; ` | : .     ...)  
[08:08:01.464] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.464] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.464] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.464] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.464] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.464] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.464] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.464] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.464] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c02ef30> 
[08:08:01.464] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.464] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.473] checking value #2:
[08:08:01.473] 'obj' is MulticoreFuture
[08:08:01.474] | : . ' , ; ` | : . Formals differ
[08:08:01.474] | : . ' , ; ` | : all.equal() for future ... done
[08:08:01.474] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:01.474] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:01.475] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:01.475] | : . ' , ; ` | List of future strategies:
[08:08:01.475] | : . ' , ; ` | 1. multicore:
[08:08:01.475] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:01.475] | : . ' , ; ` |    - tweaked: FALSE
[08:08:01.475] | : . ' , ; ` |    - call: plan(strategy)
[08:08:01.473] | : . ' , ; ` | : List of 1
[08:08:01.473] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.473] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.473] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.473] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.473] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.473] | : . ' , ; ` | :     ...)  
[08:08:01.473] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.473] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.473] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.473] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.473] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.473] | : . ' , ; ` | :     ...)  
[08:08:01.473] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.473] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.478] | : . ' , ; ` | : Old stack:
[08:08:01.475] | : . ' , ; ` | List of 1
[08:08:01.475] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.475] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.475] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.475] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.475] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.475] | : . ' , ; ` |     ...)  
[08:08:01.475] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.475] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.475] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.475] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.475] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.475] | : . ' , ; ` |     ...)  
[08:08:01.475] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.475] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.481] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.481] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.481] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.481] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.482] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:01.482] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.478] | : . ' , ; ` | : List of 1
[08:08:01.478] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.478] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.478] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.478] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.478] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.478] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.478] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.478] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c2c45e8> 
[08:08:01.478] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.478] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.478] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.482] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.482] | : . ' , ; ` | : Not identical
[08:08:01.482] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.482] | : . ' , ; ` | : all.equal() for future ...
[08:08:01.483] readImmediateCondition() ...
[08:08:01.483] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.483] | Number of RDS files: 0
[08:08:01.483] | Returned conditions set:
[08:08:01.483] |  list()
[08:08:01.484] readImmediateCondition() ... done
[08:08:01.484] MulticoreFuture #2
[08:08:01.484] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:01.485] | nx: 6
[08:08:01.485] | relay: TRUE
[08:08:01.485] | stdout: TRUE
[08:08:01.485] | signal: TRUE
[08:08:01.485] | resignal: FALSE
[08:08:01.486] | force: TRUE
[08:08:01.486] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.486] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.486] | until=2
[08:08:01.486] | relaying element #2
[08:08:01.487] | value() for MulticoreFuture (<unnamed-43>) ...
[08:08:01.487] | : result() for MulticoreFuture ...
[08:08:01.488] | : . readImmediateCondition() ...
[08:08:01.488] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.488] | : . ' Number of RDS files: 0
[08:08:01.489] | : . ' Returned conditions set:
[08:08:01.489] | : . '  list()
[08:08:01.489] | : . readImmediateCondition() ... done
[08:08:01.490] | : . result() for MulticoreFuture ...
[08:08:01.490] | : . result() for MulticoreFuture ... done
[08:08:01.490] | : . signalConditions() ...
[08:08:01.491] | : . ' include = ‘immediateCondition’
[08:08:01.491] | : . ' exclude = 
[08:08:01.491] | : . ' resignal = FALSE
[08:08:01.491] | : . ' Number of conditions: 6
[08:08:01.491] | : . '  int 6
[08:08:01.492] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.492] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.493] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.493] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.493] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.493] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.494] | : . signalConditions() ... done
[08:08:01.494] | : result() for MulticoreFuture ... done
[08:08:01.494] | : result() for MulticoreFuture ...
[08:08:01.494] | : result() for MulticoreFuture ... done
[08:08:01.482] | : . ' , ; ` | : . List of 2
[08:08:01.482] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.482] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.482] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.482] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.482] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.482] | : . ' , ; ` | : .     ...)  
[08:08:01.482] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.482] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.482] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:01.482] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.482] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.482] | : . ' , ; ` | : .     ...)  
[08:08:01.482] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.482] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.482] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.482] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.482] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.482] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.482] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.482] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.482] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' [08:08:01.494] | : signalConditions() ...
<environment: 0x55675c2c45e8> 
[08:08:01.482] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.482] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.495] | : . include = ‘immediateCondition’
[08:08:01.495] | : . exclude = 
[08:08:01.495] | : . resignal = FALSE
[08:08:01.495] | : . Number of conditions: 6
[08:08:01.495] | : . ' , ; ` | : . Formals differ
[08:08:01.496] | : . ' , ; ` | : all.equal() for future ... done
[08:08:01.496] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:01.495] | : .  int 6
[08:08:01.496] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:01.496] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.496] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:01.496] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.497] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.497] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.496] | : . ' , ; ` | List of future strategies:
[08:08:01.496] | : . ' , ; ` | 1. multicore:
[08:08:01.496] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:01.496] | : . ' , ; ` |    - tweaked: FALSE
[08:08:01.496] | : . ' , ; ` |    - call: plan(strategy)
[08:08:01.497] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.497] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.497] | : signalConditions() ... done
[08:08:01.498] | : relay stdout ...
[08:08:01.498] | : relay stdout ... done
[08:08:01.498] | : check for misuse ...
[08:08:01.498] | : check for misuse ... done
[08:08:01.499] | value() for MulticoreFuture (<unnamed-43>) ... done
[08:08:01.499] | result() for MulticoreFuture ...
[08:08:01.499] | result() for MulticoreFuture ... done
[08:08:01.499] | signalConditions() ...
[08:08:01.499] | : include = ‘immediateCondition’
[08:08:01.499] | : exclude = 
[08:08:01.499] | : resignal = FALSE
[08:08:01.499] | : Number of conditions: 6
[08:08:01.500] | :  int 6
[08:08:01.500] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.500] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.500] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.500] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.501] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.501] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.501] | signalConditions() ... done
[08:08:01.501] | result() for MulticoreFuture ...
[08:08:01.501] | result() for MulticoreFuture ... done
[08:08:01.501] | signalConditions() ...
[08:08:01.501] | : include = ‘condition’
[08:08:01.501] | : exclude = ‘error’, ‘immediateCondition’
[08:08:01.502] | : resignal = TRUE
[08:08:01.502] | : Number of conditions: 6
[08:08:01.497] | : . ' , ; ` | List of 1
[08:08:01.497] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.497] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.497] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.497] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.497] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.497] | : . ' , ; ` |     ...)  
[08:08:01.497] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.497] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.497] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.497] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.497] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.497] | : . ' , ; ` |     ...)  
[08:08:01.497] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.497] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.502] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.502] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.502] | :  int 6
[08:08:01.502] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.502] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.502] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.502] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.411] | : . ' , attachPackages() ...
[08:08:01.503] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.503] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:01.503] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.411] | : . ' , ; packages: [n=1] ‘future’
[08:08:01.503] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.503] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.503] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.503] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.412] | : . ' , attachPackages() ... done
[08:08:01.503] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.503] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.503] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.412] | : . ' , attachPackages() ...
[08:08:01.503] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.504] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.412] | : . ' , ; packages: [n=0] 
[08:08:01.504] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.504] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.412] | : . ' , attachPackages() ... done
[08:08:01.504] | signalConditions() ... done
[08:08:01.504] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.504] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.504] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:01.505] value(<MulticoreFuture>, ...) ...
[08:08:01.505] value(<MulticoreFuture>, ...) ... done
[08:08:01.505] value() for MulticoreFuture (<unnamed-43>) ...
[08:08:01.505] | result() for MulticoreFuture ...
[08:08:01.505] | result() for MulticoreFuture ... done
[08:08:01.505] | result() for MulticoreFuture ...
[08:08:01.505] | result() for MulticoreFuture ... done
[08:08:01.505] | signalConditions() ...
[08:08:01.506] | : include = ‘immediateCondition’
[08:08:01.506] | : exclude = 
[08:08:01.506] | : resignal = FALSE
[08:08:01.506] | : Number of conditions: 6
[08:08:01.506] | :  int 6
[08:08:01.507] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.507] | : already signaled, skipping
[08:08:01.507] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.507] | : already signaled, skipping
[08:08:01.507] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.507] | : already signaled, skipping
[08:08:01.507] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.507] | : already signaled, skipping
[08:08:01.507] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.508] | : already signaled, skipping
[08:08:01.508] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.508] | : already signaled, skipping
[08:08:01.508] | signalConditions() ... done
[08:08:01.508] | check for misuse ...
[08:08:01.508] | check for misuse ... done
[08:08:01.508] value() for MulticoreFuture (<unnamed-43>) ... done
[08:08:01.508] value: <numeric>
[08:08:01.509] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:01.509] | nx: 6
[08:08:01.509] | relay: TRUE
[08:08:01.509] | stdout: TRUE
[08:08:01.509] | signal: TRUE
[08:08:01.509] | resignal: FALSE
[08:08:01.509] | force: TRUE
[08:08:01.509] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.509] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.510] | until=3
[08:08:01.510] | relaying element #3
[08:08:01.510] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.510] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.510] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:01.510] resolve() for MulticoreFuture ...
[08:08:01.510] resolve() for MulticoreFuture ... done
[08:08:01.510] length: 4 (resolved future 2)

[08:08:01.511] checking value #3:
[08:08:01.511] 'obj' is MulticoreFuture
[08:08:01.511] readImmediateCondition() ...
[08:08:01.511] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.511] | Number of RDS files: 0
[08:08:01.511] | Returned conditions set:
[08:08:01.512] |  list()
[08:08:01.512] readImmediateCondition() ... done
[08:08:01.512] MulticoreFuture #3
[08:08:01.512] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:01.512] | nx: 6
[08:08:01.512] | relay: TRUE
[08:08:01.512] | stdout: TRUE
[08:08:01.512] | signal: TRUE
[08:08:01.513] | resignal: FALSE
[08:08:01.513] | force: TRUE
[08:08:01.513] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.513] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.513] | until=3
[08:08:01.513] | relaying element #3
[08:08:01.513] | value() for MulticoreFuture (<unnamed-44>) ...
[08:08:01.513] | : result() for MulticoreFuture ...
[08:08:01.514] | : . readImmediateCondition() ...
[08:08:01.514] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.514] | : . ' Number of RDS files: 0
[08:08:01.514] | : . ' Returned conditions set:
[08:08:01.515] | : . '  list()
[08:08:01.515] | : . readImmediateCondition() ... done
[08:08:01.515] | : . result() for MulticoreFuture ...
[08:08:01.515] | : . result() for MulticoreFuture ... done
[08:08:01.515] | : . signalConditions() ...
[08:08:01.516] | : . ' include = ‘immediateCondition’
[08:08:01.516] | : . ' exclude = 
[08:08:01.516] | : . ' resignal = FALSE
[08:08:01.516] | : . ' Number of conditions: 6
[08:08:01.516] | : . '  int 6
[08:08:01.516] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.517] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.517] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.517] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.517] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.517] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.517] | : . signalConditions() ... done
[08:08:01.517] | : result() for MulticoreFuture ... done
[08:08:01.518] | : result() for MulticoreFuture ...
[08:08:01.518] | : result() for MulticoreFuture ... done
[08:08:01.518] | : signalConditions() ...
[08:08:01.518] | : . include = ‘immediateCondition’
[08:08:01.518] | : . exclude = 
[08:08:01.518] | : . resignal = FALSE
[08:08:01.518] | : . Number of conditions: 6
[08:08:01.518] | : .  int 6
[08:08:01.519] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.519] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.519] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.519] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.519] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.520] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.520] | : signalConditions() ... done
[08:08:01.520] | : relay stdout ...
[08:08:01.520] | : relay stdout ... done
[08:08:01.520] | : check for misuse ...
[08:08:01.520] | : check for misuse ... done
[08:08:01.520] | value() for MulticoreFuture (<unnamed-44>) ... done
[08:08:01.520] | result() for MulticoreFuture ...
[08:08:01.520] | result() for MulticoreFuture ... done
[08:08:01.521] | signalConditions() ...
[08:08:01.521] | : include = ‘immediateCondition’
[08:08:01.521] | : exclude = 
[08:08:01.521] | : resignal = FALSE
[08:08:01.521] | : Number of conditions: 6
[08:08:01.521] | :  int 6
[08:08:01.522] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.522] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.522] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.522] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.522] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.522] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.522] | signalConditions() ... done
[08:08:01.522] | result() for MulticoreFuture ...
[08:08:01.523] | result() for MulticoreFuture ... done
[08:08:01.523] | signalConditions() ...
[08:08:01.523] | : include = ‘condition’
[08:08:01.523] | : exclude = ‘error’, ‘immediateCondition’
[08:08:01.523] | : resignal = TRUE
[08:08:01.523] | : Number of conditions: 6
[08:08:01.523] | :  int 6
[08:08:01.524] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.524] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.426] | : . ' , attachPackages() ...
[08:08:01.524] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.524] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.426] | : . ' , ; packages: [n=1] ‘future’
[08:08:01.524] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.524] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.427] | : . ' , attachPackages() ... done
[08:08:01.525] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.525] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.427] | : . ' , attachPackages() ...
[08:08:01.525] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.525] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.427] | : . ' , ; packages: [n=0] 
[08:08:01.525] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.525] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.428] | : . ' , attachPackages() ... done
[08:08:01.525] | signalConditions() ... done
[08:08:01.526] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.526] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.526] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:01.526] value(<MulticoreFuture>, ...) ...
[08:08:01.526] value(<MulticoreFuture>, ...) ... done
[08:08:01.526] value() for MulticoreFuture (<unnamed-44>) ...
[08:08:01.526] | result() for MulticoreFuture ...
[08:08:01.526] | result() for MulticoreFuture ... done
[08:08:01.526] | result() for MulticoreFuture ...
[08:08:01.527] | result() for MulticoreFuture ... done
[08:08:01.527] | signalConditions() ...
[08:08:01.527] | : include = ‘immediateCondition’
[08:08:01.527] | : exclude = 
[08:08:01.527] | : resignal = FALSE
[08:08:01.527] | : Number of conditions: 6
[08:08:01.527] | :  int 6
[08:08:01.528] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.528] | : already signaled, skipping
[08:08:01.528] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.528] | : already signaled, skipping
[08:08:01.528] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.528] | : already signaled, skipping
[08:08:01.528] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.529] | : already signaled, skipping
[08:08:01.529] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.529] | : already signaled, skipping
[08:08:01.529] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.529] | : already signaled, skipping
[08:08:01.529] | signalConditions() ... done
[08:08:01.529] | check for misuse ...
[08:08:01.529] | check for misuse ... done
[08:08:01.529] value() for MulticoreFuture (<unnamed-44>) ... done
[08:08:01.530] value: <NULL>
[08:08:01.530] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:01.530] | nx: 6
[08:08:01.530] | relay: TRUE
[08:08:01.530] | stdout: TRUE
[08:08:01.530] | signal: TRUE
[08:08:01.532] | resignal: FALSE
[08:08:01.532] | force: TRUE
[08:08:01.533] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.533] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.533] | until=4
[08:08:01.533] | relaying element #4
[08:08:01.533] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.533] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.533] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:01.533] resolve() for MulticoreFuture ...
[08:08:01.534] resolve() for MulticoreFuture ... done
[08:08:01.534] length: 3 (resolved future 3)

[08:08:01.534] checking value #4:
[08:08:01.534] 'obj' is NULL
[08:08:01.534] signalConditionsASAP(NULL, pos=4) ...
[08:08:01.534] | nx: 6
[08:08:01.534] | relay: TRUE
[08:08:01.534] | stdout: TRUE
[08:08:01.534] | signal: TRUE
[08:08:01.535] | resignal: FALSE
[08:08:01.535] | force: TRUE
[08:08:01.535] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.535] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.535] | until=5
[08:08:01.535] | relaying element #5
[08:08:01.535] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.535] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.535] signalConditionsASAP(NULL, pos=4) ... done
[08:08:01.536] signalConditionsASAP(NULL, pos=4) ...
[08:08:01.536] | nx: 6
[08:08:01.536] | relay: TRUE
[08:08:01.536] | stdout: TRUE
[08:08:01.536] | signal: TRUE
[08:08:01.536] | resignal: FALSE
[08:08:01.536] | force: TRUE
[08:08:01.536] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.536] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.537] | until=5
[08:08:01.537] | relaying element #5
[08:08:01.537] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.537] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.537] signalConditionsASAP(NULL, pos=4) ... done
[08:08:01.537] length: 2 (resolved future 4)

[08:08:01.537] checking value #5:
[08:08:01.537] 'obj' is NULL
[08:08:01.538] signalConditionsASAP(NULL, pos=5) ...
[08:08:01.538] | nx: 6
[08:08:01.538] | relay: TRUE
[08:08:01.538] | stdout: TRUE
[08:08:01.538] | signal: TRUE
[08:08:01.538] | resignal: FALSE
[08:08:01.538] | force: TRUE
[08:08:01.538] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.538] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.539] | until=6
[08:08:01.539] | relaying element #6
[08:08:01.539] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.539] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.539] signalConditionsASAP(NULL, pos=5) ... done
[08:08:01.539] signalConditionsASAP(NULL, pos=5) ...
[08:08:01.539] | nx: 6
[08:08:01.539] | relay: TRUE
[08:08:01.539] | stdout: TRUE
[08:08:01.540] | signal: TRUE
[08:08:01.540] | resignal: FALSE
[08:08:01.540] | force: TRUE
[08:08:01.540] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.540] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.540] | until=6
[08:08:01.540] | relaying element #6
[08:08:01.540] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.540] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.541] signalConditionsASAP(NULL, pos=5) ... done
[08:08:01.541] length: 1 (resolved future 5)

[08:08:01.541] checking value #6:
[08:08:01.541] 'obj' is atomic
[08:08:01.541] signalConditionsASAP(numeric, pos=6) ...
[08:08:01.541] | nx: 6
[08:08:01.541] | relay: TRUE
[08:08:01.541] | stdout: TRUE
[08:08:01.542] | signal: TRUE
[08:08:01.542] | resignal: FALSE
[08:08:01.542] | force: TRUE
[08:08:01.542] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.542] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.542] | until=6
[08:08:01.542] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:01.542] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.542] signalConditionsASAP(numeric, pos=6) ... done
[08:08:01.543] length: 0 (resolved future 6)

[08:08:01.543] Relaying remaining futures ...
[08:08:01.543] | signalConditionsASAP(NULL, pos=0) ...
[08:08:01.543] | : nx: 6
[08:08:01.543] | : relay: TRUE
[08:08:01.543] | : stdout: TRUE
[08:08:01.543] | : signal: TRUE
[08:08:01.543] | : resignal: FALSE
[08:08:01.544] | : force: TRUE
[08:08:01.544] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:01.544] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:01.544] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:01.544] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.544] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:01.544] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 1 6
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
Dimensions: c(2, 3)
[08:08:01.548] future(..., label = NULL) ...
[08:08:01.548] | lazy: FALSE
[08:08:01.549] | stdout: TRUE
[08:08:01.549] | conditions: [n=1] ‘condition’
[08:08:01.549] | gc: FALSE
[08:08:01.549] | earlySignal: FALSE
[08:08:01.549] | getGlobalsAndPackages() ...
[08:08:01.549] | : Searching for globals ...
[08:08:01.551] | : . globals found: [0] 
[08:08:01.551] | : Searching for globals ... done
[08:08:01.551] | : globals: [0] <none>
[08:08:01.551] | : packages: [0] <none>
[08:08:01.551] | getGlobalsAndPackages() ... done
[08:08:01.552] | run() for ‘Future’ (<unnamed-45>) ...
[08:08:01.552] | : state: ‘created’
[08:08:01.552] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.552] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.552] | : Using MulticoreFutureBackend ...
[08:08:01.552] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:01.553] | : . Launching futures ...
[08:08:01.553] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:01.553] | : . ' , getFutureData() ...
[08:08:01.553] | : . ' , ; getFutureCore() ...
[08:08:01.553] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:01.553] | : . ' , ; getFutureCore() ... done
[08:08:01.553] | : . ' , ; getFutureCapture() ...
[08:08:01.553] | : . ' , ; getFutureCapture() ... done
[08:08:01.554] | : . ' , ; getFutureContext() ...
[08:08:01.554] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.554] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:01.554] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.554] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:01.554] | : . ' , ; getFutureContext() ... done
[08:08:01.554] | : . ' , getFutureData() ... done
[08:08:01.555] | : . ' , requestCore(..., workers = 2) ...
[08:08:01.555] | : . ' , requestCore(..., workers = 2) ... done
[08:08:01.557] | : . ' , MulticoreFuture started
[08:08:01.558] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:01.558] | : . Launching futures ... done
[08:08:01.558] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:01.558] | : Using MulticoreFutureBackend ... done
[08:08:01.558] | run() for ‘Future’ (<unnamed-45>) ... done
[08:08:01.559] future(..., label = NULL) ... done
[08:08:01.559] future(..., label = NULL) ...
[08:08:01.559] | lazy: FALSE
[08:08:01.559] | stdout: TRUE
[08:08:01.559] | conditions: [n=1] ‘condition’
[08:08:01.560] | gc: FALSE
[08:08:01.560] | earlySignal: FALSE
[08:08:01.560] | getGlobalsAndPackages() ...
[08:08:01.560] | : Searching for globals ...
[08:08:01.560] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.561] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:01.561] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.561] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.562] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.562] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:01.562] | : . ' , ; ` | New stack:
[08:08:01.563] | : . globals found: [0] 
[08:08:01.563] | : Searching for globals ... done
[08:08:01.563] | : globals: [0] <none>
[08:08:01.563] | : packages: [0] <none>
[08:08:01.564] | getGlobalsAndPackages() ... done
[08:08:01.564] | run() for ‘Future’ (<unnamed-46>) ...
[08:08:01.564] | : state: ‘created’
[08:08:01.564] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.565] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.565] | : Using MulticoreFutureBackend ...
[08:08:01.565] | : . Number of futures since start: 5 (5 created, 5 launched, 4 finished)
[08:08:01.565] | : . Launching futures ...
[08:08:01.565] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:01.566] | : . ' , getFutureData() ...
[08:08:01.566] | : . ' , ; getFutureCore() ...
[08:08:01.566] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:01.566] | : . ' , ; getFutureCore() ... done
[08:08:01.566] | : . ' , ; getFutureCapture() ...
[08:08:01.566] | : . ' , ; getFutureCapture() ... done
[08:08:01.562] | : . ' , ; ` | List of 1
[08:08:01.562] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.562] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.562] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:01.562] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.562] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.562] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.562] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.562] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.566] | : . ' , ; getFutureContext() ...
[08:08:01.567] | : . ' , ; ` | Old stack:
[08:08:01.567] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.567] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:01.567] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.567] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:01.567] | : . ' , ; getFutureContext() ... done
[08:08:01.568] | : . ' , getFutureData() ... done
[08:08:01.568] | : . ' , requestCore(..., workers = 2) ...
[08:08:01.568] | : . ' , requestCore(..., workers = 2) ... done
[08:08:01.571] | : . ' , MulticoreFuture started
[08:08:01.571] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:01.567] | : . ' , ; ` | List of 1
[08:08:01.567] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.567] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.567] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.567] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.567] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.567] | : . ' , ; ` |     ...)  
[08:08:01.567] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.567] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.567] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.567] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.567] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.567] | : . ' , ; ` |     ...)  
[08:08:01.567] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.567] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.572] | : . ' , ; ` | Not identical
[08:08:01.571] | : . Launching futures ... done
[08:08:01.572] | : . ' , ; ` | all.equal() for future ...
[08:08:01.572] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:01.572] | : Using MulticoreFutureBackend ... done
[08:08:01.572] | run() for ‘Future’ (<unnamed-46>) ... done
[08:08:01.573] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:[08:08:01.575] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x556759ebb930> 
 $ c:[08:08:01.575] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:01.576] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675844f310> 
 $  :[08:08:01.576] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
 NULL
 $  :[08:08:01.576] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.577] | : . ' , ; ` all.equal() for FutureStrategyList ...
 NULL
 $  :[08:08:01.577] | : . ' , ; ` | New stack:
 num 6
List of 6
 $ a: num 1
 $ b:[08:08:01.572] | : . ' , ; ` | : List of 2
[08:08:01.572] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.572] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.572] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:01.572] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.572] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.572] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.572] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.572] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.572] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.572] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.572] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.572] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.572] | : . ' , ; ` | :     ...)  
[08:08:01.572] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.572] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.572] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.572] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.572] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.572] | : . ' , ; ` | :     ...)  
[08:08:01.572] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x556759ebb930> 
 $ c:[08:08:01.580] | : . ' , ; ` | : Formals differ
[08:08:01.580] | : . ' , ; ` | all.equal() for future ... done
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' [08:08:01.580] | : . ' , ; ` | Future strategies differ at level 1
<environment: 0x55675844f310> 
 $  :[08:08:01.580] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:01.580] | : . ' , ; ` plan(): Setting new future backend stack:
 NULL
 $  : NULL
 $  :[08:08:01.580] | : . ' , ; ` List of future strategies:
[08:08:01.580] | : . ' , ; ` 1. sequential:
[08:08:01.580] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.580] | : . ' , ; `    - tweaked: FALSE
[08:08:01.580] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
 num 6
 - attr(*, "dim")= int [1:2] 2 3
 - attr(*, "dimnames")=[08:08:01.577] | : . ' , ; ` | List of 1
[08:08:01.577] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.577] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.577] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:01.577] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.577] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.577] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.577] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.577] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.583] | : . ' , ; ` | Old stack:
List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
[08:08:01.584] resolved() for matrix ...
[08:08:01.581] | : . ' , ; ` List of 1
[08:08:01.581] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.581] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.581] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:01.581] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.581] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.581] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.581] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.581] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.585] | Number of elements: 6
[08:08:01.585] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.585] | Number of futures: 6
[08:08:01.585] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.585] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.585] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:01.586] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.586] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.586] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:01.586] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.586] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.586] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.586] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.583] | : . ' , ; ` | List of 1
[08:08:01.583] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.583] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.583] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.583] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.583] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.583] | : . ' , ; ` |     ...)  
[08:08:01.583] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.583] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.583] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.583] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.583] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.583] | : . ' , ; ` |     ...)  
[08:08:01.583] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.583] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.589] | : . ' , ; ` | : init: TRUE
[08:08:01.589] | : . ' , ; ` | Not identical
[08:08:01.589] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:01.589] | : . ' , ; ` | all.equal() for future ...
[08:08:01.589] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:01.589] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:01.589] | : . ' , ; ` | : .  list()
[08:08:01.590] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:01.590] | : . ' , ; ` | : .  list()
[08:08:01.590] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:01.590] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:01.590] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:01.590] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:01.592] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:01.592] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:01.592] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:01.592] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.593] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:01.593] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.593] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.595] | readImmediateCondition() ...
[08:08:01.596] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.596] | : Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.596] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.596] | : Number of RDS files: 0
[08:08:01.596] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.596] | : Returned conditions set:
[08:08:01.596] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:01.589] | : . ' , ; ` | : List of 2
[08:08:01.589] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.589] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.589] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:01.589] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.589] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.589] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.589] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.589] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.589] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.589] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.589] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.589] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.589] | : . ' , ; ` | :     ...)  
[08:08:01.589] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.589] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.589] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.589] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.589] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.589] | : . ' , ; ` | :     ...)  
[08:08:01.589] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.596] | : . ' , ; ` | : New stack:
[08:08:01.596] | :  list()
[08:08:01.597] | readImmediateCondition() ... done
[08:08:01.597] | : . ' , ; ` | : Formals differ
[08:08:01.598] | : . ' , ; ` | all.equal() for future ... done
[08:08:01.598] | : . ' , ; ` | Future strategies differ at level 1
[08:08:01.598] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:01.598] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:01.598] | : . ' , ; ` List of future strategies:
[08:08:01.598] | : . ' , ; ` 1. sequential:
[08:08:01.598] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.598] | : . ' , ; `    - tweaked: FALSE
[08:08:01.598] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.597] | : . ' , ; ` | : List of 1
[08:08:01.597] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.597] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.597] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.597] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.597] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.597] | : . ' , ; ` | :     ...)  
[08:08:01.597] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.597] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.597] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.597] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.597] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.597] | : . ' , ; ` | :     ...)  
[08:08:01.597] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.597] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.601] | : . ' , ; ` | : Old stack:
[08:08:01.599] | : . ' , ; ` List of 1
[08:08:01.599] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.599] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.599] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:01.599] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.599] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.599] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.599] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.599] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.603] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.603] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.603] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.603] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:01.601] | : . ' , ; ` | : List of 1
[08:08:01.601] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.601] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.601] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.601] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.601] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.601] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.601] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.601] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c0669c8> 
[08:08:01.601] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.601] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.601] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.606] | : . ' , ; ` | : Not identical
[08:08:01.606] | : . ' , ; ` | : all.equal() for future ...
[08:08:01.603] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.603] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.603] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:01.603] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.603] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.603] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.603] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.606] | : . ' , ; ` | : init: TRUE
[08:08:01.606] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:01.606] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:01.607] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:01.607] | : . ' , ; ` | : .  list()
[08:08:01.607] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:01.607] | : . ' , ; ` | : .  list()
[08:08:01.607] | readImmediateCondition() ...
[08:08:01.608] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:01.608] | : Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.608] | : Number of RDS files: 0
[08:08:01.608] | : Returned conditions set:
[08:08:01.608] | :  list()
[08:08:01.609] | readImmediateCondition() ... done
[08:08:01.609] resolved() for matrix ... done
[08:08:01.608] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:01.608] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:01.608] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
 logi [1:2, 1:3] TRUE FALSE FALSE TRUE TRUE TRUE
 - attr(*, "dimnames")=[08:08:01.610] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
List of 2
  ..$ :[08:08:01.610] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:01.611] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
 chr [1:2] "a" "b"
  ..$ :[08:08:01.611] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.611] | : . ' , ; ` plan(): nbrOfWorkers() = 1
 chr [1:3] "a" "b" "c"
 - attr(*, "names")=[08:08:01.611] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.612] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
 chr [1:6] "a" "b" "c" "" ...
[08:08:01.612] value() for matrix ...
[08:08:01.612] | recursive: 0
[08:08:01.613] | reduce: FALSE
[08:08:01.606] | : . ' , ; ` | : . List of 2
[08:08:01.606] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.606] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.606] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.606] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.606] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.606] | : . ' , ; ` | : .     ...)  
[08:08:01.606] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.606] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.606] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:01.606] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.606] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.606] | : . ' , ; ` | : .     ...)  
[08:08:01.606] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.606] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.606] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.606] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.606] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.606] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.606] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.606] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.606] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c0669c8> 
[08:08:01.606] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.606] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.613] | length: 6
[08:08:01.613] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:01.614] | Number of remaining objects: 6
[08:08:01.614] | : . ' , ; ` | : . Formals differ
[08:08:01.614] | checking value #1:
[08:08:01.614] | : . ' , ; ` | : all.equal() for future ... done
[08:08:01.614] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:01.614] | 'obj' is atomic
[08:08:01.614] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:01.614] | signalConditionsASAP(numeric, pos=1) ...
[08:08:01.614] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:01.614] | : nx: 6
[08:08:01.615] | : relay: TRUE
[08:08:01.615] | : . ' , ; ` | List of future strategies:
[08:08:01.615] | : . ' , ; ` | 1. multicore:
[08:08:01.615] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:01.615] | : . ' , ; ` |    - tweaked: FALSE
[08:08:01.615] | : . ' , ; ` |    - call: plan(strategy)
[08:08:01.615] | : stdout: TRUE
[08:08:01.615] | : signal: TRUE
[08:08:01.615] | : resignal: FALSE
[08:08:01.615] | : force: TRUE
[08:08:01.616] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.616] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.616] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.616] | : until=2
[08:08:01.616] | : relaying element #2
[08:08:01.616] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.617] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.617] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.617] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.617] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:01.617] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:01.617] | : . ' , ; ` | : New stack:
[08:08:01.617] | length: 5 (resolved future 1)
[08:08:01.617] value() for matrix ... done
[08:08:01.618] checking value #2:
[08:08:01.618] 'obj' is MulticoreFuture
[08:08:01.615] | : . ' , ; ` | List of 1
[08:08:01.615] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.615] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.615] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.615] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.615] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.615] | : . ' , ; ` |     ...)  
[08:08:01.615] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.615] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.615] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.615] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.615] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.615] | : . ' , ; ` |     ...)  
[08:08:01.615] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.615] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.619] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.620] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.620] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.620] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.620] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:01.620] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.620] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.621] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.621] readImmediateCondition() ...
[08:08:01.621] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.621] | Number of RDS files: 0
[08:08:01.622] | Returned conditions set:
[08:08:01.622] |  list()
[08:08:01.622] readImmediateCondition() ... done
[08:08:01.617] | : . ' , ; ` | : List of 1
[08:08:01.617] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.617] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.617] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.617] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.617] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.617] | : . ' , ; ` | :     ...)  
[08:08:01.617] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.617] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.617] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.617] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.617] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.617] | : . ' , ; ` | :     ...)  
[08:08:01.617] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.617] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.623] MulticoreFuture #2
[08:08:01.623] | : . ' , ; ` | : Old stack:
[08:08:01.623] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:01.623] | nx: 6
[08:08:01.623] | relay: TRUE
[08:08:01.623] | stdout: TRUE
[08:08:01.624] | signal: TRUE
[08:08:01.624] | resignal: FALSE
[08:08:01.624] | force: TRUE
[08:08:01.624] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.624] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.625] | until=2
[08:08:01.625] | relaying element #2
[08:08:01.625] | value() for MulticoreFuture (<unnamed-45>) ...
[08:08:01.625] | : result() for MulticoreFuture ...
[08:08:01.626] | : . readImmediateCondition() ...
[08:08:01.626] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.627] | : . ' Number of RDS files: 0
[08:08:01.627] | : . ' Returned conditions set:
[08:08:01.627] | : . '  list()
[08:08:01.628] | : . readImmediateCondition() ... done
[08:08:01.628] | : . result() for MulticoreFuture ...
[08:08:01.628] | : . result() for MulticoreFuture ... done
[08:08:01.629] | : . signalConditions() ...
[08:08:01.629] | : . ' include = ‘immediateCondition’
[08:08:01.629] | : . ' exclude = 
[08:08:01.629] | : . ' resignal = FALSE
[08:08:01.629] | : . ' Number of conditions: 6
[08:08:01.623] | : . ' , ; ` | : List of 1
[08:08:01.623] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.623] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.623] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.623] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.623] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.623] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.623] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.623] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c2ffc90> 
[08:08:01.623] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.623] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.623] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.630] | : . ' , ; ` | : Not identical
[08:08:01.630] | : . '  int 6
[08:08:01.630] | : . ' , ; ` | : all.equal() for future ...
[08:08:01.630] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.631] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.631] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.631] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.631] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.632] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.632] | : . signalConditions() ... done
[08:08:01.632] | : result() for MulticoreFuture ... done
[08:08:01.632] | : result() for MulticoreFuture ...
[08:08:01.632] | : result() for MulticoreFuture ... done
[08:08:01.633] | : signalConditions() ...
[08:08:01.633] | : . include = ‘immediateCondition’
[08:08:01.633] | : . exclude = 
[08:08:01.633] | : . resignal = FALSE
[08:08:01.633] | : . Number of conditions: 6
[08:08:01.634] | : .  int 6
[08:08:01.634] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.635] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.635] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.635] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.635] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.635] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.636] | : signalConditions() ... done
[08:08:01.636] | : relay stdout ...
[08:08:01.636] | : relay stdout ... done
[08:08:01.636] | : check for misuse ...
[08:08:01.636] | : check for misuse ... done
[08:08:01.637] | value() for MulticoreFuture (<unnamed-45>) ... done
[08:08:01.637] | result() for MulticoreFuture ...
[08:08:01.637] | result() for MulticoreFuture ... done
[08:08:01.637] | signalConditions() ...
[08:08:01.637] | : include = ‘immediateCondition’
[08:08:01.638] | : exclude = 
[08:08:01.638] | : resignal = FALSE
[08:08:01.638] | : Number of conditions: 6
[08:08:01.638] | :  int 6
[08:08:01.639] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.639] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.639] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.640] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.640] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.640] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.640] | signalConditions() ... done
[08:08:01.641] | result() for MulticoreFuture ...
[08:08:01.641] | result() for MulticoreFuture ... done
[08:08:01.641] | signalConditions() ...
[08:08:01.641] | : include = ‘condition’
[08:08:01.641] | : exclude = ‘error’, ‘immediateCondition’
[08:08:01.642] | : resignal = TRUE
[08:08:01.642] | : Number of conditions: 6
[08:08:01.630] | : . ' , ; ` | : . List of 2
[08:08:01.630] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.630] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.630] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.630] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.630] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.630] | : . ' , ; ` | : .     ...)  
[08:08:01.630] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.630] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.630] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:01.630] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.630] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.630] | : . ' , ; ` | : .     ...)  
[08:08:01.630] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.630] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.630] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.630] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.630] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.630] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "inte[08:08:01.642] | :  int 6
rrupts" ...
[08:08:01.630] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.630] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.630] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c2ffc90> 
[08:08:01.630] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.630] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.643] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.643] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.558] | : . ' , attachPackages() ...
[08:08:01.643] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.643] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.643] | : . ' , ; ` | : . Formals differ
[08:08:01.559] | : . ' , ; packages: [n=1] ‘future’
[08:08:01.643] | : . ' , ; ` | : all.equal() for future ... done
[08:08:01.644] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.644] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:01.644] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.559] | : . ' , attachPackages() ... done
[08:08:01.644] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:01.644] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.644] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:01.644] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.559] | : . ' , attachPackages() ...
[08:08:01.644] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.645] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.559] | : . ' , ; packages: [n=0] 
[08:08:01.644] | : . ' , ; ` | List of future strategies:
[08:08:01.644] | : . ' , ; ` | 1. multicore:
[08:08:01.644] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:01.644] | : . ' , ; ` |    - tweaked: FALSE
[08:08:01.644] | : . ' , ; ` |    - call: plan(strategy)
[08:08:01.645] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.645] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.560] | : . ' , attachPackages() ... done
[08:08:01.645] | signalConditions() ... done
[08:08:01.646] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.646] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.646] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:01.646] value(<MulticoreFuture>, ...) ...
[08:08:01.646] value(<MulticoreFuture>, ...) ... done
[08:08:01.647] value() for MulticoreFuture (<unnamed-45>) ...
[08:08:01.647] | result() for MulticoreFuture ...
[08:08:01.647] | result() for MulticoreFuture ... done
[08:08:01.647] | result() for MulticoreFuture ...
[08:08:01.647] | result() for MulticoreFuture ... done
[08:08:01.648] | signalConditions() ...
[08:08:01.648] | : include = ‘immediateCondition’
[08:08:01.648] | : exclude = 
[08:08:01.648] | : resignal = FALSE
[08:08:01.648] | : Number of conditions: 6
[08:08:01.649] | :  int 6
[08:08:01.649] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.650] | : already signaled, skipping
[08:08:01.650] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.650] | : already signaled, skipping
[08:08:01.650] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.650] | : already signaled, skipping
[08:08:01.651] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.651] | : already signaled, skipping
[08:08:01.651] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.651] | : already signaled, skipping
[08:08:01.651] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.652] | : already signaled, skipping
[08:08:01.652] | signalConditions() ... done
[08:08:01.645] | : . ' , ; ` | List of 1
[08:08:01.645] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.645] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.645] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.645] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.645] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.645] | : . ' , ; ` |     ...)  
[08:08:01.645] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.645] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.645] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.645] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.645] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.645] | : . ' , ; ` |     ...)  
[08:08:01.645] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.645] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.652] | check for misuse ...
[08:08:01.652] | check for misuse ... done
[08:08:01.652] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.652] value() for MulticoreFuture (<unnamed-45>) ... done
[08:08:01.652] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.652] value: <numeric>
[08:08:01.653] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.653] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:01.653] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.653] | nx: 6
[08:08:01.653] | relay: TRUE
[08:08:01.653] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:01.653] | stdout: TRUE
[08:08:01.653] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.653] | signal: TRUE
[08:08:01.654] | resignal: FALSE
[08:08:01.654] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.654] | force: TRUE
[08:08:01.654] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.654] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.654] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.654] | until=3
[08:08:01.654] | relaying element #3
[08:08:01.654] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.655] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.655] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:01.655] resolve() for MulticoreFuture ...
[08:08:01.655] resolve() for MulticoreFuture ... done
[08:08:01.655] length: 4 (resolved future 2)

[08:08:01.655] checking value #3:
[08:08:01.655] 'obj' is MulticoreFuture
[08:08:01.656] readImmediateCondition() ...
[08:08:01.656] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.656] | Number of RDS files: 0
[08:08:01.656] | Returned conditions set:
[08:08:01.656] |  list()
[08:08:01.657] readImmediateCondition() ... done
[08:08:01.657] MulticoreFuture #3
[08:08:01.657] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:01.657] | nx: 6
[08:08:01.657] | relay: TRUE
[08:08:01.657] | stdout: TRUE
[08:08:01.657] | signal: TRUE
[08:08:01.657] | resignal: FALSE
[08:08:01.657] | force: TRUE
[08:08:01.658] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.658] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.658] | until=3
[08:08:01.658] | relaying element #3
[08:08:01.658] | value() for MulticoreFuture (<unnamed-46>) ...
[08:08:01.658] | : result() for MulticoreFuture ...
[08:08:01.659] | : . readImmediateCondition() ...
[08:08:01.659] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.659] | : . ' Number of RDS files: 0
[08:08:01.659] | : . ' Returned conditions set:
[08:08:01.659] | : . '  list()
[08:08:01.660] | : . readImmediateCondition() ... done
[08:08:01.660] | : . result() for MulticoreFuture ...
[08:08:01.660] | : . result() for MulticoreFuture ... done
[08:08:01.661] | : . signalConditions() ...
[08:08:01.661] | : . ' include = ‘immediateCondition’
[08:08:01.661] | : . ' exclude = 
[08:08:01.661] | : . ' resignal = FALSE
[08:08:01.661] | : . ' Number of conditions: 6
[08:08:01.661] | : . '  int 6
[08:08:01.662] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.662] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.662] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.662] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.663] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.663] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.663] | : . signalConditions() ... done
[08:08:01.663] | : result() for MulticoreFuture ... done
[08:08:01.663] | : result() for MulticoreFuture ...
[08:08:01.664] | : result() for MulticoreFuture ... done
[08:08:01.664] | : signalConditions() ...
[08:08:01.664] | : . include = ‘immediateCondition’
[08:08:01.664] | : . exclude = 
[08:08:01.664] | : . resignal = FALSE
[08:08:01.664] | : . Number of conditions: 6
[08:08:01.665] | : .  int 6
[08:08:01.665] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.665] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.665] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.666] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.666] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.666] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.666] | : signalConditions() ... done
[08:08:01.666] | : relay stdout ...
[08:08:01.666] | : relay stdout ... done
[08:08:01.666] | : check for misuse ...
[08:08:01.666] | : check for misuse ... done
[08:08:01.666] | value() for MulticoreFuture (<unnamed-46>) ... done
[08:08:01.667] | result() for MulticoreFuture ...
[08:08:01.667] | result() for MulticoreFuture ... done
[08:08:01.667] | signalConditions() ...
[08:08:01.667] | : include = ‘immediateCondition’
[08:08:01.667] | : exclude = 
[08:08:01.667] | : resignal = FALSE
[08:08:01.667] | : Number of conditions: 6
[08:08:01.667] | :  int 6
[08:08:01.668] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.668] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.668] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.668] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.668] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.668] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.669] | signalConditions() ... done
[08:08:01.669] | result() for MulticoreFuture ...
[08:08:01.669] | result() for MulticoreFuture ... done
[08:08:01.669] | signalConditions() ...
[08:08:01.669] | : include = ‘condition’
[08:08:01.669] | : exclude = ‘error’, ‘immediateCondition’
[08:08:01.669] | : resignal = TRUE
[08:08:01.669] | : Number of conditions: 6
[08:08:01.670] | :  int 6
[08:08:01.670] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.670] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.572] | : . ' , attachPackages() ...
[08:08:01.670] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.670] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.572] | : . ' , ; packages: [n=1] ‘future’
[08:08:01.671] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.671] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.573] | : . ' , attachPackages() ... done
[08:08:01.671] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.671] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.573] | : . ' , attachPackages() ...
[08:08:01.671] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.671] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.573] | : . ' , ; packages: [n=0] 
[08:08:01.671] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.672] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.574] | : . ' , attachPackages() ... done
[08:08:01.672] | signalConditions() ... done
[08:08:01.672] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.672] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.672] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:01.672] value(<MulticoreFuture>, ...) ...
[08:08:01.672] value(<MulticoreFuture>, ...) ... done
[08:08:01.672] value() for MulticoreFuture (<unnamed-46>) ...
[08:08:01.673] | result() for MulticoreFuture ...
[08:08:01.673] | result() for MulticoreFuture ... done
[08:08:01.673] | result() for MulticoreFuture ...
[08:08:01.673] | result() for MulticoreFuture ... done
[08:08:01.673] | signalConditions() ...
[08:08:01.673] | : include = ‘immediateCondition’
[08:08:01.673] | : exclude = 
[08:08:01.673] | : resignal = FALSE
[08:08:01.674] | : Number of conditions: 6
[08:08:01.674] | :  int 6
[08:08:01.674] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.674] | : already signaled, skipping
[08:08:01.674] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.674] | : already signaled, skipping
[08:08:01.675] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.675] | : already signaled, skipping
[08:08:01.675] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.675] | : already signaled, skipping
[08:08:01.675] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.675] | : already signaled, skipping
[08:08:01.675] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.675] | : already signaled, skipping
[08:08:01.675] | signalConditions() ... done
[08:08:01.676] | check for misuse ...
[08:08:01.676] | check for misuse ... done
[08:08:01.678] value() for MulticoreFuture (<unnamed-46>) ... done
[08:08:01.678] value: <NULL>
[08:08:01.678] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:01.678] | nx: 6
[08:08:01.678] | relay: TRUE
[08:08:01.679] | stdout: TRUE
[08:08:01.679] | signal: TRUE
[08:08:01.679] | resignal: FALSE
[08:08:01.679] | force: TRUE
[08:08:01.679] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.679] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.679] | until=4
[08:08:01.679] | relaying element #4
[08:08:01.679] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.679] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.680] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:01.680] resolve() for MulticoreFuture ...
[08:08:01.680] resolve() for MulticoreFuture ... done
[08:08:01.680] length: 3 (resolved future 3)

[08:08:01.680] checking value #4:
[08:08:01.680] 'obj' is NULL
[08:08:01.680] signalConditionsASAP(NULL, pos=4) ...
[08:08:01.681] | nx: 6
[08:08:01.681] | relay: TRUE
[08:08:01.681] | stdout: TRUE
[08:08:01.681] | signal: TRUE
[08:08:01.681] | resignal: FALSE
[08:08:01.681] | force: TRUE
[08:08:01.681] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.681] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.681] | until=5
[08:08:01.682] | relaying element #5
[08:08:01.682] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.682] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.682] signalConditionsASAP(NULL, pos=4) ... done
[08:08:01.682] signalConditionsASAP(NULL, pos=4) ...
[08:08:01.682] | nx: 6
[08:08:01.682] | relay: TRUE
[08:08:01.682] | stdout: TRUE
[08:08:01.682] | signal: TRUE
[08:08:01.683] | resignal: FALSE
[08:08:01.683] | force: TRUE
[08:08:01.683] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.683] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.683] | until=5
[08:08:01.683] | relaying element #5
[08:08:01.683] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.683] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.683] signalConditionsASAP(NULL, pos=4) ... done
[08:08:01.684] length: 2 (resolved future 4)

[08:08:01.684] checking value #5:
[08:08:01.684] 'obj' is NULL
[08:08:01.684] signalConditionsASAP(NULL, pos=5) ...
[08:08:01.684] | nx: 6
[08:08:01.684] | relay: TRUE
[08:08:01.684] | stdout: TRUE
[08:08:01.684] | signal: TRUE
[08:08:01.685] | resignal: FALSE
[08:08:01.685] | force: TRUE
[08:08:01.685] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.685] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.685] | until=6
[08:08:01.685] | relaying element #6
[08:08:01.685] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.685] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.685] signalConditionsASAP(NULL, pos=5) ... done
[08:08:01.686] signalConditionsASAP(NULL, pos=5) ...
[08:08:01.686] | nx: 6
[08:08:01.686] | relay: TRUE
[08:08:01.686] | stdout: TRUE
[08:08:01.686] | signal: TRUE
[08:08:01.686] | resignal: FALSE
[08:08:01.686] | force: TRUE
[08:08:01.686] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.686] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.687] | until=6
[08:08:01.687] | relaying element #6
[08:08:01.687] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.687] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.687] signalConditionsASAP(NULL, pos=5) ... done
[08:08:01.687] length: 1 (resolved future 5)

[08:08:01.687] checking value #6:
[08:08:01.687] 'obj' is atomic
[08:08:01.688] signalConditionsASAP(numeric, pos=6) ...
[08:08:01.688] | nx: 6
[08:08:01.688] | relay: TRUE
[08:08:01.688] | stdout: TRUE
[08:08:01.688] | signal: TRUE
[08:08:01.688] | resignal: FALSE
[08:08:01.688] | force: TRUE
[08:08:01.688] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.688] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.689] | until=6
[08:08:01.689] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:01.689] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.689] signalConditionsASAP(numeric, pos=6) ... done
[08:08:01.689] length: 0 (resolved future 6)

[08:08:01.689] Relaying remaining futures ...
[08:08:01.689] | signalConditionsASAP(NULL, pos=0) ...
[08:08:01.690] | : nx: 6
[08:08:01.690] | : relay: TRUE
[08:08:01.690] | : stdout: TRUE
[08:08:01.690] | : signal: TRUE
[08:08:01.690] | : resignal: FALSE
[08:08:01.690] | : force: TRUE
[08:08:01.690] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:01.690] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:01.691] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:01.691] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.691] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:01.691] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 2 3
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
Dimensions: c(2, 3, 1)
[08:08:01.695] future(..., label = NULL) ...
[08:08:01.695] | lazy: FALSE
[08:08:01.695] | stdout: TRUE
[08:08:01.695] | conditions: [n=1] ‘condition’
[08:08:01.695] | gc: FALSE
[08:08:01.696] | earlySignal: FALSE
[08:08:01.696] | getGlobalsAndPackages() ...
[08:08:01.696] | : Searching for globals ...
[08:08:01.697] | : . globals found: [0] 
[08:08:01.697] | : Searching for globals ... done
[08:08:01.698] | : globals: [0] <none>
[08:08:01.698] | : packages: [0] <none>
[08:08:01.698] | getGlobalsAndPackages() ... done
[08:08:01.698] | run() for ‘Future’ (<unnamed-47>) ...
[08:08:01.698] | : state: ‘created’
[08:08:01.698] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.699] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.699] | : Using MulticoreFutureBackend ...
[08:08:01.699] | : . Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:08:01.699] | : . Launching futures ...
[08:08:01.699] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:01.699] | : . ' , getFutureData() ...
[08:08:01.699] | : . ' , ; getFutureCore() ...
[08:08:01.700] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:01.700] | : . ' , ; getFutureCore() ... done
[08:08:01.700] | : . ' , ; getFutureCapture() ...
[08:08:01.700] | : . ' , ; getFutureCapture() ... done
[08:08:01.700] | : . ' , ; getFutureContext() ...
[08:08:01.700] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.700] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:01.701] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.701] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:01.701] | : . ' , ; getFutureContext() ... done
[08:08:01.701] | : . ' , getFutureData() ... done
[08:08:01.701] | : . ' , requestCore(..., workers = 2) ...
[08:08:01.702] | : . ' , requestCore(..., workers = 2) ... done
[08:08:01.704] | : . ' , MulticoreFuture started
[08:08:01.704] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:01.704] | : . Launching futures ... done
[08:08:01.705] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:01.705] | : Using MulticoreFutureBackend ... done
[08:08:01.705] | run() for ‘Future’ (<unnamed-47>) ... done
[08:08:01.705] future(..., label = NULL) ... done
[08:08:01.706] future(..., label = NULL) ...
[08:08:01.706] | lazy: FALSE
[08:08:01.706] | stdout: TRUE
[08:08:01.706] | conditions: [n=1] ‘condition’
[08:08:01.706] | gc: FALSE
[08:08:01.706] | earlySignal: FALSE
[08:08:01.707] | getGlobalsAndPackages() ...
[08:08:01.707] | : Searching for globals ...
[08:08:01.707] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.707] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:01.707] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.708] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.708] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.708] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:01.709] | : . ' , ; ` | New stack:
[08:08:01.709] | : . globals found: [0] 
[08:08:01.710] | : Searching for globals ... done
[08:08:01.710] | : globals: [0] <none>
[08:08:01.710] | : packages: [0] <none>
[08:08:01.710] | getGlobalsAndPackages() ... done
[08:08:01.711] | run() for ‘Future’ (<unnamed-48>) ...
[08:08:01.711] | : state: ‘created’
[08:08:01.711] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.711] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.711] | : Using MulticoreFutureBackend ...
[08:08:01.712] | : . Number of futures since start: 7 (7 created, 7 launched, 6 finished)
[08:08:01.712] | : . Launching futures ...
[08:08:01.712] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:01.712] | : . ' , getFutureData() ...
[08:08:01.712] | : . ' , ; getFutureCore() ...
[08:08:01.712] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:01.713] | : . ' , ; getFutureCore() ... done
[08:08:01.713] | : . ' , ; getFutureCapture() ...
[08:08:01.709] | : . ' , ; ` | List of 1
[08:08:01.709] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.709] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.709] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:01.709] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.709] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.709] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.709] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.709] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.713] | : . ' , ; getFutureCapture() ... done
[08:08:01.713] | : . ' , ; ` | Old stack:
[08:08:01.713] | : . ' , ; getFutureContext() ...
[08:08:01.713] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.713] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:01.713] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.714] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:01.714] | : . ' , ; getFutureContext() ... done
[08:08:01.714] | : . ' , getFutureData() ... done
[08:08:01.714] | : . ' , requestCore(..., workers = 2) ...
[08:08:01.715] | : . ' , requestCore(..., workers = 2) ... done
[08:08:01.717] | : . ' , MulticoreFuture started
[08:08:01.717] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:01.713] | : . ' , ; ` | List of 1
[08:08:01.713] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.713] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.713] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.713] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.713] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.713] | : . ' , ; ` |     ...)  
[08:08:01.713] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.713] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.713] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.713] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.713] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.713] | : . ' , ; ` |     ...)  
[08:08:01.713] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.713] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.718] | : . Launching futures ... done
[08:08:01.718] | : . ' , ; ` | Not identical
[08:08:01.718] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:01.718] | : . ' , ; ` | all.equal() for future ...
[08:08:01.718] | : Using MulticoreFutureBackend ... done
[08:08:01.719] | run() for ‘Future’ (<unnamed-48>) ... done
[08:08:01.719] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:[08:08:01.721] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x556758fa8b60> 
 $ c:[08:08:01.721] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:01.722] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x556758394e10> 
 $  :[08:08:01.722] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
 NULL
 $  :[08:08:01.723] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.723] | : . ' , ; ` all.equal() for FutureStrategyList ...
 NULL
 $  :[08:08:01.723] | : . ' , ; ` | New stack:
 num 6
List of 6
 $ a: num 1
 $ b:Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x556758fa8b60> 
 $ c:[08:08:01.718] | : . ' , ; ` | : List of 2
[08:08:01.718] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.718] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.718] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:01.718] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.718] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.718] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.718] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.718] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.718] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.718] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.718] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.718] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.718] | : . ' , ; ` | :     ...)  
[08:08:01.718] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.718] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.718] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.718] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.718] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.718] | : . ' , ; ` | :     ...)  
[08:08:01.718] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x556758394e10> 
 $  :[08:08:01.727] | : . ' , ; ` | : Formals differ
 NULL
 $  :[08:08:01.727] | : . ' , ; ` | all.equal() for future ... done
[08:08:01.727] | : . ' , ; ` | Future strategies differ at level 1
[08:08:01.727] | : . ' , ; ` all.equal() for FutureStrategyList ... done
 NULL
 $  :[08:08:01.727] | : . ' , ; ` plan(): Setting new future backend stack:
 num 6
 - attr(*, "dim")=[08:08:01.727] | : . ' , ; ` List of future strategies:
[08:08:01.727] | : . ' , ; ` 1. sequential:
[08:08:01.727] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.727] | : . ' , ; `    - tweaked: FALSE
[08:08:01.727] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
 int [1:3] 2 3 1
 [08:08:01.723] | : . ' , ; ` | List of 1
[08:08:01.723] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.723] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "funct- attr(*, "dimnames")=ion"
[08:08:01.723] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:01.723] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.723] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.723] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.723] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.723] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.729] | : . ' , ; ` | Old stack:
List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
[08:08:01.731] resolved() for array ...
[08:08:01.731] | Number of elements: 6
[08:08:01.728] | : . ' , ; ` List of 1
[08:08:01.728] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.728] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.728] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:01.728] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.728] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.728] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.728] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.728] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.732] | Number of futures: 6
[08:08:01.732] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.732] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.732] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.732] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:01.729] | : . ' , ; ` | List of 1
[08:08:01.729] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.729] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.729] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.729] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.729] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.729] | : . ' , ; ` |     ...)  
[08:08:01.729] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.729] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.729] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.729] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.729] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.729] | : . ' , ; ` |     ...)  
[08:08:01.729] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.729] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.735] | : . ' , ; ` | Not identical
[08:08:01.735] | : . ' , ; ` | all.equal() for future ...
[08:08:01.733] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.733] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.733] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:01.733] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.733] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.733] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.733] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.735] | : . ' , ; ` | : init: TRUE
[08:08:01.736] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:01.736] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:01.736] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:01.736] | : . ' , ; ` | : .  list()
[08:08:01.737] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:01.737] | : . ' , ; ` | : .  list()
[08:08:01.737] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:01.737] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:01.737] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:01.737] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:01.739] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:01.739] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:01.739] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:01.739] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.739] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:01.740] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.740] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.742] | readImmediateCondition() ...
[08:08:01.742] | : Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.735] | : . ' , ; ` | : List of 2
[08:08:01.735] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.735] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.735] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:01.735] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.735] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.735] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.735] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.735] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.735] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.735] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.735] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.735] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.735] | : . ' , ; ` | :     ...)  
[08:08:01.735] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.735] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.735] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.735] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.735] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.735] | : . ' , ; ` | :     ...)  
[08:08:01.735] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.743] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.743] | : Number of RDS files: 0
[08:08:01.743] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.743] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.743] | : Returned conditions set:
[08:08:01.743] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:01.743] | : . ' , ; ` | : New stack:
[08:08:01.743] | :  list()
[08:08:01.744] | : . ' , ; ` | : Formals differ
[08:08:01.744] | readImmediateCondition() ... done
[08:08:01.744] | : . ' , ; ` | all.equal() for future ... done
[08:08:01.744] | : . ' , ; ` | Future strategies differ at level 1
[08:08:01.744] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:01.744] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:01.745] | : . ' , ; ` List of future strategies:
[08:08:01.745] | : . ' , ; ` 1. sequential:
[08:08:01.745] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.745] | : . ' , ; `    - tweaked: FALSE
[08:08:01.745] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.743] | : . ' , ; ` | : List of 1
[08:08:01.743] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.743] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.743] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.743] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.743] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.743] | : . ' , ; ` | :     ...)  
[08:08:01.743] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.743] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.743] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.743] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.743] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.743] | : . ' , ; ` | :     ...)  
[08:08:01.743] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.743] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.748] | : . ' , ; ` | : Old stack:
[08:08:01.745] | : . ' , ; ` List of 1
[08:08:01.745] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.745] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.745] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:01.745] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.745] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.745] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.745] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.745] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.749] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.749] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.749] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.749] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:01.750] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.750] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.750] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:01.750] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.750] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.750] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.750] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.752] | : . ' , ; ` | : init: TRUE
[08:08:01.748] | : . ' , ; ` | : List of 1
[08:08:01.748] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.748] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.748] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.748] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.748] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.748] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.748] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.748] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c0b7a78> 
[08:08:01.748] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.748] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.748] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.752] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:01.752] | : . ' , ; ` | : Not identical
[08:08:01.753] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:01.753] | : . ' , ; ` | : all.equal() for future ...
[08:08:01.753] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:01.753] | : . ' , ; ` | : .  list()
[08:08:01.753] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:01.753] | : . ' , ; ` | : .  list()
[08:08:01.754] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:01.754] | readImmediateCondition() ...
[08:08:01.754] | : Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.755] | : Number of RDS files: 0
[08:08:01.755] | : Returned conditions set:
[08:08:01.755] | :  list()
[08:08:01.756] | readImmediateCondition() ... done
[08:08:01.754] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:01.754] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:01.754] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:01.756] resolved() for array ... done
[08:08:01.756] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:01.756] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
 logi [1:2, 1:3, 1] TRUE FALSE FALSE TRUE TRUE TRUE
 - attr(*, "dimnames")=[08:08:01.757] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:01.757] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
List of 3
  ..$ :[08:08:01.757] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:01.757] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.757] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
 chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "" ...
[08:08:01.759] value() for array ...
[08:08:01.760] | recursive: 0
[08:08:01.760] | reduce: FALSE
[08:08:01.753] | : . ' , ; ` | : . List of 2
[08:08:01.753] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.753] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.753] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.753] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.753] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.753] | : . ' , ; ` | : .     ...)  
[08:08:01.753] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.753] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.753] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:01.753] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.753] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.753] | : . ' , ; ` | : .     ...)  
[08:08:01.753] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.753] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.753] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.753] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.753] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.753] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.753] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.753] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.753] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c0b7a78> 
[08:08:01.753] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.753] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.760] | length: 6
[08:08:01.761] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:01.761] | : . ' , ; ` | : . Formals differ
[08:08:01.761] | Number of remaining objects: 6
[08:08:01.761] | : . ' , ; ` | : all.equal() for future ... done
[08:08:01.761] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:01.761] | checking value #1:
[08:08:01.761] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:01.761] | 'obj' is atomic
[08:08:01.761] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:01.762] | signalConditionsASAP(numeric, pos=1) ...
[08:08:01.762] | : nx: 6
[08:08:01.762] | : . ' , ; ` | List of future strategies:
[08:08:01.762] | : . ' , ; ` | 1. multicore:
[08:08:01.762] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:01.762] | : . ' , ; ` |    - tweaked: FALSE
[08:08:01.762] | : . ' , ; ` |    - call: plan(strategy)
[08:08:01.762] | : relay: TRUE
[08:08:01.762] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.762] | : stdout: TRUE
[08:08:01.762] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.762] | : signal: TRUE
[08:08:01.762] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.763] | : resignal: FALSE
[08:08:01.763] | : force: TRUE
[08:08:01.763] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:01.763] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.763] | : . ' , ; ` | : New stack:
[08:08:01.763] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.763] | : until=2
[08:08:01.764] | : relaying element #2
[08:08:01.764] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.764] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.764] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:01.764] | length: 5 (resolved future 1)
[08:08:01.765] value() for array ... done
[08:08:01.765] checking value #2:
[08:08:01.765] 'obj' is MulticoreFuture
[08:08:01.762] | : . ' , ; ` | List of 1
[08:08:01.762] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.762] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.762] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.762] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.762] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.762] | : . ' , ; ` |     ...)  
[08:08:01.762] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.762] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.762] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.762] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.762] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.762] | : . ' , ; ` |     ...)  
[08:08:01.762] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.762] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.766] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.767] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.767] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.767] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.767] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:01.767] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.768] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.768] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.768] readImmediateCondition() ...
[08:08:01.768] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.763] | : . ' , ; ` | : List of 1
[08:08:01.763] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.763] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.763] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.763] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.763] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.763] | : . ' , ; ` | :     ...)  
[08:08:01.763] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.763] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.763] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.763] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.763] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.763] | : . ' , ; ` | :     ...)  
[08:08:01.763] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.763] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.769] | Number of RDS files: 0
[08:08:01.769] | : . ' , ; ` | : Old stack:
[08:08:01.769] | Returned conditions set:
[08:08:01.769] |  list()
[08:08:01.769] readImmediateCondition() ... done
[08:08:01.770] MulticoreFuture #2
[08:08:01.770] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:01.770] | nx: 6
[08:08:01.770] | relay: TRUE
[08:08:01.770] | stdout: TRUE
[08:08:01.771] | signal: TRUE
[08:08:01.771] | resignal: FALSE
[08:08:01.771] | force: TRUE
[08:08:01.771] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.771] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.772] | until=2
[08:08:01.772] | relaying element #2
[08:08:01.772] | value() for MulticoreFuture (<unnamed-47>) ...
[08:08:01.772] | : result() for MulticoreFuture ...
[08:08:01.773] | : . readImmediateCondition() ...
[08:08:01.773] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.774] | : . ' Number of RDS files: 0
[08:08:01.774] | : . ' Returned conditions set:
[08:08:01.774] | : . '  list()
[08:08:01.775] | : . readImmediateCondition() ... done
[08:08:01.775] | : . result() for MulticoreFuture ...
[08:08:01.775] | : . result() for MulticoreFuture ... done
[08:08:01.776] | : . signalConditions() ...
[08:08:01.769] | : . ' , ; ` | : List of 1
[08:08:01.769] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.769] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.769] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.769] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.769] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.769] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.769] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.769] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c354f00> 
[08:08:01.769] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.769] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.769] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.776] | : . ' include = ‘immediateCondition’
[08:08:01.776] | : . ' , ; ` | : Not identical
[08:08:01.776] | : . ' exclude = 
[08:08:01.776] | : . ' , ; ` | : all.equal() for future ...
[08:08:01.776] | : . ' resignal = FALSE
[08:08:01.776] | : . ' Number of conditions: 6
[08:08:01.777] | : . '  int 6
[08:08:01.777] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.778] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.778] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.778] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.778] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.779] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.779] | : . signalConditions() ... done
[08:08:01.779] | : result() for MulticoreFuture ... done
[08:08:01.779] | : result() for MulticoreFuture ...
[08:08:01.779] | : result() for MulticoreFuture ... done
[08:08:01.780] | : signalConditions() ...
[08:08:01.780] | : . include = ‘immediateCondition’
[08:08:01.780] | : . exclude = 
[08:08:01.780] | : . resignal = FALSE
[08:08:01.780] | : . Number of conditions: 6
[08:08:01.781] | : .  int 6
[08:08:01.781] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.782] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.782] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.782] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.782] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.782] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.783] | : signalConditions() ... done
[08:08:01.783] | : relay stdout ...
[08:08:01.783] | : relay stdout ... done
[08:08:01.783] | : check for misuse ...
[08:08:01.783] | : check for misuse ... done
[08:08:01.784] | value() for MulticoreFuture (<unnamed-47>) ... done
[08:08:01.784] | result() for MulticoreFuture ...
[08:08:01.784] | result() for MulticoreFuture ... done
[08:08:01.784] | signalConditions() ...
[08:08:01.784] | : include = ‘immediateCondition’
[08:08:01.785] | : exclude = 
[08:08:01.785] | : resignal = FALSE
[08:08:01.785] | : Number of conditions: 6
[08:08:01.785] | :  int 6
[08:08:01.786] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.786] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.786] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.787] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.787] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.787] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.787] | signalConditions() ... done
[08:08:01.787] | result() for MulticoreFuture ...
[08:08:01.788] | result() for MulticoreFuture ... done
[08:08:01.788] | signalConditions() ...
[08:08:01.788] | : include = ‘condition’
[08:08:01.776] | : . ' , ; ` | : . List of 2
[08:08:01.776] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.776] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.776] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.776] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.776] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.776] | : . ' , ; ` | : .     ...)  
[08:08:01.776] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.776] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.776] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:01.776] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.776] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.776] | : . ' , ; ` | : .     ...)  
[08:08:01.776] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.776] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.776] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.776] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.776] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.776] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.776] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.776] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.776] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c354f00> 
[08:08:01.776] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.776] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.788] | : exclude = ‘error’, ‘immediateCondition’
[08:08:01.788] | : resignal = TRUE
[08:08:01.789] | : Number of conditions: 6
[08:08:01.789] | : . ' , ; ` | : . Formals differ
[08:08:01.789] | : . ' , ; ` | : all.equal() for future ... done
[08:08:01.789] | :  int 6
[08:08:01.789] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:01.789] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.790] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:01.790] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.790] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:01.705] | : . ' , attachPackages() ...
[08:08:01.790] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.790] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.705] | : . ' , ; packages: [n=1] ‘future’
[08:08:01.790] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.790] | : . ' , ; ` | List of future strategies:
[08:08:01.790] | : . ' , ; ` | 1. multicore:
[08:08:01.790] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:01.790] | : . ' , ; ` |    - tweaked: FALSE
[08:08:01.790] | : . ' , ; ` |    - call: plan(strategy)
[08:08:01.790] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.706] | : . ' , attachPackages() ... done
[08:08:01.790] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.791] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.706] | : . ' , attachPackages() ...
[08:08:01.791] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.791] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.706] | : . ' , ; packages: [n=0] 
[08:08:01.791] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.791] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.706] | : . ' , attachPackages() ... done
[08:08:01.791] | signalConditions() ... done
[08:08:01.792] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.792] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.792] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:01.792] value(<MulticoreFuture>, ...) ...
[08:08:01.792] value(<MulticoreFuture>, ...) ... done
[08:08:01.792] value() for MulticoreFuture (<unnamed-47>) ...
[08:08:01.792] | result() for MulticoreFuture ...
[08:08:01.792] | result() for MulticoreFuture ... done
[08:08:01.793] | result() for MulticoreFuture ...
[08:08:01.793] | result() for MulticoreFuture ... done
[08:08:01.793] | signalConditions() ...
[08:08:01.793] | : include = ‘immediateCondition’
[08:08:01.793] | : exclude = 
[08:08:01.793] | : resignal = FALSE
[08:08:01.793] | : Number of conditions: 6
[08:08:01.793] | :  int 6
[08:08:01.794] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.794] | : already signaled, skipping
[08:08:01.794] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.794] | : already signaled, skipping
[08:08:01.794] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.794] | : already signaled, skipping
[08:08:01.795] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.790] | : . ' , ; ` | List of 1
[08:08:01.790] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.790] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.790] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.790] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.790] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.790] | : . ' , ; ` |     ...)  
[08:08:01.790] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.790] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.790] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.790] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.790] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.790] | : . ' , ; ` |     ...)  
[08:08:01.790] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.790] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.795] | : already signaled, skipping
[08:08:01.795] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.795] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.795] | : already signaled, skipping
[08:08:01.795] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.795] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.795] | : already signaled, skipping
[08:08:01.795] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.795] | signalConditions() ... done
[08:08:01.795] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.795] | check for misuse ...
[08:08:01.795] | check for misuse ... done
[08:08:01.796] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:01.796] value() for MulticoreFuture (<unnamed-47>) ... done
[08:08:01.796] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.796] value: <numeric>
[08:08:01.796] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:01.796] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.796] | nx: 6
[08:08:01.796] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.796] | relay: TRUE
[08:08:01.796] | stdout: TRUE
[08:08:01.796] | signal: TRUE
[08:08:01.796] | resignal: FALSE
[08:08:01.796] | force: TRUE
[08:08:01.797] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.797] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.797] | until=3
[08:08:01.797] | relaying element #3
[08:08:01.797] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.797] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.797] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:01.797] resolve() for MulticoreFuture ...
[08:08:01.798] resolve() for MulticoreFuture ... done
[08:08:01.798] length: 4 (resolved future 2)

[08:08:01.798] checking value #3:
[08:08:01.798] 'obj' is MulticoreFuture
[08:08:01.798] readImmediateCondition() ...
[08:08:01.798] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.799] | Number of RDS files: 0
[08:08:01.799] | Returned conditions set:
[08:08:01.799] |  list()
[08:08:01.799] readImmediateCondition() ... done
[08:08:01.799] MulticoreFuture #3
[08:08:01.799] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:01.800] | nx: 6
[08:08:01.800] | relay: TRUE
[08:08:01.800] | stdout: TRUE
[08:08:01.800] | signal: TRUE
[08:08:01.800] | resignal: FALSE
[08:08:01.800] | force: TRUE
[08:08:01.800] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.800] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.800] | until=3
[08:08:01.801] | relaying element #3
[08:08:01.801] | value() for MulticoreFuture (<unnamed-48>) ...
[08:08:01.801] | : result() for MulticoreFuture ...
[08:08:01.801] | : . readImmediateCondition() ...
[08:08:01.801] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.802] | : . ' Number of RDS files: 0
[08:08:01.802] | : . ' Returned conditions set:
[08:08:01.802] | : . '  list()
[08:08:01.802] | : . readImmediateCondition() ... done
[08:08:01.802] | : . result() for MulticoreFuture ...
[08:08:01.803] | : . result() for MulticoreFuture ... done
[08:08:01.803] | : . signalConditions() ...
[08:08:01.803] | : . ' include = ‘immediateCondition’
[08:08:01.803] | : . ' exclude = 
[08:08:01.803] | : . ' resignal = FALSE
[08:08:01.803] | : . ' Number of conditions: 6
[08:08:01.803] | : . '  int 6
[08:08:01.804] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.804] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.804] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.804] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.804] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.804] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.805] | : . signalConditions() ... done
[08:08:01.805] | : result() for MulticoreFuture ... done
[08:08:01.805] | : result() for MulticoreFuture ...
[08:08:01.805] | : result() for MulticoreFuture ... done
[08:08:01.805] | : signalConditions() ...
[08:08:01.805] | : . include = ‘immediateCondition’
[08:08:01.805] | : . exclude = 
[08:08:01.805] | : . resignal = FALSE
[08:08:01.805] | : . Number of conditions: 6
[08:08:01.806] | : .  int 6
[08:08:01.806] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.806] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.806] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.806] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.807] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.807] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.807] | : signalConditions() ... done
[08:08:01.807] | : relay stdout ...
[08:08:01.807] | : relay stdout ... done
[08:08:01.807] | : check for misuse ...
[08:08:01.807] | : check for misuse ... done
[08:08:01.807] | value() for MulticoreFuture (<unnamed-48>) ... done
[08:08:01.808] | result() for MulticoreFuture ...
[08:08:01.808] | result() for MulticoreFuture ... done
[08:08:01.808] | signalConditions() ...
[08:08:01.808] | : include = ‘immediateCondition’
[08:08:01.808] | : exclude = 
[08:08:01.808] | : resignal = FALSE
[08:08:01.808] | : Number of conditions: 6
[08:08:01.808] | :  int 6
[08:08:01.809] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.809] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.809] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.809] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.809] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.809] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.810] | signalConditions() ... done
[08:08:01.810] | result() for MulticoreFuture ...
[08:08:01.810] | result() for MulticoreFuture ... done
[08:08:01.810] | signalConditions() ...
[08:08:01.810] | : include = ‘condition’
[08:08:01.810] | : exclude = ‘error’, ‘immediateCondition’
[08:08:01.810] | : resignal = TRUE
[08:08:01.810] | : Number of conditions: 6
[08:08:01.810] | :  int 6
[08:08:01.811] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.811] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.718] | : . ' , attachPackages() ...
[08:08:01.811] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.811] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.719] | : . ' , ; packages: [n=1] ‘future’
[08:08:01.812] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.812] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.719] | : . ' , attachPackages() ... done
[08:08:01.812] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.812] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.719] | : . ' , attachPackages() ...
[08:08:01.812] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.812] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.720] | : . ' , ; packages: [n=0] 
[08:08:01.812] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.813] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.720] | : . ' , attachPackages() ... done
[08:08:01.813] | signalConditions() ... done
[08:08:01.813] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.813] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.813] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:01.813] value(<MulticoreFuture>, ...) ...
[08:08:01.813] value(<MulticoreFuture>, ...) ... done
[08:08:01.813] value() for MulticoreFuture (<unnamed-48>) ...
[08:08:01.813] | result() for MulticoreFuture ...
[08:08:01.814] | result() for MulticoreFuture ... done
[08:08:01.814] | result() for MulticoreFuture ...
[08:08:01.814] | result() for MulticoreFuture ... done
[08:08:01.814] | signalConditions() ...
[08:08:01.814] | : include = ‘immediateCondition’
[08:08:01.814] | : exclude = 
[08:08:01.814] | : resignal = FALSE
[08:08:01.814] | : Number of conditions: 6
[08:08:01.815] | :  int 6
[08:08:01.815] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.817] | : already signaled, skipping
[08:08:01.817] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.818] | : already signaled, skipping
[08:08:01.818] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.818] | : already signaled, skipping
[08:08:01.818] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.818] | : already signaled, skipping
[08:08:01.818] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.818] | : already signaled, skipping
[08:08:01.818] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.819] | : already signaled, skipping
[08:08:01.819] | signalConditions() ... done
[08:08:01.819] | check for misuse ...
[08:08:01.819] | check for misuse ... done
[08:08:01.819] value() for MulticoreFuture (<unnamed-48>) ... done
[08:08:01.819] value: <NULL>
[08:08:01.819] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:01.819] | nx: 6
[08:08:01.819] | relay: TRUE
[08:08:01.820] | stdout: TRUE
[08:08:01.820] | signal: TRUE
[08:08:01.820] | resignal: FALSE
[08:08:01.820] | force: TRUE
[08:08:01.820] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.820] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.820] | until=4
[08:08:01.820] | relaying element #4
[08:08:01.820] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.820] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.821] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:01.821] resolve() for MulticoreFuture ...
[08:08:01.821] resolve() for MulticoreFuture ... done
[08:08:01.821] length: 3 (resolved future 3)

[08:08:01.821] checking value #4:
[08:08:01.821] 'obj' is NULL
[08:08:01.821] signalConditionsASAP(NULL, pos=4) ...
[08:08:01.821] | nx: 6
[08:08:01.822] | relay: TRUE
[08:08:01.822] | stdout: TRUE
[08:08:01.822] | signal: TRUE
[08:08:01.822] | resignal: FALSE
[08:08:01.822] | force: TRUE
[08:08:01.822] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.822] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.822] | until=5
[08:08:01.822] | relaying element #5
[08:08:01.823] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.823] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.823] signalConditionsASAP(NULL, pos=4) ... done
[08:08:01.823] signalConditionsASAP(NULL, pos=4) ...
[08:08:01.823] | nx: 6
[08:08:01.823] | relay: TRUE
[08:08:01.823] | stdout: TRUE
[08:08:01.823] | signal: TRUE
[08:08:01.823] | resignal: FALSE
[08:08:01.824] | force: TRUE
[08:08:01.824] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.824] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.824] | until=5
[08:08:01.824] | relaying element #5
[08:08:01.824] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.824] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.824] signalConditionsASAP(NULL, pos=4) ... done
[08:08:01.825] length: 2 (resolved future 4)

[08:08:01.825] checking value #5:
[08:08:01.825] 'obj' is NULL
[08:08:01.825] signalConditionsASAP(NULL, pos=5) ...
[08:08:01.825] | nx: 6
[08:08:01.825] | relay: TRUE
[08:08:01.825] | stdout: TRUE
[08:08:01.825] | signal: TRUE
[08:08:01.826] | resignal: FALSE
[08:08:01.826] | force: TRUE
[08:08:01.826] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.826] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.826] | until=6
[08:08:01.826] | relaying element #6
[08:08:01.826] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.826] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.826] signalConditionsASAP(NULL, pos=5) ... done
[08:08:01.827] signalConditionsASAP(NULL, pos=5) ...
[08:08:01.827] | nx: 6
[08:08:01.827] | relay: TRUE
[08:08:01.827] | stdout: TRUE
[08:08:01.827] | signal: TRUE
[08:08:01.827] | resignal: FALSE
[08:08:01.827] | force: TRUE
[08:08:01.827] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.827] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.828] | until=6
[08:08:01.828] | relaying element #6
[08:08:01.828] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.828] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.828] signalConditionsASAP(NULL, pos=5) ... done
[08:08:01.828] length: 1 (resolved future 5)

[08:08:01.828] checking value #6:
[08:08:01.828] 'obj' is atomic
[08:08:01.829] signalConditionsASAP(numeric, pos=6) ...
[08:08:01.829] | nx: 6
[08:08:01.829] | relay: TRUE
[08:08:01.829] | stdout: TRUE
[08:08:01.829] | signal: TRUE
[08:08:01.829] | resignal: FALSE
[08:08:01.829] | force: TRUE
[08:08:01.829] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.829] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.830] | until=6
[08:08:01.830] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:01.830] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.830] signalConditionsASAP(numeric, pos=6) ... done
[08:08:01.830] length: 0 (resolved future 6)

[08:08:01.830] Relaying remaining futures ...
[08:08:01.830] | signalConditionsASAP(NULL, pos=0) ...
[08:08:01.830] | : nx: 6
[08:08:01.831] | : relay: TRUE
[08:08:01.831] | : stdout: TRUE
[08:08:01.831] | : signal: TRUE
[08:08:01.831] | : resignal: FALSE
[08:08:01.831] | : force: TRUE
[08:08:01.831] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:01.831] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:01.831] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:01.832] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.832] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:01.832] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:3] 2 3 1
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
Dimensions: c(2, 1, 3, 1)
[08:08:01.836] future(..., label = NULL) ...
[08:08:01.836] | lazy: FALSE
[08:08:01.836] | stdout: TRUE
[08:08:01.837] | conditions: [n=1] ‘condition’
[08:08:01.837] | gc: FALSE
[08:08:01.837] | earlySignal: FALSE
[08:08:01.837] | getGlobalsAndPackages() ...
[08:08:01.837] | : Searching for globals ...
[08:08:01.839] | : . globals found: [0] 
[08:08:01.839] | : Searching for globals ... done
[08:08:01.839] | : globals: [0] <none>
[08:08:01.839] | : packages: [0] <none>
[08:08:01.839] | getGlobalsAndPackages() ... done
[08:08:01.839] | run() for ‘Future’ (<unnamed-49>) ...
[08:08:01.840] | : state: ‘created’
[08:08:01.840] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.840] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.840] | : Using MulticoreFutureBackend ...
[08:08:01.840] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:08:01.840] | : . Launching futures ...
[08:08:01.841] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:01.841] | : . ' , getFutureData() ...
[08:08:01.841] | : . ' , ; getFutureCore() ...
[08:08:01.841] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:01.841] | : . ' , ; getFutureCore() ... done
[08:08:01.841] | : . ' , ; getFutureCapture() ...
[08:08:01.841] | : . ' , ; getFutureCapture() ... done
[08:08:01.842] | : . ' , ; getFutureContext() ...
[08:08:01.842] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.842] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:01.842] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.842] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:01.842] | : . ' , ; getFutureContext() ... done
[08:08:01.842] | : . ' , getFutureData() ... done
[08:08:01.843] | : . ' , requestCore(..., workers = 2) ...
[08:08:01.843] | : . ' , requestCore(..., workers = 2) ... done
[08:08:01.845] | : . ' , MulticoreFuture started
[08:08:01.846] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:01.846] | : . Launching futures ... done
[08:08:01.846] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:01.846] | : Using MulticoreFutureBackend ... done
[08:08:01.846] | run() for ‘Future’ (<unnamed-49>) ... done
[08:08:01.847] future(..., label = NULL) ... done
[08:08:01.847] future(..., label = NULL) ...
[08:08:01.847] | lazy: FALSE
[08:08:01.847] | stdout: TRUE
[08:08:01.847] | conditions: [n=1] ‘condition’
[08:08:01.848] | gc: FALSE
[08:08:01.848] | earlySignal: FALSE
[08:08:01.848] | getGlobalsAndPackages() ...
[08:08:01.848] | : Searching for globals ...
[08:08:01.848] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.848] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:01.849] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.849] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.849] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.850] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:01.850] | : . ' , ; ` | New stack:
[08:08:01.850] | : . globals found: [0] 
[08:08:01.851] | : Searching for globals ... done
[08:08:01.851] | : globals: [0] <none>
[08:08:01.851] | : packages: [0] <none>
[08:08:01.851] | getGlobalsAndPackages() ... done
[08:08:01.852] | run() for ‘Future’ (<unnamed-50>) ...
[08:08:01.852] | : state: ‘created’
[08:08:01.852] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.852] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.852] | : Using MulticoreFutureBackend ...
[08:08:01.852] | : . Number of futures since start: 9 (9 created, 9 launched, 8 finished)
[08:08:01.853] | : . Launching futures ...
[08:08:01.853] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:01.853] | : . ' , getFutureData() ...
[08:08:01.853] | : . ' , ; getFutureCore() ...
[08:08:01.853] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:01.853] | : . ' , ; getFutureCore() ... done
[08:08:01.854] | : . ' , ; getFutureCapture() ...
[08:08:01.854] | : . ' , ; getFutureCapture() ... done
[08:08:01.850] | : . ' , ; ` | List of 1
[08:08:01.850] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.850] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.850] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:01.850] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.850] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.850] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.850] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.850] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.854] | : . ' , ; getFutureContext() ...
[08:08:01.854] | : . ' , ; ` | Old stack:
[08:08:01.854] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.854] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:01.854] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.855] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:01.855] | : . ' , ; getFutureContext() ... done
[08:08:01.855] | : . ' , getFutureData() ... done
[08:08:01.855] | : . ' , requestCore(..., workers = 2) ...
[08:08:01.856] | : . ' , requestCore(..., workers = 2) ... done
[08:08:01.858] | : . ' , MulticoreFuture started
[08:08:01.858] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:01.859] | : . Launching futures ... done
[08:08:01.854] | : . ' , ; ` | List of 1
[08:08:01.854] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.854] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.854] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.854] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.854] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.854] | : . ' , ; ` |     ...)  
[08:08:01.854] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.854] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.854] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.854] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.854] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.854] | : . ' , ; ` |     ...)  
[08:08:01.854] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.854] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.859] | : . ' , ; ` | Not identical
[08:08:01.859] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:01.859] | : . ' , ; ` | all.equal() for future ...
[08:08:01.859] | : Using MulticoreFutureBackend ... done
[08:08:01.859] | run() for ‘Future’ (<unnamed-50>) ... done
[08:08:01.860] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:[08:08:01.862] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x556759c0b9f8> 
 $ c:[08:08:01.862] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:01.863] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675b609fe0> 
 $  :[08:08:01.863] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
 NULL
 $  :[08:08:01.864] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.864] | : . ' , ; ` all.equal() for FutureStrategyList ...
 NULL
 $  :[08:08:01.864] | : . ' , ; ` | New stack:
 num 6
List of 6
 $ a: num 1
 $ b:[08:08:01.859] | : . ' , ; ` | : List of 2
[08:08:01.859] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.859] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.859] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:01.859] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.859] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.859] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.859] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.859] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.859] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.859] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.859] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.859] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.859] | : . ' , ; ` | :     ...)  
[08:08:01.859] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.859] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.859] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.859] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.859] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.859] | : . ' , ; ` | :     ...)  
[08:08:01.859] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x556759c0b9f8> 
 $ c:[08:08:01.867] | : . ' , ; ` | : Formals differ
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' [08:08:01.867] | : . ' , ; ` | all.equal() for future ... done
<environment: 0x55675b609fe0> 
 $  :[08:08:01.867] | : . ' , ; ` | Future strategies differ at level 1
[08:08:01.867] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:01.868] | : . ' , ; ` plan(): Setting new future backend stack:
 NULL
 $  : NULL
 $  :[08:08:01.868] | : . ' , ; ` List of future strategies:
[08:08:01.868] | : . ' , ; ` 1. sequential:
[08:08:01.868] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.868] | : . ' , ; `    - tweaked: FALSE
[08:08:01.868] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
 num 6
 - attr(*, "dim")= int [1:4] 2 1 3 1
[08:08:01.864] | : . ' , ; ` | List of 1
[08:08:01.864] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.864] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.864] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:01.864] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.864] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.864] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.864] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.864] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
 - attr(*, "dimnames")=[08:08:01.870] | : . ' , ; ` | Old stack:
List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ :[08:08:01.869] | : . ' , ; ` List of 1
[08:08:01.869] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.869] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.869] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:01.869] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.869] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySign chr [1:3] al" "gc" "interrupts" ...
[08:08:01.869] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "g"a" "b" "c"c" "interrupts" ...
[08:08:01.869] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FAL
SE)
[08:08:01.869] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
  ..$ :[08:08:01.872] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.872] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
 chr "a"
[08:08:01.873] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.873] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:01.873] resolved() for array ...
[08:08:01.873] | Number of elements: 6
[08:08:01.873] | Number of futures: 6
[08:08:01.873] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.873] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.873] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:01.873] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.873] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.873] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.873] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.876] | : . ' , ; ` | : init: TRUE
[08:08:01.870] | : . ' , ; ` | List of 1
[08:08:01.870] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.870] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.870] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.870] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.870] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.870] | : . ' , ; ` |     ...)  
[08:08:01.870] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.870] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.870] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.870] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.870] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.870] | : . ' , ; ` |     ...)  
[08:08:01.870] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.870] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.876] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:01.876] | : . ' , ; ` | Not identical
[08:08:01.876] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:01.876] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:01.876] | : . ' , ; ` | all.equal() for future ...
[08:08:01.876] | : . ' , ; ` | : .  list()
[08:08:01.877] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:01.877] | : . ' , ; ` | : .  list()
[08:08:01.877] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:01.877] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:01.877] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:01.877] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:01.879] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:01.879] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:01.879] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:01.880] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.880] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:01.880] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.880] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.883] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.876] | : . ' , ; ` | : List of 2
[08:08:01.876] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.876] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.876] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:01.876] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.876] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.876] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.876] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.876] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.876] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.876] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.876] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.876] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.876] | : . ' , ; ` | :     ...)  
[08:08:01.876] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.876] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.876] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.876] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.876] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.876] | : . ' , ; ` | :     ...)  
[08:08:01.876] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.883] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.883] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.884] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:01.884] | : . ' , ; ` | : New stack:
[08:08:01.884] | readImmediateCondition() ...
[08:08:01.884] | : . ' , ; ` | : Formals differ
[08:08:01.884] | : Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.884] | : . ' , ; ` | all.equal() for future ... done
[08:08:01.884] | : Number of RDS files: 0
[08:08:01.885] | : . ' , ; ` | Future strategies differ at level 1
[08:08:01.885] | : Returned conditions set:
[08:08:01.885] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:01.885] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:01.885] | :  list()
[08:08:01.885] | readImmediateCondition() ... done
[08:08:01.885] | : . ' , ; ` List of future strategies:
[08:08:01.885] | : . ' , ; ` 1. sequential:
[08:08:01.885] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.885] | : . ' , ; `    - tweaked: FALSE
[08:08:01.885] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.884] | : . ' , ; ` | : List of 1
[08:08:01.884] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.884] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.884] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.884] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.884] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.884] | : . ' , ; ` | :     ...)  
[08:08:01.884] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.884] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.884] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.884] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.884] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.884] | : . ' , ; ` | :     ...)  
[08:08:01.884] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.884] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.889] | : . ' , ; ` | : Old stack:
[08:08:01.886] | : . ' , ; ` List of 1
[08:08:01.886] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.886] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.886] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:01.886] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.886] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.886] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.886] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.886] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.890] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.890] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.890] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.890] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:01.889] | : . ' , ; ` | : List of 1
[08:08:01.889] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.889] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.889] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.889] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.889] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.889] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.889] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.889] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c182f48> 
[08:08:01.889] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.889] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.889] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.890] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.890] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.890] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:01.890] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.890] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.890] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.890] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.893] | : . ' , ; ` | : Not identical
[08:08:01.893] | : . ' , ; ` | : init: TRUE
[08:08:01.893] | : . ' , ; ` | : all.equal() for future ...
[08:08:01.893] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:01.893] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:01.894] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:01.894] | : . ' , ; ` | : .  list()
[08:08:01.894] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:01.894] | : . ' , ; ` | : .  list()
[08:08:01.895] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:01.896] | readImmediateCondition() ...
[08:08:01.895] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:01.895] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:01.895] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:01.896] | : Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.896] | : Number of RDS files: 0
[08:08:01.897] | : Returned conditions set:
[08:08:01.897] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:01.897] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:01.897] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:01.897] | :  list()
[08:08:01.897] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.897] | readImmediateCondition() ... done
[08:08:01.898] resolved() for array ... done
[08:08:01.898] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:01.898] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.898] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
 logi [1:2, 1, 1:3, 1] TRUE FALSE FALSE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ :[08:08:01.893] | : . ' , ; ` | : . List of 2
[08:08:01.893] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.893] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.893] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.893] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.893] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.893] | : . ' , ; ` | : .     ...)  
[08:08:01.893] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.893] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.893] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:01.893] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' < chr environment: 0x556759f5c168> 
[08:08:01.893] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores("a"constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.893] | : . ' , ; ` | : .     ...)  
[08:08:01.893] | : . ' , ; `
 | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.893] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.893] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.893] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.893] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.893] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.893] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.893] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.893] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c182f48> 
[08:08:01.893] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.893] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
 - attr(*, "names")= chr [1:6] "a" "b" "c" "" ...
[08:08:01.901] | : . ' , ; ` | : . Formals differ
[08:08:01.902] | : . ' , ; ` | : all.equal() for future ... done
[08:08:01.902] value() for array ...
[08:08:01.902] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:01.902] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:01.902] | recursive: 0
[08:08:01.902] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:01.902] | reduce: FALSE
[08:08:01.902] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.902] | : . ' , ; ` | List of future strategies:
[08:08:01.902] | : . ' , ; ` | 1. multicore:
[08:08:01.902] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:01.902] | : . ' , ; ` |    - tweaked: FALSE
[08:08:01.902] | : . ' , ; ` |    - call: plan(strategy)
[08:08:01.903] | length: 6
[08:08:01.903] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.903] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:01.903] | Number of remaining objects: 6
[08:08:01.903] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.903] | checking value #1:
[08:08:01.903] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:01.903] | 'obj' is atomic
[08:08:01.903] | : . ' , ; ` | : New stack:
[08:08:01.904] | signalConditionsASAP(numeric, pos=1) ...
[08:08:01.904] | : nx: 6
[08:08:01.904] | : relay: TRUE
[08:08:01.904] | : stdout: TRUE
[08:08:01.904] | : signal: TRUE
[08:08:01.905] | : resignal: FALSE
[08:08:01.905] | : force: TRUE
[08:08:01.905] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.905] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.905] | : until=2
[08:08:01.906] | : relaying element #2
[08:08:01.906] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.906] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.906] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:01.907] | length: 5 (resolved future 1)
[08:08:01.907] value() for array ... done
[08:08:01.907] checking value #2:
[08:08:01.903] | : . ' , ; ` | List of 1
[08:08:01.903] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.903] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.903] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.903] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.903] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.903] | : . ' , ; ` |     ...)  
[08:08:01.903] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.903] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.903] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.903] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.903] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.903] | : . ' , ; ` |     ...)  
[08:08:01.903] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.903] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.907] 'obj' is MulticoreFuture
[08:08:01.907] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.907] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.908] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.908] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.908] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:01.908] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.908] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.908] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.909] readImmediateCondition() ...
[08:08:01.909] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.909] | Number of RDS files: 0
[08:08:01.909] | Returned conditions set:
[08:08:01.904] | : . ' , ; ` | : List of 1
[08:08:01.904] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constrai[08:08:01.910] |  list()
nts = "multicore"), gc = FALSE, 
[08:08:01.904] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.904] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.904] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.904] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.904] | : . ' , ; ` | :     ...)  
[08:08:01.904] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.904] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.904] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.904] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.904] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.904] | : . ' , ; ` | :     ...)  
[08:08:01.904] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.904] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.910] readImmediateCondition() ... done
[08:08:01.910] | : . ' , ; ` | : Old stack:
[08:08:01.910] MulticoreFuture #2
[08:08:01.910] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:01.911] | nx: 6
[08:08:01.911] | relay: TRUE
[08:08:01.911] | stdout: TRUE
[08:08:01.911] | signal: TRUE
[08:08:01.911] | resignal: FALSE
[08:08:01.912] | force: TRUE
[08:08:01.912] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.912] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:01.912] | until=2
[08:08:01.912] | relaying element #2
[08:08:01.913] | value() for MulticoreFuture (<unnamed-49>) ...
[08:08:01.913] | : result() for MulticoreFuture ...
[08:08:01.914] | : . readImmediateCondition() ...
[08:08:01.914] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.914] | : . ' Number of RDS files: 0
[08:08:01.914] | : . ' Returned conditions set:
[08:08:01.915] | : . '  list()
[08:08:01.915] | : . readImmediateCondition() ... done
[08:08:01.916] | : . result() for MulticoreFuture ...
[08:08:01.916] | : . result() for MulticoreFuture ... done
[08:08:01.916] | : . signalConditions() ...
[08:08:01.916] | : . ' include = ‘immediateCondition’
[08:08:01.917] | : . ' exclude = 
[08:08:01.917] | : . ' resignal = FALSE
[08:08:01.917] | : . ' Number of conditions: 6
[08:08:01.910] | : . ' , ; ` | : List of 1
[08:08:01.910] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.910] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.910] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.910] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.910] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.910] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.910] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.910] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c4271d0> 
[08:08:01.910] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.910] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.910] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.917] | : . ' , ; ` | : Not identical
[08:08:01.918] | : . ' , ; ` | : all.equal() for future ...
[08:08:01.917] | : . '  int 6
[08:08:01.918] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.918] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.918] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.919] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.919] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.919] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.919] | : . signalConditions() ... done
[08:08:01.920] | : result() for MulticoreFuture ... done
[08:08:01.920] | : result() for MulticoreFuture ...
[08:08:01.920] | : result() for MulticoreFuture ... done
[08:08:01.920] | : signalConditions() ...
[08:08:01.920] | : . include = ‘immediateCondition’
[08:08:01.921] | : . exclude = 
[08:08:01.921] | : . resignal = FALSE
[08:08:01.921] | : . Number of conditions: 6
[08:08:01.921] | : .  int 6
[08:08:01.922] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.922] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.922] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.923] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.923] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.923] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.923] | : signalConditions() ... done
[08:08:01.923] | : relay stdout ...
[08:08:01.924] | : relay stdout ... done
[08:08:01.924] | : check for misuse ...
[08:08:01.924] | : check for misuse ... done
[08:08:01.924] | value() for MulticoreFuture (<unnamed-49>) ... done
[08:08:01.924] | result() for MulticoreFuture ...
[08:08:01.925] | result() for MulticoreFuture ... done
[08:08:01.925] | signalConditions() ...
[08:08:01.925] | : include = ‘immediateCondition’
[08:08:01.925] | : exclude = 
[08:08:01.925] | : resignal = FALSE
[08:08:01.926] | : Number of conditions: 6
[08:08:01.926] | :  int 6
[08:08:01.926] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.927] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.927] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.927] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.927] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.928] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.928] | signalConditions() ... done
[08:08:01.928] | result() for MulticoreFuture ...
[08:08:01.928] | result() for MulticoreFuture ... done
[08:08:01.928] | signalConditions() ...
[08:08:01.929] | : include = ‘condition’
[08:08:01.929] | : exclude = ‘error’, ‘immediateCondition’
[08:08:01.929] | : resignal = TRUE
[08:08:01.929] | : Number of conditions: 6
[08:08:01.918] | : . ' , ; ` | : . List of 2
[08:08:01.918] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.918] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.918] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.918] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.918] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.918] | : . ' , ; ` | : .     ...)  
[08:08:01.918] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.918] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.918] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:01.918] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.918] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.918] | : . ' , ; ` | : .     ...)  
[08:08:01.918] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.918] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.918] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.918] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.918] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.918] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.918] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.918] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.918] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c4271d0> 
[08:08:01.918] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.918] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.929] | :  int 6
[08:08:01.930] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.930] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.846] | : . ' , attachPackages() ...
[08:08:01.931] | : . ' , ; ` | : . Formals differ
[08:08:01.931] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.931] | : . ' , ; ` | : all.equal() for future ... done
[08:08:01.931] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.847] | : . ' , ; packages: [n=1] ‘future’
[08:08:01.931] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:01.931] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.931] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:01.931] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.847] | : . ' , attachPackages() ... done
[08:08:01.931] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:01.932] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.932] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.847] | : . ' , attachPackages() ...
[08:08:01.932] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.932] | : . ' , ; ` | List of future strategies:
[08:08:01.932] | : . ' , ; ` | 1. multicore:
[08:08:01.932] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:01.932] | : . ' , ; ` |    - tweaked: FALSE
[08:08:01.932] | : . ' , ; ` |    - call: plan(strategy)
[08:08:01.932] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.847] | : . ' , ; packages: [n=0] 
[08:08:01.933] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.933] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.848] | : . ' , attachPackages() ... done
[08:08:01.933] | signalConditions() ... done
[08:08:01.933] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.933] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.934] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:01.934] value(<MulticoreFuture>, ...) ...
[08:08:01.934] value(<MulticoreFuture>, ...) ... done
[08:08:01.934] value() for MulticoreFuture (<unnamed-49>) ...
[08:08:01.934] | result() for MulticoreFuture ...
[08:08:01.935] | result() for MulticoreFuture ... done
[08:08:01.935] | result() for MulticoreFuture ...
[08:08:01.935] | result() for MulticoreFuture ... done
[08:08:01.935] | signalConditions() ...
[08:08:01.935] | : include = ‘immediateCondition’
[08:08:01.936] | : exclude = 
[08:08:01.936] | : resignal = FALSE
[08:08:01.936] | : Number of conditions: 6
[08:08:01.936] | :  int 6
[08:08:01.937] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.937] | : already signaled, skipping
[08:08:01.937] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.937] | : already signaled, skipping
[08:08:01.938] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.938] | : already signaled, skipping
[08:08:01.938] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.938] | : already signaled, skipping
[08:08:01.938] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.939] | : already signaled, skipping
[08:08:01.939] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.939] | : already signaled, skipping
[08:08:01.939] | signalConditions() ... done
[08:08:01.939] | check for misuse ...
[08:08:01.940] | check for misuse ... done
[08:08:01.940] value() for MulticoreFuture (<unnamed-49>) ... done
[08:08:01.940] value: <numeric>
[08:08:01.940] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:01.940] | nx: 6
[08:08:01.940] | relay: TRUE
[08:08:01.940] | stdout: TRUE
[08:08:01.941] | signal: TRUE
[08:08:01.941] | resignal: FALSE
[08:08:01.941] | force: TRUE
[08:08:01.941] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.941] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.941] | until=3
[08:08:01.942] | relaying element #3
[08:08:01.942] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.942] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.942] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:01.942] resolve() for MulticoreFuture ...
[08:08:01.943] resolve() for MulticoreFuture ... done
[08:08:01.943] length: 4 (resolved future 2)

[08:08:01.943] checking value #3:
[08:08:01.943] 'obj' is MulticoreFuture
[08:08:01.932] | : . ' , ; ` | List of 1
[08:08:01.932] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.932] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.932] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.932] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.932] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.932] | : . ' , ; ` |     ...)  
[08:08:01.932] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.932] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.932] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.932] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.932] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.932] | : . ' , ; ` |     ...)  
[08:08:01.932] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.932] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.944] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.944] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.944] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.944] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.944] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:01.944] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.945] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.945] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.945] readImmediateCondition() ...
[08:08:01.945] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.945] | Number of RDS files: 0
[08:08:01.946] | Returned conditions set:
[08:08:01.946] |  list()
[08:08:01.946] readImmediateCondition() ... done
[08:08:01.946] MulticoreFuture #3
[08:08:01.946] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:01.946] | nx: 6
[08:08:01.946] | relay: TRUE
[08:08:01.947] | stdout: TRUE
[08:08:01.947] | signal: TRUE
[08:08:01.947] | resignal: FALSE
[08:08:01.947] | force: TRUE
[08:08:01.947] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.947] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:01.947] | until=3
[08:08:01.947] | relaying element #3
[08:08:01.947] | value() for MulticoreFuture (<unnamed-50>) ...
[08:08:01.948] | : result() for MulticoreFuture ...
[08:08:01.948] | : . readImmediateCondition() ...
[08:08:01.948] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:01.949] | : . ' Number of RDS files: 0
[08:08:01.949] | : . ' Returned conditions set:
[08:08:01.949] | : . '  list()
[08:08:01.949] | : . readImmediateCondition() ... done
[08:08:01.950] | : . result() for MulticoreFuture ...
[08:08:01.950] | : . result() for MulticoreFuture ... done
[08:08:01.950] | : . signalConditions() ...
[08:08:01.950] | : . ' include = ‘immediateCondition’
[08:08:01.950] | : . ' exclude = 
[08:08:01.951] | : . ' resignal = FALSE
[08:08:01.951] | : . ' Number of conditions: 6
[08:08:01.951] | : . '  int 6
[08:08:01.951] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.952] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.952] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.952] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.952] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.952] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.953] | : . signalConditions() ... done
[08:08:01.953] | : result() for MulticoreFuture ... done
[08:08:01.953] | : result() for MulticoreFuture ...
[08:08:01.953] | : result() for MulticoreFuture ... done
[08:08:01.953] | : signalConditions() ...
[08:08:01.953] | : . include = ‘immediateCondition’
[08:08:01.954] | : . exclude = 
[08:08:01.954] | : . resignal = FALSE
[08:08:01.954] | : . Number of conditions: 6
[08:08:01.954] | : .  int 6
[08:08:01.955] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.955] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.955] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.955] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.955] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.955] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.956] | : signalConditions() ... done
[08:08:01.956] | : relay stdout ...
[08:08:01.956] | : relay stdout ... done
[08:08:01.956] | : check for misuse ...
[08:08:01.956] | : check for misuse ... done
[08:08:01.956] | value() for MulticoreFuture (<unnamed-50>) ... done
[08:08:01.956] | result() for MulticoreFuture ...
[08:08:01.956] | result() for MulticoreFuture ... done
[08:08:01.957] | signalConditions() ...
[08:08:01.957] | : include = ‘immediateCondition’
[08:08:01.957] | : exclude = 
[08:08:01.957] | : resignal = FALSE
[08:08:01.957] | : Number of conditions: 6
[08:08:01.957] | :  int 6
[08:08:01.958] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.958] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.958] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.958] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.958] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.958] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.958] | signalConditions() ... done
[08:08:01.958] | result() for MulticoreFuture ...
[08:08:01.959] | result() for MulticoreFuture ... done
[08:08:01.959] | signalConditions() ...
[08:08:01.959] | : include = ‘condition’
[08:08:01.959] | : exclude = ‘error’, ‘immediateCondition’
[08:08:01.959] | : resignal = TRUE
[08:08:01.959] | : Number of conditions: 6
[08:08:01.959] | :  int 6
[08:08:01.960] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.960] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.859] | : . ' , attachPackages() ...
[08:08:01.960] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.960] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.859] | : . ' , ; packages: [n=1] ‘future’
[08:08:01.960] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.961] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.860] | : . ' , attachPackages() ... done
[08:08:01.961] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.961] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.860] | : . ' , attachPackages() ...
[08:08:01.961] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.963] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.861] | : . ' , ; packages: [n=0] 
[08:08:01.963] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.963] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.861] | : . ' , attachPackages() ... done
[08:08:01.964] | signalConditions() ... done
[08:08:01.964] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.964] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.964] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:01.964] value(<MulticoreFuture>, ...) ...
[08:08:01.964] value(<MulticoreFuture>, ...) ... done
[08:08:01.964] value() for MulticoreFuture (<unnamed-50>) ...
[08:08:01.964] | result() for MulticoreFuture ...
[08:08:01.965] | result() for MulticoreFuture ... done
[08:08:01.965] | result() for MulticoreFuture ...
[08:08:01.965] | result() for MulticoreFuture ... done
[08:08:01.965] | signalConditions() ...
[08:08:01.965] | : include = ‘immediateCondition’
[08:08:01.965] | : exclude = 
[08:08:01.965] | : resignal = FALSE
[08:08:01.965] | : Number of conditions: 6
[08:08:01.966] | :  int 6
[08:08:01.966] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.966] | : already signaled, skipping
[08:08:01.966] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.966] | : already signaled, skipping
[08:08:01.966] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.967] | : already signaled, skipping
[08:08:01.967] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.967] | : already signaled, skipping
[08:08:01.967] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.967] | : already signaled, skipping
[08:08:01.967] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.967] | : already signaled, skipping
[08:08:01.967] | signalConditions() ... done
[08:08:01.968] | check for misuse ...
[08:08:01.968] | check for misuse ... done
[08:08:01.968] value() for MulticoreFuture (<unnamed-50>) ... done
[08:08:01.968] value: <NULL>
[08:08:01.968] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:01.968] | nx: 6
[08:08:01.968] | relay: TRUE
[08:08:01.968] | stdout: TRUE
[08:08:01.968] | signal: TRUE
[08:08:01.968] | resignal: FALSE
[08:08:01.969] | force: TRUE
[08:08:01.969] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.969] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.969] | until=4
[08:08:01.969] | relaying element #4
[08:08:01.969] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.969] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.969] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:01.970] resolve() for MulticoreFuture ...
[08:08:01.970] resolve() for MulticoreFuture ... done
[08:08:01.970] length: 3 (resolved future 3)

[08:08:01.970] checking value #4:
[08:08:01.970] 'obj' is NULL
[08:08:01.970] signalConditionsASAP(NULL, pos=4) ...
[08:08:01.970] | nx: 6
[08:08:01.970] | relay: TRUE
[08:08:01.971] | stdout: TRUE
[08:08:01.971] | signal: TRUE
[08:08:01.971] | resignal: FALSE
[08:08:01.971] | force: TRUE
[08:08:01.971] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.971] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.971] | until=5
[08:08:01.971] | relaying element #5
[08:08:01.971] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.972] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.972] signalConditionsASAP(NULL, pos=4) ... done
[08:08:01.972] signalConditionsASAP(NULL, pos=4) ...
[08:08:01.972] | nx: 6
[08:08:01.972] | relay: TRUE
[08:08:01.972] | stdout: TRUE
[08:08:01.972] | signal: TRUE
[08:08:01.972] | resignal: FALSE
[08:08:01.972] | force: TRUE
[08:08:01.973] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.973] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.973] | until=5
[08:08:01.973] | relaying element #5
[08:08:01.973] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.973] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.973] signalConditionsASAP(NULL, pos=4) ... done
[08:08:01.973] length: 2 (resolved future 4)

[08:08:01.974] checking value #5:
[08:08:01.974] 'obj' is NULL
[08:08:01.974] signalConditionsASAP(NULL, pos=5) ...
[08:08:01.974] | nx: 6
[08:08:01.974] | relay: TRUE
[08:08:01.974] | stdout: TRUE
[08:08:01.974] | signal: TRUE
[08:08:01.974] | resignal: FALSE
[08:08:01.974] | force: TRUE
[08:08:01.975] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:01.975] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.975] | until=6
[08:08:01.975] | relaying element #6
[08:08:01.975] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.975] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.975] signalConditionsASAP(NULL, pos=5) ... done
[08:08:01.975] signalConditionsASAP(NULL, pos=5) ...
[08:08:01.975] | nx: 6
[08:08:01.976] | relay: TRUE
[08:08:01.976] | stdout: TRUE
[08:08:01.976] | signal: TRUE
[08:08:01.976] | resignal: FALSE
[08:08:01.976] | force: TRUE
[08:08:01.976] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.976] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.976] | until=6
[08:08:01.976] | relaying element #6
[08:08:01.977] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.977] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.977] signalConditionsASAP(NULL, pos=5) ... done
[08:08:01.977] length: 1 (resolved future 5)

[08:08:01.977] checking value #6:
[08:08:01.977] 'obj' is atomic
[08:08:01.977] signalConditionsASAP(numeric, pos=6) ...
[08:08:01.978] | nx: 6
[08:08:01.978] | relay: TRUE
[08:08:01.978] | stdout: TRUE
[08:08:01.978] | signal: TRUE
[08:08:01.978] | resignal: FALSE
[08:08:01.978] | force: TRUE
[08:08:01.978] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:01.978] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.978] | until=6
[08:08:01.979] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:01.979] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.979] signalConditionsASAP(numeric, pos=6) ... done
[08:08:01.979] length: 0 (resolved future 6)

[08:08:01.979] Relaying remaining futures ...
[08:08:01.979] | signalConditionsASAP(NULL, pos=0) ...
[08:08:01.979] | : nx: 6
[08:08:01.979] | : relay: TRUE
[08:08:01.980] | : stdout: TRUE
[08:08:01.980] | : signal: TRUE
[08:08:01.980] | : resignal: FALSE
[08:08:01.980] | : force: TRUE
[08:08:01.980] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:01.980] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:01.980] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:01.980] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:01.981] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:01.981] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:4] 2 1 3 1
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
Type of future: multisession
[08:08:01.985] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.986] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:01.986] | : all.equal() for FutureStrategyList ...
[08:08:01.986] | : . New stack:
[08:08:01.986] | : . List of 1
[08:08:01.986] | : .  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:01.986] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.986] | : .   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:01.986] | : .   ..- attr(*, "init")= logi TRUE
[08:08:01.986] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:01.986] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:01.986] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:01.986] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:01.986] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:08:01.986] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:01.986] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.990] | : . Old stack:
[08:08:01.990] | : . List of 1
[08:08:01.990] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.990] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.990] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.990] | : .   ..- attr(*, "init")= chr "done"
[08:08:01.990] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.990] | : .     ...)  
[08:08:01.990] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.990] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.990] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:01.990] | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.990] | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.990] | : .     ...)  
[08:08:01.990] | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.990] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.994] | : . Not identical
[08:08:01.994] | : . all.equal() for future ...
[08:08:01.994] | : . ' List of 2
[08:08:01.994] | : . '  $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:01.994] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.994] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:01.994] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:01.994] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:01.994] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:01.994] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:01.994] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:01.994] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:08:01.994] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:01.994] | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.994] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.994] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.994] | : . '   ..- attr(*, "init")= chr "done"
[08:08:01.994] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.994] | : . '     ...)  
[08:08:01.994] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.994] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.994] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:01.994] | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759f5c168> 
[08:08:01.994] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.994] | : . '     ...)  
[08:08:01.994] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:02.000] | : . ' Formals differ
[08:08:02.000] | : . all.equal() for future ... done
[08:08:02.000] | : . Future strategies differ at level 1
[08:08:02.000] | : all.equal() for FutureStrategyList ... done
[08:08:02.000] | : plan(): Setting new future backend stack:
[08:08:02.000] | : List of future strategies:
[08:08:02.000] | : 1. multisession:
[08:08:02.000] | :    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:02.000] | :    - tweaked: FALSE
[08:08:02.000] | :    - call: plan(strategy)
[08:08:02.001] | : List of 1
[08:08:02.001] | :  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:02.001] | :     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:02.001] | :   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:02.001] | :   ..- attr(*, "init")= logi TRUE
[08:08:02.001] | :   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:02.001] | :     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:02.001] | :   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:02.001] | :   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:02.001] | :   ..- attr(*, "untweakable")= chr "persistent"
[08:08:02.001] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:02.001] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:02.004] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:02.004] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:02.004] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:02.004] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:02.005] | : . Legacy shutdown of cluster workers ...
[08:08:02.005] | : . ' Stopping existing cluster ...
[08:08:02.005] | : . ' , No pre-existing cluster. Skipping
[08:08:02.005] | : . ' Stopping existing cluster ... done
[08:08:02.005] | : . Legacy shutdown of cluster workers ... done
[08:08:02.005] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:02.006] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:02.006] | : . function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:02.006] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:02.006] | : .  - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:02.006] | : .  - attr(*, "init")= logi TRUE
[08:08:02.006] | : .  - attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:02.006] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:02.006] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:02.006] | : .  - attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:02.006] | : .  - attr(*, "untweakable")= chr "persistent"
[08:08:02.006] | : .  - attr(*, "call")= language plan(strategy)
[08:08:02.008] | : . init: TRUE
[08:08:02.008] | : . makeFutureBackend(<multisession>) ...
[08:08:02.008] | : . ' Backend function: <‘NULL’>
[08:08:02.008] | : . ' Evaluator tweak arguments: [n=0]
[08:08:02.008] | : . '  list()
[08:08:02.009] | : . ' Evaluator formal arguments: [n=4]
[08:08:02.009] | : . '  list()
[08:08:02.009] | : . ' Backend factory arguments: [n=4]
[08:08:02.009] | : . ' Dotted pair list of 4
[08:08:02.009] | : . '  $ workers     : language availableCores()
[08:08:02.009] | : . '  $ rscript_libs: language .libPaths()
[08:08:02.009] | : . '  $ gc          : logi FALSE
[08:08:02.009] | : . '  $ earlySignal : logi FALSE
[08:08:02.011] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ...
[08:08:02.011] | : . ' , Arguments:
[08:08:02.011] | : . ' , List of 5
[08:08:02.011] | : . ' ,  $ workers     : Named int 2
[08:08:02.011] | : . ' ,   ..- attr(*, "names")= chr "mc.cores"
[08:08:02.011] | : . ' ,  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:02.011] | : . ' ,  $ interrupts  : logi TRUE
[08:08:02.011] | : . ' ,  $ gc          : logi FALSE
[08:08:02.011] | : . ' ,  $ earlySignal : logi FALSE
[08:08:02.015] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[08:08:02.015] | : . ' , ; workers: 2
[08:08:02.015] | : . ' , ; getCluster() ...
[08:08:02.015] | : . ' , ; getCluster() ... done
[08:08:02.015] | : . ' , ; Stopping existing cluster ...
[08:08:02.015] | : . ' , ; ` No pre-existing cluster. Skipping
[08:08:02.015] | : . ' , ; Stopping existing cluster ... done
[08:08:02.016] | : . ' , ; Starting new cluster ...
[08:08:02.016] | : . ' , ; ` makeCluster(workers, ...) ...
[08:08:02.016] | : . ' , ; ` | Arguments:
[08:08:02.016] | : . ' , ; ` | List of 2
[08:08:02.016] | : . ' , ; ` |  $             : int 2
[08:08:02.016] | : . ' , ; ` |  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:02.017] | : . ' , ; ` | .makeCluster() ...
[08:08:02.017] | : . ' , ; ` | : workers: ‘2’
[08:08:02.017] | : . ' , ; ` | : R_FUTURE_PLAN: NA
[08:08:02.017] | : . ' , ; ` | : parallelly::makeClusterPSOCK() arguments:
[08:08:02.017] | : . ' , ; ` | : List of 2
[08:08:02.017] | : . ' , ; ` | :  $             : int 2
[08:08:02.017] | : . ' , ; ` | :  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:02.524] | : . ' , ; ` | : Generated cluster UUID
[08:08:02.524] | : . ' , ; ` | : Cluster UUID: ‘d9ae098e6e77722a626531d398ab6c43’
[08:08:02.524] | : . ' , ; ` | : Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:02.527] | : . ' , ; ` | .makeCluster() ... done
[08:08:02.527] | : . ' , ; ` | Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:02.528] | : . ' , ; ` makeCluster(workers, ...) ... done
[08:08:02.529] | : . ' , ; ` Number of workers: 2
[08:08:02.529] | : . ' , ; ` Workers UUID: ‘d9ae098e6e77722a626531d398ab6c43’
[08:08:02.529] | : . ' , ; Starting new cluster ... done
[08:08:02.529] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[08:08:02.529] | : . ' , Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:02.529] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ... done
[08:08:02.529] | : . makeFutureBackend(<multisession>) ... done
[08:08:02.530] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:02.530] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:02.530] | : . plan(): nbrOfWorkers() = 2
[08:08:02.530] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:02.530] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
Dimensions: NULL
[08:08:02.530] | future(..., label = NULL) ...
[08:08:02.530] | : lazy: FALSE
[08:08:02.530] | : stdout: TRUE
[08:08:02.530] | : conditions: [n=1] ‘condition’
[08:08:02.531] | : gc: FALSE
[08:08:02.531] | : earlySignal: FALSE
[08:08:02.531] | : getGlobalsAndPackages() ...
[08:08:02.531] | : . Searching for globals ...
[08:08:02.532] | : . ' globals found: [0] 
[08:08:02.532] | : . Searching for globals ... done
[08:08:02.532] | : . globals: [0] <none>
[08:08:02.532] | : . packages: [0] <none>
[08:08:02.532] | : getGlobalsAndPackages() ... done
[08:08:02.533] | : run() for ‘Future’ (<unnamed-51>) ...
[08:08:02.533] | : . state: ‘created’
[08:08:02.533] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:02.533] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:02.533] | : . Using MultisessionFutureBackend ...
[08:08:02.533] | : . ' Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:02.533] | : . ' Launching futures ...
[08:08:02.534] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:02.534] | : . ' , ; Workers: [n=2]
[08:08:02.534] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:02.535] | : . ' , ; FutureRegistry: ‘workers-d9ae098e6e77722a626531d398ab6c43’
[08:08:02.536] | : . ' , ; requestWorker() ...
[08:08:02.536] | : . ' , ; ` requestNode() ...
[08:08:02.536] | : . ' , ; ` | Number of workers: 2
[08:08:02.536] | : . ' , ; ` | Polling for a free worker ...
[08:08:02.536] | : . ' , ; ` | : FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:02.536] | : . ' , ; ` | : . Created empty registry ‘workers-d9ae098e6e77722a626531d398ab6c43’
[08:08:02.536] | : . ' , ; ` | : . Listing all futures
[08:08:02.536] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:02.536] | : . ' , ; ` | : FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:02.536] | : . ' , ; ` | : Total time: 0
[08:08:02.537] | : . ' , ; ` | Polling for a free worker ... done
[08:08:02.537] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:02.537] | : . ' , ; ` | : Listing all futures
[08:08:02.537] | : . ' , ; ` | : Number of registered futures: 0
[08:08:02.537] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:02.537] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:02.537] | : . ' , ; ` | Index of first available worker: 1
[08:08:02.537] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:02.607] | : . ' , ; ` | : Worker is functional
[08:08:02.608] | : . ' , ; ` | : FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:02.608] | : . ' , ; ` | : . Listing all futures
[08:08:02.608] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:02.608] | : . ' , ; ` | : FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:02.608] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:02.608] | : . ' , ; ` requestNode() ... done
[08:08:02.608] | : . ' , ; ` cluster node index: 1
[08:08:02.609] | : . ' , ; requestWorker() ... done
[08:08:02.609] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:02.609] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:02.609] | : . ' , ; launchFuture() ...
[08:08:02.609] | : . ' , ; ` cluster node index: 1
[08:08:02.610] | : . ' , ; ` getFutureData() ...
[08:08:02.610] | : . ' , ; ` | getFutureCore() ...
[08:08:02.610] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:02.610] | : . ' , ; ` | getFutureCore() ... done
[08:08:02.610] | : . ' , ; ` | getFutureCapture() ...
[08:08:02.610] | : . ' , ; ` | getFutureCapture() ... done
[08:08:02.610] | : . ' , ; ` | getFutureContext() ...
[08:08:02.610] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:02.610] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:02.611] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:02.611] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:02.611] | : . ' , ; ` | getFutureContext() ... done
[08:08:02.611] | : . ' , ; ` getFutureData() ... done
[08:08:02.611] | : . ' , ; ` FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'add', earlySignal = 0) ...
[08:08:02.612] | : . ' , ; ` | Appended future to position #1
[08:08:02.612] | : . ' , ; ` | Number of registered futures: 1
[08:08:02.612] | : . ' , ; ` FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'add', earlySignal = 0) ... done
[08:08:02.612] | : . ' , ; launchFuture() ... done
[08:08:02.612] | : . ' , ; MultisessionFuture started
[08:08:02.612] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:02.612] | : . ' Launching futures ... done
[08:08:02.612] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:02.612] | : . Using MultisessionFutureBackend ... done
[08:08:02.612] | : run() for ‘Future’ (<unnamed-51>) ... done
[08:08:02.613] | future(..., label = NULL) ... done
[08:08:02.613] | future(..., label = NULL) ...
[08:08:02.613] | : lazy: FALSE
[08:08:02.613] | : stdout: TRUE
[08:08:02.613] | : conditions: [n=1] ‘condition’
[08:08:02.613] | : gc: FALSE
[08:08:02.613] | : earlySignal: FALSE
[08:08:02.613] | : getGlobalsAndPackages() ...
[08:08:02.613] | : . Searching for globals ...
[08:08:02.615] | : . ' globals found: [0] 
[08:08:02.615] | : . Searching for globals ... done
[08:08:02.615] | : . globals: [0] <none>
[08:08:02.615] | : . packages: [0] <none>
[08:08:02.615] | : getGlobalsAndPackages() ... done
[08:08:02.615] | : run() for ‘Future’ (<unnamed-52>) ...
[08:08:02.615] | : . state: ‘created’
[08:08:02.616] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:02.616] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:02.616] | : . Using MultisessionFutureBackend ...
[08:08:02.616] | : . ' Number of futures since start: 1 (1 created, 1 launched, 0 finished)
[08:08:02.616] | : . ' Launching futures ...
[08:08:02.616] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:02.616] | : . ' , ; Workers: [n=2]
[08:08:02.616] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:02.618] | : . ' , ; FutureRegistry: ‘workers-d9ae098e6e77722a626531d398ab6c43’
[08:08:02.618] | : . ' , ; requestWorker() ...
[08:08:02.618] | : . ' , ; ` requestNode() ...
[08:08:02.618] | : . ' , ; ` | Number of workers: 2
[08:08:02.618] | : . ' , ; ` | Polling for a free worker ...
[08:08:02.618] | : . ' , ; ` | : FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:02.619] | : . ' , ; ` | : . Listing all futures
[08:08:02.619] | : . ' , ; ` | : . Number of registered futures: 1
[08:08:02.619] | : . ' , ; ` | : FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:02.619] | : . ' , ; ` | : Total time: 0
[08:08:02.619] | : . ' , ; ` | Polling for a free worker ... done
[08:08:02.619] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:02.619] | : . ' , ; ` | : Listing all futures
[08:08:02.619] | : . ' , ; ` | : Number of registered futures: 1
[08:08:02.619] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:02.619] | : . ' , ; ` | avail: [n=2] ‘2’
[08:08:02.620] | : . ' , ; ` | Index of first available worker: 2
[08:08:02.620] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:02.693] | : . ' , ; ` | : Worker is functional
[08:08:02.693] | : . ' , ; ` | : FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:02.693] | : . ' , ; ` | : . Listing all futures
[08:08:02.694] | : . ' , ; ` | : . Number of registered futures: 1
[08:08:02.694] | : . ' , ; ` | : FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:02.694] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:02.694] | : . ' , ; ` requestNode() ... done
[08:08:02.694] | : . ' , ; ` cluster node index: 2
[08:08:02.695] | : . ' , ; requestWorker() ... done
[08:08:02.695] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:02.695] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:02.696] | : . ' , ; launchFuture() ...
[08:08:02.696] | : . ' , ; ` cluster node index: 2
[08:08:02.696] | : . ' , ; ` getFutureData() ...
[08:08:02.696] | : . ' , ; ` | getFutureCore() ...
[08:08:02.696] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:02.696] | : . ' , ; ` | getFutureCore() ... done
[08:08:02.696] | : . ' , ; ` | getFutureCapture() ...
[08:08:02.697] | : . ' , ; ` | getFutureCapture() ... done
[08:08:02.697] | : . ' , ; ` | getFutureContext() ...
[08:08:02.697] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:02.697] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:02.697] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:02.698] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:02.698] | : . ' , ; ` | getFutureContext() ... done
[08:08:02.698] | : . ' , ; ` getFutureData() ... done
[08:08:02.699] | : . ' , ; ` FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'add', earlySignal = 0) ...
[08:08:02.699] | : . ' , ; ` | Appended future to position #2
[08:08:02.699] | : . ' , ; ` | Number of registered futures: 2
[08:08:02.699] | : . ' , ; ` FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'add', earlySignal = 0) ... done
[08:08:02.699] | : . ' , ; launchFuture() ... done
[08:08:02.700] | : . ' , ; MultisessionFuture started
[08:08:02.700] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:02.700] | : . ' Launching futures ... done
[08:08:02.700] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:02.700] | : . Using MultisessionFutureBackend ... done
[08:08:02.700] | : run() for ‘Future’ (<unnamed-52>) ... done
[08:08:02.701] | future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675c81f528> 
 $ c:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675bfbe9d0> 
 $  : NULL
 $  : NULL
 $  : num 6
List of 6
 $ a: num 1
 $ b:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675c81f528> 
 $ c:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675bfbe9d0> 
 $  : NULL
 $  : NULL
 $  : num 6
[08:08:02.707] | resolved() for list ...
[08:08:02.708] | : Number of elements: 6
[08:08:02.708] | : Number of futures: 6
[08:08:02.708] | : resolved() for MultisessionFuture (<unnamed-51>) ...
[08:08:02.709] | : . Cluster node socket connection: index=4, id=984
[08:08:02.709] | : . assertValidConnection() ...
[08:08:02.710] | : . ' cluster node index: 1
[08:08:02.710] | : . assertValidConnection() ... done
[08:08:02.721] | : . socketSelect(list(<connection #4 (id=984)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:02.721] | : resolved() for MultisessionFuture (<unnamed-51>) ... done
[08:08:02.721] | : resolved() for MultisessionFuture (<unnamed-52>) ...
[08:08:02.721] | : . Cluster node socket connection: index=5, id=985
[08:08:02.722] | : . assertValidConnection() ...
[08:08:02.722] | : . ' cluster node index: 2
[08:08:02.722] | : . assertValidConnection() ... done
[08:08:02.733] | : . socketSelect(list(<connection #5 (id=985)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:02.733] | : resolved() for MultisessionFuture (<unnamed-52>) ... done
[08:08:02.733] | resolved() for list ... done
 Named logi [1:6] TRUE FALSE FALSE TRUE TRUE TRUE
 - attr(*, "names")= chr [1:6] "a" "b" "c" "" ...
[08:08:02.734] | value() for list ...
[08:08:02.734] | : recursive: 0
[08:08:02.734] | : reduce: FALSE
[08:08:02.734] | : length: 6
[08:08:02.734] | : elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:02.734] | : Number of remaining objects: 6
[08:08:02.734] | : checking value #1:
[08:08:02.735] | : 'obj' is atomic
[08:08:02.735] | : signalConditionsASAP(numeric, pos=1) ...
[08:08:02.735] | : . nx: 6
[08:08:02.735] | : . relay: TRUE
[08:08:02.735] | : . stdout: TRUE
[08:08:02.735] | : . signal: TRUE
[08:08:02.735] | : . resignal: FALSE
[08:08:02.735] | : . force: TRUE
[08:08:02.735] | : . relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:02.735] | : . queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:02.735] | : . until=2
[08:08:02.736] | : . relaying element #2
[08:08:02.736] | : . relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:02.736] | : . queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:02.736] | : signalConditionsASAP(numeric, pos=1) ... done
[08:08:02.736] | : length: 5 (resolved future 1)
[08:08:02.736] | value() for list ... done
[08:08:02.736] | checking value #2:
[08:08:02.736] | 'obj' is MultisessionFuture
[08:08:02.736] | resolved() for MultisessionFuture (<unnamed-51>) ...
[08:08:02.737] | : Cluster node socket connection: index=4, id=984
[08:08:02.737] | : assertValidConnection() ...
[08:08:02.737] | : . cluster node index: 1
[08:08:02.737] | : assertValidConnection() ... done
[08:08:02.738] | : receiveMessageFromWorker() for ClusterFuture ...
[08:08:02.738] | : . cluster node index: 1
[08:08:02.738] | : . [1] TRUE
[08:08:02.738] | : . received data:
[08:08:02.738] | : . List of 5
[08:08:02.738] | : .  $ type   : chr "VALUE"
[08:08:02.738] | : .  $ value  :List of 16
[08:08:02.738] | : .   ..$ value              : num 2
[08:08:02.738] | : .   ..$ visible            : logi TRUE
[08:08:02.738] | : .   ..$ stdout             : chr ""
[08:08:02.738] | : .   ..$ conditions         : list()
[08:08:02.738] | : .   ..$ rng                : logi FALSE
[08:08:02.738] | : .   ..$ seed               : NULL
[08:08:02.738] | : .   ..$ misuseGlobalEnv    : NULL
[08:08:02.738] | : .   ..$ misuseConnections  :List of 3
[08:08:02.738] | : .   .. ..$ added   : NULL
[08:08:02.738] | : .   .. ..$ removed : NULL
[08:08:02.738] | : .   .. ..$ replaced: NULL
[08:08:02.738] | : .   ..$ misuseDevices      : NULL
[08:08:02.738] | : .   ..$ misuseDefaultDevice: list()
[08:08:02.738] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:02.738] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:02.738] | : .   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "51"
[08:08:02.738] | : .   ..$ session_uuid       : chr "fead307841043f6d8e4547187745dcf7"
[08:08:02.738] | : .   .. ..- attr(*, "source")=List of 5
[08:08:02.738] | : .   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:02.738] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:02.738] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:02.738] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:02.738] | : .   .. .. ..$ pid   : int 68968
[08:08:02.738] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:02.738] | : .   .. .. ..$ random: int 2147483647
[08:08:02.738] | : .   ..$ r_info             :List of 4
[08:08:02.738] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:02.738] | : .   .. .. ..$ : int [1:3] 4 5 1
[08:08:02.738] | : .   .. ..$ os           : chr "unix"
[08:08:02.738] | : .   .. ..$ os_name      : chr "Linux"
[08:08:02.738] | : .   .. ..$ captures_utf8: logi TRUE
[08:08:02.738] | : .   ..$ version            : chr "1.8"
[08:08:02.738] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:08:02.738] | : .  $ success: logi TRUE
[08:08:02.738] | : .  $ time   : 'proc_time' Named num [1:5] 0.068 0.003 0.071 0 0
[08:08:02.738] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:02.738] | : .  $ tag    : NULL
[08:08:02.757] | : . Received FutureResult
[08:08:02.758] | : . FutureResult:
[08:08:02.758] | : . value: ‘numeric’
[08:08:02.758] | : . visible: TRUE
[08:08:02.758] | : . stdout: character
[08:08:02.758] | : . conditions: [n = 0] 
[08:08:02.758] | : . RNG used: FALSE
[08:08:02.758] | : . duration: 0.06855369 secs (started 2025-06-17 08:08:02.654686)
[08:08:02.758] | : . version: 1.8
[08:08:02.758] | : . FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'remove', earlySignal = 0) ...
[08:08:02.758] | : . ' Removed future from position #1
[08:08:02.759] | : . ' Number of registered futures: 1
[08:08:02.759] | : . FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'remove', earlySignal = 0) ... done
[08:08:02.759] | : . Erased future from future backend
[08:08:02.759] | : . result() for ClusterFuture ...
[08:08:02.759] | : . ' result already collected: FutureResult
[08:08:02.759] | : . result() for ClusterFuture ... done
[08:08:02.759] | : . signalConditions() ...
[08:08:02.759] | : . ' include = ‘immediateCondition’
[08:08:02.759] | : . ' exclude = 
[08:08:02.760] | : . ' resignal = FALSE
[08:08:02.760] | : . ' Number of conditions: 0
[08:08:02.760] | : . '  int 0
[08:08:02.760] | : . signalConditions() ... done
[08:08:02.760] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:08:02.760] | : receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:02.760] | resolved() for MultisessionFuture (<unnamed-51>) ... done
[08:08:02.761] | assertFutureResult() ...
[08:08:02.761] | : Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:02.761] | : Future uuid: 51
[08:08:02.761] | : identical; success
[08:08:02.761] | assertFutureResult() ... done
[08:08:02.761] | MultisessionFuture #2
[08:08:02.761] | signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:02.761] | : nx: 6
[08:08:02.761] | : relay: TRUE
[08:08:02.761] | : stdout: TRUE
[08:08:02.761] | : signal: TRUE
[08:08:02.761] | : resignal: FALSE
[08:08:02.762] | : force: TRUE
[08:08:02.762] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:02.762] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:02.762] | : until=2
[08:08:02.762] | : relaying element #2
[08:08:02.762] | : value() for MultisessionFuture (<unnamed-51>) ...
[08:08:02.762] | : . result() for ClusterFuture ...
[08:08:02.762] | : . ' result already collected: FutureResult
[08:08:02.762] | : . result() for ClusterFuture ... done
[08:08:02.762] | : . result() for ClusterFuture ...
[08:08:02.763] | : . ' result already collected: FutureResult
[08:08:02.763] | : . result() for ClusterFuture ... done
[08:08:02.763] | : . signalConditions() ...
[08:08:02.763] | : . ' include = ‘immediateCondition’
[08:08:02.763] | : . ' exclude = 
[08:08:02.763] | : . ' resignal = FALSE
[08:08:02.763] | : . ' Number of conditions: 0
[08:08:02.763] | : . '  int 0
[08:08:02.764] | : . signalConditions() ... done
[08:08:02.764] | : . relay stdout ...
[08:08:02.764] | : . relay stdout ... done
[08:08:02.764] | : . check for misuse ...
[08:08:02.764] | : . check for misuse ... done
[08:08:02.764] | : value() for MultisessionFuture (<unnamed-51>) ... done
[08:08:02.764] | : result() for ClusterFuture ...
[08:08:02.764] | : . result already collected: FutureResult
[08:08:02.764] | : result() for ClusterFuture ... done
[08:08:02.765] | : signalConditions() ...
[08:08:02.765] | : . include = ‘immediateCondition’
[08:08:02.765] | : . exclude = 
[08:08:02.765] | : . resignal = FALSE
[08:08:02.765] | : . Number of conditions: 0
[08:08:02.765] | : .  int 0
[08:08:02.765] | : signalConditions() ... done
[08:08:02.766] | : result() for ClusterFuture ...
[08:08:02.766] | : . result already collected: FutureResult
[08:08:02.766] | : result() for ClusterFuture ... done
[08:08:02.766] | : signalConditions() ...
[08:08:02.766] | : . include = ‘condition’
[08:08:02.766] | : . exclude = ‘error’, ‘immediateCondition’
[08:08:02.766] | : . resignal = TRUE
[08:08:02.766] | : . Number of conditions: 0
[08:08:02.766] | : .  int 0
[08:08:02.767] | : signalConditions() ... done
[08:08:02.767] | : relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:02.767] | : queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:02.767] | signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:02.767] | value(<MultisessionFuture>, ...) ...
[08:08:02.767] | value(<MultisessionFuture>, ...) ... done
[08:08:02.767] | value() for MultisessionFuture (<unnamed-51>) ...
[08:08:02.767] | : result() for ClusterFuture ...
[08:08:02.767] | : . result already collected: FutureResult
[08:08:02.768] | : result() for ClusterFuture ... done
[08:08:02.768] | : result() for ClusterFuture ...
[08:08:02.768] | : . result already collected: FutureResult
[08:08:02.768] | : result() for ClusterFuture ... done
[08:08:02.768] | : signalConditions() ...
[08:08:02.768] | : . include = ‘immediateCondition’
[08:08:02.768] | : . exclude = 
[08:08:02.768] | : . resignal = FALSE
[08:08:02.768] | : . Number of conditions: 0
[08:08:02.768] | : .  int 0
[08:08:02.769] | : signalConditions() ... done
[08:08:02.769] | : check for misuse ...
[08:08:02.769] | : check for misuse ... done
[08:08:02.769] | value() for MultisessionFuture (<unnamed-51>) ... done
[08:08:02.769] | value: <numeric>
[08:08:02.769] | signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:02.769] | : nx: 6
[08:08:02.769] | : relay: TRUE
[08:08:02.770] | : stdout: TRUE
[08:08:02.770] | : signal: TRUE
[08:08:02.770] | : resignal: FALSE
[08:08:02.770] | : force: TRUE
[08:08:02.770] | : relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:02.770] | : queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:02.770] | : until=3
[08:08:02.770] | : relaying element #3
[08:08:02.770] | : relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:02.770] | : queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:02.770] | signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:02.771] | resolve() for MultisessionFuture ...
[08:08:02.771] | resolve() for MultisessionFuture ... done
[08:08:02.771] | length: 4 (resolved future 2)
[08:08:02.771] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:02.771] checking value #3:
[08:08:02.771] 'obj' is MultisessionFuture
[08:08:02.771] resolved() for MultisessionFuture (<unnamed-52>) ...
[08:08:02.771] | Cluster node socket connection: index=5, id=985
[08:08:02.772] | assertValidConnection() ...
[08:08:02.772] | : cluster node index: 2
[08:08:02.772] | assertValidConnection() ... done
[08:08:02.782] | socketSelect(list(<connection #5 (id=985)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:02.782] resolved() for MultisessionFuture (<unnamed-52>) ... done
[08:08:02.782] checking value #4:
[08:08:02.783] 'obj' is NULL
[08:08:02.783] signalConditionsASAP(NULL, pos=4) ...
[08:08:02.783] | nx: 6
[08:08:02.783] | relay: TRUE
[08:08:02.783] | stdout: TRUE
[08:08:02.783] | signal: TRUE
[08:08:02.783] | resignal: FALSE
[08:08:02.783] | force: TRUE
[08:08:02.783] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:02.783] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:02.784] | until=5
[08:08:02.784] | relaying element #3
[08:08:02.784] | relaying element #5
[08:08:02.784] | relayed: [n=6] TRUE, TRUE, FALSE, TRUE, FALSE, FALSE
[08:08:02.784] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:02.784] signalConditionsASAP(NULL, pos=4) ... done
[08:08:02.784] signalConditionsASAP(NULL, pos=4) ...
[08:08:02.784] | nx: 6
[08:08:02.784] | relay: TRUE
[08:08:02.784] | stdout: TRUE
[08:08:02.784] | signal: TRUE
[08:08:02.785] | resignal: FALSE
[08:08:02.785] | force: TRUE
[08:08:02.785] | relayed: [n=6] TRUE, TRUE, FALSE, TRUE, FALSE, FALSE
[08:08:02.785] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:02.785] | until=5
[08:08:02.785] | relaying element #3
[08:08:02.785] | relaying element #5
[08:08:02.785] | relayed: [n=6] TRUE, TRUE, FALSE, TRUE, FALSE, FALSE
[08:08:02.785] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:02.785] signalConditionsASAP(NULL, pos=4) ... done
[08:08:02.785] length: 3 (resolved future 4)

[08:08:02.786] checking value #5:
[08:08:02.786] 'obj' is NULL
[08:08:02.786] signalConditionsASAP(NULL, pos=5) ...
[08:08:02.786] | nx: 6
[08:08:02.786] | relay: TRUE
[08:08:02.786] | stdout: TRUE
[08:08:02.786] | signal: TRUE
[08:08:02.786] | resignal: FALSE
[08:08:02.786] | force: TRUE
[08:08:02.786] | relayed: [n=6] TRUE, TRUE, FALSE, TRUE, FALSE, FALSE
[08:08:02.786] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:02.787] | until=6
[08:08:02.787] | relaying element #3
[08:08:02.787] | relaying element #6
[08:08:02.787] | relayed: [n=6] TRUE, TRUE, FALSE, TRUE, TRUE, FALSE
[08:08:02.787] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:02.787] signalConditionsASAP(NULL, pos=5) ... done
[08:08:02.787] signalConditionsASAP(NULL, pos=5) ...
[08:08:02.787] | nx: 6
[08:08:02.787] | relay: TRUE
[08:08:02.787] | stdout: TRUE
[08:08:02.787] | signal: TRUE
[08:08:02.788] | resignal: FALSE
[08:08:02.788] | force: TRUE
[08:08:02.788] | relayed: [n=6] TRUE, TRUE, FALSE, TRUE, TRUE, FALSE
[08:08:02.788] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:02.788] | until=6
[08:08:02.788] | relaying element #3
[08:08:02.788] | relaying element #6
[08:08:02.788] | relayed: [n=6] TRUE, TRUE, FALSE, TRUE, TRUE, FALSE
[08:08:02.788] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:02.788] signalConditionsASAP(NULL, pos=5) ... done
[08:08:02.788] length: 2 (resolved future 5)

[08:08:02.789] checking value #6:
[08:08:02.789] 'obj' is atomic
[08:08:02.789] signalConditionsASAP(numeric, pos=6) ...
[08:08:02.789] | nx: 6
[08:08:02.789] | relay: TRUE
[08:08:02.789] | stdout: TRUE
[08:08:02.789] | signal: TRUE
[08:08:02.789] | resignal: FALSE
[08:08:02.789] | force: TRUE
[08:08:02.789] | relayed: [n=6] TRUE, TRUE, FALSE, TRUE, TRUE, FALSE
[08:08:02.789] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:02.790] | until=6
[08:08:02.790] | relaying element #3
[08:08:02.790] | relayed: [n=6] TRUE, TRUE, FALSE, TRUE, TRUE, TRUE
[08:08:02.790] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:02.790] signalConditionsASAP(numeric, pos=6) ... done
[08:08:02.790] length: 1 (resolved future 6)

[08:08:02.800] Number of remaining objects: 1
[08:08:02.800] checking value #3:
[08:08:02.801] 'obj' is MultisessionFuture
[08:08:02.801] resolved() for MultisessionFuture (<unnamed-52>) ...
[08:08:02.801] | Cluster node socket connection: index=5, id=985
[08:08:02.801] | assertValidConnection() ...
[08:08:02.801] | : cluster node index: 2
[08:08:02.801] | assertValidConnection() ... done
[08:08:02.802] | receiveMessageFromWorker() for ClusterFuture ...
[08:08:02.802] | : cluster node index: 2
[08:08:02.802] | : [1] TRUE
[08:08:02.802] | : received data:
[08:08:02.802] | : List of 5
[08:08:02.802] | :  $ type   : chr "VALUE"
[08:08:02.802] | :  $ value  :List of 16
[08:08:02.802] | :   ..$ value              : NULL
[08:08:02.802] | :   ..$ visible            : logi TRUE
[08:08:02.802] | :   ..$ stdout             : chr ""
[08:08:02.802] | :   ..$ conditions         : list()
[08:08:02.802] | :   ..$ rng                : logi FALSE
[08:08:02.802] | :   ..$ seed               : NULL
[08:08:02.802] | :   ..$ misuseGlobalEnv    : NULL
[08:08:02.802] | :   ..$ misuseConnections  :List of 3
[08:08:02.802] | :   .. ..$ added   : NULL
[08:08:02.802] | :   .. ..$ removed : NULL
[08:08:02.802] | :   .. ..$ replaced: NULL
[08:08:02.802] | :   ..$ misuseDevices      : NULL
[08:08:02.802] | :   ..$ misuseDefaultDevice: list()
[08:08:02.802] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:02.802] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:02.802] | :   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "52"
[08:08:02.802] | :   ..$ session_uuid       : chr "93d625500df762db48dab82b178af5e1"
[08:08:02.802] | :   .. ..- attr(*, "source")=List of 5
[08:08:02.802] | :   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:02.802] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:02.802] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:02.802] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:02.802] | :   .. .. ..$ pid   : int 68969
[08:08:02.802] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:02.802] | :   .. .. ..$ random: int 2147483647
[08:08:02.802] | :   ..$ r_info             :List of 4
[08:08:02.802] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:02.802] | :   .. .. ..$ : int [1:3] 4 5 1
[08:08:02.802] | :   .. ..$ os           : chr "unix"
[08:08:02.802] | :   .. ..$ os_name      : chr "Linux"
[08:08:02.802] | :   .. ..$ captures_utf8: logi TRUE
[08:08:02.802] | :   ..$ version            : chr "1.8"
[08:08:02.802] | :   ..- attr(*, "class")= chr "FutureResult"
[08:08:02.802] | :  $ success: logi TRUE
[08:08:02.802] | :  $ time   : 'proc_time' Named num [1:5] 0.053 0.002 0.055 0 0
[08:08:02.802] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:02.802] | :  $ tag    : NULL
[08:08:02.813] | : Received FutureResult
[08:08:02.813] | : FutureResult:
[08:08:02.813] | : value: ‘NULL’
[08:08:02.813] | : visible: TRUE
[08:08:02.813] | : stdout: character
[08:08:02.813] | : conditions: [n = 0] 
[08:08:02.813] | : RNG used: FALSE
[08:08:02.813] | : duration: 0.0525589 secs (started 2025-06-17 08:08:02.741947)
[08:08:02.813] | : version: 1.8
[08:08:02.813] | : FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'remove', earlySignal = 0) ...
[08:08:02.813] | : . Removed future from position #1
[08:08:02.813] | : . Number of registered futures: 0
[08:08:02.814] | : FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'remove', earlySignal = 0) ... done
[08:08:02.814] | : Erased future from future backend
[08:08:02.814] | : result() for ClusterFuture ...
[08:08:02.814] | : . result already collected: FutureResult
[08:08:02.814] | : result() for ClusterFuture ... done
[08:08:02.814] | : signalConditions() ...
[08:08:02.814] | : . include = ‘immediateCondition’
[08:08:02.814] | : . exclude = 
[08:08:02.814] | : . resignal = FALSE
[08:08:02.814] | : . Number of conditions: 0
[08:08:02.815] | : .  int 0
[08:08:02.815] | : signalConditions() ... done
[08:08:02.815] | receiveMessageFromWorker() for ClusterFuture ... done
[08:08:02.815] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:02.815] resolved() for MultisessionFuture (<unnamed-52>) ... done
[08:08:02.815] assertFutureResult() ...
[08:08:02.815] | Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:02.815] | Future uuid: 52
[08:08:02.816] | identical; success
[08:08:02.816] assertFutureResult() ... done
[08:08:02.816] MultisessionFuture #3
[08:08:02.816] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:02.816] | nx: 6
[08:08:02.816] | relay: TRUE
[08:08:02.816] | stdout: TRUE
[08:08:02.816] | signal: TRUE
[08:08:02.816] | resignal: FALSE
[08:08:02.816] | force: TRUE
[08:08:02.816] | relayed: [n=6] TRUE, TRUE, FALSE, TRUE, TRUE, TRUE
[08:08:02.816] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:02.817] | until=6
[08:08:02.817] | relaying element #3
[08:08:02.817] | value() for MultisessionFuture (<unnamed-52>) ...
[08:08:02.817] | : result() for ClusterFuture ...
[08:08:02.817] | : . result already collected: FutureResult
[08:08:02.817] | : result() for ClusterFuture ... done
[08:08:02.817] | : result() for ClusterFuture ...
[08:08:02.817] | : . result already collected: FutureResult
[08:08:02.817] | : result() for ClusterFuture ... done
[08:08:02.817] | : signalConditions() ...
[08:08:02.818] | : . include = ‘immediateCondition’
[08:08:02.818] | : . exclude = 
[08:08:02.818] | : . resignal = FALSE
[08:08:02.818] | : . Number of conditions: 0
[08:08:02.818] | : .  int 0
[08:08:02.818] | : signalConditions() ... done
[08:08:02.818] | : relay stdout ...
[08:08:02.819] | : relay stdout ... done
[08:08:02.819] | : check for misuse ...
[08:08:02.819] | : check for misuse ... done
[08:08:02.819] | value() for MultisessionFuture (<unnamed-52>) ... done
[08:08:02.819] | result() for ClusterFuture ...
[08:08:02.819] | : result already collected: FutureResult
[08:08:02.819] | result() for ClusterFuture ... done
[08:08:02.819] | signalConditions() ...
[08:08:02.819] | : include = ‘immediateCondition’
[08:08:02.819] | : exclude = 
[08:08:02.819] | : resignal = FALSE
[08:08:02.820] | : Number of conditions: 0
[08:08:02.820] | :  int 0
[08:08:02.820] | signalConditions() ... done
[08:08:02.820] | result() for ClusterFuture ...
[08:08:02.820] | : result already collected: FutureResult
[08:08:02.820] | result() for ClusterFuture ... done
[08:08:02.820] | signalConditions() ...
[08:08:02.821] | : include = ‘condition’
[08:08:02.821] | : exclude = ‘error’, ‘immediateCondition’
[08:08:02.821] | : resignal = TRUE
[08:08:02.821] | : Number of conditions: 0
[08:08:02.821] | :  int 0
[08:08:02.821] | signalConditions() ... done
[08:08:02.821] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:02.821] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:02.822] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:02.822] value(<MultisessionFuture>, ...) ...
[08:08:02.822] value(<MultisessionFuture>, ...) ... done
[08:08:02.822] value() for MultisessionFuture (<unnamed-52>) ...
[08:08:02.822] | result() for ClusterFuture ...
[08:08:02.822] | : result already collected: FutureResult
[08:08:02.822] | result() for ClusterFuture ... done
[08:08:02.822] | result() for ClusterFuture ...
[08:08:02.822] | : result already collected: FutureResult
[08:08:02.822] | result() for ClusterFuture ... done
[08:08:02.823] | signalConditions() ...
[08:08:02.823] | : include = ‘immediateCondition’
[08:08:02.823] | : exclude = 
[08:08:02.823] | : resignal = FALSE
[08:08:02.823] | : Number of conditions: 0
[08:08:02.823] | :  int 0
[08:08:02.823] | signalConditions() ... done
[08:08:02.823] | check for misuse ...
[08:08:02.824] | check for misuse ... done
[08:08:02.824] value() for MultisessionFuture (<unnamed-52>) ... done
[08:08:02.824] value: <NULL>
[08:08:02.824] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:02.824] | nx: 6
[08:08:02.824] | relay: TRUE
[08:08:02.824] | stdout: TRUE
[08:08:02.824] | signal: TRUE
[08:08:02.824] | resignal: FALSE
[08:08:02.824] | force: TRUE
[08:08:02.824] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:02.825] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:02.825] | until=6
[08:08:02.825] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:02.825] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:02.825] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:02.825] resolve() for MultisessionFuture ...
[08:08:02.825] resolve() for MultisessionFuture ... done
[08:08:02.825] length: 0 (resolved future 3)

[08:08:02.825] Relaying remaining futures ...
[08:08:02.825] | signalConditionsASAP(NULL, pos=0) ...
[08:08:02.826] | : nx: 6
[08:08:02.826] | : relay: TRUE
[08:08:02.826] | : stdout: TRUE
[08:08:02.826] | : signal: TRUE
[08:08:02.826] | : resignal: FALSE
[08:08:02.826] | : force: TRUE
[08:08:02.826] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:02.826] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:02.826] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:02.826] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:02.827] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:02.827] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
Dimensions: c(1, 6)
[08:08:02.829] future(..., label = NULL) ...
[08:08:02.829] | lazy: FALSE
[08:08:02.829] | stdout: TRUE
[08:08:02.829] | conditions: [n=1] ‘condition’
[08:08:02.829] | gc: FALSE
[08:08:02.829] | earlySignal: FALSE
[08:08:02.829] | getGlobalsAndPackages() ...
[08:08:02.829] | : Searching for globals ...
[08:08:02.831] | : . globals found: [0] 
[08:08:02.831] | : Searching for globals ... done
[08:08:02.831] | : globals: [0] <none>
[08:08:02.831] | : packages: [0] <none>
[08:08:02.831] | getGlobalsAndPackages() ... done
[08:08:02.831] | run() for ‘Future’ (<unnamed-53>) ...
[08:08:02.831] | : state: ‘created’
[08:08:02.832] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:02.832] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:02.832] | : Using MultisessionFutureBackend ...
[08:08:02.832] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:08:02.832] | : . Launching futures ...
[08:08:02.832] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:02.832] | : . ' , Workers: [n=2]
[08:08:02.832] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:02.834] | : . ' , FutureRegistry: ‘workers-d9ae098e6e77722a626531d398ab6c43’
[08:08:02.834] | : . ' , requestWorker() ...
[08:08:02.834] | : . ' , ; requestNode() ...
[08:08:02.834] | : . ' , ; ` Number of workers: 2
[08:08:02.834] | : . ' , ; ` Polling for a free worker ...
[08:08:02.834] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:02.834] | : . ' , ; ` | : Listing all futures
[08:08:02.835] | : . ' , ; ` | : Number of registered futures: 0
[08:08:02.835] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:02.835] | : . ' , ; ` | Total time: 0
[08:08:02.835] | : . ' , ; ` Polling for a free worker ... done
[08:08:02.835] | : . ' , ; ` FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:02.835] | : . ' , ; ` | Listing all futures
[08:08:02.835] | : . ' , ; ` | Number of registered futures: 0
[08:08:02.835] | : . ' , ; ` FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:02.835] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:02.835] | : . ' , ; ` Index of first available worker: 1
[08:08:02.836] | : . ' , ; ` Validate that the worker is functional ...
[08:08:02.895] | : . ' , ; ` | Worker is functional
[08:08:02.896] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:02.896] | : . ' , ; ` | : Listing all futures
[08:08:02.896] | : . ' , ; ` | : Number of registered futures: 0
[08:08:02.896] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:02.896] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:02.896] | : . ' , ; requestNode() ... done
[08:08:02.896] | : . ' , ; cluster node index: 1
[08:08:02.896] | : . ' , requestWorker() ... done
[08:08:02.896] | : . ' , eraseGlobalEnvironment() ...
[08:08:02.897] | : . ' , eraseGlobalEnvironment() ... done
[08:08:02.897] | : . ' , launchFuture() ...
[08:08:02.897] | : . ' , ; cluster node index: 1
[08:08:02.897] | : . ' , ; getFutureData() ...
[08:08:02.897] | : . ' , ; ` getFutureCore() ...
[08:08:02.897] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:02.897] | : . ' , ; ` getFutureCore() ... done
[08:08:02.898] | : . ' , ; ` getFutureCapture() ...
[08:08:02.898] | : . ' , ; ` getFutureCapture() ... done
[08:08:02.898] | : . ' , ; ` getFutureContext() ...
[08:08:02.898] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:02.898] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:02.900] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:02.900] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:02.900] | : . ' , ; ` getFutureContext() ... done
[08:08:02.900] | : . ' , ; getFutureData() ... done
[08:08:02.901] | : . ' , ; FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'add', earlySignal = 0) ...
[08:08:02.901] | : . ' , ; ` Appended future to position #1
[08:08:02.901] | : . ' , ; ` Number of registered futures: 1
[08:08:02.901] | : . ' , ; FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'add', earlySignal = 0) ... done
[08:08:02.901] | : . ' , launchFuture() ... done
[08:08:02.901] | : . ' , MultisessionFuture started
[08:08:02.901] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:02.901] | : . Launching futures ... done
[08:08:02.901] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:02.901] | : Using MultisessionFutureBackend ... done
[08:08:02.902] | run() for ‘Future’ (<unnamed-53>) ... done
[08:08:02.902] future(..., label = NULL) ... done
[08:08:02.902] future(..., label = NULL) ...
[08:08:02.902] | lazy: FALSE
[08:08:02.902] | stdout: TRUE
[08:08:02.902] | conditions: [n=1] ‘condition’
[08:08:02.902] | gc: FALSE
[08:08:02.902] | earlySignal: FALSE
[08:08:02.902] | getGlobalsAndPackages() ...
[08:08:02.902] | : Searching for globals ...
[08:08:02.904] | : . globals found: [0] 
[08:08:02.904] | : Searching for globals ... done
[08:08:02.904] | : globals: [0] <none>
[08:08:02.904] | : packages: [0] <none>
[08:08:02.904] | getGlobalsAndPackages() ... done
[08:08:02.904] | run() for ‘Future’ (<unnamed-54>) ...
[08:08:02.904] | : state: ‘created’
[08:08:02.904] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:02.905] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:02.905] | : Using MultisessionFutureBackend ...
[08:08:02.905] | : . Number of futures since start: 3 (3 created, 3 launched, 2 finished)
[08:08:02.905] | : . Launching futures ...
[08:08:02.905] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:02.905] | : . ' , Workers: [n=2]
[08:08:02.905] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:02.907] | : . ' , FutureRegistry: ‘workers-d9ae098e6e77722a626531d398ab6c43’
[08:08:02.907] | : . ' , requestWorker() ...
[08:08:02.907] | : . ' , ; requestNode() ...
[08:08:02.907] | : . ' , ; ` Number of workers: 2
[08:08:02.907] | : . ' , ; ` Polling for a free worker ...
[08:08:02.907] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:02.907] | : . ' , ; ` | : Listing all futures
[08:08:02.908] | : . ' , ; ` | : Number of registered futures: 1
[08:08:02.908] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:02.908] | : . ' , ; ` | Total time: 0
[08:08:02.908] | : . ' , ; ` Polling for a free worker ... done
[08:08:02.908] | : . ' , ; ` FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:02.908] | : . ' , ; ` | Listing all futures
[08:08:02.908] | : . ' , ; ` | Number of registered futures: 1
[08:08:02.908] | : . ' , ; ` FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:02.908] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:02.908] | : . ' , ; ` Index of first available worker: 2
[08:08:02.909] | : . ' , ; ` Validate that the worker is functional ...
[08:08:02.965] | : . ' , ; ` | Worker is functional
[08:08:02.966] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:02.966] | : . ' , ; ` | : Listing all futures
[08:08:02.966] | : . ' , ; ` | : Number of registered futures: 1
[08:08:02.966] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:02.966] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:02.966] | : . ' , ; requestNode() ... done
[08:08:02.966] | : . ' , ; cluster node index: 2
[08:08:02.966] | : . ' , requestWorker() ... done
[08:08:02.966] | : . ' , eraseGlobalEnvironment() ...
[08:08:02.967] | : . ' , eraseGlobalEnvironment() ... done
[08:08:02.967] | : . ' , launchFuture() ...
[08:08:02.967] | : . ' , ; cluster node index: 2
[08:08:02.967] | : . ' , ; getFutureData() ...
[08:08:02.967] | : . ' , ; ` getFutureCore() ...
[08:08:02.967] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:02.967] | : . ' , ; ` getFutureCore() ... done
[08:08:02.967] | : . ' , ; ` getFutureCapture() ...
[08:08:02.968] | : . ' , ; ` getFutureCapture() ... done
[08:08:02.968] | : . ' , ; ` getFutureContext() ...
[08:08:02.968] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:02.968] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:02.968] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:02.968] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:02.968] | : . ' , ; ` getFutureContext() ... done
[08:08:02.968] | : . ' , ; getFutureData() ... done
[08:08:02.969] | : . ' , ; FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'add', earlySignal = 0) ...
[08:08:02.969] | : . ' , ; ` Appended future to position #2
[08:08:02.969] | : . ' , ; ` Number of registered futures: 2
[08:08:02.969] | : . ' , ; FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'add', earlySignal = 0) ... done
[08:08:02.969] | : . ' , launchFuture() ... done
[08:08:02.969] | : . ' , MultisessionFuture started
[08:08:02.969] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:02.969] | : . Launching futures ... done
[08:08:02.969] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:02.970] | : Using MultisessionFutureBackend ... done
[08:08:02.970] | run() for ‘Future’ (<unnamed-54>) ... done
[08:08:02.970] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675aaec5e8> 
 $ c:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675ccfa058> 
 $  : NULL
 $  : NULL
 $  : num 6
List of 6
 $ a: num 1
 $ b:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675aaec5e8> 
 $ c:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675ccfa058> 
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 1 6
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
[08:08:02.975] resolved() for matrix ...
[08:08:02.975] | Number of elements: 6
[08:08:02.975] | Number of futures: 6
[08:08:02.975] | resolved() for MultisessionFuture (<unnamed-53>) ...
[08:08:02.975] | : Cluster node socket connection: index=4, id=984
[08:08:02.976] | : assertValidConnection() ...
[08:08:02.976] | : . cluster node index: 1
[08:08:02.976] | : assertValidConnection() ... done
[08:08:02.976] | : receiveMessageFromWorker() for ClusterFuture ...
[08:08:02.976] | : . cluster node index: 1
[08:08:02.977] | : . [1] TRUE
[08:08:02.977] | : . received data:
[08:08:02.977] | : . List of 5
[08:08:02.977] | : .  $ type   : chr "VALUE"
[08:08:02.977] | : .  $ value  :List of 16
[08:08:02.977] | : .   ..$ value              : num 2
[08:08:02.977] | : .   ..$ visible            : logi TRUE
[08:08:02.977] | : .   ..$ stdout             : chr ""
[08:08:02.977] | : .   ..$ conditions         : list()
[08:08:02.977] | : .   ..$ rng                : logi FALSE
[08:08:02.977] | : .   ..$ seed               : NULL
[08:08:02.977] | : .   ..$ misuseGlobalEnv    : NULL
[08:08:02.977] | : .   ..$ misuseConnections  :List of 3
[08:08:02.977] | : .   .. ..$ added   : NULL
[08:08:02.977] | : .   .. ..$ removed : NULL
[08:08:02.977] | : .   .. ..$ replaced: NULL
[08:08:02.977] | : .   ..$ misuseDevices      : NULL
[08:08:02.977] | : .   ..$ misuseDefaultDevice: list()
[08:08:02.977] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:02.977] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:02.977] | : .   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "53"
[08:08:02.977] | : .   ..$ session_uuid       : chr "fead307841043f6d8e4547187745dcf7"
[08:08:02.977] | : .   .. ..- attr(*, "source")=List of 5
[08:08:02.977] | : .   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:02.977] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:02.977] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:02.977] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:02.977] | : .   .. .. ..$ pid   : int 68968
[08:08:02.977] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:02.977] | : .   .. .. ..$ random: int 2147483647
[08:08:02.977] | : .   ..$ r_info             :List of 4
[08:08:02.977] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:02.977] | : .   .. .. ..$ : int [1:3] 4 5 1
[08:08:02.977] | : .   .. ..$ os           : chr "unix"
[08:08:02.977] | : .   .. ..$ os_name      : chr "Linux"
[08:08:02.977] | : .   .. ..$ captures_utf8: logi TRUE
[08:08:02.977] | : .   ..$ version            : chr "1.8"
[08:08:02.977] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:08:02.977] | : .  $ success: logi TRUE
[08:08:02.977] | : .  $ time   : 'proc_time' Named num [1:5] 0.003 0.001 0.003 0 0
[08:08:02.977] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:02.977] | : .  $ tag    : NULL
[08:08:02.987] | : . Received FutureResult
[08:08:02.988] | : . FutureResult:
[08:08:02.988] | : . value: ‘numeric’
[08:08:02.988] | : . visible: TRUE
[08:08:02.988] | : . stdout: character
[08:08:02.988] | : . conditions: [n = 0] 
[08:08:02.988] | : . RNG used: FALSE
[08:08:02.988] | : . duration: 0.002598763 secs (started 2025-06-17 08:08:02.941876)
[08:08:02.988] | : . version: 1.8
[08:08:02.988] | : . FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'remove', earlySignal = 0) ...
[08:08:02.988] | : . ' Removed future from position #1
[08:08:02.988] | : . ' Number of registered futures: 1
[08:08:02.988] | : . FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'remove', earlySignal = 0) ... done
[08:08:02.989] | : . Erased future from future backend
[08:08:02.989] | : . result() for ClusterFuture ...
[08:08:02.989] | : . ' result already collected: FutureResult
[08:08:02.989] | : . result() for ClusterFuture ... done
[08:08:02.989] | : . signalConditions() ...
[08:08:02.989] | : . ' include = ‘immediateCondition’
[08:08:02.989] | : . ' exclude = 
[08:08:02.989] | : . ' resignal = FALSE
[08:08:02.989] | : . ' Number of conditions: 0
[08:08:02.989] | : . '  int 0
[08:08:02.990] | : . signalConditions() ... done
[08:08:02.990] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:08:02.990] | : receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:02.990] | resolved() for MultisessionFuture (<unnamed-53>) ... done
[08:08:02.990] | assertFutureResult() ...
[08:08:02.990] | : Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:02.990] | : Future uuid: 53
[08:08:02.990] | : identical; success
[08:08:02.990] | assertFutureResult() ... done
[08:08:02.991] | resolved() for MultisessionFuture (<unnamed-54>) ...
[08:08:02.991] | : Cluster node socket connection: index=5, id=985
[08:08:02.991] | : assertValidConnection() ...
[08:08:02.991] | : . cluster node index: 2
[08:08:02.991] | : assertValidConnection() ... done
[08:08:03.002] | : socketSelect(list(<connection #5 (id=985)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:03.002] | resolved() for MultisessionFuture (<unnamed-54>) ... done
[08:08:03.002] resolved() for matrix ... done
 logi [1, 1:6] TRUE TRUE FALSE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
 - attr(*, "names")= chr [1:6] "a" "b" "c" "" ...
[08:08:03.004] value() for matrix ...
[08:08:03.004] | recursive: 0
[08:08:03.004] | reduce: FALSE
[08:08:03.004] | length: 6
[08:08:03.004] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:03.004] | Number of remaining objects: 6
[08:08:03.004] | checking value #1:
[08:08:03.005] | 'obj' is atomic
[08:08:03.005] | signalConditionsASAP(numeric, pos=1) ...
[08:08:03.005] | : nx: 6
[08:08:03.005] | : relay: TRUE
[08:08:03.005] | : stdout: TRUE
[08:08:03.005] | : signal: TRUE
[08:08:03.005] | : resignal: FALSE
[08:08:03.005] | : force: TRUE
[08:08:03.005] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.005] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.005] | : until=2
[08:08:03.006] | : relaying element #2
[08:08:03.006] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.006] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.006] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:03.006] | length: 5 (resolved future 1)
[08:08:03.006] value() for matrix ... done
[08:08:03.006] checking value #2:
[08:08:03.006] 'obj' is MultisessionFuture
[08:08:03.006] MultisessionFuture #2
[08:08:03.006] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:03.007] | nx: 6
[08:08:03.007] | relay: TRUE
[08:08:03.007] | stdout: TRUE
[08:08:03.007] | signal: TRUE
[08:08:03.007] | resignal: FALSE
[08:08:03.007] | force: TRUE
[08:08:03.007] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.007] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.007] | until=2
[08:08:03.007] | relaying element #2
[08:08:03.007] | value() for MultisessionFuture (<unnamed-53>) ...
[08:08:03.008] | : result() for ClusterFuture ...
[08:08:03.008] | : . result already collected: FutureResult
[08:08:03.008] | : result() for ClusterFuture ... done
[08:08:03.008] | : result() for ClusterFuture ...
[08:08:03.008] | : . result already collected: FutureResult
[08:08:03.008] | : result() for ClusterFuture ... done
[08:08:03.008] | : signalConditions() ...
[08:08:03.008] | : . include = ‘immediateCondition’
[08:08:03.008] | : . exclude = 
[08:08:03.008] | : . resignal = FALSE
[08:08:03.008] | : . Number of conditions: 0
[08:08:03.009] | : .  int 0
[08:08:03.009] | : signalConditions() ... done
[08:08:03.009] | : relay stdout ...
[08:08:03.009] | : relay stdout ... done
[08:08:03.009] | : check for misuse ...
[08:08:03.009] | : check for misuse ... done
[08:08:03.010] | value() for MultisessionFuture (<unnamed-53>) ... done
[08:08:03.010] | result() for ClusterFuture ...
[08:08:03.010] | : result already collected: FutureResult
[08:08:03.010] | result() for ClusterFuture ... done
[08:08:03.010] | signalConditions() ...
[08:08:03.010] | : include = ‘immediateCondition’
[08:08:03.010] | : exclude = 
[08:08:03.010] | : resignal = FALSE
[08:08:03.010] | : Number of conditions: 0
[08:08:03.010] | :  int 0
[08:08:03.011] | signalConditions() ... done
[08:08:03.011] | result() for ClusterFuture ...
[08:08:03.011] | : result already collected: FutureResult
[08:08:03.011] | result() for ClusterFuture ... done
[08:08:03.011] | signalConditions() ...
[08:08:03.011] | : include = ‘condition’
[08:08:03.011] | : exclude = ‘error’, ‘immediateCondition’
[08:08:03.011] | : resignal = TRUE
[08:08:03.012] | : Number of conditions: 0
[08:08:03.012] | :  int 0
[08:08:03.012] | signalConditions() ... done
[08:08:03.012] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.012] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.012] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:03.012] value(<MultisessionFuture>, ...) ...
[08:08:03.013] value(<MultisessionFuture>, ...) ... done
[08:08:03.013] value() for MultisessionFuture (<unnamed-53>) ...
[08:08:03.013] | result() for ClusterFuture ...
[08:08:03.013] | : result already collected: FutureResult
[08:08:03.013] | result() for ClusterFuture ... done
[08:08:03.013] | result() for ClusterFuture ...
[08:08:03.013] | : result already collected: FutureResult
[08:08:03.013] | result() for ClusterFuture ... done
[08:08:03.013] | signalConditions() ...
[08:08:03.013] | : include = ‘immediateCondition’
[08:08:03.014] | : exclude = 
[08:08:03.014] | : resignal = FALSE
[08:08:03.014] | : Number of conditions: 0
[08:08:03.014] | :  int 0
[08:08:03.014] | signalConditions() ... done
[08:08:03.014] | check for misuse ...
[08:08:03.014] | check for misuse ... done
[08:08:03.014] value() for MultisessionFuture (<unnamed-53>) ... done
[08:08:03.015] value: <numeric>
[08:08:03.015] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:03.015] | nx: 6
[08:08:03.015] | relay: TRUE
[08:08:03.015] | stdout: TRUE
[08:08:03.015] | signal: TRUE
[08:08:03.015] | resignal: FALSE
[08:08:03.015] | force: TRUE
[08:08:03.015] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.015] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.015] | until=3
[08:08:03.016] | relaying element #3
[08:08:03.016] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.016] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.016] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:03.016] resolve() for MultisessionFuture ...
[08:08:03.016] resolve() for MultisessionFuture ... done
[08:08:03.016] length: 4 (resolved future 2)

[08:08:03.016] checking value #3:
[08:08:03.016] 'obj' is MultisessionFuture
[08:08:03.017] resolved() for MultisessionFuture (<unnamed-54>) ...
[08:08:03.017] | Cluster node socket connection: index=5, id=985
[08:08:03.017] | assertValidConnection() ...
[08:08:03.017] | : cluster node index: 2
[08:08:03.017] | assertValidConnection() ... done
[08:08:03.017] | receiveMessageFromWorker() for ClusterFuture ...
[08:08:03.018] | : cluster node index: 2
[08:08:03.018] | : [1] TRUE
[08:08:03.018] | : received data:
[08:08:03.018] | : List of 5
[08:08:03.018] | :  $ type   : chr "VALUE"
[08:08:03.018] | :  $ value  :List of 16
[08:08:03.018] | :   ..$ value              : NULL
[08:08:03.018] | :   ..$ visible            : logi TRUE
[08:08:03.018] | :   ..$ stdout             : chr ""
[08:08:03.018] | :   ..$ conditions         : list()
[08:08:03.018] | :   ..$ rng                : logi FALSE
[08:08:03.018] | :   ..$ seed               : NULL
[08:08:03.018] | :   ..$ misuseGlobalEnv    : NULL
[08:08:03.018] | :   ..$ misuseConnections  :List of 3
[08:08:03.018] | :   .. ..$ added   : NULL
[08:08:03.018] | :   .. ..$ removed : NULL
[08:08:03.018] | :   .. ..$ replaced: NULL
[08:08:03.018] | :   ..$ misuseDevices      : NULL
[08:08:03.018] | :   ..$ misuseDefaultDevice: list()
[08:08:03.018] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:03"
[08:08:03.018] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:03"
[08:08:03.018] | :   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "54"
[08:08:03.018] | :   ..$ session_uuid       : chr "93d625500df762db48dab82b178af5e1"
[08:08:03.018] | :   .. ..- attr(*, "source")=List of 5
[08:08:03.018] | :   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:03.018] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:03.018] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:03.018] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:03.018] | :   .. .. ..$ pid   : int 68969
[08:08:03.018] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:03.018] | :   .. .. ..$ random: int 2147483647
[08:08:03.018] | :   ..$ r_info             :List of 4
[08:08:03.018] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:03.018] | :   .. .. ..$ : int [1:3] 4 5 1
[08:08:03.018] | :   .. ..$ os           : chr "unix"
[08:08:03.018] | :   .. ..$ os_name      : chr "Linux"
[08:08:03.018] | :   .. ..$ captures_utf8: logi TRUE
[08:08:03.018] | :   ..$ version            : chr "1.8"
[08:08:03.018] | :   ..- attr(*, "class")= chr "FutureResult"
[08:08:03.018] | :  $ success: logi TRUE
[08:08:03.018] | :  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:03.018] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:03.018] | :  $ tag    : NULL
[08:08:03.030] | : Received FutureResult
[08:08:03.030] | : FutureResult:
[08:08:03.030] | : value: ‘NULL’
[08:08:03.030] | : visible: TRUE
[08:08:03.030] | : stdout: character
[08:08:03.030] | : conditions: [n = 0] 
[08:08:03.030] | : RNG used: FALSE
[08:08:03.030] | : duration: 0.002614021 secs (started 2025-06-17 08:08:03.009808)
[08:08:03.030] | : version: 1.8
[08:08:03.031] | : FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'remove', earlySignal = 0) ...
[08:08:03.031] | : . Removed future from position #1
[08:08:03.031] | : . Number of registered futures: 0
[08:08:03.031] | : FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'remove', earlySignal = 0) ... done
[08:08:03.031] | : Erased future from future backend
[08:08:03.031] | : result() for ClusterFuture ...
[08:08:03.031] | : . result already collected: FutureResult
[08:08:03.032] | : result() for ClusterFuture ... done
[08:08:03.032] | : signalConditions() ...
[08:08:03.032] | : . include = ‘immediateCondition’
[08:08:03.032] | : . exclude = 
[08:08:03.032] | : . resignal = FALSE
[08:08:03.032] | : . Number of conditions: 0
[08:08:03.032] | : .  int 0
[08:08:03.032] | : signalConditions() ... done
[08:08:03.033] | receiveMessageFromWorker() for ClusterFuture ... done
[08:08:03.033] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:03.033] resolved() for MultisessionFuture (<unnamed-54>) ... done
[08:08:03.033] assertFutureResult() ...
[08:08:03.033] | Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:03.033] | Future uuid: 54
[08:08:03.033] | identical; success
[08:08:03.033] assertFutureResult() ... done
[08:08:03.033] MultisessionFuture #3
[08:08:03.033] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:03.033] | nx: 6
[08:08:03.033] | relay: TRUE
[08:08:03.034] | stdout: TRUE
[08:08:03.034] | signal: TRUE
[08:08:03.034] | resignal: FALSE
[08:08:03.034] | force: TRUE
[08:08:03.034] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.034] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.034] | until=3
[08:08:03.034] | relaying element #3
[08:08:03.034] | value() for MultisessionFuture (<unnamed-54>) ...
[08:08:03.034] | : result() for ClusterFuture ...
[08:08:03.034] | : . result already collected: FutureResult
[08:08:03.035] | : result() for ClusterFuture ... done
[08:08:03.035] | : result() for ClusterFuture ...
[08:08:03.035] | : . result already collected: FutureResult
[08:08:03.035] | : result() for ClusterFuture ... done
[08:08:03.035] | : signalConditions() ...
[08:08:03.035] | : . include = ‘immediateCondition’
[08:08:03.035] | : . exclude = 
[08:08:03.035] | : . resignal = FALSE
[08:08:03.035] | : . Number of conditions: 0
[08:08:03.035] | : .  int 0
[08:08:03.036] | : signalConditions() ... done
[08:08:03.036] | : relay stdout ...
[08:08:03.036] | : relay stdout ... done
[08:08:03.036] | : check for misuse ...
[08:08:03.036] | : check for misuse ... done
[08:08:03.036] | value() for MultisessionFuture (<unnamed-54>) ... done
[08:08:03.036] | result() for ClusterFuture ...
[08:08:03.037] | : result already collected: FutureResult
[08:08:03.037] | result() for ClusterFuture ... done
[08:08:03.037] | signalConditions() ...
[08:08:03.037] | : include = ‘immediateCondition’
[08:08:03.037] | : exclude = 
[08:08:03.037] | : resignal = FALSE
[08:08:03.037] | : Number of conditions: 0
[08:08:03.037] | :  int 0
[08:08:03.038] | signalConditions() ... done
[08:08:03.038] | result() for ClusterFuture ...
[08:08:03.038] | : result already collected: FutureResult
[08:08:03.038] | result() for ClusterFuture ... done
[08:08:03.038] | signalConditions() ...
[08:08:03.038] | : include = ‘condition’
[08:08:03.038] | : exclude = ‘error’, ‘immediateCondition’
[08:08:03.038] | : resignal = TRUE
[08:08:03.038] | : Number of conditions: 0
[08:08:03.039] | :  int 0
[08:08:03.039] | signalConditions() ... done
[08:08:03.039] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.039] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.039] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:03.039] value(<MultisessionFuture>, ...) ...
[08:08:03.039] value(<MultisessionFuture>, ...) ... done
[08:08:03.039] value() for MultisessionFuture (<unnamed-54>) ...
[08:08:03.040] | result() for ClusterFuture ...
[08:08:03.040] | : result already collected: FutureResult
[08:08:03.040] | result() for ClusterFuture ... done
[08:08:03.040] | result() for ClusterFuture ...
[08:08:03.040] | : result already collected: FutureResult
[08:08:03.040] | result() for ClusterFuture ... done
[08:08:03.040] | signalConditions() ...
[08:08:03.040] | : include = ‘immediateCondition’
[08:08:03.040] | : exclude = 
[08:08:03.040] | : resignal = FALSE
[08:08:03.041] | : Number of conditions: 0
[08:08:03.041] | :  int 0
[08:08:03.041] | signalConditions() ... done
[08:08:03.041] | check for misuse ...
[08:08:03.041] | check for misuse ... done
[08:08:03.041] value() for MultisessionFuture (<unnamed-54>) ... done
[08:08:03.041] value: <NULL>
[08:08:03.041] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:03.042] | nx: 6
[08:08:03.042] | relay: TRUE
[08:08:03.042] | stdout: TRUE
[08:08:03.042] | signal: TRUE
[08:08:03.042] | resignal: FALSE
[08:08:03.042] | force: TRUE
[08:08:03.042] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.042] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.042] | until=4
[08:08:03.042] | relaying element #4
[08:08:03.043] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.043] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.043] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:03.043] resolve() for MultisessionFuture ...
[08:08:03.043] resolve() for MultisessionFuture ... done
[08:08:03.043] length: 3 (resolved future 3)

[08:08:03.043] checking value #4:
[08:08:03.043] 'obj' is NULL
[08:08:03.043] signalConditionsASAP(NULL, pos=4) ...
[08:08:03.043] | nx: 6
[08:08:03.044] | relay: TRUE
[08:08:03.044] | stdout: TRUE
[08:08:03.044] | signal: TRUE
[08:08:03.044] | resignal: FALSE
[08:08:03.044] | force: TRUE
[08:08:03.044] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.044] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.044] | until=5
[08:08:03.044] | relaying element #5
[08:08:03.044] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:03.044] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.045] signalConditionsASAP(NULL, pos=4) ... done
[08:08:03.045] signalConditionsASAP(NULL, pos=4) ...
[08:08:03.045] | nx: 6
[08:08:03.045] | relay: TRUE
[08:08:03.045] | stdout: TRUE
[08:08:03.045] | signal: TRUE
[08:08:03.045] | resignal: FALSE
[08:08:03.045] | force: TRUE
[08:08:03.045] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:03.045] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.045] | until=5
[08:08:03.045] | relaying element #5
[08:08:03.046] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:03.046] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.046] signalConditionsASAP(NULL, pos=4) ... done
[08:08:03.046] length: 2 (resolved future 4)

[08:08:03.046] checking value #5:
[08:08:03.046] 'obj' is NULL
[08:08:03.046] signalConditionsASAP(NULL, pos=5) ...
[08:08:03.046] | nx: 6
[08:08:03.046] | relay: TRUE
[08:08:03.046] | stdout: TRUE
[08:08:03.046] | signal: TRUE
[08:08:03.047] | resignal: FALSE
[08:08:03.047] | force: TRUE
[08:08:03.047] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:03.047] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.047] | until=6
[08:08:03.047] | relaying element #6
[08:08:03.047] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:03.047] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.047] signalConditionsASAP(NULL, pos=5) ... done
[08:08:03.047] signalConditionsASAP(NULL, pos=5) ...
[08:08:03.047] | nx: 6
[08:08:03.048] | relay: TRUE
[08:08:03.048] | stdout: TRUE
[08:08:03.048] | signal: TRUE
[08:08:03.048] | resignal: FALSE
[08:08:03.048] | force: TRUE
[08:08:03.048] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:03.048] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.048] | until=6
[08:08:03.048] | relaying element #6
[08:08:03.048] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:03.048] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.049] signalConditionsASAP(NULL, pos=5) ... done
[08:08:03.049] length: 1 (resolved future 5)

[08:08:03.049] checking value #6:
[08:08:03.049] 'obj' is atomic
[08:08:03.049] signalConditionsASAP(numeric, pos=6) ...
[08:08:03.049] | nx: 6
[08:08:03.049] | relay: TRUE
[08:08:03.049] | stdout: TRUE
[08:08:03.049] | signal: TRUE
[08:08:03.049] | resignal: FALSE
[08:08:03.049] | force: TRUE
[08:08:03.050] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:03.050] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.050] | until=6
[08:08:03.050] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:03.050] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.050] signalConditionsASAP(numeric, pos=6) ... done
[08:08:03.050] length: 0 (resolved future 6)

[08:08:03.050] Relaying remaining futures ...
[08:08:03.050] | signalConditionsASAP(NULL, pos=0) ...
[08:08:03.050] | : nx: 6
[08:08:03.051] | : relay: TRUE
[08:08:03.051] | : stdout: TRUE
[08:08:03.051] | : signal: TRUE
[08:08:03.051] | : resignal: FALSE
[08:08:03.051] | : force: TRUE
[08:08:03.051] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:03.051] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:03.051] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:03.051] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.051] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:03.051] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 1 6
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
Dimensions: c(2, 3)
[08:08:03.055] future(..., label = NULL) ...
[08:08:03.055] | lazy: FALSE
[08:08:03.055] | stdout: TRUE
[08:08:03.055] | conditions: [n=1] ‘condition’
[08:08:03.055] | gc: FALSE
[08:08:03.055] | earlySignal: FALSE
[08:08:03.055] | getGlobalsAndPackages() ...
[08:08:03.055] | : Searching for globals ...
[08:08:03.056] | : . globals found: [0] 
[08:08:03.057] | : Searching for globals ... done
[08:08:03.057] | : globals: [0] <none>
[08:08:03.057] | : packages: [0] <none>
[08:08:03.057] | getGlobalsAndPackages() ... done
[08:08:03.057] | run() for ‘Future’ (<unnamed-55>) ...
[08:08:03.057] | : state: ‘created’
[08:08:03.057] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:03.057] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:03.058] | : Using MultisessionFutureBackend ...
[08:08:03.058] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:03.058] | : . Launching futures ...
[08:08:03.058] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:03.058] | : . ' , Workers: [n=2]
[08:08:03.058] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:03.060] | : . ' , FutureRegistry: ‘workers-d9ae098e6e77722a626531d398ab6c43’
[08:08:03.060] | : . ' , requestWorker() ...
[08:08:03.060] | : . ' , ; requestNode() ...
[08:08:03.060] | : . ' , ; ` Number of workers: 2
[08:08:03.060] | : . ' , ; ` Polling for a free worker ...
[08:08:03.060] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:03.060] | : . ' , ; ` | : Listing all futures
[08:08:03.060] | : . ' , ; ` | : Number of registered futures: 0
[08:08:03.060] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:03.061] | : . ' , ; ` | Total time: 0
[08:08:03.061] | : . ' , ; ` Polling for a free worker ... done
[08:08:03.061] | : . ' , ; ` FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:03.061] | : . ' , ; ` | Listing all futures
[08:08:03.061] | : . ' , ; ` | Number of registered futures: 0
[08:08:03.061] | : . ' , ; ` FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:03.061] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:03.061] | : . ' , ; ` Index of first available worker: 1
[08:08:03.061] | : . ' , ; ` Validate that the worker is functional ...
[08:08:03.156] | : . ' , ; ` | Worker is functional
[08:08:03.156] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:03.156] | : . ' , ; ` | : Listing all futures
[08:08:03.156] | : . ' , ; ` | : Number of registered futures: 0
[08:08:03.156] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:03.156] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:03.156] | : . ' , ; requestNode() ... done
[08:08:03.156] | : . ' , ; cluster node index: 1
[08:08:03.157] | : . ' , requestWorker() ... done
[08:08:03.157] | : . ' , eraseGlobalEnvironment() ...
[08:08:03.157] | : . ' , eraseGlobalEnvironment() ... done
[08:08:03.157] | : . ' , launchFuture() ...
[08:08:03.157] | : . ' , ; cluster node index: 1
[08:08:03.157] | : . ' , ; getFutureData() ...
[08:08:03.157] | : . ' , ; ` getFutureCore() ...
[08:08:03.158] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:03.158] | : . ' , ; ` getFutureCore() ... done
[08:08:03.158] | : . ' , ; ` getFutureCapture() ...
[08:08:03.158] | : . ' , ; ` getFutureCapture() ... done
[08:08:03.158] | : . ' , ; ` getFutureContext() ...
[08:08:03.158] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:03.158] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:03.158] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:03.158] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:03.159] | : . ' , ; ` getFutureContext() ... done
[08:08:03.159] | : . ' , ; getFutureData() ... done
[08:08:03.159] | : . ' , ; FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'add', earlySignal = 0) ...
[08:08:03.159] | : . ' , ; ` Appended future to position #1
[08:08:03.159] | : . ' , ; ` Number of registered futures: 1
[08:08:03.159] | : . ' , ; FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'add', earlySignal = 0) ... done
[08:08:03.159] | : . ' , launchFuture() ... done
[08:08:03.159] | : . ' , MultisessionFuture started
[08:08:03.160] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:03.160] | : . Launching futures ... done
[08:08:03.160] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:03.160] | : Using MultisessionFutureBackend ... done
[08:08:03.160] | run() for ‘Future’ (<unnamed-55>) ... done
[08:08:03.160] future(..., label = NULL) ... done
[08:08:03.160] future(..., label = NULL) ...
[08:08:03.160] | lazy: FALSE
[08:08:03.160] | stdout: TRUE
[08:08:03.160] | conditions: [n=1] ‘condition’
[08:08:03.161] | gc: FALSE
[08:08:03.161] | earlySignal: FALSE
[08:08:03.161] | getGlobalsAndPackages() ...
[08:08:03.161] | : Searching for globals ...
[08:08:03.162] | : . globals found: [0] 
[08:08:03.162] | : Searching for globals ... done
[08:08:03.162] | : globals: [0] <none>
[08:08:03.162] | : packages: [0] <none>
[08:08:03.162] | getGlobalsAndPackages() ... done
[08:08:03.163] | run() for ‘Future’ (<unnamed-56>) ...
[08:08:03.163] | : state: ‘created’
[08:08:03.163] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:03.163] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:03.163] | : Using MultisessionFutureBackend ...
[08:08:03.163] | : . Number of futures since start: 5 (5 created, 5 launched, 4 finished)
[08:08:03.163] | : . Launching futures ...
[08:08:03.163] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:03.163] | : . ' , Workers: [n=2]
[08:08:03.164] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:03.165] | : . ' , FutureRegistry: ‘workers-d9ae098e6e77722a626531d398ab6c43’
[08:08:03.165] | : . ' , requestWorker() ...
[08:08:03.165] | : . ' , ; requestNode() ...
[08:08:03.165] | : . ' , ; ` Number of workers: 2
[08:08:03.165] | : . ' , ; ` Polling for a free worker ...
[08:08:03.166] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:03.166] | : . ' , ; ` | : Listing all futures
[08:08:03.166] | : . ' , ; ` | : Number of registered futures: 1
[08:08:03.166] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:03.166] | : . ' , ; ` | Total time: 0
[08:08:03.166] | : . ' , ; ` Polling for a free worker ... done
[08:08:03.166] | : . ' , ; ` FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:03.166] | : . ' , ; ` | Listing all futures
[08:08:03.166] | : . ' , ; ` | Number of registered futures: 1
[08:08:03.166] | : . ' , ; ` FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:03.167] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:03.167] | : . ' , ; ` Index of first available worker: 2
[08:08:03.167] | : . ' , ; ` Validate that the worker is functional ...
[08:08:03.264] | : . ' , ; ` | Worker is functional
[08:08:03.264] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:03.264] | : . ' , ; ` | : Listing all futures
[08:08:03.264] | : . ' , ; ` | : Number of registered futures: 1
[08:08:03.264] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:03.264] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:03.265] | : . ' , ; requestNode() ... done
[08:08:03.265] | : . ' , ; cluster node index: 2
[08:08:03.265] | : . ' , requestWorker() ... done
[08:08:03.265] | : . ' , eraseGlobalEnvironment() ...
[08:08:03.265] | : . ' , eraseGlobalEnvironment() ... done
[08:08:03.265] | : . ' , launchFuture() ...
[08:08:03.265] | : . ' , ; cluster node index: 2
[08:08:03.266] | : . ' , ; getFutureData() ...
[08:08:03.266] | : . ' , ; ` getFutureCore() ...
[08:08:03.266] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:03.266] | : . ' , ; ` getFutureCore() ... done
[08:08:03.266] | : . ' , ; ` getFutureCapture() ...
[08:08:03.266] | : . ' , ; ` getFutureCapture() ... done
[08:08:03.266] | : . ' , ; ` getFutureContext() ...
[08:08:03.266] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:03.266] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:03.267] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:03.267] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:03.267] | : . ' , ; ` getFutureContext() ... done
[08:08:03.267] | : . ' , ; getFutureData() ... done
[08:08:03.267] | : . ' , ; FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'add', earlySignal = 0) ...
[08:08:03.267] | : . ' , ; ` Appended future to position #2
[08:08:03.267] | : . ' , ; ` Number of registered futures: 2
[08:08:03.267] | : . ' , ; FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'add', earlySignal = 0) ... done
[08:08:03.268] | : . ' , launchFuture() ... done
[08:08:03.268] | : . ' , MultisessionFuture started
[08:08:03.268] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:03.268] | : . Launching futures ... done
[08:08:03.268] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:03.268] | : Using MultisessionFutureBackend ... done
[08:08:03.268] | run() for ‘Future’ (<unnamed-56>) ... done
[08:08:03.268] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675c0966b8> 
 $ c:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675b579b88> 
 $  : NULL
 $  : NULL
 $  : num 6
List of 6
 $ a: num 1
 $ b:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675c0966b8> 
 $ c:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675b579b88> 
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 2 3
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
[08:08:03.273] resolved() for matrix ...
[08:08:03.273] | Number of elements: 6
[08:08:03.274] | Number of futures: 6
[08:08:03.274] | resolved() for MultisessionFuture (<unnamed-55>) ...
[08:08:03.274] | : Cluster node socket connection: index=4, id=984
[08:08:03.274] | : assertValidConnection() ...
[08:08:03.274] | : . cluster node index: 1
[08:08:03.275] | : assertValidConnection() ... done
[08:08:03.275] | : receiveMessageFromWorker() for ClusterFuture ...
[08:08:03.275] | : . cluster node index: 1
[08:08:03.275] | : . [1] TRUE
[08:08:03.275] | : . received data:
[08:08:03.275] | : . List of 5
[08:08:03.275] | : .  $ type   : chr "VALUE"
[08:08:03.275] | : .  $ value  :List of 16
[08:08:03.275] | : .   ..$ value              : num 2
[08:08:03.275] | : .   ..$ visible            : logi TRUE
[08:08:03.275] | : .   ..$ stdout             : chr ""
[08:08:03.275] | : .   ..$ conditions         : list()
[08:08:03.275] | : .   ..$ rng                : logi FALSE
[08:08:03.275] | : .   ..$ seed               : NULL
[08:08:03.275] | : .   ..$ misuseGlobalEnv    : NULL
[08:08:03.275] | : .   ..$ misuseConnections  :List of 3
[08:08:03.275] | : .   .. ..$ added   : NULL
[08:08:03.275] | : .   .. ..$ removed : NULL
[08:08:03.275] | : .   .. ..$ replaced: NULL
[08:08:03.275] | : .   ..$ misuseDevices      : NULL
[08:08:03.275] | : .   ..$ misuseDefaultDevice: list()
[08:08:03.275] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:03"
[08:08:03.275] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:03"
[08:08:03.275] | : .   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "55"
[08:08:03.275] | : .   ..$ session_uuid       : chr "fead307841043f6d8e4547187745dcf7"
[08:08:03.275] | : .   .. ..- attr(*, "source")=List of 5
[08:08:03.275] | : .   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:03.275] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:03.275] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:03.275] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:03.275] | : .   .. .. ..$ pid   : int 68968
[08:08:03.275] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:03.275] | : .   .. .. ..$ random: int 2147483647
[08:08:03.275] | : .   ..$ r_info             :List of 4
[08:08:03.275] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:03.275] | : .   .. .. ..$ : int [1:3] 4 5 1
[08:08:03.275] | : .   .. ..$ os           : chr "unix"
[08:08:03.275] | : .   .. ..$ os_name      : chr "Linux"
[08:08:03.275] | : .   .. ..$ captures_utf8: logi TRUE
[08:08:03.275] | : .   ..$ version            : chr "1.8"
[08:08:03.275] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:08:03.275] | : .  $ success: logi TRUE
[08:08:03.275] | : .  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:03.275] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:03.275] | : .  $ tag    : NULL
[08:08:03.288] | : . Received FutureResult
[08:08:03.288] | : . FutureResult:
[08:08:03.288] | : . value: ‘numeric’
[08:08:03.288] | : . visible: TRUE
[08:08:03.288] | : . stdout: character
[08:08:03.288] | : . conditions: [n = 0] 
[08:08:03.288] | : . RNG used: FALSE
[08:08:03.288] | : . duration: 0.002676964 secs (started 2025-06-17 08:08:03.199766)
[08:08:03.288] | : . version: 1.8
[08:08:03.288] | : . FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'remove', earlySignal = 0) ...
[08:08:03.289] | : . ' Removed future from position #1
[08:08:03.289] | : . ' Number of registered futures: 1
[08:08:03.289] | : . FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'remove', earlySignal = 0) ... done
[08:08:03.289] | : . Erased future from future backend
[08:08:03.289] | : . result() for ClusterFuture ...
[08:08:03.289] | : . ' result already collected: FutureResult
[08:08:03.289] | : . result() for ClusterFuture ... done
[08:08:03.289] | : . signalConditions() ...
[08:08:03.289] | : . ' include = ‘immediateCondition’
[08:08:03.289] | : . ' exclude = 
[08:08:03.290] | : . ' resignal = FALSE
[08:08:03.290] | : . ' Number of conditions: 0
[08:08:03.290] | : . '  int 0
[08:08:03.290] | : . signalConditions() ... done
[08:08:03.290] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:08:03.290] | : receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:03.290] | resolved() for MultisessionFuture (<unnamed-55>) ... done
[08:08:03.291] | assertFutureResult() ...
[08:08:03.291] | : Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:03.291] | : Future uuid: 55
[08:08:03.291] | : identical; success
[08:08:03.291] | assertFutureResult() ... done
[08:08:03.291] | resolved() for MultisessionFuture (<unnamed-56>) ...
[08:08:03.291] | : Cluster node socket connection: index=5, id=985
[08:08:03.291] | : assertValidConnection() ...
[08:08:03.291] | : . cluster node index: 2
[08:08:03.292] | : assertValidConnection() ... done
[08:08:03.302] | : socketSelect(list(<connection #5 (id=985)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:03.302] | resolved() for MultisessionFuture (<unnamed-56>) ... done
[08:08:03.302] resolved() for matrix ... done
 logi [1:2, 1:3] TRUE TRUE FALSE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "" ...
[08:08:03.304] value() for matrix ...
[08:08:03.304] | recursive: 0
[08:08:03.304] | reduce: FALSE
[08:08:03.305] | length: 6
[08:08:03.305] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:03.305] | Number of remaining objects: 6
[08:08:03.305] | checking value #1:
[08:08:03.305] | 'obj' is atomic
[08:08:03.305] | signalConditionsASAP(numeric, pos=1) ...
[08:08:03.305] | : nx: 6
[08:08:03.305] | : relay: TRUE
[08:08:03.305] | : stdout: TRUE
[08:08:03.305] | : signal: TRUE
[08:08:03.305] | : resignal: FALSE
[08:08:03.306] | : force: TRUE
[08:08:03.306] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.306] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.306] | : until=2
[08:08:03.306] | : relaying element #2
[08:08:03.306] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.306] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.306] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:03.306] | length: 5 (resolved future 1)
[08:08:03.306] value() for matrix ... done
[08:08:03.307] checking value #2:
[08:08:03.307] 'obj' is MultisessionFuture
[08:08:03.307] MultisessionFuture #2
[08:08:03.307] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:03.307] | nx: 6
[08:08:03.307] | relay: TRUE
[08:08:03.307] | stdout: TRUE
[08:08:03.307] | signal: TRUE
[08:08:03.307] | resignal: FALSE
[08:08:03.307] | force: TRUE
[08:08:03.307] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.308] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.308] | until=2
[08:08:03.308] | relaying element #2
[08:08:03.308] | value() for MultisessionFuture (<unnamed-55>) ...
[08:08:03.308] | : result() for ClusterFuture ...
[08:08:03.308] | : . result already collected: FutureResult
[08:08:03.308] | : result() for ClusterFuture ... done
[08:08:03.308] | : result() for ClusterFuture ...
[08:08:03.308] | : . result already collected: FutureResult
[08:08:03.308] | : result() for ClusterFuture ... done
[08:08:03.309] | : signalConditions() ...
[08:08:03.309] | : . include = ‘immediateCondition’
[08:08:03.309] | : . exclude = 
[08:08:03.309] | : . resignal = FALSE
[08:08:03.309] | : . Number of conditions: 0
[08:08:03.309] | : .  int 0
[08:08:03.309] | : signalConditions() ... done
[08:08:03.310] | : relay stdout ...
[08:08:03.310] | : relay stdout ... done
[08:08:03.310] | : check for misuse ...
[08:08:03.310] | : check for misuse ... done
[08:08:03.310] | value() for MultisessionFuture (<unnamed-55>) ... done
[08:08:03.310] | result() for ClusterFuture ...
[08:08:03.310] | : result already collected: FutureResult
[08:08:03.310] | result() for ClusterFuture ... done
[08:08:03.310] | signalConditions() ...
[08:08:03.310] | : include = ‘immediateCondition’
[08:08:03.311] | : exclude = 
[08:08:03.311] | : resignal = FALSE
[08:08:03.311] | : Number of conditions: 0
[08:08:03.311] | :  int 0
[08:08:03.311] | signalConditions() ... done
[08:08:03.311] | result() for ClusterFuture ...
[08:08:03.311] | : result already collected: FutureResult
[08:08:03.312] | result() for ClusterFuture ... done
[08:08:03.312] | signalConditions() ...
[08:08:03.312] | : include = ‘condition’
[08:08:03.312] | : exclude = ‘error’, ‘immediateCondition’
[08:08:03.312] | : resignal = TRUE
[08:08:03.312] | : Number of conditions: 0
[08:08:03.312] | :  int 0
[08:08:03.313] | signalConditions() ... done
[08:08:03.313] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.313] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.313] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:03.313] value(<MultisessionFuture>, ...) ...
[08:08:03.313] value(<MultisessionFuture>, ...) ... done
[08:08:03.313] value() for MultisessionFuture (<unnamed-55>) ...
[08:08:03.313] | result() for ClusterFuture ...
[08:08:03.313] | : result already collected: FutureResult
[08:08:03.313] | result() for ClusterFuture ... done
[08:08:03.313] | result() for ClusterFuture ...
[08:08:03.314] | : result already collected: FutureResult
[08:08:03.314] | result() for ClusterFuture ... done
[08:08:03.314] | signalConditions() ...
[08:08:03.314] | : include = ‘immediateCondition’
[08:08:03.314] | : exclude = 
[08:08:03.314] | : resignal = FALSE
[08:08:03.314] | : Number of conditions: 0
[08:08:03.314] | :  int 0
[08:08:03.315] | signalConditions() ... done
[08:08:03.315] | check for misuse ...
[08:08:03.315] | check for misuse ... done
[08:08:03.315] value() for MultisessionFuture (<unnamed-55>) ... done
[08:08:03.315] value: <numeric>
[08:08:03.315] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:03.315] | nx: 6
[08:08:03.315] | relay: TRUE
[08:08:03.315] | stdout: TRUE
[08:08:03.315] | signal: TRUE
[08:08:03.315] | resignal: FALSE
[08:08:03.316] | force: TRUE
[08:08:03.316] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.316] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.316] | until=3
[08:08:03.316] | relaying element #3
[08:08:03.316] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.316] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.316] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:03.316] resolve() for MultisessionFuture ...
[08:08:03.316] resolve() for MultisessionFuture ... done
[08:08:03.317] length: 4 (resolved future 2)

[08:08:03.317] checking value #3:
[08:08:03.317] 'obj' is MultisessionFuture
[08:08:03.317] resolved() for MultisessionFuture (<unnamed-56>) ...
[08:08:03.317] | Cluster node socket connection: index=5, id=985
[08:08:03.317] | assertValidConnection() ...
[08:08:03.317] | : cluster node index: 2
[08:08:03.318] | assertValidConnection() ... done
[08:08:03.318] | receiveMessageFromWorker() for ClusterFuture ...
[08:08:03.318] | : cluster node index: 2
[08:08:03.318] | : [1] TRUE
[08:08:03.318] | : received data:
[08:08:03.318] | : List of 5
[08:08:03.318] | :  $ type   : chr "VALUE"
[08:08:03.318] | :  $ value  :List of 16
[08:08:03.318] | :   ..$ value              : NULL
[08:08:03.318] | :   ..$ visible            : logi TRUE
[08:08:03.318] | :   ..$ stdout             : chr ""
[08:08:03.318] | :   ..$ conditions         : list()
[08:08:03.318] | :   ..$ rng                : logi FALSE
[08:08:03.318] | :   ..$ seed               : NULL
[08:08:03.318] | :   ..$ misuseGlobalEnv    : NULL
[08:08:03.318] | :   ..$ misuseConnections  :List of 3
[08:08:03.318] | :   .. ..$ added   : NULL
[08:08:03.318] | :   .. ..$ removed : NULL
[08:08:03.318] | :   .. ..$ replaced: NULL
[08:08:03.318] | :   ..$ misuseDevices      : NULL
[08:08:03.318] | :   ..$ misuseDefaultDevice: list()
[08:08:03.318] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:03"
[08:08:03.318] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:03"
[08:08:03.318] | :   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "56"
[08:08:03.318] | :   ..$ session_uuid       : chr "93d625500df762db48dab82b178af5e1"
[08:08:03.318] | :   .. ..- attr(*, "source")=List of 5
[08:08:03.318] | :   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:03.318] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:03.318] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:03.318] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:03.318] | :   .. .. ..$ pid   : int 68969
[08:08:03.318] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:03.318] | :   .. .. ..$ random: int 2147483647
[08:08:03.318] | :   ..$ r_info             :List of 4
[08:08:03.318] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:03.318] | :   .. .. ..$ : int [1:3] 4 5 1
[08:08:03.318] | :   .. ..$ os           : chr "unix"
[08:08:03.318] | :   .. ..$ os_name      : chr "Linux"
[08:08:03.318] | :   .. ..$ captures_utf8: logi TRUE
[08:08:03.318] | :   ..$ version            : chr "1.8"
[08:08:03.318] | :   ..- attr(*, "class")= chr "FutureResult"
[08:08:03.318] | :  $ success: logi TRUE
[08:08:03.318] | :  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:03.318] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:03.318] | :  $ tag    : NULL
[08:08:03.329] | : Received FutureResult
[08:08:03.329] | : FutureResult:
[08:08:03.329] | : value: ‘NULL’
[08:08:03.329] | : visible: TRUE
[08:08:03.329] | : stdout: character
[08:08:03.329] | : conditions: [n = 0] 
[08:08:03.329] | : RNG used: FALSE
[08:08:03.329] | : duration: 0.002561569 secs (started 2025-06-17 08:08:03.308838)
[08:08:03.329] | : version: 1.8
[08:08:03.329] | : FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'remove', earlySignal = 0) ...
[08:08:03.329] | : . Removed future from position #1
[08:08:03.329] | : . Number of registered futures: 0
[08:08:03.330] | : FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'remove', earlySignal = 0) ... done
[08:08:03.330] | : Erased future from future backend
[08:08:03.330] | : result() for ClusterFuture ...
[08:08:03.330] | : . result already collected: FutureResult
[08:08:03.330] | : result() for ClusterFuture ... done
[08:08:03.330] | : signalConditions() ...
[08:08:03.330] | : . include = ‘immediateCondition’
[08:08:03.330] | : . exclude = 
[08:08:03.330] | : . resignal = FALSE
[08:08:03.330] | : . Number of conditions: 0
[08:08:03.331] | : .  int 0
[08:08:03.331] | : signalConditions() ... done
[08:08:03.331] | receiveMessageFromWorker() for ClusterFuture ... done
[08:08:03.331] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:03.331] resolved() for MultisessionFuture (<unnamed-56>) ... done
[08:08:03.331] assertFutureResult() ...
[08:08:03.331] | Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:03.331] | Future uuid: 56
[08:08:03.331] | identical; success
[08:08:03.332] assertFutureResult() ... done
[08:08:03.332] MultisessionFuture #3
[08:08:03.332] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:03.332] | nx: 6
[08:08:03.332] | relay: TRUE
[08:08:03.332] | stdout: TRUE
[08:08:03.332] | signal: TRUE
[08:08:03.332] | resignal: FALSE
[08:08:03.332] | force: TRUE
[08:08:03.332] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.332] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.333] | until=3
[08:08:03.333] | relaying element #3
[08:08:03.333] | value() for MultisessionFuture (<unnamed-56>) ...
[08:08:03.333] | : result() for ClusterFuture ...
[08:08:03.333] | : . result already collected: FutureResult
[08:08:03.333] | : result() for ClusterFuture ... done
[08:08:03.333] | : result() for ClusterFuture ...
[08:08:03.333] | : . result already collected: FutureResult
[08:08:03.333] | : result() for ClusterFuture ... done
[08:08:03.333] | : signalConditions() ...
[08:08:03.333] | : . include = ‘immediateCondition’
[08:08:03.334] | : . exclude = 
[08:08:03.334] | : . resignal = FALSE
[08:08:03.334] | : . Number of conditions: 0
[08:08:03.334] | : .  int 0
[08:08:03.334] | : signalConditions() ... done
[08:08:03.334] | : relay stdout ...
[08:08:03.334] | : relay stdout ... done
[08:08:03.335] | : check for misuse ...
[08:08:03.335] | : check for misuse ... done
[08:08:03.335] | value() for MultisessionFuture (<unnamed-56>) ... done
[08:08:03.335] | result() for ClusterFuture ...
[08:08:03.335] | : result already collected: FutureResult
[08:08:03.335] | result() for ClusterFuture ... done
[08:08:03.335] | signalConditions() ...
[08:08:03.335] | : include = ‘immediateCondition’
[08:08:03.335] | : exclude = 
[08:08:03.335] | : resignal = FALSE
[08:08:03.336] | : Number of conditions: 0
[08:08:03.336] | :  int 0
[08:08:03.336] | signalConditions() ... done
[08:08:03.336] | result() for ClusterFuture ...
[08:08:03.336] | : result already collected: FutureResult
[08:08:03.336] | result() for ClusterFuture ... done
[08:08:03.336] | signalConditions() ...
[08:08:03.336] | : include = ‘condition’
[08:08:03.337] | : exclude = ‘error’, ‘immediateCondition’
[08:08:03.337] | : resignal = TRUE
[08:08:03.337] | : Number of conditions: 0
[08:08:03.337] | :  int 0
[08:08:03.337] | signalConditions() ... done
[08:08:03.337] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.337] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.338] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:03.338] value(<MultisessionFuture>, ...) ...
[08:08:03.338] value(<MultisessionFuture>, ...) ... done
[08:08:03.338] value() for MultisessionFuture (<unnamed-56>) ...
[08:08:03.338] | result() for ClusterFuture ...
[08:08:03.338] | : result already collected: FutureResult
[08:08:03.338] | result() for ClusterFuture ... done
[08:08:03.338] | result() for ClusterFuture ...
[08:08:03.338] | : result already collected: FutureResult
[08:08:03.338] | result() for ClusterFuture ... done
[08:08:03.338] | signalConditions() ...
[08:08:03.339] | : include = ‘immediateCondition’
[08:08:03.339] | : exclude = 
[08:08:03.339] | : resignal = FALSE
[08:08:03.339] | : Number of conditions: 0
[08:08:03.339] | :  int 0
[08:08:03.339] | signalConditions() ... done
[08:08:03.339] | check for misuse ...
[08:08:03.340] | check for misuse ... done
[08:08:03.340] value() for MultisessionFuture (<unnamed-56>) ... done
[08:08:03.340] value: <NULL>
[08:08:03.340] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:03.340] | nx: 6
[08:08:03.340] | relay: TRUE
[08:08:03.340] | stdout: TRUE
[08:08:03.340] | signal: TRUE
[08:08:03.340] | resignal: FALSE
[08:08:03.340] | force: TRUE
[08:08:03.340] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.340] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.341] | until=4
[08:08:03.341] | relaying element #4
[08:08:03.341] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.341] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.341] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:03.341] resolve() for MultisessionFuture ...
[08:08:03.341] resolve() for MultisessionFuture ... done
[08:08:03.341] length: 3 (resolved future 3)

[08:08:03.341] checking value #4:
[08:08:03.342] 'obj' is NULL
[08:08:03.342] signalConditionsASAP(NULL, pos=4) ...
[08:08:03.342] | nx: 6
[08:08:03.342] | relay: TRUE
[08:08:03.342] | stdout: TRUE
[08:08:03.342] | signal: TRUE
[08:08:03.342] | resignal: FALSE
[08:08:03.342] | force: TRUE
[08:08:03.342] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.342] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.342] | until=5
[08:08:03.342] | relaying element #5
[08:08:03.343] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:03.343] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.343] signalConditionsASAP(NULL, pos=4) ... done
[08:08:03.343] signalConditionsASAP(NULL, pos=4) ...
[08:08:03.343] | nx: 6
[08:08:03.343] | relay: TRUE
[08:08:03.343] | stdout: TRUE
[08:08:03.343] | signal: TRUE
[08:08:03.343] | resignal: FALSE
[08:08:03.343] | force: TRUE
[08:08:03.343] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:03.344] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.344] | until=5
[08:08:03.344] | relaying element #5
[08:08:03.344] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:03.344] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.344] signalConditionsASAP(NULL, pos=4) ... done
[08:08:03.344] length: 2 (resolved future 4)

[08:08:03.344] checking value #5:
[08:08:03.344] 'obj' is NULL
[08:08:03.344] signalConditionsASAP(NULL, pos=5) ...
[08:08:03.345] | nx: 6
[08:08:03.345] | relay: TRUE
[08:08:03.345] | stdout: TRUE
[08:08:03.345] | signal: TRUE
[08:08:03.345] | resignal: FALSE
[08:08:03.345] | force: TRUE
[08:08:03.345] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:03.345] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.345] | until=6
[08:08:03.345] | relaying element #6
[08:08:03.345] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:03.346] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.346] signalConditionsASAP(NULL, pos=5) ... done
[08:08:03.346] signalConditionsASAP(NULL, pos=5) ...
[08:08:03.346] | nx: 6
[08:08:03.346] | relay: TRUE
[08:08:03.346] | stdout: TRUE
[08:08:03.346] | signal: TRUE
[08:08:03.346] | resignal: FALSE
[08:08:03.346] | force: TRUE
[08:08:03.346] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:03.346] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.347] | until=6
[08:08:03.347] | relaying element #6
[08:08:03.347] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:03.347] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.347] signalConditionsASAP(NULL, pos=5) ... done
[08:08:03.347] length: 1 (resolved future 5)

[08:08:03.347] checking value #6:
[08:08:03.347] 'obj' is atomic
[08:08:03.347] signalConditionsASAP(numeric, pos=6) ...
[08:08:03.347] | nx: 6
[08:08:03.348] | relay: TRUE
[08:08:03.348] | stdout: TRUE
[08:08:03.348] | signal: TRUE
[08:08:03.348] | resignal: FALSE
[08:08:03.348] | force: TRUE
[08:08:03.348] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:03.348] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.348] | until=6
[08:08:03.348] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:03.348] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.348] signalConditionsASAP(numeric, pos=6) ... done
[08:08:03.349] length: 0 (resolved future 6)

[08:08:03.349] Relaying remaining futures ...
[08:08:03.349] | signalConditionsASAP(NULL, pos=0) ...
[08:08:03.349] | : nx: 6
[08:08:03.349] | : relay: TRUE
[08:08:03.349] | : stdout: TRUE
[08:08:03.349] | : signal: TRUE
[08:08:03.349] | : resignal: FALSE
[08:08:03.349] | : force: TRUE
[08:08:03.349] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:03.350] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:03.350] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:03.350] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.350] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:03.350] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 2 3
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
Dimensions: c(2, 3, 1)
[08:08:03.355] future(..., label = NULL) ...
[08:08:03.355] | lazy: FALSE
[08:08:03.355] | stdout: TRUE
[08:08:03.355] | conditions: [n=1] ‘condition’
[08:08:03.355] | gc: FALSE
[08:08:03.355] | earlySignal: FALSE
[08:08:03.355] | getGlobalsAndPackages() ...
[08:08:03.356] | : Searching for globals ...
[08:08:03.357] | : . globals found: [0] 
[08:08:03.357] | : Searching for globals ... done
[08:08:03.357] | : globals: [0] <none>
[08:08:03.357] | : packages: [0] <none>
[08:08:03.357] | getGlobalsAndPackages() ... done
[08:08:03.357] | run() for ‘Future’ (<unnamed-57>) ...
[08:08:03.357] | : state: ‘created’
[08:08:03.358] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:03.358] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:03.358] | : Using MultisessionFutureBackend ...
[08:08:03.358] | : . Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:08:03.358] | : . Launching futures ...
[08:08:03.358] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:03.358] | : . ' , Workers: [n=2]
[08:08:03.358] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:03.360] | : . ' , FutureRegistry: ‘workers-d9ae098e6e77722a626531d398ab6c43’
[08:08:03.360] | : . ' , requestWorker() ...
[08:08:03.360] | : . ' , ; requestNode() ...
[08:08:03.360] | : . ' , ; ` Number of workers: 2
[08:08:03.360] | : . ' , ; ` Polling for a free worker ...
[08:08:03.360] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:03.360] | : . ' , ; ` | : Listing all futures
[08:08:03.361] | : . ' , ; ` | : Number of registered futures: 0
[08:08:03.361] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:03.361] | : . ' , ; ` | Total time: 0
[08:08:03.361] | : . ' , ; ` Polling for a free worker ... done
[08:08:03.361] | : . ' , ; ` FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:03.361] | : . ' , ; ` | Listing all futures
[08:08:03.361] | : . ' , ; ` | Number of registered futures: 0
[08:08:03.361] | : . ' , ; ` FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:03.361] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:03.361] | : . ' , ; ` Index of first available worker: 1
[08:08:03.362] | : . ' , ; ` Validate that the worker is functional ...
[08:08:03.457] | : . ' , ; ` | Worker is functional
[08:08:03.458] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:03.458] | : . ' , ; ` | : Listing all futures
[08:08:03.458] | : . ' , ; ` | : Number of registered futures: 0
[08:08:03.458] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:03.458] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:03.458] | : . ' , ; requestNode() ... done
[08:08:03.458] | : . ' , ; cluster node index: 1
[08:08:03.458] | : . ' , requestWorker() ... done
[08:08:03.459] | : . ' , eraseGlobalEnvironment() ...
[08:08:03.459] | : . ' , eraseGlobalEnvironment() ... done
[08:08:03.459] | : . ' , launchFuture() ...
[08:08:03.459] | : . ' , ; cluster node index: 1
[08:08:03.459] | : . ' , ; getFutureData() ...
[08:08:03.459] | : . ' , ; ` getFutureCore() ...
[08:08:03.459] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:03.459] | : . ' , ; ` getFutureCore() ... done
[08:08:03.460] | : . ' , ; ` getFutureCapture() ...
[08:08:03.460] | : . ' , ; ` getFutureCapture() ... done
[08:08:03.460] | : . ' , ; ` getFutureContext() ...
[08:08:03.460] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:03.460] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:03.460] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:03.460] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:03.460] | : . ' , ; ` getFutureContext() ... done
[08:08:03.460] | : . ' , ; getFutureData() ... done
[08:08:03.461] | : . ' , ; FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'add', earlySignal = 0) ...
[08:08:03.461] | : . ' , ; ` Appended future to position #1
[08:08:03.461] | : . ' , ; ` Number of registered futures: 1
[08:08:03.461] | : . ' , ; FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'add', earlySignal = 0) ... done
[08:08:03.461] | : . ' , launchFuture() ... done
[08:08:03.461] | : . ' , MultisessionFuture started
[08:08:03.461] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:03.462] | : . Launching futures ... done
[08:08:03.462] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:03.462] | : Using MultisessionFutureBackend ... done
[08:08:03.462] | run() for ‘Future’ (<unnamed-57>) ... done
[08:08:03.462] future(..., label = NULL) ... done
[08:08:03.462] future(..., label = NULL) ...
[08:08:03.462] | lazy: FALSE
[08:08:03.462] | stdout: TRUE
[08:08:03.462] | conditions: [n=1] ‘condition’
[08:08:03.462] | gc: FALSE
[08:08:03.463] | earlySignal: FALSE
[08:08:03.463] | getGlobalsAndPackages() ...
[08:08:03.463] | : Searching for globals ...
[08:08:03.464] | : . globals found: [0] 
[08:08:03.464] | : Searching for globals ... done
[08:08:03.464] | : globals: [0] <none>
[08:08:03.464] | : packages: [0] <none>
[08:08:03.464] | getGlobalsAndPackages() ... done
[08:08:03.465] | run() for ‘Future’ (<unnamed-58>) ...
[08:08:03.465] | : state: ‘created’
[08:08:03.465] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:03.465] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:03.465] | : Using MultisessionFutureBackend ...
[08:08:03.465] | : . Number of futures since start: 7 (7 created, 7 launched, 6 finished)
[08:08:03.465] | : . Launching futures ...
[08:08:03.465] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:03.465] | : . ' , Workers: [n=2]
[08:08:03.466] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:03.467] | : . ' , FutureRegistry: ‘workers-d9ae098e6e77722a626531d398ab6c43’
[08:08:03.467] | : . ' , requestWorker() ...
[08:08:03.467] | : . ' , ; requestNode() ...
[08:08:03.467] | : . ' , ; ` Number of workers: 2
[08:08:03.468] | : . ' , ; ` Polling for a free worker ...
[08:08:03.468] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:03.468] | : . ' , ; ` | : Listing all futures
[08:08:03.468] | : . ' , ; ` | : Number of registered futures: 1
[08:08:03.468] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:03.468] | : . ' , ; ` | Total time: 0
[08:08:03.468] | : . ' , ; ` Polling for a free worker ... done
[08:08:03.468] | : . ' , ; ` FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:03.468] | : . ' , ; ` | Listing all futures
[08:08:03.468] | : . ' , ; ` | Number of registered futures: 1
[08:08:03.468] | : . ' , ; ` FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:03.469] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:03.469] | : . ' , ; ` Index of first available worker: 2
[08:08:03.469] | : . ' , ; ` Validate that the worker is functional ...
[08:08:03.563] | : . ' , ; ` | Worker is functional
[08:08:03.564] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:03.564] | : . ' , ; ` | : Listing all futures
[08:08:03.564] | : . ' , ; ` | : Number of registered futures: 1
[08:08:03.564] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:03.564] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:03.564] | : . ' , ; requestNode() ... done
[08:08:03.564] | : . ' , ; cluster node index: 2
[08:08:03.565] | : . ' , requestWorker() ... done
[08:08:03.565] | : . ' , eraseGlobalEnvironment() ...
[08:08:03.565] | : . ' , eraseGlobalEnvironment() ... done
[08:08:03.565] | : . ' , launchFuture() ...
[08:08:03.565] | : . ' , ; cluster node index: 2
[08:08:03.565] | : . ' , ; getFutureData() ...
[08:08:03.565] | : . ' , ; ` getFutureCore() ...
[08:08:03.566] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:03.566] | : . ' , ; ` getFutureCore() ... done
[08:08:03.566] | : . ' , ; ` getFutureCapture() ...
[08:08:03.566] | : . ' , ; ` getFutureCapture() ... done
[08:08:03.566] | : . ' , ; ` getFutureContext() ...
[08:08:03.566] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:03.566] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:03.566] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:03.566] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:03.567] | : . ' , ; ` getFutureContext() ... done
[08:08:03.567] | : . ' , ; getFutureData() ... done
[08:08:03.567] | : . ' , ; FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'add', earlySignal = 0) ...
[08:08:03.567] | : . ' , ; ` Appended future to position #2
[08:08:03.567] | : . ' , ; ` Number of registered futures: 2
[08:08:03.567] | : . ' , ; FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'add', earlySignal = 0) ... done
[08:08:03.567] | : . ' , launchFuture() ... done
[08:08:03.567] | : . ' , MultisessionFuture started
[08:08:03.568] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:03.568] | : . Launching futures ... done
[08:08:03.568] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:03.568] | : Using MultisessionFutureBackend ... done
[08:08:03.568] | run() for ‘Future’ (<unnamed-58>) ... done
[08:08:03.568] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675cd72c80> 
 $ c:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675c499298> 
 $  : NULL
 $  : NULL
 $  : num 6
List of 6
 $ a: num 1
 $ b:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675cd72c80> 
 $ c:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675c499298> 
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:3] 2 3 1
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
[08:08:03.573] resolved() for array ...
[08:08:03.573] | Number of elements: 6
[08:08:03.574] | Number of futures: 6
[08:08:03.574] | resolved() for MultisessionFuture (<unnamed-57>) ...
[08:08:03.574] | : Cluster node socket connection: index=4, id=984
[08:08:03.574] | : assertValidConnection() ...
[08:08:03.574] | : . cluster node index: 1
[08:08:03.574] | : assertValidConnection() ... done
[08:08:03.575] | : receiveMessageFromWorker() for ClusterFuture ...
[08:08:03.575] | : . cluster node index: 1
[08:08:03.575] | : . [1] TRUE
[08:08:03.575] | : . received data:
[08:08:03.575] | : . List of 5
[08:08:03.575] | : .  $ type   : chr "VALUE"
[08:08:03.575] | : .  $ value  :List of 16
[08:08:03.575] | : .   ..$ value              : num 2
[08:08:03.575] | : .   ..$ visible            : logi TRUE
[08:08:03.575] | : .   ..$ stdout             : chr ""
[08:08:03.575] | : .   ..$ conditions         : list()
[08:08:03.575] | : .   ..$ rng                : logi FALSE
[08:08:03.575] | : .   ..$ seed               : NULL
[08:08:03.575] | : .   ..$ misuseGlobalEnv    : NULL
[08:08:03.575] | : .   ..$ misuseConnections  :List of 3
[08:08:03.575] | : .   .. ..$ added   : NULL
[08:08:03.575] | : .   .. ..$ removed : NULL
[08:08:03.575] | : .   .. ..$ replaced: NULL
[08:08:03.575] | : .   ..$ misuseDevices      : NULL
[08:08:03.575] | : .   ..$ misuseDefaultDevice: list()
[08:08:03.575] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:03"
[08:08:03.575] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:03"
[08:08:03.575] | : .   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "57"
[08:08:03.575] | : .   ..$ session_uuid       : chr "fead307841043f6d8e4547187745dcf7"
[08:08:03.575] | : .   .. ..- attr(*, "source")=List of 5
[08:08:03.575] | : .   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:03.575] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:03.575] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:03.575] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:03.575] | : .   .. .. ..$ pid   : int 68968
[08:08:03.575] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:03.575] | : .   .. .. ..$ random: int 2147483647
[08:08:03.575] | : .   ..$ r_info             :List of 4
[08:08:03.575] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:03.575] | : .   .. .. ..$ : int [1:3] 4 5 1
[08:08:03.575] | : .   .. ..$ os           : chr "unix"
[08:08:03.575] | : .   .. ..$ os_name      : chr "Linux"
[08:08:03.575] | : .   .. ..$ captures_utf8: logi TRUE
[08:08:03.575] | : .   ..$ version            : chr "1.8"
[08:08:03.575] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:08:03.575] | : .  $ success: logi TRUE
[08:08:03.575] | : .  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:03.575] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:03.575] | : .  $ tag    : NULL
[08:08:03.586] | : . Received FutureResult
[08:08:03.586] | : . FutureResult:
[08:08:03.586] | : . value: ‘numeric’
[08:08:03.586] | : . visible: TRUE
[08:08:03.586] | : . stdout: character
[08:08:03.586] | : . conditions: [n = 0] 
[08:08:03.586] | : . RNG used: FALSE
[08:08:03.586] | : . duration: 0.002723932 secs (started 2025-06-17 08:08:03.501832)
[08:08:03.586] | : . version: 1.8
[08:08:03.586] | : . FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'remove', earlySignal = 0) ...
[08:08:03.587] | : . ' Removed future from position #1
[08:08:03.587] | : . ' Number of registered futures: 1
[08:08:03.587] | : . FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'remove', earlySignal = 0) ... done
[08:08:03.587] | : . Erased future from future backend
[08:08:03.587] | : . result() for ClusterFuture ...
[08:08:03.587] | : . ' result already collected: FutureResult
[08:08:03.587] | : . result() for ClusterFuture ... done
[08:08:03.587] | : . signalConditions() ...
[08:08:03.587] | : . ' include = ‘immediateCondition’
[08:08:03.588] | : . ' exclude = 
[08:08:03.588] | : . ' resignal = FALSE
[08:08:03.588] | : . ' Number of conditions: 0
[08:08:03.588] | : . '  int 0
[08:08:03.588] | : . signalConditions() ... done
[08:08:03.588] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:08:03.588] | : receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:03.589] | resolved() for MultisessionFuture (<unnamed-57>) ... done
[08:08:03.589] | assertFutureResult() ...
[08:08:03.589] | : Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:03.589] | : Future uuid: 57
[08:08:03.589] | : identical; success
[08:08:03.589] | assertFutureResult() ... done
[08:08:03.589] | resolved() for MultisessionFuture (<unnamed-58>) ...
[08:08:03.589] | : Cluster node socket connection: index=5, id=985
[08:08:03.589] | : assertValidConnection() ...
[08:08:03.590] | : . cluster node index: 2
[08:08:03.590] | : assertValidConnection() ... done
[08:08:03.600] | : socketSelect(list(<connection #5 (id=985)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:03.600] | resolved() for MultisessionFuture (<unnamed-58>) ... done
[08:08:03.600] resolved() for array ... done
 logi [1:2, 1:3, 1] TRUE TRUE FALSE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "" ...
[08:08:03.602] value() for array ...
[08:08:03.602] | recursive: 0
[08:08:03.602] | reduce: FALSE
[08:08:03.603] | length: 6
[08:08:03.603] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:03.603] | Number of remaining objects: 6
[08:08:03.603] | checking value #1:
[08:08:03.603] | 'obj' is atomic
[08:08:03.603] | signalConditionsASAP(numeric, pos=1) ...
[08:08:03.603] | : nx: 6
[08:08:03.603] | : relay: TRUE
[08:08:03.603] | : stdout: TRUE
[08:08:03.604] | : signal: TRUE
[08:08:03.604] | : resignal: FALSE
[08:08:03.604] | : force: TRUE
[08:08:03.604] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.604] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.604] | : until=2
[08:08:03.604] | : relaying element #2
[08:08:03.604] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.604] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.604] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:03.605] | length: 5 (resolved future 1)
[08:08:03.605] value() for array ... done
[08:08:03.605] checking value #2:
[08:08:03.605] 'obj' is MultisessionFuture
[08:08:03.605] MultisessionFuture #2
[08:08:03.605] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:03.605] | nx: 6
[08:08:03.605] | relay: TRUE
[08:08:03.605] | stdout: TRUE
[08:08:03.605] | signal: TRUE
[08:08:03.605] | resignal: FALSE
[08:08:03.606] | force: TRUE
[08:08:03.606] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.606] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.606] | until=2
[08:08:03.606] | relaying element #2
[08:08:03.606] | value() for MultisessionFuture (<unnamed-57>) ...
[08:08:03.606] | : result() for ClusterFuture ...
[08:08:03.606] | : . result already collected: FutureResult
[08:08:03.606] | : result() for ClusterFuture ... done
[08:08:03.606] | : result() for ClusterFuture ...
[08:08:03.607] | : . result already collected: FutureResult
[08:08:03.607] | : result() for ClusterFuture ... done
[08:08:03.607] | : signalConditions() ...
[08:08:03.607] | : . include = ‘immediateCondition’
[08:08:03.607] | : . exclude = 
[08:08:03.607] | : . resignal = FALSE
[08:08:03.607] | : . Number of conditions: 0
[08:08:03.607] | : .  int 0
[08:08:03.608] | : signalConditions() ... done
[08:08:03.608] | : relay stdout ...
[08:08:03.608] | : relay stdout ... done
[08:08:03.608] | : check for misuse ...
[08:08:03.608] | : check for misuse ... done
[08:08:03.608] | value() for MultisessionFuture (<unnamed-57>) ... done
[08:08:03.608] | result() for ClusterFuture ...
[08:08:03.608] | : result already collected: FutureResult
[08:08:03.609] | result() for ClusterFuture ... done
[08:08:03.609] | signalConditions() ...
[08:08:03.609] | : include = ‘immediateCondition’
[08:08:03.609] | : exclude = 
[08:08:03.609] | : resignal = FALSE
[08:08:03.609] | : Number of conditions: 0
[08:08:03.609] | :  int 0
[08:08:03.610] | signalConditions() ... done
[08:08:03.610] | result() for ClusterFuture ...
[08:08:03.610] | : result already collected: FutureResult
[08:08:03.610] | result() for ClusterFuture ... done
[08:08:03.610] | signalConditions() ...
[08:08:03.612] | : include = ‘condition’
[08:08:03.612] | : exclude = ‘error’, ‘immediateCondition’
[08:08:03.612] | : resignal = TRUE
[08:08:03.612] | : Number of conditions: 0
[08:08:03.612] | :  int 0
[08:08:03.613] | signalConditions() ... done
[08:08:03.613] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.613] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.613] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:03.613] value(<MultisessionFuture>, ...) ...
[08:08:03.613] value(<MultisessionFuture>, ...) ... done
[08:08:03.613] value() for MultisessionFuture (<unnamed-57>) ...
[08:08:03.614] | result() for ClusterFuture ...
[08:08:03.614] | : result already collected: FutureResult
[08:08:03.614] | result() for ClusterFuture ... done
[08:08:03.614] | result() for ClusterFuture ...
[08:08:03.614] | : result already collected: FutureResult
[08:08:03.614] | result() for ClusterFuture ... done
[08:08:03.614] | signalConditions() ...
[08:08:03.614] | : include = ‘immediateCondition’
[08:08:03.614] | : exclude = 
[08:08:03.614] | : resignal = FALSE
[08:08:03.615] | : Number of conditions: 0
[08:08:03.615] | :  int 0
[08:08:03.615] | signalConditions() ... done
[08:08:03.615] | check for misuse ...
[08:08:03.615] | check for misuse ... done
[08:08:03.615] value() for MultisessionFuture (<unnamed-57>) ... done
[08:08:03.615] value: <numeric>
[08:08:03.616] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:03.616] | nx: 6
[08:08:03.616] | relay: TRUE
[08:08:03.616] | stdout: TRUE
[08:08:03.616] | signal: TRUE
[08:08:03.616] | resignal: FALSE
[08:08:03.616] | force: TRUE
[08:08:03.616] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.616] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.616] | until=3
[08:08:03.616] | relaying element #3
[08:08:03.616] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.617] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.617] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:03.617] resolve() for MultisessionFuture ...
[08:08:03.617] resolve() for MultisessionFuture ... done
[08:08:03.617] length: 4 (resolved future 2)

[08:08:03.617] checking value #3:
[08:08:03.617] 'obj' is MultisessionFuture
[08:08:03.617] resolved() for MultisessionFuture (<unnamed-58>) ...
[08:08:03.618] | Cluster node socket connection: index=5, id=985
[08:08:03.618] | assertValidConnection() ...
[08:08:03.618] | : cluster node index: 2
[08:08:03.618] | assertValidConnection() ... done
[08:08:03.618] | receiveMessageFromWorker() for ClusterFuture ...
[08:08:03.618] | : cluster node index: 2
[08:08:03.618] | : [1] TRUE
[08:08:03.619] | : received data:
[08:08:03.619] | : List of 5
[08:08:03.619] | :  $ type   : chr "VALUE"
[08:08:03.619] | :  $ value  :List of 16
[08:08:03.619] | :   ..$ value              : NULL
[08:08:03.619] | :   ..$ visible            : logi TRUE
[08:08:03.619] | :   ..$ stdout             : chr ""
[08:08:03.619] | :   ..$ conditions         : list()
[08:08:03.619] | :   ..$ rng                : logi FALSE
[08:08:03.619] | :   ..$ seed               : NULL
[08:08:03.619] | :   ..$ misuseGlobalEnv    : NULL
[08:08:03.619] | :   ..$ misuseConnections  :List of 3
[08:08:03.619] | :   .. ..$ added   : NULL
[08:08:03.619] | :   .. ..$ removed : NULL
[08:08:03.619] | :   .. ..$ replaced: NULL
[08:08:03.619] | :   ..$ misuseDevices      : NULL
[08:08:03.619] | :   ..$ misuseDefaultDevice: list()
[08:08:03.619] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:03"
[08:08:03.619] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:03"
[08:08:03.619] | :   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "58"
[08:08:03.619] | :   ..$ session_uuid       : chr "93d625500df762db48dab82b178af5e1"
[08:08:03.619] | :   .. ..- attr(*, "source")=List of 5
[08:08:03.619] | :   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:03.619] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:03.619] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:03.619] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:03.619] | :   .. .. ..$ pid   : int 68969
[08:08:03.619] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:03.619] | :   .. .. ..$ random: int 2147483647
[08:08:03.619] | :   ..$ r_info             :List of 4
[08:08:03.619] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:03.619] | :   .. .. ..$ : int [1:3] 4 5 1
[08:08:03.619] | :   .. ..$ os           : chr "unix"
[08:08:03.619] | :   .. ..$ os_name      : chr "Linux"
[08:08:03.619] | :   .. ..$ captures_utf8: logi TRUE
[08:08:03.619] | :   ..$ version            : chr "1.8"
[08:08:03.619] | :   ..- attr(*, "class")= chr "FutureResult"
[08:08:03.619] | :  $ success: logi TRUE
[08:08:03.619] | :  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:03.619] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:03.619] | :  $ tag    : NULL
[08:08:03.629] | : Received FutureResult
[08:08:03.629] | : FutureResult:
[08:08:03.629] | : value: ‘NULL’
[08:08:03.629] | : visible: TRUE
[08:08:03.629] | : stdout: character
[08:08:03.629] | : conditions: [n = 0] 
[08:08:03.629] | : RNG used: FALSE
[08:08:03.629] | : duration: 0.002478361 secs (started 2025-06-17 08:08:03.607893)
[08:08:03.629] | : version: 1.8
[08:08:03.630] | : FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'remove', earlySignal = 0) ...
[08:08:03.630] | : . Removed future from position #1
[08:08:03.630] | : . Number of registered futures: 0
[08:08:03.630] | : FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'remove', earlySignal = 0) ... done
[08:08:03.630] | : Erased future from future backend
[08:08:03.630] | : result() for ClusterFuture ...
[08:08:03.630] | : . result already collected: FutureResult
[08:08:03.630] | : result() for ClusterFuture ... done
[08:08:03.631] | : signalConditions() ...
[08:08:03.631] | : . include = ‘immediateCondition’
[08:08:03.631] | : . exclude = 
[08:08:03.631] | : . resignal = FALSE
[08:08:03.631] | : . Number of conditions: 0
[08:08:03.631] | : .  int 0
[08:08:03.631] | : signalConditions() ... done
[08:08:03.631] | receiveMessageFromWorker() for ClusterFuture ... done
[08:08:03.632] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:03.632] resolved() for MultisessionFuture (<unnamed-58>) ... done
[08:08:03.632] assertFutureResult() ...
[08:08:03.632] | Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:03.632] | Future uuid: 58
[08:08:03.632] | identical; success
[08:08:03.632] assertFutureResult() ... done
[08:08:03.632] MultisessionFuture #3
[08:08:03.632] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:03.632] | nx: 6
[08:08:03.632] | relay: TRUE
[08:08:03.632] | stdout: TRUE
[08:08:03.633] | signal: TRUE
[08:08:03.633] | resignal: FALSE
[08:08:03.633] | force: TRUE
[08:08:03.633] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.633] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.633] | until=3
[08:08:03.633] | relaying element #3
[08:08:03.633] | value() for MultisessionFuture (<unnamed-58>) ...
[08:08:03.633] | : result() for ClusterFuture ...
[08:08:03.633] | : . result already collected: FutureResult
[08:08:03.633] | : result() for ClusterFuture ... done
[08:08:03.634] | : result() for ClusterFuture ...
[08:08:03.634] | : . result already collected: FutureResult
[08:08:03.634] | : result() for ClusterFuture ... done
[08:08:03.634] | : signalConditions() ...
[08:08:03.634] | : . include = ‘immediateCondition’
[08:08:03.634] | : . exclude = 
[08:08:03.634] | : . resignal = FALSE
[08:08:03.634] | : . Number of conditions: 0
[08:08:03.634] | : .  int 0
[08:08:03.635] | : signalConditions() ... done
[08:08:03.635] | : relay stdout ...
[08:08:03.635] | : relay stdout ... done
[08:08:03.635] | : check for misuse ...
[08:08:03.635] | : check for misuse ... done
[08:08:03.635] | value() for MultisessionFuture (<unnamed-58>) ... done
[08:08:03.635] | result() for ClusterFuture ...
[08:08:03.635] | : result already collected: FutureResult
[08:08:03.636] | result() for ClusterFuture ... done
[08:08:03.636] | signalConditions() ...
[08:08:03.636] | : include = ‘immediateCondition’
[08:08:03.636] | : exclude = 
[08:08:03.636] | : resignal = FALSE
[08:08:03.636] | : Number of conditions: 0
[08:08:03.636] | :  int 0
[08:08:03.636] | signalConditions() ... done
[08:08:03.637] | result() for ClusterFuture ...
[08:08:03.637] | : result already collected: FutureResult
[08:08:03.637] | result() for ClusterFuture ... done
[08:08:03.637] | signalConditions() ...
[08:08:03.637] | : include = ‘condition’
[08:08:03.637] | : exclude = ‘error’, ‘immediateCondition’
[08:08:03.637] | : resignal = TRUE
[08:08:03.637] | : Number of conditions: 0
[08:08:03.637] | :  int 0
[08:08:03.638] | signalConditions() ... done
[08:08:03.638] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.638] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.638] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:03.638] value(<MultisessionFuture>, ...) ...
[08:08:03.638] value(<MultisessionFuture>, ...) ... done
[08:08:03.638] value() for MultisessionFuture (<unnamed-58>) ...
[08:08:03.638] | result() for ClusterFuture ...
[08:08:03.638] | : result already collected: FutureResult
[08:08:03.639] | result() for ClusterFuture ... done
[08:08:03.639] | result() for ClusterFuture ...
[08:08:03.639] | : result already collected: FutureResult
[08:08:03.639] | result() for ClusterFuture ... done
[08:08:03.639] | signalConditions() ...
[08:08:03.639] | : include = ‘immediateCondition’
[08:08:03.639] | : exclude = 
[08:08:03.639] | : resignal = FALSE
[08:08:03.639] | : Number of conditions: 0
[08:08:03.639] | :  int 0
[08:08:03.640] | signalConditions() ... done
[08:08:03.640] | check for misuse ...
[08:08:03.640] | check for misuse ... done
[08:08:03.640] value() for MultisessionFuture (<unnamed-58>) ... done
[08:08:03.640] value: <NULL>
[08:08:03.640] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:03.640] | nx: 6
[08:08:03.640] | relay: TRUE
[08:08:03.641] | stdout: TRUE
[08:08:03.641] | signal: TRUE
[08:08:03.641] | resignal: FALSE
[08:08:03.641] | force: TRUE
[08:08:03.641] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.641] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.641] | until=4
[08:08:03.641] | relaying element #4
[08:08:03.641] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.641] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.641] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:03.642] resolve() for MultisessionFuture ...
[08:08:03.642] resolve() for MultisessionFuture ... done
[08:08:03.642] length: 3 (resolved future 3)

[08:08:03.642] checking value #4:
[08:08:03.642] 'obj' is NULL
[08:08:03.642] signalConditionsASAP(NULL, pos=4) ...
[08:08:03.642] | nx: 6
[08:08:03.642] | relay: TRUE
[08:08:03.642] | stdout: TRUE
[08:08:03.642] | signal: TRUE
[08:08:03.643] | resignal: FALSE
[08:08:03.643] | force: TRUE
[08:08:03.643] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.643] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.643] | until=5
[08:08:03.643] | relaying element #5
[08:08:03.643] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:03.643] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.643] signalConditionsASAP(NULL, pos=4) ... done
[08:08:03.643] signalConditionsASAP(NULL, pos=4) ...
[08:08:03.643] | nx: 6
[08:08:03.644] | relay: TRUE
[08:08:03.644] | stdout: TRUE
[08:08:03.644] | signal: TRUE
[08:08:03.644] | resignal: FALSE
[08:08:03.644] | force: TRUE
[08:08:03.644] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:03.644] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.644] | until=5
[08:08:03.644] | relaying element #5
[08:08:03.644] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:03.644] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.644] signalConditionsASAP(NULL, pos=4) ... done
[08:08:03.645] length: 2 (resolved future 4)

[08:08:03.645] checking value #5:
[08:08:03.645] 'obj' is NULL
[08:08:03.645] signalConditionsASAP(NULL, pos=5) ...
[08:08:03.645] | nx: 6
[08:08:03.645] | relay: TRUE
[08:08:03.645] | stdout: TRUE
[08:08:03.645] | signal: TRUE
[08:08:03.645] | resignal: FALSE
[08:08:03.645] | force: TRUE
[08:08:03.646] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:03.646] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.646] | until=6
[08:08:03.646] | relaying element #6
[08:08:03.646] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:03.646] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.646] signalConditionsASAP(NULL, pos=5) ... done
[08:08:03.646] signalConditionsASAP(NULL, pos=5) ...
[08:08:03.646] | nx: 6
[08:08:03.646] | relay: TRUE
[08:08:03.646] | stdout: TRUE
[08:08:03.646] | signal: TRUE
[08:08:03.647] | resignal: FALSE
[08:08:03.647] | force: TRUE
[08:08:03.647] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:03.647] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.647] | until=6
[08:08:03.647] | relaying element #6
[08:08:03.647] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:03.647] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.647] signalConditionsASAP(NULL, pos=5) ... done
[08:08:03.647] length: 1 (resolved future 5)

[08:08:03.648] checking value #6:
[08:08:03.648] 'obj' is atomic
[08:08:03.648] signalConditionsASAP(numeric, pos=6) ...
[08:08:03.648] | nx: 6
[08:08:03.648] | relay: TRUE
[08:08:03.648] | stdout: TRUE
[08:08:03.648] | signal: TRUE
[08:08:03.648] | resignal: FALSE
[08:08:03.648] | force: TRUE
[08:08:03.648] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:03.648] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.649] | until=6
[08:08:03.649] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:03.649] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.649] signalConditionsASAP(numeric, pos=6) ... done
[08:08:03.649] length: 0 (resolved future 6)

[08:08:03.649] Relaying remaining futures ...
[08:08:03.649] | signalConditionsASAP(NULL, pos=0) ...
[08:08:03.649] | : nx: 6
[08:08:03.649] | : relay: TRUE
[08:08:03.649] | : stdout: TRUE
[08:08:03.650] | : signal: TRUE
[08:08:03.650] | : resignal: FALSE
[08:08:03.650] | : force: TRUE
[08:08:03.650] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:03.650] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:03.650] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:03.650] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.650] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:03.650] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:3] 2 3 1
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
Dimensions: c(2, 1, 3, 1)
[08:08:03.654] future(..., label = NULL) ...
[08:08:03.654] | lazy: FALSE
[08:08:03.654] | stdout: TRUE
[08:08:03.654] | conditions: [n=1] ‘condition’
[08:08:03.654] | gc: FALSE
[08:08:03.654] | earlySignal: FALSE
[08:08:03.654] | getGlobalsAndPackages() ...
[08:08:03.654] | : Searching for globals ...
[08:08:03.655] | : . globals found: [0] 
[08:08:03.656] | : Searching for globals ... done
[08:08:03.656] | : globals: [0] <none>
[08:08:03.656] | : packages: [0] <none>
[08:08:03.656] | getGlobalsAndPackages() ... done
[08:08:03.656] | run() for ‘Future’ (<unnamed-59>) ...
[08:08:03.656] | : state: ‘created’
[08:08:03.656] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:03.657] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:03.657] | : Using MultisessionFutureBackend ...
[08:08:03.657] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:08:03.657] | : . Launching futures ...
[08:08:03.657] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:03.657] | : . ' , Workers: [n=2]
[08:08:03.657] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:03.659] | : . ' , FutureRegistry: ‘workers-d9ae098e6e77722a626531d398ab6c43’
[08:08:03.659] | : . ' , requestWorker() ...
[08:08:03.659] | : . ' , ; requestNode() ...
[08:08:03.659] | : . ' , ; ` Number of workers: 2
[08:08:03.659] | : . ' , ; ` Polling for a free worker ...
[08:08:03.659] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:03.659] | : . ' , ; ` | : Listing all futures
[08:08:03.659] | : . ' , ; ` | : Number of registered futures: 0
[08:08:03.660] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:03.660] | : . ' , ; ` | Total time: 0
[08:08:03.660] | : . ' , ; ` Polling for a free worker ... done
[08:08:03.660] | : . ' , ; ` FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:03.660] | : . ' , ; ` | Listing all futures
[08:08:03.660] | : . ' , ; ` | Number of registered futures: 0
[08:08:03.660] | : . ' , ; ` FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:03.660] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:03.660] | : . ' , ; ` Index of first available worker: 1
[08:08:03.660] | : . ' , ; ` Validate that the worker is functional ...
[08:08:03.731] | : . ' , ; ` | Worker is functional
[08:08:03.731] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:03.731] | : . ' , ; ` | : Listing all futures
[08:08:03.731] | : . ' , ; ` | : Number of registered futures: 0
[08:08:03.732] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:03.732] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:03.732] | : . ' , ; requestNode() ... done
[08:08:03.732] | : . ' , ; cluster node index: 1
[08:08:03.732] | : . ' , requestWorker() ... done
[08:08:03.732] | : . ' , eraseGlobalEnvironment() ...
[08:08:03.733] | : . ' , eraseGlobalEnvironment() ... done
[08:08:03.733] | : . ' , launchFuture() ...
[08:08:03.733] | : . ' , ; cluster node index: 1
[08:08:03.733] | : . ' , ; getFutureData() ...
[08:08:03.733] | : . ' , ; ` getFutureCore() ...
[08:08:03.733] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:03.734] | : . ' , ; ` getFutureCore() ... done
[08:08:03.734] | : . ' , ; ` getFutureCapture() ...
[08:08:03.734] | : . ' , ; ` getFutureCapture() ... done
[08:08:03.734] | : . ' , ; ` getFutureContext() ...
[08:08:03.734] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:03.734] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:03.734] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:03.734] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:03.734] | : . ' , ; ` getFutureContext() ... done
[08:08:03.735] | : . ' , ; getFutureData() ... done
[08:08:03.735] | : . ' , ; FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'add', earlySignal = 0) ...
[08:08:03.735] | : . ' , ; ` Appended future to position #1
[08:08:03.735] | : . ' , ; ` Number of registered futures: 1
[08:08:03.735] | : . ' , ; FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'add', earlySignal = 0) ... done
[08:08:03.735] | : . ' , launchFuture() ... done
[08:08:03.735] | : . ' , MultisessionFuture started
[08:08:03.736] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:03.736] | : . Launching futures ... done
[08:08:03.736] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:03.736] | : Using MultisessionFutureBackend ... done
[08:08:03.736] | run() for ‘Future’ (<unnamed-59>) ... done
[08:08:03.736] future(..., label = NULL) ... done
[08:08:03.736] future(..., label = NULL) ...
[08:08:03.736] | lazy: FALSE
[08:08:03.736] | stdout: TRUE
[08:08:03.737] | conditions: [n=1] ‘condition’
[08:08:03.737] | gc: FALSE
[08:08:03.737] | earlySignal: FALSE
[08:08:03.737] | getGlobalsAndPackages() ...
[08:08:03.737] | : Searching for globals ...
[08:08:03.738] | : . globals found: [0] 
[08:08:03.738] | : Searching for globals ... done
[08:08:03.738] | : globals: [0] <none>
[08:08:03.739] | : packages: [0] <none>
[08:08:03.739] | getGlobalsAndPackages() ... done
[08:08:03.739] | run() for ‘Future’ (<unnamed-60>) ...
[08:08:03.739] | : state: ‘created’
[08:08:03.739] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:03.739] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:03.739] | : Using MultisessionFutureBackend ...
[08:08:03.739] | : . Number of futures since start: 9 (9 created, 9 launched, 8 finished)
[08:08:03.740] | : . Launching futures ...
[08:08:03.740] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:03.740] | : . ' , Workers: [n=2]
[08:08:03.740] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:03.742] | : . ' , FutureRegistry: ‘workers-d9ae098e6e77722a626531d398ab6c43’
[08:08:03.742] | : . ' , requestWorker() ...
[08:08:03.742] | : . ' , ; requestNode() ...
[08:08:03.742] | : . ' , ; ` Number of workers: 2
[08:08:03.742] | : . ' , ; ` Polling for a free worker ...
[08:08:03.742] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:03.742] | : . ' , ; ` | : Listing all futures
[08:08:03.742] | : . ' , ; ` | : Number of registered futures: 1
[08:08:03.742] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:03.749] | : . ' , ; ` | Total time: 0
[08:08:03.749] | : . ' , ; ` Polling for a free worker ... done
[08:08:03.749] | : . ' , ; ` FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:03.750] | : . ' , ; ` | Listing all futures
[08:08:03.750] | : . ' , ; ` | Number of registered futures: 1
[08:08:03.750] | : . ' , ; ` FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:03.750] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:03.750] | : . ' , ; ` Index of first available worker: 2
[08:08:03.750] | : . ' , ; ` Validate that the worker is functional ...
[08:08:03.820] | : . ' , ; ` | Worker is functional
[08:08:03.820] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ...
[08:08:03.820] | : . ' , ; ` | : Listing all futures
[08:08:03.820] | : . ' , ; ` | : Number of registered futures: 1
[08:08:03.820] | : . ' , ; ` | FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'list', earlySignal = 0) ... done
[08:08:03.821] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:03.821] | : . ' , ; requestNode() ... done
[08:08:03.821] | : . ' , ; cluster node index: 2
[08:08:03.821] | : . ' , requestWorker() ... done
[08:08:03.821] | : . ' , eraseGlobalEnvironment() ...
[08:08:03.821] | : . ' , eraseGlobalEnvironment() ... done
[08:08:03.822] | : . ' , launchFuture() ...
[08:08:03.822] | : . ' , ; cluster node index: 2
[08:08:03.822] | : . ' , ; getFutureData() ...
[08:08:03.822] | : . ' , ; ` getFutureCore() ...
[08:08:03.822] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:03.822] | : . ' , ; ` getFutureCore() ... done
[08:08:03.822] | : . ' , ; ` getFutureCapture() ...
[08:08:03.822] | : . ' , ; ` getFutureCapture() ... done
[08:08:03.822] | : . ' , ; ` getFutureContext() ...
[08:08:03.823] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:03.823] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:03.823] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:03.823] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:03.823] | : . ' , ; ` getFutureContext() ... done
[08:08:03.823] | : . ' , ; getFutureData() ... done
[08:08:03.823] | : . ' , ; FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'add', earlySignal = 0) ...
[08:08:03.824] | : . ' , ; ` Appended future to position #2
[08:08:03.824] | : . ' , ; ` Number of registered futures: 2
[08:08:03.824] | : . ' , ; FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'add', earlySignal = 0) ... done
[08:08:03.824] | : . ' , launchFuture() ... done
[08:08:03.824] | : . ' , MultisessionFuture started
[08:08:03.824] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:03.824] | : . Launching futures ... done
[08:08:03.824] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:03.824] | : Using MultisessionFutureBackend ... done
[08:08:03.825] | run() for ‘Future’ (<unnamed-60>) ... done
[08:08:03.825] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675b3a3900> 
 $ c:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x5567589e4a78> 
 $  : NULL
 $  : NULL
 $  : num 6
List of 6
 $ a: num 1
 $ b:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x55675b3a3900> 
 $ c:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x5567589e4a78> 
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:4] 2 1 3 1
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
[08:08:03.830] resolved() for array ...
[08:08:03.830] | Number of elements: 6
[08:08:03.831] | Number of futures: 6
[08:08:03.831] | resolved() for MultisessionFuture (<unnamed-59>) ...
[08:08:03.831] | : Cluster node socket connection: index=4, id=984
[08:08:03.831] | : assertValidConnection() ...
[08:08:03.831] | : . cluster node index: 1
[08:08:03.832] | : assertValidConnection() ... done
[08:08:03.832] | : receiveMessageFromWorker() for ClusterFuture ...
[08:08:03.832] | : . cluster node index: 1
[08:08:03.832] | : . [1] TRUE
[08:08:03.832] | : . received data:
[08:08:03.832] | : . List of 5
[08:08:03.832] | : .  $ type   : chr "VALUE"
[08:08:03.832] | : .  $ value  :List of 16
[08:08:03.832] | : .   ..$ value              : num 2
[08:08:03.832] | : .   ..$ visible            : logi TRUE
[08:08:03.832] | : .   ..$ stdout             : chr ""
[08:08:03.832] | : .   ..$ conditions         : list()
[08:08:03.832] | : .   ..$ rng                : logi FALSE
[08:08:03.832] | : .   ..$ seed               : NULL
[08:08:03.832] | : .   ..$ misuseGlobalEnv    : NULL
[08:08:03.832] | : .   ..$ misuseConnections  :List of 3
[08:08:03.832] | : .   .. ..$ added   : NULL
[08:08:03.832] | : .   .. ..$ removed : NULL
[08:08:03.832] | : .   .. ..$ replaced: NULL
[08:08:03.832] | : .   ..$ misuseDevices      : NULL
[08:08:03.832] | : .   ..$ misuseDefaultDevice: list()
[08:08:03.832] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:03"
[08:08:03.832] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:03"
[08:08:03.832] | : .   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "59"
[08:08:03.832] | : .   ..$ session_uuid       : chr "fead307841043f6d8e4547187745dcf7"
[08:08:03.832] | : .   .. ..- attr(*, "source")=List of 5
[08:08:03.832] | : .   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:03.832] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:03.832] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:03.832] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:03.832] | : .   .. .. ..$ pid   : int 68968
[08:08:03.832] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:03.832] | : .   .. .. ..$ random: int 2147483647
[08:08:03.832] | : .   ..$ r_info             :List of 4
[08:08:03.832] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:03.832] | : .   .. .. ..$ : int [1:3] 4 5 1
[08:08:03.832] | : .   .. ..$ os           : chr "unix"
[08:08:03.832] | : .   .. ..$ os_name      : chr "Linux"
[08:08:03.832] | : .   .. ..$ captures_utf8: logi TRUE
[08:08:03.832] | : .   ..$ version            : chr "1.8"
[08:08:03.832] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:08:03.832] | : .  $ success: logi TRUE
[08:08:03.832] | : .  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:03.832] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:03.832] | : .  $ tag    : NULL
[08:08:03.843] | : . Received FutureResult
[08:08:03.843] | : . FutureResult:
[08:08:03.843] | : . value: ‘numeric’
[08:08:03.843] | : . visible: TRUE
[08:08:03.843] | : . stdout: character
[08:08:03.843] | : . conditions: [n = 0] 
[08:08:03.843] | : . RNG used: FALSE
[08:08:03.843] | : . duration: 0.002632856 secs (started 2025-06-17 08:08:03.7759)
[08:08:03.843] | : . version: 1.8
[08:08:03.844] | : . FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'remove', earlySignal = 0) ...
[08:08:03.844] | : . ' Removed future from position #1
[08:08:03.844] | : . ' Number of registered futures: 1
[08:08:03.844] | : . FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'remove', earlySignal = 0) ... done
[08:08:03.844] | : . Erased future from future backend
[08:08:03.845] | : . result() for ClusterFuture ...
[08:08:03.845] | : . ' result already collected: FutureResult
[08:08:03.845] | : . result() for ClusterFuture ... done
[08:08:03.845] | : . signalConditions() ...
[08:08:03.845] | : . ' include = ‘immediateCondition’
[08:08:03.845] | : . ' exclude = 
[08:08:03.845] | : . ' resignal = FALSE
[08:08:03.845] | : . ' Number of conditions: 0
[08:08:03.845] | : . '  int 0
[08:08:03.846] | : . signalConditions() ... done
[08:08:03.846] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:08:03.846] | : receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:03.846] | resolved() for MultisessionFuture (<unnamed-59>) ... done
[08:08:03.846] | assertFutureResult() ...
[08:08:03.846] | : Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:03.846] | : Future uuid: 59
[08:08:03.846] | : identical; success
[08:08:03.846] | assertFutureResult() ... done
[08:08:03.847] | resolved() for MultisessionFuture (<unnamed-60>) ...
[08:08:03.847] | : Cluster node socket connection: index=5, id=985
[08:08:03.847] | : assertValidConnection() ...
[08:08:03.847] | : . cluster node index: 2
[08:08:03.847] | : assertValidConnection() ... done
[08:08:03.858] | : socketSelect(list(<connection #5 (id=985)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:03.858] | resolved() for MultisessionFuture (<unnamed-60>) ... done
[08:08:03.858] resolved() for array ... done
 logi [1:2, 1, 1:3, 1] TRUE TRUE FALSE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "" ...
[08:08:03.860] value() for array ...
[08:08:03.860] | recursive: 0
[08:08:03.860] | reduce: FALSE
[08:08:03.860] | length: 6
[08:08:03.861] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:03.861] | Number of remaining objects: 6
[08:08:03.861] | checking value #1:
[08:08:03.861] | 'obj' is atomic
[08:08:03.861] | signalConditionsASAP(numeric, pos=1) ...
[08:08:03.861] | : nx: 6
[08:08:03.861] | : relay: TRUE
[08:08:03.861] | : stdout: TRUE
[08:08:03.861] | : signal: TRUE
[08:08:03.861] | : resignal: FALSE
[08:08:03.861] | : force: TRUE
[08:08:03.862] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.862] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.862] | : until=2
[08:08:03.862] | : relaying element #2
[08:08:03.862] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.862] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.862] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:03.862] | length: 5 (resolved future 1)
[08:08:03.862] value() for array ... done
[08:08:03.863] checking value #2:
[08:08:03.863] 'obj' is MultisessionFuture
[08:08:03.863] MultisessionFuture #2
[08:08:03.863] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:03.863] | nx: 6
[08:08:03.863] | relay: TRUE
[08:08:03.863] | stdout: TRUE
[08:08:03.863] | signal: TRUE
[08:08:03.863] | resignal: FALSE
[08:08:03.863] | force: TRUE
[08:08:03.863] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.864] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:03.864] | until=2
[08:08:03.864] | relaying element #2
[08:08:03.864] | value() for MultisessionFuture (<unnamed-59>) ...
[08:08:03.864] | : result() for ClusterFuture ...
[08:08:03.864] | : . result already collected: FutureResult
[08:08:03.864] | : result() for ClusterFuture ... done
[08:08:03.864] | : result() for ClusterFuture ...
[08:08:03.864] | : . result already collected: FutureResult
[08:08:03.864] | : result() for ClusterFuture ... done
[08:08:03.865] | : signalConditions() ...
[08:08:03.865] | : . include = ‘immediateCondition’
[08:08:03.865] | : . exclude = 
[08:08:03.865] | : . resignal = FALSE
[08:08:03.865] | : . Number of conditions: 0
[08:08:03.865] | : .  int 0
[08:08:03.866] | : signalConditions() ... done
[08:08:03.866] | : relay stdout ...
[08:08:03.866] | : relay stdout ... done
[08:08:03.866] | : check for misuse ...
[08:08:03.866] | : check for misuse ... done
[08:08:03.866] | value() for MultisessionFuture (<unnamed-59>) ... done
[08:08:03.866] | result() for ClusterFuture ...
[08:08:03.866] | : result already collected: FutureResult
[08:08:03.866] | result() for ClusterFuture ... done
[08:08:03.866] | signalConditions() ...
[08:08:03.867] | : include = ‘immediateCondition’
[08:08:03.867] | : exclude = 
[08:08:03.867] | : resignal = FALSE
[08:08:03.867] | : Number of conditions: 0
[08:08:03.867] | :  int 0
[08:08:03.867] | signalConditions() ... done
[08:08:03.867] | result() for ClusterFuture ...
[08:08:03.868] | : result already collected: FutureResult
[08:08:03.868] | result() for ClusterFuture ... done
[08:08:03.868] | signalConditions() ...
[08:08:03.868] | : include = ‘condition’
[08:08:03.868] | : exclude = ‘error’, ‘immediateCondition’
[08:08:03.868] | : resignal = TRUE
[08:08:03.868] | : Number of conditions: 0
[08:08:03.868] | :  int 0
[08:08:03.869] | signalConditions() ... done
[08:08:03.869] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.869] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.869] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:03.869] value(<MultisessionFuture>, ...) ...
[08:08:03.869] value(<MultisessionFuture>, ...) ... done
[08:08:03.869] value() for MultisessionFuture (<unnamed-59>) ...
[08:08:03.869] | result() for ClusterFuture ...
[08:08:03.869] | : result already collected: FutureResult
[08:08:03.870] | result() for ClusterFuture ... done
[08:08:03.870] | result() for ClusterFuture ...
[08:08:03.870] | : result already collected: FutureResult
[08:08:03.870] | result() for ClusterFuture ... done
[08:08:03.870] | signalConditions() ...
[08:08:03.870] | : include = ‘immediateCondition’
[08:08:03.870] | : exclude = 
[08:08:03.870] | : resignal = FALSE
[08:08:03.870] | : Number of conditions: 0
[08:08:03.870] | :  int 0
[08:08:03.871] | signalConditions() ... done
[08:08:03.871] | check for misuse ...
[08:08:03.871] | check for misuse ... done
[08:08:03.871] value() for MultisessionFuture (<unnamed-59>) ... done
[08:08:03.871] value: <numeric>
[08:08:03.871] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:03.871] | nx: 6
[08:08:03.871] | relay: TRUE
[08:08:03.872] | stdout: TRUE
[08:08:03.872] | signal: TRUE
[08:08:03.872] | resignal: FALSE
[08:08:03.872] | force: TRUE
[08:08:03.872] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.872] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.872] | until=3
[08:08:03.872] | relaying element #3
[08:08:03.872] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.872] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.872] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:03.873] resolve() for MultisessionFuture ...
[08:08:03.873] resolve() for MultisessionFuture ... done
[08:08:03.873] length: 4 (resolved future 2)

[08:08:03.873] checking value #3:
[08:08:03.873] 'obj' is MultisessionFuture
[08:08:03.873] resolved() for MultisessionFuture (<unnamed-60>) ...
[08:08:03.873] | Cluster node socket connection: index=5, id=985
[08:08:03.874] | assertValidConnection() ...
[08:08:03.874] | : cluster node index: 2
[08:08:03.874] | assertValidConnection() ... done
[08:08:03.874] | receiveMessageFromWorker() for ClusterFuture ...
[08:08:03.874] | : cluster node index: 2
[08:08:03.874] | : [1] TRUE
[08:08:03.875] | : received data:
[08:08:03.875] | : List of 5
[08:08:03.875] | :  $ type   : chr "VALUE"
[08:08:03.875] | :  $ value  :List of 16
[08:08:03.875] | :   ..$ value              : NULL
[08:08:03.875] | :   ..$ visible            : logi TRUE
[08:08:03.875] | :   ..$ stdout             : chr ""
[08:08:03.875] | :   ..$ conditions         : list()
[08:08:03.875] | :   ..$ rng                : logi FALSE
[08:08:03.875] | :   ..$ seed               : NULL
[08:08:03.875] | :   ..$ misuseGlobalEnv    : NULL
[08:08:03.875] | :   ..$ misuseConnections  :List of 3
[08:08:03.875] | :   .. ..$ added   : NULL
[08:08:03.875] | :   .. ..$ removed : NULL
[08:08:03.875] | :   .. ..$ replaced: NULL
[08:08:03.875] | :   ..$ misuseDevices      : NULL
[08:08:03.875] | :   ..$ misuseDefaultDevice: list()
[08:08:03.875] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:03"
[08:08:03.875] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:03"
[08:08:03.875] | :   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "60"
[08:08:03.875] | :   ..$ session_uuid       : chr "93d625500df762db48dab82b178af5e1"
[08:08:03.875] | :   .. ..- attr(*, "source")=List of 5
[08:08:03.875] | :   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:03.875] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:03.875] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:03.875] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:03.875] | :   .. .. ..$ pid   : int 68969
[08:08:03.875] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:03.875] | :   .. .. ..$ random: int 2147483647
[08:08:03.875] | :   ..$ r_info             :List of 4
[08:08:03.875] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:03.875] | :   .. .. ..$ : int [1:3] 4 5 1
[08:08:03.875] | :   .. ..$ os           : chr "unix"
[08:08:03.875] | :   .. ..$ os_name      : chr "Linux"
[08:08:03.875] | :   .. ..$ captures_utf8: logi TRUE
[08:08:03.875] | :   ..$ version            : chr "1.8"
[08:08:03.875] | :   ..- attr(*, "class")= chr "FutureResult"
[08:08:03.875] | :  $ success: logi TRUE
[08:08:03.875] | :  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:03.875] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:03.875] | :  $ tag    : NULL
[08:08:03.885] | : Received FutureResult
[08:08:03.886] | : FutureResult:
[08:08:03.886] | : value: ‘NULL’
[08:08:03.886] | : visible: TRUE
[08:08:03.886] | : stdout: character
[08:08:03.886] | : conditions: [n = 0] 
[08:08:03.886] | : RNG used: FALSE
[08:08:03.886] | : duration: 0.002648115 secs (started 2025-06-17 08:08:03.864804)
[08:08:03.886] | : version: 1.8
[08:08:03.886] | : FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'remove', earlySignal = 0) ...
[08:08:03.886] | : . Removed future from position #1
[08:08:03.886] | : . Number of registered futures: 0
[08:08:03.886] | : FutureRegistry('workers-d9ae098e6e77722a626531d398ab6c43', action = 'remove', earlySignal = 0) ... done
[08:08:03.887] | : Erased future from future backend
[08:08:03.887] | : result() for ClusterFuture ...
[08:08:03.887] | : . result already collected: FutureResult
[08:08:03.887] | : result() for ClusterFuture ... done
[08:08:03.887] | : signalConditions() ...
[08:08:03.887] | : . include = ‘immediateCondition’
[08:08:03.887] | : . exclude = 
[08:08:03.887] | : . resignal = FALSE
[08:08:03.887] | : . Number of conditions: 0
[08:08:03.887] | : .  int 0
[08:08:03.888] | : signalConditions() ... done
[08:08:03.888] | receiveMessageFromWorker() for ClusterFuture ... done
[08:08:03.888] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:03.888] resolved() for MultisessionFuture (<unnamed-60>) ... done
[08:08:03.888] assertFutureResult() ...
[08:08:03.888] | Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:03.888] | Future uuid: 60
[08:08:03.888] | identical; success
[08:08:03.889] assertFutureResult() ... done
[08:08:03.889] MultisessionFuture #3
[08:08:03.889] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:03.889] | nx: 6
[08:08:03.889] | relay: TRUE
[08:08:03.889] | stdout: TRUE
[08:08:03.889] | signal: TRUE
[08:08:03.889] | resignal: FALSE
[08:08:03.889] | force: TRUE
[08:08:03.889] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.889] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:03.890] | until=3
[08:08:03.890] | relaying element #3
[08:08:03.890] | value() for MultisessionFuture (<unnamed-60>) ...
[08:08:03.890] | : result() for ClusterFuture ...
[08:08:03.890] | : . result already collected: FutureResult
[08:08:03.890] | : result() for ClusterFuture ... done
[08:08:03.890] | : result() for ClusterFuture ...
[08:08:03.890] | : . result already collected: FutureResult
[08:08:03.890] | : result() for ClusterFuture ... done
[08:08:03.890] | : signalConditions() ...
[08:08:03.891] | : . include = ‘immediateCondition’
[08:08:03.891] | : . exclude = 
[08:08:03.891] | : . resignal = FALSE
[08:08:03.891] | : . Number of conditions: 0
[08:08:03.891] | : .  int 0
[08:08:03.893] | : signalConditions() ... done
[08:08:03.894] | : relay stdout ...
[08:08:03.894] | : relay stdout ... done
[08:08:03.894] | : check for misuse ...
[08:08:03.894] | : check for misuse ... done
[08:08:03.894] | value() for MultisessionFuture (<unnamed-60>) ... done
[08:08:03.894] | result() for ClusterFuture ...
[08:08:03.894] | : result already collected: FutureResult
[08:08:03.894] | result() for ClusterFuture ... done
[08:08:03.894] | signalConditions() ...
[08:08:03.895] | : include = ‘immediateCondition’
[08:08:03.895] | : exclude = 
[08:08:03.895] | : resignal = FALSE
[08:08:03.895] | : Number of conditions: 0
[08:08:03.895] | :  int 0
[08:08:03.895] | signalConditions() ... done
[08:08:03.895] | result() for ClusterFuture ...
[08:08:03.895] | : result already collected: FutureResult
[08:08:03.896] | result() for ClusterFuture ... done
[08:08:03.896] | signalConditions() ...
[08:08:03.896] | : include = ‘condition’
[08:08:03.896] | : exclude = ‘error’, ‘immediateCondition’
[08:08:03.896] | : resignal = TRUE
[08:08:03.896] | : Number of conditions: 0
[08:08:03.896] | :  int 0
[08:08:03.897] | signalConditions() ... done
[08:08:03.897] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.897] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.897] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:03.897] value(<MultisessionFuture>, ...) ...
[08:08:03.897] value(<MultisessionFuture>, ...) ... done
[08:08:03.897] value() for MultisessionFuture (<unnamed-60>) ...
[08:08:03.897] | result() for ClusterFuture ...
[08:08:03.897] | : result already collected: FutureResult
[08:08:03.897] | result() for ClusterFuture ... done
[08:08:03.898] | result() for ClusterFuture ...
[08:08:03.898] | : result already collected: FutureResult
[08:08:03.898] | result() for ClusterFuture ... done
[08:08:03.898] | signalConditions() ...
[08:08:03.898] | : include = ‘immediateCondition’
[08:08:03.898] | : exclude = 
[08:08:03.898] | : resignal = FALSE
[08:08:03.898] | : Number of conditions: 0
[08:08:03.898] | :  int 0
[08:08:03.899] | signalConditions() ... done
[08:08:03.899] | check for misuse ...
[08:08:03.899] | check for misuse ... done
[08:08:03.899] value() for MultisessionFuture (<unnamed-60>) ... done
[08:08:03.899] value: <NULL>
[08:08:03.899] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:03.899] | nx: 6
[08:08:03.899] | relay: TRUE
[08:08:03.899] | stdout: TRUE
[08:08:03.900] | signal: TRUE
[08:08:03.900] | resignal: FALSE
[08:08:03.900] | force: TRUE
[08:08:03.900] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.900] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.900] | until=4
[08:08:03.900] | relaying element #4
[08:08:03.900] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.900] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.900] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:03.900] resolve() for MultisessionFuture ...
[08:08:03.901] resolve() for MultisessionFuture ... done
[08:08:03.901] length: 3 (resolved future 3)

[08:08:03.901] checking value #4:
[08:08:03.901] 'obj' is NULL
[08:08:03.901] signalConditionsASAP(NULL, pos=4) ...
[08:08:03.901] | nx: 6
[08:08:03.901] | relay: TRUE
[08:08:03.901] | stdout: TRUE
[08:08:03.901] | signal: TRUE
[08:08:03.901] | resignal: FALSE
[08:08:03.902] | force: TRUE
[08:08:03.902] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.902] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.902] | until=5
[08:08:03.902] | relaying element #5
[08:08:03.902] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:03.902] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.902] signalConditionsASAP(NULL, pos=4) ... done
[08:08:03.902] signalConditionsASAP(NULL, pos=4) ...
[08:08:03.902] | nx: 6
[08:08:03.902] | relay: TRUE
[08:08:03.903] | stdout: TRUE
[08:08:03.903] | signal: TRUE
[08:08:03.903] | resignal: FALSE
[08:08:03.903] | force: TRUE
[08:08:03.903] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:03.903] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.903] | until=5
[08:08:03.903] | relaying element #5
[08:08:03.903] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:03.903] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.903] signalConditionsASAP(NULL, pos=4) ... done
[08:08:03.904] length: 2 (resolved future 4)

[08:08:03.904] checking value #5:
[08:08:03.904] 'obj' is NULL
[08:08:03.904] signalConditionsASAP(NULL, pos=5) ...
[08:08:03.904] | nx: 6
[08:08:03.904] | relay: TRUE
[08:08:03.904] | stdout: TRUE
[08:08:03.904] | signal: TRUE
[08:08:03.904] | resignal: FALSE
[08:08:03.904] | force: TRUE
[08:08:03.904] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:03.905] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.905] | until=6
[08:08:03.905] | relaying element #6
[08:08:03.905] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:03.905] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.905] signalConditionsASAP(NULL, pos=5) ... done
[08:08:03.905] signalConditionsASAP(NULL, pos=5) ...
[08:08:03.905] | nx: 6
[08:08:03.905] | relay: TRUE
[08:08:03.905] | stdout: TRUE
[08:08:03.905] | signal: TRUE
[08:08:03.906] | resignal: FALSE
[08:08:03.906] | force: TRUE
[08:08:03.906] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:03.906] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.906] | until=6
[08:08:03.906] | relaying element #6
[08:08:03.906] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:03.906] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.906] signalConditionsASAP(NULL, pos=5) ... done
[08:08:03.906] length: 1 (resolved future 5)

[08:08:03.907] checking value #6:
[08:08:03.907] 'obj' is atomic
[08:08:03.907] signalConditionsASAP(numeric, pos=6) ...
[08:08:03.907] | nx: 6
[08:08:03.907] | relay: TRUE
[08:08:03.907] | stdout: TRUE
[08:08:03.907] | signal: TRUE
[08:08:03.907] | resignal: FALSE
[08:08:03.907] | force: TRUE
[08:08:03.907] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:03.907] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.908] | until=6
[08:08:03.908] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:03.908] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.908] signalConditionsASAP(numeric, pos=6) ... done
[08:08:03.908] length: 0 (resolved future 6)

[08:08:03.908] Relaying remaining futures ...
[08:08:03.908] | signalConditionsASAP(NULL, pos=0) ...
[08:08:03.908] | : nx: 6
[08:08:03.908] | : relay: TRUE
[08:08:03.909] | : stdout: TRUE
[08:08:03.909] | : signal: TRUE
[08:08:03.909] | : resignal: FALSE
[08:08:03.909] | : force: TRUE
[08:08:03.909] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:03.909] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:03.909] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:03.909] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:03.909] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:03.909] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:4] 2 1 3 1
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
*** futures() - list ... DONE
Type of object: environment
Type of future: multicore
[08:08:03.913] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:03.914] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:03.914] | : all.equal() for FutureStrategyList ...
[08:08:03.914] | : . New stack:
[08:08:03.914] | : . List of 1
[08:08:03.914] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:03.914] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:03.914] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:03.914] | : .   ..- attr(*, "init")= logi TRUE
[08:08:03.914] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:03.914] | : .     ...)  
[08:08:03.914] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:03.914] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:03.914] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:03.914] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:03.916] | : . Old stack:
[08:08:03.916] | : . List of 1
[08:08:03.916] | : .  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:03.916] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:03.916] | : .   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:03.916] | : .   ..- attr(*, "init")= chr "done"
[08:08:03.916] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:03.916] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:03.916] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:03.916] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:03.916] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:08:03.916] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:03.916] | : .   ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c9d5240> 
[08:08:03.916] | : .   .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:03.916] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:03.916] | : .   .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:03.916] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:03.920] | : . Not identical
[08:08:03.920] | : . all.equal() for future ...
[08:08:03.920] | : . ' List of 2
[08:08:03.920] | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:03.920] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:03.920] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:03.920] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:03.920] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:03.920] | : . '     ...)  
[08:08:03.920] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:03.920] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:03.920] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:03.920] | : . '  $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:03.920] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:03.920] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:03.920] | : . '   ..- attr(*, "init")= chr "done"
[08:08:03.920] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:03.920] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:03.920] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:03.920] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:03.920] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:08:03.920] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:03.920] | : . '   ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c9d5240> 
[08:08:03.920] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:03.920] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:03.920] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:03.925] | : . ' Formals differ
[08:08:03.925] | : . all.equal() for future ... done
[08:08:03.926] | : . Future strategies differ at level 1
[08:08:03.926] | : all.equal() for FutureStrategyList ... done
[08:08:03.926] | : plan(): Setting new future backend stack:
[08:08:03.926] | : List of future strategies:
[08:08:03.926] | : 1. multicore:
[08:08:03.926] | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:03.926] | :    - tweaked: FALSE
[08:08:03.926] | :    - call: plan(strategy)
[08:08:03.926] | : List of 1
[08:08:03.926] | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:03.926] | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:03.926] | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:03.926] | :   ..- attr(*, "init")= logi TRUE
[08:08:03.926] | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:03.926] | :     ...)  
[08:08:03.926] | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:03.926] | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:03.926] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:03.926] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:03.929] | : plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:03.929] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:03.929] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:08:03.929] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:03.929] | : . stopWorkers() for MultisessionFutureBackend ...
[08:08:03.929] | : . ' Interrupt active futures ...
[08:08:03.930] | : . ' , Number of futures: 0
[08:08:03.930] | : . ' Interrupt active futures ... done
[08:08:03.930] | : . ' Clear future registry ...
[08:08:03.930] | : . ' Clear future registry ... done
[08:08:03.931] | : . ' Stop cluster workers ...
[08:08:03.931] | : . ' , Stopping existing cluster ...
[08:08:03.931] | : . ' , ; Cluster to shut down:
[08:08:03.931] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:03.943] | : . ' , ; Stopped cluster: ‘c(TRUE, TRUE)’
[08:08:03.982] | : . ' , Stopping existing cluster ... done
[08:08:03.982] | : . ' Stop cluster workers ... done
[08:08:03.982] | : . stopWorkers() for MultisessionFutureBackend ... done
[08:08:03.982] | : . Legacy shutdown of cluster workers ...
[08:08:03.982] | : . ' Stopping existing cluster ...
[08:08:03.983] | : . ' , No pre-existing cluster. Skipping
[08:08:03.983] | : . ' Stopping existing cluster ... done
[08:08:03.983] | : . Legacy shutdown of cluster workers ... done
[08:08:03.983] | : plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:03.983] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:03.983] | : . function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:03.983] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:03.983] | : .  - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:03.983] | : .  - attr(*, "init")= logi TRUE
[08:08:03.983] | : .  - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:03.983] | : .     ...)  
[08:08:03.983] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:03.983] | : .  - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:03.983] | : .  - attr(*, "call")= language plan(strategy)
[08:08:03.985] | : . init: TRUE
[08:08:03.985] | : . makeFutureBackend(<multicore>) ...
[08:08:03.985] | : . ' Backend function: <‘NULL’>
[08:08:03.986] | : . ' Evaluator tweak arguments: [n=0]
[08:08:03.986] | : . '  list()
[08:08:03.986] | : . ' Evaluator formal arguments: [n=3]
[08:08:03.986] | : . '  list()
[08:08:03.986] | : . ' Backend factory arguments: [n=3]
[08:08:03.986] | : . ' Dotted pair list of 3
[08:08:03.986] | : . '  $ workers    : language availableCores(constraints = "multicore")
[08:08:03.986] | : . '  $ gc         : logi FALSE
[08:08:03.986] | : . '  $ earlySignal: logi FALSE
[08:08:03.998] | : . ' Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:03.998] | : . makeFutureBackend(<multicore>) ... done
[08:08:03.998] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:03.998] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:03.998] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:03.999] | : plan(): nbrOfWorkers() = 2
[08:08:03.999] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:03.999] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Dimensions: NULL
[08:08:03.999] future(..., label = NULL) ...
[08:08:03.999] | lazy: FALSE
[08:08:03.999] | stdout: TRUE
[08:08:03.999] | conditions: [n=1] ‘condition’
[08:08:03.999] | gc: FALSE
[08:08:03.999] | earlySignal: FALSE
[08:08:04.000] | getGlobalsAndPackages() ...
[08:08:04.000] | : Searching for globals ...
[08:08:04.001] | : . globals found: [0] 
[08:08:04.001] | : Searching for globals ... done
[08:08:04.001] | : globals: [0] <none>
[08:08:04.001] | : packages: [0] <none>
[08:08:04.001] | getGlobalsAndPackages() ... done
[08:08:04.001] | run() for ‘Future’ (<unnamed-61>) ...
[08:08:04.002] | : state: ‘created’
[08:08:04.002] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.002] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.002] | : Using MulticoreFutureBackend ...
[08:08:04.002] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:04.002] | : . Launching futures ...
[08:08:04.002] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:04.002] | : . ' , getFutureData() ...
[08:08:04.002] | : . ' , ; getFutureCore() ...
[08:08:04.003] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:04.003] | : . ' , ; getFutureCore() ... done
[08:08:04.003] | : . ' , ; getFutureCapture() ...
[08:08:04.003] | : . ' , ; getFutureCapture() ... done
[08:08:04.003] | : . ' , ; getFutureContext() ...
[08:08:04.003] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.003] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:04.003] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.003] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:04.003] | : . ' , ; getFutureContext() ... done
[08:08:04.004] | : . ' , getFutureData() ... done
[08:08:04.004] | : . ' , requestCore(..., workers = 2) ...
[08:08:04.004] | : . ' , requestCore(..., workers = 2) ... done
[08:08:04.007] | : . ' , MulticoreFuture started
[08:08:04.007] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:04.007] | : . Launching futures ... done
[08:08:04.008] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:04.008] | : Using MulticoreFutureBackend ... done
[08:08:04.008] | run() for ‘Future’ (<unnamed-61>) ... done
[08:08:04.008] future(..., label = NULL) ... done
[08:08:04.008] future(..., label = NULL) ...
[08:08:04.009] | lazy: FALSE
[08:08:04.009] | stdout: TRUE
[08:08:04.009] | conditions: [n=1] ‘condition’
[08:08:04.009] | gc: FALSE
[08:08:04.009] | earlySignal: FALSE
[08:08:04.009] | getGlobalsAndPackages() ...
[08:08:04.010] | : Searching for globals ...
[08:08:04.011] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.011] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:04.012] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.012] | : . globals found: [0] 
[08:08:04.012] | : Searching for globals ... done
[08:08:04.012] | : globals: [0] <none>
[08:08:04.012] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.012] | : packages: [0] <none>
[08:08:04.012] | getGlobalsAndPackages() ... done
[08:08:04.012] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.013] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:04.013] | : . ' , ; ` | New stack:
[08:08:04.013] | run() for ‘Future’ (<unnamed-62>) ...
[08:08:04.013] | : state: ‘created’
[08:08:04.013] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.013] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.014] | : Using MulticoreFutureBackend ...
[08:08:04.014] | : . Number of futures since start: 1 (1 created, 1 launched, 0 finished)
[08:08:04.014] | : . Launching futures ...
[08:08:04.014] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:04.014] | : . ' , getFutureData() ...
[08:08:04.014] | : . ' , ; getFutureCore() ...
[08:08:04.015] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:04.015] | : . ' , ; getFutureCore() ... done
[08:08:04.015] | : . ' , ; getFutureCapture() ...
[08:08:04.015] | : . ' , ; getFutureCapture() ... done
[08:08:04.015] | : . ' , ; getFutureContext() ...
[08:08:04.015] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.016] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:04.016] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.016] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:04.016] | : . ' , ; getFutureContext() ... done
[08:08:04.016] | : . ' , getFutureData() ... done
[08:08:04.017] | : . ' , requestCore(..., workers = 2) ...
[08:08:04.017] | : . ' , requestCore(..., workers = 2) ... done
[08:08:04.013] | : . ' , ; ` | List of 1
[08:08:04.013] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.013] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.013] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:04.013] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.013] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.013] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.013] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.013] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.017] | : . ' , ; ` | Old stack:
[08:08:04.020] | : . ' , MulticoreFuture started
[08:08:04.021] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:04.021] | : . Launching futures ... done
[08:08:04.021] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:04.022] | : Using MulticoreFutureBackend ... done
[08:08:04.022] | run() for ‘Future’ (<unnamed-62>) ... done
[08:08:04.022] future(..., label = NULL) ... done
[08:08:04.017] | : . ' , ; ` | List of 1
[08:08:04.017] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.017] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.017] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.017] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.017] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.017] | : . ' , ; ` |     ...)  
[08:08:04.017] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.017] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.017] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.017] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.017] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.017] | : . ' , ; ` |     ...)  
[08:08:04.017] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.017] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.023] | : . ' , ; ` | Not identical
[08:08:04.023] | : . ' , ; ` | all.equal() for future ...
[08:08:04.023] future(..., label = NULL) ...
[08:08:04.023] | lazy: FALSE
[08:08:04.024] | stdout: TRUE
[08:08:04.024] | conditions: [n=1] ‘condition’
[08:08:04.024] | gc: FALSE
[08:08:04.024] | earlySignal: FALSE
[08:08:04.024] | getGlobalsAndPackages() ...
[08:08:04.025] | : Searching for globals ...
[08:08:04.025] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.025] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:04.025] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.026] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.026] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.027] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:04.027] | : . ' , ; ` | New stack:
[08:08:04.023] | : . ' , ; ` | : List of 2
[08:08:04.023] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.023] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.023] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:04.023] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.023] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.023] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.023] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.023] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.023] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.023] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.023] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.023] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.023] | : . ' , ; ` | :     ...)  
[08:08:04.023] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.023] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.023] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.023] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.023] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.023] | : . ' , ; ` | :     ...)  
[08:08:04.023] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.032] | : . ' , ; ` | : Formals differ
[08:08:04.032] | : . ' , ; ` | all.equal() for future ... done
[08:08:04.032] | : . globals found: [1] ‘{’
[08:08:04.033] | : . ' , ; ` | Future strategies differ at level 1
[08:08:04.033] | : Searching for globals ... done
[08:08:04.027] | : . ' , ; ` | List of 1
[08:08:04.027] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.027] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.027] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:04.027] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.027] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.027] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.027] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.027] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.033] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:04.033] | : . ' , ; ` | Old stack:
[08:08:04.033] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:04.033] | : Resolving globals: FALSE
[08:08:04.033] | : Search for packages associated with the globals ...
[08:08:04.034] | : . Packages associated with globals: [1] ‘base’
[08:08:04.033] | : . ' , ; ` List of future strategies:
[08:08:04.033] | : . ' , ; ` 1. sequential:
[08:08:04.033] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.033] | : . ' , ; `    - tweaked: FALSE
[08:08:04.033] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.034] | : . Packages: [1] ‘base’
[08:08:04.034] | : Search for packages associated with the globals ... done
[08:08:04.035] | : Packages after dropping 'base': [0] 
[08:08:04.035] | : globals: [0] 
[08:08:04.035] | : packages: [0] 
[08:08:04.035] | getGlobalsAndPackages() ... done
[08:08:04.036] | run() for ‘Future’ (<unnamed-63>) ...
[08:08:04.036] | : state: ‘created’
[08:08:04.036] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.037] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.037] | : Using MulticoreFutureBackend ...
[08:08:04.037] | : . Number of futures since start: 2 (2 created, 2 launched, 0 finished)
[08:08:04.037] | : . Launching futures ...
[08:08:04.038] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:04.038] | : . ' , getFutureData() ...
[08:08:04.038] | : . ' , ; getFutureCore() ...
[08:08:04.038] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:04.034] | : . ' , ; ` List of 1
[08:08:04.034] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.034] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.034] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:04.034] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.034] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.034] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.034] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.034] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.039] | : . ' , ; getFutureCore() ... done
[08:08:04.039] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.039] | : . ' , ; getFutureCapture() ...
[08:08:04.039] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:04.039] | : . ' , ; getFutureCapture() ... done
[08:08:04.039] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.039] | : . ' , ; getFutureContext() ...
[08:08:04.039] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:04.039] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.033] | : . ' , ; ` | List of 1
[08:08:04.033] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.033] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.033] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.033] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.033] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.033] | : . ' , ; ` |     ...)  
[08:08:04.033] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.033] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.033] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.033] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.033] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.033] | : . ' , ; ` |     ...)  
[08:08:04.033] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.033] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.040] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:04.040] | : . ' , ; ` | Not identical
[08:08:04.040] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.040] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:04.040] | : . ' , ; ` | all.equal() for future ...
[08:08:04.040] | : . ' , ; getFutureContext() ... done
[08:08:04.041] | : . ' , getFutureData() ... done
[08:08:04.041] | : . ' , requestCore(..., workers = 2) ...
[08:08:04.042] | : . ' , ; Poll #1 (0): usedCores() = 2, workers = 2
[08:08:04.039] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.039] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.039] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:04.039] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.039] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.039] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.039] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.042] | : . ' , ; ` | : init: TRUE
[08:08:04.043] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:04.043] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:04.043] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:04.043] | : . ' , ; ` | : .  list()
[08:08:04.043] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:04.043] | : . ' , ; ` | : .  list()
[08:08:04.044] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:04.044] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:04.044] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:04.044] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:04.045] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:04.046] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:04.046] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:04.046] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.046] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:04.046] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.046] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.040] | : . ' , ; ` | : List of 2
[08:08:04.040] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.040] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.040] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:04.040] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.040] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.040] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.040] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.040] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.040] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.040] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.040] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.040] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.040] | : . ' , ; ` | :     ...)  
[08:08:04.040] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.040] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.040] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.040] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.040] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.040] | : . ' , ; ` | :     ...)  
[08:08:04.040] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.049] | : . ' , ; ` | : Formals differ
[08:08:04.049] | : . ' , ; ` | all.equal() for future ... done
[08:08:04.049] | : . ' , ; ` | Future strategies differ at level 1
[08:08:04.049] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:04.049] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.050] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:04.050] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.050] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.050] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:04.050] | : . ' , ; ` | : New stack:
[08:08:04.050] | : . ' , ; ` List of future strategies:
[08:08:04.050] | : . ' , ; ` 1. sequential:
[08:08:04.050] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.050] | : . ' , ; `    - tweaked: FALSE
[08:08:04.050] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.050] | : . ' , ; ` List of 1
[08:08:04.050] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.050] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.050] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:04.050] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.050] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.050] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.050] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.050] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.054] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.054] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:04.054] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.055] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:04.050] | : . ' , ; ` | : List of 1
[08:08:04.050] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.050] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.050] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.050] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.050] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.050] | : . ' , ; ` | :     ...)  
[08:08:04.050] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.050] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.050] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.050] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.050] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.050] | : . ' , ; ` | :     ...)  
[08:08:04.050] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.050] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.055] | : . ' , ; ` | : Old stack:
[08:08:04.055] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.055] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.055] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:04.055] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.055] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.055] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.055] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.058] | : . ' , ; ` | : init: TRUE
[08:08:04.058] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:04.058] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:04.058] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:04.058] | : . ' , ; ` | : .  list()
[08:08:04.059] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:04.059] | : . ' , ; ` | : .  list()
[08:08:04.059] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:04.055] | : . ' , ; ` | : List of 1
[08:08:04.055] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.055] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.055] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.055] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.055] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.055] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.055] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.055] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c5a6180> 
[08:08:04.055] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.055] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.055] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.060] | : . ' , ; ` | : Not identical
[08:08:04.060] | : . ' , ; ` | : all.equal() for future ...
[08:08:04.059] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:04.059] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:04.059] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:04.061] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:04.061] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:04.061] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:04.061] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.062] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:04.062] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.062] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.062] | : . ' , ; readImmediateCondition() ...
[08:08:04.063] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.063] | : . ' , ; ` Number of RDS files: 0
[08:08:04.063] | : . ' , ; ` Returned conditions set:
[08:08:04.063] | : . ' , ; `  list()
[08:08:04.064] | : . ' , ; readImmediateCondition() ... done
[08:08:04.066] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.066] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.066] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.066] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:04.067] | : . ' , ; ` | : New stack:
[08:08:04.060] | : . ' , ; ` | : . List of 2
[08:08:04.060] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.060] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.060] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.060] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.060] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.060] | : . ' , ; ` | : .     ...)  
[08:08:04.060] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.060] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.060] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:04.060] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.060] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.060] | : . ' , ; ` | : .     ...)  
[08:08:04.060] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.060] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.060] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.060] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.060] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.060] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.060] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.060] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.060] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c5a6180> 
[08:08:04.060] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.060] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.069] | : . ' , ; ` | : . Formals differ
[08:08:04.069] | : . ' , ; ` | : all.equal() for future ... done
[08:08:04.069] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:04.069] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:04.070] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:04.070] | : . ' , ; ` | List of future strategies:
[08:08:04.070] | : . ' , ; ` | 1. multicore:
[08:08:04.070] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:04.070] | : . ' , ; ` |    - tweaked: FALSE
[08:08:04.070] | : . ' , ; ` |    - call: plan(strategy)
[08:08:04.067] | : . ' , ; ` | : List of 1
[08:08:04.067] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.067] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.067] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.067] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.067] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.067] | : . ' , ; ` | :     ...)  
[08:08:04.067] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.067] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.067] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.067] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.067] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.067] | : . ' , ; ` | :     ...)  
[08:08:04.067] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.067] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.072] | : . ' , ; ` | : Old stack:
[08:08:04.074] | : . ' , ; readImmediateCondition() ...
[08:08:04.075] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.075] | : . ' , ; ` Number of RDS files: 0
[08:08:04.070] | : . ' , ; ` | List of 1
[08:08:04.070] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.070] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.070] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.070] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.070] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.070] | : . ' , ; ` |     ...)  
[08:08:04.070] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.070] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.070] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.070] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.070] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.070] | : . ' , ; ` |     ...)  
[08:08:04.070] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.070] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.075] | : . ' , ; ` Returned conditions set:
[08:08:04.075] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.076] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:04.075] | : . ' , ; `  list()
[08:08:04.076] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.076] | : . ' , ; readImmediateCondition() ... done
[08:08:04.076] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.076] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:04.077] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.077] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.077] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.077] | : . ' , ; Poll #2 (0.04 secs): usedCores() = 2, workers = 2
[08:08:04.072] | : . ' , ; ` | : List of 1
[08:08:04.072] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.072] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.072] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.072] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.072] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.072] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.072] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.072] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b075a98> 
[08:08:04.072] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.072] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.072] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.078] | : . ' , ; ` | : Not identical
[08:08:04.078] | : . ' , ; ` | : all.equal() for future ...
[08:08:04.078] | : . ' , ; ` | : . List of 2
[08:08:04.078] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.078] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.078] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.078] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.078] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.078] | : . ' , ; ` | : .     ...)  
[08:08:04.078] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.078] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.078] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:04.078] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.078] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.078] | : . ' , ; ` | : .     ...)  
[08:08:04.078] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.078] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.078] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.078] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.078] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.078] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.078] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.078] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.078] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b075a98> 
[08:08:04.078] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.078] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.087] | : . ' , ; ` | : . Formals differ
[08:08:04.087] | : . ' , ; ` | : all.equal() for future ... done
[08:08:04.088] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:04.088] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:04.088] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:04.088] | : . ' , ; ` | List of future strategies:
[08:08:04.088] | : . ' , ; ` | 1. multicore:
[08:08:04.088] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:04.088] | : . ' , ; ` |    - tweaked: FALSE
[08:08:04.088] | : . ' , ; ` |    - call: plan(strategy)
[08:08:04.089] | : . ' , ; ` | List of 1
[08:08:04.089] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.089] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.089] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.089] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.089] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.089] | : . ' , ; ` |     ...)  
[08:08:04.089] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.089] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.089] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.089] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.089] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.089] | : . ' , ; ` |     ...)  
[08:08:04.089] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.089] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.100] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.100] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:04.100] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.100] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.101] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:04.101] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.101] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.101] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.128] | : . ' , ; readImmediateCondition() ...
[08:08:04.131] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.131] | : . ' , ; ` Number of RDS files: 0
[08:08:04.131] | : . ' , ; ` Returned conditions set:
[08:08:04.132] | : . ' , ; `  list()
[08:08:04.132] | : . ' , ; readImmediateCondition() ... done
[08:08:04.132] | : . ' , ; value() for MulticoreFuture (<unnamed-61>) ...
[08:08:04.133] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:04.133] | : . ' , ; ` | readImmediateCondition() ...
[08:08:04.134] | : . ' , ; ` | : Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.134] | : . ' , ; ` | : Number of RDS files: 0
[08:08:04.134] | : . ' , ; ` | : Returned conditions set:
[08:08:04.134] | : . ' , ; ` | :  list()
[08:08:04.135] | : . ' , ; ` | readImmediateCondition() ... done
[08:08:04.136] | : . ' , ; ` | result() for MulticoreFuture ...
[08:08:04.136] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:08:04.136] | : . ' , ; ` | signalConditions() ...
[08:08:04.136] | : . ' , ; ` | : include = ‘immediateCondition’
[08:08:04.137] | : . ' , ; ` | : exclude = 
[08:08:04.137] | : . ' , ; ` | : resignal = FALSE
[08:08:04.137] | : . ' , ; ` | : Number of conditions: 6
[08:08:04.137] | : . ' , ; ` | :  int 6
[08:08:04.138] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.138] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.139] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.139] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.139] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.139] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.139] | : . ' , ; ` | signalConditions() ... done
[08:08:04.140] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:04.140] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:04.140] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:04.140] | : . ' , ; ` signalConditions() ...
[08:08:04.141] | : . ' , ; ` | include = ‘immediateCondition’
[08:08:04.141] | : . ' , ; ` | exclude = 
[08:08:04.141] | : . ' , ; ` | resignal = FALSE
[08:08:04.141] | : . ' , ; ` | Number of conditions: 6
[08:08:04.141] | : . ' , ; ` |  int 6
[08:08:04.142] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.142] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.142] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.143] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.143] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.143] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.143] | : . ' , ; ` signalConditions() ... done
[08:08:04.143] | : . ' , ; ` check for misuse ...
[08:08:04.143] | : . ' , ; ` check for misuse ... done
[08:08:04.143] | : . ' , ; value() for MulticoreFuture (<unnamed-61>) ... done
[08:08:04.144] | : . ' , requestCore(..., workers = 2) ... done
[08:08:04.147] | : . ' , MulticoreFuture started
[08:08:04.147] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:04.148] | : . Launching futures ... done
[08:08:04.148] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:04.148] | : Using MulticoreFutureBackend ... done
[08:08:04.148] | run() for ‘Future’ (<unnamed-63>) ... done
[08:08:04.148] future(..., label = NULL) ... done
<environment: 0x55675caa1cf0> 
<environment: 0x55675bd56d08> 
[08:08:04.150] resolved() for environment ...
[08:08:04.150] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.151] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:04.151] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.151] | resolved() for list ...
[08:08:04.151] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.151] | : Number of elements: 4
[08:08:04.151] | : Number of futures: 4
[08:08:04.151] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.152] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:04.152] | : readImmediateCondition() ...
[08:08:04.152] | : . ' , ; ` | New stack:
[08:08:04.152] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.152] | : . Number of RDS files: 0
[08:08:04.152] | : . Returned conditions set:
[08:08:04.152] | : .  list()
[08:08:04.153] | : readImmediateCondition() ... done
[08:08:04.152] | : . ' , ; ` | List of 1
[08:08:04.152] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.152] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.152] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:04.152] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.152] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.152] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.152] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.152] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.156] | : . ' , ; ` | Old stack:
[08:08:04.156] | : . ' , ; ` | List of 1
[08:08:04.156] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.156] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.156] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.156] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.156] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.156] | : . ' , ; ` |     ...)  
[08:08:04.156] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.156] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.156] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.156] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.156] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.156] | : . ' , ; ` |     ...)  
[08:08:04.156] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.156] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.161] | : . ' , ; ` | Not identical
[08:08:04.161] | : . ' , ; ` | all.equal() for future ...
[08:08:04.163] | : readImmediateCondition() ...
[08:08:04.163] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.164] | : . Number of RDS files: 0
[08:08:04.164] | : . Returned conditions set:
[08:08:04.164] | : .  list()
[08:08:04.164] | : readImmediateCondition() ... done
[08:08:04.165] | resolved() for list ... done
[08:08:04.165] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE FALSE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:04.166] value() for MulticoreFuture (<unnamed-63>) ...
[08:08:04.166] | result() for MulticoreFuture ...
[08:08:04.161] | : . ' , ; ` | : List of 2
[08:08:04.161] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.161] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.161] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:04.161] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.161] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.161] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.161] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.161] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.161] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.161] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.161] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.161] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.161] | : . ' , ; ` | :     ...)  
[08:08:04.161] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.161] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.161] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.161] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.161] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.161] | : . ' , ; ` | :     ...)  
[08:08:04.161] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.169] | : . ' , ; ` | : Formals differ
[08:08:04.169] | : . ' , ; ` | all.equal() for future ... done
[08:08:04.169] | : . ' , ; ` | Future strategies differ at level 1
[08:08:04.169] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:04.169] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:04.169] | : . ' , ; ` List of future strategies:
[08:08:04.169] | : . ' , ; ` 1. sequential:
[08:08:04.169] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.169] | : . ' , ; `    - tweaked: FALSE
[08:08:04.169] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.170] | : . ' , ; ` List of 1
[08:08:04.170] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.170] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.170] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:04.170] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.170] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.170] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.170] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.170] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.174] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.174] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:04.174] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.174] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:04.174] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.174] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.174] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:04.174] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.174] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.174] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.174] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.177] | : . ' , ; ` | : init: TRUE
[08:08:04.177] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:04.177] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:04.177] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:04.178] | : . ' , ; ` | : .  list()
[08:08:04.178] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:04.178] | : . ' , ; ` | : .  list()
[08:08:04.178] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:04.179] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:04.179] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:04.179] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:04.180] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:04.180] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:04.180] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:04.181] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.181] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:04.181] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.181] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.184] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.185] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.185] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.185] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:04.185] | : . ' , ; ` | : New stack:
[08:08:04.185] | : . ' , ; ` | : List of 1
[08:08:04.185] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.185] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.185] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.185] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.185] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.185] | : . ' , ; ` | :     ...)  
[08:08:04.185] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.185] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.185] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.185] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.185] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.185] | : . ' , ; ` | :     ...)  
[08:08:04.185] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.185] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.190] | : . ' , ; ` | : Old stack:
[08:08:04.190] | : . ' , ; ` | : List of 1
[08:08:04.190] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.190] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.190] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.190] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.190] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.190] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.190] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.190] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bd3d088> 
[08:08:04.190] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.190] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.190] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.194] | : . ' , ; ` | : Not identical
[08:08:04.194] | : . ' , ; ` | : all.equal() for future ...
[08:08:04.195] | : . ' , ; ` | : . List of 2
[08:08:04.195] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.195] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.195] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.195] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.195] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.195] | : . ' , ; ` | : .     ...)  
[08:08:04.195] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.195] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.195] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:04.195] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.195] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.195] | : . ' , ; ` | : .     ...)  
[08:08:04.195] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.195] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.195] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.195] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.195] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.195] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.195] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.195] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.195] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bd3d088> 
[08:08:04.195] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.195] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.203] | : . ' , ; ` | : . Formals differ
[08:08:04.203] | : . ' , ; ` | : all.equal() for future ... done
[08:08:04.203] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:04.203] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:04.204] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:04.204] | : . ' , ; ` | List of future strategies:
[08:08:04.204] | : . ' , ; ` | 1. multicore:
[08:08:04.204] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:04.204] | : . ' , ; ` |    - tweaked: FALSE
[08:08:04.204] | : . ' , ; ` |    - call: plan(strategy)
[08:08:04.204] | : . ' , ; ` | List of 1
[08:08:04.204] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.204] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.204] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.204] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.204] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.204] | : . ' , ; ` |     ...)  
[08:08:04.204] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.204] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.204] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.204] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.204] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.204] | : . ' , ; ` |     ...)  
[08:08:04.204] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.204] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.209] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.209] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:04.209] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.209] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.209] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:04.210] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.210] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.210] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.210] | : readImmediateCondition() ...
[08:08:04.211] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.211] | : . Number of RDS files: 0
[08:08:04.211] | : . Returned conditions set:
[08:08:04.211] | : .  list()
[08:08:04.212] | : readImmediateCondition() ... done
[08:08:04.212] | : result() for MulticoreFuture ...
[08:08:04.212] | : result() for MulticoreFuture ... done
[08:08:04.213] | : signalConditions() ...
[08:08:04.213] | : . include = ‘immediateCondition’
[08:08:04.213] | : . exclude = 
[08:08:04.213] | : . resignal = FALSE
[08:08:04.213] | : . Number of conditions: 6
[08:08:04.213] | : .  int 6
[08:08:04.214] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.214] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.214] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.214] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.214] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.215] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.215] | : signalConditions() ... done
[08:08:04.215] | result() for MulticoreFuture ... done
[08:08:04.215] | result() for MulticoreFuture ...
[08:08:04.215] | result() for MulticoreFuture ... done
[08:08:04.215] | signalConditions() ...
[08:08:04.215] | : include = ‘immediateCondition’
[08:08:04.216] | : exclude = 
[08:08:04.216] | : resignal = FALSE
[08:08:04.216] | : Number of conditions: 6
[08:08:04.216] | :  int 6
[08:08:04.217] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.217] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.217] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.217] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.217] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.217] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.217] | signalConditions() ... done
[08:08:04.218] | relay stdout ...
[08:08:04.218] | relay stdout ... done
[08:08:04.218] | check for misuse ...
[08:08:04.218] | check for misuse ... done
[08:08:04.218] | relay conditions ...
[08:08:04.218] | : Future state: ‘finished’
[08:08:04.218] | : result() for MulticoreFuture ...
[08:08:04.219] | : result() for MulticoreFuture ... done
[08:08:04.219] | : signalConditions() ...
[08:08:04.219] | : . include = ‘condition’
[08:08:04.219] | : . exclude = ‘immediateCondition’
[08:08:04.219] | : . resignal = TRUE
[08:08:04.219] | : . Number of conditions: 6
[08:08:04.219] | : .  int 6
[08:08:04.220] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.220] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.148] | : . ' , attachPackages() ...
[08:08:04.220] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.220] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.148] | : . ' , ; packages: [n=1] ‘future’
[08:08:04.221] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.221] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.149] | : . ' , attachPackages() ... done
[08:08:04.221] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.221] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.149] | : . ' , attachPackages() ...
[08:08:04.221] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.221] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.149] | : . ' , ; packages: [n=0] 
[08:08:04.222] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.222] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.149] | : . ' , attachPackages() ... done
[08:08:04.222] | : signalConditions() ... done
[08:08:04.222] | relay conditions ... done
[08:08:04.222] value() for MulticoreFuture (<unnamed-63>) ... done
[08:08:04.223] value() for listenv ...
[08:08:04.223] | recursive: 0
[08:08:04.223] | reduce: FALSE
[08:08:04.224] | length: 4
[08:08:04.224] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:04.224] | Number of remaining objects: 4
[08:08:04.224] | checking value #1:
[08:08:04.224] | 'obj' is atomic
[08:08:04.225] | signalConditionsASAP(numeric, pos=1) ...
[08:08:04.225] | : nx: 4
[08:08:04.225] | : relay: TRUE
[08:08:04.225] | : stdout: TRUE
[08:08:04.225] | : signal: TRUE
[08:08:04.225] | : resignal: FALSE
[08:08:04.225] | : force: TRUE
[08:08:04.225] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:04.226] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:04.226] | : until=2
[08:08:04.226] | : relaying element #2
[08:08:04.226] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:04.226] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:04.226] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:04.227] | length: 3 (resolved future 1)
[08:08:04.227] value() for listenv ... done
[08:08:04.227] checking value #2:
[08:08:04.227] 'obj' is MulticoreFuture
[08:08:04.227] MulticoreFuture #2
[08:08:04.227] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:04.227] | nx: 4
[08:08:04.227] | relay: TRUE
[08:08:04.228] | stdout: TRUE
[08:08:04.228] | signal: TRUE
[08:08:04.228] | resignal: FALSE
[08:08:04.228] | force: TRUE
[08:08:04.228] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:04.228] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:04.228] | until=2
[08:08:04.228] | relaying element #2
[08:08:04.229] | value() for MulticoreFuture (<unnamed-61>) ...
[08:08:04.229] | : result() for MulticoreFuture ...
[08:08:04.229] | : result() for MulticoreFuture ... done
[08:08:04.229] | : result() for MulticoreFuture ...
[08:08:04.229] | : result() for MulticoreFuture ... done
[08:08:04.229] | : signalConditions() ...
[08:08:04.229] | : . include = ‘immediateCondition’
[08:08:04.230] | : . exclude = 
[08:08:04.230] | : . resignal = FALSE
[08:08:04.230] | : . Number of conditions: 6
[08:08:04.230] | : .  int 6
[08:08:04.230] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.231] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.231] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.231] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.231] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.231] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.231] | : signalConditions() ... done
[08:08:04.232] | : relay stdout ...
[08:08:04.232] | : relay stdout ... done
[08:08:04.232] | : check for misuse ...
[08:08:04.232] | : check for misuse ... done
[08:08:04.232] | value() for MulticoreFuture (<unnamed-61>) ... done
[08:08:04.232] | result() for MulticoreFuture ...
[08:08:04.232] | result() for MulticoreFuture ... done
[08:08:04.232] | signalConditions() ...
[08:08:04.233] | : include = ‘immediateCondition’
[08:08:04.233] | : exclude = 
[08:08:04.233] | : resignal = FALSE
[08:08:04.233] | : Number of conditions: 6
[08:08:04.233] | :  int 6
[08:08:04.234] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.234] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.234] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.234] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.234] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.234] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.235] | signalConditions() ... done
[08:08:04.235] | result() for MulticoreFuture ...
[08:08:04.235] | result() for MulticoreFuture ... done
[08:08:04.235] | signalConditions() ...
[08:08:04.235] | : include = ‘condition’
[08:08:04.235] | : exclude = ‘error’, ‘immediateCondition’
[08:08:04.235] | : resignal = TRUE
[08:08:04.235] | : Number of conditions: 6
[08:08:04.236] | :  int 6
[08:08:04.236] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.236] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.008] | : . ' , attachPackages() ...
[08:08:04.236] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.236] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.009] | : . ' , ; packages: [n=1] ‘future’
[08:08:04.237] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.237] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.009] | : . ' , attachPackages() ... done
[08:08:04.237] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.237] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.010] | : . ' , attachPackages() ...
[08:08:04.237] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.237] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.010] | : . ' , ; packages: [n=0] 
[08:08:04.237] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.238] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.010] | : . ' , attachPackages() ... done
[08:08:04.238] | signalConditions() ... done
[08:08:04.238] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:04.238] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:04.238] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:04.238] value(<MulticoreFuture>, ...) ...
[08:08:04.238] value(<MulticoreFuture>, ...) ... done
[08:08:04.238] value() for MulticoreFuture (<unnamed-61>) ...
[08:08:04.239] | result() for MulticoreFuture ...
[08:08:04.239] | result() for MulticoreFuture ... done
[08:08:04.239] | result() for MulticoreFuture ...
[08:08:04.239] | result() for MulticoreFuture ... done
[08:08:04.239] | signalConditions() ...
[08:08:04.239] | : include = ‘immediateCondition’
[08:08:04.239] | : exclude = 
[08:08:04.239] | : resignal = FALSE
[08:08:04.239] | : Number of conditions: 6
[08:08:04.240] | :  int 6
[08:08:04.240] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.240] | : already signaled, skipping
[08:08:04.240] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.240] | : already signaled, skipping
[08:08:04.240] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.241] | : already signaled, skipping
[08:08:04.241] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.241] | : already signaled, skipping
[08:08:04.241] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.241] | : already signaled, skipping
[08:08:04.241] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.241] | : already signaled, skipping
[08:08:04.241] | signalConditions() ... done
[08:08:04.241] | check for misuse ...
[08:08:04.242] | check for misuse ... done
[08:08:04.242] value() for MulticoreFuture (<unnamed-61>) ... done
[08:08:04.242] value: <numeric>
[08:08:04.242] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:04.242] | nx: 4
[08:08:04.242] | relay: TRUE
[08:08:04.242] | stdout: TRUE
[08:08:04.242] | signal: TRUE
[08:08:04.243] | resignal: FALSE
[08:08:04.243] | force: TRUE
[08:08:04.243] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:04.243] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:04.243] | until=3
[08:08:04.243] | relaying element #3
[08:08:04.243] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:04.243] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:04.243] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:04.244] resolve() for MulticoreFuture ...
[08:08:04.244] resolve() for MulticoreFuture ... done
[08:08:04.244] length: 2 (resolved future 2)

[08:08:04.244] checking value #3:
[08:08:04.244] 'obj' is MulticoreFuture
[08:08:04.244] readImmediateCondition() ...
[08:08:04.244] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.245] | Number of RDS files: 0
[08:08:04.245] | Returned conditions set:
[08:08:04.245] |  list()
[08:08:04.245] readImmediateCondition() ... done
[08:08:04.245] MulticoreFuture #3
[08:08:04.245] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:04.245] | nx: 4
[08:08:04.246] | relay: TRUE
[08:08:04.246] | stdout: TRUE
[08:08:04.246] | signal: TRUE
[08:08:04.246] | resignal: FALSE
[08:08:04.246] | force: TRUE
[08:08:04.246] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:04.246] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:04.246] | until=3
[08:08:04.246] | relaying element #3
[08:08:04.247] | value() for MulticoreFuture (<unnamed-62>) ...
[08:08:04.247] | : result() for MulticoreFuture ...
[08:08:04.247] | : . readImmediateCondition() ...
[08:08:04.247] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.248] | : . ' Number of RDS files: 0
[08:08:04.248] | : . ' Returned conditions set:
[08:08:04.248] | : . '  list()
[08:08:04.248] | : . readImmediateCondition() ... done
[08:08:04.248] | : . result() for MulticoreFuture ...
[08:08:04.249] | : . result() for MulticoreFuture ... done
[08:08:04.249] | : . signalConditions() ...
[08:08:04.249] | : . ' include = ‘immediateCondition’
[08:08:04.249] | : . ' exclude = 
[08:08:04.249] | : . ' resignal = FALSE
[08:08:04.249] | : . ' Number of conditions: 6
[08:08:04.249] | : . '  int 6
[08:08:04.250] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.250] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.250] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.250] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.250] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.250] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.251] | : . signalConditions() ... done
[08:08:04.251] | : result() for MulticoreFuture ... done
[08:08:04.251] | : result() for MulticoreFuture ...
[08:08:04.251] | : result() for MulticoreFuture ... done
[08:08:04.251] | : signalConditions() ...
[08:08:04.251] | : . include = ‘immediateCondition’
[08:08:04.251] | : . exclude = 
[08:08:04.251] | : . resignal = FALSE
[08:08:04.252] | : . Number of conditions: 6
[08:08:04.252] | : .  int 6
[08:08:04.252] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.252] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.252] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.253] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.253] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.253] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.253] | : signalConditions() ... done
[08:08:04.253] | : relay stdout ...
[08:08:04.253] | : relay stdout ... done
[08:08:04.253] | : check for misuse ...
[08:08:04.253] | : check for misuse ... done
[08:08:04.254] | value() for MulticoreFuture (<unnamed-62>) ... done
[08:08:04.254] | result() for MulticoreFuture ...
[08:08:04.254] | result() for MulticoreFuture ... done
[08:08:04.254] | signalConditions() ...
[08:08:04.254] | : include = ‘immediateCondition’
[08:08:04.254] | : exclude = 
[08:08:04.254] | : resignal = FALSE
[08:08:04.254] | : Number of conditions: 6
[08:08:04.254] | :  int 6
[08:08:04.255] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.255] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.255] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.255] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.255] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.255] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.256] | signalConditions() ... done
[08:08:04.256] | result() for MulticoreFuture ...
[08:08:04.256] | result() for MulticoreFuture ... done
[08:08:04.256] | signalConditions() ...
[08:08:04.256] | : include = ‘condition’
[08:08:04.256] | : exclude = ‘error’, ‘immediateCondition’
[08:08:04.256] | : resignal = TRUE
[08:08:04.256] | : Number of conditions: 6
[08:08:04.256] | :  int 6
[08:08:04.257] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.257] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.021] | : . ' , attachPackages() ...
[08:08:04.257] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.257] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.022] | : . ' , ; packages: [n=1] ‘future’
[08:08:04.258] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.258] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.022] | : . ' , attachPackages() ... done
[08:08:04.258] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.258] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.023] | : . ' , attachPackages() ...
[08:08:04.258] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.258] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.023] | : . ' , ; packages: [n=0] 
[08:08:04.258] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.259] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.023] | : . ' , attachPackages() ... done
[08:08:04.259] | signalConditions() ... done
[08:08:04.259] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:04.259] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.259] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:04.259] value(<MulticoreFuture>, ...) ...
[08:08:04.259] value(<MulticoreFuture>, ...) ... done
[08:08:04.259] value() for MulticoreFuture (<unnamed-62>) ...
[08:08:04.260] | result() for MulticoreFuture ...
[08:08:04.260] | result() for MulticoreFuture ... done
[08:08:04.260] | result() for MulticoreFuture ...
[08:08:04.260] | result() for MulticoreFuture ... done
[08:08:04.260] | signalConditions() ...
[08:08:04.260] | : include = ‘immediateCondition’
[08:08:04.260] | : exclude = 
[08:08:04.260] | : resignal = FALSE
[08:08:04.260] | : Number of conditions: 6
[08:08:04.261] | :  int 6
[08:08:04.261] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.261] | : already signaled, skipping
[08:08:04.261] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.261] | : already signaled, skipping
[08:08:04.261] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.262] | : already signaled, skipping
[08:08:04.262] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.262] | : already signaled, skipping
[08:08:04.262] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.262] | : already signaled, skipping
[08:08:04.262] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.262] | : already signaled, skipping
[08:08:04.262] | signalConditions() ... done
[08:08:04.263] | check for misuse ...
[08:08:04.263] | check for misuse ... done
[08:08:04.263] value() for MulticoreFuture (<unnamed-62>) ... done
[08:08:04.263] value: <NULL>
[08:08:04.263] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:04.263] | nx: 4
[08:08:04.263] | relay: TRUE
[08:08:04.264] | stdout: TRUE
[08:08:04.264] | signal: TRUE
[08:08:04.264] | resignal: FALSE
[08:08:04.264] | force: TRUE
[08:08:04.264] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:04.264] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.264] | until=4
[08:08:04.264] | relaying element #4
[08:08:04.264] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:04.265] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.265] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:04.265] resolve() for MulticoreFuture ...
[08:08:04.265] resolve() for MulticoreFuture ... done
[08:08:04.265] length: 1 (resolved future 3)

[08:08:04.265] checking value #4:
[08:08:04.265] 'obj' is atomic
[08:08:04.266] signalConditionsASAP(numeric, pos=4) ...
[08:08:04.266] | nx: 4
[08:08:04.266] | relay: TRUE
[08:08:04.266] | stdout: TRUE
[08:08:04.266] | signal: TRUE
[08:08:04.266] | resignal: FALSE
[08:08:04.266] | force: TRUE
[08:08:04.266] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:04.266] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.267] | until=4
[08:08:04.267] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:04.267] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.267] signalConditionsASAP(numeric, pos=4) ... done
[08:08:04.267] length: 0 (resolved future 4)

[08:08:04.267] Relaying remaining futures ...
[08:08:04.267] | signalConditionsASAP(NULL, pos=0) ...
[08:08:04.268] | : nx: 4
[08:08:04.268] | : relay: TRUE
[08:08:04.268] | : stdout: TRUE
[08:08:04.268] | : signal: TRUE
[08:08:04.268] | : resignal: FALSE
[08:08:04.268] | : force: TRUE
[08:08:04.268] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:04.268] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:04.269] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:04.269] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.269] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:04.269] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(1, 6)
[08:08:04.271] future(..., label = NULL) ...
[08:08:04.271] | lazy: FALSE
[08:08:04.271] | stdout: TRUE
[08:08:04.271] | conditions: [n=1] ‘condition’
[08:08:04.272] | gc: FALSE
[08:08:04.272] | earlySignal: FALSE
[08:08:04.272] | getGlobalsAndPackages() ...
[08:08:04.272] | : Searching for globals ...
[08:08:04.274] | : . globals found: [0] 
[08:08:04.274] | : Searching for globals ... done
[08:08:04.274] | : globals: [0] <none>
[08:08:04.274] | : packages: [0] <none>
[08:08:04.274] | getGlobalsAndPackages() ... done
[08:08:04.274] | run() for ‘Future’ (<unnamed-64>) ...
[08:08:04.275] | : state: ‘created’
[08:08:04.275] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.275] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.275] | : Using MulticoreFutureBackend ...
[08:08:04.275] | : . Number of futures since start: 3 (3 created, 3 launched, 4 finished)
[08:08:04.275] | : . Launching futures ...
[08:08:04.275] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:04.276] | : . ' , getFutureData() ...
[08:08:04.276] | : . ' , ; getFutureCore() ...
[08:08:04.276] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:04.276] | : . ' , ; getFutureCore() ... done
[08:08:04.276] | : . ' , ; getFutureCapture() ...
[08:08:04.276] | : . ' , ; getFutureCapture() ... done
[08:08:04.276] | : . ' , ; getFutureContext() ...
[08:08:04.277] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.277] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:04.277] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.277] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:04.277] | : . ' , ; getFutureContext() ... done
[08:08:04.277] | : . ' , getFutureData() ... done
[08:08:04.277] | : . ' , requestCore(..., workers = 2) ...
[08:08:04.278] | : . ' , requestCore(..., workers = 2) ... done
[08:08:04.280] | : . ' , MulticoreFuture started
[08:08:04.280] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:04.281] | : . Launching futures ... done
[08:08:04.281] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:04.281] | : Using MulticoreFutureBackend ... done
[08:08:04.281] | run() for ‘Future’ (<unnamed-64>) ... done
[08:08:04.282] future(..., label = NULL) ... done
[08:08:04.282] future(..., label = NULL) ...
[08:08:04.282] | lazy: FALSE
[08:08:04.282] | stdout: TRUE
[08:08:04.282] | conditions: [n=1] ‘condition’
[08:08:04.282] | gc: FALSE
[08:08:04.283] | earlySignal: FALSE
[08:08:04.283] | getGlobalsAndPackages() ...
[08:08:04.283] | : Searching for globals ...
[08:08:04.284] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.284] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:04.284] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.285] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.285] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.285] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:04.285] | : . ' , ; ` | New stack:
[08:08:04.286] | : . globals found: [0] 
[08:08:04.286] | : Searching for globals ... done
[08:08:04.286] | : globals: [0] <none>
[08:08:04.286] | : packages: [0] <none>
[08:08:04.287] | getGlobalsAndPackages() ... done
[08:08:04.287] | run() for ‘Future’ (<unnamed-65>) ...
[08:08:04.287] | : state: ‘created’
[08:08:04.287] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.288] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.288] | : Using MulticoreFutureBackend ...
[08:08:04.288] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:04.288] | : . Launching futures ...
[08:08:04.288] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:04.289] | : . ' , getFutureData() ...
[08:08:04.289] | : . ' , ; getFutureCore() ...
[08:08:04.289] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:04.289] | : . ' , ; getFutureCore() ... done
[08:08:04.285] | : . ' , ; ` | List of 1
[08:08:04.285] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.285] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.285] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:04.285] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.285] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.285] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.285] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.285] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.289] | : . ' , ; getFutureCapture() ...
[08:08:04.292] | : . ' , ; ` | Old stack:
[08:08:04.292] | : . ' , ; getFutureCapture() ... done
[08:08:04.292] | : . ' , ; getFutureContext() ...
[08:08:04.293] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.293] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:04.293] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.293] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:04.293] | : . ' , ; getFutureContext() ... done
[08:08:04.293] | : . ' , getFutureData() ... done
[08:08:04.294] | : . ' , requestCore(..., workers = 2) ...
[08:08:04.294] | : . ' , requestCore(..., workers = 2) ... done
[08:08:04.292] | : . ' , ; ` | List of 1
[08:08:04.292] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.292] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.292] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.292] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.292] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.292] | : . ' , ; ` |     ...)  
[08:08:04.292] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.292] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.292] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.292] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.292] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.292] | : . ' , ; ` |     ...)  
[08:08:04.292] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.292] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.297] | : . ' , ; ` | Not identical
[08:08:04.297] | : . ' , ; ` | all.equal() for future ...
[08:08:04.297] | : . ' , MulticoreFuture started
[08:08:04.297] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:04.298] | : . Launching futures ... done
[08:08:04.298] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:04.298] | : Using MulticoreFutureBackend ... done
[08:08:04.298] | run() for ‘Future’ (<unnamed-65>) ... done
[08:08:04.299] future(..., label = NULL) ... done
[08:08:04.300] future(..., label = NULL) ...
[08:08:04.300] | lazy: FALSE
[08:08:04.300] | stdout: TRUE
[08:08:04.301] | conditions: [n=1] ‘condition’
[08:08:04.301] | gc: FALSE
[08:08:04.301] | earlySignal: FALSE
[08:08:04.301] | getGlobalsAndPackages() ...
[08:08:04.301] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.301] | : Searching for globals ...
[08:08:04.302] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:04.302] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.302] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.303] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.303] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:04.303] | : . ' , ; ` | New stack:
[08:08:04.297] | : . ' , ; ` | : List of 2
[08:08:04.297] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.297] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.297] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:04.297] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.297] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.297] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.297] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.297] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.297] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.297] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.297] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.297] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.297] | : . ' , ; ` | :     ...)  
[08:08:04.297] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.297] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.297] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.297] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.297] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.297] | : . ' , ; ` | :     ...)  
[08:08:04.297] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.305] | : . ' , ; ` | : Formals differ
[08:08:04.305] | : . ' , ; ` | all.equal() for future ... done
[08:08:04.305] | : . ' , ; ` | Future strategies differ at level 1
[08:08:04.305] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:04.305] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:04.305] | : . ' , ; ` List of future strategies:
[08:08:04.305] | : . ' , ; ` 1. sequential:
[08:08:04.305] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.305] | : . ' , ; `    - tweaked: FALSE
[08:08:04.305] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.303] | : . ' , ; ` | List of 1
[08:08:04.303] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.303] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.303] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:04.303] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.303] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.303] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.303] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.303] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.309] | : . globals found: [1] ‘{’
[08:08:04.309] | : . ' , ; ` | Old stack:
[08:08:04.306] | : . ' , ; ` List of 1
[08:08:04.306] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.306] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.306] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:04.306] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.306] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.306] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.306] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.306] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.309] | : Searching for globals ... done
[08:08:04.309] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.310] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:04.310] | : Resolving globals: FALSE
[08:08:04.310] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.310] | : Search for packages associated with the globals ...
[08:08:04.310] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:04.310] | : . Packages associated with globals: [1] ‘base’
[08:08:04.311] | : . Packages: [1] ‘base’
[08:08:04.311] | : Search for packages associated with the globals ... done
[08:08:04.311] | : Packages after dropping 'base': [0] 
[08:08:04.311] | : globals: [0] 
[08:08:04.312] | : packages: [0] 
[08:08:04.312] | getGlobalsAndPackages() ... done
[08:08:04.313] | run() for ‘Future’ (<unnamed-66>) ...
[08:08:04.310] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.310] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.310] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:04.310] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.310] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.310] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.310] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.313] | : state: ‘created’
[08:08:04.313] | : . ' , ; ` | : init: TRUE
[08:08:04.313] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:04.313] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.313] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:04.313] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:04.313] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.313] | : Using MulticoreFutureBackend ...
[08:08:04.313] | : . ' , ; ` | : .  list()
[08:08:04.314] | : . Number of futures since start: 5 (5 created, 5 launched, 4 finished)
[08:08:04.314] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:04.314] | : . Launching futures ...
[08:08:04.314] | : . ' , ; ` | : .  list()
[08:08:04.314] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:04.314] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:04.314] | : . ' , getFutureData() ...
[08:08:04.315] | : . ' , ; getFutureCore() ...
[08:08:04.315] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:04.315] | : . ' , ; getFutureCore() ... done
[08:08:04.315] | : . ' , ; getFutureCapture() ...
[08:08:04.316] | : . ' , ; getFutureCapture() ... done
[08:08:04.314] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:04.314] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:04.314] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:04.316] | : . ' , ; getFutureContext() ...
[08:08:04.316] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:04.316] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.309] | : . ' , ; ` | List of 1
[08:08:04.309] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.309] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.309] | [08:08:04.316] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
: . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.309] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.309] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.309] | : . ' , ; ` |     ...)  
[08:08:04.309] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.309] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.309] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.309] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.309] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.309] | : . ' , ; ` |     ...)  
[08:08:04.309] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.309] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.316] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:04.316] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:04.316] | : . ' , ; ` | Not identical
[08:08:04.316] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.316] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.317] | : . ' , ; ` | all.equal() for future ...
[08:08:04.317] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:04.317] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:04.317] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.317] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.317] | : . ' , ; getFutureContext() ... done
[08:08:04.317] | : . ' , getFutureData() ... done
[08:08:04.317] | : . ' , requestCore(..., workers = 2) ...
[08:08:04.318] | : . ' , ; Poll #1 (0): usedCores() = 2, workers = 2
[08:08:04.320] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.320] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.320] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.320] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:04.320] | : . ' , ; ` | : New stack:
[08:08:04.317] | : . ' , ; ` | : List of 2
[08:08:04.317] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.317] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.317] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:04.317] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.317] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.317] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.317] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.317] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.317] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.317] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.317] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.317] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.317] | : . ' , ; ` | :     ...)  
[08:08:04.317] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.317] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.317] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.317] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.317] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.317] | : . ' , ; ` | :     ...)  
[08:08:04.317] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.325] | : . ' , ; ` | : Formals differ
[08:08:04.325] | : . ' , ; ` | all.equal() for future ... done
[08:08:04.321] | : . ' , ; ` | : List of 1
[08:08:04.321] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.321] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.321] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.321] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.321] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.321] | : . ' , ; ` | :     ...)  
[08:08:04.321] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.321] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.321] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.321] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.321] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.321] | : . ' , ; ` | :     ...)  
[08:08:04.321] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.321] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.325] | : . ' , ; ` | Future strategies differ at level 1
[08:08:04.325] | : . ' , ; ` | : Old stack:
[08:08:04.325] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:04.325] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:04.325] | : . ' , ; ` List of future strategies:
[08:08:04.325] | : . ' , ; ` 1. sequential:
[08:08:04.325] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.325] | : . ' , ; `    - tweaked: FALSE
[08:08:04.325] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.325] | : . ' , ; ` | : List of 1
[08:08:04.325] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.325] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.325] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.325] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.325] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.325] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.325] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.325] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c345018> 
[08:08:04.325] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.325] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.325] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.329] | : . ' , ; ` | : Not identical
[08:08:04.326] | : . ' , ; ` List of 1
[08:08:04.326] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.326] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.326] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:04.326] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.326] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.326] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.326] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.326] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.330] | : . ' , ; ` | : all.equal() for future ...
[08:08:04.330] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.330] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:04.330] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.330] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:04.330] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.330] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.330] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:04.330] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.330] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.330] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.330] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.333] | : . ' , ; ` | : init: TRUE
[08:08:04.333] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:04.333] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:04.334] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:04.334] | : . ' , ; ` | : .  list()
[08:08:04.334] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:04.334] | : . ' , ; ` | : .  list()
[08:08:04.335] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:04.335] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:04.335] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:04.335] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:04.336] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:04.336] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:04.337] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:04.337] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.330] | : . ' , ; ` | : . List of 2
[08:08:04.330] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.330] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.330] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.330] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.330] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.330] | : . ' , ; ` | : .     ...)  
[08:08:04.330] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.330] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.330] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:04.330] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.330] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.330] | : . ' , ; ` | : .     ...)  
[08:08:04.330] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.330] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.330] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.330] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.330] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.330] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.330] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.330] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.330] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c345018> 
[08:08:04.330] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.330] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.337] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:04.337] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.337] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.338] | : . ' , ; ` | : . Formals differ
[08:08:04.338] | : . ' , ; ` | : all.equal() for future ... done
[08:08:04.338] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:04.338] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:04.338] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:04.338] | : . ' , ; ` | List of future strategies:
[08:08:04.338] | : . ' , ; ` | 1. multicore:
[08:08:04.338] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:04.338] | : . ' , ; ` |    - tweaked: FALSE
[08:08:04.338] | : . ' , ; ` |    - call: plan(strategy)
[08:08:04.339] | : . ' , ; readImmediateCondition() ...
[08:08:04.339] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.340] | : . ' , ; ` Number of RDS files: 0
[08:08:04.340] | : . ' , ; ` Returned conditions set:
[08:08:04.340] | : . ' , ; `  list()
[08:08:04.341] | : . ' , ; readImmediateCondition() ... done
[08:08:04.341] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.341] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.341] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.341] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:04.342] | : . ' , ; ` | : New stack:
[08:08:04.339] | : . ' , ; ` | List of 1
[08:08:04.339] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.339] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.339] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.339] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.339] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.339] | : . ' , ; ` |     ...)  
[08:08:04.339] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.339] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.339] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.339] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.339] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.339] | : . ' , ; ` |     ...)  
[08:08:04.339] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.339] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.343] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.344] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:04.344] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.344] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.344] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:04.344] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.345] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.345] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.342] | : . ' , ; ` | : List of 1
[08:08:04.342] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.342] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.342] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.342] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.342] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.342] | : . ' , ; ` | :     ...)  
[08:08:04.342] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.342] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.342] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.342] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.342] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.342] | : . ' , ; ` | :     ...)  
[08:08:04.342] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.342] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.346] | : . ' , ; ` | : Old stack:
[08:08:04.346] | : . ' , ; ` | : List of 1
[08:08:04.346] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.346] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.346] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.346] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.346] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.346] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.346] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.346] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c7f9b48> 
[08:08:04.346] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.346] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.346] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.351] | : . ' , ; ` | : Not identical
[08:08:04.351] | : . ' , ; ` | : all.equal() for future ...
[08:08:04.351] | : . ' , ; readImmediateCondition() ...
[08:08:04.351] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.352] | : . ' , ; ` Number of RDS files: 0
[08:08:04.352] | : . ' , ; ` Returned conditions set:
[08:08:04.352] | : . ' , ; `  list()
[08:08:04.352] | : . ' , ; readImmediateCondition() ... done
[08:08:04.353] | : . ' , ; Poll #2 (0.04 secs): usedCores() = 2, workers = 2
[08:08:04.351] | : . ' , ; ` | : . List of 2
[08:08:04.351] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.351] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.351] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.351] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.351] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.351] | : . ' , ; ` | : .     ...)  
[08:08:04.351] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.351] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.351] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:04.351] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.351] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.351] | : . ' , ; ` | : .     ...)  
[08:08:04.351] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.351] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.351] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.351] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.351] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.351] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.351] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.351] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.351] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c7f9b48> 
[08:08:04.351] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.351] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.360] | : . ' , ; ` | : . Formals differ
[08:08:04.361] | : . ' , ; ` | : all.equal() for future ... done
[08:08:04.361] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:04.361] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:04.361] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:04.361] | : . ' , ; ` | List of future strategies:
[08:08:04.361] | : . ' , ; ` | 1. multicore:
[08:08:04.361] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:04.361] | : . ' , ; ` |    - tweaked: FALSE
[08:08:04.361] | : . ' , ; ` |    - call: plan(strategy)
[08:08:04.364] | : . ' , ; readImmediateCondition() ...
[08:08:04.364] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.364] | : . ' , ; ` Number of RDS files: 0
[08:08:04.365] | : . ' , ; ` Returned conditions set:
[08:08:04.365] | : . ' , ; `  list()
[08:08:04.365] | : . ' , ; readImmediateCondition() ... done
[08:08:04.366] | : . ' , ; value() for MulticoreFuture (<unnamed-64>) ...
[08:08:04.366] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:04.367] | : . ' , ; ` | readImmediateCondition() ...
[08:08:04.362] | : . ' , ; ` | List of 1
[08:08:04.362] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.362] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.362] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.362] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.362] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.362] | : . ' , ; ` |     ...)  
[08:08:04.362] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.362] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.362] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.362] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.362] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[[08:08:04.367] | : . ' , ; ` | : Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
08:08:04.362] | : . ' , ; ` |     ...)  
[08:08:04.362] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.362] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.367] | : . ' , ; ` | : Number of RDS files: 0
[08:08:04.367] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.368] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = [08:08:04.368] | : . ' , ; ` | : Returned conditions set:
FALSE) ... done
[08:08:04.368] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.368] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.368] | : . ' , ; ` | :  list()
[08:08:04.368] | : . ' , ; ` | readImmediateCondition() ... done
[08:08:04.368] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:04.369] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.369] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.369] | : . ' , ; ` | result() for MulticoreFuture ...
[08:08:04.369] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.369] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:08:04.369] | : . ' , ; ` | signalConditions() ...
[08:08:04.370] | : . ' , ; ` | : include = ‘immediateCondition’
[08:08:04.370] | : . ' , ; ` | : exclude = 
[08:08:04.370] | : . ' , ; ` | : resignal = FALSE
[08:08:04.370] | : . ' , ; ` | : Number of conditions: 6
[08:08:04.370] | : . ' , ; ` | :  int 6
[08:08:04.371] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.371] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.371] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.371] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.371] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.371] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.371] | : . ' , ; ` | signalConditions() ... done
[08:08:04.372] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:04.372] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:04.372] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:04.372] | : . ' , ; ` signalConditions() ...
[08:08:04.372] | : . ' , ; ` | include = ‘immediateCondition’
[08:08:04.372] | : . ' , ; ` | exclude = 
[08:08:04.372] | : . ' , ; ` | resignal = FALSE
[08:08:04.372] | : . ' , ; ` | Number of conditions: 6
[08:08:04.372] | : . ' , ; ` |  int 6
[08:08:04.373] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.373] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.373] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.373] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.374] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.374] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.374] | : . ' , ; ` signalConditions() ... done
[08:08:04.374] | : . ' , ; ` check for misuse ...
[08:08:04.374] | : . ' , ; ` check for misuse ... done
[08:08:04.374] | : . ' , ; value() for MulticoreFuture (<unnamed-64>) ... done
[08:08:04.375] | : . ' , requestCore(..., workers = 2) ... done
[08:08:04.377] | : . ' , MulticoreFuture started
[08:08:04.377] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:04.378] | : . Launching futures ... done
[08:08:04.378] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:04.378] | : Using MulticoreFutureBackend ... done
[08:08:04.378] | run() for ‘Future’ (<unnamed-66>) ... done
[08:08:04.378] future(..., label = NULL) ... done
<environment: 0x55675a2dbf68> 
<environment: 0x55675bd01858> 
[08:08:04.380] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.380] resolved() for environment ...
[08:08:04.380] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:04.381] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.381] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.381] | resolved() for list ...
[08:08:04.381] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.381] | : Number of elements: 4
[08:08:04.381] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:04.381] | : Number of futures: 4
[08:08:04.382] | : . ' , ; ` | New stack:
[08:08:04.382] | : readImmediateCondition() ...
[08:08:04.382] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.382] | : . Number of RDS files: 0
[08:08:04.382] | : . Returned conditions set:
[08:08:04.382] | : .  list()
[08:08:04.383] | : readImmediateCondition() ... done
[08:08:04.382] | : . ' , ; ` | List of 1
[08:08:04.382] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.382] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.382] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:04.382] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.382] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.382] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.382] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.382] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.386] | : . ' , ; ` | Old stack:
[08:08:04.386] | : . ' , ; ` | List of 1
[08:08:04.386] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.386] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.386] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.386] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.386] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.386] | : . ' , ; ` |     ...)  
[08:08:04.386] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.386] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.386] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.386] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.386] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.386] | : . ' , ; ` |     ...)  
[08:08:04.386] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.386] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.391] | : . ' , ; ` | Not identical
[08:08:04.391] | : . ' , ; ` | all.equal() for future ...
[08:08:04.393] | : readImmediateCondition() ...
[08:08:04.393] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.394] | : . Number of RDS files: 0
[08:08:04.394] | : . Returned conditions set:
[08:08:04.394] | : .  list()
[08:08:04.394] | : readImmediateCondition() ... done
[08:08:04.394] | resolved() for list ... done
[08:08:04.394] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE FALSE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:04.395] value() for MulticoreFuture (<unnamed-66>) ...
[08:08:04.396] | result() for MulticoreFuture ...
[08:08:04.391] | : . ' , ; ` | : List of 2
[08:08:04.391] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.391] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.391] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:04.391] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.391] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.391] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.391] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.391] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.391] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.391] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.391] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.391] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.391] | : . ' , ; ` | :     ...)  
[08:08:04.391] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.391] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.391] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.391] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.391] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.391] | : . ' , ; ` | :     ...)  
[08:08:04.391] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.398] | : . ' , ; ` | : Formals differ
[08:08:04.398] | : . ' , ; ` | all.equal() for future ... done
[08:08:04.399] | : . ' , ; ` | Future strategies differ at level 1
[08:08:04.399] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:04.399] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:04.399] | : . ' , ; ` List of future strategies:
[08:08:04.399] | : . ' , ; ` 1. sequential:
[08:08:04.399] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.399] | : . ' , ; `    - tweaked: FALSE
[08:08:04.399] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.400] | : . ' , ; ` List of 1
[08:08:04.400] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.400] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.400] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:04.400] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.400] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.400] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.400] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.400] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.403] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.404] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:04.404] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.404] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:04.404] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.404] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.404] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:04.404] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.404] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.404] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.404] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.407] | : . ' , ; ` | : init: TRUE
[08:08:04.407] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:04.407] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:04.407] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:04.408] | : . ' , ; ` | : .  list()
[08:08:04.408] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:04.408] | : . ' , ; ` | : .  list()
[08:08:04.409] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:04.409] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:04.409] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:04.409] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:04.410] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:04.411] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:04.411] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:04.411] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.411] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:04.411] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.411] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.414] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.415] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.415] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.415] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:04.415] | : . ' , ; ` | : New stack:
[08:08:04.415] | : . ' , ; ` | : List of 1
[08:08:04.415] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.415] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.415] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.415] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.415] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.415] | : . ' , ; ` | :     ...)  
[08:08:04.415] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.415] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.415] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.415] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.415] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.415] | : . ' , ; ` | :     ...)  
[08:08:04.415] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.415] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.420] | : . ' , ; ` | : Old stack:
[08:08:04.420] | : . ' , ; ` | : List of 1
[08:08:04.420] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.420] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.420] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.420] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.420] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.420] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.420] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.420] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675aa8a758> 
[08:08:04.420] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.420] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.420] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.424] | : . ' , ; ` | : Not identical
[08:08:04.424] | : . ' , ; ` | : all.equal() for future ...
[08:08:04.425] | : . ' , ; ` | : . List of 2
[08:08:04.425] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.425] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.425] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.425] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.425] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.425] | : . ' , ; ` | : .     ...)  
[08:08:04.425] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.425] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.425] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:04.425] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.425] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.425] | : . ' , ; ` | : .     ...)  
[08:08:04.425] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.425] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.425] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.425] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.425] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.425] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.425] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.425] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.425] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675aa8a758> 
[08:08:04.425] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.425] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.433] | : . ' , ; ` | : . Formals differ
[08:08:04.433] | : . ' , ; ` | : all.equal() for future ... done
[08:08:04.433] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:04.434] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:04.434] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:04.434] | : . ' , ; ` | List of future strategies:
[08:08:04.434] | : . ' , ; ` | 1. multicore:
[08:08:04.434] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:04.434] | : . ' , ; ` |    - tweaked: FALSE
[08:08:04.434] | : . ' , ; ` |    - call: plan(strategy)
[08:08:04.434] | : . ' , ; ` | List of 1
[08:08:04.434] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.434] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.434] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.434] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.434] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.434] | : . ' , ; ` |     ...)  
[08:08:04.434] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.434] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.434] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.434] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.434] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.434] | : . ' , ; ` |     ...)  
[08:08:04.434] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.434] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.439] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.440] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:04.440] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.440] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.440] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:04.440] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.441] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.441] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.441] | : readImmediateCondition() ...
[08:08:04.442] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.442] | : . Number of RDS files: 0
[08:08:04.442] | : . Returned conditions set:
[08:08:04.442] | : .  list()
[08:08:04.443] | : readImmediateCondition() ... done
[08:08:04.443] | : result() for MulticoreFuture ...
[08:08:04.443] | : result() for MulticoreFuture ... done
[08:08:04.443] | : signalConditions() ...
[08:08:04.443] | : . include = ‘immediateCondition’
[08:08:04.444] | : . exclude = 
[08:08:04.444] | : . resignal = FALSE
[08:08:04.444] | : . Number of conditions: 6
[08:08:04.444] | : .  int 6
[08:08:04.444] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.445] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.445] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.445] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.445] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.445] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.445] | : signalConditions() ... done
[08:08:04.445] | result() for MulticoreFuture ... done
[08:08:04.446] | result() for MulticoreFuture ...
[08:08:04.446] | result() for MulticoreFuture ... done
[08:08:04.446] | signalConditions() ...
[08:08:04.446] | : include = ‘immediateCondition’
[08:08:04.446] | : exclude = 
[08:08:04.446] | : resignal = FALSE
[08:08:04.446] | : Number of conditions: 6
[08:08:04.446] | :  int 6
[08:08:04.447] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.447] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.447] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.447] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.447] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.447] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.448] | signalConditions() ... done
[08:08:04.448] | relay stdout ...
[08:08:04.448] | relay stdout ... done
[08:08:04.448] | check for misuse ...
[08:08:04.448] | check for misuse ... done
[08:08:04.448] | relay conditions ...
[08:08:04.448] | : Future state: ‘finished’
[08:08:04.449] | : result() for MulticoreFuture ...
[08:08:04.449] | : result() for MulticoreFuture ... done
[08:08:04.449] | : signalConditions() ...
[08:08:04.449] | : . include = ‘condition’
[08:08:04.449] | : . exclude = ‘immediateCondition’
[08:08:04.449] | : . resignal = TRUE
[08:08:04.449] | : . Number of conditions: 6
[08:08:04.449] | : .  int 6
[08:08:04.450] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.450] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.378] | : . ' , attachPackages() ...
[08:08:04.450] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.450] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.378] | : . ' , ; packages: [n=1] ‘future’
[08:08:04.450] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.450] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.379] | : . ' , attachPackages() ... done
[08:08:04.451] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.451] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.379] | : . ' , attachPackages() ...
[08:08:04.451] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.451] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.379] | : . ' , ; packages: [n=0] 
[08:08:04.451] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.451] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.379] | : . ' , attachPackages() ... done
[08:08:04.451] | : signalConditions() ... done
[08:08:04.452] | relay conditions ... done
[08:08:04.452] value() for MulticoreFuture (<unnamed-66>) ... done
[08:08:04.452] value() for listenv ...
[08:08:04.452] | recursive: 0
[08:08:04.452] | reduce: FALSE
[08:08:04.453] | length: 4
[08:08:04.453] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:04.454] | Number of remaining objects: 4
[08:08:04.454] | checking value #1:
[08:08:04.454] | 'obj' is atomic
[08:08:04.454] | signalConditionsASAP(numeric, pos=1) ...
[08:08:04.454] | : nx: 4
[08:08:04.454] | : relay: TRUE
[08:08:04.454] | : stdout: TRUE
[08:08:04.454] | : signal: TRUE
[08:08:04.454] | : resignal: FALSE
[08:08:04.455] | : force: TRUE
[08:08:04.455] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:04.455] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:04.455] | : until=2
[08:08:04.455] | : relaying element #2
[08:08:04.455] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:04.455] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:04.455] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:04.456] | length: 3 (resolved future 1)
[08:08:04.456] value() for listenv ... done
[08:08:04.456] checking value #2:
[08:08:04.456] 'obj' is MulticoreFuture
[08:08:04.456] MulticoreFuture #2
[08:08:04.456] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:04.456] | nx: 4
[08:08:04.457] | relay: TRUE
[08:08:04.457] | stdout: TRUE
[08:08:04.457] | signal: TRUE
[08:08:04.457] | resignal: FALSE
[08:08:04.457] | force: TRUE
[08:08:04.457] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:04.457] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:04.457] | until=2
[08:08:04.457] | relaying element #2
[08:08:04.458] | value() for MulticoreFuture (<unnamed-64>) ...
[08:08:04.458] | : result() for MulticoreFuture ...
[08:08:04.458] | : result() for MulticoreFuture ... done
[08:08:04.458] | : result() for MulticoreFuture ...
[08:08:04.458] | : result() for MulticoreFuture ... done
[08:08:04.458] | : signalConditions() ...
[08:08:04.458] | : . include = ‘immediateCondition’
[08:08:04.458] | : . exclude = 
[08:08:04.458] | : . resignal = FALSE
[08:08:04.459] | : . Number of conditions: 6
[08:08:04.459] | : .  int 6
[08:08:04.459] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.459] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.459] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.460] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.460] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.460] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.460] | : signalConditions() ... done
[08:08:04.460] | : relay stdout ...
[08:08:04.460] | : relay stdout ... done
[08:08:04.460] | : check for misuse ...
[08:08:04.460] | : check for misuse ... done
[08:08:04.461] | value() for MulticoreFuture (<unnamed-64>) ... done
[08:08:04.461] | result() for MulticoreFuture ...
[08:08:04.461] | result() for MulticoreFuture ... done
[08:08:04.461] | signalConditions() ...
[08:08:04.461] | : include = ‘immediateCondition’
[08:08:04.461] | : exclude = 
[08:08:04.461] | : resignal = FALSE
[08:08:04.461] | : Number of conditions: 6
[08:08:04.462] | :  int 6
[08:08:04.462] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.462] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.462] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.462] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.463] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.463] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.463] | signalConditions() ... done
[08:08:04.463] | result() for MulticoreFuture ...
[08:08:04.463] | result() for MulticoreFuture ... done
[08:08:04.463] | signalConditions() ...
[08:08:04.463] | : include = ‘condition’
[08:08:04.463] | : exclude = ‘error’, ‘immediateCondition’
[08:08:04.464] | : resignal = TRUE
[08:08:04.464] | : Number of conditions: 6
[08:08:04.464] | :  int 6
[08:08:04.464] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.464] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.281] | : . ' , attachPackages() ...
[08:08:04.465] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.465] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.282] | : . ' , ; packages: [n=1] ‘future’
[08:08:04.465] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.465] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.282] | : . ' , attachPackages() ... done
[08:08:04.465] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.465] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.282] | : . ' , attachPackages() ...
[08:08:04.466] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.466] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.282] | : . ' , ; packages: [n=0] 
[08:08:04.466] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.466] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.283] | : . ' , attachPackages() ... done
[08:08:04.466] | signalConditions() ... done
[08:08:04.466] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:04.466] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:04.466] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:04.467] value(<MulticoreFuture>, ...) ...
[08:08:04.467] value(<MulticoreFuture>, ...) ... done
[08:08:04.467] value() for MulticoreFuture (<unnamed-64>) ...
[08:08:04.467] | result() for MulticoreFuture ...
[08:08:04.467] | result() for MulticoreFuture ... done
[08:08:04.467] | result() for MulticoreFuture ...
[08:08:04.467] | result() for MulticoreFuture ... done
[08:08:04.467] | signalConditions() ...
[08:08:04.468] | : include = ‘immediateCondition’
[08:08:04.468] | : exclude = 
[08:08:04.468] | : resignal = FALSE
[08:08:04.468] | : Number of conditions: 6
[08:08:04.468] | :  int 6
[08:08:04.468] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.469] | : already signaled, skipping
[08:08:04.469] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.469] | : already signaled, skipping
[08:08:04.469] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.469] | : already signaled, skipping
[08:08:04.469] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.469] | : already signaled, skipping
[08:08:04.469] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.470] | : already signaled, skipping
[08:08:04.470] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.470] | : already signaled, skipping
[08:08:04.470] | signalConditions() ... done
[08:08:04.470] | check for misuse ...
[08:08:04.471] | check for misuse ... done
[08:08:04.471] value() for MulticoreFuture (<unnamed-64>) ... done
[08:08:04.471] value: <numeric>
[08:08:04.471] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:04.471] | nx: 4
[08:08:04.472] | relay: TRUE
[08:08:04.472] | stdout: TRUE
[08:08:04.472] | signal: TRUE
[08:08:04.472] | resignal: FALSE
[08:08:04.472] | force: TRUE
[08:08:04.472] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:04.473] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:04.473] | until=3
[08:08:04.473] | relaying element #3
[08:08:04.473] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:04.473] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:04.473] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:04.474] resolve() for MulticoreFuture ...
[08:08:04.474] resolve() for MulticoreFuture ... done
[08:08:04.474] length: 2 (resolved future 2)

[08:08:04.474] checking value #3:
[08:08:04.474] 'obj' is MulticoreFuture
[08:08:04.475] readImmediateCondition() ...
[08:08:04.475] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.475] | Number of RDS files: 0
[08:08:04.475] | Returned conditions set:
[08:08:04.475] |  list()
[08:08:04.476] readImmediateCondition() ... done
[08:08:04.476] MulticoreFuture #3
[08:08:04.476] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:04.476] | nx: 4
[08:08:04.476] | relay: TRUE
[08:08:04.476] | stdout: TRUE
[08:08:04.477] | signal: TRUE
[08:08:04.477] | resignal: FALSE
[08:08:04.477] | force: TRUE
[08:08:04.477] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:04.477] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:04.477] | until=3
[08:08:04.477] | relaying element #3
[08:08:04.477] | value() for MulticoreFuture (<unnamed-65>) ...
[08:08:04.478] | : result() for MulticoreFuture ...
[08:08:04.478] | : . readImmediateCondition() ...
[08:08:04.478] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.479] | : . ' Number of RDS files: 0
[08:08:04.479] | : . ' Returned conditions set:
[08:08:04.479] | : . '  list()
[08:08:04.480] | : . readImmediateCondition() ... done
[08:08:04.480] | : . result() for MulticoreFuture ...
[08:08:04.480] | : . result() for MulticoreFuture ... done
[08:08:04.481] | : . signalConditions() ...
[08:08:04.481] | : . ' include = ‘immediateCondition’
[08:08:04.481] | : . ' exclude = 
[08:08:04.481] | : . ' resignal = FALSE
[08:08:04.481] | : . ' Number of conditions: 6
[08:08:04.482] | : . '  int 6
[08:08:04.482] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.482] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.483] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.483] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.483] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.483] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.483] | : . signalConditions() ... done
[08:08:04.484] | : result() for MulticoreFuture ... done
[08:08:04.484] | : result() for MulticoreFuture ...
[08:08:04.484] | : result() for MulticoreFuture ... done
[08:08:04.484] | : signalConditions() ...
[08:08:04.484] | : . include = ‘immediateCondition’
[08:08:04.484] | : . exclude = 
[08:08:04.485] | : . resignal = FALSE
[08:08:04.485] | : . Number of conditions: 6
[08:08:04.485] | : .  int 6
[08:08:04.485] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.486] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.486] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.486] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.486] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.486] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.486] | : signalConditions() ... done
[08:08:04.486] | : relay stdout ...
[08:08:04.486] | : relay stdout ... done
[08:08:04.487] | : check for misuse ...
[08:08:04.487] | : check for misuse ... done
[08:08:04.487] | value() for MulticoreFuture (<unnamed-65>) ... done
[08:08:04.487] | result() for MulticoreFuture ...
[08:08:04.487] | result() for MulticoreFuture ... done
[08:08:04.487] | signalConditions() ...
[08:08:04.487] | : include = ‘immediateCondition’
[08:08:04.487] | : exclude = 
[08:08:04.488] | : resignal = FALSE
[08:08:04.488] | : Number of conditions: 6
[08:08:04.488] | :  int 6
[08:08:04.488] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.488] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.489] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.489] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.489] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.489] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.489] | signalConditions() ... done
[08:08:04.489] | result() for MulticoreFuture ...
[08:08:04.489] | result() for MulticoreFuture ... done
[08:08:04.489] | signalConditions() ...
[08:08:04.490] | : include = ‘condition’
[08:08:04.490] | : exclude = ‘error’, ‘immediateCondition’
[08:08:04.490] | : resignal = TRUE
[08:08:04.490] | : Number of conditions: 6
[08:08:04.490] | :  int 6
[08:08:04.491] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.491] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.298] | : . ' , attachPackages() ...
[08:08:04.491] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.491] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.299] | : . ' , ; packages: [n=1] ‘future’
[08:08:04.491] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.491] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.299] | : . ' , attachPackages() ... done
[08:08:04.492] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.492] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.299] | : . ' , attachPackages() ...
[08:08:04.492] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.492] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.300] | : . ' , ; packages: [n=0] 
[08:08:04.492] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.492] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.300] | : . ' , attachPackages() ... done
[08:08:04.492] | signalConditions() ... done
[08:08:04.493] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:04.493] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.493] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:04.493] value(<MulticoreFuture>, ...) ...
[08:08:04.493] value(<MulticoreFuture>, ...) ... done
[08:08:04.493] value() for MulticoreFuture (<unnamed-65>) ...
[08:08:04.493] | result() for MulticoreFuture ...
[08:08:04.493] | result() for MulticoreFuture ... done
[08:08:04.494] | result() for MulticoreFuture ...
[08:08:04.494] | result() for MulticoreFuture ... done
[08:08:04.494] | signalConditions() ...
[08:08:04.494] | : include = ‘immediateCondition’
[08:08:04.494] | : exclude = 
[08:08:04.494] | : resignal = FALSE
[08:08:04.494] | : Number of conditions: 6
[08:08:04.494] | :  int 6
[08:08:04.495] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.495] | : already signaled, skipping
[08:08:04.495] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.495] | : already signaled, skipping
[08:08:04.495] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.496] | : already signaled, skipping
[08:08:04.496] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.496] | : already signaled, skipping
[08:08:04.496] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.496] | : already signaled, skipping
[08:08:04.496] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.496] | : already signaled, skipping
[08:08:04.496] | signalConditions() ... done
[08:08:04.496] | check for misuse ...
[08:08:04.497] | check for misuse ... done
[08:08:04.497] value() for MulticoreFuture (<unnamed-65>) ... done
[08:08:04.497] value: <NULL>
[08:08:04.497] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:04.497] | nx: 4
[08:08:04.497] | relay: TRUE
[08:08:04.497] | stdout: TRUE
[08:08:04.497] | signal: TRUE
[08:08:04.498] | resignal: FALSE
[08:08:04.498] | force: TRUE
[08:08:04.498] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:04.498] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.498] | until=4
[08:08:04.498] | relaying element #4
[08:08:04.498] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:04.498] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.499] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:04.499] resolve() for MulticoreFuture ...
[08:08:04.499] resolve() for MulticoreFuture ... done
[08:08:04.499] length: 1 (resolved future 3)

[08:08:04.499] checking value #4:
[08:08:04.499] 'obj' is atomic
[08:08:04.500] signalConditionsASAP(numeric, pos=4) ...
[08:08:04.500] | nx: 4
[08:08:04.500] | relay: TRUE
[08:08:04.500] | stdout: TRUE
[08:08:04.500] | signal: TRUE
[08:08:04.500] | resignal: FALSE
[08:08:04.500] | force: TRUE
[08:08:04.500] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:04.500] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.501] | until=4
[08:08:04.501] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:04.501] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.501] signalConditionsASAP(numeric, pos=4) ... done
[08:08:04.501] length: 0 (resolved future 4)

[08:08:04.501] Relaying remaining futures ...
[08:08:04.503] | signalConditionsASAP(NULL, pos=0) ...
[08:08:04.504] | : nx: 4
[08:08:04.504] | : relay: TRUE
[08:08:04.504] | : stdout: TRUE
[08:08:04.504] | : signal: TRUE
[08:08:04.504] | : resignal: FALSE
[08:08:04.504] | : force: TRUE
[08:08:04.504] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:04.504] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:04.504] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:04.505] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.505] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:04.505] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(2, 3)
[08:08:04.507] future(..., label = NULL) ...
[08:08:04.507] | lazy: FALSE
[08:08:04.507] | stdout: TRUE
[08:08:04.507] | conditions: [n=1] ‘condition’
[08:08:04.507] | gc: FALSE
[08:08:04.507] | earlySignal: FALSE
[08:08:04.507] | getGlobalsAndPackages() ...
[08:08:04.508] | : Searching for globals ...
[08:08:04.509] | : . globals found: [0] 
[08:08:04.509] | : Searching for globals ... done
[08:08:04.509] | : globals: [0] <none>
[08:08:04.509] | : packages: [0] <none>
[08:08:04.509] | getGlobalsAndPackages() ... done
[08:08:04.510] | run() for ‘Future’ (<unnamed-67>) ...
[08:08:04.510] | : state: ‘created’
[08:08:04.510] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.510] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.510] | : Using MulticoreFutureBackend ...
[08:08:04.510] | : . Number of futures since start: 6 (6 created, 6 launched, 8 finished)
[08:08:04.511] | : . Launching futures ...
[08:08:04.511] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:04.511] | : . ' , getFutureData() ...
[08:08:04.511] | : . ' , ; getFutureCore() ...
[08:08:04.511] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:04.511] | : . ' , ; getFutureCore() ... done
[08:08:04.511] | : . ' , ; getFutureCapture() ...
[08:08:04.511] | : . ' , ; getFutureCapture() ... done
[08:08:04.512] | : . ' , ; getFutureContext() ...
[08:08:04.512] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.512] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:04.512] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.512] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:04.512] | : . ' , ; getFutureContext() ... done
[08:08:04.512] | : . ' , getFutureData() ... done
[08:08:04.513] | : . ' , requestCore(..., workers = 2) ...
[08:08:04.513] | : . ' , requestCore(..., workers = 2) ... done
[08:08:04.515] | : . ' , MulticoreFuture started
[08:08:04.516] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:04.516] | : . Launching futures ... done
[08:08:04.516] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:04.517] | : Using MulticoreFutureBackend ... done
[08:08:04.517] | run() for ‘Future’ (<unnamed-67>) ... done
[08:08:04.517] future(..., label = NULL) ... done
[08:08:04.517] future(..., label = NULL) ...
[08:08:04.517] | lazy: FALSE
[08:08:04.518] | stdout: TRUE
[08:08:04.518] | conditions: [n=1] ‘condition’
[08:08:04.518] | gc: FALSE
[08:08:04.518] | earlySignal: FALSE
[08:08:04.518] | getGlobalsAndPackages() ...
[08:08:04.519] | : Searching for globals ...
[08:08:04.519] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.519] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:04.519] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.519] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.520] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.520] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:04.520] | : . ' , ; ` | New stack:
[08:08:04.521] | : . globals found: [0] 
[08:08:04.521] | : Searching for globals ... done
[08:08:04.521] | : globals: [0] <none>
[08:08:04.521] | : packages: [0] <none>
[08:08:04.521] | getGlobalsAndPackages() ... done
[08:08:04.522] | run() for ‘Future’ (<unnamed-68>) ...
[08:08:04.522] | : state: ‘created’
[08:08:04.522] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.522] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.523] | : Using MulticoreFutureBackend ...
[08:08:04.523] | : . Number of futures since start: 7 (7 created, 7 launched, 8 finished)
[08:08:04.523] | : . Launching futures ...
[08:08:04.523] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:04.523] | : . ' , getFutureData() ...
[08:08:04.523] | : . ' , ; getFutureCore() ...
[08:08:04.524] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:04.524] | : . ' , ; getFutureCore() ... done
[08:08:04.524] | : . ' , ; getFutureCapture() ...
[08:08:04.520] | : . ' , ; ` | List of 1
[08:08:04.520] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.520] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.520] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:04.520] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.520] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.520] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.520] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.520] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.524] | : . ' , ; getFutureCapture() ... done
[08:08:04.524] | : . ' , ; ` | Old stack:
[08:08:04.524] | : . ' , ; getFutureContext() ...
[08:08:04.524] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.524] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:04.525] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.525] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:04.525] | : . ' , ; getFutureContext() ... done
[08:08:04.525] | : . ' , getFutureData() ... done
[08:08:04.525] | : . ' , requestCore(..., workers = 2) ...
[08:08:04.526] | : . ' , requestCore(..., workers = 2) ... done
[08:08:04.528] | : . ' , MulticoreFuture started
[08:08:04.524] | : . ' , ; ` | List of 1
[08:08:04.524] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.524] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.524] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.524] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.524] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.524] | : . ' , ; ` |     ...)  
[08:08:04.524] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.524] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.524] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.524] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.524] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.524] | : . ' , ; ` |     ...)  
[08:08:04.524] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.524] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.529] | : . ' , ; ` | Not identical
[08:08:04.529] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:04.529] | : . ' , ; ` | all.equal() for future ...
[08:08:04.529] | : . Launching futures ... done
[08:08:04.529] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:04.530] | : Using MulticoreFutureBackend ... done
[08:08:04.530] | run() for ‘Future’ (<unnamed-68>) ... done
[08:08:04.530] future(..., label = NULL) ... done
[08:08:04.531] future(..., label = NULL) ...
[08:08:04.531] | lazy: FALSE
[08:08:04.532] | stdout: TRUE
[08:08:04.532] | conditions: [n=1] ‘condition’
[08:08:04.532] | gc: FALSE
[08:08:04.532] | earlySignal: FALSE
[08:08:04.533] | getGlobalsAndPackages() ...
[08:08:04.533] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.533] | : Searching for globals ...
[08:08:04.533] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:04.533] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.534] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.534] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.534] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:04.535] | : . ' , ; ` | New stack:
[08:08:04.529] | : . ' , ; ` | : List of 2
[08:08:04.529] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.529] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.529] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:04.529] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.529] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.529] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.529] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.529] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.529] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.529] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.529] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.529] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.529] | : . ' , ; ` | :     ...)  
[08:08:04.529] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.529] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.529] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.529] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.529] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.529] | : . ' , ; ` | :     ...)  
[08:08:04.529] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.536] | : . ' , ; ` | : Formals differ
[08:08:04.537] | : . ' , ; ` | all.equal() for future ... done
[08:08:04.537] | : . ' , ; ` | Future strategies differ at level 1
[08:08:04.537] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:04.537] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:04.537] | : . ' , ; ` List of future strategies:
[08:08:04.537] | : . ' , ; ` 1. sequential:
[08:08:04.537] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.537] | : . ' , ; `    - tweaked: FALSE
[08:08:04.537] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.535] | : . ' , ; ` | List of 1
[08:08:04.535] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.535] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.535] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:04.535] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.535] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.535] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.535] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.535] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.540] | : . globals found: [1] ‘{’
[08:08:04.541] | : . ' , ; ` | Old stack:
[08:08:04.541] | : Searching for globals ... done
[08:08:04.541] | : Resolving globals: FALSE
[08:08:04.541] | : Search for packages associated with the globals ...
[08:08:04.538] | : . ' , ; ` List of 1
[08:08:04.538] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.538] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.538] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:04.538] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.538] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.538] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.538] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.538] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.541] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.541] | : . Packages associated with globals: [1] ‘base’
[08:08:04.542] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:04.542] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.542] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:04.542] | : . Packages: [1] ‘base’
[08:08:04.542] | : Search for packages associated with the globals ... done
[08:08:04.543] | : Packages after dropping 'base': [0] 
[08:08:04.543] | : globals: [0] 
[08:08:04.543] | : packages: [0] 
[08:08:04.543] | getGlobalsAndPackages() ... done
[08:08:04.544] | run() for ‘Future’ (<unnamed-69>) ...
[08:08:04.544] | : state: ‘created’
[08:08:04.544] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.545] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.545] | : Using MulticoreFutureBackend ...
[08:08:04.542] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.542] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.542] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:04.542] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.542] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.542] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.542] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.545] | : . ' , ; ` | : init: TRUE
[08:08:04.545] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:08:04.545] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:04.545] | : . Launching futures ...
[08:08:04.545] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:04.545] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:04.546] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:04.546] | : . ' , getFutureData() ...
[08:08:04.546] | : . ' , ; ` | : .  list()
[08:08:04.546] | : . ' , ; getFutureCore() ...
[08:08:04.546] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:04.546] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:04.546] | : . ' , ; ` | : .  list()
[08:08:04.546] | : . ' , ; getFutureCore() ... done
[08:08:04.547] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:04.547] | : . ' , ; getFutureCapture() ...
[08:08:04.547] | : . ' , ; getFutureCapture() ... done
[08:08:04.547] | : . ' , ; getFutureContext() ...
[08:08:04.547] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.541] | : . ' , ; ` | List of 1
[08:08:04.541] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.541] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.541] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.541] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.541] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.541] | : . ' , ; ` |     ...)  
[08:08:04.541] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.541] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.541] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.541] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.541] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.541] | : . ' , ; ` |     ...)  
[08:08:04.541] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.541] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.547] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:04.548] | : . ' , ; ` | Not identical
[08:08:04.548] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.548] | : . ' , ; ` | all.equal() for future ...
[08:08:04.548] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:04.547] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:04.547] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:04.547] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:04.548] | : . ' , ; getFutureContext() ... done
[08:08:04.548] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:04.548] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:04.548] | : . ' , getFutureData() ... done
[08:08:04.549] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:04.549] | : . ' , requestCore(..., workers = 2) ...
[08:08:04.549] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.549] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:04.549] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.549] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.549] | : . ' , ; Poll #1 (0): usedCores() = 2, workers = 2
[08:08:04.552] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.552] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.553] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.553] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:04.553] | : . ' , ; ` | : New stack:
[08:08:04.548] | : . ' , ; ` | : List of 2
[08:08:04.548] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.548] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.548] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:04.548] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.548] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.548] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.548] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.548] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.548] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.548] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.548] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.548] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.548] | : . ' , ; ` | :     ...)  
[08:08:04.548] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.548] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.548] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.548] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.548] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.548] | : . ' , ; ` | :     ...)  
[08:08:04.548] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.556] | : . ' , ; ` | : Formals differ
[08:08:04.556] | : . ' , ; ` | all.equal() for future ... done
[08:08:04.556] | : . ' , ; ` | Future strategies differ at level 1
[08:08:04.556] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:04.557] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:04.557] | : . ' , ; ` List of future strategies:
[08:08:04.557] | : . ' , ; ` 1. sequential:
[08:08:04.557] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.557] | : . ' , ; `    - tweaked: FALSE
[08:08:04.557] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.553] | : . ' , ; ` | : List of 1
[08:08:04.553] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.553] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.553] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.553] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.553] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.553] | : . ' , ; ` | :     ...)  
[08:08:04.553] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.553] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.553] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.553] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.553] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.553] | : . ' , ; ` | :     ...)  
[08:08:04.553] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.553] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.558] | : . ' , ; ` | : Old stack:
[08:08:04.557] | : . ' , ; ` List of 1
[08:08:04.557] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.557] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.557] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:04.557] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.557] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.557] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.557] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.557] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.561] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.561] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:04.562] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.562] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:04.558] | : . ' , ; ` | : List of 1
[08:08:04.558] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.558] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.558] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.558] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.558] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.558] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.558] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.558] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c16efb8> 
[08:08:04.558] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.558] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.558] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.562] | : . ' , ; ` | : Not identical
[08:08:04.563] | : . ' , ; ` | : all.equal() for future ...
[08:08:04.562] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.562] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.562] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:04.562] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.562] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.562] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.562] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.565] | : . ' , ; ` | : init: TRUE
[08:08:04.565] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:04.565] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:04.565] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:04.565] | : . ' , ; ` | : .  list()
[08:08:04.566] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:04.566] | : . ' , ; ` | : .  list()
[08:08:04.566] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:04.566] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:04.566] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:04.566] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:04.568] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:04.568] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:04.568] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:04.568] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.569] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:04.569] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.569] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.563] | : . ' , ; ` | : . List of 2
[08:08:04.563] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.563] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.563] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.563] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.563] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.563] | : . ' , ; ` | : .     ...)  
[08:08:04.563] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.563] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.563] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:04.563] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.563] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.563] | : . ' , ; ` | : .     ...)  
[08:08:04.563] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.563] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.563] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.563] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.563] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.563] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.563] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.563] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.563] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c16efb8> 
[08:08:04.563] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.563] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.570] | : . ' , ; readImmediateCondition() ...
[08:08:04.570] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.571] | : . ' , ; ` | : . Formals differ
[08:08:04.571] | : . ' , ; ` | : all.equal() for future ... done
[08:08:04.571] | : . ' , ; ` Number of RDS files: 0
[08:08:04.571] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:04.571] | : . ' , ; ` Returned conditions set:
[08:08:04.571] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:04.571] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:04.571] | : . ' , ; `  list()
[08:08:04.571] | : . ' , ; ` | List of future strategies:
[08:08:04.571] | : . ' , ; ` | 1. multicore:
[08:08:04.571] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:04.571] | : . ' , ; ` |    - tweaked: FALSE
[08:08:04.571] | : . ' , ; ` |    - call: plan(strategy)
[08:08:04.572] | : . ' , ; readImmediateCondition() ... done
[08:08:04.573] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.573] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.573] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.573] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:04.573] | : . ' , ; ` | : New stack:
[08:08:04.572] | : . ' , ; ` | List of 1
[08:08:04.572] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.572] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.572] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.572] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.572] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.572] | : . ' , ; ` |     ...)  
[08:08:04.572] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.572] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.572] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.572] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.572] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.572] | : . ' , ; ` |     ...)  
[08:08:04.572] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.572] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.576] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.577] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:04.577] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.577] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.577] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:04.577] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.578] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.578] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.573] | : . ' , ; ` | : List of 1
[08:08:04.573] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.573] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.573] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.573] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.573] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.573] | : . ' , ; ` | :     ...)  
[08:08:04.573] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.573] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.573] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.573] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.573] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.573] | : . ' , ; ` | :     ...)  
[08:08:04.573] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.573] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.578] | : . ' , ; ` | : Old stack:
[08:08:04.582] | : . ' , ; readImmediateCondition() ...
[08:08:04.583] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.579] | : . ' , ; ` | : List of 1
[08:08:04.579] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.579] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.579] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.579] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.579] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.579] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.579] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.579] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c48bf10> 
[08:08:04.579] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.579] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.579] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.583] | : . ' , ; ` Number of RDS files: 0
[08:08:04.583] | : . ' , ; ` Returned conditions set:
[08:08:04.583] | : . ' , ; ` | : Not identical
[08:08:04.583] | : . ' , ; ` | : all.equal() for future ...
[08:08:04.583] | : . ' , ; `  list()
[08:08:04.584] | : . ' , ; readImmediateCondition() ... done
[08:08:04.585] | : . ' , ; Poll #2 (0.04 secs): usedCores() = 2, workers = 2
[08:08:04.584] | : . ' , ; ` | : . List of 2
[08:08:04.584] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.584] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.584] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.584] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.584] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.584] | : . ' , ; ` | : .     ...)  
[08:08:04.584] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.584] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.584] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:04.584] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.584] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.584] | : . ' , ; ` | : .     ...)  
[08:08:04.584] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.584] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.584] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.584] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.584] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.584] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.584] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.584] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.584] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c48bf10> 
[08:08:04.584] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.584] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.592] | : . ' , ; ` | : . Formals differ
[08:08:04.592] | : . ' , ; ` | : all.equal() for future ... done
[08:08:04.593] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:04.593] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:04.593] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:04.593] | : . ' , ; ` | List of future strategies:
[08:08:04.593] | : . ' , ; ` | 1. multicore:
[08:08:04.593] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:04.593] | : . ' , ; ` |    - tweaked: FALSE
[08:08:04.593] | : . ' , ; ` |    - call: plan(strategy)
[08:08:04.595] | : . ' , ; readImmediateCondition() ...
[08:08:04.595] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.596] | : . ' , ; ` Number of RDS files: 0
[08:08:04.596] | : . ' , ; ` Returned conditions set:
[08:08:04.596] | : . ' , ; `  list()
[08:08:04.597] | : . ' , ; readImmediateCondition() ... done
[08:08:04.597] | : . ' , ; value() for MulticoreFuture (<unnamed-67>) ...
[08:08:04.597] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:04.598] | : . ' , ; ` | readImmediateCondition() ...
[08:08:04.599] | : . ' , ; ` | : Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.599] | : . ' , ; ` | : Number of RDS files: 0
[08:08:04.599] | : . ' , ; ` | : Returned conditions set:
[08:08:04.599] | : . ' , ; ` | :  list()
[08:08:04.600] | : . ' , ; ` | readImmediateCondition() ... done
[08:08:04.594] | : . ' , ; ` | List of 1
[08:08:04.594] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.594] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.594] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.594] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.594] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.594] | : . ' , ; ` |     ...)  
[08:08:04.594] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.594] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.594] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.594] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.594] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.594] | : . ' , ; ` |     ...)  
[08:08:04.594] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.594] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.600] | : . ' , ; ` | result() for MulticoreFuture ...
[08:08:04.600] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.601] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:08:04.601] | : . ' , ; ` | signalConditions() ...
[08:08:04.601] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:04.601] | : . ' , ; ` | : include = ‘immediateCondition’
[08:08:04.601] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.601] | : . ' , ; ` | : exclude = 
[08:08:04.601] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.601] | : . ' , ; ` | : resignal = FALSE
[08:08:04.602] | : . ' , ; ` | : Number of conditions: 6
[08:08:04.601] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:04.602] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.602] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.602] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.602] | : . ' , ; ` | :  int 6
[08:08:04.603] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.603] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.603] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.603] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.603] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.603] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.603] | : . ' , ; ` | signalConditions() ... done
[08:08:04.604] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:04.604] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:04.604] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:04.604] | : . ' , ; ` signalConditions() ...
[08:08:04.604] | : . ' , ; ` | include = ‘immediateCondition’
[08:08:04.604] | : . ' , ; ` | exclude = 
[08:08:04.604] | : . ' , ; ` | resignal = FALSE
[08:08:04.605] | : . ' , ; ` | Number of conditions: 6
[08:08:04.605] | : . ' , ; ` |  int 6
[08:08:04.605] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.605] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.605] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.606] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.606] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.606] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.606] | : . ' , ; ` signalConditions() ... done
[08:08:04.606] | : . ' , ; ` check for misuse ...
[08:08:04.606] | : . ' , ; ` check for misuse ... done
[08:08:04.606] | : . ' , ; value() for MulticoreFuture (<unnamed-67>) ... done
[08:08:04.607] | : . ' , requestCore(..., workers = 2) ... done
[08:08:04.609] | : . ' , MulticoreFuture started
[08:08:04.610] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:04.610] | : . Launching futures ... done
[08:08:04.610] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:04.610] | : Using MulticoreFutureBackend ... done
[08:08:04.610] | run() for ‘Future’ (<unnamed-69>) ... done
[08:08:04.611] future(..., label = NULL) ... done
<environment: 0x55675bfd38f8> 
<environment: 0x55675c350218> 
[08:08:04.612] resolved() for environment ...
[08:08:04.612] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.613] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:04.613] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.613] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.613] | resolved() for list ...
[08:08:04.613] | : Number of elements: 4
[08:08:04.613] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.614] | : Number of futures: 4
[08:08:04.614] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:04.614] | : . ' , ; ` | New stack:
[08:08:04.614] | : readImmediateCondition() ...
[08:08:04.614] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.614] | : . Number of RDS files: 0
[08:08:04.614] | : . Returned conditions set:
[08:08:04.615] | : .  list()
[08:08:04.615] | : readImmediateCondition() ... done
[08:08:04.614] | : . ' , ; ` | List of 1
[08:08:04.614] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.614] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.614] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:04.614] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.614] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.614] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.614] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.614] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.618] | : . ' , ; ` | Old stack:
[08:08:04.618] | : . ' , ; ` | List of 1
[08:08:04.618] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.618] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.618] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.618] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.618] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.618] | : . ' , ; ` |     ...)  
[08:08:04.618] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.618] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.618] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.618] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.618] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.618] | : . ' , ; ` |     ...)  
[08:08:04.618] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.618] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.623] | : . ' , ; ` | Not identical
[08:08:04.623] | : . ' , ; ` | all.equal() for future ...
[08:08:04.625] | : readImmediateCondition() ...
[08:08:04.625] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.626] | : . Number of RDS files: 0
[08:08:04.626] | : . Returned conditions set:
[08:08:04.626] | : .  list()
[08:08:04.626] | : readImmediateCondition() ... done
[08:08:04.626] | resolved() for list ... done
[08:08:04.627] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE FALSE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:04.627] value() for MulticoreFuture (<unnamed-69>) ...
[08:08:04.628] | result() for MulticoreFuture ...
[08:08:04.623] | : . ' , ; ` | : List of 2
[08:08:04.623] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.623] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.623] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:04.623] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.623] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.623] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.623] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.623] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.623] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.623] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.623] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.623] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.623] | : . ' , ; ` | :     ...)  
[08:08:04.623] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.623] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.623] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.623] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.623] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.623] | : . ' , ; ` | :     ...)  
[08:08:04.623] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.631] | : . ' , ; ` | : Formals differ
[08:08:04.631] | : . ' , ; ` | all.equal() for future ... done
[08:08:04.632] | : . ' , ; ` | Future strategies differ at level 1
[08:08:04.632] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:04.632] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:04.632] | : . ' , ; ` List of future strategies:
[08:08:04.632] | : . ' , ; ` 1. sequential:
[08:08:04.632] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.632] | : . ' , ; `    - tweaked: FALSE
[08:08:04.632] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.633] | : . ' , ; ` List of 1
[08:08:04.633] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.633] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.633] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:04.633] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.633] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.633] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.633] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.633] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.636] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.637] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:04.637] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.637] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:04.637] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.637] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.637] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:04.637] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.637] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.637] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.637] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.640] | : . ' , ; ` | : init: TRUE
[08:08:04.640] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:04.640] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:04.640] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:04.641] | : . ' , ; ` | : .  list()
[08:08:04.641] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:04.641] | : . ' , ; ` | : .  list()
[08:08:04.642] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:04.642] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:04.642] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:04.642] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:04.643] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:04.643] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:04.644] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:04.644] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.644] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:04.644] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.644] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.648] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.648] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.648] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.648] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:04.648] | : . ' , ; ` | : New stack:
[08:08:04.648] | : . ' , ; ` | : List of 1
[08:08:04.648] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.648] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.648] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.648] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.648] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.648] | : . ' , ; ` | :     ...)  
[08:08:04.648] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.648] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.648] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.648] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.648] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.648] | : . ' , ; ` | :     ...)  
[08:08:04.648] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.648] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.653] | : . ' , ; ` | : Old stack:
[08:08:04.653] | : . ' , ; ` | : List of 1
[08:08:04.653] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.653] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.653] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.653] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.653] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.653] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.653] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.653] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675ab77260> 
[08:08:04.653] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.653] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.653] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.658] | : . ' , ; ` | : Not identical
[08:08:04.658] | : . ' , ; ` | : all.equal() for future ...
[08:08:04.659] | : . ' , ; ` | : . List of 2
[08:08:04.659] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.659] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.659] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.659] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.659] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.659] | : . ' , ; ` | : .     ...)  
[08:08:04.659] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.659] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.659] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:04.659] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.659] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.659] | : . ' , ; ` | : .     ...)  
[08:08:04.659] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.659] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.659] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.659] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.659] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.659] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.659] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.659] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.659] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675ab77260> 
[08:08:04.659] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.659] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.670] | : . ' , ; ` | : . Formals differ
[08:08:04.671] | : . ' , ; ` | : all.equal() for future ... done
[08:08:04.671] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:04.671] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:04.671] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:04.671] | : . ' , ; ` | List of future strategies:
[08:08:04.671] | : . ' , ; ` | 1. multicore:
[08:08:04.671] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:04.671] | : . ' , ; ` |    - tweaked: FALSE
[08:08:04.671] | : . ' , ; ` |    - call: plan(strategy)
[08:08:04.672] | : . ' , ; ` | List of 1
[08:08:04.672] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.672] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.672] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.672] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.672] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.672] | : . ' , ; ` |     ...)  
[08:08:04.672] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.672] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.672] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.672] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.672] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.672] | : . ' , ; ` |     ...)  
[08:08:04.672] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.672] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.676] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.676] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:04.676] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.676] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.677] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:04.677] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.677] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.677] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.678] | : readImmediateCondition() ...
[08:08:04.678] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.678] | : . Number of RDS files: 0
[08:08:04.678] | : . Returned conditions set:
[08:08:04.678] | : .  list()
[08:08:04.679] | : readImmediateCondition() ... done
[08:08:04.679] | : result() for MulticoreFuture ...
[08:08:04.679] | : result() for MulticoreFuture ... done
[08:08:04.679] | : signalConditions() ...
[08:08:04.680] | : . include = ‘immediateCondition’
[08:08:04.680] | : . exclude = 
[08:08:04.680] | : . resignal = FALSE
[08:08:04.680] | : . Number of conditions: 6
[08:08:04.680] | : .  int 6
[08:08:04.681] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.681] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.681] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.681] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.681] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.681] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.681] | : signalConditions() ... done
[08:08:04.682] | result() for MulticoreFuture ... done
[08:08:04.682] | result() for MulticoreFuture ...
[08:08:04.682] | result() for MulticoreFuture ... done
[08:08:04.682] | signalConditions() ...
[08:08:04.682] | : include = ‘immediateCondition’
[08:08:04.682] | : exclude = 
[08:08:04.682] | : resignal = FALSE
[08:08:04.682] | : Number of conditions: 6
[08:08:04.683] | :  int 6
[08:08:04.683] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.683] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.683] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.683] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.684] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.684] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.684] | signalConditions() ... done
[08:08:04.684] | relay stdout ...
[08:08:04.684] | relay stdout ... done
[08:08:04.684] | check for misuse ...
[08:08:04.684] | check for misuse ... done
[08:08:04.685] | relay conditions ...
[08:08:04.685] | : Future state: ‘finished’
[08:08:04.685] | : result() for MulticoreFuture ...
[08:08:04.685] | : result() for MulticoreFuture ... done
[08:08:04.685] | : signalConditions() ...
[08:08:04.685] | : . include = ‘condition’
[08:08:04.685] | : . exclude = ‘immediateCondition’
[08:08:04.685] | : . resignal = TRUE
[08:08:04.685] | : . Number of conditions: 6
[08:08:04.686] | : .  int 6
[08:08:04.686] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.686] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.610] | : . ' , attachPackages() ...
[08:08:04.686] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.687] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.610] | : . ' , ; packages: [n=1] ‘future’
[08:08:04.687] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.687] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.611] | : . ' , attachPackages() ... done
[08:08:04.687] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.687] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.611] | : . ' , attachPackages() ...
[08:08:04.687] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.687] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.611] | : . ' , ; packages: [n=0] 
[08:08:04.688] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.688] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.611] | : . ' , attachPackages() ... done
[08:08:04.688] | : signalConditions() ... done
[08:08:04.688] | relay conditions ... done
[08:08:04.688] value() for MulticoreFuture (<unnamed-69>) ... done
[08:08:04.689] value() for listenv ...
[08:08:04.689] | recursive: 0
[08:08:04.689] | reduce: FALSE
[08:08:04.690] | length: 4
[08:08:04.690] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:04.690] | Number of remaining objects: 4
[08:08:04.690] | checking value #1:
[08:08:04.690] | 'obj' is atomic
[08:08:04.690] | signalConditionsASAP(numeric, pos=1) ...
[08:08:04.691] | : nx: 4
[08:08:04.691] | : relay: TRUE
[08:08:04.691] | : stdout: TRUE
[08:08:04.691] | : signal: TRUE
[08:08:04.691] | : resignal: FALSE
[08:08:04.691] | : force: TRUE
[08:08:04.691] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:04.691] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:04.691] | : until=2
[08:08:04.692] | : relaying element #2
[08:08:04.692] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:04.692] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:04.692] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:04.692] | length: 3 (resolved future 1)
[08:08:04.692] value() for listenv ... done
[08:08:04.692] checking value #2:
[08:08:04.693] 'obj' is MulticoreFuture
[08:08:04.693] MulticoreFuture #2
[08:08:04.693] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:04.693] | nx: 4
[08:08:04.693] | relay: TRUE
[08:08:04.693] | stdout: TRUE
[08:08:04.693] | signal: TRUE
[08:08:04.693] | resignal: FALSE
[08:08:04.693] | force: TRUE
[08:08:04.694] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:04.694] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:04.694] | until=2
[08:08:04.694] | relaying element #2
[08:08:04.694] | value() for MulticoreFuture (<unnamed-67>) ...
[08:08:04.694] | : result() for MulticoreFuture ...
[08:08:04.694] | : result() for MulticoreFuture ... done
[08:08:04.695] | : result() for MulticoreFuture ...
[08:08:04.695] | : result() for MulticoreFuture ... done
[08:08:04.695] | : signalConditions() ...
[08:08:04.695] | : . include = ‘immediateCondition’
[08:08:04.695] | : . exclude = 
[08:08:04.695] | : . resignal = FALSE
[08:08:04.695] | : . Number of conditions: 6
[08:08:04.695] | : .  int 6
[08:08:04.696] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.696] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.696] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.696] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.696] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.697] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.697] | : signalConditions() ... done
[08:08:04.697] | : relay stdout ...
[08:08:04.697] | : relay stdout ... done
[08:08:04.697] | : check for misuse ...
[08:08:04.697] | : check for misuse ... done
[08:08:04.697] | value() for MulticoreFuture (<unnamed-67>) ... done
[08:08:04.698] | result() for MulticoreFuture ...
[08:08:04.698] | result() for MulticoreFuture ... done
[08:08:04.698] | signalConditions() ...
[08:08:04.698] | : include = ‘immediateCondition’
[08:08:04.698] | : exclude = 
[08:08:04.698] | : resignal = FALSE
[08:08:04.698] | : Number of conditions: 6
[08:08:04.699] | :  int 6
[08:08:04.699] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.699] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.699] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.699] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.700] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.700] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.700] | signalConditions() ... done
[08:08:04.700] | result() for MulticoreFuture ...
[08:08:04.700] | result() for MulticoreFuture ... done
[08:08:04.700] | signalConditions() ...
[08:08:04.700] | : include = ‘condition’
[08:08:04.701] | : exclude = ‘error’, ‘immediateCondition’
[08:08:04.701] | : resignal = TRUE
[08:08:04.701] | : Number of conditions: 6
[08:08:04.701] | :  int 6
[08:08:04.701] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.702] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.516] | : . ' , attachPackages() ...
[08:08:04.702] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.702] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.517] | : . ' , ; packages: [n=1] ‘future’
[08:08:04.702] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.702] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.517] | : . ' , attachPackages() ... done
[08:08:04.702] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.703] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.517] | : . ' , attachPackages() ...
[08:08:04.703] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.703] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.517] | : . ' , ; packages: [n=0] 
[08:08:04.703] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.703] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.518] | : . ' , attachPackages() ... done
[08:08:04.703] | signalConditions() ... done
[08:08:04.703] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:04.704] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:04.704] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:04.704] value(<MulticoreFuture>, ...) ...
[08:08:04.704] value(<MulticoreFuture>, ...) ... done
[08:08:04.704] value() for MulticoreFuture (<unnamed-67>) ...
[08:08:04.704] | result() for MulticoreFuture ...
[08:08:04.704] | result() for MulticoreFuture ... done
[08:08:04.704] | result() for MulticoreFuture ...
[08:08:04.705] | result() for MulticoreFuture ... done
[08:08:04.705] | signalConditions() ...
[08:08:04.705] | : include = ‘immediateCondition’
[08:08:04.705] | : exclude = 
[08:08:04.705] | : resignal = FALSE
[08:08:04.705] | : Number of conditions: 6
[08:08:04.705] | :  int 6
[08:08:04.706] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.706] | : already signaled, skipping
[08:08:04.706] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.706] | : already signaled, skipping
[08:08:04.706] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.707] | : already signaled, skipping
[08:08:04.707] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.707] | : already signaled, skipping
[08:08:04.707] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.707] | : already signaled, skipping
[08:08:04.707] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.707] | : already signaled, skipping
[08:08:04.708] | signalConditions() ... done
[08:08:04.708] | check for misuse ...
[08:08:04.708] | check for misuse ... done
[08:08:04.708] value() for MulticoreFuture (<unnamed-67>) ... done
[08:08:04.708] value: <numeric>
[08:08:04.708] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:04.709] | nx: 4
[08:08:04.709] | relay: TRUE
[08:08:04.709] | stdout: TRUE
[08:08:04.709] | signal: TRUE
[08:08:04.709] | resignal: FALSE
[08:08:04.709] | force: TRUE
[08:08:04.710] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:04.710] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:04.710] | until=3
[08:08:04.710] | relaying element #3
[08:08:04.710] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:04.710] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:04.710] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:04.711] resolve() for MulticoreFuture ...
[08:08:04.711] resolve() for MulticoreFuture ... done
[08:08:04.711] length: 2 (resolved future 2)

[08:08:04.711] checking value #3:
[08:08:04.711] 'obj' is MulticoreFuture
[08:08:04.712] readImmediateCondition() ...
[08:08:04.712] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.712] | Number of RDS files: 0
[08:08:04.712] | Returned conditions set:
[08:08:04.712] |  list()
[08:08:04.713] readImmediateCondition() ... done
[08:08:04.713] MulticoreFuture #3
[08:08:04.713] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:04.713] | nx: 4
[08:08:04.713] | relay: TRUE
[08:08:04.713] | stdout: TRUE
[08:08:04.713] | signal: TRUE
[08:08:04.714] | resignal: FALSE
[08:08:04.714] | force: TRUE
[08:08:04.714] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:04.714] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:04.714] | until=3
[08:08:04.714] | relaying element #3
[08:08:04.714] | value() for MulticoreFuture (<unnamed-68>) ...
[08:08:04.715] | : result() for MulticoreFuture ...
[08:08:04.715] | : . readImmediateCondition() ...
[08:08:04.715] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.716] | : . ' Number of RDS files: 0
[08:08:04.716] | : . ' Returned conditions set:
[08:08:04.716] | : . '  list()
[08:08:04.717] | : . readImmediateCondition() ... done
[08:08:04.717] | : . result() for MulticoreFuture ...
[08:08:04.717] | : . result() for MulticoreFuture ... done
[08:08:04.717] | : . signalConditions() ...
[08:08:04.718] | : . ' include = ‘immediateCondition’
[08:08:04.718] | : . ' exclude = 
[08:08:04.718] | : . ' resignal = FALSE
[08:08:04.718] | : . ' Number of conditions: 6
[08:08:04.718] | : . '  int 6
[08:08:04.719] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.719] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.719] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.720] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.720] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.720] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.720] | : . signalConditions() ... done
[08:08:04.720] | : result() for MulticoreFuture ... done
[08:08:04.721] | : result() for MulticoreFuture ...
[08:08:04.721] | : result() for MulticoreFuture ... done
[08:08:04.721] | : signalConditions() ...
[08:08:04.721] | : . include = ‘immediateCondition’
[08:08:04.721] | : . exclude = 
[08:08:04.722] | : . resignal = FALSE
[08:08:04.722] | : . Number of conditions: 6
[08:08:04.722] | : .  int 6
[08:08:04.723] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.723] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.723] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.723] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.725] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.725] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.725] | : signalConditions() ... done
[08:08:04.725] | : relay stdout ...
[08:08:04.726] | : relay stdout ... done
[08:08:04.726] | : check for misuse ...
[08:08:04.726] | : check for misuse ... done
[08:08:04.726] | value() for MulticoreFuture (<unnamed-68>) ... done
[08:08:04.726] | result() for MulticoreFuture ...
[08:08:04.726] | result() for MulticoreFuture ... done
[08:08:04.726] | signalConditions() ...
[08:08:04.726] | : include = ‘immediateCondition’
[08:08:04.727] | : exclude = 
[08:08:04.727] | : resignal = FALSE
[08:08:04.727] | : Number of conditions: 6
[08:08:04.727] | :  int 6
[08:08:04.727] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.727] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.728] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.728] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.728] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.728] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.728] | signalConditions() ... done
[08:08:04.728] | result() for MulticoreFuture ...
[08:08:04.728] | result() for MulticoreFuture ... done
[08:08:04.728] | signalConditions() ...
[08:08:04.729] | : include = ‘condition’
[08:08:04.729] | : exclude = ‘error’, ‘immediateCondition’
[08:08:04.729] | : resignal = TRUE
[08:08:04.729] | : Number of conditions: 6
[08:08:04.729] | :  int 6
[08:08:04.729] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.730] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.529] | : . ' , attachPackages() ...
[08:08:04.730] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.730] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.530] | : . ' , ; packages: [n=1] ‘future’
[08:08:04.730] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.730] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.530] | : . ' , attachPackages() ... done
[08:08:04.730] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.730] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.531] | : . ' , attachPackages() ...
[08:08:04.731] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.731] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.531] | : . ' , ; packages: [n=0] 
[08:08:04.731] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.731] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.531] | : . ' , attachPackages() ... done
[08:08:04.731] | signalConditions() ... done
[08:08:04.731] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:04.731] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.731] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:04.732] value(<MulticoreFuture>, ...) ...
[08:08:04.732] value(<MulticoreFuture>, ...) ... done
[08:08:04.732] value() for MulticoreFuture (<unnamed-68>) ...
[08:08:04.732] | result() for MulticoreFuture ...
[08:08:04.732] | result() for MulticoreFuture ... done
[08:08:04.732] | result() for MulticoreFuture ...
[08:08:04.732] | result() for MulticoreFuture ... done
[08:08:04.732] | signalConditions() ...
[08:08:04.732] | : include = ‘immediateCondition’
[08:08:04.733] | : exclude = 
[08:08:04.733] | : resignal = FALSE
[08:08:04.733] | : Number of conditions: 6
[08:08:04.733] | :  int 6
[08:08:04.733] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.733] | : already signaled, skipping
[08:08:04.734] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.734] | : already signaled, skipping
[08:08:04.734] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.734] | : already signaled, skipping
[08:08:04.734] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.734] | : already signaled, skipping
[08:08:04.734] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.734] | : already signaled, skipping
[08:08:04.734] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.735] | : already signaled, skipping
[08:08:04.735] | signalConditions() ... done
[08:08:04.735] | check for misuse ...
[08:08:04.735] | check for misuse ... done
[08:08:04.735] value() for MulticoreFuture (<unnamed-68>) ... done
[08:08:04.735] value: <NULL>
[08:08:04.735] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:04.736] | nx: 4
[08:08:04.736] | relay: TRUE
[08:08:04.736] | stdout: TRUE
[08:08:04.736] | signal: TRUE
[08:08:04.736] | resignal: FALSE
[08:08:04.736] | force: TRUE
[08:08:04.736] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:04.736] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.736] | until=4
[08:08:04.737] | relaying element #4
[08:08:04.737] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:04.737] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.737] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:04.737] resolve() for MulticoreFuture ...
[08:08:04.737] resolve() for MulticoreFuture ... done
[08:08:04.737] length: 1 (resolved future 3)

[08:08:04.737] checking value #4:
[08:08:04.738] 'obj' is atomic
[08:08:04.738] signalConditionsASAP(numeric, pos=4) ...
[08:08:04.738] | nx: 4
[08:08:04.738] | relay: TRUE
[08:08:04.738] | stdout: TRUE
[08:08:04.738] | signal: TRUE
[08:08:04.738] | resignal: FALSE
[08:08:04.738] | force: TRUE
[08:08:04.738] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:04.738] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.739] | until=4
[08:08:04.739] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:04.739] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.739] signalConditionsASAP(numeric, pos=4) ... done
[08:08:04.739] length: 0 (resolved future 4)

[08:08:04.739] Relaying remaining futures ...
[08:08:04.739] | signalConditionsASAP(NULL, pos=0) ...
[08:08:04.740] | : nx: 4
[08:08:04.740] | : relay: TRUE
[08:08:04.740] | : stdout: TRUE
[08:08:04.740] | : signal: TRUE
[08:08:04.740] | : resignal: FALSE
[08:08:04.740] | : force: TRUE
[08:08:04.740] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:04.740] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:04.740] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:04.741] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.741] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:04.741] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(2, 3, 1)
[08:08:04.743] future(..., label = NULL) ...
[08:08:04.743] | lazy: FALSE
[08:08:04.743] | stdout: TRUE
[08:08:04.743] | conditions: [n=1] ‘condition’
[08:08:04.743] | gc: FALSE
[08:08:04.743] | earlySignal: FALSE
[08:08:04.743] | getGlobalsAndPackages() ...
[08:08:04.744] | : Searching for globals ...
[08:08:04.745] | : . globals found: [0] 
[08:08:04.745] | : Searching for globals ... done
[08:08:04.745] | : globals: [0] <none>
[08:08:04.745] | : packages: [0] <none>
[08:08:04.745] | getGlobalsAndPackages() ... done
[08:08:04.746] | run() for ‘Future’ (<unnamed-70>) ...
[08:08:04.746] | : state: ‘created’
[08:08:04.746] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.746] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.746] | : Using MulticoreFutureBackend ...
[08:08:04.746] | : . Number of futures since start: 9 (9 created, 9 launched, 12 finished)
[08:08:04.747] | : . Launching futures ...
[08:08:04.747] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:04.747] | : . ' , getFutureData() ...
[08:08:04.747] | : . ' , ; getFutureCore() ...
[08:08:04.747] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:04.747] | : . ' , ; getFutureCore() ... done
[08:08:04.747] | : . ' , ; getFutureCapture() ...
[08:08:04.747] | : . ' , ; getFutureCapture() ... done
[08:08:04.748] | : . ' , ; getFutureContext() ...
[08:08:04.748] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.748] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:04.748] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.748] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:04.748] | : . ' , ; getFutureContext() ... done
[08:08:04.748] | : . ' , getFutureData() ... done
[08:08:04.749] | : . ' , requestCore(..., workers = 2) ...
[08:08:04.749] | : . ' , requestCore(..., workers = 2) ... done
[08:08:04.751] | : . ' , MulticoreFuture started
[08:08:04.752] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:04.752] | : . Launching futures ... done
[08:08:04.752] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:04.752] | : Using MulticoreFutureBackend ... done
[08:08:04.752] | run() for ‘Future’ (<unnamed-70>) ... done
[08:08:04.753] future(..., label = NULL) ... done
[08:08:04.753] future(..., label = NULL) ...
[08:08:04.753] | lazy: FALSE
[08:08:04.753] | stdout: TRUE
[08:08:04.753] | conditions: [n=1] ‘condition’
[08:08:04.753] | gc: FALSE
[08:08:04.753] | earlySignal: FALSE
[08:08:04.754] | getGlobalsAndPackages() ...
[08:08:04.754] | : Searching for globals ...
[08:08:04.755] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.755] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:04.755] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.755] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.756] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.756] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:04.756] | : . ' , ; ` | New stack:
[08:08:04.756] | : . globals found: [0] 
[08:08:04.756] | : Searching for globals ... done
[08:08:04.756] | : globals: [0] <none>
[08:08:04.757] | : packages: [0] <none>
[08:08:04.757] | getGlobalsAndPackages() ... done
[08:08:04.757] | run() for ‘Future’ (<unnamed-71>) ...
[08:08:04.757] | : state: ‘created’
[08:08:04.758] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.758] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.758] | : Using MulticoreFutureBackend ...
[08:08:04.758] | : . Number of futures since start: 10 (10 created, 10 launched, 12 finished)
[08:08:04.758] | : . Launching futures ...
[08:08:04.758] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:04.759] | : . ' , getFutureData() ...
[08:08:04.759] | : . ' , ; getFutureCore() ...
[08:08:04.759] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:04.759] | : . ' , ; getFutureCore() ... done
[08:08:04.759] | : . ' , ; getFutureCapture() ...
[08:08:04.759] | : . ' , ; getFutureCapture() ... done
[08:08:04.759] | : . ' , ; getFutureContext() ...
[08:08:04.760] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.760] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:04.756] | : . ' , ; ` | List of 1
[08:08:04.756] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.756] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.756] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:04.756] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.756] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.756] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.756] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.756] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.760] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.760] | : . ' , ; ` | Old stack:
[08:08:04.760] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:04.760] | : . ' , ; getFutureContext() ... done
[08:08:04.760] | : . ' , getFutureData() ... done
[08:08:04.761] | : . ' , requestCore(..., workers = 2) ...
[08:08:04.761] | : . ' , requestCore(..., workers = 2) ... done
[08:08:04.764] | : . ' , MulticoreFuture started
[08:08:04.764] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:04.760] | : . ' , ; ` | List of 1
[08:08:04.760] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.760] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.760] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.760] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.760] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.760] | : . ' , ; ` |     ...)  
[08:08:04.760] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.760] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.760] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.760] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.760] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.760] | : . ' , ; ` |     ...)  
[08:08:04.760] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.760] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.765] | : . Launching futures ... done
[08:08:04.765] | : . ' , ; ` | Not identical
[08:08:04.765] | : . ' , ; ` | all.equal() for future ...
[08:08:04.765] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:04.765] | : Using MulticoreFutureBackend ... done
[08:08:04.765] | run() for ‘Future’ (<unnamed-71>) ... done
[08:08:04.766] future(..., label = NULL) ... done
[08:08:04.767] future(..., label = NULL) ...
[08:08:04.767] | lazy: FALSE
[08:08:04.767] | stdout: TRUE
[08:08:04.767] | conditions: [n=1] ‘condition’
[08:08:04.768] | gc: FALSE
[08:08:04.768] | earlySignal: FALSE
[08:08:04.768] | getGlobalsAndPackages() ...
[08:08:04.768] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.768] | : Searching for globals ...
[08:08:04.768] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:04.769] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.769] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.770] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.770] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:04.770] | : . ' , ; ` | New stack:
[08:08:04.765] | : . ' , ; ` | : List of 2
[08:08:04.765] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.765] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.765] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:04.765] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.765] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.765] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.765] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.765] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.765] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.765] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.765] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.765] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.765] | : . ' , ; ` | :     ...)  
[08:08:04.765] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.765] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.765] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.765] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.765] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.765] | : . ' , ; ` | :     ...)  
[08:08:04.765] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.772] | : . ' , ; ` | : Formals differ
[08:08:04.773] | : . ' , ; ` | all.equal() for future ... done
[08:08:04.773] | : . ' , ; ` | Future strategies differ at level 1
[08:08:04.773] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:04.773] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:04.773] | : . ' , ; ` List of future strategies:
[08:08:04.773] | : . ' , ; ` 1. sequential:
[08:08:04.773] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.773] | : . ' , ; `    - tweaked: FALSE
[08:08:04.773] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.770] | : . ' , ; ` | List of 1
[08:08:04.770] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.770] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.770] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:04.770] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.770] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.770] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.770] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.770] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.776] | : . globals found: [1] ‘{’
[08:08:04.776] | : . ' , ; ` | Old stack:
[08:08:04.776] | : Searching for globals ... done
[08:08:04.776] | : Resolving globals: FALSE
[08:08:04.777] | : Search for packages associated with the globals ...
[08:08:04.777] | : . Packages associated with globals: [1] ‘base’
[08:08:04.774] | : . ' , ; ` List of 1
[08:08:04.774] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.774] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.774] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:04.774] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.774] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.774] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.774] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.774] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.778] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.778] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:04.778] | : . Packages: [1] ‘base’
[08:08:04.778] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.778] | : Search for packages associated with the globals ... done
[08:08:04.778] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:04.778] | : Packages after dropping 'base': [0] 
[08:08:04.778] | : globals: [0] 
[08:08:04.779] | : packages: [0] 
[08:08:04.779] | getGlobalsAndPackages() ... done
[08:08:04.779] | run() for ‘Future’ (<unnamed-72>) ...
[08:08:04.780] | : state: ‘created’
[08:08:04.780] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.780] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.780] | : Using MulticoreFutureBackend ...
[08:08:04.781] | : . Number of futures since start: 11 (11 created, 11 launched, 12 finished)
[08:08:04.781] | : . Launching futures ...
[08:08:04.778] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.778] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.778] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:04.778] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.778] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.778] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.778] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.781] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:04.781] | : . ' , ; ` | : init: TRUE
[08:08:04.781] | : . ' , getFutureData() ...
[08:08:04.781] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:04.782] | : . ' , ; getFutureCore() ...
[08:08:04.782] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:04.782] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:04.782] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:04.782] | : . ' , ; getFutureCore() ... done
[08:08:04.782] | : . ' , ; ` | : .  list()
[08:08:04.782] | : . ' , ; getFutureCapture() ...
[08:08:04.782] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:04.782] | : . ' , ; getFutureCapture() ... done
[08:08:04.782] | : . ' , ; ` | : .  list()
[08:08:04.783] | : . ' , ; getFutureContext() ...
[08:08:04.783] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:04.783] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.776] | : . ' , ; ` | List of 1
[08:08:04.776] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.776] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.776] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.776] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.776] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.776] | : . ' , ; ` |     ...)  
[08:08:04.776] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.776] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.776] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.776] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.776] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.776] | : . ' , ; ` |     ...)  
[08:08:04.776] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.776] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.783] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:04.783] | : . ' , ; ` | Not identical
[08:08:04.783] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.784] | : . ' , ; ` | all.equal() for future ...
[08:08:04.784] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:04.784] | : . ' , ; getFutureContext() ... done
[08:08:04.784] | : . ' , getFutureData() ... done
[08:08:04.783] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:04.783] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:04.783] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:04.784] | : . ' , requestCore(..., workers = 2) ...
[08:08:04.785] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:04.785] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:04.785] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:04.785] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.785] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:04.785] | : . ' , ; Poll #1 (0): usedCores() = 2, workers = 2
[08:08:04.785] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.786] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.788] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.789] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.789] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.789] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:04.789] | : . ' , ; ` | : New stack:
[08:08:04.784] | : . ' , ; ` | : List of 2
[08:08:04.784] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.784] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.784] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:04.784] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.784] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.784] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.784] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.784] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.784] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.784] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.784] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.784] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.784] | : . ' , ; ` | :     ...)  
[08:08:04.784] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.784] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.784] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.784] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.784] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.784] | : . ' , ; ` | :     ...)  
[08:08:04.784] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.792] | : . ' , ; ` | : Formals differ
[08:08:04.792] | : . ' , ; ` | all.equal() for future ... done
[08:08:04.792] | : . ' , ; ` | Future strategies differ at level 1
[08:08:04.793] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:04.793] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:04.793] | : . ' , ; ` List of future strategies:
[08:08:04.793] | : . ' , ; ` 1. sequential:
[08:08:04.793] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.793] | : . ' , ; `    - tweaked: FALSE
[08:08:04.793] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.789] | : . ' , ; ` | : List of 1
[08:08:04.789] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.789] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.789] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.789] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.789] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.789] | : . ' , ; ` | :     ...)  
[08:08:04.789] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.789] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.789] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.789] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.789] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.789] | : . ' , ; ` | :     ...)  
[08:08:04.789] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.789] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.794] | : . ' , ; ` | : Old stack:
[08:08:04.794] | : . ' , ; ` List of 1
[08:08:04.794] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.794] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.794] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:04.794] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.794] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.794] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.794] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.794] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.797] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.798] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:04.798] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.798] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:04.794] | : . ' , ; ` | : List of 1
[08:08:04.794] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.794] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.794] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.794] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.794] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.794] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.794] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.794] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675ca24920> 
[08:08:04.794] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.794] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.794] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.799] | : . ' , ; ` | : Not identical
[08:08:04.799] | : . ' , ; ` | : all.equal() for future ...
[08:08:04.798] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.798] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.798] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:04.798] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.798] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.798] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.798] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.801] | : . ' , ; ` | : init: TRUE
[08:08:04.801] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:04.801] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:04.801] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:04.802] | : . ' , ; ` | : .  list()
[08:08:04.802] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:04.802] | : . ' , ; ` | : .  list()
[08:08:04.802] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:04.803] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:04.803] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:04.803] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:04.804] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:04.804] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:04.805] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:04.805] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.805] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:04.805] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.805] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.806] | : . ' , ; readImmediateCondition() ...
[08:08:04.806] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.807] | : . ' , ; ` Number of RDS files: 0
[08:08:04.807] | : . ' , ; ` Returned conditions set:
[08:08:04.799] | : . ' , ; ` | : . List of 2
[08:08:04.799] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.799] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.799] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.799] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.799] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.799] | : . ' , ; ` | : .     ...)  
[08:08:04.799] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.799] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.799] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:04.799] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.799] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.799] | : . ' , ; ` | : .     ...)  
[08:08:04.799] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.799] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.799] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.799] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.799] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.799] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.799] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.799] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.799] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675ca24920> 
[08:08:04.799] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.799] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.807] | : . ' , ; `  list()
[08:08:04.808] | : . ' , ; readImmediateCondition() ... done
[08:08:04.808] | : . ' , ; ` | : . Formals differ
[08:08:04.808] | : . ' , ; ` | : all.equal() for future ... done
[08:08:04.808] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:04.808] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:04.809] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:04.809] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.809] | : . ' , ; ` | List of future strategies:
[08:08:04.809] | : . ' , ; ` | 1. multicore:
[08:08:04.809] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:04.809] | : . ' , ; ` |    - tweaked: FALSE
[08:08:04.809] | : . ' , ; ` |    - call: plan(strategy)
[08:08:04.809] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.809] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.810] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:04.810] | : . ' , ; ` | : New stack:
[08:08:04.809] | : . ' , ; ` | List of 1
[08:08:04.809] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.809] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.809] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.809] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.809] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.809] | : . ' , ; ` |     ...)  
[08:08:04.809] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.809] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.809] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.809] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.809] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.809] | : . ' , ; ` |     ...)  
[08:08:04.809] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.809] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.814] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.815] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:04.815] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.815] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.810] | : . ' , ; ` | : List of 1
[08:08:04.810] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.810] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.810] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.810] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.810] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.810] | : . ' , ; ` | :     ...)  
[08:08:04.810] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.810] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.810] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.810] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.810] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.810] | : . ' , ; ` | :     ...)  
[08:08:04.810] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.810] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.815] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:04.815] | : . ' , ; ` | : Old stack:
[08:08:04.815] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.815] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.816] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.818] | : . ' , ; readImmediateCondition() ...
[08:08:04.818] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.819] | : . ' , ; ` Number of RDS files: 0
[08:08:04.819] | : . ' , ; ` Returned conditions set:
[08:08:04.819] | : . ' , ; `  list()
[08:08:04.820] | : . ' , ; readImmediateCondition() ... done
[08:08:04.820] | : . ' , ; Poll #2 (0.04 secs): usedCores() = 2, workers = 2
[08:08:04.815] | : . ' , ; ` | : List of 1
[08:08:04.815] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.815] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.815] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.815] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.815] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.815] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.815] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.815] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b291f78> 
[08:08:04.815] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.815] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.815] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.821] | : . ' , ; ` | : Not identical
[08:08:04.821] | : . ' , ; ` | : all.equal() for future ...
[08:08:04.822] | : . ' , ; ` | : . List of 2
[08:08:04.822] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.822] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.822] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.822] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.822] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.822] | : . ' , ; ` | : .     ...)  
[08:08:04.822] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.822] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.822] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:04.822] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.822] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.822] | : . ' , ; ` | : .     ...)  
[08:08:04.822] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.822] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.822] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.822] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.822] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.822] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.822] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.822] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.822] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b291f78> 
[08:08:04.822] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.822] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.831] | : . ' , ; ` | : . Formals differ
[08:08:04.831] | : . ' , ; ` | : all.equal() for future ... done
[08:08:04.831] | : . ' , ; readImmediateCondition() ...
[08:08:04.831] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:04.831] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.831] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:04.832] | : . ' , ; ` Number of RDS files: 0
[08:08:04.832] | : . ' , ; ` Returned conditions set:
[08:08:04.832] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:04.832] | : . ' , ; `  list()
[08:08:04.832] | : . ' , ; readImmediateCondition() ... done
[08:08:04.832] | : . ' , ; ` | List of future strategies:
[08:08:04.832] | : . ' , ; ` | 1. multicore:
[08:08:04.832] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:04.832] | : . ' , ; ` |    - tweaked: FALSE
[08:08:04.832] | : . ' , ; ` |    - call: plan(strategy)
[08:08:04.833] | : . ' , ; value() for MulticoreFuture (<unnamed-70>) ...
[08:08:04.833] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:04.834] | : . ' , ; ` | readImmediateCondition() ...
[08:08:04.834] | : . ' , ; ` | : Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.835] | : . ' , ; ` | : Number of RDS files: 0
[08:08:04.835] | : . ' , ; ` | : Returned conditions set:
[08:08:04.835] | : . ' , ; ` | :  list()
[08:08:04.836] | : . ' , ; ` | readImmediateCondition() ... done
[08:08:04.836] | : . ' , ; ` | result() for MulticoreFuture ...
[08:08:04.836] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:08:04.837] | : . ' , ; ` | signalConditions() ...
[08:08:04.837] | : . ' , ; ` | : include = ‘immediateCondition’
[08:08:04.837] | : . ' , ; ` | : exclude = 
[08:08:04.837] | : . ' , ; ` | : resignal = FALSE
[08:08:04.837] | : . ' , ; ` | : Number of conditions: 6
[08:08:04.838] | : . ' , ; ` | :  int 6
[08:08:04.839] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.839] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.839] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.839] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.839] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.840] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.840] | : . ' , ; ` | signalConditions() ... done
[08:08:04.840] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:04.840] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:04.840] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:04.841] | : . ' , ; ` signalConditions() ...
[08:08:04.841] | : . ' , ; ` | include = ‘immediateCondition’
[08:08:04.841] | : . ' , ; ` | exclude = 
[08:08:04.841] | : . ' , ; ` | resignal = FALSE
[08:08:04.841] | : . ' , ; ` | Number of conditions: 6
[08:08:04.842] | : . ' , ; ` |  int 6
[08:08:04.842] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.842] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.843] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.843] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.843] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.843] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.844] | : . ' , ; ` signalConditions() ... done
[08:08:04.844] | : . ' , ; ` check for misuse ...
[08:08:04.833] | : . ' , ; ` | List of 1
[08:08:04.833] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.833] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.833] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.833] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.833] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.833] | : . ' , ; ` |     ...)  
[08:08:04.833] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.833] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.833] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.833] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.833] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.833] | : . ' , ; ` |     ...)  
[08:08:04.833] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.833] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.844] | : . ' , ; ` check for misuse ... done
[08:08:04.844] | : . ' , ; value() for MulticoreFuture (<unnamed-70>) ... done
[08:08:04.844] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.844] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:04.845] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.845] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.845] | : . ' , requestCore(..., workers = 2) ... done
[08:08:04.845] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:04.845] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.846] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.846] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.848] | : . ' , MulticoreFuture started
[08:08:04.848] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:04.848] | : . Launching futures ... done
[08:08:04.848] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:04.849] | : Using MulticoreFutureBackend ... done
[08:08:04.849] | run() for ‘Future’ (<unnamed-72>) ... done
[08:08:04.849] future(..., label = NULL) ... done
<environment: 0x55675c9f7ec8> 
<environment: 0x55675c5ed710> 
[08:08:04.851] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.851] resolved() for environment ...
[08:08:04.851] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:04.851] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.852] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.852] | resolved() for list ...
[08:08:04.852] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.852] | : Number of elements: 4
[08:08:04.852] | : Number of futures: 4
[08:08:04.852] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:04.852] | : . ' , ; ` | New stack:
[08:08:04.853] | : readImmediateCondition() ...
[08:08:04.853] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.853] | : . Number of RDS files: 0
[08:08:04.853] | : . Returned conditions set:
[08:08:04.853] | : .  list()
[08:08:04.854] | : readImmediateCondition() ... done
[08:08:04.853] | : . ' , ; ` | List of 1
[08:08:04.853] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.853] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.853] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:04.853] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.853] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.853] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.853] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.853] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.857] | : . ' , ; ` | Old stack:
[08:08:04.857] | : . ' , ; ` | List of 1
[08:08:04.857] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.857] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.857] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.857] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.857] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.857] | : . ' , ; ` |     ...)  
[08:08:04.857] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.857] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.857] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.857] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.857] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.857] | : . ' , ; ` |     ...)  
[08:08:04.857] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.857] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.862] | : . ' , ; ` | Not identical
[08:08:04.862] | : . ' , ; ` | all.equal() for future ...
[08:08:04.864] | : readImmediateCondition() ...
[08:08:04.864] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.865] | : . Number of RDS files: 0
[08:08:04.865] | : . Returned conditions set:
[08:08:04.865] | : .  list()
[08:08:04.865] | : readImmediateCondition() ... done
[08:08:04.865] | resolved() for list ... done
[08:08:04.866] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE FALSE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:04.867] value() for MulticoreFuture (<unnamed-72>) ...
[08:08:04.867] | result() for MulticoreFuture ...
[08:08:04.862] | : . ' , ; ` | : List of 2
[08:08:04.862] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.862] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.862] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:04.862] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.862] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.862] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.862] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.862] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.862] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.862] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.862] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.862] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.862] | : . ' , ; ` | :     ...)  
[08:08:04.862] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.862] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.862] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.862] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.862] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.862] | : . ' , ; ` | :     ...)  
[08:08:04.862] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.870] | : . ' , ; ` | : Formals differ
[08:08:04.871] | : . ' , ; ` | all.equal() for future ... done
[08:08:04.871] | : . ' , ; ` | Future strategies differ at level 1
[08:08:04.871] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:04.871] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:04.871] | : . ' , ; ` List of future strategies:
[08:08:04.871] | : . ' , ; ` 1. sequential:
[08:08:04.871] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.871] | : . ' , ; `    - tweaked: FALSE
[08:08:04.871] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.872] | : . ' , ; ` List of 1
[08:08:04.872] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.872] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.872] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:04.872] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.872] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.872] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.872] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.872] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.876] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.876] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:04.876] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.877] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:04.877] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.877] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.877] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:04.877] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.877] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.877] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.877] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.880] | : . ' , ; ` | : init: TRUE
[08:08:04.880] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:04.880] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:04.880] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:04.880] | : . ' , ; ` | : .  list()
[08:08:04.881] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:04.881] | : . ' , ; ` | : .  list()
[08:08:04.882] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:04.882] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:04.882] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:04.882] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:04.884] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:04.884] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:04.884] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:04.884] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.885] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:04.885] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.885] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.891] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.891] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.891] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.892] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:04.892] | : . ' , ; ` | : New stack:
[08:08:04.892] | : . ' , ; ` | : List of 1
[08:08:04.892] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.892] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.892] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.892] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.892] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.892] | : . ' , ; ` | :     ...)  
[08:08:04.892] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.892] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.892] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:04.892] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.892] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.892] | : . ' , ; ` | :     ...)  
[08:08:04.892] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.892] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.896] | : . ' , ; ` | : Old stack:
[08:08:04.896] | : . ' , ; ` | : List of 1
[08:08:04.896] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.896] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.896] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.896] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.896] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.896] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.896] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.896] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758c77650> 
[08:08:04.896] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.896] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.896] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.901] | : . ' , ; ` | : Not identical
[08:08:04.901] | : . ' , ; ` | : all.equal() for future ...
[08:08:04.901] | : . ' , ; ` | : . List of 2
[08:08:04.901] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.901] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.901] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.901] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.901] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.901] | : . ' , ; ` | : .     ...)  
[08:08:04.901] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.901] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.901] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:04.901] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.901] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.901] | : . ' , ; ` | : .     ...)  
[08:08:04.901] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.901] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.901] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.901] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.901] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.901] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.901] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.901] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.901] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758c77650> 
[08:08:04.901] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.901] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.909] | : . ' , ; ` | : . Formals differ
[08:08:04.909] | : . ' , ; ` | : all.equal() for future ... done
[08:08:04.909] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:04.909] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:04.909] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:04.909] | : . ' , ; ` | List of future strategies:
[08:08:04.909] | : . ' , ; ` | 1. multicore:
[08:08:04.909] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:04.909] | : . ' , ; ` |    - tweaked: FALSE
[08:08:04.909] | : . ' , ; ` |    - call: plan(strategy)
[08:08:04.910] | : . ' , ; ` | List of 1
[08:08:04.910] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:04.910] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:04.910] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:04.910] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.910] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.910] | : . ' , ; ` |     ...)  
[08:08:04.910] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.910] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.910] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:04.910] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:04.910] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:04.910] | : . ' , ; ` |     ...)  
[08:08:04.910] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:04.910] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.914] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:04.914] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:04.915] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.915] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.915] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:04.915] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.915] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.915] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.916] | : readImmediateCondition() ...
[08:08:04.916] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.916] | : . Number of RDS files: 0
[08:08:04.917] | : . Returned conditions set:
[08:08:04.917] | : .  list()
[08:08:04.917] | : readImmediateCondition() ... done
[08:08:04.918] | : result() for MulticoreFuture ...
[08:08:04.918] | : result() for MulticoreFuture ... done
[08:08:04.918] | : signalConditions() ...
[08:08:04.918] | : . include = ‘immediateCondition’
[08:08:04.918] | : . exclude = 
[08:08:04.918] | : . resignal = FALSE
[08:08:04.918] | : . Number of conditions: 6
[08:08:04.919] | : .  int 6
[08:08:04.920] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.920] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.920] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.920] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.920] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.921] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.921] | : signalConditions() ... done
[08:08:04.921] | result() for MulticoreFuture ... done
[08:08:04.921] | result() for MulticoreFuture ...
[08:08:04.921] | result() for MulticoreFuture ... done
[08:08:04.922] | signalConditions() ...
[08:08:04.922] | : include = ‘immediateCondition’
[08:08:04.922] | : exclude = 
[08:08:04.922] | : resignal = FALSE
[08:08:04.923] | : Number of conditions: 6
[08:08:04.923] | :  int 6
[08:08:04.924] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.924] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.924] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.924] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.924] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.925] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.925] | signalConditions() ... done
[08:08:04.925] | relay stdout ...
[08:08:04.925] | relay stdout ... done
[08:08:04.925] | check for misuse ...
[08:08:04.926] | check for misuse ... done
[08:08:04.926] | relay conditions ...
[08:08:04.926] | : Future state: ‘finished’
[08:08:04.926] | : result() for MulticoreFuture ...
[08:08:04.926] | : result() for MulticoreFuture ... done
[08:08:04.927] | : signalConditions() ...
[08:08:04.927] | : . include = ‘condition’
[08:08:04.927] | : . exclude = ‘immediateCondition’
[08:08:04.927] | : . resignal = TRUE
[08:08:04.927] | : . Number of conditions: 6
[08:08:04.928] | : .  int 6
[08:08:04.928] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.929] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.849] | : . ' , attachPackages() ...
[08:08:04.929] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.929] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.849] | : . ' , ; packages: [n=1] ‘future’
[08:08:04.929] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.930] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.849] | : . ' , attachPackages() ... done
[08:08:04.930] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.930] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.850] | : . ' , attachPackages() ...
[08:08:04.930] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.931] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.850] | : . ' , ; packages: [n=0] 
[08:08:04.931] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.931] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.850] | : . ' , attachPackages() ... done
[08:08:04.931] | : signalConditions() ... done
[08:08:04.932] | relay conditions ... done
[08:08:04.932] value() for MulticoreFuture (<unnamed-72>) ... done
[08:08:04.932] value() for listenv ...
[08:08:04.933] | recursive: 0
[08:08:04.933] | reduce: FALSE
[08:08:04.934] | length: 4
[08:08:04.934] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:04.935] | Number of remaining objects: 4
[08:08:04.935] | checking value #1:
[08:08:04.935] | 'obj' is atomic
[08:08:04.935] | signalConditionsASAP(numeric, pos=1) ...
[08:08:04.936] | : nx: 4
[08:08:04.936] | : relay: TRUE
[08:08:04.936] | : stdout: TRUE
[08:08:04.936] | : signal: TRUE
[08:08:04.936] | : resignal: FALSE
[08:08:04.936] | : force: TRUE
[08:08:04.936] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:04.936] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:04.937] | : until=2
[08:08:04.937] | : relaying element #2
[08:08:04.937] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:04.937] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:04.937] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:04.938] | length: 3 (resolved future 1)
[08:08:04.938] value() for listenv ... done
[08:08:04.938] checking value #2:
[08:08:04.938] 'obj' is MulticoreFuture
[08:08:04.938] MulticoreFuture #2
[08:08:04.938] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:04.938] | nx: 4
[08:08:04.939] | relay: TRUE
[08:08:04.939] | stdout: TRUE
[08:08:04.939] | signal: TRUE
[08:08:04.939] | resignal: FALSE
[08:08:04.939] | force: TRUE
[08:08:04.939] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:04.939] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:04.939] | until=2
[08:08:04.940] | relaying element #2
[08:08:04.940] | value() for MulticoreFuture (<unnamed-70>) ...
[08:08:04.940] | : result() for MulticoreFuture ...
[08:08:04.940] | : result() for MulticoreFuture ... done
[08:08:04.940] | : result() for MulticoreFuture ...
[08:08:04.940] | : result() for MulticoreFuture ... done
[08:08:04.940] | : signalConditions() ...
[08:08:04.941] | : . include = ‘immediateCondition’
[08:08:04.941] | : . exclude = 
[08:08:04.941] | : . resignal = FALSE
[08:08:04.941] | : . Number of conditions: 6
[08:08:04.941] | : .  int 6
[08:08:04.942] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.942] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.942] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.942] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.942] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.942] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.942] | : signalConditions() ... done
[08:08:04.943] | : relay stdout ...
[08:08:04.943] | : relay stdout ... done
[08:08:04.943] | : check for misuse ...
[08:08:04.943] | : check for misuse ... done
[08:08:04.943] | value() for MulticoreFuture (<unnamed-70>) ... done
[08:08:04.943] | result() for MulticoreFuture ...
[08:08:04.943] | result() for MulticoreFuture ... done
[08:08:04.943] | signalConditions() ...
[08:08:04.944] | : include = ‘immediateCondition’
[08:08:04.944] | : exclude = 
[08:08:04.944] | : resignal = FALSE
[08:08:04.944] | : Number of conditions: 6
[08:08:04.944] | :  int 6
[08:08:04.945] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.945] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.945] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.945] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.945] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.945] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.946] | signalConditions() ... done
[08:08:04.946] | result() for MulticoreFuture ...
[08:08:04.946] | result() for MulticoreFuture ... done
[08:08:04.946] | signalConditions() ...
[08:08:04.946] | : include = ‘condition’
[08:08:04.946] | : exclude = ‘error’, ‘immediateCondition’
[08:08:04.946] | : resignal = TRUE
[08:08:04.947] | : Number of conditions: 6
[08:08:04.947] | :  int 6
[08:08:04.947] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.947] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.752] | : . ' , attachPackages() ...
[08:08:04.947] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.948] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.753] | : . ' , ; packages: [n=1] ‘future’
[08:08:04.948] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.948] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.753] | : . ' , attachPackages() ... done
[08:08:04.950] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.950] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.753] | : . ' , attachPackages() ...
[08:08:04.950] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.951] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.753] | : . ' , ; packages: [n=0] 
[08:08:04.951] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.951] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.754] | : . ' , attachPackages() ... done
[08:08:04.951] | signalConditions() ... done
[08:08:04.951] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:04.951] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:04.951] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:04.952] value(<MulticoreFuture>, ...) ...
[08:08:04.952] value(<MulticoreFuture>, ...) ... done
[08:08:04.952] value() for MulticoreFuture (<unnamed-70>) ...
[08:08:04.952] | result() for MulticoreFuture ...
[08:08:04.952] | result() for MulticoreFuture ... done
[08:08:04.952] | result() for MulticoreFuture ...
[08:08:04.952] | result() for MulticoreFuture ... done
[08:08:04.952] | signalConditions() ...
[08:08:04.952] | : include = ‘immediateCondition’
[08:08:04.953] | : exclude = 
[08:08:04.953] | : resignal = FALSE
[08:08:04.953] | : Number of conditions: 6
[08:08:04.953] | :  int 6
[08:08:04.954] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.954] | : already signaled, skipping
[08:08:04.954] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.954] | : already signaled, skipping
[08:08:04.954] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.954] | : already signaled, skipping
[08:08:04.954] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.954] | : already signaled, skipping
[08:08:04.955] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.955] | : already signaled, skipping
[08:08:04.955] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.955] | : already signaled, skipping
[08:08:04.955] | signalConditions() ... done
[08:08:04.955] | check for misuse ...
[08:08:04.955] | check for misuse ... done
[08:08:04.956] value() for MulticoreFuture (<unnamed-70>) ... done
[08:08:04.956] value: <numeric>
[08:08:04.956] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:04.956] | nx: 4
[08:08:04.956] | relay: TRUE
[08:08:04.956] | stdout: TRUE
[08:08:04.956] | signal: TRUE
[08:08:04.956] | resignal: FALSE
[08:08:04.957] | force: TRUE
[08:08:04.957] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:04.957] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:04.957] | until=3
[08:08:04.957] | relaying element #3
[08:08:04.957] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:04.957] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:04.957] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:04.958] resolve() for MulticoreFuture ...
[08:08:04.958] resolve() for MulticoreFuture ... done
[08:08:04.958] length: 2 (resolved future 2)

[08:08:04.958] checking value #3:
[08:08:04.958] 'obj' is MulticoreFuture
[08:08:04.958] readImmediateCondition() ...
[08:08:04.959] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.959] | Number of RDS files: 0
[08:08:04.959] | Returned conditions set:
[08:08:04.959] |  list()
[08:08:04.959] readImmediateCondition() ... done
[08:08:04.960] MulticoreFuture #3
[08:08:04.960] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:04.960] | nx: 4
[08:08:04.960] | relay: TRUE
[08:08:04.960] | stdout: TRUE
[08:08:04.960] | signal: TRUE
[08:08:04.960] | resignal: FALSE
[08:08:04.960] | force: TRUE
[08:08:04.961] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:04.961] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:04.961] | until=3
[08:08:04.961] | relaying element #3
[08:08:04.961] | value() for MulticoreFuture (<unnamed-71>) ...
[08:08:04.961] | : result() for MulticoreFuture ...
[08:08:04.962] | : . readImmediateCondition() ...
[08:08:04.962] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:04.962] | : . ' Number of RDS files: 0
[08:08:04.962] | : . ' Returned conditions set:
[08:08:04.962] | : . '  list()
[08:08:04.963] | : . readImmediateCondition() ... done
[08:08:04.963] | : . result() for MulticoreFuture ...
[08:08:04.963] | : . result() for MulticoreFuture ... done
[08:08:04.963] | : . signalConditions() ...
[08:08:04.964] | : . ' include = ‘immediateCondition’
[08:08:04.964] | : . ' exclude = 
[08:08:04.964] | : . ' resignal = FALSE
[08:08:04.964] | : . ' Number of conditions: 6
[08:08:04.964] | : . '  int 6
[08:08:04.965] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.965] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.965] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.965] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.965] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.965] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.965] | : . signalConditions() ... done
[08:08:04.966] | : result() for MulticoreFuture ... done
[08:08:04.966] | : result() for MulticoreFuture ...
[08:08:04.966] | : result() for MulticoreFuture ... done
[08:08:04.966] | : signalConditions() ...
[08:08:04.966] | : . include = ‘immediateCondition’
[08:08:04.966] | : . exclude = 
[08:08:04.966] | : . resignal = FALSE
[08:08:04.967] | : . Number of conditions: 6
[08:08:04.967] | : .  int 6
[08:08:04.967] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.967] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.967] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.968] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.968] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.968] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.968] | : signalConditions() ... done
[08:08:04.968] | : relay stdout ...
[08:08:04.968] | : relay stdout ... done
[08:08:04.968] | : check for misuse ...
[08:08:04.968] | : check for misuse ... done
[08:08:04.969] | value() for MulticoreFuture (<unnamed-71>) ... done
[08:08:04.969] | result() for MulticoreFuture ...
[08:08:04.969] | result() for MulticoreFuture ... done
[08:08:04.969] | signalConditions() ...
[08:08:04.969] | : include = ‘immediateCondition’
[08:08:04.969] | : exclude = 
[08:08:04.969] | : resignal = FALSE
[08:08:04.969] | : Number of conditions: 6
[08:08:04.970] | :  int 6
[08:08:04.970] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.970] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.970] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.970] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.970] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.971] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.971] | signalConditions() ... done
[08:08:04.971] | result() for MulticoreFuture ...
[08:08:04.971] | result() for MulticoreFuture ... done
[08:08:04.971] | signalConditions() ...
[08:08:04.971] | : include = ‘condition’
[08:08:04.971] | : exclude = ‘error’, ‘immediateCondition’
[08:08:04.971] | : resignal = TRUE
[08:08:04.972] | : Number of conditions: 6
[08:08:04.972] | :  int 6
[08:08:04.972] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.972] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.765] | : . ' , attachPackages() ...
[08:08:04.972] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.972] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.765] | : . ' , ; packages: [n=1] ‘future’
[08:08:04.973] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.973] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.766] | : . ' , attachPackages() ... done
[08:08:04.973] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.973] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.766] | : . ' , attachPackages() ...
[08:08:04.973] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.973] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.766] | : . ' , ; packages: [n=0] 
[08:08:04.974] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.974] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.767] | : . ' , attachPackages() ... done
[08:08:04.974] | signalConditions() ... done
[08:08:04.974] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:04.974] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.974] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:04.974] value(<MulticoreFuture>, ...) ...
[08:08:04.974] value(<MulticoreFuture>, ...) ... done
[08:08:04.974] value() for MulticoreFuture (<unnamed-71>) ...
[08:08:04.975] | result() for MulticoreFuture ...
[08:08:04.975] | result() for MulticoreFuture ... done
[08:08:04.975] | result() for MulticoreFuture ...
[08:08:04.975] | result() for MulticoreFuture ... done
[08:08:04.975] | signalConditions() ...
[08:08:04.975] | : include = ‘immediateCondition’
[08:08:04.975] | : exclude = 
[08:08:04.975] | : resignal = FALSE
[08:08:04.976] | : Number of conditions: 6
[08:08:04.976] | :  int 6
[08:08:04.976] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.976] | : already signaled, skipping
[08:08:04.976] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.977] | : already signaled, skipping
[08:08:04.977] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.977] | : already signaled, skipping
[08:08:04.977] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.977] | : already signaled, skipping
[08:08:04.977] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.977] | : already signaled, skipping
[08:08:04.977] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.977] | : already signaled, skipping
[08:08:04.977] | signalConditions() ... done
[08:08:04.978] | check for misuse ...
[08:08:04.978] | check for misuse ... done
[08:08:04.978] value() for MulticoreFuture (<unnamed-71>) ... done
[08:08:04.978] value: <NULL>
[08:08:04.978] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:04.978] | nx: 4
[08:08:04.978] | relay: TRUE
[08:08:04.978] | stdout: TRUE
[08:08:04.979] | signal: TRUE
[08:08:04.979] | resignal: FALSE
[08:08:04.979] | force: TRUE
[08:08:04.979] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:04.979] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.979] | until=4
[08:08:04.979] | relaying element #4
[08:08:04.979] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:04.979] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.980] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:04.980] resolve() for MulticoreFuture ...
[08:08:04.980] resolve() for MulticoreFuture ... done
[08:08:04.980] length: 1 (resolved future 3)

[08:08:04.980] checking value #4:
[08:08:04.980] 'obj' is atomic
[08:08:04.980] signalConditionsASAP(numeric, pos=4) ...
[08:08:04.980] | nx: 4
[08:08:04.981] | relay: TRUE
[08:08:04.981] | stdout: TRUE
[08:08:04.981] | signal: TRUE
[08:08:04.981] | resignal: FALSE
[08:08:04.981] | force: TRUE
[08:08:04.981] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:04.981] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.981] | until=4
[08:08:04.981] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:04.981] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.982] signalConditionsASAP(numeric, pos=4) ... done
[08:08:04.982] length: 0 (resolved future 4)

[08:08:04.982] Relaying remaining futures ...
[08:08:04.982] | signalConditionsASAP(NULL, pos=0) ...
[08:08:04.982] | : nx: 4
[08:08:04.982] | : relay: TRUE
[08:08:04.982] | : stdout: TRUE
[08:08:04.983] | : signal: TRUE
[08:08:04.983] | : resignal: FALSE
[08:08:04.983] | : force: TRUE
[08:08:04.983] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:04.983] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:04.983] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:04.983] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:04.983] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:04.983] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(2, 1, 3, 1)
[08:08:04.985] future(..., label = NULL) ...
[08:08:04.986] | lazy: FALSE
[08:08:04.986] | stdout: TRUE
[08:08:04.986] | conditions: [n=1] ‘condition’
[08:08:04.986] | gc: FALSE
[08:08:04.986] | earlySignal: FALSE
[08:08:04.986] | getGlobalsAndPackages() ...
[08:08:04.986] | : Searching for globals ...
[08:08:04.988] | : . globals found: [0] 
[08:08:04.988] | : Searching for globals ... done
[08:08:04.988] | : globals: [0] <none>
[08:08:04.988] | : packages: [0] <none>
[08:08:04.988] | getGlobalsAndPackages() ... done
[08:08:04.989] | run() for ‘Future’ (<unnamed-73>) ...
[08:08:04.989] | : state: ‘created’
[08:08:04.989] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.989] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.989] | : Using MulticoreFutureBackend ...
[08:08:04.989] | : . Number of futures since start: 12 (12 created, 12 launched, 16 finished)
[08:08:04.989] | : . Launching futures ...
[08:08:04.990] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:04.990] | : . ' , getFutureData() ...
[08:08:04.990] | : . ' , ; getFutureCore() ...
[08:08:04.990] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:04.990] | : . ' , ; getFutureCore() ... done
[08:08:04.990] | : . ' , ; getFutureCapture() ...
[08:08:04.990] | : . ' , ; getFutureCapture() ... done
[08:08:04.990] | : . ' , ; getFutureContext() ...
[08:08:04.990] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.991] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:04.991] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.991] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:04.991] | : . ' , ; getFutureContext() ... done
[08:08:04.991] | : . ' , getFutureData() ... done
[08:08:04.991] | : . ' , requestCore(..., workers = 2) ...
[08:08:04.992] | : . ' , requestCore(..., workers = 2) ... done
[08:08:04.994] | : . ' , MulticoreFuture started
[08:08:04.994] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:04.995] | : . Launching futures ... done
[08:08:04.995] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:04.995] | : Using MulticoreFutureBackend ... done
[08:08:04.995] | run() for ‘Future’ (<unnamed-73>) ... done
[08:08:04.995] future(..., label = NULL) ... done
[08:08:04.996] future(..., label = NULL) ...
[08:08:04.996] | lazy: FALSE
[08:08:04.996] | stdout: TRUE
[08:08:04.996] | conditions: [n=1] ‘condition’
[08:08:04.996] | gc: FALSE
[08:08:04.996] | earlySignal: FALSE
[08:08:04.996] | getGlobalsAndPackages() ...
[08:08:04.997] | : Searching for globals ...
[08:08:04.997] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.997] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:04.998] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.998] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.998] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.999] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:04.999] | : . ' , ; ` | New stack:
[08:08:04.999] | : . globals found: [0] 
[08:08:04.999] | : Searching for globals ... done
[08:08:04.999] | : globals: [0] <none>
[08:08:04.999] | : packages: [0] <none>
[08:08:04.999] | getGlobalsAndPackages() ... done
[08:08:05.000] | run() for ‘Future’ (<unnamed-74>) ...
[08:08:05.000] | : state: ‘created’
[08:08:05.000] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.000] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.001] | : Using MulticoreFutureBackend ...
[08:08:05.001] | : . Number of futures since start: 13 (13 created, 13 launched, 16 finished)
[08:08:05.001] | : . Launching futures ...
[08:08:05.001] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:05.001] | : . ' , getFutureData() ...
[08:08:05.002] | : . ' , ; getFutureCore() ...
[08:08:05.002] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:05.002] | : . ' , ; getFutureCore() ... done
[08:08:05.002] | : . ' , ; getFutureCapture() ...
[08:08:05.002] | : . ' , ; getFutureCapture() ... done
[08:08:05.002] | : . ' , ; getFutureContext() ...
[08:08:04.999] | : . ' , ; ` | List of 1
[08:08:04.999] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.999] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.999] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:04.999] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.999] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.999] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.999] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.999] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.003] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.003] | : . ' , ; ` | Old stack:
[08:08:05.003] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:05.003] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.003] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:05.003] | : . ' , ; getFutureContext() ... done
[08:08:05.003] | : . ' , getFutureData() ... done
[08:08:05.004] | : . ' , requestCore(..., workers = 2) ...
[08:08:05.004] | : . ' , requestCore(..., workers = 2) ... done
[08:08:05.007] | : . ' , MulticoreFuture started
[08:08:05.007] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:05.003] | : . ' , ; ` | List of 1
[08:08:05.003] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:05.003] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:05.003] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:05.003] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:05.003] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.003] | : . ' , ; ` |     ...)  
[08:08:05.003] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.003] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.003] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:05.003] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:05.003] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.003] | : . ' , ; ` |     ...)  
[08:08:05.003] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.003] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.008] | : . Launching futures ... done
[08:08:05.008] | : . ' , ; ` | Not identical
[08:08:05.008] | : . ' , ; ` | all.equal() for future ...
[08:08:05.008] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:05.008] | : Using MulticoreFutureBackend ... done
[08:08:05.008] | run() for ‘Future’ (<unnamed-74>) ... done
[08:08:05.009] future(..., label = NULL) ... done
[08:08:05.010] future(..., label = NULL) ...
[08:08:05.010] | lazy: FALSE
[08:08:05.010] | stdout: TRUE
[08:08:05.011] | conditions: [n=1] ‘condition’
[08:08:05.011] | gc: FALSE
[08:08:05.011] | earlySignal: FALSE
[08:08:05.011] | getGlobalsAndPackages() ...
[08:08:05.011] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.012] | : Searching for globals ...
[08:08:05.012] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:05.012] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.012] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.013] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.013] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:05.013] | : . ' , ; ` | New stack:
[08:08:05.008] | : . ' , ; ` | : List of 2
[08:08:05.008] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.008] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.008] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:05.008] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.008] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.008] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.008] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.008] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:05.008] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:05.008] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:05.008] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.008] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.008] | : . ' , ; ` | :     ...)  
[08:08:05.008] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.008] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.008] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:05.008] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:05.008] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.008] | : . ' , ; ` | :     ...)  
[08:08:05.008] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.016] | : . ' , ; ` | : Formals differ
[08:08:05.016] | : . ' , ; ` | all.equal() for future ... done
[08:08:05.016] | : . ' , ; ` | Future strategies differ at level 1
[08:08:05.016] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:05.016] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:05.016] | : . ' , ; ` List of future strategies:
[08:08:05.016] | : . ' , ; ` 1. sequential:
[08:08:05.016] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:05.016] | : . ' , ; `    - tweaked: FALSE
[08:08:05.016] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.014] | : . ' , ; ` | List of 1
[08:08:05.014] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.014] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.014] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:05.014] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.014] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.014] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.014] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.014] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.019] | : . ' , ; ` | Old stack:
[08:08:05.020] | : . globals found: [1] ‘{’
[08:08:05.020] | : Searching for globals ... done
[08:08:05.020] | : Resolving globals: FALSE
[08:08:05.020] | : Search for packages associated with the globals ...
[08:08:05.017] | : . ' , ; ` List of 1
[08:08:05.017] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.017] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.017] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:05.017] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.017] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.017] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.017] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.017] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.021] | : . Packages associated with globals: [1] ‘base’
[08:08:05.021] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:05.021] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:05.021] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.021] | : . Packages: [1] ‘base’
[08:08:05.021] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:05.022] | : Search for packages associated with the globals ... done
[08:08:05.022] | : Packages after dropping 'base': [0] 
[08:08:05.022] | : globals: [0] 
[08:08:05.022] | : packages: [0] 
[08:08:05.022] | getGlobalsAndPackages() ... done
[08:08:05.023] | run() for ‘Future’ (<unnamed-75>) ...
[08:08:05.023] | : state: ‘created’
[08:08:05.024] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.024] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.024] | : Using MulticoreFutureBackend ...
[08:08:05.024] | : . Number of futures since start: 14 (14 created, 14 launched, 16 finished)
[08:08:05.022] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.022] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.022] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:05.022] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.022] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.022] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.022] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.025] | : . Launching futures ...
[08:08:05.025] | : . ' , ; ` | : init: TRUE
[08:08:05.025] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:05.025] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:05.025] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:05.025] | : . ' , getFutureData() ...
[08:08:05.025] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:05.025] | : . ' , ; getFutureCore() ...
[08:08:05.025] | : . ' , ; ` | : .  list()
[08:08:05.025] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:05.026] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:05.026] | : . ' , ; getFutureCore() ... done
[08:08:05.026] | : . ' , ; getFutureCapture() ...
[08:08:05.026] | : . ' , ; ` | : .  list()
[08:08:05.026] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:05.026] | : . ' , ; getFutureCapture() ... done
[08:08:05.026] | : . ' , ; getFutureContext() ...
[08:08:05.027] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.020] | : . ' , ; ` | List of 1
[08:08:05.020] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:05.020] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:05.020] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:05.020] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:05.020] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.020] | : . ' , ; ` |     ...)  
[08:08:05.020] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.020] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.020] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:05.020] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:05.020] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.020] | : . ' , ; ` |     ...)  
[08:08:05.020] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.020] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.027] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:05.027] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.027] | : . ' , ; ` | Not identical
[08:08:05.027] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:05.027] | : . ' , ; ` | all.equal() for future ...
[08:08:05.026] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:05.026] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:05[08:08:05.028] | : . ' , ; getFutureContext() ... done
.026] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:05.028] | : . ' , getFutureData() ... done
[08:08:05.028] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:05.028] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:05.028] | : . ' , requestCore(..., workers = 2) ...
[08:08:05.028] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:05.029] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.029] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:05.029] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.029] | : . ' , ; Poll #1 (0): usedCores() = 2, workers = 2
[08:08:05.029] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.032] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.033] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.033] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.033] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:05.033] | : . ' , ; ` | : New stack:
[08:08:05.028] | : . ' , ; ` | : List of 2
[08:08:05.028] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.028] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.028] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:05.028] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.028] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.028] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.028] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.028] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:05.028] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:05.028] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:05.028] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.028] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.028] | : . ' , ; ` | :     ...)  
[08:08:05.028] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.028] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.028] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:05.028] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:05.028] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.028] | : . ' , ; ` | :     ...)  
[08:08:05.028] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.036] | : . ' , ; ` | : Formals differ
[08:08:05.036] | : . ' , ; ` | all.equal() for future ... done
[08:08:05.037] | : . ' , ; ` | Future strategies differ at level 1
[08:08:05.037] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:05.037] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:05.037] | : . ' , ; ` List of future strategies:
[08:08:05.037] | : . ' , ; ` 1. sequential:
[08:08:05.037] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:05.037] | : . ' , ; `    - tweaked: FALSE
[08:08:05.037] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.033] | : . ' , ; ` | : List of 1
[08:08:05.033] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:05.033] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:05.033] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:05.033] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.033] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.033] | : . ' , ; ` | :     ...)  
[08:08:05.033] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.033] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.033] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:05.033] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:05.033] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.033] | : . ' , ; ` | :     ...)  
[08:08:05.033] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.033] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.039] | : . ' , ; ` | : Old stack:
[08:08:05.038] | : . ' , ; ` List of 1
[08:08:05.038] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.038] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.038] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:05.038] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.038] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.038] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.038] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.038] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.042] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:05.042] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:05.043] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.043] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:05.039] | : . ' , ; ` | : List of 1
[08:08:05.039] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.039] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.039] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.039] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.039] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.039] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.039] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.039] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675a91a560> 
[08:08:05.039] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.039] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.039] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.044] | : . ' , ; ` | : Not identical
[08:08:05.044] | : . ' , ; ` | : all.equal() for future ...
[08:08:05.043] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.043] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.043] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:05.043] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.043] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.043] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.043] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.046] | : . ' , ; ` | : init: TRUE
[08:08:05.046] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:05.047] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:05.047] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:05.047] | : . ' , ; ` | : .  list()
[08:08:05.047] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:05.048] | : . ' , ; ` | : .  list()
[08:08:05.048] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:05.050] | : . ' , ; readImmediateCondition() ...
[08:08:05.048] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:05.048] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:05.048] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:05.050] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:05.050] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:05.051] | : . ' , ; ` Number of RDS files: 0
[08:08:05.051] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:05.051] | : . ' , ; ` Returned conditions set:
[08:08:05.051] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:05.051] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.051] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:05.051] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.051] | : . ' , ; `  list()
[08:08:05.051] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.052] | : . ' , ; readImmediateCondition() ... done
[08:08:05.055] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.055] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.056] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.056] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:05.056] | : . ' , ; ` | : New stack:
[08:08:05.045] | : . ' , ; ` | : . List of 2
[08:08:05.045] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:05.045] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:05.045] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:05.045] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:05.045] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.045] | : . ' , ; ` | : .     ...)  
[08:08:05.045] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.045] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.045] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:05.045] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:05.045] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.045] | : . ' , ; ` | : .     ...)  
[08:08:05.045] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.045] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.045] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.045] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:05.045] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.045] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.045] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.045] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.045] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675a91a560> 
[08:08:05.045] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.045] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.058] | : . ' , ; ` | : . Formals differ
[08:08:05.058] | : . ' , ; ` | : all.equal() for future ... done
[08:08:05.058] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:05.058] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:05.058] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:05.059] | : . ' , ; ` | List of future strategies:
[08:08:05.059] | : . ' , ; ` | 1. multicore:
[08:08:05.059] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:05.059] | : . ' , ; ` |    - tweaked: FALSE
[08:08:05.059] | : . ' , ; ` |    - call: plan(strategy)
[08:08:05.062] | : . ' , ; readImmediateCondition() ...
[08:08:05.062] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:05.063] | : . ' , ; ` Number of RDS files: 0
[08:08:05.063] | : . ' , ; ` Returned conditions set:
[08:08:05.063] | : . ' , ; `  list()
[08:08:05.064] | : . ' , ; readImmediateCondition() ... done
[08:08:05.059] | : . ' , ; ` | List of 1
[08:08:05.059] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:05.059] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:05.059] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:05.059] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:05.059] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.059] | : . ' , ; ` |     ...)  
[08:08:05.059] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.059] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.059] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:05.059] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:05.059] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.059] | : . ' , ; ` |     ...)  
[08:08:05.059] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.059] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.065] | : . ' , ; Poll #2 (0.04 secs): usedCores() = 2, workers = 2
[08:08:05.065] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:05.065] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:05.065] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.065] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.066] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:05.066] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.056] | : . ' , ; ` | : List of 1
[08:08:05.056] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:05.056] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:05.056] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:05.056] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.056] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.056] | : . ' , ; ` | :     ...)  
[08:08:05.056] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.056] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.056] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:05.056] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:05.056] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.056] | : . ' , ; ` | :     ...)  
[08:08:05.056] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.056] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.066] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.066] | : . ' , ; ` | : Old stack:
[08:08:05.066] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.066] | : . ' , ; ` | : List of 1
[08:08:05.066] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.066] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.066] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.066] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.066] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.066] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.066] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.066] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759e51be8> 
[08:08:05.066] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.066] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.066] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.071] | : . ' , ; ` | : Not identical
[08:08:05.071] | : . ' , ; ` | : all.equal() for future ...
[08:08:05.075] | : . ' , ; readImmediateCondition() ...
[08:08:05.076] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:05.076] | : . ' , ; ` Number of RDS files: 0
[08:08:05.076] | : . ' , ; ` Returned conditions set:
[08:08:05.076] | : . ' , ; `  list()
[08:08:05.076] | : . ' , ; readImmediateCondition() ... done
[08:08:05.077] | : . ' , ; value() for MulticoreFuture (<unnamed-73>) ...
[08:08:05.077] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:05.078] | : . ' , ; ` | readImmediateCondition() ...
[08:08:05.078] | : . ' , ; ` | : Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:05.078] | : . ' , ; ` | : Number of RDS files: 0
[08:08:05.071] | : . ' , ; ` | : . List of 2
[08:08:05.071] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:05.071] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:05.071] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:05.071] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:05.071] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.071] | : . ' , ; ` | : .     ...)  
[0[08:08:05.078] | : . ' , ; ` | : Returned conditions set:
8:08:05.071] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.071] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.071] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:05.071] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:05.071] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.071] | : . ' , ; ` | : .     ...)  
[08:08:05.071] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.071] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.071] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.071] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:05.071] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.071] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.071] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.071] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.071] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759e51be8> 
[08:08:05.071] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.071] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.079] | : . ' , ; ` | :  list()
[08:08:05.079] | : . ' , ; ` | readImmediateCondition() ... done
[08:08:05.079] | : . ' , ; ` | : . Formals differ
[08:08:05.079] | : . ' , ; ` | : all.equal() for future ... done
[08:08:05.079] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:05.080] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:05.080] | : . ' , ; ` | result() for MulticoreFuture ...
[08:08:05.080] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:05.080] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:08:05.080] | : . ' , ; ` | signalConditions() ...
[08:08:05.080] | : . ' , ; ` | List of future strategies:
[08:08:05.080] | : . ' , ; ` | 1. multicore:
[08:08:05.080] | : . ' , [08:08:05.080] | : . ' , ; ` | : include = ‘immediateCondition’
; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:05.080] | : . ' , ; ` |    - tweaked: FALSE
[08:08:05.080] | : . ' , ; ` |    - call: plan(strategy)
[08:08:05.080] | : . ' , ; ` | : exclude = 
[08:08:05.081] | : . ' , ; ` | : resignal = FALSE
[08:08:05.081] | : . ' , ; ` | : Number of conditions: 6
[08:08:05.081] | : . ' , ; ` | :  int 6
[08:08:05.082] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.082] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.082] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.082] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.082] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.082] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.083] | : . ' , ; ` | signalConditions() ... done
[08:08:05.083] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:05.083] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:05.083] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:05.083] | : . ' , ; ` signalConditions() ...
[08:08:05.084] | : . ' , ; ` | include = ‘immediateCondition’
[08:08:05.084] | : . ' , ; ` | exclude = 
[08:08:05.084] | : . ' , ; ` | resignal = FALSE
[08:08:05.084] | : . ' , ; ` | Number of conditions: 6
[08:08:05.080] | : . ' , ; ` | List of 1
[08:08:05.080] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:05.080] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:05.080] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:05.080] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:05.080] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.080] | : . ' , ; ` |     ...)  
[08:08:05.080] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.080] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.080] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:05.080] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:05.080] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.080] | : . ' , ; ` |     ...)  
[08:08:05.080] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.080] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.085] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:05.084] | : . ' , ; ` |  int 6
[08:08:05.085] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:05.085] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.085] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.085] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.085] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.085] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.086] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:05.086] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.086] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.086] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.086] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.086] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.086] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.086] | : . ' , ; ` signalConditions() ... done
[08:08:05.086] | : . ' , ; ` check for misuse ...
[08:08:05.087] | : . ' , ; ` check for misuse ... done
[08:08:05.087] | : . ' , ; value() for MulticoreFuture (<unnamed-73>) ... done
[08:08:05.087] | : . ' , requestCore(..., workers = 2) ... done
[08:08:05.090] | : . ' , MulticoreFuture started
[08:08:05.090] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:05.091] | : . Launching futures ... done
[08:08:05.091] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:05.091] | : Using MulticoreFutureBackend ... done
[08:08:05.091] | run() for ‘Future’ (<unnamed-75>) ... done
[08:08:05.092] future(..., label = NULL) ... done
<environment: 0x55675bfc0960> 
<environment: 0x55675a3b67b0> 
[08:08:05.094] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.094] resolved() for environment ...
[08:08:05.094] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:05.094] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.094] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.095] | resolved() for list ...
[08:08:05.095] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.095] | : Number of elements: 4
[08:08:05.095] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:05.095] | : Number of futures: 4
[08:08:05.095] | : . ' , ; ` | New stack:
[08:08:05.095] | : readImmediateCondition() ...
[08:08:05.095] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:05.096] | : . Number of RDS files: 0
[08:08:05.096] | : . Returned conditions set:
[08:08:05.096] | : .  list()
[08:08:05.097] | : readImmediateCondition() ... done
[08:08:05.095] | : . ' , ; ` | List of 1
[08:08:05.095] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.095] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.095] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:05.095] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.095] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.095] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.095] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.095] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.100] | : . ' , ; ` | Old stack:
[08:08:05.100] | : . ' , ; ` | List of 1
[08:08:05.100] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:05.100] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:05.100] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:05.100] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:05.100] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.100] | : . ' , ; ` |     ...)  
[08:08:05.100] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.100] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.100] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:05.100] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:05.100] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.100] | : . ' , ; ` |     ...)  
[08:08:05.100] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.100] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.106] | : . ' , ; ` | Not identical
[08:08:05.106] | : . ' , ; ` | all.equal() for future ...
[08:08:05.107] | : readImmediateCondition() ...
[08:08:05.107] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:05.108] | : . Number of RDS files: 0
[08:08:05.108] | : . Returned conditions set:
[08:08:05.108] | : .  list()
[08:08:05.108] | : readImmediateCondition() ... done
[08:08:05.109] | resolved() for list ... done
[08:08:05.109] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE FALSE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:05.110] value() for MulticoreFuture (<unnamed-75>) ...
[08:08:05.110] | result() for MulticoreFuture ...
[08:08:05.106] | : . ' , ; ` | : List of 2
[08:08:05.106] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.106] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.106] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:05.106] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.106] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.106] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.106] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.106] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:05.106] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:05.106] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:05.106] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.106] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.106] | : . ' , ; ` | :     ...)  
[08:08:05.106] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.106] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.106] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:05.106] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:05.106] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.106] | : . ' , ; ` | :     ...)  
[08:08:05.106] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.119] | : . ' , ; ` | : Formals differ
[08:08:05.119] | : . ' , ; ` | all.equal() for future ... done
[08:08:05.119] | : . ' , ; ` | Future strategies differ at level 1
[08:08:05.119] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:05.119] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:05.119] | : . ' , ; ` List of future strategies:
[08:08:05.119] | : . ' , ; ` 1. sequential:
[08:08:05.119] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:05.119] | : . ' , ; `    - tweaked: FALSE
[08:08:05.119] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.120] | : . ' , ; ` List of 1
[08:08:05.120] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.120] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.120] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:05.120] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.120] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.120] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.120] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.120] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.124] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:05.124] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:05.124] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.124] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:05.124] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.124] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.124] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:05.124] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.124] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.124] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.124] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.127] | : . ' , ; ` | : init: TRUE
[08:08:05.127] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:05.127] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:05.127] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:05.128] | : . ' , ; ` | : .  list()
[08:08:05.128] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:05.128] | : . ' , ; ` | : .  list()
[08:08:05.128] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:05.129] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:05.129] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:05.129] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:05.130] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:05.130] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:05.130] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:05.131] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.131] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:05.131] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.131] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.134] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.134] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.134] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.135] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:05.135] | : . ' , ; ` | : New stack:
[08:08:05.135] | : . ' , ; ` | : List of 1
[08:08:05.135] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:05.135] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:05.135] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:05.135] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.135] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.135] | : . ' , ; ` | :     ...)  
[08:08:05.135] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.135] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.135] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:05.135] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:05.135] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.135] | : . ' , ; ` | :     ...)  
[08:08:05.135] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.135] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.139] | : . ' , ; ` | : Old stack:
[08:08:05.140] | : . ' , ; ` | : List of 1
[08:08:05.140] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.140] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.140] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.140] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.140] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.140] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.140] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.140] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b670b28> 
[08:08:05.140] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.140] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.140] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.144] | : . ' , ; ` | : Not identical
[08:08:05.144] | : . ' , ; ` | : all.equal() for future ...
[08:08:05.144] | : . ' , ; ` | : . List of 2
[08:08:05.144] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:05.144] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:05.144] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:05.144] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:05.144] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.144] | : . ' , ; ` | : .     ...)  
[08:08:05.144] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.144] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.144] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:05.144] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:05.144] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.144] | : . ' , ; ` | : .     ...)  
[08:08:05.144] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.144] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.144] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.144] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:05.144] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.144] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.144] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.144] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.144] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b670b28> 
[08:08:05.144] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.144] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.152] | : . ' , ; ` | : . Formals differ
[08:08:05.152] | : . ' , ; ` | : all.equal() for future ... done
[08:08:05.152] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:05.153] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:05.153] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:05.153] | : . ' , ; ` | List of future strategies:
[08:08:05.153] | : . ' , ; ` | 1. multicore:
[08:08:05.153] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:05.153] | : . ' , ; ` |    - tweaked: FALSE
[08:08:05.153] | : . ' , ; ` |    - call: plan(strategy)
[08:08:05.153] | : . ' , ; ` | List of 1
[08:08:05.153] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:05.153] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:05.153] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:05.153] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:05.153] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.153] | : . ' , ; ` |     ...)  
[08:08:05.153] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.153] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.153] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:05.153] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:05.153] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.153] | : . ' , ; ` |     ...)  
[08:08:05.153] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.153] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.158] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:05.158] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:05.158] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.158] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.159] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:05.159] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.159] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.159] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.160] | : readImmediateCondition() ...
[08:08:05.160] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:05.160] | : . Number of RDS files: 0
[08:08:05.160] | : . Returned conditions set:
[08:08:05.161] | : .  list()
[08:08:05.161] | : readImmediateCondition() ... done
[08:08:05.162] | : result() for MulticoreFuture ...
[08:08:05.162] | : result() for MulticoreFuture ... done
[08:08:05.162] | : signalConditions() ...
[08:08:05.162] | : . include = ‘immediateCondition’
[08:08:05.162] | : . exclude = 
[08:08:05.162] | : . resignal = FALSE
[08:08:05.162] | : . Number of conditions: 6
[08:08:05.162] | : .  int 6
[08:08:05.163] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.163] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.163] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.163] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.164] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.164] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.164] | : signalConditions() ... done
[08:08:05.164] | result() for MulticoreFuture ... done
[08:08:05.164] | result() for MulticoreFuture ...
[08:08:05.164] | result() for MulticoreFuture ... done
[08:08:05.165] | signalConditions() ...
[08:08:05.165] | : include = ‘immediateCondition’
[08:08:05.165] | : exclude = 
[08:08:05.165] | : resignal = FALSE
[08:08:05.165] | : Number of conditions: 6
[08:08:05.165] | :  int 6
[08:08:05.166] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.166] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.166] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.166] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.166] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.167] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.167] | signalConditions() ... done
[08:08:05.167] | relay stdout ...
[08:08:05.167] | relay stdout ... done
[08:08:05.167] | check for misuse ...
[08:08:05.167] | check for misuse ... done
[08:08:05.167] | relay conditions ...
[08:08:05.168] | : Future state: ‘finished’
[08:08:05.168] | : result() for MulticoreFuture ...
[08:08:05.168] | : result() for MulticoreFuture ... done
[08:08:05.168] | : signalConditions() ...
[08:08:05.168] | : . include = ‘condition’
[08:08:05.168] | : . exclude = ‘immediateCondition’
[08:08:05.168] | : . resignal = TRUE
[08:08:05.169] | : . Number of conditions: 6
[08:08:05.171] | : .  int 6
[08:08:05.171] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.172] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.091] | : . ' , attachPackages() ...
[08:08:05.172] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.172] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.091] | : . ' , ; packages: [n=1] ‘future’
[08:08:05.172] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.172] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.092] | : . ' , attachPackages() ... done
[08:08:05.172] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.173] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.092] | : . ' , attachPackages() ...
[08:08:05.173] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.173] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.092] | : . ' , ; packages: [n=0] 
[08:08:05.173] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.173] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.093] | : . ' , attachPackages() ... done
[08:08:05.173] | : signalConditions() ... done
[08:08:05.173] | relay conditions ... done
[08:08:05.173] value() for MulticoreFuture (<unnamed-75>) ... done
[08:08:05.174] value() for listenv ...
[08:08:05.174] | recursive: 0
[08:08:05.174] | reduce: FALSE
[08:08:05.175] | length: 4
[08:08:05.175] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:05.175] | Number of remaining objects: 4
[08:08:05.175] | checking value #1:
[08:08:05.175] | 'obj' is atomic
[08:08:05.176] | signalConditionsASAP(numeric, pos=1) ...
[08:08:05.176] | : nx: 4
[08:08:05.176] | : relay: TRUE
[08:08:05.176] | : stdout: TRUE
[08:08:05.176] | : signal: TRUE
[08:08:05.176] | : resignal: FALSE
[08:08:05.176] | : force: TRUE
[08:08:05.176] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:05.176] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:05.177] | : until=2
[08:08:05.177] | : relaying element #2
[08:08:05.177] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:05.177] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:05.177] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:05.177] | length: 3 (resolved future 1)
[08:08:05.177] value() for listenv ... done
[08:08:05.178] checking value #2:
[08:08:05.178] 'obj' is MulticoreFuture
[08:08:05.178] MulticoreFuture #2
[08:08:05.178] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:05.178] | nx: 4
[08:08:05.178] | relay: TRUE
[08:08:05.178] | stdout: TRUE
[08:08:05.178] | signal: TRUE
[08:08:05.178] | resignal: FALSE
[08:08:05.179] | force: TRUE
[08:08:05.179] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:05.179] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:05.179] | until=2
[08:08:05.179] | relaying element #2
[08:08:05.179] | value() for MulticoreFuture (<unnamed-73>) ...
[08:08:05.179] | : result() for MulticoreFuture ...
[08:08:05.179] | : result() for MulticoreFuture ... done
[08:08:05.179] | : result() for MulticoreFuture ...
[08:08:05.180] | : result() for MulticoreFuture ... done
[08:08:05.180] | : signalConditions() ...
[08:08:05.180] | : . include = ‘immediateCondition’
[08:08:05.180] | : . exclude = 
[08:08:05.180] | : . resignal = FALSE
[08:08:05.180] | : . Number of conditions: 6
[08:08:05.180] | : .  int 6
[08:08:05.181] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.181] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.181] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.181] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.181] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.181] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.182] | : signalConditions() ... done
[08:08:05.182] | : relay stdout ...
[08:08:05.182] | : relay stdout ... done
[08:08:05.182] | : check for misuse ...
[08:08:05.182] | : check for misuse ... done
[08:08:05.182] | value() for MulticoreFuture (<unnamed-73>) ... done
[08:08:05.182] | result() for MulticoreFuture ...
[08:08:05.182] | result() for MulticoreFuture ... done
[08:08:05.182] | signalConditions() ...
[08:08:05.183] | : include = ‘immediateCondition’
[08:08:05.183] | : exclude = 
[08:08:05.183] | : resignal = FALSE
[08:08:05.183] | : Number of conditions: 6
[08:08:05.183] | :  int 6
[08:08:05.183] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.184] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.184] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.184] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.184] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.184] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.184] | signalConditions() ... done
[08:08:05.184] | result() for MulticoreFuture ...
[08:08:05.185] | result() for MulticoreFuture ... done
[08:08:05.185] | signalConditions() ...
[08:08:05.185] | : include = ‘condition’
[08:08:05.185] | : exclude = ‘error’, ‘immediateCondition’
[08:08:05.185] | : resignal = TRUE
[08:08:05.185] | : Number of conditions: 6
[08:08:05.185] | :  int 6
[08:08:05.186] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.186] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.995] | : . ' , attachPackages() ...
[08:08:05.186] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.186] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.995] | : . ' , ; packages: [n=1] ‘future’
[08:08:05.186] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.187] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.996] | : . ' , attachPackages() ... done
[08:08:05.187] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.187] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.996] | : . ' , attachPackages() ...
[08:08:05.187] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.187] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.996] | : . ' , ; packages: [n=0] 
[08:08:05.187] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.187] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.996] | : . ' , attachPackages() ... done
[08:08:05.188] | signalConditions() ... done
[08:08:05.188] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:05.188] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:05.188] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:05.188] value(<MulticoreFuture>, ...) ...
[08:08:05.188] value(<MulticoreFuture>, ...) ... done
[08:08:05.188] value() for MulticoreFuture (<unnamed-73>) ...
[08:08:05.188] | result() for MulticoreFuture ...
[08:08:05.189] | result() for MulticoreFuture ... done
[08:08:05.189] | result() for MulticoreFuture ...
[08:08:05.189] | result() for MulticoreFuture ... done
[08:08:05.189] | signalConditions() ...
[08:08:05.189] | : include = ‘immediateCondition’
[08:08:05.189] | : exclude = 
[08:08:05.189] | : resignal = FALSE
[08:08:05.189] | : Number of conditions: 6
[08:08:05.190] | :  int 6
[08:08:05.190] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.190] | : already signaled, skipping
[08:08:05.190] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.191] | : already signaled, skipping
[08:08:05.191] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.191] | : already signaled, skipping
[08:08:05.191] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.191] | : already signaled, skipping
[08:08:05.191] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.191] | : already signaled, skipping
[08:08:05.191] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.192] | : already signaled, skipping
[08:08:05.192] | signalConditions() ... done
[08:08:05.192] | check for misuse ...
[08:08:05.192] | check for misuse ... done
[08:08:05.192] value() for MulticoreFuture (<unnamed-73>) ... done
[08:08:05.192] value: <numeric>
[08:08:05.192] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:05.193] | nx: 4
[08:08:05.193] | relay: TRUE
[08:08:05.193] | stdout: TRUE
[08:08:05.193] | signal: TRUE
[08:08:05.193] | resignal: FALSE
[08:08:05.193] | force: TRUE
[08:08:05.193] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:05.193] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:05.194] | until=3
[08:08:05.194] | relaying element #3
[08:08:05.194] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:05.194] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:05.194] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:05.194] resolve() for MulticoreFuture ...
[08:08:05.194] resolve() for MulticoreFuture ... done
[08:08:05.195] length: 2 (resolved future 2)

[08:08:05.195] checking value #3:
[08:08:05.195] 'obj' is MulticoreFuture
[08:08:05.195] readImmediateCondition() ...
[08:08:05.195] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:05.196] | Number of RDS files: 0
[08:08:05.196] | Returned conditions set:
[08:08:05.196] |  list()
[08:08:05.196] readImmediateCondition() ... done
[08:08:05.196] MulticoreFuture #3
[08:08:05.196] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:05.197] | nx: 4
[08:08:05.197] | relay: TRUE
[08:08:05.197] | stdout: TRUE
[08:08:05.197] | signal: TRUE
[08:08:05.197] | resignal: FALSE
[08:08:05.197] | force: TRUE
[08:08:05.197] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:05.197] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:05.198] | until=3
[08:08:05.198] | relaying element #3
[08:08:05.198] | value() for MulticoreFuture (<unnamed-74>) ...
[08:08:05.198] | : result() for MulticoreFuture ...
[08:08:05.198] | : . readImmediateCondition() ...
[08:08:05.199] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:05.199] | : . ' Number of RDS files: 0
[08:08:05.199] | : . ' Returned conditions set:
[08:08:05.199] | : . '  list()
[08:08:05.199] | : . readImmediateCondition() ... done
[08:08:05.200] | : . result() for MulticoreFuture ...
[08:08:05.200] | : . result() for MulticoreFuture ... done
[08:08:05.200] | : . signalConditions() ...
[08:08:05.200] | : . ' include = ‘immediateCondition’
[08:08:05.200] | : . ' exclude = 
[08:08:05.201] | : . ' resignal = FALSE
[08:08:05.201] | : . ' Number of conditions: 6
[08:08:05.201] | : . '  int 6
[08:08:05.201] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.201] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.202] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.202] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.202] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.202] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.202] | : . signalConditions() ... done
[08:08:05.202] | : result() for MulticoreFuture ... done
[08:08:05.202] | : result() for MulticoreFuture ...
[08:08:05.203] | : result() for MulticoreFuture ... done
[08:08:05.203] | : signalConditions() ...
[08:08:05.203] | : . include = ‘immediateCondition’
[08:08:05.203] | : . exclude = 
[08:08:05.203] | : . resignal = FALSE
[08:08:05.203] | : . Number of conditions: 6
[08:08:05.203] | : .  int 6
[08:08:05.204] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.204] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.204] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.204] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.204] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.205] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.205] | : signalConditions() ... done
[08:08:05.205] | : relay stdout ...
[08:08:05.205] | : relay stdout ... done
[08:08:05.205] | : check for misuse ...
[08:08:05.205] | : check for misuse ... done
[08:08:05.205] | value() for MulticoreFuture (<unnamed-74>) ... done
[08:08:05.206] | result() for MulticoreFuture ...
[08:08:05.206] | result() for MulticoreFuture ... done
[08:08:05.206] | signalConditions() ...
[08:08:05.206] | : include = ‘immediateCondition’
[08:08:05.206] | : exclude = 
[08:08:05.206] | : resignal = FALSE
[08:08:05.206] | : Number of conditions: 6
[08:08:05.206] | :  int 6
[08:08:05.207] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.207] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.207] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.207] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.207] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.207] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.208] | signalConditions() ... done
[08:08:05.208] | result() for MulticoreFuture ...
[08:08:05.208] | result() for MulticoreFuture ... done
[08:08:05.208] | signalConditions() ...
[08:08:05.208] | : include = ‘condition’
[08:08:05.208] | : exclude = ‘error’, ‘immediateCondition’
[08:08:05.208] | : resignal = TRUE
[08:08:05.208] | : Number of conditions: 6
[08:08:05.208] | :  int 6
[08:08:05.209] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.209] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.008] | : . ' , attachPackages() ...
[08:08:05.209] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.209] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.008] | : . ' , ; packages: [n=1] ‘future’
[08:08:05.209] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.210] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.009] | : . ' , attachPackages() ... done
[08:08:05.210] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.210] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.009] | : . ' , attachPackages() ...
[08:08:05.210] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.210] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.010] | : . ' , ; packages: [n=0] 
[08:08:05.210] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.210] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.010] | : . ' , attachPackages() ... done
[08:08:05.211] | signalConditions() ... done
[08:08:05.211] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:05.211] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:05.211] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:05.211] value(<MulticoreFuture>, ...) ...
[08:08:05.211] value(<MulticoreFuture>, ...) ... done
[08:08:05.211] value() for MulticoreFuture (<unnamed-74>) ...
[08:08:05.211] | result() for MulticoreFuture ...
[08:08:05.211] | result() for MulticoreFuture ... done
[08:08:05.212] | result() for MulticoreFuture ...
[08:08:05.212] | result() for MulticoreFuture ... done
[08:08:05.212] | signalConditions() ...
[08:08:05.212] | : include = ‘immediateCondition’
[08:08:05.212] | : exclude = 
[08:08:05.212] | : resignal = FALSE
[08:08:05.212] | : Number of conditions: 6
[08:08:05.212] | :  int 6
[08:08:05.213] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.213] | : already signaled, skipping
[08:08:05.213] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.213] | : already signaled, skipping
[08:08:05.213] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.213] | : already signaled, skipping
[08:08:05.214] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.214] | : already signaled, skipping
[08:08:05.214] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.214] | : already signaled, skipping
[08:08:05.214] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.214] | : already signaled, skipping
[08:08:05.214] | signalConditions() ... done
[08:08:05.214] | check for misuse ...
[08:08:05.215] | check for misuse ... done
[08:08:05.215] value() for MulticoreFuture (<unnamed-74>) ... done
[08:08:05.215] value: <NULL>
[08:08:05.215] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:05.215] | nx: 4
[08:08:05.215] | relay: TRUE
[08:08:05.215] | stdout: TRUE
[08:08:05.215] | signal: TRUE
[08:08:05.216] | resignal: FALSE
[08:08:05.216] | force: TRUE
[08:08:05.216] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:05.216] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:05.216] | until=4
[08:08:05.216] | relaying element #4
[08:08:05.216] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:05.216] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:05.216] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:05.217] resolve() for MulticoreFuture ...
[08:08:05.217] resolve() for MulticoreFuture ... done
[08:08:05.217] length: 1 (resolved future 3)

[08:08:05.217] checking value #4:
[08:08:05.217] 'obj' is atomic
[08:08:05.217] signalConditionsASAP(numeric, pos=4) ...
[08:08:05.217] | nx: 4
[08:08:05.217] | relay: TRUE
[08:08:05.218] | stdout: TRUE
[08:08:05.218] | signal: TRUE
[08:08:05.218] | resignal: FALSE
[08:08:05.218] | force: TRUE
[08:08:05.218] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:05.218] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:05.218] | until=4
[08:08:05.218] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:05.218] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:05.219] signalConditionsASAP(numeric, pos=4) ... done
[08:08:05.219] length: 0 (resolved future 4)

[08:08:05.219] Relaying remaining futures ...
[08:08:05.219] | signalConditionsASAP(NULL, pos=0) ...
[08:08:05.219] | : nx: 4
[08:08:05.219] | : relay: TRUE
[08:08:05.220] | : stdout: TRUE
[08:08:05.220] | : signal: TRUE
[08:08:05.220] | : resignal: FALSE
[08:08:05.220] | : force: TRUE
[08:08:05.220] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:05.220] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:05.220] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:05.220] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:05.220] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:05.221] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Type of future: multisession
[08:08:05.223] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.223] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:05.223] | : all.equal() for FutureStrategyList ...
[08:08:05.223] | : . New stack:
[08:08:05.224] | : . List of 1
[08:08:05.224] | : .  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:05.224] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.224] | : .   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:05.224] | : .   ..- attr(*, "init")= logi TRUE
[08:08:05.224] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:05.224] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:05.224] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:05.224] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:05.224] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:08:05.224] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:05.224] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.227] | : . Old stack:
[08:08:05.227] | : . List of 1
[08:08:05.227] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:05.227] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:05.227] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:05.227] | : .   ..- attr(*, "init")= chr "done"
[08:08:05.227] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.227] | : .     ...)  
[08:08:05.227] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.227] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.227] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:05.227] | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:05.227] | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.227] | : .     ...)  
[08:08:05.227] | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.227] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.231] | : . Not identical
[08:08:05.231] | : . all.equal() for future ...
[08:08:05.231] | : . ' List of 2
[08:08:05.231] | : . '  $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:05.231] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.231] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:05.231] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:05.231] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:05.231] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:05.231] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:05.231] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:05.231] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:08:05.231] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:05.231] | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:05.231] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:05.231] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:05.231] | : . '   ..- attr(*, "init")= chr "done"
[08:08:05.231] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.231] | : . '     ...)  
[08:08:05.231] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.231] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.231] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:05.231] | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bf1acc0> 
[08:08:05.231] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:05.231] | : . '     ...)  
[08:08:05.231] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:05.238] | : . ' Formals differ
[08:08:05.238] | : . all.equal() for future ... done
[08:08:05.238] | : . Future strategies differ at level 1
[08:08:05.238] | : all.equal() for FutureStrategyList ... done
[08:08:05.239] | : plan(): Setting new future backend stack:
[08:08:05.239] | : List of future strategies:
[08:08:05.239] | : 1. multisession:
[08:08:05.239] | :    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:05.239] | :    - tweaked: FALSE
[08:08:05.239] | :    - call: plan(strategy)
[08:08:05.239] | : List of 1
[08:08:05.239] | :  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:05.239] | :     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.239] | :   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:05.239] | :   ..- attr(*, "init")= logi TRUE
[08:08:05.239] | :   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:05.239] | :     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:05.239] | :   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:05.239] | :   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:05.239] | :   ..- attr(*, "untweakable")= chr "persistent"
[08:08:05.239] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:05.239] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.242] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:05.242] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.242] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:05.243] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.243] | : . Legacy shutdown of cluster workers ...
[08:08:05.243] | : . ' Stopping existing cluster ...
[08:08:05.243] | : . ' , No pre-existing cluster. Skipping
[08:08:05.244] | : . ' Stopping existing cluster ... done
[08:08:05.244] | : . Legacy shutdown of cluster workers ... done
[08:08:05.244] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:05.244] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:05.244] | : . function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:05.244] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.244] | : .  - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:05.244] | : .  - attr(*, "init")= logi TRUE
[08:08:05.244] | : .  - attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:05.244] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:05.244] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:05.244] | : .  - attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:05.244] | : .  - attr(*, "untweakable")= chr "persistent"
[08:08:05.244] | : .  - attr(*, "call")= language plan(strategy)
[08:08:05.246] | : . init: TRUE
[08:08:05.247] | : . makeFutureBackend(<multisession>) ...
[08:08:05.247] | : . ' Backend function: <‘NULL’>
[08:08:05.247] | : . ' Evaluator tweak arguments: [n=0]
[08:08:05.247] | : . '  list()
[08:08:05.247] | : . ' Evaluator formal arguments: [n=4]
[08:08:05.247] | : . '  list()
[08:08:05.248] | : . ' Backend factory arguments: [n=4]
[08:08:05.248] | : . ' Dotted pair list of 4
[08:08:05.248] | : . '  $ workers     : language availableCores()
[08:08:05.248] | : . '  $ rscript_libs: language .libPaths()
[08:08:05.248] | : . '  $ gc          : logi FALSE
[08:08:05.248] | : . '  $ earlySignal : logi FALSE
[08:08:05.262] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ...
[08:08:05.263] | : . ' , Arguments:
[08:08:05.263] | : . ' , List of 5
[08:08:05.263] | : . ' ,  $ workers     : Named int 2
[08:08:05.263] | : . ' ,   ..- attr(*, "names")= chr "mc.cores"
[08:08:05.263] | : . ' ,  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:05.263] | : . ' ,  $ interrupts  : logi TRUE
[08:08:05.263] | : . ' ,  $ gc          : logi FALSE
[08:08:05.263] | : . ' ,  $ earlySignal : logi FALSE
[08:08:05.267] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[08:08:05.267] | : . ' , ; workers: 2
[08:08:05.267] | : . ' , ; getCluster() ...
[08:08:05.267] | : . ' , ; getCluster() ... done
[08:08:05.267] | : . ' , ; Stopping existing cluster ...
[08:08:05.267] | : . ' , ; ` No pre-existing cluster. Skipping
[08:08:05.268] | : . ' , ; Stopping existing cluster ... done
[08:08:05.268] | : . ' , ; Starting new cluster ...
[08:08:05.268] | : . ' , ; ` makeCluster(workers, ...) ...
[08:08:05.268] | : . ' , ; ` | Arguments:
[08:08:05.268] | : . ' , ; ` | List of 2
[08:08:05.268] | : . ' , ; ` |  $             : int 2
[08:08:05.268] | : . ' , ; ` |  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:05.269] | : . ' , ; ` | .makeCluster() ...
[08:08:05.269] | : . ' , ; ` | : workers: ‘2’
[08:08:05.269] | : . ' , ; ` | : R_FUTURE_PLAN: NA
[08:08:05.269] | : . ' , ; ` | : parallelly::makeClusterPSOCK() arguments:
[08:08:05.269] | : . ' , ; ` | : List of 2
[08:08:05.269] | : . ' , ; ` | :  $             : int 2
[08:08:05.269] | : . ' , ; ` | :  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:05.552] | : . ' , ; ` | : Generated cluster UUID
[08:08:05.553] | : . ' , ; ` | : Cluster UUID: ‘d9e73d0afef6bf67fb99f83a39f0a371’
[08:08:05.553] | : . ' , ; ` | : Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:05.555] | : . ' , ; ` | .makeCluster() ... done
[08:08:05.555] | : . ' , ; ` | Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:05.556] | : . ' , ; ` makeCluster(workers, ...) ... done
[08:08:05.556] | : . ' , ; ` Number of workers: 2
[08:08:05.556] | : . ' , ; ` Workers UUID: ‘d9e73d0afef6bf67fb99f83a39f0a371’
[08:08:05.557] | : . ' , ; Starting new cluster ... done
[08:08:05.557] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[08:08:05.557] | : . ' , Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:05.557] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ... done
[08:08:05.557] | : . makeFutureBackend(<multisession>) ... done
[08:08:05.557] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.557] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.557] | : . plan(): nbrOfWorkers() = 2
[08:08:05.557] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:05.558] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
Dimensions: NULL
[08:08:05.558] | future(..., label = NULL) ...
[08:08:05.558] | : lazy: FALSE
[08:08:05.558] | : stdout: TRUE
[08:08:05.558] | : conditions: [n=1] ‘condition’
[08:08:05.558] | : gc: FALSE
[08:08:05.558] | : earlySignal: FALSE
[08:08:05.558] | : getGlobalsAndPackages() ...
[08:08:05.558] | : . Searching for globals ...
[08:08:05.560] | : . ' globals found: [0] 
[08:08:05.560] | : . Searching for globals ... done
[08:08:05.560] | : . globals: [0] <none>
[08:08:05.560] | : . packages: [0] <none>
[08:08:05.560] | : getGlobalsAndPackages() ... done
[08:08:05.560] | : run() for ‘Future’ (<unnamed-76>) ...
[08:08:05.561] | : . state: ‘created’
[08:08:05.561] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.561] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.561] | : . Using MultisessionFutureBackend ...
[08:08:05.561] | : . ' Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:05.561] | : . ' Launching futures ...
[08:08:05.561] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:05.561] | : . ' , ; Workers: [n=2]
[08:08:05.561] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:05.563] | : . ' , ; FutureRegistry: ‘workers-d9e73d0afef6bf67fb99f83a39f0a371’
[08:08:05.563] | : . ' , ; requestWorker() ...
[08:08:05.563] | : . ' , ; ` requestNode() ...
[08:08:05.563] | : . ' , ; ` | Number of workers: 2
[08:08:05.563] | : . ' , ; ` | Polling for a free worker ...
[08:08:05.563] | : . ' , ; ` | : FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:05.564] | : . ' , ; ` | : . Created empty registry ‘workers-d9e73d0afef6bf67fb99f83a39f0a371’
[08:08:05.564] | : . ' , ; ` | : . Listing all futures
[08:08:05.564] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:05.564] | : . ' , ; ` | : FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:05.564] | : . ' , ; ` | : Total time: 0
[08:08:05.564] | : . ' , ; ` | Polling for a free worker ... done
[08:08:05.564] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:05.564] | : . ' , ; ` | : Listing all futures
[08:08:05.564] | : . ' , ; ` | : Number of registered futures: 0
[08:08:05.564] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:05.565] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:05.565] | : . ' , ; ` | Index of first available worker: 1
[08:08:05.565] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:05.633] | : . ' , ; ` | : Worker is functional
[08:08:05.633] | : . ' , ; ` | : FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:05.633] | : . ' , ; ` | : . Listing all futures
[08:08:05.634] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:05.634] | : . ' , ; ` | : FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:05.634] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:05.634] | : . ' , ; ` requestNode() ... done
[08:08:05.634] | : . ' , ; ` cluster node index: 1
[08:08:05.634] | : . ' , ; requestWorker() ... done
[08:08:05.634] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:05.635] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:05.635] | : . ' , ; launchFuture() ...
[08:08:05.635] | : . ' , ; ` cluster node index: 1
[08:08:05.636] | : . ' , ; ` getFutureData() ...
[08:08:05.636] | : . ' , ; ` | getFutureCore() ...
[08:08:05.636] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:05.636] | : . ' , ; ` | getFutureCore() ... done
[08:08:05.636] | : . ' , ; ` | getFutureCapture() ...
[08:08:05.636] | : . ' , ; ` | getFutureCapture() ... done
[08:08:05.636] | : . ' , ; ` | getFutureContext() ...
[08:08:05.636] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.636] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:05.637] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.637] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:05.637] | : . ' , ; ` | getFutureContext() ... done
[08:08:05.637] | : . ' , ; ` getFutureData() ... done
[08:08:05.637] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ...
[08:08:05.637] | : . ' , ; ` | Appended future to position #1
[08:08:05.638] | : . ' , ; ` | Number of registered futures: 1
[08:08:05.638] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ... done
[08:08:05.638] | : . ' , ; launchFuture() ... done
[08:08:05.638] | : . ' , ; MultisessionFuture started
[08:08:05.638] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:05.638] | : . ' Launching futures ... done
[08:08:05.638] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:05.638] | : . Using MultisessionFutureBackend ... done
[08:08:05.638] | : run() for ‘Future’ (<unnamed-76>) ... done
[08:08:05.639] | future(..., label = NULL) ... done
[08:08:05.639] | future(..., label = NULL) ...
[08:08:05.639] | : lazy: FALSE
[08:08:05.639] | : stdout: TRUE
[08:08:05.639] | : conditions: [n=1] ‘condition’
[08:08:05.639] | : gc: FALSE
[08:08:05.639] | : earlySignal: FALSE
[08:08:05.639] | : getGlobalsAndPackages() ...
[08:08:05.639] | : . Searching for globals ...
[08:08:05.641] | : . ' globals found: [0] 
[08:08:05.641] | : . Searching for globals ... done
[08:08:05.641] | : . globals: [0] <none>
[08:08:05.641] | : . packages: [0] <none>
[08:08:05.641] | : getGlobalsAndPackages() ... done
[08:08:05.641] | : run() for ‘Future’ (<unnamed-77>) ...
[08:08:05.642] | : . state: ‘created’
[08:08:05.642] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.642] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.642] | : . Using MultisessionFutureBackend ...
[08:08:05.642] | : . ' Number of futures since start: 1 (1 created, 1 launched, 0 finished)
[08:08:05.642] | : . ' Launching futures ...
[08:08:05.642] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:05.642] | : . ' , ; Workers: [n=2]
[08:08:05.643] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:05.644] | : . ' , ; FutureRegistry: ‘workers-d9e73d0afef6bf67fb99f83a39f0a371’
[08:08:05.644] | : . ' , ; requestWorker() ...
[08:08:05.645] | : . ' , ; ` requestNode() ...
[08:08:05.645] | : . ' , ; ` | Number of workers: 2
[08:08:05.645] | : . ' , ; ` | Polling for a free worker ...
[08:08:05.645] | : . ' , ; ` | : FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:05.645] | : . ' , ; ` | : . Listing all futures
[08:08:05.645] | : . ' , ; ` | : . Number of registered futures: 1
[08:08:05.645] | : . ' , ; ` | : FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:05.645] | : . ' , ; ` | : Total time: 0
[08:08:05.645] | : . ' , ; ` | Polling for a free worker ... done
[08:08:05.645] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:05.646] | : . ' , ; ` | : Listing all futures
[08:08:05.646] | : . ' , ; ` | : Number of registered futures: 1
[08:08:05.646] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:05.646] | : . ' , ; ` | avail: [n=2] ‘2’
[08:08:05.646] | : . ' , ; ` | Index of first available worker: 2
[08:08:05.646] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:05.718] | : . ' , ; ` | : Worker is functional
[08:08:05.718] | : . ' , ; ` | : FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:05.718] | : . ' , ; ` | : . Listing all futures
[08:08:05.718] | : . ' , ; ` | : . Number of registered futures: 1
[08:08:05.719] | : . ' , ; ` | : FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:05.719] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:05.719] | : . ' , ; ` requestNode() ... done
[08:08:05.719] | : . ' , ; ` cluster node index: 2
[08:08:05.719] | : . ' , ; requestWorker() ... done
[08:08:05.720] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:05.720] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:05.720] | : . ' , ; launchFuture() ...
[08:08:05.720] | : . ' , ; ` cluster node index: 2
[08:08:05.721] | : . ' , ; ` getFutureData() ...
[08:08:05.721] | : . ' , ; ` | getFutureCore() ...
[08:08:05.721] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:05.721] | : . ' , ; ` | getFutureCore() ... done
[08:08:05.721] | : . ' , ; ` | getFutureCapture() ...
[08:08:05.722] | : . ' , ; ` | getFutureCapture() ... done
[08:08:05.722] | : . ' , ; ` | getFutureContext() ...
[08:08:05.722] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.722] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:05.722] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.722] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:05.723] | : . ' , ; ` | getFutureContext() ... done
[08:08:05.723] | : . ' , ; ` getFutureData() ... done
[08:08:05.723] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ...
[08:08:05.724] | : . ' , ; ` | Appended future to position #2
[08:08:05.724] | : . ' , ; ` | Number of registered futures: 2
[08:08:05.724] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ... done
[08:08:05.724] | : . ' , ; launchFuture() ... done
[08:08:05.724] | : . ' , ; MultisessionFuture started
[08:08:05.724] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:05.725] | : . ' Launching futures ... done
[08:08:05.725] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:05.725] | : . Using MultisessionFutureBackend ... done
[08:08:05.725] | : run() for ‘Future’ (<unnamed-77>) ... done
[08:08:05.725] | future(..., label = NULL) ... done
[08:08:05.726] | future(..., label = NULL) ...
[08:08:05.726] | : lazy: FALSE
[08:08:05.726] | : stdout: TRUE
[08:08:05.727] | : conditions: [n=1] ‘condition’
[08:08:05.727] | : gc: FALSE
[08:08:05.727] | : earlySignal: FALSE
[08:08:05.727] | : getGlobalsAndPackages() ...
[08:08:05.727] | : . Searching for globals ...
[08:08:05.732] | : . ' globals found: [1] ‘{’
[08:08:05.732] | : . Searching for globals ... done
[08:08:05.732] | : . Resolving globals: FALSE
[08:08:05.732] | : . Search for packages associated with the globals ...
[08:08:05.733] | : . ' Packages associated with globals: [1] ‘base’
[08:08:05.733] | : . ' Packages: [1] ‘base’
[08:08:05.733] | : . Search for packages associated with the globals ... done
[08:08:05.733] | : . Packages after dropping 'base': [0] 
[08:08:05.733] | : . globals: [0] 
[08:08:05.733] | : . packages: [0] 
[08:08:05.735] | : getGlobalsAndPackages() ... done
[08:08:05.736] | : run() for ‘Future’ (<unnamed-78>) ...
[08:08:05.736] | : . state: ‘created’
[08:08:05.736] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.736] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.736] | : . Using MultisessionFutureBackend ...
[08:08:05.736] | : . ' Number of futures since start: 2 (2 created, 2 launched, 0 finished)
[08:08:05.736] | : . ' Launching futures ...
[08:08:05.736] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:05.737] | : . ' , ; Workers: [n=2]
[08:08:05.737] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:05.738] | : . ' , ; FutureRegistry: ‘workers-d9e73d0afef6bf67fb99f83a39f0a371’
[08:08:05.738] | : . ' , ; requestWorker() ...
[08:08:05.739] | : . ' , ; ` requestNode() ...
[08:08:05.739] | : . ' , ; ` | Number of workers: 2
[08:08:05.739] | : . ' , ; ` | Polling for a free worker ...
[08:08:05.739] | : . ' , ; ` | : FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:05.739] | : . ' , ; ` | : . Listing all futures
[08:08:05.739] | : . ' , ; ` | : . Number of registered futures: 2
[08:08:05.739] | : . ' , ; ` | : FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:05.739] | : . ' , ; ` | : Poll #1 (0): usedNodes() = 2, workers = 2
[08:08:05.750] | : . ' , ; ` | : FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'collect-first', earlySignal = 1) ...
[08:08:05.750] | : . ' , ; ` | : . collectValues('workers-d9e73d0afef6bf67fb99f83a39f0a371', firstOnly = TRUE) ...
[08:08:05.750] | : . ' , ; ` | : . ' resolved() for MultisessionFuture (<unnamed-76>) ...
[08:08:05.750] | : . ' , ; ` | : . ' , Cluster node socket connection: index=4, id=1255
[08:08:05.750] | : . ' , ; ` | : . ' , assertValidConnection() ...
[08:08:05.751] | : . ' , ; ` | : . ' , ; cluster node index: 1
[08:08:05.751] | : . ' , ; ` | : . ' , assertValidConnection() ... done
[08:08:05.751] | : . ' , ; ` | : . ' , receiveMessageFromWorker() for ClusterFuture ...
[08:08:05.751] | : . ' , ; ` | : . ' , ; cluster node index: 1
[08:08:05.751] | : . ' , ; ` | : . ' , ; [1] TRUE
[08:08:05.752] | : . ' , ; ` | : . ' , ; received data:
[08:08:05.752] | : . ' , ; ` | : . ' , ; List of 5
[08:08:05.752] | : . ' , ; ` | : . ' , ;  $ type   : chr "VALUE"
[08:08:05.752] | : . ' , ; ` | : . ' , ;  $ value  :List of 16
[08:08:05.752] | : . ' , ; ` | : . ' , ;   ..$ value              : num 2
[08:08:05.752] | : . ' , ; ` | : . ' , ;   ..$ visible            : logi TRUE
[08:08:05.752] | : . ' , ; ` | : . ' , ;   ..$ stdout             : chr ""
[08:08:05.752] | : . ' , ; ` | : . ' , ;   ..$ conditions         : list()
[08:08:05.752] | : . ' , ; ` | : . ' , ;   ..$ rng                : logi FALSE
[08:08:05.752] | : . ' , ; ` | : . ' , ;   ..$ seed               : NULL
[08:08:05.752] | : . ' , ; ` | : . ' , ;   ..$ misuseGlobalEnv    : NULL
[08:08:05.752] | : . ' , ; ` | : . ' , ;   ..$ misuseConnections  :List of 3
[08:08:05.752] | : . ' , ; ` | : . ' , ;   .. ..$ added   : NULL
[08:08:05.752] | : . ' , ; ` | : . ' , ;   .. ..$ removed : NULL
[08:08:05.752] | : . ' , ; ` | : . ' , ;   .. ..$ replaced: NULL
[08:08:05.752] | : . ' , ; ` | : . ' , ;   ..$ misuseDevices      : NULL
[08:08:05.752] | : . ' , ; ` | : . ' , ;   ..$ misuseDefaultDevice: list()
[08:08:05.752] | : . ' , ; ` | : . ' , ;   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:05"
[08:08:05.752] | : . ' , ; ` | : . ' , ;   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:05"
[08:08:05.752] | : . ' , ; ` | : . ' , ;   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "76"
[08:08:05.752] | : . ' , ; ` | : . ' , ;   ..$ session_uuid       : chr "47b35ab504ca4447100288bf636d3311"
[08:08:05.752] | : . ' , ; ` | : . ' , ;   .. ..- attr(*, "source")=List of 5
[08:08:05.752] | : . ' , ; ` | : . ' , ;   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:05.752] | : . ' , ; ` | : . ' , ;   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:05.752] | : . ' , ; ` | : . ' , ;   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:05.752] | : . ' , ; ` | : . ' , ;   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:05.752] | : . ' , ; ` | : . ' , ;   .. .. ..$ pid   : int 69070
[08:08:05.752] | : . ' , ; ` | : . ' , ;   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:05"
[08:08:05.752] | : . ' , ; ` | : . ' , ;   .. .. ..$ random: int 2147483647
[08:08:05.752] | : . ' , ; ` | : . ' , ;   ..$ r_info             :List of 4
[08:08:05.752] | : . ' , ; ` | : . ' , ;   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:05.752] | : . ' , ; ` | : . ' , ;   .. .. ..$ : int [1:3] 4 5 1
[08:08:05.752] | : . ' , ; ` | : . ' , ;   .. ..$ os           : chr "unix"
[08:08:05.752] | : . ' , ; ` | : . ' , ;   .. ..$ os_name      : chr "Linux"
[08:08:05.752] | : . ' , ; ` | : . ' , ;   .. ..$ captures_utf8: logi TRUE
[08:08:05.752] | : . ' , ; ` | : . ' , ;   ..$ version            : chr "1.8"
[08:08:05.752] | : . ' , ; ` | : . ' , ;   ..- attr(*, "class")= chr "FutureResult"
[08:08:05.752] | : . ' , ; ` | : . ' , ;  $ success: logi TRUE
[08:08:05.752] | : . ' , ; ` | : . ' , ;  $ time   : 'proc_time' Named num [1:5] 0.069 0.001 0.07 0 0
[08:08:05.752] | : . ' , ; ` | : . ' , ;   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:05.752] | : . ' , ; ` | : . ' , ;  $ tag    : NULL
[08:08:05.763] | : . ' , ; ` | : . ' , ; Received FutureResult
[08:08:05.763] | : . ' , ; ` | : . ' , ; FutureResult:
[08:08:05.763] | : . ' , ; ` | : . ' , ; value: ‘numeric’
[08:08:05.763] | : . ' , ; ` | : . ' , ; visible: TRUE
[08:08:05.763] | : . ' , ; ` | : . ' , ; stdout: character
[08:08:05.763] | : . ' , ; ` | : . ' , ; conditions: [n = 0] 
[08:08:05.763] | : . ' , ; ` | : . ' , ; RNG used: FALSE
[08:08:05.763] | : . ' , ; ` | : . ' , ; duration: 0.06788921 secs (started 2025-06-17 08:08:05.680636)
[08:08:05.763] | : . ' , ; ` | : . ' , ; version: 1.8
[08:08:05.763] | : . ' , ; ` | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ...
[08:08:05.763] | : . ' , ; ` | : . ' , ; ` Removed future from position #1
[08:08:05.764] | : . ' , ; ` | : . ' , ; ` Number of registered futures: 1
[08:08:05.764] | : . ' , ; ` | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ... done
[08:08:05.764] | : . ' , ; ` | : . ' , ; Erased future from future backend
[08:08:05.764] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ...
[08:08:05.764] | : . ' , ; ` | : . ' , ; ` result already collected: FutureResult
[08:08:05.764] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ... done
[08:08:05.764] | : . ' , ; ` | : . ' , ; signalConditions() ...
[08:08:05.764] | : . ' , ; ` | : . ' , ; ` include = ‘immediateCondition’
[08:08:05.764] | : . ' , ; ` | : . ' , ; ` exclude = 
[08:08:05.764] | : . ' , ; ` | : . ' , ; ` resignal = FALSE
[08:08:05.765] | : . ' , ; ` | : . ' , ; ` Number of conditions: 0
[08:08:05.765] | : . ' , ; ` | : . ' , ; `  int 0
[08:08:05.765] | : . ' , ; ` | : . ' , ; signalConditions() ... done
[08:08:05.765] | : . ' , ; ` | : . ' , receiveMessageFromWorker() for ClusterFuture ... done
[08:08:05.765] | : . ' , ; ` | : . ' , receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:05.765] | : . ' , ; ` | : . ' resolved() for MultisessionFuture (<unnamed-76>) ... done
[08:08:05.766] | : . ' , ; ` | : . ' assertFutureResult() ...
[08:08:05.766] | : . ' , ; ` | : . ' , Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:05.766] | : . ' , ; ` | : . ' , Future uuid: 76
[08:08:05.766] | : . ' , ; ` | : . ' , identical; success
[08:08:05.766] | : . ' , ; ` | : . ' assertFutureResult() ... done
[08:08:05.766] | : . ' , ; ` | : . ' Future at position #1 is resolved ...
[08:08:05.766] | : . ' , ; ` | : . ' , value() for MultisessionFuture (<unnamed-76>) ...
[08:08:05.766] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ...
[08:08:05.766] | : . ' , ; ` | : . ' , ; ` result already collected: FutureResult
[08:08:05.766] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ... done
[08:08:05.766] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ...
[08:08:05.767] | : . ' , ; ` | : . ' , ; ` result already collected: FutureResult
[08:08:05.767] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ... done
[08:08:05.767] | : . ' , ; ` | : . ' , ; signalConditions() ...
[08:08:05.767] | : . ' , ; ` | : . ' , ; ` include = ‘immediateCondition’
[08:08:05.767] | : . ' , ; ` | : . ' , ; ` exclude = 
[08:08:05.767] | : . ' , ; ` | : . ' , ; ` resignal = FALSE
[08:08:05.767] | : . ' , ; ` | : . ' , ; ` Number of conditions: 0
[08:08:05.767] | : . ' , ; ` | : . ' , ; `  int 0
[08:08:05.768] | : . ' , ; ` | : . ' , ; signalConditions() ... done
[08:08:05.768] | : . ' , ; ` | : . ' , ; check for misuse ...
[08:08:05.768] | : . ' , ; ` | : . ' , ; check for misuse ... done
[08:08:05.768] | : . ' , ; ` | : . ' , value() for MultisessionFuture (<unnamed-76>) ... done
[08:08:05.768] | : . ' , ; ` | : . ' Future at position #1 is resolved ... done
[08:08:05.768] | : . ' , ; ` | : . collectValues('workers-d9e73d0afef6bf67fb99f83a39f0a371', firstOnly = TRUE) ... done
[08:08:05.768] | : . ' , ; ` | : . Remove collected futures ...
[08:08:05.769] | : . ' , ; ` | : . ' Indices of futures to drop: [n=1] ‘1’
[08:08:05.769] | : . ' , ; ` | : . Remove collected futures ... done
[08:08:05.769] | : . ' , ; ` | : FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'collect-first', earlySignal = 1) ... done
[08:08:05.769] | : . ' , ; ` | : Early signaling of 2 future candidates ...
[08:08:05.769] | : . ' , ; ` | : Number of futures with early signaling requested: 0
[08:08:05.769] | : . ' , ; ` | : Early signaling of 2 future candidates ... done
[08:08:05.769] | : . ' , ; ` | : Number of registered futures: 2
[08:08:05.769] | : . ' , ; ` | Polling for a free worker ... done
[08:08:05.769] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:05.770] | : . ' , ; ` | : Listing all futures
[08:08:05.770] | : . ' , ; ` | : Number of registered futures: 1
[08:08:05.770] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:05.770] | : . ' , ; ` | Total time: 0.0305342674255371
[08:08:05.770] | : . ' , ; ` requestNode() ... done
[08:08:05.770] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:05.770] | : . ' , ; ` | Listing all futures
[08:08:05.770] | : . ' , ; ` | Number of registered futures: 1
[08:08:05.770] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:05.770] | : . ' , ; ` avail: [n=2] ‘1’
[08:08:05.771] | : . ' , ; ` Index of first available worker: 1
[08:08:05.771] | : . ' , ; ` Validate that the worker is functional ...
[08:08:05.868] | : . ' , ; ` | Worker is functional
[08:08:05.868] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:05.868] | : . ' , ; ` | : Listing all futures
[08:08:05.868] | : . ' , ; ` | : Number of registered futures: 1
[08:08:05.868] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:05.868] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:05.869] | : . ' , ; requestWorker() ... done
[08:08:05.869] | : . ' , ; cluster node index: 1
[08:08:05.869] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:05.869] | : . ' , eraseGlobalEnvironment() ...
[08:08:05.869] | : . ' , eraseGlobalEnvironment() ... done
[08:08:05.870] | : . ' , launchFuture() ...
[08:08:05.870] | : . ' , ; cluster node index: 1
[08:08:05.870] | : . ' , ; getFutureData() ...
[08:08:05.870] | : . ' , ; ` getFutureCore() ...
[08:08:05.870] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:05.870] | : . ' , ; ` getFutureCore() ... done
[08:08:05.870] | : . ' , ; ` getFutureCapture() ...
[08:08:05.870] | : . ' , ; ` getFutureCapture() ... done
[08:08:05.870] | : . ' , ; ` getFutureContext() ...
[08:08:05.870] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.871] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:05.871] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.871] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:05.871] | : . ' , ; ` getFutureContext() ... done
[08:08:05.871] | : . ' , ; getFutureData() ... done
[08:08:05.871] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ...
[08:08:05.872] | : . ' , ; ` Appended future to position #2
[08:08:05.872] | : . ' , ; ` Number of registered futures: 2
[08:08:05.872] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ... done
[08:08:05.872] | : . ' , launchFuture() ... done
[08:08:05.872] | : . ' , MultisessionFuture started
[08:08:05.872] | : . ' Launching futures ... done
[08:08:05.872] | : . Using MultisessionFutureBackend ... done
[08:08:05.872] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:05.872] | : run() for ‘Future’ (<unnamed-78>) ... done
[08:08:05.872] | future(..., label = NULL) ... done
[08:08:05.873] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
<environment: 0x55675cbd7630> 
<environment: 0x55675c89d900> 
[08:08:05.874] resolved() for environment ...
[08:08:05.874] | resolved() for list ...
[08:08:05.874] | : Number of elements: 4
[08:08:05.874] | : Number of futures: 4
[08:08:05.874] | : resolved() for MultisessionFuture (<unnamed-77>) ...
[08:08:05.875] | : . Cluster node socket connection: index=5, id=1256
[08:08:05.875] | : . assertValidConnection() ...
[08:08:05.875] | : . ' cluster node index: 2
[08:08:05.875] | : . assertValidConnection() ... done
[08:08:05.876] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:05.876] | : . ' cluster node index: 2
[08:08:05.876] | : . ' [1] TRUE
[08:08:05.876] | : . ' received data:
[08:08:05.876] | : . ' List of 5
[08:08:05.876] | : . '  $ type   : chr "VALUE"
[08:08:05.876] | : . '  $ value  :List of 16
[08:08:05.876] | : . '   ..$ value              : NULL
[08:08:05.876] | : . '   ..$ visible            : logi TRUE
[08:08:05.876] | : . '   ..$ stdout             : chr ""
[08:08:05.876] | : . '   ..$ conditions         : list()
[08:08:05.876] | : . '   ..$ rng                : logi FALSE
[08:08:05.876] | : . '   ..$ seed               : NULL
[08:08:05.876] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:05.876] | : . '   ..$ misuseConnections  :List of 3
[08:08:05.876] | : . '   .. ..$ added   : NULL
[08:08:05.876] | : . '   .. ..$ removed : NULL
[08:08:05.876] | : . '   .. ..$ replaced: NULL
[08:08:05.876] | : . '   ..$ misuseDevices      : NULL
[08:08:05.876] | : . '   ..$ misuseDefaultDevice: list()
[08:08:05.876] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:05"
[08:08:05.876] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:05"
[08:08:05.876] | : . '   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "77"
[08:08:05.876] | : . '   ..$ session_uuid       : chr "d924a4373eab2307bd7df4caf6e025d6"
[08:08:05.876] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:05.876] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:05.876] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:05.876] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:05.876] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:05.876] | : . '   .. .. ..$ pid   : int 69071
[08:08:05.876] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:05"
[08:08:05.876] | : . '   .. .. ..$ random: int 2147483647
[08:08:05.876] | : . '   ..$ r_info             :List of 4
[08:08:05.876] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:05.876] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:05.876] | : . '   .. ..$ os           : chr "unix"
[08:08:05.876] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:05.876] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:05.876] | : . '   ..$ version            : chr "1.8"
[08:08:05.876] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:05.876] | : . '  $ success: logi TRUE
[08:08:05.876] | : . '  $ time   : 'proc_time' Named num [1:5] 0.062 0 0.062 0 0
[08:08:05.876] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:05.876] | : . '  $ tag    : NULL
[08:08:05.887] | : . ' Received FutureResult
[08:08:05.887] | : . ' FutureResult:
[08:08:05.887] | : . ' value: ‘NULL’
[08:08:05.887] | : . ' visible: TRUE
[08:08:05.887] | : . ' stdout: character
[08:08:05.887] | : . ' conditions: [n = 0] 
[08:08:05.887] | : . ' RNG used: FALSE
[08:08:05.887] | : . ' duration: 0.06011534 secs (started 2025-06-17 08:08:05.766256)
[08:08:05.887] | : . ' version: 1.8
[08:08:05.887] | : . ' FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ...
[08:08:05.888] | : . ' , Removed future from position #1
[08:08:05.888] | : . ' , Number of registered futures: 1
[08:08:05.888] | : . ' FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ... done
[08:08:05.888] | : . ' Erased future from future backend
[08:08:05.888] | : . ' result() for ClusterFuture ...
[08:08:05.888] | : . ' , result already collected: FutureResult
[08:08:05.888] | : . ' result() for ClusterFuture ... done
[08:08:05.888] | : . ' signalConditions() ...
[08:08:05.889] | : . ' , include = ‘immediateCondition’
[08:08:05.889] | : . ' , exclude = 
[08:08:05.889] | : . ' , resignal = FALSE
[08:08:05.889] | : . ' , Number of conditions: 0
[08:08:05.889] | : . ' ,  int 0
[08:08:05.889] | : . ' signalConditions() ... done
[08:08:05.889] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:05.890] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:05.890] | : resolved() for MultisessionFuture (<unnamed-77>) ... done
[08:08:05.890] | : assertFutureResult() ...
[08:08:05.890] | : . Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:05.890] | : . Future uuid: 77
[08:08:05.890] | : . identical; success
[08:08:05.890] | : assertFutureResult() ... done
[08:08:05.890] | : resolved() for MultisessionFuture (<unnamed-78>) ...
[08:08:05.890] | : . Cluster node socket connection: index=4, id=1255
[08:08:05.891] | : . assertValidConnection() ...
[08:08:05.891] | : . ' cluster node index: 1
[08:08:05.891] | : . assertValidConnection() ... done
[08:08:05.901] | : . socketSelect(list(<connection #4 (id=1255)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:05.901] | : resolved() for MultisessionFuture (<unnamed-78>) ... done
[08:08:05.902] | resolved() for list ... done
[08:08:05.902] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE FALSE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:05.903] value() for MultisessionFuture (<unnamed-78>) ...
[08:08:05.903] | result() for ClusterFuture ...
[08:08:05.903] | : assertValidConnection() ...
[08:08:05.903] | : . cluster node index: 1
[08:08:05.903] | : assertValidConnection() ... done
[08:08:05.903] | : receiveMessageFromWorker() for ClusterFuture ...
[08:08:05.903] | : . cluster node index: 1
[08:08:05.916] | : . [1] TRUE
[08:08:05.916] | : . received data:
[08:08:05.916] | : . List of 5
[08:08:05.916] | : .  $ type   : chr "VALUE"
[08:08:05.916] | : .  $ value  :List of 16
[08:08:05.916] | : .   ..$ value              : num 4
[08:08:05.916] | : .   ..$ visible            : logi TRUE
[08:08:05.916] | : .   ..$ stdout             : chr ""
[08:08:05.916] | : .   ..$ conditions         : list()
[08:08:05.916] | : .   ..$ rng                : logi FALSE
[08:08:05.916] | : .   ..$ seed               : NULL
[08:08:05.916] | : .   ..$ misuseGlobalEnv    : NULL
[08:08:05.916] | : .   ..$ misuseConnections  :List of 3
[08:08:05.916] | : .   .. ..$ added   : NULL
[08:08:05.916] | : .   .. ..$ removed : NULL
[08:08:05.916] | : .   .. ..$ replaced: NULL
[08:08:05.916] | : .   ..$ misuseDevices      : NULL
[08:08:05.916] | : .   ..$ misuseDefaultDevice: list()
[08:08:05.916] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:05"
[08:08:05.916] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:05"
[08:08:05.916] | : .   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "78"
[08:08:05.916] | : .   ..$ session_uuid       : chr "47b35ab504ca4447100288bf636d3311"
[08:08:05.916] | : .   .. ..- attr(*, "source")=List of 5
[08:08:05.916] | : .   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:05.916] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:05.916] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:05.916] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:05.916] | : .   .. .. ..$ pid   : int 69070
[08:08:05.916] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:05"
[08:08:05.916] | : .   .. .. ..$ random: int 2147483647
[08:08:05.916] | : .   ..$ r_info             :List of 4
[08:08:05.916] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:05.916] | : .   .. .. ..$ : int [1:3] 4 5 1
[08:08:05.916] | : .   .. ..$ os           : chr "unix"
[08:08:05.916] | : .   .. ..$ os_name      : chr "Linux"
[08:08:05.916] | : .   .. ..$ captures_utf8: logi TRUE
[08:08:05.916] | : .   ..$ version            : chr "1.8"
[08:08:05.916] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:08:05.916] | : .  $ success: logi TRUE
[08:08:05.916] | : .  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.004 0 0
[08:08:05.916] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:05.916] | : .  $ tag    : NULL
[08:08:05.930] | : . Received FutureResult
[08:08:05.930] | : . FutureResult:
[08:08:05.930] | : . value: ‘numeric’
[08:08:05.930] | : . visible: TRUE
[08:08:05.930] | : . stdout: character
[08:08:05.930] | : . conditions: [n = 0] 
[08:08:05.930] | : . RNG used: FALSE
[08:08:05.930] | : . duration: 0.003073692 secs (started 2025-06-17 08:08:05.912894)
[08:08:05.930] | : . version: 1.8
[08:08:05.930] | : . FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ...
[08:08:05.930] | : . ' Removed future from position #1
[08:08:05.931] | : . ' Number of registered futures: 0
[08:08:05.931] | : . FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ... done
[08:08:05.931] | : . Erased future from future backend
[08:08:05.931] | : . result() for ClusterFuture ...
[08:08:05.931] | : . ' result already collected: FutureResult
[08:08:05.931] | : . result() for ClusterFuture ... done
[08:08:05.931] | : . signalConditions() ...
[08:08:05.931] | : . ' include = ‘immediateCondition’
[08:08:05.931] | : . ' exclude = 
[08:08:05.931] | : . ' resignal = FALSE
[08:08:05.932] | : . ' Number of conditions: 0
[08:08:05.932] | : . '  int 0
[08:08:05.932] | : . signalConditions() ... done
[08:08:05.932] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:08:05.932] | result() for ClusterFuture ... done
[08:08:05.932] | result() for ClusterFuture ...
[08:08:05.932] | : result already collected: FutureResult
[08:08:05.933] | result() for ClusterFuture ... done
[08:08:05.933] | signalConditions() ...
[08:08:05.933] | : include = ‘immediateCondition’
[08:08:05.933] | : exclude = 
[08:08:05.933] | : resignal = FALSE
[08:08:05.933] | : Number of conditions: 0
[08:08:05.933] | :  int 0
[08:08:05.934] | signalConditions() ... done
[08:08:05.934] | relay stdout ...
[08:08:05.934] | relay stdout ... done
[08:08:05.934] | check for misuse ...
[08:08:05.934] | check for misuse ... done
[08:08:05.934] value() for MultisessionFuture (<unnamed-78>) ... done
[08:08:05.934] value() for listenv ...
[08:08:05.935] | recursive: 0
[08:08:05.935] | reduce: FALSE
[08:08:05.935] | length: 4
[08:08:05.935] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:05.935] | Number of remaining objects: 4
[08:08:05.936] | checking value #1:
[08:08:05.936] | 'obj' is atomic
[08:08:05.936] | signalConditionsASAP(numeric, pos=1) ...
[08:08:05.936] | : nx: 4
[08:08:05.936] | : relay: TRUE
[08:08:05.936] | : stdout: TRUE
[08:08:05.936] | : signal: TRUE
[08:08:05.936] | : resignal: FALSE
[08:08:05.936] | : force: TRUE
[08:08:05.936] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:05.937] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:05.937] | : until=2
[08:08:05.937] | : relaying element #2
[08:08:05.937] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:05.937] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:05.937] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:05.937] | length: 3 (resolved future 1)
[08:08:05.938] value() for listenv ... done
[08:08:05.938] checking value #2:
[08:08:05.938] 'obj' is MultisessionFuture
[08:08:05.938] MultisessionFuture #2
[08:08:05.938] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:05.938] | nx: 4
[08:08:05.938] | relay: TRUE
[08:08:05.938] | stdout: TRUE
[08:08:05.938] | signal: TRUE
[08:08:05.938] | resignal: FALSE
[08:08:05.938] | force: TRUE
[08:08:05.939] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:05.939] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:05.939] | until=2
[08:08:05.939] | relaying element #2
[08:08:05.939] | value() for MultisessionFuture (<unnamed-76>) ...
[08:08:05.939] | : result() for ClusterFuture ...
[08:08:05.939] | : . result already collected: FutureResult
[08:08:05.939] | : result() for ClusterFuture ... done
[08:08:05.939] | : result() for ClusterFuture ...
[08:08:05.939] | : . result already collected: FutureResult
[08:08:05.940] | : result() for ClusterFuture ... done
[08:08:05.940] | : signalConditions() ...
[08:08:05.940] | : . include = ‘immediateCondition’
[08:08:05.940] | : . exclude = 
[08:08:05.940] | : . resignal = FALSE
[08:08:05.940] | : . Number of conditions: 0
[08:08:05.940] | : .  int 0
[08:08:05.940] | : signalConditions() ... done
[08:08:05.941] | : relay stdout ...
[08:08:05.941] | : relay stdout ... done
[08:08:05.941] | : check for misuse ...
[08:08:05.941] | : check for misuse ... done
[08:08:05.941] | value() for MultisessionFuture (<unnamed-76>) ... done
[08:08:05.941] | result() for ClusterFuture ...
[08:08:05.941] | : result already collected: FutureResult
[08:08:05.941] | result() for ClusterFuture ... done
[08:08:05.941] | signalConditions() ...
[08:08:05.941] | : include = ‘immediateCondition’
[08:08:05.942] | : exclude = 
[08:08:05.942] | : resignal = FALSE
[08:08:05.942] | : Number of conditions: 0
[08:08:05.942] | :  int 0
[08:08:05.942] | signalConditions() ... done
[08:08:05.942] | result() for ClusterFuture ...
[08:08:05.942] | : result already collected: FutureResult
[08:08:05.943] | result() for ClusterFuture ... done
[08:08:05.943] | signalConditions() ...
[08:08:05.943] | : include = ‘condition’
[08:08:05.943] | : exclude = ‘error’, ‘immediateCondition’
[08:08:05.943] | : resignal = TRUE
[08:08:05.943] | : Number of conditions: 0
[08:08:05.943] | :  int 0
[08:08:05.943] | signalConditions() ... done
[08:08:05.944] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:05.944] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:05.944] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:05.944] value(<MultisessionFuture>, ...) ...
[08:08:05.944] value(<MultisessionFuture>, ...) ... done
[08:08:05.944] value() for MultisessionFuture (<unnamed-76>) ...
[08:08:05.944] | result() for ClusterFuture ...
[08:08:05.944] | : result already collected: FutureResult
[08:08:05.944] | result() for ClusterFuture ... done
[08:08:05.944] | result() for ClusterFuture ...
[08:08:05.945] | : result already collected: FutureResult
[08:08:05.945] | result() for ClusterFuture ... done
[08:08:05.945] | signalConditions() ...
[08:08:05.945] | : include = ‘immediateCondition’
[08:08:05.945] | : exclude = 
[08:08:05.945] | : resignal = FALSE
[08:08:05.945] | : Number of conditions: 0
[08:08:05.945] | :  int 0
[08:08:05.946] | signalConditions() ... done
[08:08:05.946] | check for misuse ...
[08:08:05.946] | check for misuse ... done
[08:08:05.946] value() for MultisessionFuture (<unnamed-76>) ... done
[08:08:05.946] value: <numeric>
[08:08:05.946] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:05.946] | nx: 4
[08:08:05.946] | relay: TRUE
[08:08:05.946] | stdout: TRUE
[08:08:05.947] | signal: TRUE
[08:08:05.947] | resignal: FALSE
[08:08:05.947] | force: TRUE
[08:08:05.947] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:05.947] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:05.947] | until=3
[08:08:05.947] | relaying element #3
[08:08:05.947] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:05.947] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:05.947] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:05.947] resolve() for MultisessionFuture ...
[08:08:05.948] resolve() for MultisessionFuture ... done
[08:08:05.948] length: 2 (resolved future 2)

[08:08:05.948] checking value #3:
[08:08:05.948] 'obj' is MultisessionFuture
[08:08:05.948] MultisessionFuture #3
[08:08:05.948] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:05.948] | nx: 4
[08:08:05.948] | relay: TRUE
[08:08:05.948] | stdout: TRUE
[08:08:05.949] | signal: TRUE
[08:08:05.949] | resignal: FALSE
[08:08:05.949] | force: TRUE
[08:08:05.949] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:05.949] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:05.949] | until=3
[08:08:05.949] | relaying element #3
[08:08:05.949] | value() for MultisessionFuture (<unnamed-77>) ...
[08:08:05.949] | : result() for ClusterFuture ...
[08:08:05.949] | : . result already collected: FutureResult
[08:08:05.949] | : result() for ClusterFuture ... done
[08:08:05.950] | : result() for ClusterFuture ...
[08:08:05.950] | : . result already collected: FutureResult
[08:08:05.950] | : result() for ClusterFuture ... done
[08:08:05.950] | : signalConditions() ...
[08:08:05.950] | : . include = ‘immediateCondition’
[08:08:05.950] | : . exclude = 
[08:08:05.950] | : . resignal = FALSE
[08:08:05.950] | : . Number of conditions: 0
[08:08:05.950] | : .  int 0
[08:08:05.951] | : signalConditions() ... done
[08:08:05.951] | : relay stdout ...
[08:08:05.951] | : relay stdout ... done
[08:08:05.951] | : check for misuse ...
[08:08:05.951] | : check for misuse ... done
[08:08:05.951] | value() for MultisessionFuture (<unnamed-77>) ... done
[08:08:05.951] | result() for ClusterFuture ...
[08:08:05.951] | : result already collected: FutureResult
[08:08:05.952] | result() for ClusterFuture ... done
[08:08:05.952] | signalConditions() ...
[08:08:05.952] | : include = ‘immediateCondition’
[08:08:05.952] | : exclude = 
[08:08:05.952] | : resignal = FALSE
[08:08:05.952] | : Number of conditions: 0
[08:08:05.952] | :  int 0
[08:08:05.952] | signalConditions() ... done
[08:08:05.953] | result() for ClusterFuture ...
[08:08:05.953] | : result already collected: FutureResult
[08:08:05.953] | result() for ClusterFuture ... done
[08:08:05.953] | signalConditions() ...
[08:08:05.953] | : include = ‘condition’
[08:08:05.953] | : exclude = ‘error’, ‘immediateCondition’
[08:08:05.953] | : resignal = TRUE
[08:08:05.953] | : Number of conditions: 0
[08:08:05.953] | :  int 0
[08:08:05.954] | signalConditions() ... done
[08:08:05.954] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:05.954] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:05.954] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:05.954] value(<MultisessionFuture>, ...) ...
[08:08:05.954] value(<MultisessionFuture>, ...) ... done
[08:08:05.954] value() for MultisessionFuture (<unnamed-77>) ...
[08:08:05.954] | result() for ClusterFuture ...
[08:08:05.954] | : result already collected: FutureResult
[08:08:05.955] | result() for ClusterFuture ... done
[08:08:05.955] | result() for ClusterFuture ...
[08:08:05.955] | : result already collected: FutureResult
[08:08:05.955] | result() for ClusterFuture ... done
[08:08:05.955] | signalConditions() ...
[08:08:05.955] | : include = ‘immediateCondition’
[08:08:05.955] | : exclude = 
[08:08:05.955] | : resignal = FALSE
[08:08:05.955] | : Number of conditions: 0
[08:08:05.955] | :  int 0
[08:08:05.956] | signalConditions() ... done
[08:08:05.956] | check for misuse ...
[08:08:05.956] | check for misuse ... done
[08:08:05.956] value() for MultisessionFuture (<unnamed-77>) ... done
[08:08:05.956] value: <NULL>
[08:08:05.956] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:05.956] | nx: 4
[08:08:05.957] | relay: TRUE
[08:08:05.957] | stdout: TRUE
[08:08:05.957] | signal: TRUE
[08:08:05.957] | resignal: FALSE
[08:08:05.957] | force: TRUE
[08:08:05.957] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:05.957] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:05.957] | until=4
[08:08:05.957] | relaying element #4
[08:08:05.957] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:05.958] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:05.958] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:05.958] resolve() for MultisessionFuture ...
[08:08:05.958] resolve() for MultisessionFuture ... done
[08:08:05.958] length: 1 (resolved future 3)

[08:08:05.958] checking value #4:
[08:08:05.958] 'obj' is atomic
[08:08:05.958] signalConditionsASAP(numeric, pos=4) ...
[08:08:05.958] | nx: 4
[08:08:05.958] | relay: TRUE
[08:08:05.959] | stdout: TRUE
[08:08:05.959] | signal: TRUE
[08:08:05.959] | resignal: FALSE
[08:08:05.959] | force: TRUE
[08:08:05.959] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:05.959] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:05.959] | until=4
[08:08:05.959] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:05.959] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:05.959] signalConditionsASAP(numeric, pos=4) ... done
[08:08:05.960] length: 0 (resolved future 4)

[08:08:05.960] Relaying remaining futures ...
[08:08:05.960] | signalConditionsASAP(NULL, pos=0) ...
[08:08:05.960] | : nx: 4
[08:08:05.960] | : relay: TRUE
[08:08:05.960] | : stdout: TRUE
[08:08:05.960] | : signal: TRUE
[08:08:05.960] | : resignal: FALSE
[08:08:05.960] | : force: TRUE
[08:08:05.960] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:05.961] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:05.961] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:05.961] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:05.961] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:05.961] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(1, 6)
[08:08:05.963] future(..., label = NULL) ...
[08:08:05.963] | lazy: FALSE
[08:08:05.963] | stdout: TRUE
[08:08:05.963] | conditions: [n=1] ‘condition’
[08:08:05.963] | gc: FALSE
[08:08:05.963] | earlySignal: FALSE
[08:08:05.963] | getGlobalsAndPackages() ...
[08:08:05.963] | : Searching for globals ...
[08:08:05.965] | : . globals found: [0] 
[08:08:05.965] | : Searching for globals ... done
[08:08:05.965] | : globals: [0] <none>
[08:08:05.965] | : packages: [0] <none>
[08:08:05.965] | getGlobalsAndPackages() ... done
[08:08:05.965] | run() for ‘Future’ (<unnamed-79>) ...
[08:08:05.965] | : state: ‘created’
[08:08:05.966] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.966] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.966] | : Using MultisessionFutureBackend ...
[08:08:05.966] | : . Number of futures since start: 3 (3 created, 3 launched, 4 finished)
[08:08:05.966] | : . Launching futures ...
[08:08:05.966] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:05.966] | : . ' , Workers: [n=2]
[08:08:05.966] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:05.968] | : . ' , FutureRegistry: ‘workers-d9e73d0afef6bf67fb99f83a39f0a371’
[08:08:05.968] | : . ' , requestWorker() ...
[08:08:05.968] | : . ' , ; requestNode() ...
[08:08:05.968] | : . ' , ; ` Number of workers: 2
[08:08:05.968] | : . ' , ; ` Polling for a free worker ...
[08:08:05.969] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:05.969] | : . ' , ; ` | : Listing all futures
[08:08:05.969] | : . ' , ; ` | : Number of registered futures: 0
[08:08:05.969] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:05.969] | : . ' , ; ` | Total time: 0
[08:08:05.969] | : . ' , ; ` Polling for a free worker ... done
[08:08:05.969] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:05.969] | : . ' , ; ` | Listing all futures
[08:08:05.969] | : . ' , ; ` | Number of registered futures: 0
[08:08:05.970] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:05.970] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:05.970] | : . ' , ; ` Index of first available worker: 1
[08:08:05.970] | : . ' , ; ` Validate that the worker is functional ...
[08:08:06.068] | : . ' , ; ` | Worker is functional
[08:08:06.068] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:06.068] | : . ' , ; ` | : Listing all futures
[08:08:06.068] | : . ' , ; ` | : Number of registered futures: 0
[08:08:06.068] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:06.068] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:06.069] | : . ' , ; requestNode() ... done
[08:08:06.069] | : . ' , ; cluster node index: 1
[08:08:06.069] | : . ' , requestWorker() ... done
[08:08:06.069] | : . ' , eraseGlobalEnvironment() ...
[08:08:06.069] | : . ' , eraseGlobalEnvironment() ... done
[08:08:06.070] | : . ' , launchFuture() ...
[08:08:06.070] | : . ' , ; cluster node index: 1
[08:08:06.070] | : . ' , ; getFutureData() ...
[08:08:06.070] | : . ' , ; ` getFutureCore() ...
[08:08:06.070] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:06.070] | : . ' , ; ` getFutureCore() ... done
[08:08:06.070] | : . ' , ; ` getFutureCapture() ...
[08:08:06.070] | : . ' , ; ` getFutureCapture() ... done
[08:08:06.071] | : . ' , ; ` getFutureContext() ...
[08:08:06.071] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:06.071] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:06.071] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:06.071] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:06.071] | : . ' , ; ` getFutureContext() ... done
[08:08:06.071] | : . ' , ; getFutureData() ... done
[08:08:06.072] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ...
[08:08:06.072] | : . ' , ; ` Appended future to position #1
[08:08:06.072] | : . ' , ; ` Number of registered futures: 1
[08:08:06.072] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ... done
[08:08:06.072] | : . ' , launchFuture() ... done
[08:08:06.072] | : . ' , MultisessionFuture started
[08:08:06.072] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:06.072] | : . Launching futures ... done
[08:08:06.073] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:06.073] | : Using MultisessionFutureBackend ... done
[08:08:06.073] | run() for ‘Future’ (<unnamed-79>) ... done
[08:08:06.073] future(..., label = NULL) ... done
[08:08:06.073] future(..., label = NULL) ...
[08:08:06.073] | lazy: FALSE
[08:08:06.073] | stdout: TRUE
[08:08:06.073] | conditions: [n=1] ‘condition’
[08:08:06.073] | gc: FALSE
[08:08:06.074] | earlySignal: FALSE
[08:08:06.074] | getGlobalsAndPackages() ...
[08:08:06.074] | : Searching for globals ...
[08:08:06.075] | : . globals found: [0] 
[08:08:06.075] | : Searching for globals ... done
[08:08:06.075] | : globals: [0] <none>
[08:08:06.075] | : packages: [0] <none>
[08:08:06.075] | getGlobalsAndPackages() ... done
[08:08:06.076] | run() for ‘Future’ (<unnamed-80>) ...
[08:08:06.076] | : state: ‘created’
[08:08:06.076] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:06.076] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:06.076] | : Using MultisessionFutureBackend ...
[08:08:06.076] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:06.076] | : . Launching futures ...
[08:08:06.077] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:06.077] | : . ' , Workers: [n=2]
[08:08:06.077] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:06.078] | : . ' , FutureRegistry: ‘workers-d9e73d0afef6bf67fb99f83a39f0a371’
[08:08:06.079] | : . ' , requestWorker() ...
[08:08:06.079] | : . ' , ; requestNode() ...
[08:08:06.079] | : . ' , ; ` Number of workers: 2
[08:08:06.079] | : . ' , ; ` Polling for a free worker ...
[08:08:06.079] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:06.079] | : . ' , ; ` | : Listing all futures
[08:08:06.079] | : . ' , ; ` | : Number of registered futures: 1
[08:08:06.079] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:06.079] | : . ' , ; ` | Total time: 0
[08:08:06.080] | : . ' , ; ` Polling for a free worker ... done
[08:08:06.080] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:06.080] | : . ' , ; ` | Listing all futures
[08:08:06.080] | : . ' , ; ` | Number of registered futures: 1
[08:08:06.080] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:06.080] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:06.080] | : . ' , ; ` Index of first available worker: 2
[08:08:06.080] | : . ' , ; ` Validate that the worker is functional ...
[08:08:06.146] | : . ' , ; ` | Worker is functional
[08:08:06.146] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:06.146] | : . ' , ; ` | : Listing all futures
[08:08:06.146] | : . ' , ; ` | : Number of registered futures: 1
[08:08:06.147] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:06.147] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:06.147] | : . ' , ; requestNode() ... done
[08:08:06.147] | : . ' , ; cluster node index: 2
[08:08:06.147] | : . ' , requestWorker() ... done
[08:08:06.149] | : . ' , eraseGlobalEnvironment() ...
[08:08:06.150] | : . ' , eraseGlobalEnvironment() ... done
[08:08:06.150] | : . ' , launchFuture() ...
[08:08:06.150] | : . ' , ; cluster node index: 2
[08:08:06.150] | : . ' , ; getFutureData() ...
[08:08:06.150] | : . ' , ; ` getFutureCore() ...
[08:08:06.150] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:06.150] | : . ' , ; ` getFutureCore() ... done
[08:08:06.150] | : . ' , ; ` getFutureCapture() ...
[08:08:06.151] | : . ' , ; ` getFutureCapture() ... done
[08:08:06.151] | : . ' , ; ` getFutureContext() ...
[08:08:06.151] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:06.151] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:06.151] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:06.151] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:06.151] | : . ' , ; ` getFutureContext() ... done
[08:08:06.151] | : . ' , ; getFutureData() ... done
[08:08:06.152] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ...
[08:08:06.152] | : . ' , ; ` Appended future to position #2
[08:08:06.152] | : . ' , ; ` Number of registered futures: 2
[08:08:06.152] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ... done
[08:08:06.152] | : . ' , launchFuture() ... done
[08:08:06.152] | : . ' , MultisessionFuture started
[08:08:06.152] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:06.152] | : . Launching futures ... done
[08:08:06.152] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:06.153] | : Using MultisessionFutureBackend ... done
[08:08:06.153] | run() for ‘Future’ (<unnamed-80>) ... done
[08:08:06.153] future(..., label = NULL) ... done
[08:08:06.153] future(..., label = NULL) ...
[08:08:06.153] | lazy: FALSE
[08:08:06.153] | stdout: TRUE
[08:08:06.153] | conditions: [n=1] ‘condition’
[08:08:06.154] | gc: FALSE
[08:08:06.154] | earlySignal: FALSE
[08:08:06.154] | getGlobalsAndPackages() ...
[08:08:06.154] | : Searching for globals ...
[08:08:06.157] | : . globals found: [1] ‘{’
[08:08:06.157] | : Searching for globals ... done
[08:08:06.157] | : Resolving globals: FALSE
[08:08:06.157] | : Search for packages associated with the globals ...
[08:08:06.157] | : . Packages associated with globals: [1] ‘base’
[08:08:06.158] | : . Packages: [1] ‘base’
[08:08:06.158] | : Search for packages associated with the globals ... done
[08:08:06.158] | : Packages after dropping 'base': [0] 
[08:08:06.158] | : globals: [0] 
[08:08:06.158] | : packages: [0] 
[08:08:06.158] | getGlobalsAndPackages() ... done
[08:08:06.158] | run() for ‘Future’ (<unnamed-81>) ...
[08:08:06.159] | : state: ‘created’
[08:08:06.159] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:06.159] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:06.159] | : Using MultisessionFutureBackend ...
[08:08:06.159] | : . Number of futures since start: 5 (5 created, 5 launched, 4 finished)
[08:08:06.159] | : . Launching futures ...
[08:08:06.159] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:06.159] | : . ' , Workers: [n=2]
[08:08:06.159] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:06.161] | : . ' , FutureRegistry: ‘workers-d9e73d0afef6bf67fb99f83a39f0a371’
[08:08:06.161] | : . ' , requestWorker() ...
[08:08:06.161] | : . ' , ; requestNode() ...
[08:08:06.161] | : . ' , ; ` Number of workers: 2
[08:08:06.161] | : . ' , ; ` Polling for a free worker ...
[08:08:06.162] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:06.162] | : . ' , ; ` | : Listing all futures
[08:08:06.162] | : . ' , ; ` | : Number of registered futures: 2
[08:08:06.162] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:06.162] | : . ' , ; ` | Poll #1 (0): usedNodes() = 2, workers = 2
[08:08:06.172] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'collect-first', earlySignal = 1) ...
[08:08:06.172] | : . ' , ; ` | : collectValues('workers-d9e73d0afef6bf67fb99f83a39f0a371', firstOnly = TRUE) ...
[08:08:06.173] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-79>) ...
[08:08:06.173] | : . ' , ; ` | : . ' Cluster node socket connection: index=4, id=1255
[08:08:06.173] | : . ' , ; ` | : . ' assertValidConnection() ...
[08:08:06.173] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:06.174] | : . ' , ; ` | : . ' assertValidConnection() ... done
[08:08:06.174] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ...
[08:08:06.174] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:06.174] | : . ' , ; ` | : . ' , [1] TRUE
[08:08:06.175] | : . ' , ; ` | : . ' , received data:
[08:08:06.175] | : . ' , ; ` | : . ' , List of 5
[08:08:06.175] | : . ' , ; ` | : . ' ,  $ type   : chr "VALUE"
[08:08:06.175] | : . ' , ; ` | : . ' ,  $ value  :List of 16
[08:08:06.175] | : . ' , ; ` | : . ' ,   ..$ value              : num 2
[08:08:06.175] | : . ' , ; ` | : . ' ,   ..$ visible            : logi TRUE
[08:08:06.175] | : . ' , ; ` | : . ' ,   ..$ stdout             : chr ""
[08:08:06.175] | : . ' , ; ` | : . ' ,   ..$ conditions         : list()
[08:08:06.175] | : . ' , ; ` | : . ' ,   ..$ rng                : logi FALSE
[08:08:06.175] | : . ' , ; ` | : . ' ,   ..$ seed               : NULL
[08:08:06.175] | : . ' , ; ` | : . ' ,   ..$ misuseGlobalEnv    : NULL
[08:08:06.175] | : . ' , ; ` | : . ' ,   ..$ misuseConnections  :List of 3
[08:08:06.175] | : . ' , ; ` | : . ' ,   .. ..$ added   : NULL
[08:08:06.175] | : . ' , ; ` | : . ' ,   .. ..$ removed : NULL
[08:08:06.175] | : . ' , ; ` | : . ' ,   .. ..$ replaced: NULL
[08:08:06.175] | : . ' , ; ` | : . ' ,   ..$ misuseDevices      : NULL
[08:08:06.175] | : . ' , ; ` | : . ' ,   ..$ misuseDefaultDevice: list()
[08:08:06.175] | : . ' , ; ` | : . ' ,   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:06"
[08:08:06.175] | : . ' , ; ` | : . ' ,   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:06"
[08:08:06.175] | : . ' , ; ` | : . ' ,   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "79"
[08:08:06.175] | : . ' , ; ` | : . ' ,   ..$ session_uuid       : chr "47b35ab504ca4447100288bf636d3311"
[08:08:06.175] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "source")=List of 5
[08:08:06.175] | : . ' , ; ` | : . ' ,   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:06.175] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:06.175] | : . ' , ; ` | : . ' ,   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:06.175] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:06.175] | : . ' , ; ` | : . ' ,   .. .. ..$ pid   : int 69070
[08:08:06.175] | : . ' , ; ` | : . ' ,   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:05"
[08:08:06.175] | : . ' , ; ` | : . ' ,   .. .. ..$ random: int 2147483647
[08:08:06.175] | : . ' , ; ` | : . ' ,   ..$ r_info             :List of 4
[08:08:06.175] | : . ' , ; ` | : . ' ,   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:06.175] | : . ' , ; ` | : . ' ,   .. .. ..$ : int [1:3] 4 5 1
[08:08:06.175] | : . ' , ; ` | : . ' ,   .. ..$ os           : chr "unix"
[08:08:06.175] | : . ' , ; ` | : . ' ,   .. ..$ os_name      : chr "Linux"
[08:08:06.175] | : . ' , ; ` | : . ' ,   .. ..$ captures_utf8: logi TRUE
[08:08:06.175] | : . ' , ; ` | : . ' ,   ..$ version            : chr "1.8"
[08:08:06.175] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr "FutureResult"
[08:08:06.175] | : . ' , ; ` | : . ' ,  $ success: logi TRUE
[08:08:06.175] | : . ' , ; ` | : . ' ,  $ time   : 'proc_time' Named num [1:5] 0.005 0 0.005 0 0
[08:08:06.175] | : . ' , ; ` | : . ' ,   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:06.175] | : . ' , ; ` | : . ' ,  $ tag    : NULL
[08:08:06.186] | : . ' , ; ` | : . ' , Received FutureResult
[08:08:06.186] | : . ' , ; ` | : . ' , FutureResult:
[08:08:06.186] | : . ' , ; ` | : . ' , value: ‘numeric’
[08:08:06.186] | : . ' , ; ` | : . ' , visible: TRUE
[08:08:06.186] | : . ' , ; ` | : . ' , stdout: character
[08:08:06.186] | : . ' , ; ` | : . ' , conditions: [n = 0] 
[08:08:06.186] | : . ' , ; ` | : . ' , RNG used: FALSE
[08:08:06.186] | : . ' , ; ` | : . ' , duration: 0.003958225 secs (started 2025-06-17 08:08:06.11299)
[08:08:06.186] | : . ' , ; ` | : . ' , version: 1.8
[08:08:06.186] | : . ' , ; ` | : . ' , FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ...
[08:08:06.186] | : . ' , ; ` | : . ' , ; Removed future from position #1
[08:08:06.187] | : . ' , ; ` | : . ' , ; Number of registered futures: 1
[08:08:06.187] | : . ' , ; ` | : . ' , FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ... done
[08:08:06.187] | : . ' , ; ` | : . ' , Erased future from future backend
[08:08:06.187] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:06.187] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:06.187] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:06.187] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:06.187] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:06.187] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:06.188] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:06.188] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:06.188] | : . ' , ; ` | : . ' , ;  int 0
[08:08:06.188] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:06.188] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ... done
[08:08:06.188] | : . ' , ; ` | : . ' receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:06.188] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-79>) ... done
[08:08:06.189] | : . ' , ; ` | : . assertFutureResult() ...
[08:08:06.189] | : . ' , ; ` | : . ' Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:06.189] | : . ' , ; ` | : . ' Future uuid: 79
[08:08:06.189] | : . ' , ; ` | : . ' identical; success
[08:08:06.189] | : . ' , ; ` | : . assertFutureResult() ... done
[08:08:06.189] | : . ' , ; ` | : . Future at position #1 is resolved ...
[08:08:06.189] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-79>) ...
[08:08:06.189] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:06.189] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:06.189] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:06.190] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:06.190] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:06.190] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:06.190] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:06.190] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:06.190] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:06.190] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:06.190] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:06.190] | : . ' , ; ` | : . ' , ;  int 0
[08:08:06.191] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:06.191] | : . ' , ; ` | : . ' , check for misuse ...
[08:08:06.191] | : . ' , ; ` | : . ' , check for misuse ... done
[08:08:06.191] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-79>) ... done
[08:08:06.191] | : . ' , ; ` | : . Future at position #1 is resolved ... done
[08:08:06.191] | : . ' , ; ` | : collectValues('workers-d9e73d0afef6bf67fb99f83a39f0a371', firstOnly = TRUE) ... done
[08:08:06.191] | : . ' , ; ` | : Remove collected futures ...
[08:08:06.192] | : . ' , ; ` | : . Indices of futures to drop: [n=1] ‘1’
[08:08:06.192] | : . ' , ; ` | : Remove collected futures ... done
[08:08:06.192] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'collect-first', earlySignal = 1) ... done
[08:08:06.192] | : . ' , ; ` | Early signaling of 2 future candidates ...
[08:08:06.192] | : . ' , ; ` | Number of futures with early signaling requested: 0
[08:08:06.192] | : . ' , ; ` | Early signaling of 2 future candidates ... done
[08:08:06.192] | : . ' , ; ` | Number of registered futures: 2
[08:08:06.192] | : . ' , ; ` Polling for a free worker ... done
[08:08:06.192] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:06.193] | : . ' , ; ` | Listing all futures
[08:08:06.193] | : . ' , ; ` | Number of registered futures: 1
[08:08:06.193] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:06.193] | : . ' , ; ` Total time: 0.0308616161346436
[08:08:06.193] | : . ' , ; requestNode() ... done
[08:08:06.193] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:06.193] | : . ' , ; ` Listing all futures
[08:08:06.193] | : . ' , ; ` Number of registered futures: 1
[08:08:06.193] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:06.194] | : . ' , ; avail: [n=2] ‘1’
[08:08:06.194] | : . ' , ; Index of first available worker: 1
[08:08:06.194] | : . ' , ; Validate that the worker is functional ...
[08:08:06.296] | : . ' , ; ` Worker is functional
[08:08:06.296] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:06.296] | : . ' , ; ` | Listing all futures
[08:08:06.296] | : . ' , ; ` | Number of registered futures: 1
[08:08:06.296] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:06.296] | : . ' , ; Validate that the worker is functional ... done
[08:08:06.297] | : . ' , requestWorker() ... done
[08:08:06.297] | : . ' , cluster node index: 1
[08:08:06.297] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:06.297] | : . ' eraseGlobalEnvironment() ...
[08:08:06.297] | : . ' eraseGlobalEnvironment() ... done
[08:08:06.297] | : . ' launchFuture() ...
[08:08:06.298] | : . ' , cluster node index: 1
[08:08:06.298] | : . ' , getFutureData() ...
[08:08:06.298] | : . ' , ; getFutureCore() ...
[08:08:06.298] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:06.298] | : . ' , ; getFutureCore() ... done
[08:08:06.298] | : . ' , ; getFutureCapture() ...
[08:08:06.298] | : . ' , ; getFutureCapture() ... done
[08:08:06.298] | : . ' , ; getFutureContext() ...
[08:08:06.298] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:06.299] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:06.299] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:06.299] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:06.299] | : . ' , ; getFutureContext() ... done
[08:08:06.299] | : . ' , getFutureData() ... done
[08:08:06.299] | : . ' , FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ...
[08:08:06.299] | : . ' , ; Appended future to position #2
[08:08:06.300] | : . ' , ; Number of registered futures: 2
[08:08:06.300] | : . ' , FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ... done
[08:08:06.300] | : . ' launchFuture() ... done
[08:08:06.300] | : . ' MultisessionFuture started
[08:08:06.300] | : . Launching futures ... done
[08:08:06.300] | : Using MultisessionFutureBackend ... done
[08:08:06.300] | : Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:06.300] | run() for ‘Future’ (<unnamed-81>) ... done
[08:08:06.300] future(..., label = NULL) ... done

<environment: 0x55675c866b98> 
<environment: 0x55675c5d5e10> 
[08:08:06.301] resolved() for environment ...
[08:08:06.302] | resolved() for list ...
[08:08:06.302] | : Number of elements: 4
[08:08:06.302] | : Number of futures: 4
[08:08:06.302] | : resolved() for MultisessionFuture (<unnamed-80>) ...
[08:08:06.303] | : . Cluster node socket connection: index=5, id=1256
[08:08:06.303] | : . assertValidConnection() ...
[08:08:06.303] | : . ' cluster node index: 2
[08:08:06.303] | : . assertValidConnection() ... done
[08:08:06.303] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:06.304] | : . ' cluster node index: 2
[08:08:06.304] | : . ' [1] TRUE
[08:08:06.304] | : . ' received data:
[08:08:06.304] | : . ' List of 5
[08:08:06.304] | : . '  $ type   : chr "VALUE"
[08:08:06.304] | : . '  $ value  :List of 16
[08:08:06.304] | : . '   ..$ value              : NULL
[08:08:06.304] | : . '   ..$ visible            : logi TRUE
[08:08:06.304] | : . '   ..$ stdout             : chr ""
[08:08:06.304] | : . '   ..$ conditions         : list()
[08:08:06.304] | : . '   ..$ rng                : logi FALSE
[08:08:06.304] | : . '   ..$ seed               : NULL
[08:08:06.304] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:06.304] | : . '   ..$ misuseConnections  :List of 3
[08:08:06.304] | : . '   .. ..$ added   : NULL
[08:08:06.304] | : . '   .. ..$ removed : NULL
[08:08:06.304] | : . '   .. ..$ replaced: NULL
[08:08:06.304] | : . '   ..$ misuseDevices      : NULL
[08:08:06.304] | : . '   ..$ misuseDefaultDevice: list()
[08:08:06.304] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:06"
[08:08:06.304] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:06"
[08:08:06.304] | : . '   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "80"
[08:08:06.304] | : . '   ..$ session_uuid       : chr "d924a4373eab2307bd7df4caf6e025d6"
[08:08:06.304] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:06.304] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:06.304] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:06.304] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:06.304] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:06.304] | : . '   .. .. ..$ pid   : int 69071
[08:08:06.304] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:05"
[08:08:06.304] | : . '   .. .. ..$ random: int 2147483647
[08:08:06.304] | : . '   ..$ r_info             :List of 4
[08:08:06.304] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:06.304] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:06.304] | : . '   .. ..$ os           : chr "unix"
[08:08:06.304] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:06.304] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:06.304] | : . '   ..$ version            : chr "1.8"
[08:08:06.304] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:06.304] | : . '  $ success: logi TRUE
[08:08:06.304] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0.001 0.004 0 0
[08:08:06.304] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:06.304] | : . '  $ tag    : NULL
[08:08:06.315] | : . ' Received FutureResult
[08:08:06.315] | : . ' FutureResult:
[08:08:06.315] | : . ' value: ‘NULL’
[08:08:06.315] | : . ' visible: TRUE
[08:08:06.315] | : . ' stdout: character
[08:08:06.315] | : . ' conditions: [n = 0] 
[08:08:06.315] | : . ' RNG used: FALSE
[08:08:06.315] | : . ' duration: 0.00288415 secs (started 2025-06-17 08:08:06.192923)
[08:08:06.315] | : . ' version: 1.8
[08:08:06.315] | : . ' FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ...
[08:08:06.316] | : . ' , Removed future from position #1
[08:08:06.316] | : . ' , Number of registered futures: 1
[08:08:06.316] | : . ' FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ... done
[08:08:06.316] | : . ' Erased future from future backend
[08:08:06.316] | : . ' result() for ClusterFuture ...
[08:08:06.316] | : . ' , result already collected: FutureResult
[08:08:06.316] | : . ' result() for ClusterFuture ... done
[08:08:06.316] | : . ' signalConditions() ...
[08:08:06.316] | : . ' , include = ‘immediateCondition’
[08:08:06.317] | : . ' , exclude = 
[08:08:06.317] | : . ' , resignal = FALSE
[08:08:06.317] | : . ' , Number of conditions: 0
[08:08:06.317] | : . ' ,  int 0
[08:08:06.317] | : . ' signalConditions() ... done
[08:08:06.317] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:06.318] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:06.318] | : resolved() for MultisessionFuture (<unnamed-80>) ... done
[08:08:06.318] | : assertFutureResult() ...
[08:08:06.318] | : . Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:06.318] | : . Future uuid: 80
[08:08:06.318] | : . identical; success
[08:08:06.318] | : assertFutureResult() ... done
[08:08:06.318] | : resolved() for MultisessionFuture (<unnamed-81>) ...
[08:08:06.318] | : . Cluster node socket connection: index=4, id=1255
[08:08:06.319] | : . assertValidConnection() ...
[08:08:06.319] | : . ' cluster node index: 1
[08:08:06.319] | : . assertValidConnection() ... done
[08:08:06.329] | : . socketSelect(list(<connection #4 (id=1255)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:06.330] | : resolved() for MultisessionFuture (<unnamed-81>) ... done
[08:08:06.330] | resolved() for list ... done
[08:08:06.330] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE FALSE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:06.331] value() for MultisessionFuture (<unnamed-81>) ...
[08:08:06.331] | result() for ClusterFuture ...
[08:08:06.331] | : assertValidConnection() ...
[08:08:06.332] | : . cluster node index: 1
[08:08:06.332] | : assertValidConnection() ... done
[08:08:06.332] | : receiveMessageFromWorker() for ClusterFuture ...
[08:08:06.332] | : . cluster node index: 1
[08:08:06.344] | : . [1] TRUE
[08:08:06.345] | : . received data:
[08:08:06.345] | : . List of 5
[08:08:06.345] | : .  $ type   : chr "VALUE"
[08:08:06.345] | : .  $ value  :List of 16
[08:08:06.345] | : .   ..$ value              : num 4
[08:08:06.345] | : .   ..$ visible            : logi TRUE
[08:08:06.345] | : .   ..$ stdout             : chr ""
[08:08:06.345] | : .   ..$ conditions         : list()
[08:08:06.345] | : .   ..$ rng                : logi FALSE
[08:08:06.345] | : .   ..$ seed               : NULL
[08:08:06.345] | : .   ..$ misuseGlobalEnv    : NULL
[08:08:06.345] | : .   ..$ misuseConnections  :List of 3
[08:08:06.345] | : .   .. ..$ added   : NULL
[08:08:06.345] | : .   .. ..$ removed : NULL
[08:08:06.345] | : .   .. ..$ replaced: NULL
[08:08:06.345] | : .   ..$ misuseDevices      : NULL
[08:08:06.345] | : .   ..$ misuseDefaultDevice: list()
[08:08:06.345] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:06"
[08:08:06.345] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:06"
[08:08:06.345] | : .   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "81"
[08:08:06.345] | : .   ..$ session_uuid       : chr "47b35ab504ca4447100288bf636d3311"
[08:08:06.345] | : .   .. ..- attr(*, "source")=List of 5
[08:08:06.345] | : .   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:06.345] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:06.345] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:06.345] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:06.345] | : .   .. .. ..$ pid   : int 69070
[08:08:06.345] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:05"
[08:08:06.345] | : .   .. .. ..$ random: int 2147483647
[08:08:06.345] | : .   ..$ r_info             :List of 4
[08:08:06.345] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:06.345] | : .   .. .. ..$ : int [1:3] 4 5 1
[08:08:06.345] | : .   .. ..$ os           : chr "unix"
[08:08:06.345] | : .   .. ..$ os_name      : chr "Linux"
[08:08:06.345] | : .   .. ..$ captures_utf8: logi TRUE
[08:08:06.345] | : .   ..$ version            : chr "1.8"
[08:08:06.345] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:08:06.345] | : .  $ success: logi TRUE
[08:08:06.345] | : .  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.004 0 0
[08:08:06.345] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:06.345] | : .  $ tag    : NULL
[08:08:06.359] | : . Received FutureResult
[08:08:06.359] | : . FutureResult:
[08:08:06.359] | : . value: ‘numeric’
[08:08:06.359] | : . visible: TRUE
[08:08:06.359] | : . stdout: character
[08:08:06.359] | : . conditions: [n = 0] 
[08:08:06.359] | : . RNG used: FALSE
[08:08:06.359] | : . duration: 0.002776623 secs (started 2025-06-17 08:08:06.341122)
[08:08:06.359] | : . version: 1.8
[08:08:06.359] | : . FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ...
[08:08:06.360] | : . ' Removed future from position #1
[08:08:06.360] | : . ' Number of registered futures: 0
[08:08:06.360] | : . FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ... done
[08:08:06.360] | : . Erased future from future backend
[08:08:06.360] | : . result() for ClusterFuture ...
[08:08:06.360] | : . ' result already collected: FutureResult
[08:08:06.360] | : . result() for ClusterFuture ... done
[08:08:06.360] | : . signalConditions() ...
[08:08:06.361] | : . ' include = ‘immediateCondition’
[08:08:06.361] | : . ' exclude = 
[08:08:06.361] | : . ' resignal = FALSE
[08:08:06.361] | : . ' Number of conditions: 0
[08:08:06.361] | : . '  int 0
[08:08:06.361] | : . signalConditions() ... done
[08:08:06.361] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:08:06.362] | result() for ClusterFuture ... done
[08:08:06.362] | result() for ClusterFuture ...
[08:08:06.362] | : result already collected: FutureResult
[08:08:06.362] | result() for ClusterFuture ... done
[08:08:06.362] | signalConditions() ...
[08:08:06.362] | : include = ‘immediateCondition’
[08:08:06.362] | : exclude = 
[08:08:06.362] | : resignal = FALSE
[08:08:06.362] | : Number of conditions: 0
[08:08:06.362] | :  int 0
[08:08:06.363] | signalConditions() ... done
[08:08:06.363] | relay stdout ...
[08:08:06.363] | relay stdout ... done
[08:08:06.363] | check for misuse ...
[08:08:06.363] | check for misuse ... done
[08:08:06.363] value() for MultisessionFuture (<unnamed-81>) ... done
[08:08:06.364] value() for listenv ...
[08:08:06.364] | recursive: 0
[08:08:06.364] | reduce: FALSE
[08:08:06.365] | length: 4
[08:08:06.365] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:06.365] | Number of remaining objects: 4
[08:08:06.365] | checking value #1:
[08:08:06.365] | 'obj' is atomic
[08:08:06.365] | signalConditionsASAP(numeric, pos=1) ...
[08:08:06.365] | : nx: 4
[08:08:06.365] | : relay: TRUE
[08:08:06.365] | : stdout: TRUE
[08:08:06.366] | : signal: TRUE
[08:08:06.366] | : resignal: FALSE
[08:08:06.366] | : force: TRUE
[08:08:06.366] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:06.366] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:06.366] | : until=2
[08:08:06.366] | : relaying element #2
[08:08:06.366] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:06.366] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:06.366] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:06.367] | length: 3 (resolved future 1)
[08:08:06.367] value() for listenv ... done
[08:08:06.367] checking value #2:
[08:08:06.367] 'obj' is MultisessionFuture
[08:08:06.367] MultisessionFuture #2
[08:08:06.367] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:06.367] | nx: 4
[08:08:06.367] | relay: TRUE
[08:08:06.367] | stdout: TRUE
[08:08:06.368] | signal: TRUE
[08:08:06.368] | resignal: FALSE
[08:08:06.368] | force: TRUE
[08:08:06.368] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:06.368] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:06.368] | until=2
[08:08:06.368] | relaying element #2
[08:08:06.368] | value() for MultisessionFuture (<unnamed-79>) ...
[08:08:06.368] | : result() for ClusterFuture ...
[08:08:06.368] | : . result already collected: FutureResult
[08:08:06.369] | : result() for ClusterFuture ... done
[08:08:06.369] | : result() for ClusterFuture ...
[08:08:06.369] | : . result already collected: FutureResult
[08:08:06.369] | : result() for ClusterFuture ... done
[08:08:06.369] | : signalConditions() ...
[08:08:06.369] | : . include = ‘immediateCondition’
[08:08:06.369] | : . exclude = 
[08:08:06.369] | : . resignal = FALSE
[08:08:06.369] | : . Number of conditions: 0
[08:08:06.369] | : .  int 0
[08:08:06.370] | : signalConditions() ... done
[08:08:06.370] | : relay stdout ...
[08:08:06.370] | : relay stdout ... done
[08:08:06.370] | : check for misuse ...
[08:08:06.370] | : check for misuse ... done
[08:08:06.370] | value() for MultisessionFuture (<unnamed-79>) ... done
[08:08:06.371] | result() for ClusterFuture ...
[08:08:06.371] | : result already collected: FutureResult
[08:08:06.371] | result() for ClusterFuture ... done
[08:08:06.371] | signalConditions() ...
[08:08:06.371] | : include = ‘immediateCondition’
[08:08:06.371] | : exclude = 
[08:08:06.371] | : resignal = FALSE
[08:08:06.371] | : Number of conditions: 0
[08:08:06.371] | :  int 0
[08:08:06.372] | signalConditions() ... done
[08:08:06.372] | result() for ClusterFuture ...
[08:08:06.372] | : result already collected: FutureResult
[08:08:06.372] | result() for ClusterFuture ... done
[08:08:06.372] | signalConditions() ...
[08:08:06.372] | : include = ‘condition’
[08:08:06.372] | : exclude = ‘error’, ‘immediateCondition’
[08:08:06.373] | : resignal = TRUE
[08:08:06.373] | : Number of conditions: 0
[08:08:06.373] | :  int 0
[08:08:06.373] | signalConditions() ... done
[08:08:06.373] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:06.373] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:06.373] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:06.374] value(<MultisessionFuture>, ...) ...
[08:08:06.374] value(<MultisessionFuture>, ...) ... done
[08:08:06.374] value() for MultisessionFuture (<unnamed-79>) ...
[08:08:06.374] | result() for ClusterFuture ...
[08:08:06.374] | : result already collected: FutureResult
[08:08:06.374] | result() for ClusterFuture ... done
[08:08:06.374] | result() for ClusterFuture ...
[08:08:06.374] | : result already collected: FutureResult
[08:08:06.374] | result() for ClusterFuture ... done
[08:08:06.374] | signalConditions() ...
[08:08:06.374] | : include = ‘immediateCondition’
[08:08:06.375] | : exclude = 
[08:08:06.375] | : resignal = FALSE
[08:08:06.375] | : Number of conditions: 0
[08:08:06.375] | :  int 0
[08:08:06.375] | signalConditions() ... done
[08:08:06.375] | check for misuse ...
[08:08:06.376] | check for misuse ... done
[08:08:06.376] value() for MultisessionFuture (<unnamed-79>) ... done
[08:08:06.376] value: <numeric>
[08:08:06.376] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:06.376] | nx: 4
[08:08:06.376] | relay: TRUE
[08:08:06.376] | stdout: TRUE
[08:08:06.376] | signal: TRUE
[08:08:06.376] | resignal: FALSE
[08:08:06.376] | force: TRUE
[08:08:06.377] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:06.377] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:06.377] | until=3
[08:08:06.377] | relaying element #3
[08:08:06.377] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:06.377] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:06.377] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:06.377] resolve() for MultisessionFuture ...
[08:08:06.377] resolve() for MultisessionFuture ... done
[08:08:06.377] length: 2 (resolved future 2)

[08:08:06.378] checking value #3:
[08:08:06.378] 'obj' is MultisessionFuture
[08:08:06.378] MultisessionFuture #3
[08:08:06.378] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:06.378] | nx: 4
[08:08:06.378] | relay: TRUE
[08:08:06.378] | stdout: TRUE
[08:08:06.378] | signal: TRUE
[08:08:06.378] | resignal: FALSE
[08:08:06.379] | force: TRUE
[08:08:06.379] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:06.379] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:06.379] | until=3
[08:08:06.379] | relaying element #3
[08:08:06.379] | value() for MultisessionFuture (<unnamed-80>) ...
[08:08:06.379] | : result() for ClusterFuture ...
[08:08:06.379] | : . result already collected: FutureResult
[08:08:06.379] | : result() for ClusterFuture ... done
[08:08:06.379] | : result() for ClusterFuture ...
[08:08:06.379] | : . result already collected: FutureResult
[08:08:06.380] | : result() for ClusterFuture ... done
[08:08:06.380] | : signalConditions() ...
[08:08:06.380] | : . include = ‘immediateCondition’
[08:08:06.380] | : . exclude = 
[08:08:06.380] | : . resignal = FALSE
[08:08:06.380] | : . Number of conditions: 0
[08:08:06.380] | : .  int 0
[08:08:06.381] | : signalConditions() ... done
[08:08:06.381] | : relay stdout ...
[08:08:06.381] | : relay stdout ... done
[08:08:06.381] | : check for misuse ...
[08:08:06.381] | : check for misuse ... done
[08:08:06.381] | value() for MultisessionFuture (<unnamed-80>) ... done
[08:08:06.381] | result() for ClusterFuture ...
[08:08:06.381] | : result already collected: FutureResult
[08:08:06.381] | result() for ClusterFuture ... done
[08:08:06.381] | signalConditions() ...
[08:08:06.382] | : include = ‘immediateCondition’
[08:08:06.382] | : exclude = 
[08:08:06.382] | : resignal = FALSE
[08:08:06.382] | : Number of conditions: 0
[08:08:06.382] | :  int 0
[08:08:06.382] | signalConditions() ... done
[08:08:06.382] | result() for ClusterFuture ...
[08:08:06.383] | : result already collected: FutureResult
[08:08:06.383] | result() for ClusterFuture ... done
[08:08:06.383] | signalConditions() ...
[08:08:06.383] | : include = ‘condition’
[08:08:06.383] | : exclude = ‘error’, ‘immediateCondition’
[08:08:06.383] | : resignal = TRUE
[08:08:06.383] | : Number of conditions: 0
[08:08:06.383] | :  int 0
[08:08:06.384] | signalConditions() ... done
[08:08:06.384] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:06.384] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:06.384] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:06.384] value(<MultisessionFuture>, ...) ...
[08:08:06.384] value(<MultisessionFuture>, ...) ... done
[08:08:06.384] value() for MultisessionFuture (<unnamed-80>) ...
[08:08:06.384] | result() for ClusterFuture ...
[08:08:06.384] | : result already collected: FutureResult
[08:08:06.384] | result() for ClusterFuture ... done
[08:08:06.385] | result() for ClusterFuture ...
[08:08:06.385] | : result already collected: FutureResult
[08:08:06.385] | result() for ClusterFuture ... done
[08:08:06.385] | signalConditions() ...
[08:08:06.385] | : include = ‘immediateCondition’
[08:08:06.385] | : exclude = 
[08:08:06.385] | : resignal = FALSE
[08:08:06.385] | : Number of conditions: 0
[08:08:06.385] | :  int 0
[08:08:06.386] | signalConditions() ... done
[08:08:06.386] | check for misuse ...
[08:08:06.386] | check for misuse ... done
[08:08:06.386] value() for MultisessionFuture (<unnamed-80>) ... done
[08:08:06.386] value: <NULL>
[08:08:06.386] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:06.386] | nx: 4
[08:08:06.387] | relay: TRUE
[08:08:06.387] | stdout: TRUE
[08:08:06.387] | signal: TRUE
[08:08:06.387] | resignal: FALSE
[08:08:06.387] | force: TRUE
[08:08:06.387] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:06.387] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:06.387] | until=4
[08:08:06.387] | relaying element #4
[08:08:06.387] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:06.387] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:06.388] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:06.388] resolve() for MultisessionFuture ...
[08:08:06.388] resolve() for MultisessionFuture ... done
[08:08:06.388] length: 1 (resolved future 3)

[08:08:06.388] checking value #4:
[08:08:06.388] 'obj' is atomic
[08:08:06.388] signalConditionsASAP(numeric, pos=4) ...
[08:08:06.388] | nx: 4
[08:08:06.388] | relay: TRUE
[08:08:06.388] | stdout: TRUE
[08:08:06.389] | signal: TRUE
[08:08:06.389] | resignal: FALSE
[08:08:06.389] | force: TRUE
[08:08:06.389] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:06.389] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:06.389] | until=4
[08:08:06.389] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:06.389] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:06.389] signalConditionsASAP(numeric, pos=4) ... done
[08:08:06.389] length: 0 (resolved future 4)

[08:08:06.390] Relaying remaining futures ...
[08:08:06.390] | signalConditionsASAP(NULL, pos=0) ...
[08:08:06.390] | : nx: 4
[08:08:06.390] | : relay: TRUE
[08:08:06.390] | : stdout: TRUE
[08:08:06.390] | : signal: TRUE
[08:08:06.390] | : resignal: FALSE
[08:08:06.390] | : force: TRUE
[08:08:06.390] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:06.390] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:06.391] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:06.391] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:06.391] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:06.391] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(2, 3)
[08:08:06.393] future(..., label = NULL) ...
[08:08:06.393] | lazy: FALSE
[08:08:06.393] | stdout: TRUE
[08:08:06.393] | conditions: [n=1] ‘condition’
[08:08:06.393] | gc: FALSE
[08:08:06.393] | earlySignal: FALSE
[08:08:06.393] | getGlobalsAndPackages() ...
[08:08:06.393] | : Searching for globals ...
[08:08:06.395] | : . globals found: [0] 
[08:08:06.395] | : Searching for globals ... done
[08:08:06.395] | : globals: [0] <none>
[08:08:06.395] | : packages: [0] <none>
[08:08:06.395] | getGlobalsAndPackages() ... done
[08:08:06.395] | run() for ‘Future’ (<unnamed-82>) ...
[08:08:06.396] | : state: ‘created’
[08:08:06.396] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:06.396] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:06.396] | : Using MultisessionFutureBackend ...
[08:08:06.396] | : . Number of futures since start: 6 (6 created, 6 launched, 8 finished)
[08:08:06.396] | : . Launching futures ...
[08:08:06.396] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:06.396] | : . ' , Workers: [n=2]
[08:08:06.397] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:06.398] | : . ' , FutureRegistry: ‘workers-d9e73d0afef6bf67fb99f83a39f0a371’
[08:08:06.398] | : . ' , requestWorker() ...
[08:08:06.398] | : . ' , ; requestNode() ...
[08:08:06.398] | : . ' , ; ` Number of workers: 2
[08:08:06.399] | : . ' , ; ` Polling for a free worker ...
[08:08:06.399] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:06.399] | : . ' , ; ` | : Listing all futures
[08:08:06.399] | : . ' , ; ` | : Number of registered futures: 0
[08:08:06.399] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:06.399] | : . ' , ; ` | Total time: 0
[08:08:06.399] | : . ' , ; ` Polling for a free worker ... done
[08:08:06.399] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:06.399] | : . ' , ; ` | Listing all futures
[08:08:06.399] | : . ' , ; ` | Number of registered futures: 0
[08:08:06.400] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:06.400] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:06.400] | : . ' , ; ` Index of first available worker: 1
[08:08:06.400] | : . ' , ; ` Validate that the worker is functional ...
[08:08:06.474] | : . ' , ; ` | Worker is functional
[08:08:06.474] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:06.475] | : . ' , ; ` | : Listing all futures
[08:08:06.475] | : . ' , ; ` | : Number of registered futures: 0
[08:08:06.475] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:06.475] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:06.475] | : . ' , ; requestNode() ... done
[08:08:06.475] | : . ' , ; cluster node index: 1
[08:08:06.475] | : . ' , requestWorker() ... done
[08:08:06.476] | : . ' , eraseGlobalEnvironment() ...
[08:08:06.476] | : . ' , eraseGlobalEnvironment() ... done
[08:08:06.476] | : . ' , launchFuture() ...
[08:08:06.476] | : . ' , ; cluster node index: 1
[08:08:06.476] | : . ' , ; getFutureData() ...
[08:08:06.477] | : . ' , ; ` getFutureCore() ...
[08:08:06.477] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:06.477] | : . ' , ; ` getFutureCore() ... done
[08:08:06.477] | : . ' , ; ` getFutureCapture() ...
[08:08:06.477] | : . ' , ; ` getFutureCapture() ... done
[08:08:06.477] | : . ' , ; ` getFutureContext() ...
[08:08:06.477] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:06.477] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:06.478] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:06.478] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:06.478] | : . ' , ; ` getFutureContext() ... done
[08:08:06.478] | : . ' , ; getFutureData() ... done
[08:08:06.478] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ...
[08:08:06.478] | : . ' , ; ` Appended future to position #1
[08:08:06.479] | : . ' , ; ` Number of registered futures: 1
[08:08:06.479] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ... done
[08:08:06.479] | : . ' , launchFuture() ... done
[08:08:06.479] | : . ' , MultisessionFuture started
[08:08:06.479] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:06.479] | : . Launching futures ... done
[08:08:06.479] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:06.479] | : Using MultisessionFutureBackend ... done
[08:08:06.479] | run() for ‘Future’ (<unnamed-82>) ... done
[08:08:06.480] future(..., label = NULL) ... done
[08:08:06.480] future(..., label = NULL) ...
[08:08:06.480] | lazy: FALSE
[08:08:06.480] | stdout: TRUE
[08:08:06.480] | conditions: [n=1] ‘condition’
[08:08:06.480] | gc: FALSE
[08:08:06.480] | earlySignal: FALSE
[08:08:06.480] | getGlobalsAndPackages() ...
[08:08:06.480] | : Searching for globals ...
[08:08:06.482] | : . globals found: [0] 
[08:08:06.482] | : Searching for globals ... done
[08:08:06.482] | : globals: [0] <none>
[08:08:06.482] | : packages: [0] <none>
[08:08:06.482] | getGlobalsAndPackages() ... done
[08:08:06.483] | run() for ‘Future’ (<unnamed-83>) ...
[08:08:06.483] | : state: ‘created’
[08:08:06.483] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:06.483] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:06.483] | : Using MultisessionFutureBackend ...
[08:08:06.483] | : . Number of futures since start: 7 (7 created, 7 launched, 8 finished)
[08:08:06.483] | : . Launching futures ...
[08:08:06.484] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:06.484] | : . ' , Workers: [n=2]
[08:08:06.484] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:06.486] | : . ' , FutureRegistry: ‘workers-d9e73d0afef6bf67fb99f83a39f0a371’
[08:08:06.486] | : . ' , requestWorker() ...
[08:08:06.489] | : . ' , ; requestNode() ...
[08:08:06.489] | : . ' , ; ` Number of workers: 2
[08:08:06.489] | : . ' , ; ` Polling for a free worker ...
[08:08:06.489] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:06.489] | : . ' , ; ` | : Listing all futures
[08:08:06.489] | : . ' , ; ` | : Number of registered futures: 1
[08:08:06.489] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:06.490] | : . ' , ; ` | Total time: 0
[08:08:06.490] | : . ' , ; ` Polling for a free worker ... done
[08:08:06.490] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:06.490] | : . ' , ; ` | Listing all futures
[08:08:06.490] | : . ' , ; ` | Number of registered futures: 1
[08:08:06.490] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:06.490] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:06.490] | : . ' , ; ` Index of first available worker: 2
[08:08:06.490] | : . ' , ; ` Validate that the worker is functional ...
[08:08:06.589] | : . ' , ; ` | Worker is functional
[08:08:06.589] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:06.589] | : . ' , ; ` | : Listing all futures
[08:08:06.589] | : . ' , ; ` | : Number of registered futures: 1
[08:08:06.589] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:06.590] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:06.590] | : . ' , ; requestNode() ... done
[08:08:06.590] | : . ' , ; cluster node index: 2
[08:08:06.590] | : . ' , requestWorker() ... done
[08:08:06.590] | : . ' , eraseGlobalEnvironment() ...
[08:08:06.591] | : . ' , eraseGlobalEnvironment() ... done
[08:08:06.591] | : . ' , launchFuture() ...
[08:08:06.591] | : . ' , ; cluster node index: 2
[08:08:06.591] | : . ' , ; getFutureData() ...
[08:08:06.591] | : . ' , ; ` getFutureCore() ...
[08:08:06.591] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:06.591] | : . ' , ; ` getFutureCore() ... done
[08:08:06.591] | : . ' , ; ` getFutureCapture() ...
[08:08:06.591] | : . ' , ; ` getFutureCapture() ... done
[08:08:06.592] | : . ' , ; ` getFutureContext() ...
[08:08:06.592] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:06.592] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:06.592] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:06.592] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:06.592] | : . ' , ; ` getFutureContext() ... done
[08:08:06.592] | : . ' , ; getFutureData() ... done
[08:08:06.593] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ...
[08:08:06.593] | : . ' , ; ` Appended future to position #2
[08:08:06.593] | : . ' , ; ` Number of registered futures: 2
[08:08:06.593] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ... done
[08:08:06.593] | : . ' , launchFuture() ... done
[08:08:06.593] | : . ' , MultisessionFuture started
[08:08:06.593] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:06.593] | : . Launching futures ... done
[08:08:06.593] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:06.594] | : Using MultisessionFutureBackend ... done
[08:08:06.594] | run() for ‘Future’ (<unnamed-83>) ... done
[08:08:06.594] future(..., label = NULL) ... done
[08:08:06.594] future(..., label = NULL) ...
[08:08:06.594] | lazy: FALSE
[08:08:06.594] | stdout: TRUE
[08:08:06.595] | conditions: [n=1] ‘condition’
[08:08:06.595] | gc: FALSE
[08:08:06.595] | earlySignal: FALSE
[08:08:06.595] | getGlobalsAndPackages() ...
[08:08:06.595] | : Searching for globals ...
[08:08:06.598] | : . globals found: [1] ‘{’
[08:08:06.598] | : Searching for globals ... done
[08:08:06.598] | : Resolving globals: FALSE
[08:08:06.598] | : Search for packages associated with the globals ...
[08:08:06.599] | : . Packages associated with globals: [1] ‘base’
[08:08:06.599] | : . Packages: [1] ‘base’
[08:08:06.599] | : Search for packages associated with the globals ... done
[08:08:06.599] | : Packages after dropping 'base': [0] 
[08:08:06.599] | : globals: [0] 
[08:08:06.599] | : packages: [0] 
[08:08:06.599] | getGlobalsAndPackages() ... done
[08:08:06.600] | run() for ‘Future’ (<unnamed-84>) ...
[08:08:06.600] | : state: ‘created’
[08:08:06.600] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:06.600] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:06.600] | : Using MultisessionFutureBackend ...
[08:08:06.600] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:08:06.600] | : . Launching futures ...
[08:08:06.600] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:06.601] | : . ' , Workers: [n=2]
[08:08:06.601] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:06.602] | : . ' , FutureRegistry: ‘workers-d9e73d0afef6bf67fb99f83a39f0a371’
[08:08:06.602] | : . ' , requestWorker() ...
[08:08:06.602] | : . ' , ; requestNode() ...
[08:08:06.603] | : . ' , ; ` Number of workers: 2
[08:08:06.603] | : . ' , ; ` Polling for a free worker ...
[08:08:06.603] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:06.603] | : . ' , ; ` | : Listing all futures
[08:08:06.603] | : . ' , ; ` | : Number of registered futures: 2
[08:08:06.603] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:06.603] | : . ' , ; ` | Poll #1 (0): usedNodes() = 2, workers = 2
[08:08:06.614] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'collect-first', earlySignal = 1) ...
[08:08:06.614] | : . ' , ; ` | : collectValues('workers-d9e73d0afef6bf67fb99f83a39f0a371', firstOnly = TRUE) ...
[08:08:06.614] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-82>) ...
[08:08:06.614] | : . ' , ; ` | : . ' Cluster node socket connection: index=4, id=1255
[08:08:06.615] | : . ' , ; ` | : . ' assertValidConnection() ...
[08:08:06.615] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:06.615] | : . ' , ; ` | : . ' assertValidConnection() ... done
[08:08:06.615] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ...
[08:08:06.616] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:06.616] | : . ' , ; ` | : . ' , [1] TRUE
[08:08:06.616] | : . ' , ; ` | : . ' , received data:
[08:08:06.616] | : . ' , ; ` | : . ' , List of 5
[08:08:06.616] | : . ' , ; ` | : . ' ,  $ type   : chr "VALUE"
[08:08:06.616] | : . ' , ; ` | : . ' ,  $ value  :List of 16
[08:08:06.616] | : . ' , ; ` | : . ' ,   ..$ value              : num 2
[08:08:06.616] | : . ' , ; ` | : . ' ,   ..$ visible            : logi TRUE
[08:08:06.616] | : . ' , ; ` | : . ' ,   ..$ stdout             : chr ""
[08:08:06.616] | : . ' , ; ` | : . ' ,   ..$ conditions         : list()
[08:08:06.616] | : . ' , ; ` | : . ' ,   ..$ rng                : logi FALSE
[08:08:06.616] | : . ' , ; ` | : . ' ,   ..$ seed               : NULL
[08:08:06.616] | : . ' , ; ` | : . ' ,   ..$ misuseGlobalEnv    : NULL
[08:08:06.616] | : . ' , ; ` | : . ' ,   ..$ misuseConnections  :List of 3
[08:08:06.616] | : . ' , ; ` | : . ' ,   .. ..$ added   : NULL
[08:08:06.616] | : . ' , ; ` | : . ' ,   .. ..$ removed : NULL
[08:08:06.616] | : . ' , ; ` | : . ' ,   .. ..$ replaced: NULL
[08:08:06.616] | : . ' , ; ` | : . ' ,   ..$ misuseDevices      : NULL
[08:08:06.616] | : . ' , ; ` | : . ' ,   ..$ misuseDefaultDevice: list()
[08:08:06.616] | : . ' , ; ` | : . ' ,   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:06"
[08:08:06.616] | : . ' , ; ` | : . ' ,   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:06"
[08:08:06.616] | : . ' , ; ` | : . ' ,   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "82"
[08:08:06.616] | : . ' , ; ` | : . ' ,   ..$ session_uuid       : chr "47b35ab504ca4447100288bf636d3311"
[08:08:06.616] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "source")=List of 5
[08:08:06.616] | : . ' , ; ` | : . ' ,   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:06.616] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:06.616] | : . ' , ; ` | : . ' ,   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:06.616] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:06.616] | : . ' , ; ` | : . ' ,   .. .. ..$ pid   : int 69070
[08:08:06.616] | : . ' , ; ` | : . ' ,   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:05"
[08:08:06.616] | : . ' , ; ` | : . ' ,   .. .. ..$ random: int 2147483647
[08:08:06.616] | : . ' , ; ` | : . ' ,   ..$ r_info             :List of 4
[08:08:06.616] | : . ' , ; ` | : . ' ,   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:06.616] | : . ' , ; ` | : . ' ,   .. .. ..$ : int [1:3] 4 5 1
[08:08:06.616] | : . ' , ; ` | : . ' ,   .. ..$ os           : chr "unix"
[08:08:06.616] | : . ' , ; ` | : . ' ,   .. ..$ os_name      : chr "Linux"
[08:08:06.616] | : . ' , ; ` | : . ' ,   .. ..$ captures_utf8: logi TRUE
[08:08:06.616] | : . ' , ; ` | : . ' ,   ..$ version            : chr "1.8"
[08:08:06.616] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr "FutureResult"
[08:08:06.616] | : . ' , ; ` | : . ' ,  $ success: logi TRUE
[08:08:06.616] | : . ' , ; ` | : . ' ,  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.005 0 0
[08:08:06.616] | : . ' , ; ` | : . ' ,   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:06.616] | : . ' , ; ` | : . ' ,  $ tag    : NULL
[08:08:06.627] | : . ' , ; ` | : . ' , Received FutureResult
[08:08:06.627] | : . ' , ; ` | : . ' , FutureResult:
[08:08:06.627] | : . ' , ; ` | : . ' , value: ‘numeric’
[08:08:06.627] | : . ' , ; ` | : . ' , visible: TRUE
[08:08:06.627] | : . ' , ; ` | : . ' , stdout: character
[08:08:06.627] | : . ' , ; ` | : . ' , conditions: [n = 0] 
[08:08:06.627] | : . ' , ; ` | : . ' , RNG used: FALSE
[08:08:06.627] | : . ' , ; ` | : . ' , duration: 0.003761768 secs (started 2025-06-17 08:08:06.52001)
[08:08:06.627] | : . ' , ; ` | : . ' , version: 1.8
[08:08:06.628] | : . ' , ; ` | : . ' , FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ...
[08:08:06.628] | : . ' , ; ` | : . ' , ; Removed future from position #1
[08:08:06.628] | : . ' , ; ` | : . ' , ; Number of registered futures: 1
[08:08:06.628] | : . ' , ; ` | : . ' , FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ... done
[08:08:06.628] | : . ' , ; ` | : . ' , Erased future from future backend
[08:08:06.629] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:06.629] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:06.629] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:06.629] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:06.629] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:06.629] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:06.629] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:06.629] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:06.629] | : . ' , ; ` | : . ' , ;  int 0
[08:08:06.630] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:06.630] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ... done
[08:08:06.630] | : . ' , ; ` | : . ' receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:06.630] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-82>) ... done
[08:08:06.630] | : . ' , ; ` | : . assertFutureResult() ...
[08:08:06.630] | : . ' , ; ` | : . ' Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:06.630] | : . ' , ; ` | : . ' Future uuid: 82
[08:08:06.630] | : . ' , ; ` | : . ' identical; success
[08:08:06.631] | : . ' , ; ` | : . assertFutureResult() ... done
[08:08:06.631] | : . ' , ; ` | : . Future at position #1 is resolved ...
[08:08:06.631] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-82>) ...
[08:08:06.631] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:06.631] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:06.631] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:06.631] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:06.631] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:06.631] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:06.632] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:06.632] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:06.632] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:06.632] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:06.632] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:06.632] | : . ' , ; ` | : . ' , ;  int 0
[08:08:06.632] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:06.633] | : . ' , ; ` | : . ' , check for misuse ...
[08:08:06.633] | : . ' , ; ` | : . ' , check for misuse ... done
[08:08:06.633] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-82>) ... done
[08:08:06.633] | : . ' , ; ` | : . Future at position #1 is resolved ... done
[08:08:06.633] | : . ' , ; ` | : collectValues('workers-d9e73d0afef6bf67fb99f83a39f0a371', firstOnly = TRUE) ... done
[08:08:06.633] | : . ' , ; ` | : Remove collected futures ...
[08:08:06.633] | : . ' , ; ` | : . Indices of futures to drop: [n=1] ‘1’
[08:08:06.633] | : . ' , ; ` | : Remove collected futures ... done
[08:08:06.634] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'collect-first', earlySignal = 1) ... done
[08:08:06.634] | : . ' , ; ` | Early signaling of 2 future candidates ...
[08:08:06.634] | : . ' , ; ` | Number of futures with early signaling requested: 0
[08:08:06.634] | : . ' , ; ` | Early signaling of 2 future candidates ... done
[08:08:06.634] | : . ' , ; ` | Number of registered futures: 2
[08:08:06.634] | : . ' , ; ` Polling for a free worker ... done
[08:08:06.634] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:06.634] | : . ' , ; ` | Listing all futures
[08:08:06.634] | : . ' , ; ` | Number of registered futures: 1
[08:08:06.634] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:06.635] | : . ' , ; ` Total time: 0.031346321105957
[08:08:06.635] | : . ' , ; requestNode() ... done
[08:08:06.635] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:06.635] | : . ' , ; ` Listing all futures
[08:08:06.635] | : . ' , ; ` Number of registered futures: 1
[08:08:06.635] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:06.635] | : . ' , ; avail: [n=2] ‘1’
[08:08:06.635] | : . ' , ; Index of first available worker: 1
[08:08:06.635] | : . ' , ; Validate that the worker is functional ...
[08:08:06.734] | : . ' , ; ` Worker is functional
[08:08:06.734] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:06.734] | : . ' , ; ` | Listing all futures
[08:08:06.734] | : . ' , ; ` | Number of registered futures: 1
[08:08:06.734] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:06.734] | : . ' , ; Validate that the worker is functional ... done
[08:08:06.735] | : . ' , requestWorker() ... done
[08:08:06.735] | : . ' , cluster node index: 1
[08:08:06.735] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:06.735] | : . ' eraseGlobalEnvironment() ...
[08:08:06.735] | : . ' eraseGlobalEnvironment() ... done
[08:08:06.736] | : . ' launchFuture() ...
[08:08:06.736] | : . ' , cluster node index: 1
[08:08:06.736] | : . ' , getFutureData() ...
[08:08:06.736] | : . ' , ; getFutureCore() ...
[08:08:06.736] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:06.736] | : . ' , ; getFutureCore() ... done
[08:08:06.736] | : . ' , ; getFutureCapture() ...
[08:08:06.736] | : . ' , ; getFutureCapture() ... done
[08:08:06.736] | : . ' , ; getFutureContext() ...
[08:08:06.737] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:06.737] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:06.737] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:06.737] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:06.737] | : . ' , ; getFutureContext() ... done
[08:08:06.737] | : . ' , getFutureData() ... done
[08:08:06.737] | : . ' , FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ...
[08:08:06.738] | : . ' , ; Appended future to position #2
[08:08:06.738] | : . ' , ; Number of registered futures: 2
[08:08:06.738] | : . ' , FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ... done
[08:08:06.738] | : . ' launchFuture() ... done
[08:08:06.738] | : . ' MultisessionFuture started
[08:08:06.738] | : . Launching futures ... done
[08:08:06.738] | : Using MultisessionFutureBackend ... done
[08:08:06.738] | : Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:06.738] | run() for ‘Future’ (<unnamed-84>) ... done
[08:08:06.739] future(..., label = NULL) ... done

<environment: 0x55675c693308> 
<environment: 0x55675aae3c70> 
[08:08:06.740] resolved() for environment ...
[08:08:06.740] | resolved() for list ...
[08:08:06.740] | : Number of elements: 4
[08:08:06.740] | : Number of futures: 4
[08:08:06.740] | : resolved() for MultisessionFuture (<unnamed-83>) ...
[08:08:06.741] | : . Cluster node socket connection: index=5, id=1256
[08:08:06.741] | : . assertValidConnection() ...
[08:08:06.741] | : . ' cluster node index: 2
[08:08:06.741] | : . assertValidConnection() ... done
[08:08:06.742] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:06.742] | : . ' cluster node index: 2
[08:08:06.742] | : . ' [1] TRUE
[08:08:06.742] | : . ' received data:
[08:08:06.742] | : . ' List of 5
[08:08:06.742] | : . '  $ type   : chr "VALUE"
[08:08:06.742] | : . '  $ value  :List of 16
[08:08:06.742] | : . '   ..$ value              : NULL
[08:08:06.742] | : . '   ..$ visible            : logi TRUE
[08:08:06.742] | : . '   ..$ stdout             : chr ""
[08:08:06.742] | : . '   ..$ conditions         : list()
[08:08:06.742] | : . '   ..$ rng                : logi FALSE
[08:08:06.742] | : . '   ..$ seed               : NULL
[08:08:06.742] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:06.742] | : . '   ..$ misuseConnections  :List of 3
[08:08:06.742] | : . '   .. ..$ added   : NULL
[08:08:06.742] | : . '   .. ..$ removed : NULL
[08:08:06.742] | : . '   .. ..$ replaced: NULL
[08:08:06.742] | : . '   ..$ misuseDevices      : NULL
[08:08:06.742] | : . '   ..$ misuseDefaultDevice: list()
[08:08:06.742] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:06"
[08:08:06.742] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:06"
[08:08:06.742] | : . '   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "83"
[08:08:06.742] | : . '   ..$ session_uuid       : chr "d924a4373eab2307bd7df4caf6e025d6"
[08:08:06.742] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:06.742] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:06.742] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:06.742] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:06.742] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:06.742] | : . '   .. .. ..$ pid   : int 69071
[08:08:06.742] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:05"
[08:08:06.742] | : . '   .. .. ..$ random: int 2147483647
[08:08:06.742] | : . '   ..$ r_info             :List of 4
[08:08:06.742] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:06.742] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:06.742] | : . '   .. ..$ os           : chr "unix"
[08:08:06.742] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:06.742] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:06.742] | : . '   ..$ version            : chr "1.8"
[08:08:06.742] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:06.742] | : . '  $ success: logi TRUE
[08:08:06.742] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[08:08:06.742] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:06.742] | : . '  $ tag    : NULL
[08:08:06.755] | : . ' Received FutureResult
[08:08:06.755] | : . ' FutureResult:
[08:08:06.755] | : . ' value: ‘NULL’
[08:08:06.755] | : . ' visible: TRUE
[08:08:06.755] | : . ' stdout: character
[08:08:06.755] | : . ' conditions: [n = 0] 
[08:08:06.755] | : . ' RNG used: FALSE
[08:08:06.755] | : . ' duration: 0.00294733 secs (started 2025-06-17 08:08:06.633882)
[08:08:06.755] | : . ' version: 1.8
[08:08:06.756] | : . ' FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ...
[08:08:06.756] | : . ' , Removed future from position #1
[08:08:06.756] | : . ' , Number of registered futures: 1
[08:08:06.756] | : . ' FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ... done
[08:08:06.756] | : . ' Erased future from future backend
[08:08:06.756] | : . ' result() for ClusterFuture ...
[08:08:06.757] | : . ' , result already collected: FutureResult
[08:08:06.757] | : . ' result() for ClusterFuture ... done
[08:08:06.757] | : . ' signalConditions() ...
[08:08:06.757] | : . ' , include = ‘immediateCondition’
[08:08:06.757] | : . ' , exclude = 
[08:08:06.757] | : . ' , resignal = FALSE
[08:08:06.757] | : . ' , Number of conditions: 0
[08:08:06.757] | : . ' ,  int 0
[08:08:06.758] | : . ' signalConditions() ... done
[08:08:06.758] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:06.758] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:06.758] | : resolved() for MultisessionFuture (<unnamed-83>) ... done
[08:08:06.758] | : assertFutureResult() ...
[08:08:06.758] | : . Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:06.758] | : . Future uuid: 83
[08:08:06.758] | : . identical; success
[08:08:06.758] | : assertFutureResult() ... done
[08:08:06.758] | : resolved() for MultisessionFuture (<unnamed-84>) ...
[08:08:06.759] | : . Cluster node socket connection: index=4, id=1255
[08:08:06.759] | : . assertValidConnection() ...
[08:08:06.759] | : . ' cluster node index: 1
[08:08:06.759] | : . assertValidConnection() ... done
[08:08:06.770] | : . socketSelect(list(<connection #4 (id=1255)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:06.770] | : resolved() for MultisessionFuture (<unnamed-84>) ... done
[08:08:06.770] | resolved() for list ... done
[08:08:06.770] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE FALSE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:06.771] value() for MultisessionFuture (<unnamed-84>) ...
[08:08:06.771] | result() for ClusterFuture ...
[08:08:06.771] | : assertValidConnection() ...
[08:08:06.771] | : . cluster node index: 1
[08:08:06.772] | : assertValidConnection() ... done
[08:08:06.772] | : receiveMessageFromWorker() for ClusterFuture ...
[08:08:06.772] | : . cluster node index: 1
[08:08:06.782] | : . [1] TRUE
[08:08:06.782] | : . received data:
[08:08:06.783] | : . List of 5
[08:08:06.783] | : .  $ type   : chr "VALUE"
[08:08:06.783] | : .  $ value  :List of 16
[08:08:06.783] | : .   ..$ value              : num 4
[08:08:06.783] | : .   ..$ visible            : logi TRUE
[08:08:06.783] | : .   ..$ stdout             : chr ""
[08:08:06.783] | : .   ..$ conditions         : list()
[08:08:06.783] | : .   ..$ rng                : logi FALSE
[08:08:06.783] | : .   ..$ seed               : NULL
[08:08:06.783] | : .   ..$ misuseGlobalEnv    : NULL
[08:08:06.783] | : .   ..$ misuseConnections  :List of 3
[08:08:06.783] | : .   .. ..$ added   : NULL
[08:08:06.783] | : .   .. ..$ removed : NULL
[08:08:06.783] | : .   .. ..$ replaced: NULL
[08:08:06.783] | : .   ..$ misuseDevices      : NULL
[08:08:06.783] | : .   ..$ misuseDefaultDevice: list()
[08:08:06.783] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:06"
[08:08:06.783] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:06"
[08:08:06.783] | : .   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "84"
[08:08:06.783] | : .   ..$ session_uuid       : chr "47b35ab504ca4447100288bf636d3311"
[08:08:06.783] | : .   .. ..- attr(*, "source")=List of 5
[08:08:06.783] | : .   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:06.783] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:06.783] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:06.783] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:06.783] | : .   .. .. ..$ pid   : int 69070
[08:08:06.783] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:05"
[08:08:06.783] | : .   .. .. ..$ random: int 2147483647
[08:08:06.783] | : .   ..$ r_info             :List of 4
[08:08:06.783] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:06.783] | : .   .. .. ..$ : int [1:3] 4 5 1
[08:08:06.783] | : .   .. ..$ os           : chr "unix"
[08:08:06.783] | : .   .. ..$ os_name      : chr "Linux"
[08:08:06.783] | : .   .. ..$ captures_utf8: logi TRUE
[08:08:06.783] | : .   ..$ version            : chr "1.8"
[08:08:06.783] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:08:06.783] | : .  $ success: logi TRUE
[08:08:06.783] | : .  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.004 0 0
[08:08:06.783] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:06.783] | : .  $ tag    : NULL
[08:08:06.794] | : . Received FutureResult
[08:08:06.794] | : . FutureResult:
[08:08:06.794] | : . value: ‘numeric’
[08:08:06.794] | : . visible: TRUE
[08:08:06.794] | : . stdout: character
[08:08:06.794] | : . conditions: [n = 0] 
[08:08:06.794] | : . RNG used: FALSE
[08:08:06.794] | : . duration: 0.003067017 secs (started 2025-06-17 08:08:06.778909)
[08:08:06.794] | : . version: 1.8
[08:08:06.794] | : . FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ...
[08:08:06.794] | : . ' Removed future from position #1
[08:08:06.795] | : . ' Number of registered futures: 0
[08:08:06.795] | : . FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ... done
[08:08:06.795] | : . Erased future from future backend
[08:08:06.795] | : . result() for ClusterFuture ...
[08:08:06.795] | : . ' result already collected: FutureResult
[08:08:06.795] | : . result() for ClusterFuture ... done
[08:08:06.795] | : . signalConditions() ...
[08:08:06.795] | : . ' include = ‘immediateCondition’
[08:08:06.795] | : . ' exclude = 
[08:08:06.796] | : . ' resignal = FALSE
[08:08:06.796] | : . ' Number of conditions: 0
[08:08:06.796] | : . '  int 0
[08:08:06.796] | : . signalConditions() ... done
[08:08:06.796] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:08:06.796] | result() for ClusterFuture ... done
[08:08:06.796] | result() for ClusterFuture ...
[08:08:06.797] | : result already collected: FutureResult
[08:08:06.797] | result() for ClusterFuture ... done
[08:08:06.797] | signalConditions() ...
[08:08:06.797] | : include = ‘immediateCondition’
[08:08:06.797] | : exclude = 
[08:08:06.797] | : resignal = FALSE
[08:08:06.797] | : Number of conditions: 0
[08:08:06.797] | :  int 0
[08:08:06.798] | signalConditions() ... done
[08:08:06.798] | relay stdout ...
[08:08:06.798] | relay stdout ... done
[08:08:06.798] | check for misuse ...
[08:08:06.798] | check for misuse ... done
[08:08:06.798] value() for MultisessionFuture (<unnamed-84>) ... done
[08:08:06.798] value() for listenv ...
[08:08:06.798] | recursive: 0
[08:08:06.799] | reduce: FALSE
[08:08:06.799] | length: 4
[08:08:06.799] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:06.800] | Number of remaining objects: 4
[08:08:06.800] | checking value #1:
[08:08:06.800] | 'obj' is atomic
[08:08:06.800] | signalConditionsASAP(numeric, pos=1) ...
[08:08:06.800] | : nx: 4
[08:08:06.800] | : relay: TRUE
[08:08:06.800] | : stdout: TRUE
[08:08:06.800] | : signal: TRUE
[08:08:06.800] | : resignal: FALSE
[08:08:06.800] | : force: TRUE
[08:08:06.800] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:06.801] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:06.801] | : until=2
[08:08:06.801] | : relaying element #2
[08:08:06.801] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:06.801] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:06.801] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:06.801] | length: 3 (resolved future 1)
[08:08:06.801] value() for listenv ... done
[08:08:06.801] checking value #2:
[08:08:06.802] 'obj' is MultisessionFuture
[08:08:06.802] MultisessionFuture #2
[08:08:06.802] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:06.802] | nx: 4
[08:08:06.802] | relay: TRUE
[08:08:06.802] | stdout: TRUE
[08:08:06.802] | signal: TRUE
[08:08:06.802] | resignal: FALSE
[08:08:06.802] | force: TRUE
[08:08:06.802] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:06.803] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:06.803] | until=2
[08:08:06.803] | relaying element #2
[08:08:06.803] | value() for MultisessionFuture (<unnamed-82>) ...
[08:08:06.803] | : result() for ClusterFuture ...
[08:08:06.803] | : . result already collected: FutureResult
[08:08:06.803] | : result() for ClusterFuture ... done
[08:08:06.803] | : result() for ClusterFuture ...
[08:08:06.803] | : . result already collected: FutureResult
[08:08:06.803] | : result() for ClusterFuture ... done
[08:08:06.804] | : signalConditions() ...
[08:08:06.804] | : . include = ‘immediateCondition’
[08:08:06.804] | : . exclude = 
[08:08:06.804] | : . resignal = FALSE
[08:08:06.804] | : . Number of conditions: 0
[08:08:06.804] | : .  int 0
[08:08:06.804] | : signalConditions() ... done
[08:08:06.805] | : relay stdout ...
[08:08:06.805] | : relay stdout ... done
[08:08:06.805] | : check for misuse ...
[08:08:06.805] | : check for misuse ... done
[08:08:06.805] | value() for MultisessionFuture (<unnamed-82>) ... done
[08:08:06.805] | result() for ClusterFuture ...
[08:08:06.805] | : result already collected: FutureResult
[08:08:06.805] | result() for ClusterFuture ... done
[08:08:06.805] | signalConditions() ...
[08:08:06.805] | : include = ‘immediateCondition’
[08:08:06.806] | : exclude = 
[08:08:06.806] | : resignal = FALSE
[08:08:06.806] | : Number of conditions: 0
[08:08:06.806] | :  int 0
[08:08:06.806] | signalConditions() ... done
[08:08:06.806] | result() for ClusterFuture ...
[08:08:06.806] | : result already collected: FutureResult
[08:08:06.807] | result() for ClusterFuture ... done
[08:08:06.807] | signalConditions() ...
[08:08:06.807] | : include = ‘condition’
[08:08:06.807] | : exclude = ‘error’, ‘immediateCondition’
[08:08:06.807] | : resignal = TRUE
[08:08:06.807] | : Number of conditions: 0
[08:08:06.807] | :  int 0
[08:08:06.807] | signalConditions() ... done
[08:08:06.808] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:06.808] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:06.808] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:06.808] value(<MultisessionFuture>, ...) ...
[08:08:06.808] value(<MultisessionFuture>, ...) ... done
[08:08:06.808] value() for MultisessionFuture (<unnamed-82>) ...
[08:08:06.808] | result() for ClusterFuture ...
[08:08:06.808] | : result already collected: FutureResult
[08:08:06.808] | result() for ClusterFuture ... done
[08:08:06.808] | result() for ClusterFuture ...
[08:08:06.809] | : result already collected: FutureResult
[08:08:06.809] | result() for ClusterFuture ... done
[08:08:06.809] | signalConditions() ...
[08:08:06.809] | : include = ‘immediateCondition’
[08:08:06.809] | : exclude = 
[08:08:06.809] | : resignal = FALSE
[08:08:06.809] | : Number of conditions: 0
[08:08:06.809] | :  int 0
[08:08:06.810] | signalConditions() ... done
[08:08:06.810] | check for misuse ...
[08:08:06.810] | check for misuse ... done
[08:08:06.810] value() for MultisessionFuture (<unnamed-82>) ... done
[08:08:06.810] value: <numeric>
[08:08:06.810] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:06.810] | nx: 4
[08:08:06.810] | relay: TRUE
[08:08:06.810] | stdout: TRUE
[08:08:06.811] | signal: TRUE
[08:08:06.811] | resignal: FALSE
[08:08:06.811] | force: TRUE
[08:08:06.811] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:06.811] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:06.811] | until=3
[08:08:06.811] | relaying element #3
[08:08:06.811] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:06.811] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:06.811] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:06.811] resolve() for MultisessionFuture ...
[08:08:06.812] resolve() for MultisessionFuture ... done
[08:08:06.812] length: 2 (resolved future 2)

[08:08:06.812] checking value #3:
[08:08:06.812] 'obj' is MultisessionFuture
[08:08:06.812] MultisessionFuture #3
[08:08:06.812] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:06.812] | nx: 4
[08:08:06.812] | relay: TRUE
[08:08:06.812] | stdout: TRUE
[08:08:06.813] | signal: TRUE
[08:08:06.813] | resignal: FALSE
[08:08:06.813] | force: TRUE
[08:08:06.813] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:06.813] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:06.813] | until=3
[08:08:06.813] | relaying element #3
[08:08:06.813] | value() for MultisessionFuture (<unnamed-83>) ...
[08:08:06.813] | : result() for ClusterFuture ...
[08:08:06.813] | : . result already collected: FutureResult
[08:08:06.813] | : result() for ClusterFuture ... done
[08:08:06.814] | : result() for ClusterFuture ...
[08:08:06.814] | : . result already collected: FutureResult
[08:08:06.814] | : result() for ClusterFuture ... done
[08:08:06.814] | : signalConditions() ...
[08:08:06.814] | : . include = ‘immediateCondition’
[08:08:06.814] | : . exclude = 
[08:08:06.814] | : . resignal = FALSE
[08:08:06.814] | : . Number of conditions: 0
[08:08:06.814] | : .  int 0
[08:08:06.815] | : signalConditions() ... done
[08:08:06.815] | : relay stdout ...
[08:08:06.815] | : relay stdout ... done
[08:08:06.815] | : check for misuse ...
[08:08:06.815] | : check for misuse ... done
[08:08:06.815] | value() for MultisessionFuture (<unnamed-83>) ... done
[08:08:06.815] | result() for ClusterFuture ...
[08:08:06.815] | : result already collected: FutureResult
[08:08:06.816] | result() for ClusterFuture ... done
[08:08:06.816] | signalConditions() ...
[08:08:06.816] | : include = ‘immediateCondition’
[08:08:06.816] | : exclude = 
[08:08:06.816] | : resignal = FALSE
[08:08:06.816] | : Number of conditions: 0
[08:08:06.816] | :  int 0
[08:08:06.817] | signalConditions() ... done
[08:08:06.817] | result() for ClusterFuture ...
[08:08:06.817] | : result already collected: FutureResult
[08:08:06.817] | result() for ClusterFuture ... done
[08:08:06.817] | signalConditions() ...
[08:08:06.817] | : include = ‘condition’
[08:08:06.817] | : exclude = ‘error’, ‘immediateCondition’
[08:08:06.817] | : resignal = TRUE
[08:08:06.817] | : Number of conditions: 0
[08:08:06.817] | :  int 0
[08:08:06.818] | signalConditions() ... done
[08:08:06.818] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:06.818] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:06.818] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:06.818] value(<MultisessionFuture>, ...) ...
[08:08:06.818] value(<MultisessionFuture>, ...) ... done
[08:08:06.818] value() for MultisessionFuture (<unnamed-83>) ...
[08:08:06.818] | result() for ClusterFuture ...
[08:08:06.819] | : result already collected: FutureResult
[08:08:06.819] | result() for ClusterFuture ... done
[08:08:06.819] | result() for ClusterFuture ...
[08:08:06.819] | : result already collected: FutureResult
[08:08:06.819] | result() for ClusterFuture ... done
[08:08:06.819] | signalConditions() ...
[08:08:06.819] | : include = ‘immediateCondition’
[08:08:06.819] | : exclude = 
[08:08:06.819] | : resignal = FALSE
[08:08:06.819] | : Number of conditions: 0
[08:08:06.820] | :  int 0
[08:08:06.820] | signalConditions() ... done
[08:08:06.820] | check for misuse ...
[08:08:06.820] | check for misuse ... done
[08:08:06.820] value() for MultisessionFuture (<unnamed-83>) ... done
[08:08:06.820] value: <NULL>
[08:08:06.821] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:06.821] | nx: 4
[08:08:06.821] | relay: TRUE
[08:08:06.821] | stdout: TRUE
[08:08:06.821] | signal: TRUE
[08:08:06.821] | resignal: FALSE
[08:08:06.821] | force: TRUE
[08:08:06.821] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:06.821] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:06.821] | until=4
[08:08:06.821] | relaying element #4
[08:08:06.822] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:06.822] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:06.822] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:06.822] resolve() for MultisessionFuture ...
[08:08:06.822] resolve() for MultisessionFuture ... done
[08:08:06.822] length: 1 (resolved future 3)

[08:08:06.822] checking value #4:
[08:08:06.822] 'obj' is atomic
[08:08:06.822] signalConditionsASAP(numeric, pos=4) ...
[08:08:06.822] | nx: 4
[08:08:06.823] | relay: TRUE
[08:08:06.823] | stdout: TRUE
[08:08:06.823] | signal: TRUE
[08:08:06.823] | resignal: FALSE
[08:08:06.823] | force: TRUE
[08:08:06.823] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:06.823] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:06.823] | until=4
[08:08:06.823] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:06.823] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:06.824] signalConditionsASAP(numeric, pos=4) ... done
[08:08:06.824] length: 0 (resolved future 4)

[08:08:06.824] Relaying remaining futures ...
[08:08:06.824] | signalConditionsASAP(NULL, pos=0) ...
[08:08:06.824] | : nx: 4
[08:08:06.824] | : relay: TRUE
[08:08:06.824] | : stdout: TRUE
[08:08:06.824] | : signal: TRUE
[08:08:06.824] | : resignal: FALSE
[08:08:06.825] | : force: TRUE
[08:08:06.825] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:06.825] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:06.825] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:06.825] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:06.825] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:06.825] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(2, 3, 1)
[08:08:06.827] future(..., label = NULL) ...
[08:08:06.827] | lazy: FALSE
[08:08:06.827] | stdout: TRUE
[08:08:06.827] | conditions: [n=1] ‘condition’
[08:08:06.827] | gc: FALSE
[08:08:06.827] | earlySignal: FALSE
[08:08:06.828] | getGlobalsAndPackages() ...
[08:08:06.828] | : Searching for globals ...
[08:08:06.829] | : . globals found: [0] 
[08:08:06.829] | : Searching for globals ... done
[08:08:06.829] | : globals: [0] <none>
[08:08:06.829] | : packages: [0] <none>
[08:08:06.829] | getGlobalsAndPackages() ... done
[08:08:06.830] | run() for ‘Future’ (<unnamed-85>) ...
[08:08:06.830] | : state: ‘created’
[08:08:06.830] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:06.830] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:06.830] | : Using MultisessionFutureBackend ...
[08:08:06.830] | : . Number of futures since start: 9 (9 created, 9 launched, 12 finished)
[08:08:06.830] | : . Launching futures ...
[08:08:06.830] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:06.831] | : . ' , Workers: [n=2]
[08:08:06.831] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:06.832] | : . ' , FutureRegistry: ‘workers-d9e73d0afef6bf67fb99f83a39f0a371’
[08:08:06.832] | : . ' , requestWorker() ...
[08:08:06.832] | : . ' , ; requestNode() ...
[08:08:06.833] | : . ' , ; ` Number of workers: 2
[08:08:06.833] | : . ' , ; ` Polling for a free worker ...
[08:08:06.833] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:06.833] | : . ' , ; ` | : Listing all futures
[08:08:06.833] | : . ' , ; ` | : Number of registered futures: 0
[08:08:06.833] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:06.833] | : . ' , ; ` | Total time: 0
[08:08:06.833] | : . ' , ; ` Polling for a free worker ... done
[08:08:06.833] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:06.834] | : . ' , ; ` | Listing all futures
[08:08:06.834] | : . ' , ; ` | Number of registered futures: 0
[08:08:06.834] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:06.834] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:06.834] | : . ' , ; ` Index of first available worker: 1
[08:08:06.834] | : . ' , ; ` Validate that the worker is functional ...
[08:08:06.939] | : . ' , ; ` | Worker is functional
[08:08:06.939] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:06.939] | : . ' , ; ` | : Listing all futures
[08:08:06.940] | : . ' , ; ` | : Number of registered futures: 0
[08:08:06.940] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:06.940] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:06.940] | : . ' , ; requestNode() ... done
[08:08:06.940] | : . ' , ; cluster node index: 1
[08:08:06.940] | : . ' , requestWorker() ... done
[08:08:06.940] | : . ' , eraseGlobalEnvironment() ...
[08:08:06.941] | : . ' , eraseGlobalEnvironment() ... done
[08:08:06.941] | : . ' , launchFuture() ...
[08:08:06.941] | : . ' , ; cluster node index: 1
[08:08:06.941] | : . ' , ; getFutureData() ...
[08:08:06.941] | : . ' , ; ` getFutureCore() ...
[08:08:06.941] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:06.941] | : . ' , ; ` getFutureCore() ... done
[08:08:06.942] | : . ' , ; ` getFutureCapture() ...
[08:08:06.942] | : . ' , ; ` getFutureCapture() ... done
[08:08:06.942] | : . ' , ; ` getFutureContext() ...
[08:08:06.942] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:06.942] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:06.942] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:06.942] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:06.942] | : . ' , ; ` getFutureContext() ... done
[08:08:06.943] | : . ' , ; getFutureData() ... done
[08:08:06.943] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ...
[08:08:06.943] | : . ' , ; ` Appended future to position #1
[08:08:06.943] | : . ' , ; ` Number of registered futures: 1
[08:08:06.943] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ... done
[08:08:06.943] | : . ' , launchFuture() ... done
[08:08:06.943] | : . ' , MultisessionFuture started
[08:08:06.944] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:06.944] | : . Launching futures ... done
[08:08:06.944] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:06.944] | : Using MultisessionFutureBackend ... done
[08:08:06.944] | run() for ‘Future’ (<unnamed-85>) ... done
[08:08:06.944] future(..., label = NULL) ... done
[08:08:06.944] future(..., label = NULL) ...
[08:08:06.944] | lazy: FALSE
[08:08:06.944] | stdout: TRUE
[08:08:06.944] | conditions: [n=1] ‘condition’
[08:08:06.945] | gc: FALSE
[08:08:06.945] | earlySignal: FALSE
[08:08:06.945] | getGlobalsAndPackages() ...
[08:08:06.945] | : Searching for globals ...
[08:08:06.946] | : . globals found: [0] 
[08:08:06.946] | : Searching for globals ... done
[08:08:06.946] | : globals: [0] <none>
[08:08:06.947] | : packages: [0] <none>
[08:08:06.947] | getGlobalsAndPackages() ... done
[08:08:06.947] | run() for ‘Future’ (<unnamed-86>) ...
[08:08:06.947] | : state: ‘created’
[08:08:06.947] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:06.947] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:06.947] | : Using MultisessionFutureBackend ...
[08:08:06.948] | : . Number of futures since start: 10 (10 created, 10 launched, 12 finished)
[08:08:06.948] | : . Launching futures ...
[08:08:06.948] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:06.948] | : . ' , Workers: [n=2]
[08:08:06.948] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:06.950] | : . ' , FutureRegistry: ‘workers-d9e73d0afef6bf67fb99f83a39f0a371’
[08:08:06.950] | : . ' , requestWorker() ...
[08:08:06.950] | : . ' , ; requestNode() ...
[08:08:06.950] | : . ' , ; ` Number of workers: 2
[08:08:06.950] | : . ' , ; ` Polling for a free worker ...
[08:08:06.950] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:06.950] | : . ' , ; ` | : Listing all futures
[08:08:06.950] | : . ' , ; ` | : Number of registered futures: 1
[08:08:06.951] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:06.951] | : . ' , ; ` | Total time: 0
[08:08:06.951] | : . ' , ; ` Polling for a free worker ... done
[08:08:06.951] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:06.951] | : . ' , ; ` | Listing all futures
[08:08:06.951] | : . ' , ; ` | Number of registered futures: 1
[08:08:06.951] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:06.951] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:06.951] | : . ' , ; ` Index of first available worker: 2
[08:08:06.951] | : . ' , ; ` Validate that the worker is functional ...
[08:08:07.052] | : . ' , ; ` | Worker is functional
[08:08:07.052] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:07.052] | : . ' , ; ` | : Listing all futures
[08:08:07.052] | : . ' , ; ` | : Number of registered futures: 1
[08:08:07.052] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:07.052] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:07.053] | : . ' , ; requestNode() ... done
[08:08:07.053] | : . ' , ; cluster node index: 2
[08:08:07.053] | : . ' , requestWorker() ... done
[08:08:07.053] | : . ' , eraseGlobalEnvironment() ...
[08:08:07.053] | : . ' , eraseGlobalEnvironment() ... done
[08:08:07.054] | : . ' , launchFuture() ...
[08:08:07.054] | : . ' , ; cluster node index: 2
[08:08:07.054] | : . ' , ; getFutureData() ...
[08:08:07.054] | : . ' , ; ` getFutureCore() ...
[08:08:07.054] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:07.054] | : . ' , ; ` getFutureCore() ... done
[08:08:07.054] | : . ' , ; ` getFutureCapture() ...
[08:08:07.054] | : . ' , ; ` getFutureCapture() ... done
[08:08:07.054] | : . ' , ; ` getFutureContext() ...
[08:08:07.054] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.055] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:07.055] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.055] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:07.055] | : . ' , ; ` getFutureContext() ... done
[08:08:07.055] | : . ' , ; getFutureData() ... done
[08:08:07.055] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ...
[08:08:07.056] | : . ' , ; ` Appended future to position #2
[08:08:07.056] | : . ' , ; ` Number of registered futures: 2
[08:08:07.056] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ... done
[08:08:07.056] | : . ' , launchFuture() ... done
[08:08:07.056] | : . ' , MultisessionFuture started
[08:08:07.056] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:07.056] | : . Launching futures ... done
[08:08:07.056] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:07.056] | : Using MultisessionFutureBackend ... done
[08:08:07.057] | run() for ‘Future’ (<unnamed-86>) ... done
[08:08:07.057] future(..., label = NULL) ... done
[08:08:07.057] future(..., label = NULL) ...
[08:08:07.057] | lazy: FALSE
[08:08:07.057] | stdout: TRUE
[08:08:07.057] | conditions: [n=1] ‘condition’
[08:08:07.057] | gc: FALSE
[08:08:07.057] | earlySignal: FALSE
[08:08:07.058] | getGlobalsAndPackages() ...
[08:08:07.058] | : Searching for globals ...
[08:08:07.061] | : . globals found: [1] ‘{’
[08:08:07.061] | : Searching for globals ... done
[08:08:07.061] | : Resolving globals: FALSE
[08:08:07.061] | : Search for packages associated with the globals ...
[08:08:07.061] | : . Packages associated with globals: [1] ‘base’
[08:08:07.062] | : . Packages: [1] ‘base’
[08:08:07.062] | : Search for packages associated with the globals ... done
[08:08:07.062] | : Packages after dropping 'base': [0] 
[08:08:07.062] | : globals: [0] 
[08:08:07.062] | : packages: [0] 
[08:08:07.062] | getGlobalsAndPackages() ... done
[08:08:07.062] | run() for ‘Future’ (<unnamed-87>) ...
[08:08:07.063] | : state: ‘created’
[08:08:07.063] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.063] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.063] | : Using MultisessionFutureBackend ...
[08:08:07.063] | : . Number of futures since start: 11 (11 created, 11 launched, 12 finished)
[08:08:07.063] | : . Launching futures ...
[08:08:07.063] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:07.063] | : . ' , Workers: [n=2]
[08:08:07.063] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:07.065] | : . ' , FutureRegistry: ‘workers-d9e73d0afef6bf67fb99f83a39f0a371’
[08:08:07.065] | : . ' , requestWorker() ...
[08:08:07.065] | : . ' , ; requestNode() ...
[08:08:07.065] | : . ' , ; ` Number of workers: 2
[08:08:07.066] | : . ' , ; ` Polling for a free worker ...
[08:08:07.066] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:07.066] | : . ' , ; ` | : Listing all futures
[08:08:07.066] | : . ' , ; ` | : Number of registered futures: 2
[08:08:07.066] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:07.066] | : . ' , ; ` | Poll #1 (0): usedNodes() = 2, workers = 2
[08:08:07.076] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'collect-first', earlySignal = 1) ...
[08:08:07.076] | : . ' , ; ` | : collectValues('workers-d9e73d0afef6bf67fb99f83a39f0a371', firstOnly = TRUE) ...
[08:08:07.077] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-85>) ...
[08:08:07.077] | : . ' , ; ` | : . ' Cluster node socket connection: index=4, id=1255
[08:08:07.077] | : . ' , ; ` | : . ' assertValidConnection() ...
[08:08:07.077] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:07.078] | : . ' , ; ` | : . ' assertValidConnection() ... done
[08:08:07.078] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ...
[08:08:07.078] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:07.078] | : . ' , ; ` | : . ' , [1] TRUE
[08:08:07.079] | : . ' , ; ` | : . ' , received data:
[08:08:07.079] | : . ' , ; ` | : . ' , List of 5
[08:08:07.079] | : . ' , ; ` | : . ' ,  $ type   : chr "VALUE"
[08:08:07.079] | : . ' , ; ` | : . ' ,  $ value  :List of 16
[08:08:07.079] | : . ' , ; ` | : . ' ,   ..$ value              : num 2
[08:08:07.079] | : . ' , ; ` | : . ' ,   ..$ visible            : logi TRUE
[08:08:07.079] | : . ' , ; ` | : . ' ,   ..$ stdout             : chr ""
[08:08:07.079] | : . ' , ; ` | : . ' ,   ..$ conditions         : list()
[08:08:07.079] | : . ' , ; ` | : . ' ,   ..$ rng                : logi FALSE
[08:08:07.079] | : . ' , ; ` | : . ' ,   ..$ seed               : NULL
[08:08:07.079] | : . ' , ; ` | : . ' ,   ..$ misuseGlobalEnv    : NULL
[08:08:07.079] | : . ' , ; ` | : . ' ,   ..$ misuseConnections  :List of 3
[08:08:07.079] | : . ' , ; ` | : . ' ,   .. ..$ added   : NULL
[08:08:07.079] | : . ' , ; ` | : . ' ,   .. ..$ removed : NULL
[08:08:07.079] | : . ' , ; ` | : . ' ,   .. ..$ replaced: NULL
[08:08:07.079] | : . ' , ; ` | : . ' ,   ..$ misuseDevices      : NULL
[08:08:07.079] | : . ' , ; ` | : . ' ,   ..$ misuseDefaultDevice: list()
[08:08:07.079] | : . ' , ; ` | : . ' ,   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:06"
[08:08:07.079] | : . ' , ; ` | : . ' ,   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:06"
[08:08:07.079] | : . ' , ; ` | : . ' ,   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "85"
[08:08:07.079] | : . ' , ; ` | : . ' ,   ..$ session_uuid       : chr "47b35ab504ca4447100288bf636d3311"
[08:08:07.079] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "source")=List of 5
[08:08:07.079] | : . ' , ; ` | : . ' ,   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:07.079] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:07.079] | : . ' , ; ` | : . ' ,   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:07.079] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:07.079] | : . ' , ; ` | : . ' ,   .. .. ..$ pid   : int 69070
[08:08:07.079] | : . ' , ; ` | : . ' ,   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:05"
[08:08:07.079] | : . ' , ; ` | : . ' ,   .. .. ..$ random: int 2147483647
[08:08:07.079] | : . ' , ; ` | : . ' ,   ..$ r_info             :List of 4
[08:08:07.079] | : . ' , ; ` | : . ' ,   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:07.079] | : . ' , ; ` | : . ' ,   .. .. ..$ : int [1:3] 4 5 1
[08:08:07.079] | : . ' , ; ` | : . ' ,   .. ..$ os           : chr "unix"
[08:08:07.079] | : . ' , ; ` | : . ' ,   .. ..$ os_name      : chr "Linux"
[08:08:07.079] | : . ' , ; ` | : . ' ,   .. ..$ captures_utf8: logi TRUE
[08:08:07.079] | : . ' , ; ` | : . ' ,   ..$ version            : chr "1.8"
[08:08:07.079] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr "FutureResult"
[08:08:07.079] | : . ' , ; ` | : . ' ,  $ success: logi TRUE
[08:08:07.079] | : . ' , ; ` | : . ' ,  $ time   : 'proc_time' Named num [1:5] 0.007 0 0.007 0 0
[08:08:07.079] | : . ' , ; ` | : . ' ,   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:07.079] | : . ' , ; ` | : . ' ,  $ tag    : NULL
[08:08:07.090] | : . ' , ; ` | : . ' , Received FutureResult
[08:08:07.090] | : . ' , ; ` | : . ' , FutureResult:
[08:08:07.090] | : . ' , ; ` | : . ' , value: ‘numeric’
[08:08:07.090] | : . ' , ; ` | : . ' , visible: TRUE
[08:08:07.090] | : . ' , ; ` | : . ' , stdout: character
[08:08:07.090] | : . ' , ; ` | : . ' , conditions: [n = 0] 
[08:08:07.090] | : . ' , ; ` | : . ' , RNG used: FALSE
[08:08:07.090] | : . ' , ; ` | : . ' , duration: 0.006406307 secs (started 2025-06-17 08:08:06.98398)
[08:08:07.090] | : . ' , ; ` | : . ' , version: 1.8
[08:08:07.090] | : . ' , ; ` | : . ' , FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ...
[08:08:07.091] | : . ' , ; ` | : . ' , ; Removed future from position #1
[08:08:07.091] | : . ' , ; ` | : . ' , ; Number of registered futures: 1
[08:08:07.091] | : . ' , ; ` | : . ' , FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ... done
[08:08:07.091] | : . ' , ; ` | : . ' , Erased future from future backend
[08:08:07.091] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:07.091] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:07.091] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:07.091] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:07.092] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:07.092] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:07.092] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:07.092] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:07.092] | : . ' , ; ` | : . ' , ;  int 0
[08:08:07.092] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:07.092] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ... done
[08:08:07.093] | : . ' , ; ` | : . ' receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:07.093] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-85>) ... done
[08:08:07.093] | : . ' , ; ` | : . assertFutureResult() ...
[08:08:07.093] | : . ' , ; ` | : . ' Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:07.093] | : . ' , ; ` | : . ' Future uuid: 85
[08:08:07.093] | : . ' , ; ` | : . ' identical; success
[08:08:07.093] | : . ' , ; ` | : . assertFutureResult() ... done
[08:08:07.093] | : . ' , ; ` | : . Future at position #1 is resolved ...
[08:08:07.093] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-85>) ...
[08:08:07.093] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:07.094] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:07.094] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:07.094] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:07.094] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:07.094] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:07.094] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:07.094] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:07.094] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:07.094] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:07.094] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:07.095] | : . ' , ; ` | : . ' , ;  int 0
[08:08:07.095] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:07.095] | : . ' , ; ` | : . ' , check for misuse ...
[08:08:07.095] | : . ' , ; ` | : . ' , check for misuse ... done
[08:08:07.095] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-85>) ... done
[08:08:07.096] | : . ' , ; ` | : . Future at position #1 is resolved ... done
[08:08:07.096] | : . ' , ; ` | : collectValues('workers-d9e73d0afef6bf67fb99f83a39f0a371', firstOnly = TRUE) ... done
[08:08:07.096] | : . ' , ; ` | : Remove collected futures ...
[08:08:07.096] | : . ' , ; ` | : . Indices of futures to drop: [n=1] ‘1’
[08:08:07.096] | : . ' , ; ` | : Remove collected futures ... done
[08:08:07.096] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'collect-first', earlySignal = 1) ... done
[08:08:07.096] | : . ' , ; ` | Early signaling of 2 future candidates ...
[08:08:07.096] | : . ' , ; ` | Number of futures with early signaling requested: 0
[08:08:07.096] | : . ' , ; ` | Early signaling of 2 future candidates ... done
[08:08:07.097] | : . ' , ; ` | Number of registered futures: 2
[08:08:07.097] | : . ' , ; ` Polling for a free worker ... done
[08:08:07.097] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:07.097] | : . ' , ; ` | Listing all futures
[08:08:07.097] | : . ' , ; ` | Number of registered futures: 1
[08:08:07.097] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:07.097] | : . ' , ; ` Total time: 0.0311152935028076
[08:08:07.097] | : . ' , ; requestNode() ... done
[08:08:07.097] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:07.098] | : . ' , ; ` Listing all futures
[08:08:07.098] | : . ' , ; ` Number of registered futures: 1
[08:08:07.098] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:07.098] | : . ' , ; avail: [n=2] ‘1’
[08:08:07.098] | : . ' , ; Index of first available worker: 1
[08:08:07.098] | : . ' , ; Validate that the worker is functional ...
[08:08:07.198] | : . ' , ; ` Worker is functional
[08:08:07.198] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:07.198] | : . ' , ; ` | Listing all futures
[08:08:07.198] | : . ' , ; ` | Number of registered futures: 1
[08:08:07.198] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:07.199] | : . ' , ; Validate that the worker is functional ... done
[08:08:07.199] | : . ' , requestWorker() ... done
[08:08:07.199] | : . ' , cluster node index: 1
[08:08:07.199] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:07.199] | : . ' eraseGlobalEnvironment() ...
[08:08:07.200] | : . ' eraseGlobalEnvironment() ... done
[08:08:07.200] | : . ' launchFuture() ...
[08:08:07.200] | : . ' , cluster node index: 1
[08:08:07.200] | : . ' , getFutureData() ...
[08:08:07.200] | : . ' , ; getFutureCore() ...
[08:08:07.200] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:07.200] | : . ' , ; getFutureCore() ... done
[08:08:07.200] | : . ' , ; getFutureCapture() ...
[08:08:07.200] | : . ' , ; getFutureCapture() ... done
[08:08:07.201] | : . ' , ; getFutureContext() ...
[08:08:07.201] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.201] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:07.201] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.201] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:07.201] | : . ' , ; getFutureContext() ... done
[08:08:07.201] | : . ' , getFutureData() ... done
[08:08:07.202] | : . ' , FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ...
[08:08:07.202] | : . ' , ; Appended future to position #2
[08:08:07.202] | : . ' , ; Number of registered futures: 2
[08:08:07.202] | : . ' , FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ... done
[08:08:07.202] | : . ' launchFuture() ... done
[08:08:07.202] | : . ' MultisessionFuture started
[08:08:07.202] | : . Launching futures ... done
[08:08:07.202] | : Using MultisessionFutureBackend ... done
[08:08:07.202] | : Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:07.203] | run() for ‘Future’ (<unnamed-87>) ... done
[08:08:07.203] future(..., label = NULL) ... done

<environment: 0x55675aae5e30> 
<environment: 0x556759b692a0> 
[08:08:07.204] resolved() for environment ...
[08:08:07.204] | resolved() for list ...
[08:08:07.204] | : Number of elements: 4
[08:08:07.205] | : Number of futures: 4
[08:08:07.207] | : resolved() for MultisessionFuture (<unnamed-86>) ...
[08:08:07.207] | : . Cluster node socket connection: index=5, id=1256
[08:08:07.208] | : . assertValidConnection() ...
[08:08:07.208] | : . ' cluster node index: 2
[08:08:07.208] | : . assertValidConnection() ... done
[08:08:07.208] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:07.208] | : . ' cluster node index: 2
[08:08:07.209] | : . ' [1] TRUE
[08:08:07.209] | : . ' received data:
[08:08:07.209] | : . ' List of 5
[08:08:07.209] | : . '  $ type   : chr "VALUE"
[08:08:07.209] | : . '  $ value  :List of 16
[08:08:07.209] | : . '   ..$ value              : NULL
[08:08:07.209] | : . '   ..$ visible            : logi TRUE
[08:08:07.209] | : . '   ..$ stdout             : chr ""
[08:08:07.209] | : . '   ..$ conditions         : list()
[08:08:07.209] | : . '   ..$ rng                : logi FALSE
[08:08:07.209] | : . '   ..$ seed               : NULL
[08:08:07.209] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:07.209] | : . '   ..$ misuseConnections  :List of 3
[08:08:07.209] | : . '   .. ..$ added   : NULL
[08:08:07.209] | : . '   .. ..$ removed : NULL
[08:08:07.209] | : . '   .. ..$ replaced: NULL
[08:08:07.209] | : . '   ..$ misuseDevices      : NULL
[08:08:07.209] | : . '   ..$ misuseDefaultDevice: list()
[08:08:07.209] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:07"
[08:08:07.209] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:07"
[08:08:07.209] | : . '   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "86"
[08:08:07.209] | : . '   ..$ session_uuid       : chr "d924a4373eab2307bd7df4caf6e025d6"
[08:08:07.209] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:07.209] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:07.209] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:07.209] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:07.209] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:07.209] | : . '   .. .. ..$ pid   : int 69071
[08:08:07.209] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:05"
[08:08:07.209] | : . '   .. .. ..$ random: int 2147483647
[08:08:07.209] | : . '   ..$ r_info             :List of 4
[08:08:07.209] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:07.209] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:07.209] | : . '   .. ..$ os           : chr "unix"
[08:08:07.209] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:07.209] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:07.209] | : . '   ..$ version            : chr "1.8"
[08:08:07.209] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:07.209] | : . '  $ success: logi TRUE
[08:08:07.209] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:07.209] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:07.209] | : . '  $ tag    : NULL
[08:08:07.220] | : . ' Received FutureResult
[08:08:07.220] | : . ' FutureResult:
[08:08:07.220] | : . ' value: ‘NULL’
[08:08:07.220] | : . ' visible: TRUE
[08:08:07.220] | : . ' stdout: character
[08:08:07.220] | : . ' conditions: [n = 0] 
[08:08:07.220] | : . ' RNG used: FALSE
[08:08:07.220] | : . ' duration: 0.002765894 secs (started 2025-06-17 08:08:07.097009)
[08:08:07.220] | : . ' version: 1.8
[08:08:07.220] | : . ' FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ...
[08:08:07.220] | : . ' , Removed future from position #1
[08:08:07.220] | : . ' , Number of registered futures: 1
[08:08:07.221] | : . ' FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ... done
[08:08:07.221] | : . ' Erased future from future backend
[08:08:07.221] | : . ' result() for ClusterFuture ...
[08:08:07.221] | : . ' , result already collected: FutureResult
[08:08:07.221] | : . ' result() for ClusterFuture ... done
[08:08:07.221] | : . ' signalConditions() ...
[08:08:07.221] | : . ' , include = ‘immediateCondition’
[08:08:07.221] | : . ' , exclude = 
[08:08:07.221] | : . ' , resignal = FALSE
[08:08:07.222] | : . ' , Number of conditions: 0
[08:08:07.222] | : . ' ,  int 0
[08:08:07.222] | : . ' signalConditions() ... done
[08:08:07.222] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:07.222] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:07.222] | : resolved() for MultisessionFuture (<unnamed-86>) ... done
[08:08:07.222] | : assertFutureResult() ...
[08:08:07.223] | : . Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:07.223] | : . Future uuid: 86
[08:08:07.223] | : . identical; success
[08:08:07.223] | : assertFutureResult() ... done
[08:08:07.223] | : resolved() for MultisessionFuture (<unnamed-87>) ...
[08:08:07.223] | : . Cluster node socket connection: index=4, id=1255
[08:08:07.223] | : . assertValidConnection() ...
[08:08:07.223] | : . ' cluster node index: 1
[08:08:07.224] | : . assertValidConnection() ... done
[08:08:07.234] | : . socketSelect(list(<connection #4 (id=1255)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:07.234] | : resolved() for MultisessionFuture (<unnamed-87>) ... done
[08:08:07.234] | resolved() for list ... done
[08:08:07.235] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE FALSE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:07.235] value() for MultisessionFuture (<unnamed-87>) ...
[08:08:07.236] | result() for ClusterFuture ...
[08:08:07.236] | : assertValidConnection() ...
[08:08:07.236] | : . cluster node index: 1
[08:08:07.236] | : assertValidConnection() ... done
[08:08:07.236] | : receiveMessageFromWorker() for ClusterFuture ...
[08:08:07.236] | : . cluster node index: 1
[08:08:07.246] | : . [1] TRUE
[08:08:07.246] | : . received data:
[08:08:07.247] | : . List of 5
[08:08:07.247] | : .  $ type   : chr "VALUE"
[08:08:07.247] | : .  $ value  :List of 16
[08:08:07.247] | : .   ..$ value              : num 4
[08:08:07.247] | : .   ..$ visible            : logi TRUE
[08:08:07.247] | : .   ..$ stdout             : chr ""
[08:08:07.247] | : .   ..$ conditions         : list()
[08:08:07.247] | : .   ..$ rng                : logi FALSE
[08:08:07.247] | : .   ..$ seed               : NULL
[08:08:07.247] | : .   ..$ misuseGlobalEnv    : NULL
[08:08:07.247] | : .   ..$ misuseConnections  :List of 3
[08:08:07.247] | : .   .. ..$ added   : NULL
[08:08:07.247] | : .   .. ..$ removed : NULL
[08:08:07.247] | : .   .. ..$ replaced: NULL
[08:08:07.247] | : .   ..$ misuseDevices      : NULL
[08:08:07.247] | : .   ..$ misuseDefaultDevice: list()
[08:08:07.247] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:07"
[08:08:07.247] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:07"
[08:08:07.247] | : .   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "87"
[08:08:07.247] | : .   ..$ session_uuid       : chr "47b35ab504ca4447100288bf636d3311"
[08:08:07.247] | : .   .. ..- attr(*, "source")=List of 5
[08:08:07.247] | : .   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:07.247] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:07.247] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:07.247] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:07.247] | : .   .. .. ..$ pid   : int 69070
[08:08:07.247] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:05"
[08:08:07.247] | : .   .. .. ..$ random: int 2147483647
[08:08:07.247] | : .   ..$ r_info             :List of 4
[08:08:07.247] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:07.247] | : .   .. .. ..$ : int [1:3] 4 5 1
[08:08:07.247] | : .   .. ..$ os           : chr "unix"
[08:08:07.247] | : .   .. ..$ os_name      : chr "Linux"
[08:08:07.247] | : .   .. ..$ captures_utf8: logi TRUE
[08:08:07.247] | : .   ..$ version            : chr "1.8"
[08:08:07.247] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:08:07.247] | : .  $ success: logi TRUE
[08:08:07.247] | : .  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[08:08:07.247] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:07.247] | : .  $ tag    : NULL
[08:08:07.257] | : . Received FutureResult
[08:08:07.258] | : . FutureResult:
[08:08:07.258] | : . value: ‘numeric’
[08:08:07.258] | : . visible: TRUE
[08:08:07.258] | : . stdout: character
[08:08:07.258] | : . conditions: [n = 0] 
[08:08:07.258] | : . RNG used: FALSE
[08:08:07.258] | : . duration: 0.002943039 secs (started 2025-06-17 08:08:07.242996)
[08:08:07.258] | : . version: 1.8
[08:08:07.258] | : . FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ...
[08:08:07.258] | : . ' Removed future from position #1
[08:08:07.258] | : . ' Number of registered futures: 0
[08:08:07.258] | : . FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ... done
[08:08:07.259] | : . Erased future from future backend
[08:08:07.259] | : . result() for ClusterFuture ...
[08:08:07.259] | : . ' result already collected: FutureResult
[08:08:07.259] | : . result() for ClusterFuture ... done
[08:08:07.259] | : . signalConditions() ...
[08:08:07.259] | : . ' include = ‘immediateCondition’
[08:08:07.259] | : . ' exclude = 
[08:08:07.259] | : . ' resignal = FALSE
[08:08:07.259] | : . ' Number of conditions: 0
[08:08:07.260] | : . '  int 0
[08:08:07.260] | : . signalConditions() ... done
[08:08:07.260] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:08:07.260] | result() for ClusterFuture ... done
[08:08:07.260] | result() for ClusterFuture ...
[08:08:07.260] | : result already collected: FutureResult
[08:08:07.260] | result() for ClusterFuture ... done
[08:08:07.261] | signalConditions() ...
[08:08:07.261] | : include = ‘immediateCondition’
[08:08:07.261] | : exclude = 
[08:08:07.261] | : resignal = FALSE
[08:08:07.261] | : Number of conditions: 0
[08:08:07.261] | :  int 0
[08:08:07.261] | signalConditions() ... done
[08:08:07.261] | relay stdout ...
[08:08:07.262] | relay stdout ... done
[08:08:07.262] | check for misuse ...
[08:08:07.262] | check for misuse ... done
[08:08:07.262] value() for MultisessionFuture (<unnamed-87>) ... done
[08:08:07.262] value() for listenv ...
[08:08:07.262] | recursive: 0
[08:08:07.262] | reduce: FALSE
[08:08:07.263] | length: 4
[08:08:07.263] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:07.263] | Number of remaining objects: 4
[08:08:07.263] | checking value #1:
[08:08:07.264] | 'obj' is atomic
[08:08:07.264] | signalConditionsASAP(numeric, pos=1) ...
[08:08:07.264] | : nx: 4
[08:08:07.264] | : relay: TRUE
[08:08:07.264] | : stdout: TRUE
[08:08:07.264] | : signal: TRUE
[08:08:07.264] | : resignal: FALSE
[08:08:07.264] | : force: TRUE
[08:08:07.264] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:07.264] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:07.264] | : until=2
[08:08:07.265] | : relaying element #2
[08:08:07.265] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:07.265] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:07.265] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:07.265] | length: 3 (resolved future 1)
[08:08:07.265] value() for listenv ... done
[08:08:07.265] checking value #2:
[08:08:07.265] 'obj' is MultisessionFuture
[08:08:07.265] MultisessionFuture #2
[08:08:07.266] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:07.266] | nx: 4
[08:08:07.266] | relay: TRUE
[08:08:07.266] | stdout: TRUE
[08:08:07.266] | signal: TRUE
[08:08:07.266] | resignal: FALSE
[08:08:07.266] | force: TRUE
[08:08:07.266] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:07.266] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:07.266] | until=2
[08:08:07.266] | relaying element #2
[08:08:07.267] | value() for MultisessionFuture (<unnamed-85>) ...
[08:08:07.267] | : result() for ClusterFuture ...
[08:08:07.267] | : . result already collected: FutureResult
[08:08:07.267] | : result() for ClusterFuture ... done
[08:08:07.267] | : result() for ClusterFuture ...
[08:08:07.267] | : . result already collected: FutureResult
[08:08:07.267] | : result() for ClusterFuture ... done
[08:08:07.267] | : signalConditions() ...
[08:08:07.267] | : . include = ‘immediateCondition’
[08:08:07.268] | : . exclude = 
[08:08:07.268] | : . resignal = FALSE
[08:08:07.268] | : . Number of conditions: 0
[08:08:07.268] | : .  int 0
[08:08:07.268] | : signalConditions() ... done
[08:08:07.268] | : relay stdout ...
[08:08:07.268] | : relay stdout ... done
[08:08:07.269] | : check for misuse ...
[08:08:07.269] | : check for misuse ... done
[08:08:07.269] | value() for MultisessionFuture (<unnamed-85>) ... done
[08:08:07.269] | result() for ClusterFuture ...
[08:08:07.269] | : result already collected: FutureResult
[08:08:07.269] | result() for ClusterFuture ... done
[08:08:07.269] | signalConditions() ...
[08:08:07.269] | : include = ‘immediateCondition’
[08:08:07.269] | : exclude = 
[08:08:07.269] | : resignal = FALSE
[08:08:07.270] | : Number of conditions: 0
[08:08:07.270] | :  int 0
[08:08:07.270] | signalConditions() ... done
[08:08:07.270] | result() for ClusterFuture ...
[08:08:07.270] | : result already collected: FutureResult
[08:08:07.270] | result() for ClusterFuture ... done
[08:08:07.270] | signalConditions() ...
[08:08:07.271] | : include = ‘condition’
[08:08:07.271] | : exclude = ‘error’, ‘immediateCondition’
[08:08:07.271] | : resignal = TRUE
[08:08:07.271] | : Number of conditions: 0
[08:08:07.271] | :  int 0
[08:08:07.271] | signalConditions() ... done
[08:08:07.271] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:07.271] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:07.272] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:07.272] value(<MultisessionFuture>, ...) ...
[08:08:07.272] value(<MultisessionFuture>, ...) ... done
[08:08:07.272] value() for MultisessionFuture (<unnamed-85>) ...
[08:08:07.272] | result() for ClusterFuture ...
[08:08:07.272] | : result already collected: FutureResult
[08:08:07.272] | result() for ClusterFuture ... done
[08:08:07.272] | result() for ClusterFuture ...
[08:08:07.272] | : result already collected: FutureResult
[08:08:07.272] | result() for ClusterFuture ... done
[08:08:07.273] | signalConditions() ...
[08:08:07.273] | : include = ‘immediateCondition’
[08:08:07.273] | : exclude = 
[08:08:07.273] | : resignal = FALSE
[08:08:07.273] | : Number of conditions: 0
[08:08:07.273] | :  int 0
[08:08:07.273] | signalConditions() ... done
[08:08:07.273] | check for misuse ...
[08:08:07.274] | check for misuse ... done
[08:08:07.274] value() for MultisessionFuture (<unnamed-85>) ... done
[08:08:07.274] value: <numeric>
[08:08:07.274] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:07.274] | nx: 4
[08:08:07.274] | relay: TRUE
[08:08:07.274] | stdout: TRUE
[08:08:07.274] | signal: TRUE
[08:08:07.274] | resignal: FALSE
[08:08:07.275] | force: TRUE
[08:08:07.275] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:07.275] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:07.275] | until=3
[08:08:07.275] | relaying element #3
[08:08:07.275] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:07.275] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:07.275] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:07.275] resolve() for MultisessionFuture ...
[08:08:07.275] resolve() for MultisessionFuture ... done
[08:08:07.276] length: 2 (resolved future 2)

[08:08:07.276] checking value #3:
[08:08:07.276] 'obj' is MultisessionFuture
[08:08:07.276] MultisessionFuture #3
[08:08:07.276] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:07.276] | nx: 4
[08:08:07.276] | relay: TRUE
[08:08:07.276] | stdout: TRUE
[08:08:07.276] | signal: TRUE
[08:08:07.276] | resignal: FALSE
[08:08:07.277] | force: TRUE
[08:08:07.277] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:07.277] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:07.277] | until=3
[08:08:07.277] | relaying element #3
[08:08:07.277] | value() for MultisessionFuture (<unnamed-86>) ...
[08:08:07.277] | : result() for ClusterFuture ...
[08:08:07.277] | : . result already collected: FutureResult
[08:08:07.277] | : result() for ClusterFuture ... done
[08:08:07.277] | : result() for ClusterFuture ...
[08:08:07.278] | : . result already collected: FutureResult
[08:08:07.278] | : result() for ClusterFuture ... done
[08:08:07.278] | : signalConditions() ...
[08:08:07.278] | : . include = ‘immediateCondition’
[08:08:07.278] | : . exclude = 
[08:08:07.278] | : . resignal = FALSE
[08:08:07.278] | : . Number of conditions: 0
[08:08:07.278] | : .  int 0
[08:08:07.279] | : signalConditions() ... done
[08:08:07.279] | : relay stdout ...
[08:08:07.279] | : relay stdout ... done
[08:08:07.279] | : check for misuse ...
[08:08:07.279] | : check for misuse ... done
[08:08:07.279] | value() for MultisessionFuture (<unnamed-86>) ... done
[08:08:07.279] | result() for ClusterFuture ...
[08:08:07.279] | : result already collected: FutureResult
[08:08:07.279] | result() for ClusterFuture ... done
[08:08:07.280] | signalConditions() ...
[08:08:07.280] | : include = ‘immediateCondition’
[08:08:07.280] | : exclude = 
[08:08:07.280] | : resignal = FALSE
[08:08:07.280] | : Number of conditions: 0
[08:08:07.280] | :  int 0
[08:08:07.280] | signalConditions() ... done
[08:08:07.281] | result() for ClusterFuture ...
[08:08:07.281] | : result already collected: FutureResult
[08:08:07.281] | result() for ClusterFuture ... done
[08:08:07.281] | signalConditions() ...
[08:08:07.281] | : include = ‘condition’
[08:08:07.281] | : exclude = ‘error’, ‘immediateCondition’
[08:08:07.281] | : resignal = TRUE
[08:08:07.281] | : Number of conditions: 0
[08:08:07.281] | :  int 0
[08:08:07.282] | signalConditions() ... done
[08:08:07.282] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:07.282] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:07.282] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:07.282] value(<MultisessionFuture>, ...) ...
[08:08:07.282] value(<MultisessionFuture>, ...) ... done
[08:08:07.282] value() for MultisessionFuture (<unnamed-86>) ...
[08:08:07.283] | result() for ClusterFuture ...
[08:08:07.283] | : result already collected: FutureResult
[08:08:07.283] | result() for ClusterFuture ... done
[08:08:07.283] | result() for ClusterFuture ...
[08:08:07.283] | : result already collected: FutureResult
[08:08:07.283] | result() for ClusterFuture ... done
[08:08:07.283] | signalConditions() ...
[08:08:07.283] | : include = ‘immediateCondition’
[08:08:07.283] | : exclude = 
[08:08:07.283] | : resignal = FALSE
[08:08:07.284] | : Number of conditions: 0
[08:08:07.284] | :  int 0
[08:08:07.284] | signalConditions() ... done
[08:08:07.284] | check for misuse ...
[08:08:07.284] | check for misuse ... done
[08:08:07.284] value() for MultisessionFuture (<unnamed-86>) ... done
[08:08:07.284] value: <NULL>
[08:08:07.285] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:07.285] | nx: 4
[08:08:07.285] | relay: TRUE
[08:08:07.285] | stdout: TRUE
[08:08:07.285] | signal: TRUE
[08:08:07.285] | resignal: FALSE
[08:08:07.285] | force: TRUE
[08:08:07.285] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:07.285] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:07.285] | until=4
[08:08:07.286] | relaying element #4
[08:08:07.286] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:07.286] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:07.286] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:07.286] resolve() for MultisessionFuture ...
[08:08:07.286] resolve() for MultisessionFuture ... done
[08:08:07.286] length: 1 (resolved future 3)

[08:08:07.286] checking value #4:
[08:08:07.287] 'obj' is atomic
[08:08:07.287] signalConditionsASAP(numeric, pos=4) ...
[08:08:07.287] | nx: 4
[08:08:07.287] | relay: TRUE
[08:08:07.287] | stdout: TRUE
[08:08:07.287] | signal: TRUE
[08:08:07.287] | resignal: FALSE
[08:08:07.287] | force: TRUE
[08:08:07.287] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:07.287] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:07.287] | until=4
[08:08:07.288] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:07.288] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:07.288] signalConditionsASAP(numeric, pos=4) ... done
[08:08:07.288] length: 0 (resolved future 4)

[08:08:07.288] Relaying remaining futures ...
[08:08:07.288] | signalConditionsASAP(NULL, pos=0) ...
[08:08:07.288] | : nx: 4
[08:08:07.288] | : relay: TRUE
[08:08:07.288] | : stdout: TRUE
[08:08:07.289] | : signal: TRUE
[08:08:07.289] | : resignal: FALSE
[08:08:07.289] | : force: TRUE
[08:08:07.289] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:07.289] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:07.289] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:07.289] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:07.289] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:07.289] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(2, 1, 3, 1)
[08:08:07.291] future(..., label = NULL) ...
[08:08:07.291] | lazy: FALSE
[08:08:07.291] | stdout: TRUE
[08:08:07.292] | conditions: [n=1] ‘condition’
[08:08:07.292] | gc: FALSE
[08:08:07.292] | earlySignal: FALSE
[08:08:07.292] | getGlobalsAndPackages() ...
[08:08:07.292] | : Searching for globals ...
[08:08:07.296] | : . globals found: [0] 
[08:08:07.296] | : Searching for globals ... done
[08:08:07.296] | : globals: [0] <none>
[08:08:07.296] | : packages: [0] <none>
[08:08:07.296] | getGlobalsAndPackages() ... done
[08:08:07.296] | run() for ‘Future’ (<unnamed-88>) ...
[08:08:07.296] | : state: ‘created’
[08:08:07.296] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.297] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.297] | : Using MultisessionFutureBackend ...
[08:08:07.297] | : . Number of futures since start: 12 (12 created, 12 launched, 16 finished)
[08:08:07.297] | : . Launching futures ...
[08:08:07.297] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:07.297] | : . ' , Workers: [n=2]
[08:08:07.297] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:07.299] | : . ' , FutureRegistry: ‘workers-d9e73d0afef6bf67fb99f83a39f0a371’
[08:08:07.299] | : . ' , requestWorker() ...
[08:08:07.299] | : . ' , ; requestNode() ...
[08:08:07.299] | : . ' , ; ` Number of workers: 2
[08:08:07.299] | : . ' , ; ` Polling for a free worker ...
[08:08:07.299] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:07.300] | : . ' , ; ` | : Listing all futures
[08:08:07.300] | : . ' , ; ` | : Number of registered futures: 0
[08:08:07.300] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:07.300] | : . ' , ; ` | Total time: 0
[08:08:07.300] | : . ' , ; ` Polling for a free worker ... done
[08:08:07.300] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:07.300] | : . ' , ; ` | Listing all futures
[08:08:07.300] | : . ' , ; ` | Number of registered futures: 0
[08:08:07.300] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:07.300] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:07.301] | : . ' , ; ` Index of first available worker: 1
[08:08:07.301] | : . ' , ; ` Validate that the worker is functional ...
[08:08:07.397] | : . ' , ; ` | Worker is functional
[08:08:07.398] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:07.398] | : . ' , ; ` | : Listing all futures
[08:08:07.398] | : . ' , ; ` | : Number of registered futures: 0
[08:08:07.398] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:07.398] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:07.398] | : . ' , ; requestNode() ... done
[08:08:07.398] | : . ' , ; cluster node index: 1
[08:08:07.399] | : . ' , requestWorker() ... done
[08:08:07.399] | : . ' , eraseGlobalEnvironment() ...
[08:08:07.399] | : . ' , eraseGlobalEnvironment() ... done
[08:08:07.399] | : . ' , launchFuture() ...
[08:08:07.399] | : . ' , ; cluster node index: 1
[08:08:07.399] | : . ' , ; getFutureData() ...
[08:08:07.400] | : . ' , ; ` getFutureCore() ...
[08:08:07.400] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:07.400] | : . ' , ; ` getFutureCore() ... done
[08:08:07.400] | : . ' , ; ` getFutureCapture() ...
[08:08:07.400] | : . ' , ; ` getFutureCapture() ... done
[08:08:07.400] | : . ' , ; ` getFutureContext() ...
[08:08:07.400] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.400] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:07.400] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.401] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:07.401] | : . ' , ; ` getFutureContext() ... done
[08:08:07.401] | : . ' , ; getFutureData() ... done
[08:08:07.401] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ...
[08:08:07.401] | : . ' , ; ` Appended future to position #1
[08:08:07.401] | : . ' , ; ` Number of registered futures: 1
[08:08:07.401] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ... done
[08:08:07.402] | : . ' , launchFuture() ... done
[08:08:07.402] | : . ' , MultisessionFuture started
[08:08:07.402] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:07.402] | : . Launching futures ... done
[08:08:07.402] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:07.402] | : Using MultisessionFutureBackend ... done
[08:08:07.402] | run() for ‘Future’ (<unnamed-88>) ... done
[08:08:07.402] future(..., label = NULL) ... done
[08:08:07.402] future(..., label = NULL) ...
[08:08:07.402] | lazy: FALSE
[08:08:07.403] | stdout: TRUE
[08:08:07.403] | conditions: [n=1] ‘condition’
[08:08:07.403] | gc: FALSE
[08:08:07.403] | earlySignal: FALSE
[08:08:07.403] | getGlobalsAndPackages() ...
[08:08:07.403] | : Searching for globals ...
[08:08:07.404] | : . globals found: [0] 
[08:08:07.404] | : Searching for globals ... done
[08:08:07.405] | : globals: [0] <none>
[08:08:07.405] | : packages: [0] <none>
[08:08:07.405] | getGlobalsAndPackages() ... done
[08:08:07.405] | run() for ‘Future’ (<unnamed-89>) ...
[08:08:07.405] | : state: ‘created’
[08:08:07.405] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.405] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.405] | : Using MultisessionFutureBackend ...
[08:08:07.406] | : . Number of futures since start: 13 (13 created, 13 launched, 16 finished)
[08:08:07.406] | : . Launching futures ...
[08:08:07.406] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:07.406] | : . ' , Workers: [n=2]
[08:08:07.406] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:07.408] | : . ' , FutureRegistry: ‘workers-d9e73d0afef6bf67fb99f83a39f0a371’
[08:08:07.408] | : . ' , requestWorker() ...
[08:08:07.408] | : . ' , ; requestNode() ...
[08:08:07.408] | : . ' , ; ` Number of workers: 2
[08:08:07.408] | : . ' , ; ` Polling for a free worker ...
[08:08:07.408] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:07.408] | : . ' , ; ` | : Listing all futures
[08:08:07.408] | : . ' , ; ` | : Number of registered futures: 1
[08:08:07.408] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:07.408] | : . ' , ; ` | Total time: 0
[08:08:07.409] | : . ' , ; ` Polling for a free worker ... done
[08:08:07.409] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:07.409] | : . ' , ; ` | Listing all futures
[08:08:07.409] | : . ' , ; ` | Number of registered futures: 1
[08:08:07.409] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:07.409] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:07.409] | : . ' , ; ` Index of first available worker: 2
[08:08:07.409] | : . ' , ; ` Validate that the worker is functional ...
[08:08:07.474] | : . ' , ; ` | Worker is functional
[08:08:07.474] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:07.474] | : . ' , ; ` | : Listing all futures
[08:08:07.474] | : . ' , ; ` | : Number of registered futures: 1
[08:08:07.475] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:07.475] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:07.475] | : . ' , ; requestNode() ... done
[08:08:07.475] | : . ' , ; cluster node index: 2
[08:08:07.475] | : . ' , requestWorker() ... done
[08:08:07.475] | : . ' , eraseGlobalEnvironment() ...
[08:08:07.476] | : . ' , eraseGlobalEnvironment() ... done
[08:08:07.476] | : . ' , launchFuture() ...
[08:08:07.476] | : . ' , ; cluster node index: 2
[08:08:07.476] | : . ' , ; getFutureData() ...
[08:08:07.476] | : . ' , ; ` getFutureCore() ...
[08:08:07.476] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:07.476] | : . ' , ; ` getFutureCore() ... done
[08:08:07.476] | : . ' , ; ` getFutureCapture() ...
[08:08:07.476] | : . ' , ; ` getFutureCapture() ... done
[08:08:07.477] | : . ' , ; ` getFutureContext() ...
[08:08:07.477] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.477] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:07.477] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.477] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:07.477] | : . ' , ; ` getFutureContext() ... done
[08:08:07.477] | : . ' , ; getFutureData() ... done
[08:08:07.478] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ...
[08:08:07.478] | : . ' , ; ` Appended future to position #2
[08:08:07.478] | : . ' , ; ` Number of registered futures: 2
[08:08:07.478] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ... done
[08:08:07.478] | : . ' , launchFuture() ... done
[08:08:07.478] | : . ' , MultisessionFuture started
[08:08:07.478] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:07.478] | : . Launching futures ... done
[08:08:07.478] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:07.479] | : Using MultisessionFutureBackend ... done
[08:08:07.479] | run() for ‘Future’ (<unnamed-89>) ... done
[08:08:07.479] future(..., label = NULL) ... done
[08:08:07.479] future(..., label = NULL) ...
[08:08:07.479] | lazy: FALSE
[08:08:07.479] | stdout: TRUE
[08:08:07.479] | conditions: [n=1] ‘condition’
[08:08:07.480] | gc: FALSE
[08:08:07.480] | earlySignal: FALSE
[08:08:07.480] | getGlobalsAndPackages() ...
[08:08:07.480] | : Searching for globals ...
[08:08:07.483] | : . globals found: [1] ‘{’
[08:08:07.483] | : Searching for globals ... done
[08:08:07.483] | : Resolving globals: FALSE
[08:08:07.483] | : Search for packages associated with the globals ...
[08:08:07.483] | : . Packages associated with globals: [1] ‘base’
[08:08:07.484] | : . Packages: [1] ‘base’
[08:08:07.484] | : Search for packages associated with the globals ... done
[08:08:07.484] | : Packages after dropping 'base': [0] 
[08:08:07.484] | : globals: [0] 
[08:08:07.484] | : packages: [0] 
[08:08:07.484] | getGlobalsAndPackages() ... done
[08:08:07.484] | run() for ‘Future’ (<unnamed-90>) ...
[08:08:07.484] | : state: ‘created’
[08:08:07.485] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.485] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.485] | : Using MultisessionFutureBackend ...
[08:08:07.485] | : . Number of futures since start: 14 (14 created, 14 launched, 16 finished)
[08:08:07.485] | : . Launching futures ...
[08:08:07.485] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:07.485] | : . ' , Workers: [n=2]
[08:08:07.485] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:07.487] | : . ' , FutureRegistry: ‘workers-d9e73d0afef6bf67fb99f83a39f0a371’
[08:08:07.487] | : . ' , requestWorker() ...
[08:08:07.487] | : . ' , ; requestNode() ...
[08:08:07.487] | : . ' , ; ` Number of workers: 2
[08:08:07.487] | : . ' , ; ` Polling for a free worker ...
[08:08:07.488] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:07.488] | : . ' , ; ` | : Listing all futures
[08:08:07.488] | : . ' , ; ` | : Number of registered futures: 2
[08:08:07.488] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:07.488] | : . ' , ; ` | Poll #1 (0): usedNodes() = 2, workers = 2
[08:08:07.498] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'collect-first', earlySignal = 1) ...
[08:08:07.498] | : . ' , ; ` | : collectValues('workers-d9e73d0afef6bf67fb99f83a39f0a371', firstOnly = TRUE) ...
[08:08:07.499] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-88>) ...
[08:08:07.499] | : . ' , ; ` | : . ' Cluster node socket connection: index=4, id=1255
[08:08:07.499] | : . ' , ; ` | : . ' assertValidConnection() ...
[08:08:07.499] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:07.499] | : . ' , ; ` | : . ' assertValidConnection() ... done
[08:08:07.500] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ...
[08:08:07.500] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:07.500] | : . ' , ; ` | : . ' , [1] TRUE
[08:08:07.500] | : . ' , ; ` | : . ' , received data:
[08:08:07.500] | : . ' , ; ` | : . ' , List of 5
[08:08:07.500] | : . ' , ; ` | : . ' ,  $ type   : chr "VALUE"
[08:08:07.500] | : . ' , ; ` | : . ' ,  $ value  :List of 16
[08:08:07.500] | : . ' , ; ` | : . ' ,   ..$ value              : num 2
[08:08:07.500] | : . ' , ; ` | : . ' ,   ..$ visible            : logi TRUE
[08:08:07.500] | : . ' , ; ` | : . ' ,   ..$ stdout             : chr ""
[08:08:07.500] | : . ' , ; ` | : . ' ,   ..$ conditions         : list()
[08:08:07.500] | : . ' , ; ` | : . ' ,   ..$ rng                : logi FALSE
[08:08:07.500] | : . ' , ; ` | : . ' ,   ..$ seed               : NULL
[08:08:07.500] | : . ' , ; ` | : . ' ,   ..$ misuseGlobalEnv    : NULL
[08:08:07.500] | : . ' , ; ` | : . ' ,   ..$ misuseConnections  :List of 3
[08:08:07.500] | : . ' , ; ` | : . ' ,   .. ..$ added   : NULL
[08:08:07.500] | : . ' , ; ` | : . ' ,   .. ..$ removed : NULL
[08:08:07.500] | : . ' , ; ` | : . ' ,   .. ..$ replaced: NULL
[08:08:07.500] | : . ' , ; ` | : . ' ,   ..$ misuseDevices      : NULL
[08:08:07.500] | : . ' , ; ` | : . ' ,   ..$ misuseDefaultDevice: list()
[08:08:07.500] | : . ' , ; ` | : . ' ,   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:07"
[08:08:07.500] | : . ' , ; ` | : . ' ,   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:07"
[08:08:07.500] | : . ' , ; ` | : . ' ,   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "88"
[08:08:07.500] | : . ' , ; ` | : . ' ,   ..$ session_uuid       : chr "47b35ab504ca4447100288bf636d3311"
[08:08:07.500] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "source")=List of 5
[08:08:07.500] | : . ' , ; ` | : . ' ,   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:07.500] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:07.500] | : . ' , ; ` | : . ' ,   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:07.500] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:07.500] | : . ' , ; ` | : . ' ,   .. .. ..$ pid   : int 69070
[08:08:07.500] | : . ' , ; ` | : . ' ,   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:05"
[08:08:07.500] | : . ' , ; ` | : . ' ,   .. .. ..$ random: int 2147483647
[08:08:07.500] | : . ' , ; ` | : . ' ,   ..$ r_info             :List of 4
[08:08:07.500] | : . ' , ; ` | : . ' ,   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:07.500] | : . ' , ; ` | : . ' ,   .. .. ..$ : int [1:3] 4 5 1
[08:08:07.500] | : . ' , ; ` | : . ' ,   .. ..$ os           : chr "unix"
[08:08:07.500] | : . ' , ; ` | : . ' ,   .. ..$ os_name      : chr "Linux"
[08:08:07.500] | : . ' , ; ` | : . ' ,   .. ..$ captures_utf8: logi TRUE
[08:08:07.500] | : . ' , ; ` | : . ' ,   ..$ version            : chr "1.8"
[08:08:07.500] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr "FutureResult"
[08:08:07.500] | : . ' , ; ` | : . ' ,  $ success: logi TRUE
[08:08:07.500] | : . ' , ; ` | : . ' ,  $ time   : 'proc_time' Named num [1:5] 0.006 0 0.006 0 0
[08:08:07.500] | : . ' , ; ` | : . ' ,   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:07.500] | : . ' , ; ` | : . ' ,  $ tag    : NULL
[08:08:07.511] | : . ' , ; ` | : . ' , Received FutureResult
[08:08:07.512] | : . ' , ; ` | : . ' , FutureResult:
[08:08:07.512] | : . ' , ; ` | : . ' , value: ‘numeric’
[08:08:07.512] | : . ' , ; ` | : . ' , visible: TRUE
[08:08:07.512] | : . ' , ; ` | : . ' , stdout: character
[08:08:07.512] | : . ' , ; ` | : . ' , conditions: [n = 0] 
[08:08:07.512] | : . ' , ; ` | : . ' , RNG used: FALSE
[08:08:07.512] | : . ' , ; ` | : . ' , duration: 0.003507853 secs (started 2025-06-17 08:08:07.441872)
[08:08:07.512] | : . ' , ; ` | : . ' , version: 1.8
[08:08:07.512] | : . ' , ; ` | : . ' , FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ...
[08:08:07.512] | : . ' , ; ` | : . ' , ; Removed future from position #1
[08:08:07.512] | : . ' , ; ` | : . ' , ; Number of registered futures: 1
[08:08:07.512] | : . ' , ; ` | : . ' , FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ... done
[08:08:07.513] | : . ' , ; ` | : . ' , Erased future from future backend
[08:08:07.513] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:07.513] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:07.513] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:07.513] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:07.513] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:07.513] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:07.513] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:07.513] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:07.513] | : . ' , ; ` | : . ' , ;  int 0
[08:08:07.514] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:07.514] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ... done
[08:08:07.514] | : . ' , ; ` | : . ' receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:07.514] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-88>) ... done
[08:08:07.514] | : . ' , ; ` | : . assertFutureResult() ...
[08:08:07.514] | : . ' , ; ` | : . ' Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:07.514] | : . ' , ; ` | : . ' Future uuid: 88
[08:08:07.515] | : . ' , ; ` | : . ' identical; success
[08:08:07.515] | : . ' , ; ` | : . assertFutureResult() ... done
[08:08:07.515] | : . ' , ; ` | : . Future at position #1 is resolved ...
[08:08:07.515] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-88>) ...
[08:08:07.515] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:07.515] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:07.515] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:07.515] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:07.515] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:07.516] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:07.516] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:07.516] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:07.516] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:07.516] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:07.516] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:07.516] | : . ' , ; ` | : . ' , ;  int 0
[08:08:07.517] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:07.517] | : . ' , ; ` | : . ' , check for misuse ...
[08:08:07.517] | : . ' , ; ` | : . ' , check for misuse ... done
[08:08:07.517] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-88>) ... done
[08:08:07.517] | : . ' , ; ` | : . Future at position #1 is resolved ... done
[08:08:07.517] | : . ' , ; ` | : collectValues('workers-d9e73d0afef6bf67fb99f83a39f0a371', firstOnly = TRUE) ... done
[08:08:07.517] | : . ' , ; ` | : Remove collected futures ...
[08:08:07.517] | : . ' , ; ` | : . Indices of futures to drop: [n=1] ‘1’
[08:08:07.518] | : . ' , ; ` | : Remove collected futures ... done
[08:08:07.518] | : . ' , ; ` | FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'collect-first', earlySignal = 1) ... done
[08:08:07.518] | : . ' , ; ` | Early signaling of 2 future candidates ...
[08:08:07.518] | : . ' , ; ` | Number of futures with early signaling requested: 0
[08:08:07.518] | : . ' , ; ` | Early signaling of 2 future candidates ... done
[08:08:07.518] | : . ' , ; ` | Number of registered futures: 2
[08:08:07.518] | : . ' , ; ` Polling for a free worker ... done
[08:08:07.518] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:07.519] | : . ' , ; ` | Listing all futures
[08:08:07.519] | : . ' , ; ` | Number of registered futures: 1
[08:08:07.519] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:07.519] | : . ' , ; ` Total time: 0.0308387279510498
[08:08:07.519] | : . ' , ; requestNode() ... done
[08:08:07.519] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:07.519] | : . ' , ; ` Listing all futures
[08:08:07.519] | : . ' , ; ` Number of registered futures: 1
[08:08:07.519] | : . ' , ; FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:07.519] | : . ' , ; avail: [n=2] ‘1’
[08:08:07.520] | : . ' , ; Index of first available worker: 1
[08:08:07.520] | : . ' , ; Validate that the worker is functional ...
[08:08:07.621] | : . ' , ; ` Worker is functional
[08:08:07.621] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ...
[08:08:07.621] | : . ' , ; ` | Listing all futures
[08:08:07.621] | : . ' , ; ` | Number of registered futures: 1
[08:08:07.621] | : . ' , ; ` FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'list', earlySignal = 0) ... done
[08:08:07.622] | : . ' , ; Validate that the worker is functional ... done
[08:08:07.622] | : . ' , requestWorker() ... done
[08:08:07.622] | : . ' , cluster node index: 1
[08:08:07.622] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:07.622] | : . ' eraseGlobalEnvironment() ...
[08:08:07.622] | : . ' eraseGlobalEnvironment() ... done
[08:08:07.623] | : . ' launchFuture() ...
[08:08:07.623] | : . ' , cluster node index: 1
[08:08:07.623] | : . ' , getFutureData() ...
[08:08:07.623] | : . ' , ; getFutureCore() ...
[08:08:07.623] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:07.623] | : . ' , ; getFutureCore() ... done
[08:08:07.623] | : . ' , ; getFutureCapture() ...
[08:08:07.623] | : . ' , ; getFutureCapture() ... done
[08:08:07.623] | : . ' , ; getFutureContext() ...
[08:08:07.623] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.624] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:07.624] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.624] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:07.624] | : . ' , ; getFutureContext() ... done
[08:08:07.624] | : . ' , getFutureData() ... done
[08:08:07.624] | : . ' , FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ...
[08:08:07.624] | : . ' , ; Appended future to position #2
[08:08:07.625] | : . ' , ; Number of registered futures: 2
[08:08:07.625] | : . ' , FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'add', earlySignal = 0) ... done
[08:08:07.625] | : . ' launchFuture() ... done
[08:08:07.625] | : . ' MultisessionFuture started
[08:08:07.625] | : . Launching futures ... done
[08:08:07.625] | : Using MultisessionFutureBackend ... done
[08:08:07.625] | : Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:07.625] | run() for ‘Future’ (<unnamed-90>) ... done
[08:08:07.625] future(..., label = NULL) ... done

<environment: 0x556758c78258> 
<environment: 0x55675c026830> 
[08:08:07.627] resolved() for environment ...
[08:08:07.627] | resolved() for list ...
[08:08:07.627] | : Number of elements: 4
[08:08:07.627] | : Number of futures: 4
[08:08:07.627] | : resolved() for MultisessionFuture (<unnamed-89>) ...
[08:08:07.628] | : . Cluster node socket connection: index=5, id=1256
[08:08:07.628] | : . assertValidConnection() ...
[08:08:07.628] | : . ' cluster node index: 2
[08:08:07.628] | : . assertValidConnection() ... done
[08:08:07.629] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:07.629] | : . ' cluster node index: 2
[08:08:07.629] | : . ' [1] TRUE
[08:08:07.629] | : . ' received data:
[08:08:07.629] | : . ' List of 5
[08:08:07.629] | : . '  $ type   : chr "VALUE"
[08:08:07.629] | : . '  $ value  :List of 16
[08:08:07.629] | : . '   ..$ value              : NULL
[08:08:07.629] | : . '   ..$ visible            : logi TRUE
[08:08:07.629] | : . '   ..$ stdout             : chr ""
[08:08:07.629] | : . '   ..$ conditions         : list()
[08:08:07.629] | : . '   ..$ rng                : logi FALSE
[08:08:07.629] | : . '   ..$ seed               : NULL
[08:08:07.629] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:07.629] | : . '   ..$ misuseConnections  :List of 3
[08:08:07.629] | : . '   .. ..$ added   : NULL
[08:08:07.629] | : . '   .. ..$ removed : NULL
[08:08:07.629] | : . '   .. ..$ replaced: NULL
[08:08:07.629] | : . '   ..$ misuseDevices      : NULL
[08:08:07.629] | : . '   ..$ misuseDefaultDevice: list()
[08:08:07.629] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:07"
[08:08:07.629] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:07"
[08:08:07.629] | : . '   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "89"
[08:08:07.629] | : . '   ..$ session_uuid       : chr "d924a4373eab2307bd7df4caf6e025d6"
[08:08:07.629] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:07.629] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:07.629] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:07.629] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:07.629] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:07.629] | : . '   .. .. ..$ pid   : int 69071
[08:08:07.629] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:05"
[08:08:07.629] | : . '   .. .. ..$ random: int 2147483647
[08:08:07.629] | : . '   ..$ r_info             :List of 4
[08:08:07.629] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:07.629] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:07.629] | : . '   .. ..$ os           : chr "unix"
[08:08:07.629] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:07.629] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:07.629] | : . '   ..$ version            : chr "1.8"
[08:08:07.629] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:07.629] | : . '  $ success: logi TRUE
[08:08:07.629] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0.001 0.004 0 0
[08:08:07.629] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:07.629] | : . '  $ tag    : NULL
[08:08:07.640] | : . ' Received FutureResult
[08:08:07.640] | : . ' FutureResult:
[08:08:07.640] | : . ' value: ‘NULL’
[08:08:07.640] | : . ' visible: TRUE
[08:08:07.640] | : . ' stdout: character
[08:08:07.640] | : . ' conditions: [n = 0] 
[08:08:07.640] | : . ' RNG used: FALSE
[08:08:07.640] | : . ' duration: 0.00300312 secs (started 2025-06-17 08:08:07.518945)
[08:08:07.640] | : . ' version: 1.8
[08:08:07.640] | : . ' FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ...
[08:08:07.641] | : . ' , Removed future from position #1
[08:08:07.641] | : . ' , Number of registered futures: 1
[08:08:07.641] | : . ' FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ... done
[08:08:07.641] | : . ' Erased future from future backend
[08:08:07.641] | : . ' result() for ClusterFuture ...
[08:08:07.641] | : . ' , result already collected: FutureResult
[08:08:07.641] | : . ' result() for ClusterFuture ... done
[08:08:07.641] | : . ' signalConditions() ...
[08:08:07.641] | : . ' , include = ‘immediateCondition’
[08:08:07.642] | : . ' , exclude = 
[08:08:07.642] | : . ' , resignal = FALSE
[08:08:07.642] | : . ' , Number of conditions: 0
[08:08:07.642] | : . ' ,  int 0
[08:08:07.642] | : . ' signalConditions() ... done
[08:08:07.642] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:07.642] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:07.643] | : resolved() for MultisessionFuture (<unnamed-89>) ... done
[08:08:07.643] | : assertFutureResult() ...
[08:08:07.643] | : . Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:07.643] | : . Future uuid: 89
[08:08:07.643] | : . identical; success
[08:08:07.643] | : assertFutureResult() ... done
[08:08:07.643] | : resolved() for MultisessionFuture (<unnamed-90>) ...
[08:08:07.643] | : . Cluster node socket connection: index=4, id=1255
[08:08:07.643] | : . assertValidConnection() ...
[08:08:07.644] | : . ' cluster node index: 1
[08:08:07.644] | : . assertValidConnection() ... done
[08:08:07.654] | : . socketSelect(list(<connection #4 (id=1255)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:07.654] | : resolved() for MultisessionFuture (<unnamed-90>) ... done
[08:08:07.654] | resolved() for list ... done
[08:08:07.655] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE FALSE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:07.655] value() for MultisessionFuture (<unnamed-90>) ...
[08:08:07.656] | result() for ClusterFuture ...
[08:08:07.656] | : assertValidConnection() ...
[08:08:07.656] | : . cluster node index: 1
[08:08:07.656] | : assertValidConnection() ... done
[08:08:07.656] | : receiveMessageFromWorker() for ClusterFuture ...
[08:08:07.656] | : . cluster node index: 1
[08:08:07.669] | : . [1] TRUE
[08:08:07.669] | : . received data:
[08:08:07.669] | : . List of 5
[08:08:07.669] | : .  $ type   : chr "VALUE"
[08:08:07.669] | : .  $ value  :List of 16
[08:08:07.669] | : .   ..$ value              : num 4
[08:08:07.669] | : .   ..$ visible            : logi TRUE
[08:08:07.669] | : .   ..$ stdout             : chr ""
[08:08:07.669] | : .   ..$ conditions         : list()
[08:08:07.669] | : .   ..$ rng                : logi FALSE
[08:08:07.669] | : .   ..$ seed               : NULL
[08:08:07.669] | : .   ..$ misuseGlobalEnv    : NULL
[08:08:07.669] | : .   ..$ misuseConnections  :List of 3
[08:08:07.669] | : .   .. ..$ added   : NULL
[08:08:07.669] | : .   .. ..$ removed : NULL
[08:08:07.669] | : .   .. ..$ replaced: NULL
[08:08:07.669] | : .   ..$ misuseDevices      : NULL
[08:08:07.669] | : .   ..$ misuseDefaultDevice: list()
[08:08:07.669] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:07"
[08:08:07.669] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:07"
[08:08:07.669] | : .   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "90"
[08:08:07.669] | : .   ..$ session_uuid       : chr "47b35ab504ca4447100288bf636d3311"
[08:08:07.669] | : .   .. ..- attr(*, "source")=List of 5
[08:08:07.669] | : .   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:07.669] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:07.669] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:07.669] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:07.669] | : .   .. .. ..$ pid   : int 69070
[08:08:07.669] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:05"
[08:08:07.669] | : .   .. .. ..$ random: int 2147483647
[08:08:07.669] | : .   ..$ r_info             :List of 4
[08:08:07.669] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:07.669] | : .   .. .. ..$ : int [1:3] 4 5 1
[08:08:07.669] | : .   .. ..$ os           : chr "unix"
[08:08:07.669] | : .   .. ..$ os_name      : chr "Linux"
[08:08:07.669] | : .   .. ..$ captures_utf8: logi TRUE
[08:08:07.669] | : .   ..$ version            : chr "1.8"
[08:08:07.669] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:08:07.669] | : .  $ success: logi TRUE
[08:08:07.669] | : .  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:07.669] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:07.669] | : .  $ tag    : NULL
[08:08:07.680] | : . Received FutureResult
[08:08:07.680] | : . FutureResult:
[08:08:07.680] | : . value: ‘numeric’
[08:08:07.680] | : . visible: TRUE
[08:08:07.680] | : . stdout: character
[08:08:07.680] | : . conditions: [n = 0] 
[08:08:07.680] | : . RNG used: FALSE
[08:08:07.680] | : . duration: 0.002846479 secs (started 2025-06-17 08:08:07.665829)
[08:08:07.680] | : . version: 1.8
[08:08:07.680] | : . FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ...
[08:08:07.680] | : . ' Removed future from position #1
[08:08:07.681] | : . ' Number of registered futures: 0
[08:08:07.681] | : . FutureRegistry('workers-d9e73d0afef6bf67fb99f83a39f0a371', action = 'remove', earlySignal = 0) ... done
[08:08:07.681] | : . Erased future from future backend
[08:08:07.681] | : . result() for ClusterFuture ...
[08:08:07.681] | : . ' result already collected: FutureResult
[08:08:07.681] | : . result() for ClusterFuture ... done
[08:08:07.681] | : . signalConditions() ...
[08:08:07.681] | : . ' include = ‘immediateCondition’
[08:08:07.681] | : . ' exclude = 
[08:08:07.681] | : . ' resignal = FALSE
[08:08:07.682] | : . ' Number of conditions: 0
[08:08:07.682] | : . '  int 0
[08:08:07.682] | : . signalConditions() ... done
[08:08:07.682] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:08:07.682] | result() for ClusterFuture ... done
[08:08:07.682] | result() for ClusterFuture ...
[08:08:07.682] | : result already collected: FutureResult
[08:08:07.683] | result() for ClusterFuture ... done
[08:08:07.683] | signalConditions() ...
[08:08:07.683] | : include = ‘immediateCondition’
[08:08:07.683] | : exclude = 
[08:08:07.683] | : resignal = FALSE
[08:08:07.683] | : Number of conditions: 0
[08:08:07.683] | :  int 0
[08:08:07.684] | signalConditions() ... done
[08:08:07.684] | relay stdout ...
[08:08:07.684] | relay stdout ... done
[08:08:07.684] | check for misuse ...
[08:08:07.684] | check for misuse ... done
[08:08:07.684] value() for MultisessionFuture (<unnamed-90>) ... done
[08:08:07.684] value() for listenv ...
[08:08:07.684] | recursive: 0
[08:08:07.685] | reduce: FALSE
[08:08:07.685] | length: 4
[08:08:07.685] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:07.685] | Number of remaining objects: 4
[08:08:07.686] | checking value #1:
[08:08:07.686] | 'obj' is atomic
[08:08:07.686] | signalConditionsASAP(numeric, pos=1) ...
[08:08:07.686] | : nx: 4
[08:08:07.686] | : relay: TRUE
[08:08:07.686] | : stdout: TRUE
[08:08:07.686] | : signal: TRUE
[08:08:07.686] | : resignal: FALSE
[08:08:07.686] | : force: TRUE
[08:08:07.686] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:07.686] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:07.687] | : until=2
[08:08:07.687] | : relaying element #2
[08:08:07.687] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:07.687] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:07.687] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:07.687] | length: 3 (resolved future 1)
[08:08:07.687] value() for listenv ... done
[08:08:07.687] checking value #2:
[08:08:07.687] 'obj' is MultisessionFuture
[08:08:07.688] MultisessionFuture #2
[08:08:07.688] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:07.688] | nx: 4
[08:08:07.688] | relay: TRUE
[08:08:07.688] | stdout: TRUE
[08:08:07.688] | signal: TRUE
[08:08:07.688] | resignal: FALSE
[08:08:07.688] | force: TRUE
[08:08:07.688] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:07.688] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:07.688] | until=2
[08:08:07.689] | relaying element #2
[08:08:07.689] | value() for MultisessionFuture (<unnamed-88>) ...
[08:08:07.689] | : result() for ClusterFuture ...
[08:08:07.689] | : . result already collected: FutureResult
[08:08:07.689] | : result() for ClusterFuture ... done
[08:08:07.689] | : result() for ClusterFuture ...
[08:08:07.689] | : . result already collected: FutureResult
[08:08:07.689] | : result() for ClusterFuture ... done
[08:08:07.689] | : signalConditions() ...
[08:08:07.689] | : . include = ‘immediateCondition’
[08:08:07.690] | : . exclude = 
[08:08:07.690] | : . resignal = FALSE
[08:08:07.690] | : . Number of conditions: 0
[08:08:07.690] | : .  int 0
[08:08:07.690] | : signalConditions() ... done
[08:08:07.690] | : relay stdout ...
[08:08:07.690] | : relay stdout ... done
[08:08:07.691] | : check for misuse ...
[08:08:07.691] | : check for misuse ... done
[08:08:07.691] | value() for MultisessionFuture (<unnamed-88>) ... done
[08:08:07.691] | result() for ClusterFuture ...
[08:08:07.691] | : result already collected: FutureResult
[08:08:07.691] | result() for ClusterFuture ... done
[08:08:07.691] | signalConditions() ...
[08:08:07.691] | : include = ‘immediateCondition’
[08:08:07.691] | : exclude = 
[08:08:07.691] | : resignal = FALSE
[08:08:07.692] | : Number of conditions: 0
[08:08:07.692] | :  int 0
[08:08:07.692] | signalConditions() ... done
[08:08:07.692] | result() for ClusterFuture ...
[08:08:07.692] | : result already collected: FutureResult
[08:08:07.692] | result() for ClusterFuture ... done
[08:08:07.692] | signalConditions() ...
[08:08:07.692] | : include = ‘condition’
[08:08:07.693] | : exclude = ‘error’, ‘immediateCondition’
[08:08:07.693] | : resignal = TRUE
[08:08:07.693] | : Number of conditions: 0
[08:08:07.693] | :  int 0
[08:08:07.693] | signalConditions() ... done
[08:08:07.693] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:07.693] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:07.694] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:07.694] value(<MultisessionFuture>, ...) ...
[08:08:07.694] value(<MultisessionFuture>, ...) ... done
[08:08:07.694] value() for MultisessionFuture (<unnamed-88>) ...
[08:08:07.694] | result() for ClusterFuture ...
[08:08:07.694] | : result already collected: FutureResult
[08:08:07.694] | result() for ClusterFuture ... done
[08:08:07.694] | result() for ClusterFuture ...
[08:08:07.694] | : result already collected: FutureResult
[08:08:07.694] | result() for ClusterFuture ... done
[08:08:07.695] | signalConditions() ...
[08:08:07.695] | : include = ‘immediateCondition’
[08:08:07.695] | : exclude = 
[08:08:07.695] | : resignal = FALSE
[08:08:07.695] | : Number of conditions: 0
[08:08:07.695] | :  int 0
[08:08:07.695] | signalConditions() ... done
[08:08:07.695] | check for misuse ...
[08:08:07.696] | check for misuse ... done
[08:08:07.696] value() for MultisessionFuture (<unnamed-88>) ... done
[08:08:07.696] value: <numeric>
[08:08:07.696] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:07.696] | nx: 4
[08:08:07.696] | relay: TRUE
[08:08:07.696] | stdout: TRUE
[08:08:07.696] | signal: TRUE
[08:08:07.696] | resignal: FALSE
[08:08:07.696] | force: TRUE
[08:08:07.697] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:07.697] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:07.697] | until=3
[08:08:07.697] | relaying element #3
[08:08:07.697] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:07.697] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:07.697] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:07.697] resolve() for MultisessionFuture ...
[08:08:07.697] resolve() for MultisessionFuture ... done
[08:08:07.697] length: 2 (resolved future 2)

[08:08:07.698] checking value #3:
[08:08:07.698] 'obj' is MultisessionFuture
[08:08:07.698] MultisessionFuture #3
[08:08:07.698] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:07.698] | nx: 4
[08:08:07.698] | relay: TRUE
[08:08:07.698] | stdout: TRUE
[08:08:07.698] | signal: TRUE
[08:08:07.698] | resignal: FALSE
[08:08:07.698] | force: TRUE
[08:08:07.699] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:07.699] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:07.699] | until=3
[08:08:07.699] | relaying element #3
[08:08:07.699] | value() for MultisessionFuture (<unnamed-89>) ...
[08:08:07.699] | : result() for ClusterFuture ...
[08:08:07.699] | : . result already collected: FutureResult
[08:08:07.699] | : result() for ClusterFuture ... done
[08:08:07.699] | : result() for ClusterFuture ...
[08:08:07.699] | : . result already collected: FutureResult
[08:08:07.700] | : result() for ClusterFuture ... done
[08:08:07.700] | : signalConditions() ...
[08:08:07.700] | : . include = ‘immediateCondition’
[08:08:07.700] | : . exclude = 
[08:08:07.700] | : . resignal = FALSE
[08:08:07.700] | : . Number of conditions: 0
[08:08:07.700] | : .  int 0
[08:08:07.701] | : signalConditions() ... done
[08:08:07.701] | : relay stdout ...
[08:08:07.701] | : relay stdout ... done
[08:08:07.701] | : check for misuse ...
[08:08:07.701] | : check for misuse ... done
[08:08:07.701] | value() for MultisessionFuture (<unnamed-89>) ... done
[08:08:07.701] | result() for ClusterFuture ...
[08:08:07.701] | : result already collected: FutureResult
[08:08:07.701] | result() for ClusterFuture ... done
[08:08:07.702] | signalConditions() ...
[08:08:07.702] | : include = ‘immediateCondition’
[08:08:07.702] | : exclude = 
[08:08:07.704] | : resignal = FALSE
[08:08:07.704] | : Number of conditions: 0
[08:08:07.704] | :  int 0
[08:08:07.705] | signalConditions() ... done
[08:08:07.705] | result() for ClusterFuture ...
[08:08:07.705] | : result already collected: FutureResult
[08:08:07.705] | result() for ClusterFuture ... done
[08:08:07.705] | signalConditions() ...
[08:08:07.705] | : include = ‘condition’
[08:08:07.705] | : exclude = ‘error’, ‘immediateCondition’
[08:08:07.705] | : resignal = TRUE
[08:08:07.705] | : Number of conditions: 0
[08:08:07.705] | :  int 0
[08:08:07.706] | signalConditions() ... done
[08:08:07.706] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:07.706] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:07.706] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:07.706] value(<MultisessionFuture>, ...) ...
[08:08:07.706] value(<MultisessionFuture>, ...) ... done
[08:08:07.706] value() for MultisessionFuture (<unnamed-89>) ...
[08:08:07.706] | result() for ClusterFuture ...
[08:08:07.707] | : result already collected: FutureResult
[08:08:07.707] | result() for ClusterFuture ... done
[08:08:07.707] | result() for ClusterFuture ...
[08:08:07.707] | : result already collected: FutureResult
[08:08:07.707] | result() for ClusterFuture ... done
[08:08:07.707] | signalConditions() ...
[08:08:07.707] | : include = ‘immediateCondition’
[08:08:07.707] | : exclude = 
[08:08:07.707] | : resignal = FALSE
[08:08:07.707] | : Number of conditions: 0
[08:08:07.707] | :  int 0
[08:08:07.708] | signalConditions() ... done
[08:08:07.708] | check for misuse ...
[08:08:07.708] | check for misuse ... done
[08:08:07.708] value() for MultisessionFuture (<unnamed-89>) ... done
[08:08:07.708] value: <NULL>
[08:08:07.708] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:07.709] | nx: 4
[08:08:07.709] | relay: TRUE
[08:08:07.709] | stdout: TRUE
[08:08:07.709] | signal: TRUE
[08:08:07.709] | resignal: FALSE
[08:08:07.709] | force: TRUE
[08:08:07.709] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:07.709] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:07.709] | until=4
[08:08:07.709] | relaying element #4
[08:08:07.709] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:07.710] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:07.710] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:07.710] resolve() for MultisessionFuture ...
[08:08:07.710] resolve() for MultisessionFuture ... done
[08:08:07.710] length: 1 (resolved future 3)

[08:08:07.710] checking value #4:
[08:08:07.710] 'obj' is atomic
[08:08:07.710] signalConditionsASAP(numeric, pos=4) ...
[08:08:07.710] | nx: 4
[08:08:07.711] | relay: TRUE
[08:08:07.711] | stdout: TRUE
[08:08:07.711] | signal: TRUE
[08:08:07.711] | resignal: FALSE
[08:08:07.711] | force: TRUE
[08:08:07.711] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:07.711] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:07.711] | until=4
[08:08:07.711] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:07.711] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:07.711] signalConditionsASAP(numeric, pos=4) ... done
[08:08:07.712] length: 0 (resolved future 4)

[08:08:07.712] Relaying remaining futures ...
[08:08:07.712] | signalConditionsASAP(NULL, pos=0) ...
[08:08:07.712] | : nx: 4
[08:08:07.712] | : relay: TRUE
[08:08:07.712] | : stdout: TRUE
[08:08:07.712] | : signal: TRUE
[08:08:07.712] | : resignal: FALSE
[08:08:07.712] | : force: TRUE
[08:08:07.712] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:07.713] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:07.713] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:07.713] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:07.713] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:07.713] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
*** futures() - environment ... DONE
Type of object: listenv
Type of future: multicore
[08:08:07.715] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.715] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:07.715] | : all.equal() for FutureStrategyList ...
[08:08:07.715] | : . New stack:
[08:08:07.715] | : . List of 1
[08:08:07.715] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:07.715] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:07.715] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:07.715] | : .   ..- attr(*, "init")= logi TRUE
[08:08:07.715] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.715] | : .     ...)  
[08:08:07.715] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.715] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.715] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:07.715] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:07.718] | : . Old stack:
[08:08:07.718] | : . List of 1
[08:08:07.718] | : .  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:07.718] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:07.718] | : .   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:07.718] | : .   ..- attr(*, "init")= chr "done"
[08:08:07.718] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:07.718] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:07.718] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:07.718] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:07.718] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:08:07.718] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:07.718] | : .   ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675cd4cf80> 
[08:08:07.718] | : .   .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:07.718] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:07.718] | : .   .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:07.718] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:07.721] | : . Not identical
[08:08:07.722] | : . all.equal() for future ...
[08:08:07.722] | : . ' List of 2
[08:08:07.722] | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:07.722] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:07.722] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:07.722] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:07.722] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.722] | : . '     ...)  
[08:08:07.722] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.722] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.722] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:07.722] | : . '  $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:07.722] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:07.722] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:07.722] | : . '   ..- attr(*, "init")= chr "done"
[08:08:07.722] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:07.722] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:07.722] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:07.722] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:07.722] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:08:07.722] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:07.722] | : . '   ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675cd4cf80> 
[08:08:07.722] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:07.722] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:07.722] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:07.727] | : . ' Formals differ
[08:08:07.727] | : . all.equal() for future ... done
[08:08:07.727] | : . Future strategies differ at level 1
[08:08:07.727] | : all.equal() for FutureStrategyList ... done
[08:08:07.727] | : plan(): Setting new future backend stack:
[08:08:07.727] | : List of future strategies:
[08:08:07.727] | : 1. multicore:
[08:08:07.727] | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:07.727] | :    - tweaked: FALSE
[08:08:07.727] | :    - call: plan(strategy)
[08:08:07.728] | : List of 1
[08:08:07.728] | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:07.728] | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:07.728] | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:07.728] | :   ..- attr(*, "init")= logi TRUE
[08:08:07.728] | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.728] | :     ...)  
[08:08:07.728] | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.728] | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.728] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:07.728] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:07.730] | : plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:07.730] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.731] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:08:07.731] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.731] | : . stopWorkers() for MultisessionFutureBackend ...
[08:08:07.731] | : . ' Interrupt active futures ...
[08:08:07.731] | : . ' , Number of futures: 0
[08:08:07.731] | : . ' Interrupt active futures ... done
[08:08:07.732] | : . ' Clear future registry ...
[08:08:07.732] | : . ' Clear future registry ... done
[08:08:07.732] | : . ' Stop cluster workers ...
[08:08:07.732] | : . ' , Stopping existing cluster ...
[08:08:07.732] | : . ' , ; Cluster to shut down:
[08:08:07.732] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:07.744] | : . ' , ; Stopped cluster: ‘c(TRUE, TRUE)’
[08:08:07.791] | : . ' , Stopping existing cluster ... done
[08:08:07.791] | : . ' Stop cluster workers ... done
[08:08:07.792] | : . stopWorkers() for MultisessionFutureBackend ... done
[08:08:07.792] | : . Legacy shutdown of cluster workers ...
[08:08:07.792] | : . ' Stopping existing cluster ...
[08:08:07.792] | : . ' , No pre-existing cluster. Skipping
[08:08:07.792] | : . ' Stopping existing cluster ... done
[08:08:07.792] | : . Legacy shutdown of cluster workers ... done
[08:08:07.792] | : plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:07.792] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:07.792] | : . function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:07.792] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:07.792] | : .  - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:07.792] | : .  - attr(*, "init")= logi TRUE
[08:08:07.792] | : .  - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.792] | : .     ...)  
[08:08:07.792] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.792] | : .  - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.792] | : .  - attr(*, "call")= language plan(strategy)
[08:08:07.795] | : . init: TRUE
[08:08:07.795] | : . makeFutureBackend(<multicore>) ...
[08:08:07.795] | : . ' Backend function: <‘NULL’>
[08:08:07.795] | : . ' Evaluator tweak arguments: [n=0]
[08:08:07.795] | : . '  list()
[08:08:07.795] | : . ' Evaluator formal arguments: [n=3]
[08:08:07.795] | : . '  list()
[08:08:07.796] | : . ' Backend factory arguments: [n=3]
[08:08:07.796] | : . ' Dotted pair list of 3
[08:08:07.796] | : . '  $ workers    : language availableCores(constraints = "multicore")
[08:08:07.796] | : . '  $ gc         : logi FALSE
[08:08:07.796] | : . '  $ earlySignal: logi FALSE
[08:08:07.799] | : . ' Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:07.799] | : . makeFutureBackend(<multicore>) ... done
[08:08:07.799] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:07.799] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.799] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.799] | : plan(): nbrOfWorkers() = 2
[08:08:07.799] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:07.800] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Dimensions: NULL
[08:08:07.800] future(..., label = NULL) ...
[08:08:07.800] | lazy: FALSE
[08:08:07.800] | stdout: TRUE
[08:08:07.800] | conditions: [n=1] ‘condition’
[08:08:07.800] | gc: FALSE
[08:08:07.800] | earlySignal: FALSE
[08:08:07.800] | getGlobalsAndPackages() ...
[08:08:07.800] | : Searching for globals ...
[08:08:07.802] | : . globals found: [0] 
[08:08:07.802] | : Searching for globals ... done
[08:08:07.802] | : globals: [0] <none>
[08:08:07.802] | : packages: [0] <none>
[08:08:07.802] | getGlobalsAndPackages() ... done
[08:08:07.802] | run() for ‘Future’ (<unnamed-91>) ...
[08:08:07.802] | : state: ‘created’
[08:08:07.803] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.803] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.803] | : Using MulticoreFutureBackend ...
[08:08:07.803] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:07.803] | : . Launching futures ...
[08:08:07.803] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:07.803] | : . ' , getFutureData() ...
[08:08:07.803] | : . ' , ; getFutureCore() ...
[08:08:07.803] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:07.804] | : . ' , ; getFutureCore() ... done
[08:08:07.804] | : . ' , ; getFutureCapture() ...
[08:08:07.804] | : . ' , ; getFutureCapture() ... done
[08:08:07.804] | : . ' , ; getFutureContext() ...
[08:08:07.804] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.804] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:07.804] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.804] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:07.804] | : . ' , ; getFutureContext() ... done
[08:08:07.805] | : . ' , getFutureData() ... done
[08:08:07.805] | : . ' , requestCore(..., workers = 2) ...
[08:08:07.805] | : . ' , requestCore(..., workers = 2) ... done
[08:08:07.808] | : . ' , MulticoreFuture started
[08:08:07.808] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:07.808] | : . Launching futures ... done
[08:08:07.809] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:07.809] | : Using MulticoreFutureBackend ... done
[08:08:07.809] | run() for ‘Future’ (<unnamed-91>) ... done
[08:08:07.809] future(..., label = NULL) ... done
[08:08:07.810] future(..., label = NULL) ...
[08:08:07.810] | lazy: FALSE
[08:08:07.810] | stdout: TRUE
[08:08:07.810] | conditions: [n=1] ‘condition’
[08:08:07.810] | gc: FALSE
[08:08:07.810] | earlySignal: FALSE
[08:08:07.811] | getGlobalsAndPackages() ...
[08:08:07.811] | : Searching for globals ...
[08:08:07.811] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.812] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:07.812] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.812] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:07.812] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:07.813] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:07.813] | : . ' , ; ` | New stack:
[08:08:07.813] | : . globals found: [0] 
[08:08:07.813] | : Searching for globals ... done
[08:08:07.814] | : globals: [0] <none>
[08:08:07.814] | : packages: [0] <none>
[08:08:07.814] | getGlobalsAndPackages() ... done
[08:08:07.815] | run() for ‘Future’ (<unnamed-92>) ...
[08:08:07.815] | : state: ‘created’
[08:08:07.815] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.815] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.815] | : Using MulticoreFutureBackend ...
[08:08:07.815] | : . Number of futures since start: 1 (1 created, 1 launched, 0 finished)
[08:08:07.816] | : . Launching futures ...
[08:08:07.816] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:07.816] | : . ' , getFutureData() ...
[08:08:07.816] | : . ' , ; getFutureCore() ...
[08:08:07.816] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:07.817] | : . ' , ; getFutureCore() ... done
[08:08:07.817] | : . ' , ; getFutureCapture() ...
[08:08:07.817] | : . ' , ; getFutureCapture() ... done
[08:08:07.813] | : . ' , ; ` | List of 1
[08:08:07.813] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:07.813] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:07.813] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:07.813] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.813] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.813] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.813] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:07.813] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:07.817] | : . ' , ; getFutureContext() ...
[08:08:07.817] | : . ' , ; ` | Old stack:
[08:08:07.817] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.817] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:07.818] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.818] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:07.818] | : . ' , ; getFutureContext() ... done
[08:08:07.818] | : . ' , getFutureData() ... done
[08:08:07.818] | : . ' , requestCore(..., workers = 2) ...
[08:08:07.819] | : . ' , requestCore(..., workers = 2) ... done
[08:08:07.817] | : . ' , ; ` | List of 1
[08:08:07.817] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:07.817] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:07.817] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:07.817] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:07.817] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.817] | : . ' , ; ` |     ...)  
[08:08:07.817] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.817] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.817] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:07.817] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:07.817] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.817] | : . ' , ; ` |     ...)  
[08:08:07.817] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.817] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:07.822] | : . ' , ; ` | Not identical
[08:08:07.822] | : . ' , MulticoreFuture started
[08:08:07.822] | : . ' , ; ` | all.equal() for future ...
[08:08:07.822] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:07.823] | : . Launching futures ... done
[08:08:07.823] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:07.823] | : Using MulticoreFutureBackend ... done
[08:08:07.824] | run() for ‘Future’ (<unnamed-92>) ... done
[08:08:07.824] future(..., label = NULL) ... done
[08:08:07.825] future(..., label = NULL) ...
[08:08:07.826] | lazy: FALSE
[08:08:07.826] | stdout: TRUE
[08:08:07.826] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.826] | conditions: [n=1] ‘condition’
[08:08:07.826] | gc: FALSE
[08:08:07.826] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:07.827] | earlySignal: FALSE
[08:08:07.827] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.827] | getGlobalsAndPackages() ...
[08:08:07.827] | : Searching for globals ...
[08:08:07.827] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:07.828] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:07.828] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:07.828] | : . ' , ; ` | New stack:
[08:08:07.822] | : . ' , ; ` | : List of 2
[08:08:07.822] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:07.822] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:07.822] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:07.822] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.822] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.822] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.822] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:07.822] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:07.822] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:07.822] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:07.822] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:07.822] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.822] | : . ' , ; ` | :     ...)  
[08:08:07.822] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.822] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.822] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:07.822] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:07.822] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.822] | : . ' , ; ` | :     ...)  
[08:08:07.822] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.831] | : . ' , ; ` | : Formals differ
[08:08:07.831] | : . ' , ; ` | all.equal() for future ... done
[08:08:07.831] | : . ' , ; ` | Future strategies differ at level 1
[08:08:07.832] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:07.832] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:07.832] | : . ' , ; ` List of future strategies:
[08:08:07.832] | : . ' , ; ` 1. sequential:
[08:08:07.832] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:07.832] | : . ' , ; `    - tweaked: FALSE
[08:08:07.832] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:07.828] | : . ' , ; ` | List of 1
[08:08:07.828] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:07.828] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:07.828] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:07.828] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.828] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.828] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.828] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:07.828] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:07.834] | : . ' , ; ` | Old stack:
[08:08:07.835] | : . globals found: [1] ‘{’
[08:08:07.835] | : Searching for globals ... done
[08:08:07.836] | : Resolving globals: FALSE
[08:08:07.836] | : Search for packages associated with the globals ...
[08:08:07.833] | : . ' , ; ` List of 1
[08:08:07.833] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:07.833] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:07.833] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:07.833] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.833] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.833] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.833] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:07.833] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:07.836] | : . Packages associated with globals: [1] ‘base’
[08:08:07.836] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:07.837] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:07.837] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.837] | : . Packages: [1] ‘base’
[08:08:07.837] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:07.837] | : Search for packages associated with the globals ... done
[08:08:07.837] | : Packages after dropping 'base': [0] 
[08:08:07.838] | : globals: [0] 
[08:08:07.838] | : packages: [0] 
[08:08:07.838] | getGlobalsAndPackages() ... done
[08:08:07.839] | run() for ‘Future’ (<unnamed-93>) ...
[08:08:07.839] | : state: ‘created’
[08:08:07.839] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.839] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.840] | : Using MulticoreFutureBackend ...
[08:08:07.840] | : . Number of futures since start: 2 (2 created, 2 launched, 0 finished)
[08:08:07.837] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:07.837] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:07.837] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:07.837] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.837] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.837] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.837] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:07.840] | : . Launching futures ...
[08:08:07.840] | : . ' , ; ` | : init: TRUE
[08:08:07.840] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:07.840] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:07.841] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:07.841] | : . ' , getFutureData() ...
[08:08:07.841] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:07.841] | : . ' , ; getFutureCore() ...
[08:08:07.841] | : . ' , ; ` | : .  list()
[08:08:07.841] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:07.841] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:07.841] | : . ' , ; getFutureCore() ... done
[08:08:07.842] | : . ' , ; getFutureCapture() ...
[08:08:07.841] | : . ' , ; ` | : .  list()
[08:08:07.842] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:07.842] | : . ' , ; getFutureCapture() ... done
[08:08:07.842] | : . ' , ; getFutureContext() ...
[08:08:07.842] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.842] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:07.834] | : . ' , ; ` | List of 1
[08:08:07.834] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:07.834] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:07.834] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:07.834] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:07.834] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.834] | : . ' , ; ` |     ...)  
[08:08:07.834] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.834] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.834] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:07.834] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:07.834] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.834] | : . ' , ; ` |     ...)  
[08:08:07.834] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.834] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:07.843] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.843] | : . ' , ; ` | Not identical
[08:08:07.843] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:07.843] | : . ' , ; ` | all.equal() for future ...
[08:08:07.842] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:07.842] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:07.842] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:07.843] | : . ' , ; getFutureContext() ... done
[08:08:07.843] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:07.844] | : . ' , getFutureData() ... done
[08:08:07.844] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:07.844] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:07.844] | : . ' , requestCore(..., workers = 2) ...
[08:08:07.844] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.844] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:07.844] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:07.845] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:07.845] | : . ' , ; Poll #1 (0): usedCores() = 2, workers = 2
[08:08:07.847] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:07.848] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:07.848] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:07.848] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:07.848] | : . ' , ; ` | : New stack:
[08:08:07.843] | : . ' , ; ` | : List of 2
[08:08:07.843] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:07.843] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:07.843] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:07.843] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.843] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.843] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.843] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:07.843] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:07.843] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:07.843] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:07.843] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:07.843] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.843] | : . ' , ; ` | :     ...)  
[08:08:07.843] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.843] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.843] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:07.843] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:07.843] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.843] | : . ' , ; ` | :     ...)  
[08:08:07.843] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.852] | : . ' , ; ` | : Formals differ
[08:08:07.852] | : . ' , ; ` | all.equal() for future ... done
[08:08:07.852] | : . ' , ; ` | Future strategies differ at level 1
[08:08:07.852] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:07.852] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:07.848] | : . ' , ; ` | : List of 1
[08:08:07.848] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:07.848] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:07.848] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:07.848] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:07.848] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.848] | : . ' , ; ` | :     ...)  
[08:08:07.848] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.848] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.848] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:07.848] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:07.848] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.848] | : . ' , ; ` | :     ...)  
[08:08:07.848] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.848] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:07.853] | : . ' , ; ` | : Old stack:
[08:08:07.853] | : . ' , ; ` List of future strategies:
[08:08:07.853] | : . ' , ; ` 1. sequential:
[08:08:07.853] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:07.853] | : . ' , ; `    - tweaked: FALSE
[08:08:07.853] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:07.853] | : . ' , ; ` List of 1
[08:08:07.853] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:07.853] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:07.853] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:07.853] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.853] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.853] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.853] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:07.853] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:07.857] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:07.853] | : . ' , ; ` | : List of 1
[08:08:07.853] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:07.853] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:07.853] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:07.853] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.853] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.853] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.853] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:07.853] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bfe5460> 
[08:08:07.853] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.853] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.853] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:07.857] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:07.857] | : . ' , ; ` | : Not identical
[08:08:07.858] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.858] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:07.858] | : . ' , ; ` | : all.equal() for future ...
[08:08:07.858] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:07.858] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:07.858] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:07.858] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.858] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.858] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.858] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:07.861] | : . ' , ; ` | : init: TRUE
[08:08:07.861] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:07.861] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:07.861] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:07.861] | : . ' , ; ` | : .  list()
[08:08:07.862] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:07.862] | : . ' , ; ` | : .  list()
[08:08:07.862] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:07.862] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:07.862] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:07.862] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:07.864] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:07.864] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:07.864] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:07.865] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.865] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:07.865] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:07.865] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:07.865] | : . ' , ; readImmediateCondition() ...
[08:08:07.858] | : . ' , ; ` | : . List of 2
[08:08:07.858] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:07.858] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:07.858] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:07.858] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:07.858] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.858] | : . ' , ; ` | : .     ...)  
[08:08:07.858] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.858] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.858] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:07.858] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:07.858] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.858] | : . ' , ; ` | : .     ...)  
[08:08:07.858] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.858] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:07.858] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:07.858] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:07.858] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.858] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.858] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.858] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:07.858] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bfe5460> 
[08:08:07.858] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.858] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.866] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:07.866] | : . ' , ; ` Number of RDS files: 0
[08:08:07.866] | : . ' , ; ` Returned conditions set:
[08:08:07.866] | : . ' , ; ` | : . Formals differ
[08:08:07.866] | : . ' , ; ` | : all.equal() for future ... done
[08:08:07.867] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:07.867] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:07.866] | : . ' , ; `  list()
[08:08:07.867] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:07.867] | : . ' , ; readImmediateCondition() ... done
[08:08:07.867] | : . ' , ; ` | List of future strategies:
[08:08:07.867] | : . ' , ; ` | 1. multicore:
[08:08:07.867] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:07.867] | : . ' , ; ` |    - tweaked: FALSE
[08:08:07.867] | : . ' , ; ` |    - call: plan(strategy)
[08:08:07.869] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:07.869] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:07.869] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:07.869] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:07.869] | : . ' , ; ` | : New stack:
[08:08:07.868] | : . ' , ; ` | List of 1
[08:08:07.868] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:07.868] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:07.868] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:07.868] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:07.868] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.868] | : . ' , ; ` |     ...)  
[08:08:07.868] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.868] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.868] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:07.868] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:07.868] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.868] | : . ' , ; ` |     ...)  
[08:08:07.868] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.868] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:07.872] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:07.872] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:07.872] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.873] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.873] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:07.873] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:07.873] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:07.873] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:07.869] | : . ' , ; ` | : List of 1
[08:08:07.869] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:07.869] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:07.869] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:07.869] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:07.869] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.869] | : . ' , ; ` | :     ...)  
[08:08:07.869] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.869] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.869] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:07.869] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:07.869] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.869] | : . ' , ; ` | :     ...)  
[08:08:07.869] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.869] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:07.874] | : . ' , ; ` | : Old stack:
[08:08:07.877] | : . ' , ; readImmediateCondition() ...
[08:08:07.878] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:07.878] | : . ' , ; ` Number of RDS files: 0
[08:08:07.878] | : . ' , ; ` Returned conditions set:
[08:08:07.878] | : . ' , ; `  list()
[08:08:07.879] | : . ' , ; readImmediateCondition() ... done
[08:08:07.874] | : . ' , ; ` | : List of 1
[08:08:07.874] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:07.874] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:07.874] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:07.874] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.874] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.874] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.874] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:07.874] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c625950> 
[08:08:07.874] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.874] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.874] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:07.880] | : . ' , ; Poll #2 (0.04 secs): usedCores() = 2, workers = 2
[08:08:07.880] | : . ' , ; ` | : Not identical
[08:08:07.880] | : . ' , ; ` | : all.equal() for future ...
[08:08:07.880] | : . ' , ; ` | : . List of 2
[08:08:07.880] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:07.880] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:07.880] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:07.880] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:07.880] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.880] | : . ' , ; ` | : .     ...)  
[08:08:07.880] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.880] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.880] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:07.880] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:07.880] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.880] | : . ' , ; ` | : .     ...)  
[08:08:07.880] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.880] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:07.880] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:07.880] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:07.880] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.880] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.880] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.880] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:07.880] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c625950> 
[08:08:07.880] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.880] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.889] | : . ' , ; ` | : . Formals differ
[08:08:07.889] | : . ' , ; ` | : all.equal() for future ... done
[08:08:07.889] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:07.889] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:07.889] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:07.889] | : . ' , ; ` | List of future strategies:
[08:08:07.889] | : . ' , ; ` | 1. multicore:
[08:08:07.889] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:07.889] | : . ' , ; ` |    - tweaked: FALSE
[08:08:07.889] | : . ' , ; ` |    - call: plan(strategy)
[08:08:07.890] | : . ' , ; readImmediateCondition() ...
[08:08:07.891] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:07.891] | : . ' , ; ` Number of RDS files: 0
[08:08:07.891] | : . ' , ; ` Returned conditions set:
[08:08:07.891] | : . ' , ; `  list()
[08:08:07.892] | : . ' , ; readImmediateCondition() ... done
[08:08:07.892] | : . ' , ; value() for MulticoreFuture (<unnamed-91>) ...
[08:08:07.893] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:07.894] | : . ' , ; ` | readImmediateCondition() ...
[08:08:07.894] | : . ' , ; ` | : Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:07.894] | : . ' , ; ` | : Number of RDS files: 0
[08:08:07.894] | : . ' , ; ` | : Returned conditions set:
[08:08:07.895] | : . ' , ; ` | :  list()
[08:08:07.895] | : . ' , ; ` | readImmediateCondition() ... done
[08:08:07.896] | : . ' , ; ` | result() for MulticoreFuture ...
[08:08:07.896] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:08:07.896] | : . ' , ; ` | signalConditions() ...
[08:08:07.896] | : . ' , ; ` | : include = ‘immediateCondition’
[08:08:07.897] | : . ' , ; ` | : exclude = 
[08:08:07.897] | : . ' , ; ` | : resignal = FALSE
[08:08:07.890] | : . ' , ; ` | List of 1
[08:08:07.890] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:07.890] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:07.890] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:07.890] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:07.890] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.890] | : . ' , ; ` |     ...)  
[08:08:07.890] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.890] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.890] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:07.890] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:07.890] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.890] | : . ' , ; ` |     ...)  
[08:08:07.890] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.890] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:07.897] | : . ' , ; ` | : Number of conditions: 6
[08:08:07.897] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:07.897] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:07.898] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.897] | : . ' , ; ` | :  int 6
[08:08:07.898] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.898] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.898] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.898] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:07.898] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.898] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:07.899] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.899] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:07.899] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.899] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:07.899] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.899] | : . ' , ; ` | signalConditions() ... done
[08:08:07.900] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:07.900] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:07.900] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:07.900] | : . ' , ; ` signalConditions() ...
[08:08:07.900] | : . ' , ; ` | include = ‘immediateCondition’
[08:08:07.900] | : . ' , ; ` | exclude = 
[08:08:07.900] | : . ' , ; ` | resignal = FALSE
[08:08:07.900] | : . ' , ; ` | Number of conditions: 6
[08:08:07.901] | : . ' , ; ` |  int 6
[08:08:07.901] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.901] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.901] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.901] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.902] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.902] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.902] | : . ' , ; ` signalConditions() ... done
[08:08:07.902] | : . ' , ; ` check for misuse ...
[08:08:07.902] | : . ' , ; ` check for misuse ... done
[08:08:07.902] | : . ' , ; value() for MulticoreFuture (<unnamed-91>) ... done
[08:08:07.903] | : . ' , requestCore(..., workers = 2) ... done
[08:08:07.905] | : . ' , MulticoreFuture started
[08:08:07.906] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:07.906] | : . Launching futures ... done
[08:08:07.906] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:07.906] | : Using MulticoreFutureBackend ... done
[08:08:07.906] | run() for ‘Future’ (<unnamed-93>) ... done
[08:08:07.907] future(..., label = NULL) ... done
Classes 'listenv', 'environment' <environment: 0x55675b2916f0> 
[08:08:07.909] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.909] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:07.909] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Classes 'listenv', 'environment' <environment: 0x55675d035bc8> 
[08:08:07.909] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:07.910] resolved() for listenv ...
[08:08:07.910] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:07.910] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:07.910] | : . ' , ; ` | New stack:
[08:08:07.911] | resolved() for list ...
[08:08:07.911] | : Number of elements: 6
[08:08:07.911] | : Number of futures: 6
[08:08:07.912] | : readImmediateCondition() ...
[08:08:07.912] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:07.912] | : . Number of RDS files: 0
[08:08:07.913] | : . Returned conditions set:
[08:08:07.913] | : .  list()
[08:08:07.913] | : readImmediateCondition() ... done
[08:08:07.910] | : . ' , ; ` | List of 1
[08:08:07.910] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:07.910] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:07.910] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:07.910] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.910] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.910] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.910] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:07.910] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:07.914] | : . ' , ; ` | Old stack:
[08:08:07.914] | : . ' , ; ` | List of 1
[08:08:07.914] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:07.914] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:07.914] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:07.914] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:07.914] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.914] | : . ' , ; ` |     ...)  
[08:08:07.914] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.914] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.914] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:07.914] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:07.914] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.914] | : . ' , ; ` |     ...)  
[08:08:07.914] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.914] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:07.919] | : . ' , ; ` | Not identical
[08:08:07.919] | : . ' , ; ` | all.equal() for future ...
[08:08:07.924] | : readImmediateCondition() ...
[08:08:07.924] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:07.924] | : . Number of RDS files: 0
[08:08:07.924] | : . Returned conditions set:
[08:08:07.924] | : .  list()
[08:08:07.924] | : readImmediateCondition() ... done
[08:08:07.925] | resolved() for list ... done
[08:08:07.925] resolved() for listenv ... done
 Named logi [1:6] TRUE TRUE TRUE FALSE TRUE TRUE
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:07.926] value() for listenv ...
[08:08:07.926] | recursive: 0
[08:08:07.919] | : . ' , ; ` | : List of 2
[08:08:07.919] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:07.919] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:07.919] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:07.919] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.919] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.919] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.919] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:07.919] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:07.919] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:07.919] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:07.919] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:07.919] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.919] | : . ' , ; ` | :     ...)  
[08:08:07.919] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.919] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.919] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:07.919] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:07.919] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.919] | : . ' , ; ` | :     ...)  
[08:08:07.919] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.926] | reduce: FALSE
[08:08:07.927] | : . ' , ; ` | : Formals differ
[08:08:07.927] | : . ' , ; ` | all.equal() for future ... done
[08:08:07.927] | : . ' , ; ` | Future strategies differ at level 1
[08:08:07.927] | length: 6
[08:08:07.927] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:07.927] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:07.927] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:07.927] | Number of remaining objects: 6
[08:08:07.928] | checking value #1:
[08:08:07.928] | 'obj' is atomic
[08:08:07.928] | signalConditionsASAP(numeric, pos=1) ...
[08:08:07.928] | : nx: 6
[08:08:07.928] | : relay: TRUE
[08:08:07.928] | : . ' , ; ` List of future strategies:
[08:08:07.928] | : . ' , ; ` 1. sequential:
[08:08:07.928] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:07.928] | : . ' , ; `    - tweaked: FALSE
[08:08:07.928] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:07.928] | : stdout: TRUE
[08:08:07.928] | : signal: TRUE
[08:08:07.928] | : resignal: FALSE
[08:08:07.929] | : force: TRUE
[08:08:07.929] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:07.929] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:07.929] | : until=2
[08:08:07.929] | : relaying element #2
[08:08:07.929] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:07.929] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:07.929] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:07.930] | length: 5 (resolved future 1)
[08:08:07.930] value() for listenv ... done
[08:08:07.930] checking value #2:
[08:08:07.930] 'obj' is MulticoreFuture
[08:08:07.930] MulticoreFuture #2
[08:08:07.930] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:07.930] | nx: 6
[08:08:07.930] | relay: TRUE
[08:08:07.931] | stdout: TRUE
[08:08:07.931] | signal: TRUE
[08:08:07.931] | resignal: FALSE
[08:08:07.931] | force: TRUE
[08:08:07.931] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:07.931] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:07.931] | until=2
[08:08:07.931] | relaying element #2
[08:08:07.932] | value() for MulticoreFuture (<unnamed-91>) ...
[08:08:07.932] | : result() for MulticoreFuture ...
[08:08:07.928] | : . ' , ; ` List of 1
[08:08:07.928] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:07.928] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:07.928] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:07.928] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.928] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.928] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.928] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:07.928] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:07.932] | : result() for MulticoreFuture ... done
[08:08:07.932] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:07.932] | : result() for MulticoreFuture ...
[08:08:07.932] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:07.932] | : result() for MulticoreFuture ... done
[08:08:07.932] | : signalConditions() ...
[08:08:07.932] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.932] | : . include = ‘immediateCondition’
[08:08:07.932] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:07.933] | : . exclude = 
[08:08:07.933] | : . resignal = FALSE
[08:08:07.933] | : . Number of conditions: 6
[08:08:07.933] | : .  int 6
[08:08:07.933] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.934] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.934] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.934] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.934] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.934] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.934] | : signalConditions() ... done
[08:08:07.934] | : relay stdout ...
[08:08:07.935] | : relay stdout ... done
[08:08:07.935] | : check for misuse ...
[08:08:07.935] | : check for misuse ... done
[08:08:07.935] | value() for MulticoreFuture (<unnamed-91>) ... done
[08:08:07.935] | result() for MulticoreFuture ...
[08:08:07.935] | result() for MulticoreFuture ... done
[08:08:07.933] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:07.933] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:07.933] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:07.933] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.933] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.933] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.933] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:07.935] | signalConditions() ...
[08:08:07.935] | : include = ‘immediateCondition’
[08:08:07.935] | : . ' , ; ` | : init: TRUE
[08:08:07.936] | : exclude = 
[08:08:07.936] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:07.936] | : resignal = FALSE
[08:08:07.936] | : Number of conditions: 6
[08:08:07.936] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:07.936] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:07.936] | :  int 6
[08:08:07.936] | : . ' , ; ` | : .  list()
[08:08:07.936] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.936] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:07.936] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.937] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.937] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.937] | : . ' , ; ` | : .  list()
[08:08:07.937] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.937] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:07.937] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.937] | signalConditions() ... done
[08:08:07.937] | result() for MulticoreFuture ...
[08:08:07.937] | result() for MulticoreFuture ... done
[08:08:07.938] | signalConditions() ...
[08:08:07.938] | : include = ‘condition’
[08:08:07.938] | : exclude = ‘error’, ‘immediateCondition’
[08:08:07.938] | : resignal = TRUE
[08:08:07.938] | : Number of conditions: 6
[08:08:07.937] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:07.937] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:07.937] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:07.938] | :  int 6
[08:08:07.939] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.939] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:07.939] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:07.809] | : . ' , attachPackages() ...
[08:08:07.939] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.939] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:07.939] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:07.809] | : . ' , ; packages: [n=1] ‘future’
[08:08:07.939] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:07.939] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.939] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.939] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:07.810] | : . ' , attachPackages() ... done
[08:08:07.940] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:07.940] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.940] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:07.940] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:07.810] | : . ' , attachPackages() ...
[08:08:07.940] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:07.940] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.940] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:07.810] | : . ' , ; packages: [n=0] 
[08:08:07.940] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.940] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:07.810] | : . ' , attachPackages() ... done
[08:08:07.941] | signalConditions() ... done
[08:08:07.941] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:07.941] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:07.941] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:07.941] value(<MulticoreFuture>, ...) ...
[08:08:07.941] value(<MulticoreFuture>, ...) ... done
[08:08:07.941] value() for MulticoreFuture (<unnamed-91>) ...
[08:08:07.941] | result() for MulticoreFuture ...
[08:08:07.941] | result() for MulticoreFuture ... done
[08:08:07.942] | result() for MulticoreFuture ...
[08:08:07.942] | result() for MulticoreFuture ... done
[08:08:07.942] | signalConditions() ...
[08:08:07.942] | : include = ‘immediateCondition’
[08:08:07.942] | : exclude = 
[08:08:07.942] | : resignal = FALSE
[08:08:07.942] | : Number of conditions: 6
[08:08:07.942] | :  int 6
[08:08:07.943] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.943] | : already signaled, skipping
[08:08:07.943] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:07.943] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.943] | : already signaled, skipping
[08:08:07.943] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:07.943] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.943] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:07.944] | : already signaled, skipping
[08:08:07.944] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:07.944] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.944] | : already signaled, skipping
[08:08:07.944] | : . ' , ; ` | : New stack:
[08:08:07.944] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.944] | : already signaled, skipping
[08:08:07.944] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.944] | : already signaled, skipping
[08:08:07.944] | signalConditions() ... done
[08:08:07.945] | check for misuse ...
[08:08:07.945] | check for misuse ... done
[08:08:07.945] value() for MulticoreFuture (<unnamed-91>) ... done
[08:08:07.945] value: <numeric>
[08:08:07.945] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:07.945] | nx: 6
[08:08:07.945] | relay: TRUE
[08:08:07.946] | stdout: TRUE
[08:08:07.946] | signal: TRUE
[08:08:07.946] | resignal: FALSE
[08:08:07.946] | force: TRUE
[08:08:07.946] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:07.946] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:07.946] | until=3
[08:08:07.946] | relaying element #3
[08:08:07.946] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:07.947] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:07.947] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:07.947] resolve() for MulticoreFuture ...
[08:08:07.947] resolve() for MulticoreFuture ... done
[08:08:07.947] length: 4 (resolved future 2)

[08:08:07.947] checking value #3:
[08:08:07.947] 'obj' is MulticoreFuture
[08:08:07.948] readImmediateCondition() ...
[08:08:07.948] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:07.948] | Number of RDS files: 0
[08:08:07.948] | Returned conditions set:
[08:08:07.948] |  list()
[08:08:07.949] readImmediateCondition() ... done
[08:08:07.944] | : . ' , ; ` | : List of 1
[08:08:07.944] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:07.944] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:07.944] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:07.944] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:07.944] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.944] | : . ' , ; ` | :     ...)  
[08:08:07.944] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.944] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.944] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:07.944] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:07.944] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.944] | : . ' , ; ` | :     ...)  
[08:08:07.944] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.944] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:07.949] MulticoreFuture #3
[08:08:07.949] | : . ' , ; ` | : Old stack:
[08:08:07.949] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:07.949] | nx: 6
[08:08:07.949] | relay: TRUE
[08:08:07.949] | stdout: TRUE
[08:08:07.949] | signal: TRUE
[08:08:07.949] | resignal: FALSE
[08:08:07.949] | force: TRUE
[08:08:07.950] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:07.950] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:07.950] | until=3
[08:08:07.950] | relaying element #3
[08:08:07.950] | value() for MulticoreFuture (<unnamed-92>) ...
[08:08:07.950] | : result() for MulticoreFuture ...
[08:08:07.951] | : . readImmediateCondition() ...
[08:08:07.951] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:07.951] | : . ' Number of RDS files: 0
[08:08:07.952] | : . ' Returned conditions set:
[08:08:07.952] | : . '  list()
[08:08:07.952] | : . readImmediateCondition() ... done
[08:08:07.953] | : . result() for MulticoreFuture ...
[08:08:07.953] | : . result() for MulticoreFuture ... done
[08:08:07.949] | : . ' , ; ` | : List of 1
[08:08:07.949] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:07.949] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:07.949] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:07.949] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.949] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.949] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.949] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:07.949] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c0ae498> 
[08:08:07.949] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.949] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.949] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:07.953] | : . signalConditions() ...
[08:08:07.953] | : . ' , ; ` | : Not identical
[08:08:07.953] | : . ' include = ‘immediateCondition’
[08:08:07.954] | : . ' , ; ` | : all.equal() for future ...
[08:08:07.954] | : . ' exclude = 
[08:08:07.954] | : . ' resignal = FALSE
[08:08:07.954] | : . ' Number of conditions: 6
[08:08:07.954] | : . '  int 6
[08:08:07.955] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.955] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.955] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.956] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.956] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.956] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.956] | : . signalConditions() ... done
[08:08:07.956] | : result() for MulticoreFuture ... done
[08:08:07.957] | : result() for MulticoreFuture ...
[08:08:07.957] | : result() for MulticoreFuture ... done
[08:08:07.957] | : signalConditions() ...
[08:08:07.957] | : . include = ‘immediateCondition’
[08:08:07.957] | : . exclude = 
[08:08:07.958] | : . resignal = FALSE
[08:08:07.958] | : . Number of conditions: 6
[08:08:07.958] | : .  int 6
[08:08:07.959] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.959] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.959] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.959] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.959] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.959] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.960] | : signalConditions() ... done
[08:08:07.960] | : relay stdout ...
[08:08:07.960] | : relay stdout ... done
[08:08:07.960] | : check for misuse ...
[08:08:07.960] | : check for misuse ... done
[08:08:07.960] | value() for MulticoreFuture (<unnamed-92>) ... done
[08:08:07.960] | result() for MulticoreFuture ...
[08:08:07.960] | result() for MulticoreFuture ... done
[08:08:07.961] | signalConditions() ...
[08:08:07.961] | : include = ‘immediateCondition’
[08:08:07.961] | : exclude = 
[08:08:07.961] | : resignal = FALSE
[08:08:07.961] | : Number of conditions: 6
[08:08:07.961] | :  int 6
[08:08:07.962] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.962] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.962] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.962] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.962] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.962] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.962] | signalConditions() ... done
[08:08:07.963] | result() for MulticoreFuture ...
[08:08:07.963] | result() for MulticoreFuture ... done
[08:08:07.963] | signalConditions() ...
[08:08:07.963] | : include = ‘condition’
[08:08:07.954] | : . ' , ; ` | : . List of 2
[08:08:07.954] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:07.954] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:07.954] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:07.954] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:07.954] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.954] | : . ' , ; ` | : .     ...)  
[08:08:07.954] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.954] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.954] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:07.954] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:07.954] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.954] | : . ' , ; ` | : .     ...)  
[08:08:07.954] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.954] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:07.954] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:07.954] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:07.954] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.954] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.954] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.954] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:07.954] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c0ae498> 
[08:08:07.954] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:07.954] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:07.963] | : exclude = ‘error’, ‘immediateCondition’
[08:08:07.965] | : . ' , ; ` | : . Formals differ
[08:08:07.965] | : resignal = TRUE
[08:08:07.965] | : . ' , ; ` | : all.equal() for future ... done
[08:08:07.965] | : Number of conditions: 6
[08:08:07.965] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:07.965] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:07.966] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:07.965] | :  int 6
[08:08:07.966] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.966] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:07.823] | : . ' , attachPackages() ...
[08:08:07.966] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.966] | : . ' , ; ` | List of future strategies:
[08:08:07.966] | : . ' , ; ` | 1. multicore:
[08:08:07.966] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:07.966] | : . ' , ; ` |    - tweaked: FALSE
[08:08:07.966] | : . ' , ; ` |    - call: plan(strategy)
[08:08:07.966] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:07.823] | : . ' , ; packages: [n=1] ‘future’
[08:08:07.966] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.966] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:07.824] | : . ' , attachPackages() ... done
[08:08:07.967] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.967] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:07.824] | : . ' , attachPackages() ...
[08:08:07.967] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.967] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:07.825] | : . ' , ; packages: [n=0] 
[08:08:07.967] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.967] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:07.825] | : . ' , attachPackages() ... done
[08:08:07.967] | signalConditions() ... done
[08:08:07.968] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:07.968] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:07.968] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:07.968] value(<MulticoreFuture>, ...) ...
[08:08:07.968] value(<MulticoreFuture>, ...) ... done
[08:08:07.968] value() for MulticoreFuture (<unnamed-92>) ...
[08:08:07.968] | result() for MulticoreFuture ...
[08:08:07.968] | result() for MulticoreFuture ... done
[08:08:07.969] | result() for MulticoreFuture ...
[08:08:07.969] | result() for MulticoreFuture ... done
[08:08:07.969] | signalConditions() ...
[08:08:07.969] | : include = ‘immediateCondition’
[08:08:07.969] | : exclude = 
[08:08:07.969] | : resignal = FALSE
[08:08:07.969] | : Number of conditions: 6
[08:08:07.969] | :  int 6
[08:08:07.970] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.970] | : already signaled, skipping
[08:08:07.970] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.970] | : already signaled, skipping
[08:08:07.970] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.970] | : already signaled, skipping
[08:08:07.971] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.971] | : already signaled, skipping
[08:08:07.966] | : . ' , ; ` | List of 1
[08:08:07.966] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:07.966] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:07.966] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:07.966] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:07.966] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.966] | : . ' , ; ` |     ...)  
[08:08:07.966] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.966] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.966] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:07.966] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:07.966] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:07.966] | : . ' , ; ` |     ...)  
[08:08:07.966] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:07.966] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:07.971] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.971] | : already signaled, skipping
[08:08:07.971] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:07.971] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.971] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:07.971] | : already signaled, skipping
[08:08:07.971] | signalConditions() ... done
[08:08:07.971] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:07.971] | check for misuse ...
[08:08:07.971] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:07.971] | check for misuse ... done
[08:08:07.972] value() for MulticoreFuture (<unnamed-92>) ... done
[08:08:07.972] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:07.972] value: <NULL>
[08:08:07.972] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:07.972] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:07.972] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:07.972] | nx: 6
[08:08:07.972] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:07.972] | relay: TRUE
[08:08:07.972] | stdout: TRUE
[08:08:07.972] | signal: TRUE
[08:08:07.972] | resignal: FALSE
[08:08:07.973] | force: TRUE
[08:08:07.973] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:07.973] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:07.973] | until=4
[08:08:07.973] | relaying element #4
[08:08:07.973] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:07.973] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:07.973] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:07.974] resolve() for MulticoreFuture ...
[08:08:07.974] resolve() for MulticoreFuture ... done
[08:08:07.974] length: 3 (resolved future 3)

[08:08:07.974] checking value #4:
[08:08:07.974] 'obj' is MulticoreFuture
[08:08:07.974] readImmediateCondition() ...
[08:08:07.974] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:07.975] | Number of RDS files: 0
[08:08:07.975] | Returned conditions set:
[08:08:07.975] |  list()
[08:08:07.975] readImmediateCondition() ... done
[08:08:07.975] MulticoreFuture #4
[08:08:07.976] signalConditionsASAP(MulticoreFuture, pos=4) ...
[08:08:07.976] | nx: 6
[08:08:07.976] | relay: TRUE
[08:08:07.976] | stdout: TRUE
[08:08:07.976] | signal: TRUE
[08:08:07.976] | resignal: FALSE
[08:08:07.976] | force: TRUE
[08:08:07.976] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:07.976] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:07.977] | until=4
[08:08:07.977] | relaying element #4
[08:08:07.977] | value() for MulticoreFuture (<unnamed-93>) ...
[08:08:07.977] | : result() for MulticoreFuture ...
[08:08:07.977] | : . readImmediateCondition() ...
[08:08:07.978] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:07.978] | : . ' Number of RDS files: 0
[08:08:07.978] | : . ' Returned conditions set:
[08:08:07.978] | : . '  list()
[08:08:07.979] | : . readImmediateCondition() ... done
[08:08:07.979] | : . result() for MulticoreFuture ...
[08:08:07.979] | : . result() for MulticoreFuture ... done
[08:08:07.979] | : . signalConditions() ...
[08:08:07.979] | : . ' include = ‘immediateCondition’
[08:08:07.980] | : . ' exclude = 
[08:08:07.980] | : . ' resignal = FALSE
[08:08:07.980] | : . ' Number of conditions: 6
[08:08:07.980] | : . '  int 6
[08:08:07.981] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.981] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.981] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.981] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.981] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.981] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.981] | : . signalConditions() ... done
[08:08:07.982] | : result() for MulticoreFuture ... done
[08:08:07.982] | : result() for MulticoreFuture ...
[08:08:07.982] | : result() for MulticoreFuture ... done
[08:08:07.982] | : signalConditions() ...
[08:08:07.982] | : . include = ‘immediateCondition’
[08:08:07.982] | : . exclude = 
[08:08:07.982] | : . resignal = FALSE
[08:08:07.982] | : . Number of conditions: 6
[08:08:07.983] | : .  int 6
[08:08:07.983] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.983] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.983] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.983] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.984] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.984] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.984] | : signalConditions() ... done
[08:08:07.984] | : relay stdout ...
[08:08:07.984] | : relay stdout ... done
[08:08:07.984] | : check for misuse ...
[08:08:07.984] | : check for misuse ... done
[08:08:07.984] | value() for MulticoreFuture (<unnamed-93>) ... done
[08:08:07.985] | result() for MulticoreFuture ...
[08:08:07.985] | result() for MulticoreFuture ... done
[08:08:07.985] | signalConditions() ...
[08:08:07.985] | : include = ‘immediateCondition’
[08:08:07.985] | : exclude = 
[08:08:07.985] | : resignal = FALSE
[08:08:07.985] | : Number of conditions: 6
[08:08:07.985] | :  int 6
[08:08:07.986] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.986] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.986] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.986] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.986] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.987] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.987] | signalConditions() ... done
[08:08:07.987] | result() for MulticoreFuture ...
[08:08:07.987] | result() for MulticoreFuture ... done
[08:08:07.987] | signalConditions() ...
[08:08:07.987] | : include = ‘condition’
[08:08:07.987] | : exclude = ‘error’, ‘immediateCondition’
[08:08:07.987] | : resignal = TRUE
[08:08:07.987] | : Number of conditions: 6
[08:08:07.988] | :  int 6
[08:08:07.988] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.988] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:07.906] | : . ' , attachPackages() ...
[08:08:07.988] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.988] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:07.907] | : . ' , ; packages: [n=1] ‘future’
[08:08:07.989] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.989] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:07.907] | : . ' , attachPackages() ... done
[08:08:07.989] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.989] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:07.907] | : . ' , attachPackages() ...
[08:08:07.989] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.989] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:07.907] | : . ' , ; packages: [n=0] 
[08:08:07.989] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.990] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:07.908] | : . ' , attachPackages() ... done
[08:08:07.990] | signalConditions() ... done
[08:08:07.990] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:07.990] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:07.990] signalConditionsASAP(MulticoreFuture, pos=4) ... done
[08:08:07.990] value(<MulticoreFuture>, ...) ...
[08:08:07.990] value(<MulticoreFuture>, ...) ... done
[08:08:07.990] value() for MulticoreFuture (<unnamed-93>) ...
[08:08:07.991] | result() for MulticoreFuture ...
[08:08:07.991] | result() for MulticoreFuture ... done
[08:08:07.991] | result() for MulticoreFuture ...
[08:08:07.991] | result() for MulticoreFuture ... done
[08:08:07.991] | signalConditions() ...
[08:08:07.991] | : include = ‘immediateCondition’
[08:08:07.991] | : exclude = 
[08:08:07.991] | : resignal = FALSE
[08:08:07.992] | : Number of conditions: 6
[08:08:07.992] | :  int 6
[08:08:07.992] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.992] | : already signaled, skipping
[08:08:07.992] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.992] | : already signaled, skipping
[08:08:07.993] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.993] | : already signaled, skipping
[08:08:07.993] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.993] | : already signaled, skipping
[08:08:07.993] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.993] | : already signaled, skipping
[08:08:07.993] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:07.993] | : already signaled, skipping
[08:08:07.993] | signalConditions() ... done
[08:08:07.994] | check for misuse ...
[08:08:07.994] | check for misuse ... done
[08:08:07.994] value() for MulticoreFuture (<unnamed-93>) ... done
[08:08:07.994] value: <numeric>
[08:08:07.994] signalConditionsASAP(MulticoreFuture, pos=4) ...
[08:08:07.994] | nx: 6
[08:08:07.994] | relay: TRUE
[08:08:07.995] | stdout: TRUE
[08:08:07.995] | signal: TRUE
[08:08:07.995] | resignal: FALSE
[08:08:07.995] | force: TRUE
[08:08:07.995] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:07.995] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:07.995] | until=5
[08:08:07.995] | relaying element #5
[08:08:07.996] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:07.996] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:07.996] signalConditionsASAP(MulticoreFuture, pos=4) ... done
[08:08:07.996] resolve() for MulticoreFuture ...
[08:08:07.996] resolve() for MulticoreFuture ... done
[08:08:07.996] length: 2 (resolved future 4)

[08:08:07.996] checking value #5:
[08:08:07.997] 'obj' is NULL
[08:08:07.997] signalConditionsASAP(NULL, pos=5) ...
[08:08:07.997] | nx: 6
[08:08:07.997] | relay: TRUE
[08:08:07.997] | stdout: TRUE
[08:08:07.997] | signal: TRUE
[08:08:07.997] | resignal: FALSE
[08:08:07.997] | force: TRUE
[08:08:07.997] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:07.998] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:07.998] | until=6
[08:08:07.998] | relaying element #6
[08:08:07.998] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:07.998] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:07.998] signalConditionsASAP(NULL, pos=5) ... done
[08:08:07.998] signalConditionsASAP(NULL, pos=5) ...
[08:08:07.998] | nx: 6
[08:08:07.999] | relay: TRUE
[08:08:07.999] | stdout: TRUE
[08:08:07.999] | signal: TRUE
[08:08:07.999] | resignal: FALSE
[08:08:07.999] | force: TRUE
[08:08:07.999] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:07.999] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:07.999] | until=6
[08:08:07.999] | relaying element #6
[08:08:08.000] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:08.000] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.000] signalConditionsASAP(NULL, pos=5) ... done
[08:08:08.000] length: 1 (resolved future 5)

[08:08:08.000] checking value #6:
[08:08:08.000] 'obj' is atomic
[08:08:08.000] signalConditionsASAP(numeric, pos=6) ...
[08:08:08.000] | nx: 6
[08:08:08.000] | relay: TRUE
[08:08:08.001] | stdout: TRUE
[08:08:08.001] | signal: TRUE
[08:08:08.001] | resignal: FALSE
[08:08:08.001] | force: TRUE
[08:08:08.001] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:08.001] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.001] | until=6
[08:08:08.001] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:08.001] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.002] signalConditionsASAP(numeric, pos=6) ... done
[08:08:08.002] length: 0 (resolved future 6)

[08:08:08.002] Relaying remaining futures ...
[08:08:08.002] | signalConditionsASAP(NULL, pos=0) ...
[08:08:08.002] | : nx: 6
[08:08:08.002] | : relay: TRUE
[08:08:08.002] | : stdout: TRUE
[08:08:08.002] | : signal: TRUE
[08:08:08.003] | : resignal: FALSE
[08:08:08.003] | : force: TRUE
[08:08:08.003] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:08.003] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:08.003] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:08.003] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.003] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:08.003] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
Dimensions: c(1, 6)
[08:08:08.006] future(..., label = NULL) ...
[08:08:08.006] | lazy: FALSE
[08:08:08.006] | stdout: TRUE
[08:08:08.006] | conditions: [n=1] ‘condition’
[08:08:08.007] | gc: FALSE
[08:08:08.007] | earlySignal: FALSE
[08:08:08.007] | getGlobalsAndPackages() ...
[08:08:08.007] | : Searching for globals ...
[08:08:08.008] | : . globals found: [0] 
[08:08:08.008] | : Searching for globals ... done
[08:08:08.009] | : globals: [0] <none>
[08:08:08.009] | : packages: [0] <none>
[08:08:08.009] | getGlobalsAndPackages() ... done
[08:08:08.009] | run() for ‘Future’ (<unnamed-94>) ...
[08:08:08.009] | : state: ‘created’
[08:08:08.009] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.009] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.009] | : Using MulticoreFutureBackend ...
[08:08:08.010] | : . Number of futures since start: 3 (3 created, 3 launched, 4 finished)
[08:08:08.010] | : . Launching futures ...
[08:08:08.010] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:08.010] | : . ' , getFutureData() ...
[08:08:08.010] | : . ' , ; getFutureCore() ...
[08:08:08.010] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:08.010] | : . ' , ; getFutureCore() ... done
[08:08:08.010] | : . ' , ; getFutureCapture() ...
[08:08:08.011] | : . ' , ; getFutureCapture() ... done
[08:08:08.011] | : . ' , ; getFutureContext() ...
[08:08:08.011] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.011] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:08.011] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.011] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:08.011] | : . ' , ; getFutureContext() ... done
[08:08:08.011] | : . ' , getFutureData() ... done
[08:08:08.011] | : . ' , requestCore(..., workers = 2) ...
[08:08:08.012] | : . ' , requestCore(..., workers = 2) ... done
[08:08:08.014] | : . ' , MulticoreFuture started
[08:08:08.015] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:08.015] | : . Launching futures ... done
[08:08:08.015] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:08.016] | : Using MulticoreFutureBackend ... done
[08:08:08.016] | run() for ‘Future’ (<unnamed-94>) ... done
[08:08:08.016] future(..., label = NULL) ... done
[08:08:08.016] future(..., label = NULL) ...
[08:08:08.016] | lazy: FALSE
[08:08:08.017] | stdout: TRUE
[08:08:08.017] | conditions: [n=1] ‘condition’
[08:08:08.017] | gc: FALSE
[08:08:08.017] | earlySignal: FALSE
[08:08:08.017] | getGlobalsAndPackages() ...
[08:08:08.017] | : Searching for globals ...
[08:08:08.018] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.018] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:08.018] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.019] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.019] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:08.019] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:08.019] | : . ' , ; ` | New stack:
[08:08:08.020] | : . globals found: [0] 
[08:08:08.020] | : Searching for globals ... done
[08:08:08.020] | : globals: [0] <none>
[08:08:08.020] | : packages: [0] <none>
[08:08:08.020] | getGlobalsAndPackages() ... done
[08:08:08.021] | run() for ‘Future’ (<unnamed-95>) ...
[08:08:08.021] | : state: ‘created’
[08:08:08.021] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.021] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.021] | : Using MulticoreFutureBackend ...
[08:08:08.022] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:08.022] | : . Launching futures ...
[08:08:08.022] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:08.022] | : . ' , getFutureData() ...
[08:08:08.022] | : . ' , ; getFutureCore() ...
[08:08:08.022] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:08.023] | : . ' , ; getFutureCore() ... done
[08:08:08.023] | : . ' , ; getFutureCapture() ...
[08:08:08.019] | : . ' , ; ` | List of 1
[08:08:08.019] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.019] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.019] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:08.019] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.019] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.019] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.019] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.019] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.023] | : . ' , ; getFutureCapture() ... done
[08:08:08.023] | : . ' , ; ` | Old stack:
[08:08:08.023] | : . ' , ; getFutureContext() ...
[08:08:08.023] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.023] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:08.024] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.024] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:08.024] | : . ' , ; getFutureContext() ... done
[08:08:08.024] | : . ' , getFutureData() ... done
[08:08:08.024] | : . ' , requestCore(..., workers = 2) ...
[08:08:08.025] | : . ' , requestCore(..., workers = 2) ... done
[08:08:08.023] | : . ' , ; ` | List of 1
[08:08:08.023] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.023] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.023] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.023] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.023] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.023] | : . ' , ; ` |     ...)  
[08:08:08.023] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.023] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.023] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.023] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.023] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.023] | : . ' , ; ` |     ...)  
[08:08:08.023] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.023] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.028] | : . ' , ; ` | Not identical
[08:08:08.028] | : . ' , MulticoreFuture started
[08:08:08.028] | : . ' , ; ` | all.equal() for future ...
[08:08:08.028] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:08.028] | : . Launching futures ... done
[08:08:08.029] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:08.029] | : Using MulticoreFutureBackend ... done
[08:08:08.029] | run() for ‘Future’ (<unnamed-95>) ... done
[08:08:08.030] future(..., label = NULL) ... done
[08:08:08.031] future(..., label = NULL) ...
[08:08:08.031] | lazy: FALSE
[08:08:08.032] | stdout: TRUE
[08:08:08.032] | conditions: [n=1] ‘condition’
[08:08:08.032] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.032] | gc: FALSE
[08:08:08.032] | earlySignal: FALSE
[08:08:08.032] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:08.032] | getGlobalsAndPackages() ...
[08:08:08.033] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.033] | : Searching for globals ...
[08:08:08.033] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.033] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:08.034] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:08.034] | : . ' , ; ` | New stack:
[08:08:08.028] | : . ' , ; ` | : List of 2
[08:08:08.028] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.028] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.028] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:08.028] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.028] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.028] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.028] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.028] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.028] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.028] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.028] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.028] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.028] | : . ' , ; ` | :     ...)  
[08:08:08.028] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.028] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.028] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.028] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.028] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.028] | : . ' , ; ` | :     ...)  
[08:08:08.028] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.036] | : . ' , ; ` | : Formals differ
[08:08:08.036] | : . ' , ; ` | all.equal() for future ... done
[08:08:08.036] | : . ' , ; ` | Future strategies differ at level 1
[08:08:08.037] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:08.037] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:08.037] | : . ' , ; ` List of future strategies:
[08:08:08.037] | : . ' , ; ` 1. sequential:
[08:08:08.037] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:08.037] | : . ' , ; `    - tweaked: FALSE
[08:08:08.037] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.034] | : . ' , ; ` | List of 1
[08:08:08.034] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.034] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.034] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:08.034] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.034] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.034] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.034] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.034] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.040] | : . ' , ; ` | Old stack:
[08:08:08.040] | : . globals found: [1] ‘{’
[08:08:08.041] | : Searching for globals ... done
[08:08:08.041] | : Resolving globals: FALSE
[08:08:08.041] | : Search for packages associated with the globals ...
[08:08:08.042] | : . Packages associated with globals: [1] ‘base’
[08:08:08.038] | : . ' , ; ` List of 1
[08:08:08.038] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.038] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.038] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:08.038] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.038] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.038] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.038] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.038] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.042] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.042] | : . Packages: [1] ‘base’
[08:08:08.042] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.042] | : Search for packages associated with the globals ... done
[08:08:08.042] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.043] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:08.043] | : Packages after dropping 'base': [0] 
[08:08:08.043] | : globals: [0] 
[08:08:08.043] | : packages: [0] 
[08:08:08.043] | getGlobalsAndPackages() ... done
[08:08:08.044] | run() for ‘Future’ (<unnamed-96>) ...
[08:08:08.044] | : state: ‘created’
[08:08:08.044] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.045] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.045] | : Using MulticoreFutureBackend ...
[08:08:08.045] | : . Number of futures since start: 5 (5 created, 5 launched, 4 finished)
[08:08:08.045] | : . Launching futures ...
[08:08:08.043] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.043] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.043] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:08.043] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.043] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.043] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.043] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.046] | : . ' , ; ` | : init: TRUE
[08:08:08.046] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:08.046] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:08.046] | : . ' , getFutureData() ...
[08:08:08.046] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:08.046] | : . ' , ; getFutureCore() ...
[08:08:08.046] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:08.046] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:08.046] | : . ' , ; ` | : .  list()
[08:08:08.046] | : . ' , ; getFutureCore() ... done
[08:08:08.047] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:08.047] | : . ' , ; getFutureCapture() ...
[08:08:08.047] | : . ' , ; getFutureCapture() ... done
[08:08:08.047] | : . ' , ; ` | : .  list()
[08:08:08.047] | : . ' , ; getFutureContext() ...
[08:08:08.040] | : . ' , ; ` | List of 1
[08:08:08.040] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.040] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.040] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.040] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.040] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.040] | : . ' , ; ` |     ...)  
[08:08:08.040] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.040] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.040] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.040] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.040] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.040] | : . ' , ; ` |     ...)  
[08:08:08.040] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.040] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.047] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:08.047] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.047] | : . ' , ; ` | Not identical
[08:08:08.048] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:08.048] | : . ' , ; ` | all.equal() for future ...
[08:08:08.048] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.048] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:08.048] | : . ' , ; getFutureContext() ... done
[08:08:08.049] | : . ' , getFutureData() ... done
[08:08:08.047] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:08.047] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:08.047] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:08.049] | : . ' , requestCore(..., workers = 2) ...
[08:08:08.049] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:08.049] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:08.049] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:08.049] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.050] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:08.050] | : . ' , ; Poll #1 (0): usedCores() = 2, workers = 2
[08:08:08.050] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.050] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.053] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.053] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.054] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:08.054] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:08.054] | : . ' , ; ` | : New stack:
[08:08:08.048] | : . ' , ; ` | : List of 2
[08:08:08.048] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.048] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.048] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:08.048] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.048] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.048] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.048] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.048] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.048] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.048] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.048] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.048] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.048] | : . ' , ; ` | :     ...)  
[08:08:08.048] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.048] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.048] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.048] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.048] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.048] | : . ' , ; ` | :     ...)  
[08:08:08.048] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.056] | : . ' , ; ` | : Formals differ
[08:08:08.056] | : . ' , ; ` | all.equal() for future ... done
[08:08:08.057] | : . ' , ; ` | Future strategies differ at level 1
[08:08:08.057] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:08.057] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:08.057] | : . ' , ; ` List of future strategies:
[08:08:08.057] | : . ' , ; ` 1. sequential:
[08:08:08.057] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:08.057] | : . ' , ; `    - tweaked: FALSE
[08:08:08.057] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.054] | : . ' , ; ` | : List of 1
[08:08:08.054] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.054] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.054] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.054] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.054] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.054] | : . ' , ; ` | :     ...)  
[08:08:08.054] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.054] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.054] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.054] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.054] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.054] | : . ' , ; ` | :     ...)  
[08:08:08.054] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.054] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.059] | : . ' , ; ` | : Old stack:
[08:08:08.058] | : . ' , ; ` List of 1
[08:08:08.058] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.058] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.058] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:08.058] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.058] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.058] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.058] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.058] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.062] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.062] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.062] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.062] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:08.062] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.062] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.062] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:08.062] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.062] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.062] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.062] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.065] | : . ' , ; ` | : init: TRUE
[08:08:08.066] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:08.066] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:08.066] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:08.066] | : . ' , ; ` | : .  list()
[08:08:08.067] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:08.067] | : . ' , ; ` | : .  list()
[08:08:08.059] | : . ' , ; ` | : List of 1
[08:08:08.059] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.059] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.059] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.059] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.059] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.059] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.059] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.059] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c358de8> 
[08:08:08.059] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.059] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.059] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.067] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:08.067] | : . ' , ; ` | : Not identical
[08:08:08.067] | : . ' , ; ` | : all.equal() for future ...
[08:08:08.067] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:08.067] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:08.067] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:08.069] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:08.069] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:08.069] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:08.069] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.070] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:08.070] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.070] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.070] | : . ' , ; readImmediateCondition() ...
[08:08:08.071] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.071] | : . ' , ; ` Number of RDS files: 0
[08:08:08.071] | : . ' , ; ` Returned conditions set:
[08:08:08.071] | : . ' , ; `  list()
[08:08:08.072] | : . ' , ; readImmediateCondition() ... done
[08:08:08.067] | : . ' , ; ` | : . List of 2
[08:08:08.067] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.067] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.067] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.067] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.067] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.067] | : . ' , ; ` | : .     ...)  
[08:08:08.067] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.067] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.067] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:08.067] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.067] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.067] | : . ' , ; ` | : .     ...)  
[08:08:08.067] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.067] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.067] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.067] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.067] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.067] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.067] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.067] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.067] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c358de8> 
[08:08:08.067] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.067] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.076] | : . ' , ; ` | : . Formals differ
[08:08:08.076] | : . ' , ; ` | : all.equal() for future ... done
[08:08:08.076] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:08.076] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:08.076] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:08.076] | : . ' , ; ` | List of future strategies:
[08:08:08.076] | : . ' , ; ` | 1. multicore:
[08:08:08.076] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:08.076] | : . ' , ; ` |    - tweaked: FALSE
[08:08:08.076] | : . ' , ; ` |    - call: plan(strategy)
[08:08:08.077] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.078] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.078] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:08.078] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:08.078] | : . ' , ; ` | : New stack:
[08:08:08.077] | : . ' , ; ` | List of 1
[08:08:08.077] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.077] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.077] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.077] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.077] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.077] | : . ' , ; ` |     ...)  
[08:08:08.077] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.077] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.077] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.077] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.077] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.077] | : . ' , ; ` |     ...)  
[08:08:08.077] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.077] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.082] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.082] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.082] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.082] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.083] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:08.083] | : . ' , ; readImmediateCondition() ...
[08:08:08.083] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.083] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.083] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.083] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.078] | : . ' , ; ` | : List of 1
[08:08:08.078] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.078] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.078] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.078] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.078] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.078] | : . ' , ; ` | :     ...)  
[08:08:08.078] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.078] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.078] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.078] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.078] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.078] | : . ' , ; ` | :     ...)  
[08:08:08.078] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.078] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.083] | : . ' , ; ` Number of RDS files: 0
[08:08:08.083] | : . ' , ; ` | : Old stack:
[08:08:08.083] | : . ' , ; ` Returned conditions set:
[08:08:08.084] | : . ' , ; `  list()
[08:08:08.084] | : . ' , ; readImmediateCondition() ... done
[08:08:08.085] | : . ' , ; Poll #2 (0.04 secs): usedCores() = 2, workers = 2
[08:08:08.083] | : . ' , ; ` | : List of 1
[08:08:08.083] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.083] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.083] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.083] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.083] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.083] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.083] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.083] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b7064f0> 
[08:08:08.083] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.083] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.083] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.089] | : . ' , ; ` | : Not identical
[08:08:08.089] | : . ' , ; ` | : all.equal() for future ...
[08:08:08.096] | : . ' , ; readImmediateCondition() ...
[08:08:08.096] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.096] | : . ' , ; ` Number of RDS files: 0
[08:08:08.096] | : . ' , ; ` Returned conditions set:
[08:08:08.097] | : . ' , ; `  list()
[08:08:08.097] | : . ' , ; readImmediateCondition() ... done
[08:08:08.089] | : . ' , ; ` | : . List of 2
[08:08:08.089] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.089] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.089] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.[08:08:08.097] | : . ' , ; value() for MulticoreFuture (<unnamed-94>) ...
089] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.089] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.089] | : . ' , ; ` | : .     ...)  
[08:08:08.089] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.089] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.089] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:08.089] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.089] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.089] | : . ' , ; ` | : .     ...)  
[08:08:08.089] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.089] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.089] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.089] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.089] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.089] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.089] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.089] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.089] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b7064f0> 
[08:08:08.089] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.089] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.098] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:08.098] | : . ' , ; ` | : . Formals differ
[08:08:08.099] | : . ' , ; ` | readImmediateCondition() ...
[08:08:08.099] | : . ' , ; ` | : all.equal() for future ... done
[08:08:08.099] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:08.099] | : . ' , ; ` | : Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.099] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:08.099] | : . ' , ; ` | : Number of RDS files: 0
[08:08:08.099] | : . ' , ; ` | : Returned conditions set:
[08:08:08.099] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:08.100] | : . ' , ; ` | :  list()
[08:08:08.100] | : . ' , ; ` | readImmediateCondition() ... done
[08:08:08.100] | : . ' , ; ` | List of future strategies:
[08:08:08.100] | : . ' , ; ` | 1. multicore:
[08:08:08.100] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:08.100] | : . ' , ; ` |    - tweaked: FALSE
[08:08:08.100] | : . ' , ; ` |    - call: plan(strategy)
[08:08:08.101] | : . ' , ; ` | result() for MulticoreFuture ...
[08:08:08.101] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:08:08.101] | : . ' , ; ` | signalConditions() ...
[08:08:08.101] | : . ' , ; ` | : include = ‘immediateCondition’
[08:08:08.101] | : . ' , ; ` | : exclude = 
[08:08:08.102] | : . ' , ; ` | : resignal = FALSE
[08:08:08.102] | : . ' , ; ` | : Number of conditions: 6
[08:08:08.102] | : . ' , ; ` | :  int 6
[08:08:08.103] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.103] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.103] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.104] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.104] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.104] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.104] | : . ' , ; ` | signalConditions() ... done
[08:08:08.105] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:08.105] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:08.105] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:08.105] | : . ' , ; ` signalConditions() ...
[08:08:08.105] | : . ' , ; ` | include = ‘immediateCondition’
[08:08:08.106] | : . ' , ; ` | exclude = 
[08:08:08.106] | : . ' , ; ` | resignal = FALSE
[08:08:08.106] | : . ' , ; ` | Number of conditions: 6
[08:08:08.106] | : . ' , ; ` |  int 6
[08:08:08.107] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.107] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.107] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.100] | : . ' , ; ` | List of 1
[08:08:08.100] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.100] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.100] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.100] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.100] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.100] | : . ' , ; ` |     ...)  
[08:08:08.100] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.100] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.100] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.100] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.100] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.100] | : . ' , ; ` |     ...)  
[08:08:08.100] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.100] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.108] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.108] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.108] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.108] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.108] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.108] | : . ' , ; ` signalConditions() ... done
[08:08:08.108] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.108] | : . ' , ; ` check for misuse ...
[08:08:08.109] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.109] | : . ' , ; ` check for misuse ... done
[08:08:08.109] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:08.109] | : . ' , ; value() for MulticoreFuture (<unnamed-94>) ... done
[08:08:08.109] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.109] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.110] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.110] | : . ' , requestCore(..., workers = 2) ... done
[08:08:08.112] | : . ' , MulticoreFuture started
[08:08:08.113] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:08.113] | : . Launching futures ... done
[08:08:08.113] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:08.113] | : Using MulticoreFutureBackend ... done
[08:08:08.113] | run() for ‘Future’ (<unnamed-96>) ... done
[08:08:08.114] future(..., label = NULL) ... done
Classes 'listenv', 'environment' <environment: 0x55675cfe8948> 
[08:08:08.115] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.116] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:08.116] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.116] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
Classes 'listenv', 'environment' <environment: 0x55675c542918> 
 - attr(*, "dim.")=[08:08:08.117] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:08.117] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:08.117] | : . ' , ; ` | New stack:
 int [1:2] 1 6
 - attr(*, "dimnames.")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
[08:08:08.119] resolved() for listenv ...
[08:08:08.120] | resolved() for matrix ...
[08:08:08.120] | : Number of elements: 6
[08:08:08.120] | : Number of futures: 6
[08:08:08.117] | : . ' , ; ` | List of 1
[08:08:08.117] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.117] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.117] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:08.117] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.117] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.117] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.117] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.117] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.121] | : readImmediateCondition() ...
[08:08:08.121] | : . ' , ; ` | Old stack:
[08:08:08.121] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.121] | : . Number of RDS files: 0
[08:08:08.121] | : . Returned conditions set:
[08:08:08.121] | : .  list()
[08:08:08.122] | : readImmediateCondition() ... done
[08:08:08.121] | : . ' , ; ` | List of 1
[08:08:08.121] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.121] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.121] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.121] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.121] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.121] | : . ' , ; ` |     ...)  
[08:08:08.121] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.121] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.121] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.121] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.121] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.121] | : . ' , ; ` |     ...)  
[08:08:08.121] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.121] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.131] | : . ' , ; ` | Not identical
[08:08:08.131] | : . ' , ; ` | all.equal() for future ...
[08:08:08.132] | : readImmediateCondition() ...
[08:08:08.132] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.133] | : . Number of RDS files: 0
[08:08:08.133] | : . Returned conditions set:
[08:08:08.133] | : .  list()
[08:08:08.133] | : readImmediateCondition() ... done
[08:08:08.136] | resolved() for matrix ... done
[08:08:08.136] resolved() for listenv ... done
 logi [1, 1:6] TRUE TRUE TRUE FALSE TRUE TRUE
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
 - attr(*, "names")=[08:08:08.131] | : . ' , ; ` | : List of 2
[08:08:08.131] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.131] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.131] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:08.131] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.131] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.131] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.131] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.131] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.131] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.131] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.131] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.131] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.131] | : . ' , ; ` | :     ...)  
[08:08:08.131] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.131] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.131] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.131] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.131] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.131] | : . ' , ; ` | :     ...)  
[08:08:08.131] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
 chr [1:6] "a" "b" "c" "d" ...
[08:08:08.138] value() for listenv ...
[08:08:08.138] | recursive: 0
[08:08:08.139] | reduce: FALSE
[08:08:08.139] | : . ' , ; ` | : Formals differ
[08:08:08.139] | : . ' , ; ` | all.equal() for future ... done
[08:08:08.139] | : . ' , ; ` | Future strategies differ at level 1
[08:08:08.139] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:08.139] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:08.140] | length: 6
[08:08:08.140] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:08.139] | : . ' , ; ` List of future strategies:
[08:08:08.139] | : . ' , ; ` 1. sequential:
[08:08:08.139] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:08.139] | : . ' , ; `    - tweaked: FALSE
[08:08:08.139] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.140] | Number of remaining objects: 6
[08:08:08.140] | checking value #1:
[08:08:08.140] | 'obj' is atomic
[08:08:08.140] | signalConditionsASAP(numeric, pos=1) ...
[08:08:08.141] | : nx: 6
[08:08:08.141] | : relay: TRUE
[08:08:08.141] | : stdout: TRUE
[08:08:08.141] | : signal: TRUE
[08:08:08.141] | : resignal: FALSE
[08:08:08.141] | : force: TRUE
[08:08:08.141] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.141] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.141] | : until=2
[08:08:08.142] | : relaying element #2
[08:08:08.142] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.142] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.142] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:08.142] | length: 5 (resolved future 1)
[08:08:08.142] value() for listenv ... done
[08:08:08.142] checking value #2:
[08:08:08.143] 'obj' is MulticoreFuture
[08:08:08.143] MulticoreFuture #2
[08:08:08.143] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:08.143] | nx: 6
[08:08:08.143] | relay: TRUE
[08:08:08.143] | stdout: TRUE
[08:08:08.143] | signal: TRUE
[08:08:08.143] | resignal: FALSE
[08:08:08.143] | force: TRUE
[08:08:08.144] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.144] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.140] | : . ' , ; ` List of 1
[08:08:08.140] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.140] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.140] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:08.140] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.140] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.140] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.140] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.140] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.144] | until=2
[08:08:08.144] | relaying element #2
[08:08:08.144] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.144] | value() for MulticoreFuture (<unnamed-94>) ...
[08:08:08.144] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.144] | : result() for MulticoreFuture ...
[08:08:08.144] | : result() for MulticoreFuture ... done
[08:08:08.144] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.145] | : result() for MulticoreFuture ...
[08:08:08.145] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:08.145] | : result() for MulticoreFuture ... done
[08:08:08.145] | : signalConditions() ...
[08:08:08.145] | : . include = ‘immediateCondition’
[08:08:08.145] | : . exclude = 
[08:08:08.145] | : . resignal = FALSE
[08:08:08.145] | : . Number of conditions: 6
[08:08:08.145] | : .  int 6
[08:08:08.146] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.146] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.146] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.146] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.146] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.147] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.147] | : signalConditions() ... done
[08:08:08.147] | : relay stdout ...
[08:08:08.147] | : relay stdout ... done
[08:08:08.147] | : check for misuse ...
[08:08:08.147] | : check for misuse ... done
[08:08:08.147] | value() for MulticoreFuture (<unnamed-94>) ... done
[08:08:08.145] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.145] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.145] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:08.145] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.145] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.145] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.145] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.147] | result() for MulticoreFuture ...
[08:08:08.148] | result() for MulticoreFuture ... done
[08:08:08.148] | : . ' , ; ` | : init: TRUE
[08:08:08.148] | signalConditions() ...
[08:08:08.148] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:08.148] | : include = ‘immediateCondition’
[08:08:08.148] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:08.148] | : exclude = 
[08:08:08.148] | : resignal = FALSE
[08:08:08.148] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:08.148] | : Number of conditions: 6
[08:08:08.148] | : . ' , ; ` | : .  list()
[08:08:08.149] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:08.148] | :  int 6
[08:08:08.149] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.149] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.149] | : . ' , ; ` | : .  list()
[08:08:08.149] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.149] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:08.149] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.149] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.149] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.150] | signalConditions() ... done
[08:08:08.150] | result() for MulticoreFuture ...
[08:08:08.150] | result() for MulticoreFuture ... done
[08:08:08.150] | signalConditions() ...
[08:08:08.150] | : include = ‘condition’
[08:08:08.150] | : exclude = ‘error’, ‘immediateCondition’
[08:08:08.150] | : resignal = TRUE
[08:08:08.150] | : Number of conditions: 6
[08:08:08.149] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:08.149] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:08.149] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:08.150] | :  int 6
[08:08:08.151] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.151] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:08.151] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.015] | : . ' , attachPackages() ...
[08:08:08.151] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:08.151] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.151] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:08.151] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.016] | : . ' , ; packages: [n=1] ‘future’
[08:08:08.151] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.152] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.152] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.152] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:08.016] | : . ' , attachPackages() ... done
[08:08:08.152] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.152] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.152] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.152] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.017] | : . ' , attachPackages() ...
[08:08:08.152] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.152] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.017] | : . ' , ; packages: [n=0] 
[08:08:08.152] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.153] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.017] | : . ' , attachPackages() ... done
[08:08:08.153] | signalConditions() ... done
[08:08:08.153] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.153] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.153] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:08.153] value(<MulticoreFuture>, ...) ...
[08:08:08.153] value(<MulticoreFuture>, ...) ... done
[08:08:08.153] value() for MulticoreFuture (<unnamed-94>) ...
[08:08:08.154] | result() for MulticoreFuture ...
[08:08:08.154] | result() for MulticoreFuture ... done
[08:08:08.154] | result() for MulticoreFuture ...
[08:08:08.154] | result() for MulticoreFuture ... done
[08:08:08.154] | signalConditions() ...
[08:08:08.154] | : include = ‘immediateCondition’
[08:08:08.154] | : exclude = 
[08:08:08.154] | : resignal = FALSE
[08:08:08.155] | : Number of conditions: 6
[08:08:08.155] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.155] | :  int 6
[08:08:08.155] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.155] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.155] | : already signaled, skipping
[08:08:08.155] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:08.155] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.156] | : already signaled, skipping
[08:08:08.156] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:08.156] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.156] | : . ' , ; ` | : New stack:
[08:08:08.156] | : already signaled, skipping
[08:08:08.156] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.156] | : already signaled, skipping
[08:08:08.156] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.156] | : already signaled, skipping
[08:08:08.156] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.157] | : already signaled, skipping
[08:08:08.157] | signalConditions() ... done
[08:08:08.157] | check for misuse ...
[08:08:08.157] | check for misuse ... done
[08:08:08.157] value() for MulticoreFuture (<unnamed-94>) ... done
[08:08:08.157] value: <numeric>
[08:08:08.157] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:08.158] | nx: 6
[08:08:08.158] | relay: TRUE
[08:08:08.158] | stdout: TRUE
[08:08:08.158] | signal: TRUE
[08:08:08.158] | resignal: FALSE
[08:08:08.158] | force: TRUE
[08:08:08.158] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.158] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.158] | until=3
[08:08:08.159] | relaying element #3
[08:08:08.159] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.159] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.159] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:08.159] resolve() for MulticoreFuture ...
[08:08:08.159] resolve() for MulticoreFuture ... done
[08:08:08.159] length: 4 (resolved future 2)

[08:08:08.160] checking value #3:
[08:08:08.160] 'obj' is MulticoreFuture
[08:08:08.160] readImmediateCondition() ...
[08:08:08.160] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.160] | Number of RDS files: 0
[08:08:08.160] | Returned conditions set:
[08:08:08.156] | : . ' , ; ` | : List of 1
[08:08:08.156] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.156] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.156] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.156] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.156] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.156] | : . ' , ; ` | :     ...)  
[08:08:08.156] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.156] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.156] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.156] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.156] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.156] | : . ' , ; ` | :     ...)  
[08:08:08.156] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.156] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.161] | : . ' , ; ` | : Old stack:
[08:08:08.160] |  list()
[08:08:08.161] readImmediateCondition() ... done
[08:08:08.161] MulticoreFuture #3
[08:08:08.161] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:08.161] | nx: 6
[08:08:08.161] | relay: TRUE
[08:08:08.161] | stdout: TRUE
[08:08:08.162] | signal: TRUE
[08:08:08.162] | resignal: FALSE
[08:08:08.162] | force: TRUE
[08:08:08.162] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.162] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.162] | until=3
[08:08:08.162] | relaying element #3
[08:08:08.163] | value() for MulticoreFuture (<unnamed-95>) ...
[08:08:08.163] | : result() for MulticoreFuture ...
[08:08:08.163] | : . readImmediateCondition() ...
[08:08:08.164] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.164] | : . ' Number of RDS files: 0
[08:08:08.164] | : . ' Returned conditions set:
[08:08:08.164] | : . '  list()
[08:08:08.165] | : . readImmediateCondition() ... done
[08:08:08.165] | : . result() for MulticoreFuture ...
[08:08:08.166] | : . result() for MulticoreFuture ... done
[08:08:08.161] | : . ' , ; ` | : List of 1
[08:08:08.161] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.161] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.161] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.161] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.161] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.161] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.161] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.161] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675a49df08> 
[08:08:08.161] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.161] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.161] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.166] | : . signalConditions() ...
[08:08:08.166] | : . ' , ; ` | : Not identical
[08:08:08.166] | : . ' include = ‘immediateCondition’
[08:08:08.166] | : . ' , ; ` | : all.equal() for future ...
[08:08:08.166] | : . ' exclude = 
[08:08:08.166] | : . ' resignal = FALSE
[08:08:08.166] | : . ' Number of conditions: 6
[08:08:08.167] | : . '  int 6
[08:08:08.167] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.168] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.168] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.168] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.168] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.168] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.168] | : . signalConditions() ... done
[08:08:08.169] | : result() for MulticoreFuture ... done
[08:08:08.169] | : result() for MulticoreFuture ...
[08:08:08.169] | : result() for MulticoreFuture ... done
[08:08:08.169] | : signalConditions() ...
[08:08:08.169] | : . include = ‘immediateCondition’
[08:08:08.170] | : . exclude = 
[08:08:08.170] | : . resignal = FALSE
[08:08:08.170] | : . Number of conditions: 6
[08:08:08.170] | : .  int 6
[08:08:08.171] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.171] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.171] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.171] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.172] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.172] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.172] | : signalConditions() ... done
[08:08:08.172] | : relay stdout ...
[08:08:08.172] | : relay stdout ... done
[08:08:08.172] | : check for misuse ...
[08:08:08.173] | : check for misuse ... done
[08:08:08.173] | value() for MulticoreFuture (<unnamed-95>) ... done
[08:08:08.173] | result() for MulticoreFuture ...
[08:08:08.173] | result() for MulticoreFuture ... done
[08:08:08.173] | signalConditions() ...
[08:08:08.173] | : include = ‘immediateCondition’
[08:08:08.166] | : . ' , ; ` | : . List of 2
[08:08:08.166] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.166] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame()) [08:08:08.173] | : exclude = 
 
[08:08:08.166] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.166] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.166] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.166] | : . ' , ; ` | : .     ...)  
[08:08:08.166] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.166] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.166] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:08.166] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.166] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.166] | : . ' , ; ` | : .     ...)  
[08:08:08.166] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.166] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.166] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.166] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.166] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.166] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.166] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.166] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.166] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675a49df08> 
[08:08:08.166] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.166] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.173] | : resignal = FALSE
[08:08:08.174] | : Number of conditions: 6
[08:08:08.174] | : . ' , ; ` | : . Formals differ
[08:08:08.174] | :  int 6
[08:08:08.174] | : . ' , ; ` | : all.equal() for future ... done
[08:08:08.174] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.174] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:08.174] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.174] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:08.174] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.175] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:08.175] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.175] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.175] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.175] | signalConditions() ... done
[08:08:08.175] | : . ' , ; ` | List of future strategies:
[08:08:08.175] | : . ' , ; ` | 1. multicore:
[08:08:08.175] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:08.175] | : . ' , ; ` |    - tweaked: FALSE
[08:08:08.175] | : . ' , ; ` |    - call: plan(strategy)
[08:08:08.175] | result() for MulticoreFuture ...
[08:08:08.175] | result() for MulticoreFuture ... done
[08:08:08.175] | signalConditions() ...
[08:08:08.175] | : include = ‘condition’
[08:08:08.176] | : exclude = ‘error’, ‘immediateCondition’
[08:08:08.176] | : resignal = TRUE
[08:08:08.176] | : Number of conditions: 6
[08:08:08.176] | :  int 6
[08:08:08.176] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.176] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.029] | : . ' , attachPackages() ...
[08:08:08.177] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.177] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.029] | : . ' , ; packages: [n=1] ‘future’
[08:08:08.177] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.177] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.030] | : . ' , attachPackages() ... done
[08:08:08.177] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.177] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.030] | : . ' , attachPackages() ...
[08:08:08.178] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.178] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.030] | : . ' , ; packages: [n=0] 
[08:08:08.178] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.178] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.031] | : . ' , attachPackages() ... done
[08:08:08.178] | signalConditions() ... done
[08:08:08.178] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.179] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.179] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:08.179] value(<MulticoreFuture>, ...) ...
[08:08:08.179] value(<MulticoreFuture>, ...) ... done
[08:08:08.179] value() for MulticoreFuture (<unnamed-95>) ...
[08:08:08.179] | result() for MulticoreFuture ...
[08:08:08.179] | result() for MulticoreFuture ... done
[08:08:08.175] | : . ' , ; ` | List of 1
[08:08:08.175] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.175] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.175] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.175] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.175] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.175] | : . ' , ; ` |     ...)  
[08:08:08.175] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.175] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.175] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.175] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.175] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.175] | : . ' , ; ` |     ...)  
[08:08:08.175] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.175] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.179] | result() for MulticoreFuture ...
[08:08:08.179] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.179] | result() for MulticoreFuture ... done
[08:08:08.180] | signalConditions() ...
[08:08:08.180] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.180] | : include = ‘immediateCondition’
[08:08:08.180] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.180] | : exclude = 
[08:08:08.180] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.180] | : resignal = FALSE
[08:08:08.180] | : Number of conditions: 6
[08:08:08.180] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:08.180] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.180] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.180] | :  int 6
[08:08:08.181] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.181] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.181] | : already signaled, skipping
[08:08:08.181] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.181] | : already signaled, skipping
[08:08:08.181] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.181] | : already signaled, skipping
[08:08:08.181] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.182] | : already signaled, skipping
[08:08:08.182] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.182] | : already signaled, skipping
[08:08:08.182] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.182] | : already signaled, skipping
[08:08:08.182] | signalConditions() ... done
[08:08:08.182] | check for misuse ...
[08:08:08.182] | check for misuse ... done
[08:08:08.183] value() for MulticoreFuture (<unnamed-95>) ... done
[08:08:08.183] value: <NULL>
[08:08:08.183] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:08.183] | nx: 6
[08:08:08.183] | relay: TRUE
[08:08:08.183] | stdout: TRUE
[08:08:08.183] | signal: TRUE
[08:08:08.183] | resignal: FALSE
[08:08:08.184] | force: TRUE
[08:08:08.184] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.184] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.184] | until=4
[08:08:08.184] | relaying element #4
[08:08:08.184] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.184] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.184] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:08.184] resolve() for MulticoreFuture ...
[08:08:08.185] resolve() for MulticoreFuture ... done
[08:08:08.185] length: 3 (resolved future 3)

[08:08:08.185] checking value #4:
[08:08:08.185] 'obj' is MulticoreFuture
[08:08:08.185] readImmediateCondition() ...
[08:08:08.185] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.186] | Number of RDS files: 0
[08:08:08.186] | Returned conditions set:
[08:08:08.186] |  list()
[08:08:08.186] readImmediateCondition() ... done
[08:08:08.186] MulticoreFuture #4
[08:08:08.186] signalConditionsASAP(MulticoreFuture, pos=4) ...
[08:08:08.187] | nx: 6
[08:08:08.187] | relay: TRUE
[08:08:08.187] | stdout: TRUE
[08:08:08.187] | signal: TRUE
[08:08:08.187] | resignal: FALSE
[08:08:08.187] | force: TRUE
[08:08:08.187] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.188] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.188] | until=4
[08:08:08.188] | relaying element #4
[08:08:08.188] | value() for MulticoreFuture (<unnamed-96>) ...
[08:08:08.188] | : result() for MulticoreFuture ...
[08:08:08.189] | : . readImmediateCondition() ...
[08:08:08.189] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.189] | : . ' Number of RDS files: 0
[08:08:08.189] | : . ' Returned conditions set:
[08:08:08.189] | : . '  list()
[08:08:08.190] | : . readImmediateCondition() ... done
[08:08:08.190] | : . result() for MulticoreFuture ...
[08:08:08.190] | : . result() for MulticoreFuture ... done
[08:08:08.190] | : . signalConditions() ...
[08:08:08.191] | : . ' include = ‘immediateCondition’
[08:08:08.191] | : . ' exclude = 
[08:08:08.191] | : . ' resignal = FALSE
[08:08:08.191] | : . ' Number of conditions: 6
[08:08:08.191] | : . '  int 6
[08:08:08.192] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.192] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.192] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.192] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.192] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.192] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.192] | : . signalConditions() ... done
[08:08:08.193] | : result() for MulticoreFuture ... done
[08:08:08.193] | : result() for MulticoreFuture ...
[08:08:08.193] | : result() for MulticoreFuture ... done
[08:08:08.193] | : signalConditions() ...
[08:08:08.193] | : . include = ‘immediateCondition’
[08:08:08.193] | : . exclude = 
[08:08:08.193] | : . resignal = FALSE
[08:08:08.193] | : . Number of conditions: 6
[08:08:08.194] | : .  int 6
[08:08:08.194] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.194] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.194] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.194] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.195] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.195] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.195] | : signalConditions() ... done
[08:08:08.195] | : relay stdout ...
[08:08:08.195] | : relay stdout ... done
[08:08:08.195] | : check for misuse ...
[08:08:08.195] | : check for misuse ... done
[08:08:08.195] | value() for MulticoreFuture (<unnamed-96>) ... done
[08:08:08.196] | result() for MulticoreFuture ...
[08:08:08.196] | result() for MulticoreFuture ... done
[08:08:08.196] | signalConditions() ...
[08:08:08.196] | : include = ‘immediateCondition’
[08:08:08.196] | : exclude = 
[08:08:08.196] | : resignal = FALSE
[08:08:08.196] | : Number of conditions: 6
[08:08:08.196] | :  int 6
[08:08:08.197] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.197] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.197] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.197] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.197] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.197] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.198] | signalConditions() ... done
[08:08:08.198] | result() for MulticoreFuture ...
[08:08:08.198] | result() for MulticoreFuture ... done
[08:08:08.198] | signalConditions() ...
[08:08:08.198] | : include = ‘condition’
[08:08:08.198] | : exclude = ‘error’, ‘immediateCondition’
[08:08:08.198] | : resignal = TRUE
[08:08:08.198] | : Number of conditions: 6
[08:08:08.198] | :  int 6
[08:08:08.199] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.199] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.113] | : . ' , attachPackages() ...
[08:08:08.199] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.199] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.113] | : . ' , ; packages: [n=1] ‘future’
[08:08:08.200] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.200] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.114] | : . ' , attachPackages() ... done
[08:08:08.200] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.200] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.114] | : . ' , attachPackages() ...
[08:08:08.200] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.200] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.114] | : . ' , ; packages: [n=0] 
[08:08:08.200] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.200] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.114] | : . ' , attachPackages() ... done
[08:08:08.201] | signalConditions() ... done
[08:08:08.201] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.201] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.201] signalConditionsASAP(MulticoreFuture, pos=4) ... done
[08:08:08.201] value(<MulticoreFuture>, ...) ...
[08:08:08.201] value(<MulticoreFuture>, ...) ... done
[08:08:08.201] value() for MulticoreFuture (<unnamed-96>) ...
[08:08:08.201] | result() for MulticoreFuture ...
[08:08:08.202] | result() for MulticoreFuture ... done
[08:08:08.202] | result() for MulticoreFuture ...
[08:08:08.202] | result() for MulticoreFuture ... done
[08:08:08.202] | signalConditions() ...
[08:08:08.202] | : include = ‘immediateCondition’
[08:08:08.202] | : exclude = 
[08:08:08.202] | : resignal = FALSE
[08:08:08.202] | : Number of conditions: 6
[08:08:08.203] | :  int 6
[08:08:08.203] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.203] | : already signaled, skipping
[08:08:08.203] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.203] | : already signaled, skipping
[08:08:08.203] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.204] | : already signaled, skipping
[08:08:08.204] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.204] | : already signaled, skipping
[08:08:08.204] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.204] | : already signaled, skipping
[08:08:08.204] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.204] | : already signaled, skipping
[08:08:08.204] | signalConditions() ... done
[08:08:08.204] | check for misuse ...
[08:08:08.205] | check for misuse ... done
[08:08:08.205] value() for MulticoreFuture (<unnamed-96>) ... done
[08:08:08.205] value: <numeric>
[08:08:08.205] signalConditionsASAP(MulticoreFuture, pos=4) ...
[08:08:08.205] | nx: 6
[08:08:08.206] | relay: TRUE
[08:08:08.206] | stdout: TRUE
[08:08:08.206] | signal: TRUE
[08:08:08.206] | resignal: FALSE
[08:08:08.207] | force: TRUE
[08:08:08.207] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.207] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.207] | until=5
[08:08:08.207] | relaying element #5
[08:08:08.208] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.208] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.208] signalConditionsASAP(MulticoreFuture, pos=4) ... done
[08:08:08.208] resolve() for MulticoreFuture ...
[08:08:08.209] resolve() for MulticoreFuture ... done
[08:08:08.209] length: 2 (resolved future 4)

[08:08:08.209] checking value #5:
[08:08:08.209] 'obj' is NULL
[08:08:08.210] signalConditionsASAP(NULL, pos=5) ...
[08:08:08.210] | nx: 6
[08:08:08.210] | relay: TRUE
[08:08:08.210] | stdout: TRUE
[08:08:08.210] | signal: TRUE
[08:08:08.211] | resignal: FALSE
[08:08:08.211] | force: TRUE
[08:08:08.211] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.211] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.212] | until=6
[08:08:08.212] | relaying element #6
[08:08:08.212] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:08.212] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.212] signalConditionsASAP(NULL, pos=5) ... done
[08:08:08.213] signalConditionsASAP(NULL, pos=5) ...
[08:08:08.213] | nx: 6
[08:08:08.213] | relay: TRUE
[08:08:08.213] | stdout: TRUE
[08:08:08.214] | signal: TRUE
[08:08:08.214] | resignal: FALSE
[08:08:08.214] | force: TRUE
[08:08:08.214] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:08.214] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.215] | until=6
[08:08:08.215] | relaying element #6
[08:08:08.215] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:08.215] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.216] signalConditionsASAP(NULL, pos=5) ... done
[08:08:08.216] length: 1 (resolved future 5)

[08:08:08.216] checking value #6:
[08:08:08.216] 'obj' is atomic
[08:08:08.217] signalConditionsASAP(numeric, pos=6) ...
[08:08:08.217] | nx: 6
[08:08:08.217] | relay: TRUE
[08:08:08.217] | stdout: TRUE
[08:08:08.218] | signal: TRUE
[08:08:08.218] | resignal: FALSE
[08:08:08.218] | force: TRUE
[08:08:08.218] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:08.218] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.219] | until=6
[08:08:08.219] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:08.219] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.219] signalConditionsASAP(numeric, pos=6) ... done
[08:08:08.220] length: 0 (resolved future 6)

[08:08:08.220] Relaying remaining futures ...
[08:08:08.220] | signalConditionsASAP(NULL, pos=0) ...
[08:08:08.220] | : nx: 6
[08:08:08.221] | : relay: TRUE
[08:08:08.221] | : stdout: TRUE
[08:08:08.221] | : signal: TRUE
[08:08:08.221] | : resignal: FALSE
[08:08:08.222] | : force: TRUE
[08:08:08.222] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:08.222] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:08.222] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:08.223] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.223] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:08.223] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 1 6
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
Dimensions: c(2, 3)
[08:08:08.230] future(..., label = NULL) ...
[08:08:08.230] | lazy: FALSE
[08:08:08.230] | stdout: TRUE
[08:08:08.230] | conditions: [n=1] ‘condition’
[08:08:08.231] | gc: FALSE
[08:08:08.231] | earlySignal: FALSE
[08:08:08.231] | getGlobalsAndPackages() ...
[08:08:08.231] | : Searching for globals ...
[08:08:08.234] | : . globals found: [0] 
[08:08:08.234] | : Searching for globals ... done
[08:08:08.234] | : globals: [0] <none>
[08:08:08.234] | : packages: [0] <none>
[08:08:08.235] | getGlobalsAndPackages() ... done
[08:08:08.235] | run() for ‘Future’ (<unnamed-97>) ...
[08:08:08.235] | : state: ‘created’
[08:08:08.236] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.236] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.236] | : Using MulticoreFutureBackend ...
[08:08:08.236] | : . Number of futures since start: 6 (6 created, 6 launched, 8 finished)
[08:08:08.237] | : . Launching futures ...
[08:08:08.237] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:08.237] | : . ' , getFutureData() ...
[08:08:08.237] | : . ' , ; getFutureCore() ...
[08:08:08.237] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:08.238] | : . ' , ; getFutureCore() ... done
[08:08:08.238] | : . ' , ; getFutureCapture() ...
[08:08:08.238] | : . ' , ; getFutureCapture() ... done
[08:08:08.238] | : . ' , ; getFutureContext() ...
[08:08:08.239] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.242] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:08.242] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.242] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:08.242] | : . ' , ; getFutureContext() ... done
[08:08:08.243] | : . ' , getFutureData() ... done
[08:08:08.243] | : . ' , requestCore(..., workers = 2) ...
[08:08:08.243] | : . ' , requestCore(..., workers = 2) ... done
[08:08:08.247] | : . ' , MulticoreFuture started
[08:08:08.248] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:08.248] | : . Launching futures ... done
[08:08:08.248] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:08.249] | : Using MulticoreFutureBackend ... done
[08:08:08.249] | run() for ‘Future’ (<unnamed-97>) ... done
[08:08:08.249] future(..., label = NULL) ... done
[08:08:08.250] future(..., label = NULL) ...
[08:08:08.250] | lazy: FALSE
[08:08:08.250] | stdout: TRUE
[08:08:08.250] | conditions: [n=1] ‘condition’
[08:08:08.251] | gc: FALSE
[08:08:08.251] | earlySignal: FALSE
[08:08:08.251] | getGlobalsAndPackages() ...
[08:08:08.251] | : Searching for globals ...
[08:08:08.252] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.252] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:08.252] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.253] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.253] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:08.253] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:08.254] | : . ' , ; ` | New stack:
[08:08:08.255] | : . globals found: [0] 
[08:08:08.255] | : Searching for globals ... done
[08:08:08.256] | : globals: [0] <none>
[08:08:08.256] | : packages: [0] <none>
[08:08:08.256] | getGlobalsAndPackages() ... done
[08:08:08.257] | run() for ‘Future’ (<unnamed-98>) ...
[08:08:08.257] | : state: ‘created’
[08:08:08.257] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.258] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.258] | : Using MulticoreFutureBackend ...
[08:08:08.258] | : . Number of futures since start: 7 (7 created, 7 launched, 8 finished)
[08:08:08.258] | : . Launching futures ...
[08:08:08.259] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:08.259] | : . ' , getFutureData() ...
[08:08:08.259] | : . ' , ; getFutureCore() ...
[08:08:08.259] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:08.260] | : . ' , ; getFutureCore() ... done
[08:08:08.260] | : . ' , ; getFutureCapture() ...
[08:08:08.254] | : . ' , ; ` | List of 1
[08:08:08.254] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.254] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.254] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:08.254] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.254] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.254] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.254] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.254] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.260] | : . ' , ; getFutureCapture() ... done
[08:08:08.260] | : . ' , ; ` | Old stack:
[08:08:08.260] | : . ' , ; getFutureContext() ...
[08:08:08.261] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.261] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:08.261] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.261] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:08.262] | : . ' , ; getFutureContext() ... done
[08:08:08.262] | : . ' , getFutureData() ... done
[08:08:08.262] | : . ' , requestCore(..., workers = 2) ...
[08:08:08.263] | : . ' , requestCore(..., workers = 2) ... done
[08:08:08.260] | : . ' , ; ` | List of 1
[08:08:08.260] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.260] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.260] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.260] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.260] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.260] | : . ' , ; ` |     ...)  
[08:08:08.260] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.260] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.260] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.260] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.260] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.260] | : . ' , ; ` |     ...)  
[08:08:08.260] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.260] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.268] | : . ' , ; ` | Not identical
[08:08:08.268] | : . ' , ; ` | all.equal() for future ...
[08:08:08.268] | : . ' , MulticoreFuture started
[08:08:08.268] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:08.269] | : . Launching futures ... done
[08:08:08.269] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:08.269] | : Using MulticoreFutureBackend ... done
[08:08:08.269] | run() for ‘Future’ (<unnamed-98>) ... done
[08:08:08.270] future(..., label = NULL) ... done
[08:08:08.271] future(..., label = NULL) ...
[08:08:08.271] | lazy: FALSE
[08:08:08.272] | stdout: TRUE
[08:08:08.272] | conditions: [n=1] ‘condition’
[08:08:08.272] | gc: FALSE
[08:08:08.272] | earlySignal: FALSE
[08:08:08.273] | getGlobalsAndPackages() ...
[08:08:08.273] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.273] | : Searching for globals ...
[08:08:08.273] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:08.274] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.274] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.275] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:08.275] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:08.275] | : . ' , ; ` | New stack:
[08:08:08.268] | : . ' , ; ` | : List of 2
[08:08:08.268] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.268] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.268] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:08.268] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.268] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.268] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.268] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.268] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.268] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.268] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.268] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.268] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.268] | : . ' , ; ` | :     ...)  
[08:08:08.268] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.268] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.268] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.268] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.268] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.268] | : . ' , ; ` | :     ...)  
[08:08:08.268] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.281] | : . ' , ; ` | : Formals differ
[08:08:08.281] | : . ' , ; ` | all.equal() for future ... done
[08:08:08.281] | : . globals found: [1] ‘{’
[08:08:08.281] | : . ' , ; ` | Future strategies differ at level 1
[08:08:08.281] | : Searching for globals ... done
[08:08:08.281] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:08.282] | : Resolving globals: FALSE
[08:08:08.282] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:08.282] | : Search for packages associated with the globals ...
[08:08:08.282] | : . Packages associated with globals: [1] ‘base’
[08:08:08.275] | : . ' , ; ` | List of 1
[08:08:08.275] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.275] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.275] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:08.275] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.275] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.275] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.275] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.275] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.283] | : . ' , ; ` | Old stack:
[08:08:08.282] | : . ' , ; ` List of future strategies:
[08:08:08.282] | : . ' , ; ` 1. sequential:
[08:08:08.282] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:08.282] | : . ' , ; `    - tweaked: FALSE
[08:08:08.282] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.283] | : . Packages: [1] ‘base’
[08:08:08.283] | : Search for packages associated with the globals ... done
[08:08:08.284] | : Packages after dropping 'base': [0] 
[08:08:08.284] | : globals: [0] 
[08:08:08.284] | : packages: [0] 
[08:08:08.284] | getGlobalsAndPackages() ... done
[08:08:08.285] | run() for ‘Future’ (<unnamed-99>) ...
[08:08:08.285] | : state: ‘created’
[08:08:08.286] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.286] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.286] | : Using MulticoreFutureBackend ...
[08:08:08.287] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:08:08.287] | : . Launching futures ...
[08:08:08.287] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:08.287] | : . ' , getFutureData() ...
[08:08:08.288] | : . ' , ; getFutureCore() ...
[08:08:08.288] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:08.288] | : . ' , ; getFutureCore() ... done
[08:08:08.288] | : . ' , ; getFutureCapture() ...
[08:08:08.289] | : . ' , ; getFutureCapture() ... done
[08:08:08.283] | : . ' , ; ` List of 1
[08:08:08.283] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.283] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.283] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:08.283] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.283] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.283] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.283] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.283] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.289] | : . ' , ; getFutureContext() ...
[08:08:08.289] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.289] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.289] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:08.289] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.290] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.290] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.290] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:08.290] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:08.283] | : . ' , ; ` | List of 1
[08:08:08.283] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.283] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.283] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.283] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.283] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.283] | : . ' , ; ` |     ...)  
[08:08:08.283] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.283] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.283] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.283] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.283] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.283] | : . ' , ; ` |     ...)  
[08:08:08.283] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.283] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.290] | : . ' , ; getFutureContext() ... done
[08:08:08.291] | : . ' , ; ` | Not identical
[08:08:08.291] | : . ' , getFutureData() ... done
[08:08:08.291] | : . ' , ; ` | all.equal() for future ...
[08:08:08.291] | : . ' , requestCore(..., workers = 2) ...
[08:08:08.292] | : . ' , ; Poll #1 (0): usedCores() = 2, workers = 2
[08:08:08.290] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.290] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.290] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:08.290] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.290] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.290] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.290] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.295] | : . ' , ; ` | : init: TRUE
[08:08:08.295] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:08.295] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:08.296] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:08.296] | : . ' , ; ` | : .  list()
[08:08:08.296] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:08.296] | : . ' , ; ` | : .  list()
[08:08:08.297] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:08.297] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:08.297] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:08.297] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:08.300] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:08.300] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:08.300] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:08.300] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.301] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:08.301] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.301] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.291] | : . ' , ; ` | : List of 2
[08:08:08.291] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.291] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.291] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:08.291] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.291] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.291] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.291] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.291] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.291] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.291] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.291] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.291] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.291] | : . ' , ; ` | :     ...)  
[08:08:08.291] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.291] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.291] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.291] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.291] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.291] | : . ' , ; ` | :     ...)  
[08:08:08.291] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.304] | : . ' , ; ` | : Formals differ
[08:08:08.304] | : . ' , ; ` | all.equal() for future ... done
[08:08:08.304] | : . ' , ; ` | Future strategies differ at level 1
[08:08:08.305] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:08.305] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:08.305] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.305] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.305] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:08.305] | : . ' , ; ` List of future strategies:
[08:08:08.305] | : . ' , ; ` 1. sequential:
[08:08:08.305] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:08.305] | : . ' , ; `    - tweaked: FALSE
[08:08:08.305] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.305] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:08.306] | : . ' , ; ` | : New stack:
[08:08:08.306] | : . ' , ; ` List of 1
[08:08:08.306] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.306] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.306] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:08.306] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.306] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.306] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.306] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.306] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.310] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.310] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.310] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.310] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:08.306] | : . ' , ; ` | : List of 1
[08:08:08.306] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.306] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.306] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.306] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.306] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.306] | : . ' , ; ` | :     ...)  
[08:08:08.306] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.306] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.306] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.306] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.306] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.306] | : . ' , ; ` | :     ...)  
[08:08:08.306] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.306] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.310] | : . ' , ; ` | : Old stack:
[08:08:08.313] | : . ' , ; readImmediateCondition() ...
[08:08:08.313] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.314] | : . ' , ; ` Number of RDS files: 0
[08:08:08.314] | : . ' , ; ` Returned conditions set:
[08:08:08.314] | : . ' , ; `  list()
[08:08:08.310] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.310] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.310] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:08.310] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.310] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.310] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.310] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.315] | : . ' , ; readImmediateCondition() ... done
[08:08:08.315] | : . ' , ; ` | : init: TRUE
[08:08:08.315] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:08.315] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:08.316] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:08.311] | : . ' , ; ` | : List of 1
[08:08:08.311] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.311] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.311] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.311] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.311] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.311] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.311] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.311] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759b7c7e0> 
[08:08:08.311] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.311] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.311] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.316] | : . ' , ; ` | : .  list()
[08:08:08.316] | : . ' , ; ` | : Not identical
[08:08:08.316] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:08.317] | : . ' , ; ` | : all.equal() for future ...
[08:08:08.317] | : . ' , ; ` | : .  list()
[08:08:08.317] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:08.317] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:08.317] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:08.317] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:08.319] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:08.320] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:08.320] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:08.320] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.320] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:08.320] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.320] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.323] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.324] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.324] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:08.324] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:08.324] | : . ' , ; ` | : New stack:
[08:08:08.317] | : . ' , ; ` | : . List of 2
[08:08:08.317] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.317] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.317] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.317] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.317] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.317] | : . ' , ; ` | : .     ...)  
[08:08:08.317] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.317] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.317] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:08.317] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.317] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.317] | : . ' , ; ` | : .     ...)  
[08:08:08.317] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.317] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.317] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.317] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.317] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.317] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.317] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.317] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.317] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556759b7c7e0> 
[08:08:08.317] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.317] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.325] | : . ' , ; readImmediateCondition() ...
[08:08:08.325] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.325] | : . ' , ; ` | : . Formals differ
[08:08:08.326] | : . ' , ; ` Number of RDS files: 0
[08:08:08.326] | : . ' , ; ` | : all.equal() for future ... done
[08:08:08.326] | : . ' , ; ` Returned conditions set:
[08:08:08.326] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:08.326] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:08.326] | : . ' , ; `  list()
[08:08:08.326] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:08.327] | : . ' , ; readImmediateCondition() ... done
[08:08:08.327] | : . ' , ; ` | List of future strategies:
[08:08:08.327] | : . ' , ; ` | 1. multicore:
[08:08:08.327] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:08.327] | : . ' , ; ` |    - tweaked: FALSE
[08:08:08.327] | : . ' , ; ` |    - call: plan(strategy)
[08:08:08.327] | : . ' , ; Poll #2 (0.04 secs): usedCores() = 2, workers = 2
[08:08:08.324] | : . ' , ; ` | : List of 1
[08:08:08.324] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.324] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.324] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.324] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.324] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.324] | : . ' , ; ` | :     ...)  
[08:08:08.324] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.324] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.324] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.324] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.324] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.324] | : . ' , ; ` | :     ...)  
[08:08:08.324] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.324] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.329] | : . ' , ; ` | : Old stack:
[08:08:08.327] | : . ' , ; ` | List of 1
[08:08:08.327] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.327] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.327] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.327] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.327] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.327] | : . ' , ; ` |     ...)  
[08:08:08.327] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.327] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.327] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.327] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.327] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.327] | : . ' , ; ` |     ...)  
[08:08:08.327] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.327] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.332] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.333] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.333] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.333] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.333] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:08.333] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.334] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.329] | : . ' , ; ` | : List of 1
[08:08:08.329] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.329] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.329] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.329] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.329] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.329] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.329] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.329] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675ab28fe8> 
[08:08:08.329] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.329] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.329] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.334] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.334] | : . ' , ; ` | : Not identical
[08:08:08.334] | : . ' , ; ` | : all.equal() for future ...
[08:08:08.338] | : . ' , ; readImmediateCondition() ...
[08:08:08.338] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.339] | : . ' , ; ` Number of RDS files: 0
[08:08:08.339] | : . ' , ; ` Returned conditions set:
[08:08:08.339] | : . ' , ; `  list()
[08:08:08.339] | : . ' , ; readImmediateCondition() ... done
[08:08:08.339] | : . ' , ; value() for MulticoreFuture (<unnamed-97>) ...
[08:08:08.340] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:08.340] | : . ' , ; ` | readImmediateCondition() ...
[08:08:08.341] | : . ' , ; ` | : Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.341] | : . ' , ; ` | : Number of RDS files: 0
[08:08:08.341] | : . ' , ; ` | : Returned conditions set:
[08:08:08.341] | : . ' , ; ` | :  list()
[08:08:08.342] | : . ' , ; ` | readImmediateCondition() ... done
[08:08:08.334] | : . ' , ; ` | : . List of 2
[08:08:08.334] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.334] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.334] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.334] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.334] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.334] | : . ' , ; ` | : .     ...)  
[08:08:08.334] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.334] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.334] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:08.334] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.334] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.334] | : . ' , ; ` | : .     ...)  
[08:08:08.334] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.334] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.334] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.334] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.334] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.334] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.334] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.334] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.334] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675ab28fe8> 
[08:08:08.334] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.334] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.342] | : . ' , ; ` | result() for MulticoreFuture ...
[08:08:08.342] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:08:08.343] | : . ' , ; ` | signalConditions() ...
[08:08:08.343] | : . ' , ; ` | : . Formals differ
[08:08:08.343] | : . ' , ; ` | : include = ‘immediateCondition’
[08:08:08.343] | : . ' , ; ` | : all.equal() for future ... done
[08:08:08.343] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:08.343] | : . ' , ; ` | : exclude = 
[08:08:08.343] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:08.343] | : . ' , ; ` | : resignal = FALSE
[08:08:08.343] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:08.343] | : . ' , ; ` | : Number of conditions: 6
[08:08:08.343] | : . ' , ; ` | List of future strategies:
[08:08:08.343] | : . ' , ; ` | 1. multicore:
[08:08:08.343] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:08.343] | : . ' , ; ` |    - tweaked: FALSE
[08:08:08.343] | : . ' , ; ` |    - call: plan(strategy)
[08:08:08.343] | : . ' , ; ` | :  int 6
[08:08:08.344] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.344] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.345] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.345] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.345] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.345] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.345] | : . ' , ; ` | signalConditions() ... done
[08:08:08.346] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:08.346] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:08.346] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:08.346] | : . ' , ; ` signalConditions() ...
[08:08:08.346] | : . ' , ; ` | include = ‘immediateCondition’
[08:08:08.346] | : . ' , ; ` | exclude = 
[08:08:08.347] | : . ' , ; ` | resignal = FALSE
[08:08:08.347] | : . ' , ; ` | Number of conditions: 6
[08:08:08.347] | : . ' , ; ` |  int 6
[08:08:08.348] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.348] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.348] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.348] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.348] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.344] | : . ' , ; ` | List of 1
[08:08:08.344] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.344] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.344] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.344] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.344] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.344] | : . ' , ; ` |     ...)  
[08:08:08.344] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.344] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.344] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.344] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.344] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.344] | : . ' , ; ` |     ...)  
[08:08:08.344] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.344] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.349] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.349] | : . ' , ; ` signalConditions() ... done
[08:08:08.349] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.349] | : . ' , ; ` check for misuse ...
[08:08:08.349] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.349] | : . ' , ; ` check for misuse ... done
[08:08:08.349] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.349] | : . ' , ; value() for MulticoreFuture (<unnamed-97>) ... done
[08:08:08.349] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.350] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:08.350] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.350] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.350] | : . ' , requestCore(..., workers = 2) ... done
[08:08:08.350] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.353] | : . ' , MulticoreFuture started
[08:08:08.353] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:08.353] | : . Launching futures ... done
[08:08:08.353] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:08.354] | : Using MulticoreFutureBackend ... done
[08:08:08.354] | run() for ‘Future’ (<unnamed-99>) ... done
[08:08:08.354] future(..., label = NULL) ... done
Classes 'listenv', 'environment' <environment: 0x55675bf0cef0> 
[08:08:08.356] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.356] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:08.356] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.357] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.357] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
Classes 'listenv', 'environment' <environment: 0x5567584d39a8> 
 - attr(*, "dim.")=[08:08:08.357] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:08.357] | : . ' , ; ` | New stack:
 int [1:2] 2 3
 - attr(*, "dimnames.")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
[08:08:08.359] resolved() for listenv ...
[08:08:08.361] | resolved() for matrix ...
[08:08:08.358] | : . ' , ; ` | List of 1
[08:08:08.358] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.358] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.358] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:08.358] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.358] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.358] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.358] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.358] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.361] | : Number of elements: 6
[08:08:08.361] | : . ' , ; ` | Old stack:
[08:08:08.361] | : Number of futures: 6
[08:08:08.362] | : readImmediateCondition() ...
[08:08:08.362] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.362] | : . Number of RDS files: 0
[08:08:08.362] | : . Returned conditions set:
[08:08:08.363] | : .  list()
[08:08:08.363] | : readImmediateCondition() ... done
[08:08:08.361] | : . ' , ; ` | List of 1
[08:08:08.361] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.361] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.361] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.361] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.361] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.361] | : . ' , ; ` |     ...)  
[08:08:08.361] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.361] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.361] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.361] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.361] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.361] | : . ' , ; ` |     ...)  
[08:08:08.361] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.361] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.367] | : . ' , ; ` | Not identical
[08:08:08.367] | : . ' , ; ` | all.equal() for future ...
[08:08:08.373] | : readImmediateCondition() ...
[08:08:08.373] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.374] | : . Number of RDS files: 0
[08:08:08.374] | : . Returned conditions set:
[08:08:08.374] | : .  list()
[08:08:08.374] | : readImmediateCondition() ... done
[08:08:08.367] | : . ' , ; ` | : List of 2
[08:08:08.367] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.367] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.367] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:08.367] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.367] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.367] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.367] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.367] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.367] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.367] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.367] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.367] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.367] | : . ' , ; ` | :     ...)  
[08:08:08.367] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.367] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.367] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.367] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.367] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.367] | : . ' , ; ` | :     ...)  
[08:08:08.367] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.374] | resolved() for matrix ... done
[08:08:08.375] resolved() for listenv ... done
 logi [1:2, 1:3] TRUE TRUE TRUE FALSE TRUE TRUE
 - attr(*, "dimnames")=List of 2
[08:08:08.375] | : . ' , ; ` | : Formals differ
  ..$ :[08:08:08.375] | : . ' , ; ` | all.equal() for future ... done
[08:08:08.376] | : . ' , ; ` | Future strategies differ at level 1
 chr [1:2] "a" "b"
  ..$ :[08:08:08.376] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:08.376] | : . ' , ; ` plan(): Setting new future backend stack:
 chr [1:3] "a" "b" "c"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:08.376] value() for listenv ...
[08:08:08.376] | : . ' , ; ` List of future strategies:
[08:08:08.376] | : . ' , ; ` 1. sequential:
[08:08:08.376] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:08.376] | : . ' , ; `    - tweaked: FALSE
[08:08:08.376] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.377] | recursive: 0
[08:08:08.377] | reduce: FALSE
[08:08:08.378] | length: 6
[08:08:08.378] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:08.378] | Number of remaining objects: 6
[08:08:08.378] | checking value #1:
[08:08:08.379] | 'obj' is atomic
[08:08:08.379] | signalConditionsASAP(numeric, pos=1) ...
[08:08:08.379] | : nx: 6
[08:08:08.379] | : relay: TRUE
[08:08:08.379] | : stdout: TRUE
[08:08:08.379] | : signal: TRUE
[08:08:08.379] | : resignal: FALSE
[08:08:08.379] | : force: TRUE
[08:08:08.380] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.380] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.380] | : until=2
[08:08:08.380] | : relaying element #2
[08:08:08.380] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.380] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.380] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:08.377] | : . ' , ; ` List of 1
[08:08:08.377] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.377] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.377] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:08.377] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.377] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.377] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.377] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.377] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.381] | length: 5 (resolved future 1)
[08:08:08.381] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.381] value() for listenv ... done
[08:08:08.381] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.381] checking value #2:
[08:08:08.381] 'obj' is MulticoreFuture
[08:08:08.381] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.381] MulticoreFuture #2
[08:08:08.381] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:08.381] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:08.381] | nx: 6
[08:08:08.381] | relay: TRUE
[08:08:08.381] | stdout: TRUE
[08:08:08.382] | signal: TRUE
[08:08:08.382] | resignal: FALSE
[08:08:08.382] | force: TRUE
[08:08:08.382] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.382] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.382] | until=2
[08:08:08.382] | relaying element #2
[08:08:08.382] | value() for MulticoreFuture (<unnamed-97>) ...
[08:08:08.383] | : result() for MulticoreFuture ...
[08:08:08.383] | : result() for MulticoreFuture ... done
[08:08:08.383] | : result() for MulticoreFuture ...
[08:08:08.383] | : result() for MulticoreFuture ... done
[08:08:08.383] | : signalConditions() ...
[08:08:08.383] | : . include = ‘immediateCondition’
[08:08:08.383] | : . exclude = 
[08:08:08.383] | : . resignal = FALSE
[08:08:08.384] | : . Number of conditions: 6
[08:08:08.384] | : .  int 6
[08:08:08.384] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.384] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.381] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.381] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.381] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:08.381] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.381] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.381] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.381] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.384] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.385] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.385] | : . ' , ; ` | : init: TRUE
[08:08:08.385] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.385] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:08.385] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.385] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:08.385] | : signalConditions() ... done
[08:08:08.385] | : relay stdout ...
[08:08:08.385] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:08.385] | : relay stdout ... done
[08:08:08.385] | : check for misuse ...
[08:08:08.385] | : . ' , ; ` | : .  list()
[08:08:08.386] | : check for misuse ... done
[08:08:08.386] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:08.386] | value() for MulticoreFuture (<unnamed-97>) ... done
[08:08:08.386] | result() for MulticoreFuture ...
[08:08:08.386] | result() for MulticoreFuture ... done
[08:08:08.386] | : . ' , ; ` | : .  list()
[08:08:08.386] | signalConditions() ...
[08:08:08.386] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:08.386] | : include = ‘immediateCondition’
[08:08:08.386] | : exclude = 
[08:08:08.387] | : resignal = FALSE
[08:08:08.387] | : Number of conditions: 6
[08:08:08.387] | :  int 6
[08:08:08.387] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.387] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.388] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.386] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:08.386] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:08[08:08:08.388] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
.386] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:08.388] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.388] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.388] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:08.388] | signalConditions() ... done
[08:08:08.388] | result() for MulticoreFuture ...
[08:08:08.388] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:08.388] | result() for MulticoreFuture ... done
[08:08:08.388] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:08.388] | signalConditions() ...
[08:08:08.388] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.389] | : include = ‘condition’
[08:08:08.389] | : exclude = ‘error’, ‘immediateCondition’
[08:08:08.389] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:08.389] | : resignal = TRUE
[08:08:08.389] | : Number of conditions: 6
[08:08:08.389] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.389] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.389] | :  int 6
[08:08:08.389] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.390] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.248] | : . ' , attachPackages() ...
[08:08:08.390] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.390] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.249] | : . ' , ; packages: [n=1] ‘future’
[08:08:08.390] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.390] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.249] | : . ' , attachPackages() ... done
[08:08:08.390] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.391] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.250] | : . ' , attachPackages() ...
[08:08:08.391] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.391] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.250] | : . ' , ; packages: [n=0] 
[08:08:08.391] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.391] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.250] | : . ' , attachPackages() ... done
[08:08:08.391] | signalConditions() ... done
[08:08:08.391] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.392] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.392] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:08.392] value(<MulticoreFuture>, ...) ...
[08:08:08.392] value(<MulticoreFuture>, ...) ... done
[08:08:08.392] value() for MulticoreFuture (<unnamed-97>) ...
[08:08:08.392] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.392] | result() for MulticoreFuture ...
[08:08:08.392] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.392] | result() for MulticoreFuture ... done
[08:08:08.392] | result() for MulticoreFuture ...
[08:08:08.392] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:08.393] | result() for MulticoreFuture ... done
[08:08:08.393] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:08.393] | signalConditions() ...
[08:08:08.393] | : . ' , ; ` | : New stack:
[08:08:08.393] | : include = ‘immediateCondition’
[08:08:08.393] | : exclude = 
[08:08:08.393] | : resignal = FALSE
[08:08:08.393] | : Number of conditions: 6
[08:08:08.393] | :  int 6
[08:08:08.394] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.394] | : already signaled, skipping
[08:08:08.394] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.394] | : already signaled, skipping
[08:08:08.394] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.394] | : already signaled, skipping
[08:08:08.394] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.395] | : already signaled, skipping
[08:08:08.395] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.395] | : already signaled, skipping
[08:08:08.395] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.395] | : already signaled, skipping
[08:08:08.395] | signalConditions() ... done
[08:08:08.395] | check for misuse ...
[08:08:08.395] | check for misuse ... done
[08:08:08.396] value() for MulticoreFuture (<unnamed-97>) ... done
[08:08:08.396] value: <numeric>
[08:08:08.396] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:08.396] | nx: 6
[08:08:08.396] | relay: TRUE
[08:08:08.396] | stdout: TRUE
[08:08:08.396] | signal: TRUE
[08:08:08.396] | resignal: FALSE
[08:08:08.397] | force: TRUE
[08:08:08.397] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.397] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.397] | until=3
[08:08:08.397] | relaying element #3
[08:08:08.397] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.397] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.393] | : . ' , ; ` | : List of 1
[08:08:08.393] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.393] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.393] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.393] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.393] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.393] | : . ' , ; ` | :     ...)  
[08:08:08.393] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.393] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.393] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.393] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.393] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.393] | : . ' , ; ` | :     ...)  
[08:08:08.393] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.393] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.397] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:08.397] | : . ' , ; ` | : Old stack:
[08:08:08.398] resolve() for MulticoreFuture ...
[08:08:08.398] resolve() for MulticoreFuture ... done
[08:08:08.398] length: 4 (resolved future 2)

[08:08:08.398] checking value #3:
[08:08:08.398] 'obj' is MulticoreFuture
[08:08:08.398] readImmediateCondition() ...
[08:08:08.399] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.399] | Number of RDS files: 0
[08:08:08.399] | Returned conditions set:
[08:08:08.399] |  list()
[08:08:08.399] readImmediateCondition() ... done
[08:08:08.399] MulticoreFuture #3
[08:08:08.400] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:08.400] | nx: 6
[08:08:08.400] | relay: TRUE
[08:08:08.400] | stdout: TRUE
[08:08:08.400] | signal: TRUE
[08:08:08.400] | resignal: FALSE
[08:08:08.400] | force: TRUE
[08:08:08.400] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.401] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.401] | until=3
[08:08:08.401] | relaying element #3
[08:08:08.401] | value() for MulticoreFuture (<unnamed-98>) ...
[08:08:08.401] | : result() for MulticoreFuture ...
[08:08:08.402] | : . readImmediateCondition() ...
[08:08:08.398] | : . ' , ; ` | : List of 1
[08:08:08.398] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.398] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.398] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.398] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.398] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.398] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.398] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.398] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c6aab60> 
[08:08:08.398] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.398] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.398] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.402] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.402] | : . ' , ; ` | : Not identical
[08:08:08.402] | : . ' Number of RDS files: 0
[08:08:08.402] | : . ' , ; ` | : all.equal() for future ...
[08:08:08.403] | : . ' Returned conditions set:
[08:08:08.403] | : . '  list()
[08:08:08.403] | : . readImmediateCondition() ... done
[08:08:08.404] | : . result() for MulticoreFuture ...
[08:08:08.404] | : . result() for MulticoreFuture ... done
[08:08:08.404] | : . signalConditions() ...
[08:08:08.404] | : . ' include = ‘immediateCondition’
[08:08:08.405] | : . ' exclude = 
[08:08:08.405] | : . ' resignal = FALSE
[08:08:08.405] | : . ' Number of conditions: 6
[08:08:08.405] | : . '  int 6
[08:08:08.406] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.406] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.406] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.406] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.407] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.407] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.407] | : . signalConditions() ... done
[08:08:08.407] | : result() for MulticoreFuture ... done
[08:08:08.407] | : result() for MulticoreFuture ...
[08:08:08.408] | : result() for MulticoreFuture ... done
[08:08:08.408] | : signalConditions() ...
[08:08:08.408] | : . include = ‘immediateCondition’
[08:08:08.408] | : . exclude = 
[08:08:08.408] | : . resignal = FALSE
[08:08:08.409] | : . Number of conditions: 6
[08:08:08.409] | : .  int 6
[08:08:08.409] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.410] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.410] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.410] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.410] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.403] | : . ' , ; ` | : . List of 2
[08:08:08.403] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.403] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.403] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.403] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.403] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.403] | : . ' , ; ` | : .     ...)  
[08:08:08.403] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.403] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.403] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:08.403] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.403] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.403] | : . ' , ; ` | : .     ...)  
[08:08:08.403] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.403] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.403] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.403] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.403] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.403] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.403] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.403] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.403] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c6aab60> 
[08:08:08.403] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.403] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.410] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.411] | : signalConditions() ... done
[08:08:08.411] | : relay stdout ...
[08:08:08.411] | : . ' , ; ` | : . Formals differ
[08:08:08.411] | : relay stdout ... done
[08:08:08.411] | : check for misuse ...
[08:08:08.411] | : . ' , ; ` | : all.equal() for future ... done
[08:08:08.411] | : check for misuse ... done
[08:08:08.411] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:08.411] | value() for MulticoreFuture (<unnamed-98>) ... done
[08:08:08.411] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:08.412] | result() for MulticoreFuture ...
[08:08:08.412] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:08.412] | result() for MulticoreFuture ... done
[08:08:08.412] | signalConditions() ...
[08:08:08.412] | : include = ‘immediateCondition’
[08:08:08.412] | : exclude = 
[08:08:08.412] | : . ' , ; ` | List of future strategies:
[08:08:08.412] | : . ' , ; ` | 1. multicore:
[08:08:08.412] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:08.412] | : . ' , ; ` |    - tweaked: FALSE
[08:08:08.412] | : . ' , ; ` |    - call: plan(strategy)
[08:08:08.412] | : resignal = FALSE
[08:08:08.412] | : Number of conditions: 6
[08:08:08.412] | :  int 6
[08:08:08.413] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.413] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.413] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.413] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.413] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.414] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.414] | signalConditions() ... done
[08:08:08.414] | result() for MulticoreFuture ...
[08:08:08.414] | result() for MulticoreFuture ... done
[08:08:08.414] | signalConditions() ...
[08:08:08.414] | : include = ‘condition’
[08:08:08.414] | : exclude = ‘error’, ‘immediateCondition’
[08:08:08.414] | : resignal = TRUE
[08:08:08.415] | : Number of conditions: 6
[08:08:08.415] | :  int 6
[08:08:08.415] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.415] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.269] | : . ' , attachPackages() ...
[08:08:08.416] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.416] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.270] | : . ' , ; packages: [n=1] ‘future’
[08:08:08.416] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.416] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.270] | : . ' , attachPackages() ... done
[08:08:08.416] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.416] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.271] | : . ' , attachPackages() ...
[08:08:08.416] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.417] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.271] | : . ' , ; packages: [n=0] 
[08:08:08.412] | : . ' , ; ` | List of 1
[08:08:08.412] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.412] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.412] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.412] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.412] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.412] | : . ' , ; ` |     ...)  
[08:08:08.412] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.412] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.412] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.412] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.412] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.412] | : . ' , ; ` |     ...)  
[08:08:08.412] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.412] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.417] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.417] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.417] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.271] | : . ' , attachPackages() ... done
[08:08:08.417] | signalConditions() ... done
[08:08:08.417] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.417] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.417] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.417] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.417] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.417] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:08.418] value(<MulticoreFuture>, ...) ...
[08:08:08.418] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:08.418] value(<MulticoreFuture>, ...) ... done
[08:08:08.418] value() for MulticoreFuture (<unnamed-98>) ...
[08:08:08.418] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.418] | result() for MulticoreFuture ...
[08:08:08.418] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.418] | result() for MulticoreFuture ... done
[08:08:08.418] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.418] | result() for MulticoreFuture ...
[08:08:08.418] | result() for MulticoreFuture ... done
[08:08:08.418] | signalConditions() ...
[08:08:08.419] | : include = ‘immediateCondition’
[08:08:08.419] | : exclude = 
[08:08:08.419] | : resignal = FALSE
[08:08:08.419] | : Number of conditions: 6
[08:08:08.419] | :  int 6
[08:08:08.419] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.420] | : already signaled, skipping
[08:08:08.420] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.420] | : already signaled, skipping
[08:08:08.420] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.420] | : already signaled, skipping
[08:08:08.420] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.420] | : already signaled, skipping
[08:08:08.420] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.421] | : already signaled, skipping
[08:08:08.421] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.421] | : already signaled, skipping
[08:08:08.421] | signalConditions() ... done
[08:08:08.421] | check for misuse ...
[08:08:08.421] | check for misuse ... done
[08:08:08.421] value() for MulticoreFuture (<unnamed-98>) ... done
[08:08:08.421] value: <NULL>
[08:08:08.422] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:08.422] | nx: 6
[08:08:08.422] | relay: TRUE
[08:08:08.422] | stdout: TRUE
[08:08:08.422] | signal: TRUE
[08:08:08.422] | resignal: FALSE
[08:08:08.422] | force: TRUE
[08:08:08.422] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.423] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.423] | until=4
[08:08:08.423] | relaying element #4
[08:08:08.423] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.423] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.423] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:08.423] resolve() for MulticoreFuture ...
[08:08:08.423] resolve() for MulticoreFuture ... done
[08:08:08.424] length: 3 (resolved future 3)

[08:08:08.424] checking value #4:
[08:08:08.424] 'obj' is MulticoreFuture
[08:08:08.424] readImmediateCondition() ...
[08:08:08.424] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.424] | Number of RDS files: 0
[08:08:08.425] | Returned conditions set:
[08:08:08.425] |  list()
[08:08:08.425] readImmediateCondition() ... done
[08:08:08.427] MulticoreFuture #4
[08:08:08.428] signalConditionsASAP(MulticoreFuture, pos=4) ...
[08:08:08.428] | nx: 6
[08:08:08.428] | relay: TRUE
[08:08:08.428] | stdout: TRUE
[08:08:08.428] | signal: TRUE
[08:08:08.428] | resignal: FALSE
[08:08:08.428] | force: TRUE
[08:08:08.429] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.429] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.429] | until=4
[08:08:08.429] | relaying element #4
[08:08:08.429] | value() for MulticoreFuture (<unnamed-99>) ...
[08:08:08.429] | : result() for MulticoreFuture ...
[08:08:08.430] | : . readImmediateCondition() ...
[08:08:08.430] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.430] | : . ' Number of RDS files: 0
[08:08:08.430] | : . ' Returned conditions set:
[08:08:08.430] | : . '  list()
[08:08:08.431] | : . readImmediateCondition() ... done
[08:08:08.431] | : . result() for MulticoreFuture ...
[08:08:08.431] | : . result() for MulticoreFuture ... done
[08:08:08.431] | : . signalConditions() ...
[08:08:08.431] | : . ' include = ‘immediateCondition’
[08:08:08.432] | : . ' exclude = 
[08:08:08.432] | : . ' resignal = FALSE
[08:08:08.432] | : . ' Number of conditions: 6
[08:08:08.432] | : . '  int 6
[08:08:08.433] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.433] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.433] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.433] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.433] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.433] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.433] | : . signalConditions() ... done
[08:08:08.434] | : result() for MulticoreFuture ... done
[08:08:08.434] | : result() for MulticoreFuture ...
[08:08:08.434] | : result() for MulticoreFuture ... done
[08:08:08.434] | : signalConditions() ...
[08:08:08.434] | : . include = ‘immediateCondition’
[08:08:08.434] | : . exclude = 
[08:08:08.434] | : . resignal = FALSE
[08:08:08.434] | : . Number of conditions: 6
[08:08:08.435] | : .  int 6
[08:08:08.435] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.435] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.435] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.435] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.436] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.436] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.436] | : signalConditions() ... done
[08:08:08.436] | : relay stdout ...
[08:08:08.436] | : relay stdout ... done
[08:08:08.436] | : check for misuse ...
[08:08:08.436] | : check for misuse ... done
[08:08:08.436] | value() for MulticoreFuture (<unnamed-99>) ... done
[08:08:08.437] | result() for MulticoreFuture ...
[08:08:08.437] | result() for MulticoreFuture ... done
[08:08:08.437] | signalConditions() ...
[08:08:08.437] | : include = ‘immediateCondition’
[08:08:08.437] | : exclude = 
[08:08:08.437] | : resignal = FALSE
[08:08:08.437] | : Number of conditions: 6
[08:08:08.437] | :  int 6
[08:08:08.438] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.438] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.438] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.438] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.438] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.439] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.439] | signalConditions() ... done
[08:08:08.439] | result() for MulticoreFuture ...
[08:08:08.439] | result() for MulticoreFuture ... done
[08:08:08.439] | signalConditions() ...
[08:08:08.439] | : include = ‘condition’
[08:08:08.439] | : exclude = ‘error’, ‘immediateCondition’
[08:08:08.439] | : resignal = TRUE
[08:08:08.439] | : Number of conditions: 6
[08:08:08.440] | :  int 6
[08:08:08.440] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.440] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.353] | : . ' , attachPackages() ...
[08:08:08.440] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.440] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.354] | : . ' , ; packages: [n=1] ‘future’
[08:08:08.441] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.441] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.354] | : . ' , attachPackages() ... done
[08:08:08.441] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.441] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.354] | : . ' , attachPackages() ...
[08:08:08.441] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.441] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.355] | : . ' , ; packages: [n=0] 
[08:08:08.441] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.442] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.355] | : . ' , attachPackages() ... done
[08:08:08.442] | signalConditions() ... done
[08:08:08.442] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.442] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.442] signalConditionsASAP(MulticoreFuture, pos=4) ... done
[08:08:08.442] value(<MulticoreFuture>, ...) ...
[08:08:08.442] value(<MulticoreFuture>, ...) ... done
[08:08:08.442] value() for MulticoreFuture (<unnamed-99>) ...
[08:08:08.443] | result() for MulticoreFuture ...
[08:08:08.443] | result() for MulticoreFuture ... done
[08:08:08.443] | result() for MulticoreFuture ...
[08:08:08.443] | result() for MulticoreFuture ... done
[08:08:08.443] | signalConditions() ...
[08:08:08.443] | : include = ‘immediateCondition’
[08:08:08.443] | : exclude = 
[08:08:08.443] | : resignal = FALSE
[08:08:08.443] | : Number of conditions: 6
[08:08:08.444] | :  int 6
[08:08:08.444] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.444] | : already signaled, skipping
[08:08:08.444] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.444] | : already signaled, skipping
[08:08:08.445] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.445] | : already signaled, skipping
[08:08:08.445] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.445] | : already signaled, skipping
[08:08:08.445] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.445] | : already signaled, skipping
[08:08:08.445] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.445] | : already signaled, skipping
[08:08:08.445] | signalConditions() ... done
[08:08:08.445] | check for misuse ...
[08:08:08.446] | check for misuse ... done
[08:08:08.446] value() for MulticoreFuture (<unnamed-99>) ... done
[08:08:08.446] value: <numeric>
[08:08:08.446] signalConditionsASAP(MulticoreFuture, pos=4) ...
[08:08:08.446] | nx: 6
[08:08:08.446] | relay: TRUE
[08:08:08.446] | stdout: TRUE
[08:08:08.446] | signal: TRUE
[08:08:08.447] | resignal: FALSE
[08:08:08.447] | force: TRUE
[08:08:08.447] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.447] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.447] | until=5
[08:08:08.447] | relaying element #5
[08:08:08.447] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.447] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.448] signalConditionsASAP(MulticoreFuture, pos=4) ... done
[08:08:08.448] resolve() for MulticoreFuture ...
[08:08:08.448] resolve() for MulticoreFuture ... done
[08:08:08.448] length: 2 (resolved future 4)

[08:08:08.448] checking value #5:
[08:08:08.448] 'obj' is NULL
[08:08:08.448] signalConditionsASAP(NULL, pos=5) ...
[08:08:08.448] | nx: 6
[08:08:08.449] | relay: TRUE
[08:08:08.449] | stdout: TRUE
[08:08:08.449] | signal: TRUE
[08:08:08.449] | resignal: FALSE
[08:08:08.449] | force: TRUE
[08:08:08.449] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.449] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.449] | until=6
[08:08:08.449] | relaying element #6
[08:08:08.450] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:08.450] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.450] signalConditionsASAP(NULL, pos=5) ... done
[08:08:08.450] signalConditionsASAP(NULL, pos=5) ...
[08:08:08.450] | nx: 6
[08:08:08.450] | relay: TRUE
[08:08:08.450] | stdout: TRUE
[08:08:08.450] | signal: TRUE
[08:08:08.450] | resignal: FALSE
[08:08:08.451] | force: TRUE
[08:08:08.451] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:08.451] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.451] | until=6
[08:08:08.451] | relaying element #6
[08:08:08.451] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:08.451] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.451] signalConditionsASAP(NULL, pos=5) ... done
[08:08:08.452] length: 1 (resolved future 5)

[08:08:08.452] checking value #6:
[08:08:08.452] 'obj' is atomic
[08:08:08.452] signalConditionsASAP(numeric, pos=6) ...
[08:08:08.452] | nx: 6
[08:08:08.452] | relay: TRUE
[08:08:08.452] | stdout: TRUE
[08:08:08.452] | signal: TRUE
[08:08:08.452] | resignal: FALSE
[08:08:08.453] | force: TRUE
[08:08:08.453] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:08.453] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.453] | until=6
[08:08:08.453] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:08.453] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.453] signalConditionsASAP(numeric, pos=6) ... done
[08:08:08.453] length: 0 (resolved future 6)

[08:08:08.454] Relaying remaining futures ...
[08:08:08.454] | signalConditionsASAP(NULL, pos=0) ...
[08:08:08.454] | : nx: 6
[08:08:08.454] | : relay: TRUE
[08:08:08.454] | : stdout: TRUE
[08:08:08.454] | : signal: TRUE
[08:08:08.454] | : resignal: FALSE
[08:08:08.454] | : force: TRUE
[08:08:08.455] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:08.455] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:08.455] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:08.455] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.455] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:08.455] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 2 3
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
Dimensions: c(2, 3, 1)
[08:08:08.459] future(..., label = NULL) ...
[08:08:08.459] | lazy: FALSE
[08:08:08.459] | stdout: TRUE
[08:08:08.459] | conditions: [n=1] ‘condition’
[08:08:08.459] | gc: FALSE
[08:08:08.459] | earlySignal: FALSE
[08:08:08.460] | getGlobalsAndPackages() ...
[08:08:08.460] | : Searching for globals ...
[08:08:08.461] | : . globals found: [0] 
[08:08:08.461] | : Searching for globals ... done
[08:08:08.461] | : globals: [0] <none>
[08:08:08.461] | : packages: [0] <none>
[08:08:08.461] | getGlobalsAndPackages() ... done
[08:08:08.462] | run() for ‘Future’ (<unnamed-100>) ...
[08:08:08.462] | : state: ‘created’
[08:08:08.462] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.462] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.462] | : Using MulticoreFutureBackend ...
[08:08:08.462] | : . Number of futures since start: 9 (9 created, 9 launched, 12 finished)
[08:08:08.462] | : . Launching futures ...
[08:08:08.463] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:08.463] | : . ' , getFutureData() ...
[08:08:08.463] | : . ' , ; getFutureCore() ...
[08:08:08.463] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:08.463] | : . ' , ; getFutureCore() ... done
[08:08:08.463] | : . ' , ; getFutureCapture() ...
[08:08:08.463] | : . ' , ; getFutureCapture() ... done
[08:08:08.463] | : . ' , ; getFutureContext() ...
[08:08:08.463] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.464] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:08.464] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.464] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:08.464] | : . ' , ; getFutureContext() ... done
[08:08:08.464] | : . ' , getFutureData() ... done
[08:08:08.464] | : . ' , requestCore(..., workers = 2) ...
[08:08:08.464] | : . ' , requestCore(..., workers = 2) ... done
[08:08:08.467] | : . ' , MulticoreFuture started
[08:08:08.468] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:08.468] | : . Launching futures ... done
[08:08:08.468] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:08.468] | : Using MulticoreFutureBackend ... done
[08:08:08.469] | run() for ‘Future’ (<unnamed-100>) ... done
[08:08:08.469] future(..., label = NULL) ... done
[08:08:08.469] future(..., label = NULL) ...
[08:08:08.469] | lazy: FALSE
[08:08:08.469] | stdout: TRUE
[08:08:08.470] | conditions: [n=1] ‘condition’
[08:08:08.470] | gc: FALSE
[08:08:08.470] | earlySignal: FALSE
[08:08:08.470] | getGlobalsAndPackages() ...
[08:08:08.470] | : Searching for globals ...
[08:08:08.471] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.471] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:08.471] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.471] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.472] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:08.472] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:08.472] | : . ' , ; ` | New stack:
[08:08:08.473] | : . globals found: [0] 
[08:08:08.473] | : Searching for globals ... done
[08:08:08.473] | : globals: [0] <none>
[08:08:08.473] | : packages: [0] <none>
[08:08:08.473] | getGlobalsAndPackages() ... done
[08:08:08.474] | run() for ‘Future’ (<unnamed-101>) ...
[08:08:08.474] | : state: ‘created’
[08:08:08.474] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.474] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.474] | : Using MulticoreFutureBackend ...
[08:08:08.475] | : . Number of futures since start: 10 (10 created, 10 launched, 12 finished)
[08:08:08.475] | : . Launching futures ...
[08:08:08.475] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:08.475] | : . ' , getFutureData() ...
[08:08:08.475] | : . ' , ; getFutureCore() ...
[08:08:08.476] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:08.476] | : . ' , ; getFutureCore() ... done
[08:08:08.476] | : . ' , ; getFutureCapture() ...
[08:08:08.472] | : . ' , ; ` | List of 1
[08:08:08.472] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.472] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.472] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:08.472] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.472] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.472] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.472] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.472] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.476] | : . ' , ; getFutureCapture() ... done
[08:08:08.476] | : . ' , ; ` | Old stack:
[08:08:08.476] | : . ' , ; getFutureContext() ...
[08:08:08.476] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.476] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:08.477] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.477] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:08.477] | : . ' , ; getFutureContext() ... done
[08:08:08.477] | : . ' , getFutureData() ... done
[08:08:08.477] | : . ' , requestCore(..., workers = 2) ...
[08:08:08.478] | : . ' , requestCore(..., workers = 2) ... done
[08:08:08.476] | : . ' , ; ` | List of 1
[08:08:08.476] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.476] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.476] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.476] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.476] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.476] | : . ' , ; ` |     ...)  
[08:08:08.476] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.476] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.476] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.476] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.476] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.476] | : . ' , ; ` |     ...)  
[08:08:08.476] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.476] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.481] | : . ' , ; ` | Not identical
[08:08:08.481] | : . ' , MulticoreFuture started
[08:08:08.481] | : . ' , ; ` | all.equal() for future ...
[08:08:08.481] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:08.482] | : . Launching futures ... done
[08:08:08.482] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:08.482] | : Using MulticoreFutureBackend ... done
[08:08:08.483] | run() for ‘Future’ (<unnamed-101>) ... done
[08:08:08.483] future(..., label = NULL) ... done
[08:08:08.484] future(..., label = NULL) ...
[08:08:08.485] | lazy: FALSE
[08:08:08.485] | stdout: TRUE
[08:08:08.485] | conditions: [n=1] ‘condition’
[08:08:08.485] | gc: FALSE
[08:08:08.485] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.485] | earlySignal: FALSE
[08:08:08.486] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:08.486] | getGlobalsAndPackages() ...
[08:08:08.486] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.486] | : Searching for globals ...
[08:08:08.486] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.487] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:08.487] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:08.487] | : . ' , ; ` | New stack:
[08:08:08.481] | : . ' , ; ` | : List of 2
[08:08:08.481] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.481] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.481] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:08.481] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.481] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.481] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.481] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.481] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.481] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.481] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.481] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.481] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.481] | : . ' , ; ` | :     ...)  
[08:08:08.481] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.481] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.481] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.481] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.481] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.481] | : . ' , ; ` | :     ...)  
[08:08:08.481] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.489] | : . ' , ; ` | : Formals differ
[08:08:08.490] | : . ' , ; ` | all.equal() for future ... done
[08:08:08.490] | : . ' , ; ` | Future strategies differ at level 1
[08:08:08.490] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:08.490] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:08.490] | : . ' , ; ` List of future strategies:
[08:08:08.490] | : . ' , ; ` 1. sequential:
[08:08:08.490] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:08.490] | : . ' , ; `    - tweaked: FALSE
[08:08:08.490] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.488] | : . ' , ; ` | List of 1
[08:08:08.488] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.488] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.488] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:08.488] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.488] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.488] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.488] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.488] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.493] | : . ' , ; ` | Old stack:
[08:08:08.494] | : . globals found: [1] ‘{’
[08:08:08.494] | : Searching for globals ... done
[08:08:08.491] | : . ' , ; ` List of 1
[08:08:08.491] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.491] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.491] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:08.491] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.491] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.491] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.491] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.491] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.495] | : Resolving globals: FALSE
[08:08:08.495] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.495] | : Search for packages associated with the globals ...
[08:08:08.495] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.495] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.495] | : . Packages associated with globals: [1] ‘base’
[08:08:08.495] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:08.496] | : . Packages: [1] ‘base’
[08:08:08.496] | : Search for packages associated with the globals ... done
[08:08:08.496] | : Packages after dropping 'base': [0] 
[08:08:08.497] | : globals: [0] 
[08:08:08.497] | : packages: [0] 
[08:08:08.497] | getGlobalsAndPackages() ... done
[08:08:08.498] | run() for ‘Future’ (<unnamed-102>) ...
[08:08:08.498] | : state: ‘created’
[08:08:08.498] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.496] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.496] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.496] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:08.496] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.496] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.496] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.496] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.498] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.498] | : . ' , ; ` | : init: TRUE
[08:08:08.499] | : Using MulticoreFutureBackend ...
[08:08:08.499] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:08.499] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:08.499] | : . Number of futures since start: 11 (11 created, 11 launched, 12 finished)
[08:08:08.499] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:08.499] | : . Launching futures ...
[08:08:08.499] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:08.499] | : . ' , ; ` | : .  list()
[08:08:08.500] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:08.500] | : . ' , getFutureData() ...
[08:08:08.500] | : . ' , ; getFutureCore() ...
[08:08:08.500] | : . ' , ; ` | : .  list()
[08:08:08.500] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:08.500] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:08.500] | : . ' , ; getFutureCore() ... done
[08:08:08.500] | : . ' , ; getFutureCapture() ...
[08:08:08.501] | : . ' , ; getFutureCapture() ... done
[08:08:08.501] | : . ' , ; getFutureContext() ...
[08:08:08.494] | : . ' , ; ` | List of 1
[08:08:08.494] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.494] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.494] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.494] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.494] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.494] | : . ' , ; ` |     ...)  
[08:08:08.494] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.494] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.494] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.494] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.494] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.494] | : . ' , ; ` |     ...)  
[08:08:08.494] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.494] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.501] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.501] | : . ' , ; ` | Not identical
[08:08:08.501] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:08.500] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:08.500] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:08.500] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:08.501] | : . ' , ; ` | all.equal() for future ...
[08:08:08.502] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.502] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:08.502] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:08.502] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:08.502] | : . ' , ; getFutureContext() ... done
[08:08:08.502] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:08.502] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.502] | : . ' , getFutureData() ... done
[08:08:08.502] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:08.503] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.503] | : . ' , requestCore(..., workers = 2) ...
[08:08:08.503] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.503] | : . ' , ; Poll #1 (0): usedCores() = 2, workers = 2
[08:08:08.506] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.506] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.506] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:08.506] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:08.507] | : . ' , ; ` | : New stack:
[08:08:08.502] | : . ' , ; ` | : List of 2
[08:08:08.502] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.502] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.502] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:08.502] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.502] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.502] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.502] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.502] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.502] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.502] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.502] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.502] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.502] | : . ' , ; ` | :     ...)  
[08:08:08.502] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.502] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.502] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.502] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.502] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.502] | : . ' , ; ` | :     ...)  
[08:08:08.502] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.510] | : . ' , ; ` | : Formals differ
[08:08:08.510] | : . ' , ; ` | all.equal() for future ... done
[08:08:08.511] | : . ' , ; ` | Future strategies differ at level 1
[08:08:08.511] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:08.511] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:08.507] | : . ' , ; ` | : List of 1
[08:08:08.507] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.507] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.507] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.507] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.507] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.507] | : . ' , ; ` | :     ...)  
[08:08:08.507] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.507] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.507] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.507] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.507] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.507] | : . ' , ; ` | :     ...)  
[08:08:08.507] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.507] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.511] | : . ' , ; ` | : Old stack:
[08:08:08.511] | : . ' , ; ` List of future strategies:
[08:08:08.511] | : . ' , ; ` 1. sequential:
[08:08:08.511] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:08.511] | : . ' , ; `    - tweaked: FALSE
[08:08:08.511] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.512] | : . ' , ; ` List of 1
[08:08:08.512] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.512] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.512] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:08.512] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.512] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.512] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.512] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.512] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.516] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.516] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.511] | : . ' , ; ` | : List of 1
[08:08:08.511] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.511] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.511] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.511] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.511] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.511] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.511] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.511] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b57bf18> 
[08:08:08.511] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.511] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.511] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.516] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.516] | : . ' , ; ` | : Not identical
[08:08:08.516] | : . ' , ; ` | : all.equal() for future ...
[08:08:08.516] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:08.516] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.516] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.516] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:08.516] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.516] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.516] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.516] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.519] | : . ' , ; ` | : init: TRUE
[08:08:08.519] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:08.520] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:08.520] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:08.520] | : . ' , ; ` | : .  list()
[08:08:08.520] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:08.520] | : . ' , ; ` | : .  list()
[08:08:08.521] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:08.521] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:08.521] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:08.521] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:08.523] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:08.523] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:08.523] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:08.523] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.523] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:08.523] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.524] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.524] | : . ' , ; readImmediateCondition() ...
[08:08:08.524] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.525] | : . ' , ; ` Number of RDS files: 0
[08:08:08.525] | : . ' , ; ` Returned conditions set:
[08:08:08.525] | : . ' , ; `  list()
[08:08:08.526] | : . ' , ; readImmediateCondition() ... done
[08:08:08.516] | : . ' , ; ` | : . List of 2
[08:08:08.516] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.516] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.516] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.516] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.516] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.516] | : . ' , ; ` | : .     ...)  
[08:08:08.516] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.516] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.516] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:08.516] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.516] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.516] | : . ' , ; ` | : .     ...)  
[08:08:08.516] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.516] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.516] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.516] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.516] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.516] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.516] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.516] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.516] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b57bf18> 
[08:08:08.516] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.516] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.527] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.528] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.528] | : . ' , ; ` | : . Formals differ
[08:08:08.528] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:08.528] | : . ' , ; ` | : all.equal() for future ... done
[08:08:08.528] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:08.528] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:08.528] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:08.528] | : . ' , ; ` | : New stack:
[08:08:08.528] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:08.528] | : . ' , ; ` | List of future strategies:
[08:08:08.528] | : . ' , ; ` | 1. multicore:
[08:08:08.528] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:08.528] | : . ' , ; ` |    - tweaked: FALSE
[08:08:08.528] | : . ' , ; ` |    - call: plan(strategy)
[08:08:08.528] | : . ' , ; ` | : List of 1
[08:08:08.528] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.528] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.528] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.528] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.528] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.528] | : . ' , ; ` | :     ...)  
[08:08:08.528] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.528] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.528] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.528] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.528] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.528] | : . ' , ; ` | :     ...)  
[08:08:08.528] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.528] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.533] | : . ' , ; ` | : Old stack:
[08:08:08.529] | : . ' , ; ` | List of 1
[08:08:08.529] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.529] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.529] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.529] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.529] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.529] | : . ' , ; ` |     ...)  
[08:08:08.529] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.529] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.529] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.529] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.529] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.529] | : . ' , ; ` |     ...)  
[08:08:08.529] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.529] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.533] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.534] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.534] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.534] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.534] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:08.534] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.534] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.535] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.536] | : . ' , ; readImmediateCondition() ...
[08:08:08.537] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.537] | : . ' , ; ` Number of RDS files: 0
[08:08:08.537] | : . ' , ; ` Returned conditions set:
[08:08:08.537] | : . ' , ; `  list()
[08:08:08.538] | : . ' , ; readImmediateCondition() ... done
[08:08:08.538] | : . ' , ; Poll #2 (0.04 secs): usedCores() = 2, workers = 2
[08:08:08.533] | : . ' , ; ` | : List of 1
[08:08:08.533] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.533] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.533] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.533] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.533] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.533] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.533] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.533] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c90c170> 
[08:08:08.533] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.533] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.533] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.542] | : . ' , ; ` | : Not identical
[08:08:08.542] | : . ' , ; ` | : all.equal() for future ...
[08:08:08.549] | : . ' , ; readImmediateCondition() ...
[08:08:08.549] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.550] | : . ' , ; ` Number of RDS files: 0
[08:08:08.542] | : . ' , ; ` | : . List of 2
[08:08:08.542] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.542] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.542] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.542] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.542] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.542] | : . ' , ; ` | : .     ...)  
[08:08:08.542] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.542] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.542] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:08.542] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.542] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.542] | : . ' , ; ` | : .     ...)  
[08:08:08.542] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.542] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.542] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.542] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.542] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.542] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.542] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.542] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.542] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675c90c170> 
[08:08:08.542] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.542] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.550] | : . ' , ; ` Returned conditions set:
[08:08:08.550] | : . ' , ; `  list()
[08:08:08.551] | : . ' , ; readImmediateCondition() ... done
[08:08:08.551] | : . ' , ; ` | : . Formals differ
[08:08:08.551] | : . ' , ; ` | : all.equal() for future ... done
[08:08:08.551] | : . ' , ; value() for MulticoreFuture (<unnamed-100>) ...
[08:08:08.551] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:08.551] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:08.551] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:08.552] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:08.552] | : . ' , ; ` | readImmediateCondition() ...
[08:08:08.552] | : . ' , ; ` | List of future strategies:
[08:08:08.552] | : . ' , ; ` | 1. multicore:
[08:08:08.552] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:08.552] | : . ' , ; ` |    - tweaked: FALSE
[08:08:08.552] | : . ' , ; ` |    - call: plan(strategy)
[08:08:08.553] | : . ' , ; ` | : Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.553] | : . ' , ; ` | : Number of RDS files: 0
[08:08:08.553] | : . ' , ; ` | : Returned conditions set:
[08:08:08.553] | : . ' , ; ` | :  list()
[08:08:08.554] | : . ' , ; ` | readImmediateCondition() ... done
[08:08:08.554] | : . ' , ; ` | result() for MulticoreFuture ...
[08:08:08.555] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:08:08.555] | : . ' , ; ` | signalConditions() ...
[08:08:08.555] | : . ' , ; ` | : include = ‘immediateCondition’
[08:08:08.555] | : . ' , ; ` | : exclude = 
[08:08:08.556] | : . ' , ; ` | : resignal = FALSE
[08:08:08.556] | : . ' , ; ` | : Number of conditions: 6
[08:08:08.556] | : . ' , ; ` | :  int 6
[08:08:08.557] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.557] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.557] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.557] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.558] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.558] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.558] | : . ' , ; ` | signalConditions() ... done
[08:08:08.558] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:08.559] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:08.559] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:08.559] | : . ' , ; ` signalConditions() ...
[08:08:08.559] | : . ' , ; ` | include = ‘immediateCondition’
[08:08:08.560] | : . ' , ; ` | exclude = 
[08:08:08.560] | : . ' , ; ` | resignal = FALSE
[08:08:08.553] | : . ' , ; ` | List of 1
[08:08:08.553] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.553] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.553] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.553] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.553] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.553] | : . ' , ; ` |     ...)  
[08:08:08.553] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.553] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.553] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.553] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.553] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.553] | : . ' , ; ` |     ...)  
[08:08:08.553] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.553] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.560] | : . ' , ; ` | Number of conditions: 6
[08:08:08.560] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.560] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.560] | : . ' , ; ` |  int 6
[08:08:08.561] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.561] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.561] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.561] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.561] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:08.561] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.561] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.562] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.562] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.562] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.562] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.562] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.562] | : . ' , ; ` signalConditions() ... done
[08:08:08.562] | : . ' , ; ` check for misuse ...
[08:08:08.563] | : . ' , ; ` check for misuse ... done
[08:08:08.563] | : . ' , ; value() for MulticoreFuture (<unnamed-100>) ... done
[08:08:08.563] | : . ' , requestCore(..., workers = 2) ... done
[08:08:08.566] | : . ' , MulticoreFuture started
[08:08:08.566] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:08.566] | : . Launching futures ... done
[08:08:08.566] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:08.567] | : Using MulticoreFutureBackend ... done
[08:08:08.567] | run() for ‘Future’ (<unnamed-102>) ... done
[08:08:08.567] future(..., label = NULL) ... done
Classes 'listenv', 'environment' <environment: 0x556758381240> 
[08:08:08.569] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.569] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:08.569] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.570] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
Classes 'listenv', 'environment' <environment: 0x55675cb456b8> 
 - attr(*, "dim.")=[08:08:08.570] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:08.570] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:08.570] | : . ' , ; ` | New stack:
 int [1:3] 2 3 1
 - attr(*, "dimnames.")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
[08:08:08.572] resolved() for listenv ...
[08:08:08.574] | resolved() for array ...
[08:08:08.574] | : Number of elements: 6
[08:08:08.570] | : . ' , ; ` | List of 1
[08:08:08.570] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.570] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.570] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:08.570] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.570] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.570] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.570] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.570] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.574] | : Number of futures: 6
[08:08:08.574] | : . ' , ; ` | Old stack:
[08:08:08.574] | : readImmediateCondition() ...
[08:08:08.575] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.575] | : . Number of RDS files: 0
[08:08:08.575] | : . Returned conditions set:
[08:08:08.575] | : .  list()
[08:08:08.576] | : readImmediateCondition() ... done
[08:08:08.574] | : . ' , ; ` | List of 1
[08:08:08.574] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.574] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.574] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.574] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.574] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.574] | : . ' , ; ` |     ...)  
[08:08:08.574] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.574] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.574] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.574] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.574] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.574] | : . ' , ; ` |     ...)  
[08:08:08.574] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.574] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.579] | : . ' , ; ` | Not identical
[08:08:08.579] | : . ' , ; ` | all.equal() for future ...
[08:08:08.586] | : readImmediateCondition() ...
[08:08:08.586] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.586] | : . Number of RDS files: 0
[08:08:08.586] | : . Returned conditions set:
[08:08:08.587] | : .  list()
[08:08:08.587] | : readImmediateCondition() ... done
[08:08:08.587] | resolved() for array ... done
[08:08:08.587] resolved() for listenv ... done
 logi [1:2, 1:3, 1] TRUE TRUE TRUE FALSE TRUE TRUE
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:08.590] value() for listenv ...
[08:08:08.590] | recursive: 0
[08:08:08.590] | reduce: FALSE
[08:08:08.579] | : . ' , ; ` | : List of 2
[08:08:08.579] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.579] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.579] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:08.579] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.579] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.579] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.579] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.579] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.579] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.579] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.579] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.579] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.579] | : . ' , ; ` | :     ...)  
[08:08:08.579] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.579] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.579] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.579] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.579] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.579] | : . ' , ; ` | :     ...)  
[08:08:08.579] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.591] | : . ' , ; ` | : Formals differ
[08:08:08.591] | length: 6
[08:08:08.591] | : . ' , ; ` | all.equal() for future ... done
[08:08:08.591] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:08.591] | : . ' , ; ` | Future strategies differ at level 1
[08:08:08.591] | Number of remaining objects: 6
[08:08:08.592] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:08.592] | checking value #1:
[08:08:08.592] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:08.592] | 'obj' is atomic
[08:08:08.592] | signalConditionsASAP(numeric, pos=1) ...
[08:08:08.592] | : nx: 6
[08:08:08.592] | : relay: TRUE
[08:08:08.592] | : stdout: TRUE
[08:08:08.592] | : signal: TRUE
[08:08:08.592] | : . ' , ; ` List of future strategies:
[08:08:08.592] | : . ' , ; ` 1. sequential:
[08:08:08.592] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:08.592] | : . ' , ; `    - tweaked: FALSE
[08:08:08.592] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.592] | : resignal: FALSE
[08:08:08.593] | : force: TRUE
[08:08:08.593] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.593] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.593] | : until=2
[08:08:08.593] | : relaying element #2
[08:08:08.593] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.593] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.593] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:08.594] | length: 5 (resolved future 1)
[08:08:08.594] value() for listenv ... done
[08:08:08.594] checking value #2:
[08:08:08.594] 'obj' is MulticoreFuture
[08:08:08.594] MulticoreFuture #2
[08:08:08.594] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:08.595] | nx: 6
[08:08:08.595] | relay: TRUE
[08:08:08.595] | stdout: TRUE
[08:08:08.595] | signal: TRUE
[08:08:08.595] | resignal: FALSE
[08:08:08.595] | force: TRUE
[08:08:08.595] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.595] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.593] | : . ' , ; ` List of 1
[08:08:08.593] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.593] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.593] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:08.593] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.593] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.593] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.593] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.593] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.596] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.596] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.597] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.597] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:08.595] | until=2
[08:08:08.598] | relaying element #2
[08:08:08.598] | value() for MulticoreFuture (<unnamed-100>) ...
[08:08:08.598] | : result() for MulticoreFuture ...
[08:08:08.599] | : result() for MulticoreFuture ... done
[08:08:08.599] | : result() for MulticoreFuture ...
[08:08:08.599] | : result() for MulticoreFuture ... done
[08:08:08.599] | : signalConditions() ...
[08:08:08.599] | : . include = ‘immediateCondition’
[08:08:08.599] | : . exclude = 
[08:08:08.599] | : . resignal = FALSE
[08:08:08.599] | : . Number of conditions: 6
[08:08:08.597] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.597] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.597] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:08.597] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.597] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.597] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.597] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.600] | : . ' , ; ` | : init: TRUE
[08:08:08.600] | : .  int 6
[08:08:08.600] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:08.600] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.600] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.600] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:08.600] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.600] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:08.601] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.601] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.601] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.601] | : . ' , ; ` | : .  list()
[08:08:08.601] | : signalConditions() ... done
[08:08:08.601] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:08.601] | : relay stdout ...
[08:08:08.601] | : relay stdout ... done
[08:08:08.601] | : check for misuse ...
[08:08:08.601] | : . ' , ; ` | : .  list()
[08:08:08.601] | : check for misuse ... done
[08:08:08.601] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:08.602] | value() for MulticoreFuture (<unnamed-100>) ... done
[08:08:08.602] | result() for MulticoreFuture ...
[08:08:08.602] | result() for MulticoreFuture ... done
[08:08:08.602] | signalConditions() ...
[08:08:08.602] | : include = ‘immediateCondition’
[08:08:08.602] | : exclude = 
[08:08:08.602] | : resignal = FALSE
[08:08:08.602] | : Number of conditions: 6
[08:08:08.602] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:08.602] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:08.602] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:08.603] | :  int 6
[08:08:08.603] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.603] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.603] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:08.603] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.603] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:08.603] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.604] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:08.604] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.604] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.604] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.604] | signalConditions() ... done
[08:08:08.604] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:08.604] | result() for MulticoreFuture ...
[08:08:08.604] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.604] | result() for MulticoreFuture ... done
[08:08:08.604] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.604] | signalConditions() ...
[08:08:08.604] | : include = ‘condition’
[08:08:08.604] | : exclude = ‘error’, ‘immediateCondition’
[08:08:08.605] | : resignal = TRUE
[08:08:08.605] | : Number of conditions: 6
[08:08:08.605] | :  int 6
[08:08:08.605] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.605] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.468] | : . ' , attachPackages() ...
[08:08:08.606] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.606] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.469] | : . ' , ; packages: [n=1] ‘future’
[08:08:08.606] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.606] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.469] | : . ' , attachPackages() ... done
[08:08:08.606] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.606] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.469] | : . ' , attachPackages() ...
[08:08:08.606] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.607] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.469] | : . ' , ; packages: [n=0] 
[08:08:08.607] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.607] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.470] | : . ' , attachPackages() ... done
[08:08:08.607] | signalConditions() ... done
[08:08:08.607] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.607] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.607] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:08.607] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.608] value(<MulticoreFuture>, ...) ...
[08:08:08.608] value(<MulticoreFuture>, ...) ... done
[08:08:08.608] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.608] value() for MulticoreFuture (<unnamed-100>) ...
[08:08:08.608] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:08.608] | result() for MulticoreFuture ...
[08:08:08.608] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:08.608] | result() for MulticoreFuture ... done
[08:08:08.608] | result() for MulticoreFuture ...
[08:08:08.608] | : . ' , ; ` | : New stack:
[08:08:08.608] | result() for MulticoreFuture ... done
[08:08:08.608] | signalConditions() ...
[08:08:08.609] | : include = ‘immediateCondition’
[08:08:08.609] | : exclude = 
[08:08:08.609] | : resignal = FALSE
[08:08:08.609] | : Number of conditions: 6
[08:08:08.609] | :  int 6
[08:08:08.609] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.610] | : already signaled, skipping
[08:08:08.610] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.610] | : already signaled, skipping
[08:08:08.610] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.610] | : already signaled, skipping
[08:08:08.610] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.610] | : already signaled, skipping
[08:08:08.610] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.610] | : already signaled, skipping
[08:08:08.611] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.611] | : already signaled, skipping
[08:08:08.611] | signalConditions() ... done
[08:08:08.611] | check for misuse ...
[08:08:08.611] | check for misuse ... done
[08:08:08.611] value() for MulticoreFuture (<unnamed-100>) ... done
[08:08:08.611] value: <numeric>
[08:08:08.612] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:08.612] | nx: 6
[08:08:08.612] | relay: TRUE
[08:08:08.612] | stdout: TRUE
[08:08:08.612] | signal: TRUE
[08:08:08.612] | resignal: FALSE
[08:08:08.612] | force: TRUE
[08:08:08.612] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.612] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.613] | until=3
[08:08:08.613] | relaying element #3
[08:08:08.613] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.608] | : . ' , ; ` | : List of 1
[08:08:08.608] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.608] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.608] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.608] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.608] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.608] | : . ' , ; ` | :     ...)  
[08:08:08.608] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.608] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.608] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.608] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.608] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.608] | : . ' , ; ` | :     ...)  
[08:08:08.608] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.608] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.613] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.613] | : . ' , ; ` | : Old stack:
[08:08:08.613] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:08.613] resolve() for MulticoreFuture ...
[08:08:08.613] resolve() for MulticoreFuture ... done
[08:08:08.614] length: 4 (resolved future 2)

[08:08:08.614] checking value #3:
[08:08:08.614] 'obj' is MulticoreFuture
[08:08:08.614] readImmediateCondition() ...
[08:08:08.614] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.615] | Number of RDS files: 0
[08:08:08.615] | Returned conditions set:
[08:08:08.615] |  list()
[08:08:08.615] readImmediateCondition() ... done
[08:08:08.615] MulticoreFuture #3
[08:08:08.616] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:08.616] | nx: 6
[08:08:08.616] | relay: TRUE
[08:08:08.616] | stdout: TRUE
[08:08:08.616] | signal: TRUE
[08:08:08.616] | resignal: FALSE
[08:08:08.616] | force: TRUE
[08:08:08.616] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.617] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.617] | until=3
[08:08:08.617] | relaying element #3
[08:08:08.617] | value() for MulticoreFuture (<unnamed-101>) ...
[08:08:08.617] | : result() for MulticoreFuture ...
[08:08:08.613] | : . ' , ; ` | : List of 1
[08:08:08.613] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.613] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.613] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.613] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.613] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.613] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.613] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.613] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b0d8730> 
[08:08:08.613] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.613] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.613] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.618] | : . readImmediateCondition() ...
[08:08:08.618] | : . ' , ; ` | : Not identical
[08:08:08.618] | : . ' , ; ` | : all.equal() for future ...
[08:08:08.618] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.619] | : . ' Number of RDS files: 0
[08:08:08.619] | : . ' Returned conditions set:
[08:08:08.619] | : . '  list()
[08:08:08.619] | : . readImmediateCondition() ... done
[08:08:08.620] | : . result() for MulticoreFuture ...
[08:08:08.620] | : . result() for MulticoreFuture ... done
[08:08:08.620] | : . signalConditions() ...
[08:08:08.621] | : . ' include = ‘immediateCondition’
[08:08:08.621] | : . ' exclude = 
[08:08:08.621] | : . ' resignal = FALSE
[08:08:08.621] | : . ' Number of conditions: 6
[08:08:08.621] | : . '  int 6
[08:08:08.622] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.622] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.622] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.622] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.623] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.623] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.623] | : . signalConditions() ... done
[08:08:08.623] | : result() for MulticoreFuture ... done
[08:08:08.623] | : result() for MulticoreFuture ...
[08:08:08.624] | : result() for MulticoreFuture ... done
[08:08:08.624] | : signalConditions() ...
[08:08:08.624] | : . include = ‘immediateCondition’
[08:08:08.624] | : . exclude = 
[08:08:08.624] | : . resignal = FALSE
[08:08:08.624] | : . Number of conditions: 6
[08:08:08.625] | : .  int 6
[08:08:08.625] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.626] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.626] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.626] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.626] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.626] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.627] | : signalConditions() ... done
[08:08:08.627] | : relay stdout ...
[08:08:08.618] | : . ' , ; ` | : . List of 2
[08:08:08.618] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.618] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.618] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.618] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.618] | : . ' , ; ` | : .   ..- attr(*, "factory")=function [08:08:08.627] | : relay stdout ... done
(workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.618] | : . ' , ; ` | : .     ...)  
[08:08:08.618] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.618] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.618] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:08.618] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.618] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.618] | : . ' , ; ` | : .     ...)  
[08:08:08.618] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.618] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.618] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.618] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.618] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.618] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.618] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.618] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.618] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b0d8730> 
[08:08:08.618] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.618] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.627] | : check for misuse ...
[08:08:08.627] | : check for misuse ... done
[08:08:08.627] | value() for MulticoreFuture (<unnamed-101>) ... done
[08:08:08.627] | result() for MulticoreFuture ...
[08:08:08.628] | : . ' , ; ` | : . Formals differ
[08:08:08.628] | result() for MulticoreFuture ... done
[08:08:08.628] | : . ' , ; ` | : all.equal() for future ... done
[08:08:08.628] | signalConditions() ...
[08:08:08.628] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:08.628] | : include = ‘immediateCondition’
[08:08:08.628] | : exclude = 
[08:08:08.628] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:08.628] | : resignal = FALSE
[08:08:08.628] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:08.628] | : Number of conditions: 6
[08:08:08.628] | : . ' , ; ` | List of future strategies:
[08:08:08.628] | : . ' , ; ` | 1. multicore:
[08:08:08.628] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:08.628] | : . ' , ; ` |    - tweaked: FALSE
[08:08:08.628] | : . ' , ; ` |    - call: plan(strategy)
[08:08:08.628] | :  int 6
[08:08:08.629] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.629] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.629] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.629] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.629] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.630] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.630] | signalConditions() ... done
[08:08:08.630] | result() for MulticoreFuture ...
[08:08:08.630] | result() for MulticoreFuture ... done
[08:08:08.630] | signalConditions() ...
[08:08:08.630] | : include = ‘condition’
[08:08:08.630] | : exclude = ‘error’, ‘immediateCondition’
[08:08:08.630] | : resignal = TRUE
[08:08:08.631] | : Number of conditions: 6
[08:08:08.631] | :  int 6
[08:08:08.631] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.631] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.482] | : . ' , attachPackages() ...
[08:08:08.632] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.632] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.482] | : . ' , ; packages: [n=1] ‘future’
[08:08:08.632] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.632] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.483] | : . ' , attachPackages() ... done
[08:08:08.632] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.632] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.483] | : . ' , attachPackages() ...
[08:08:08.633] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.633] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.484] | : . ' , ; packages: [n=0] 
[08:08:08.633] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.633] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.484] | : . ' , attachPackages() ... done
[08:08:08.629] | : . ' , ; ` | List of 1
[08:08:08.629] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.629] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.629] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.629] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.629] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.629] | : . ' , ; ` |     ...)  
[08:08:08.629] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.629] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.629] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.629] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.629] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.629] | : . ' , ; ` |     ...)  
[08:08:08.629] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.629] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.633] | signalConditions() ... done
[08:08:08.633] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.633] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.633] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.633] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.634] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:08.634] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.634] value(<MulticoreFuture>, ...) ...
[08:08:08.634] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.634] value(<MulticoreFuture>, ...) ... done
[08:08:08.634] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:08.634] value() for MulticoreFuture (<unnamed-101>) ...
[08:08:08.634] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.634] | result() for MulticoreFuture ...
[08:08:08.634] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.634] | result() for MulticoreFuture ... done
[08:08:08.634] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.634] | result() for MulticoreFuture ...
[08:08:08.634] | result() for MulticoreFuture ... done
[08:08:08.635] | signalConditions() ...
[08:08:08.635] | : include = ‘immediateCondition’
[08:08:08.635] | : exclude = 
[08:08:08.635] | : resignal = FALSE
[08:08:08.635] | : Number of conditions: 6
[08:08:08.635] | :  int 6
[08:08:08.636] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.636] | : already signaled, skipping
[08:08:08.636] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.636] | : already signaled, skipping
[08:08:08.636] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.636] | : already signaled, skipping
[08:08:08.637] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.637] | : already signaled, skipping
[08:08:08.637] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.637] | : already signaled, skipping
[08:08:08.637] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.637] | : already signaled, skipping
[08:08:08.637] | signalConditions() ... done
[08:08:08.637] | check for misuse ...
[08:08:08.638] | check for misuse ... done
[08:08:08.638] value() for MulticoreFuture (<unnamed-101>) ... done
[08:08:08.638] value: <NULL>
[08:08:08.638] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:08.638] | nx: 6
[08:08:08.638] | relay: TRUE
[08:08:08.638] | stdout: TRUE
[08:08:08.638] | signal: TRUE
[08:08:08.639] | resignal: FALSE
[08:08:08.639] | force: TRUE
[08:08:08.639] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.639] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.639] | until=4
[08:08:08.639] | relaying element #4
[08:08:08.639] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.639] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.639] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:08.640] resolve() for MulticoreFuture ...
[08:08:08.640] resolve() for MulticoreFuture ... done
[08:08:08.640] length: 3 (resolved future 3)

[08:08:08.640] checking value #4:
[08:08:08.640] 'obj' is MulticoreFuture
[08:08:08.640] readImmediateCondition() ...
[08:08:08.641] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.641] | Number of RDS files: 0
[08:08:08.641] | Returned conditions set:
[08:08:08.641] |  list()
[08:08:08.641] readImmediateCondition() ... done
[08:08:08.641] MulticoreFuture #4
[08:08:08.642] signalConditionsASAP(MulticoreFuture, pos=4) ...
[08:08:08.642] | nx: 6
[08:08:08.642] | relay: TRUE
[08:08:08.642] | stdout: TRUE
[08:08:08.642] | signal: TRUE
[08:08:08.642] | resignal: FALSE
[08:08:08.642] | force: TRUE
[08:08:08.642] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.643] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.643] | until=4
[08:08:08.643] | relaying element #4
[08:08:08.643] | value() for MulticoreFuture (<unnamed-102>) ...
[08:08:08.643] | : result() for MulticoreFuture ...
[08:08:08.644] | : . readImmediateCondition() ...
[08:08:08.644] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.644] | : . ' Number of RDS files: 0
[08:08:08.644] | : . ' Returned conditions set:
[08:08:08.644] | : . '  list()
[08:08:08.645] | : . readImmediateCondition() ... done
[08:08:08.645] | : . result() for MulticoreFuture ...
[08:08:08.645] | : . result() for MulticoreFuture ... done
[08:08:08.645] | : . signalConditions() ...
[08:08:08.646] | : . ' include = ‘immediateCondition’
[08:08:08.646] | : . ' exclude = 
[08:08:08.646] | : . ' resignal = FALSE
[08:08:08.646] | : . ' Number of conditions: 6
[08:08:08.646] | : . '  int 6
[08:08:08.647] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.647] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.647] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.647] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.647] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.647] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.647] | : . signalConditions() ... done
[08:08:08.648] | : result() for MulticoreFuture ... done
[08:08:08.648] | : result() for MulticoreFuture ...
[08:08:08.648] | : result() for MulticoreFuture ... done
[08:08:08.648] | : signalConditions() ...
[08:08:08.648] | : . include = ‘immediateCondition’
[08:08:08.648] | : . exclude = 
[08:08:08.648] | : . resignal = FALSE
[08:08:08.648] | : . Number of conditions: 6
[08:08:08.649] | : .  int 6
[08:08:08.649] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.649] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.649] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.649] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.650] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.650] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.650] | : signalConditions() ... done
[08:08:08.650] | : relay stdout ...
[08:08:08.650] | : relay stdout ... done
[08:08:08.650] | : check for misuse ...
[08:08:08.650] | : check for misuse ... done
[08:08:08.650] | value() for MulticoreFuture (<unnamed-102>) ... done
[08:08:08.651] | result() for MulticoreFuture ...
[08:08:08.651] | result() for MulticoreFuture ... done
[08:08:08.651] | signalConditions() ...
[08:08:08.651] | : include = ‘immediateCondition’
[08:08:08.651] | : exclude = 
[08:08:08.651] | : resignal = FALSE
[08:08:08.651] | : Number of conditions: 6
[08:08:08.651] | :  int 6
[08:08:08.652] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.652] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.652] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.652] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.652] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.653] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.653] | signalConditions() ... done
[08:08:08.653] | result() for MulticoreFuture ...
[08:08:08.653] | result() for MulticoreFuture ... done
[08:08:08.653] | signalConditions() ...
[08:08:08.653] | : include = ‘condition’
[08:08:08.653] | : exclude = ‘error’, ‘immediateCondition’
[08:08:08.653] | : resignal = TRUE
[08:08:08.653] | : Number of conditions: 6
[08:08:08.654] | :  int 6
[08:08:08.654] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.654] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.566] | : . ' , attachPackages() ...
[08:08:08.654] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.654] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.567] | : . ' , ; packages: [n=1] ‘future’
[08:08:08.655] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.655] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.567] | : . ' , attachPackages() ... done
[08:08:08.655] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.655] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.568] | : . ' , attachPackages() ...
[08:08:08.655] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.655] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.568] | : . ' , ; packages: [n=0] 
[08:08:08.655] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.656] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.568] | : . ' , attachPackages() ... done
[08:08:08.656] | signalConditions() ... done
[08:08:08.656] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.656] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.656] signalConditionsASAP(MulticoreFuture, pos=4) ... done
[08:08:08.656] value(<MulticoreFuture>, ...) ...
[08:08:08.656] value(<MulticoreFuture>, ...) ... done
[08:08:08.656] value() for MulticoreFuture (<unnamed-102>) ...
[08:08:08.657] | result() for MulticoreFuture ...
[08:08:08.657] | result() for MulticoreFuture ... done
[08:08:08.657] | result() for MulticoreFuture ...
[08:08:08.657] | result() for MulticoreFuture ... done
[08:08:08.657] | signalConditions() ...
[08:08:08.657] | : include = ‘immediateCondition’
[08:08:08.657] | : exclude = 
[08:08:08.657] | : resignal = FALSE
[08:08:08.657] | : Number of conditions: 6
[08:08:08.658] | :  int 6
[08:08:08.658] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.658] | : already signaled, skipping
[08:08:08.658] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.658] | : already signaled, skipping
[08:08:08.658] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.659] | : already signaled, skipping
[08:08:08.659] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.659] | : already signaled, skipping
[08:08:08.659] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.659] | : already signaled, skipping
[08:08:08.659] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.659] | : already signaled, skipping
[08:08:08.659] | signalConditions() ... done
[08:08:08.659] | check for misuse ...
[08:08:08.660] | check for misuse ... done
[08:08:08.660] value() for MulticoreFuture (<unnamed-102>) ... done
[08:08:08.660] value: <numeric>
[08:08:08.660] signalConditionsASAP(MulticoreFuture, pos=4) ...
[08:08:08.660] | nx: 6
[08:08:08.660] | relay: TRUE
[08:08:08.660] | stdout: TRUE
[08:08:08.660] | signal: TRUE
[08:08:08.661] | resignal: FALSE
[08:08:08.661] | force: TRUE
[08:08:08.661] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.661] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.661] | until=5
[08:08:08.661] | relaying element #5
[08:08:08.661] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.661] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.662] signalConditionsASAP(MulticoreFuture, pos=4) ... done
[08:08:08.662] resolve() for MulticoreFuture ...
[08:08:08.662] resolve() for MulticoreFuture ... done
[08:08:08.662] length: 2 (resolved future 4)

[08:08:08.662] checking value #5:
[08:08:08.662] 'obj' is NULL
[08:08:08.662] signalConditionsASAP(NULL, pos=5) ...
[08:08:08.662] | nx: 6
[08:08:08.663] | relay: TRUE
[08:08:08.663] | stdout: TRUE
[08:08:08.663] | signal: TRUE
[08:08:08.663] | resignal: FALSE
[08:08:08.663] | force: TRUE
[08:08:08.663] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.663] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.663] | until=6
[08:08:08.663] | relaying element #6
[08:08:08.664] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:08.664] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.664] signalConditionsASAP(NULL, pos=5) ... done
[08:08:08.664] signalConditionsASAP(NULL, pos=5) ...
[08:08:08.664] | nx: 6
[08:08:08.664] | relay: TRUE
[08:08:08.664] | stdout: TRUE
[08:08:08.664] | signal: TRUE
[08:08:08.665] | resignal: FALSE
[08:08:08.665] | force: TRUE
[08:08:08.665] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:08.665] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.665] | until=6
[08:08:08.665] | relaying element #6
[08:08:08.665] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:08.665] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.665] signalConditionsASAP(NULL, pos=5) ... done
[08:08:08.666] length: 1 (resolved future 5)

[08:08:08.666] checking value #6:
[08:08:08.666] 'obj' is atomic
[08:08:08.666] signalConditionsASAP(numeric, pos=6) ...
[08:08:08.666] | nx: 6
[08:08:08.666] | relay: TRUE
[08:08:08.666] | stdout: TRUE
[08:08:08.666] | signal: TRUE
[08:08:08.667] | resignal: FALSE
[08:08:08.667] | force: TRUE
[08:08:08.667] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:08.667] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.667] | until=6
[08:08:08.667] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:08.667] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.667] signalConditionsASAP(numeric, pos=6) ... done
[08:08:08.667] length: 0 (resolved future 6)

[08:08:08.668] Relaying remaining futures ...
[08:08:08.668] | signalConditionsASAP(NULL, pos=0) ...
[08:08:08.668] | : nx: 6
[08:08:08.668] | : relay: TRUE
[08:08:08.668] | : stdout: TRUE
[08:08:08.668] | : signal: TRUE
[08:08:08.668] | : resignal: FALSE
[08:08:08.668] | : force: TRUE
[08:08:08.669] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:08.669] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:08.669] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:08.669] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.669] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:08.669] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:3] 2 3 1
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
Dimensions: c(2, 1, 3, 1)
[08:08:08.673] future(..., label = NULL) ...
[08:08:08.673] | lazy: FALSE
[08:08:08.673] | stdout: TRUE
[08:08:08.673] | conditions: [n=1] ‘condition’
[08:08:08.673] | gc: FALSE
[08:08:08.674] | earlySignal: FALSE
[08:08:08.674] | getGlobalsAndPackages() ...
[08:08:08.674] | : Searching for globals ...
[08:08:08.675] | : . globals found: [0] 
[08:08:08.675] | : Searching for globals ... done
[08:08:08.675] | : globals: [0] <none>
[08:08:08.675] | : packages: [0] <none>
[08:08:08.676] | getGlobalsAndPackages() ... done
[08:08:08.676] | run() for ‘Future’ (<unnamed-103>) ...
[08:08:08.676] | : state: ‘created’
[08:08:08.676] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.676] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.676] | : Using MulticoreFutureBackend ...
[08:08:08.676] | : . Number of futures since start: 12 (12 created, 12 launched, 16 finished)
[08:08:08.677] | : . Launching futures ...
[08:08:08.677] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:08.677] | : . ' , getFutureData() ...
[08:08:08.677] | : . ' , ; getFutureCore() ...
[08:08:08.677] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:08.677] | : . ' , ; getFutureCore() ... done
[08:08:08.677] | : . ' , ; getFutureCapture() ...
[08:08:08.677] | : . ' , ; getFutureCapture() ... done
[08:08:08.678] | : . ' , ; getFutureContext() ...
[08:08:08.678] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.678] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:08.678] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.678] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:08.678] | : . ' , ; getFutureContext() ... done
[08:08:08.678] | : . ' , getFutureData() ... done
[08:08:08.678] | : . ' , requestCore(..., workers = 2) ...
[08:08:08.679] | : . ' , requestCore(..., workers = 2) ... done
[08:08:08.681] | : . ' , MulticoreFuture started
[08:08:08.682] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:08.682] | : . Launching futures ... done
[08:08:08.682] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:08.683] | : Using MulticoreFutureBackend ... done
[08:08:08.683] | run() for ‘Future’ (<unnamed-103>) ... done
[08:08:08.683] future(..., label = NULL) ... done
[08:08:08.683] future(..., label = NULL) ...
[08:08:08.684] | lazy: FALSE
[08:08:08.684] | stdout: TRUE
[08:08:08.684] | conditions: [n=1] ‘condition’
[08:08:08.684] | gc: FALSE
[08:08:08.684] | earlySignal: FALSE
[08:08:08.684] | getGlobalsAndPackages() ...
[08:08:08.685] | : Searching for globals ...
[08:08:08.685] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.685] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:08.686] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.686] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.686] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:08.686] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:08.687] | : . ' , ; ` | New stack:
[08:08:08.687] | : . globals found: [0] 
[08:08:08.687] | : Searching for globals ... done
[08:08:08.687] | : globals: [0] <none>
[08:08:08.687] | : packages: [0] <none>
[08:08:08.688] | getGlobalsAndPackages() ... done
[08:08:08.688] | run() for ‘Future’ (<unnamed-104>) ...
[08:08:08.688] | : state: ‘created’
[08:08:08.688] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.689] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.689] | : Using MulticoreFutureBackend ...
[08:08:08.689] | : . Number of futures since start: 13 (13 created, 13 launched, 16 finished)
[08:08:08.689] | : . Launching futures ...
[08:08:08.689] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:08.690] | : . ' , getFutureData() ...
[08:08:08.690] | : . ' , ; getFutureCore() ...
[08:08:08.690] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:08.694] | : . ' , ; getFutureCore() ... done
[08:08:08.687] | : . ' , ; ` | List of 1
[08:08:08.687] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.687] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.687] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:08.687] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.687] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.687] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.687] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.687] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.694] | : . ' , ; getFutureCapture() ...
[08:08:08.694] | : . ' , ; ` | Old stack:
[08:08:08.694] | : . ' , ; getFutureCapture() ... done
[08:08:08.695] | : . ' , ; getFutureContext() ...
[08:08:08.695] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.695] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:08.695] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.695] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:08.695] | : . ' , ; getFutureContext() ... done
[08:08:08.696] | : . ' , getFutureData() ... done
[08:08:08.696] | : . ' , requestCore(..., workers = 2) ...
[08:08:08.696] | : . ' , requestCore(..., workers = 2) ... done
[08:08:08.694] | : . ' , ; ` | List of 1
[08:08:08.694] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.694] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.694] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.694] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.694] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.694] | : . ' , ; ` |     ...)  
[08:08:08.694] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.694] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.694] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.694] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.694] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.694] | : . ' , ; ` |     ...)  
[08:08:08.694] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.694] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.699] | : . ' , ; ` | Not identical
[08:08:08.699] | : . ' , ; ` | all.equal() for future ...
[08:08:08.699] | : . ' , MulticoreFuture started
[08:08:08.700] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:08.700] | : . Launching futures ... done
[08:08:08.700] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:08.701] | : Using MulticoreFutureBackend ... done
[08:08:08.701] | run() for ‘Future’ (<unnamed-104>) ... done
[08:08:08.701] future(..., label = NULL) ... done
[08:08:08.703] future(..., label = NULL) ...
[08:08:08.703] | lazy: FALSE
[08:08:08.703] | stdout: TRUE
[08:08:08.704] | conditions: [n=1] ‘condition’
[08:08:08.704] | gc: FALSE
[08:08:08.704] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.704] | earlySignal: FALSE
[08:08:08.704] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:08.704] | getGlobalsAndPackages() ...
[08:08:08.705] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.705] | : Searching for globals ...
[08:08:08.705] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.705] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:08.706] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:08.706] | : . ' , ; ` | New stack:
[08:08:08.700] | : . ' , ; ` | : List of 2
[08:08:08.700] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.700] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.700] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:08.700] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.700] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.700] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.700] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.700] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.700] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.700] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.700] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.700] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.700] | : . ' , ; ` | :     ...)  
[08:08:08.700] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.700] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.700] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.700] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.700] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.700] | : . ' , ; ` | :     ...)  
[08:08:08.700] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.707] | : . ' , ; ` | : Formals differ
[08:08:08.707] | : . ' , ; ` | all.equal() for future ... done
[08:08:08.708] | : . ' , ; ` | Future strategies differ at level 1
[08:08:08.708] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:08.708] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:08.708] | : . ' , ; ` List of future strategies:
[08:08:08.708] | : . ' , ; ` 1. sequential:
[08:08:08.708] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:08.708] | : . ' , ; `    - tweaked: FALSE
[08:08:08.708] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.706] | : . ' , ; ` | List of 1
[08:08:08.706] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.706] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.706] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:08.706] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.706] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.706] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.706] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.706] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.712] | : . ' , ; ` | Old stack:
[08:08:08.709] | : . ' , ; ` List of 1
[08:08:08.709] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.709] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.709] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:08.709] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.709] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.709] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.709] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.709] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.713] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.713] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.713] | : . globals found: [1] ‘{’
[08:08:08.713] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.713] | : Searching for globals ... done
[08:08:08.713] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:08.714] | : Resolving globals: FALSE
[08:08:08.714] | : Search for packages associated with the globals ...
[08:08:08.714] | : . Packages associated with globals: [1] ‘base’
[08:08:08.715] | : . Packages: [1] ‘base’
[08:08:08.715] | : Search for packages associated with the globals ... done
[08:08:08.715] | : Packages after dropping 'base': [0] 
[08:08:08.715] | : globals: [0] 
[08:08:08.716] | : packages: [0] 
[08:08:08.716] | getGlobalsAndPackages() ... done
[08:08:08.713] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.713] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.713] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:08.713] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.713] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.713] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.713] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.716] | : . ' , ; ` | : init: TRUE
[08:08:08.717] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:08.717] | run() for ‘Future’ (<unnamed-105>) ...
[08:08:08.717] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:08.717] | : state: ‘created’
[08:08:08.717] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:08.717] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.717] | : . ' , ; ` | : .  list()
[08:08:08.717] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.717] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:08.718] | : Using MulticoreFutureBackend ...
[08:08:08.718] | : . Number of futures since start: 14 (14 created, 14 launched, 16 finished)
[08:08:08.718] | : . ' , ; ` | : .  list()
[08:08:08.718] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:08.718] | : . Launching futures ...
[08:08:08.718] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:08.719] | : . ' , getFutureData() ...
[08:08:08.719] | : . ' , ; getFutureCore() ...
[08:08:08.719] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:08.719] | : . ' , ; getFutureCore() ... done
[08:08:08.718] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:08.718] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:08.718] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:08.719] | : . ' , ; getFutureCapture() ...
[08:08:08.720] | : . ' , ; getFutureCapture() ... done
[08:08:08.720] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:08.720] | : . ' , ; getFutureContext() ...
[08:08:08.712] | : . ' , ; ` | List of 1
[08:08:08.712] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.712] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.712] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.712] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.712] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.712] | : . ' , ; ` |     ...)  
[08:08:08.712] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.712] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.712] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.712] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.712] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.712] | : . ' , ; ` |     ...)  
[08:08:08.712] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.712] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.720] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:08.720] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:08.720] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.720] | : . ' , ; ` | Not identical
[08:08:08.720] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.720] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:08.720] | : . ' , ; ` | all.equal() for future ...
[08:08:08.720] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:08.721] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.721] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.721] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:08.721] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.721] | : . ' , ; getFutureContext() ... done
[08:08:08.721] | : . ' , getFutureData() ... done
[08:08:08.722] | : . ' , requestCore(..., workers = 2) ...
[08:08:08.722] | : . ' , ; Poll #1 (0): usedCores() = 2, workers = 2
[08:08:08.724] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.724] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.724] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:08.724] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:08.725] | : . ' , ; ` | : New stack:
[08:08:08.721] | : . ' , ; ` | : List of 2
[08:08:08.721] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.721] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.721] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:08.721] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.721] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.721] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.721] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.721] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.721] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.721] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.721] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.721] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.721] | : . ' , ; ` | :     ...)  
[08:08:08.721] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.721] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.721] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.721] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.721] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.721] | : . ' , ; ` | :     ...)  
[08:08:08.721] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.730] | : . ' , ; ` | : Formals differ
[08:08:08.730] | : . ' , ; ` | all.equal() for future ... done
[08:08:08.725] | : . ' , ; ` | : List of 1
[08:08:08.725] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.725] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.725] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.725] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.725] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.725] | : . ' , ; ` | :     ...)  
[08:08:08.725] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.725] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.725] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.725] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.725] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.725] | : . ' , ; ` | :     ...)  
[08:08:08.725] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.725] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.730] | : . ' , ; ` | Future strategies differ at level 1
[08:08:08.730] | : . ' , ; ` | : Old stack:
[08:08:08.730] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:08.730] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:08.731] | : . ' , ; ` List of future strategies:
[08:08:08.731] | : . ' , ; ` 1. sequential:
[08:08:08.731] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:08.731] | : . ' , ; `    - tweaked: FALSE
[08:08:08.731] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.730] | : . ' , ; ` | : List of 1
[08:08:08.730] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.730] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.730] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.730] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.730] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.730] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.730] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.730] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675a284870> 
[08:08:08.730] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.730] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.730] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.735] | : . ' , ; ` | : Not identical
[08:08:08.731] | : . ' , ; ` List of 1
[08:08:08.731] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.731] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.731] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:08.731] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.731] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.731] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.731] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.731] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.735] | : . ' , ; ` | : all.equal() for future ...
[08:08:08.735] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.736] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.736] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.736] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:08.736] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.736] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.736] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:08.736] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.736] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.736] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.736] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.739] | : . ' , ; ` | : init: TRUE
[08:08:08.740] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:08.740] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:08.740] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:08.740] | : . ' , ; ` | : .  list()
[08:08:08.740] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:08.741] | : . ' , ; ` | : .  list()
[08:08:08.741] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:08.741] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:08.741] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:08.741] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:08.743] | : . ' , ; readImmediateCondition() ...
[08:08:08.743] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:08.736] | : . ' , ; ` | : . List of 2
[08:08:08.736] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.736] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.736] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.736] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.736] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.736] | : . ' , ; ` | : .     ...)  
[08:08:08.736] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.736] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.736] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:08.736] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.736] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.736] | : . ' , ; ` | : .     ...)  
[08:08:08.736] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.736] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.736] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.736] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.736] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.736] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.736] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.736] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.736] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675a284870> 
[08:08:08.736] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.736] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.743] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.743] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:08.744] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:08.744] | : . ' , ; ` Number of RDS files: 0
[08:08:08.744] | : . ' , ; ` Returned conditions set:
[08:08:08.744] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.744] | : . ' , ; ` | : . Formals differ
[08:08:08.744] | : . ' , ; ` | : all.equal() for future ... done
[08:08:08.744] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:08.745] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:08.744] | : . ' , ; `  list()
[08:08:08.745] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:08.745] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.745] | : . ' , ; readImmediateCondition() ... done
[08:08:08.745] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:08.745] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.745] | : . ' , ; ` | List of future strategies:
[08:08:08.745] | : . ' , ; ` | 1. multicore:
[08:08:08.745] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:08.745] | : . ' , ; ` |    - tweaked: FALSE
[08:08:08.745] | : . ' , ; ` |    - call: plan(strategy)
[08:08:08.748] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.748] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.749] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:08.749] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:08.749] | : . ' , ; ` | : New stack:
[08:08:08.746] | : . ' , ; ` | List of 1
[08:08:08.746] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.746] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.746] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.746] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.746] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.746] | : . ' , ; ` |     ...)  
[08:08:08.746] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.746] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.746] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.746] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.746] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.746] | : . ' , ; ` |     ...)  
[08:08:08.746] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.746] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.750] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.751] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.751] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.751] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.751] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:08.751] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.752] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.752] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.749] | : . ' , ; ` | : List of 1
[08:08:08.749] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.749] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.749] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.749] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.749] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.749] | : . ' , ; ` | :     ...)  
[08:08:08.749] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.749] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.749] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.749] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.749] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.749] | : . ' , ; ` | :     ...)  
[08:08:08.749] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.749] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.754] | : . ' , ; ` | : Old stack:
[08:08:08.755] | : . ' , ; readImmediateCondition() ...
[08:08:08.756] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.756] | : . ' , ; ` Number of RDS files: 0
[08:08:08.756] | : . ' , ; ` Returned conditions set:
[08:08:08.756] | : . ' , ; `  list()
[08:08:08.757] | : . ' , ; readImmediateCondition() ... done
[08:08:08.758] | : . ' , ; Poll #2 (0.04 secs): usedCores() = 2, workers = 2
[08:08:08.754] | : . ' , ; ` | : List of 1
[08:08:08.754] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.754] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.754] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.754] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.754] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.754] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.754] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.754] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758e27f88> 
[08:08:08.754] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.754] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.754] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.760] | : . ' , ; ` | : Not identical
[08:08:08.760] | : . ' , ; ` | : all.equal() for future ...
[08:08:08.760] | : . ' , ; ` | : . List of 2
[08:08:08.760] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.760] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.760] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.760] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.760] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.760] | : . ' , ; ` | : .     ...)  
[08:08:08.760] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.760] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.760] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:08.760] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.760] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.760] | : . ' , ; ` | : .     ...)  
[08:08:08.760] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.760] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.760] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.760] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.760] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.760] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.760] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.760] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.760] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x556758e27f88> 
[08:08:08.760] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.760] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.768] | : . ' , ; readImmediateCondition() ...
[08:08:08.768] | : . ' , ; ` | : . Formals differ
[08:08:08.768] | : . ' , ; ` | : all.equal() for future ... done
[08:08:08.768] | : . ' , ; ` Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.769] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:08.769] | : . ' , ; ` Number of RDS files: 0
[08:08:08.769] | : . ' , ; ` Returned conditions set:
[08:08:08.769] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:08.769] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:08.769] | : . ' , ; `  list()
[08:08:08.770] | : . ' , ; readImmediateCondition() ... done
[08:08:08.769] | : . ' , ; ` | List of future strategies:
[08:08:08.769] | : . ' , ; ` | 1. multicore:
[08:08:08.769] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:08.769] | : . ' , ; ` |    - tweaked: FALSE
[08:08:08.769] | : . ' , ; ` |    - call: plan(strategy)
[08:08:08.770] | : . ' , ; value() for MulticoreFuture (<unnamed-103>) ...
[08:08:08.770] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:08.771] | : . ' , ; ` | readImmediateCondition() ...
[08:08:08.771] | : . ' , ; ` | : Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.772] | : . ' , ; ` | : Number of RDS files: 0
[08:08:08.772] | : . ' , ; ` | : Returned conditions set:
[08:08:08.772] | : . ' , ; ` | :  list()
[08:08:08.773] | : . ' , ; ` | readImmediateCondition() ... done
[08:08:08.773] | : . ' , ; ` | result() for MulticoreFuture ...
[08:08:08.773] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:08:08.774] | : . ' , ; ` | signalConditions() ...
[08:08:08.774] | : . ' , ; ` | : include = ‘immediateCondition’
[08:08:08.774] | : . ' , ; ` | : exclude = 
[08:08:08.774] | : . ' , ; ` | : resignal = FALSE
[08:08:08.774] | : . ' , ; ` | : Number of conditions: 6
[08:08:08.775] | : . ' , ; ` | :  int 6
[08:08:08.775] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.776] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.776] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.776] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.776] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.777] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.777] | : . ' , ; ` | signalConditions() ... done
[08:08:08.777] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:08.770] | : . ' , ; ` | List of 1
[08:08:08.770] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.770] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.770] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.770] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.770] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.770] | : . ' , ; ` |     ...)  
[08:08:08.770] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.770] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.770] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.770] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.770] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.770] | : . ' , ; ` |     ...)  
[08:08:08.770] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.770] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.777] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:08.777] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.778] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:08.778] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.778] | : . ' , ; ` signalConditions() ...
[08:08:08.778] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.778] | : . ' , ; ` | include = ‘immediateCondition’
[08:08:08.778] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.778] | : . ' , ; ` | exclude = 
[08:08:08.778] | : . ' , ; ` | resignal = FALSE
[08:08:08.778] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:08.779] | : . ' , ; ` | Number of conditions: 6
[08:08:08.779] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.779] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.779] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.779] | : . ' , ; ` |  int 6
[08:08:08.780] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.780] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.780] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.780] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.780] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.780] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.780] | : . ' , ; ` signalConditions() ... done
[08:08:08.781] | : . ' , ; ` check for misuse ...
[08:08:08.781] | : . ' , ; ` check for misuse ... done
[08:08:08.781] | : . ' , ; value() for MulticoreFuture (<unnamed-103>) ... done
[08:08:08.781] | : . ' , requestCore(..., workers = 2) ... done
[08:08:08.784] | : . ' , MulticoreFuture started
[08:08:08.784] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:08.784] | : . Launching futures ... done
[08:08:08.785] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:08.785] | : Using MulticoreFutureBackend ... done
[08:08:08.785] | run() for ‘Future’ (<unnamed-105>) ... done
[08:08:08.785] future(..., label = NULL) ... done
Classes 'listenv', 'environment' <environment: 0x55675cc90c18> 
[08:08:08.787] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.787] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:08.788] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.788] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
Classes 'listenv', 'environment' <environment: 0x556759e7a9c0> 
 - attr(*, "dim.")=[08:08:08.788] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:08.789] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:08.789] | : . ' , ; ` | New stack:
 int [1:4] 2 1 3 1
 - attr(*, "dimnames.")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
[08:08:08.791] resolved() for listenv ...
[08:08:08.789] | : . ' , ; ` | List of 1
[08:08:08.789] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.789] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.789] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:08.789] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.789] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.789] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.789] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.789] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.793] | : . ' , ; ` | Old stack:
[08:08:08.793] | resolved() for array ...
[08:08:08.793] | : Number of elements: 6
[08:08:08.794] | : Number of futures: 6
[08:08:08.794] | : readImmediateCondition() ...
[08:08:08.794] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.794] | : . Number of RDS files: 0
[08:08:08.794] | : . Returned conditions set:
[08:08:08.795] | : .  list()
[08:08:08.795] | : readImmediateCondition() ... done
[08:08:08.793] | : . ' , ; ` | List of 1
[08:08:08.793] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.793] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.793] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.793] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.793] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.793] | : . ' , ; ` |     ...)  
[08:08:08.793] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.793] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.793] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.793] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.793] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.793] | : . ' , ; ` |     ...)  
[08:08:08.793] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.793] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.798] | : . ' , ; ` | Not identical
[08:08:08.798] | : . ' , ; ` | all.equal() for future ...
[08:08:08.805] | : readImmediateCondition() ...
[08:08:08.805] | : . Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.806] | : . Number of RDS files: 0
[08:08:08.806] | : . Returned conditions set:
[08:08:08.798] | : . ' , ; ` | : List of 2
[08:08:08.798] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.798] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.798] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:08.798] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.798] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.798] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.798] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.798] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.798] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.798] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.798] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.798] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.798] | : . ' , ; ` | :     ...)  
[08:08:08.798] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.798] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.798] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.798] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.798] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.798] | : . ' , ; ` | :     ...)  
[08:08:08.798] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.806] | : .  list()
[08:08:08.806] | : readImmediateCondition() ... done
[08:08:08.806] | resolved() for array ... done
[08:08:08.807] resolved() for listenv ... done
[08:08:08.807] | : . ' , ; ` | : Formals differ
[08:08:08.807] | : . ' , ; ` | all.equal() for future ... done
 logi [1:2, 1, 1:3, 1] TRUE TRUE TRUE FALSE TRUE TRUE
 - attr(*, "dimnames")=[08:08:08.807] | : . ' , ; ` | Future strategies differ at level 1
[08:08:08.807] | : . ' , ; ` all.equal() for FutureStrategyList ... done
List of 4
  ..$ :[08:08:08.807] | : . ' , ; ` plan(): Setting new future backend stack:
 chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ :[08:08:08.808] | : . ' , ; ` List of future strategies:
[08:08:08.808] | : . ' , ; ` 1. sequential:
[08:08:08.808] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:08.808] | : . ' , ; `    - tweaked: FALSE
[08:08:08.808] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
 chr [1:3] "a" "b" "c"
  ..$ : chr "a"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:08.809] value() for listenv ...
[08:08:08.809] | recursive: 0
[08:08:08.810] | reduce: FALSE
[08:08:08.811] | length: 6
[08:08:08.811] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:08.811] | Number of remaining objects: 6
[08:08:08.811] | checking value #1:
[08:08:08.811] | 'obj' is atomic
[08:08:08.812] | signalConditionsASAP(numeric, pos=1) ...
[08:08:08.812] | : nx: 6
[08:08:08.812] | : relay: TRUE
[08:08:08.812] | : stdout: TRUE
[08:08:08.812] | : signal: TRUE
[08:08:08.808] | : . ' , ; ` List of 1
[08:08:08.808] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.808] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.808] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:08.808] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.808] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.808] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.808] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.808] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.812] | : resignal: FALSE
[08:08:08.812] | : force: TRUE
[08:08:08.812] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.812] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.812] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.812] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.813] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.813] | : until=2
[08:08:08.813] | : relaying element #2
[08:08:08.813] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:08.813] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.813] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.813] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:08.813] | length: 5 (resolved future 1)
[08:08:08.814] value() for listenv ... done
[08:08:08.814] checking value #2:
[08:08:08.814] 'obj' is MulticoreFuture
[08:08:08.814] MulticoreFuture #2
[08:08:08.814] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:08.814] | nx: 6
[08:08:08.814] | relay: TRUE
[08:08:08.814] | stdout: TRUE
[08:08:08.814] | signal: TRUE
[08:08:08.815] | resignal: FALSE
[08:08:08.815] | force: TRUE
[08:08:08.815] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.815] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:08.815] | until=2
[08:08:08.815] | relaying element #2
[08:08:08.815] | value() for MulticoreFuture (<unnamed-103>) ...
[08:08:08.816] | : result() for MulticoreFuture ...
[08:08:08.813] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.813] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.813] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:08.813] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.813] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.813] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.813] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.816] | : result() for MulticoreFuture ... done
[08:08:08.816] | : . ' , ; ` | : init: TRUE
[08:08:08.816] | : result() for MulticoreFuture ...
[08:08:08.816] | : result() for MulticoreFuture ... done
[08:08:08.816] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:08.816] | : signalConditions() ...
[08:08:08.816] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:08.816] | : . include = ‘immediateCondition’
[08:08:08.816] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:08.816] | : . exclude = 
[08:08:08.816] | : . resignal = FALSE
[08:08:08.817] | : . Number of conditions: 6
[08:08:08.816] | : . ' , ; ` | : .  list()
[08:08:08.817] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:08.817] | : .  int 6
[08:08:08.817] | : . ' , ; ` | : .  list()
[08:08:08.817] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.817] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:08.817] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.817] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.818] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.818] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.818] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.818] | : signalConditions() ... done
[08:08:08.818] | : relay stdout ...
[08:08:08.818] | : relay stdout ... done
[08:08:08.818] | : check for misuse ...
[08:08:08.819] | : check for misuse ... done
[08:08:08.819] | value() for MulticoreFuture (<unnamed-103>) ... done
[08:08:08.817] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:08.817] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:08.817] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:08.819] | result() for MulticoreFuture ...
[08:08:08.819] | result() for MulticoreFuture ... done
[08:08:08.819] | signalConditions() ...
[08:08:08.819] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:08.819] | : include = ‘immediateCondition’
[08:08:08.819] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:08.819] | : exclude = 
[08:08:08.819] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:08.819] | : resignal = FALSE
[08:08:08.820] | : Number of conditions: 6
[08:08:08.820] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.820] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:08.820] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.820] | :  int 6
[08:08:08.820] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.820] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.820] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.820] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.821] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.821] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.821] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.821] | signalConditions() ... done
[08:08:08.821] | result() for MulticoreFuture ...
[08:08:08.821] | result() for MulticoreFuture ... done
[08:08:08.821] | signalConditions() ...
[08:08:08.821] | : include = ‘condition’
[08:08:08.822] | : exclude = ‘error’, ‘immediateCondition’
[08:08:08.822] | : resignal = TRUE
[08:08:08.822] | : Number of conditions: 6
[08:08:08.822] | :  int 6
[08:08:08.822] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.823] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.683] | : . ' , attachPackages() ...
[08:08:08.823] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.823] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.683] | : . ' , ; packages: [n=1] ‘future’
[08:08:08.823] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.823] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.823] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.683] | : . ' , attachPackages() ... done
[08:08:08.823] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:08.823] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.823] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:08.823] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.684] | : . ' , attachPackages() ...
[08:08:08.824] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:08.824] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.824] | : . ' , ; ` | : New stack:
[08:08:08.824] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.684] | : . ' , ; packages: [n=0] 
[08:08:08.824] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.824] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.684] | : . ' , attachPackages() ... done
[08:08:08.825] | signalConditions() ... done
[08:08:08.825] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.825] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.825] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:08.825] value(<MulticoreFuture>, ...) ...
[08:08:08.825] value(<MulticoreFuture>, ...) ... done
[08:08:08.825] value() for MulticoreFuture (<unnamed-103>) ...
[08:08:08.825] | result() for MulticoreFuture ...
[08:08:08.826] | result() for MulticoreFuture ... done
[08:08:08.826] | result() for MulticoreFuture ...
[08:08:08.826] | result() for MulticoreFuture ... done
[08:08:08.826] | signalConditions() ...
[08:08:08.826] | : include = ‘immediateCondition’
[08:08:08.826] | : exclude = 
[08:08:08.826] | : resignal = FALSE
[08:08:08.826] | : Number of conditions: 6
[08:08:08.826] | :  int 6
[08:08:08.827] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.827] | : already signaled, skipping
[08:08:08.827] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.827] | : already signaled, skipping
[08:08:08.827] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.828] | : already signaled, skipping
[08:08:08.828] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.828] | : already signaled, skipping
[08:08:08.828] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.828] | : already signaled, skipping
[08:08:08.828] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.828] | : already signaled, skipping
[08:08:08.828] | signalConditions() ... done
[08:08:08.828] | check for misuse ...
[08:08:08.824] | : . ' , ; ` | : List of 1
[08:08:08.824] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.824] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.824] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.824] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.824] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.824] | : . ' , ; ` | :     ...)  
[08:08:08.824] | : . ' [08:08:08.829] | check for misuse ... done
, ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.824] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.824] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.824] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.824] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.824] | : . ' , ; ` | :     ...)  
[08:08:08.824] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.824] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.829] value() for MulticoreFuture (<unnamed-103>) ... done
[08:08:08.829] | : . ' , ; ` | : Old stack:
[08:08:08.829] value: <numeric>
[08:08:08.829] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:08.829] | nx: 6
[08:08:08.829] | relay: TRUE
[08:08:08.829] | stdout: TRUE
[08:08:08.830] | signal: TRUE
[08:08:08.830] | resignal: FALSE
[08:08:08.830] | force: TRUE
[08:08:08.830] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.830] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.830] | until=3
[08:08:08.830] | relaying element #3
[08:08:08.830] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.830] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.831] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:08.831] resolve() for MulticoreFuture ...
[08:08:08.831] resolve() for MulticoreFuture ... done
[08:08:08.831] length: 4 (resolved future 2)

[08:08:08.831] checking value #3:
[08:08:08.831] 'obj' is MulticoreFuture
[08:08:08.832] readImmediateCondition() ...
[08:08:08.832] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.832] | Number of RDS files: 0
[08:08:08.832] | Returned conditions set:
[08:08:08.832] |  list()
[08:08:08.833] readImmediateCondition() ... done
[08:08:08.833] MulticoreFuture #3
[08:08:08.833] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:08.833] | nx: 6
[08:08:08.833] | relay: TRUE
[08:08:08.829] | : . ' , ; ` | : List of 1
[08:08:08.829] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.829] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.829] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:08.829] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.829] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.829] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.829] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.829] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bef95f0> 
[08:08:08.829] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.829] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.829] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.833] | stdout: TRUE
[08:08:08.833] | : . ' , ; ` | : Not identical
[08:08:08.833] | signal: TRUE
[08:08:08.834] | : . ' , ; ` | : all.equal() for future ...
[08:08:08.834] | resignal: FALSE
[08:08:08.834] | force: TRUE
[08:08:08.834] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.834] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:08.834] | until=3
[08:08:08.834] | relaying element #3
[08:08:08.834] | value() for MulticoreFuture (<unnamed-104>) ...
[08:08:08.835] | : result() for MulticoreFuture ...
[08:08:08.835] | : . readImmediateCondition() ...
[08:08:08.836] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.836] | : . ' Number of RDS files: 0
[08:08:08.836] | : . ' Returned conditions set:
[08:08:08.836] | : . '  list()
[08:08:08.837] | : . readImmediateCondition() ... done
[08:08:08.837] | : . result() for MulticoreFuture ...
[08:08:08.837] | : . result() for MulticoreFuture ... done
[08:08:08.838] | : . signalConditions() ...
[08:08:08.838] | : . ' include = ‘immediateCondition’
[08:08:08.838] | : . ' exclude = 
[08:08:08.838] | : . ' resignal = FALSE
[08:08:08.838] | : . ' Number of conditions: 6
[08:08:08.839] | : . '  int 6
[08:08:08.839] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.840] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.840] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.840] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.840] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.840] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.841] | : . signalConditions() ... done
[08:08:08.841] | : result() for MulticoreFuture ... done
[08:08:08.841] | : result() for MulticoreFuture ...
[08:08:08.841] | : result() for MulticoreFuture ... done
[08:08:08.834] | : . ' , ; ` | : . List of 2
[08:08:08.834] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.834] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.834] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.834] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.834] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.834] | : . ' , ; ` | : .     ...)  
[08:08:08.834] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.834] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.834] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:08.834] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.834] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.834] | : . ' , ; ` | : .     ...)  
[08:08:08.834] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.834] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.834] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:08.834] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:08.834] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.834] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.834] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.834] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:08.834] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675bef95f0> 
[08:08:08.834] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:08.834] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:08.841] | : signalConditions() ...
[08:08:08.842] | : . include = ‘immediateCondition’
[08:08:08.842] | : . exclude = 
[08:08:08.842] | : . resignal = FALSE
[08:08:08.842] | : . ' , ; ` | : . Formals differ
[08:08:08.842] | : . Number of conditions: 6
[08:08:08.842] | : . ' , ; ` | : all.equal() for future ... done
[08:08:08.842] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:08.842] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:08.843] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:08.842] | : .  int 6
[08:08:08.843] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.843] | : . ' , ; ` | List of future strategies:
[08:08:08.843] | : . ' , ; ` | 1. multicore:
[08:08:08.843] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:08.843] | : . ' , ; ` |    - tweaked: FALSE
[08:08:08.843] | : . ' , ; ` |    - call: plan(strategy)
[08:08:08.843] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.843] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.844] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.844] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.844] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.844] | : signalConditions() ... done
[08:08:08.844] | : relay stdout ...
[08:08:08.844] | : relay stdout ... done
[08:08:08.844] | : check for misuse ...
[08:08:08.845] | : check for misuse ... done
[08:08:08.845] | value() for MulticoreFuture (<unnamed-104>) ... done
[08:08:08.845] | result() for MulticoreFuture ...
[08:08:08.845] | result() for MulticoreFuture ... done
[08:08:08.845] | signalConditions() ...
[08:08:08.845] | : include = ‘immediateCondition’
[08:08:08.845] | : exclude = 
[08:08:08.845] | : resignal = FALSE
[08:08:08.845] | : Number of conditions: 6
[08:08:08.846] | :  int 6
[08:08:08.846] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.846] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.846] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.846] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.847] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.847] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.847] | signalConditions() ... done
[08:08:08.847] | result() for MulticoreFuture ...
[08:08:08.847] | result() for MulticoreFuture ... done
[08:08:08.847] | signalConditions() ...
[08:08:08.847] | : include = ‘condition’
[08:08:08.848] | : exclude = ‘error’, ‘immediateCondition’
[08:08:08.843] | : . ' , ; ` | List of 1
[08:08:08.843] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.843] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.843] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.843] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:08.843] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.843] | : . ' , ; ` |     ...)  
[08:08:08.843] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.843] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.843] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:08.843] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.843] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.843] | : . ' , ; ` |     ...)  
[08:08:08.843] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.843] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.848] | : resignal = TRUE
[08:08:08.848] | : Number of conditions: 6
[08:08:08.848] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:08.848] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:08.848] | :  int 6
[08:08:08.848] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.848] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.848] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.849] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.701] | : . ' , attachPackages() ...
[08:08:08.849] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:08.849] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.849] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:08.849] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.701] | : . ' , ; packages: [n=1] ‘future’
[08:08:08.849] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.849] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.849] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:08.849] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.702] | : . ' , attachPackages() ... done
[08:08:08.849] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.849] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.702] | : . ' , attachPackages() ...
[08:08:08.850] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.850] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.702] | : . ' , ; packages: [n=0] 
[08:08:08.850] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.850] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.702] | : . ' , attachPackages() ... done
[08:08:08.850] | signalConditions() ... done
[08:08:08.850] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.850] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.851] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:08.851] value(<MulticoreFuture>, ...) ...
[08:08:08.851] value(<MulticoreFuture>, ...) ... done
[08:08:08.851] value() for MulticoreFuture (<unnamed-104>) ...
[08:08:08.851] | result() for MulticoreFuture ...
[08:08:08.851] | result() for MulticoreFuture ... done
[08:08:08.851] | result() for MulticoreFuture ...
[08:08:08.852] | result() for MulticoreFuture ... done
[08:08:08.852] | signalConditions() ...
[08:08:08.852] | : include = ‘immediateCondition’
[08:08:08.852] | : exclude = 
[08:08:08.852] | : resignal = FALSE
[08:08:08.852] | : Number of conditions: 6
[08:08:08.852] | :  int 6
[08:08:08.853] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.853] | : already signaled, skipping
[08:08:08.853] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.853] | : already signaled, skipping
[08:08:08.853] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.853] | : already signaled, skipping
[08:08:08.854] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.854] | : already signaled, skipping
[08:08:08.854] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.854] | : already signaled, skipping
[08:08:08.854] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.854] | : already signaled, skipping
[08:08:08.854] | signalConditions() ... done
[08:08:08.854] | check for misuse ...
[08:08:08.855] | check for misuse ... done
[08:08:08.855] value() for MulticoreFuture (<unnamed-104>) ... done
[08:08:08.855] value: <NULL>
[08:08:08.855] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:08.855] | nx: 6
[08:08:08.855] | relay: TRUE
[08:08:08.855] | stdout: TRUE
[08:08:08.855] | signal: TRUE
[08:08:08.856] | resignal: FALSE
[08:08:08.856] | force: TRUE
[08:08:08.856] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.856] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.856] | until=4
[08:08:08.856] | relaying element #4
[08:08:08.856] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.856] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.856] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:08.857] resolve() for MulticoreFuture ...
[08:08:08.857] resolve() for MulticoreFuture ... done
[08:08:08.857] length: 3 (resolved future 3)

[08:08:08.857] checking value #4:
[08:08:08.857] 'obj' is MulticoreFuture
[08:08:08.857] readImmediateCondition() ...
[08:08:08.858] | Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.858] | Number of RDS files: 0
[08:08:08.858] | Returned conditions set:
[08:08:08.858] |  list()
[08:08:08.858] readImmediateCondition() ... done
[08:08:08.859] MulticoreFuture #4
[08:08:08.859] signalConditionsASAP(MulticoreFuture, pos=4) ...
[08:08:08.859] | nx: 6
[08:08:08.859] | relay: TRUE
[08:08:08.859] | stdout: TRUE
[08:08:08.859] | signal: TRUE
[08:08:08.859] | resignal: FALSE
[08:08:08.859] | force: TRUE
[08:08:08.860] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.860] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:08.860] | until=4
[08:08:08.860] | relaying element #4
[08:08:08.860] | value() for MulticoreFuture (<unnamed-105>) ...
[08:08:08.860] | : result() for MulticoreFuture ...
[08:08:08.861] | : . readImmediateCondition() ...
[08:08:08.861] | : . ' Path: ‘/tmp/RtmpvHsIE7/.future/immediateConditions’
[08:08:08.861] | : . ' Number of RDS files: 0
[08:08:08.862] | : . ' Returned conditions set:
[08:08:08.862] | : . '  list()
[08:08:08.862] | : . readImmediateCondition() ... done
[08:08:08.862] | : . result() for MulticoreFuture ...
[08:08:08.863] | : . result() for MulticoreFuture ... done
[08:08:08.863] | : . signalConditions() ...
[08:08:08.863] | : . ' include = ‘immediateCondition’
[08:08:08.863] | : . ' exclude = 
[08:08:08.863] | : . ' resignal = FALSE
[08:08:08.863] | : . ' Number of conditions: 6
[08:08:08.863] | : . '  int 6
[08:08:08.866] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.866] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.867] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.867] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.867] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.867] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.867] | : . signalConditions() ... done
[08:08:08.867] | : result() for MulticoreFuture ... done
[08:08:08.867] | : result() for MulticoreFuture ...
[08:08:08.867] | : result() for MulticoreFuture ... done
[08:08:08.868] | : signalConditions() ...
[08:08:08.868] | : . include = ‘immediateCondition’
[08:08:08.868] | : . exclude = 
[08:08:08.868] | : . resignal = FALSE
[08:08:08.868] | : . Number of conditions: 6
[08:08:08.868] | : .  int 6
[08:08:08.869] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.869] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.869] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.869] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.869] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.869] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.869] | : signalConditions() ... done
[08:08:08.869] | : relay stdout ...
[08:08:08.870] | : relay stdout ... done
[08:08:08.870] | : check for misuse ...
[08:08:08.870] | : check for misuse ... done
[08:08:08.870] | value() for MulticoreFuture (<unnamed-105>) ... done
[08:08:08.870] | result() for MulticoreFuture ...
[08:08:08.870] | result() for MulticoreFuture ... done
[08:08:08.870] | signalConditions() ...
[08:08:08.870] | : include = ‘immediateCondition’
[08:08:08.871] | : exclude = 
[08:08:08.871] | : resignal = FALSE
[08:08:08.871] | : Number of conditions: 6
[08:08:08.871] | :  int 6
[08:08:08.871] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.871] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.872] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.872] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.872] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.872] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.872] | signalConditions() ... done
[08:08:08.872] | result() for MulticoreFuture ...
[08:08:08.872] | result() for MulticoreFuture ... done
[08:08:08.872] | signalConditions() ...
[08:08:08.873] | : include = ‘condition’
[08:08:08.873] | : exclude = ‘error’, ‘immediateCondition’
[08:08:08.873] | : resignal = TRUE
[08:08:08.873] | : Number of conditions: 6
[08:08:08.873] | :  int 6
[08:08:08.873] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.874] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.785] | : . ' , attachPackages() ...
[08:08:08.874] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.874] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.785] | : . ' , ; packages: [n=1] ‘future’
[08:08:08.874] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.874] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.786] | : . ' , attachPackages() ... done
[08:08:08.874] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.874] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.786] | : . ' , attachPackages() ...
[08:08:08.875] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.875] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.786] | : . ' , ; packages: [n=0] 
[08:08:08.875] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.875] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:08.786] | : . ' , attachPackages() ... done
[08:08:08.875] | signalConditions() ... done
[08:08:08.875] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.875] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.875] signalConditionsASAP(MulticoreFuture, pos=4) ... done
[08:08:08.876] value(<MulticoreFuture>, ...) ...
[08:08:08.876] value(<MulticoreFuture>, ...) ... done
[08:08:08.876] value() for MulticoreFuture (<unnamed-105>) ...
[08:08:08.876] | result() for MulticoreFuture ...
[08:08:08.876] | result() for MulticoreFuture ... done
[08:08:08.876] | result() for MulticoreFuture ...
[08:08:08.876] | result() for MulticoreFuture ... done
[08:08:08.876] | signalConditions() ...
[08:08:08.876] | : include = ‘immediateCondition’
[08:08:08.877] | : exclude = 
[08:08:08.877] | : resignal = FALSE
[08:08:08.877] | : Number of conditions: 6
[08:08:08.877] | :  int 6
[08:08:08.877] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.877] | : already signaled, skipping
[08:08:08.878] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.878] | : already signaled, skipping
[08:08:08.878] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.878] | : already signaled, skipping
[08:08:08.878] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.878] | : already signaled, skipping
[08:08:08.878] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.878] | : already signaled, skipping
[08:08:08.879] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:08.879] | : already signaled, skipping
[08:08:08.879] | signalConditions() ... done
[08:08:08.879] | check for misuse ...
[08:08:08.879] | check for misuse ... done
[08:08:08.879] value() for MulticoreFuture (<unnamed-105>) ... done
[08:08:08.879] value: <numeric>
[08:08:08.879] signalConditionsASAP(MulticoreFuture, pos=4) ...
[08:08:08.880] | nx: 6
[08:08:08.880] | relay: TRUE
[08:08:08.880] | stdout: TRUE
[08:08:08.880] | signal: TRUE
[08:08:08.880] | resignal: FALSE
[08:08:08.880] | force: TRUE
[08:08:08.880] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.880] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.880] | until=5
[08:08:08.881] | relaying element #5
[08:08:08.881] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.881] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.881] signalConditionsASAP(MulticoreFuture, pos=4) ... done
[08:08:08.881] resolve() for MulticoreFuture ...
[08:08:08.881] resolve() for MulticoreFuture ... done
[08:08:08.881] length: 2 (resolved future 4)

[08:08:08.881] checking value #5:
[08:08:08.882] 'obj' is NULL
[08:08:08.882] signalConditionsASAP(NULL, pos=5) ...
[08:08:08.882] | nx: 6
[08:08:08.882] | relay: TRUE
[08:08:08.882] | stdout: TRUE
[08:08:08.882] | signal: TRUE
[08:08:08.882] | resignal: FALSE
[08:08:08.882] | force: TRUE
[08:08:08.882] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.883] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.883] | until=6
[08:08:08.883] | relaying element #6
[08:08:08.883] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:08.883] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.883] signalConditionsASAP(NULL, pos=5) ... done
[08:08:08.883] signalConditionsASAP(NULL, pos=5) ...
[08:08:08.883] | nx: 6
[08:08:08.884] | relay: TRUE
[08:08:08.884] | stdout: TRUE
[08:08:08.884] | signal: TRUE
[08:08:08.884] | resignal: FALSE
[08:08:08.884] | force: TRUE
[08:08:08.884] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:08.884] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.884] | until=6
[08:08:08.884] | relaying element #6
[08:08:08.885] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:08.885] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.885] signalConditionsASAP(NULL, pos=5) ... done
[08:08:08.885] length: 1 (resolved future 5)

[08:08:08.885] checking value #6:
[08:08:08.885] 'obj' is atomic
[08:08:08.885] signalConditionsASAP(numeric, pos=6) ...
[08:08:08.886] | nx: 6
[08:08:08.886] | relay: TRUE
[08:08:08.886] | stdout: TRUE
[08:08:08.886] | signal: TRUE
[08:08:08.886] | resignal: FALSE
[08:08:08.886] | force: TRUE
[08:08:08.886] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:08.886] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.886] | until=6
[08:08:08.886] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:08.887] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.887] signalConditionsASAP(numeric, pos=6) ... done
[08:08:08.887] length: 0 (resolved future 6)

[08:08:08.887] Relaying remaining futures ...
[08:08:08.887] | signalConditionsASAP(NULL, pos=0) ...
[08:08:08.887] | : nx: 6
[08:08:08.887] | : relay: TRUE
[08:08:08.888] | : stdout: TRUE
[08:08:08.888] | : signal: TRUE
[08:08:08.888] | : resignal: FALSE
[08:08:08.888] | : force: TRUE
[08:08:08.888] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:08.888] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:08.888] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:08.888] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:08.888] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:08.889] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:4] 2 1 3 1
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
Type of future: multisession
[08:08:08.892] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.893] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:08.893] | : all.equal() for FutureStrategyList ...
[08:08:08.893] | : . New stack:
[08:08:08.893] | : . List of 1
[08:08:08.893] | : .  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:08.893] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.893] | : .   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:08.893] | : .   ..- attr(*, "init")= logi TRUE
[08:08:08.893] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:08.893] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:08.893] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:08.893] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:08.893] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:08:08.893] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:08.893] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.896] | : . Old stack:
[08:08:08.896] | : . List of 1
[08:08:08.896] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.896] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.896] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.896] | : .   ..- attr(*, "init")= chr "done"
[08:08:08.896] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.896] | : .     ...)  
[08:08:08.896] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.896] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.896] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:08.896] | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.896] | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.896] | : .     ...)  
[08:08:08.896] | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.896] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.899] | : . Not identical
[08:08:08.899] | : . all.equal() for future ...
[08:08:08.899] | : . ' List of 2
[08:08:08.899] | : . '  $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:08.899] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.899] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:08.899] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:08.899] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:08.899] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:08.899] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:08.899] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:08.899] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:08:08.899] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:08.899] | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:08.899] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:08.899] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:08.899] | : . '   ..- attr(*, "init")= chr "done"
[08:08:08.899] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.899] | : . '     ...)  
[08:08:08.899] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.899] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.899] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:08.899] | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55675b3bc9b0> 
[08:08:08.899] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:08.899] | : . '     ...)  
[08:08:08.899] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:08.905] | : . ' Formals differ
[08:08:08.905] | : . all.equal() for future ... done
[08:08:08.905] | : . Future strategies differ at level 1
[08:08:08.905] | : all.equal() for FutureStrategyList ... done
[08:08:08.905] | : plan(): Setting new future backend stack:
[08:08:08.905] | : List of future strategies:
[08:08:08.905] | : 1. multisession:
[08:08:08.905] | :    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:08.905] | :    - tweaked: FALSE
[08:08:08.905] | :    - call: plan(strategy)
[08:08:08.906] | : List of 1
[08:08:08.906] | :  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:08.906] | :     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.906] | :   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:08.906] | :   ..- attr(*, "init")= logi TRUE
[08:08:08.906] | :   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:08.906] | :     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:08.906] | :   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:08.906] | :   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:08.906] | :   ..- attr(*, "untweakable")= chr "persistent"
[08:08:08.906] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:08.906] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:08.909] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:08.909] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:08.909] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:08.909] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:08.910] | : . Legacy shutdown of cluster workers ...
[08:08:08.910] | : . ' Stopping existing cluster ...
[08:08:08.910] | : . ' , No pre-existing cluster. Skipping
[08:08:08.910] | : . ' Stopping existing cluster ... done
[08:08:08.910] | : . Legacy shutdown of cluster workers ... done
[08:08:08.910] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:08.910] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:08.910] | : . function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:08.910] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:08.910] | : .  - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:08.910] | : .  - attr(*, "init")= logi TRUE
[08:08:08.910] | : .  - attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:08.910] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:08.910] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:08.910] | : .  - attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:08.910] | : .  - attr(*, "untweakable")= chr "persistent"
[08:08:08.910] | : .  - attr(*, "call")= language plan(strategy)
[08:08:08.913] | : . init: TRUE
[08:08:08.913] | : . makeFutureBackend(<multisession>) ...
[08:08:08.913] | : . ' Backend function: <‘NULL’>
[08:08:08.913] | : . ' Evaluator tweak arguments: [n=0]
[08:08:08.913] | : . '  list()
[08:08:08.913] | : . ' Evaluator formal arguments: [n=4]
[08:08:08.913] | : . '  list()
[08:08:08.914] | : . ' Backend factory arguments: [n=4]
[08:08:08.914] | : . ' Dotted pair list of 4
[08:08:08.914] | : . '  $ workers     : language availableCores()
[08:08:08.914] | : . '  $ rscript_libs: language .libPaths()
[08:08:08.914] | : . '  $ gc          : logi FALSE
[08:08:08.914] | : . '  $ earlySignal : logi FALSE
[08:08:08.915] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ...
[08:08:08.915] | : . ' , Arguments:
[08:08:08.916] | : . ' , List of 5
[08:08:08.916] | : . ' ,  $ workers     : Named int 2
[08:08:08.916] | : . ' ,   ..- attr(*, "names")= chr "mc.cores"
[08:08:08.916] | : . ' ,  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:08.916] | : . ' ,  $ interrupts  : logi TRUE
[08:08:08.916] | : . ' ,  $ gc          : logi FALSE
[08:08:08.916] | : . ' ,  $ earlySignal : logi FALSE
[08:08:08.919] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[08:08:08.919] | : . ' , ; workers: 2
[08:08:08.920] | : . ' , ; getCluster() ...
[08:08:08.920] | : . ' , ; getCluster() ... done
[08:08:08.920] | : . ' , ; Stopping existing cluster ...
[08:08:08.920] | : . ' , ; ` No pre-existing cluster. Skipping
[08:08:08.920] | : . ' , ; Stopping existing cluster ... done
[08:08:08.920] | : . ' , ; Starting new cluster ...
[08:08:08.920] | : . ' , ; ` makeCluster(workers, ...) ...
[08:08:08.920] | : . ' , ; ` | Arguments:
[08:08:08.920] | : . ' , ; ` | List of 2
[08:08:08.920] | : . ' , ; ` |  $             : int 2
[08:08:08.920] | : . ' , ; ` |  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:08.921] | : . ' , ; ` | .makeCluster() ...
[08:08:08.921] | : . ' , ; ` | : workers: ‘2’
[08:08:08.922] | : . ' , ; ` | : R_FUTURE_PLAN: NA
[08:08:08.922] | : . ' , ; ` | : parallelly::makeClusterPSOCK() arguments:
[08:08:08.922] | : . ' , ; ` | : List of 2
[08:08:08.922] | : . ' , ; ` | :  $             : int 2
[08:08:08.922] | : . ' , ; ` | :  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:09.215] | : . ' , ; ` | : Generated cluster UUID
[08:08:09.215] | : . ' , ; ` | : Cluster UUID: ‘e8f111193b2bc48aa139bb2932499cca’
[08:08:09.215] | : . ' , ; ` | : Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:09.217] | : . ' , ; ` | .makeCluster() ... done
[08:08:09.217] | : . ' , ; ` | Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:09.219] | : . ' , ; ` makeCluster(workers, ...) ... done
[08:08:09.219] | : . ' , ; ` Number of workers: 2
[08:08:09.219] | : . ' , ; ` Workers UUID: ‘e8f111193b2bc48aa139bb2932499cca’
[08:08:09.219] | : . ' , ; Starting new cluster ... done
[08:08:09.219] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[08:08:09.219] | : . ' , Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:09.219] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ... done
[08:08:09.220] | : . makeFutureBackend(<multisession>) ... done
[08:08:09.220] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:09.220] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:09.220] | : . plan(): nbrOfWorkers() = 2
[08:08:09.220] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:09.220] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
Dimensions: NULL
[08:08:09.220] | future(..., label = NULL) ...
[08:08:09.221] | : lazy: FALSE
[08:08:09.221] | : stdout: TRUE
[08:08:09.221] | : conditions: [n=1] ‘condition’
[08:08:09.221] | : gc: FALSE
[08:08:09.221] | : earlySignal: FALSE
[08:08:09.221] | : getGlobalsAndPackages() ...
[08:08:09.221] | : . Searching for globals ...
[08:08:09.222] | : . ' globals found: [0] 
[08:08:09.223] | : . Searching for globals ... done
[08:08:09.223] | : . globals: [0] <none>
[08:08:09.223] | : . packages: [0] <none>
[08:08:09.223] | : getGlobalsAndPackages() ... done
[08:08:09.223] | : run() for ‘Future’ (<unnamed-106>) ...
[08:08:09.223] | : . state: ‘created’
[08:08:09.223] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:09.224] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:09.224] | : . Using MultisessionFutureBackend ...
[08:08:09.224] | : . ' Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:09.224] | : . ' Launching futures ...
[08:08:09.224] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:09.224] | : . ' , ; Workers: [n=2]
[08:08:09.224] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:09.228] | : . ' , ; FutureRegistry: ‘workers-e8f111193b2bc48aa139bb2932499cca’
[08:08:09.228] | : . ' , ; requestWorker() ...
[08:08:09.228] | : . ' , ; ` requestNode() ...
[08:08:09.228] | : . ' , ; ` | Number of workers: 2
[08:08:09.228] | : . ' , ; ` | Polling for a free worker ...
[08:08:09.228] | : . ' , ; ` | : FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:09.229] | : . ' , ; ` | : . Created empty registry ‘workers-e8f111193b2bc48aa139bb2932499cca’
[08:08:09.229] | : . ' , ; ` | : . Listing all futures
[08:08:09.229] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:09.229] | : . ' , ; ` | : FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:09.229] | : . ' , ; ` | : Total time: 0
[08:08:09.229] | : . ' , ; ` | Polling for a free worker ... done
[08:08:09.229] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:09.229] | : . ' , ; ` | : Listing all futures
[08:08:09.229] | : . ' , ; ` | : Number of registered futures: 0
[08:08:09.229] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:09.230] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:09.230] | : . ' , ; ` | Index of first available worker: 1
[08:08:09.230] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:09.294] | : . ' , ; ` | : Worker is functional
[08:08:09.294] | : . ' , ; ` | : FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:09.294] | : . ' , ; ` | : . Listing all futures
[08:08:09.294] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:09.294] | : . ' , ; ` | : FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:09.295] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:09.295] | : . ' , ; ` requestNode() ... done
[08:08:09.295] | : . ' , ; ` cluster node index: 1
[08:08:09.295] | : . ' , ; requestWorker() ... done
[08:08:09.295] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:09.296] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:09.296] | : . ' , ; launchFuture() ...
[08:08:09.296] | : . ' , ; ` cluster node index: 1
[08:08:09.296] | : . ' , ; ` getFutureData() ...
[08:08:09.296] | : . ' , ; ` | getFutureCore() ...
[08:08:09.296] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:09.296] | : . ' , ; ` | getFutureCore() ... done
[08:08:09.296] | : . ' , ; ` | getFutureCapture() ...
[08:08:09.296] | : . ' , ; ` | getFutureCapture() ... done
[08:08:09.297] | : . ' , ; ` | getFutureContext() ...
[08:08:09.297] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:09.297] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:09.297] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:09.297] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:09.297] | : . ' , ; ` | getFutureContext() ... done
[08:08:09.297] | : . ' , ; ` getFutureData() ... done
[08:08:09.298] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ...
[08:08:09.298] | : . ' , ; ` | Appended future to position #1
[08:08:09.298] | : . ' , ; ` | Number of registered futures: 1
[08:08:09.298] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ... done
[08:08:09.298] | : . ' , ; launchFuture() ... done
[08:08:09.298] | : . ' , ; MultisessionFuture started
[08:08:09.298] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:09.298] | : . ' Launching futures ... done
[08:08:09.298] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:09.299] | : . Using MultisessionFutureBackend ... done
[08:08:09.299] | : run() for ‘Future’ (<unnamed-106>) ... done
[08:08:09.299] | future(..., label = NULL) ... done
[08:08:09.299] | future(..., label = NULL) ...
[08:08:09.299] | : lazy: FALSE
[08:08:09.299] | : stdout: TRUE
[08:08:09.299] | : conditions: [n=1] ‘condition’
[08:08:09.299] | : gc: FALSE
[08:08:09.299] | : earlySignal: FALSE
[08:08:09.300] | : getGlobalsAndPackages() ...
[08:08:09.300] | : . Searching for globals ...
[08:08:09.301] | : . ' globals found: [0] 
[08:08:09.301] | : . Searching for globals ... done
[08:08:09.301] | : . globals: [0] <none>
[08:08:09.301] | : . packages: [0] <none>
[08:08:09.301] | : getGlobalsAndPackages() ... done
[08:08:09.302] | : run() for ‘Future’ (<unnamed-107>) ...
[08:08:09.302] | : . state: ‘created’
[08:08:09.302] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:09.302] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:09.302] | : . Using MultisessionFutureBackend ...
[08:08:09.302] | : . ' Number of futures since start: 1 (1 created, 1 launched, 0 finished)
[08:08:09.302] | : . ' Launching futures ...
[08:08:09.302] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:09.303] | : . ' , ; Workers: [n=2]
[08:08:09.303] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:09.304] | : . ' , ; FutureRegistry: ‘workers-e8f111193b2bc48aa139bb2932499cca’
[08:08:09.304] | : . ' , ; requestWorker() ...
[08:08:09.304] | : . ' , ; ` requestNode() ...
[08:08:09.304] | : . ' , ; ` | Number of workers: 2
[08:08:09.305] | : . ' , ; ` | Polling for a free worker ...
[08:08:09.305] | : . ' , ; ` | : FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:09.305] | : . ' , ; ` | : . Listing all futures
[08:08:09.305] | : . ' , ; ` | : . Number of registered futures: 1
[08:08:09.305] | : . ' , ; ` | : FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:09.305] | : . ' , ; ` | : Total time: 0
[08:08:09.305] | : . ' , ; ` | Polling for a free worker ... done
[08:08:09.305] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:09.305] | : . ' , ; ` | : Listing all futures
[08:08:09.306] | : . ' , ; ` | : Number of registered futures: 1
[08:08:09.306] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:09.306] | : . ' , ; ` | avail: [n=2] ‘2’
[08:08:09.306] | : . ' , ; ` | Index of first available worker: 2
[08:08:09.306] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:09.383] | : . ' , ; ` | : Worker is functional
[08:08:09.384] | : . ' , ; ` | : FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:09.384] | : . ' , ; ` | : . Listing all futures
[08:08:09.384] | : . ' , ; ` | : . Number of registered futures: 1
[08:08:09.384] | : . ' , ; ` | : FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:09.385] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:09.385] | : . ' , ; ` requestNode() ... done
[08:08:09.385] | : . ' , ; ` cluster node index: 2
[08:08:09.385] | : . ' , ; requestWorker() ... done
[08:08:09.385] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:09.386] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:09.386] | : . ' , ; launchFuture() ...
[08:08:09.386] | : . ' , ; ` cluster node index: 2
[08:08:09.387] | : . ' , ; ` getFutureData() ...
[08:08:09.387] | : . ' , ; ` | getFutureCore() ...
[08:08:09.387] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:09.387] | : . ' , ; ` | getFutureCore() ... done
[08:08:09.387] | : . ' , ; ` | getFutureCapture() ...
[08:08:09.388] | : . ' , ; ` | getFutureCapture() ... done
[08:08:09.388] | : . ' , ; ` | getFutureContext() ...
[08:08:09.388] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:09.388] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:09.388] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:09.389] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:09.389] | : . ' , ; ` | getFutureContext() ... done
[08:08:09.389] | : . ' , ; ` getFutureData() ... done
[08:08:09.390] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ...
[08:08:09.390] | : . ' , ; ` | Appended future to position #2
[08:08:09.390] | : . ' , ; ` | Number of registered futures: 2
[08:08:09.390] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ... done
[08:08:09.390] | : . ' , ; launchFuture() ... done
[08:08:09.390] | : . ' , ; MultisessionFuture started
[08:08:09.390] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:09.390] | : . ' Launching futures ... done
[08:08:09.391] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:09.391] | : . Using MultisessionFutureBackend ... done
[08:08:09.391] | : run() for ‘Future’ (<unnamed-107>) ... done
[08:08:09.391] | future(..., label = NULL) ... done
[08:08:09.391] | future(..., label = NULL) ...
[08:08:09.391] | : lazy: FALSE
[08:08:09.392] | : stdout: TRUE
[08:08:09.392] | : conditions: [n=1] ‘condition’
[08:08:09.392] | : gc: FALSE
[08:08:09.392] | : earlySignal: FALSE
[08:08:09.392] | : getGlobalsAndPackages() ...
[08:08:09.392] | : . Searching for globals ...
[08:08:09.395] | : . ' globals found: [1] ‘{’
[08:08:09.395] | : . Searching for globals ... done
[08:08:09.396] | : . Resolving globals: FALSE
[08:08:09.396] | : . Search for packages associated with the globals ...
[08:08:09.396] | : . ' Packages associated with globals: [1] ‘base’
[08:08:09.396] | : . ' Packages: [1] ‘base’
[08:08:09.396] | : . Search for packages associated with the globals ... done
[08:08:09.396] | : . Packages after dropping 'base': [0] 
[08:08:09.396] | : . globals: [0] 
[08:08:09.397] | : . packages: [0] 
[08:08:09.397] | : getGlobalsAndPackages() ... done
[08:08:09.397] | : run() for ‘Future’ (<unnamed-108>) ...
[08:08:09.397] | : . state: ‘created’
[08:08:09.397] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:09.397] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:09.397] | : . Using MultisessionFutureBackend ...
[08:08:09.398] | : . ' Number of futures since start: 2 (2 created, 2 launched, 0 finished)
[08:08:09.398] | : . ' Launching futures ...
[08:08:09.398] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:09.398] | : . ' , ; Workers: [n=2]
[08:08:09.398] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:09.400] | : . ' , ; FutureRegistry: ‘workers-e8f111193b2bc48aa139bb2932499cca’
[08:08:09.400] | : . ' , ; requestWorker() ...
[08:08:09.400] | : . ' , ; ` requestNode() ...
[08:08:09.400] | : . ' , ; ` | Number of workers: 2
[08:08:09.400] | : . ' , ; ` | Polling for a free worker ...
[08:08:09.400] | : . ' , ; ` | : FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:09.400] | : . ' , ; ` | : . Listing all futures
[08:08:09.400] | : . ' , ; ` | : . Number of registered futures: 2
[08:08:09.401] | : . ' , ; ` | : FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:09.401] | : . ' , ; ` | : Poll #1 (0): usedNodes() = 2, workers = 2
[08:08:09.411] | : . ' , ; ` | : FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'collect-first', earlySignal = 1) ...
[08:08:09.411] | : . ' , ; ` | : . collectValues('workers-e8f111193b2bc48aa139bb2932499cca', firstOnly = TRUE) ...
[08:08:09.411] | : . ' , ; ` | : . ' resolved() for MultisessionFuture (<unnamed-106>) ...
[08:08:09.412] | : . ' , ; ` | : . ' , Cluster node socket connection: index=4, id=1577
[08:08:09.412] | : . ' , ; ` | : . ' , assertValidConnection() ...
[08:08:09.412] | : . ' , ; ` | : . ' , ; cluster node index: 1
[08:08:09.412] | : . ' , ; ` | : . ' , assertValidConnection() ... done
[08:08:09.413] | : . ' , ; ` | : . ' , receiveMessageFromWorker() for ClusterFuture ...
[08:08:09.413] | : . ' , ; ` | : . ' , ; cluster node index: 1
[08:08:09.413] | : . ' , ; ` | : . ' , ; [1] TRUE
[08:08:09.413] | : . ' , ; ` | : . ' , ; received data:
[08:08:09.413] | : . ' , ; ` | : . ' , ; List of 5
[08:08:09.413] | : . ' , ; ` | : . ' , ;  $ type   : chr "VALUE"
[08:08:09.413] | : . ' , ; ` | : . ' , ;  $ value  :List of 16
[08:08:09.413] | : . ' , ; ` | : . ' , ;   ..$ value              : num 2
[08:08:09.413] | : . ' , ; ` | : . ' , ;   ..$ visible            : logi TRUE
[08:08:09.413] | : . ' , ; ` | : . ' , ;   ..$ stdout             : chr ""
[08:08:09.413] | : . ' , ; ` | : . ' , ;   ..$ conditions         : list()
[08:08:09.413] | : . ' , ; ` | : . ' , ;   ..$ rng                : logi FALSE
[08:08:09.413] | : . ' , ; ` | : . ' , ;   ..$ seed               : NULL
[08:08:09.413] | : . ' , ; ` | : . ' , ;   ..$ misuseGlobalEnv    : NULL
[08:08:09.413] | : . ' , ; ` | : . ' , ;   ..$ misuseConnections  :List of 3
[08:08:09.413] | : . ' , ; ` | : . ' , ;   .. ..$ added   : NULL
[08:08:09.413] | : . ' , ; ` | : . ' , ;   .. ..$ removed : NULL
[08:08:09.413] | : . ' , ; ` | : . ' , ;   .. ..$ replaced: NULL
[08:08:09.413] | : . ' , ; ` | : . ' , ;   ..$ misuseDevices      : NULL
[08:08:09.413] | : . ' , ; ` | : . ' , ;   ..$ misuseDefaultDevice: list()
[08:08:09.413] | : . ' , ; ` | : . ' , ;   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:09.413] | : . ' , ; ` | : . ' , ;   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:09.413] | : . ' , ; ` | : . ' , ;   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "106"
[08:08:09.413] | : . ' , ; ` | : . ' , ;   ..$ session_uuid       : chr "272d3c9c235e1bff6dddaa89109c42b3"
[08:08:09.413] | : . ' , ; ` | : . ' , ;   .. ..- attr(*, "source")=List of 5
[08:08:09.413] | : . ' , ; ` | : . ' , ;   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:09.413] | : . ' , ; ` | : . ' , ;   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:09.413] | : . ' , ; ` | : . ' , ;   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:09.413] | : . ' , ; ` | : . ' , ;   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:09.413] | : . ' , ; ` | : . ' , ;   .. .. ..$ pid   : int 69173
[08:08:09.413] | : . ' , ; ` | : . ' , ;   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:09.413] | : . ' , ; ` | : . ' , ;   .. .. ..$ random: int 2147483647
[08:08:09.413] | : . ' , ; ` | : . ' , ;   ..$ r_info             :List of 4
[08:08:09.413] | : . ' , ; ` | : . ' , ;   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:09.413] | : . ' , ; ` | : . ' , ;   .. .. ..$ : int [1:3] 4 5 1
[08:08:09.413] | : . ' , ; ` | : . ' , ;   .. ..$ os           : chr "unix"
[08:08:09.413] | : . ' , ; ` | : . ' , ;   .. ..$ os_name      : chr "Linux"
[08:08:09.413] | : . ' , ; ` | : . ' , ;   .. ..$ captures_utf8: logi TRUE
[08:08:09.413] | : . ' , ; ` | : . ' , ;   ..$ version            : chr "1.8"
[08:08:09.413] | : . ' , ; ` | : . ' , ;   ..- attr(*, "class")= chr "FutureResult"
[08:08:09.413] | : . ' , ; ` | : . ' , ;  $ success: logi TRUE
[08:08:09.413] | : . ' , ; ` | : . ' , ;  $ time   : 'proc_time' Named num [1:5] 0.066 0.002 0.068 0 0
[08:08:09.413] | : . ' , ; ` | : . ' , ;   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:09.413] | : . ' , ; ` | : . ' , ;  $ tag    : NULL
[08:08:09.424] | : . ' , ; ` | : . ' , ; Received FutureResult
[08:08:09.424] | : . ' , ; ` | : . ' , ; FutureResult:
[08:08:09.424] | : . ' , ; ` | : . ' , ; value: ‘numeric’
[08:08:09.424] | : . ' , ; ` | : . ' , ; visible: TRUE
[08:08:09.424] | : . ' , ; ` | : . ' , ; stdout: character
[08:08:09.424] | : . ' , ; ` | : . ' , ; conditions: [n = 0] 
[08:08:09.424] | : . ' , ; ` | : . ' , ; RNG used: FALSE
[08:08:09.424] | : . ' , ; ` | : . ' , ; duration: 0.06573319 secs (started 2025-06-17 08:08:09.340403)
[08:08:09.424] | : . ' , ; ` | : . ' , ; version: 1.8
[08:08:09.425] | : . ' , ; ` | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ...
[08:08:09.425] | : . ' , ; ` | : . ' , ; ` Removed future from position #1
[08:08:09.425] | : . ' , ; ` | : . ' , ; ` Number of registered futures: 1
[08:08:09.425] | : . ' , ; ` | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ... done
[08:08:09.425] | : . ' , ; ` | : . ' , ; Erased future from future backend
[08:08:09.426] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ...
[08:08:09.426] | : . ' , ; ` | : . ' , ; ` result already collected: FutureResult
[08:08:09.426] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ... done
[08:08:09.426] | : . ' , ; ` | : . ' , ; signalConditions() ...
[08:08:09.426] | : . ' , ; ` | : . ' , ; ` include = ‘immediateCondition’
[08:08:09.426] | : . ' , ; ` | : . ' , ; ` exclude = 
[08:08:09.426] | : . ' , ; ` | : . ' , ; ` resignal = FALSE
[08:08:09.426] | : . ' , ; ` | : . ' , ; ` Number of conditions: 0
[08:08:09.426] | : . ' , ; ` | : . ' , ; `  int 0
[08:08:09.427] | : . ' , ; ` | : . ' , ; signalConditions() ... done
[08:08:09.427] | : . ' , ; ` | : . ' , receiveMessageFromWorker() for ClusterFuture ... done
[08:08:09.427] | : . ' , ; ` | : . ' , receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:09.427] | : . ' , ; ` | : . ' resolved() for MultisessionFuture (<unnamed-106>) ... done
[08:08:09.427] | : . ' , ; ` | : . ' assertFutureResult() ...
[08:08:09.427] | : . ' , ; ` | : . ' , Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:09.427] | : . ' , ; ` | : . ' , Future uuid: 106
[08:08:09.427] | : . ' , ; ` | : . ' , identical; success
[08:08:09.427] | : . ' , ; ` | : . ' assertFutureResult() ... done
[08:08:09.428] | : . ' , ; ` | : . ' Future at position #1 is resolved ...
[08:08:09.428] | : . ' , ; ` | : . ' , value() for MultisessionFuture (<unnamed-106>) ...
[08:08:09.428] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ...
[08:08:09.428] | : . ' , ; ` | : . ' , ; ` result already collected: FutureResult
[08:08:09.428] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ... done
[08:08:09.428] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ...
[08:08:09.428] | : . ' , ; ` | : . ' , ; ` result already collected: FutureResult
[08:08:09.428] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ... done
[08:08:09.429] | : . ' , ; ` | : . ' , ; signalConditions() ...
[08:08:09.429] | : . ' , ; ` | : . ' , ; ` include = ‘immediateCondition’
[08:08:09.429] | : . ' , ; ` | : . ' , ; ` exclude = 
[08:08:09.429] | : . ' , ; ` | : . ' , ; ` resignal = FALSE
[08:08:09.429] | : . ' , ; ` | : . ' , ; ` Number of conditions: 0
[08:08:09.429] | : . ' , ; ` | : . ' , ; `  int 0
[08:08:09.429] | : . ' , ; ` | : . ' , ; signalConditions() ... done
[08:08:09.430] | : . ' , ; ` | : . ' , ; check for misuse ...
[08:08:09.430] | : . ' , ; ` | : . ' , ; check for misuse ... done
[08:08:09.430] | : . ' , ; ` | : . ' , value() for MultisessionFuture (<unnamed-106>) ... done
[08:08:09.430] | : . ' , ; ` | : . ' Future at position #1 is resolved ... done
[08:08:09.430] | : . ' , ; ` | : . collectValues('workers-e8f111193b2bc48aa139bb2932499cca', firstOnly = TRUE) ... done
[08:08:09.430] | : . ' , ; ` | : . Remove collected futures ...
[08:08:09.431] | : . ' , ; ` | : . ' Indices of futures to drop: [n=1] ‘1’
[08:08:09.431] | : . ' , ; ` | : . Remove collected futures ... done
[08:08:09.431] | : . ' , ; ` | : FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'collect-first', earlySignal = 1) ... done
[08:08:09.431] | : . ' , ; ` | : Early signaling of 2 future candidates ...
[08:08:09.431] | : . ' , ; ` | : Number of futures with early signaling requested: 0
[08:08:09.431] | : . ' , ; ` | : Early signaling of 2 future candidates ... done
[08:08:09.432] | : . ' , ; ` | : Number of registered futures: 2
[08:08:09.432] | : . ' , ; ` | Polling for a free worker ... done
[08:08:09.432] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:09.432] | : . ' , ; ` | : Listing all futures
[08:08:09.432] | : . ' , ; ` | : Number of registered futures: 1
[08:08:09.433] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:09.433] | : . ' , ; ` | Total time: 0.0316991806030273
[08:08:09.433] | : . ' , ; ` requestNode() ... done
[08:08:09.433] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:09.433] | : . ' , ; ` | Listing all futures
[08:08:09.433] | : . ' , ; ` | Number of registered futures: 1
[08:08:09.434] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:09.434] | : . ' , ; ` avail: [n=2] ‘1’
[08:08:09.434] | : . ' , ; ` Index of first available worker: 1
[08:08:09.434] | : . ' , ; ` Validate that the worker is functional ...
[08:08:09.510] | : . ' , ; ` | Worker is functional
[08:08:09.510] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:09.510] | : . ' , ; ` | : Listing all futures
[08:08:09.510] | : . ' , ; ` | : Number of registered futures: 1
[08:08:09.510] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:09.510] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:09.510] | : . ' , ; requestWorker() ... done
[08:08:09.511] | : . ' , ; cluster node index: 1
[08:08:09.511] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:09.511] | : . ' , eraseGlobalEnvironment() ...
[08:08:09.511] | : . ' , eraseGlobalEnvironment() ... done
[08:08:09.511] | : . ' , launchFuture() ...
[08:08:09.511] | : . ' , ; cluster node index: 1
[08:08:09.512] | : . ' , ; getFutureData() ...
[08:08:09.512] | : . ' , ; ` getFutureCore() ...
[08:08:09.512] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:09.512] | : . ' , ; ` getFutureCore() ... done
[08:08:09.512] | : . ' , ; ` getFutureCapture() ...
[08:08:09.512] | : . ' , ; ` getFutureCapture() ... done
[08:08:09.512] | : . ' , ; ` getFutureContext() ...
[08:08:09.512] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:09.512] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:09.513] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:09.513] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:09.513] | : . ' , ; ` getFutureContext() ... done
[08:08:09.513] | : . ' , ; getFutureData() ... done
[08:08:09.513] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ...
[08:08:09.513] | : . ' , ; ` Appended future to position #2
[08:08:09.513] | : . ' , ; ` Number of registered futures: 2
[08:08:09.514] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ... done
[08:08:09.514] | : . ' , launchFuture() ... done
[08:08:09.514] | : . ' , MultisessionFuture started
[08:08:09.514] | : . ' Launching futures ... done
[08:08:09.514] | : . Using MultisessionFutureBackend ... done
[08:08:09.514] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:09.514] | : run() for ‘Future’ (<unnamed-108>) ... done
[08:08:09.514] | future(..., label = NULL) ... done
[08:08:09.514] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Classes 'listenv', 'environment' <environment: 0x55675ce5cfc0> 
Classes 'listenv', 'environment' <environment: 0x55675b2dd648> 
[08:08:09.516] resolved() for listenv ...
[08:08:09.517] | resolved() for list ...
[08:08:09.517] | : Number of elements: 6
[08:08:09.517] | : Number of futures: 6
[08:08:09.517] | : resolved() for MultisessionFuture (<unnamed-107>) ...
[08:08:09.517] | : . Cluster node socket connection: index=5, id=1578
[08:08:09.518] | : . assertValidConnection() ...
[08:08:09.518] | : . ' cluster node index: 2
[08:08:09.518] | : . assertValidConnection() ... done
[08:08:09.518] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:09.518] | : . ' cluster node index: 2
[08:08:09.519] | : . ' [1] TRUE
[08:08:09.519] | : . ' received data:
[08:08:09.519] | : . ' List of 5
[08:08:09.519] | : . '  $ type   : chr "VALUE"
[08:08:09.519] | : . '  $ value  :List of 16
[08:08:09.519] | : . '   ..$ value              : NULL
[08:08:09.519] | : . '   ..$ visible            : logi TRUE
[08:08:09.519] | : . '   ..$ stdout             : chr ""
[08:08:09.519] | : . '   ..$ conditions         : list()
[08:08:09.519] | : . '   ..$ rng                : logi FALSE
[08:08:09.519] | : . '   ..$ seed               : NULL
[08:08:09.519] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:09.519] | : . '   ..$ misuseConnections  :List of 3
[08:08:09.519] | : . '   .. ..$ added   : NULL
[08:08:09.519] | : . '   .. ..$ removed : NULL
[08:08:09.519] | : . '   .. ..$ replaced: NULL
[08:08:09.519] | : . '   ..$ misuseDevices      : NULL
[08:08:09.519] | : . '   ..$ misuseDefaultDevice: list()
[08:08:09.519] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:09.519] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:09.519] | : . '   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "107"
[08:08:09.519] | : . '   ..$ session_uuid       : chr "318d9a862536e33b210e27df6cf2a506"
[08:08:09.519] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:09.519] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:09.519] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:09.519] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:09.519] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:09.519] | : . '   .. .. ..$ pid   : int 69172
[08:08:09.519] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:09.519] | : . '   .. .. ..$ random: int 2147483647
[08:08:09.519] | : . '   ..$ r_info             :List of 4
[08:08:09.519] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:09.519] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:09.519] | : . '   .. ..$ os           : chr "unix"
[08:08:09.519] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:09.519] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:09.519] | : . '   ..$ version            : chr "1.8"
[08:08:09.519] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:09.519] | : . '  $ success: logi TRUE
[08:08:09.519] | : . '  $ time   : 'proc_time' Named num [1:5] 0.072 0.005 0.077 0 0
[08:08:09.519] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:09.519] | : . '  $ tag    : NULL
[08:08:09.529] | : . ' Received FutureResult
[08:08:09.530] | : . ' FutureResult:
[08:08:09.530] | : . ' value: ‘NULL’
[08:08:09.530] | : . ' visible: TRUE
[08:08:09.530] | : . ' stdout: character
[08:08:09.530] | : . ' conditions: [n = 0] 
[08:08:09.530] | : . ' RNG used: FALSE
[08:08:09.530] | : . ' duration: 0.07455182 secs (started 2025-06-17 08:08:09.432893)
[08:08:09.530] | : . ' version: 1.8
[08:08:09.530] | : . ' FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ...
[08:08:09.530] | : . ' , Removed future from position #1
[08:08:09.530] | : . ' , Number of registered futures: 1
[08:08:09.530] | : . ' FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ... done
[08:08:09.531] | : . ' Erased future from future backend
[08:08:09.531] | : . ' result() for ClusterFuture ...
[08:08:09.531] | : . ' , result already collected: FutureResult
[08:08:09.531] | : . ' result() for ClusterFuture ... done
[08:08:09.531] | : . ' signalConditions() ...
[08:08:09.531] | : . ' , include = ‘immediateCondition’
[08:08:09.531] | : . ' , exclude = 
[08:08:09.531] | : . ' , resignal = FALSE
[08:08:09.531] | : . ' , Number of conditions: 0
[08:08:09.531] | : . ' ,  int 0
[08:08:09.532] | : . ' signalConditions() ... done
[08:08:09.532] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:09.532] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:09.532] | : resolved() for MultisessionFuture (<unnamed-107>) ... done
[08:08:09.532] | : assertFutureResult() ...
[08:08:09.532] | : . Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:09.532] | : . Future uuid: 107
[08:08:09.532] | : . identical; success
[08:08:09.533] | : assertFutureResult() ... done
[08:08:09.533] | : resolved() for MultisessionFuture (<unnamed-108>) ...
[08:08:09.533] | : . Cluster node socket connection: index=4, id=1577
[08:08:09.533] | : . assertValidConnection() ...
[08:08:09.533] | : . ' cluster node index: 1
[08:08:09.533] | : . assertValidConnection() ... done
[08:08:09.544] | : . socketSelect(list(<connection #4 (id=1577)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:09.544] | : resolved() for MultisessionFuture (<unnamed-108>) ... done
[08:08:09.544] | resolved() for list ... done
[08:08:09.544] resolved() for listenv ... done
 Named logi [1:6] TRUE TRUE TRUE FALSE TRUE TRUE
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:09.545] value() for listenv ...
[08:08:09.545] | recursive: 0
[08:08:09.545] | reduce: FALSE
[08:08:09.546] | length: 6
[08:08:09.546] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:09.547] | Number of remaining objects: 6
[08:08:09.547] | checking value #1:
[08:08:09.547] | 'obj' is atomic
[08:08:09.547] | signalConditionsASAP(numeric, pos=1) ...
[08:08:09.547] | : nx: 6
[08:08:09.547] | : relay: TRUE
[08:08:09.547] | : stdout: TRUE
[08:08:09.547] | : signal: TRUE
[08:08:09.547] | : resignal: FALSE
[08:08:09.547] | : force: TRUE
[08:08:09.548] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:09.548] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:09.548] | : until=2
[08:08:09.548] | : relaying element #2
[08:08:09.548] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:09.548] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:09.548] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:09.548] | length: 5 (resolved future 1)
[08:08:09.548] value() for listenv ... done
[08:08:09.549] checking value #2:
[08:08:09.549] 'obj' is MultisessionFuture
[08:08:09.549] MultisessionFuture #2
[08:08:09.549] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:09.549] | nx: 6
[08:08:09.549] | relay: TRUE
[08:08:09.549] | stdout: TRUE
[08:08:09.549] | signal: TRUE
[08:08:09.549] | resignal: FALSE
[08:08:09.549] | force: TRUE
[08:08:09.549] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:09.550] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:09.550] | until=2
[08:08:09.550] | relaying element #2
[08:08:09.550] | value() for MultisessionFuture (<unnamed-106>) ...
[08:08:09.550] | : result() for ClusterFuture ...
[08:08:09.550] | : . result already collected: FutureResult
[08:08:09.550] | : result() for ClusterFuture ... done
[08:08:09.550] | : result() for ClusterFuture ...
[08:08:09.550] | : . result already collected: FutureResult
[08:08:09.550] | : result() for ClusterFuture ... done
[08:08:09.551] | : signalConditions() ...
[08:08:09.551] | : . include = ‘immediateCondition’
[08:08:09.551] | : . exclude = 
[08:08:09.551] | : . resignal = FALSE
[08:08:09.551] | : . Number of conditions: 0
[08:08:09.551] | : .  int 0
[08:08:09.551] | : signalConditions() ... done
[08:08:09.552] | : relay stdout ...
[08:08:09.552] | : relay stdout ... done
[08:08:09.552] | : check for misuse ...
[08:08:09.552] | : check for misuse ... done
[08:08:09.552] | value() for MultisessionFuture (<unnamed-106>) ... done
[08:08:09.552] | result() for ClusterFuture ...
[08:08:09.552] | : result already collected: FutureResult
[08:08:09.552] | result() for ClusterFuture ... done
[08:08:09.552] | signalConditions() ...
[08:08:09.552] | : include = ‘immediateCondition’
[08:08:09.553] | : exclude = 
[08:08:09.553] | : resignal = FALSE
[08:08:09.553] | : Number of conditions: 0
[08:08:09.553] | :  int 0
[08:08:09.553] | signalConditions() ... done
[08:08:09.553] | result() for ClusterFuture ...
[08:08:09.553] | : result already collected: FutureResult
[08:08:09.554] | result() for ClusterFuture ... done
[08:08:09.554] | signalConditions() ...
[08:08:09.554] | : include = ‘condition’
[08:08:09.554] | : exclude = ‘error’, ‘immediateCondition’
[08:08:09.554] | : resignal = TRUE
[08:08:09.554] | : Number of conditions: 0
[08:08:09.554] | :  int 0
[08:08:09.555] | signalConditions() ... done
[08:08:09.555] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:09.555] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:09.555] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:09.555] value(<MultisessionFuture>, ...) ...
[08:08:09.555] value(<MultisessionFuture>, ...) ... done
[08:08:09.555] value() for MultisessionFuture (<unnamed-106>) ...
[08:08:09.555] | result() for ClusterFuture ...
[08:08:09.555] | : result already collected: FutureResult
[08:08:09.555] | result() for ClusterFuture ... done
[08:08:09.556] | result() for ClusterFuture ...
[08:08:09.556] | : result already collected: FutureResult
[08:08:09.556] | result() for ClusterFuture ... done
[08:08:09.556] | signalConditions() ...
[08:08:09.556] | : include = ‘immediateCondition’
[08:08:09.556] | : exclude = 
[08:08:09.556] | : resignal = FALSE
[08:08:09.556] | : Number of conditions: 0
[08:08:09.556] | :  int 0
[08:08:09.557] | signalConditions() ... done
[08:08:09.557] | check for misuse ...
[08:08:09.557] | check for misuse ... done
[08:08:09.557] value() for MultisessionFuture (<unnamed-106>) ... done
[08:08:09.557] value: <numeric>
[08:08:09.557] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:09.557] | nx: 6
[08:08:09.558] | relay: TRUE
[08:08:09.558] | stdout: TRUE
[08:08:09.558] | signal: TRUE
[08:08:09.558] | resignal: FALSE
[08:08:09.558] | force: TRUE
[08:08:09.558] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:09.558] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:09.558] | until=3
[08:08:09.558] | relaying element #3
[08:08:09.558] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:09.558] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:09.559] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:09.559] resolve() for MultisessionFuture ...
[08:08:09.559] resolve() for MultisessionFuture ... done
[08:08:09.559] length: 4 (resolved future 2)

[08:08:09.559] checking value #3:
[08:08:09.559] 'obj' is MultisessionFuture
[08:08:09.559] MultisessionFuture #3
[08:08:09.559] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:09.559] | nx: 6
[08:08:09.560] | relay: TRUE
[08:08:09.560] | stdout: TRUE
[08:08:09.560] | signal: TRUE
[08:08:09.560] | resignal: FALSE
[08:08:09.560] | force: TRUE
[08:08:09.560] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:09.560] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:09.560] | until=3
[08:08:09.560] | relaying element #3
[08:08:09.560] | value() for MultisessionFuture (<unnamed-107>) ...
[08:08:09.560] | : result() for ClusterFuture ...
[08:08:09.561] | : . result already collected: FutureResult
[08:08:09.561] | : result() for ClusterFuture ... done
[08:08:09.561] | : result() for ClusterFuture ...
[08:08:09.561] | : . result already collected: FutureResult
[08:08:09.561] | : result() for ClusterFuture ... done
[08:08:09.561] | : signalConditions() ...
[08:08:09.561] | : . include = ‘immediateCondition’
[08:08:09.561] | : . exclude = 
[08:08:09.561] | : . resignal = FALSE
[08:08:09.561] | : . Number of conditions: 0
[08:08:09.562] | : .  int 0
[08:08:09.562] | : signalConditions() ... done
[08:08:09.562] | : relay stdout ...
[08:08:09.562] | : relay stdout ... done
[08:08:09.562] | : check for misuse ...
[08:08:09.562] | : check for misuse ... done
[08:08:09.562] | value() for MultisessionFuture (<unnamed-107>) ... done
[08:08:09.563] | result() for ClusterFuture ...
[08:08:09.563] | : result already collected: FutureResult
[08:08:09.563] | result() for ClusterFuture ... done
[08:08:09.563] | signalConditions() ...
[08:08:09.563] | : include = ‘immediateCondition’
[08:08:09.563] | : exclude = 
[08:08:09.563] | : resignal = FALSE
[08:08:09.563] | : Number of conditions: 0
[08:08:09.563] | :  int 0
[08:08:09.564] | signalConditions() ... done
[08:08:09.564] | result() for ClusterFuture ...
[08:08:09.564] | : result already collected: FutureResult
[08:08:09.564] | result() for ClusterFuture ... done
[08:08:09.564] | signalConditions() ...
[08:08:09.564] | : include = ‘condition’
[08:08:09.564] | : exclude = ‘error’, ‘immediateCondition’
[08:08:09.564] | : resignal = TRUE
[08:08:09.565] | : Number of conditions: 0
[08:08:09.565] | :  int 0
[08:08:09.565] | signalConditions() ... done
[08:08:09.565] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:09.565] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:09.565] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:09.565] value(<MultisessionFuture>, ...) ...
[08:08:09.565] value(<MultisessionFuture>, ...) ... done
[08:08:09.566] value() for MultisessionFuture (<unnamed-107>) ...
[08:08:09.566] | result() for ClusterFuture ...
[08:08:09.566] | : result already collected: FutureResult
[08:08:09.566] | result() for ClusterFuture ... done
[08:08:09.566] | result() for ClusterFuture ...
[08:08:09.566] | : result already collected: FutureResult
[08:08:09.566] | result() for ClusterFuture ... done
[08:08:09.566] | signalConditions() ...
[08:08:09.566] | : include = ‘immediateCondition’
[08:08:09.566] | : exclude = 
[08:08:09.567] | : resignal = FALSE
[08:08:09.567] | : Number of conditions: 0
[08:08:09.567] | :  int 0
[08:08:09.567] | signalConditions() ... done
[08:08:09.567] | check for misuse ...
[08:08:09.567] | check for misuse ... done
[08:08:09.567] value() for MultisessionFuture (<unnamed-107>) ... done
[08:08:09.568] value: <NULL>
[08:08:09.568] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:09.568] | nx: 6
[08:08:09.568] | relay: TRUE
[08:08:09.568] | stdout: TRUE
[08:08:09.568] | signal: TRUE
[08:08:09.568] | resignal: FALSE
[08:08:09.568] | force: TRUE
[08:08:09.568] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:09.568] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:09.568] | until=4
[08:08:09.569] | relaying element #4
[08:08:09.569] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:09.569] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:09.569] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:09.569] resolve() for MultisessionFuture ...
[08:08:09.569] resolve() for MultisessionFuture ... done
[08:08:09.569] length: 3 (resolved future 3)

[08:08:09.569] checking value #4:
[08:08:09.569] 'obj' is MultisessionFuture
[08:08:09.570] resolved() for MultisessionFuture (<unnamed-108>) ...
[08:08:09.570] | Cluster node socket connection: index=4, id=1577
[08:08:09.570] | assertValidConnection() ...
[08:08:09.570] | : cluster node index: 1
[08:08:09.570] | assertValidConnection() ... done
[08:08:09.570] | receiveMessageFromWorker() for ClusterFuture ...
[08:08:09.571] | : cluster node index: 1
[08:08:09.571] | : [1] TRUE
[08:08:09.571] | : received data:
[08:08:09.571] | : List of 5
[08:08:09.571] | :  $ type   : chr "VALUE"
[08:08:09.571] | :  $ value  :List of 16
[08:08:09.571] | :   ..$ value              : num 4
[08:08:09.571] | :   ..$ visible            : logi TRUE
[08:08:09.571] | :   ..$ stdout             : chr ""
[08:08:09.571] | :   ..$ conditions         : list()
[08:08:09.571] | :   ..$ rng                : logi FALSE
[08:08:09.571] | :   ..$ seed               : NULL
[08:08:09.571] | :   ..$ misuseGlobalEnv    : NULL
[08:08:09.571] | :   ..$ misuseConnections  :List of 3
[08:08:09.571] | :   .. ..$ added   : NULL
[08:08:09.571] | :   .. ..$ removed : NULL
[08:08:09.571] | :   .. ..$ replaced: NULL
[08:08:09.571] | :   ..$ misuseDevices      : NULL
[08:08:09.571] | :   ..$ misuseDefaultDevice: list()
[08:08:09.571] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:09.571] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:09.571] | :   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "108"
[08:08:09.571] | :   ..$ session_uuid       : chr "272d3c9c235e1bff6dddaa89109c42b3"
[08:08:09.571] | :   .. ..- attr(*, "source")=List of 5
[08:08:09.571] | :   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:09.571] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:09.571] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:09.571] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:09.571] | :   .. .. ..$ pid   : int 69173
[08:08:09.571] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:09.571] | :   .. .. ..$ random: int 2147483647
[08:08:09.571] | :   ..$ r_info             :List of 4
[08:08:09.571] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:09.571] | :   .. .. ..$ : int [1:3] 4 5 1
[08:08:09.571] | :   .. ..$ os           : chr "unix"
[08:08:09.571] | :   .. ..$ os_name      : chr "Linux"
[08:08:09.571] | :   .. ..$ captures_utf8: logi TRUE
[08:08:09.571] | :   ..$ version            : chr "1.8"
[08:08:09.571] | :   ..- attr(*, "class")= chr "FutureResult"
[08:08:09.571] | :  $ success: logi TRUE
[08:08:09.571] | :  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:09.571] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:09.571] | :  $ tag    : NULL
[08:08:09.582] | : Received FutureResult
[08:08:09.582] | : FutureResult:
[08:08:09.582] | : value: ‘numeric’
[08:08:09.582] | : visible: TRUE
[08:08:09.582] | : stdout: character
[08:08:09.582] | : conditions: [n = 0] 
[08:08:09.582] | : RNG used: FALSE
[08:08:09.582] | : duration: 0.002610445 secs (started 2025-06-17 08:08:09.554827)
[08:08:09.582] | : version: 1.8
[08:08:09.582] | : FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ...
[08:08:09.582] | : . Removed future from position #1
[08:08:09.583] | : . Number of registered futures: 0
[08:08:09.583] | : FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ... done
[08:08:09.583] | : Erased future from future backend
[08:08:09.583] | : result() for ClusterFuture ...
[08:08:09.583] | : . result already collected: FutureResult
[08:08:09.583] | : result() for ClusterFuture ... done
[08:08:09.583] | : signalConditions() ...
[08:08:09.583] | : . include = ‘immediateCondition’
[08:08:09.583] | : . exclude = 
[08:08:09.583] | : . resignal = FALSE
[08:08:09.584] | : . Number of conditions: 0
[08:08:09.584] | : .  int 0
[08:08:09.586] | : signalConditions() ... done
[08:08:09.586] | receiveMessageFromWorker() for ClusterFuture ... done
[08:08:09.586] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:09.586] resolved() for MultisessionFuture (<unnamed-108>) ... done
[08:08:09.586] assertFutureResult() ...
[08:08:09.587] | Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:09.587] | Future uuid: 108
[08:08:09.587] | identical; success
[08:08:09.587] assertFutureResult() ... done
[08:08:09.587] MultisessionFuture #4
[08:08:09.587] signalConditionsASAP(MultisessionFuture, pos=4) ...
[08:08:09.587] | nx: 6
[08:08:09.587] | relay: TRUE
[08:08:09.587] | stdout: TRUE
[08:08:09.587] | signal: TRUE
[08:08:09.587] | resignal: FALSE
[08:08:09.587] | force: TRUE
[08:08:09.587] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:09.588] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:09.588] | until=4
[08:08:09.588] | relaying element #4
[08:08:09.588] | value() for MultisessionFuture (<unnamed-108>) ...
[08:08:09.588] | : result() for ClusterFuture ...
[08:08:09.588] | : . result already collected: FutureResult
[08:08:09.588] | : result() for ClusterFuture ... done
[08:08:09.588] | : result() for ClusterFuture ...
[08:08:09.588] | : . result already collected: FutureResult
[08:08:09.588] | : result() for ClusterFuture ... done
[08:08:09.589] | : signalConditions() ...
[08:08:09.589] | : . include = ‘immediateCondition’
[08:08:09.589] | : . exclude = 
[08:08:09.589] | : . resignal = FALSE
[08:08:09.589] | : . Number of conditions: 0
[08:08:09.589] | : .  int 0
[08:08:09.589] | : signalConditions() ... done
[08:08:09.590] | : relay stdout ...
[08:08:09.590] | : relay stdout ... done
[08:08:09.590] | : check for misuse ...
[08:08:09.590] | : check for misuse ... done
[08:08:09.590] | value() for MultisessionFuture (<unnamed-108>) ... done
[08:08:09.590] | result() for ClusterFuture ...
[08:08:09.590] | : result already collected: FutureResult
[08:08:09.590] | result() for ClusterFuture ... done
[08:08:09.590] | signalConditions() ...
[08:08:09.590] | : include = ‘immediateCondition’
[08:08:09.591] | : exclude = 
[08:08:09.591] | : resignal = FALSE
[08:08:09.591] | : Number of conditions: 0
[08:08:09.591] | :  int 0
[08:08:09.591] | signalConditions() ... done
[08:08:09.591] | result() for ClusterFuture ...
[08:08:09.591] | : result already collected: FutureResult
[08:08:09.591] | result() for ClusterFuture ... done
[08:08:09.592] | signalConditions() ...
[08:08:09.592] | : include = ‘condition’
[08:08:09.592] | : exclude = ‘error’, ‘immediateCondition’
[08:08:09.592] | : resignal = TRUE
[08:08:09.592] | : Number of conditions: 0
[08:08:09.592] | :  int 0
[08:08:09.592] | signalConditions() ... done
[08:08:09.593] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:09.593] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:09.593] signalConditionsASAP(MultisessionFuture, pos=4) ... done
[08:08:09.593] value(<MultisessionFuture>, ...) ...
[08:08:09.593] value(<MultisessionFuture>, ...) ... done
[08:08:09.593] value() for MultisessionFuture (<unnamed-108>) ...
[08:08:09.593] | result() for ClusterFuture ...
[08:08:09.593] | : result already collected: FutureResult
[08:08:09.593] | result() for ClusterFuture ... done
[08:08:09.593] | result() for ClusterFuture ...
[08:08:09.594] | : result already collected: FutureResult
[08:08:09.594] | result() for ClusterFuture ... done
[08:08:09.594] | signalConditions() ...
[08:08:09.594] | : include = ‘immediateCondition’
[08:08:09.594] | : exclude = 
[08:08:09.594] | : resignal = FALSE
[08:08:09.594] | : Number of conditions: 0
[08:08:09.594] | :  int 0
[08:08:09.595] | signalConditions() ... done
[08:08:09.595] | check for misuse ...
[08:08:09.595] | check for misuse ... done
[08:08:09.595] value() for MultisessionFuture (<unnamed-108>) ... done
[08:08:09.595] value: <numeric>
[08:08:09.595] signalConditionsASAP(MultisessionFuture, pos=4) ...
[08:08:09.595] | nx: 6
[08:08:09.595] | relay: TRUE
[08:08:09.595] | stdout: TRUE
[08:08:09.595] | signal: TRUE
[08:08:09.596] | resignal: FALSE
[08:08:09.596] | force: TRUE
[08:08:09.596] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:09.596] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:09.596] | until=5
[08:08:09.596] | relaying element #5
[08:08:09.596] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:09.596] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:09.596] signalConditionsASAP(MultisessionFuture, pos=4) ... done
[08:08:09.596] resolve() for MultisessionFuture ...
[08:08:09.597] resolve() for MultisessionFuture ... done
[08:08:09.597] length: 2 (resolved future 4)

[08:08:09.597] checking value #5:
[08:08:09.597] 'obj' is NULL
[08:08:09.597] signalConditionsASAP(NULL, pos=5) ...
[08:08:09.597] | nx: 6
[08:08:09.597] | relay: TRUE
[08:08:09.597] | stdout: TRUE
[08:08:09.597] | signal: TRUE
[08:08:09.597] | resignal: FALSE
[08:08:09.598] | force: TRUE
[08:08:09.598] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:09.598] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:09.598] | until=6
[08:08:09.598] | relaying element #6
[08:08:09.598] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:09.598] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:09.598] signalConditionsASAP(NULL, pos=5) ... done
[08:08:09.598] signalConditionsASAP(NULL, pos=5) ...
[08:08:09.598] | nx: 6
[08:08:09.599] | relay: TRUE
[08:08:09.599] | stdout: TRUE
[08:08:09.599] | signal: TRUE
[08:08:09.599] | resignal: FALSE
[08:08:09.599] | force: TRUE
[08:08:09.599] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:09.599] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:09.599] | until=6
[08:08:09.599] | relaying element #6
[08:08:09.599] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:09.599] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:09.600] signalConditionsASAP(NULL, pos=5) ... done
[08:08:09.600] length: 1 (resolved future 5)

[08:08:09.600] checking value #6:
[08:08:09.600] 'obj' is atomic
[08:08:09.600] signalConditionsASAP(numeric, pos=6) ...
[08:08:09.600] | nx: 6
[08:08:09.600] | relay: TRUE
[08:08:09.600] | stdout: TRUE
[08:08:09.600] | signal: TRUE
[08:08:09.601] | resignal: FALSE
[08:08:09.601] | force: TRUE
[08:08:09.601] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:09.601] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:09.601] | until=6
[08:08:09.601] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:09.601] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:09.601] signalConditionsASAP(numeric, pos=6) ... done
[08:08:09.601] length: 0 (resolved future 6)

[08:08:09.602] Relaying remaining futures ...
[08:08:09.602] | signalConditionsASAP(NULL, pos=0) ...
[08:08:09.602] | : nx: 6
[08:08:09.602] | : relay: TRUE
[08:08:09.602] | : stdout: TRUE
[08:08:09.602] | : signal: TRUE
[08:08:09.602] | : resignal: FALSE
[08:08:09.602] | : force: TRUE
[08:08:09.602] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:09.602] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:09.603] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:09.603] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:09.603] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:09.603] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
Dimensions: c(1, 6)
[08:08:09.605] future(..., label = NULL) ...
[08:08:09.605] | lazy: FALSE
[08:08:09.605] | stdout: TRUE
[08:08:09.605] | conditions: [n=1] ‘condition’
[08:08:09.605] | gc: FALSE
[08:08:09.606] | earlySignal: FALSE
[08:08:09.606] | getGlobalsAndPackages() ...
[08:08:09.606] | : Searching for globals ...
[08:08:09.607] | : . globals found: [0] 
[08:08:09.607] | : Searching for globals ... done
[08:08:09.607] | : globals: [0] <none>
[08:08:09.607] | : packages: [0] <none>
[08:08:09.607] | getGlobalsAndPackages() ... done
[08:08:09.608] | run() for ‘Future’ (<unnamed-109>) ...
[08:08:09.608] | : state: ‘created’
[08:08:09.608] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:09.608] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:09.608] | : Using MultisessionFutureBackend ...
[08:08:09.608] | : . Number of futures since start: 3 (3 created, 3 launched, 4 finished)
[08:08:09.608] | : . Launching futures ...
[08:08:09.608] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:09.609] | : . ' , Workers: [n=2]
[08:08:09.609] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:09.610] | : . ' , FutureRegistry: ‘workers-e8f111193b2bc48aa139bb2932499cca’
[08:08:09.610] | : . ' , requestWorker() ...
[08:08:09.610] | : . ' , ; requestNode() ...
[08:08:09.610] | : . ' , ; ` Number of workers: 2
[08:08:09.611] | : . ' , ; ` Polling for a free worker ...
[08:08:09.611] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:09.611] | : . ' , ; ` | : Listing all futures
[08:08:09.611] | : . ' , ; ` | : Number of registered futures: 0
[08:08:09.611] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:09.611] | : . ' , ; ` | Total time: 0
[08:08:09.611] | : . ' , ; ` Polling for a free worker ... done
[08:08:09.611] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:09.611] | : . ' , ; ` | Listing all futures
[08:08:09.611] | : . ' , ; ` | Number of registered futures: 0
[08:08:09.612] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:09.612] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:09.612] | : . ' , ; ` Index of first available worker: 1
[08:08:09.612] | : . ' , ; ` Validate that the worker is functional ...
[08:08:09.710] | : . ' , ; ` | Worker is functional
[08:08:09.711] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:09.711] | : . ' , ; ` | : Listing all futures
[08:08:09.711] | : . ' , ; ` | : Number of registered futures: 0
[08:08:09.711] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:09.711] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:09.711] | : . ' , ; requestNode() ... done
[08:08:09.711] | : . ' , ; cluster node index: 1
[08:08:09.712] | : . ' , requestWorker() ... done
[08:08:09.712] | : . ' , eraseGlobalEnvironment() ...
[08:08:09.712] | : . ' , eraseGlobalEnvironment() ... done
[08:08:09.712] | : . ' , launchFuture() ...
[08:08:09.712] | : . ' , ; cluster node index: 1
[08:08:09.712] | : . ' , ; getFutureData() ...
[08:08:09.712] | : . ' , ; ` getFutureCore() ...
[08:08:09.713] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:09.713] | : . ' , ; ` getFutureCore() ... done
[08:08:09.713] | : . ' , ; ` getFutureCapture() ...
[08:08:09.713] | : . ' , ; ` getFutureCapture() ... done
[08:08:09.713] | : . ' , ; ` getFutureContext() ...
[08:08:09.713] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:09.713] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:09.713] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:09.713] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:09.713] | : . ' , ; ` getFutureContext() ... done
[08:08:09.714] | : . ' , ; getFutureData() ... done
[08:08:09.714] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ...
[08:08:09.714] | : . ' , ; ` Appended future to position #1
[08:08:09.714] | : . ' , ; ` Number of registered futures: 1
[08:08:09.714] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ... done
[08:08:09.714] | : . ' , launchFuture() ... done
[08:08:09.714] | : . ' , MultisessionFuture started
[08:08:09.715] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:09.715] | : . Launching futures ... done
[08:08:09.715] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:09.715] | : Using MultisessionFutureBackend ... done
[08:08:09.715] | run() for ‘Future’ (<unnamed-109>) ... done
[08:08:09.715] future(..., label = NULL) ... done
[08:08:09.715] future(..., label = NULL) ...
[08:08:09.715] | lazy: FALSE
[08:08:09.715] | stdout: TRUE
[08:08:09.716] | conditions: [n=1] ‘condition’
[08:08:09.716] | gc: FALSE
[08:08:09.716] | earlySignal: FALSE
[08:08:09.716] | getGlobalsAndPackages() ...
[08:08:09.716] | : Searching for globals ...
[08:08:09.717] | : . globals found: [0] 
[08:08:09.717] | : Searching for globals ... done
[08:08:09.717] | : globals: [0] <none>
[08:08:09.717] | : packages: [0] <none>
[08:08:09.717] | getGlobalsAndPackages() ... done
[08:08:09.718] | run() for ‘Future’ (<unnamed-110>) ...
[08:08:09.718] | : state: ‘created’
[08:08:09.718] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:09.718] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:09.718] | : Using MultisessionFutureBackend ...
[08:08:09.718] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:09.718] | : . Launching futures ...
[08:08:09.719] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:09.719] | : . ' , Workers: [n=2]
[08:08:09.719] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:09.720] | : . ' , FutureRegistry: ‘workers-e8f111193b2bc48aa139bb2932499cca’
[08:08:09.720] | : . ' , requestWorker() ...
[08:08:09.720] | : . ' , ; requestNode() ...
[08:08:09.721] | : . ' , ; ` Number of workers: 2
[08:08:09.721] | : . ' , ; ` Polling for a free worker ...
[08:08:09.721] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:09.721] | : . ' , ; ` | : Listing all futures
[08:08:09.721] | : . ' , ; ` | : Number of registered futures: 1
[08:08:09.721] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:09.721] | : . ' , ; ` | Total time: 0
[08:08:09.721] | : . ' , ; ` Polling for a free worker ... done
[08:08:09.721] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:09.722] | : . ' , ; ` | Listing all futures
[08:08:09.722] | : . ' , ; ` | Number of registered futures: 1
[08:08:09.722] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:09.722] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:09.722] | : . ' , ; ` Index of first available worker: 2
[08:08:09.722] | : . ' , ; ` Validate that the worker is functional ...
[08:08:09.782] | : . ' , ; ` | Worker is functional
[08:08:09.783] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:09.783] | : . ' , ; ` | : Listing all futures
[08:08:09.783] | : . ' , ; ` | : Number of registered futures: 1
[08:08:09.783] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:09.783] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:09.783] | : . ' , ; requestNode() ... done
[08:08:09.783] | : . ' , ; cluster node index: 2
[08:08:09.783] | : . ' , requestWorker() ... done
[08:08:09.783] | : . ' , eraseGlobalEnvironment() ...
[08:08:09.784] | : . ' , eraseGlobalEnvironment() ... done
[08:08:09.784] | : . ' , launchFuture() ...
[08:08:09.784] | : . ' , ; cluster node index: 2
[08:08:09.784] | : . ' , ; getFutureData() ...
[08:08:09.784] | : . ' , ; ` getFutureCore() ...
[08:08:09.784] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:09.784] | : . ' , ; ` getFutureCore() ... done
[08:08:09.785] | : . ' , ; ` getFutureCapture() ...
[08:08:09.785] | : . ' , ; ` getFutureCapture() ... done
[08:08:09.785] | : . ' , ; ` getFutureContext() ...
[08:08:09.785] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:09.785] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:09.785] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:09.785] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:09.785] | : . ' , ; ` getFutureContext() ... done
[08:08:09.785] | : . ' , ; getFutureData() ... done
[08:08:09.786] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ...
[08:08:09.786] | : . ' , ; ` Appended future to position #2
[08:08:09.786] | : . ' , ; ` Number of registered futures: 2
[08:08:09.786] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ... done
[08:08:09.786] | : . ' , launchFuture() ... done
[08:08:09.786] | : . ' , MultisessionFuture started
[08:08:09.786] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:09.787] | : . Launching futures ... done
[08:08:09.787] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:09.787] | : Using MultisessionFutureBackend ... done
[08:08:09.787] | run() for ‘Future’ (<unnamed-110>) ... done
[08:08:09.787] future(..., label = NULL) ... done
[08:08:09.787] future(..., label = NULL) ...
[08:08:09.787] | lazy: FALSE
[08:08:09.788] | stdout: TRUE
[08:08:09.788] | conditions: [n=1] ‘condition’
[08:08:09.788] | gc: FALSE
[08:08:09.788] | earlySignal: FALSE
[08:08:09.788] | getGlobalsAndPackages() ...
[08:08:09.788] | : Searching for globals ...
[08:08:09.791] | : . globals found: [1] ‘{’
[08:08:09.791] | : Searching for globals ... done
[08:08:09.791] | : Resolving globals: FALSE
[08:08:09.791] | : Search for packages associated with the globals ...
[08:08:09.792] | : . Packages associated with globals: [1] ‘base’
[08:08:09.792] | : . Packages: [1] ‘base’
[08:08:09.792] | : Search for packages associated with the globals ... done
[08:08:09.792] | : Packages after dropping 'base': [0] 
[08:08:09.792] | : globals: [0] 
[08:08:09.792] | : packages: [0] 
[08:08:09.792] | getGlobalsAndPackages() ... done
[08:08:09.793] | run() for ‘Future’ (<unnamed-111>) ...
[08:08:09.793] | : state: ‘created’
[08:08:09.793] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:09.793] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:09.793] | : Using MultisessionFutureBackend ...
[08:08:09.793] | : . Number of futures since start: 5 (5 created, 5 launched, 4 finished)
[08:08:09.793] | : . Launching futures ...
[08:08:09.793] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:09.794] | : . ' , Workers: [n=2]
[08:08:09.794] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:09.795] | : . ' , FutureRegistry: ‘workers-e8f111193b2bc48aa139bb2932499cca’
[08:08:09.795] | : . ' , requestWorker() ...
[08:08:09.795] | : . ' , ; requestNode() ...
[08:08:09.796] | : . ' , ; ` Number of workers: 2
[08:08:09.796] | : . ' , ; ` Polling for a free worker ...
[08:08:09.796] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:09.796] | : . ' , ; ` | : Listing all futures
[08:08:09.796] | : . ' , ; ` | : Number of registered futures: 2
[08:08:09.796] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:09.796] | : . ' , ; ` | Poll #1 (0): usedNodes() = 2, workers = 2
[08:08:09.806] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'collect-first', earlySignal = 1) ...
[08:08:09.807] | : . ' , ; ` | : collectValues('workers-e8f111193b2bc48aa139bb2932499cca', firstOnly = TRUE) ...
[08:08:09.807] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-109>) ...
[08:08:09.807] | : . ' , ; ` | : . ' Cluster node socket connection: index=4, id=1577
[08:08:09.807] | : . ' , ; ` | : . ' assertValidConnection() ...
[08:08:09.808] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:09.808] | : . ' , ; ` | : . ' assertValidConnection() ... done
[08:08:09.808] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ...
[08:08:09.808] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:09.808] | : . ' , ; ` | : . ' , [1] TRUE
[08:08:09.809] | : . ' , ; ` | : . ' , received data:
[08:08:09.811] | : . ' , ; ` | : . ' , List of 5
[08:08:09.811] | : . ' , ; ` | : . ' ,  $ type   : chr "VALUE"
[08:08:09.811] | : . ' , ; ` | : . ' ,  $ value  :List of 16
[08:08:09.811] | : . ' , ; ` | : . ' ,   ..$ value              : num 2
[08:08:09.811] | : . ' , ; ` | : . ' ,   ..$ visible            : logi TRUE
[08:08:09.811] | : . ' , ; ` | : . ' ,   ..$ stdout             : chr ""
[08:08:09.811] | : . ' , ; ` | : . ' ,   ..$ conditions         : list()
[08:08:09.811] | : . ' , ; ` | : . ' ,   ..$ rng                : logi FALSE
[08:08:09.811] | : . ' , ; ` | : . ' ,   ..$ seed               : NULL
[08:08:09.811] | : . ' , ; ` | : . ' ,   ..$ misuseGlobalEnv    : NULL
[08:08:09.811] | : . ' , ; ` | : . ' ,   ..$ misuseConnections  :List of 3
[08:08:09.811] | : . ' , ; ` | : . ' ,   .. ..$ added   : NULL
[08:08:09.811] | : . ' , ; ` | : . ' ,   .. ..$ removed : NULL
[08:08:09.811] | : . ' , ; ` | : . ' ,   .. ..$ replaced: NULL
[08:08:09.811] | : . ' , ; ` | : . ' ,   ..$ misuseDevices      : NULL
[08:08:09.811] | : . ' , ; ` | : . ' ,   ..$ misuseDefaultDevice: list()
[08:08:09.811] | : . ' , ; ` | : . ' ,   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:09.811] | : . ' , ; ` | : . ' ,   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:09.811] | : . ' , ; ` | : . ' ,   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "109"
[08:08:09.811] | : . ' , ; ` | : . ' ,   ..$ session_uuid       : chr "272d3c9c235e1bff6dddaa89109c42b3"
[08:08:09.811] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "source")=List of 5
[08:08:09.811] | : . ' , ; ` | : . ' ,   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:09.811] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:09.811] | : . ' , ; ` | : . ' ,   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:09.811] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:09.811] | : . ' , ; ` | : . ' ,   .. .. ..$ pid   : int 69173
[08:08:09.811] | : . ' , ; ` | : . ' ,   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:09.811] | : . ' , ; ` | : . ' ,   .. .. ..$ random: int 2147483647
[08:08:09.811] | : . ' , ; ` | : . ' ,   ..$ r_info             :List of 4
[08:08:09.811] | : . ' , ; ` | : . ' ,   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:09.811] | : . ' , ; ` | : . ' ,   .. .. ..$ : int [1:3] 4 5 1
[08:08:09.811] | : . ' , ; ` | : . ' ,   .. ..$ os           : chr "unix"
[08:08:09.811] | : . ' , ; ` | : . ' ,   .. ..$ os_name      : chr "Linux"
[08:08:09.811] | : . ' , ; ` | : . ' ,   .. ..$ captures_utf8: logi TRUE
[08:08:09.811] | : . ' , ; ` | : . ' ,   ..$ version            : chr "1.8"
[08:08:09.811] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr "FutureResult"
[08:08:09.811] | : . ' , ; ` | : . ' ,  $ success: logi TRUE
[08:08:09.811] | : . ' , ; ` | : . ' ,  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.005 0 0
[08:08:09.811] | : . ' , ; ` | : . ' ,   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:09.811] | : . ' , ; ` | : . ' ,  $ tag    : NULL
[08:08:09.822] | : . ' , ; ` | : . ' , Received FutureResult
[08:08:09.822] | : . ' , ; ` | : . ' , FutureResult:
[08:08:09.822] | : . ' , ; ` | : . ' , value: ‘numeric’
[08:08:09.822] | : . ' , ; ` | : . ' , visible: TRUE
[08:08:09.822] | : . ' , ; ` | : . ' , stdout: character
[08:08:09.822] | : . ' , ; ` | : . ' , conditions: [n = 0] 
[08:08:09.822] | : . ' , ; ` | : . ' , RNG used: FALSE
[08:08:09.822] | : . ' , ; ` | : . ' , duration: 0.003679752 secs (started 2025-06-17 08:08:09.754859)
[08:08:09.822] | : . ' , ; ` | : . ' , version: 1.8
[08:08:09.822] | : . ' , ; ` | : . ' , FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ...
[08:08:09.822] | : . ' , ; ` | : . ' , ; Removed future from position #1
[08:08:09.822] | : . ' , ; ` | : . ' , ; Number of registered futures: 1
[08:08:09.822] | : . ' , ; ` | : . ' , FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ... done
[08:08:09.823] | : . ' , ; ` | : . ' , Erased future from future backend
[08:08:09.823] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:09.823] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:09.823] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:09.823] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:09.823] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:09.823] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:09.823] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:09.823] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:09.823] | : . ' , ; ` | : . ' , ;  int 0
[08:08:09.824] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:09.824] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ... done
[08:08:09.824] | : . ' , ; ` | : . ' receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:09.824] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-109>) ... done
[08:08:09.824] | : . ' , ; ` | : . assertFutureResult() ...
[08:08:09.824] | : . ' , ; ` | : . ' Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:09.824] | : . ' , ; ` | : . ' Future uuid: 109
[08:08:09.825] | : . ' , ; ` | : . ' identical; success
[08:08:09.825] | : . ' , ; ` | : . assertFutureResult() ... done
[08:08:09.825] | : . ' , ; ` | : . Future at position #1 is resolved ...
[08:08:09.825] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-109>) ...
[08:08:09.825] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:09.825] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:09.825] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:09.825] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:09.825] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:09.826] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:09.826] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:09.826] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:09.826] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:09.826] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:09.826] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:09.826] | : . ' , ; ` | : . ' , ;  int 0
[08:08:09.827] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:09.827] | : . ' , ; ` | : . ' , check for misuse ...
[08:08:09.827] | : . ' , ; ` | : . ' , check for misuse ... done
[08:08:09.827] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-109>) ... done
[08:08:09.827] | : . ' , ; ` | : . Future at position #1 is resolved ... done
[08:08:09.827] | : . ' , ; ` | : collectValues('workers-e8f111193b2bc48aa139bb2932499cca', firstOnly = TRUE) ... done
[08:08:09.827] | : . ' , ; ` | : Remove collected futures ...
[08:08:09.827] | : . ' , ; ` | : . Indices of futures to drop: [n=1] ‘1’
[08:08:09.828] | : . ' , ; ` | : Remove collected futures ... done
[08:08:09.828] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'collect-first', earlySignal = 1) ... done
[08:08:09.828] | : . ' , ; ` | Early signaling of 2 future candidates ...
[08:08:09.828] | : . ' , ; ` | Number of futures with early signaling requested: 0
[08:08:09.828] | : . ' , ; ` | Early signaling of 2 future candidates ... done
[08:08:09.828] | : . ' , ; ` | Number of registered futures: 2
[08:08:09.828] | : . ' , ; ` Polling for a free worker ... done
[08:08:09.828] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:09.828] | : . ' , ; ` | Listing all futures
[08:08:09.828] | : . ' , ; ` | Number of registered futures: 1
[08:08:09.829] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:09.829] | : . ' , ; ` Total time: 0.0324311256408691
[08:08:09.829] | : . ' , ; requestNode() ... done
[08:08:09.829] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:09.829] | : . ' , ; ` Listing all futures
[08:08:09.829] | : . ' , ; ` Number of registered futures: 1
[08:08:09.829] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:09.829] | : . ' , ; avail: [n=2] ‘1’
[08:08:09.829] | : . ' , ; Index of first available worker: 1
[08:08:09.829] | : . ' , ; Validate that the worker is functional ...
[08:08:09.936] | : . ' , ; ` Worker is functional
[08:08:09.936] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:09.936] | : . ' , ; ` | Listing all futures
[08:08:09.936] | : . ' , ; ` | Number of registered futures: 1
[08:08:09.936] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:09.936] | : . ' , ; Validate that the worker is functional ... done
[08:08:09.937] | : . ' , requestWorker() ... done
[08:08:09.937] | : . ' , cluster node index: 1
[08:08:09.937] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:09.937] | : . ' eraseGlobalEnvironment() ...
[08:08:09.937] | : . ' eraseGlobalEnvironment() ... done
[08:08:09.937] | : . ' launchFuture() ...
[08:08:09.938] | : . ' , cluster node index: 1
[08:08:09.938] | : . ' , getFutureData() ...
[08:08:09.938] | : . ' , ; getFutureCore() ...
[08:08:09.938] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:09.938] | : . ' , ; getFutureCore() ... done
[08:08:09.938] | : . ' , ; getFutureCapture() ...
[08:08:09.938] | : . ' , ; getFutureCapture() ... done
[08:08:09.938] | : . ' , ; getFutureContext() ...
[08:08:09.938] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:09.939] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:09.939] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:09.939] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:09.939] | : . ' , ; getFutureContext() ... done
[08:08:09.939] | : . ' , getFutureData() ... done
[08:08:09.939] | : . ' , FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ...
[08:08:09.939] | : . ' , ; Appended future to position #2
[08:08:09.940] | : . ' , ; Number of registered futures: 2
[08:08:09.940] | : . ' , FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ... done
[08:08:09.940] | : . ' launchFuture() ... done
[08:08:09.940] | : . ' MultisessionFuture started
[08:08:09.940] | : . Launching futures ... done
[08:08:09.940] | : Using MultisessionFutureBackend ... done
[08:08:09.940] | : Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:09.940] | run() for ‘Future’ (<unnamed-111>) ... done
[08:08:09.940] future(..., label = NULL) ... done

Classes 'listenv', 'environment' <environment: 0x556759eda458> 
Classes 'listenv', 'environment' <environment: 0x55675c9bca88> 
 - attr(*, "dim.")= int [1:2] 1 6
 - attr(*, "dimnames.")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
[08:08:09.943] resolved() for listenv ...
[08:08:09.944] | resolved() for matrix ...
[08:08:09.944] | : Number of elements: 6
[08:08:09.945] | : Number of futures: 6
[08:08:09.945] | : resolved() for MultisessionFuture (<unnamed-110>) ...
[08:08:09.945] | : . Cluster node socket connection: index=5, id=1578
[08:08:09.945] | : . assertValidConnection() ...
[08:08:09.945] | : . ' cluster node index: 2
[08:08:09.945] | : . assertValidConnection() ... done
[08:08:09.946] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:09.946] | : . ' cluster node index: 2
[08:08:09.946] | : . ' [1] TRUE
[08:08:09.946] | : . ' received data:
[08:08:09.946] | : . ' List of 5
[08:08:09.946] | : . '  $ type   : chr "VALUE"
[08:08:09.946] | : . '  $ value  :List of 16
[08:08:09.946] | : . '   ..$ value              : NULL
[08:08:09.946] | : . '   ..$ visible            : logi TRUE
[08:08:09.946] | : . '   ..$ stdout             : chr ""
[08:08:09.946] | : . '   ..$ conditions         : list()
[08:08:09.946] | : . '   ..$ rng                : logi FALSE
[08:08:09.946] | : . '   ..$ seed               : NULL
[08:08:09.946] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:09.946] | : . '   ..$ misuseConnections  :List of 3
[08:08:09.946] | : . '   .. ..$ added   : NULL
[08:08:09.946] | : . '   .. ..$ removed : NULL
[08:08:09.946] | : . '   .. ..$ replaced: NULL
[08:08:09.946] | : . '   ..$ misuseDevices      : NULL
[08:08:09.946] | : . '   ..$ misuseDefaultDevice: list()
[08:08:09.946] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:09.946] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:09.946] | : . '   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "110"
[08:08:09.946] | : . '   ..$ session_uuid       : chr "318d9a862536e33b210e27df6cf2a506"
[08:08:09.946] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:09.946] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:09.946] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:09.946] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:09.946] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:09.946] | : . '   .. .. ..$ pid   : int 69172
[08:08:09.946] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:09.946] | : . '   .. .. ..$ random: int 2147483647
[08:08:09.946] | : . '   ..$ r_info             :List of 4
[08:08:09.946] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:09.946] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:09.946] | : . '   .. ..$ os           : chr "unix"
[08:08:09.946] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:09.946] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:09.946] | : . '   ..$ version            : chr "1.8"
[08:08:09.946] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:09.946] | : . '  $ success: logi TRUE
[08:08:09.946] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:09.946] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:09.946] | : . '  $ tag    : NULL
[08:08:09.957] | : . ' Received FutureResult
[08:08:09.957] | : . ' FutureResult:
[08:08:09.957] | : . ' value: ‘NULL’
[08:08:09.957] | : . ' visible: TRUE
[08:08:09.957] | : . ' stdout: character
[08:08:09.957] | : . ' conditions: [n = 0] 
[08:08:09.957] | : . ' RNG used: FALSE
[08:08:09.957] | : . ' duration: 0.002704144 secs (started 2025-06-17 08:08:09.826824)
[08:08:09.957] | : . ' version: 1.8
[08:08:09.958] | : . ' FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ...
[08:08:09.958] | : . ' , Removed future from position #1
[08:08:09.958] | : . ' , Number of registered futures: 1
[08:08:09.958] | : . ' FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ... done
[08:08:09.958] | : . ' Erased future from future backend
[08:08:09.958] | : . ' result() for ClusterFuture ...
[08:08:09.958] | : . ' , result already collected: FutureResult
[08:08:09.959] | : . ' result() for ClusterFuture ... done
[08:08:09.959] | : . ' signalConditions() ...
[08:08:09.959] | : . ' , include = ‘immediateCondition’
[08:08:09.959] | : . ' , exclude = 
[08:08:09.959] | : . ' , resignal = FALSE
[08:08:09.959] | : . ' , Number of conditions: 0
[08:08:09.959] | : . ' ,  int 0
[08:08:09.960] | : . ' signalConditions() ... done
[08:08:09.960] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:09.960] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:09.960] | : resolved() for MultisessionFuture (<unnamed-110>) ... done
[08:08:09.960] | : assertFutureResult() ...
[08:08:09.960] | : . Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:09.960] | : . Future uuid: 110
[08:08:09.960] | : . identical; success
[08:08:09.960] | : assertFutureResult() ... done
[08:08:09.960] | : resolved() for MultisessionFuture (<unnamed-111>) ...
[08:08:09.961] | : . Cluster node socket connection: index=4, id=1577
[08:08:09.961] | : . assertValidConnection() ...
[08:08:09.961] | : . ' cluster node index: 1
[08:08:09.961] | : . assertValidConnection() ... done
[08:08:09.971] | : . socketSelect(list(<connection #4 (id=1577)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:09.972] | : resolved() for MultisessionFuture (<unnamed-111>) ... done
[08:08:09.972] | resolved() for matrix ... done
[08:08:09.972] resolved() for listenv ... done
 logi [1, 1:6] TRUE TRUE TRUE FALSE TRUE TRUE
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:09.974] value() for listenv ...
[08:08:09.974] | recursive: 0
[08:08:09.974] | reduce: FALSE
[08:08:09.975] | length: 6
[08:08:09.975] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:09.975] | Number of remaining objects: 6
[08:08:09.975] | checking value #1:
[08:08:09.975] | 'obj' is atomic
[08:08:09.975] | signalConditionsASAP(numeric, pos=1) ...
[08:08:09.975] | : nx: 6
[08:08:09.976] | : relay: TRUE
[08:08:09.976] | : stdout: TRUE
[08:08:09.976] | : signal: TRUE
[08:08:09.976] | : resignal: FALSE
[08:08:09.976] | : force: TRUE
[08:08:09.976] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:09.976] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:09.976] | : until=2
[08:08:09.976] | : relaying element #2
[08:08:09.976] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:09.976] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:09.977] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:09.977] | length: 5 (resolved future 1)
[08:08:09.977] value() for listenv ... done
[08:08:09.977] checking value #2:
[08:08:09.977] 'obj' is MultisessionFuture
[08:08:09.977] MultisessionFuture #2
[08:08:09.977] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:09.977] | nx: 6
[08:08:09.978] | relay: TRUE
[08:08:09.978] | stdout: TRUE
[08:08:09.978] | signal: TRUE
[08:08:09.978] | resignal: FALSE
[08:08:09.978] | force: TRUE
[08:08:09.978] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:09.978] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:09.978] | until=2
[08:08:09.978] | relaying element #2
[08:08:09.978] | value() for MultisessionFuture (<unnamed-109>) ...
[08:08:09.978] | : result() for ClusterFuture ...
[08:08:09.979] | : . result already collected: FutureResult
[08:08:09.979] | : result() for ClusterFuture ... done
[08:08:09.979] | : result() for ClusterFuture ...
[08:08:09.979] | : . result already collected: FutureResult
[08:08:09.979] | : result() for ClusterFuture ... done
[08:08:09.979] | : signalConditions() ...
[08:08:09.979] | : . include = ‘immediateCondition’
[08:08:09.979] | : . exclude = 
[08:08:09.979] | : . resignal = FALSE
[08:08:09.979] | : . Number of conditions: 0
[08:08:09.980] | : .  int 0
[08:08:09.980] | : signalConditions() ... done
[08:08:09.980] | : relay stdout ...
[08:08:09.980] | : relay stdout ... done
[08:08:09.980] | : check for misuse ...
[08:08:09.980] | : check for misuse ... done
[08:08:09.981] | value() for MultisessionFuture (<unnamed-109>) ... done
[08:08:09.981] | result() for ClusterFuture ...
[08:08:09.981] | : result already collected: FutureResult
[08:08:09.981] | result() for ClusterFuture ... done
[08:08:09.981] | signalConditions() ...
[08:08:09.981] | : include = ‘immediateCondition’
[08:08:09.981] | : exclude = 
[08:08:09.981] | : resignal = FALSE
[08:08:09.981] | : Number of conditions: 0
[08:08:09.981] | :  int 0
[08:08:09.982] | signalConditions() ... done
[08:08:09.982] | result() for ClusterFuture ...
[08:08:09.982] | : result already collected: FutureResult
[08:08:09.982] | result() for ClusterFuture ... done
[08:08:09.982] | signalConditions() ...
[08:08:09.982] | : include = ‘condition’
[08:08:09.982] | : exclude = ‘error’, ‘immediateCondition’
[08:08:09.983] | : resignal = TRUE
[08:08:09.983] | : Number of conditions: 0
[08:08:09.983] | :  int 0
[08:08:09.983] | signalConditions() ... done
[08:08:09.983] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:09.983] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:09.983] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:09.984] value(<MultisessionFuture>, ...) ...
[08:08:09.984] value(<MultisessionFuture>, ...) ... done
[08:08:09.984] value() for MultisessionFuture (<unnamed-109>) ...
[08:08:09.984] | result() for ClusterFuture ...
[08:08:09.984] | : result already collected: FutureResult
[08:08:09.984] | result() for ClusterFuture ... done
[08:08:09.984] | result() for ClusterFuture ...
[08:08:09.984] | : result already collected: FutureResult
[08:08:09.984] | result() for ClusterFuture ... done
[08:08:09.984] | signalConditions() ...
[08:08:09.985] | : include = ‘immediateCondition’
[08:08:09.985] | : exclude = 
[08:08:09.985] | : resignal = FALSE
[08:08:09.985] | : Number of conditions: 0
[08:08:09.985] | :  int 0
[08:08:09.985] | signalConditions() ... done
[08:08:09.985] | check for misuse ...
[08:08:09.986] | check for misuse ... done
[08:08:09.986] value() for MultisessionFuture (<unnamed-109>) ... done
[08:08:09.986] value: <numeric>
[08:08:09.986] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:09.986] | nx: 6
[08:08:09.986] | relay: TRUE
[08:08:09.986] | stdout: TRUE
[08:08:09.986] | signal: TRUE
[08:08:09.986] | resignal: FALSE
[08:08:09.986] | force: TRUE
[08:08:09.987] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:09.987] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:09.987] | until=3
[08:08:09.987] | relaying element #3
[08:08:09.989] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:09.989] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:09.989] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:09.989] resolve() for MultisessionFuture ...
[08:08:09.989] resolve() for MultisessionFuture ... done
[08:08:09.989] length: 4 (resolved future 2)

[08:08:09.990] checking value #3:
[08:08:09.990] 'obj' is MultisessionFuture
[08:08:09.990] MultisessionFuture #3
[08:08:09.990] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:09.990] | nx: 6
[08:08:09.990] | relay: TRUE
[08:08:09.990] | stdout: TRUE
[08:08:09.990] | signal: TRUE
[08:08:09.990] | resignal: FALSE
[08:08:09.990] | force: TRUE
[08:08:09.991] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:09.991] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:09.991] | until=3
[08:08:09.991] | relaying element #3
[08:08:09.991] | value() for MultisessionFuture (<unnamed-110>) ...
[08:08:09.991] | : result() for ClusterFuture ...
[08:08:09.991] | : . result already collected: FutureResult
[08:08:09.991] | : result() for ClusterFuture ... done
[08:08:09.991] | : result() for ClusterFuture ...
[08:08:09.991] | : . result already collected: FutureResult
[08:08:09.992] | : result() for ClusterFuture ... done
[08:08:09.992] | : signalConditions() ...
[08:08:09.992] | : . include = ‘immediateCondition’
[08:08:09.992] | : . exclude = 
[08:08:09.992] | : . resignal = FALSE
[08:08:09.992] | : . Number of conditions: 0
[08:08:09.992] | : .  int 0
[08:08:09.993] | : signalConditions() ... done
[08:08:09.993] | : relay stdout ...
[08:08:09.993] | : relay stdout ... done
[08:08:09.993] | : check for misuse ...
[08:08:09.993] | : check for misuse ... done
[08:08:09.993] | value() for MultisessionFuture (<unnamed-110>) ... done
[08:08:09.993] | result() for ClusterFuture ...
[08:08:09.993] | : result already collected: FutureResult
[08:08:09.993] | result() for ClusterFuture ... done
[08:08:09.993] | signalConditions() ...
[08:08:09.994] | : include = ‘immediateCondition’
[08:08:09.994] | : exclude = 
[08:08:09.994] | : resignal = FALSE
[08:08:09.994] | : Number of conditions: 0
[08:08:09.994] | :  int 0
[08:08:09.994] | signalConditions() ... done
[08:08:09.994] | result() for ClusterFuture ...
[08:08:09.994] | : result already collected: FutureResult
[08:08:09.995] | result() for ClusterFuture ... done
[08:08:09.995] | signalConditions() ...
[08:08:09.995] | : include = ‘condition’
[08:08:09.995] | : exclude = ‘error’, ‘immediateCondition’
[08:08:09.995] | : resignal = TRUE
[08:08:09.995] | : Number of conditions: 0
[08:08:09.995] | :  int 0
[08:08:09.996] | signalConditions() ... done
[08:08:09.996] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:09.996] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:09.996] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:09.996] value(<MultisessionFuture>, ...) ...
[08:08:09.996] value(<MultisessionFuture>, ...) ... done
[08:08:09.996] value() for MultisessionFuture (<unnamed-110>) ...
[08:08:09.996] | result() for ClusterFuture ...
[08:08:09.996] | : result already collected: FutureResult
[08:08:09.996] | result() for ClusterFuture ... done
[08:08:09.996] | result() for ClusterFuture ...
[08:08:09.997] | : result already collected: FutureResult
[08:08:09.997] | result() for ClusterFuture ... done
[08:08:09.997] | signalConditions() ...
[08:08:09.997] | : include = ‘immediateCondition’
[08:08:09.997] | : exclude = 
[08:08:09.997] | : resignal = FALSE
[08:08:09.997] | : Number of conditions: 0
[08:08:09.997] | :  int 0
[08:08:09.998] | signalConditions() ... done
[08:08:09.998] | check for misuse ...
[08:08:09.998] | check for misuse ... done
[08:08:09.998] value() for MultisessionFuture (<unnamed-110>) ... done
[08:08:09.998] value: <NULL>
[08:08:09.998] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:09.998] | nx: 6
[08:08:09.998] | relay: TRUE
[08:08:09.998] | stdout: TRUE
[08:08:09.999] | signal: TRUE
[08:08:09.999] | resignal: FALSE
[08:08:09.999] | force: TRUE
[08:08:09.999] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:09.999] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:09.999] | until=4
[08:08:09.999] | relaying element #4
[08:08:09.999] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:09.999] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:09.999] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:09.999] resolve() for MultisessionFuture ...
[08:08:10.000] resolve() for MultisessionFuture ... done
[08:08:10.000] length: 3 (resolved future 3)

[08:08:10.000] checking value #4:
[08:08:10.000] 'obj' is MultisessionFuture
[08:08:10.000] resolved() for MultisessionFuture (<unnamed-111>) ...
[08:08:10.000] | Cluster node socket connection: index=4, id=1577
[08:08:10.000] | assertValidConnection() ...
[08:08:10.001] | : cluster node index: 1
[08:08:10.001] | assertValidConnection() ... done
[08:08:10.001] | receiveMessageFromWorker() for ClusterFuture ...
[08:08:10.001] | : cluster node index: 1
[08:08:10.001] | : [1] TRUE
[08:08:10.001] | : received data:
[08:08:10.002] | : List of 5
[08:08:10.002] | :  $ type   : chr "VALUE"
[08:08:10.002] | :  $ value  :List of 16
[08:08:10.002] | :   ..$ value              : num 4
[08:08:10.002] | :   ..$ visible            : logi TRUE
[08:08:10.002] | :   ..$ stdout             : chr ""
[08:08:10.002] | :   ..$ conditions         : list()
[08:08:10.002] | :   ..$ rng                : logi FALSE
[08:08:10.002] | :   ..$ seed               : NULL
[08:08:10.002] | :   ..$ misuseGlobalEnv    : NULL
[08:08:10.002] | :   ..$ misuseConnections  :List of 3
[08:08:10.002] | :   .. ..$ added   : NULL
[08:08:10.002] | :   .. ..$ removed : NULL
[08:08:10.002] | :   .. ..$ replaced: NULL
[08:08:10.002] | :   ..$ misuseDevices      : NULL
[08:08:10.002] | :   ..$ misuseDefaultDevice: list()
[08:08:10.002] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:10.002] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:10.002] | :   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "111"
[08:08:10.002] | :   ..$ session_uuid       : chr "272d3c9c235e1bff6dddaa89109c42b3"
[08:08:10.002] | :   .. ..- attr(*, "source")=List of 5
[08:08:10.002] | :   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:10.002] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:10.002] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:10.002] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:10.002] | :   .. .. ..$ pid   : int 69173
[08:08:10.002] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:10.002] | :   .. .. ..$ random: int 2147483647
[08:08:10.002] | :   ..$ r_info             :List of 4
[08:08:10.002] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:10.002] | :   .. .. ..$ : int [1:3] 4 5 1
[08:08:10.002] | :   .. ..$ os           : chr "unix"
[08:08:10.002] | :   .. ..$ os_name      : chr "Linux"
[08:08:10.002] | :   .. ..$ captures_utf8: logi TRUE
[08:08:10.002] | :   ..$ version            : chr "1.8"
[08:08:10.002] | :   ..- attr(*, "class")= chr "FutureResult"
[08:08:10.002] | :  $ success: logi TRUE
[08:08:10.002] | :  $ time   : 'proc_time' Named num [1:5] 0.002 0 0.003 0 0
[08:08:10.002] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:10.002] | :  $ tag    : NULL
[08:08:10.012] | : Received FutureResult
[08:08:10.012] | : FutureResult:
[08:08:10.012] | : value: ‘numeric’
[08:08:10.012] | : visible: TRUE
[08:08:10.012] | : stdout: character
[08:08:10.012] | : conditions: [n = 0] 
[08:08:10.012] | : RNG used: FALSE
[08:08:10.012] | : duration: 0.002590656 secs (started 2025-06-17 08:08:09.980875)
[08:08:10.012] | : version: 1.8
[08:08:10.013] | : FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ...
[08:08:10.013] | : . Removed future from position #1
[08:08:10.013] | : . Number of registered futures: 0
[08:08:10.013] | : FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ... done
[08:08:10.013] | : Erased future from future backend
[08:08:10.013] | : result() for ClusterFuture ...
[08:08:10.013] | : . result already collected: FutureResult
[08:08:10.014] | : result() for ClusterFuture ... done
[08:08:10.014] | : signalConditions() ...
[08:08:10.014] | : . include = ‘immediateCondition’
[08:08:10.014] | : . exclude = 
[08:08:10.014] | : . resignal = FALSE
[08:08:10.014] | : . Number of conditions: 0
[08:08:10.014] | : .  int 0
[08:08:10.015] | : signalConditions() ... done
[08:08:10.015] | receiveMessageFromWorker() for ClusterFuture ... done
[08:08:10.015] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:10.015] resolved() for MultisessionFuture (<unnamed-111>) ... done
[08:08:10.015] assertFutureResult() ...
[08:08:10.015] | Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:10.015] | Future uuid: 111
[08:08:10.015] | identical; success
[08:08:10.015] assertFutureResult() ... done
[08:08:10.015] MultisessionFuture #4
[08:08:10.015] signalConditionsASAP(MultisessionFuture, pos=4) ...
[08:08:10.015] | nx: 6
[08:08:10.016] | relay: TRUE
[08:08:10.016] | stdout: TRUE
[08:08:10.016] | signal: TRUE
[08:08:10.016] | resignal: FALSE
[08:08:10.016] | force: TRUE
[08:08:10.016] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:10.016] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:10.016] | until=4
[08:08:10.016] | relaying element #4
[08:08:10.016] | value() for MultisessionFuture (<unnamed-111>) ...
[08:08:10.017] | : result() for ClusterFuture ...
[08:08:10.017] | : . result already collected: FutureResult
[08:08:10.017] | : result() for ClusterFuture ... done
[08:08:10.017] | : result() for ClusterFuture ...
[08:08:10.017] | : . result already collected: FutureResult
[08:08:10.017] | : result() for ClusterFuture ... done
[08:08:10.017] | : signalConditions() ...
[08:08:10.017] | : . include = ‘immediateCondition’
[08:08:10.017] | : . exclude = 
[08:08:10.017] | : . resignal = FALSE
[08:08:10.017] | : . Number of conditions: 0
[08:08:10.018] | : .  int 0
[08:08:10.018] | : signalConditions() ... done
[08:08:10.018] | : relay stdout ...
[08:08:10.018] | : relay stdout ... done
[08:08:10.018] | : check for misuse ...
[08:08:10.018] | : check for misuse ... done
[08:08:10.018] | value() for MultisessionFuture (<unnamed-111>) ... done
[08:08:10.019] | result() for ClusterFuture ...
[08:08:10.019] | : result already collected: FutureResult
[08:08:10.019] | result() for ClusterFuture ... done
[08:08:10.019] | signalConditions() ...
[08:08:10.019] | : include = ‘immediateCondition’
[08:08:10.019] | : exclude = 
[08:08:10.019] | : resignal = FALSE
[08:08:10.019] | : Number of conditions: 0
[08:08:10.019] | :  int 0
[08:08:10.020] | signalConditions() ... done
[08:08:10.020] | result() for ClusterFuture ...
[08:08:10.020] | : result already collected: FutureResult
[08:08:10.020] | result() for ClusterFuture ... done
[08:08:10.020] | signalConditions() ...
[08:08:10.020] | : include = ‘condition’
[08:08:10.020] | : exclude = ‘error’, ‘immediateCondition’
[08:08:10.020] | : resignal = TRUE
[08:08:10.021] | : Number of conditions: 0
[08:08:10.021] | :  int 0
[08:08:10.021] | signalConditions() ... done
[08:08:10.021] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.021] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.021] signalConditionsASAP(MultisessionFuture, pos=4) ... done
[08:08:10.021] value(<MultisessionFuture>, ...) ...
[08:08:10.022] value(<MultisessionFuture>, ...) ... done
[08:08:10.022] value() for MultisessionFuture (<unnamed-111>) ...
[08:08:10.022] | result() for ClusterFuture ...
[08:08:10.022] | : result already collected: FutureResult
[08:08:10.022] | result() for ClusterFuture ... done
[08:08:10.022] | result() for ClusterFuture ...
[08:08:10.022] | : result already collected: FutureResult
[08:08:10.022] | result() for ClusterFuture ... done
[08:08:10.022] | signalConditions() ...
[08:08:10.022] | : include = ‘immediateCondition’
[08:08:10.023] | : exclude = 
[08:08:10.023] | : resignal = FALSE
[08:08:10.023] | : Number of conditions: 0
[08:08:10.023] | :  int 0
[08:08:10.023] | signalConditions() ... done
[08:08:10.023] | check for misuse ...
[08:08:10.023] | check for misuse ... done
[08:08:10.023] value() for MultisessionFuture (<unnamed-111>) ... done
[08:08:10.024] value: <numeric>
[08:08:10.024] signalConditionsASAP(MultisessionFuture, pos=4) ...
[08:08:10.024] | nx: 6
[08:08:10.024] | relay: TRUE
[08:08:10.024] | stdout: TRUE
[08:08:10.024] | signal: TRUE
[08:08:10.024] | resignal: FALSE
[08:08:10.024] | force: TRUE
[08:08:10.024] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.025] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.025] | until=5
[08:08:10.025] | relaying element #5
[08:08:10.025] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.025] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.025] signalConditionsASAP(MultisessionFuture, pos=4) ... done
[08:08:10.025] resolve() for MultisessionFuture ...
[08:08:10.025] resolve() for MultisessionFuture ... done
[08:08:10.025] length: 2 (resolved future 4)

[08:08:10.026] checking value #5:
[08:08:10.026] 'obj' is NULL
[08:08:10.026] signalConditionsASAP(NULL, pos=5) ...
[08:08:10.026] | nx: 6
[08:08:10.026] | relay: TRUE
[08:08:10.026] | stdout: TRUE
[08:08:10.026] | signal: TRUE
[08:08:10.026] | resignal: FALSE
[08:08:10.026] | force: TRUE
[08:08:10.026] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.026] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.027] | until=6
[08:08:10.027] | relaying element #6
[08:08:10.027] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:10.027] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.027] signalConditionsASAP(NULL, pos=5) ... done
[08:08:10.027] signalConditionsASAP(NULL, pos=5) ...
[08:08:10.027] | nx: 6
[08:08:10.027] | relay: TRUE
[08:08:10.027] | stdout: TRUE
[08:08:10.027] | signal: TRUE
[08:08:10.027] | resignal: FALSE
[08:08:10.028] | force: TRUE
[08:08:10.028] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:10.028] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.028] | until=6
[08:08:10.028] | relaying element #6
[08:08:10.028] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:10.028] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.028] signalConditionsASAP(NULL, pos=5) ... done
[08:08:10.028] length: 1 (resolved future 5)

[08:08:10.029] checking value #6:
[08:08:10.029] 'obj' is atomic
[08:08:10.029] signalConditionsASAP(numeric, pos=6) ...
[08:08:10.029] | nx: 6
[08:08:10.029] | relay: TRUE
[08:08:10.029] | stdout: TRUE
[08:08:10.029] | signal: TRUE
[08:08:10.029] | resignal: FALSE
[08:08:10.029] | force: TRUE
[08:08:10.029] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:10.029] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.030] | until=6
[08:08:10.030] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:10.030] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.030] signalConditionsASAP(numeric, pos=6) ... done
[08:08:10.030] length: 0 (resolved future 6)

[08:08:10.030] Relaying remaining futures ...
[08:08:10.030] | signalConditionsASAP(NULL, pos=0) ...
[08:08:10.030] | : nx: 6
[08:08:10.031] | : relay: TRUE
[08:08:10.031] | : stdout: TRUE
[08:08:10.031] | : signal: TRUE
[08:08:10.031] | : resignal: FALSE
[08:08:10.031] | : force: TRUE
[08:08:10.031] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:10.031] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:10.031] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:10.031] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.031] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:10.032] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 1 6
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
Dimensions: c(2, 3)
[08:08:10.035] future(..., label = NULL) ...
[08:08:10.035] | lazy: FALSE
[08:08:10.035] | stdout: TRUE
[08:08:10.035] | conditions: [n=1] ‘condition’
[08:08:10.035] | gc: FALSE
[08:08:10.035] | earlySignal: FALSE
[08:08:10.036] | getGlobalsAndPackages() ...
[08:08:10.036] | : Searching for globals ...
[08:08:10.037] | : . globals found: [0] 
[08:08:10.037] | : Searching for globals ... done
[08:08:10.037] | : globals: [0] <none>
[08:08:10.037] | : packages: [0] <none>
[08:08:10.037] | getGlobalsAndPackages() ... done
[08:08:10.037] | run() for ‘Future’ (<unnamed-112>) ...
[08:08:10.038] | : state: ‘created’
[08:08:10.038] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:10.038] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:10.038] | : Using MultisessionFutureBackend ...
[08:08:10.038] | : . Number of futures since start: 6 (6 created, 6 launched, 8 finished)
[08:08:10.038] | : . Launching futures ...
[08:08:10.038] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:10.038] | : . ' , Workers: [n=2]
[08:08:10.039] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:10.040] | : . ' , FutureRegistry: ‘workers-e8f111193b2bc48aa139bb2932499cca’
[08:08:10.040] | : . ' , requestWorker() ...
[08:08:10.040] | : . ' , ; requestNode() ...
[08:08:10.040] | : . ' , ; ` Number of workers: 2
[08:08:10.041] | : . ' , ; ` Polling for a free worker ...
[08:08:10.041] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:10.041] | : . ' , ; ` | : Listing all futures
[08:08:10.041] | : . ' , ; ` | : Number of registered futures: 0
[08:08:10.041] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:10.041] | : . ' , ; ` | Total time: 0
[08:08:10.041] | : . ' , ; ` Polling for a free worker ... done
[08:08:10.041] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:10.041] | : . ' , ; ` | Listing all futures
[08:08:10.041] | : . ' , ; ` | Number of registered futures: 0
[08:08:10.042] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:10.042] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:10.042] | : . ' , ; ` Index of first available worker: 1
[08:08:10.042] | : . ' , ; ` Validate that the worker is functional ...
[08:08:10.106] | : . ' , ; ` | Worker is functional
[08:08:10.106] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:10.106] | : . ' , ; ` | : Listing all futures
[08:08:10.106] | : . ' , ; ` | : Number of registered futures: 0
[08:08:10.106] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:10.107] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:10.107] | : . ' , ; requestNode() ... done
[08:08:10.107] | : . ' , ; cluster node index: 1
[08:08:10.107] | : . ' , requestWorker() ... done
[08:08:10.107] | : . ' , eraseGlobalEnvironment() ...
[08:08:10.108] | : . ' , eraseGlobalEnvironment() ... done
[08:08:10.108] | : . ' , launchFuture() ...
[08:08:10.108] | : . ' , ; cluster node index: 1
[08:08:10.108] | : . ' , ; getFutureData() ...
[08:08:10.108] | : . ' , ; ` getFutureCore() ...
[08:08:10.108] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:10.108] | : . ' , ; ` getFutureCore() ... done
[08:08:10.108] | : . ' , ; ` getFutureCapture() ...
[08:08:10.108] | : . ' , ; ` getFutureCapture() ... done
[08:08:10.109] | : . ' , ; ` getFutureContext() ...
[08:08:10.109] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:10.109] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:10.109] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:10.109] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:10.109] | : . ' , ; ` getFutureContext() ... done
[08:08:10.109] | : . ' , ; getFutureData() ... done
[08:08:10.110] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ...
[08:08:10.110] | : . ' , ; ` Appended future to position #1
[08:08:10.110] | : . ' , ; ` Number of registered futures: 1
[08:08:10.110] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ... done
[08:08:10.110] | : . ' , launchFuture() ... done
[08:08:10.110] | : . ' , MultisessionFuture started
[08:08:10.110] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:10.110] | : . Launching futures ... done
[08:08:10.110] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:10.111] | : Using MultisessionFutureBackend ... done
[08:08:10.111] | run() for ‘Future’ (<unnamed-112>) ... done
[08:08:10.111] future(..., label = NULL) ... done
[08:08:10.111] future(..., label = NULL) ...
[08:08:10.111] | lazy: FALSE
[08:08:10.111] | stdout: TRUE
[08:08:10.111] | conditions: [n=1] ‘condition’
[08:08:10.111] | gc: FALSE
[08:08:10.111] | earlySignal: FALSE
[08:08:10.111] | getGlobalsAndPackages() ...
[08:08:10.114] | : Searching for globals ...
[08:08:10.115] | : . globals found: [0] 
[08:08:10.115] | : Searching for globals ... done
[08:08:10.115] | : globals: [0] <none>
[08:08:10.115] | : packages: [0] <none>
[08:08:10.115] | getGlobalsAndPackages() ... done
[08:08:10.116] | run() for ‘Future’ (<unnamed-113>) ...
[08:08:10.116] | : state: ‘created’
[08:08:10.116] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:10.116] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:10.116] | : Using MultisessionFutureBackend ...
[08:08:10.116] | : . Number of futures since start: 7 (7 created, 7 launched, 8 finished)
[08:08:10.116] | : . Launching futures ...
[08:08:10.116] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:10.117] | : . ' , Workers: [n=2]
[08:08:10.117] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:10.118] | : . ' , FutureRegistry: ‘workers-e8f111193b2bc48aa139bb2932499cca’
[08:08:10.118] | : . ' , requestWorker() ...
[08:08:10.118] | : . ' , ; requestNode() ...
[08:08:10.119] | : . ' , ; ` Number of workers: 2
[08:08:10.119] | : . ' , ; ` Polling for a free worker ...
[08:08:10.119] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:10.119] | : . ' , ; ` | : Listing all futures
[08:08:10.119] | : . ' , ; ` | : Number of registered futures: 1
[08:08:10.119] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:10.119] | : . ' , ; ` | Total time: 0
[08:08:10.119] | : . ' , ; ` Polling for a free worker ... done
[08:08:10.119] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:10.119] | : . ' , ; ` | Listing all futures
[08:08:10.120] | : . ' , ; ` | Number of registered futures: 1
[08:08:10.120] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:10.120] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:10.120] | : . ' , ; ` Index of first available worker: 2
[08:08:10.120] | : . ' , ; ` Validate that the worker is functional ...
[08:08:10.220] | : . ' , ; ` | Worker is functional
[08:08:10.221] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:10.221] | : . ' , ; ` | : Listing all futures
[08:08:10.221] | : . ' , ; ` | : Number of registered futures: 1
[08:08:10.221] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:10.221] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:10.221] | : . ' , ; requestNode() ... done
[08:08:10.221] | : . ' , ; cluster node index: 2
[08:08:10.222] | : . ' , requestWorker() ... done
[08:08:10.222] | : . ' , eraseGlobalEnvironment() ...
[08:08:10.222] | : . ' , eraseGlobalEnvironment() ... done
[08:08:10.222] | : . ' , launchFuture() ...
[08:08:10.222] | : . ' , ; cluster node index: 2
[08:08:10.222] | : . ' , ; getFutureData() ...
[08:08:10.222] | : . ' , ; ` getFutureCore() ...
[08:08:10.223] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:10.223] | : . ' , ; ` getFutureCore() ... done
[08:08:10.223] | : . ' , ; ` getFutureCapture() ...
[08:08:10.223] | : . ' , ; ` getFutureCapture() ... done
[08:08:10.223] | : . ' , ; ` getFutureContext() ...
[08:08:10.223] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:10.223] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:10.223] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:10.223] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:10.224] | : . ' , ; ` getFutureContext() ... done
[08:08:10.224] | : . ' , ; getFutureData() ... done
[08:08:10.224] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ...
[08:08:10.224] | : . ' , ; ` Appended future to position #2
[08:08:10.224] | : . ' , ; ` Number of registered futures: 2
[08:08:10.224] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ... done
[08:08:10.224] | : . ' , launchFuture() ... done
[08:08:10.224] | : . ' , MultisessionFuture started
[08:08:10.225] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:10.225] | : . Launching futures ... done
[08:08:10.225] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:10.225] | : Using MultisessionFutureBackend ... done
[08:08:10.225] | run() for ‘Future’ (<unnamed-113>) ... done
[08:08:10.225] future(..., label = NULL) ... done
[08:08:10.225] future(..., label = NULL) ...
[08:08:10.226] | lazy: FALSE
[08:08:10.226] | stdout: TRUE
[08:08:10.226] | conditions: [n=1] ‘condition’
[08:08:10.226] | gc: FALSE
[08:08:10.226] | earlySignal: FALSE
[08:08:10.226] | getGlobalsAndPackages() ...
[08:08:10.226] | : Searching for globals ...
[08:08:10.229] | : . globals found: [1] ‘{’
[08:08:10.229] | : Searching for globals ... done
[08:08:10.229] | : Resolving globals: FALSE
[08:08:10.229] | : Search for packages associated with the globals ...
[08:08:10.230] | : . Packages associated with globals: [1] ‘base’
[08:08:10.230] | : . Packages: [1] ‘base’
[08:08:10.230] | : Search for packages associated with the globals ... done
[08:08:10.230] | : Packages after dropping 'base': [0] 
[08:08:10.230] | : globals: [0] 
[08:08:10.230] | : packages: [0] 
[08:08:10.230] | getGlobalsAndPackages() ... done
[08:08:10.231] | run() for ‘Future’ (<unnamed-114>) ...
[08:08:10.231] | : state: ‘created’
[08:08:10.231] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:10.231] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:10.231] | : Using MultisessionFutureBackend ...
[08:08:10.231] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:08:10.231] | : . Launching futures ...
[08:08:10.231] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:10.232] | : . ' , Workers: [n=2]
[08:08:10.232] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:10.233] | : . ' , FutureRegistry: ‘workers-e8f111193b2bc48aa139bb2932499cca’
[08:08:10.233] | : . ' , requestWorker() ...
[08:08:10.233] | : . ' , ; requestNode() ...
[08:08:10.234] | : . ' , ; ` Number of workers: 2
[08:08:10.234] | : . ' , ; ` Polling for a free worker ...
[08:08:10.234] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:10.234] | : . ' , ; ` | : Listing all futures
[08:08:10.234] | : . ' , ; ` | : Number of registered futures: 2
[08:08:10.234] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:10.234] | : . ' , ; ` | Poll #1 (0): usedNodes() = 2, workers = 2
[08:08:10.244] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'collect-first', earlySignal = 1) ...
[08:08:10.245] | : . ' , ; ` | : collectValues('workers-e8f111193b2bc48aa139bb2932499cca', firstOnly = TRUE) ...
[08:08:10.245] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-112>) ...
[08:08:10.245] | : . ' , ; ` | : . ' Cluster node socket connection: index=4, id=1577
[08:08:10.245] | : . ' , ; ` | : . ' assertValidConnection() ...
[08:08:10.245] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:10.246] | : . ' , ; ` | : . ' assertValidConnection() ... done
[08:08:10.246] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ...
[08:08:10.246] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:10.246] | : . ' , ; ` | : . ' , [1] TRUE
[08:08:10.246] | : . ' , ; ` | : . ' , received data:
[08:08:10.247] | : . ' , ; ` | : . ' , List of 5
[08:08:10.247] | : . ' , ; ` | : . ' ,  $ type   : chr "VALUE"
[08:08:10.247] | : . ' , ; ` | : . ' ,  $ value  :List of 16
[08:08:10.247] | : . ' , ; ` | : . ' ,   ..$ value              : num 2
[08:08:10.247] | : . ' , ; ` | : . ' ,   ..$ visible            : logi TRUE
[08:08:10.247] | : . ' , ; ` | : . ' ,   ..$ stdout             : chr ""
[08:08:10.247] | : . ' , ; ` | : . ' ,   ..$ conditions         : list()
[08:08:10.247] | : . ' , ; ` | : . ' ,   ..$ rng                : logi FALSE
[08:08:10.247] | : . ' , ; ` | : . ' ,   ..$ seed               : NULL
[08:08:10.247] | : . ' , ; ` | : . ' ,   ..$ misuseGlobalEnv    : NULL
[08:08:10.247] | : . ' , ; ` | : . ' ,   ..$ misuseConnections  :List of 3
[08:08:10.247] | : . ' , ; ` | : . ' ,   .. ..$ added   : NULL
[08:08:10.247] | : . ' , ; ` | : . ' ,   .. ..$ removed : NULL
[08:08:10.247] | : . ' , ; ` | : . ' ,   .. ..$ replaced: NULL
[08:08:10.247] | : . ' , ; ` | : . ' ,   ..$ misuseDevices      : NULL
[08:08:10.247] | : . ' , ; ` | : . ' ,   ..$ misuseDefaultDevice: list()
[08:08:10.247] | : . ' , ; ` | : . ' ,   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:10"
[08:08:10.247] | : . ' , ; ` | : . ' ,   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:10"
[08:08:10.247] | : . ' , ; ` | : . ' ,   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "112"
[08:08:10.247] | : . ' , ; ` | : . ' ,   ..$ session_uuid       : chr "272d3c9c235e1bff6dddaa89109c42b3"
[08:08:10.247] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "source")=List of 5
[08:08:10.247] | : . ' , ; ` | : . ' ,   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:10.247] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:10.247] | : . ' , ; ` | : . ' ,   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:10.247] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:10.247] | : . ' , ; ` | : . ' ,   .. .. ..$ pid   : int 69173
[08:08:10.247] | : . ' , ; ` | : . ' ,   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:10.247] | : . ' , ; ` | : . ' ,   .. .. ..$ random: int 2147483647
[08:08:10.247] | : . ' , ; ` | : . ' ,   ..$ r_info             :List of 4
[08:08:10.247] | : . ' , ; ` | : . ' ,   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:10.247] | : . ' , ; ` | : . ' ,   .. .. ..$ : int [1:3] 4 5 1
[08:08:10.247] | : . ' , ; ` | : . ' ,   .. ..$ os           : chr "unix"
[08:08:10.247] | : . ' , ; ` | : . ' ,   .. ..$ os_name      : chr "Linux"
[08:08:10.247] | : . ' , ; ` | : . ' ,   .. ..$ captures_utf8: logi TRUE
[08:08:10.247] | : . ' , ; ` | : . ' ,   ..$ version            : chr "1.8"
[08:08:10.247] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr "FutureResult"
[08:08:10.247] | : . ' , ; ` | : . ' ,  $ success: logi TRUE
[08:08:10.247] | : . ' , ; ` | : . ' ,  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.005 0 0
[08:08:10.247] | : . ' , ; ` | : . ' ,   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:10.247] | : . ' , ; ` | : . ' ,  $ tag    : NULL
[08:08:10.257] | : . ' , ; ` | : . ' , Received FutureResult
[08:08:10.258] | : . ' , ; ` | : . ' , FutureResult:
[08:08:10.258] | : . ' , ; ` | : . ' , value: ‘numeric’
[08:08:10.258] | : . ' , ; ` | : . ' , visible: TRUE
[08:08:10.258] | : . ' , ; ` | : . ' , stdout: character
[08:08:10.258] | : . ' , ; ` | : . ' , conditions: [n = 0] 
[08:08:10.258] | : . ' , ; ` | : . ' , RNG used: FALSE
[08:08:10.258] | : . ' , ; ` | : . ' , duration: 0.00375843 secs (started 2025-06-17 08:08:10.150876)
[08:08:10.258] | : . ' , ; ` | : . ' , version: 1.8
[08:08:10.258] | : . ' , ; ` | : . ' , FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ...
[08:08:10.258] | : . ' , ; ` | : . ' , ; Removed future from position #1
[08:08:10.258] | : . ' , ; ` | : . ' , ; Number of registered futures: 1
[08:08:10.258] | : . ' , ; ` | : . ' , FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ... done
[08:08:10.259] | : . ' , ; ` | : . ' , Erased future from future backend
[08:08:10.259] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:10.259] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:10.259] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:10.259] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:10.259] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:10.259] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:10.259] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:10.259] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:10.260] | : . ' , ; ` | : . ' , ;  int 0
[08:08:10.260] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:10.260] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ... done
[08:08:10.260] | : . ' , ; ` | : . ' receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:10.260] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-112>) ... done
[08:08:10.260] | : . ' , ; ` | : . assertFutureResult() ...
[08:08:10.260] | : . ' , ; ` | : . ' Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:10.260] | : . ' , ; ` | : . ' Future uuid: 112
[08:08:10.261] | : . ' , ; ` | : . ' identical; success
[08:08:10.261] | : . ' , ; ` | : . assertFutureResult() ... done
[08:08:10.261] | : . ' , ; ` | : . Future at position #1 is resolved ...
[08:08:10.261] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-112>) ...
[08:08:10.261] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:10.261] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:10.261] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:10.261] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:10.261] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:10.262] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:10.262] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:10.262] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:10.262] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:10.262] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:10.262] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:10.262] | : . ' , ; ` | : . ' , ;  int 0
[08:08:10.263] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:10.263] | : . ' , ; ` | : . ' , check for misuse ...
[08:08:10.263] | : . ' , ; ` | : . ' , check for misuse ... done
[08:08:10.263] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-112>) ... done
[08:08:10.263] | : . ' , ; ` | : . Future at position #1 is resolved ... done
[08:08:10.263] | : . ' , ; ` | : collectValues('workers-e8f111193b2bc48aa139bb2932499cca', firstOnly = TRUE) ... done
[08:08:10.263] | : . ' , ; ` | : Remove collected futures ...
[08:08:10.263] | : . ' , ; ` | : . Indices of futures to drop: [n=1] ‘1’
[08:08:10.264] | : . ' , ; ` | : Remove collected futures ... done
[08:08:10.264] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'collect-first', earlySignal = 1) ... done
[08:08:10.264] | : . ' , ; ` | Early signaling of 2 future candidates ...
[08:08:10.264] | : . ' , ; ` | Number of futures with early signaling requested: 0
[08:08:10.264] | : . ' , ; ` | Early signaling of 2 future candidates ... done
[08:08:10.264] | : . ' , ; ` | Number of registered futures: 2
[08:08:10.264] | : . ' , ; ` Polling for a free worker ... done
[08:08:10.264] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:10.264] | : . ' , ; ` | Listing all futures
[08:08:10.265] | : . ' , ; ` | Number of registered futures: 1
[08:08:10.265] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:10.265] | : . ' , ; ` Total time: 0.0305495262145996
[08:08:10.265] | : . ' , ; requestNode() ... done
[08:08:10.265] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:10.265] | : . ' , ; ` Listing all futures
[08:08:10.265] | : . ' , ; ` Number of registered futures: 1
[08:08:10.265] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:10.265] | : . ' , ; avail: [n=2] ‘1’
[08:08:10.266] | : . ' , ; Index of first available worker: 1
[08:08:10.266] | : . ' , ; Validate that the worker is functional ...
[08:08:10.363] | : . ' , ; ` Worker is functional
[08:08:10.364] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:10.364] | : . ' , ; ` | Listing all futures
[08:08:10.364] | : . ' , ; ` | Number of registered futures: 1
[08:08:10.364] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:10.364] | : . ' , ; Validate that the worker is functional ... done
[08:08:10.364] | : . ' , requestWorker() ... done
[08:08:10.364] | : . ' , cluster node index: 1
[08:08:10.364] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:10.365] | : . ' eraseGlobalEnvironment() ...
[08:08:10.365] | : . ' eraseGlobalEnvironment() ... done
[08:08:10.365] | : . ' launchFuture() ...
[08:08:10.365] | : . ' , cluster node index: 1
[08:08:10.365] | : . ' , getFutureData() ...
[08:08:10.365] | : . ' , ; getFutureCore() ...
[08:08:10.366] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:10.366] | : . ' , ; getFutureCore() ... done
[08:08:10.366] | : . ' , ; getFutureCapture() ...
[08:08:10.366] | : . ' , ; getFutureCapture() ... done
[08:08:10.366] | : . ' , ; getFutureContext() ...
[08:08:10.366] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:10.366] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:10.366] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:10.366] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:10.367] | : . ' , ; getFutureContext() ... done
[08:08:10.367] | : . ' , getFutureData() ... done
[08:08:10.367] | : . ' , FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ...
[08:08:10.367] | : . ' , ; Appended future to position #2
[08:08:10.367] | : . ' , ; Number of registered futures: 2
[08:08:10.367] | : . ' , FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ... done
[08:08:10.367] | : . ' launchFuture() ... done
[08:08:10.367] | : . ' MultisessionFuture started
[08:08:10.368] | : . Launching futures ... done
[08:08:10.368] | : Using MultisessionFutureBackend ... done
[08:08:10.368] | : Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:10.368] | run() for ‘Future’ (<unnamed-114>) ... done
[08:08:10.368] future(..., label = NULL) ... done

Classes 'listenv', 'environment' <environment: 0x55675c78aa40> 
Classes 'listenv', 'environment' <environment: 0x55675c3c7c78> 
 - attr(*, "dim.")= int [1:2] 2 3
 - attr(*, "dimnames.")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
[08:08:10.371] resolved() for listenv ...
[08:08:10.372] | resolved() for matrix ...
[08:08:10.372] | : Number of elements: 6
[08:08:10.372] | : Number of futures: 6
[08:08:10.372] | : resolved() for MultisessionFuture (<unnamed-113>) ...
[08:08:10.372] | : . Cluster node socket connection: index=5, id=1578
[08:08:10.373] | : . assertValidConnection() ...
[08:08:10.373] | : . ' cluster node index: 2
[08:08:10.373] | : . assertValidConnection() ... done
[08:08:10.373] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:10.373] | : . ' cluster node index: 2
[08:08:10.374] | : . ' [1] TRUE
[08:08:10.374] | : . ' received data:
[08:08:10.374] | : . ' List of 5
[08:08:10.374] | : . '  $ type   : chr "VALUE"
[08:08:10.374] | : . '  $ value  :List of 16
[08:08:10.374] | : . '   ..$ value              : NULL
[08:08:10.374] | : . '   ..$ visible            : logi TRUE
[08:08:10.374] | : . '   ..$ stdout             : chr ""
[08:08:10.374] | : . '   ..$ conditions         : list()
[08:08:10.374] | : . '   ..$ rng                : logi FALSE
[08:08:10.374] | : . '   ..$ seed               : NULL
[08:08:10.374] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:10.374] | : . '   ..$ misuseConnections  :List of 3
[08:08:10.374] | : . '   .. ..$ added   : NULL
[08:08:10.374] | : . '   .. ..$ removed : NULL
[08:08:10.374] | : . '   .. ..$ replaced: NULL
[08:08:10.374] | : . '   ..$ misuseDevices      : NULL
[08:08:10.374] | : . '   ..$ misuseDefaultDevice: list()
[08:08:10.374] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:10"
[08:08:10.374] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:10"
[08:08:10.374] | : . '   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "113"
[08:08:10.374] | : . '   ..$ session_uuid       : chr "318d9a862536e33b210e27df6cf2a506"
[08:08:10.374] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:10.374] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:10.374] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:10.374] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:10.374] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:10.374] | : . '   .. .. ..$ pid   : int 69172
[08:08:10.374] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:10.374] | : . '   .. .. ..$ random: int 2147483647
[08:08:10.374] | : . '   ..$ r_info             :List of 4
[08:08:10.374] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:10.374] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:10.374] | : . '   .. ..$ os           : chr "unix"
[08:08:10.374] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:10.374] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:10.374] | : . '   ..$ version            : chr "1.8"
[08:08:10.374] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:10.374] | : . '  $ success: logi TRUE
[08:08:10.374] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:10.374] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:10.374] | : . '  $ tag    : NULL
[08:08:10.387] | : . ' Received FutureResult
[08:08:10.387] | : . ' FutureResult:
[08:08:10.387] | : . ' value: ‘NULL’
[08:08:10.387] | : . ' visible: TRUE
[08:08:10.387] | : . ' stdout: character
[08:08:10.387] | : . ' conditions: [n = 0] 
[08:08:10.387] | : . ' RNG used: FALSE
[08:08:10.387] | : . ' duration: 0.00269556 secs (started 2025-06-17 08:08:10.264811)
[08:08:10.387] | : . ' version: 1.8
[08:08:10.387] | : . ' FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ...
[08:08:10.387] | : . ' , Removed future from position #1
[08:08:10.387] | : . ' , Number of registered futures: 1
[08:08:10.388] | : . ' FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ... done
[08:08:10.388] | : . ' Erased future from future backend
[08:08:10.388] | : . ' result() for ClusterFuture ...
[08:08:10.388] | : . ' , result already collected: FutureResult
[08:08:10.388] | : . ' result() for ClusterFuture ... done
[08:08:10.388] | : . ' signalConditions() ...
[08:08:10.388] | : . ' , include = ‘immediateCondition’
[08:08:10.388] | : . ' , exclude = 
[08:08:10.388] | : . ' , resignal = FALSE
[08:08:10.388] | : . ' , Number of conditions: 0
[08:08:10.389] | : . ' ,  int 0
[08:08:10.389] | : . ' signalConditions() ... done
[08:08:10.389] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:10.389] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:10.389] | : resolved() for MultisessionFuture (<unnamed-113>) ... done
[08:08:10.389] | : assertFutureResult() ...
[08:08:10.389] | : . Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:10.389] | : . Future uuid: 113
[08:08:10.390] | : . identical; success
[08:08:10.390] | : assertFutureResult() ... done
[08:08:10.390] | : resolved() for MultisessionFuture (<unnamed-114>) ...
[08:08:10.390] | : . Cluster node socket connection: index=4, id=1577
[08:08:10.390] | : . assertValidConnection() ...
[08:08:10.390] | : . ' cluster node index: 1
[08:08:10.390] | : . assertValidConnection() ... done
[08:08:10.401] | : . socketSelect(list(<connection #4 (id=1577)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:10.401] | : resolved() for MultisessionFuture (<unnamed-114>) ... done
[08:08:10.401] | resolved() for matrix ... done
[08:08:10.401] resolved() for listenv ... done
 logi [1:2, 1:3] TRUE TRUE TRUE FALSE TRUE TRUE
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:10.403] value() for listenv ...
[08:08:10.403] | recursive: 0
[08:08:10.403] | reduce: FALSE
[08:08:10.404] | length: 6
[08:08:10.404] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:10.404] | Number of remaining objects: 6
[08:08:10.404] | checking value #1:
[08:08:10.404] | 'obj' is atomic
[08:08:10.404] | signalConditionsASAP(numeric, pos=1) ...
[08:08:10.405] | : nx: 6
[08:08:10.405] | : relay: TRUE
[08:08:10.405] | : stdout: TRUE
[08:08:10.405] | : signal: TRUE
[08:08:10.405] | : resignal: FALSE
[08:08:10.405] | : force: TRUE
[08:08:10.405] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:10.405] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:10.405] | : until=2
[08:08:10.405] | : relaying element #2
[08:08:10.405] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:10.406] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:10.406] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:10.406] | length: 5 (resolved future 1)
[08:08:10.406] value() for listenv ... done
[08:08:10.406] checking value #2:
[08:08:10.406] 'obj' is MultisessionFuture
[08:08:10.406] MultisessionFuture #2
[08:08:10.406] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:10.406] | nx: 6
[08:08:10.407] | relay: TRUE
[08:08:10.407] | stdout: TRUE
[08:08:10.407] | signal: TRUE
[08:08:10.407] | resignal: FALSE
[08:08:10.407] | force: TRUE
[08:08:10.407] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:10.407] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:10.407] | until=2
[08:08:10.407] | relaying element #2
[08:08:10.407] | value() for MultisessionFuture (<unnamed-112>) ...
[08:08:10.408] | : result() for ClusterFuture ...
[08:08:10.408] | : . result already collected: FutureResult
[08:08:10.408] | : result() for ClusterFuture ... done
[08:08:10.408] | : result() for ClusterFuture ...
[08:08:10.408] | : . result already collected: FutureResult
[08:08:10.408] | : result() for ClusterFuture ... done
[08:08:10.408] | : signalConditions() ...
[08:08:10.408] | : . include = ‘immediateCondition’
[08:08:10.408] | : . exclude = 
[08:08:10.408] | : . resignal = FALSE
[08:08:10.409] | : . Number of conditions: 0
[08:08:10.409] | : .  int 0
[08:08:10.409] | : signalConditions() ... done
[08:08:10.409] | : relay stdout ...
[08:08:10.409] | : relay stdout ... done
[08:08:10.409] | : check for misuse ...
[08:08:10.409] | : check for misuse ... done
[08:08:10.410] | value() for MultisessionFuture (<unnamed-112>) ... done
[08:08:10.410] | result() for ClusterFuture ...
[08:08:10.410] | : result already collected: FutureResult
[08:08:10.410] | result() for ClusterFuture ... done
[08:08:10.410] | signalConditions() ...
[08:08:10.410] | : include = ‘immediateCondition’
[08:08:10.410] | : exclude = 
[08:08:10.410] | : resignal = FALSE
[08:08:10.410] | : Number of conditions: 0
[08:08:10.410] | :  int 0
[08:08:10.411] | signalConditions() ... done
[08:08:10.411] | result() for ClusterFuture ...
[08:08:10.411] | : result already collected: FutureResult
[08:08:10.411] | result() for ClusterFuture ... done
[08:08:10.411] | signalConditions() ...
[08:08:10.411] | : include = ‘condition’
[08:08:10.411] | : exclude = ‘error’, ‘immediateCondition’
[08:08:10.412] | : resignal = TRUE
[08:08:10.412] | : Number of conditions: 0
[08:08:10.412] | :  int 0
[08:08:10.412] | signalConditions() ... done
[08:08:10.412] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:10.412] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:10.412] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:10.413] value(<MultisessionFuture>, ...) ...
[08:08:10.413] value(<MultisessionFuture>, ...) ... done
[08:08:10.413] value() for MultisessionFuture (<unnamed-112>) ...
[08:08:10.413] | result() for ClusterFuture ...
[08:08:10.413] | : result already collected: FutureResult
[08:08:10.413] | result() for ClusterFuture ... done
[08:08:10.413] | result() for ClusterFuture ...
[08:08:10.413] | : result already collected: FutureResult
[08:08:10.413] | result() for ClusterFuture ... done
[08:08:10.413] | signalConditions() ...
[08:08:10.414] | : include = ‘immediateCondition’
[08:08:10.414] | : exclude = 
[08:08:10.414] | : resignal = FALSE
[08:08:10.414] | : Number of conditions: 0
[08:08:10.414] | :  int 0
[08:08:10.414] | signalConditions() ... done
[08:08:10.414] | check for misuse ...
[08:08:10.414] | check for misuse ... done
[08:08:10.415] value() for MultisessionFuture (<unnamed-112>) ... done
[08:08:10.415] value: <numeric>
[08:08:10.415] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:10.415] | nx: 6
[08:08:10.415] | relay: TRUE
[08:08:10.415] | stdout: TRUE
[08:08:10.415] | signal: TRUE
[08:08:10.415] | resignal: FALSE
[08:08:10.415] | force: TRUE
[08:08:10.415] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:10.416] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:10.416] | until=3
[08:08:10.416] | relaying element #3
[08:08:10.416] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:10.416] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:10.416] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:10.416] resolve() for MultisessionFuture ...
[08:08:10.416] resolve() for MultisessionFuture ... done
[08:08:10.416] length: 4 (resolved future 2)

[08:08:10.417] checking value #3:
[08:08:10.417] 'obj' is MultisessionFuture
[08:08:10.417] MultisessionFuture #3
[08:08:10.417] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:10.417] | nx: 6
[08:08:10.417] | relay: TRUE
[08:08:10.417] | stdout: TRUE
[08:08:10.417] | signal: TRUE
[08:08:10.417] | resignal: FALSE
[08:08:10.417] | force: TRUE
[08:08:10.417] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:10.418] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:10.418] | until=3
[08:08:10.418] | relaying element #3
[08:08:10.418] | value() for MultisessionFuture (<unnamed-113>) ...
[08:08:10.418] | : result() for ClusterFuture ...
[08:08:10.418] | : . result already collected: FutureResult
[08:08:10.418] | : result() for ClusterFuture ... done
[08:08:10.418] | : result() for ClusterFuture ...
[08:08:10.418] | : . result already collected: FutureResult
[08:08:10.419] | : result() for ClusterFuture ... done
[08:08:10.419] | : signalConditions() ...
[08:08:10.419] | : . include = ‘immediateCondition’
[08:08:10.419] | : . exclude = 
[08:08:10.419] | : . resignal = FALSE
[08:08:10.419] | : . Number of conditions: 0
[08:08:10.419] | : .  int 0
[08:08:10.420] | : signalConditions() ... done
[08:08:10.420] | : relay stdout ...
[08:08:10.420] | : relay stdout ... done
[08:08:10.420] | : check for misuse ...
[08:08:10.420] | : check for misuse ... done
[08:08:10.420] | value() for MultisessionFuture (<unnamed-113>) ... done
[08:08:10.420] | result() for ClusterFuture ...
[08:08:10.420] | : result already collected: FutureResult
[08:08:10.420] | result() for ClusterFuture ... done
[08:08:10.420] | signalConditions() ...
[08:08:10.421] | : include = ‘immediateCondition’
[08:08:10.421] | : exclude = 
[08:08:10.421] | : resignal = FALSE
[08:08:10.421] | : Number of conditions: 0
[08:08:10.421] | :  int 0
[08:08:10.421] | signalConditions() ... done
[08:08:10.421] | result() for ClusterFuture ...
[08:08:10.421] | : result already collected: FutureResult
[08:08:10.422] | result() for ClusterFuture ... done
[08:08:10.422] | signalConditions() ...
[08:08:10.422] | : include = ‘condition’
[08:08:10.422] | : exclude = ‘error’, ‘immediateCondition’
[08:08:10.422] | : resignal = TRUE
[08:08:10.422] | : Number of conditions: 0
[08:08:10.422] | :  int 0
[08:08:10.423] | signalConditions() ... done
[08:08:10.423] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:10.423] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:10.423] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:10.423] value(<MultisessionFuture>, ...) ...
[08:08:10.423] value(<MultisessionFuture>, ...) ... done
[08:08:10.423] value() for MultisessionFuture (<unnamed-113>) ...
[08:08:10.423] | result() for ClusterFuture ...
[08:08:10.423] | : result already collected: FutureResult
[08:08:10.423] | result() for ClusterFuture ... done
[08:08:10.424] | result() for ClusterFuture ...
[08:08:10.424] | : result already collected: FutureResult
[08:08:10.424] | result() for ClusterFuture ... done
[08:08:10.424] | signalConditions() ...
[08:08:10.424] | : include = ‘immediateCondition’
[08:08:10.424] | : exclude = 
[08:08:10.424] | : resignal = FALSE
[08:08:10.424] | : Number of conditions: 0
[08:08:10.424] | :  int 0
[08:08:10.425] | signalConditions() ... done
[08:08:10.425] | check for misuse ...
[08:08:10.425] | check for misuse ... done
[08:08:10.425] value() for MultisessionFuture (<unnamed-113>) ... done
[08:08:10.425] value: <NULL>
[08:08:10.425] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:10.425] | nx: 6
[08:08:10.425] | relay: TRUE
[08:08:10.425] | stdout: TRUE
[08:08:10.426] | signal: TRUE
[08:08:10.426] | resignal: FALSE
[08:08:10.426] | force: TRUE
[08:08:10.426] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:10.426] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:10.426] | until=4
[08:08:10.426] | relaying element #4
[08:08:10.426] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:10.426] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:10.426] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:10.427] resolve() for MultisessionFuture ...
[08:08:10.427] resolve() for MultisessionFuture ... done
[08:08:10.427] length: 3 (resolved future 3)

[08:08:10.427] checking value #4:
[08:08:10.427] 'obj' is MultisessionFuture
[08:08:10.427] resolved() for MultisessionFuture (<unnamed-114>) ...
[08:08:10.427] | Cluster node socket connection: index=4, id=1577
[08:08:10.428] | assertValidConnection() ...
[08:08:10.428] | : cluster node index: 1
[08:08:10.428] | assertValidConnection() ... done
[08:08:10.428] | receiveMessageFromWorker() for ClusterFuture ...
[08:08:10.428] | : cluster node index: 1
[08:08:10.428] | : [1] TRUE
[08:08:10.428] | : received data:
[08:08:10.429] | : List of 5
[08:08:10.429] | :  $ type   : chr "VALUE"
[08:08:10.429] | :  $ value  :List of 16
[08:08:10.429] | :   ..$ value              : num 4
[08:08:10.429] | :   ..$ visible            : logi TRUE
[08:08:10.429] | :   ..$ stdout             : chr ""
[08:08:10.429] | :   ..$ conditions         : list()
[08:08:10.429] | :   ..$ rng                : logi FALSE
[08:08:10.429] | :   ..$ seed               : NULL
[08:08:10.429] | :   ..$ misuseGlobalEnv    : NULL
[08:08:10.429] | :   ..$ misuseConnections  :List of 3
[08:08:10.429] | :   .. ..$ added   : NULL
[08:08:10.429] | :   .. ..$ removed : NULL
[08:08:10.429] | :   .. ..$ replaced: NULL
[08:08:10.429] | :   ..$ misuseDevices      : NULL
[08:08:10.429] | :   ..$ misuseDefaultDevice: list()
[08:08:10.429] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:10"
[08:08:10.429] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:10"
[08:08:10.429] | :   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "114"
[08:08:10.429] | :   ..$ session_uuid       : chr "272d3c9c235e1bff6dddaa89109c42b3"
[08:08:10.429] | :   .. ..- attr(*, "source")=List of 5
[08:08:10.429] | :   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:10.429] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:10.429] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:10.429] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:10.429] | :   .. .. ..$ pid   : int 69173
[08:08:10.429] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:10.429] | :   .. .. ..$ random: int 2147483647
[08:08:10.429] | :   ..$ r_info             :List of 4
[08:08:10.429] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:10.429] | :   .. .. ..$ : int [1:3] 4 5 1
[08:08:10.429] | :   .. ..$ os           : chr "unix"
[08:08:10.429] | :   .. ..$ os_name      : chr "Linux"
[08:08:10.429] | :   .. ..$ captures_utf8: logi TRUE
[08:08:10.429] | :   ..$ version            : chr "1.8"
[08:08:10.429] | :   ..- attr(*, "class")= chr "FutureResult"
[08:08:10.429] | :  $ success: logi TRUE
[08:08:10.429] | :  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[08:08:10.429] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:10.429] | :  $ tag    : NULL
[08:08:10.439] | : Received FutureResult
[08:08:10.439] | : FutureResult:
[08:08:10.439] | : value: ‘numeric’
[08:08:10.439] | : visible: TRUE
[08:08:10.439] | : stdout: character
[08:08:10.439] | : conditions: [n = 0] 
[08:08:10.439] | : RNG used: FALSE
[08:08:10.439] | : duration: 0.00291872 secs (started 2025-06-17 08:08:10.40784)
[08:08:10.439] | : version: 1.8
[08:08:10.440] | : FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ...
[08:08:10.440] | : . Removed future from position #1
[08:08:10.440] | : . Number of registered futures: 0
[08:08:10.440] | : FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ... done
[08:08:10.440] | : Erased future from future backend
[08:08:10.440] | : result() for ClusterFuture ...
[08:08:10.441] | : . result already collected: FutureResult
[08:08:10.441] | : result() for ClusterFuture ... done
[08:08:10.441] | : signalConditions() ...
[08:08:10.441] | : . include = ‘immediateCondition’
[08:08:10.441] | : . exclude = 
[08:08:10.441] | : . resignal = FALSE
[08:08:10.441] | : . Number of conditions: 0
[08:08:10.441] | : .  int 0
[08:08:10.442] | : signalConditions() ... done
[08:08:10.442] | receiveMessageFromWorker() for ClusterFuture ... done
[08:08:10.442] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:10.442] resolved() for MultisessionFuture (<unnamed-114>) ... done
[08:08:10.442] assertFutureResult() ...
[08:08:10.442] | Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:10.442] | Future uuid: 114
[08:08:10.442] | identical; success
[08:08:10.442] assertFutureResult() ... done
[08:08:10.442] MultisessionFuture #4
[08:08:10.443] signalConditionsASAP(MultisessionFuture, pos=4) ...
[08:08:10.443] | nx: 6
[08:08:10.443] | relay: TRUE
[08:08:10.443] | stdout: TRUE
[08:08:10.443] | signal: TRUE
[08:08:10.443] | resignal: FALSE
[08:08:10.443] | force: TRUE
[08:08:10.443] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:10.443] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:10.443] | until=4
[08:08:10.443] | relaying element #4
[08:08:10.444] | value() for MultisessionFuture (<unnamed-114>) ...
[08:08:10.444] | : result() for ClusterFuture ...
[08:08:10.444] | : . result already collected: FutureResult
[08:08:10.444] | : result() for ClusterFuture ... done
[08:08:10.444] | : result() for ClusterFuture ...
[08:08:10.444] | : . result already collected: FutureResult
[08:08:10.444] | : result() for ClusterFuture ... done
[08:08:10.444] | : signalConditions() ...
[08:08:10.444] | : . include = ‘immediateCondition’
[08:08:10.444] | : . exclude = 
[08:08:10.445] | : . resignal = FALSE
[08:08:10.445] | : . Number of conditions: 0
[08:08:10.445] | : .  int 0
[08:08:10.445] | : signalConditions() ... done
[08:08:10.445] | : relay stdout ...
[08:08:10.445] | : relay stdout ... done
[08:08:10.445] | : check for misuse ...
[08:08:10.446] | : check for misuse ... done
[08:08:10.446] | value() for MultisessionFuture (<unnamed-114>) ... done
[08:08:10.446] | result() for ClusterFuture ...
[08:08:10.446] | : result already collected: FutureResult
[08:08:10.446] | result() for ClusterFuture ... done
[08:08:10.446] | signalConditions() ...
[08:08:10.446] | : include = ‘immediateCondition’
[08:08:10.446] | : exclude = 
[08:08:10.446] | : resignal = FALSE
[08:08:10.446] | : Number of conditions: 0
[08:08:10.447] | :  int 0
[08:08:10.447] | signalConditions() ... done
[08:08:10.447] | result() for ClusterFuture ...
[08:08:10.447] | : result already collected: FutureResult
[08:08:10.447] | result() for ClusterFuture ... done
[08:08:10.447] | signalConditions() ...
[08:08:10.447] | : include = ‘condition’
[08:08:10.448] | : exclude = ‘error’, ‘immediateCondition’
[08:08:10.448] | : resignal = TRUE
[08:08:10.448] | : Number of conditions: 0
[08:08:10.448] | :  int 0
[08:08:10.448] | signalConditions() ... done
[08:08:10.448] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.448] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.448] signalConditionsASAP(MultisessionFuture, pos=4) ... done
[08:08:10.449] value(<MultisessionFuture>, ...) ...
[08:08:10.449] value(<MultisessionFuture>, ...) ... done
[08:08:10.449] value() for MultisessionFuture (<unnamed-114>) ...
[08:08:10.449] | result() for ClusterFuture ...
[08:08:10.449] | : result already collected: FutureResult
[08:08:10.449] | result() for ClusterFuture ... done
[08:08:10.449] | result() for ClusterFuture ...
[08:08:10.449] | : result already collected: FutureResult
[08:08:10.449] | result() for ClusterFuture ... done
[08:08:10.449] | signalConditions() ...
[08:08:10.450] | : include = ‘immediateCondition’
[08:08:10.450] | : exclude = 
[08:08:10.450] | : resignal = FALSE
[08:08:10.450] | : Number of conditions: 0
[08:08:10.450] | :  int 0
[08:08:10.450] | signalConditions() ... done
[08:08:10.450] | check for misuse ...
[08:08:10.451] | check for misuse ... done
[08:08:10.451] value() for MultisessionFuture (<unnamed-114>) ... done
[08:08:10.451] value: <numeric>
[08:08:10.451] signalConditionsASAP(MultisessionFuture, pos=4) ...
[08:08:10.451] | nx: 6
[08:08:10.451] | relay: TRUE
[08:08:10.451] | stdout: TRUE
[08:08:10.451] | signal: TRUE
[08:08:10.451] | resignal: FALSE
[08:08:10.451] | force: TRUE
[08:08:10.452] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.452] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.452] | until=5
[08:08:10.452] | relaying element #5
[08:08:10.452] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.452] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.452] signalConditionsASAP(MultisessionFuture, pos=4) ... done
[08:08:10.454] resolve() for MultisessionFuture ...
[08:08:10.454] resolve() for MultisessionFuture ... done
[08:08:10.454] length: 2 (resolved future 4)

[08:08:10.455] checking value #5:
[08:08:10.455] 'obj' is NULL
[08:08:10.455] signalConditionsASAP(NULL, pos=5) ...
[08:08:10.455] | nx: 6
[08:08:10.455] | relay: TRUE
[08:08:10.455] | stdout: TRUE
[08:08:10.455] | signal: TRUE
[08:08:10.455] | resignal: FALSE
[08:08:10.455] | force: TRUE
[08:08:10.455] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.455] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.456] | until=6
[08:08:10.456] | relaying element #6
[08:08:10.456] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:10.456] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.456] signalConditionsASAP(NULL, pos=5) ... done
[08:08:10.456] signalConditionsASAP(NULL, pos=5) ...
[08:08:10.456] | nx: 6
[08:08:10.456] | relay: TRUE
[08:08:10.456] | stdout: TRUE
[08:08:10.456] | signal: TRUE
[08:08:10.457] | resignal: FALSE
[08:08:10.457] | force: TRUE
[08:08:10.457] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:10.457] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.457] | until=6
[08:08:10.457] | relaying element #6
[08:08:10.457] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:10.457] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.457] signalConditionsASAP(NULL, pos=5) ... done
[08:08:10.457] length: 1 (resolved future 5)

[08:08:10.458] checking value #6:
[08:08:10.458] 'obj' is atomic
[08:08:10.458] signalConditionsASAP(numeric, pos=6) ...
[08:08:10.458] | nx: 6
[08:08:10.458] | relay: TRUE
[08:08:10.458] | stdout: TRUE
[08:08:10.458] | signal: TRUE
[08:08:10.458] | resignal: FALSE
[08:08:10.458] | force: TRUE
[08:08:10.458] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:10.458] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.459] | until=6
[08:08:10.459] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:10.459] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.459] signalConditionsASAP(numeric, pos=6) ... done
[08:08:10.459] length: 0 (resolved future 6)

[08:08:10.459] Relaying remaining futures ...
[08:08:10.459] | signalConditionsASAP(NULL, pos=0) ...
[08:08:10.459] | : nx: 6
[08:08:10.459] | : relay: TRUE
[08:08:10.460] | : stdout: TRUE
[08:08:10.460] | : signal: TRUE
[08:08:10.460] | : resignal: FALSE
[08:08:10.460] | : force: TRUE
[08:08:10.460] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:10.460] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:10.460] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:10.460] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.460] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:10.460] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 2 3
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
Dimensions: c(2, 3, 1)
[08:08:10.464] future(..., label = NULL) ...
[08:08:10.464] | lazy: FALSE
[08:08:10.464] | stdout: TRUE
[08:08:10.464] | conditions: [n=1] ‘condition’
[08:08:10.464] | gc: FALSE
[08:08:10.464] | earlySignal: FALSE
[08:08:10.464] | getGlobalsAndPackages() ...
[08:08:10.464] | : Searching for globals ...
[08:08:10.466] | : . globals found: [0] 
[08:08:10.466] | : Searching for globals ... done
[08:08:10.466] | : globals: [0] <none>
[08:08:10.466] | : packages: [0] <none>
[08:08:10.466] | getGlobalsAndPackages() ... done
[08:08:10.466] | run() for ‘Future’ (<unnamed-115>) ...
[08:08:10.466] | : state: ‘created’
[08:08:10.467] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:10.467] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:10.467] | : Using MultisessionFutureBackend ...
[08:08:10.467] | : . Number of futures since start: 9 (9 created, 9 launched, 12 finished)
[08:08:10.467] | : . Launching futures ...
[08:08:10.467] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:10.467] | : . ' , Workers: [n=2]
[08:08:10.467] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:10.469] | : . ' , FutureRegistry: ‘workers-e8f111193b2bc48aa139bb2932499cca’
[08:08:10.469] | : . ' , requestWorker() ...
[08:08:10.469] | : . ' , ; requestNode() ...
[08:08:10.469] | : . ' , ; ` Number of workers: 2
[08:08:10.469] | : . ' , ; ` Polling for a free worker ...
[08:08:10.469] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:10.469] | : . ' , ; ` | : Listing all futures
[08:08:10.470] | : . ' , ; ` | : Number of registered futures: 0
[08:08:10.470] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:10.470] | : . ' , ; ` | Total time: 0
[08:08:10.470] | : . ' , ; ` Polling for a free worker ... done
[08:08:10.470] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:10.470] | : . ' , ; ` | Listing all futures
[08:08:10.470] | : . ' , ; ` | Number of registered futures: 0
[08:08:10.470] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:10.470] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:10.470] | : . ' , ; ` Index of first available worker: 1
[08:08:10.471] | : . ' , ; ` Validate that the worker is functional ...
[08:08:10.574] | : . ' , ; ` | Worker is functional
[08:08:10.575] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:10.575] | : . ' , ; ` | : Listing all futures
[08:08:10.575] | : . ' , ; ` | : Number of registered futures: 0
[08:08:10.575] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:10.575] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:10.575] | : . ' , ; requestNode() ... done
[08:08:10.575] | : . ' , ; cluster node index: 1
[08:08:10.575] | : . ' , requestWorker() ... done
[08:08:10.576] | : . ' , eraseGlobalEnvironment() ...
[08:08:10.576] | : . ' , eraseGlobalEnvironment() ... done
[08:08:10.576] | : . ' , launchFuture() ...
[08:08:10.576] | : . ' , ; cluster node index: 1
[08:08:10.576] | : . ' , ; getFutureData() ...
[08:08:10.576] | : . ' , ; ` getFutureCore() ...
[08:08:10.577] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:10.577] | : . ' , ; ` getFutureCore() ... done
[08:08:10.577] | : . ' , ; ` getFutureCapture() ...
[08:08:10.577] | : . ' , ; ` getFutureCapture() ... done
[08:08:10.577] | : . ' , ; ` getFutureContext() ...
[08:08:10.577] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:10.577] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:10.577] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:10.577] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:10.578] | : . ' , ; ` getFutureContext() ... done
[08:08:10.578] | : . ' , ; getFutureData() ... done
[08:08:10.578] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ...
[08:08:10.578] | : . ' , ; ` Appended future to position #1
[08:08:10.578] | : . ' , ; ` Number of registered futures: 1
[08:08:10.578] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ... done
[08:08:10.578] | : . ' , launchFuture() ... done
[08:08:10.578] | : . ' , MultisessionFuture started
[08:08:10.579] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:10.579] | : . Launching futures ... done
[08:08:10.579] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:10.579] | : Using MultisessionFutureBackend ... done
[08:08:10.579] | run() for ‘Future’ (<unnamed-115>) ... done
[08:08:10.579] future(..., label = NULL) ... done
[08:08:10.579] future(..., label = NULL) ...
[08:08:10.579] | lazy: FALSE
[08:08:10.579] | stdout: TRUE
[08:08:10.580] | conditions: [n=1] ‘condition’
[08:08:10.580] | gc: FALSE
[08:08:10.580] | earlySignal: FALSE
[08:08:10.580] | getGlobalsAndPackages() ...
[08:08:10.580] | : Searching for globals ...
[08:08:10.581] | : . globals found: [0] 
[08:08:10.581] | : Searching for globals ... done
[08:08:10.581] | : globals: [0] <none>
[08:08:10.581] | : packages: [0] <none>
[08:08:10.581] | getGlobalsAndPackages() ... done
[08:08:10.582] | run() for ‘Future’ (<unnamed-116>) ...
[08:08:10.582] | : state: ‘created’
[08:08:10.582] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:10.582] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:10.582] | : Using MultisessionFutureBackend ...
[08:08:10.582] | : . Number of futures since start: 10 (10 created, 10 launched, 12 finished)
[08:08:10.582] | : . Launching futures ...
[08:08:10.583] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:10.583] | : . ' , Workers: [n=2]
[08:08:10.583] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:10.584] | : . ' , FutureRegistry: ‘workers-e8f111193b2bc48aa139bb2932499cca’
[08:08:10.584] | : . ' , requestWorker() ...
[08:08:10.584] | : . ' , ; requestNode() ...
[08:08:10.585] | : . ' , ; ` Number of workers: 2
[08:08:10.585] | : . ' , ; ` Polling for a free worker ...
[08:08:10.585] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:10.585] | : . ' , ; ` | : Listing all futures
[08:08:10.585] | : . ' , ; ` | : Number of registered futures: 1
[08:08:10.585] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:10.585] | : . ' , ; ` | Total time: 0
[08:08:10.585] | : . ' , ; ` Polling for a free worker ... done
[08:08:10.585] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:10.585] | : . ' , ; ` | Listing all futures
[08:08:10.586] | : . ' , ; ` | Number of registered futures: 1
[08:08:10.586] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:10.586] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:10.586] | : . ' , ; ` Index of first available worker: 2
[08:08:10.586] | : . ' , ; ` Validate that the worker is functional ...
[08:08:10.686] | : . ' , ; ` | Worker is functional
[08:08:10.687] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:10.687] | : . ' , ; ` | : Listing all futures
[08:08:10.687] | : . ' , ; ` | : Number of registered futures: 1
[08:08:10.687] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:10.687] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:10.687] | : . ' , ; requestNode() ... done
[08:08:10.687] | : . ' , ; cluster node index: 2
[08:08:10.688] | : . ' , requestWorker() ... done
[08:08:10.688] | : . ' , eraseGlobalEnvironment() ...
[08:08:10.688] | : . ' , eraseGlobalEnvironment() ... done
[08:08:10.688] | : . ' , launchFuture() ...
[08:08:10.688] | : . ' , ; cluster node index: 2
[08:08:10.688] | : . ' , ; getFutureData() ...
[08:08:10.689] | : . ' , ; ` getFutureCore() ...
[08:08:10.689] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:10.689] | : . ' , ; ` getFutureCore() ... done
[08:08:10.689] | : . ' , ; ` getFutureCapture() ...
[08:08:10.689] | : . ' , ; ` getFutureCapture() ... done
[08:08:10.689] | : . ' , ; ` getFutureContext() ...
[08:08:10.689] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:10.689] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:10.689] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:10.690] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:10.690] | : . ' , ; ` getFutureContext() ... done
[08:08:10.690] | : . ' , ; getFutureData() ... done
[08:08:10.690] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ...
[08:08:10.690] | : . ' , ; ` Appended future to position #2
[08:08:10.690] | : . ' , ; ` Number of registered futures: 2
[08:08:10.690] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ... done
[08:08:10.691] | : . ' , launchFuture() ... done
[08:08:10.691] | : . ' , MultisessionFuture started
[08:08:10.691] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:10.691] | : . Launching futures ... done
[08:08:10.691] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:10.691] | : Using MultisessionFutureBackend ... done
[08:08:10.691] | run() for ‘Future’ (<unnamed-116>) ... done
[08:08:10.691] future(..., label = NULL) ... done
[08:08:10.692] future(..., label = NULL) ...
[08:08:10.692] | lazy: FALSE
[08:08:10.692] | stdout: TRUE
[08:08:10.692] | conditions: [n=1] ‘condition’
[08:08:10.692] | gc: FALSE
[08:08:10.692] | earlySignal: FALSE
[08:08:10.692] | getGlobalsAndPackages() ...
[08:08:10.692] | : Searching for globals ...
[08:08:10.695] | : . globals found: [1] ‘{’
[08:08:10.696] | : Searching for globals ... done
[08:08:10.696] | : Resolving globals: FALSE
[08:08:10.696] | : Search for packages associated with the globals ...
[08:08:10.696] | : . Packages associated with globals: [1] ‘base’
[08:08:10.696] | : . Packages: [1] ‘base’
[08:08:10.696] | : Search for packages associated with the globals ... done
[08:08:10.696] | : Packages after dropping 'base': [0] 
[08:08:10.697] | : globals: [0] 
[08:08:10.697] | : packages: [0] 
[08:08:10.697] | getGlobalsAndPackages() ... done
[08:08:10.697] | run() for ‘Future’ (<unnamed-117>) ...
[08:08:10.697] | : state: ‘created’
[08:08:10.697] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:10.697] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:10.697] | : Using MultisessionFutureBackend ...
[08:08:10.698] | : . Number of futures since start: 11 (11 created, 11 launched, 12 finished)
[08:08:10.698] | : . Launching futures ...
[08:08:10.698] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:10.698] | : . ' , Workers: [n=2]
[08:08:10.698] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:10.700] | : . ' , FutureRegistry: ‘workers-e8f111193b2bc48aa139bb2932499cca’
[08:08:10.700] | : . ' , requestWorker() ...
[08:08:10.700] | : . ' , ; requestNode() ...
[08:08:10.700] | : . ' , ; ` Number of workers: 2
[08:08:10.700] | : . ' , ; ` Polling for a free worker ...
[08:08:10.700] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:10.700] | : . ' , ; ` | : Listing all futures
[08:08:10.700] | : . ' , ; ` | : Number of registered futures: 2
[08:08:10.701] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:10.701] | : . ' , ; ` | Poll #1 (0): usedNodes() = 2, workers = 2
[08:08:10.711] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'collect-first', earlySignal = 1) ...
[08:08:10.711] | : . ' , ; ` | : collectValues('workers-e8f111193b2bc48aa139bb2932499cca', firstOnly = TRUE) ...
[08:08:10.711] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-115>) ...
[08:08:10.712] | : . ' , ; ` | : . ' Cluster node socket connection: index=4, id=1577
[08:08:10.712] | : . ' , ; ` | : . ' assertValidConnection() ...
[08:08:10.712] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:10.712] | : . ' , ; ` | : . ' assertValidConnection() ... done
[08:08:10.713] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ...
[08:08:10.713] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:10.713] | : . ' , ; ` | : . ' , [1] TRUE
[08:08:10.713] | : . ' , ; ` | : . ' , received data:
[08:08:10.713] | : . ' , ; ` | : . ' , List of 5
[08:08:10.713] | : . ' , ; ` | : . ' ,  $ type   : chr "VALUE"
[08:08:10.713] | : . ' , ; ` | : . ' ,  $ value  :List of 16
[08:08:10.713] | : . ' , ; ` | : . ' ,   ..$ value              : num 2
[08:08:10.713] | : . ' , ; ` | : . ' ,   ..$ visible            : logi TRUE
[08:08:10.713] | : . ' , ; ` | : . ' ,   ..$ stdout             : chr ""
[08:08:10.713] | : . ' , ; ` | : . ' ,   ..$ conditions         : list()
[08:08:10.713] | : . ' , ; ` | : . ' ,   ..$ rng                : logi FALSE
[08:08:10.713] | : . ' , ; ` | : . ' ,   ..$ seed               : NULL
[08:08:10.713] | : . ' , ; ` | : . ' ,   ..$ misuseGlobalEnv    : NULL
[08:08:10.713] | : . ' , ; ` | : . ' ,   ..$ misuseConnections  :List of 3
[08:08:10.713] | : . ' , ; ` | : . ' ,   .. ..$ added   : NULL
[08:08:10.713] | : . ' , ; ` | : . ' ,   .. ..$ removed : NULL
[08:08:10.713] | : . ' , ; ` | : . ' ,   .. ..$ replaced: NULL
[08:08:10.713] | : . ' , ; ` | : . ' ,   ..$ misuseDevices      : NULL
[08:08:10.713] | : . ' , ; ` | : . ' ,   ..$ misuseDefaultDevice: list()
[08:08:10.713] | : . ' , ; ` | : . ' ,   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:10"
[08:08:10.713] | : . ' , ; ` | : . ' ,   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:10"
[08:08:10.713] | : . ' , ; ` | : . ' ,   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "115"
[08:08:10.713] | : . ' , ; ` | : . ' ,   ..$ session_uuid       : chr "272d3c9c235e1bff6dddaa89109c42b3"
[08:08:10.713] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "source")=List of 5
[08:08:10.713] | : . ' , ; ` | : . ' ,   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:10.713] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:10.713] | : . ' , ; ` | : . ' ,   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:10.713] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:10.713] | : . ' , ; ` | : . ' ,   .. .. ..$ pid   : int 69173
[08:08:10.713] | : . ' , ; ` | : . ' ,   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:10.713] | : . ' , ; ` | : . ' ,   .. .. ..$ random: int 2147483647
[08:08:10.713] | : . ' , ; ` | : . ' ,   ..$ r_info             :List of 4
[08:08:10.713] | : . ' , ; ` | : . ' ,   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:10.713] | : . ' , ; ` | : . ' ,   .. .. ..$ : int [1:3] 4 5 1
[08:08:10.713] | : . ' , ; ` | : . ' ,   .. ..$ os           : chr "unix"
[08:08:10.713] | : . ' , ; ` | : . ' ,   .. ..$ os_name      : chr "Linux"
[08:08:10.713] | : . ' , ; ` | : . ' ,   .. ..$ captures_utf8: logi TRUE
[08:08:10.713] | : . ' , ; ` | : . ' ,   ..$ version            : chr "1.8"
[08:08:10.713] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr "FutureResult"
[08:08:10.713] | : . ' , ; ` | : . ' ,  $ success: logi TRUE
[08:08:10.713] | : . ' , ; ` | : . ' ,  $ time   : 'proc_time' Named num [1:5] 0.007 0 0.008 0 0
[08:08:10.713] | : . ' , ; ` | : . ' ,   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:10.713] | : . ' , ; ` | : . ' ,  $ tag    : NULL
[08:08:10.726] | : . ' , ; ` | : . ' , Received FutureResult
[08:08:10.727] | : . ' , ; ` | : . ' , FutureResult:
[08:08:10.727] | : . ' , ; ` | : . ' , value: ‘numeric’
[08:08:10.727] | : . ' , ; ` | : . ' , visible: TRUE
[08:08:10.727] | : . ' , ; ` | : . ' , stdout: character
[08:08:10.727] | : . ' , ; ` | : . ' , conditions: [n = 0] 
[08:08:10.727] | : . ' , ; ` | : . ' , RNG used: FALSE
[08:08:10.727] | : . ' , ; ` | : . ' , duration: 0.006843805 secs (started 2025-06-17 08:08:10.618892)
[08:08:10.727] | : . ' , ; ` | : . ' , version: 1.8
[08:08:10.727] | : . ' , ; ` | : . ' , FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ...
[08:08:10.727] | : . ' , ; ` | : . ' , ; Removed future from position #1
[08:08:10.727] | : . ' , ; ` | : . ' , ; Number of registered futures: 1
[08:08:10.727] | : . ' , ; ` | : . ' , FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ... done
[08:08:10.727] | : . ' , ; ` | : . ' , Erased future from future backend
[08:08:10.728] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:10.728] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:10.728] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:10.728] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:10.728] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:10.728] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:10.728] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:10.728] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:10.728] | : . ' , ; ` | : . ' , ;  int 0
[08:08:10.729] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:10.729] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ... done
[08:08:10.729] | : . ' , ; ` | : . ' receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:10.729] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-115>) ... done
[08:08:10.729] | : . ' , ; ` | : . assertFutureResult() ...
[08:08:10.729] | : . ' , ; ` | : . ' Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:10.729] | : . ' , ; ` | : . ' Future uuid: 115
[08:08:10.729] | : . ' , ; ` | : . ' identical; success
[08:08:10.730] | : . ' , ; ` | : . assertFutureResult() ... done
[08:08:10.730] | : . ' , ; ` | : . Future at position #1 is resolved ...
[08:08:10.730] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-115>) ...
[08:08:10.730] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:10.730] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:10.730] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:10.730] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:10.730] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:10.730] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:10.731] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:10.731] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:10.731] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:10.731] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:10.731] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:10.731] | : . ' , ; ` | : . ' , ;  int 0
[08:08:10.732] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:10.732] | : . ' , ; ` | : . ' , check for misuse ...
[08:08:10.732] | : . ' , ; ` | : . ' , check for misuse ... done
[08:08:10.732] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-115>) ... done
[08:08:10.733] | : . ' , ; ` | : . Future at position #1 is resolved ... done
[08:08:10.733] | : . ' , ; ` | : collectValues('workers-e8f111193b2bc48aa139bb2932499cca', firstOnly = TRUE) ... done
[08:08:10.733] | : . ' , ; ` | : Remove collected futures ...
[08:08:10.733] | : . ' , ; ` | : . Indices of futures to drop: [n=1] ‘1’
[08:08:10.733] | : . ' , ; ` | : Remove collected futures ... done
[08:08:10.733] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'collect-first', earlySignal = 1) ... done
[08:08:10.733] | : . ' , ; ` | Early signaling of 2 future candidates ...
[08:08:10.733] | : . ' , ; ` | Number of futures with early signaling requested: 0
[08:08:10.733] | : . ' , ; ` | Early signaling of 2 future candidates ... done
[08:08:10.734] | : . ' , ; ` | Number of registered futures: 2
[08:08:10.734] | : . ' , ; ` Polling for a free worker ... done
[08:08:10.734] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:10.734] | : . ' , ; ` | Listing all futures
[08:08:10.734] | : . ' , ; ` | Number of registered futures: 1
[08:08:10.734] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:10.734] | : . ' , ; ` Total time: 0.0334863662719727
[08:08:10.734] | : . ' , ; requestNode() ... done
[08:08:10.734] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:10.734] | : . ' , ; ` Listing all futures
[08:08:10.735] | : . ' , ; ` Number of registered futures: 1
[08:08:10.735] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:10.735] | : . ' , ; avail: [n=2] ‘1’
[08:08:10.735] | : . ' , ; Index of first available worker: 1
[08:08:10.735] | : . ' , ; Validate that the worker is functional ...
[08:08:10.834] | : . ' , ; ` Worker is functional
[08:08:10.835] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:10.835] | : . ' , ; ` | Listing all futures
[08:08:10.835] | : . ' , ; ` | Number of registered futures: 1
[08:08:10.835] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:10.835] | : . ' , ; Validate that the worker is functional ... done
[08:08:10.835] | : . ' , requestWorker() ... done
[08:08:10.835] | : . ' , cluster node index: 1
[08:08:10.836] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:10.836] | : . ' eraseGlobalEnvironment() ...
[08:08:10.836] | : . ' eraseGlobalEnvironment() ... done
[08:08:10.836] | : . ' launchFuture() ...
[08:08:10.836] | : . ' , cluster node index: 1
[08:08:10.836] | : . ' , getFutureData() ...
[08:08:10.837] | : . ' , ; getFutureCore() ...
[08:08:10.837] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:10.837] | : . ' , ; getFutureCore() ... done
[08:08:10.837] | : . ' , ; getFutureCapture() ...
[08:08:10.837] | : . ' , ; getFutureCapture() ... done
[08:08:10.837] | : . ' , ; getFutureContext() ...
[08:08:10.837] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:10.837] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:10.837] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:10.838] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:10.838] | : . ' , ; getFutureContext() ... done
[08:08:10.838] | : . ' , getFutureData() ... done
[08:08:10.838] | : . ' , FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ...
[08:08:10.838] | : . ' , ; Appended future to position #2
[08:08:10.838] | : . ' , ; Number of registered futures: 2
[08:08:10.838] | : . ' , FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ... done
[08:08:10.838] | : . ' launchFuture() ... done
[08:08:10.839] | : . ' MultisessionFuture started
[08:08:10.839] | : . Launching futures ... done
[08:08:10.839] | : Using MultisessionFutureBackend ... done
[08:08:10.839] | : Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:10.839] | run() for ‘Future’ (<unnamed-117>) ... done
[08:08:10.839] future(..., label = NULL) ... done

Classes 'listenv', 'environment' <environment: 0x55675afc7600> 
Classes 'listenv', 'environment' <environment: 0x5567589c7c70> 
 - attr(*, "dim.")= int [1:3] 2 3 1
 - attr(*, "dimnames.")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
[08:08:10.842] resolved() for listenv ...
[08:08:10.843] | resolved() for array ...
[08:08:10.843] | : Number of elements: 6
[08:08:10.843] | : Number of futures: 6
[08:08:10.843] | : resolved() for MultisessionFuture (<unnamed-116>) ...
[08:08:10.844] | : . Cluster node socket connection: index=5, id=1578
[08:08:10.844] | : . assertValidConnection() ...
[08:08:10.844] | : . ' cluster node index: 2
[08:08:10.844] | : . assertValidConnection() ... done
[08:08:10.845] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:10.845] | : . ' cluster node index: 2
[08:08:10.845] | : . ' [1] TRUE
[08:08:10.845] | : . ' received data:
[08:08:10.845] | : . ' List of 5
[08:08:10.845] | : . '  $ type   : chr "VALUE"
[08:08:10.845] | : . '  $ value  :List of 16
[08:08:10.845] | : . '   ..$ value              : NULL
[08:08:10.845] | : . '   ..$ visible            : logi TRUE
[08:08:10.845] | : . '   ..$ stdout             : chr ""
[08:08:10.845] | : . '   ..$ conditions         : list()
[08:08:10.845] | : . '   ..$ rng                : logi FALSE
[08:08:10.845] | : . '   ..$ seed               : NULL
[08:08:10.845] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:10.845] | : . '   ..$ misuseConnections  :List of 3
[08:08:10.845] | : . '   .. ..$ added   : NULL
[08:08:10.845] | : . '   .. ..$ removed : NULL
[08:08:10.845] | : . '   .. ..$ replaced: NULL
[08:08:10.845] | : . '   ..$ misuseDevices      : NULL
[08:08:10.845] | : . '   ..$ misuseDefaultDevice: list()
[08:08:10.845] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:10"
[08:08:10.845] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:10"
[08:08:10.845] | : . '   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "116"
[08:08:10.845] | : . '   ..$ session_uuid       : chr "318d9a862536e33b210e27df6cf2a506"
[08:08:10.845] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:10.845] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:10.845] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:10.845] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:10.845] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:10.845] | : . '   .. .. ..$ pid   : int 69172
[08:08:10.845] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:10.845] | : . '   .. .. ..$ random: int 2147483647
[08:08:10.845] | : . '   ..$ r_info             :List of 4
[08:08:10.845] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:10.845] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:10.845] | : . '   .. ..$ os           : chr "unix"
[08:08:10.845] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:10.845] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:10.845] | : . '   ..$ version            : chr "1.8"
[08:08:10.845] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:10.845] | : . '  $ success: logi TRUE
[08:08:10.845] | : . '  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.003 0 0
[08:08:10.845] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:10.845] | : . '  $ tag    : NULL
[08:08:10.856] | : . ' Received FutureResult
[08:08:10.856] | : . ' FutureResult:
[08:08:10.856] | : . ' value: ‘NULL’
[08:08:10.856] | : . ' visible: TRUE
[08:08:10.856] | : . ' stdout: character
[08:08:10.856] | : . ' conditions: [n = 0] 
[08:08:10.856] | : . ' RNG used: FALSE
[08:08:10.856] | : . ' duration: 0.003032207 secs (started 2025-06-17 08:08:10.730868)
[08:08:10.856] | : . ' version: 1.8
[08:08:10.856] | : . ' FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ...
[08:08:10.856] | : . ' , Removed future from position #1
[08:08:10.857] | : . ' , Number of registered futures: 1
[08:08:10.857] | : . ' FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ... done
[08:08:10.857] | : . ' Erased future from future backend
[08:08:10.857] | : . ' result() for ClusterFuture ...
[08:08:10.857] | : . ' , result already collected: FutureResult
[08:08:10.857] | : . ' result() for ClusterFuture ... done
[08:08:10.857] | : . ' signalConditions() ...
[08:08:10.857] | : . ' , include = ‘immediateCondition’
[08:08:10.857] | : . ' , exclude = 
[08:08:10.858] | : . ' , resignal = FALSE
[08:08:10.858] | : . ' , Number of conditions: 0
[08:08:10.858] | : . ' ,  int 0
[08:08:10.858] | : . ' signalConditions() ... done
[08:08:10.858] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:10.858] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:10.858] | : resolved() for MultisessionFuture (<unnamed-116>) ... done
[08:08:10.859] | : assertFutureResult() ...
[08:08:10.859] | : . Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:10.859] | : . Future uuid: 116
[08:08:10.859] | : . identical; success
[08:08:10.859] | : assertFutureResult() ... done
[08:08:10.859] | : resolved() for MultisessionFuture (<unnamed-117>) ...
[08:08:10.859] | : . Cluster node socket connection: index=4, id=1577
[08:08:10.859] | : . assertValidConnection() ...
[08:08:10.860] | : . ' cluster node index: 1
[08:08:10.860] | : . assertValidConnection() ... done
[08:08:10.870] | : . socketSelect(list(<connection #4 (id=1577)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:10.870] | : resolved() for MultisessionFuture (<unnamed-117>) ... done
[08:08:10.870] | resolved() for array ... done
[08:08:10.871] resolved() for listenv ... done
 logi [1:2, 1:3, 1] TRUE TRUE TRUE FALSE TRUE TRUE
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:10.873] value() for listenv ...
[08:08:10.873] | recursive: 0
[08:08:10.873] | reduce: FALSE
[08:08:10.874] | length: 6
[08:08:10.874] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:10.874] | Number of remaining objects: 6
[08:08:10.874] | checking value #1:
[08:08:10.874] | 'obj' is atomic
[08:08:10.874] | signalConditionsASAP(numeric, pos=1) ...
[08:08:10.874] | : nx: 6
[08:08:10.874] | : relay: TRUE
[08:08:10.875] | : stdout: TRUE
[08:08:10.875] | : signal: TRUE
[08:08:10.875] | : resignal: FALSE
[08:08:10.875] | : force: TRUE
[08:08:10.875] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:10.875] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:10.875] | : until=2
[08:08:10.875] | : relaying element #2
[08:08:10.875] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:10.875] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:10.875] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:10.876] | length: 5 (resolved future 1)
[08:08:10.876] value() for listenv ... done
[08:08:10.876] checking value #2:
[08:08:10.876] 'obj' is MultisessionFuture
[08:08:10.876] MultisessionFuture #2
[08:08:10.876] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:10.876] | nx: 6
[08:08:10.876] | relay: TRUE
[08:08:10.876] | stdout: TRUE
[08:08:10.877] | signal: TRUE
[08:08:10.877] | resignal: FALSE
[08:08:10.877] | force: TRUE
[08:08:10.877] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:10.877] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:10.877] | until=2
[08:08:10.877] | relaying element #2
[08:08:10.877] | value() for MultisessionFuture (<unnamed-115>) ...
[08:08:10.877] | : result() for ClusterFuture ...
[08:08:10.877] | : . result already collected: FutureResult
[08:08:10.878] | : result() for ClusterFuture ... done
[08:08:10.878] | : result() for ClusterFuture ...
[08:08:10.878] | : . result already collected: FutureResult
[08:08:10.878] | : result() for ClusterFuture ... done
[08:08:10.878] | : signalConditions() ...
[08:08:10.878] | : . include = ‘immediateCondition’
[08:08:10.878] | : . exclude = 
[08:08:10.878] | : . resignal = FALSE
[08:08:10.878] | : . Number of conditions: 0
[08:08:10.878] | : .  int 0
[08:08:10.879] | : signalConditions() ... done
[08:08:10.879] | : relay stdout ...
[08:08:10.879] | : relay stdout ... done
[08:08:10.879] | : check for misuse ...
[08:08:10.879] | : check for misuse ... done
[08:08:10.879] | value() for MultisessionFuture (<unnamed-115>) ... done
[08:08:10.880] | result() for ClusterFuture ...
[08:08:10.880] | : result already collected: FutureResult
[08:08:10.880] | result() for ClusterFuture ... done
[08:08:10.880] | signalConditions() ...
[08:08:10.880] | : include = ‘immediateCondition’
[08:08:10.880] | : exclude = 
[08:08:10.880] | : resignal = FALSE
[08:08:10.880] | : Number of conditions: 0
[08:08:10.880] | :  int 0
[08:08:10.881] | signalConditions() ... done
[08:08:10.881] | result() for ClusterFuture ...
[08:08:10.881] | : result already collected: FutureResult
[08:08:10.881] | result() for ClusterFuture ... done
[08:08:10.881] | signalConditions() ...
[08:08:10.881] | : include = ‘condition’
[08:08:10.881] | : exclude = ‘error’, ‘immediateCondition’
[08:08:10.881] | : resignal = TRUE
[08:08:10.882] | : Number of conditions: 0
[08:08:10.882] | :  int 0
[08:08:10.882] | signalConditions() ... done
[08:08:10.882] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:10.882] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:10.882] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:10.882] value(<MultisessionFuture>, ...) ...
[08:08:10.883] value(<MultisessionFuture>, ...) ... done
[08:08:10.883] value() for MultisessionFuture (<unnamed-115>) ...
[08:08:10.883] | result() for ClusterFuture ...
[08:08:10.883] | : result already collected: FutureResult
[08:08:10.883] | result() for ClusterFuture ... done
[08:08:10.883] | result() for ClusterFuture ...
[08:08:10.883] | : result already collected: FutureResult
[08:08:10.883] | result() for ClusterFuture ... done
[08:08:10.883] | signalConditions() ...
[08:08:10.883] | : include = ‘immediateCondition’
[08:08:10.884] | : exclude = 
[08:08:10.884] | : resignal = FALSE
[08:08:10.884] | : Number of conditions: 0
[08:08:10.884] | :  int 0
[08:08:10.884] | signalConditions() ... done
[08:08:10.884] | check for misuse ...
[08:08:10.884] | check for misuse ... done
[08:08:10.885] value() for MultisessionFuture (<unnamed-115>) ... done
[08:08:10.885] value: <numeric>
[08:08:10.885] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:10.885] | nx: 6
[08:08:10.885] | relay: TRUE
[08:08:10.885] | stdout: TRUE
[08:08:10.885] | signal: TRUE
[08:08:10.885] | resignal: FALSE
[08:08:10.885] | force: TRUE
[08:08:10.886] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:10.886] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:10.886] | until=3
[08:08:10.886] | relaying element #3
[08:08:10.886] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:10.886] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:10.886] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:10.886] resolve() for MultisessionFuture ...
[08:08:10.886] resolve() for MultisessionFuture ... done
[08:08:10.886] length: 4 (resolved future 2)

[08:08:10.887] checking value #3:
[08:08:10.887] 'obj' is MultisessionFuture
[08:08:10.887] MultisessionFuture #3
[08:08:10.887] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:10.887] | nx: 6
[08:08:10.887] | relay: TRUE
[08:08:10.887] | stdout: TRUE
[08:08:10.887] | signal: TRUE
[08:08:10.887] | resignal: FALSE
[08:08:10.887] | force: TRUE
[08:08:10.888] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:10.888] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:10.888] | until=3
[08:08:10.888] | relaying element #3
[08:08:10.888] | value() for MultisessionFuture (<unnamed-116>) ...
[08:08:10.888] | : result() for ClusterFuture ...
[08:08:10.888] | : . result already collected: FutureResult
[08:08:10.888] | : result() for ClusterFuture ... done
[08:08:10.888] | : result() for ClusterFuture ...
[08:08:10.888] | : . result already collected: FutureResult
[08:08:10.889] | : result() for ClusterFuture ... done
[08:08:10.889] | : signalConditions() ...
[08:08:10.889] | : . include = ‘immediateCondition’
[08:08:10.889] | : . exclude = 
[08:08:10.889] | : . resignal = FALSE
[08:08:10.889] | : . Number of conditions: 0
[08:08:10.889] | : .  int 0
[08:08:10.889] | : signalConditions() ... done
[08:08:10.890] | : relay stdout ...
[08:08:10.890] | : relay stdout ... done
[08:08:10.890] | : check for misuse ...
[08:08:10.890] | : check for misuse ... done
[08:08:10.890] | value() for MultisessionFuture (<unnamed-116>) ... done
[08:08:10.890] | result() for ClusterFuture ...
[08:08:10.890] | : result already collected: FutureResult
[08:08:10.890] | result() for ClusterFuture ... done
[08:08:10.890] | signalConditions() ...
[08:08:10.891] | : include = ‘immediateCondition’
[08:08:10.891] | : exclude = 
[08:08:10.891] | : resignal = FALSE
[08:08:10.891] | : Number of conditions: 0
[08:08:10.891] | :  int 0
[08:08:10.891] | signalConditions() ... done
[08:08:10.891] | result() for ClusterFuture ...
[08:08:10.892] | : result already collected: FutureResult
[08:08:10.892] | result() for ClusterFuture ... done
[08:08:10.892] | signalConditions() ...
[08:08:10.892] | : include = ‘condition’
[08:08:10.892] | : exclude = ‘error’, ‘immediateCondition’
[08:08:10.892] | : resignal = TRUE
[08:08:10.892] | : Number of conditions: 0
[08:08:10.892] | :  int 0
[08:08:10.893] | signalConditions() ... done
[08:08:10.893] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:10.893] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:10.893] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:10.895] value(<MultisessionFuture>, ...) ...
[08:08:10.895] value(<MultisessionFuture>, ...) ... done
[08:08:10.895] value() for MultisessionFuture (<unnamed-116>) ...
[08:08:10.895] | result() for ClusterFuture ...
[08:08:10.895] | : result already collected: FutureResult
[08:08:10.896] | result() for ClusterFuture ... done
[08:08:10.896] | result() for ClusterFuture ...
[08:08:10.896] | : result already collected: FutureResult
[08:08:10.896] | result() for ClusterFuture ... done
[08:08:10.896] | signalConditions() ...
[08:08:10.896] | : include = ‘immediateCondition’
[08:08:10.896] | : exclude = 
[08:08:10.896] | : resignal = FALSE
[08:08:10.896] | : Number of conditions: 0
[08:08:10.896] | :  int 0
[08:08:10.897] | signalConditions() ... done
[08:08:10.897] | check for misuse ...
[08:08:10.897] | check for misuse ... done
[08:08:10.897] value() for MultisessionFuture (<unnamed-116>) ... done
[08:08:10.897] value: <NULL>
[08:08:10.897] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:10.897] | nx: 6
[08:08:10.898] | relay: TRUE
[08:08:10.898] | stdout: TRUE
[08:08:10.898] | signal: TRUE
[08:08:10.898] | resignal: FALSE
[08:08:10.898] | force: TRUE
[08:08:10.898] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:10.898] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:10.898] | until=4
[08:08:10.898] | relaying element #4
[08:08:10.898] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:10.899] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:10.899] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:10.899] resolve() for MultisessionFuture ...
[08:08:10.899] resolve() for MultisessionFuture ... done
[08:08:10.899] length: 3 (resolved future 3)

[08:08:10.899] checking value #4:
[08:08:10.899] 'obj' is MultisessionFuture
[08:08:10.899] resolved() for MultisessionFuture (<unnamed-117>) ...
[08:08:10.900] | Cluster node socket connection: index=4, id=1577
[08:08:10.900] | assertValidConnection() ...
[08:08:10.900] | : cluster node index: 1
[08:08:10.900] | assertValidConnection() ... done
[08:08:10.900] | receiveMessageFromWorker() for ClusterFuture ...
[08:08:10.900] | : cluster node index: 1
[08:08:10.901] | : [1] TRUE
[08:08:10.901] | : received data:
[08:08:10.901] | : List of 5
[08:08:10.901] | :  $ type   : chr "VALUE"
[08:08:10.901] | :  $ value  :List of 16
[08:08:10.901] | :   ..$ value              : num 4
[08:08:10.901] | :   ..$ visible            : logi TRUE
[08:08:10.901] | :   ..$ stdout             : chr ""
[08:08:10.901] | :   ..$ conditions         : list()
[08:08:10.901] | :   ..$ rng                : logi FALSE
[08:08:10.901] | :   ..$ seed               : NULL
[08:08:10.901] | :   ..$ misuseGlobalEnv    : NULL
[08:08:10.901] | :   ..$ misuseConnections  :List of 3
[08:08:10.901] | :   .. ..$ added   : NULL
[08:08:10.901] | :   .. ..$ removed : NULL
[08:08:10.901] | :   .. ..$ replaced: NULL
[08:08:10.901] | :   ..$ misuseDevices      : NULL
[08:08:10.901] | :   ..$ misuseDefaultDevice: list()
[08:08:10.901] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:10"
[08:08:10.901] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:10"
[08:08:10.901] | :   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "117"
[08:08:10.901] | :   ..$ session_uuid       : chr "272d3c9c235e1bff6dddaa89109c42b3"
[08:08:10.901] | :   .. ..- attr(*, "source")=List of 5
[08:08:10.901] | :   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:10.901] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:10.901] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:10.901] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:10.901] | :   .. .. ..$ pid   : int 69173
[08:08:10.901] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:10.901] | :   .. .. ..$ random: int 2147483647
[08:08:10.901] | :   ..$ r_info             :List of 4
[08:08:10.901] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:10.901] | :   .. .. ..$ : int [1:3] 4 5 1
[08:08:10.901] | :   .. ..$ os           : chr "unix"
[08:08:10.901] | :   .. ..$ os_name      : chr "Linux"
[08:08:10.901] | :   .. ..$ captures_utf8: logi TRUE
[08:08:10.901] | :   ..$ version            : chr "1.8"
[08:08:10.901] | :   ..- attr(*, "class")= chr "FutureResult"
[08:08:10.901] | :  $ success: logi TRUE
[08:08:10.901] | :  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[08:08:10.901] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:10.901] | :  $ tag    : NULL
[08:08:10.911] | : Received FutureResult
[08:08:10.912] | : FutureResult:
[08:08:10.912] | : value: ‘numeric’
[08:08:10.912] | : visible: TRUE
[08:08:10.912] | : stdout: character
[08:08:10.912] | : conditions: [n = 0] 
[08:08:10.912] | : RNG used: FALSE
[08:08:10.912] | : duration: 0.002978802 secs (started 2025-06-17 08:08:10.878822)
[08:08:10.912] | : version: 1.8
[08:08:10.912] | : FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ...
[08:08:10.912] | : . Removed future from position #1
[08:08:10.912] | : . Number of registered futures: 0
[08:08:10.912] | : FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ... done
[08:08:10.912] | : Erased future from future backend
[08:08:10.913] | : result() for ClusterFuture ...
[08:08:10.913] | : . result already collected: FutureResult
[08:08:10.913] | : result() for ClusterFuture ... done
[08:08:10.913] | : signalConditions() ...
[08:08:10.913] | : . include = ‘immediateCondition’
[08:08:10.913] | : . exclude = 
[08:08:10.913] | : . resignal = FALSE
[08:08:10.913] | : . Number of conditions: 0
[08:08:10.913] | : .  int 0
[08:08:10.914] | : signalConditions() ... done
[08:08:10.914] | receiveMessageFromWorker() for ClusterFuture ... done
[08:08:10.914] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:10.914] resolved() for MultisessionFuture (<unnamed-117>) ... done
[08:08:10.914] assertFutureResult() ...
[08:08:10.914] | Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:10.914] | Future uuid: 117
[08:08:10.914] | identical; success
[08:08:10.914] assertFutureResult() ... done
[08:08:10.915] MultisessionFuture #4
[08:08:10.915] signalConditionsASAP(MultisessionFuture, pos=4) ...
[08:08:10.915] | nx: 6
[08:08:10.915] | relay: TRUE
[08:08:10.915] | stdout: TRUE
[08:08:10.915] | signal: TRUE
[08:08:10.915] | resignal: FALSE
[08:08:10.915] | force: TRUE
[08:08:10.915] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:10.915] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:10.915] | until=4
[08:08:10.916] | relaying element #4
[08:08:10.916] | value() for MultisessionFuture (<unnamed-117>) ...
[08:08:10.916] | : result() for ClusterFuture ...
[08:08:10.916] | : . result already collected: FutureResult
[08:08:10.916] | : result() for ClusterFuture ... done
[08:08:10.916] | : result() for ClusterFuture ...
[08:08:10.916] | : . result already collected: FutureResult
[08:08:10.916] | : result() for ClusterFuture ... done
[08:08:10.916] | : signalConditions() ...
[08:08:10.916] | : . include = ‘immediateCondition’
[08:08:10.917] | : . exclude = 
[08:08:10.917] | : . resignal = FALSE
[08:08:10.917] | : . Number of conditions: 0
[08:08:10.917] | : .  int 0
[08:08:10.917] | : signalConditions() ... done
[08:08:10.917] | : relay stdout ...
[08:08:10.917] | : relay stdout ... done
[08:08:10.917] | : check for misuse ...
[08:08:10.918] | : check for misuse ... done
[08:08:10.918] | value() for MultisessionFuture (<unnamed-117>) ... done
[08:08:10.918] | result() for ClusterFuture ...
[08:08:10.918] | : result already collected: FutureResult
[08:08:10.918] | result() for ClusterFuture ... done
[08:08:10.918] | signalConditions() ...
[08:08:10.918] | : include = ‘immediateCondition’
[08:08:10.918] | : exclude = 
[08:08:10.918] | : resignal = FALSE
[08:08:10.918] | : Number of conditions: 0
[08:08:10.919] | :  int 0
[08:08:10.919] | signalConditions() ... done
[08:08:10.919] | result() for ClusterFuture ...
[08:08:10.919] | : result already collected: FutureResult
[08:08:10.919] | result() for ClusterFuture ... done
[08:08:10.919] | signalConditions() ...
[08:08:10.919] | : include = ‘condition’
[08:08:10.920] | : exclude = ‘error’, ‘immediateCondition’
[08:08:10.920] | : resignal = TRUE
[08:08:10.920] | : Number of conditions: 0
[08:08:10.920] | :  int 0
[08:08:10.920] | signalConditions() ... done
[08:08:10.920] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.920] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.921] signalConditionsASAP(MultisessionFuture, pos=4) ... done
[08:08:10.921] value(<MultisessionFuture>, ...) ...
[08:08:10.921] value(<MultisessionFuture>, ...) ... done
[08:08:10.921] value() for MultisessionFuture (<unnamed-117>) ...
[08:08:10.921] | result() for ClusterFuture ...
[08:08:10.921] | : result already collected: FutureResult
[08:08:10.921] | result() for ClusterFuture ... done
[08:08:10.921] | result() for ClusterFuture ...
[08:08:10.921] | : result already collected: FutureResult
[08:08:10.921] | result() for ClusterFuture ... done
[08:08:10.921] | signalConditions() ...
[08:08:10.922] | : include = ‘immediateCondition’
[08:08:10.922] | : exclude = 
[08:08:10.922] | : resignal = FALSE
[08:08:10.922] | : Number of conditions: 0
[08:08:10.922] | :  int 0
[08:08:10.922] | signalConditions() ... done
[08:08:10.922] | check for misuse ...
[08:08:10.923] | check for misuse ... done
[08:08:10.923] value() for MultisessionFuture (<unnamed-117>) ... done
[08:08:10.923] value: <numeric>
[08:08:10.923] signalConditionsASAP(MultisessionFuture, pos=4) ...
[08:08:10.923] | nx: 6
[08:08:10.923] | relay: TRUE
[08:08:10.923] | stdout: TRUE
[08:08:10.923] | signal: TRUE
[08:08:10.923] | resignal: FALSE
[08:08:10.923] | force: TRUE
[08:08:10.924] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.924] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.924] | until=5
[08:08:10.924] | relaying element #5
[08:08:10.924] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.924] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.924] signalConditionsASAP(MultisessionFuture, pos=4) ... done
[08:08:10.924] resolve() for MultisessionFuture ...
[08:08:10.924] resolve() for MultisessionFuture ... done
[08:08:10.924] length: 2 (resolved future 4)

[08:08:10.925] checking value #5:
[08:08:10.925] 'obj' is NULL
[08:08:10.925] signalConditionsASAP(NULL, pos=5) ...
[08:08:10.925] | nx: 6
[08:08:10.925] | relay: TRUE
[08:08:10.925] | stdout: TRUE
[08:08:10.925] | signal: TRUE
[08:08:10.925] | resignal: FALSE
[08:08:10.925] | force: TRUE
[08:08:10.925] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.926] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.926] | until=6
[08:08:10.926] | relaying element #6
[08:08:10.926] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:10.926] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.926] signalConditionsASAP(NULL, pos=5) ... done
[08:08:10.926] signalConditionsASAP(NULL, pos=5) ...
[08:08:10.926] | nx: 6
[08:08:10.926] | relay: TRUE
[08:08:10.926] | stdout: TRUE
[08:08:10.927] | signal: TRUE
[08:08:10.927] | resignal: FALSE
[08:08:10.927] | force: TRUE
[08:08:10.927] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:10.927] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.927] | until=6
[08:08:10.927] | relaying element #6
[08:08:10.927] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:10.927] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.927] signalConditionsASAP(NULL, pos=5) ... done
[08:08:10.928] length: 1 (resolved future 5)

[08:08:10.928] checking value #6:
[08:08:10.928] 'obj' is atomic
[08:08:10.928] signalConditionsASAP(numeric, pos=6) ...
[08:08:10.928] | nx: 6
[08:08:10.928] | relay: TRUE
[08:08:10.928] | stdout: TRUE
[08:08:10.928] | signal: TRUE
[08:08:10.928] | resignal: FALSE
[08:08:10.928] | force: TRUE
[08:08:10.928] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:10.929] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.929] | until=6
[08:08:10.929] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:10.929] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.929] signalConditionsASAP(numeric, pos=6) ... done
[08:08:10.929] length: 0 (resolved future 6)

[08:08:10.929] Relaying remaining futures ...
[08:08:10.929] | signalConditionsASAP(NULL, pos=0) ...
[08:08:10.930] | : nx: 6
[08:08:10.930] | : relay: TRUE
[08:08:10.930] | : stdout: TRUE
[08:08:10.930] | : signal: TRUE
[08:08:10.930] | : resignal: FALSE
[08:08:10.930] | : force: TRUE
[08:08:10.930] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:10.930] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:10.930] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:10.930] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:10.931] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:10.931] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:3] 2 3 1
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
Dimensions: c(2, 1, 3, 1)
[08:08:10.934] future(..., label = NULL) ...
[08:08:10.934] | lazy: FALSE
[08:08:10.935] | stdout: TRUE
[08:08:10.935] | conditions: [n=1] ‘condition’
[08:08:10.935] | gc: FALSE
[08:08:10.935] | earlySignal: FALSE
[08:08:10.935] | getGlobalsAndPackages() ...
[08:08:10.935] | : Searching for globals ...
[08:08:10.936] | : . globals found: [0] 
[08:08:10.936] | : Searching for globals ... done
[08:08:10.936] | : globals: [0] <none>
[08:08:10.937] | : packages: [0] <none>
[08:08:10.937] | getGlobalsAndPackages() ... done
[08:08:10.937] | run() for ‘Future’ (<unnamed-118>) ...
[08:08:10.937] | : state: ‘created’
[08:08:10.937] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:10.937] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:10.937] | : Using MultisessionFutureBackend ...
[08:08:10.938] | : . Number of futures since start: 12 (12 created, 12 launched, 16 finished)
[08:08:10.938] | : . Launching futures ...
[08:08:10.938] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:10.938] | : . ' , Workers: [n=2]
[08:08:10.938] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:10.939] | : . ' , FutureRegistry: ‘workers-e8f111193b2bc48aa139bb2932499cca’
[08:08:10.940] | : . ' , requestWorker() ...
[08:08:10.940] | : . ' , ; requestNode() ...
[08:08:10.940] | : . ' , ; ` Number of workers: 2
[08:08:10.940] | : . ' , ; ` Polling for a free worker ...
[08:08:10.940] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:10.940] | : . ' , ; ` | : Listing all futures
[08:08:10.940] | : . ' , ; ` | : Number of registered futures: 0
[08:08:10.940] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:10.940] | : . ' , ; ` | Total time: 0
[08:08:10.941] | : . ' , ; ` Polling for a free worker ... done
[08:08:10.941] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:10.941] | : . ' , ; ` | Listing all futures
[08:08:10.941] | : . ' , ; ` | Number of registered futures: 0
[08:08:10.941] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:10.941] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:10.941] | : . ' , ; ` Index of first available worker: 1
[08:08:10.941] | : . ' , ; ` Validate that the worker is functional ...
[08:08:11.038] | : . ' , ; ` | Worker is functional
[08:08:11.039] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:11.039] | : . ' , ; ` | : Listing all futures
[08:08:11.039] | : . ' , ; ` | : Number of registered futures: 0
[08:08:11.039] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:11.039] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:11.039] | : . ' , ; requestNode() ... done
[08:08:11.039] | : . ' , ; cluster node index: 1
[08:08:11.039] | : . ' , requestWorker() ... done
[08:08:11.040] | : . ' , eraseGlobalEnvironment() ...
[08:08:11.040] | : . ' , eraseGlobalEnvironment() ... done
[08:08:11.040] | : . ' , launchFuture() ...
[08:08:11.040] | : . ' , ; cluster node index: 1
[08:08:11.040] | : . ' , ; getFutureData() ...
[08:08:11.040] | : . ' , ; ` getFutureCore() ...
[08:08:11.040] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:11.041] | : . ' , ; ` getFutureCore() ... done
[08:08:11.041] | : . ' , ; ` getFutureCapture() ...
[08:08:11.041] | : . ' , ; ` getFutureCapture() ... done
[08:08:11.041] | : . ' , ; ` getFutureContext() ...
[08:08:11.041] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.041] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:11.041] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.041] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:11.042] | : . ' , ; ` getFutureContext() ... done
[08:08:11.042] | : . ' , ; getFutureData() ... done
[08:08:11.042] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ...
[08:08:11.042] | : . ' , ; ` Appended future to position #1
[08:08:11.042] | : . ' , ; ` Number of registered futures: 1
[08:08:11.042] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ... done
[08:08:11.042] | : . ' , launchFuture() ... done
[08:08:11.043] | : . ' , MultisessionFuture started
[08:08:11.043] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:11.043] | : . Launching futures ... done
[08:08:11.043] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:11.043] | : Using MultisessionFutureBackend ... done
[08:08:11.043] | run() for ‘Future’ (<unnamed-118>) ... done
[08:08:11.043] future(..., label = NULL) ... done
[08:08:11.043] future(..., label = NULL) ...
[08:08:11.043] | lazy: FALSE
[08:08:11.043] | stdout: TRUE
[08:08:11.044] | conditions: [n=1] ‘condition’
[08:08:11.044] | gc: FALSE
[08:08:11.044] | earlySignal: FALSE
[08:08:11.044] | getGlobalsAndPackages() ...
[08:08:11.044] | : Searching for globals ...
[08:08:11.045] | : . globals found: [0] 
[08:08:11.045] | : Searching for globals ... done
[08:08:11.045] | : globals: [0] <none>
[08:08:11.045] | : packages: [0] <none>
[08:08:11.046] | getGlobalsAndPackages() ... done
[08:08:11.046] | run() for ‘Future’ (<unnamed-119>) ...
[08:08:11.046] | : state: ‘created’
[08:08:11.046] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.046] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.046] | : Using MultisessionFutureBackend ...
[08:08:11.046] | : . Number of futures since start: 13 (13 created, 13 launched, 16 finished)
[08:08:11.046] | : . Launching futures ...
[08:08:11.047] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:11.047] | : . ' , Workers: [n=2]
[08:08:11.047] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:11.048] | : . ' , FutureRegistry: ‘workers-e8f111193b2bc48aa139bb2932499cca’
[08:08:11.048] | : . ' , requestWorker() ...
[08:08:11.049] | : . ' , ; requestNode() ...
[08:08:11.049] | : . ' , ; ` Number of workers: 2
[08:08:11.049] | : . ' , ; ` Polling for a free worker ...
[08:08:11.049] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:11.049] | : . ' , ; ` | : Listing all futures
[08:08:11.049] | : . ' , ; ` | : Number of registered futures: 1
[08:08:11.049] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:11.049] | : . ' , ; ` | Total time: 0
[08:08:11.049] | : . ' , ; ` Polling for a free worker ... done
[08:08:11.049] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:11.050] | : . ' , ; ` | Listing all futures
[08:08:11.050] | : . ' , ; ` | Number of registered futures: 1
[08:08:11.050] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:11.052] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:11.052] | : . ' , ; ` Index of first available worker: 2
[08:08:11.052] | : . ' , ; ` Validate that the worker is functional ...
[08:08:11.122] | : . ' , ; ` | Worker is functional
[08:08:11.122] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:11.123] | : . ' , ; ` | : Listing all futures
[08:08:11.123] | : . ' , ; ` | : Number of registered futures: 1
[08:08:11.123] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:11.123] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:11.123] | : . ' , ; requestNode() ... done
[08:08:11.123] | : . ' , ; cluster node index: 2
[08:08:11.123] | : . ' , requestWorker() ... done
[08:08:11.123] | : . ' , eraseGlobalEnvironment() ...
[08:08:11.124] | : . ' , eraseGlobalEnvironment() ... done
[08:08:11.124] | : . ' , launchFuture() ...
[08:08:11.124] | : . ' , ; cluster node index: 2
[08:08:11.125] | : . ' , ; getFutureData() ...
[08:08:11.125] | : . ' , ; ` getFutureCore() ...
[08:08:11.125] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:11.125] | : . ' , ; ` getFutureCore() ... done
[08:08:11.125] | : . ' , ; ` getFutureCapture() ...
[08:08:11.125] | : . ' , ; ` getFutureCapture() ... done
[08:08:11.125] | : . ' , ; ` getFutureContext() ...
[08:08:11.125] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.125] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:11.126] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.126] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:11.126] | : . ' , ; ` getFutureContext() ... done
[08:08:11.126] | : . ' , ; getFutureData() ... done
[08:08:11.126] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ...
[08:08:11.126] | : . ' , ; ` Appended future to position #2
[08:08:11.126] | : . ' , ; ` Number of registered futures: 2
[08:08:11.127] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ... done
[08:08:11.127] | : . ' , launchFuture() ... done
[08:08:11.127] | : . ' , MultisessionFuture started
[08:08:11.127] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:11.127] | : . Launching futures ... done
[08:08:11.127] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:11.127] | : Using MultisessionFutureBackend ... done
[08:08:11.127] | run() for ‘Future’ (<unnamed-119>) ... done
[08:08:11.127] future(..., label = NULL) ... done
[08:08:11.128] future(..., label = NULL) ...
[08:08:11.128] | lazy: FALSE
[08:08:11.128] | stdout: TRUE
[08:08:11.128] | conditions: [n=1] ‘condition’
[08:08:11.128] | gc: FALSE
[08:08:11.128] | earlySignal: FALSE
[08:08:11.128] | getGlobalsAndPackages() ...
[08:08:11.129] | : Searching for globals ...
[08:08:11.132] | : . globals found: [1] ‘{’
[08:08:11.132] | : Searching for globals ... done
[08:08:11.132] | : Resolving globals: FALSE
[08:08:11.132] | : Search for packages associated with the globals ...
[08:08:11.132] | : . Packages associated with globals: [1] ‘base’
[08:08:11.132] | : . Packages: [1] ‘base’
[08:08:11.132] | : Search for packages associated with the globals ... done
[08:08:11.133] | : Packages after dropping 'base': [0] 
[08:08:11.133] | : globals: [0] 
[08:08:11.133] | : packages: [0] 
[08:08:11.133] | getGlobalsAndPackages() ... done
[08:08:11.133] | run() for ‘Future’ (<unnamed-120>) ...
[08:08:11.133] | : state: ‘created’
[08:08:11.133] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.133] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.134] | : Using MultisessionFutureBackend ...
[08:08:11.134] | : . Number of futures since start: 14 (14 created, 14 launched, 16 finished)
[08:08:11.134] | : . Launching futures ...
[08:08:11.134] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:11.134] | : . ' , Workers: [n=2]
[08:08:11.134] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:08:11.136] | : . ' , FutureRegistry: ‘workers-e8f111193b2bc48aa139bb2932499cca’
[08:08:11.136] | : . ' , requestWorker() ...
[08:08:11.136] | : . ' , ; requestNode() ...
[08:08:11.136] | : . ' , ; ` Number of workers: 2
[08:08:11.136] | : . ' , ; ` Polling for a free worker ...
[08:08:11.136] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:11.136] | : . ' , ; ` | : Listing all futures
[08:08:11.137] | : . ' , ; ` | : Number of registered futures: 2
[08:08:11.137] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:11.137] | : . ' , ; ` | Poll #1 (0): usedNodes() = 2, workers = 2
[08:08:11.147] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'collect-first', earlySignal = 1) ...
[08:08:11.147] | : . ' , ; ` | : collectValues('workers-e8f111193b2bc48aa139bb2932499cca', firstOnly = TRUE) ...
[08:08:11.147] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-118>) ...
[08:08:11.148] | : . ' , ; ` | : . ' Cluster node socket connection: index=4, id=1577
[08:08:11.148] | : . ' , ; ` | : . ' assertValidConnection() ...
[08:08:11.148] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:11.148] | : . ' , ; ` | : . ' assertValidConnection() ... done
[08:08:11.149] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ...
[08:08:11.149] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:11.149] | : . ' , ; ` | : . ' , [1] TRUE
[08:08:11.149] | : . ' , ; ` | : . ' , received data:
[08:08:11.149] | : . ' , ; ` | : . ' , List of 5
[08:08:11.149] | : . ' , ; ` | : . ' ,  $ type   : chr "VALUE"
[08:08:11.149] | : . ' , ; ` | : . ' ,  $ value  :List of 16
[08:08:11.149] | : . ' , ; ` | : . ' ,   ..$ value              : num 2
[08:08:11.149] | : . ' , ; ` | : . ' ,   ..$ visible            : logi TRUE
[08:08:11.149] | : . ' , ; ` | : . ' ,   ..$ stdout             : chr ""
[08:08:11.149] | : . ' , ; ` | : . ' ,   ..$ conditions         : list()
[08:08:11.149] | : . ' , ; ` | : . ' ,   ..$ rng                : logi FALSE
[08:08:11.149] | : . ' , ; ` | : . ' ,   ..$ seed               : NULL
[08:08:11.149] | : . ' , ; ` | : . ' ,   ..$ misuseGlobalEnv    : NULL
[08:08:11.149] | : . ' , ; ` | : . ' ,   ..$ misuseConnections  :List of 3
[08:08:11.149] | : . ' , ; ` | : . ' ,   .. ..$ added   : NULL
[08:08:11.149] | : . ' , ; ` | : . ' ,   .. ..$ removed : NULL
[08:08:11.149] | : . ' , ; ` | : . ' ,   .. ..$ replaced: NULL
[08:08:11.149] | : . ' , ; ` | : . ' ,   ..$ misuseDevices      : NULL
[08:08:11.149] | : . ' , ; ` | : . ' ,   ..$ misuseDefaultDevice: list()
[08:08:11.149] | : . ' , ; ` | : . ' ,   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:11"
[08:08:11.149] | : . ' , ; ` | : . ' ,   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:11"
[08:08:11.149] | : . ' , ; ` | : . ' ,   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "118"
[08:08:11.149] | : . ' , ; ` | : . ' ,   ..$ session_uuid       : chr "272d3c9c235e1bff6dddaa89109c42b3"
[08:08:11.149] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "source")=List of 5
[08:08:11.149] | : . ' , ; ` | : . ' ,   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:11.149] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:11.149] | : . ' , ; ` | : . ' ,   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:11.149] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:11.149] | : . ' , ; ` | : . ' ,   .. .. ..$ pid   : int 69173
[08:08:11.149] | : . ' , ; ` | : . ' ,   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:11.149] | : . ' , ; ` | : . ' ,   .. .. ..$ random: int 2147483647
[08:08:11.149] | : . ' , ; ` | : . ' ,   ..$ r_info             :List of 4
[08:08:11.149] | : . ' , ; ` | : . ' ,   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:11.149] | : . ' , ; ` | : . ' ,   .. .. ..$ : int [1:3] 4 5 1
[08:08:11.149] | : . ' , ; ` | : . ' ,   .. ..$ os           : chr "unix"
[08:08:11.149] | : . ' , ; ` | : . ' ,   .. ..$ os_name      : chr "Linux"
[08:08:11.149] | : . ' , ; ` | : . ' ,   .. ..$ captures_utf8: logi TRUE
[08:08:11.149] | : . ' , ; ` | : . ' ,   ..$ version            : chr "1.8"
[08:08:11.149] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr "FutureResult"
[08:08:11.149] | : . ' , ; ` | : . ' ,  $ success: logi TRUE
[08:08:11.149] | : . ' , ; ` | : . ' ,  $ time   : 'proc_time' Named num [1:5] 0.004 0.001 0.005 0 0
[08:08:11.149] | : . ' , ; ` | : . ' ,   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:11.149] | : . ' , ; ` | : . ' ,  $ tag    : NULL
[08:08:11.160] | : . ' , ; ` | : . ' , Received FutureResult
[08:08:11.160] | : . ' , ; ` | : . ' , FutureResult:
[08:08:11.160] | : . ' , ; ` | : . ' , value: ‘numeric’
[08:08:11.160] | : . ' , ; ` | : . ' , visible: TRUE
[08:08:11.160] | : . ' , ; ` | : . ' , stdout: character
[08:08:11.160] | : . ' , ; ` | : . ' , conditions: [n = 0] 
[08:08:11.160] | : . ' , ; ` | : . ' , RNG used: FALSE
[08:08:11.160] | : . ' , ; ` | : . ' , duration: 0.002610445 secs (started 2025-06-17 08:08:11.082839)
[08:08:11.160] | : . ' , ; ` | : . ' , version: 1.8
[08:08:11.161] | : . ' , ; ` | : . ' , FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ...
[08:08:11.161] | : . ' , ; ` | : . ' , ; Removed future from position #1
[08:08:11.161] | : . ' , ; ` | : . ' , ; Number of registered futures: 1
[08:08:11.161] | : . ' , ; ` | : . ' , FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ... done
[08:08:11.161] | : . ' , ; ` | : . ' , Erased future from future backend
[08:08:11.162] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:11.162] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:11.162] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:11.162] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:11.162] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:11.162] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:11.162] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:11.162] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:11.162] | : . ' , ; ` | : . ' , ;  int 0
[08:08:11.163] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:11.163] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ... done
[08:08:11.163] | : . ' , ; ` | : . ' receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:11.163] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-118>) ... done
[08:08:11.163] | : . ' , ; ` | : . assertFutureResult() ...
[08:08:11.163] | : . ' , ; ` | : . ' Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:11.163] | : . ' , ; ` | : . ' Future uuid: 118
[08:08:11.163] | : . ' , ; ` | : . ' identical; success
[08:08:11.163] | : . ' , ; ` | : . assertFutureResult() ... done
[08:08:11.164] | : . ' , ; ` | : . Future at position #1 is resolved ...
[08:08:11.164] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-118>) ...
[08:08:11.164] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:11.164] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:11.164] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:11.164] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:11.164] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:11.164] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:11.164] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:11.165] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:11.165] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:11.165] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:11.165] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:11.165] | : . ' , ; ` | : . ' , ;  int 0
[08:08:11.165] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:11.165] | : . ' , ; ` | : . ' , check for misuse ...
[08:08:11.166] | : . ' , ; ` | : . ' , check for misuse ... done
[08:08:11.166] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-118>) ... done
[08:08:11.166] | : . ' , ; ` | : . Future at position #1 is resolved ... done
[08:08:11.166] | : . ' , ; ` | : collectValues('workers-e8f111193b2bc48aa139bb2932499cca', firstOnly = TRUE) ... done
[08:08:11.166] | : . ' , ; ` | : Remove collected futures ...
[08:08:11.166] | : . ' , ; ` | : . Indices of futures to drop: [n=1] ‘1’
[08:08:11.166] | : . ' , ; ` | : Remove collected futures ... done
[08:08:11.166] | : . ' , ; ` | FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'collect-first', earlySignal = 1) ... done
[08:08:11.167] | : . ' , ; ` | Early signaling of 2 future candidates ...
[08:08:11.167] | : . ' , ; ` | Number of futures with early signaling requested: 0
[08:08:11.167] | : . ' , ; ` | Early signaling of 2 future candidates ... done
[08:08:11.167] | : . ' , ; ` | Number of registered futures: 2
[08:08:11.167] | : . ' , ; ` Polling for a free worker ... done
[08:08:11.167] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:11.167] | : . ' , ; ` | Listing all futures
[08:08:11.167] | : . ' , ; ` | Number of registered futures: 1
[08:08:11.167] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:11.168] | : . ' , ; ` Total time: 0.0307185649871826
[08:08:11.168] | : . ' , ; requestNode() ... done
[08:08:11.168] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:11.168] | : . ' , ; ` Listing all futures
[08:08:11.168] | : . ' , ; ` Number of registered futures: 1
[08:08:11.168] | : . ' , ; FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:11.168] | : . ' , ; avail: [n=2] ‘1’
[08:08:11.168] | : . ' , ; Index of first available worker: 1
[08:08:11.168] | : . ' , ; Validate that the worker is functional ...
[08:08:11.268] | : . ' , ; ` Worker is functional
[08:08:11.268] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ...
[08:08:11.268] | : . ' , ; ` | Listing all futures
[08:08:11.268] | : . ' , ; ` | Number of registered futures: 1
[08:08:11.268] | : . ' , ; ` FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'list', earlySignal = 0) ... done
[08:08:11.268] | : . ' , ; Validate that the worker is functional ... done
[08:08:11.268] | : . ' , requestWorker() ... done
[08:08:11.269] | : . ' , cluster node index: 1
[08:08:11.269] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:11.269] | : . ' eraseGlobalEnvironment() ...
[08:08:11.269] | : . ' eraseGlobalEnvironment() ... done
[08:08:11.269] | : . ' launchFuture() ...
[08:08:11.269] | : . ' , cluster node index: 1
[08:08:11.270] | : . ' , getFutureData() ...
[08:08:11.270] | : . ' , ; getFutureCore() ...
[08:08:11.270] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:11.270] | : . ' , ; getFutureCore() ... done
[08:08:11.270] | : . ' , ; getFutureCapture() ...
[08:08:11.270] | : . ' , ; getFutureCapture() ... done
[08:08:11.270] | : . ' , ; getFutureContext() ...
[08:08:11.270] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:11.270] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:11.271] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:11.271] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:11.271] | : . ' , ; getFutureContext() ... done
[08:08:11.271] | : . ' , getFutureData() ... done
[08:08:11.271] | : . ' , FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ...
[08:08:11.271] | : . ' , ; Appended future to position #2
[08:08:11.271] | : . ' , ; Number of registered futures: 2
[08:08:11.272] | : . ' , FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'add', earlySignal = 0) ... done
[08:08:11.272] | : . ' launchFuture() ... done
[08:08:11.272] | : . ' MultisessionFuture started
[08:08:11.272] | : . Launching futures ... done
[08:08:11.272] | : Using MultisessionFutureBackend ... done
[08:08:11.272] | : Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:11.272] | run() for ‘Future’ (<unnamed-120>) ... done
[08:08:11.272] future(..., label = NULL) ... done

Classes 'listenv', 'environment' <environment: 0x55675c15c870> 
Classes 'listenv', 'environment' <environment: 0x55675cb26b10> 
 - attr(*, "dim.")= int [1:4] 2 1 3 1
 - attr(*, "dimnames.")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
[08:08:11.276] resolved() for listenv ...
[08:08:11.277] | resolved() for array ...
[08:08:11.277] | : Number of elements: 6
[08:08:11.277] | : Number of futures: 6
[08:08:11.277] | : resolved() for MultisessionFuture (<unnamed-119>) ...
[08:08:11.277] | : . Cluster node socket connection: index=5, id=1578
[08:08:11.277] | : . assertValidConnection() ...
[08:08:11.278] | : . ' cluster node index: 2
[08:08:11.278] | : . assertValidConnection() ... done
[08:08:11.278] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:11.278] | : . ' cluster node index: 2
[08:08:11.278] | : . ' [1] TRUE
[08:08:11.279] | : . ' received data:
[08:08:11.279] | : . ' List of 5
[08:08:11.279] | : . '  $ type   : chr "VALUE"
[08:08:11.279] | : . '  $ value  :List of 16
[08:08:11.279] | : . '   ..$ value              : NULL
[08:08:11.279] | : . '   ..$ visible            : logi TRUE
[08:08:11.279] | : . '   ..$ stdout             : chr ""
[08:08:11.279] | : . '   ..$ conditions         : list()
[08:08:11.279] | : . '   ..$ rng                : logi FALSE
[08:08:11.279] | : . '   ..$ seed               : NULL
[08:08:11.279] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:11.279] | : . '   ..$ misuseConnections  :List of 3
[08:08:11.279] | : . '   .. ..$ added   : NULL
[08:08:11.279] | : . '   .. ..$ removed : NULL
[08:08:11.279] | : . '   .. ..$ replaced: NULL
[08:08:11.279] | : . '   ..$ misuseDevices      : NULL
[08:08:11.279] | : . '   ..$ misuseDefaultDevice: list()
[08:08:11.279] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:11"
[08:08:11.279] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:11"
[08:08:11.279] | : . '   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "119"
[08:08:11.279] | : . '   ..$ session_uuid       : chr "318d9a862536e33b210e27df6cf2a506"
[08:08:11.279] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:11.279] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:11.279] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:11.279] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:11.279] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:11.279] | : . '   .. .. ..$ pid   : int 69172
[08:08:11.279] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:11.279] | : . '   .. .. ..$ random: int 2147483647
[08:08:11.279] | : . '   ..$ r_info             :List of 4
[08:08:11.279] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:11.279] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:08:11.279] | : . '   .. ..$ os           : chr "unix"
[08:08:11.279] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:11.279] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:11.279] | : . '   ..$ version            : chr "1.8"
[08:08:11.279] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:11.279] | : . '  $ success: logi TRUE
[08:08:11.279] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:11.279] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:11.279] | : . '  $ tag    : NULL
[08:08:11.292] | : . ' Received FutureResult
[08:08:11.292] | : . ' FutureResult:
[08:08:11.292] | : . ' value: ‘NULL’
[08:08:11.292] | : . ' visible: TRUE
[08:08:11.292] | : . ' stdout: character
[08:08:11.292] | : . ' conditions: [n = 0] 
[08:08:11.292] | : . ' RNG used: FALSE
[08:08:11.292] | : . ' duration: 0.002708673 secs (started 2025-06-17 08:08:11.16784)
[08:08:11.292] | : . ' version: 1.8
[08:08:11.292] | : . ' FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ...
[08:08:11.292] | : . ' , Removed future from position #1
[08:08:11.292] | : . ' , Number of registered futures: 1
[08:08:11.292] | : . ' FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ... done
[08:08:11.293] | : . ' Erased future from future backend
[08:08:11.293] | : . ' result() for ClusterFuture ...
[08:08:11.293] | : . ' , result already collected: FutureResult
[08:08:11.293] | : . ' result() for ClusterFuture ... done
[08:08:11.293] | : . ' signalConditions() ...
[08:08:11.293] | : . ' , include = ‘immediateCondition’
[08:08:11.293] | : . ' , exclude = 
[08:08:11.293] | : . ' , resignal = FALSE
[08:08:11.293] | : . ' , Number of conditions: 0
[08:08:11.293] | : . ' ,  int 0
[08:08:11.294] | : . ' signalConditions() ... done
[08:08:11.294] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:11.294] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:11.294] | : resolved() for MultisessionFuture (<unnamed-119>) ... done
[08:08:11.294] | : assertFutureResult() ...
[08:08:11.294] | : . Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:11.294] | : . Future uuid: 119
[08:08:11.294] | : . identical; success
[08:08:11.295] | : assertFutureResult() ... done
[08:08:11.295] | : resolved() for MultisessionFuture (<unnamed-120>) ...
[08:08:11.295] | : . Cluster node socket connection: index=4, id=1577
[08:08:11.295] | : . assertValidConnection() ...
[08:08:11.295] | : . ' cluster node index: 1
[08:08:11.295] | : . assertValidConnection() ... done
[08:08:11.306] | : . socketSelect(list(<connection #4 (id=1577)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:11.306] | : resolved() for MultisessionFuture (<unnamed-120>) ... done
[08:08:11.306] | resolved() for array ... done
[08:08:11.306] resolved() for listenv ... done
 logi [1:2, 1, 1:3, 1] TRUE TRUE TRUE FALSE TRUE TRUE
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:11.308] value() for listenv ...
[08:08:11.308] | recursive: 0
[08:08:11.309] | reduce: FALSE
[08:08:11.309] | length: 6
[08:08:11.310] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:11.310] | Number of remaining objects: 6
[08:08:11.310] | checking value #1:
[08:08:11.310] | 'obj' is atomic
[08:08:11.310] | signalConditionsASAP(numeric, pos=1) ...
[08:08:11.310] | : nx: 6
[08:08:11.310] | : relay: TRUE
[08:08:11.310] | : stdout: TRUE
[08:08:11.310] | : signal: TRUE
[08:08:11.310] | : resignal: FALSE
[08:08:11.311] | : force: TRUE
[08:08:11.311] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:11.311] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:11.311] | : until=2
[08:08:11.311] | : relaying element #2
[08:08:11.311] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:11.311] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:11.311] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:11.311] | length: 5 (resolved future 1)
[08:08:11.312] value() for listenv ... done
[08:08:11.312] checking value #2:
[08:08:11.312] 'obj' is MultisessionFuture
[08:08:11.312] MultisessionFuture #2
[08:08:11.312] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:11.312] | nx: 6
[08:08:11.312] | relay: TRUE
[08:08:11.312] | stdout: TRUE
[08:08:11.312] | signal: TRUE
[08:08:11.312] | resignal: FALSE
[08:08:11.313] | force: TRUE
[08:08:11.313] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:11.313] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:11.313] | until=2
[08:08:11.313] | relaying element #2
[08:08:11.313] | value() for MultisessionFuture (<unnamed-118>) ...
[08:08:11.313] | : result() for ClusterFuture ...
[08:08:11.313] | : . result already collected: FutureResult
[08:08:11.313] | : result() for ClusterFuture ... done
[08:08:11.313] | : result() for ClusterFuture ...
[08:08:11.314] | : . result already collected: FutureResult
[08:08:11.314] | : result() for ClusterFuture ... done
[08:08:11.314] | : signalConditions() ...
[08:08:11.314] | : . include = ‘immediateCondition’
[08:08:11.314] | : . exclude = 
[08:08:11.314] | : . resignal = FALSE
[08:08:11.314] | : . Number of conditions: 0
[08:08:11.314] | : .  int 0
[08:08:11.315] | : signalConditions() ... done
[08:08:11.315] | : relay stdout ...
[08:08:11.315] | : relay stdout ... done
[08:08:11.315] | : check for misuse ...
[08:08:11.315] | : check for misuse ... done
[08:08:11.315] | value() for MultisessionFuture (<unnamed-118>) ... done
[08:08:11.315] | result() for ClusterFuture ...
[08:08:11.315] | : result already collected: FutureResult
[08:08:11.316] | result() for ClusterFuture ... done
[08:08:11.316] | signalConditions() ...
[08:08:11.316] | : include = ‘immediateCondition’
[08:08:11.316] | : exclude = 
[08:08:11.316] | : resignal = FALSE
[08:08:11.316] | : Number of conditions: 0
[08:08:11.316] | :  int 0
[08:08:11.316] | signalConditions() ... done
[08:08:11.317] | result() for ClusterFuture ...
[08:08:11.317] | : result already collected: FutureResult
[08:08:11.317] | result() for ClusterFuture ... done
[08:08:11.317] | signalConditions() ...
[08:08:11.317] | : include = ‘condition’
[08:08:11.317] | : exclude = ‘error’, ‘immediateCondition’
[08:08:11.317] | : resignal = TRUE
[08:08:11.317] | : Number of conditions: 0
[08:08:11.317] | :  int 0
[08:08:11.318] | signalConditions() ... done
[08:08:11.318] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:11.318] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:11.318] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:11.318] value(<MultisessionFuture>, ...) ...
[08:08:11.318] value(<MultisessionFuture>, ...) ... done
[08:08:11.318] value() for MultisessionFuture (<unnamed-118>) ...
[08:08:11.318] | result() for ClusterFuture ...
[08:08:11.319] | : result already collected: FutureResult
[08:08:11.319] | result() for ClusterFuture ... done
[08:08:11.319] | result() for ClusterFuture ...
[08:08:11.319] | : result already collected: FutureResult
[08:08:11.319] | result() for ClusterFuture ... done
[08:08:11.319] | signalConditions() ...
[08:08:11.319] | : include = ‘immediateCondition’
[08:08:11.319] | : exclude = 
[08:08:11.319] | : resignal = FALSE
[08:08:11.319] | : Number of conditions: 0
[08:08:11.319] | :  int 0
[08:08:11.320] | signalConditions() ... done
[08:08:11.320] | check for misuse ...
[08:08:11.320] | check for misuse ... done
[08:08:11.320] value() for MultisessionFuture (<unnamed-118>) ... done
[08:08:11.320] value: <numeric>
[08:08:11.320] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:11.321] | nx: 6
[08:08:11.321] | relay: TRUE
[08:08:11.321] | stdout: TRUE
[08:08:11.321] | signal: TRUE
[08:08:11.321] | resignal: FALSE
[08:08:11.321] | force: TRUE
[08:08:11.321] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:11.321] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:11.321] | until=3
[08:08:11.321] | relaying element #3
[08:08:11.321] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:11.322] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:11.322] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:11.322] resolve() for MultisessionFuture ...
[08:08:11.322] resolve() for MultisessionFuture ... done
[08:08:11.322] length: 4 (resolved future 2)

[08:08:11.322] checking value #3:
[08:08:11.322] 'obj' is MultisessionFuture
[08:08:11.322] MultisessionFuture #3
[08:08:11.322] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:11.323] | nx: 6
[08:08:11.323] | relay: TRUE
[08:08:11.323] | stdout: TRUE
[08:08:11.323] | signal: TRUE
[08:08:11.323] | resignal: FALSE
[08:08:11.323] | force: TRUE
[08:08:11.323] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:11.323] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:11.323] | until=3
[08:08:11.323] | relaying element #3
[08:08:11.324] | value() for MultisessionFuture (<unnamed-119>) ...
[08:08:11.324] | : result() for ClusterFuture ...
[08:08:11.324] | : . result already collected: FutureResult
[08:08:11.324] | : result() for ClusterFuture ... done
[08:08:11.324] | : result() for ClusterFuture ...
[08:08:11.324] | : . result already collected: FutureResult
[08:08:11.324] | : result() for ClusterFuture ... done
[08:08:11.324] | : signalConditions() ...
[08:08:11.324] | : . include = ‘immediateCondition’
[08:08:11.324] | : . exclude = 
[08:08:11.324] | : . resignal = FALSE
[08:08:11.325] | : . Number of conditions: 0
[08:08:11.325] | : .  int 0
[08:08:11.325] | : signalConditions() ... done
[08:08:11.325] | : relay stdout ...
[08:08:11.325] | : relay stdout ... done
[08:08:11.325] | : check for misuse ...
[08:08:11.326] | : check for misuse ... done
[08:08:11.326] | value() for MultisessionFuture (<unnamed-119>) ... done
[08:08:11.326] | result() for ClusterFuture ...
[08:08:11.326] | : result already collected: FutureResult
[08:08:11.326] | result() for ClusterFuture ... done
[08:08:11.326] | signalConditions() ...
[08:08:11.326] | : include = ‘immediateCondition’
[08:08:11.326] | : exclude = 
[08:08:11.326] | : resignal = FALSE
[08:08:11.326] | : Number of conditions: 0
[08:08:11.326] | :  int 0
[08:08:11.327] | signalConditions() ... done
[08:08:11.327] | result() for ClusterFuture ...
[08:08:11.327] | : result already collected: FutureResult
[08:08:11.327] | result() for ClusterFuture ... done
[08:08:11.327] | signalConditions() ...
[08:08:11.327] | : include = ‘condition’
[08:08:11.327] | : exclude = ‘error’, ‘immediateCondition’
[08:08:11.328] | : resignal = TRUE
[08:08:11.328] | : Number of conditions: 0
[08:08:11.328] | :  int 0
[08:08:11.328] | signalConditions() ... done
[08:08:11.328] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:11.328] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:11.328] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:11.329] value(<MultisessionFuture>, ...) ...
[08:08:11.329] value(<MultisessionFuture>, ...) ... done
[08:08:11.329] value() for MultisessionFuture (<unnamed-119>) ...
[08:08:11.329] | result() for ClusterFuture ...
[08:08:11.329] | : result already collected: FutureResult
[08:08:11.329] | result() for ClusterFuture ... done
[08:08:11.329] | result() for ClusterFuture ...
[08:08:11.329] | : result already collected: FutureResult
[08:08:11.329] | result() for ClusterFuture ... done
[08:08:11.329] | signalConditions() ...
[08:08:11.330] | : include = ‘immediateCondition’
[08:08:11.330] | : exclude = 
[08:08:11.330] | : resignal = FALSE
[08:08:11.330] | : Number of conditions: 0
[08:08:11.330] | :  int 0
[08:08:11.330] | signalConditions() ... done
[08:08:11.330] | check for misuse ...
[08:08:11.331] | check for misuse ... done
[08:08:11.331] value() for MultisessionFuture (<unnamed-119>) ... done
[08:08:11.331] value: <NULL>
[08:08:11.331] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:11.331] | nx: 6
[08:08:11.331] | relay: TRUE
[08:08:11.331] | stdout: TRUE
[08:08:11.331] | signal: TRUE
[08:08:11.331] | resignal: FALSE
[08:08:11.331] | force: TRUE
[08:08:11.332] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:11.332] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:11.332] | until=4
[08:08:11.332] | relaying element #4
[08:08:11.332] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:11.332] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:11.332] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:11.332] resolve() for MultisessionFuture ...
[08:08:11.332] resolve() for MultisessionFuture ... done
[08:08:11.332] length: 3 (resolved future 3)

[08:08:11.333] checking value #4:
[08:08:11.333] 'obj' is MultisessionFuture
[08:08:11.333] resolved() for MultisessionFuture (<unnamed-120>) ...
[08:08:11.333] | Cluster node socket connection: index=4, id=1577
[08:08:11.333] | assertValidConnection() ...
[08:08:11.333] | : cluster node index: 1
[08:08:11.334] | assertValidConnection() ... done
[08:08:11.334] | receiveMessageFromWorker() for ClusterFuture ...
[08:08:11.334] | : cluster node index: 1
[08:08:11.334] | : [1] TRUE
[08:08:11.334] | : received data:
[08:08:11.334] | : List of 5
[08:08:11.334] | :  $ type   : chr "VALUE"
[08:08:11.334] | :  $ value  :List of 16
[08:08:11.334] | :   ..$ value              : num 4
[08:08:11.334] | :   ..$ visible            : logi TRUE
[08:08:11.334] | :   ..$ stdout             : chr ""
[08:08:11.334] | :   ..$ conditions         : list()
[08:08:11.334] | :   ..$ rng                : logi FALSE
[08:08:11.334] | :   ..$ seed               : NULL
[08:08:11.334] | :   ..$ misuseGlobalEnv    : NULL
[08:08:11.334] | :   ..$ misuseConnections  :List of 3
[08:08:11.334] | :   .. ..$ added   : NULL
[08:08:11.334] | :   .. ..$ removed : NULL
[08:08:11.334] | :   .. ..$ replaced: NULL
[08:08:11.334] | :   ..$ misuseDevices      : NULL
[08:08:11.334] | :   ..$ misuseDefaultDevice: list()
[08:08:11.334] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:11"
[08:08:11.334] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:11"
[08:08:11.334] | :   ..$ uuid               : chr [1:2] "509c109f39e08846c4bbbb2f93c52419" "120"
[08:08:11.334] | :   ..$ session_uuid       : chr "272d3c9c235e1bff6dddaa89109c42b3"
[08:08:11.334] | :   .. ..- attr(*, "source")=List of 5
[08:08:11.334] | :   .. .. ..$ host  : Named chr "28bb34de9501"
[08:08:11.334] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:11.334] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:08:11.334] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:11.334] | :   .. .. ..$ pid   : int 69173
[08:08:11.334] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:09"
[08:08:11.334] | :   .. .. ..$ random: int 2147483647
[08:08:11.334] | :   ..$ r_info             :List of 4
[08:08:11.334] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:11.334] | :   .. .. ..$ : int [1:3] 4 5 1
[08:08:11.334] | :   .. ..$ os           : chr "unix"
[08:08:11.334] | :   .. ..$ os_name      : chr "Linux"
[08:08:11.334] | :   .. ..$ captures_utf8: logi TRUE
[08:08:11.334] | :   ..$ version            : chr "1.8"
[08:08:11.334] | :   ..- attr(*, "class")= chr "FutureResult"
[08:08:11.334] | :  $ success: logi TRUE
[08:08:11.334] | :  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[08:08:11.334] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:11.334] | :  $ tag    : NULL
[08:08:11.345] | : Received FutureResult
[08:08:11.345] | : FutureResult:
[08:08:11.345] | : value: ‘numeric’
[08:08:11.345] | : visible: TRUE
[08:08:11.345] | : stdout: character
[08:08:11.345] | : conditions: [n = 0] 
[08:08:11.345] | : RNG used: FALSE
[08:08:11.345] | : duration: 0.002970934 secs (started 2025-06-17 08:08:11.312862)
[08:08:11.345] | : version: 1.8
[08:08:11.345] | : FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ...
[08:08:11.346] | : . Removed future from position #1
[08:08:11.346] | : . Number of registered futures: 0
[08:08:11.346] | : FutureRegistry('workers-e8f111193b2bc48aa139bb2932499cca', action = 'remove', earlySignal = 0) ... done
[08:08:11.346] | : Erased future from future backend
[08:08:11.346] | : result() for ClusterFuture ...
[08:08:11.346] | : . result already collected: FutureResult
[08:08:11.346] | : result() for ClusterFuture ... done
[08:08:11.346] | : signalConditions() ...
[08:08:11.346] | : . include = ‘immediateCondition’
[08:08:11.347] | : . exclude = 
[08:08:11.347] | : . resignal = FALSE
[08:08:11.347] | : . Number of conditions: 0
[08:08:11.347] | : .  int 0
[08:08:11.347] | : signalConditions() ... done
[08:08:11.347] | receiveMessageFromWorker() for ClusterFuture ... done
[08:08:11.347] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:11.348] resolved() for MultisessionFuture (<unnamed-120>) ... done
[08:08:11.348] assertFutureResult() ...
[08:08:11.348] | Future uuid: 509c109f39e08846c4bbbb2f93c52419[08:08:11.348] | Future uuid: 120
[08:08:11.348] | identical; success
[08:08:11.348] assertFutureResult() ... done
[08:08:11.348] MultisessionFuture #4
[08:08:11.348] signalConditionsASAP(MultisessionFuture, pos=4) ...
[08:08:11.348] | nx: 6
[08:08:11.348] | relay: TRUE
[08:08:11.348] | stdout: TRUE
[08:08:11.349] | signal: TRUE
[08:08:11.349] | resignal: FALSE
[08:08:11.349] | force: TRUE
[08:08:11.349] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:11.349] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:11.349] | until=4
[08:08:11.349] | relaying element #4
[08:08:11.349] | value() for MultisessionFuture (<unnamed-120>) ...
[08:08:11.349] | : result() for ClusterFuture ...
[08:08:11.349] | : . result already collected: FutureResult
[08:08:11.349] | : result() for ClusterFuture ... done
[08:08:11.350] | : result() for ClusterFuture ...
[08:08:11.350] | : . result already collected: FutureResult
[08:08:11.350] | : result() for ClusterFuture ... done
[08:08:11.350] | : signalConditions() ...
[08:08:11.350] | : . include = ‘immediateCondition’
[08:08:11.350] | : . exclude = 
[08:08:11.350] | : . resignal = FALSE
[08:08:11.350] | : . Number of conditions: 0
[08:08:11.350] | : .  int 0
[08:08:11.351] | : signalConditions() ... done
[08:08:11.351] | : relay stdout ...
[08:08:11.351] | : relay stdout ... done
[08:08:11.351] | : check for misuse ...
[08:08:11.351] | : check for misuse ... done
[08:08:11.351] | value() for MultisessionFuture (<unnamed-120>) ... done
[08:08:11.351] | result() for ClusterFuture ...
[08:08:11.351] | : result already collected: FutureResult
[08:08:11.352] | result() for ClusterFuture ... done
[08:08:11.352] | signalConditions() ...
[08:08:11.352] | : include = ‘immediateCondition’
[08:08:11.352] | : exclude = 
[08:08:11.352] | : resignal = FALSE
[08:08:11.352] | : Number of conditions: 0
[08:08:11.352] | :  int 0
[08:08:11.353] | signalConditions() ... done
[08:08:11.353] | result() for ClusterFuture ...
[08:08:11.353] | : result already collected: FutureResult
[08:08:11.353] | result() for ClusterFuture ... done
[08:08:11.353] | signalConditions() ...
[08:08:11.353] | : include = ‘condition’
[08:08:11.353] | : exclude = ‘error’, ‘immediateCondition’
[08:08:11.353] | : resignal = TRUE
[08:08:11.353] | : Number of conditions: 0
[08:08:11.353] | :  int 0
[08:08:11.354] | signalConditions() ... done
[08:08:11.354] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:11.354] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:11.354] signalConditionsASAP(MultisessionFuture, pos=4) ... done
[08:08:11.354] value(<MultisessionFuture>, ...) ...
[08:08:11.354] value(<MultisessionFuture>, ...) ... done
[08:08:11.354] value() for MultisessionFuture (<unnamed-120>) ...
[08:08:11.354] | result() for ClusterFuture ...
[08:08:11.355] | : result already collected: FutureResult
[08:08:11.355] | result() for ClusterFuture ... done
[08:08:11.355] | result() for ClusterFuture ...
[08:08:11.355] | : result already collected: FutureResult
[08:08:11.355] | result() for ClusterFuture ... done
[08:08:11.355] | signalConditions() ...
[08:08:11.355] | : include = ‘immediateCondition’
[08:08:11.355] | : exclude = 
[08:08:11.355] | : resignal = FALSE
[08:08:11.355] | : Number of conditions: 0
[08:08:11.356] | :  int 0
[08:08:11.356] | signalConditions() ... done
[08:08:11.356] | check for misuse ...
[08:08:11.356] | check for misuse ... done
[08:08:11.356] value() for MultisessionFuture (<unnamed-120>) ... done
[08:08:11.356] value: <numeric>
[08:08:11.357] signalConditionsASAP(MultisessionFuture, pos=4) ...
[08:08:11.357] | nx: 6
[08:08:11.357] | relay: TRUE
[08:08:11.357] | stdout: TRUE
[08:08:11.357] | signal: TRUE
[08:08:11.357] | resignal: FALSE
[08:08:11.357] | force: TRUE
[08:08:11.357] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:11.357] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:11.357] | until=5
[08:08:11.357] | relaying element #5
[08:08:11.358] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:11.358] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:11.358] signalConditionsASAP(MultisessionFuture, pos=4) ... done
[08:08:11.358] resolve() for MultisessionFuture ...
[08:08:11.358] resolve() for MultisessionFuture ... done
[08:08:11.358] length: 2 (resolved future 4)

[08:08:11.358] checking value #5:
[08:08:11.358] 'obj' is NULL
[08:08:11.358] signalConditionsASAP(NULL, pos=5) ...
[08:08:11.358] | nx: 6
[08:08:11.359] | relay: TRUE
[08:08:11.359] | stdout: TRUE
[08:08:11.359] | signal: TRUE
[08:08:11.359] | resignal: FALSE
[08:08:11.359] | force: TRUE
[08:08:11.359] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:11.359] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:11.359] | until=6
[08:08:11.359] | relaying element #6
[08:08:11.359] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:11.359] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:11.360] signalConditionsASAP(NULL, pos=5) ... done
[08:08:11.360] signalConditionsASAP(NULL, pos=5) ...
[08:08:11.360] | nx: 6
[08:08:11.360] | relay: TRUE
[08:08:11.360] | stdout: TRUE
[08:08:11.360] | signal: TRUE
[08:08:11.362] | resignal: FALSE
[08:08:11.362] | force: TRUE
[08:08:11.362] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:11.363] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:11.363] | until=6
[08:08:11.363] | relaying element #6
[08:08:11.363] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:11.363] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:11.363] signalConditionsASAP(NULL, pos=5) ... done
[08:08:11.363] length: 1 (resolved future 5)

[08:08:11.363] checking value #6:
[08:08:11.363] 'obj' is atomic
[08:08:11.364] signalConditionsASAP(numeric, pos=6) ...
[08:08:11.364] | nx: 6
[08:08:11.364] | relay: TRUE
[08:08:11.364] | stdout: TRUE
[08:08:11.364] | signal: TRUE
[08:08:11.364] | resignal: FALSE
[08:08:11.364] | force: TRUE
[08:08:11.364] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:11.364] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:11.364] | until=6
[08:08:11.364] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:11.365] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:11.365] signalConditionsASAP(numeric, pos=6) ... done
[08:08:11.365] length: 0 (resolved future 6)

[08:08:11.365] Relaying remaining futures ...
[08:08:11.365] | signalConditionsASAP(NULL, pos=0) ...
[08:08:11.365] | : nx: 6
[08:08:11.365] | : relay: TRUE
[08:08:11.365] | : stdout: TRUE
[08:08:11.365] | : signal: TRUE
[08:08:11.366] | : resignal: FALSE
[08:08:11.366] | : force: TRUE
[08:08:11.366] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:11.366] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:11.366] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:11.366] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:11.366] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:11.366] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:4] 2 1 3 1
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
*** futures() - listenv ... DONE
Testing with 2 cores ... DONE

> message("*** futures() / resolved() / value() ... DONE")
*** futures() / resolved() / value() ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=9s, sys.self=0.7s, elapsed=1e+01s, user.child=2s, sys.child=1s
Test ‘futures’ ... success
> 
