
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-multicore,worker-termination.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("multicore,worker-termination")
Test ‘multicore,worker-termination’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-multicore,worker-termination.R’

> library(future)
[08:08:59.962] Option 'future.startup.script': TRUE
[08:08:59.962] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:08:59.963] Future startup scripts found: <none>

> message("*** multicore() - terminating workers ...")
*** multicore() - terminating workers ...

> if (supportsMulticore() && availableCores("multicore") >= 
+     2) {
+     plan(multicore, workers = 2)
+     all <- nbrOfWorkers()
+     free <- n .... [TRUNCATED] 
[08:08:59.965] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:59.966] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:59.966] | : all.equal() for FutureStrategyList ...
[08:08:59.966] | : . New stack:
[08:08:59.966] | : . List of 1
[08:08:59.966] | : .  $ :function (..., workers = 2L, envir = parent.frame())  
[08:08:59.966] | : .   ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[08:08:59.966] | : .   ..- attr(*, "init")= logi TRUE
[08:08:59.966] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:59.966] | : .     ...)  
[08:08:59.966] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:59.966] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:59.966] | : .   ..- attr(*, "tweaks")=List of 1
[08:08:59.966] | : .   .. ..$ workers: int 2
[08:08:59.966] | : .   ..- attr(*, "call")= language plan(multicore, workers = 2L)
[08:08:59.966] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:59.972] | : . Old stack:
[08:08:59.972] | : . List of 1
[08:08:59.972] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:59.972] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:59.972] | : .   ..- attr(*, "init")= logi TRUE
[08:08:59.972] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:59.972] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:59.972] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:59.972] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:59.972] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:59.976] | : . Not identical
[08:08:59.976] | : . all.equal() for future ...
[08:08:59.976] | : . ' List of 2
[08:08:59.976] | : . '  $ target :function (..., workers = 2L, envir = parent.frame())  
[08:08:59.976] | : . '   ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[08:08:59.976] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:59.976] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:59.976] | : . '     ...)  
[08:08:59.976] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:59.976] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:59.976] | : . '   ..- attr(*, "tweaks")=List of 1
[08:08:59.976] | : . '   .. ..$ workers: int 2
[08:08:59.976] | : . '   ..- attr(*, "call")= language plan(multicore, workers = 2L)
[08:08:59.976] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:59.976] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:59.976] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:59.976] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:59.976] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:59.976] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:59.976] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:59.981] | : . ' Formals differ
[08:08:59.982] | : . all.equal() for future ... done
[08:08:59.982] | : . Future strategies differ at level 1
[08:08:59.982] | : all.equal() for FutureStrategyList ... done
[08:08:59.982] | : plan(): Setting new future backend stack:
[08:08:59.982] | : List of future strategies:
[08:08:59.982] | : 1. multicore:
[08:08:59.982] | :    - args: function (..., workers = 2L, envir = parent.frame())
[08:08:59.982] | :    - tweaked: TRUE
[08:08:59.982] | :    - call: plan(multicore, workers = 2L)
[08:08:59.982] | : List of 1
[08:08:59.982] | :  $ :function (..., workers = 2L, envir = parent.frame())  
[08:08:59.982] | :   ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[08:08:59.982] | :   ..- attr(*, "init")= logi TRUE
[08:08:59.982] | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:59.982] | :     ...)  
[08:08:59.982] | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:59.982] | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:59.982] | :   ..- attr(*, "tweaks")=List of 1
[08:08:59.982] | :   .. ..$ workers: int 2
[08:08:59.982] | :   ..- attr(*, "call")= language plan(multicore, workers = 2L)
[08:08:59.982] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:59.986] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:59.986] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:59.986] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:59.986] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:59.986] | : . Legacy shutdown of cluster workers ...
[08:08:59.986] | : . ' Stopping existing cluster ...
[08:08:59.987] | : . ' , No pre-existing cluster. Skipping
[08:08:59.987] | : . ' Stopping existing cluster ... done
[08:08:59.987] | : . Legacy shutdown of cluster workers ... done
[08:08:59.987] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:59.987] | : plan(): plan_init() of ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:59.987] | : . function (..., workers = 2L, envir = parent.frame())  
[08:08:59.987] | : .  - attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[08:08:59.987] | : .  - attr(*, "init")= logi TRUE
[08:08:59.987] | : .  - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:59.987] | : .     ...)  
[08:08:59.987] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:59.987] | : .  - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:59.987] | : .  - attr(*, "tweaks")=List of 1
[08:08:59.987] | : .   ..$ workers: int 2
[08:08:59.987] | : .  - attr(*, "call")= language plan(multicore, workers = 2L)
[08:08:59.990] | : . init: TRUE
[08:08:59.990] | : . makeFutureBackend(<tweaked>) ...
[08:08:59.990] | : . ' Backend function: <‘NULL’>
[08:08:59.990] | : . ' Evaluator tweak arguments: [n=1]
[08:08:59.990] | : . ' List of 1
[08:08:59.990] | : . '  $ workers: int 2
[08:08:59.991] | : . ' Evaluator formal arguments: [n=1]
[08:08:59.991] | : . ' List of 1
[08:08:59.991] | : . '  $ workers: int 2
[08:08:59.992] | : . ' Backend factory arguments: [n=1]
[08:08:59.992] | : . ' Dotted pair list of 1
[08:08:59.992] | : . '  $ workers: int 2
[08:08:59.993] | : . ' Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:59.993] | : . makeFutureBackend(<tweaked>) ... done
[08:08:59.993] | : plan(): plan_init() of ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:59.993] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:59.993] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:59.994] | : plan(): nbrOfWorkers() = 2
[08:08:59.994] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:59.994] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:59.994] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:59.994] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:59.994] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:59.994] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:59.995] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:59.995] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:59.995] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:59.995] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:59.995] future(..., label = NULL) ...
[08:08:59.995] | lazy: FALSE
[08:08:59.995] | stdout: TRUE
[08:08:59.996] | conditions: [n=1] ‘condition’
[08:08:59.996] | gc: FALSE
[08:08:59.996] | earlySignal: FALSE
[08:08:59.996] | getGlobalsAndPackages() ...
[08:08:59.996] | : Searching for globals ...
[08:09:00.009] | : . globals found: [3] ‘{’, ‘::’, ‘Sys.getpid’
[08:09:00.010] | : Searching for globals ... done
[08:09:00.010] | : Resolving globals: FALSE
[08:09:00.010] | : Search for packages associated with the globals ...
[08:09:00.010] | : . Packages associated with globals: [1] ‘base’
[08:09:00.011] | : . Packages: [1] ‘base’
[08:09:00.011] | : Search for packages associated with the globals ... done
[08:09:00.011] | : Packages after dropping 'base': [0] 
[08:09:00.011] | : globals: [0] 
[08:09:00.011] | : packages: [0] 
[08:09:00.011] | getGlobalsAndPackages() ... done
[08:09:00.012] | run() for ‘Future’ (<unnamed-1>) ...
[08:09:00.012] | : state: ‘created’
[08:09:00.012] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:00.012] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:00.012] | : Using MulticoreFutureBackend ...
[08:09:00.012] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:09:00.013] | : . Launching futures ...
[08:09:00.013] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:09:00.013] | : . ' , getFutureData() ...
[08:09:00.013] | : . ' , ; getFutureCore() ...
[08:09:00.013] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:09:00.013] | : . ' , ; getFutureCore() ... done
[08:09:00.014] | : . ' , ; getFutureCapture() ...
[08:09:00.014] | : . ' , ; getFutureCapture() ... done
[08:09:00.014] | : . ' , ; getFutureContext() ...
[08:09:00.014] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:00.014] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:09:00.014] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:00.014] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:09:00.015] | : . ' , ; getFutureContext() ... done
[08:09:00.015] | : . ' , getFutureData() ... done
[08:09:00.015] | : . ' , requestCore(..., workers = 2) ...
[08:09:00.016] | : . ' , requestCore(..., workers = 2) ... done
[08:09:00.019] | : . ' , MulticoreFuture started
[08:09:00.019] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:09:00.019] | : . Launching futures ... done
[08:09:00.020] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:09:00.020] | : Using MulticoreFutureBackend ... done
[08:09:00.020] | run() for ‘Future’ (<unnamed-1>) ... done
[08:09:00.020] future(..., label = NULL) ... done
[08:09:00.022] value() for MulticoreFuture (<unnamed-1>) ...
[08:09:00.023] | result() for MulticoreFuture ...
[08:09:00.024] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:00.024] | : . ' , ; Getting full stack: [n=1] ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:09:00.024] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:00.025] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:09:00.025] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:09:00.026] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:09:00.026] | : . ' , ; ` | New stack:
[08:09:00.026] | : . ' , ; ` | List of 1
[08:09:00.026] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:00.026] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:00.026] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:09:00.026] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:00.026] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:00.026] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:00.026] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:00.026] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:00.030] | : . ' , ; ` | Old stack:
[08:09:00.030] | : . ' , ; ` | List of 1
[08:09:00.030] | : . ' , ; ` |  $ :function (..., workers = 2L, envir = parent.frame())  
[08:09:00.030] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[08:09:00.030] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:09:00.030] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:00.030] | : . ' , ; ` |     ...)  
[08:09:00.030] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:00.030] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:00.030] | : . ' , ; ` |   ..- attr(*, "tweaks")=List of 1
[08:09:00.030] | : . ' , ; ` |   .. ..$ workers: int 2
[08:09:00.030] | : . ' , ; ` |   ..- attr(*, "call")= language plan(multicore, workers = 2L)
[08:09:00.030] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558e01d6cfc8> 
[08:09:00.030] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:00.030] | : . ' , ; ` |     ...)  
[08:09:00.030] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:00.030] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:00.036] | : . ' , ; ` | Not identical
[08:09:00.036] | : . ' , ; ` | all.equal() for future ...
[08:09:00.037] | : . ' , ; ` | : List of 2
[08:09:00.037] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:00.037] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:00.037] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:09:00.037] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:00.037] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:00.037] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:00.037] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:00.037] | : . ' , ; ` | :  $ current:function (..., workers = 2L, envir = parent.frame())  
[08:09:00.037] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[08:09:00.037] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:09:00.037] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:00.037] | : . ' , ; ` | :     ...)  
[08:09:00.037] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:00.037] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:00.037] | : . ' , ; ` | :   ..- attr(*, "tweaks")=List of 1
[08:09:00.037] | : . ' , ; ` | :   .. ..$ workers: int 2
[08:09:00.037] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(multicore, workers = 2L)
[08:09:00.037] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x558e01d6cfc8> 
[08:09:00.037] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:00.037] | : . ' , ; ` | :     ...)  
[08:09:00.037] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:00.051] | : . ' , ; ` | : Formals differ
[08:09:00.051] | : . ' , ; ` | all.equal() for future ... done
[08:09:00.051] | : . ' , ; ` | Future strategies differ at level 1
[08:09:00.051] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:09:00.051] | : . ' , ; ` plan(): Setting new future backend stack:
[08:09:00.052] | : . ' , ; ` List of future strategies:
[08:09:00.052] | : . ' , ; ` 1. sequential:
[08:09:00.052] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:09:00.052] | : . ' , ; `    - tweaked: FALSE
[08:09:00.052] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:00.052] | : . ' , ; ` List of 1
[08:09:00.052] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:00.052] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:00.052] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:09:00.052] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:00.052] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:00.052] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:00.052] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:00.052] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:00.056] | : . ' , ; ` plan(): plan_cleanup(‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:09:00.056] | : . ' , ; ` plan(): plan_cleanup(‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:09:00.056] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:00.057] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:09:00.057] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:00.057] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:00.057] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:09:00.057] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:00.057] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:00.057] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:00.057] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:00.060] | : . ' , ; ` | : init: TRUE
[08:09:00.060] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:09:00.060] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:09:00.060] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:09:00.060] | : . ' , ; ` | : .  list()
[08:09:00.060] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:09:00.061] | : . ' , ; ` | : .  list()
[08:09:00.061] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:09:00.061] | : . ' , ; ` | : . Dotted pair list of 2
[08:09:00.061] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:09:00.061] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:09:00.062] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:09:00.062] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:09:00.062] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:09:00.062] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:00.063] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:09:00.063] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:09:00.063] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
Warning in mccollect(jobs = jobs, wait = TRUE) :
  1 parallel job did not deliver a result
[08:09:00.068] | : Detected non-FutureResult result ...
[08:09:00.073] | : . Removing MulticoreFuture from FutureRegistry (multicore-58f21b37e71935fb455ca4a10605124b)
[08:09:00.073] | : Detected non-FutureResult result ... done
[08:09:00.073] | result() for MulticoreFuture ... done
[08:09:00.073] value() for MulticoreFuture (<unnamed-1>) ... done
<FutureError: Failed to retrieve the result of MulticoreFuture (<unnamed-1>) from the forked worker (on localhost; PID 71879). Post-mortem diagnostic: No process exists with this PID, i.e. the forked localhost worker is no longer alive>


Future UUID: 58f21b37e71935fb455ca4a10605124b-1


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
MulticoreFuture:
Label: <unnamed-1>
Expression:
{
    tools::pskill(pid = Sys.getpid())
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘running’
Resolved: TRUE
Unique identifier: 58f21b37e71935fb455ca4a10605124b-1
Owner process: 58f21b37e71935fb455ca4a10605124b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
Value: <not collected>
Conditions captured: <none>

DEBUG: END TROUBLESHOOTING HELP
[1] "Failed to retrieve the result of MulticoreFuture (<unnamed-1>) from the forked worker (on localhost; PID 71879). Post-mortem diagnostic: No process exists with this PID, i.e. the forked localhost worker is no longer alive"
[08:09:00.075] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:00.075] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
List of 3
 $ pid  : int 71879
 $ fd   : int [1:2] 10 13
 $ alive: logi FALSE
 - attr(*, "class")= chr [1:3] "parallelJob" "childProcess" "process"
[08:09:00.077] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:00.077] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
nbrOfFreeWorkers(): 2
[08:09:00.078] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:00.078] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done

> message("*** multicore() - terminating workers ... DONE")
*** multicore() - terminating workers ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.1s, sys.self=0.02s, elapsed=0.2s, user.child=0.03s, sys.child=0.02s
Test ‘multicore,worker-termination’ ... success
> 
