
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-stdout.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("stdout")
Test ‘stdout’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-stdout.R’

> library(future)
[08:10:09.856] Option 'future.startup.script': TRUE
[08:10:09.857] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:10:09.857] Future startup scripts found: <none>

> message("*** Standard output ...")
*** Standard output ...

> truth_rows <- utils::capture.output({
+     print(1:50)
+     str(1:50)
+     cat(letters, sep = "-")
+     cat(1:6, collapse = "\n")
+     write.ta .... [TRUNCATED] 

> truth <- paste0(paste(truth_rows, collapse = "\n"), 
+     "\n")

> print(truth)
[1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n int [1:50] 1 2 3 4 5 6 7 8 9 10 ...\na-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 \n\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\"\n\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\"\n\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\"\n\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\"\n\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\"\n\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\"\n\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\"\n\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\"\n\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\"\n\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\"\n\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\"\n"

> for (cores in seq_len(min(2, availCores))) {
+     message(sprintf("Testing with %d cores ...", cores))
+     options(mc.cores = cores)
+     for (s .... [TRUNCATED] 
Testing with 1 cores ...
sequential ...
[08:10:09.894] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:09.894] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:10:09.894] | : all.equal() for FutureStrategyList ...
[08:10:09.894] | : . New stack:
[08:10:09.894] | : . List of 1
[08:10:09.894] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:09.894] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:09.894] | : .   ..- attr(*, "init")= logi TRUE
[08:10:09.894] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:09.894] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.894] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.894] | : .   ..- attr(*, "call")= language plan(strategy)
[08:10:09.894] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:09.897] | : . Old stack:
[08:10:09.897] | : . List of 1
[08:10:09.897] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:09.897] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:09.897] | : .   ..- attr(*, "init")= logi TRUE
[08:10:09.897] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:09.897] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.897] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.897] | : .   ..- attr(*, "call")= language plan(sequential)
[08:10:09.897] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:09.900] | : . Not identical
[08:10:09.900] | : . all.equal() for future ...
[08:10:09.900] | : . ' List of 2
[08:10:09.900] | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:09.900] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:09.900] | : . '   ..- attr(*, "init")= logi TRUE
[08:10:09.900] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:09.900] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.900] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.900] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:10:09.900] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:09.900] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:09.900] | : . '   ..- attr(*, "init")= logi TRUE
[08:10:09.900] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:09.900] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.900] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.900] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:10:09.904] | : . all.equal() for future ... done
[08:10:09.905] | : all.equal() for FutureStrategyList ... done
[08:10:09.905] | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:10:09.905] | : List of future strategies:
[08:10:09.905] | : 1. sequential:
[08:10:09.905] | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:09.905] | :    - tweaked: FALSE
[08:10:09.905] | :    - call: plan(sequential)
[08:10:09.905] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:10:09.905] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
- stdout = TRUE
[08:10:09.906] future(..., label = NULL) ...
[08:10:09.906] | lazy: FALSE
[08:10:09.906] | stdout: TRUE
[08:10:09.906] | conditions: [n=1] ‘condition’
[08:10:09.906] | gc: FALSE
[08:10:09.906] | earlySignal: FALSE
[08:10:09.907] | getGlobalsAndPackages() ...
[08:10:09.907] | : Searching for globals ...
[08:10:09.943] | : . globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:10:09.944] | : Searching for globals ... done
[08:10:09.944] | : Resolving globals: FALSE
[08:10:09.944] | : Search for packages associated with the globals ...
[08:10:09.944] | : . Packages associated with globals: [2] ‘base’, ‘utils’
[08:10:09.945] | : . Packages: [2] ‘base’, ‘utils’
[08:10:09.945] | : Search for packages associated with the globals ... done
[08:10:09.945] | : Packages after dropping 'base': [1] ‘utils’
[08:10:09.945] | : Packages after dropping non-attached packages: [1] ‘utils’
[08:10:09.945] | : globals: [0] 
[08:10:09.945] | : packages: [1] ‘utils’
[08:10:09.945] | getGlobalsAndPackages() ... done
[08:10:09.946] | run() for ‘Future’ (<unnamed-1>) ...
[08:10:09.946] | : state: ‘created’
[08:10:09.946] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:09.946] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:10:09.946] | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:09.946] | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:09.946] | : . '  - attr(*, "init")= logi TRUE
[08:10:09.946] | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:09.946] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.946] | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.946] | : . '  - attr(*, "call")= language plan(sequential)
[08:10:09.948] | : . ' init: TRUE
[08:10:09.949] | : . ' makeFutureBackend(<sequential>) ...
[08:10:09.949] | : . ' , Backend function: <‘NULL’>
[08:10:09.949] | : . ' , Evaluator tweak arguments: [n=0]
[08:10:09.949] | : . ' ,  list()
[08:10:09.949] | : . ' , Evaluator formal arguments: [n=2]
[08:10:09.949] | : . ' ,  list()
[08:10:09.950] | : . ' , Backend factory arguments: [n=2]
[08:10:09.950] | : . ' , Dotted pair list of 2
[08:10:09.950] | : . ' ,  $ gc         : logi FALSE
[08:10:09.950] | : . ' ,  $ earlySignal: logi FALSE
[08:10:09.951] | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:10:09.951] | : . ' makeFutureBackend(<sequential>) ... done
[08:10:09.951] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:10:09.951] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:09.951] | : Using SequentialFutureBackend ...
[08:10:09.951] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:10:09.952] | : . Launching futures ...
[08:10:09.952] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:10:09.952] | : . ' , getFutureData() ...
[08:10:09.952] | : . ' , ; getFutureCore() ...
[08:10:09.952] | : . ' , ; ` Packages needed by the future expression (n = 1): ‘utils’
[08:10:09.952] | : . ' , ; getFutureCore() ... done
[08:10:09.952] | : . ' , ; getFutureCapture() ...
[08:10:09.953] | : . ' , ; getFutureCapture() ... done
[08:10:09.953] | : . ' , ; getFutureContext() ...
[08:10:09.953] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:09.953] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:10:09.953] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:09.953] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:10:09.953] | : . ' , ; getFutureContext() ... done
[08:10:09.953] | : . ' , getFutureData() ... done
[08:10:09.956] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:09.956] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:10:09.956] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:09.956] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:09.957] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:09.957] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:10:09.957] | : . ' , ; ` | New stack:
[08:10:09.957] | : . ' , ; ` | List of 1
[08:10:09.957] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:09.957] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:09.957] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:10:09.957] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:09.957] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.957] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.957] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:09.957] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:09.961] | : . ' , ; ` | Old stack:
[08:10:09.961] | : . ' , ; ` | List of 1
[08:10:09.961] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:09.961] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:09.961] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:09.961] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:09.961] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.961] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.961] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:10:09.961] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:09.961] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:09.961] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.961] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:09.964] | : . ' , ; ` | Not identical
[08:10:09.964] | : . ' , ; ` | all.equal() for future ...
[08:10:09.964] | : . ' , ; ` | : List of 2
[08:10:09.964] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:09.964] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:09.964] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:10:09.964] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:09.964] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.964] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.964] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:09.964] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:09.964] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:09.964] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:09.964] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:09.964] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.964] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.964] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:09.964] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:09.964] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:09.964] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.969] | : . ' , ; ` | all.equal() for future ... done
[08:10:09.969] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:10:09.969] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:10:09.969] | : . ' , ; ` List of future strategies:
[08:10:09.969] | : . ' , ; ` 1. sequential:
[08:10:09.969] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:09.969] | : . ' , ; `    - tweaked: FALSE
[08:10:09.969] | : . ' , ; `    - call: plan(sequential)
[08:10:09.970] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:09.970] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:09.973] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:09.973] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:09.973] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:09.973] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:10:09.973] | : . ' , ; ` | : New stack:
[08:10:09.973] | : . ' , ; ` | : List of 1
[08:10:09.973] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:09.973] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:09.973] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:09.973] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:09.973] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.973] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.973] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:09.973] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:09.973] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:09.973] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.973] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:09.977] | : . ' , ; ` | : Old stack:
[08:10:09.977] | : . ' , ; ` | : List of 1
[08:10:09.977] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:09.977] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:09.977] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:09.977] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:09.977] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.977] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.977] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:09.977] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:09.977] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:09.977] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:09.977] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:09.981] | : . ' , ; ` | : Identical
[08:10:09.981] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:10:09.981] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:10:09.981] | : . ' , ; ` | List of future strategies:
[08:10:09.981] | : . ' , ; ` | 1. sequential:
[08:10:09.981] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:09.981] | : . ' , ; ` |    - tweaked: FALSE
[08:10:09.981] | : . ' , ; ` |    - call: plan(sequential)
[08:10:09.982] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:09.982] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:09.982] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:09.985] | : . ' , SequentialFuture started (and completed)
[08:10:09.985] | : . ' , signalConditions() ...
[08:10:09.986] | : . ' , ; include = ‘immediateCondition’
[08:10:09.986] | : . ' , ; exclude = 
[08:10:09.986] | : . ' , ; resignal = FALSE
[08:10:09.986] | : . ' , ; Number of conditions: 6
[08:10:09.986] | : . ' , ;  int 6
[08:10:09.986] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:09.986] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:09.987] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:09.987] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:09.987] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:09.987] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:09.987] | : . ' , signalConditions() ... done
[08:10:09.987] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:10:09.987] | : . Launching futures ... done
[08:10:09.987] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:10:09.988] | : Using SequentialFutureBackend ... done
[08:10:09.988] | run() for ‘Future’ (<unnamed-1>) ... done
[08:10:09.988] future(..., label = NULL) ... done
List of 16
 $ value              : int 42
 $ visible            : logi TRUE
 $ stdout             : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions         :List of 6
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:09.955] | : . ' , attachPackages() ...\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:09.955] | : . ' , ; packages: [n=1] ‘future’\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg), appendLF = appendLF)
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:09.955] | : . ' , attachPackages() ... done\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:09.955] | : . ' , attachPackages() ...\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:09.955] | : . ' , ; packages: [n=1] ‘utils’\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg), appendLF = appendLF)
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:09.955] | : . ' , attachPackages() ... done\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
 $ rng                : logi FALSE
 $ seed               : NULL
 $ misuseGlobalEnv    : NULL
 $ misuseConnections  :List of 3
  ..$ added   : NULL
  ..$ removed : NULL
  ..$ replaced: NULL
 $ misuseDevices      : NULL
 $ misuseDefaultDevice: list()
 $ started            : POSIXct[1:1], format: "2025-06-17 08:10:09"
 $ finished           : POSIXct[1:1], format: "2025-06-17 08:10:09"
 $ uuid               : chr [1:2] "01885b60b3d40eac4dc41a106424dbc9" "1"
 $ session_uuid       : chr "01885b60b3d40eac4dc41a106424dbc9"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "28bb34de9501"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 75586
  .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:10:09"
  .. ..$ random: int 2147483647
 $ r_info             :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 5 1
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version            : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[08:10:10.009] value() for SequentialFuture (<unnamed-1>) ...
[08:10:10.009] | signalConditions() ...
[08:10:10.009] | : include = ‘immediateCondition’
[08:10:10.009] | : exclude = 
[08:10:10.009] | : resignal = FALSE
[08:10:10.009] | : Number of conditions: 6
[08:10:10.009] | :  int 6
[08:10:10.010] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.010] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.010] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.010] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.010] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.010] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.010] | signalConditions() ... done
[08:10:10.010] | relay stdout ...
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[08:10:10.010] | relay stdout ... done
[08:10:10.011] | check for misuse ...
[08:10:10.011] | check for misuse ... done
[08:10:10.011] | relay conditions ...
[08:10:10.011] | : Future state: ‘finished’
[08:10:10.011] | : signalConditions() ...
[08:10:10.011] | : . include = ‘condition’
[08:10:10.011] | : . exclude = ‘immediateCondition’
[08:10:10.011] | : . resignal = TRUE
[08:10:10.011] | : . Number of conditions: 6
[08:10:10.011] | : .  int 6
[08:10:10.012] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.012] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:09.955] | : . ' , attachPackages() ...
[08:10:10.012] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.012] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:09.955] | : . ' , ; packages: [n=1] ‘future’
[08:10:10.012] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.012] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:09.955] | : . ' , attachPackages() ... done
[08:10:10.013] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.013] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:09.955] | : . ' , attachPackages() ...
[08:10:10.013] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.013] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:09.955] | : . ' , ; packages: [n=1] ‘utils’
[08:10:10.013] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.013] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:09.955] | : . ' , attachPackages() ... done
[08:10:10.013] | : signalConditions() ... done
[08:10:10.013] | relay conditions ... done
[08:10:10.013] value() for SequentialFuture (<unnamed-1>) ... done
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 6] simpleMessage, simpleMessage, simpleMessage, simpleMessage, simpleMessage, simpleMessage
RNG used: FALSE
duration: 0.01792908 secs (started 2025-06-17 08:10:09.954996)
version: 1.8
[08:10:10.015] future(..., label = NULL) ...
[08:10:10.015] | lazy: FALSE
[08:10:10.015] | stdout: TRUE
[08:10:10.015] | conditions: [n=1] ‘condition’
[08:10:10.015] | gc: FALSE
[08:10:10.015] | earlySignal: FALSE
[08:10:10.015] | getGlobalsAndPackages() ...
[08:10:10.015] | : Searching for globals ...
[08:10:10.045] | : . globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:10:10.045] | : Searching for globals ... done
[08:10:10.045] | : Resolving globals: FALSE
[08:10:10.045] | : Search for packages associated with the globals ...
[08:10:10.045] | : . Packages associated with globals: [2] ‘base’, ‘utils’
[08:10:10.045] | : . Packages: [2] ‘base’, ‘utils’
[08:10:10.046] | : Search for packages associated with the globals ... done
[08:10:10.046] | : Packages after dropping 'base': [1] ‘utils’
[08:10:10.046] | : Packages after dropping non-attached packages: [1] ‘utils’
[08:10:10.046] | : globals: [0] 
[08:10:10.046] | : packages: [1] ‘utils’
[08:10:10.046] | getGlobalsAndPackages() ... done
[08:10:10.046] | run() for ‘Future’ (<unnamed-2>) ...
[08:10:10.047] | : state: ‘created’
[08:10:10.047] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.047] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.047] | : Using SequentialFutureBackend ...
[08:10:10.047] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:10:10.047] | : . Launching futures ...
[08:10:10.047] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:10:10.047] | : . ' , getFutureData() ...
[08:10:10.047] | : . ' , ; getFutureCore() ...
[08:10:10.048] | : . ' , ; ` Packages needed by the future expression (n = 1): ‘utils’
[08:10:10.048] | : . ' , ; getFutureCore() ... done
[08:10:10.048] | : . ' , ; getFutureCapture() ...
[08:10:10.048] | : . ' , ; getFutureCapture() ... done
[08:10:10.048] | : . ' , ; getFutureContext() ...
[08:10:10.048] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.048] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:10:10.048] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.048] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:10:10.048] | : . ' , ; getFutureContext() ... done
[08:10:10.049] | : . ' , getFutureData() ... done
[08:10:10.050] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.050] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:10:10.050] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.050] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.050] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:10.051] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:10:10.051] | : . ' , ; ` | New stack:
[08:10:10.051] | : . ' , ; ` | List of 1
[08:10:10.051] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.051] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.051] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:10:10.051] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.051] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.051] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.051] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.051] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.054] | : . ' , ; ` | Old stack:
[08:10:10.054] | : . ' , ; ` | List of 1
[08:10:10.054] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.054] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.054] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:10.054] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.054] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.054] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.054] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:10:10.054] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.054] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.054] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.054] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.057] | : . ' , ; ` | Not identical
[08:10:10.057] | : . ' , ; ` | all.equal() for future ...
[08:10:10.058] | : . ' , ; ` | : List of 2
[08:10:10.058] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.058] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.058] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:10:10.058] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.058] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.058] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.058] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.058] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.058] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.058] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.058] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.058] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.058] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.058] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.058] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.058] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.058] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.062] | : . ' , ; ` | all.equal() for future ... done
[08:10:10.063] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:10:10.063] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:10:10.063] | : . ' , ; ` List of future strategies:
[08:10:10.063] | : . ' , ; ` 1. sequential:
[08:10:10.063] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:10.063] | : . ' , ; `    - tweaked: FALSE
[08:10:10.063] | : . ' , ; `    - call: plan(sequential)
[08:10:10.063] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:10.063] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.065] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.065] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.066] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:10.066] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:10:10.066] | : . ' , ; ` | : New stack:
[08:10:10.066] | : . ' , ; ` | : List of 1
[08:10:10.066] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.066] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.066] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.066] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.066] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.066] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.066] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.066] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.066] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.066] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.066] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.069] | : . ' , ; ` | : Old stack:
[08:10:10.069] | : . ' , ; ` | : List of 1
[08:10:10.069] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.069] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.069] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.069] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.069] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.069] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.069] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.069] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.069] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.069] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.069] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.073] | : . ' , ; ` | : Identical
[08:10:10.073] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:10:10.073] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:10:10.073] | : . ' , ; ` | List of future strategies:
[08:10:10.073] | : . ' , ; ` | 1. sequential:
[08:10:10.073] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:10.073] | : . ' , ; ` |    - tweaked: FALSE
[08:10:10.073] | : . ' , ; ` |    - call: plan(sequential)
[08:10:10.074] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:10.074] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.074] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.074] | : . ' , SequentialFuture started (and completed)
[08:10:10.074] | : . ' , signalConditions() ...
[08:10:10.074] | : . ' , ; include = ‘immediateCondition’
[08:10:10.074] | : . ' , ; exclude = 
[08:10:10.075] | : . ' , ; resignal = FALSE
[08:10:10.075] | : . ' , ; Number of conditions: 6
[08:10:10.075] | : . ' , ;  int 6
[08:10:10.075] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.075] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.075] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.075] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.076] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.076] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.076] | : . ' , signalConditions() ... done
[08:10:10.076] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:10:10.076] | : . Launching futures ... done
[08:10:10.076] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:10:10.076] | : Using SequentialFutureBackend ... done
[08:10:10.076] | run() for ‘Future’ (<unnamed-2>) ... done
[08:10:10.076] future(..., label = NULL) ... done
[08:10:10.077] value() for SequentialFuture (<unnamed-2>) ...
[08:10:10.077] | signalConditions() ...
[08:10:10.077] | : include = ‘immediateCondition’
[08:10:10.077] | : exclude = 
[08:10:10.077] | : resignal = FALSE
[08:10:10.077] | : Number of conditions: 6
[08:10:10.077] | :  int 6
[08:10:10.078] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.078] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.078] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.078] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.078] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.078] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.078] | signalConditions() ... done
[08:10:10.078] | relay stdout ...
[08:10:10.078] | relay stdout ... done
[08:10:10.079] | check for misuse ...
[08:10:10.079] | check for misuse ... done
[08:10:10.079] | relay conditions ...
[08:10:10.079] | : Future state: ‘finished’
[08:10:10.079] | : signalConditions() ...
[08:10:10.079] | : . include = ‘condition’
[08:10:10.079] | : . exclude = ‘immediateCondition’
[08:10:10.079] | : . resignal = TRUE
[08:10:10.079] | : . Number of conditions: 6
[08:10:10.079] | : .  int 6
[08:10:10.080] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.080] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.049] | : . ' , attachPackages() ...
[08:10:10.080] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.080] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.049] | : . ' , ; packages: [n=1] ‘future’
[08:10:10.080] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.080] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.049] | : . ' , attachPackages() ... done
[08:10:10.080] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.081] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.049] | : . ' , attachPackages() ...
[08:10:10.081] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.081] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.049] | : . ' , ; packages: [n=1] ‘utils’
[08:10:10.081] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.081] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.049] | : . ' , attachPackages() ... done
[08:10:10.081] | : signalConditions() ... done
[08:10:10.081] | relay conditions ... done
[08:10:10.081] value() for SequentialFuture (<unnamed-2>) ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[08:10:10.082] future(..., label = NULL) ...
[08:10:10.082] | lazy: FALSE
[08:10:10.082] | stdout: TRUE
[08:10:10.082] | conditions: [n=1] ‘condition’
[08:10:10.082] | gc: FALSE
[08:10:10.082] | earlySignal: FALSE
[08:10:10.082] | getGlobalsAndPackages() ...
[08:10:10.082] | : Searching for globals ...
[08:10:10.085] | : . globals found: [1] ‘print’
[08:10:10.085] | : Searching for globals ... done
[08:10:10.085] | : Resolving globals: FALSE
[08:10:10.085] | : Search for packages associated with the globals ...
[08:10:10.085] | : . Packages associated with globals: [1] ‘base’
[08:10:10.086] | : . Packages: [1] ‘base’
[08:10:10.086] | : Search for packages associated with the globals ... done
[08:10:10.086] | : Packages after dropping 'base': [0] 
[08:10:10.086] | : globals: [0] 
[08:10:10.086] | : packages: [0] 
[08:10:10.086] | getGlobalsAndPackages() ... done
[08:10:10.086] | run() for ‘Future’ (<unnamed-3>) ...
[08:10:10.086] | : state: ‘created’
[08:10:10.087] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.087] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.087] | : Using SequentialFutureBackend ...
[08:10:10.087] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:10:10.087] | : . Launching futures ...
[08:10:10.087] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:10:10.087] | : . ' , getFutureData() ...
[08:10:10.087] | : . ' , ; getFutureCore() ...
[08:10:10.087] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:10:10.088] | : . ' , ; getFutureCore() ... done
[08:10:10.088] | : . ' , ; getFutureCapture() ...
[08:10:10.088] | : . ' , ; getFutureCapture() ... done
[08:10:10.088] | : . ' , ; getFutureContext() ...
[08:10:10.089] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.089] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:10:10.089] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.089] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:10:10.089] | : . ' , ; getFutureContext() ... done
[08:10:10.089] | : . ' , getFutureData() ... done
[08:10:10.091] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.091] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:10:10.091] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.091] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.091] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:10.091] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:10:10.092] | : . ' , ; ` | New stack:
[08:10:10.092] | : . ' , ; ` | List of 1
[08:10:10.092] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.092] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.092] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:10:10.092] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.092] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.092] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.092] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.092] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.094] | : . ' , ; ` | Old stack:
[08:10:10.094] | : . ' , ; ` | List of 1
[08:10:10.094] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.094] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.094] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:10.094] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.094] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.094] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.094] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:10:10.094] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.094] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.094] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.094] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.097] | : . ' , ; ` | Not identical
[08:10:10.097] | : . ' , ; ` | all.equal() for future ...
[08:10:10.097] | : . ' , ; ` | : List of 2
[08:10:10.097] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.097] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.097] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:10:10.097] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.097] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.097] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.097] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.097] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.097] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.097] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.097] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.097] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.097] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.097] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.097] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.097] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.097] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.102] | : . ' , ; ` | all.equal() for future ... done
[08:10:10.103] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:10:10.103] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:10:10.103] | : . ' , ; ` List of future strategies:
[08:10:10.103] | : . ' , ; ` 1. sequential:
[08:10:10.103] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:10.103] | : . ' , ; `    - tweaked: FALSE
[08:10:10.103] | : . ' , ; `    - call: plan(sequential)
[08:10:10.103] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:10.103] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.105] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.105] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.105] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:10.105] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:10:10.105] | : . ' , ; ` | : New stack:
[08:10:10.105] | : . ' , ; ` | : List of 1
[08:10:10.105] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.105] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.105] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.105] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.105] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.105] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.105] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.105] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.105] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.105] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.105] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.109] | : . ' , ; ` | : Old stack:
[08:10:10.110] | : . ' , ; ` | : List of 1
[08:10:10.110] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.110] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.110] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.110] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.110] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.110] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.110] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.110] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.110] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.110] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.110] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.113] | : . ' , ; ` | : Identical
[08:10:10.113] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:10:10.113] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:10:10.113] | : . ' , ; ` | List of future strategies:
[08:10:10.113] | : . ' , ; ` | 1. sequential:
[08:10:10.113] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:10.113] | : . ' , ; ` |    - tweaked: FALSE
[08:10:10.113] | : . ' , ; ` |    - call: plan(sequential)
[08:10:10.113] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:10.113] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.114] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.114] | : . ' , SequentialFuture started (and completed)
[08:10:10.114] | : . ' , signalConditions() ...
[08:10:10.114] | : . ' , ; include = ‘immediateCondition’
[08:10:10.114] | : . ' , ; exclude = 
[08:10:10.114] | : . ' , ; resignal = FALSE
[08:10:10.114] | : . ' , ; Number of conditions: 6
[08:10:10.114] | : . ' , ;  int 6
[08:10:10.115] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.115] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.115] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.115] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.115] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.115] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.115] | : . ' , signalConditions() ... done
[08:10:10.116] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:10:10.116] | : . Launching futures ... done
[08:10:10.116] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:10:10.116] | : Using SequentialFutureBackend ... done
[08:10:10.116] | run() for ‘Future’ (<unnamed-3>) ... done
[08:10:10.116] future(..., label = NULL) ... done
[08:10:10.116] value() for SequentialFuture (<unnamed-3>) ...
[08:10:10.116] | signalConditions() ...
[08:10:10.116] | : include = ‘immediateCondition’
[08:10:10.116] | : exclude = 
[08:10:10.117] | : resignal = FALSE
[08:10:10.117] | : Number of conditions: 6
[08:10:10.117] | :  int 6
[08:10:10.117] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.117] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.117] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.117] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.118] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.118] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.118] | signalConditions() ... done
[08:10:10.118] | relay stdout ...
[1] 42
[08:10:10.118] | relay stdout ... done
[08:10:10.118] | check for misuse ...
[08:10:10.118] | check for misuse ... done
[08:10:10.118] | relay conditions ...
[08:10:10.118] | : Future state: ‘finished’
[08:10:10.118] | : signalConditions() ...
[08:10:10.119] | : . include = ‘condition’
[08:10:10.119] | : . exclude = ‘immediateCondition’
[08:10:10.119] | : . resignal = TRUE
[08:10:10.119] | : . Number of conditions: 6
[08:10:10.119] | : .  int 6
[08:10:10.119] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.119] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.090] | : . ' , attachPackages() ...
[08:10:10.120] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.120] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.090] | : . ' , ; packages: [n=1] ‘future’
[08:10:10.120] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.120] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.090] | : . ' , attachPackages() ... done
[08:10:10.120] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.120] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.090] | : . ' , attachPackages() ...
[08:10:10.120] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.120] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.090] | : . ' , ; packages: [n=0] 
[08:10:10.120] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.121] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.090] | : . ' , attachPackages() ... done
[08:10:10.121] | : signalConditions() ... done
[08:10:10.121] | relay conditions ... done
[08:10:10.121] value() for SequentialFuture (<unnamed-3>) ... done
- stdout = FALSE
[08:10:10.121] future(..., label = NULL) ...
[08:10:10.121] | lazy: FALSE
[08:10:10.121] | stdout: FALSE
[08:10:10.121] | conditions: [n=1] ‘condition’
[08:10:10.121] | gc: FALSE
[08:10:10.121] | earlySignal: FALSE
[08:10:10.122] | getGlobalsAndPackages() ...
[08:10:10.122] | : Searching for globals ...
[08:10:10.150] | : . globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:10:10.150] | : Searching for globals ... done
[08:10:10.150] | : Resolving globals: FALSE
[08:10:10.150] | : Search for packages associated with the globals ...
[08:10:10.151] | : . Packages associated with globals: [2] ‘base’, ‘utils’
[08:10:10.151] | : . Packages: [2] ‘base’, ‘utils’
[08:10:10.151] | : Search for packages associated with the globals ... done
[08:10:10.151] | : Packages after dropping 'base': [1] ‘utils’
[08:10:10.151] | : Packages after dropping non-attached packages: [1] ‘utils’
[08:10:10.152] | : globals: [0] 
[08:10:10.152] | : packages: [1] ‘utils’
[08:10:10.152] | getGlobalsAndPackages() ... done
[08:10:10.152] | run() for ‘Future’ (<unnamed-4>) ...
[08:10:10.152] | : state: ‘created’
[08:10:10.152] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.152] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.152] | : Using SequentialFutureBackend ...
[08:10:10.152] | : . Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:10:10.153] | : . Launching futures ...
[08:10:10.153] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:10:10.153] | : . ' , getFutureData() ...
[08:10:10.153] | : . ' , ; getFutureCore() ...
[08:10:10.153] | : . ' , ; ` Packages needed by the future expression (n = 1): ‘utils’
[08:10:10.153] | : . ' , ; getFutureCore() ... done
[08:10:10.153] | : . ' , ; getFutureCapture() ...
[08:10:10.153] | : . ' , ; getFutureCapture() ... done
[08:10:10.154] | : . ' , ; getFutureContext() ...
[08:10:10.154] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.154] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:10:10.154] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.155] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:10:10.155] | : . ' , ; getFutureContext() ... done
[08:10:10.155] | : . ' , getFutureData() ... done
[08:10:10.156] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.156] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:10:10.156] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.157] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.157] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:10.157] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:10:10.157] | : . ' , ; ` | New stack:
[08:10:10.157] | : . ' , ; ` | List of 1
[08:10:10.157] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.157] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.157] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:10:10.157] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.157] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.157] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.157] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.157] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.159] | : . ' , ; ` | Old stack:
[08:10:10.160] | : . ' , ; ` | List of 1
[08:10:10.160] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.160] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.160] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:10.160] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.160] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.160] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.160] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:10:10.160] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.160] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.160] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.160] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.163] | : . ' , ; ` | Not identical
[08:10:10.163] | : . ' , ; ` | all.equal() for future ...
[08:10:10.163] | : . ' , ; ` | : List of 2
[08:10:10.163] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.163] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.163] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:10:10.163] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.163] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.163] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.163] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.163] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.163] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.163] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.163] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.163] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.163] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.163] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.163] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.163] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.163] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.168] | : . ' , ; ` | all.equal() for future ... done
[08:10:10.168] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:10:10.168] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:10:10.168] | : . ' , ; ` List of future strategies:
[08:10:10.168] | : . ' , ; ` 1. sequential:
[08:10:10.168] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:10.168] | : . ' , ; `    - tweaked: FALSE
[08:10:10.168] | : . ' , ; `    - call: plan(sequential)
[08:10:10.168] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:10.168] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.170] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.171] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.171] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:10.171] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:10:10.171] | : . ' , ; ` | : New stack:
[08:10:10.171] | : . ' , ; ` | : List of 1
[08:10:10.171] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.171] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.171] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.171] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.171] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.171] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.171] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.171] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.171] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.171] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.171] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.175] | : . ' , ; ` | : Old stack:
[08:10:10.175] | : . ' , ; ` | : List of 1
[08:10:10.175] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.175] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.175] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.175] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.175] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.175] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.175] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.175] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.175] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.175] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.175] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.178] | : . ' , ; ` | : Identical
[08:10:10.178] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:10:10.178] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:10:10.178] | : . ' , ; ` | List of future strategies:
[08:10:10.178] | : . ' , ; ` | 1. sequential:
[08:10:10.178] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:10.178] | : . ' , ; ` |    - tweaked: FALSE
[08:10:10.178] | : . ' , ; ` |    - call: plan(sequential)
[08:10:10.179] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:10.179] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.179] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.179] | : . ' , SequentialFuture started (and completed)
[08:10:10.179] | : . ' , signalConditions() ...
[08:10:10.179] | : . ' , ; include = ‘immediateCondition’
[08:10:10.180] | : . ' , ; exclude = 
[08:10:10.180] | : . ' , ; resignal = FALSE
[08:10:10.180] | : . ' , ; Number of conditions: 6
[08:10:10.180] | : . ' , ;  int 6
[08:10:10.180] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.180] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.180] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.181] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.181] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.181] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.181] | : . ' , signalConditions() ... done
[08:10:10.181] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:10:10.181] | : . Launching futures ... done
[08:10:10.181] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:10:10.181] | : Using SequentialFutureBackend ... done
[08:10:10.181] | run() for ‘Future’ (<unnamed-4>) ... done
[08:10:10.182] future(..., label = NULL) ... done
List of 16
 $ value              : int 42
 $ visible            : logi TRUE
 $ stdout             : NULL
 $ conditions         :List of 6
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.155] | : . ' , attachPackages() ...\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.155] | : . ' , ; packages: [n=1] ‘future’\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg), appendLF = appendLF)
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.155] | : . ' , attachPackages() ... done\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.156] | : . ' , attachPackages() ...\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.156] | : . ' , ; packages: [n=1] ‘utils’\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg), appendLF = appendLF)
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.156] | : . ' , attachPackages() ... done\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
 $ rng                : logi FALSE
 $ seed               : NULL
 $ misuseGlobalEnv    : NULL
 $ misuseConnections  :List of 3
  ..$ added   : NULL
  ..$ removed : NULL
  ..$ replaced: NULL
 $ misuseDevices      : NULL
 $ misuseDefaultDevice: list()
 $ started            : POSIXct[1:1], format: "2025-06-17 08:10:10"
 $ finished           : POSIXct[1:1], format: "2025-06-17 08:10:10"
 $ uuid               : chr [1:2] "01885b60b3d40eac4dc41a106424dbc9" "4"
 $ session_uuid       : chr "01885b60b3d40eac4dc41a106424dbc9"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "28bb34de9501"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 75586
  .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:10:09"
  .. ..$ random: int 2147483647
 $ r_info             :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 5 1
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version            : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[08:10:10.202] value() for SequentialFuture (<unnamed-4>) ...
[08:10:10.202] | signalConditions() ...
[08:10:10.202] | : include = ‘immediateCondition’
[08:10:10.202] | : exclude = 
[08:10:10.202] | : resignal = FALSE
[08:10:10.202] | : Number of conditions: 6
[08:10:10.202] | :  int 6
[08:10:10.203] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.203] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.203] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.203] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.203] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.203] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.203] | signalConditions() ... done
[08:10:10.204] | relay stdout ...
[08:10:10.204] | relay stdout ... done
[08:10:10.204] | check for misuse ...
[08:10:10.204] | check for misuse ... done
[08:10:10.204] | relay conditions ...
[08:10:10.204] | : Future state: ‘finished’
[08:10:10.204] | : signalConditions() ...
[08:10:10.204] | : . include = ‘condition’
[08:10:10.204] | : . exclude = ‘immediateCondition’
[08:10:10.204] | : . resignal = TRUE
[08:10:10.204] | : . Number of conditions: 6
[08:10:10.205] | : .  int 6
[08:10:10.205] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.205] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.155] | : . ' , attachPackages() ...
[08:10:10.205] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.205] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.155] | : . ' , ; packages: [n=1] ‘future’
[08:10:10.205] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.206] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.155] | : . ' , attachPackages() ... done
[08:10:10.206] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.206] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.156] | : . ' , attachPackages() ...
[08:10:10.206] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.206] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.156] | : . ' , ; packages: [n=1] ‘utils’
[08:10:10.206] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.206] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.156] | : . ' , attachPackages() ... done
[08:10:10.206] | : signalConditions() ... done
[08:10:10.206] | relay conditions ... done
[08:10:10.207] value() for SequentialFuture (<unnamed-4>) ... done
[08:10:10.207] future(..., label = NULL) ...
[08:10:10.207] | lazy: FALSE
[08:10:10.207] | stdout: FALSE
[08:10:10.207] | conditions: [n=1] ‘condition’
[08:10:10.207] | gc: FALSE
[08:10:10.207] | earlySignal: FALSE
[08:10:10.207] | getGlobalsAndPackages() ...
[08:10:10.232] | : Searching for globals ...
[08:10:10.262] | : . globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:10:10.262] | : Searching for globals ... done
[08:10:10.262] | : Resolving globals: FALSE
[08:10:10.263] | : Search for packages associated with the globals ...
[08:10:10.263] | : . Packages associated with globals: [2] ‘base’, ‘utils’
[08:10:10.263] | : . Packages: [2] ‘base’, ‘utils’
[08:10:10.263] | : Search for packages associated with the globals ... done
[08:10:10.263] | : Packages after dropping 'base': [1] ‘utils’
[08:10:10.264] | : Packages after dropping non-attached packages: [1] ‘utils’
[08:10:10.264] | : globals: [0] 
[08:10:10.264] | : packages: [1] ‘utils’
[08:10:10.264] | getGlobalsAndPackages() ... done
[08:10:10.264] | run() for ‘Future’ (<unnamed-5>) ...
[08:10:10.264] | : state: ‘created’
[08:10:10.264] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.264] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.265] | : Using SequentialFutureBackend ...
[08:10:10.265] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:10:10.265] | : . Launching futures ...
[08:10:10.265] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:10:10.265] | : . ' , getFutureData() ...
[08:10:10.265] | : . ' , ; getFutureCore() ...
[08:10:10.265] | : . ' , ; ` Packages needed by the future expression (n = 1): ‘utils’
[08:10:10.265] | : . ' , ; getFutureCore() ... done
[08:10:10.266] | : . ' , ; getFutureCapture() ...
[08:10:10.266] | : . ' , ; getFutureCapture() ... done
[08:10:10.267] | : . ' , ; getFutureContext() ...
[08:10:10.267] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.267] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:10:10.267] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.267] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:10:10.267] | : . ' , ; getFutureContext() ... done
[08:10:10.267] | : . ' , getFutureData() ... done
[08:10:10.269] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.269] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:10:10.269] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.269] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.269] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:10.269] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:10:10.269] | : . ' , ; ` | New stack:
[08:10:10.270] | : . ' , ; ` | List of 1
[08:10:10.270] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.270] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.270] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:10:10.270] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.270] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.270] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.270] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.270] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.272] | : . ' , ; ` | Old stack:
[08:10:10.272] | : . ' , ; ` | List of 1
[08:10:10.272] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.272] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.272] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:10.272] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.272] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.272] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.272] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:10:10.272] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.272] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.272] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.272] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.275] | : . ' , ; ` | Not identical
[08:10:10.275] | : . ' , ; ` | all.equal() for future ...
[08:10:10.276] | : . ' , ; ` | : List of 2
[08:10:10.276] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.276] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.276] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:10:10.276] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.276] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.276] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.276] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.276] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.276] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.276] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.276] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.276] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.276] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.276] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.276] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.276] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.276] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.281] | : . ' , ; ` | all.equal() for future ... done
[08:10:10.281] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:10:10.281] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:10:10.281] | : . ' , ; ` List of future strategies:
[08:10:10.281] | : . ' , ; ` 1. sequential:
[08:10:10.281] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:10.281] | : . ' , ; `    - tweaked: FALSE
[08:10:10.281] | : . ' , ; `    - call: plan(sequential)
[08:10:10.282] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:10.282] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.284] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.284] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.284] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:10.284] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:10:10.284] | : . ' , ; ` | : New stack:
[08:10:10.285] | : . ' , ; ` | : List of 1
[08:10:10.285] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.285] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.285] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.285] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.285] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.285] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.285] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.285] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.285] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.285] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.285] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.289] | : . ' , ; ` | : Old stack:
[08:10:10.290] | : . ' , ; ` | : List of 1
[08:10:10.290] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.290] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.290] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.290] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.290] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.290] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.290] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.290] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.290] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.290] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.290] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.293] | : . ' , ; ` | : Identical
[08:10:10.293] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:10:10.293] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:10:10.293] | : . ' , ; ` | List of future strategies:
[08:10:10.293] | : . ' , ; ` | 1. sequential:
[08:10:10.293] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:10.293] | : . ' , ; ` |    - tweaked: FALSE
[08:10:10.293] | : . ' , ; ` |    - call: plan(sequential)
[08:10:10.294] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:10.294] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.294] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.294] | : . ' , SequentialFuture started (and completed)
[08:10:10.294] | : . ' , signalConditions() ...
[08:10:10.294] | : . ' , ; include = ‘immediateCondition’
[08:10:10.294] | : . ' , ; exclude = 
[08:10:10.295] | : . ' , ; resignal = FALSE
[08:10:10.295] | : . ' , ; Number of conditions: 6
[08:10:10.295] | : . ' , ;  int 6
[08:10:10.295] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.295] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.295] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.296] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.296] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.296] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.296] | : . ' , signalConditions() ... done
[08:10:10.296] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:10:10.296] | : . Launching futures ... done
[08:10:10.296] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:10:10.296] | : Using SequentialFutureBackend ... done
[08:10:10.296] | run() for ‘Future’ (<unnamed-5>) ... done
[08:10:10.297] future(..., label = NULL) ... done
[08:10:10.297] value() for SequentialFuture (<unnamed-5>) ...
[08:10:10.297] | signalConditions() ...
[08:10:10.297] | : include = ‘immediateCondition’
[08:10:10.297] | : exclude = 
[08:10:10.297] | : resignal = FALSE
[08:10:10.297] | : Number of conditions: 6
[08:10:10.297] | :  int 6
[08:10:10.298] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.298] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.298] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.298] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.298] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.298] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.299] | signalConditions() ... done
[08:10:10.299] | relay stdout ...
[08:10:10.299] | relay stdout ... done
[08:10:10.299] | check for misuse ...
[08:10:10.299] | check for misuse ... done
[08:10:10.299] | relay conditions ...
[08:10:10.299] | : Future state: ‘finished’
[08:10:10.299] | : signalConditions() ...
[08:10:10.299] | : . include = ‘condition’
[08:10:10.299] | : . exclude = ‘immediateCondition’
[08:10:10.300] | : . resignal = TRUE
[08:10:10.300] | : . Number of conditions: 6
[08:10:10.300] | : .  int 6
[08:10:10.300] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.300] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.268] | : . ' , attachPackages() ...
[08:10:10.300] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.301] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.268] | : . ' , ; packages: [n=1] ‘future’
[08:10:10.301] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.301] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.268] | : . ' , attachPackages() ... done
[08:10:10.301] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.301] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.268] | : . ' , attachPackages() ...
[08:10:10.301] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.301] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.268] | : . ' , ; packages: [n=1] ‘utils’
[08:10:10.301] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.302] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.268] | : . ' , attachPackages() ... done
[08:10:10.302] | : signalConditions() ... done
[08:10:10.302] | relay conditions ... done
[08:10:10.302] value() for SequentialFuture (<unnamed-5>) ... done
- stdout = structure(TRUE, drop = TRUE)
[08:10:10.302] future(..., label = NULL) ...
[08:10:10.302] | lazy: FALSE
[08:10:10.302] | stdout: TRUE
[08:10:10.302] | conditions: [n=1] ‘condition’
[08:10:10.302] | gc: FALSE
[08:10:10.303] | earlySignal: FALSE
[08:10:10.303] | getGlobalsAndPackages() ...
[08:10:10.303] | : Searching for globals ...
[08:10:10.306] | : . globals found: [1] ‘print’
[08:10:10.306] | : Searching for globals ... done
[08:10:10.306] | : Resolving globals: FALSE
[08:10:10.306] | : Search for packages associated with the globals ...
[08:10:10.306] | : . Packages associated with globals: [1] ‘base’
[08:10:10.306] | : . Packages: [1] ‘base’
[08:10:10.307] | : Search for packages associated with the globals ... done
[08:10:10.307] | : Packages after dropping 'base': [0] 
[08:10:10.307] | : globals: [0] 
[08:10:10.307] | : packages: [0] 
[08:10:10.307] | getGlobalsAndPackages() ... done
[08:10:10.307] | run() for ‘Future’ (<unnamed-6>) ...
[08:10:10.307] | : state: ‘created’
[08:10:10.307] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.308] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.308] | : Using SequentialFutureBackend ...
[08:10:10.308] | : . Number of futures since start: 5 (5 created, 5 launched, 5 finished)
[08:10:10.308] | : . Launching futures ...
[08:10:10.308] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:10:10.308] | : . ' , getFutureData() ...
[08:10:10.308] | : . ' , ; getFutureCore() ...
[08:10:10.308] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:10:10.310] | : . ' , ; getFutureCore() ... done
[08:10:10.310] | : . ' , ; getFutureCapture() ...
[08:10:10.310] | : . ' , ; getFutureCapture() ... done
[08:10:10.310] | : . ' , ; getFutureContext() ...
[08:10:10.310] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.310] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:10:10.310] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.311] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:10:10.311] | : . ' , ; getFutureContext() ... done
[08:10:10.311] | : . ' , getFutureData() ... done
[08:10:10.312] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.312] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:10:10.313] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.313] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.313] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:10.313] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:10:10.313] | : . ' , ; ` | New stack:
[08:10:10.313] | : . ' , ; ` | List of 1
[08:10:10.313] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.313] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.313] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:10:10.313] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.313] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.313] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.313] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.313] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.316] | : . ' , ; ` | Old stack:
[08:10:10.316] | : . ' , ; ` | List of 1
[08:10:10.316] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.316] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.316] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:10.316] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.316] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.316] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.316] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:10:10.316] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.316] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.316] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.316] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.319] | : . ' , ; ` | Not identical
[08:10:10.320] | : . ' , ; ` | all.equal() for future ...
[08:10:10.320] | : . ' , ; ` | : List of 2
[08:10:10.320] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.320] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.320] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:10:10.320] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.320] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.320] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.320] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.320] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.320] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.320] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.320] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.320] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.320] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.320] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.320] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.320] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.320] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.325] | : . ' , ; ` | all.equal() for future ... done
[08:10:10.326] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:10:10.326] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:10:10.326] | : . ' , ; ` List of future strategies:
[08:10:10.326] | : . ' , ; ` 1. sequential:
[08:10:10.326] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:10.326] | : . ' , ; `    - tweaked: FALSE
[08:10:10.326] | : . ' , ; `    - call: plan(sequential)
[08:10:10.326] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:10.326] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.328] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.328] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.329] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:10.329] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:10:10.329] | : . ' , ; ` | : New stack:
[08:10:10.329] | : . ' , ; ` | : List of 1
[08:10:10.329] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.329] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.329] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.329] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.329] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.329] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.329] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.329] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.329] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.329] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.329] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.334] | : . ' , ; ` | : Old stack:
[08:10:10.335] | : . ' , ; ` | : List of 1
[08:10:10.335] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.335] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.335] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.335] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.335] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.335] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.335] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.335] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.335] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.335] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.335] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.338] | : . ' , ; ` | : Identical
[08:10:10.338] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:10:10.338] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:10:10.338] | : . ' , ; ` | List of future strategies:
[08:10:10.338] | : . ' , ; ` | 1. sequential:
[08:10:10.338] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:10.338] | : . ' , ; ` |    - tweaked: FALSE
[08:10:10.338] | : . ' , ; ` |    - call: plan(sequential)
[08:10:10.339] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:10.339] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.339] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.339] | : . ' , SequentialFuture started (and completed)
[08:10:10.339] | : . ' , signalConditions() ...
[08:10:10.339] | : . ' , ; include = ‘immediateCondition’
[08:10:10.340] | : . ' , ; exclude = 
[08:10:10.340] | : . ' , ; resignal = FALSE
[08:10:10.340] | : . ' , ; Number of conditions: 6
[08:10:10.340] | : . ' , ;  int 6
[08:10:10.340] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.340] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.341] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.341] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.341] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.341] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.341] | : . ' , signalConditions() ... done
[08:10:10.341] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:10:10.341] | : . Launching futures ... done
[08:10:10.341] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:10:10.341] | : Using SequentialFutureBackend ... done
[08:10:10.342] | run() for ‘Future’ (<unnamed-6>) ... done
[08:10:10.342] future(..., label = NULL) ... done
[08:10:10.342] value() for SequentialFuture (<unnamed-6>) ...
[08:10:10.342] | signalConditions() ...
[08:10:10.342] | : include = ‘immediateCondition’
[08:10:10.342] | : exclude = 
[08:10:10.342] | : resignal = FALSE
[08:10:10.342] | : Number of conditions: 6
[08:10:10.342] | :  int 6
[08:10:10.343] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.343] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.343] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.343] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.343] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.343] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.344] | signalConditions() ... done
[08:10:10.344] | relay stdout ...
[1] 42
[08:10:10.344] | relay stdout ... done
[08:10:10.344] | check for misuse ...
[08:10:10.344] | check for misuse ... done
[08:10:10.344] | relay conditions ...
[08:10:10.344] | : Future state: ‘finished’
[08:10:10.344] | : signalConditions() ...
[08:10:10.344] | : . include = ‘condition’
[08:10:10.345] | : . exclude = ‘immediateCondition’
[08:10:10.345] | : . resignal = TRUE
[08:10:10.345] | : . Number of conditions: 6
[08:10:10.345] | : .  int 6
[08:10:10.345] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.345] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.311] | : . ' , attachPackages() ...
[08:10:10.346] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.346] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.311] | : . ' , ; packages: [n=1] ‘future’
[08:10:10.346] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.346] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.311] | : . ' , attachPackages() ... done
[08:10:10.346] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.346] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.312] | : . ' , attachPackages() ...
[08:10:10.346] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.346] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.312] | : . ' , ; packages: [n=0] 
[08:10:10.347] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.347] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.312] | : . ' , attachPackages() ... done
[08:10:10.347] | : signalConditions() ... done
[08:10:10.347] | relay conditions ... done
[08:10:10.347] value() for SequentialFuture (<unnamed-6>) ... done
- stdout = NA
[08:10:10.347] future(..., label = NULL) ...
[08:10:10.347] | lazy: FALSE
[08:10:10.347] | stdout: NA
[08:10:10.348] | conditions: [n=1] ‘condition’
[08:10:10.348] | gc: FALSE
[08:10:10.348] | earlySignal: FALSE
[08:10:10.348] | getGlobalsAndPackages() ...
[08:10:10.348] | : Searching for globals ...
[08:10:10.382] | : . globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:10:10.382] | : Searching for globals ... done
[08:10:10.383] | : Resolving globals: FALSE
[08:10:10.383] | : Search for packages associated with the globals ...
[08:10:10.383] | : . Packages associated with globals: [2] ‘base’, ‘utils’
[08:10:10.383] | : . Packages: [2] ‘base’, ‘utils’
[08:10:10.383] | : Search for packages associated with the globals ... done
[08:10:10.384] | : Packages after dropping 'base': [1] ‘utils’
[08:10:10.384] | : Packages after dropping non-attached packages: [1] ‘utils’
[08:10:10.384] | : globals: [0] 
[08:10:10.384] | : packages: [1] ‘utils’
[08:10:10.384] | getGlobalsAndPackages() ... done
[08:10:10.384] | run() for ‘Future’ (<unnamed-7>) ...
[08:10:10.385] | : state: ‘created’
[08:10:10.385] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.385] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.385] | : Using SequentialFutureBackend ...
[08:10:10.385] | : . Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:10:10.385] | : . Launching futures ...
[08:10:10.385] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:10:10.385] | : . ' , getFutureData() ...
[08:10:10.386] | : . ' , ; getFutureCore() ...
[08:10:10.386] | : . ' , ; ` Packages needed by the future expression (n = 1): ‘utils’
[08:10:10.386] | : . ' , ; getFutureCore() ... done
[08:10:10.386] | : . ' , ; getFutureCapture() ...
[08:10:10.386] | : . ' , ; getFutureCapture() ... done
[08:10:10.386] | : . ' , ; getFutureContext() ...
[08:10:10.386] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.386] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:10:10.386] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.387] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:10:10.387] | : . ' , ; getFutureContext() ... done
[08:10:10.387] | : . ' , getFutureData() ... done
[08:10:10.388] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.388] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:10:10.389] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.389] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.389] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:10.389] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:10:10.389] | : . ' , ; ` | New stack:
[08:10:10.389] | : . ' , ; ` | List of 1
[08:10:10.389] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.389] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.389] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:10:10.389] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.389] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.389] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.389] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.389] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.394] | : . ' , ; ` | Old stack:
[08:10:10.394] | : . ' , ; ` | List of 1
[08:10:10.394] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.394] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.394] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:10.394] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.394] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.394] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.394] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:10:10.394] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.394] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.394] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.394] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.398] | : . ' , ; ` | Not identical
[08:10:10.398] | : . ' , ; ` | all.equal() for future ...
[08:10:10.398] | : . ' , ; ` | : List of 2
[08:10:10.398] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.398] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.398] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:10:10.398] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.398] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.398] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.398] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.398] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.398] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.398] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.398] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.398] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.398] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.398] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.398] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.398] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.398] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.404] | : . ' , ; ` | all.equal() for future ... done
[08:10:10.404] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:10:10.404] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:10:10.404] | : . ' , ; ` List of future strategies:
[08:10:10.404] | : . ' , ; ` 1. sequential:
[08:10:10.404] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:10.404] | : . ' , ; `    - tweaked: FALSE
[08:10:10.404] | : . ' , ; `    - call: plan(sequential)
[08:10:10.405] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:10.405] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[08:10:10.407] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.407] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.407] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:10.407] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:10:10.407] | : . ' , ; ` | : New stack:
[08:10:10.407] | : . ' , ; ` | : List of 1
[08:10:10.407] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.407] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.407] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.407] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.407] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.407] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.407] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.407] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.407] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.407] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.407] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.411] | : . ' , ; ` | : Old stack:
[08:10:10.411] | : . ' , ; ` | : List of 1
[08:10:10.411] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.411] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.411] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.411] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.411] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.411] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.411] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.411] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.411] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.411] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.411] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.416] | : . ' , ; ` | : Identical
[08:10:10.417] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:10:10.417] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:10:10.417] | : . ' , ; ` | List of future strategies:
[08:10:10.417] | : . ' , ; ` | 1. sequential:
[08:10:10.417] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:10.417] | : . ' , ; ` |    - tweaked: FALSE
[08:10:10.417] | : . ' , ; ` |    - call: plan(sequential)
[08:10:10.418] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:10.418] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.418] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.418] | : . ' , SequentialFuture started (and completed)
[08:10:10.418] | : . ' , signalConditions() ...
[08:10:10.419] | : . ' , ; include = ‘immediateCondition’
[08:10:10.419] | : . ' , ; exclude = 
[08:10:10.419] | : . ' , ; resignal = FALSE
[08:10:10.419] | : . ' , ; Number of conditions: 6
[08:10:10.419] | : . ' , ;  int 6
[08:10:10.419] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.420] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.420] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.420] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.420] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.420] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.420] | : . ' , signalConditions() ... done
[08:10:10.420] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:10:10.420] | : . Launching futures ... done
[08:10:10.421] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:10:10.421] | : Using SequentialFutureBackend ... done
[08:10:10.421] | run() for ‘Future’ (<unnamed-7>) ... done
[08:10:10.421] future(..., label = NULL) ... done
List of 16
 $ value              : int 42
 $ visible            : logi TRUE
 $ stdout             : NULL
 $ conditions         :List of 6
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.387] | : . ' , attachPackages() ...\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.387] | : . ' , ; packages: [n=1] ‘future’\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg), appendLF = appendLF)
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.387] | : . ' , attachPackages() ... done\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.387] | : . ' , attachPackages() ...\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.388] | : . ' , ; packages: [n=1] ‘utils’\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg), appendLF = appendLF)
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.388] | : . ' , attachPackages() ... done\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
 $ rng                : logi FALSE
 $ seed               : NULL
 $ misuseGlobalEnv    : NULL
 $ misuseConnections  : NULL
 $ misuseDevices      : NULL
 $ misuseDefaultDevice: list()
 $ started            : POSIXct[1:1], format: "2025-06-17 08:10:10"
 $ finished           : POSIXct[1:1], format: "2025-06-17 08:10:10"
 $ uuid               : chr [1:2] "01885b60b3d40eac4dc41a106424dbc9" "7"
 $ session_uuid       : chr "01885b60b3d40eac4dc41a106424dbc9"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "28bb34de9501"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 75586
  .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:10:09"
  .. ..$ random: int 2147483647
 $ r_info             :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 5 1
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version            : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[08:10:10.444] value() for SequentialFuture (<unnamed-7>) ...
[08:10:10.444] | signalConditions() ...
[08:10:10.444] | : include = ‘immediateCondition’
[08:10:10.444] | : exclude = 
[08:10:10.445] | : resignal = FALSE
[08:10:10.445] | : Number of conditions: 6
[08:10:10.445] | :  int 6
[08:10:10.445] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.445] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.445] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.445] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.446] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.446] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.446] | signalConditions() ... done
[08:10:10.446] | relay stdout ...
[08:10:10.446] | relay stdout ... done
[08:10:10.446] | check for misuse ...
[08:10:10.446] | check for misuse ... done
[08:10:10.446] | relay conditions ...
[08:10:10.446] | : Future state: ‘finished’
[08:10:10.447] | : signalConditions() ...
[08:10:10.447] | : . include = ‘condition’
[08:10:10.447] | : . exclude = ‘immediateCondition’
[08:10:10.447] | : . resignal = TRUE
[08:10:10.447] | : . Number of conditions: 6
[08:10:10.447] | : .  int 6
[08:10:10.448] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.448] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.387] | : . ' , attachPackages() ...
[08:10:10.448] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.448] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.387] | : . ' , ; packages: [n=1] ‘future’
[08:10:10.448] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.448] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.387] | : . ' , attachPackages() ... done
[08:10:10.448] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.448] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.387] | : . ' , attachPackages() ...
[08:10:10.449] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.449] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.388] | : . ' , ; packages: [n=1] ‘utils’
[08:10:10.449] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.449] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.388] | : . ' , attachPackages() ... done
[08:10:10.449] | : signalConditions() ... done
[08:10:10.449] | relay conditions ... done
[08:10:10.449] value() for SequentialFuture (<unnamed-7>) ... done
[08:10:10.450] future(..., label = NULL) ...
[08:10:10.450] | lazy: FALSE
[08:10:10.450] | stdout: NA
[08:10:10.450] | conditions: [n=1] ‘condition’
[08:10:10.450] | gc: FALSE
[08:10:10.450] | earlySignal: FALSE
[08:10:10.450] | getGlobalsAndPackages() ...
[08:10:10.450] | : Searching for globals ...
[08:10:10.482] | : . globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:10:10.483] | : Searching for globals ... done
[08:10:10.483] | : Resolving globals: FALSE
[08:10:10.483] | : Search for packages associated with the globals ...
[08:10:10.483] | : . Packages associated with globals: [2] ‘base’, ‘utils’
[08:10:10.483] | : . Packages: [2] ‘base’, ‘utils’
[08:10:10.483] | : Search for packages associated with the globals ... done
[08:10:10.484] | : Packages after dropping 'base': [1] ‘utils’
[08:10:10.484] | : Packages after dropping non-attached packages: [1] ‘utils’
[08:10:10.484] | : globals: [0] 
[08:10:10.484] | : packages: [1] ‘utils’
[08:10:10.484] | getGlobalsAndPackages() ... done
[08:10:10.484] | run() for ‘Future’ (<unnamed-8>) ...
[08:10:10.484] | : state: ‘created’
[08:10:10.485] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.485] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.485] | : Using SequentialFutureBackend ...
[08:10:10.485] | : . Number of futures since start: 7 (7 created, 7 launched, 7 finished)
[08:10:10.485] | : . Launching futures ...
[08:10:10.485] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:10:10.485] | : . ' , getFutureData() ...
[08:10:10.485] | : . ' , ; getFutureCore() ...
[08:10:10.486] | : . ' , ; ` Packages needed by the future expression (n = 1): ‘utils’
[08:10:10.486] | : . ' , ; getFutureCore() ... done
[08:10:10.486] | : . ' , ; getFutureCapture() ...
[08:10:10.486] | : . ' , ; getFutureCapture() ... done
[08:10:10.486] | : . ' , ; getFutureContext() ...
[08:10:10.486] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.486] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:10:10.486] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.486] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:10:10.486] | : . ' , ; getFutureContext() ... done
[08:10:10.487] | : . ' , getFutureData() ... done
[08:10:10.488] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.488] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:10:10.488] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.488] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.489] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:10.489] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:10:10.489] | : . ' , ; ` | New stack:
[08:10:10.489] | : . ' , ; ` | List of 1
[08:10:10.489] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.489] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.489] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:10:10.489] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.489] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.489] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.489] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.489] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.491] | : . ' , ; ` | Old stack:
[08:10:10.492] | : . ' , ; ` | List of 1
[08:10:10.492] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.492] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.492] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:10.492] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.492] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.492] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.492] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:10:10.492] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.492] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.492] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.492] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.496] | : . ' , ; ` | Not identical
[08:10:10.496] | : . ' , ; ` | all.equal() for future ...
[08:10:10.496] | : . ' , ; ` | : List of 2
[08:10:10.496] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.496] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.496] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:10:10.496] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.496] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.496] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.496] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.496] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.496] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.496] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.496] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.496] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.496] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.496] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.496] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.496] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.496] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.501] | : . ' , ; ` | all.equal() for future ... done
[08:10:10.501] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:10:10.501] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:10:10.501] | : . ' , ; ` List of future strategies:
[08:10:10.501] | : . ' , ; ` 1. sequential:
[08:10:10.501] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:10.501] | : . ' , ; `    - tweaked: FALSE
[08:10:10.501] | : . ' , ; `    - call: plan(sequential)
[08:10:10.502] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:10.502] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[08:10:10.504] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.504] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.504] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:10.504] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:10:10.504] | : . ' , ; ` | : New stack:
[08:10:10.504] | : . ' , ; ` | : List of 1
[08:10:10.504] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.504] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.504] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.504] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.504] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.504] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.504] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.504] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.504] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.504] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.504] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.507] | : . ' , ; ` | : Old stack:
[08:10:10.507] | : . ' , ; ` | : List of 1
[08:10:10.507] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.507] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.507] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.507] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.507] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.507] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.507] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.507] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.507] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.507] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.507] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.511] | : . ' , ; ` | : Identical
[08:10:10.511] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:10:10.511] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:10:10.511] | : . ' , ; ` | List of future strategies:
[08:10:10.511] | : . ' , ; ` | 1. sequential:
[08:10:10.511] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:10.511] | : . ' , ; ` |    - tweaked: FALSE
[08:10:10.511] | : . ' , ; ` |    - call: plan(sequential)
[08:10:10.512] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:10.512] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.512] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.513] | : . ' , SequentialFuture started (and completed)
[08:10:10.513] | : . ' , signalConditions() ...
[08:10:10.513] | : . ' , ; include = ‘immediateCondition’
[08:10:10.513] | : . ' , ; exclude = 
[08:10:10.513] | : . ' , ; resignal = FALSE
[08:10:10.513] | : . ' , ; Number of conditions: 6
[08:10:10.513] | : . ' , ;  int 6
[08:10:10.514] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.514] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.514] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.514] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.514] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.514] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.514] | : . ' , signalConditions() ... done
[08:10:10.514] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:10:10.514] | : . Launching futures ... done
[08:10:10.515] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:10:10.515] | : Using SequentialFutureBackend ... done
[08:10:10.515] | run() for ‘Future’ (<unnamed-8>) ... done
[08:10:10.515] future(..., label = NULL) ... done
[08:10:10.515] value() for SequentialFuture (<unnamed-8>) ...
[08:10:10.515] | signalConditions() ...
[08:10:10.515] | : include = ‘immediateCondition’
[08:10:10.515] | : exclude = 
[08:10:10.515] | : resignal = FALSE
[08:10:10.516] | : Number of conditions: 6
[08:10:10.516] | :  int 6
[08:10:10.516] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.516] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.516] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.516] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.516] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.517] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.517] | signalConditions() ... done
[08:10:10.517] | relay stdout ...
[08:10:10.517] | relay stdout ... done
[08:10:10.517] | check for misuse ...
[08:10:10.517] | check for misuse ... done
[08:10:10.517] | relay conditions ...
[08:10:10.517] | : Future state: ‘finished’
[08:10:10.517] | : signalConditions() ...
[08:10:10.517] | : . include = ‘condition’
[08:10:10.517] | : . exclude = ‘immediateCondition’
[08:10:10.518] | : . resignal = TRUE
[08:10:10.518] | : . Number of conditions: 6
[08:10:10.518] | : .  int 6
[08:10:10.518] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.518] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.487] | : . ' , attachPackages() ...
[08:10:10.518] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.519] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.487] | : . ' , ; packages: [n=1] ‘future’
[08:10:10.519] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.519] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.487] | : . ' , attachPackages() ... done
[08:10:10.519] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.519] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.487] | : . ' , attachPackages() ...
[08:10:10.519] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.519] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.487] | : . ' , ; packages: [n=1] ‘utils’
[08:10:10.519] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.519] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.487] | : . ' , attachPackages() ... done
[08:10:10.520] | : signalConditions() ... done
[08:10:10.520] | relay conditions ... done
[08:10:10.520] value() for SequentialFuture (<unnamed-8>) ... done
- stdout = structure(TRUE, drop = TRUE)
[08:10:10.520] future(..., label = NULL) ...
[08:10:10.520] | lazy: FALSE
[08:10:10.520] | stdout: TRUE
[08:10:10.520] | conditions: [n=1] ‘condition’
[08:10:10.520] | gc: FALSE
[08:10:10.520] | earlySignal: FALSE
[08:10:10.520] | getGlobalsAndPackages() ...
[08:10:10.521] | : Searching for globals ...
[08:10:10.523] | : . globals found: [1] ‘print’
[08:10:10.523] | : Searching for globals ... done
[08:10:10.523] | : Resolving globals: FALSE
[08:10:10.524] | : Search for packages associated with the globals ...
[08:10:10.524] | : . Packages associated with globals: [1] ‘base’
[08:10:10.524] | : . Packages: [1] ‘base’
[08:10:10.524] | : Search for packages associated with the globals ... done
[08:10:10.524] | : Packages after dropping 'base': [0] 
[08:10:10.524] | : globals: [0] 
[08:10:10.524] | : packages: [0] 
[08:10:10.524] | getGlobalsAndPackages() ... done
[08:10:10.525] | run() for ‘Future’ (<unnamed-9>) ...
[08:10:10.525] | : state: ‘created’
[08:10:10.525] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.525] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.525] | : Using SequentialFutureBackend ...
[08:10:10.525] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:10:10.525] | : . Launching futures ...
[08:10:10.525] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:10:10.525] | : . ' , getFutureData() ...
[08:10:10.526] | : . ' , ; getFutureCore() ...
[08:10:10.526] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:10:10.526] | : . ' , ; getFutureCore() ... done
[08:10:10.526] | : . ' , ; getFutureCapture() ...
[08:10:10.526] | : . ' , ; getFutureCapture() ... done
[08:10:10.526] | : . ' , ; getFutureContext() ...
[08:10:10.526] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.526] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:10:10.526] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.526] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:10:10.527] | : . ' , ; getFutureContext() ... done
[08:10:10.527] | : . ' , getFutureData() ... done
[08:10:10.528] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.528] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:10:10.528] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.528] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.528] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:10.529] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:10:10.529] | : . ' , ; ` | New stack:
[08:10:10.529] | : . ' , ; ` | List of 1
[08:10:10.529] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.529] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.529] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:10:10.529] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.529] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.529] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.529] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.529] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.532] | : . ' , ; ` | Old stack:
[08:10:10.532] | : . ' , ; ` | List of 1
[08:10:10.532] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.532] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.532] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:10.532] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.532] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.532] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.532] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:10:10.532] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.532] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.532] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.532] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.535] | : . ' , ; ` | Not identical
[08:10:10.535] | : . ' , ; ` | all.equal() for future ...
[08:10:10.535] | : . ' , ; ` | : List of 2
[08:10:10.535] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.535] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.535] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:10:10.535] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.535] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.535] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.535] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.535] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.535] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.535] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.535] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.535] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.535] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.535] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.535] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.535] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.535] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.540] | : . ' , ; ` | all.equal() for future ... done
[08:10:10.540] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:10:10.541] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:10:10.541] | : . ' , ; ` List of future strategies:
[08:10:10.541] | : . ' , ; ` 1. sequential:
[08:10:10.541] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:10.541] | : . ' , ; `    - tweaked: FALSE
[08:10:10.541] | : . ' , ; `    - call: plan(sequential)
[08:10:10.541] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:10.541] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.543] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.543] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.543] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:10.543] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:10:10.543] | : . ' , ; ` | : New stack:
[08:10:10.543] | : . ' , ; ` | : List of 1
[08:10:10.543] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.543] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.543] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.543] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.543] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.543] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.543] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.543] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.543] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.543] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.543] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.546] | : . ' , ; ` | : Old stack:
[08:10:10.546] | : . ' , ; ` | : List of 1
[08:10:10.546] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.546] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.546] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.546] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.546] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.546] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.546] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:10:10.546] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.546] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.546] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.546] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.550] | : . ' , ; ` | : Identical
[08:10:10.551] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:10:10.551] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:10:10.551] | : . ' , ; ` | List of future strategies:
[08:10:10.551] | : . ' , ; ` | 1. sequential:
[08:10:10.551] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:10.551] | : . ' , ; ` |    - tweaked: FALSE
[08:10:10.551] | : . ' , ; ` |    - call: plan(sequential)
[08:10:10.551] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:10.551] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.551] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.552] | : . ' , SequentialFuture started (and completed)
[08:10:10.552] | : . ' , signalConditions() ...
[08:10:10.552] | : . ' , ; include = ‘immediateCondition’
[08:10:10.552] | : . ' , ; exclude = 
[08:10:10.552] | : . ' , ; resignal = FALSE
[08:10:10.552] | : . ' , ; Number of conditions: 6
[08:10:10.552] | : . ' , ;  int 6
[08:10:10.553] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.553] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.553] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.553] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.553] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.553] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.553] | : . ' , signalConditions() ... done
[08:10:10.553] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:10:10.554] | : . Launching futures ... done
[08:10:10.554] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:10:10.554] | : Using SequentialFutureBackend ... done
[08:10:10.554] | run() for ‘Future’ (<unnamed-9>) ... done
[08:10:10.554] future(..., label = NULL) ... done
[08:10:10.554] value() for SequentialFuture (<unnamed-9>) ...
[08:10:10.554] | signalConditions() ...
[08:10:10.554] | : include = ‘immediateCondition’
[08:10:10.554] | : exclude = 
[08:10:10.555] | : resignal = FALSE
[08:10:10.555] | : Number of conditions: 6
[08:10:10.555] | :  int 6
[08:10:10.555] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.555] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.555] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.555] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.556] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.556] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.556] | signalConditions() ... done
[08:10:10.556] | relay stdout ...
[1] 42
[08:10:10.556] | relay stdout ... done
[08:10:10.556] | check for misuse ...
[08:10:10.556] | check for misuse ... done
[08:10:10.556] | relay conditions ...
[08:10:10.556] | : Future state: ‘finished’
[08:10:10.556] | : signalConditions() ...
[08:10:10.557] | : . include = ‘condition’
[08:10:10.557] | : . exclude = ‘immediateCondition’
[08:10:10.557] | : . resignal = TRUE
[08:10:10.557] | : . Number of conditions: 6
[08:10:10.557] | : .  int 6
[08:10:10.557] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.557] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.527] | : . ' , attachPackages() ...
[08:10:10.558] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.558] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.527] | : . ' , ; packages: [n=1] ‘future’
[08:10:10.558] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.558] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.527] | : . ' , attachPackages() ... done
[08:10:10.558] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.558] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.527] | : . ' , attachPackages() ...
[08:10:10.558] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.558] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.527] | : . ' , ; packages: [n=0] 
[08:10:10.558] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.559] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.528] | : . ' , attachPackages() ... done
[08:10:10.559] | : signalConditions() ... done
[08:10:10.559] | relay conditions ... done
[08:10:10.559] value() for SequentialFuture (<unnamed-9>) ... done
sequential ... done
Testing with 1 cores ... done
Testing with 2 cores ...
multicore ...
[08:10:10.559] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.560] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:10:10.560] | : all.equal() for FutureStrategyList ...
[08:10:10.560] | : . New stack:
[08:10:10.560] | : . List of 1
[08:10:10.560] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:10.560] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:10:10.560] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:10.560] | : .   ..- attr(*, "init")= logi TRUE
[08:10:10.560] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.560] | : .     ...)  
[08:10:10.560] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.560] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.560] | : .   ..- attr(*, "call")= language plan(strategy)
[08:10:10.560] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.562] | : . Old stack:
[08:10:10.562] | : . List of 1
[08:10:10.562] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.562] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.562] | : .   ..- attr(*, "init")= chr "done"
[08:10:10.562] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.562] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.562] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.562] | : .   ..- attr(*, "call")= language plan(sequential)
[08:10:10.562] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.562] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.562] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.562] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.565] | : . Not identical
[08:10:10.566] | : . all.equal() for future ...
[08:10:10.566] | : . ' List of 2
[08:10:10.566] | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:10.566] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:10:10.566] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:10.566] | : . '   ..- attr(*, "init")= logi TRUE
[08:10:10.566] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.566] | : . '     ...)  
[08:10:10.566] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.566] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.566] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:10:10.566] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.566] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.566] | : . '   ..- attr(*, "init")= chr "done"
[08:10:10.566] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.566] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.566] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.566] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:10:10.566] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249bc4b0> 
[08:10:10.566] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.566] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.571] | : . ' Formals differ
[08:10:10.572] | : . all.equal() for future ... done
[08:10:10.572] | : . Future strategies differ at level 1
[08:10:10.572] | : all.equal() for FutureStrategyList ... done
[08:10:10.572] | : plan(): Setting new future backend stack:
[08:10:10.572] | : List of future strategies:
[08:10:10.572] | : 1. multicore:
[08:10:10.572] | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:10:10.572] | :    - tweaked: FALSE
[08:10:10.572] | :    - call: plan(strategy)
[08:10:10.572] | : List of 1
[08:10:10.572] | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:10.572] | :     earlySignal = FALSE, envir = parent.frame())  
[08:10:10.572] | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:10.572] | :   ..- attr(*, "init")= logi TRUE
[08:10:10.572] | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.572] | :     ...)  
[08:10:10.572] | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.572] | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.572] | :   ..- attr(*, "call")= language plan(strategy)
[08:10:10.572] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.575] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:10:10.575] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.575] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:10:10.575] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.575] | : . Legacy shutdown of cluster workers ...
[08:10:10.576] | : . ' Stopping existing cluster ...
[08:10:10.576] | : . ' , No pre-existing cluster. Skipping
[08:10:10.576] | : . ' Stopping existing cluster ... done
[08:10:10.576] | : . Legacy shutdown of cluster workers ... done
[08:10:10.576] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:10:10.576] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:10:10.576] | : . function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:10.576] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:10:10.576] | : .  - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:10.576] | : .  - attr(*, "init")= logi TRUE
[08:10:10.576] | : .  - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.576] | : .     ...)  
[08:10:10.576] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.576] | : .  - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.576] | : .  - attr(*, "call")= language plan(strategy)
[08:10:10.578] | : . init: TRUE
[08:10:10.578] | : . makeFutureBackend(<multicore>) ...
[08:10:10.578] | : . ' Backend function: <‘NULL’>
[08:10:10.579] | : . ' Evaluator tweak arguments: [n=0]
[08:10:10.579] | : . '  list()
[08:10:10.579] | : . ' Evaluator formal arguments: [n=3]
[08:10:10.579] | : . '  list()
[08:10:10.579] | : . ' Backend factory arguments: [n=3]
[08:10:10.579] | : . ' Dotted pair list of 3
[08:10:10.579] | : . '  $ workers    : language availableCores(constraints = "multicore")
[08:10:10.579] | : . '  $ gc         : logi FALSE
[08:10:10.579] | : . '  $ earlySignal: logi FALSE
[08:10:10.582] | : . ' Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:10:10.582] | : . makeFutureBackend(<multicore>) ... done
[08:10:10.582] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:10:10.583] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.583] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.583] | : plan(): nbrOfWorkers() = 2
[08:10:10.583] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:10:10.583] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
- stdout = TRUE
[08:10:10.583] future(..., label = NULL) ...
[08:10:10.583] | lazy: FALSE
[08:10:10.583] | stdout: TRUE
[08:10:10.583] | conditions: [n=1] ‘condition’
[08:10:10.584] | gc: FALSE
[08:10:10.584] | earlySignal: FALSE
[08:10:10.584] | getGlobalsAndPackages() ...
[08:10:10.584] | : Searching for globals ...
[08:10:10.613] | : . globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:10:10.613] | : Searching for globals ... done
[08:10:10.613] | : Resolving globals: FALSE
[08:10:10.614] | : Search for packages associated with the globals ...
[08:10:10.614] | : . Packages associated with globals: [2] ‘base’, ‘utils’
[08:10:10.614] | : . Packages: [2] ‘base’, ‘utils’
[08:10:10.614] | : Search for packages associated with the globals ... done
[08:10:10.614] | : Packages after dropping 'base': [1] ‘utils’
[08:10:10.615] | : Packages after dropping non-attached packages: [1] ‘utils’
[08:10:10.615] | : globals: [0] 
[08:10:10.615] | : packages: [1] ‘utils’
[08:10:10.615] | getGlobalsAndPackages() ... done
[08:10:10.615] | run() for ‘Future’ (<unnamed-10>) ...
[08:10:10.615] | : state: ‘created’
[08:10:10.615] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.615] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.616] | : Using MulticoreFutureBackend ...
[08:10:10.616] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:10:10.616] | : . Launching futures ...
[08:10:10.616] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:10:10.616] | : . ' , getFutureData() ...
[08:10:10.616] | : . ' , ; getFutureCore() ...
[08:10:10.616] | : . ' , ; ` Packages needed by the future expression (n = 1): ‘utils’
[08:10:10.616] | : . ' , ; getFutureCore() ... done
[08:10:10.617] | : . ' , ; getFutureCapture() ...
[08:10:10.617] | : . ' , ; getFutureCapture() ... done
[08:10:10.617] | : . ' , ; getFutureContext() ...
[08:10:10.617] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.617] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:10:10.617] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.617] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:10:10.617] | : . ' , ; getFutureContext() ... done
[08:10:10.618] | : . ' , getFutureData() ... done
[08:10:10.618] | : . ' , requestCore(..., workers = 2) ...
[08:10:10.618] | : . ' , requestCore(..., workers = 2) ... done
[08:10:10.621] | : . ' , MulticoreFuture started
[08:10:10.622] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:10:10.622] | : . Launching futures ... done
[08:10:10.622] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:10:10.623] | : Using MulticoreFutureBackend ... done
[08:10:10.623] | run() for ‘Future’ (<unnamed-10>) ... done
[08:10:10.623] future(..., label = NULL) ... done
[08:10:10.625] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.625] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:10:10.625] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.626] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.626] result() for MulticoreFuture ...
[08:10:10.626] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:10.626] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:10:10.626] | : . ' , ; ` | New stack:
[08:10:10.627] | : . ' , ; ` | List of 1
[08:10:10.627] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.627] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.627] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:10:10.627] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.627] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.627] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.627] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.627] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.632] | : . ' , ; ` | Old stack:
[08:10:10.632] | : . ' , ; ` | List of 1
[08:10:10.632] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:10.632] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:10:10.632] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:10.632] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:10.632] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.632] | : . ' , ; ` |     ...)  
[08:10:10.632] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.632] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.632] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:10:10.632] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:10.632] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.632] | : . ' , ; ` |     ...)  
[08:10:10.632] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.632] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.637] | : . ' , ; ` | Not identical
[08:10:10.637] | : . ' , ; ` | all.equal() for future ...
[08:10:10.638] | : . ' , ; ` | : List of 2
[08:10:10.638] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.638] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.638] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:10:10.638] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.638] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.638] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.638] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.638] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:10.638] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:10:10.638] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:10.638] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.638] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.638] | : . ' , ; ` | :     ...)  
[08:10:10.638] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.638] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.638] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:10:10.638] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:10.638] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.638] | : . ' , ; ` | :     ...)  
[08:10:10.638] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.650] | : . ' , ; ` | : Formals differ
[08:10:10.650] | : . ' , ; ` | all.equal() for future ... done
[08:10:10.650] | : . ' , ; ` | Future strategies differ at level 1
[08:10:10.650] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:10:10.650] | : . ' , ; ` plan(): Setting new future backend stack:
[08:10:10.650] | : . ' , ; ` List of future strategies:
[08:10:10.650] | : . ' , ; ` 1. sequential:
[08:10:10.650] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:10.650] | : . ' , ; `    - tweaked: FALSE
[08:10:10.650] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.651] | : . ' , ; ` List of 1
[08:10:10.651] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.651] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.651] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:10:10.651] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.651] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.651] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.651] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.651] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.655] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:10:10.655] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:10:10.655] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.655] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:10:10.655] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.655] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.655] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:10:10.655] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.655] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.655] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.655] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.658] | : . ' , ; ` | : init: TRUE
[08:10:10.659] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:10:10.659] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:10:10.659] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:10:10.659] | : . ' , ; ` | : .  list()
[08:10:10.659] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:10:10.659] | : . ' , ; ` | : .  list()
[08:10:10.660] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:10:10.660] | : . ' , ; ` | : . Dotted pair list of 2
[08:10:10.660] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:10:10.660] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:10:10.661] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:10:10.661] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:10:10.661] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:10:10.661] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.661] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:10:10.661] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:10.662] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.664] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.665] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.665] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:10.665] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:10:10.665] | : . ' , ; ` | : New stack:
[08:10:10.665] | : . ' , ; ` | : List of 1
[08:10:10.665] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:10.665] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:10:10.665] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:10.665] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.665] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.665] | : . ' , ; ` | :     ...)  
[08:10:10.665] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.665] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.665] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:10:10.665] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:10.665] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.665] | : . ' , ; ` | :     ...)  
[08:10:10.665] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.665] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.668] | : . ' , ; ` | : Old stack:
[08:10:10.668] | : . ' , ; ` | : List of 1
[08:10:10.668] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.668] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.668] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.668] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.668] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.668] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.668] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.668] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d322338c78> 
[08:10:10.668] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.668] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.668] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.671] | : . ' , ; ` | : Not identical
[08:10:10.672] | : . ' , ; ` | : all.equal() for future ...
[08:10:10.672] | : . ' , ; ` | : . List of 2
[08:10:10.672] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:10.672] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:10:10.672] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:10.672] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:10:10.672] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.672] | : . ' , ; ` | : .     ...)  
[08:10:10.672] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.672] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.672] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:10:10.672] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:10.672] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.672] | : . ' , ; ` | : .     ...)  
[08:10:10.672] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.672] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.672] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.672] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:10:10.672] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.672] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.672] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.672] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.672] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d322338c78> 
[08:10:10.672] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.672] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.678] | : . ' , ; ` | : . Formals differ
[08:10:10.678] | : . ' , ; ` | : all.equal() for future ... done
[08:10:10.679] | : . ' , ; ` | : Future strategies differ at level 1
[08:10:10.679] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:10:10.679] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:10:10.679] | : . ' , ; ` | List of future strategies:
[08:10:10.679] | : . ' , ; ` | 1. multicore:
[08:10:10.679] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:10:10.679] | : . ' , ; ` |    - tweaked: FALSE
[08:10:10.679] | : . ' , ; ` |    - call: plan(strategy)
[08:10:10.679] | : . ' , ; ` | List of 1
[08:10:10.679] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:10.679] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:10:10.679] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:10.679] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:10.679] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.679] | : . ' , ; ` |     ...)  
[08:10:10.679] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.679] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.679] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:10:10.679] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:10.679] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.679] | : . ' , ; ` |     ...)  
[08:10:10.679] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.679] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.682] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:10:10.682] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:10:10.683] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.683] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.683] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:10:10.683] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:10.683] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.683] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.684] | readImmediateCondition() ...
[08:10:10.685] | : Path: ‘/tmp/RtmphDP82n/.future/immediateConditions’
[08:10:10.685] | : Number of RDS files: 0
[08:10:10.685] | : Returned conditions set:
[08:10:10.685] | :  list()
[08:10:10.686] | readImmediateCondition() ... done
[08:10:10.686] | result() for MulticoreFuture ...
[08:10:10.686] | result() for MulticoreFuture ... done
[08:10:10.686] | signalConditions() ...
[08:10:10.686] | : include = ‘immediateCondition’
[08:10:10.687] | : exclude = 
[08:10:10.687] | : resignal = FALSE
[08:10:10.687] | : Number of conditions: 6
[08:10:10.687] | :  int 6
[08:10:10.688] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.688] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.688] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.688] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.688] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.688] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.688] | signalConditions() ... done
[08:10:10.689] result() for MulticoreFuture ... done
List of 16
 $ value              : int 42
 $ visible            : logi TRUE
 $ stdout             : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions         :List of 6
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.622] | : . ' , attachPackages() ...\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.622] | : . ' , ; packages: [n=1] ‘future’\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg), appendLF = appendLF)
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.623] | : . ' , attachPackages() ... done\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.623] | : . ' , attachPackages() ...\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.623] | : . ' , ; packages: [n=1] ‘utils’\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg), appendLF = appendLF)
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.624] | : . ' , attachPackages() ... done\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
 $ rng                : logi FALSE
 $ seed               : NULL
 $ misuseGlobalEnv    : NULL
 $ misuseConnections  :List of 3
  ..$ added   : NULL
  ..$ removed : NULL
  ..$ replaced: NULL
 $ misuseDevices      : NULL
 $ misuseDefaultDevice: list()
 $ started            : POSIXct[1:1], format: "2025-06-17 08:10:10"
 $ finished           : POSIXct[1:1], format: "2025-06-17 08:10:10"
 $ uuid               : chr [1:2] "01885b60b3d40eac4dc41a106424dbc9" "10"
 $ session_uuid       : chr "87a02e5c5c4797d024e1a079d00b159b"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "28bb34de9501"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 75608
  .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:10:10"
  .. ..$ random: int 2147483647
 $ r_info             :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 5 1
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version            : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[08:10:10.716] value() for MulticoreFuture (<unnamed-10>) ...
[08:10:10.716] | result() for MulticoreFuture ...
[08:10:10.716] | result() for MulticoreFuture ... done
[08:10:10.716] | result() for MulticoreFuture ...
[08:10:10.716] | result() for MulticoreFuture ... done
[08:10:10.716] | signalConditions() ...
[08:10:10.716] | : include = ‘immediateCondition’
[08:10:10.717] | : exclude = 
[08:10:10.717] | : resignal = FALSE
[08:10:10.717] | : Number of conditions: 6
[08:10:10.717] | :  int 6
[08:10:10.717] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.717] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.717] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.718] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.718] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.718] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.718] | signalConditions() ... done
[08:10:10.718] | relay stdout ...
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[08:10:10.718] | relay stdout ... done
[08:10:10.718] | check for misuse ...
[08:10:10.718] | check for misuse ... done
[08:10:10.718] | relay conditions ...
[08:10:10.719] | : Future state: ‘finished’
[08:10:10.719] | : result() for MulticoreFuture ...
[08:10:10.719] | : result() for MulticoreFuture ... done
[08:10:10.719] | : signalConditions() ...
[08:10:10.719] | : . include = ‘condition’
[08:10:10.719] | : . exclude = ‘immediateCondition’
[08:10:10.719] | : . resignal = TRUE
[08:10:10.719] | : . Number of conditions: 6
[08:10:10.719] | : .  int 6
[08:10:10.720] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.720] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.622] | : . ' , attachPackages() ...
[08:10:10.720] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.720] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.622] | : . ' , ; packages: [n=1] ‘future’
[08:10:10.720] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.720] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.623] | : . ' , attachPackages() ... done
[08:10:10.720] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.721] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.623] | : . ' , attachPackages() ...
[08:10:10.721] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.721] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.623] | : . ' , ; packages: [n=1] ‘utils’
[08:10:10.721] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.721] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.624] | : . ' , attachPackages() ... done
[08:10:10.721] | : signalConditions() ... done
[08:10:10.721] | relay conditions ... done
[08:10:10.721] value() for MulticoreFuture (<unnamed-10>) ... done
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 6] simpleMessage, simpleMessage, simpleMessage, simpleMessage, simpleMessage, simpleMessage
RNG used: FALSE
duration: 0.0424521 secs (started 2025-06-17 08:10:10.621889)
version: 1.8
[08:10:10.722] future(..., label = NULL) ...
[08:10:10.722] | lazy: FALSE
[08:10:10.722] | stdout: TRUE
[08:10:10.722] | conditions: [n=1] ‘condition’
[08:10:10.722] | gc: FALSE
[08:10:10.722] | earlySignal: FALSE
[08:10:10.723] | getGlobalsAndPackages() ...
[08:10:10.723] | : Searching for globals ...
[08:10:10.752] | : . globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:10:10.752] | : Searching for globals ... done
[08:10:10.753] | : Resolving globals: FALSE
[08:10:10.753] | : Search for packages associated with the globals ...
[08:10:10.753] | : . Packages associated with globals: [2] ‘base’, ‘utils’
[08:10:10.753] | : . Packages: [2] ‘base’, ‘utils’
[08:10:10.753] | : Search for packages associated with the globals ... done
[08:10:10.754] | : Packages after dropping 'base': [1] ‘utils’
[08:10:10.754] | : Packages after dropping non-attached packages: [1] ‘utils’
[08:10:10.754] | : globals: [0] 
[08:10:10.754] | : packages: [1] ‘utils’
[08:10:10.754] | getGlobalsAndPackages() ... done
[08:10:10.754] | run() for ‘Future’ (<unnamed-11>) ...
[08:10:10.754] | : state: ‘created’
[08:10:10.755] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.755] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.755] | : Using MulticoreFutureBackend ...
[08:10:10.755] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:10:10.755] | : . Launching futures ...
[08:10:10.755] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:10:10.755] | : . ' , getFutureData() ...
[08:10:10.755] | : . ' , ; getFutureCore() ...
[08:10:10.755] | : . ' , ; ` Packages needed by the future expression (n = 1): ‘utils’
[08:10:10.756] | : . ' , ; getFutureCore() ... done
[08:10:10.756] | : . ' , ; getFutureCapture() ...
[08:10:10.756] | : . ' , ; getFutureCapture() ... done
[08:10:10.756] | : . ' , ; getFutureContext() ...
[08:10:10.756] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.756] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:10:10.756] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.756] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:10:10.756] | : . ' , ; getFutureContext() ... done
[08:10:10.757] | : . ' , getFutureData() ... done
[08:10:10.757] | : . ' , requestCore(..., workers = 2) ...
[08:10:10.757] | : . ' , requestCore(..., workers = 2) ... done
[08:10:10.759] | : . ' , MulticoreFuture started
[08:10:10.760] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:10:10.760] | : . Launching futures ... done
[08:10:10.761] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:10:10.761] | : Using MulticoreFutureBackend ... done
[08:10:10.762] | run() for ‘Future’ (<unnamed-11>) ... done
[08:10:10.762] future(..., label = NULL) ... done
[08:10:10.763] value() for MulticoreFuture (<unnamed-11>) ...
[08:10:10.763] | result() for MulticoreFuture ...
[08:10:10.763] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.764] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:10:10.764] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.764] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.765] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:10.765] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:10:10.765] | : . ' , ; ` | New stack:
[08:10:10.765] | : . ' , ; ` | List of 1
[08:10:10.765] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.765] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.765] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:10:10.765] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.765] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.765] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.765] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.765] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.771] | : . ' , ; ` | Old stack:
[08:10:10.771] | : . ' , ; ` | List of 1
[08:10:10.771] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:10.771] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:10:10.771] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:10.771] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:10.771] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.771] | : . ' , ; ` |     ...)  
[08:10:10.771] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.771] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.771] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:10:10.771] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:10.771] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.771] | : . ' , ; ` |     ...)  
[08:10:10.771] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.771] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.776] | : . ' , ; ` | Not identical
[08:10:10.776] | : . ' , ; ` | all.equal() for future ...
[08:10:10.777] | : . ' , ; ` | : List of 2
[08:10:10.777] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.777] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.777] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:10:10.777] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.777] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.777] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.777] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.777] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:10.777] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:10:10.777] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:10.777] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.777] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.777] | : . ' , ; ` | :     ...)  
[08:10:10.777] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.777] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.777] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:10:10.777] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:10.777] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.777] | : . ' , ; ` | :     ...)  
[08:10:10.777] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.785] | : . ' , ; ` | : Formals differ
[08:10:10.785] | : . ' , ; ` | all.equal() for future ... done
[08:10:10.785] | : . ' , ; ` | Future strategies differ at level 1
[08:10:10.785] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:10:10.785] | : . ' , ; ` plan(): Setting new future backend stack:
[08:10:10.786] | : . ' , ; ` List of future strategies:
[08:10:10.786] | : . ' , ; ` 1. sequential:
[08:10:10.786] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:10.786] | : . ' , ; `    - tweaked: FALSE
[08:10:10.786] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.788] | : . ' , ; ` List of 1
[08:10:10.788] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.788] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.788] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:10:10.788] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.788] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.788] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.788] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.788] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.792] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:10:10.793] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:10:10.793] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.793] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:10:10.793] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.793] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.793] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:10:10.793] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.793] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.793] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.793] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.795] | : . ' , ; ` | : init: TRUE
[08:10:10.796] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:10:10.796] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:10:10.796] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:10:10.796] | : . ' , ; ` | : .  list()
[08:10:10.796] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:10:10.796] | : . ' , ; ` | : .  list()
[08:10:10.797] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:10:10.797] | : . ' , ; ` | : . Dotted pair list of 2
[08:10:10.797] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:10:10.797] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:10:10.798] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:10:10.798] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:10:10.798] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:10:10.798] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.798] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:10:10.798] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:10.799] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.801] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.802] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.802] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:10.802] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:10:10.802] | : . ' , ; ` | : New stack:
[08:10:10.802] | : . ' , ; ` | : List of 1
[08:10:10.802] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:10.802] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:10:10.802] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:10.802] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.802] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.802] | : . ' , ; ` | :     ...)  
[08:10:10.802] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.802] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.802] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:10:10.802] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:10.802] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.802] | : . ' , ; ` | :     ...)  
[08:10:10.802] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.802] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.805] | : . ' , ; ` | : Old stack:
[08:10:10.805] | : . ' , ; ` | : List of 1
[08:10:10.805] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.805] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.805] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.805] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.805] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.805] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.805] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.805] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3223cb570> 
[08:10:10.805] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.805] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.805] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.809] | : . ' , ; ` | : Not identical
[08:10:10.809] | : . ' , ; ` | : all.equal() for future ...
[08:10:10.809] | : . ' , ; ` | : . List of 2
[08:10:10.809] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:10.809] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:10:10.809] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:10.809] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:10:10.809] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.809] | : . ' , ; ` | : .     ...)  
[08:10:10.809] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.809] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.809] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:10:10.809] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:10.809] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.809] | : . ' , ; ` | : .     ...)  
[08:10:10.809] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.809] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.809] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.809] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:10:10.809] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.809] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.809] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.809] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.809] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3223cb570> 
[08:10:10.809] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.809] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.816] | : . ' , ; ` | : . Formals differ
[08:10:10.816] | : . ' , ; ` | : all.equal() for future ... done
[08:10:10.816] | : . ' , ; ` | : Future strategies differ at level 1
[08:10:10.816] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:10:10.816] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:10:10.816] | : . ' , ; ` | List of future strategies:
[08:10:10.816] | : . ' , ; ` | 1. multicore:
[08:10:10.816] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:10:10.816] | : . ' , ; ` |    - tweaked: FALSE
[08:10:10.816] | : . ' , ; ` |    - call: plan(strategy)
[08:10:10.817] | : . ' , ; ` | List of 1
[08:10:10.817] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:10.817] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:10:10.817] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:10.817] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:10.817] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.817] | : . ' , ; ` |     ...)  
[08:10:10.817] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.817] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.817] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:10:10.817] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:10.817] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.817] | : . ' , ; ` |     ...)  
[08:10:10.817] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.817] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.820] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:10:10.820] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:10:10.820] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.820] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.820] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:10:10.820] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:10.821] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.821] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.821] | : readImmediateCondition() ...
[08:10:10.821] | : . Path: ‘/tmp/RtmphDP82n/.future/immediateConditions’
[08:10:10.822] | : . Number of RDS files: 0
[08:10:10.822] | : . Returned conditions set:
[08:10:10.822] | : .  list()
[08:10:10.823] | : readImmediateCondition() ... done
[08:10:10.823] | : result() for MulticoreFuture ...
[08:10:10.823] | : result() for MulticoreFuture ... done
[08:10:10.823] | : signalConditions() ...
[08:10:10.823] | : . include = ‘immediateCondition’
[08:10:10.824] | : . exclude = 
[08:10:10.824] | : . resignal = FALSE
[08:10:10.824] | : . Number of conditions: 6
[08:10:10.824] | : .  int 6
[08:10:10.825] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.825] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.825] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.825] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.825] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.825] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.826] | : signalConditions() ... done
[08:10:10.826] | result() for MulticoreFuture ... done
[08:10:10.826] | result() for MulticoreFuture ...
[08:10:10.826] | result() for MulticoreFuture ... done
[08:10:10.826] | signalConditions() ...
[08:10:10.826] | : include = ‘immediateCondition’
[08:10:10.827] | : exclude = 
[08:10:10.827] | : resignal = FALSE
[08:10:10.827] | : Number of conditions: 6
[08:10:10.827] | :  int 6
[08:10:10.828] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.828] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.828] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.828] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.828] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.828] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.828] | signalConditions() ... done
[08:10:10.829] | relay stdout ...
[08:10:10.829] | relay stdout ... done
[08:10:10.829] | check for misuse ...
[08:10:10.829] | check for misuse ... done
[08:10:10.829] | relay conditions ...
[08:10:10.829] | : Future state: ‘finished’
[08:10:10.829] | : result() for MulticoreFuture ...
[08:10:10.830] | : result() for MulticoreFuture ... done
[08:10:10.830] | : signalConditions() ...
[08:10:10.830] | : . include = ‘condition’
[08:10:10.830] | : . exclude = ‘immediateCondition’
[08:10:10.830] | : . resignal = TRUE
[08:10:10.830] | : . Number of conditions: 6
[08:10:10.830] | : .  int 6
[08:10:10.831] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.831] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.760] | : . ' , attachPackages() ...
[08:10:10.831] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.831] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.761] | : . ' , ; packages: [n=1] ‘future’
[08:10:10.832] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.832] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.761] | : . ' , attachPackages() ... done
[08:10:10.832] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.832] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.762] | : . ' , attachPackages() ...
[08:10:10.832] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.832] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.762] | : . ' , ; packages: [n=1] ‘utils’
[08:10:10.832] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.833] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.762] | : . ' , attachPackages() ... done
[08:10:10.833] | : signalConditions() ... done
[08:10:10.833] | relay conditions ... done
[08:10:10.833] value() for MulticoreFuture (<unnamed-11>) ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[08:10:10.833] future(..., label = NULL) ...
[08:10:10.834] | lazy: FALSE
[08:10:10.834] | stdout: TRUE
[08:10:10.834] | conditions: [n=1] ‘condition’
[08:10:10.834] | gc: FALSE
[08:10:10.834] | earlySignal: FALSE
[08:10:10.834] | getGlobalsAndPackages() ...
[08:10:10.834] | : Searching for globals ...
[08:10:10.838] | : . globals found: [1] ‘print’
[08:10:10.838] | : Searching for globals ... done
[08:10:10.839] | : Resolving globals: FALSE
[08:10:10.839] | : Search for packages associated with the globals ...
[08:10:10.839] | : . Packages associated with globals: [1] ‘base’
[08:10:10.839] | : . Packages: [1] ‘base’
[08:10:10.839] | : Search for packages associated with the globals ... done
[08:10:10.840] | : Packages after dropping 'base': [0] 
[08:10:10.840] | : globals: [0] 
[08:10:10.841] | : packages: [0] 
[08:10:10.841] | getGlobalsAndPackages() ... done
[08:10:10.842] | run() for ‘Future’ (<unnamed-12>) ...
[08:10:10.842] | : state: ‘created’
[08:10:10.842] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.842] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.842] | : Using MulticoreFutureBackend ...
[08:10:10.843] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:10:10.843] | : . Launching futures ...
[08:10:10.843] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:10:10.843] | : . ' , getFutureData() ...
[08:10:10.843] | : . ' , ; getFutureCore() ...
[08:10:10.843] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:10:10.843] | : . ' , ; getFutureCore() ... done
[08:10:10.844] | : . ' , ; getFutureCapture() ...
[08:10:10.844] | : . ' , ; getFutureCapture() ... done
[08:10:10.844] | : . ' , ; getFutureContext() ...
[08:10:10.844] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.844] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:10:10.845] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.845] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:10:10.845] | : . ' , ; getFutureContext() ... done
[08:10:10.845] | : . ' , getFutureData() ... done
[08:10:10.845] | : . ' , requestCore(..., workers = 2) ...
[08:10:10.846] | : . ' , requestCore(..., workers = 2) ... done
[08:10:10.848] | : . ' , MulticoreFuture started
[08:10:10.848] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:10:10.849] | : . Launching futures ... done
[08:10:10.849] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:10:10.850] | : Using MulticoreFutureBackend ... done
[08:10:10.850] | run() for ‘Future’ (<unnamed-12>) ... done
[08:10:10.850] future(..., label = NULL) ... done
[08:10:10.851] result() for MulticoreFuture ...
[08:10:10.852] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.852] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:10:10.853] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.853] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.854] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:10.854] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:10:10.854] | : . ' , ; ` | New stack:
[08:10:10.854] | : . ' , ; ` | List of 1
[08:10:10.854] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.854] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.854] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:10:10.854] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.854] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.854] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.854] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.854] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.860] | : . ' , ; ` | Old stack:
[08:10:10.860] | : . ' , ; ` | List of 1
[08:10:10.860] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:10.860] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:10:10.860] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:10.860] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:10.860] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.860] | : . ' , ; ` |     ...)  
[08:10:10.860] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.860] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.860] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:10:10.860] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:10.860] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.860] | : . ' , ; ` |     ...)  
[08:10:10.860] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.860] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.865] | : . ' , ; ` | Not identical
[08:10:10.866] | : . ' , ; ` | all.equal() for future ...
[08:10:10.866] | : . ' , ; ` | : List of 2
[08:10:10.866] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.866] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.866] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:10:10.866] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.866] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.866] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.866] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.866] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:10.866] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:10:10.866] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:10.866] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.866] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.866] | : . ' , ; ` | :     ...)  
[08:10:10.866] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.866] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.866] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:10:10.866] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:10.866] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.866] | : . ' , ; ` | :     ...)  
[08:10:10.866] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.873] | : . ' , ; ` | : Formals differ
[08:10:10.874] | : . ' , ; ` | all.equal() for future ... done
[08:10:10.874] | : . ' , ; ` | Future strategies differ at level 1
[08:10:10.874] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:10:10.874] | : . ' , ; ` plan(): Setting new future backend stack:
[08:10:10.874] | : . ' , ; ` List of future strategies:
[08:10:10.874] | : . ' , ; ` 1. sequential:
[08:10:10.874] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:10.874] | : . ' , ; `    - tweaked: FALSE
[08:10:10.874] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.875] | : . ' , ; ` List of 1
[08:10:10.875] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.875] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.875] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:10:10.875] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.875] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.875] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.875] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.875] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.880] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:10:10.880] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:10:10.881] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.881] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:10:10.881] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.881] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.881] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:10:10.881] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.881] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.881] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.881] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.884] | : . ' , ; ` | : init: TRUE
[08:10:10.884] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:10:10.884] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:10:10.884] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:10:10.884] | : . ' , ; ` | : .  list()
[08:10:10.884] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:10:10.884] | : . ' , ; ` | : .  list()
[08:10:10.885] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:10:10.885] | : . ' , ; ` | : . Dotted pair list of 2
[08:10:10.885] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:10:10.885] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:10:10.886] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:10:10.886] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:10:10.886] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:10:10.886] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.886] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:10:10.887] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:10.887] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.889] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.889] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.889] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:10.889] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:10:10.889] | : . ' , ; ` | : New stack:
[08:10:10.889] | : . ' , ; ` | : List of 1
[08:10:10.889] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:10.889] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:10:10.889] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:10.889] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.889] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.889] | : . ' , ; ` | :     ...)  
[08:10:10.889] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.889] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.889] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:10:10.889] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:10.889] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.889] | : . ' , ; ` | :     ...)  
[08:10:10.889] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.889] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.893] | : . ' , ; ` | : Old stack:
[08:10:10.893] | : . ' , ; ` | : List of 1
[08:10:10.893] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.893] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.893] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.893] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.893] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.893] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.893] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.893] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d322cfdb40> 
[08:10:10.893] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.893] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.893] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.896] | : . ' , ; ` | : Not identical
[08:10:10.896] | : . ' , ; ` | : all.equal() for future ...
[08:10:10.896] | : . ' , ; ` | : . List of 2
[08:10:10.896] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:10.896] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:10:10.896] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:10.896] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:10:10.896] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.896] | : . ' , ; ` | : .     ...)  
[08:10:10.896] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.896] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.896] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:10:10.896] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:10.896] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.896] | : . ' , ; ` | : .     ...)  
[08:10:10.896] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.896] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.896] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.896] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:10:10.896] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.896] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.896] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.896] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.896] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d322cfdb40> 
[08:10:10.896] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.896] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.903] | : . ' , ; ` | : . Formals differ
[08:10:10.903] | : . ' , ; ` | : all.equal() for future ... done
[08:10:10.903] | : . ' , ; ` | : Future strategies differ at level 1
[08:10:10.903] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:10:10.903] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:10:10.903] | : . ' , ; ` | List of future strategies:
[08:10:10.903] | : . ' , ; ` | 1. multicore:
[08:10:10.903] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:10:10.903] | : . ' , ; ` |    - tweaked: FALSE
[08:10:10.903] | : . ' , ; ` |    - call: plan(strategy)
[08:10:10.904] | : . ' , ; ` | List of 1
[08:10:10.904] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:10.904] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:10:10.904] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:10.904] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:10.904] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.904] | : . ' , ; ` |     ...)  
[08:10:10.904] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.904] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.904] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:10:10.904] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:10.904] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.904] | : . ' , ; ` |     ...)  
[08:10:10.904] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.904] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.907] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:10:10.907] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:10:10.907] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.907] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.908] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:10:10.908] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:10.908] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.908] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:10.908] | readImmediateCondition() ...
[08:10:10.909] | : Path: ‘/tmp/RtmphDP82n/.future/immediateConditions’
[08:10:10.909] | : Number of RDS files: 0
[08:10:10.909] | : Returned conditions set:
[08:10:10.909] | :  list()
[08:10:10.910] | readImmediateCondition() ... done
[08:10:10.910] | result() for MulticoreFuture ...
[08:10:10.910] | result() for MulticoreFuture ... done
[08:10:10.911] | signalConditions() ...
[08:10:10.911] | : include = ‘immediateCondition’
[08:10:10.911] | : exclude = 
[08:10:10.911] | : resignal = FALSE
[08:10:10.911] | : Number of conditions: 6
[08:10:10.911] | :  int 6
[08:10:10.912] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.912] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.912] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.912] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.913] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.913] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.913] | signalConditions() ... done
[08:10:10.913] result() for MulticoreFuture ... done
[08:10:10.913] value() for MulticoreFuture (<unnamed-12>) ...
[08:10:10.913] | result() for MulticoreFuture ...
[08:10:10.914] | result() for MulticoreFuture ... done
[08:10:10.914] | result() for MulticoreFuture ...
[08:10:10.914] | result() for MulticoreFuture ... done
[08:10:10.914] | signalConditions() ...
[08:10:10.914] | : include = ‘immediateCondition’
[08:10:10.914] | : exclude = 
[08:10:10.914] | : resignal = FALSE
[08:10:10.915] | : Number of conditions: 6
[08:10:10.915] | :  int 6
[08:10:10.915] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.915] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.916] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.916] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.916] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.916] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.916] | signalConditions() ... done
[08:10:10.916] | relay stdout ...
[1] 42
[08:10:10.916] | relay stdout ... done
[08:10:10.917] | check for misuse ...
[08:10:10.917] | check for misuse ... done
[08:10:10.917] | relay conditions ...
[08:10:10.917] | : Future state: ‘finished’
[08:10:10.917] | : result() for MulticoreFuture ...
[08:10:10.917] | : result() for MulticoreFuture ... done
[08:10:10.917] | : signalConditions() ...
[08:10:10.917] | : . include = ‘condition’
[08:10:10.918] | : . exclude = ‘immediateCondition’
[08:10:10.918] | : . resignal = TRUE
[08:10:10.918] | : . Number of conditions: 6
[08:10:10.918] | : .  int 6
[08:10:10.919] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.919] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.849] | : . ' , attachPackages() ...
[08:10:10.919] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.919] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.849] | : . ' , ; packages: [n=1] ‘future’
[08:10:10.919] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.919] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.850] | : . ' , attachPackages() ... done
[08:10:10.920] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.920] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.850] | : . ' , attachPackages() ...
[08:10:10.920] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.920] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.851] | : . ' , ; packages: [n=0] 
[08:10:10.920] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:10.920] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.851] | : . ' , attachPackages() ... done
[08:10:10.920] | : signalConditions() ... done
[08:10:10.921] | relay conditions ... done
[08:10:10.921] value() for MulticoreFuture (<unnamed-12>) ... done
[08:10:10.921] result() for MulticoreFuture ...
[08:10:10.921] result() for MulticoreFuture ... done
- stdout = FALSE
[08:10:10.921] future(..., label = NULL) ...
[08:10:10.921] | lazy: FALSE
[08:10:10.921] | stdout: FALSE
[08:10:10.922] | conditions: [n=1] ‘condition’
[08:10:10.922] | gc: FALSE
[08:10:10.922] | earlySignal: FALSE
[08:10:10.922] | getGlobalsAndPackages() ...
[08:10:10.922] | : Searching for globals ...
[08:10:10.955] | : . globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:10:10.955] | : Searching for globals ... done
[08:10:10.955] | : Resolving globals: FALSE
[08:10:10.956] | : Search for packages associated with the globals ...
[08:10:10.956] | : . Packages associated with globals: [2] ‘base’, ‘utils’
[08:10:10.956] | : . Packages: [2] ‘base’, ‘utils’
[08:10:10.956] | : Search for packages associated with the globals ... done
[08:10:10.956] | : Packages after dropping 'base': [1] ‘utils’
[08:10:10.957] | : Packages after dropping non-attached packages: [1] ‘utils’
[08:10:10.957] | : globals: [0] 
[08:10:10.957] | : packages: [1] ‘utils’
[08:10:10.957] | getGlobalsAndPackages() ... done
[08:10:10.957] | run() for ‘Future’ (<unnamed-13>) ...
[08:10:10.957] | : state: ‘created’
[08:10:10.957] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.957] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.958] | : Using MulticoreFutureBackend ...
[08:10:10.958] | : . Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:10:10.958] | : . Launching futures ...
[08:10:10.958] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:10:10.958] | : . ' , getFutureData() ...
[08:10:10.958] | : . ' , ; getFutureCore() ...
[08:10:10.958] | : . ' , ; ` Packages needed by the future expression (n = 1): ‘utils’
[08:10:10.958] | : . ' , ; getFutureCore() ... done
[08:10:10.958] | : . ' , ; getFutureCapture() ...
[08:10:10.959] | : . ' , ; getFutureCapture() ... done
[08:10:10.959] | : . ' , ; getFutureContext() ...
[08:10:10.959] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.959] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:10:10.959] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.959] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:10:10.959] | : . ' , ; getFutureContext() ... done
[08:10:10.959] | : . ' , getFutureData() ... done
[08:10:10.959] | : . ' , requestCore(..., workers = 2) ...
[08:10:10.960] | : . ' , requestCore(..., workers = 2) ... done
[08:10:10.962] | : . ' , MulticoreFuture started
[08:10:10.962] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:10:10.962] | : . Launching futures ... done
[08:10:10.963] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:10:10.964] | : Using MulticoreFutureBackend ... done
[08:10:10.965] | run() for ‘Future’ (<unnamed-13>) ... done
[08:10:10.965] future(..., label = NULL) ... done
[08:10:10.966] result() for MulticoreFuture ...
[08:10:10.967] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.968] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:10:10.968] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:10.969] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:10.969] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:10.970] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:10:10.970] | : . ' , ; ` | New stack:
[08:10:10.970] | : . ' , ; ` | List of 1
[08:10:10.970] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.970] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.970] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:10:10.970] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.970] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.970] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.970] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.970] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.976] | : . ' , ; ` | Old stack:
[08:10:10.977] | : . ' , ; ` | List of 1
[08:10:10.977] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:10.977] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:10:10.977] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:10.977] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:10.977] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.977] | : . ' , ; ` |     ...)  
[08:10:10.977] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.977] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.977] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:10:10.977] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:10.977] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.977] | : . ' , ; ` |     ...)  
[08:10:10.977] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.977] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.982] | : . ' , ; ` | Not identical
[08:10:10.982] | : . ' , ; ` | all.equal() for future ...
[08:10:10.982] | : . ' , ; ` | : List of 2
[08:10:10.982] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.982] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.982] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:10:10.982] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.982] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.982] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.982] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.982] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:10.982] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:10:10.982] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:10.982] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:10.982] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.982] | : . ' , ; ` | :     ...)  
[08:10:10.982] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.982] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.982] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:10:10.982] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:10.982] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:10.982] | : . ' , ; ` | :     ...)  
[08:10:10.982] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:10.989] | : . ' , ; ` | : Formals differ
[08:10:10.990] | : . ' , ; ` | all.equal() for future ... done
[08:10:10.990] | : . ' , ; ` | Future strategies differ at level 1
[08:10:10.990] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:10:10.990] | : . ' , ; ` plan(): Setting new future backend stack:
[08:10:10.990] | : . ' , ; ` List of future strategies:
[08:10:10.990] | : . ' , ; ` 1. sequential:
[08:10:10.990] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:10.990] | : . ' , ; `    - tweaked: FALSE
[08:10:10.990] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.991] | : . ' , ; ` List of 1
[08:10:10.991] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.991] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.991] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:10:10.991] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.991] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.991] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.991] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.991] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:10.994] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:10:10.994] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:10:10.994] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:10.994] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:10:10.994] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:10.994] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:10.994] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:10:10.994] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:10.994] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.994] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:10.994] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:10.998] | : . ' , ; ` | : init: TRUE
[08:10:10.998] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:10:10.998] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:10:10.998] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:10:10.998] | : . ' , ; ` | : .  list()
[08:10:10.998] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:10:10.999] | : . ' , ; ` | : .  list()
[08:10:10.999] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:10:10.999] | : . ' , ; ` | : . Dotted pair list of 2
[08:10:10.999] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:10:10.999] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:10:11.000] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:10:11.000] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:10:11.000] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:10:11.001] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.001] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:10:11.001] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:11.001] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:11.004] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:11.004] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:11.004] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:11.004] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:10:11.004] | : . ' , ; ` | : New stack:
[08:10:11.004] | : . ' , ; ` | : List of 1
[08:10:11.004] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.004] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.004] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.004] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:11.004] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.004] | : . ' , ; ` | :     ...)  
[08:10:11.004] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.004] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.004] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:10:11.004] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.004] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.004] | : . ' , ; ` | :     ...)  
[08:10:11.004] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.004] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.008] | : . ' , ; ` | : Old stack:
[08:10:11.008] | : . ' , ; ` | : List of 1
[08:10:11.008] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.008] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.008] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:11.008] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.008] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.008] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.008] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.008] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3250253f0> 
[08:10:11.008] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.008] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.008] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.011] | : . ' , ; ` | : Not identical
[08:10:11.011] | : . ' , ; ` | : all.equal() for future ...
[08:10:11.011] | : . ' , ; ` | : . List of 2
[08:10:11.011] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.011] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.011] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.011] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:10:11.011] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.011] | : . ' , ; ` | : .     ...)  
[08:10:11.011] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.011] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.011] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:10:11.011] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.011] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.011] | : . ' , ; ` | : .     ...)  
[08:10:11.011] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.011] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.011] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.011] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:10:11.011] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.011] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.011] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.011] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.011] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3250253f0> 
[08:10:11.011] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.011] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.017] | : . ' , ; ` | : . Formals differ
[08:10:11.018] | : . ' , ; ` | : all.equal() for future ... done
[08:10:11.018] | : . ' , ; ` | : Future strategies differ at level 1
[08:10:11.018] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:10:11.018] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:10:11.018] | : . ' , ; ` | List of future strategies:
[08:10:11.018] | : . ' , ; ` | 1. multicore:
[08:10:11.018] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:10:11.018] | : . ' , ; ` |    - tweaked: FALSE
[08:10:11.018] | : . ' , ; ` |    - call: plan(strategy)
[08:10:11.018] | : . ' , ; ` | List of 1
[08:10:11.018] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.018] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.018] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.018] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:11.018] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.018] | : . ' , ; ` |     ...)  
[08:10:11.018] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.018] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.018] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:10:11.018] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.018] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.018] | : . ' , ; ` |     ...)  
[08:10:11.018] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.018] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.021] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:10:11.022] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:10:11.022] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.022] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.022] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:10:11.022] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:11.022] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:11.022] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:11.023] | readImmediateCondition() ...
[08:10:11.023] | : Path: ‘/tmp/RtmphDP82n/.future/immediateConditions’
[08:10:11.024] | : Number of RDS files: 0
[08:10:11.024] | : Returned conditions set:
[08:10:11.024] | :  list()
[08:10:11.025] | readImmediateCondition() ... done
[08:10:11.025] | result() for MulticoreFuture ...
[08:10:11.025] | result() for MulticoreFuture ... done
[08:10:11.026] | signalConditions() ...
[08:10:11.026] | : include = ‘immediateCondition’
[08:10:11.026] | : exclude = 
[08:10:11.026] | : resignal = FALSE
[08:10:11.027] | : Number of conditions: 6
[08:10:11.027] | :  int 6
[08:10:11.028] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.028] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.028] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.028] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.028] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.029] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.029] | signalConditions() ... done
[08:10:11.029] result() for MulticoreFuture ... done
List of 16
 $ value              : int 42
 $ visible            : logi TRUE
 $ stdout             : NULL
 $ conditions         :List of 6
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.963] | : . ' , attachPackages() ...\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.963] | : . ' , ; packages: [n=1] ‘future’\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg), appendLF = appendLF)
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.964] | : . ' , attachPackages() ... done\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.965] | : . ' , attachPackages() ...\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.965] | : . ' , ; packages: [n=1] ‘utils’\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg), appendLF = appendLF)
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:10.966] | : . ' , attachPackages() ... done\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
 $ rng                : logi FALSE
 $ seed               : NULL
 $ misuseGlobalEnv    : NULL
 $ misuseConnections  :List of 3
  ..$ added   : NULL
  ..$ removed : NULL
  ..$ replaced: NULL
 $ misuseDevices      : NULL
 $ misuseDefaultDevice: list()
 $ started            : POSIXct[1:1], format: "2025-06-17 08:10:10"
 $ finished           : POSIXct[1:1], format: "2025-06-17 08:10:11"
 $ uuid               : chr [1:2] "01885b60b3d40eac4dc41a106424dbc9" "13"
 $ session_uuid       : chr "f44b071e8242401024ed86eafcb72385"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "28bb34de9501"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 75611
  .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:10:11"
  .. ..$ random: int 2147483647
 $ r_info             :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 5 1
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version            : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[08:10:11.054] value() for MulticoreFuture (<unnamed-13>) ...
[08:10:11.054] | result() for MulticoreFuture ...
[08:10:11.054] | result() for MulticoreFuture ... done
[08:10:11.054] | result() for MulticoreFuture ...
[08:10:11.054] | result() for MulticoreFuture ... done
[08:10:11.054] | signalConditions() ...
[08:10:11.054] | : include = ‘immediateCondition’
[08:10:11.054] | : exclude = 
[08:10:11.055] | : resignal = FALSE
[08:10:11.055] | : Number of conditions: 6
[08:10:11.055] | :  int 6
[08:10:11.055] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.055] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.055] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.056] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.056] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.056] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.056] | signalConditions() ... done
[08:10:11.056] | relay stdout ...
[08:10:11.056] | relay stdout ... done
[08:10:11.056] | check for misuse ...
[08:10:11.056] | check for misuse ... done
[08:10:11.056] | relay conditions ...
[08:10:11.057] | : Future state: ‘finished’
[08:10:11.057] | : result() for MulticoreFuture ...
[08:10:11.057] | : result() for MulticoreFuture ... done
[08:10:11.057] | : signalConditions() ...
[08:10:11.057] | : . include = ‘condition’
[08:10:11.057] | : . exclude = ‘immediateCondition’
[08:10:11.057] | : . resignal = TRUE
[08:10:11.057] | : . Number of conditions: 6
[08:10:11.057] | : .  int 6
[08:10:11.058] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.058] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.963] | : . ' , attachPackages() ...
[08:10:11.058] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.058] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.963] | : . ' , ; packages: [n=1] ‘future’
[08:10:11.058] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.058] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.964] | : . ' , attachPackages() ... done
[08:10:11.059] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.059] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.965] | : . ' , attachPackages() ...
[08:10:11.059] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.059] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.965] | : . ' , ; packages: [n=1] ‘utils’
[08:10:11.059] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.059] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:10.966] | : . ' , attachPackages() ... done
[08:10:11.059] | : signalConditions() ... done
[08:10:11.059] | relay conditions ... done
[08:10:11.060] value() for MulticoreFuture (<unnamed-13>) ... done
[08:10:11.060] future(..., label = NULL) ...
[08:10:11.060] | lazy: FALSE
[08:10:11.060] | stdout: FALSE
[08:10:11.060] | conditions: [n=1] ‘condition’
[08:10:11.060] | gc: FALSE
[08:10:11.060] | earlySignal: FALSE
[08:10:11.060] | getGlobalsAndPackages() ...
[08:10:11.061] | : Searching for globals ...
[08:10:11.090] | : . globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:10:11.090] | : Searching for globals ... done
[08:10:11.090] | : Resolving globals: FALSE
[08:10:11.090] | : Search for packages associated with the globals ...
[08:10:11.091] | : . Packages associated with globals: [2] ‘base’, ‘utils’
[08:10:11.091] | : . Packages: [2] ‘base’, ‘utils’
[08:10:11.091] | : Search for packages associated with the globals ... done
[08:10:11.091] | : Packages after dropping 'base': [1] ‘utils’
[08:10:11.091] | : Packages after dropping non-attached packages: [1] ‘utils’
[08:10:11.092] | : globals: [0] 
[08:10:11.092] | : packages: [1] ‘utils’
[08:10:11.092] | getGlobalsAndPackages() ... done
[08:10:11.092] | run() for ‘Future’ (<unnamed-14>) ...
[08:10:11.092] | : state: ‘created’
[08:10:11.092] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.092] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.092] | : Using MulticoreFutureBackend ...
[08:10:11.093] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:10:11.093] | : . Launching futures ...
[08:10:11.093] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:10:11.093] | : . ' , getFutureData() ...
[08:10:11.093] | : . ' , ; getFutureCore() ...
[08:10:11.093] | : . ' , ; ` Packages needed by the future expression (n = 1): ‘utils’
[08:10:11.093] | : . ' , ; getFutureCore() ... done
[08:10:11.093] | : . ' , ; getFutureCapture() ...
[08:10:11.093] | : . ' , ; getFutureCapture() ... done
[08:10:11.094] | : . ' , ; getFutureContext() ...
[08:10:11.094] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.094] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:10:11.094] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.094] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:10:11.094] | : . ' , ; getFutureContext() ... done
[08:10:11.094] | : . ' , getFutureData() ... done
[08:10:11.094] | : . ' , requestCore(..., workers = 2) ...
[08:10:11.095] | : . ' , requestCore(..., workers = 2) ... done
[08:10:11.097] | : . ' , MulticoreFuture started
[08:10:11.097] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:10:11.097] | : . Launching futures ... done
[08:10:11.097] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:10:11.098] | : Using MulticoreFutureBackend ... done
[08:10:11.098] | run() for ‘Future’ (<unnamed-14>) ... done
[08:10:11.098] future(..., label = NULL) ... done
[08:10:11.100] value() for MulticoreFuture (<unnamed-14>) ...
[08:10:11.101] | result() for MulticoreFuture ...
[08:10:11.102] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.102] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:10:11.103] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.103] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:11.104] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:11.104] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:10:11.105] | : . ' , ; ` | New stack:
[08:10:11.105] | : . ' , ; ` | List of 1
[08:10:11.105] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.105] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.105] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:10:11.105] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.105] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.105] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.105] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.105] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.112] | : . ' , ; ` | Old stack:
[08:10:11.112] | : . ' , ; ` | List of 1
[08:10:11.112] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.112] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.112] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.112] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:11.112] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.112] | : . ' , ; ` |     ...)  
[08:10:11.112] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.112] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.112] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:10:11.112] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.112] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.112] | : . ' , ; ` |     ...)  
[08:10:11.112] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.112] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.118] | : . ' , ; ` | Not identical
[08:10:11.118] | : . ' , ; ` | all.equal() for future ...
[08:10:11.118] | : . ' , ; ` | : List of 2
[08:10:11.118] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.118] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.118] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:10:11.118] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.118] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.118] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.118] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.118] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.118] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.118] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.118] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:11.118] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.118] | : . ' , ; ` | :     ...)  
[08:10:11.118] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.118] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.118] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:10:11.118] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.118] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.118] | : . ' , ; ` | :     ...)  
[08:10:11.118] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.125] | : . ' , ; ` | : Formals differ
[08:10:11.125] | : . ' , ; ` | all.equal() for future ... done
[08:10:11.125] | : . ' , ; ` | Future strategies differ at level 1
[08:10:11.125] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:10:11.125] | : . ' , ; ` plan(): Setting new future backend stack:
[08:10:11.125] | : . ' , ; ` List of future strategies:
[08:10:11.125] | : . ' , ; ` 1. sequential:
[08:10:11.125] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:11.125] | : . ' , ; `    - tweaked: FALSE
[08:10:11.125] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.126] | : . ' , ; ` List of 1
[08:10:11.126] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.126] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.126] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:10:11.126] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.126] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.126] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.126] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.126] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.129] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:10:11.129] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:10:11.130] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.130] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:10:11.130] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.130] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.130] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:10:11.130] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.130] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.130] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.130] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.133] | : . ' , ; ` | : init: TRUE
[08:10:11.133] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:10:11.134] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:10:11.134] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:10:11.134] | : . ' , ; ` | : .  list()
[08:10:11.134] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:10:11.134] | : . ' , ; ` | : .  list()
[08:10:11.135] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:10:11.135] | : . ' , ; ` | : . Dotted pair list of 2
[08:10:11.135] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:10:11.135] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:10:11.136] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:10:11.136] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:10:11.136] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:10:11.136] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.136] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:10:11.136] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:11.137] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:11.139] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:11.140] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:11.140] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:11.140] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:10:11.140] | : . ' , ; ` | : New stack:
[08:10:11.140] | : . ' , ; ` | : List of 1
[08:10:11.140] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.140] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.140] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.140] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:11.140] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.140] | : . ' , ; ` | :     ...)  
[08:10:11.140] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.140] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.140] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:10:11.140] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.140] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.140] | : . ' , ; ` | :     ...)  
[08:10:11.140] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.140] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.143] | : . ' , ; ` | : Old stack:
[08:10:11.143] | : . ' , ; ` | : List of 1
[08:10:11.143] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.143] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.143] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:11.143] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.143] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.143] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.143] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.143] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324f92e80> 
[08:10:11.143] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.143] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.143] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.146] | : . ' , ; ` | : Not identical
[08:10:11.147] | : . ' , ; ` | : all.equal() for future ...
[08:10:11.147] | : . ' , ; ` | : . List of 2
[08:10:11.147] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.147] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.147] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.147] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:10:11.147] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.147] | : . ' , ; ` | : .     ...)  
[08:10:11.147] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.147] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.147] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:10:11.147] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.147] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.147] | : . ' , ; ` | : .     ...)  
[08:10:11.147] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.147] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.147] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.147] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:10:11.147] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.147] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.147] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.147] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.147] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324f92e80> 
[08:10:11.147] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.147] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.153] | : . ' , ; ` | : . Formals differ
[08:10:11.153] | : . ' , ; ` | : all.equal() for future ... done
[08:10:11.154] | : . ' , ; ` | : Future strategies differ at level 1
[08:10:11.154] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:10:11.154] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:10:11.154] | : . ' , ; ` | List of future strategies:
[08:10:11.154] | : . ' , ; ` | 1. multicore:
[08:10:11.154] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:10:11.154] | : . ' , ; ` |    - tweaked: FALSE
[08:10:11.154] | : . ' , ; ` |    - call: plan(strategy)
[08:10:11.154] | : . ' , ; ` | List of 1
[08:10:11.154] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.154] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.154] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.154] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:11.154] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.154] | : . ' , ; ` |     ...)  
[08:10:11.154] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.154] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.154] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:10:11.154] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.154] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.154] | : . ' , ; ` |     ...)  
[08:10:11.154] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.154] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.157] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:10:11.158] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:10:11.158] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.158] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.158] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:10:11.158] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:11.158] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:11.158] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:11.159] | : readImmediateCondition() ...
[08:10:11.159] | : . Path: ‘/tmp/RtmphDP82n/.future/immediateConditions’
[08:10:11.160] | : . Number of RDS files: 0
[08:10:11.160] | : . Returned conditions set:
[08:10:11.160] | : .  list()
[08:10:11.161] | : readImmediateCondition() ... done
[08:10:11.161] | : result() for MulticoreFuture ...
[08:10:11.162] | : result() for MulticoreFuture ... done
[08:10:11.162] | : signalConditions() ...
[08:10:11.162] | : . include = ‘immediateCondition’
[08:10:11.162] | : . exclude = 
[08:10:11.162] | : . resignal = FALSE
[08:10:11.163] | : . Number of conditions: 6
[08:10:11.163] | : .  int 6
[08:10:11.164] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.164] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.164] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.164] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.165] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.165] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.165] | : signalConditions() ... done
[08:10:11.165] | result() for MulticoreFuture ... done
[08:10:11.165] | result() for MulticoreFuture ...
[08:10:11.165] | result() for MulticoreFuture ... done
[08:10:11.166] | signalConditions() ...
[08:10:11.166] | : include = ‘immediateCondition’
[08:10:11.166] | : exclude = 
[08:10:11.166] | : resignal = FALSE
[08:10:11.166] | : Number of conditions: 6
[08:10:11.166] | :  int 6
[08:10:11.167] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.167] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.167] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.167] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.167] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.167] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.168] | signalConditions() ... done
[08:10:11.168] | relay stdout ...
[08:10:11.168] | relay stdout ... done
[08:10:11.168] | check for misuse ...
[08:10:11.168] | check for misuse ... done
[08:10:11.168] | relay conditions ...
[08:10:11.168] | : Future state: ‘finished’
[08:10:11.169] | : result() for MulticoreFuture ...
[08:10:11.169] | : result() for MulticoreFuture ... done
[08:10:11.169] | : signalConditions() ...
[08:10:11.169] | : . include = ‘condition’
[08:10:11.169] | : . exclude = ‘immediateCondition’
[08:10:11.169] | : . resignal = TRUE
[08:10:11.169] | : . Number of conditions: 6
[08:10:11.169] | : .  int 6
[08:10:11.170] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.170] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.098] | : . ' , attachPackages() ...
[08:10:11.170] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.170] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.098] | : . ' , ; packages: [n=1] ‘future’
[08:10:11.171] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.171] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.098] | : . ' , attachPackages() ... done
[08:10:11.171] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.171] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.099] | : . ' , attachPackages() ...
[08:10:11.171] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.171] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.099] | : . ' , ; packages: [n=1] ‘utils’
[08:10:11.172] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.172] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.101] | : . ' , attachPackages() ... done
[08:10:11.172] | : signalConditions() ... done
[08:10:11.172] | relay conditions ... done
[08:10:11.172] value() for MulticoreFuture (<unnamed-14>) ... done
- stdout = structure(TRUE, drop = TRUE)
[08:10:11.172] future(..., label = NULL) ...
[08:10:11.172] | lazy: FALSE
[08:10:11.173] | stdout: TRUE
[08:10:11.173] | conditions: [n=1] ‘condition’
[08:10:11.173] | gc: FALSE
[08:10:11.173] | earlySignal: FALSE
[08:10:11.173] | getGlobalsAndPackages() ...
[08:10:11.173] | : Searching for globals ...
[08:10:11.177] | : . globals found: [1] ‘print’
[08:10:11.177] | : Searching for globals ... done
[08:10:11.177] | : Resolving globals: FALSE
[08:10:11.177] | : Search for packages associated with the globals ...
[08:10:11.177] | : . Packages associated with globals: [1] ‘base’
[08:10:11.178] | : . Packages: [1] ‘base’
[08:10:11.178] | : Search for packages associated with the globals ... done
[08:10:11.178] | : Packages after dropping 'base': [0] 
[08:10:11.178] | : globals: [0] 
[08:10:11.178] | : packages: [0] 
[08:10:11.178] | getGlobalsAndPackages() ... done
[08:10:11.178] | run() for ‘Future’ (<unnamed-15>) ...
[08:10:11.179] | : state: ‘created’
[08:10:11.179] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.179] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.179] | : Using MulticoreFutureBackend ...
[08:10:11.179] | : . Number of futures since start: 5 (5 created, 5 launched, 5 finished)
[08:10:11.179] | : . Launching futures ...
[08:10:11.179] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:10:11.180] | : . ' , getFutureData() ...
[08:10:11.180] | : . ' , ; getFutureCore() ...
[08:10:11.180] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:10:11.180] | : . ' , ; getFutureCore() ... done
[08:10:11.180] | : . ' , ; getFutureCapture() ...
[08:10:11.180] | : . ' , ; getFutureCapture() ... done
[08:10:11.180] | : . ' , ; getFutureContext() ...
[08:10:11.180] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.181] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:10:11.181] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.181] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:10:11.181] | : . ' , ; getFutureContext() ... done
[08:10:11.181] | : . ' , getFutureData() ... done
[08:10:11.181] | : . ' , requestCore(..., workers = 2) ...
[08:10:11.182] | : . ' , requestCore(..., workers = 2) ... done
[08:10:11.183] | : . ' , MulticoreFuture started
[08:10:11.184] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:10:11.184] | : . Launching futures ... done
[08:10:11.185] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:10:11.185] | : Using MulticoreFutureBackend ... done
[08:10:11.185] | run() for ‘Future’ (<unnamed-15>) ... done
[08:10:11.186] future(..., label = NULL) ... done
[08:10:11.186] result() for MulticoreFuture ...
[08:10:11.188] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.188] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:10:11.188] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.189] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:11.189] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:11.192] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:10:11.192] | : . ' , ; ` | New stack:
[08:10:11.193] | : . ' , ; ` | List of 1
[08:10:11.193] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.193] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.193] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:10:11.193] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.193] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.193] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.193] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.193] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.201] | : . ' , ; ` | Old stack:
[08:10:11.201] | : . ' , ; ` | List of 1
[08:10:11.201] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.201] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.201] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.201] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:11.201] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.201] | : . ' , ; ` |     ...)  
[08:10:11.201] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.201] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.201] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:10:11.201] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.201] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.201] | : . ' , ; ` |     ...)  
[08:10:11.201] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.201] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.206] | : . ' , ; ` | Not identical
[08:10:11.207] | : . ' , ; ` | all.equal() for future ...
[08:10:11.207] | : . ' , ; ` | : List of 2
[08:10:11.207] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.207] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.207] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:10:11.207] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.207] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.207] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.207] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.207] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.207] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.207] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.207] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:11.207] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.207] | : . ' , ; ` | :     ...)  
[08:10:11.207] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.207] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.207] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:10:11.207] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.207] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.207] | : . ' , ; ` | :     ...)  
[08:10:11.207] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.214] | : . ' , ; ` | : Formals differ
[08:10:11.214] | : . ' , ; ` | all.equal() for future ... done
[08:10:11.214] | : . ' , ; ` | Future strategies differ at level 1
[08:10:11.214] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:10:11.214] | : . ' , ; ` plan(): Setting new future backend stack:
[08:10:11.214] | : . ' , ; ` List of future strategies:
[08:10:11.214] | : . ' , ; ` 1. sequential:
[08:10:11.214] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:11.214] | : . ' , ; `    - tweaked: FALSE
[08:10:11.214] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.215] | : . ' , ; ` List of 1
[08:10:11.215] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.215] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.215] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:10:11.215] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.215] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.215] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.215] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.215] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.218] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:10:11.219] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:10:11.219] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.219] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:10:11.219] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.219] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.219] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:10:11.219] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.219] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.219] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.219] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.222] | : . ' , ; ` | : init: TRUE
[08:10:11.222] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:10:11.223] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:10:11.223] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:10:11.223] | : . ' , ; ` | : .  list()
[08:10:11.223] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:10:11.223] | : . ' , ; ` | : .  list()
[08:10:11.224] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:10:11.224] | : . ' , ; ` | : . Dotted pair list of 2
[08:10:11.224] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:10:11.224] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:10:11.225] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:10:11.225] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:10:11.225] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:10:11.225] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.225] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:10:11.226] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:11.226] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:11.228] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:11.228] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:11.228] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:11.228] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:10:11.228] | : . ' , ; ` | : New stack:
[08:10:11.228] | : . ' , ; ` | : List of 1
[08:10:11.228] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.228] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.228] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.228] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:11.228] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.228] | : . ' , ; ` | :     ...)  
[08:10:11.228] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.228] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.228] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:10:11.228] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.228] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.228] | : . ' , ; ` | :     ...)  
[08:10:11.228] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.228] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.232] | : . ' , ; ` | : Old stack:
[08:10:11.232] | : . ' , ; ` | : List of 1
[08:10:11.232] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.232] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.232] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:11.232] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.232] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.232] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.232] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.232] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324bb2d48> 
[08:10:11.232] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.232] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.232] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.235] | : . ' , ; ` | : Not identical
[08:10:11.235] | : . ' , ; ` | : all.equal() for future ...
[08:10:11.235] | : . ' , ; ` | : . List of 2
[08:10:11.235] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.235] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.235] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.235] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:10:11.235] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.235] | : . ' , ; ` | : .     ...)  
[08:10:11.235] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.235] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.235] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:10:11.235] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.235] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.235] | : . ' , ; ` | : .     ...)  
[08:10:11.235] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.235] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.235] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.235] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:10:11.235] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.235] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.235] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.235] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.235] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324bb2d48> 
[08:10:11.235] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.235] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.242] | : . ' , ; ` | : . Formals differ
[08:10:11.242] | : . ' , ; ` | : all.equal() for future ... done
[08:10:11.242] | : . ' , ; ` | : Future strategies differ at level 1
[08:10:11.242] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:10:11.242] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:10:11.242] | : . ' , ; ` | List of future strategies:
[08:10:11.242] | : . ' , ; ` | 1. multicore:
[08:10:11.242] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:10:11.242] | : . ' , ; ` |    - tweaked: FALSE
[08:10:11.242] | : . ' , ; ` |    - call: plan(strategy)
[08:10:11.243] | : . ' , ; ` | List of 1
[08:10:11.243] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.243] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.243] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.243] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:11.243] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.243] | : . ' , ; ` |     ...)  
[08:10:11.243] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.243] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.243] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:10:11.243] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.243] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.243] | : . ' , ; ` |     ...)  
[08:10:11.243] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.243] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.246] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:10:11.246] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:10:11.246] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.246] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.246] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:10:11.246] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:11.247] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:11.247] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:11.247] | readImmediateCondition() ...
[08:10:11.247] | : Path: ‘/tmp/RtmphDP82n/.future/immediateConditions’
[08:10:11.248] | : Number of RDS files: 0
[08:10:11.248] | : Returned conditions set:
[08:10:11.248] | :  list()
[08:10:11.251] | readImmediateCondition() ... done
[08:10:11.252] | result() for MulticoreFuture ...
[08:10:11.252] | result() for MulticoreFuture ... done
[08:10:11.252] | signalConditions() ...
[08:10:11.253] | : include = ‘immediateCondition’
[08:10:11.253] | : exclude = 
[08:10:11.253] | : resignal = FALSE
[08:10:11.253] | : Number of conditions: 6
[08:10:11.253] | :  int 6
[08:10:11.254] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.255] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.255] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.255] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.255] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.255] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.256] | signalConditions() ... done
[08:10:11.256] result() for MulticoreFuture ... done
[08:10:11.256] value() for MulticoreFuture (<unnamed-15>) ...
[08:10:11.256] | result() for MulticoreFuture ...
[08:10:11.257] | result() for MulticoreFuture ... done
[08:10:11.257] | result() for MulticoreFuture ...
[08:10:11.257] | result() for MulticoreFuture ... done
[08:10:11.257] | signalConditions() ...
[08:10:11.257] | : include = ‘immediateCondition’
[08:10:11.257] | : exclude = 
[08:10:11.258] | : resignal = FALSE
[08:10:11.258] | : Number of conditions: 6
[08:10:11.258] | :  int 6
[08:10:11.258] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.259] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.259] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.259] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.259] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.259] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.259] | signalConditions() ... done
[08:10:11.259] | relay stdout ...
[1] 42
[08:10:11.260] | relay stdout ... done
[08:10:11.260] | check for misuse ...
[08:10:11.260] | check for misuse ... done
[08:10:11.260] | relay conditions ...
[08:10:11.260] | : Future state: ‘finished’
[08:10:11.260] | : result() for MulticoreFuture ...
[08:10:11.260] | : result() for MulticoreFuture ... done
[08:10:11.261] | : signalConditions() ...
[08:10:11.261] | : . include = ‘condition’
[08:10:11.261] | : . exclude = ‘immediateCondition’
[08:10:11.261] | : . resignal = TRUE
[08:10:11.261] | : . Number of conditions: 6
[08:10:11.261] | : .  int 6
[08:10:11.262] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.262] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.185] | : . ' , attachPackages() ...
[08:10:11.262] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.262] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.185] | : . ' , ; packages: [n=1] ‘future’
[08:10:11.262] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.263] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.186] | : . ' , attachPackages() ... done
[08:10:11.263] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.263] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.186] | : . ' , attachPackages() ...
[08:10:11.263] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.263] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.186] | : . ' , ; packages: [n=0] 
[08:10:11.263] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.264] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.187] | : . ' , attachPackages() ... done
[08:10:11.264] | : signalConditions() ... done
[08:10:11.264] | relay conditions ... done
[08:10:11.264] value() for MulticoreFuture (<unnamed-15>) ... done
[08:10:11.264] result() for MulticoreFuture ...
[08:10:11.264] result() for MulticoreFuture ... done
- stdout = NA
[08:10:11.264] future(..., label = NULL) ...
[08:10:11.265] | lazy: FALSE
[08:10:11.265] | stdout: NA
[08:10:11.265] | conditions: [n=1] ‘condition’
[08:10:11.265] | gc: FALSE
[08:10:11.265] | earlySignal: FALSE
[08:10:11.265] | getGlobalsAndPackages() ...
[08:10:11.265] | : Searching for globals ...
[08:10:11.297] | : . globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:10:11.297] | : Searching for globals ... done
[08:10:11.297] | : Resolving globals: FALSE
[08:10:11.297] | : Search for packages associated with the globals ...
[08:10:11.297] | : . Packages associated with globals: [2] ‘base’, ‘utils’
[08:10:11.298] | : . Packages: [2] ‘base’, ‘utils’
[08:10:11.298] | : Search for packages associated with the globals ... done
[08:10:11.298] | : Packages after dropping 'base': [1] ‘utils’
[08:10:11.298] | : Packages after dropping non-attached packages: [1] ‘utils’
[08:10:11.298] | : globals: [0] 
[08:10:11.298] | : packages: [1] ‘utils’
[08:10:11.298] | getGlobalsAndPackages() ... done
[08:10:11.299] | run() for ‘Future’ (<unnamed-16>) ...
[08:10:11.299] | : state: ‘created’
[08:10:11.299] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.299] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.299] | : Using MulticoreFutureBackend ...
[08:10:11.299] | : . Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:10:11.299] | : . Launching futures ...
[08:10:11.299] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:10:11.299] | : . ' , getFutureData() ...
[08:10:11.300] | : . ' , ; getFutureCore() ...
[08:10:11.300] | : . ' , ; ` Packages needed by the future expression (n = 1): ‘utils’
[08:10:11.300] | : . ' , ; getFutureCore() ... done
[08:10:11.300] | : . ' , ; getFutureCapture() ...
[08:10:11.300] | : . ' , ; getFutureCapture() ... done
[08:10:11.300] | : . ' , ; getFutureContext() ...
[08:10:11.300] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.300] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:10:11.300] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.301] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:10:11.301] | : . ' , ; getFutureContext() ... done
[08:10:11.301] | : . ' , getFutureData() ... done
[08:10:11.301] | : . ' , requestCore(..., workers = 2) ...
[08:10:11.301] | : . ' , requestCore(..., workers = 2) ... done
[08:10:11.303] | : . ' , MulticoreFuture started
[08:10:11.304] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:10:11.304] | : . Launching futures ... done
[08:10:11.304] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:10:11.305] | : Using MulticoreFutureBackend ... done
[08:10:11.305] | run() for ‘Future’ (<unnamed-16>) ... done
[08:10:11.305] future(..., label = NULL) ... done
[08:10:11.306] result() for MulticoreFuture ...
[08:10:11.307] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.308] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:10:11.308] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.308] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:11.309] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:11.309] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:10:11.309] | : . ' , ; ` | New stack:
[08:10:11.309] | : . ' , ; ` | List of 1
[08:10:11.309] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.309] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.309] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:10:11.309] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.309] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.309] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.309] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.309] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.318] | : . ' , ; ` | Old stack:
[08:10:11.318] | : . ' , ; ` | List of 1
[08:10:11.318] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.318] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.318] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.318] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:11.318] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.318] | : . ' , ; ` |     ...)  
[08:10:11.318] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.318] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.318] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:10:11.318] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.318] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.318] | : . ' , ; ` |     ...)  
[08:10:11.318] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.318] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.325] | : . ' , ; ` | Not identical
[08:10:11.325] | : . ' , ; ` | all.equal() for future ...
[08:10:11.325] | : . ' , ; ` | : List of 2
[08:10:11.325] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.325] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.325] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:10:11.325] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.325] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.325] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.325] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.325] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.325] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.325] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.325] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:11.325] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.325] | : . ' , ; ` | :     ...)  
[08:10:11.325] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.325] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.325] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:10:11.325] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.325] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.325] | : . ' , ; ` | :     ...)  
[08:10:11.325] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.333] | : . ' , ; ` | : Formals differ
[08:10:11.334] | : . ' , ; ` | all.equal() for future ... done
[08:10:11.334] | : . ' , ; ` | Future strategies differ at level 1
[08:10:11.334] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:10:11.334] | : . ' , ; ` plan(): Setting new future backend stack:
[08:10:11.334] | : . ' , ; ` List of future strategies:
[08:10:11.334] | : . ' , ; ` 1. sequential:
[08:10:11.334] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:11.334] | : . ' , ; `    - tweaked: FALSE
[08:10:11.334] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.335] | : . ' , ; ` List of 1
[08:10:11.335] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.335] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.335] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:10:11.335] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.335] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.335] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.335] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.335] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.338] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:10:11.338] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:10:11.338] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.338] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:10:11.339] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.339] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.339] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:10:11.339] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.339] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.339] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.339] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.341] | : . ' , ; ` | : init: TRUE
[08:10:11.341] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:10:11.341] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:10:11.341] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:10:11.341] | : . ' , ; ` | : .  list()
[08:10:11.341] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:10:11.342] | : . ' , ; ` | : .  list()
[08:10:11.342] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:10:11.343] | : . ' , ; ` | : . Dotted pair list of 2
[08:10:11.343] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:10:11.343] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:10:11.344] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:10:11.345] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:10:11.345] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:10:11.345] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.345] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:10:11.345] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:11.345] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[08:10:11.348] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:11.348] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:11.348] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:11.348] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:10:11.348] | : . ' , ; ` | : New stack:
[08:10:11.348] | : . ' , ; ` | : List of 1
[08:10:11.348] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.348] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.348] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.348] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:11.348] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.348] | : . ' , ; ` | :     ...)  
[08:10:11.348] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.348] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.348] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:10:11.348] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.348] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.348] | : . ' , ; ` | :     ...)  
[08:10:11.348] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.348] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.351] | : . ' , ; ` | : Old stack:
[08:10:11.352] | : . ' , ; ` | : List of 1
[08:10:11.352] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.352] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.352] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:11.352] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.352] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.352] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.352] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.352] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324b49420> 
[08:10:11.352] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.352] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.352] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.355] | : . ' , ; ` | : Not identical
[08:10:11.355] | : . ' , ; ` | : all.equal() for future ...
[08:10:11.355] | : . ' , ; ` | : . List of 2
[08:10:11.355] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.355] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.355] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.355] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:10:11.355] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.355] | : . ' , ; ` | : .     ...)  
[08:10:11.355] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.355] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.355] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:10:11.355] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.355] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.355] | : . ' , ; ` | : .     ...)  
[08:10:11.355] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.355] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.355] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.355] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:10:11.355] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.355] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.355] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.355] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.355] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324b49420> 
[08:10:11.355] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.355] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.360] | : . ' , ; ` | : . Formals differ
[08:10:11.361] | : . ' , ; ` | : all.equal() for future ... done
[08:10:11.361] | : . ' , ; ` | : Future strategies differ at level 1
[08:10:11.361] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:10:11.361] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:10:11.361] | : . ' , ; ` | List of future strategies:
[08:10:11.361] | : . ' , ; ` | 1. multicore:
[08:10:11.361] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:10:11.361] | : . ' , ; ` |    - tweaked: FALSE
[08:10:11.361] | : . ' , ; ` |    - call: plan(strategy)
[08:10:11.362] | : . ' , ; ` | List of 1
[08:10:11.362] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.362] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.362] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.362] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:11.362] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.362] | : . ' , ; ` |     ...)  
[08:10:11.362] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.362] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.362] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:10:11.362] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.362] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.362] | : . ' , ; ` |     ...)  
[08:10:11.362] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.362] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.366] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:10:11.366] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:10:11.366] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.366] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.366] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:10:11.366] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:11.366] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:11.366] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:11.367] | readImmediateCondition() ...
[08:10:11.367] | : Path: ‘/tmp/RtmphDP82n/.future/immediateConditions’
[08:10:11.367] | : Number of RDS files: 0
[08:10:11.368] | : Returned conditions set:
[08:10:11.368] | :  list()
[08:10:11.369] | readImmediateCondition() ... done
[08:10:11.369] | result() for MulticoreFuture ...
[08:10:11.369] | result() for MulticoreFuture ... done
[08:10:11.369] | signalConditions() ...
[08:10:11.370] | : include = ‘immediateCondition’
[08:10:11.370] | : exclude = 
[08:10:11.370] | : resignal = FALSE
[08:10:11.370] | : Number of conditions: 6
[08:10:11.370] | :  int 6
[08:10:11.371] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.371] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.373] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.373] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.374] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.374] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.374] | signalConditions() ... done
[08:10:11.374] result() for MulticoreFuture ... done
List of 16
 $ value              : int 42
 $ visible            : logi TRUE
 $ stdout             : NULL
 $ conditions         :List of 6
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:11.304] | : . ' , attachPackages() ...\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:11.305] | : . ' , ; packages: [n=1] ‘future’\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg), appendLF = appendLF)
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:11.305] | : . ' , attachPackages() ... done\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:11.306] | : . ' , attachPackages() ...\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:11.306] | : . ' , ; packages: [n=1] ‘utils’\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg), appendLF = appendLF)
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
  ..$ :List of 2
  .. ..$ condition:List of 2
  .. .. ..$ message: chr "[08:10:11.306] | : . ' , attachPackages() ... done\n"
  .. .. ..$ call   : language message(sprintf("%s%s", prefix, msg))
  .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
  .. ..$ signaled : int 0
 $ rng                : logi FALSE
 $ seed               : NULL
 $ misuseGlobalEnv    : NULL
 $ misuseConnections  : NULL
 $ misuseDevices      : NULL
 $ misuseDefaultDevice: list()
 $ started            : POSIXct[1:1], format: "2025-06-17 08:10:11"
 $ finished           : POSIXct[1:1], format: "2025-06-17 08:10:11"
 $ uuid               : chr [1:2] "01885b60b3d40eac4dc41a106424dbc9" "16"
 $ session_uuid       : chr "eab9903dc97d428a1d53b0e81ca1435b"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "28bb34de9501"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 75614
  .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:10:11"
  .. ..$ random: int 2147483647
 $ r_info             :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 5 1
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version            : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[08:10:11.400] value() for MulticoreFuture (<unnamed-16>) ...
[08:10:11.400] | result() for MulticoreFuture ...
[08:10:11.400] | result() for MulticoreFuture ... done
[08:10:11.400] | result() for MulticoreFuture ...
[08:10:11.400] | result() for MulticoreFuture ... done
[08:10:11.400] | signalConditions() ...
[08:10:11.400] | : include = ‘immediateCondition’
[08:10:11.401] | : exclude = 
[08:10:11.401] | : resignal = FALSE
[08:10:11.401] | : Number of conditions: 6
[08:10:11.401] | :  int 6
[08:10:11.401] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.401] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.402] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.402] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.402] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.402] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.402] | signalConditions() ... done
[08:10:11.402] | relay stdout ...
[08:10:11.402] | relay stdout ... done
[08:10:11.402] | check for misuse ...
[08:10:11.402] | check for misuse ... done
[08:10:11.402] | relay conditions ...
[08:10:11.403] | : Future state: ‘finished’
[08:10:11.403] | : result() for MulticoreFuture ...
[08:10:11.403] | : result() for MulticoreFuture ... done
[08:10:11.403] | : signalConditions() ...
[08:10:11.403] | : . include = ‘condition’
[08:10:11.403] | : . exclude = ‘immediateCondition’
[08:10:11.403] | : . resignal = TRUE
[08:10:11.403] | : . Number of conditions: 6
[08:10:11.403] | : .  int 6
[08:10:11.404] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.404] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.304] | : . ' , attachPackages() ...
[08:10:11.404] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.404] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.305] | : . ' , ; packages: [n=1] ‘future’
[08:10:11.404] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.404] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.305] | : . ' , attachPackages() ... done
[08:10:11.404] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.405] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.306] | : . ' , attachPackages() ...
[08:10:11.405] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.405] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.306] | : . ' , ; packages: [n=1] ‘utils’
[08:10:11.405] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.405] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.306] | : . ' , attachPackages() ... done
[08:10:11.405] | : signalConditions() ... done
[08:10:11.405] | relay conditions ... done
[08:10:11.405] value() for MulticoreFuture (<unnamed-16>) ... done
[08:10:11.406] future(..., label = NULL) ...
[08:10:11.406] | lazy: FALSE
[08:10:11.406] | stdout: NA
[08:10:11.406] | conditions: [n=1] ‘condition’
[08:10:11.406] | gc: FALSE
[08:10:11.406] | earlySignal: FALSE
[08:10:11.406] | getGlobalsAndPackages() ...
[08:10:11.406] | : Searching for globals ...
[08:10:11.435] | : . globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:10:11.436] | : Searching for globals ... done
[08:10:11.436] | : Resolving globals: FALSE
[08:10:11.436] | : Search for packages associated with the globals ...
[08:10:11.436] | : . Packages associated with globals: [2] ‘base’, ‘utils’
[08:10:11.436] | : . Packages: [2] ‘base’, ‘utils’
[08:10:11.437] | : Search for packages associated with the globals ... done
[08:10:11.437] | : Packages after dropping 'base': [1] ‘utils’
[08:10:11.437] | : Packages after dropping non-attached packages: [1] ‘utils’
[08:10:11.437] | : globals: [0] 
[08:10:11.437] | : packages: [1] ‘utils’
[08:10:11.437] | getGlobalsAndPackages() ... done
[08:10:11.437] | run() for ‘Future’ (<unnamed-17>) ...
[08:10:11.438] | : state: ‘created’
[08:10:11.438] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.438] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.438] | : Using MulticoreFutureBackend ...
[08:10:11.438] | : . Number of futures since start: 7 (7 created, 7 launched, 7 finished)
[08:10:11.438] | : . Launching futures ...
[08:10:11.438] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:10:11.438] | : . ' , getFutureData() ...
[08:10:11.438] | : . ' , ; getFutureCore() ...
[08:10:11.439] | : . ' , ; ` Packages needed by the future expression (n = 1): ‘utils’
[08:10:11.439] | : . ' , ; getFutureCore() ... done
[08:10:11.439] | : . ' , ; getFutureCapture() ...
[08:10:11.439] | : . ' , ; getFutureCapture() ... done
[08:10:11.439] | : . ' , ; getFutureContext() ...
[08:10:11.439] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.439] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:10:11.439] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.439] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:10:11.440] | : . ' , ; getFutureContext() ... done
[08:10:11.440] | : . ' , getFutureData() ... done
[08:10:11.440] | : . ' , requestCore(..., workers = 2) ...
[08:10:11.440] | : . ' , requestCore(..., workers = 2) ... done
[08:10:11.442] | : . ' , MulticoreFuture started
[08:10:11.442] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:10:11.443] | : . Launching futures ... done
[08:10:11.443] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:10:11.443] | : Using MulticoreFutureBackend ... done
[08:10:11.443] | run() for ‘Future’ (<unnamed-17>) ... done
[08:10:11.443] future(..., label = NULL) ... done
[08:10:11.444] value() for MulticoreFuture (<unnamed-17>) ...
[08:10:11.444] | result() for MulticoreFuture ...
[08:10:11.445] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.445] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:10:11.446] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.446] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:11.446] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:11.447] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:10:11.449] | : . ' , ; ` | New stack:
[08:10:11.449] | : . ' , ; ` | List of 1
[08:10:11.449] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.449] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.449] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:10:11.449] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.449] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.449] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.449] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.449] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.457] | : . ' , ; ` | Old stack:
[08:10:11.457] | : . ' , ; ` | List of 1
[08:10:11.457] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.457] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.457] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.457] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:11.457] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.457] | : . ' , ; ` |     ...)  
[08:10:11.457] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.457] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.457] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:10:11.457] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.457] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.457] | : . ' , ; ` |     ...)  
[08:10:11.457] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.457] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.463] | : . ' , ; ` | Not identical
[08:10:11.463] | : . ' , ; ` | all.equal() for future ...
[08:10:11.463] | : . ' , ; ` | : List of 2
[08:10:11.463] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.463] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.463] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:10:11.463] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.463] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.463] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.463] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.463] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.463] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.463] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.463] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:11.463] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.463] | : . ' , ; ` | :     ...)  
[08:10:11.463] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.463] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.463] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:10:11.463] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.463] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.463] | : . ' , ; ` | :     ...)  
[08:10:11.463] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.471] | : . ' , ; ` | : Formals differ
[08:10:11.471] | : . ' , ; ` | all.equal() for future ... done
[08:10:11.471] | : . ' , ; ` | Future strategies differ at level 1
[08:10:11.471] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:10:11.471] | : . ' , ; ` plan(): Setting new future backend stack:
[08:10:11.471] | : . ' , ; ` List of future strategies:
[08:10:11.471] | : . ' , ; ` 1. sequential:
[08:10:11.471] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:11.471] | : . ' , ; `    - tweaked: FALSE
[08:10:11.471] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.472] | : . ' , ; ` List of 1
[08:10:11.472] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.472] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.472] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:10:11.472] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.472] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.472] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.472] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.472] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.475] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:10:11.475] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:10:11.475] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.475] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:10:11.476] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.476] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.476] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:10:11.476] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.476] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.476] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.476] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.479] | : . ' , ; ` | : init: TRUE
[08:10:11.479] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:10:11.479] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:10:11.479] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:10:11.479] | : . ' , ; ` | : .  list()
[08:10:11.480] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:10:11.480] | : . ' , ; ` | : .  list()
[08:10:11.480] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:10:11.480] | : . ' , ; ` | : . Dotted pair list of 2
[08:10:11.480] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:10:11.480] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:10:11.481] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:10:11.481] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:10:11.482] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:10:11.482] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.482] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:10:11.482] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:11.482] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[08:10:11.484] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:11.485] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:11.485] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:11.485] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:10:11.485] | : . ' , ; ` | : New stack:
[08:10:11.485] | : . ' , ; ` | : List of 1
[08:10:11.485] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.485] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.485] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.485] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:11.485] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.485] | : . ' , ; ` | :     ...)  
[08:10:11.485] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.485] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.485] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:10:11.485] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.485] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.485] | : . ' , ; ` | :     ...)  
[08:10:11.485] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.485] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.488] | : . ' , ; ` | : Old stack:
[08:10:11.488] | : . ' , ; ` | : List of 1
[08:10:11.488] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.488] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.488] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:11.488] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.488] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.488] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.488] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.488] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249ade20> 
[08:10:11.488] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.488] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.488] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.492] | : . ' , ; ` | : Not identical
[08:10:11.492] | : . ' , ; ` | : all.equal() for future ...
[08:10:11.492] | : . ' , ; ` | : . List of 2
[08:10:11.492] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.492] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.492] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.492] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:10:11.492] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.492] | : . ' , ; ` | : .     ...)  
[08:10:11.492] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.492] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.492] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:10:11.492] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.492] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.492] | : . ' , ; ` | : .     ...)  
[08:10:11.492] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.492] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.492] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.492] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:10:11.492] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.492] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.492] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.492] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.492] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d3249ade20> 
[08:10:11.492] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.492] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.500] | : . ' , ; ` | : . Formals differ
[08:10:11.500] | : . ' , ; ` | : all.equal() for future ... done
[08:10:11.500] | : . ' , ; ` | : Future strategies differ at level 1
[08:10:11.500] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:10:11.501] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:10:11.501] | : . ' , ; ` | List of future strategies:
[08:10:11.501] | : . ' , ; ` | 1. multicore:
[08:10:11.501] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:10:11.501] | : . ' , ; ` |    - tweaked: FALSE
[08:10:11.501] | : . ' , ; ` |    - call: plan(strategy)
[08:10:11.501] | : . ' , ; ` | List of 1
[08:10:11.501] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.501] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.501] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.501] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:11.501] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.501] | : . ' , ; ` |     ...)  
[08:10:11.501] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.501] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.501] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:10:11.501] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.501] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.501] | : . ' , ; ` |     ...)  
[08:10:11.501] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.501] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.504] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:10:11.504] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:10:11.505] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.505] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.505] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:10:11.505] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:11.505] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:11.505] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:11.506] | : readImmediateCondition() ...
[08:10:11.506] | : . Path: ‘/tmp/RtmphDP82n/.future/immediateConditions’
[08:10:11.506] | : . Number of RDS files: 0
[08:10:11.506] | : . Returned conditions set:
[08:10:11.507] | : .  list()
[08:10:11.508] | : readImmediateCondition() ... done
[08:10:11.509] | : result() for MulticoreFuture ...
[08:10:11.509] | : result() for MulticoreFuture ... done
[08:10:11.510] | : signalConditions() ...
[08:10:11.510] | : . include = ‘immediateCondition’
[08:10:11.510] | : . exclude = 
[08:10:11.510] | : . resignal = FALSE
[08:10:11.510] | : . Number of conditions: 6
[08:10:11.511] | : .  int 6
[08:10:11.512] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.512] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.512] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.512] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.512] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.513] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.513] | : signalConditions() ... done
[08:10:11.513] | result() for MulticoreFuture ... done
[08:10:11.513] | result() for MulticoreFuture ...
[08:10:11.514] | result() for MulticoreFuture ... done
[08:10:11.514] | signalConditions() ...
[08:10:11.514] | : include = ‘immediateCondition’
[08:10:11.514] | : exclude = 
[08:10:11.514] | : resignal = FALSE
[08:10:11.514] | : Number of conditions: 6
[08:10:11.515] | :  int 6
[08:10:11.515] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.515] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.516] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.516] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.516] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.516] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.516] | signalConditions() ... done
[08:10:11.516] | relay stdout ...
[08:10:11.516] | relay stdout ... done
[08:10:11.516] | check for misuse ...
[08:10:11.517] | check for misuse ... done
[08:10:11.517] | relay conditions ...
[08:10:11.517] | : Future state: ‘finished’
[08:10:11.517] | : result() for MulticoreFuture ...
[08:10:11.517] | : result() for MulticoreFuture ... done
[08:10:11.517] | : signalConditions() ...
[08:10:11.517] | : . include = ‘condition’
[08:10:11.518] | : . exclude = ‘immediateCondition’
[08:10:11.518] | : . resignal = TRUE
[08:10:11.518] | : . Number of conditions: 6
[08:10:11.518] | : .  int 6
[08:10:11.518] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.519] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.443] | : . ' , attachPackages() ...
[08:10:11.519] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.519] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.443] | : . ' , ; packages: [n=1] ‘future’
[08:10:11.519] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.519] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.444] | : . ' , attachPackages() ... done
[08:10:11.519] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.520] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.444] | : . ' , attachPackages() ...
[08:10:11.520] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.520] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.444] | : . ' , ; packages: [n=1] ‘utils’
[08:10:11.520] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.520] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.444] | : . ' , attachPackages() ... done
[08:10:11.520] | : signalConditions() ... done
[08:10:11.520] | relay conditions ... done
[08:10:11.521] value() for MulticoreFuture (<unnamed-17>) ... done
- stdout = structure(TRUE, drop = TRUE)
[08:10:11.521] future(..., label = NULL) ...
[08:10:11.521] | lazy: FALSE
[08:10:11.521] | stdout: TRUE
[08:10:11.521] | conditions: [n=1] ‘condition’
[08:10:11.521] | gc: FALSE
[08:10:11.521] | earlySignal: FALSE
[08:10:11.522] | getGlobalsAndPackages() ...
[08:10:11.522] | : Searching for globals ...
[08:10:11.525] | : . globals found: [1] ‘print’
[08:10:11.525] | : Searching for globals ... done
[08:10:11.526] | : Resolving globals: FALSE
[08:10:11.526] | : Search for packages associated with the globals ...
[08:10:11.526] | : . Packages associated with globals: [1] ‘base’
[08:10:11.526] | : . Packages: [1] ‘base’
[08:10:11.526] | : Search for packages associated with the globals ... done
[08:10:11.526] | : Packages after dropping 'base': [0] 
[08:10:11.526] | : globals: [0] 
[08:10:11.527] | : packages: [0] 
[08:10:11.527] | getGlobalsAndPackages() ... done
[08:10:11.527] | run() for ‘Future’ (<unnamed-18>) ...
[08:10:11.527] | : state: ‘created’
[08:10:11.527] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.527] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.528] | : Using MulticoreFutureBackend ...
[08:10:11.528] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:10:11.528] | : . Launching futures ...
[08:10:11.528] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:10:11.528] | : . ' , getFutureData() ...
[08:10:11.528] | : . ' , ; getFutureCore() ...
[08:10:11.528] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:10:11.528] | : . ' , ; getFutureCore() ... done
[08:10:11.528] | : . ' , ; getFutureCapture() ...
[08:10:11.529] | : . ' , ; getFutureCapture() ... done
[08:10:11.529] | : . ' , ; getFutureContext() ...
[08:10:11.529] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.529] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:10:11.529] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.529] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:10:11.529] | : . ' , ; getFutureContext() ... done
[08:10:11.530] | : . ' , getFutureData() ... done
[08:10:11.530] | : . ' , requestCore(..., workers = 2) ...
[08:10:11.530] | : . ' , requestCore(..., workers = 2) ... done
[08:10:11.532] | : . ' , MulticoreFuture started
[08:10:11.532] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:10:11.532] | : . Launching futures ... done
[08:10:11.533] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:10:11.533] | : Using MulticoreFutureBackend ... done
[08:10:11.533] | run() for ‘Future’ (<unnamed-18>) ... done
[08:10:11.533] future(..., label = NULL) ... done
[08:10:11.534] result() for MulticoreFuture ...
[08:10:11.535] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.535] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:10:11.535] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.536] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:11.536] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:11.536] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:10:11.537] | : . ' , ; ` | New stack:
[08:10:11.537] | : . ' , ; ` | List of 1
[08:10:11.537] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.537] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.537] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:10:11.537] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.537] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.537] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.537] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.537] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.547] | : . ' , ; ` | Old stack:
[08:10:11.547] | : . ' , ; ` | List of 1
[08:10:11.547] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.547] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.547] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.547] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:11.547] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.547] | : . ' , ; ` |     ...)  
[08:10:11.547] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.547] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.547] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:10:11.547] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.547] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.547] | : . ' , ; ` |     ...)  
[08:10:11.547] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.547] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.553] | : . ' , ; ` | Not identical
[08:10:11.553] | : . ' , ; ` | all.equal() for future ...
[08:10:11.553] | : . ' , ; ` | : List of 2
[08:10:11.553] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.553] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.553] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:10:11.553] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.553] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.553] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.553] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.553] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.553] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.553] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.553] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:11.553] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.553] | : . ' , ; ` | :     ...)  
[08:10:11.553] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.553] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.553] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:10:11.553] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.553] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.553] | : . ' , ; ` | :     ...)  
[08:10:11.553] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.561] | : . ' , ; ` | : Formals differ
[08:10:11.562] | : . ' , ; ` | all.equal() for future ... done
[08:10:11.562] | : . ' , ; ` | Future strategies differ at level 1
[08:10:11.562] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:10:11.562] | : . ' , ; ` plan(): Setting new future backend stack:
[08:10:11.562] | : . ' , ; ` List of future strategies:
[08:10:11.562] | : . ' , ; ` 1. sequential:
[08:10:11.562] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:10:11.562] | : . ' , ; `    - tweaked: FALSE
[08:10:11.562] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.563] | : . ' , ; ` List of 1
[08:10:11.563] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.563] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.563] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:10:11.563] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.563] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.563] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.563] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.563] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.567] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:10:11.567] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:10:11.567] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.567] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:10:11.567] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.567] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.567] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:10:11.567] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.567] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.567] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.567] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.573] | : . ' , ; ` | : init: TRUE
[08:10:11.573] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:10:11.573] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:10:11.573] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:10:11.573] | : . ' , ; ` | : .  list()
[08:10:11.573] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:10:11.574] | : . ' , ; ` | : .  list()
[08:10:11.574] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:10:11.574] | : . ' , ; ` | : . Dotted pair list of 2
[08:10:11.574] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:10:11.574] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:10:11.575] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:10:11.575] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:10:11.575] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:10:11.576] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.576] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:10:11.576] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:11.576] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:11.579] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:11.579] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:10:11.579] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:10:11.579] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:10:11.579] | : . ' , ; ` | : New stack:
[08:10:11.579] | : . ' , ; ` | : List of 1
[08:10:11.579] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.579] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.579] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.579] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:11.579] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.579] | : . ' , ; ` | :     ...)  
[08:10:11.579] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.579] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.579] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:10:11.579] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.579] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.579] | : . ' , ; ` | :     ...)  
[08:10:11.579] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.579] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.582] | : . ' , ; ` | : Old stack:
[08:10:11.583] | : . ' , ; ` | : List of 1
[08:10:11.583] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.583] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.583] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:10:11.583] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.583] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.583] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.583] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.583] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324f878d8> 
[08:10:11.583] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.583] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.583] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.586] | : . ' , ; ` | : Not identical
[08:10:11.586] | : . ' , ; ` | : all.equal() for future ...
[08:10:11.586] | : . ' , ; ` | : . List of 2
[08:10:11.586] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.586] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.586] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.586] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:10:11.586] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.586] | : . ' , ; ` | : .     ...)  
[08:10:11.586] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.586] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.586] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:10:11.586] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.586] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.586] | : . ' , ; ` | : .     ...)  
[08:10:11.586] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.586] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.586] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:10:11.586] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:10:11.586] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.586] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.586] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.586] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:10:11.586] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324f878d8> 
[08:10:11.586] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:10:11.586] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:10:11.592] | : . ' , ; ` | : . Formals differ
[08:10:11.593] | : . ' , ; ` | : all.equal() for future ... done
[08:10:11.593] | : . ' , ; ` | : Future strategies differ at level 1
[08:10:11.593] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:10:11.593] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:10:11.593] | : . ' , ; ` | List of future strategies:
[08:10:11.593] | : . ' , ; ` | 1. multicore:
[08:10:11.593] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:10:11.593] | : . ' , ; ` |    - tweaked: FALSE
[08:10:11.593] | : . ' , ; ` |    - call: plan(strategy)
[08:10:11.593] | : . ' , ; ` | List of 1
[08:10:11.593] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.593] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.593] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.593] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:10:11.593] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.593] | : . ' , ; ` |     ...)  
[08:10:11.593] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.593] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.593] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:10:11.593] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.593] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.593] | : . ' , ; ` |     ...)  
[08:10:11.593] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.593] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.597] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:10:11.597] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:10:11.597] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.597] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.597] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:10:11.597] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:10:11.598] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:11.598] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:10:11.598] | readImmediateCondition() ...
[08:10:11.598] | : Path: ‘/tmp/RtmphDP82n/.future/immediateConditions’
[08:10:11.599] | : Number of RDS files: 0
[08:10:11.599] | : Returned conditions set:
[08:10:11.599] | :  list()
[08:10:11.600] | readImmediateCondition() ... done
[08:10:11.600] | result() for MulticoreFuture ...
[08:10:11.600] | result() for MulticoreFuture ... done
[08:10:11.602] | signalConditions() ...
[08:10:11.602] | : include = ‘immediateCondition’
[08:10:11.603] | : exclude = 
[08:10:11.603] | : resignal = FALSE
[08:10:11.603] | : Number of conditions: 6
[08:10:11.603] | :  int 6
[08:10:11.604] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.604] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.605] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.605] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.605] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.605] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.606] | signalConditions() ... done
[08:10:11.606] result() for MulticoreFuture ... done
[08:10:11.606] value() for MulticoreFuture (<unnamed-18>) ...
[08:10:11.606] | result() for MulticoreFuture ...
[08:10:11.606] | result() for MulticoreFuture ... done
[08:10:11.607] | result() for MulticoreFuture ...
[08:10:11.607] | result() for MulticoreFuture ... done
[08:10:11.607] | signalConditions() ...
[08:10:11.607] | : include = ‘immediateCondition’
[08:10:11.607] | : exclude = 
[08:10:11.608] | : resignal = FALSE
[08:10:11.608] | : Number of conditions: 6
[08:10:11.608] | :  int 6
[08:10:11.609] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.609] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.609] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.609] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.609] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.609] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.609] | signalConditions() ... done
[08:10:11.610] | relay stdout ...
[1] 42
[08:10:11.610] | relay stdout ... done
[08:10:11.610] | check for misuse ...
[08:10:11.610] | check for misuse ... done
[08:10:11.610] | relay conditions ...
[08:10:11.610] | : Future state: ‘finished’
[08:10:11.610] | : result() for MulticoreFuture ...
[08:10:11.611] | : result() for MulticoreFuture ... done
[08:10:11.611] | : signalConditions() ...
[08:10:11.611] | : . include = ‘condition’
[08:10:11.611] | : . exclude = ‘immediateCondition’
[08:10:11.611] | : . resignal = TRUE
[08:10:11.611] | : . Number of conditions: 6
[08:10:11.611] | : .  int 6
[08:10:11.612] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.612] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.533] | : . ' , attachPackages() ...
[08:10:11.612] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.612] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.533] | : . ' , ; packages: [n=1] ‘future’
[08:10:11.612] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.613] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.533] | : . ' , attachPackages() ... done
[08:10:11.613] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.613] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.534] | : . ' , attachPackages() ...
[08:10:11.613] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.613] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.534] | : . ' , ; packages: [n=0] 
[08:10:11.613] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:10:11.614] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:10:11.534] | : . ' , attachPackages() ... done
[08:10:11.614] | : signalConditions() ... done
[08:10:11.614] | relay conditions ... done
[08:10:11.614] value() for MulticoreFuture (<unnamed-18>) ... done
[08:10:11.614] result() for MulticoreFuture ...
[08:10:11.614] result() for MulticoreFuture ... done
multicore ... done
multisession ...
[08:10:11.614] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.615] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:10:11.615] | : all.equal() for FutureStrategyList ...
[08:10:11.615] | : . New stack:
[08:10:11.615] | : . List of 1
[08:10:11.615] | : .  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:10:11.615] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.615] | : .   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:10:11.615] | : .   ..- attr(*, "init")= logi TRUE
[08:10:11.615] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:10:11.615] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:10:11.615] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:10:11.615] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:10:11.615] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:10:11.615] | : .   ..- attr(*, "call")= language plan(strategy)
[08:10:11.615] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.619] | : . Old stack:
[08:10:11.619] | : . List of 1
[08:10:11.619] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.619] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.619] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.619] | : .   ..- attr(*, "init")= chr "done"
[08:10:11.619] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.619] | : .     ...)  
[08:10:11.619] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.619] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.619] | : .   ..- attr(*, "call")= language plan(strategy)
[08:10:11.619] | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.619] | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.619] | : .     ...)  
[08:10:11.619] | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.619] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.623] | : . Not identical
[08:10:11.623] | : . all.equal() for future ...
[08:10:11.623] | : . ' List of 2
[08:10:11.623] | : . '  $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:10:11.623] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.623] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:10:11.623] | : . '   ..- attr(*, "init")= logi TRUE
[08:10:11.623] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:10:11.623] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:10:11.623] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:10:11.623] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:10:11.623] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:10:11.623] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:10:11.623] | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:10:11.623] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:10:11.623] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:10:11.623] | : . '   ..- attr(*, "init")= chr "done"
[08:10:11.623] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.623] | : . '     ...)  
[08:10:11.623] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.623] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.623] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:10:11.623] | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55d324997710> 
[08:10:11.623] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:10:11.623] | : . '     ...)  
[08:10:11.623] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:10:11.631] | : . ' Formals differ
[08:10:11.631] | : . all.equal() for future ... done
[08:10:11.631] | : . Future strategies differ at level 1
[08:10:11.631] | : all.equal() for FutureStrategyList ... done
[08:10:11.631] | : plan(): Setting new future backend stack:
[08:10:11.632] | : List of future strategies:
[08:10:11.632] | : 1. multisession:
[08:10:11.632] | :    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:10:11.632] | :    - tweaked: FALSE
[08:10:11.632] | :    - call: plan(strategy)
[08:10:11.632] | : List of 1
[08:10:11.632] | :  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:10:11.632] | :     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.632] | :   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:10:11.632] | :   ..- attr(*, "init")= logi TRUE
[08:10:11.632] | :   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:10:11.632] | :     gc = FALSE, earlySignal = FALSE, ...)  
[08:10:11.632] | :   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:10:11.632] | :   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:10:11.632] | :   ..- attr(*, "untweakable")= chr "persistent"
[08:10:11.632] | :   ..- attr(*, "call")= language plan(strategy)
[08:10:11.632] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:10:11.635] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:10:11.635] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:11.635] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:10:11.635] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:11.636] | : . Legacy shutdown of cluster workers ...
[08:10:11.636] | : . ' Stopping existing cluster ...
[08:10:11.636] | : . ' , No pre-existing cluster. Skipping
[08:10:11.636] | : . ' Stopping existing cluster ... done
[08:10:11.636] | : . Legacy shutdown of cluster workers ... done
[08:10:11.637] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:10:11.637] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:10:11.637] | : . function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:10:11.637] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:10:11.637] | : .  - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:10:11.637] | : .  - attr(*, "init")= logi TRUE
[08:10:11.637] | : .  - attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:10:11.637] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:10:11.637] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:10:11.637] | : .  - attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:10:11.637] | : .  - attr(*, "untweakable")= chr "persistent"
[08:10:11.637] | : .  - attr(*, "call")= language plan(strategy)
[08:10:11.639] | : . init: TRUE
[08:10:11.639] | : . makeFutureBackend(<multisession>) ...
[08:10:11.639] | : . ' Backend function: <‘NULL’>
[08:10:11.639] | : . ' Evaluator tweak arguments: [n=0]
[08:10:11.639] | : . '  list()
[08:10:11.640] | : . ' Evaluator formal arguments: [n=4]
[08:10:11.640] | : . '  list()
[08:10:11.640] | : . ' Backend factory arguments: [n=4]
[08:10:11.640] | : . ' Dotted pair list of 4
[08:10:11.640] | : . '  $ workers     : language availableCores()
[08:10:11.640] | : . '  $ rscript_libs: language .libPaths()
[08:10:11.640] | : . '  $ gc          : logi FALSE
[08:10:11.640] | : . '  $ earlySignal : logi FALSE
[08:10:11.642] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ...
[08:10:11.642] | : . ' , Arguments:
[08:10:11.642] | : . ' , List of 5
[08:10:11.642] | : . ' ,  $ workers     : Named int 2
[08:10:11.642] | : . ' ,   ..- attr(*, "names")= chr "mc.cores"
[08:10:11.642] | : . ' ,  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:10:11.642] | : . ' ,  $ interrupts  : logi TRUE
[08:10:11.642] | : . ' ,  $ gc          : logi FALSE
[08:10:11.642] | : . ' ,  $ earlySignal : logi FALSE
[08:10:11.646] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[08:10:11.646] | : . ' , ; workers: 2
[08:10:11.646] | : . ' , ; getCluster() ...
[08:10:11.646] | : . ' , ; getCluster() ... done
[08:10:11.646] | : . ' , ; Stopping existing cluster ...
[08:10:11.646] | : . ' , ; ` No pre-existing cluster. Skipping
[08:10:11.646] | : . ' , ; Stopping existing cluster ... done
[08:10:11.647] | : . ' , ; Starting new cluster ...
[08:10:11.647] | : . ' , ; ` makeCluster(workers, ...) ...
[08:10:11.647] | : . ' , ; ` | Arguments:
[08:10:11.647] | : . ' , ; ` | List of 2
[08:10:11.647] | : . ' , ; ` |  $             : int 2
[08:10:11.647] | : . ' , ; ` |  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:10:11.649] | : . ' , ; ` | .makeCluster() ...
[08:10:11.649] | : . ' , ; ` | : workers: ‘2’
[08:10:11.649] | : . ' , ; ` | : R_FUTURE_PLAN: NA
[08:10:11.649] | : . ' , ; ` | : parallelly::makeClusterPSOCK() arguments:
[08:10:11.649] | : . ' , ; ` | : List of 2
[08:10:11.649] | : . ' , ; ` | :  $             : int 2
[08:10:11.649] | : . ' , ; ` | :  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:10:12.151] | : . ' , ; ` | : Generated cluster UUID
[08:10:12.151] | : . ' , ; ` | : Cluster UUID: ‘c43140e2813aafebd687dadd8479959e’
[08:10:12.151] | : . ' , ; ` | : Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:10:12.154] | : . ' , ; ` | .makeCluster() ... done
[08:10:12.154] | : . ' , ; ` | Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:10:12.155] | : . ' , ; ` makeCluster(workers, ...) ... done
[08:10:12.156] | : . ' , ; ` Number of workers: 2
[08:10:12.156] | : . ' , ; ` Workers UUID: ‘c43140e2813aafebd687dadd8479959e’
[08:10:12.156] | : . ' , ; Starting new cluster ... done
[08:10:12.156] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[08:10:12.156] | : . ' , Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:10:12.156] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ... done
[08:10:12.156] | : . makeFutureBackend(<multisession>) ... done
[08:10:12.157] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:12.157] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:12.157] | : . plan(): nbrOfWorkers() = 2
[08:10:12.157] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:10:12.157] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
- stdout = TRUE
[08:10:12.157] | future(..., label = NULL) ...
[08:10:12.157] | : lazy: FALSE
[08:10:12.157] | : stdout: TRUE
[08:10:12.158] | : conditions: [n=1] ‘condition’
[08:10:12.158] | : gc: FALSE
[08:10:12.158] | : earlySignal: FALSE
[08:10:12.158] | : getGlobalsAndPackages() ...
[08:10:12.158] | : . Searching for globals ...
[08:10:12.193] | : . ' globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:10:12.193] | : . Searching for globals ... done
[08:10:12.193] | : . Resolving globals: FALSE
[08:10:12.193] | : . Search for packages associated with the globals ...
[08:10:12.193] | : . ' Packages associated with globals: [2] ‘base’, ‘utils’
[08:10:12.194] | : . ' Packages: [2] ‘base’, ‘utils’
[08:10:12.194] | : . Search for packages associated with the globals ... done
[08:10:12.194] | : . Packages after dropping 'base': [1] ‘utils’
[08:10:12.194] | : . Packages after dropping non-attached packages: [1] ‘utils’
[08:10:12.194] | : . globals: [0] 
[08:10:12.195] | : . packages: [1] ‘utils’
[08:10:12.195] | : getGlobalsAndPackages() ... done
[08:10:12.195] | : run() for ‘Future’ (<unnamed-19>) ...
[08:10:12.195] | : . state: ‘created’
[08:10:12.195] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:12.195] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:12.196] | : . Using MultisessionFutureBackend ...
[08:10:12.196] | : . ' Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:10:12.196] | : . ' Launching futures ...
[08:10:12.196] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:10:12.197] | : . ' , ; Workers: [n=2]
[08:10:12.197] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:10:12.199] | : . ' , ; FutureRegistry: ‘workers-c43140e2813aafebd687dadd8479959e’
[08:10:12.199] | : . ' , ; requestWorker() ...
[08:10:12.199] | : . ' , ; ` requestNode() ...
[08:10:12.199] | : . ' , ; ` | Number of workers: 2
[08:10:12.199] | : . ' , ; ` | Polling for a free worker ...
[08:10:12.199] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:12.199] | : . ' , ; ` | : . Created empty registry ‘workers-c43140e2813aafebd687dadd8479959e’
[08:10:12.200] | : . ' , ; ` | : . Listing all futures
[08:10:12.200] | : . ' , ; ` | : . Number of registered futures: 0
[08:10:12.200] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:12.200] | : . ' , ; ` | : Total time: 0
[08:10:12.200] | : . ' , ; ` | Polling for a free worker ... done
[08:10:12.200] | : . ' , ; ` | FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:12.200] | : . ' , ; ` | : Listing all futures
[08:10:12.200] | : . ' , ; ` | : Number of registered futures: 0
[08:10:12.200] | : . ' , ; ` | FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:12.201] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:10:12.201] | : . ' , ; ` | Index of first available worker: 1
[08:10:12.201] | : . ' , ; ` | Validate that the worker is functional ...
[08:10:12.268] | : . ' , ; ` | : Worker is functional
[08:10:12.268] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:12.268] | : . ' , ; ` | : . Listing all futures
[08:10:12.268] | : . ' , ; ` | : . Number of registered futures: 0
[08:10:12.268] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:12.268] | : . ' , ; ` | Validate that the worker is functional ... done
[08:10:12.269] | : . ' , ; ` requestNode() ... done
[08:10:12.269] | : . ' , ; ` cluster node index: 1
[08:10:12.269] | : . ' , ; requestWorker() ... done
[08:10:12.269] | : . ' , ; eraseGlobalEnvironment() ...
[08:10:12.271] | : . ' , ; eraseGlobalEnvironment() ... done
[08:10:12.271] | : . ' , ; launchFuture() ...
[08:10:12.271] | : . ' , ; ` cluster node index: 1
[08:10:12.271] | : . ' , ; ` getFutureData() ...
[08:10:12.271] | : . ' , ; ` | getFutureCore() ...
[08:10:12.271] | : . ' , ; ` | : Packages needed by the future expression (n = 1): ‘utils’
[08:10:12.271] | : . ' , ; ` | getFutureCore() ... done
[08:10:12.272] | : . ' , ; ` | getFutureCapture() ...
[08:10:12.272] | : . ' , ; ` | getFutureCapture() ... done
[08:10:12.272] | : . ' , ; ` | getFutureContext() ...
[08:10:12.272] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:12.272] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:10:12.272] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:12.272] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:10:12.273] | : . ' , ; ` | getFutureContext() ... done
[08:10:12.273] | : . ' , ; ` getFutureData() ... done
[08:10:12.273] | : . ' , ; ` FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'add', earlySignal = 0) ...
[08:10:12.273] | : . ' , ; ` | Appended future to position #1
[08:10:12.274] | : . ' , ; ` | Number of registered futures: 1
[08:10:12.274] | : . ' , ; ` FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'add', earlySignal = 0) ... done
[08:10:12.274] | : . ' , ; launchFuture() ... done
[08:10:12.274] | : . ' , ; MultisessionFuture started
[08:10:12.274] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:10:12.274] | : . ' Launching futures ... done
[08:10:12.274] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:10:12.274] | : . Using MultisessionFutureBackend ... done
[08:10:12.275] | : run() for ‘Future’ (<unnamed-19>) ... done
[08:10:12.275] | future(..., label = NULL) ... done
[08:10:12.275] | result() for ClusterFuture ...
[08:10:12.275] | : assertValidConnection() ...
[08:10:12.276] | : . cluster node index: 1
[08:10:12.276] | : assertValidConnection() ... done
[08:10:12.277] | : receiveMessageFromWorker() for ClusterFuture ...
[08:10:12.277] | : . cluster node index: 1
[08:10:12.365] | : . [1] TRUE
[08:10:12.366] | : . received data:
[08:10:12.366] | : . List of 5
[08:10:12.366] | : .  $ type   : chr "VALUE"
[08:10:12.366] | : .  $ value  :List of 16
[08:10:12.366] | : .   ..$ value              : int 42
[08:10:12.366] | : .   ..$ visible            : logi TRUE
[08:10:12.366] | : .   ..$ stdout             : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
[08:10:12.366] | : .   ..$ conditions         : list()
[08:10:12.366] | : .   ..$ rng                : logi FALSE
[08:10:12.366] | : .   ..$ seed               : NULL
[08:10:12.366] | : .   ..$ misuseGlobalEnv    : NULL
[08:10:12.366] | : .   ..$ misuseConnections  :List of 3
[08:10:12.366] | : .   .. ..$ added   : NULL
[08:10:12.366] | : .   .. ..$ removed : NULL
[08:10:12.366] | : .   .. ..$ replaced: NULL
[08:10:12.366] | : .   ..$ misuseDevices      : NULL
[08:10:12.366] | : .   ..$ misuseDefaultDevice: list()
[08:10:12.366] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:10:12"
[08:10:12.366] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:10:12"
[08:10:12.366] | : .   ..$ uuid               : chr [1:2] "01885b60b3d40eac4dc41a106424dbc9" "19"
[08:10:12.366] | : .   ..$ session_uuid       : chr "39303af82a0d3e4a17a2eb656215d5b7"
[08:10:12.366] | : .   .. ..- attr(*, "source")=List of 5
[08:10:12.366] | : .   .. .. ..$ host  : Named chr "28bb34de9501"
[08:10:12.366] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:10:12.366] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:10:12.366] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:10:12.366] | : .   .. .. ..$ pid   : int 75649
[08:10:12.366] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:10:12"
[08:10:12.366] | : .   .. .. ..$ random: int 2147483647
[08:10:12.366] | : .   ..$ r_info             :List of 4
[08:10:12.366] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:10:12.366] | : .   .. .. ..$ : int [1:3] 4 5 1
[08:10:12.366] | : .   .. ..$ os           : chr "unix"
[08:10:12.366] | : .   .. ..$ os_name      : chr "Linux"
[08:10:12.366] | : .   .. ..$ captures_utf8: logi TRUE
[08:10:12.366] | : .   ..$ version            : chr "1.8"
[08:10:12.366] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:10:12.366] | : .  $ success: logi TRUE
[08:10:12.366] | : .  $ time   : 'proc_time' Named num [1:5] 0.048 0.003 0.051 0 0
[08:10:12.366] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:10:12.366] | : .  $ tag    : NULL
[08:10:12.380] | : . Received FutureResult
[08:10:12.380] | : . FutureResult:
[08:10:12.380] | : . value: ‘integer’
[08:10:12.380] | : . visible: TRUE
[08:10:12.380] | : . stdout: character
[08:10:12.380] | : . conditions: [n = 0] 
[08:10:12.380] | : . RNG used: FALSE
[08:10:12.380] | : . duration: 0.04888988 secs (started 2025-06-17 08:10:12.316127)
[08:10:12.380] | : . version: 1.8
[08:10:12.381] | : . FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'remove', earlySignal = 0) ...
[08:10:12.381] | : . ' Removed future from position #1
[08:10:12.381] | : . ' Number of registered futures: 0
[08:10:12.381] | : . FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'remove', earlySignal = 0) ... done
[08:10:12.381] | : . Erased future from future backend
[08:10:12.381] | : . result() for ClusterFuture ...
[08:10:12.381] | : . ' result already collected: FutureResult
[08:10:12.381] | : . result() for ClusterFuture ... done
[08:10:12.381] | : . signalConditions() ...
[08:10:12.382] | : . ' include = ‘immediateCondition’
[08:10:12.382] | : . ' exclude = 
[08:10:12.382] | : . ' resignal = FALSE
[08:10:12.382] | : . ' Number of conditions: 0
[08:10:12.382] | : . '  int 0
[08:10:12.382] | : . signalConditions() ... done
[08:10:12.382] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:10:12.383] | result() for ClusterFuture ... done
List of 16
 $ value              : int 42
 $ visible            : logi TRUE
 $ stdout             : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions         : list()
 $ rng                : logi FALSE
 $ seed               : NULL
 $ misuseGlobalEnv    : NULL
 $ misuseConnections  :List of 3
  ..$ added   : NULL
  ..$ removed : NULL
  ..$ replaced: NULL
 $ misuseDevices      : NULL
 $ misuseDefaultDevice: list()
 $ started            : POSIXct[1:1], format: "2025-06-17 08:10:12"
 $ finished           : POSIXct[1:1], format: "2025-06-17 08:10:12"
 $ uuid               : chr [1:2] "01885b60b3d40eac4dc41a106424dbc9" "19"
 $ session_uuid       : chr "39303af82a0d3e4a17a2eb656215d5b7"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "28bb34de9501"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 75649
  .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:10:12"
  .. ..$ random: int 2147483647
 $ r_info             :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 5 1
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version            : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[08:10:12.392] | value() for MultisessionFuture (<unnamed-19>) ...
[08:10:12.392] | : result() for ClusterFuture ...
[08:10:12.392] | : . result already collected: FutureResult
[08:10:12.392] | : result() for ClusterFuture ... done
[08:10:12.392] | : result() for ClusterFuture ...
[08:10:12.392] | : . result already collected: FutureResult
[08:10:12.392] | : result() for ClusterFuture ... done
[08:10:12.393] | : signalConditions() ...
[08:10:12.393] | : . include = ‘immediateCondition’
[08:10:12.393] | : . exclude = 
[08:10:12.393] | : . resignal = FALSE
[08:10:12.393] | : . Number of conditions: 0
[08:10:12.393] | : .  int 0
[08:10:12.393] | : signalConditions() ... done
[08:10:12.394] | : relay stdout ...
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[08:10:12.394] | : relay stdout ... done
[08:10:12.394] | : check for misuse ...
[08:10:12.394] | : check for misuse ... done
[08:10:12.394] | value() for MultisessionFuture (<unnamed-19>) ... done
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.04888988 secs (started 2025-06-17 08:10:12.316127)
version: 1.8
[08:10:12.395] | future(..., label = NULL) ...
[08:10:12.395] | : lazy: FALSE
[08:10:12.395] | : stdout: TRUE
[08:10:12.395] | : conditions: [n=1] ‘condition’
[08:10:12.395] | : gc: FALSE
[08:10:12.395] | : earlySignal: FALSE
[08:10:12.395] | : getGlobalsAndPackages() ...
[08:10:12.395] | : . Searching for globals ...
[08:10:12.423] | : . ' globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:10:12.424] | : . Searching for globals ... done
[08:10:12.424] | : . Resolving globals: FALSE
[08:10:12.424] | : . Search for packages associated with the globals ...
[08:10:12.424] | : . ' Packages associated with globals: [2] ‘base’, ‘utils’
[08:10:12.424] | : . ' Packages: [2] ‘base’, ‘utils’
[08:10:12.425] | : . Search for packages associated with the globals ... done
[08:10:12.425] | : . Packages after dropping 'base': [1] ‘utils’
[08:10:12.425] | : . Packages after dropping non-attached packages: [1] ‘utils’
[08:10:12.425] | : . globals: [0] 
[08:10:12.425] | : . packages: [1] ‘utils’
[08:10:12.425] | : getGlobalsAndPackages() ... done
[08:10:12.425] | : run() for ‘Future’ (<unnamed-20>) ...
[08:10:12.426] | : . state: ‘created’
[08:10:12.426] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:12.426] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:12.426] | : . Using MultisessionFutureBackend ...
[08:10:12.426] | : . ' Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:10:12.426] | : . ' Launching futures ...
[08:10:12.426] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:10:12.426] | : . ' , ; Workers: [n=2]
[08:10:12.427] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:10:12.428] | : . ' , ; FutureRegistry: ‘workers-c43140e2813aafebd687dadd8479959e’
[08:10:12.428] | : . ' , ; requestWorker() ...
[08:10:12.428] | : . ' , ; ` requestNode() ...
[08:10:12.428] | : . ' , ; ` | Number of workers: 2
[08:10:12.428] | : . ' , ; ` | Polling for a free worker ...
[08:10:12.429] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:12.429] | : . ' , ; ` | : . Listing all futures
[08:10:12.429] | : . ' , ; ` | : . Number of registered futures: 0
[08:10:12.429] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:12.429] | : . ' , ; ` | : Total time: 0
[08:10:12.429] | : . ' , ; ` | Polling for a free worker ... done
[08:10:12.429] | : . ' , ; ` | FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:12.429] | : . ' , ; ` | : Listing all futures
[08:10:12.429] | : . ' , ; ` | : Number of registered futures: 0
[08:10:12.429] | : . ' , ; ` | FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:12.430] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:10:12.430] | : . ' , ; ` | Index of first available worker: 1
[08:10:12.430] | : . ' , ; ` | Validate that the worker is functional ...
[08:10:12.487] | : . ' , ; ` | : Worker is functional
[08:10:12.487] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:12.488] | : . ' , ; ` | : . Listing all futures
[08:10:12.488] | : . ' , ; ` | : . Number of registered futures: 0
[08:10:12.489] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:12.489] | : . ' , ; ` | Validate that the worker is functional ... done
[08:10:12.489] | : . ' , ; ` requestNode() ... done
[08:10:12.489] | : . ' , ; ` cluster node index: 1
[08:10:12.489] | : . ' , ; requestWorker() ... done
[08:10:12.489] | : . ' , ; eraseGlobalEnvironment() ...
[08:10:12.490] | : . ' , ; eraseGlobalEnvironment() ... done
[08:10:12.490] | : . ' , ; launchFuture() ...
[08:10:12.490] | : . ' , ; ` cluster node index: 1
[08:10:12.490] | : . ' , ; ` getFutureData() ...
[08:10:12.490] | : . ' , ; ` | getFutureCore() ...
[08:10:12.490] | : . ' , ; ` | : Packages needed by the future expression (n = 1): ‘utils’
[08:10:12.490] | : . ' , ; ` | getFutureCore() ... done
[08:10:12.490] | : . ' , ; ` | getFutureCapture() ...
[08:10:12.490] | : . ' , ; ` | getFutureCapture() ... done
[08:10:12.491] | : . ' , ; ` | getFutureContext() ...
[08:10:12.491] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:12.491] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:10:12.491] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:12.491] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:10:12.491] | : . ' , ; ` | getFutureContext() ... done
[08:10:12.491] | : . ' , ; ` getFutureData() ... done
[08:10:12.491] | : . ' , ; ` FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'add', earlySignal = 0) ...
[08:10:12.492] | : . ' , ; ` | Appended future to position #1
[08:10:12.492] | : . ' , ; ` | Number of registered futures: 1
[08:10:12.492] | : . ' , ; ` FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'add', earlySignal = 0) ... done
[08:10:12.492] | : . ' , ; launchFuture() ... done
[08:10:12.492] | : . ' , ; MultisessionFuture started
[08:10:12.492] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:10:12.492] | : . ' Launching futures ... done
[08:10:12.492] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:10:12.492] | : . Using MultisessionFutureBackend ... done
[08:10:12.493] | : run() for ‘Future’ (<unnamed-20>) ... done
[08:10:12.493] | future(..., label = NULL) ... done
[08:10:12.493] | value() for MultisessionFuture (<unnamed-20>) ...
[08:10:12.493] | : result() for ClusterFuture ...
[08:10:12.493] | : . assertValidConnection() ...
[08:10:12.493] | : . ' cluster node index: 1
[08:10:12.494] | : . assertValidConnection() ... done
[08:10:12.494] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:10:12.494] | : . ' cluster node index: 1
[08:10:12.536] | : . ' [1] TRUE
[08:10:12.536] | : . ' received data:
[08:10:12.536] | : . ' List of 5
[08:10:12.536] | : . '  $ type   : chr "VALUE"
[08:10:12.536] | : . '  $ value  :List of 16
[08:10:12.536] | : . '   ..$ value              : int 42
[08:10:12.536] | : . '   ..$ visible            : logi TRUE
[08:10:12.536] | : . '   ..$ stdout             : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
[08:10:12.536] | : . '   ..$ conditions         : list()
[08:10:12.536] | : . '   ..$ rng                : logi FALSE
[08:10:12.536] | : . '   ..$ seed               : NULL
[08:10:12.536] | : . '   ..$ misuseGlobalEnv    : NULL
[08:10:12.536] | : . '   ..$ misuseConnections  :List of 3
[08:10:12.536] | : . '   .. ..$ added   : NULL
[08:10:12.536] | : . '   .. ..$ removed : NULL
[08:10:12.536] | : . '   .. ..$ replaced: NULL
[08:10:12.536] | : . '   ..$ misuseDevices      : NULL
[08:10:12.536] | : . '   ..$ misuseDefaultDevice: list()
[08:10:12.536] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:10:12"
[08:10:12.536] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:10:12"
[08:10:12.536] | : . '   ..$ uuid               : chr [1:2] "01885b60b3d40eac4dc41a106424dbc9" "20"
[08:10:12.536] | : . '   ..$ session_uuid       : chr "39303af82a0d3e4a17a2eb656215d5b7"
[08:10:12.536] | : . '   .. ..- attr(*, "source")=List of 5
[08:10:12.536] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:10:12.536] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:10:12.536] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:10:12.536] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:10:12.536] | : . '   .. .. ..$ pid   : int 75649
[08:10:12.536] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:10:12"
[08:10:12.536] | : . '   .. .. ..$ random: int 2147483647
[08:10:12.536] | : . '   ..$ r_info             :List of 4
[08:10:12.536] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:10:12.536] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:10:12.536] | : . '   .. ..$ os           : chr "unix"
[08:10:12.536] | : . '   .. ..$ os_name      : chr "Linux"
[08:10:12.536] | : . '   .. ..$ captures_utf8: logi TRUE
[08:10:12.536] | : . '   ..$ version            : chr "1.8"
[08:10:12.536] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:10:12.536] | : . '  $ success: logi TRUE
[08:10:12.536] | : . '  $ time   : 'proc_time' Named num [1:5] 0.004 0.001 0.004 0 0
[08:10:12.536] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:10:12.536] | : . '  $ tag    : NULL
[08:10:12.547] | : . ' Received FutureResult
[08:10:12.547] | : . ' FutureResult:
[08:10:12.547] | : . ' value: ‘integer’
[08:10:12.547] | : . ' visible: TRUE
[08:10:12.547] | : . ' stdout: character
[08:10:12.547] | : . ' conditions: [n = 0] 
[08:10:12.547] | : . ' RNG used: FALSE
[08:10:12.547] | : . ' duration: 0.003258467 secs (started 2025-06-17 08:10:12.532833)
[08:10:12.547] | : . ' version: 1.8
[08:10:12.548] | : . ' FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'remove', earlySignal = 0) ...
[08:10:12.548] | : . ' , Removed future from position #1
[08:10:12.548] | : . ' , Number of registered futures: 0
[08:10:12.548] | : . ' FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'remove', earlySignal = 0) ... done
[08:10:12.548] | : . ' Erased future from future backend
[08:10:12.548] | : . ' result() for ClusterFuture ...
[08:10:12.549] | : . ' , result already collected: FutureResult
[08:10:12.549] | : . ' result() for ClusterFuture ... done
[08:10:12.549] | : . ' signalConditions() ...
[08:10:12.549] | : . ' , include = ‘immediateCondition’
[08:10:12.549] | : . ' , exclude = 
[08:10:12.549] | : . ' , resignal = FALSE
[08:10:12.549] | : . ' , Number of conditions: 0
[08:10:12.549] | : . ' ,  int 0
[08:10:12.550] | : . ' signalConditions() ... done
[08:10:12.550] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:10:12.550] | : result() for ClusterFuture ... done
[08:10:12.550] | : result() for ClusterFuture ...
[08:10:12.550] | : . result already collected: FutureResult
[08:10:12.550] | : result() for ClusterFuture ... done
[08:10:12.550] | : signalConditions() ...
[08:10:12.550] | : . include = ‘immediateCondition’
[08:10:12.551] | : . exclude = 
[08:10:12.551] | : . resignal = FALSE
[08:10:12.551] | : . Number of conditions: 0
[08:10:12.551] | : .  int 0
[08:10:12.551] | : signalConditions() ... done
[08:10:12.551] | : relay stdout ...
[08:10:12.551] | : relay stdout ... done
[08:10:12.552] | : check for misuse ...
[08:10:12.552] | : check for misuse ... done
[08:10:12.552] | value() for MultisessionFuture (<unnamed-20>) ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[08:10:12.552] | future(..., label = NULL) ...
[08:10:12.552] | : lazy: FALSE
[08:10:12.552] | : stdout: TRUE
[08:10:12.552] | : conditions: [n=1] ‘condition’
[08:10:12.552] | : gc: FALSE
[08:10:12.553] | : earlySignal: FALSE
[08:10:12.553] | : getGlobalsAndPackages() ...
[08:10:12.553] | : . Searching for globals ...
[08:10:12.556] | : . ' globals found: [1] ‘print’
[08:10:12.556] | : . Searching for globals ... done
[08:10:12.556] | : . Resolving globals: FALSE
[08:10:12.556] | : . Search for packages associated with the globals ...
[08:10:12.556] | : . ' Packages associated with globals: [1] ‘base’
[08:10:12.556] | : . ' Packages: [1] ‘base’
[08:10:12.556] | : . Search for packages associated with the globals ... done
[08:10:12.557] | : . Packages after dropping 'base': [0] 
[08:10:12.557] | : . globals: [0] 
[08:10:12.557] | : . packages: [0] 
[08:10:12.557] | : getGlobalsAndPackages() ... done
[08:10:12.557] | : run() for ‘Future’ (<unnamed-21>) ...
[08:10:12.557] | : . state: ‘created’
[08:10:12.557] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:12.557] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:12.558] | : . Using MultisessionFutureBackend ...
[08:10:12.558] | : . ' Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:10:12.558] | : . ' Launching futures ...
[08:10:12.558] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:10:12.558] | : . ' , ; Workers: [n=2]
[08:10:12.558] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:10:12.560] | : . ' , ; FutureRegistry: ‘workers-c43140e2813aafebd687dadd8479959e’
[08:10:12.560] | : . ' , ; requestWorker() ...
[08:10:12.560] | : . ' , ; ` requestNode() ...
[08:10:12.560] | : . ' , ; ` | Number of workers: 2
[08:10:12.560] | : . ' , ; ` | Polling for a free worker ...
[08:10:12.560] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:12.560] | : . ' , ; ` | : . Listing all futures
[08:10:12.560] | : . ' , ; ` | : . Number of registered futures: 0
[08:10:12.560] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:12.561] | : . ' , ; ` | : Total time: 0
[08:10:12.561] | : . ' , ; ` | Polling for a free worker ... done
[08:10:12.561] | : . ' , ; ` | FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:12.561] | : . ' , ; ` | : Listing all futures
[08:10:12.561] | : . ' , ; ` | : Number of registered futures: 0
[08:10:12.561] | : . ' , ; ` | FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:12.561] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:10:12.561] | : . ' , ; ` | Index of first available worker: 1
[08:10:12.561] | : . ' , ; ` | Validate that the worker is functional ...
[08:10:12.658] | : . ' , ; ` | : Worker is functional
[08:10:12.658] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:12.658] | : . ' , ; ` | : . Listing all futures
[08:10:12.658] | : . ' , ; ` | : . Number of registered futures: 0
[08:10:12.658] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:12.658] | : . ' , ; ` | Validate that the worker is functional ... done
[08:10:12.658] | : . ' , ; ` requestNode() ... done
[08:10:12.659] | : . ' , ; ` cluster node index: 1
[08:10:12.659] | : . ' , ; requestWorker() ... done
[08:10:12.659] | : . ' , ; eraseGlobalEnvironment() ...
[08:10:12.659] | : . ' , ; eraseGlobalEnvironment() ... done
[08:10:12.659] | : . ' , ; launchFuture() ...
[08:10:12.659] | : . ' , ; ` cluster node index: 1
[08:10:12.660] | : . ' , ; ` getFutureData() ...
[08:10:12.660] | : . ' , ; ` | getFutureCore() ...
[08:10:12.660] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:10:12.660] | : . ' , ; ` | getFutureCore() ... done
[08:10:12.660] | : . ' , ; ` | getFutureCapture() ...
[08:10:12.660] | : . ' , ; ` | getFutureCapture() ... done
[08:10:12.660] | : . ' , ; ` | getFutureContext() ...
[08:10:12.660] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:12.660] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:10:12.661] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:12.661] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:10:12.661] | : . ' , ; ` | getFutureContext() ... done
[08:10:12.661] | : . ' , ; ` getFutureData() ... done
[08:10:12.661] | : . ' , ; ` FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'add', earlySignal = 0) ...
[08:10:12.661] | : . ' , ; ` | Appended future to position #1
[08:10:12.661] | : . ' , ; ` | Number of registered futures: 1
[08:10:12.662] | : . ' , ; ` FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'add', earlySignal = 0) ... done
[08:10:12.662] | : . ' , ; launchFuture() ... done
[08:10:12.662] | : . ' , ; MultisessionFuture started
[08:10:12.662] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:10:12.662] | : . ' Launching futures ... done
[08:10:12.662] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:10:12.662] | : . Using MultisessionFutureBackend ... done
[08:10:12.662] | : run() for ‘Future’ (<unnamed-21>) ... done
[08:10:12.662] | future(..., label = NULL) ... done
[08:10:12.662] | result() for ClusterFuture ...
[08:10:12.663] | : assertValidConnection() ...
[08:10:12.663] | : . cluster node index: 1
[08:10:12.663] | : assertValidConnection() ... done
[08:10:12.663] | : receiveMessageFromWorker() for ClusterFuture ...
[08:10:12.663] | : . cluster node index: 1
[08:10:12.708] | : . [1] TRUE
[08:10:12.708] | : . received data:
[08:10:12.709] | : . List of 5
[08:10:12.709] | : .  $ type   : chr "VALUE"
[08:10:12.709] | : .  $ value  :List of 16
[08:10:12.709] | : .   ..$ value              : num 42
[08:10:12.709] | : .   ..$ visible            : logi FALSE
[08:10:12.709] | : .   ..$ stdout             : chr "[1] 42\n"
[08:10:12.709] | : .   ..$ conditions         : list()
[08:10:12.709] | : .   ..$ rng                : logi FALSE
[08:10:12.709] | : .   ..$ seed               : NULL
[08:10:12.709] | : .   ..$ misuseGlobalEnv    : NULL
[08:10:12.709] | : .   ..$ misuseConnections  :List of 3
[08:10:12.709] | : .   .. ..$ added   : NULL
[08:10:12.709] | : .   .. ..$ removed : NULL
[08:10:12.709] | : .   .. ..$ replaced: NULL
[08:10:12.709] | : .   ..$ misuseDevices      : NULL
[08:10:12.709] | : .   ..$ misuseDefaultDevice: list()
[08:10:12.709] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:10:12"
[08:10:12.709] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:10:12"
[08:10:12.709] | : .   ..$ uuid               : chr [1:2] "01885b60b3d40eac4dc41a106424dbc9" "21"
[08:10:12.709] | : .   ..$ session_uuid       : chr "39303af82a0d3e4a17a2eb656215d5b7"
[08:10:12.709] | : .   .. ..- attr(*, "source")=List of 5
[08:10:12.709] | : .   .. .. ..$ host  : Named chr "28bb34de9501"
[08:10:12.709] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:10:12.709] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:10:12.709] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:10:12.709] | : .   .. .. ..$ pid   : int 75649
[08:10:12.709] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:10:12"
[08:10:12.709] | : .   .. .. ..$ random: int 2147483647
[08:10:12.709] | : .   ..$ r_info             :List of 4
[08:10:12.709] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:10:12.709] | : .   .. .. ..$ : int [1:3] 4 5 1
[08:10:12.709] | : .   .. ..$ os           : chr "unix"
[08:10:12.709] | : .   .. ..$ os_name      : chr "Linux"
[08:10:12.709] | : .   .. ..$ captures_utf8: logi TRUE
[08:10:12.709] | : .   ..$ version            : chr "1.8"
[08:10:12.709] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:10:12.709] | : .  $ success: logi TRUE
[08:10:12.709] | : .  $ time   : 'proc_time' Named num [1:5] 0.005 0 0.006 0 0
[08:10:12.709] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:10:12.709] | : .  $ tag    : NULL
[08:10:12.719] | : . Received FutureResult
[08:10:12.719] | : . FutureResult:
[08:10:12.719] | : . value: ‘numeric’
[08:10:12.719] | : . visible: FALSE
[08:10:12.719] | : . stdout: character
[08:10:12.719] | : . conditions: [n = 0] 
[08:10:12.719] | : . RNG used: FALSE
[08:10:12.719] | : . duration: 0.005294561 secs (started 2025-06-17 08:10:12.702836)
[08:10:12.719] | : . version: 1.8
[08:10:12.720] | : . FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'remove', earlySignal = 0) ...
[08:10:12.720] | : . ' Removed future from position #1
[08:10:12.720] | : . ' Number of registered futures: 0
[08:10:12.720] | : . FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'remove', earlySignal = 0) ... done
[08:10:12.720] | : . Erased future from future backend
[08:10:12.721] | : . result() for ClusterFuture ...
[08:10:12.721] | : . ' result already collected: FutureResult
[08:10:12.721] | : . result() for ClusterFuture ... done
[08:10:12.721] | : . signalConditions() ...
[08:10:12.721] | : . ' include = ‘immediateCondition’
[08:10:12.721] | : . ' exclude = 
[08:10:12.721] | : . ' resignal = FALSE
[08:10:12.721] | : . ' Number of conditions: 0
[08:10:12.721] | : . '  int 0
[08:10:12.722] | : . signalConditions() ... done
[08:10:12.722] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:10:12.722] | result() for ClusterFuture ... done
[08:10:12.722] | value() for MultisessionFuture (<unnamed-21>) ...
[08:10:12.722] | : result() for ClusterFuture ...
[08:10:12.722] | : . result already collected: FutureResult
[08:10:12.722] | : result() for ClusterFuture ... done
[08:10:12.722] | : result() for ClusterFuture ...
[08:10:12.723] | : . result already collected: FutureResult
[08:10:12.723] | : result() for ClusterFuture ... done
[08:10:12.723] | : signalConditions() ...
[08:10:12.723] | : . include = ‘immediateCondition’
[08:10:12.723] | : . exclude = 
[08:10:12.723] | : . resignal = FALSE
[08:10:12.723] | : . Number of conditions: 0
[08:10:12.723] | : .  int 0
[08:10:12.724] | : signalConditions() ... done
[08:10:12.724] | : relay stdout ...
[1] 42
[08:10:12.724] | : relay stdout ... done
[08:10:12.724] | : check for misuse ...
[08:10:12.724] | : check for misuse ... done
[08:10:12.724] | value() for MultisessionFuture (<unnamed-21>) ... done
[08:10:12.724] | result() for ClusterFuture ...
[08:10:12.724] | : result already collected: FutureResult
[08:10:12.724] | result() for ClusterFuture ... done
- stdout = FALSE
[08:10:12.725] | future(..., label = NULL) ...
[08:10:12.725] | : lazy: FALSE
[08:10:12.725] | : stdout: FALSE
[08:10:12.725] | : conditions: [n=1] ‘condition’
[08:10:12.725] | : gc: FALSE
[08:10:12.725] | : earlySignal: FALSE
[08:10:12.725] | : getGlobalsAndPackages() ...
[08:10:12.725] | : . Searching for globals ...
[08:10:12.755] | : . ' globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:10:12.755] | : . Searching for globals ... done
[08:10:12.755] | : . Resolving globals: FALSE
[08:10:12.755] | : . Search for packages associated with the globals ...
[08:10:12.756] | : . ' Packages associated with globals: [2] ‘base’, ‘utils’
[08:10:12.756] | : . ' Packages: [2] ‘base’, ‘utils’
[08:10:12.756] | : . Search for packages associated with the globals ... done
[08:10:12.756] | : . Packages after dropping 'base': [1] ‘utils’
[08:10:12.756] | : . Packages after dropping non-attached packages: [1] ‘utils’
[08:10:12.756] | : . globals: [0] 
[08:10:12.757] | : . packages: [1] ‘utils’
[08:10:12.757] | : getGlobalsAndPackages() ... done
[08:10:12.757] | : run() for ‘Future’ (<unnamed-22>) ...
[08:10:12.757] | : . state: ‘created’
[08:10:12.757] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:12.757] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:12.757] | : . Using MultisessionFutureBackend ...
[08:10:12.757] | : . ' Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:10:12.758] | : . ' Launching futures ...
[08:10:12.758] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:10:12.758] | : . ' , ; Workers: [n=2]
[08:10:12.758] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:10:12.759] | : . ' , ; FutureRegistry: ‘workers-c43140e2813aafebd687dadd8479959e’
[08:10:12.760] | : . ' , ; requestWorker() ...
[08:10:12.760] | : . ' , ; ` requestNode() ...
[08:10:12.760] | : . ' , ; ` | Number of workers: 2
[08:10:12.760] | : . ' , ; ` | Polling for a free worker ...
[08:10:12.760] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:12.760] | : . ' , ; ` | : . Listing all futures
[08:10:12.760] | : . ' , ; ` | : . Number of registered futures: 0
[08:10:12.760] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:12.760] | : . ' , ; ` | : Total time: 0
[08:10:12.760] | : . ' , ; ` | Polling for a free worker ... done
[08:10:12.761] | : . ' , ; ` | FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:12.761] | : . ' , ; ` | : Listing all futures
[08:10:12.761] | : . ' , ; ` | : Number of registered futures: 0
[08:10:12.761] | : . ' , ; ` | FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:12.761] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:10:12.761] | : . ' , ; ` | Index of first available worker: 1
[08:10:12.761] | : . ' , ; ` | Validate that the worker is functional ...
[08:10:12.859] | : . ' , ; ` | : Worker is functional
[08:10:12.859] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:12.859] | : . ' , ; ` | : . Listing all futures
[08:10:12.859] | : . ' , ; ` | : . Number of registered futures: 0
[08:10:12.859] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:12.859] | : . ' , ; ` | Validate that the worker is functional ... done
[08:10:12.859] | : . ' , ; ` requestNode() ... done
[08:10:12.860] | : . ' , ; ` cluster node index: 1
[08:10:12.860] | : . ' , ; requestWorker() ... done
[08:10:12.860] | : . ' , ; eraseGlobalEnvironment() ...
[08:10:12.860] | : . ' , ; eraseGlobalEnvironment() ... done
[08:10:12.860] | : . ' , ; launchFuture() ...
[08:10:12.860] | : . ' , ; ` cluster node index: 1
[08:10:12.860] | : . ' , ; ` getFutureData() ...
[08:10:12.861] | : . ' , ; ` | getFutureCore() ...
[08:10:12.861] | : . ' , ; ` | : Packages needed by the future expression (n = 1): ‘utils’
[08:10:12.861] | : . ' , ; ` | getFutureCore() ... done
[08:10:12.861] | : . ' , ; ` | getFutureCapture() ...
[08:10:12.861] | : . ' , ; ` | getFutureCapture() ... done
[08:10:12.861] | : . ' , ; ` | getFutureContext() ...
[08:10:12.861] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:12.861] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:10:12.861] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:12.862] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:10:12.862] | : . ' , ; ` | getFutureContext() ... done
[08:10:12.862] | : . ' , ; ` getFutureData() ... done
[08:10:12.862] | : . ' , ; ` FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'add', earlySignal = 0) ...
[08:10:12.862] | : . ' , ; ` | Appended future to position #1
[08:10:12.862] | : . ' , ; ` | Number of registered futures: 1
[08:10:12.862] | : . ' , ; ` FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'add', earlySignal = 0) ... done
[08:10:12.863] | : . ' , ; launchFuture() ... done
[08:10:12.863] | : . ' , ; MultisessionFuture started
[08:10:12.863] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:10:12.863] | : . ' Launching futures ... done
[08:10:12.863] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:10:12.863] | : . Using MultisessionFutureBackend ... done
[08:10:12.863] | : run() for ‘Future’ (<unnamed-22>) ... done
[08:10:12.863] | future(..., label = NULL) ... done
[08:10:12.863] | result() for ClusterFuture ...
[08:10:12.864] | : assertValidConnection() ...
[08:10:12.864] | : . cluster node index: 1
[08:10:12.864] | : assertValidConnection() ... done
[08:10:12.864] | : receiveMessageFromWorker() for ClusterFuture ...
[08:10:12.864] | : . cluster node index: 1
[08:10:12.907] | : . [1] TRUE
[08:10:12.908] | : . received data:
[08:10:12.908] | : . List of 5
[08:10:12.908] | : .  $ type   : chr "VALUE"
[08:10:12.908] | : .  $ value  :List of 16
[08:10:12.908] | : .   ..$ value              : int 42
[08:10:12.908] | : .   ..$ visible            : logi TRUE
[08:10:12.908] | : .   ..$ stdout             : NULL
[08:10:12.908] | : .   ..$ conditions         : list()
[08:10:12.908] | : .   ..$ rng                : logi FALSE
[08:10:12.908] | : .   ..$ seed               : NULL
[08:10:12.908] | : .   ..$ misuseGlobalEnv    : NULL
[08:10:12.908] | : .   ..$ misuseConnections  :List of 3
[08:10:12.908] | : .   .. ..$ added   : NULL
[08:10:12.908] | : .   .. ..$ removed : NULL
[08:10:12.908] | : .   .. ..$ replaced: NULL
[08:10:12.908] | : .   ..$ misuseDevices      : NULL
[08:10:12.908] | : .   ..$ misuseDefaultDevice: list()
[08:10:12.908] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:10:12"
[08:10:12.908] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:10:12"
[08:10:12.908] | : .   ..$ uuid               : chr [1:2] "01885b60b3d40eac4dc41a106424dbc9" "22"
[08:10:12.908] | : .   ..$ session_uuid       : chr "39303af82a0d3e4a17a2eb656215d5b7"
[08:10:12.908] | : .   .. ..- attr(*, "source")=List of 5
[08:10:12.908] | : .   .. .. ..$ host  : Named chr "28bb34de9501"
[08:10:12.908] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:10:12.908] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:10:12.908] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:10:12.908] | : .   .. .. ..$ pid   : int 75649
[08:10:12.908] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:10:12"
[08:10:12.908] | : .   .. .. ..$ random: int 2147483647
[08:10:12.908] | : .   ..$ r_info             :List of 4
[08:10:12.908] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:10:12.908] | : .   .. .. ..$ : int [1:3] 4 5 1
[08:10:12.908] | : .   .. ..$ os           : chr "unix"
[08:10:12.908] | : .   .. ..$ os_name      : chr "Linux"
[08:10:12.908] | : .   .. ..$ captures_utf8: logi TRUE
[08:10:12.908] | : .   ..$ version            : chr "1.8"
[08:10:12.908] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:10:12.908] | : .  $ success: logi TRUE
[08:10:12.908] | : .  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.004 0 0
[08:10:12.908] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:10:12.908] | : .  $ tag    : NULL
[08:10:12.919] | : . Received FutureResult
[08:10:12.919] | : . FutureResult:
[08:10:12.919] | : . value: ‘integer’
[08:10:12.919] | : . visible: TRUE
[08:10:12.919] | : . stdout: NULL
[08:10:12.919] | : . conditions: [n = 0] 
[08:10:12.919] | : . RNG used: FALSE
[08:10:12.919] | : . duration: 0.003396273 secs (started 2025-06-17 08:10:12.903925)
[08:10:12.919] | : . version: 1.8
[08:10:12.919] | : . FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'remove', earlySignal = 0) ...
[08:10:12.919] | : . ' Removed future from position #1
[08:10:12.920] | : . ' Number of registered futures: 0
[08:10:12.920] | : . FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'remove', earlySignal = 0) ... done
[08:10:12.920] | : . Erased future from future backend
[08:10:12.920] | : . result() for ClusterFuture ...
[08:10:12.920] | : . ' result already collected: FutureResult
[08:10:12.920] | : . result() for ClusterFuture ... done
[08:10:12.920] | : . signalConditions() ...
[08:10:12.920] | : . ' include = ‘immediateCondition’
[08:10:12.920] | : . ' exclude = 
[08:10:12.920] | : . ' resignal = FALSE
[08:10:12.921] | : . ' Number of conditions: 0
[08:10:12.921] | : . '  int 0
[08:10:12.921] | : . signalConditions() ... done
[08:10:12.921] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:10:12.921] | result() for ClusterFuture ... done
List of 16
 $ value              : int 42
 $ visible            : logi TRUE
 $ stdout             : NULL
 $ conditions         : list()
 $ rng                : logi FALSE
 $ seed               : NULL
 $ misuseGlobalEnv    : NULL
 $ misuseConnections  :List of 3
  ..$ added   : NULL
  ..$ removed : NULL
  ..$ replaced: NULL
 $ misuseDevices      : NULL
 $ misuseDefaultDevice: list()
 $ started            : POSIXct[1:1], format: "2025-06-17 08:10:12"
 $ finished           : POSIXct[1:1], format: "2025-06-17 08:10:12"
 $ uuid               : chr [1:2] "01885b60b3d40eac4dc41a106424dbc9" "22"
 $ session_uuid       : chr "39303af82a0d3e4a17a2eb656215d5b7"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "28bb34de9501"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 75649
  .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:10:12"
  .. ..$ random: int 2147483647
 $ r_info             :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 5 1
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version            : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[08:10:12.930] | value() for MultisessionFuture (<unnamed-22>) ...
[08:10:12.931] | : result() for ClusterFuture ...
[08:10:12.931] | : . result already collected: FutureResult
[08:10:12.931] | : result() for ClusterFuture ... done
[08:10:12.931] | : result() for ClusterFuture ...
[08:10:12.931] | : . result already collected: FutureResult
[08:10:12.931] | : result() for ClusterFuture ... done
[08:10:12.931] | : signalConditions() ...
[08:10:12.931] | : . include = ‘immediateCondition’
[08:10:12.931] | : . exclude = 
[08:10:12.931] | : . resignal = FALSE
[08:10:12.932] | : . Number of conditions: 0
[08:10:12.932] | : .  int 0
[08:10:12.932] | : signalConditions() ... done
[08:10:12.932] | : relay stdout ...
[08:10:12.932] | : relay stdout ... done
[08:10:12.932] | : check for misuse ...
[08:10:12.932] | : check for misuse ... done
[08:10:12.933] | value() for MultisessionFuture (<unnamed-22>) ... done
[08:10:12.933] | future(..., label = NULL) ...
[08:10:12.933] | : lazy: FALSE
[08:10:12.933] | : stdout: FALSE
[08:10:12.933] | : conditions: [n=1] ‘condition’
[08:10:12.933] | : gc: FALSE
[08:10:12.933] | : earlySignal: FALSE
[08:10:12.933] | : getGlobalsAndPackages() ...
[08:10:12.934] | : . Searching for globals ...
[08:10:12.963] | : . ' globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:10:12.964] | : . Searching for globals ... done
[08:10:12.964] | : . Resolving globals: FALSE
[08:10:12.964] | : . Search for packages associated with the globals ...
[08:10:12.964] | : . ' Packages associated with globals: [2] ‘base’, ‘utils’
[08:10:12.964] | : . ' Packages: [2] ‘base’, ‘utils’
[08:10:12.964] | : . Search for packages associated with the globals ... done
[08:10:12.965] | : . Packages after dropping 'base': [1] ‘utils’
[08:10:12.965] | : . Packages after dropping non-attached packages: [1] ‘utils’
[08:10:12.965] | : . globals: [0] 
[08:10:12.965] | : . packages: [1] ‘utils’
[08:10:12.965] | : getGlobalsAndPackages() ... done
[08:10:12.965] | : run() for ‘Future’ (<unnamed-23>) ...
[08:10:12.965] | : . state: ‘created’
[08:10:12.966] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:12.966] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:12.966] | : . Using MultisessionFutureBackend ...
[08:10:12.966] | : . ' Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:10:12.966] | : . ' Launching futures ...
[08:10:12.966] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:10:12.966] | : . ' , ; Workers: [n=2]
[08:10:12.966] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:10:12.968] | : . ' , ; FutureRegistry: ‘workers-c43140e2813aafebd687dadd8479959e’
[08:10:12.968] | : . ' , ; requestWorker() ...
[08:10:12.968] | : . ' , ; ` requestNode() ...
[08:10:12.968] | : . ' , ; ` | Number of workers: 2
[08:10:12.968] | : . ' , ; ` | Polling for a free worker ...
[08:10:12.968] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:12.969] | : . ' , ; ` | : . Listing all futures
[08:10:12.969] | : . ' , ; ` | : . Number of registered futures: 0
[08:10:12.969] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:12.969] | : . ' , ; ` | : Total time: 0
[08:10:12.969] | : . ' , ; ` | Polling for a free worker ... done
[08:10:12.969] | : . ' , ; ` | FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:12.969] | : . ' , ; ` | : Listing all futures
[08:10:12.969] | : . ' , ; ` | : Number of registered futures: 0
[08:10:12.969] | : . ' , ; ` | FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:12.969] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:10:12.970] | : . ' , ; ` | Index of first available worker: 1
[08:10:12.970] | : . ' , ; ` | Validate that the worker is functional ...
[08:10:13.066] | : . ' , ; ` | : Worker is functional
[08:10:13.067] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:13.067] | : . ' , ; ` | : . Listing all futures
[08:10:13.067] | : . ' , ; ` | : . Number of registered futures: 0
[08:10:13.067] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:13.067] | : . ' , ; ` | Validate that the worker is functional ... done
[08:10:13.067] | : . ' , ; ` requestNode() ... done
[08:10:13.067] | : . ' , ; ` cluster node index: 1
[08:10:13.068] | : . ' , ; requestWorker() ... done
[08:10:13.068] | : . ' , ; eraseGlobalEnvironment() ...
[08:10:13.068] | : . ' , ; eraseGlobalEnvironment() ... done
[08:10:13.068] | : . ' , ; launchFuture() ...
[08:10:13.068] | : . ' , ; ` cluster node index: 1
[08:10:13.068] | : . ' , ; ` getFutureData() ...
[08:10:13.068] | : . ' , ; ` | getFutureCore() ...
[08:10:13.069] | : . ' , ; ` | : Packages needed by the future expression (n = 1): ‘utils’
[08:10:13.069] | : . ' , ; ` | getFutureCore() ... done
[08:10:13.069] | : . ' , ; ` | getFutureCapture() ...
[08:10:13.069] | : . ' , ; ` | getFutureCapture() ... done
[08:10:13.069] | : . ' , ; ` | getFutureContext() ...
[08:10:13.069] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:13.069] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:10:13.069] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:13.069] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:10:13.070] | : . ' , ; ` | getFutureContext() ... done
[08:10:13.070] | : . ' , ; ` getFutureData() ... done
[08:10:13.070] | : . ' , ; ` FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'add', earlySignal = 0) ...
[08:10:13.070] | : . ' , ; ` | Appended future to position #1
[08:10:13.070] | : . ' , ; ` | Number of registered futures: 1
[08:10:13.070] | : . ' , ; ` FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'add', earlySignal = 0) ... done
[08:10:13.070] | : . ' , ; launchFuture() ... done
[08:10:13.071] | : . ' , ; MultisessionFuture started
[08:10:13.071] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:10:13.071] | : . ' Launching futures ... done
[08:10:13.071] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:10:13.071] | : . Using MultisessionFutureBackend ... done
[08:10:13.071] | : run() for ‘Future’ (<unnamed-23>) ... done
[08:10:13.071] | future(..., label = NULL) ... done
[08:10:13.071] | value() for MultisessionFuture (<unnamed-23>) ...
[08:10:13.072] | : result() for ClusterFuture ...
[08:10:13.072] | : . assertValidConnection() ...
[08:10:13.072] | : . ' cluster node index: 1
[08:10:13.072] | : . assertValidConnection() ... done
[08:10:13.072] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:10:13.072] | : . ' cluster node index: 1
[08:10:13.115] | : . ' [1] TRUE
[08:10:13.115] | : . ' received data:
[08:10:13.115] | : . ' List of 5
[08:10:13.115] | : . '  $ type   : chr "VALUE"
[08:10:13.115] | : . '  $ value  :List of 16
[08:10:13.115] | : . '   ..$ value              : int 42
[08:10:13.115] | : . '   ..$ visible            : logi TRUE
[08:10:13.115] | : . '   ..$ stdout             : NULL
[08:10:13.115] | : . '   ..$ conditions         : list()
[08:10:13.115] | : . '   ..$ rng                : logi FALSE
[08:10:13.115] | : . '   ..$ seed               : NULL
[08:10:13.115] | : . '   ..$ misuseGlobalEnv    : NULL
[08:10:13.115] | : . '   ..$ misuseConnections  :List of 3
[08:10:13.115] | : . '   .. ..$ added   : NULL
[08:10:13.115] | : . '   .. ..$ removed : NULL
[08:10:13.115] | : . '   .. ..$ replaced: NULL
[08:10:13.115] | : . '   ..$ misuseDevices      : NULL
[08:10:13.115] | : . '   ..$ misuseDefaultDevice: list()
[08:10:13.115] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:10:13"
[08:10:13.115] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:10:13"
[08:10:13.115] | : . '   ..$ uuid               : chr [1:2] "01885b60b3d40eac4dc41a106424dbc9" "23"
[08:10:13.115] | : . '   ..$ session_uuid       : chr "39303af82a0d3e4a17a2eb656215d5b7"
[08:10:13.115] | : . '   .. ..- attr(*, "source")=List of 5
[08:10:13.115] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:10:13.115] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:10:13.115] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:10:13.115] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:10:13.115] | : . '   .. .. ..$ pid   : int 75649
[08:10:13.115] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:10:12"
[08:10:13.115] | : . '   .. .. ..$ random: int 2147483647
[08:10:13.115] | : . '   ..$ r_info             :List of 4
[08:10:13.115] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:10:13.115] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:10:13.115] | : . '   .. ..$ os           : chr "unix"
[08:10:13.115] | : . '   .. ..$ os_name      : chr "Linux"
[08:10:13.115] | : . '   .. ..$ captures_utf8: logi TRUE
[08:10:13.115] | : . '   ..$ version            : chr "1.8"
[08:10:13.115] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:10:13.115] | : . '  $ success: logi TRUE
[08:10:13.115] | : . '  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.004 0 0
[08:10:13.115] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:10:13.115] | : . '  $ tag    : NULL
[08:10:13.126] | : . ' Received FutureResult
[08:10:13.126] | : . ' FutureResult:
[08:10:13.126] | : . ' value: ‘integer’
[08:10:13.126] | : . ' visible: TRUE
[08:10:13.126] | : . ' stdout: NULL
[08:10:13.126] | : . ' conditions: [n = 0] 
[08:10:13.126] | : . ' RNG used: FALSE
[08:10:13.126] | : . ' duration: 0.003590584 secs (started 2025-06-17 08:10:13.110855)
[08:10:13.126] | : . ' version: 1.8
[08:10:13.126] | : . ' FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'remove', earlySignal = 0) ...
[08:10:13.126] | : . ' , Removed future from position #1
[08:10:13.127] | : . ' , Number of registered futures: 0
[08:10:13.127] | : . ' FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'remove', earlySignal = 0) ... done
[08:10:13.127] | : . ' Erased future from future backend
[08:10:13.127] | : . ' result() for ClusterFuture ...
[08:10:13.127] | : . ' , result already collected: FutureResult
[08:10:13.127] | : . ' result() for ClusterFuture ... done
[08:10:13.127] | : . ' signalConditions() ...
[08:10:13.127] | : . ' , include = ‘immediateCondition’
[08:10:13.127] | : . ' , exclude = 
[08:10:13.128] | : . ' , resignal = FALSE
[08:10:13.128] | : . ' , Number of conditions: 0
[08:10:13.128] | : . ' ,  int 0
[08:10:13.128] | : . ' signalConditions() ... done
[08:10:13.128] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:10:13.128] | : result() for ClusterFuture ... done
[08:10:13.128] | : result() for ClusterFuture ...
[08:10:13.129] | : . result already collected: FutureResult
[08:10:13.129] | : result() for ClusterFuture ... done
[08:10:13.129] | : signalConditions() ...
[08:10:13.129] | : . include = ‘immediateCondition’
[08:10:13.129] | : . exclude = 
[08:10:13.129] | : . resignal = FALSE
[08:10:13.129] | : . Number of conditions: 0
[08:10:13.129] | : .  int 0
[08:10:13.130] | : signalConditions() ... done
[08:10:13.130] | : relay stdout ...
[08:10:13.130] | : relay stdout ... done
[08:10:13.130] | : check for misuse ...
[08:10:13.130] | : check for misuse ... done
[08:10:13.130] | value() for MultisessionFuture (<unnamed-23>) ... done
- stdout = structure(TRUE, drop = TRUE)
[08:10:13.130] | future(..., label = NULL) ...
[08:10:13.130] | : lazy: FALSE
[08:10:13.131] | : stdout: TRUE
[08:10:13.131] | : conditions: [n=1] ‘condition’
[08:10:13.131] | : gc: FALSE
[08:10:13.131] | : earlySignal: FALSE
[08:10:13.131] | : getGlobalsAndPackages() ...
[08:10:13.131] | : . Searching for globals ...
[08:10:13.135] | : . ' globals found: [1] ‘print’
[08:10:13.136] | : . Searching for globals ... done
[08:10:13.136] | : . Resolving globals: FALSE
[08:10:13.136] | : . Search for packages associated with the globals ...
[08:10:13.136] | : . ' Packages associated with globals: [1] ‘base’
[08:10:13.136] | : . ' Packages: [1] ‘base’
[08:10:13.136] | : . Search for packages associated with the globals ... done
[08:10:13.137] | : . Packages after dropping 'base': [0] 
[08:10:13.137] | : . globals: [0] 
[08:10:13.137] | : . packages: [0] 
[08:10:13.137] | : getGlobalsAndPackages() ... done
[08:10:13.137] | : run() for ‘Future’ (<unnamed-24>) ...
[08:10:13.137] | : . state: ‘created’
[08:10:13.137] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:13.137] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:13.137] | : . Using MultisessionFutureBackend ...
[08:10:13.138] | : . ' Number of futures since start: 5 (5 created, 5 launched, 5 finished)
[08:10:13.138] | : . ' Launching futures ...
[08:10:13.138] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:10:13.138] | : . ' , ; Workers: [n=2]
[08:10:13.138] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:10:13.139] | : . ' , ; FutureRegistry: ‘workers-c43140e2813aafebd687dadd8479959e’
[08:10:13.140] | : . ' , ; requestWorker() ...
[08:10:13.140] | : . ' , ; ` requestNode() ...
[08:10:13.140] | : . ' , ; ` | Number of workers: 2
[08:10:13.140] | : . ' , ; ` | Polling for a free worker ...
[08:10:13.140] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:13.140] | : . ' , ; ` | : . Listing all futures
[08:10:13.140] | : . ' , ; ` | : . Number of registered futures: 0
[08:10:13.140] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:13.140] | : . ' , ; ` | : Total time: 0
[08:10:13.141] | : . ' , ; ` | Polling for a free worker ... done
[08:10:13.141] | : . ' , ; ` | FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:13.141] | : . ' , ; ` | : Listing all futures
[08:10:13.141] | : . ' , ; ` | : Number of registered futures: 0
[08:10:13.141] | : . ' , ; ` | FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:13.141] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:10:13.141] | : . ' , ; ` | Index of first available worker: 1
[08:10:13.141] | : . ' , ; ` | Validate that the worker is functional ...
[08:10:13.240] | : . ' , ; ` | : Worker is functional
[08:10:13.240] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:13.240] | : . ' , ; ` | : . Listing all futures
[08:10:13.240] | : . ' , ; ` | : . Number of registered futures: 0
[08:10:13.240] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:13.240] | : . ' , ; ` | Validate that the worker is functional ... done
[08:10:13.241] | : . ' , ; ` requestNode() ... done
[08:10:13.241] | : . ' , ; ` cluster node index: 1
[08:10:13.241] | : . ' , ; requestWorker() ... done
[08:10:13.241] | : . ' , ; eraseGlobalEnvironment() ...
[08:10:13.241] | : . ' , ; eraseGlobalEnvironment() ... done
[08:10:13.241] | : . ' , ; launchFuture() ...
[08:10:13.241] | : . ' , ; ` cluster node index: 1
[08:10:13.242] | : . ' , ; ` getFutureData() ...
[08:10:13.242] | : . ' , ; ` | getFutureCore() ...
[08:10:13.242] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:10:13.242] | : . ' , ; ` | getFutureCore() ... done
[08:10:13.242] | : . ' , ; ` | getFutureCapture() ...
[08:10:13.242] | : . ' , ; ` | getFutureCapture() ... done
[08:10:13.242] | : . ' , ; ` | getFutureContext() ...
[08:10:13.242] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:13.242] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:10:13.243] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:13.243] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:10:13.243] | : . ' , ; ` | getFutureContext() ... done
[08:10:13.243] | : . ' , ; ` getFutureData() ... done
[08:10:13.243] | : . ' , ; ` FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'add', earlySignal = 0) ...
[08:10:13.243] | : . ' , ; ` | Appended future to position #1
[08:10:13.243] | : . ' , ; ` | Number of registered futures: 1
[08:10:13.244] | : . ' , ; ` FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'add', earlySignal = 0) ... done
[08:10:13.244] | : . ' , ; launchFuture() ... done
[08:10:13.244] | : . ' , ; MultisessionFuture started
[08:10:13.244] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:10:13.244] | : . ' Launching futures ... done
[08:10:13.244] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:10:13.244] | : . Using MultisessionFutureBackend ... done
[08:10:13.244] | : run() for ‘Future’ (<unnamed-24>) ... done
[08:10:13.244] | future(..., label = NULL) ... done
[08:10:13.244] | result() for ClusterFuture ...
[08:10:13.245] | : assertValidConnection() ...
[08:10:13.245] | : . cluster node index: 1
[08:10:13.245] | : assertValidConnection() ... done
[08:10:13.245] | : receiveMessageFromWorker() for ClusterFuture ...
[08:10:13.245] | : . cluster node index: 1
[08:10:13.287] | : . [1] TRUE
[08:10:13.288] | : . received data:
[08:10:13.288] | : . List of 5
[08:10:13.288] | : .  $ type   : chr "VALUE"
[08:10:13.288] | : .  $ value  :List of 16
[08:10:13.288] | : .   ..$ value              : num 42
[08:10:13.288] | : .   ..$ visible            : logi FALSE
[08:10:13.288] | : .   ..$ stdout             : chr "[1] 42\n"
[08:10:13.288] | : .   ..$ conditions         : list()
[08:10:13.288] | : .   ..$ rng                : logi FALSE
[08:10:13.288] | : .   ..$ seed               : NULL
[08:10:13.288] | : .   ..$ misuseGlobalEnv    : NULL
[08:10:13.288] | : .   ..$ misuseConnections  :List of 3
[08:10:13.288] | : .   .. ..$ added   : NULL
[08:10:13.288] | : .   .. ..$ removed : NULL
[08:10:13.288] | : .   .. ..$ replaced: NULL
[08:10:13.288] | : .   ..$ misuseDevices      : NULL
[08:10:13.288] | : .   ..$ misuseDefaultDevice: list()
[08:10:13.288] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:10:13"
[08:10:13.288] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:10:13"
[08:10:13.288] | : .   ..$ uuid               : chr [1:2] "01885b60b3d40eac4dc41a106424dbc9" "24"
[08:10:13.288] | : .   ..$ session_uuid       : chr "39303af82a0d3e4a17a2eb656215d5b7"
[08:10:13.288] | : .   .. ..- attr(*, "source")=List of 5
[08:10:13.288] | : .   .. .. ..$ host  : Named chr "28bb34de9501"
[08:10:13.288] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:10:13.288] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:10:13.288] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:10:13.288] | : .   .. .. ..$ pid   : int 75649
[08:10:13.288] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:10:12"
[08:10:13.288] | : .   .. .. ..$ random: int 2147483647
[08:10:13.288] | : .   ..$ r_info             :List of 4
[08:10:13.288] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:10:13.288] | : .   .. .. ..$ : int [1:3] 4 5 1
[08:10:13.288] | : .   .. ..$ os           : chr "unix"
[08:10:13.288] | : .   .. ..$ os_name      : chr "Linux"
[08:10:13.288] | : .   .. ..$ captures_utf8: logi TRUE
[08:10:13.288] | : .   ..$ version            : chr "1.8"
[08:10:13.288] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:10:13.288] | : .  $ success: logi TRUE
[08:10:13.288] | : .  $ time   : 'proc_time' Named num [1:5] 0.002 0 0.003 0 0
[08:10:13.288] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:10:13.288] | : .  $ tag    : NULL
[08:10:13.299] | : . Received FutureResult
[08:10:13.299] | : . FutureResult:
[08:10:13.299] | : . value: ‘numeric’
[08:10:13.299] | : . visible: FALSE
[08:10:13.299] | : . stdout: character
[08:10:13.299] | : . conditions: [n = 0] 
[08:10:13.299] | : . RNG used: FALSE
[08:10:13.299] | : . duration: 0.002612591 secs (started 2025-06-17 08:10:13.284867)
[08:10:13.299] | : . version: 1.8
[08:10:13.299] | : . FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'remove', earlySignal = 0) ...
[08:10:13.299] | : . ' Removed future from position #1
[08:10:13.300] | : . ' Number of registered futures: 0
[08:10:13.300] | : . FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'remove', earlySignal = 0) ... done
[08:10:13.300] | : . Erased future from future backend
[08:10:13.300] | : . result() for ClusterFuture ...
[08:10:13.300] | : . ' result already collected: FutureResult
[08:10:13.300] | : . result() for ClusterFuture ... done
[08:10:13.300] | : . signalConditions() ...
[08:10:13.300] | : . ' include = ‘immediateCondition’
[08:10:13.300] | : . ' exclude = 
[08:10:13.300] | : . ' resignal = FALSE
[08:10:13.301] | : . ' Number of conditions: 0
[08:10:13.301] | : . '  int 0
[08:10:13.301] | : . signalConditions() ... done
[08:10:13.301] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:10:13.301] | result() for ClusterFuture ... done
[08:10:13.301] | value() for MultisessionFuture (<unnamed-24>) ...
[08:10:13.301] | : result() for ClusterFuture ...
[08:10:13.302] | : . result already collected: FutureResult
[08:10:13.302] | : result() for ClusterFuture ... done
[08:10:13.302] | : result() for ClusterFuture ...
[08:10:13.302] | : . result already collected: FutureResult
[08:10:13.302] | : result() for ClusterFuture ... done
[08:10:13.302] | : signalConditions() ...
[08:10:13.302] | : . include = ‘immediateCondition’
[08:10:13.302] | : . exclude = 
[08:10:13.302] | : . resignal = FALSE
[08:10:13.302] | : . Number of conditions: 0
[08:10:13.303] | : .  int 0
[08:10:13.303] | : signalConditions() ... done
[08:10:13.303] | : relay stdout ...
[1] 42
[08:10:13.303] | : relay stdout ... done
[08:10:13.303] | : check for misuse ...
[08:10:13.303] | : check for misuse ... done
[08:10:13.303] | value() for MultisessionFuture (<unnamed-24>) ... done
[08:10:13.304] | result() for ClusterFuture ...
[08:10:13.304] | : result already collected: FutureResult
[08:10:13.304] | result() for ClusterFuture ... done
- stdout = NA
[08:10:13.304] | future(..., label = NULL) ...
[08:10:13.304] | : lazy: FALSE
[08:10:13.304] | : stdout: NA
[08:10:13.304] | : conditions: [n=1] ‘condition’
[08:10:13.304] | : gc: FALSE
[08:10:13.304] | : earlySignal: FALSE
[08:10:13.304] | : getGlobalsAndPackages() ...
[08:10:13.305] | : . Searching for globals ...
[08:10:13.334] | : . ' globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:10:13.334] | : . Searching for globals ... done
[08:10:13.334] | : . Resolving globals: FALSE
[08:10:13.334] | : . Search for packages associated with the globals ...
[08:10:13.335] | : . ' Packages associated with globals: [2] ‘base’, ‘utils’
[08:10:13.335] | : . ' Packages: [2] ‘base’, ‘utils’
[08:10:13.335] | : . Search for packages associated with the globals ... done
[08:10:13.335] | : . Packages after dropping 'base': [1] ‘utils’
[08:10:13.335] | : . Packages after dropping non-attached packages: [1] ‘utils’
[08:10:13.335] | : . globals: [0] 
[08:10:13.336] | : . packages: [1] ‘utils’
[08:10:13.336] | : getGlobalsAndPackages() ... done
[08:10:13.336] | : run() for ‘Future’ (<unnamed-25>) ...
[08:10:13.336] | : . state: ‘created’
[08:10:13.336] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:13.336] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:13.336] | : . Using MultisessionFutureBackend ...
[08:10:13.336] | : . ' Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:10:13.337] | : . ' Launching futures ...
[08:10:13.337] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:10:13.337] | : . ' , ; Workers: [n=2]
[08:10:13.337] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:10:13.338] | : . ' , ; FutureRegistry: ‘workers-c43140e2813aafebd687dadd8479959e’
[08:10:13.338] | : . ' , ; requestWorker() ...
[08:10:13.339] | : . ' , ; ` requestNode() ...
[08:10:13.339] | : . ' , ; ` | Number of workers: 2
[08:10:13.339] | : . ' , ; ` | Polling for a free worker ...
[08:10:13.339] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:13.339] | : . ' , ; ` | : . Listing all futures
[08:10:13.339] | : . ' , ; ` | : . Number of registered futures: 0
[08:10:13.339] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:13.339] | : . ' , ; ` | : Total time: 0
[08:10:13.339] | : . ' , ; ` | Polling for a free worker ... done
[08:10:13.340] | : . ' , ; ` | FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:13.340] | : . ' , ; ` | : Listing all futures
[08:10:13.340] | : . ' , ; ` | : Number of registered futures: 0
[08:10:13.340] | : . ' , ; ` | FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:13.340] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:10:13.340] | : . ' , ; ` | Index of first available worker: 1
[08:10:13.340] | : . ' , ; ` | Validate that the worker is functional ...
[08:10:13.442] | : . ' , ; ` | : Worker is functional
[08:10:13.442] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:13.442] | : . ' , ; ` | : . Listing all futures
[08:10:13.443] | : . ' , ; ` | : . Number of registered futures: 0
[08:10:13.443] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:13.443] | : . ' , ; ` | Validate that the worker is functional ... done
[08:10:13.443] | : . ' , ; ` requestNode() ... done
[08:10:13.443] | : . ' , ; ` cluster node index: 1
[08:10:13.443] | : . ' , ; requestWorker() ... done
[08:10:13.443] | : . ' , ; eraseGlobalEnvironment() ...
[08:10:13.444] | : . ' , ; eraseGlobalEnvironment() ... done
[08:10:13.444] | : . ' , ; launchFuture() ...
[08:10:13.444] | : . ' , ; ` cluster node index: 1
[08:10:13.444] | : . ' , ; ` getFutureData() ...
[08:10:13.444] | : . ' , ; ` | getFutureCore() ...
[08:10:13.444] | : . ' , ; ` | : Packages needed by the future expression (n = 1): ‘utils’
[08:10:13.444] | : . ' , ; ` | getFutureCore() ... done
[08:10:13.444] | : . ' , ; ` | getFutureCapture() ...
[08:10:13.444] | : . ' , ; ` | getFutureCapture() ... done
[08:10:13.445] | : . ' , ; ` | getFutureContext() ...
[08:10:13.445] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:13.445] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:10:13.445] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:13.445] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:10:13.445] | : . ' , ; ` | getFutureContext() ... done
[08:10:13.445] | : . ' , ; ` getFutureData() ... done
[08:10:13.446] | : . ' , ; ` FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'add', earlySignal = 0) ...
[08:10:13.446] | : . ' , ; ` | Appended future to position #1
[08:10:13.446] | : . ' , ; ` | Number of registered futures: 1
[08:10:13.446] | : . ' , ; ` FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'add', earlySignal = 0) ... done
[08:10:13.446] | : . ' , ; launchFuture() ... done
[08:10:13.446] | : . ' , ; MultisessionFuture started
[08:10:13.446] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:10:13.446] | : . ' Launching futures ... done
[08:10:13.446] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:10:13.446] | : . Using MultisessionFutureBackend ... done
[08:10:13.447] | : run() for ‘Future’ (<unnamed-25>) ... done
[08:10:13.447] | future(..., label = NULL) ... done
[08:10:13.447] | result() for ClusterFuture ...
[08:10:13.447] | : assertValidConnection() ...
[08:10:13.447] | : . cluster node index: 1
[08:10:13.447] | : assertValidConnection() ... done
[08:10:13.448] | : receiveMessageFromWorker() for ClusterFuture ...
[08:10:13.448] | : . cluster node index: 1
[08:10:13.490] | : . [1] TRUE
[08:10:13.490] | : . received data:
[08:10:13.491] | : . List of 5
[08:10:13.491] | : .  $ type   : chr "VALUE"
[08:10:13.491] | : .  $ value  :List of 16
[08:10:13.491] | : .   ..$ value              : int 42
[08:10:13.491] | : .   ..$ visible            : logi TRUE
[08:10:13.491] | : .   ..$ stdout             : NULL
[08:10:13.491] | : .   ..$ conditions         : list()
[08:10:13.491] | : .   ..$ rng                : logi FALSE
[08:10:13.491] | : .   ..$ seed               : NULL
[08:10:13.491] | : .   ..$ misuseGlobalEnv    : NULL
[08:10:13.491] | : .   ..$ misuseConnections  :List of 3
[08:10:13.491] | : .   .. ..$ added   : NULL
[08:10:13.491] | : .   .. ..$ removed : NULL
[08:10:13.491] | : .   .. ..$ replaced: NULL
[08:10:13.491] | : .   ..$ misuseDevices      : NULL
[08:10:13.491] | : .   ..$ misuseDefaultDevice: list()
[08:10:13.491] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:10:13"
[08:10:13.491] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:10:13"
[08:10:13.491] | : .   ..$ uuid               : chr [1:2] "01885b60b3d40eac4dc41a106424dbc9" "25"
[08:10:13.491] | : .   ..$ session_uuid       : chr "39303af82a0d3e4a17a2eb656215d5b7"
[08:10:13.491] | : .   .. ..- attr(*, "source")=List of 5
[08:10:13.491] | : .   .. .. ..$ host  : Named chr "28bb34de9501"
[08:10:13.491] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:10:13.491] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:10:13.491] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:10:13.491] | : .   .. .. ..$ pid   : int 75649
[08:10:13.491] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:10:12"
[08:10:13.491] | : .   .. .. ..$ random: int 2147483647
[08:10:13.491] | : .   ..$ r_info             :List of 4
[08:10:13.491] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:10:13.491] | : .   .. .. ..$ : int [1:3] 4 5 1
[08:10:13.491] | : .   .. ..$ os           : chr "unix"
[08:10:13.491] | : .   .. ..$ os_name      : chr "Linux"
[08:10:13.491] | : .   .. ..$ captures_utf8: logi TRUE
[08:10:13.491] | : .   ..$ version            : chr "1.8"
[08:10:13.491] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:10:13.491] | : .  $ success: logi TRUE
[08:10:13.491] | : .  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.004 0 0
[08:10:13.491] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:10:13.491] | : .  $ tag    : NULL
[08:10:13.501] | : . Received FutureResult
[08:10:13.501] | : . FutureResult:
[08:10:13.501] | : . value: ‘integer’
[08:10:13.501] | : . visible: TRUE
[08:10:13.501] | : . stdout: NULL
[08:10:13.501] | : . conditions: [n = 0] 
[08:10:13.501] | : . RNG used: FALSE
[08:10:13.501] | : . duration: 0.003350496 secs (started 2025-06-17 08:10:13.486884)
[08:10:13.501] | : . version: 1.8
[08:10:13.502] | : . FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'remove', earlySignal = 0) ...
[08:10:13.502] | : . ' Removed future from position #1
[08:10:13.502] | : . ' Number of registered futures: 0
[08:10:13.502] | : . FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'remove', earlySignal = 0) ... done
[08:10:13.502] | : . Erased future from future backend
[08:10:13.502] | : . result() for ClusterFuture ...
[08:10:13.503] | : . ' result already collected: FutureResult
[08:10:13.503] | : . result() for ClusterFuture ... done
[08:10:13.503] | : . signalConditions() ...
[08:10:13.503] | : . ' include = ‘immediateCondition’
[08:10:13.503] | : . ' exclude = 
[08:10:13.503] | : . ' resignal = FALSE
[08:10:13.503] | : . ' Number of conditions: 0
[08:10:13.503] | : . '  int 0
[08:10:13.504] | : . signalConditions() ... done
[08:10:13.504] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:10:13.504] | result() for ClusterFuture ... done
List of 16
 $ value              : int 42
 $ visible            : logi TRUE
 $ stdout             : NULL
 $ conditions         : list()
 $ rng                : logi FALSE
 $ seed               : NULL
 $ misuseGlobalEnv    : NULL
 $ misuseConnections  :List of 3
  ..$ added   : NULL
  ..$ removed : NULL
  ..$ replaced: NULL
 $ misuseDevices      : NULL
 $ misuseDefaultDevice: list()
 $ started            : POSIXct[1:1], format: "2025-06-17 08:10:13"
 $ finished           : POSIXct[1:1], format: "2025-06-17 08:10:13"
 $ uuid               : chr [1:2] "01885b60b3d40eac4dc41a106424dbc9" "25"
 $ session_uuid       : chr "39303af82a0d3e4a17a2eb656215d5b7"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "28bb34de9501"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 75649
  .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:10:12"
  .. ..$ random: int 2147483647
 $ r_info             :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 5 1
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version            : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[08:10:13.513] | value() for MultisessionFuture (<unnamed-25>) ...
[08:10:13.513] | : result() for ClusterFuture ...
[08:10:13.513] | : . result already collected: FutureResult
[08:10:13.513] | : result() for ClusterFuture ... done
[08:10:13.513] | : result() for ClusterFuture ...
[08:10:13.514] | : . result already collected: FutureResult
[08:10:13.514] | : result() for ClusterFuture ... done
[08:10:13.514] | : signalConditions() ...
[08:10:13.514] | : . include = ‘immediateCondition’
[08:10:13.514] | : . exclude = 
[08:10:13.514] | : . resignal = FALSE
[08:10:13.514] | : . Number of conditions: 0
[08:10:13.514] | : .  int 0
[08:10:13.515] | : signalConditions() ... done
[08:10:13.515] | : relay stdout ...
[08:10:13.515] | : relay stdout ... done
[08:10:13.515] | : check for misuse ...
[08:10:13.515] | : check for misuse ... done
[08:10:13.515] | value() for MultisessionFuture (<unnamed-25>) ... done
[08:10:13.516] | future(..., label = NULL) ...
[08:10:13.516] | : lazy: FALSE
[08:10:13.516] | : stdout: NA
[08:10:13.516] | : conditions: [n=1] ‘condition’
[08:10:13.516] | : gc: FALSE
[08:10:13.516] | : earlySignal: FALSE
[08:10:13.516] | : getGlobalsAndPackages() ...
[08:10:13.516] | : . Searching for globals ...
[08:10:13.546] | : . ' globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:10:13.546] | : . Searching for globals ... done
[08:10:13.546] | : . Resolving globals: FALSE
[08:10:13.546] | : . Search for packages associated with the globals ...
[08:10:13.547] | : . ' Packages associated with globals: [2] ‘base’, ‘utils’
[08:10:13.547] | : . ' Packages: [2] ‘base’, ‘utils’
[08:10:13.547] | : . Search for packages associated with the globals ... done
[08:10:13.547] | : . Packages after dropping 'base': [1] ‘utils’
[08:10:13.547] | : . Packages after dropping non-attached packages: [1] ‘utils’
[08:10:13.547] | : . globals: [0] 
[08:10:13.547] | : . packages: [1] ‘utils’
[08:10:13.548] | : getGlobalsAndPackages() ... done
[08:10:13.548] | : run() for ‘Future’ (<unnamed-26>) ...
[08:10:13.548] | : . state: ‘created’
[08:10:13.548] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:13.548] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:13.548] | : . Using MultisessionFutureBackend ...
[08:10:13.548] | : . ' Number of futures since start: 7 (7 created, 7 launched, 7 finished)
[08:10:13.549] | : . ' Launching futures ...
[08:10:13.549] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:10:13.549] | : . ' , ; Workers: [n=2]
[08:10:13.549] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:10:13.550] | : . ' , ; FutureRegistry: ‘workers-c43140e2813aafebd687dadd8479959e’
[08:10:13.550] | : . ' , ; requestWorker() ...
[08:10:13.551] | : . ' , ; ` requestNode() ...
[08:10:13.551] | : . ' , ; ` | Number of workers: 2
[08:10:13.551] | : . ' , ; ` | Polling for a free worker ...
[08:10:13.551] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:13.551] | : . ' , ; ` | : . Listing all futures
[08:10:13.551] | : . ' , ; ` | : . Number of registered futures: 0
[08:10:13.551] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:13.551] | : . ' , ; ` | : Total time: 0
[08:10:13.551] | : . ' , ; ` | Polling for a free worker ... done
[08:10:13.552] | : . ' , ; ` | FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:13.552] | : . ' , ; ` | : Listing all futures
[08:10:13.552] | : . ' , ; ` | : Number of registered futures: 0
[08:10:13.552] | : . ' , ; ` | FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:13.552] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:10:13.552] | : . ' , ; ` | Index of first available worker: 1
[08:10:13.552] | : . ' , ; ` | Validate that the worker is functional ...
[08:10:13.653] | : . ' , ; ` | : Worker is functional
[08:10:13.654] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:13.654] | : . ' , ; ` | : . Listing all futures
[08:10:13.654] | : . ' , ; ` | : . Number of registered futures: 0
[08:10:13.654] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:13.654] | : . ' , ; ` | Validate that the worker is functional ... done
[08:10:13.654] | : . ' , ; ` requestNode() ... done
[08:10:13.654] | : . ' , ; ` cluster node index: 1
[08:10:13.654] | : . ' , ; requestWorker() ... done
[08:10:13.655] | : . ' , ; eraseGlobalEnvironment() ...
[08:10:13.655] | : . ' , ; eraseGlobalEnvironment() ... done
[08:10:13.655] | : . ' , ; launchFuture() ...
[08:10:13.655] | : . ' , ; ` cluster node index: 1
[08:10:13.655] | : . ' , ; ` getFutureData() ...
[08:10:13.655] | : . ' , ; ` | getFutureCore() ...
[08:10:13.656] | : . ' , ; ` | : Packages needed by the future expression (n = 1): ‘utils’
[08:10:13.656] | : . ' , ; ` | getFutureCore() ... done
[08:10:13.656] | : . ' , ; ` | getFutureCapture() ...
[08:10:13.656] | : . ' , ; ` | getFutureCapture() ... done
[08:10:13.656] | : . ' , ; ` | getFutureContext() ...
[08:10:13.656] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:13.656] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:10:13.656] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:13.656] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:10:13.657] | : . ' , ; ` | getFutureContext() ... done
[08:10:13.657] | : . ' , ; ` getFutureData() ... done
[08:10:13.657] | : . ' , ; ` FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'add', earlySignal = 0) ...
[08:10:13.657] | : . ' , ; ` | Appended future to position #1
[08:10:13.657] | : . ' , ; ` | Number of registered futures: 1
[08:10:13.657] | : . ' , ; ` FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'add', earlySignal = 0) ... done
[08:10:13.657] | : . ' , ; launchFuture() ... done
[08:10:13.657] | : . ' , ; MultisessionFuture started
[08:10:13.658] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:10:13.658] | : . ' Launching futures ... done
[08:10:13.658] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:10:13.658] | : . Using MultisessionFutureBackend ... done
[08:10:13.658] | : run() for ‘Future’ (<unnamed-26>) ... done
[08:10:13.658] | future(..., label = NULL) ... done
[08:10:13.658] | value() for MultisessionFuture (<unnamed-26>) ...
[08:10:13.658] | : result() for ClusterFuture ...
[08:10:13.659] | : . assertValidConnection() ...
[08:10:13.659] | : . ' cluster node index: 1
[08:10:13.659] | : . assertValidConnection() ... done
[08:10:13.659] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:10:13.659] | : . ' cluster node index: 1
[08:10:13.707] | : . ' [1] TRUE
[08:10:13.707] | : . ' received data:
[08:10:13.707] | : . ' List of 5
[08:10:13.707] | : . '  $ type   : chr "VALUE"
[08:10:13.707] | : . '  $ value  :List of 16
[08:10:13.707] | : . '   ..$ value              : int 42
[08:10:13.707] | : . '   ..$ visible            : logi TRUE
[08:10:13.707] | : . '   ..$ stdout             : NULL
[08:10:13.707] | : . '   ..$ conditions         : list()
[08:10:13.707] | : . '   ..$ rng                : logi FALSE
[08:10:13.707] | : . '   ..$ seed               : NULL
[08:10:13.707] | : . '   ..$ misuseGlobalEnv    : NULL
[08:10:13.707] | : . '   ..$ misuseConnections  :List of 3
[08:10:13.707] | : . '   .. ..$ added   : NULL
[08:10:13.707] | : . '   .. ..$ removed : NULL
[08:10:13.707] | : . '   .. ..$ replaced: NULL
[08:10:13.707] | : . '   ..$ misuseDevices      : NULL
[08:10:13.707] | : . '   ..$ misuseDefaultDevice: list()
[08:10:13.707] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:10:13"
[08:10:13.707] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:10:13"
[08:10:13.707] | : . '   ..$ uuid               : chr [1:2] "01885b60b3d40eac4dc41a106424dbc9" "26"
[08:10:13.707] | : . '   ..$ session_uuid       : chr "39303af82a0d3e4a17a2eb656215d5b7"
[08:10:13.707] | : . '   .. ..- attr(*, "source")=List of 5
[08:10:13.707] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:10:13.707] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:10:13.707] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:10:13.707] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:10:13.707] | : . '   .. .. ..$ pid   : int 75649
[08:10:13.707] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:10:12"
[08:10:13.707] | : . '   .. .. ..$ random: int 2147483647
[08:10:13.707] | : . '   ..$ r_info             :List of 4
[08:10:13.707] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:10:13.707] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:10:13.707] | : . '   .. ..$ os           : chr "unix"
[08:10:13.707] | : . '   .. ..$ os_name      : chr "Linux"
[08:10:13.707] | : . '   .. ..$ captures_utf8: logi TRUE
[08:10:13.707] | : . '   ..$ version            : chr "1.8"
[08:10:13.707] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:10:13.707] | : . '  $ success: logi TRUE
[08:10:13.707] | : . '  $ time   : 'proc_time' Named num [1:5] 0.009 0 0.009 0 0
[08:10:13.707] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:10:13.707] | : . '  $ tag    : NULL
[08:10:13.718] | : . ' Received FutureResult
[08:10:13.718] | : . ' FutureResult:
[08:10:13.718] | : . ' value: ‘integer’
[08:10:13.718] | : . ' visible: TRUE
[08:10:13.718] | : . ' stdout: NULL
[08:10:13.718] | : . ' conditions: [n = 0] 
[08:10:13.718] | : . ' RNG used: FALSE
[08:10:13.718] | : . ' duration: 0.003309011 secs (started 2025-06-17 08:10:13.697888)
[08:10:13.718] | : . ' version: 1.8
[08:10:13.719] | : . ' FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'remove', earlySignal = 0) ...
[08:10:13.719] | : . ' , Removed future from position #1
[08:10:13.719] | : . ' , Number of registered futures: 0
[08:10:13.719] | : . ' FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'remove', earlySignal = 0) ... done
[08:10:13.719] | : . ' Erased future from future backend
[08:10:13.719] | : . ' result() for ClusterFuture ...
[08:10:13.719] | : . ' , result already collected: FutureResult
[08:10:13.719] | : . ' result() for ClusterFuture ... done
[08:10:13.719] | : . ' signalConditions() ...
[08:10:13.720] | : . ' , include = ‘immediateCondition’
[08:10:13.720] | : . ' , exclude = 
[08:10:13.720] | : . ' , resignal = FALSE
[08:10:13.720] | : . ' , Number of conditions: 0
[08:10:13.720] | : . ' ,  int 0
[08:10:13.720] | : . ' signalConditions() ... done
[08:10:13.720] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:10:13.721] | : result() for ClusterFuture ... done
[08:10:13.721] | : result() for ClusterFuture ...
[08:10:13.721] | : . result already collected: FutureResult
[08:10:13.721] | : result() for ClusterFuture ... done
[08:10:13.721] | : signalConditions() ...
[08:10:13.721] | : . include = ‘immediateCondition’
[08:10:13.721] | : . exclude = 
[08:10:13.721] | : . resignal = FALSE
[08:10:13.721] | : . Number of conditions: 0
[08:10:13.721] | : .  int 0
[08:10:13.722] | : signalConditions() ... done
[08:10:13.722] | : relay stdout ...
[08:10:13.722] | : relay stdout ... done
[08:10:13.722] | : check for misuse ...
[08:10:13.722] | : check for misuse ... done
[08:10:13.722] | value() for MultisessionFuture (<unnamed-26>) ... done
- stdout = structure(TRUE, drop = TRUE)
[08:10:13.723] | future(..., label = NULL) ...
[08:10:13.723] | : lazy: FALSE
[08:10:13.723] | : stdout: TRUE
[08:10:13.723] | : conditions: [n=1] ‘condition’
[08:10:13.723] | : gc: FALSE
[08:10:13.723] | : earlySignal: FALSE
[08:10:13.723] | : getGlobalsAndPackages() ...
[08:10:13.723] | : . Searching for globals ...
[08:10:13.726] | : . ' globals found: [1] ‘print’
[08:10:13.726] | : . Searching for globals ... done
[08:10:13.726] | : . Resolving globals: FALSE
[08:10:13.727] | : . Search for packages associated with the globals ...
[08:10:13.727] | : . ' Packages associated with globals: [1] ‘base’
[08:10:13.727] | : . ' Packages: [1] ‘base’
[08:10:13.727] | : . Search for packages associated with the globals ... done
[08:10:13.727] | : . Packages after dropping 'base': [0] 
[08:10:13.727] | : . globals: [0] 
[08:10:13.727] | : . packages: [0] 
[08:10:13.727] | : getGlobalsAndPackages() ... done
[08:10:13.728] | : run() for ‘Future’ (<unnamed-27>) ...
[08:10:13.728] | : . state: ‘created’
[08:10:13.728] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:13.728] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:13.728] | : . Using MultisessionFutureBackend ...
[08:10:13.728] | : . ' Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:10:13.728] | : . ' Launching futures ...
[08:10:13.729] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:10:13.729] | : . ' , ; Workers: [n=2]
[08:10:13.729] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:10:13.730] | : . ' , ; FutureRegistry: ‘workers-c43140e2813aafebd687dadd8479959e’
[08:10:13.730] | : . ' , ; requestWorker() ...
[08:10:13.731] | : . ' , ; ` requestNode() ...
[08:10:13.731] | : . ' , ; ` | Number of workers: 2
[08:10:13.731] | : . ' , ; ` | Polling for a free worker ...
[08:10:13.731] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:13.731] | : . ' , ; ` | : . Listing all futures
[08:10:13.731] | : . ' , ; ` | : . Number of registered futures: 0
[08:10:13.731] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:13.731] | : . ' , ; ` | : Total time: 0
[08:10:13.731] | : . ' , ; ` | Polling for a free worker ... done
[08:10:13.732] | : . ' , ; ` | FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:13.732] | : . ' , ; ` | : Listing all futures
[08:10:13.732] | : . ' , ; ` | : Number of registered futures: 0
[08:10:13.732] | : . ' , ; ` | FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:13.732] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:10:13.732] | : . ' , ; ` | Index of first available worker: 1
[08:10:13.732] | : . ' , ; ` | Validate that the worker is functional ...
[08:10:13.829] | : . ' , ; ` | : Worker is functional
[08:10:13.829] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ...
[08:10:13.829] | : . ' , ; ` | : . Listing all futures
[08:10:13.829] | : . ' , ; ` | : . Number of registered futures: 0
[08:10:13.830] | : . ' , ; ` | : FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'list', earlySignal = 0) ... done
[08:10:13.830] | : . ' , ; ` | Validate that the worker is functional ... done
[08:10:13.830] | : . ' , ; ` requestNode() ... done
[08:10:13.830] | : . ' , ; ` cluster node index: 1
[08:10:13.830] | : . ' , ; requestWorker() ... done
[08:10:13.830] | : . ' , ; eraseGlobalEnvironment() ...
[08:10:13.831] | : . ' , ; eraseGlobalEnvironment() ... done
[08:10:13.831] | : . ' , ; launchFuture() ...
[08:10:13.831] | : . ' , ; ` cluster node index: 1
[08:10:13.831] | : . ' , ; ` getFutureData() ...
[08:10:13.831] | : . ' , ; ` | getFutureCore() ...
[08:10:13.831] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:10:13.831] | : . ' , ; ` | getFutureCore() ... done
[08:10:13.831] | : . ' , ; ` | getFutureCapture() ...
[08:10:13.831] | : . ' , ; ` | getFutureCapture() ... done
[08:10:13.832] | : . ' , ; ` | getFutureContext() ...
[08:10:13.832] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:10:13.832] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:10:13.832] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:10:13.832] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:10:13.832] | : . ' , ; ` | getFutureContext() ... done
[08:10:13.832] | : . ' , ; ` getFutureData() ... done
[08:10:13.833] | : . ' , ; ` FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'add', earlySignal = 0) ...
[08:10:13.833] | : . ' , ; ` | Appended future to position #1
[08:10:13.833] | : . ' , ; ` | Number of registered futures: 1
[08:10:13.833] | : . ' , ; ` FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'add', earlySignal = 0) ... done
[08:10:13.833] | : . ' , ; launchFuture() ... done
[08:10:13.833] | : . ' , ; MultisessionFuture started
[08:10:13.833] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:10:13.833] | : . ' Launching futures ... done
[08:10:13.833] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:10:13.834] | : . Using MultisessionFutureBackend ... done
[08:10:13.834] | : run() for ‘Future’ (<unnamed-27>) ... done
[08:10:13.834] | future(..., label = NULL) ... done
[08:10:13.834] | result() for ClusterFuture ...
[08:10:13.834] | : assertValidConnection() ...
[08:10:13.834] | : . cluster node index: 1
[08:10:13.834] | : assertValidConnection() ... done
[08:10:13.835] | : receiveMessageFromWorker() for ClusterFuture ...
[08:10:13.835] | : . cluster node index: 1
[08:10:13.877] | : . [1] TRUE
[08:10:13.877] | : . received data:
[08:10:13.877] | : . List of 5
[08:10:13.877] | : .  $ type   : chr "VALUE"
[08:10:13.877] | : .  $ value  :List of 16
[08:10:13.877] | : .   ..$ value              : num 42
[08:10:13.877] | : .   ..$ visible            : logi FALSE
[08:10:13.877] | : .   ..$ stdout             : chr "[1] 42\n"
[08:10:13.877] | : .   ..$ conditions         : list()
[08:10:13.877] | : .   ..$ rng                : logi FALSE
[08:10:13.877] | : .   ..$ seed               : NULL
[08:10:13.877] | : .   ..$ misuseGlobalEnv    : NULL
[08:10:13.877] | : .   ..$ misuseConnections  :List of 3
[08:10:13.877] | : .   .. ..$ added   : NULL
[08:10:13.877] | : .   .. ..$ removed : NULL
[08:10:13.877] | : .   .. ..$ replaced: NULL
[08:10:13.877] | : .   ..$ misuseDevices      : NULL
[08:10:13.877] | : .   ..$ misuseDefaultDevice: list()
[08:10:13.877] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:10:13"
[08:10:13.877] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:10:13"
[08:10:13.877] | : .   ..$ uuid               : chr [1:2] "01885b60b3d40eac4dc41a106424dbc9" "27"
[08:10:13.877] | : .   ..$ session_uuid       : chr "39303af82a0d3e4a17a2eb656215d5b7"
[08:10:13.877] | : .   .. ..- attr(*, "source")=List of 5
[08:10:13.877] | : .   .. .. ..$ host  : Named chr "28bb34de9501"
[08:10:13.877] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:10:13.877] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:10:13.877] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:10:13.877] | : .   .. .. ..$ pid   : int 75649
[08:10:13.877] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:10:12"
[08:10:13.877] | : .   .. .. ..$ random: int 2147483647
[08:10:13.877] | : .   ..$ r_info             :List of 4
[08:10:13.877] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:10:13.877] | : .   .. .. ..$ : int [1:3] 4 5 1
[08:10:13.877] | : .   .. ..$ os           : chr "unix"
[08:10:13.877] | : .   .. ..$ os_name      : chr "Linux"
[08:10:13.877] | : .   .. ..$ captures_utf8: logi TRUE
[08:10:13.877] | : .   ..$ version            : chr "1.8"
[08:10:13.877] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:10:13.877] | : .  $ success: logi TRUE
[08:10:13.877] | : .  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[08:10:13.877] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:10:13.877] | : .  $ tag    : NULL
[08:10:13.890] | : . Received FutureResult
[08:10:13.890] | : . FutureResult:
[08:10:13.890] | : . value: ‘numeric’
[08:10:13.890] | : . visible: FALSE
[08:10:13.890] | : . stdout: character
[08:10:13.890] | : . conditions: [n = 0] 
[08:10:13.890] | : . RNG used: FALSE
[08:10:13.890] | : . duration: 0.002964258 secs (started 2025-06-17 08:10:13.873808)
[08:10:13.890] | : . version: 1.8
[08:10:13.890] | : . FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'remove', earlySignal = 0) ...
[08:10:13.890] | : . ' Removed future from position #1
[08:10:13.891] | : . ' Number of registered futures: 0
[08:10:13.891] | : . FutureRegistry('workers-c43140e2813aafebd687dadd8479959e', action = 'remove', earlySignal = 0) ... done
[08:10:13.891] | : . Erased future from future backend
[08:10:13.891] | : . result() for ClusterFuture ...
[08:10:13.891] | : . ' result already collected: FutureResult
[08:10:13.891] | : . result() for ClusterFuture ... done
[08:10:13.891] | : . signalConditions() ...
[08:10:13.891] | : . ' include = ‘immediateCondition’
[08:10:13.891] | : . ' exclude = 
[08:10:13.891] | : . ' resignal = FALSE
[08:10:13.892] | : . ' Number of conditions: 0
[08:10:13.892] | : . '  int 0
[08:10:13.892] | : . signalConditions() ... done
[08:10:13.892] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:10:13.892] | result() for ClusterFuture ... done
[08:10:13.892] | value() for MultisessionFuture (<unnamed-27>) ...
[08:10:13.892] | : result() for ClusterFuture ...
[08:10:13.893] | : . result already collected: FutureResult
[08:10:13.893] | : result() for ClusterFuture ... done
[08:10:13.893] | : result() for ClusterFuture ...
[08:10:13.893] | : . result already collected: FutureResult
[08:10:13.893] | : result() for ClusterFuture ... done
[08:10:13.893] | : signalConditions() ...
[08:10:13.893] | : . include = ‘immediateCondition’
[08:10:13.893] | : . exclude = 
[08:10:13.893] | : . resignal = FALSE
[08:10:13.893] | : . Number of conditions: 0
[08:10:13.894] | : .  int 0
[08:10:13.894] | : signalConditions() ... done
[08:10:13.894] | : relay stdout ...
[1] 42
[08:10:13.894] | : relay stdout ... done
[08:10:13.894] | : check for misuse ...
[08:10:13.894] | : check for misuse ... done
[08:10:13.894] | value() for MultisessionFuture (<unnamed-27>) ... done
[08:10:13.895] | result() for ClusterFuture ...
[08:10:13.895] | : result already collected: FutureResult
[08:10:13.895] | result() for ClusterFuture ... done
multisession ... done
Testing with 2 cores ... done

> message("*** Standard output ... DONE")
*** Standard output ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=2s, sys.self=0.1s, elapsed=4s, user.child=0.6s, sys.child=0.5s
Test ‘stdout’ ... success
> 
