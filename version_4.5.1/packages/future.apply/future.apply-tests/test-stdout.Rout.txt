
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-stdout.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future.apply:::testme("stdout")
Test ‘stdout’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future.apply/testme/test-stdout.R’

> library(future.apply)
Loading required package: future

> message("*** future_*apply() and 'future.stdout' ...")
*** future_*apply() and 'future.stdout' ...

> options(future.debug = TRUE)

> truth <- list()

> out <- utils::capture.output({
+     y <- lapply(1:0, FUN = function(x) {
+         print(x)
+     })
+ })

> truth[["lapply"]] <- list(value = y, stdout = out)

> out <- utils::capture.output({
+     y <- mapply(1:0, 0:1, FUN = function(x, y) {
+         print(list(x = x, y = y))
+     })
+ })

> truth[["mapply"]] <- list(value = y, stdout = out)

> for (cores in 1:availCores) {
+     message(sprintf("  - Testing with %d cores ...", cores))
+     options(mc.cores = cores)
+     for (strategy in  .... [TRUNCATED] 
  - Testing with 1 cores ...
* plan('sequential') ...
[08:06:49.275] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:49.275] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:06:49.275] | : all.equal() for FutureStrategyList ...
[08:06:49.276] | : . New stack:
[08:06:49.276] | : . List of 1
[08:06:49.276] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:49.276] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:49.276] | : .   ..- attr(*, "init")= logi TRUE
[08:06:49.276] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:49.276] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.276] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.276] | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:49.276] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:49.281] | : . Old stack:
[08:06:49.281] | : . List of 1
[08:06:49.281] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:49.281] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:49.281] | : .   ..- attr(*, "init")= logi TRUE
[08:06:49.281] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:49.281] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.281] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.281] | : .   ..- attr(*, "call")= language plan(sequential)
[08:06:49.281] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:49.287] | : . Not identical
[08:06:49.287] | : . all.equal() for future ...
[08:06:49.287] | : . ' List of 2
[08:06:49.287] | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:49.287] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:49.287] | : . '   ..- attr(*, "init")= logi TRUE
[08:06:49.287] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:49.287] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.287] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.287] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:49.287] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:49.287] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:49.287] | : . '   ..- attr(*, "init")= logi TRUE
[08:06:49.287] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:49.287] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.287] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.287] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:06:49.293] | : . all.equal() for future ... done
[08:06:49.293] | : all.equal() for FutureStrategyList ... done
[08:06:49.293] | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:06:49.293] | : List of future strategies:
[08:06:49.293] | : 1. sequential:
[08:06:49.293] | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:49.293] | :    - tweaked: FALSE
[08:06:49.293] | :    - call: plan(sequential)
[08:06:49.294] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:06:49.294] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
* future_lapply(x, ..., future.stdout = FALSE) ...
[08:06:49.294] future_lapply() ...
[08:06:49.302] | Globals in FUN(): [n=4] ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[08:06:49.302] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:06:49.303] | future_lapply() -> future_xapply() ...
[08:06:49.303] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:49.303] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:06:49.304] | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:49.304] | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:49.304] | : . '  - attr(*, "init")= logi TRUE
[08:06:49.304] | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:49.304] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.304] | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.304] | : . '  - attr(*, "call")= language plan(sequential)
[08:06:49.306] | : . ' init: TRUE
[08:06:49.307] | : . ' makeFutureBackend(<sequential>) ...
[08:06:49.307] | : . ' , Backend function: <‘NULL’>
[08:06:49.307] | : . ' , Evaluator tweak arguments: [n=0]
[08:06:49.307] | : . ' ,  list()
[08:06:49.307] | : . ' , Evaluator formal arguments: [n=2]
[08:06:49.308] | : . ' ,  list()
[08:06:49.308] | : . ' , Backend factory arguments: [n=2]
[08:06:49.308] | : . ' , Dotted pair list of 2
[08:06:49.308] | : . ' ,  $ gc         : logi FALSE
[08:06:49.308] | : . ' ,  $ earlySignal: logi FALSE
[08:06:49.309] | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:06:49.310] | : . ' makeFutureBackend(<sequential>) ... done
[08:06:49.310] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:06:49.310] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:49.310] | : Number of chunks: 1
[08:06:49.310] | : getGlobalsAndPackagesXApply() ...
[08:06:49.310] | : . future.globals: TRUE
[08:06:49.311] | : . getGlobalsAndPackages() ...
[08:06:49.311] | : . ' Searching for globals ...
[08:06:49.326] | : . ' , globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[08:06:49.326] | : . ' Searching for globals ... done
[08:06:49.326] | : . ' Resolving globals: FALSE
[08:06:49.326] | : . ' Search for packages associated with the globals ...
[08:06:49.327] | : . ' , Packages associated with globals: [1] ‘base’
[08:06:49.327] | : . ' , Packages: [1] ‘base’
[08:06:49.327] | : . ' Search for packages associated with the globals ... done
[08:06:49.328] | : . ' The total size of the 1 globals is 841 bytes (841 bytes)
[08:06:49.328] | : . ' The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[08:06:49.329] | : . ' Packages after dropping 'base': [0] 
[08:06:49.329] | : . ' globals: [1] ‘FUN’
[08:06:49.329] | : . ' packages: [0] 
[08:06:49.329] | : . getGlobalsAndPackages() ... done
[08:06:49.329] | : . globals found/used: [n=1] ‘FUN’
[08:06:49.329] | : . needed namespaces: [n=0] 
[08:06:49.329] | : . use_args: TRUE
[08:06:49.330] | : . Getting '...' globals ...
[08:06:49.330] | : . ' resolve() for FutureGlobals ...
[08:06:49.330] | : . ' , recursive: 0
[08:06:49.331] | : . ' , Number of elements: 1
[08:06:49.331] | : . ' , elements: ‘...’
[08:06:49.331] | : . ' , 'obj' is DotDotDotList
[08:06:49.331] | : . ' , resolve(obj, ...) ...
[08:06:49.331] | : . ' , ; resolve() for DotDotDotList ...
[08:06:49.332] | : . ' , ; ` recursive: -1
[08:06:49.332] | : . ' , ; resolve() for DotDotDotList ... done
[08:06:49.332] | : . ' , resolve(obj, ...) ... done
[08:06:49.332] | : . ' , resolved() for DotDotDotList ...
[08:06:49.332] | : . ' , ; Number of elements: 0
[08:06:49.332] | : . ' , ; Number of futures: 0
[08:06:49.333] | : . ' , resolved() for DotDotDotList ... done
[08:06:49.333] | : . ' , length: 0 (resolved future 1)
[08:06:49.333] | : . ' resolve() for FutureGlobals ... done
[08:06:49.333] | : . ' '...' content: [n=0] 
[08:06:49.333] | : . ' List of 1
[08:06:49.333] | : . '  $ ...: list()
[08:06:49.333] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:49.333] | : . '  - attr(*, "where")=List of 1
[08:06:49.333] | : . '   ..$ ...:<environment: 0x55eede961728> 
[08:06:49.333] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:49.333] | : . '  - attr(*, "resolved")= logi TRUE
[08:06:49.333] | : . '  - attr(*, "total_size")= num NA
[08:06:49.336] | : . Getting '...' globals ... done
[08:06:49.337] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:06:49.337] | : . List of 2
[08:06:49.337] | : .  $ ...future.FUN:function (x)  
[08:06:49.337] | : .  $ ...          : list()
[08:06:49.337] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:49.337] | : .  - attr(*, "where")=List of 2
[08:06:49.337] | : .   ..$ ...future.FUN:<environment: 0x55eede961728> 
[08:06:49.337] | : .   ..$ ...          :<environment: 0x55eede961728> 
[08:06:49.337] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:49.337] | : .  - attr(*, "resolved")= logi FALSE
[08:06:49.337] | : .  - attr(*, "total_size")= num 6008
[08:06:49.341] | : . Packages to be attached in all futures: [n=0] 
[08:06:49.341] | : getGlobalsAndPackagesXApply() ... done
[08:06:49.341] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:49.341] | : List of 5
[08:06:49.341] | :  $ ...future.FUN            :function (x)  
[08:06:49.341] | :  $ ...                      : list()
[08:06:49.341] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:49.341] | :  $ ...future.elements_ii    : NULL
[08:06:49.341] | :  $ ...future.seeds_ii       : NULL
[08:06:49.341] | :  $ ...future.globals.maxSize: NULL
[08:06:49.341] | :  - attr(*, "where")=List of 5
[08:06:49.341] | :   ..$ ...future.FUN            :<environment: 0x55eede961728> 
[08:06:49.341] | :   ..$ ...                      :<environment: 0x55eede961728> 
[08:06:49.341] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:49.341] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:49.341] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:49.341] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:49.341] | :  - attr(*, "resolved")= logi FALSE
[08:06:49.341] | :  - attr(*, "total_size")= num 6008
[08:06:49.346] | : Number of futures (= number of chunks): 1
[08:06:49.346] | : Launching 1 futures (chunks) ...
[08:06:49.347] | : Chunk #1 of 1 ...
[08:06:49.347] | :  - Finding globals in 'X' for chunk #1 ...
[08:06:49.347] | : getGlobalsAndPackages() ...
[08:06:49.347] | : . Searching for globals ...
[08:06:49.348] | : . ' globals found: [0] 
[08:06:49.348] | : . Searching for globals ... done
[08:06:49.348] | : . globals: [0] <none>
[08:06:49.348] | : . packages: [0] <none>
[08:06:49.348] | : getGlobalsAndPackages() ... done
[08:06:49.348] | :    + additional globals found: [n=0] 
[08:06:49.348] | :    + additional namespaces needed: [n=0] 
[08:06:49.349] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:06:49.349] | :  - seeds: <none>
[08:06:49.349] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:49.349] | : future(..., label = ‘future_lapply-1’) ...
[08:06:49.349] | : . lazy: FALSE
[08:06:49.349] | : . stdout: FALSE
[08:06:49.349] | : . conditions: [n=1] ‘condition’
[08:06:49.349] | : . gc: FALSE
[08:06:49.349] | : . earlySignal: FALSE
[08:06:49.350] | : . getGlobalsAndPackages() ...
[08:06:49.352] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:49.352] | : . ' Resolving globals: FALSE
[08:06:49.353] | : . ' Tweak future expression to call with '...' arguments ...
[08:06:49.353] | : . ' , {
[08:06:49.353] | : . ' ,     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:49.353] | : . ' ,     "# expression in do.call(), because function called uses '...'  "
[08:06:49.353] | : . ' ,     "# as a global variable                                         "
[08:06:49.353] | : . ' ,     do.call(function(...) {
[08:06:49.353] | : . ' ,         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:49.353] | : . ' ,         "# without having an '...' argument. This means '...' is treated"
[08:06:49.353] | : . ' ,         "# as a global variable. This may happen when FUN() is an       "
[08:06:49.353] | : . ' ,         "# anonymous function.                                          "
[08:06:49.353] | : . ' ,         "#                                                              "
[08:06:49.353] | : . ' ,         "# If an anonymous function, we will make sure to restore the   "
[08:06:49.353] | : . ' ,         "# function environment of FUN() to the calling environment.    "
[08:06:49.353] | : . ' ,         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:49.353] | : . ' ,         "# global environment, which is where globals are written.      "
[08:06:49.353] | : . ' ,         penv <- env <- environment(...future.FUN)
[08:06:49.353] | : . ' ,         repeat {
[08:06:49.353] | : . ' ,             if (identical(env, globalenv()) || identical(env, 
[08:06:49.353] | : . ' ,                 emptyenv())) 
[08:06:49.353] | : . ' ,                 break
[08:06:49.353] | : . ' ,             penv <- env
[08:06:49.353] | : . ' ,             env <- parent.env(env)
[08:06:49.353] | : . ' ,         }
[08:06:49.353] | : . ' ,         if (identical(penv, globalenv())) {
[08:06:49.353] | : . ' ,             environment(...future.FUN) <- environment()
[08:06:49.353] | : . ' ,         }
[08:06:49.353] | : . ' ,         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:49.353] | : . ' ,             !isNamespace(penv)) {
[08:06:49.353] | : . ' ,             parent.env(penv) <- environment()
[08:06:49.353] | : . ' ,         }
[08:06:49.353] | : . ' ,         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:49.353] | : . ' ,         {
[08:06:49.353] | : . ' ,             "# future.apply:::future_xapply(): preserve future option"
[08:06:49.353] | : . ' ,             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:49.353] | : . ' ,             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:49.353] | : . ' ,                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:49.353] | : . ' ,                 on.exit(options(oopts), add = TRUE)
[08:06:49.353] | : . ' ,             }
[08:06:49.353] | : . ' ,             {
[08:06:49.353] | : . ' ,                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:49.353] | : . ' ,                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:49.353] | : . ' ,                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:49.353] | : . ' ,                   {
[08:06:49.353] | : . ' ,                     ...future.FUN(...future.X_jj, ...)
[08:06:49.353] | : . ' ,                   }
[08:06:49.353] | : . ' ,                 })
[08:06:49.353] | : . ' ,             }
[08:06:49.353] | : . ' ,         }
[08:06:49.353] | : . ' ,     }, args = future.call.arguments)
[08:06:49.353] | : . ' , }
[08:06:49.353] | : . ' Tweak future expression to call with '...' arguments ... done
[08:06:49.354] | : . ' Search for packages associated with the globals ...
[08:06:49.354] | : . ' , Packages associated with globals: [0] 
[08:06:49.354] | : . ' , Packages: [0] 
[08:06:49.354] | : . ' Search for packages associated with the globals ... done
[08:06:49.354] | : . ' Packages after dropping 'base': [0] 
[08:06:49.355] | : . ' globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:49.355] | : . ' packages: [0] 
[08:06:49.355] | : . getGlobalsAndPackages() ... done
[08:06:49.356] | : . run() for ‘Future’ (‘future_lapply-1’) ...
[08:06:49.356] | : . ' state: ‘created’
[08:06:49.356] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:49.356] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:49.356] | : . ' Using SequentialFutureBackend ...
[08:06:49.356] | : . ' , Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:06:49.357] | : . ' , Launching futures ...
[08:06:49.357] | : . ' , ; launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:06:49.357] | : . ' , ; ` getFutureData() ...
[08:06:49.357] | : . ' , ; ` | getFutureCore() ...
[08:06:49.357] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:06:49.358] | : . ' , ; ` | getFutureCore() ... done
[08:06:49.358] | : . ' , ; ` | getFutureCapture() ...
[08:06:49.358] | : . ' , ; ` | getFutureCapture() ... done
[08:06:49.358] | : . ' , ; ` | getFutureContext() ...
[08:06:49.358] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:49.358] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:06:49.358] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:49.359] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:06:49.359] | : . ' , ; ` | getFutureContext() ... done
[08:06:49.359] | : . ' , ; ` getFutureData() ... done
[08:06:49.362] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:49.362] | : . ' , ; ` | Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:06:49.362] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:49.362] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:49.363] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:49.363] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:06:49.363] | : . ' , ; ` | : . New stack:
[08:06:49.363] | : . ' , ; ` | : . List of 1
[08:06:49.363] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:49.363] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:49.363] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:06:49.363] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:49.363] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.363] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.363] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:49.363] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:49.366] | : . ' , ; ` | : . Old stack:
[08:06:49.366] | : . ' , ; ` | : . List of 1
[08:06:49.366] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:49.366] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:49.366] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:49.366] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:49.366] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.366] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.366] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:06:49.366] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:49.366] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:49.366] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.366] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:49.370] | : . ' , ; ` | : . Not identical
[08:06:49.370] | : . ' , ; ` | : . all.equal() for future ...
[08:06:49.370] | : . ' , ; ` | : . ' List of 2
[08:06:49.370] | : . ' , ; ` | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:49.370] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:49.370] | : . ' , ; ` | : . '   ..- attr(*, "init")= logi TRUE
[08:06:49.370] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:49.370] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.370] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.370] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:49.370] | : . ' , ; ` | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:49.370] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:49.370] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:49.370] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:49.370] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.370] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.370] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(sequential)
[08:06:49.370] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:49.370] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:49.370] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.375] | : . ' , ; ` | : . all.equal() for future ... done
[08:06:49.375] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:06:49.376] | : . ' , ; ` | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:06:49.376] | : . ' , ; ` | : List of future strategies:
[08:06:49.376] | : . ' , ; ` | : 1. sequential:
[08:06:49.376] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:49.376] | : . ' , ; ` | :    - tweaked: FALSE
[08:06:49.376] | : . ' , ; ` | :    - call: plan(sequential)
[08:06:49.376] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:49.376] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:49.377] | : . ' , ; ` assign_globals() ...
[08:06:49.377] | : . ' , ; ` List of 5
[08:06:49.377] | : . ' , ; `  $ ...future.FUN            :function (x)  
[08:06:49.377] | : . ' , ; `  $ future.call.arguments    : list()
[08:06:49.377] | : . ' , ; `   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:49.377] | : . ' , ; `  $ ...future.elements_ii    :List of 2
[08:06:49.377] | : . ' , ; `   ..$ : int 1
[08:06:49.377] | : . ' , ; `   ..$ : int 0
[08:06:49.377] | : . ' , ; `  $ ...future.seeds_ii       : NULL
[08:06:49.377] | : . ' , ; `  $ ...future.globals.maxSize: NULL
[08:06:49.377] | : . ' , ; `  - attr(*, "where")=List of 5
[08:06:49.377] | : . ' , ; `   ..$ ...future.FUN            :<environment: 0x55eede961728> 
[08:06:49.377] | : . ' , ; `   ..$ future.call.arguments    :<environment: 0x55eede961728> 
[08:06:49.377] | : . ' , ; `   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:49.377] | : . ' , ; `   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:49.377] | : . ' , ; `   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:49.377] | : . ' , ; `  - attr(*, "resolved")= logi FALSE
[08:06:49.377] | : . ' , ; `  - attr(*, "total_size")= num 6008
[08:06:49.377] | : . ' , ; `  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:49.377] | : . ' , ; `  - attr(*, "already-done")= logi TRUE
[08:06:49.385] | : . ' , ; ` - copied ‘...future.FUN’ to environment
[08:06:49.385] | : . ' , ; ` - copied ‘future.call.arguments’ to environment
[08:06:49.385] | : . ' , ; ` - copied ‘...future.elements_ii’ to environment
[08:06:49.385] | : . ' , ; ` - copied ‘...future.seeds_ii’ to environment
[08:06:49.385] | : . ' , ; ` - copied ‘...future.globals.maxSize’ to environment
[08:06:49.385] | : . ' , ; ` assign_globals() ... done
[08:06:49.889] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:49.889] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:49.889] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:49.890] | : . ' , ; ` | : . all.equal() for FutureStrategyList ...
[08:06:49.890] | : . ' , ; ` | : . ' New stack:
[08:06:49.890] | : . ' , ; ` | : . ' List of 1
[08:06:49.890] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:49.890] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:49.890] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:49.890] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:49.890] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.890] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.890] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(sequential)
[08:06:49.890] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:49.890] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:49.890] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.890] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:49.893] | : . ' , ; ` | : . ' Old stack:
[08:06:49.893] | : . ' , ; ` | : . ' List of 1
[08:06:49.893] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:49.893] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:49.893] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:49.893] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:49.893] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.893] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.893] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(sequential)
[08:06:49.893] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:49.893] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:49.893] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.893] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:49.897] | : . ' , ; ` | : . ' Identical
[08:06:49.897] | : . ' , ; ` | : . all.equal() for FutureStrategyList ... done
[08:06:49.897] | : . ' , ; ` | : . plan(): Skip setting new future backend stack because it is the same as the current one:
[08:06:49.897] | : . ' , ; ` | : . List of future strategies:
[08:06:49.897] | : . ' , ; ` | : . 1. sequential:
[08:06:49.897] | : . ' , ; ` | : .    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:49.897] | : . ' , ; ` | : .    - tweaked: FALSE
[08:06:49.897] | : . ' , ; ` | : .    - call: plan(sequential)
[08:06:49.897] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:49.898] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:49.898] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:49.901] | : . ' , ; ` SequentialFuture started (and completed)
[08:06:49.901] | : . ' , ; ` signalConditions() ...
[08:06:49.901] | : . ' , ; ` | include = ‘immediateCondition’
[08:06:49.902] | : . ' , ; ` | exclude = 
[08:06:49.902] | : . ' , ; ` | resignal = FALSE
[08:06:49.903] | : . ' , ; ` | Number of conditions: 6
[08:06:49.904] | : . ' , ; ` |  int 6
[08:06:49.904] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.904] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.904] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.904] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.905] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.905] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.905] | : . ' , ; ` | Drop signaled conditions: 0
[08:06:49.905] | : . ' , ; ` signalConditions() ... done
[08:06:49.905] | : . ' , ; launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:06:49.905] | : . ' , Launching futures ... done
[08:06:49.905] | : . ' , Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:06:49.905] | : . ' Using SequentialFutureBackend ... done
[08:06:49.905] | : . run() for ‘Future’ (‘future_lapply-1’) ... done
[08:06:49.906] | : future(..., label = ‘future_lapply-1’) ... done
[08:06:49.906] | : Created future:
[08:06:49.906] | : SequentialFuture:
[08:06:49.906] | : Label: ‘future_lapply-1’
[08:06:49.906] | : Expression:
[08:06:49.906] | : {
[08:06:49.906] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:49.906] | :     "# expression in do.call(), because function called uses '...'  "
[08:06:49.906] | :     "# as a global variable                                         "
[08:06:49.906] | :     do.call(function(...) {
[08:06:49.906] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:49.906] | :         "# without having an '...' argument. This means '...' is treated"
[08:06:49.906] | :         "# as a global variable. This may happen when FUN() is an       "
[08:06:49.906] | :         "# anonymous function.                                          "
[08:06:49.906] | :         "#                                                              "
[08:06:49.906] | :         "# If an anonymous function, we will make sure to restore the   "
[08:06:49.906] | :         "# function environment of FUN() to the calling environment.    "
[08:06:49.906] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:49.906] | :         "# global environment, which is where globals are written.      "
[08:06:49.906] | :         penv <- env <- environment(...future.FUN)
[08:06:49.906] | :         repeat {
[08:06:49.906] | :             if (identical(env, globalenv()) || identical(env, 
[08:06:49.906] | :                 emptyenv())) 
[08:06:49.906] | :                 break
[08:06:49.906] | :             penv <- env
[08:06:49.906] | :             env <- parent.env(env)
[08:06:49.906] | :         }
[08:06:49.906] | :         if (identical(penv, globalenv())) {
[08:06:49.906] | :             environment(...future.FUN) <- environment()
[08:06:49.906] | :         }
[08:06:49.906] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:49.906] | :             !isNamespace(penv)) {
[08:06:49.906] | :             parent.env(penv) <- environment()
[08:06:49.906] | :         }
[08:06:49.906] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:49.906] | :         {
[08:06:49.906] | :             "# future.apply:::future_xapply(): preserve future option"
[08:06:49.906] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:49.906] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:49.906] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:49.906] | :                 on.exit(options(oopts), add = TRUE)
[08:06:49.906] | :             }
[08:06:49.906] | :             {
[08:06:49.906] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:49.906] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:49.906] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:49.906] | :                   {
[08:06:49.906] | :                     ...future.FUN(...future.X_jj, ...)
[08:06:49.906] | :                   }
[08:06:49.906] | :                 })
[08:06:49.906] | :             }
[08:06:49.906] | :         }
[08:06:49.906] | :     }, args = future.call.arguments)
[08:06:49.906] | : }
[08:06:49.906] | : Globals: 5 objects totaling 6.13 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:49.906] | : Packages: <none>
[08:06:49.906] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:49.906] | : Capture standard output: FALSE
[08:06:49.906] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:49.906] | : Immediate condition classes: ‘immediateCondition’
[08:06:49.906] | : Lazy evaluation: FALSE
[08:06:49.906] | : Local evaluation: TRUE
[08:06:49.906] | : Asynchronous evaluation: TRUE
[08:06:49.906] | : Early signaling: FALSE
[08:06:49.906] | : Environment: R_GlobalEnv
[08:06:49.906] | : State: ‘finished’
[08:06:49.906] | : Resolved: TRUE
[08:06:49.906] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-1
[08:06:49.906] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:49.906] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:06:49.906] | : Value: 55 bytes of class ‘list’
[08:06:49.906] | : Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
[08:06:49.906] | : Duration: 0.5283554 secs (started 2025-06-17 08:06:49.360731)
[08:06:49.906] | : Worker process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:49.908] | : Chunk #1 of 1 ... DONE
[08:06:49.908] | : Launching 1 futures (chunks) ... DONE
[08:06:49.908] | : Resolving 1 futures (chunks) ...
[08:06:49.909] | : value() for list ...
[08:06:49.909] | : . recursive: 0
[08:06:49.909] | : . reduce: FALSE
[08:06:49.909] | : . length: 1

[08:06:49.909] | : . Number of remaining objects: 1
[08:06:49.909] | : . checking value #1:
[08:06:49.909] | : . 'obj' is SequentialFuture
[08:06:49.909] | : . resolved() for SequentialFuture (‘future_lapply-1’) ...
[08:06:49.910] | : . ' state: ‘finished’
[08:06:49.910] | : . ' run: TRUE
[08:06:49.910] | : . ' result: ‘FutureResult’
[08:06:49.910] | : . resolved() for SequentialFuture (‘future_lapply-1’) ... done
[08:06:49.910] | : . SequentialFuture #1
[08:06:49.910] | : . signalConditionsASAP(SequentialFuture, pos=1) ...
[08:06:49.910] | : . ' nx: 1
[08:06:49.910] | : . ' relay: TRUE
[08:06:49.910] | : . ' stdout: TRUE
[08:06:49.910] | : . ' signal: TRUE
[08:06:49.911] | : . ' resignal: FALSE
[08:06:49.911] | : . ' force: TRUE
[08:06:49.911] | : . ' relayed: [n=1] FALSE
[08:06:49.911] | : . ' queued futures: [n=1] FALSE
[08:06:49.911] | : . ' until=1
[08:06:49.911] | : . ' relaying element #1
[08:06:49.912] | : . ' value() for SequentialFuture (‘future_lapply-1’) ...
[08:06:49.912] | : . ' , signalConditions() ...
[08:06:49.912] | : . ' , ; include = ‘immediateCondition’
[08:06:49.912] | : . ' , ; exclude = 
[08:06:49.912] | : . ' , ; resignal = FALSE
[08:06:49.912] | : . ' , ; Number of conditions: 6
[08:06:49.912] | : . ' , ;  int 6
[08:06:49.913] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.913] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.913] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.913] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.913] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.913] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.913] | : . ' , ; Drop signaled conditions: 0
[08:06:49.913] | : . ' , signalConditions() ... done
[08:06:49.914] | : . ' , relay stdout ...
[08:06:49.914] | : . ' , relay stdout ... done
[08:06:49.914] | : . ' , check for misuse ...
[08:06:49.914] | : . ' , check for misuse ... done
[08:06:49.914] | : . ' value() for SequentialFuture (‘future_lapply-1’) ... done
[08:06:49.914] | : . ' signalConditions() ...
[08:06:49.914] | : . ' , include = ‘immediateCondition’
[08:06:49.914] | : . ' , exclude = 
[08:06:49.914] | : . ' , resignal = FALSE
[08:06:49.914] | : . ' , Number of conditions: 6
[08:06:49.915] | : . ' ,  int 6
[08:06:49.915] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.915] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.915] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.915] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.915] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.916] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.916] | : . ' , Drop signaled conditions: 0
[08:06:49.916] | : . ' signalConditions() ... done
[08:06:49.916] | : . ' signalConditions() ...
[08:06:49.916] | : . ' , include = ‘condition’
[08:06:49.916] | : . ' , exclude = ‘error’, ‘immediateCondition’
[08:06:49.916] | : . ' , resignal = TRUE
[08:06:49.916] | : . ' , Number of conditions: 6
[08:06:49.916] | : . ' ,  int 6
[08:06:49.917] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.917] | : . ' , Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:49.360] | : . ' , ; ` attachPackages() ...
[08:06:49.917] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.917] | : . ' , Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:49.361] | : . ' , ; ` | packages: [n=1] ‘future’
[08:06:49.917] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.917] | : . ' , Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:49.361] | : . ' , ; ` attachPackages() ... done
[08:06:49.918] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.918] | : . ' , Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:49.361] | : . ' , ; ` attachPackages() ...
[08:06:49.918] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.918] | : . ' , Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:49.361] | : . ' , ; ` | packages: [n=0] 
[08:06:49.918] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:49.918] | : . ' , Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:49.361] | : . ' , ; ` attachPackages() ... done
[08:06:49.918] | : . ' , Drop signaled conditions: 6
[08:06:49.918] | : . ' signalConditions() ... done
[08:06:49.918] | : . ' relayed: [n=1] TRUE
[08:06:49.919] | : . ' queued futures: [n=1] TRUE
[08:06:49.919] | : . signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:06:49.919] | : . value(<SequentialFuture>, ...) ...
[08:06:49.919] | : . value(<SequentialFuture>, ...) ... done
[08:06:49.919] | : . value() for SequentialFuture (‘future_lapply-1’) ...
[08:06:49.919] | : . ' signalConditions() ...
[08:06:49.919] | : . ' , include = ‘immediateCondition’
[08:06:49.919] | : . ' , exclude = 
[08:06:49.919] | : . ' , resignal = FALSE
[08:06:49.919] | : . ' , Number of conditions: 0
[08:06:49.920] | : . ' ,  int 0
[08:06:49.920] | : . ' signalConditions() ... done
[08:06:49.920] | : . ' check for misuse ...
[08:06:49.920] | : . ' check for misuse ... done
[08:06:49.920] | : . value() for SequentialFuture (‘future_lapply-1’) ... done
[08:06:49.920] | : . value: <list>
[08:06:49.921] | : . signalConditionsASAP(SequentialFuture, pos=1) ...
[08:06:49.921] | : . ' nx: 1
[08:06:49.921] | : . ' relay: TRUE
[08:06:49.921] | : . ' stdout: TRUE
[08:06:49.921] | : . ' signal: TRUE
[08:06:49.921] | : . ' resignal: FALSE
[08:06:49.921] | : . ' force: TRUE
[08:06:49.921] | : . ' relayed: [n=1] TRUE
[08:06:49.921] | : . ' queued futures: [n=1] TRUE
[08:06:49.921] | : . ' until=1
[08:06:49.921] | : . ' relayed: [n=1] TRUE
[08:06:49.922] | : . ' queued futures: [n=1] TRUE
[08:06:49.922] | : . signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:06:49.922] | : . resolve() for SequentialFuture ...
[08:06:49.922] | : . resolve() for SequentialFuture ... done
[08:06:49.922] | : . length: 0 (resolved future 1)
[08:06:49.922] | : value() for list ... done
[08:06:49.922] | : Relaying remaining futures ...
[08:06:49.922] | : . signalConditionsASAP(NULL, pos=0) ...
[08:06:49.923] | : . ' nx: 1
[08:06:49.923] | : . ' relay: TRUE
[08:06:49.923] | : . ' stdout: TRUE
[08:06:49.923] | : . ' signal: TRUE
[08:06:49.923] | : . ' resignal: FALSE
[08:06:49.923] | : . ' force: TRUE
[08:06:49.923] | : . ' relayed: [n=1] TRUE
[08:06:49.923] | : . ' queued futures: [n=1] TRUE
 - flush all
[08:06:49.923] | : . ' relayed: [n=1] TRUE
[08:06:49.923] | : . ' queued futures: [n=1] TRUE
[08:06:49.924] | : . signalConditionsASAP(NULL, pos=0) ... done
[08:06:49.925] | : Relaying remaining futures ... done
[08:06:49.925] | future_lapply() -> future_xapply() ... done
[08:06:49.925] |  - Number of value chunks collected: 1
[08:06:49.925] | Resolving 1 futures (chunks) ... DONE
[08:06:49.926] | Reducing values from 1 chunks ...
[08:06:49.926] |  - Number of values collected after concatenation: 2
[08:06:49.926] |  - Number of values expected: 2
[08:06:49.926] | Reducing values from 1 chunks ... DONE
[08:06:49.926] future_lapply() ... done

* future_lapply(x, ..., future.stdout = FALSE) ... DONE
* future_lapply(x, ..., future.stdout = TRUE) ...
[08:06:49.926] future_lapply() ...
[08:06:49.927] | Globals in FUN(): [n=4] ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[08:06:49.927] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:06:49.927] | future_lapply() -> future_xapply() ...
[08:06:49.928] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:49.928] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:49.928] | : Number of chunks: 1
[08:06:49.928] | : getGlobalsAndPackagesXApply() ...
[08:06:49.928] | : . future.globals: TRUE
[08:06:49.928] | : . getGlobalsAndPackages() ...
[08:06:49.928] | : . ' Searching for globals ...
[08:06:49.935] | : . ' , globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[08:06:49.935] | : . ' Searching for globals ... done
[08:06:49.936] | : . ' Resolving globals: FALSE
[08:06:49.936] | : . ' Search for packages associated with the globals ...
[08:06:49.936] | : . ' , Packages associated with globals: [1] ‘base’
[08:06:49.936] | : . ' , Packages: [1] ‘base’
[08:06:49.936] | : . ' Search for packages associated with the globals ... done
[08:06:49.936] | : . ' The total size of the 1 globals is 841 bytes (841 bytes)
[08:06:49.937] | : . ' The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[08:06:49.937] | : . ' Packages after dropping 'base': [0] 
[08:06:49.937] | : . ' globals: [1] ‘FUN’
[08:06:49.937] | : . ' packages: [0] 
[08:06:49.937] | : . getGlobalsAndPackages() ... done
[08:06:49.937] | : . globals found/used: [n=1] ‘FUN’
[08:06:49.937] | : . needed namespaces: [n=0] 
[08:06:49.938] | : . use_args: TRUE
[08:06:49.938] | : . Getting '...' globals ...
[08:06:49.938] | : . ' resolve() for FutureGlobals ...
[08:06:49.938] | : . ' , recursive: 0
[08:06:49.938] | : . ' , Number of elements: 1
[08:06:49.938] | : . ' , elements: ‘...’
[08:06:49.939] | : . ' , 'obj' is DotDotDotList
[08:06:49.939] | : . ' , resolve(obj, ...) ...
[08:06:49.939] | : . ' , ; resolve() for DotDotDotList ...
[08:06:49.939] | : . ' , ; ` recursive: -1
[08:06:49.939] | : . ' , ; resolve() for DotDotDotList ... done
[08:06:49.939] | : . ' , resolve(obj, ...) ... done
[08:06:49.939] | : . ' , resolved() for DotDotDotList ...
[08:06:49.939] | : . ' , ; Number of elements: 0
[08:06:49.939] | : . ' , ; Number of futures: 0
[08:06:49.939] | : . ' , resolved() for DotDotDotList ... done
[08:06:49.940] | : . ' , length: 0 (resolved future 1)
[08:06:49.940] | : . ' resolve() for FutureGlobals ... done
[08:06:49.940] | : . ' '...' content: [n=0] 
[08:06:49.940] | : . ' List of 1
[08:06:49.940] | : . '  $ ...: list()
[08:06:49.940] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:49.940] | : . '  - attr(*, "where")=List of 1
[08:06:49.940] | : . '   ..$ ...:<environment: 0x55eedf96e428> 
[08:06:49.940] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:49.940] | : . '  - attr(*, "resolved")= logi TRUE
[08:06:49.940] | : . '  - attr(*, "total_size")= num NA
[08:06:49.944] | : . Getting '...' globals ... done
[08:06:49.944] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:06:49.944] | : . List of 2
[08:06:49.944] | : .  $ ...future.FUN:function (x)  
[08:06:49.944] | : .  $ ...          : list()
[08:06:49.944] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:49.944] | : .  - attr(*, "where")=List of 2
[08:06:49.944] | : .   ..$ ...future.FUN:<environment: 0x55eedf96e428> 
[08:06:49.944] | : .   ..$ ...          :<environment: 0x55eedf96e428> 
[08:06:49.944] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:49.944] | : .  - attr(*, "resolved")= logi FALSE
[08:06:49.944] | : .  - attr(*, "total_size")= num 6008
[08:06:49.947] | : . Packages to be attached in all futures: [n=0] 
[08:06:49.947] | : getGlobalsAndPackagesXApply() ... done
[08:06:49.947] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:49.948] | : List of 5
[08:06:49.948] | :  $ ...future.FUN            :function (x)  
[08:06:49.948] | :  $ ...                      : list()
[08:06:49.948] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:49.948] | :  $ ...future.elements_ii    : NULL
[08:06:49.948] | :  $ ...future.seeds_ii       : NULL
[08:06:49.948] | :  $ ...future.globals.maxSize: NULL
[08:06:49.948] | :  - attr(*, "where")=List of 5
[08:06:49.948] | :   ..$ ...future.FUN            :<environment: 0x55eedf96e428> 
[08:06:49.948] | :   ..$ ...                      :<environment: 0x55eedf96e428> 
[08:06:49.948] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:49.948] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:49.948] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:49.948] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:49.948] | :  - attr(*, "resolved")= logi FALSE
[08:06:49.948] | :  - attr(*, "total_size")= num 6008
[08:06:49.952] | : Number of futures (= number of chunks): 1
[08:06:49.952] | : Launching 1 futures (chunks) ...
[08:06:49.952] | : Chunk #1 of 1 ...
[08:06:49.952] | :  - Finding globals in 'X' for chunk #1 ...
[08:06:49.952] | : getGlobalsAndPackages() ...
[08:06:49.952] | : . Searching for globals ...
[08:06:49.953] | : . ' globals found: [0] 
[08:06:49.953] | : . Searching for globals ... done
[08:06:49.953] | : . globals: [0] <none>
[08:06:49.953] | : . packages: [0] <none>
[08:06:49.953] | : getGlobalsAndPackages() ... done
[08:06:49.953] | :    + additional globals found: [n=0] 
[08:06:49.953] | :    + additional namespaces needed: [n=0] 
[08:06:49.953] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:06:49.953] | :  - seeds: <none>
[08:06:49.953] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:49.954] | : future(..., label = ‘future_lapply-1’) ...
[08:06:49.954] | : . lazy: FALSE
[08:06:49.954] | : . stdout: TRUE
[08:06:49.954] | : . conditions: [n=1] ‘condition’
[08:06:49.954] | : . gc: FALSE
[08:06:49.954] | : . earlySignal: FALSE
[08:06:49.954] | : . getGlobalsAndPackages() ...
[08:06:49.954] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:49.954] | : . ' Resolving globals: FALSE
[08:06:49.955] | : . ' Tweak future expression to call with '...' arguments ...
[08:06:49.955] | : . ' , {
[08:06:49.955] | : . ' ,     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:49.955] | : . ' ,     "# expression in do.call(), because function called uses '...'  "
[08:06:49.955] | : . ' ,     "# as a global variable                                         "
[08:06:49.955] | : . ' ,     do.call(function(...) {
[08:06:49.955] | : . ' ,         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:49.955] | : . ' ,         "# without having an '...' argument. This means '...' is treated"
[08:06:49.955] | : . ' ,         "# as a global variable. This may happen when FUN() is an       "
[08:06:49.955] | : . ' ,         "# anonymous function.                                          "
[08:06:49.955] | : . ' ,         "#                                                              "
[08:06:49.955] | : . ' ,         "# If an anonymous function, we will make sure to restore the   "
[08:06:49.955] | : . ' ,         "# function environment of FUN() to the calling environment.    "
[08:06:49.955] | : . ' ,         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:49.955] | : . ' ,         "# global environment, which is where globals are written.      "
[08:06:49.955] | : . ' ,         penv <- env <- environment(...future.FUN)
[08:06:49.955] | : . ' ,         repeat {
[08:06:49.955] | : . ' ,             if (identical(env, globalenv()) || identical(env, 
[08:06:49.955] | : . ' ,                 emptyenv())) 
[08:06:49.955] | : . ' ,                 break
[08:06:49.955] | : . ' ,             penv <- env
[08:06:49.955] | : . ' ,             env <- parent.env(env)
[08:06:49.955] | : . ' ,         }
[08:06:49.955] | : . ' ,         if (identical(penv, globalenv())) {
[08:06:49.955] | : . ' ,             environment(...future.FUN) <- environment()
[08:06:49.955] | : . ' ,         }
[08:06:49.955] | : . ' ,         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:49.955] | : . ' ,             !isNamespace(penv)) {
[08:06:49.955] | : . ' ,             parent.env(penv) <- environment()
[08:06:49.955] | : . ' ,         }
[08:06:49.955] | : . ' ,         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:49.955] | : . ' ,         {
[08:06:49.955] | : . ' ,             "# future.apply:::future_xapply(): preserve future option"
[08:06:49.955] | : . ' ,             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:49.955] | : . ' ,             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:49.955] | : . ' ,                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:49.955] | : . ' ,                 on.exit(options(oopts), add = TRUE)
[08:06:49.955] | : . ' ,             }
[08:06:49.955] | : . ' ,             {
[08:06:49.955] | : . ' ,                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:49.955] | : . ' ,                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:49.955] | : . ' ,                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:49.955] | : . ' ,                   {
[08:06:49.955] | : . ' ,                     ...future.FUN(...future.X_jj, ...)
[08:06:49.955] | : . ' ,                   }
[08:06:49.955] | : . ' ,                 })
[08:06:49.955] | : . ' ,             }
[08:06:49.955] | : . ' ,         }
[08:06:49.955] | : . ' ,     }, args = future.call.arguments)
[08:06:49.955] | : . ' , }
[08:06:49.955] | : . ' Tweak future expression to call with '...' arguments ... done
[08:06:49.955] | : . ' Search for packages associated with the globals ...
[08:06:49.955] | : . ' , Packages associated with globals: [0] 
[08:06:49.956] | : . ' , Packages: [0] 
[08:06:49.956] | : . ' Search for packages associated with the globals ... done
[08:06:49.956] | : . ' Packages after dropping 'base': [0] 
[08:06:49.956] | : . ' globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:49.956] | : . ' packages: [0] 
[08:06:49.956] | : . getGlobalsAndPackages() ... done
[08:06:49.957] | : . run() for ‘Future’ (‘future_lapply-1’) ...
[08:06:49.957] | : . ' state: ‘created’
[08:06:49.957] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:49.957] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:49.957] | : . ' Using SequentialFutureBackend ...
[08:06:49.957] | : . ' , Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:06:49.957] | : . ' , Launching futures ...
[08:06:49.957] | : . ' , ; launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:06:49.957] | : . ' , ; ` getFutureData() ...
[08:06:49.958] | : . ' , ; ` | getFutureCore() ...
[08:06:49.958] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:06:49.958] | : . ' , ; ` | getFutureCore() ... done
[08:06:49.958] | : . ' , ; ` | getFutureCapture() ...
[08:06:49.958] | : . ' , ; ` | getFutureCapture() ... done
[08:06:49.958] | : . ' , ; ` | getFutureContext() ...
[08:06:49.958] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:49.958] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:06:49.958] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:49.959] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:06:49.959] | : . ' , ; ` | getFutureContext() ... done
[08:06:49.959] | : . ' , ; ` getFutureData() ... done
[08:06:49.960] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:49.960] | : . ' , ; ` | Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:06:49.960] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:49.961] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:49.961] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:49.961] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:06:49.961] | : . ' , ; ` | : . New stack:
[08:06:49.961] | : . ' , ; ` | : . List of 1
[08:06:49.961] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:49.961] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:49.961] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:06:49.961] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:49.961] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.961] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.961] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:49.961] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:49.965] | : . ' , ; ` | : . Old stack:
[08:06:49.965] | : . ' , ; ` | : . List of 1
[08:06:49.965] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:49.965] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:49.965] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:49.965] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:49.965] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.965] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.965] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:06:49.965] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:49.965] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:49.965] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.965] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:49.968] | : . ' , ; ` | : . Not identical
[08:06:49.968] | : . ' , ; ` | : . all.equal() for future ...
[08:06:49.968] | : . ' , ; ` | : . ' List of 2
[08:06:49.968] | : . ' , ; ` | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:49.968] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:49.968] | : . ' , ; ` | : . '   ..- attr(*, "init")= logi TRUE
[08:06:49.968] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:49.968] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.968] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.968] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:49.968] | : . ' , ; ` | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:49.968] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:49.968] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:49.968] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:49.968] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.968] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.968] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(sequential)
[08:06:49.968] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:49.968] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:49.968] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:49.974] | : . ' , ; ` | : . all.equal() for future ... done
[08:06:49.974] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:06:49.974] | : . ' , ; ` | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:06:49.974] | : . ' , ; ` | : List of future strategies:
[08:06:49.974] | : . ' , ; ` | : 1. sequential:
[08:06:49.974] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:49.974] | : . ' , ; ` | :    - tweaked: FALSE
[08:06:49.974] | : . ' , ; ` | :    - call: plan(sequential)
[08:06:49.974] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:49.975] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:49.975] | : . ' , ; ` assign_globals() ...
[08:06:49.975] | : . ' , ; ` List of 5
[08:06:49.975] | : . ' , ; `  $ ...future.FUN            :function (x)  
[08:06:49.975] | : . ' , ; `  $ future.call.arguments    : list()
[08:06:49.975] | : . ' , ; `   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:49.975] | : . ' , ; `  $ ...future.elements_ii    :List of 2
[08:06:49.975] | : . ' , ; `   ..$ : int 1
[08:06:49.975] | : . ' , ; `   ..$ : int 0
[08:06:49.975] | : . ' , ; `  $ ...future.seeds_ii       : NULL
[08:06:49.975] | : . ' , ; `  $ ...future.globals.maxSize: NULL
[08:06:49.975] | : . ' , ; `  - attr(*, "where")=List of 5
[08:06:49.975] | : . ' , ; `   ..$ ...future.FUN            :<environment: 0x55eedf96e428> 
[08:06:49.975] | : . ' , ; `   ..$ future.call.arguments    :<environment: 0x55eedf96e428> 
[08:06:49.975] | : . ' , ; `   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:49.975] | : . ' , ; `   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:49.975] | : . ' , ; `   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:49.975] | : . ' , ; `  - attr(*, "resolved")= logi FALSE
[08:06:49.975] | : . ' , ; `  - attr(*, "total_size")= num 6008
[08:06:49.975] | : . ' , ; `  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:49.975] | : . ' , ; `  - attr(*, "already-done")= logi TRUE
[08:06:49.981] | : . ' , ; ` - copied ‘...future.FUN’ to environment
[08:06:49.981] | : . ' , ; ` - copied ‘future.call.arguments’ to environment
[08:06:49.981] | : . ' , ; ` - copied ‘...future.elements_ii’ to environment
[08:06:49.982] | : . ' , ; ` - copied ‘...future.seeds_ii’ to environment
[08:06:49.982] | : . ' , ; ` - copied ‘...future.globals.maxSize’ to environment
[08:06:49.982] | : . ' , ; ` assign_globals() ... done
[08:06:50.485] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:50.485] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:50.485] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:50.485] | : . ' , ; ` | : . all.equal() for FutureStrategyList ...
[08:06:50.486] | : . ' , ; ` | : . ' New stack:
[08:06:50.486] | : . ' , ; ` | : . ' List of 1
[08:06:50.486] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:50.486] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:50.486] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:50.486] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:50.486] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:50.486] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:50.486] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(sequential)
[08:06:50.486] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:50.486] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:50.486] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:50.486] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:50.489] | : . ' , ; ` | : . ' Old stack:
[08:06:50.490] | : . ' , ; ` | : . ' List of 1
[08:06:50.490] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:50.490] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:50.490] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:50.490] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:50.490] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:50.490] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:50.490] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(sequential)
[08:06:50.490] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:50.490] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:50.490] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:50.490] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:50.493] | : . ' , ; ` | : . ' Identical
[08:06:50.493] | : . ' , ; ` | : . all.equal() for FutureStrategyList ... done
[08:06:50.493] | : . ' , ; ` | : . plan(): Skip setting new future backend stack because it is the same as the current one:
[08:06:50.493] | : . ' , ; ` | : . List of future strategies:
[08:06:50.493] | : . ' , ; ` | : . 1. sequential:
[08:06:50.493] | : . ' , ; ` | : .    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:50.493] | : . ' , ; ` | : .    - tweaked: FALSE
[08:06:50.493] | : . ' , ; ` | : .    - call: plan(sequential)
[08:06:50.494] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:50.494] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:50.494] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:50.495] | : . ' , ; ` SequentialFuture started (and completed)
[08:06:50.495] | : . ' , ; ` signalConditions() ...
[08:06:50.495] | : . ' , ; ` | include = ‘immediateCondition’
[08:06:50.495] | : . ' , ; ` | exclude = 
[08:06:50.495] | : . ' , ; ` | resignal = FALSE
[08:06:50.495] | : . ' , ; ` | Number of conditions: 6
[08:06:50.495] | : . ' , ; ` |  int 6
[08:06:50.496] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.496] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.496] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.496] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.496] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.496] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.497] | : . ' , ; ` | Drop signaled conditions: 0
[08:06:50.497] | : . ' , ; ` signalConditions() ... done
[08:06:50.497] | : . ' , ; launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:06:50.497] | : . ' , Launching futures ... done
[08:06:50.497] | : . ' , Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:06:50.497] | : . ' Using SequentialFutureBackend ... done
[08:06:50.497] | : . run() for ‘Future’ (‘future_lapply-1’) ... done
[08:06:50.497] | : future(..., label = ‘future_lapply-1’) ... done
[08:06:50.498] | : Created future:
[08:06:50.498] | : SequentialFuture:
[08:06:50.498] | : Label: ‘future_lapply-1’
[08:06:50.498] | : Expression:
[08:06:50.498] | : {
[08:06:50.498] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:50.498] | :     "# expression in do.call(), because function called uses '...'  "
[08:06:50.498] | :     "# as a global variable                                         "
[08:06:50.498] | :     do.call(function(...) {
[08:06:50.498] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:50.498] | :         "# without having an '...' argument. This means '...' is treated"
[08:06:50.498] | :         "# as a global variable. This may happen when FUN() is an       "
[08:06:50.498] | :         "# anonymous function.                                          "
[08:06:50.498] | :         "#                                                              "
[08:06:50.498] | :         "# If an anonymous function, we will make sure to restore the   "
[08:06:50.498] | :         "# function environment of FUN() to the calling environment.    "
[08:06:50.498] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:50.498] | :         "# global environment, which is where globals are written.      "
[08:06:50.498] | :         penv <- env <- environment(...future.FUN)
[08:06:50.498] | :         repeat {
[08:06:50.498] | :             if (identical(env, globalenv()) || identical(env, 
[08:06:50.498] | :                 emptyenv())) 
[08:06:50.498] | :                 break
[08:06:50.498] | :             penv <- env
[08:06:50.498] | :             env <- parent.env(env)
[08:06:50.498] | :         }
[08:06:50.498] | :         if (identical(penv, globalenv())) {
[08:06:50.498] | :             environment(...future.FUN) <- environment()
[08:06:50.498] | :         }
[08:06:50.498] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:50.498] | :             !isNamespace(penv)) {
[08:06:50.498] | :             parent.env(penv) <- environment()
[08:06:50.498] | :         }
[08:06:50.498] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:50.498] | :         {
[08:06:50.498] | :             "# future.apply:::future_xapply(): preserve future option"
[08:06:50.498] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:50.498] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:50.498] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:50.498] | :                 on.exit(options(oopts), add = TRUE)
[08:06:50.498] | :             }
[08:06:50.498] | :             {
[08:06:50.498] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:50.498] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:50.498] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:50.498] | :                   {
[08:06:50.498] | :                     ...future.FUN(...future.X_jj, ...)
[08:06:50.498] | :                   }
[08:06:50.498] | :                 })
[08:06:50.498] | :             }
[08:06:50.498] | :         }
[08:06:50.498] | :     }, args = future.call.arguments)
[08:06:50.498] | : }
[08:06:50.498] | : Globals: 5 objects totaling 6.13 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:50.498] | : Packages: <none>
[08:06:50.498] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:50.498] | : Capture standard output: TRUE
[08:06:50.498] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:50.498] | : Immediate condition classes: ‘immediateCondition’
[08:06:50.498] | : Lazy evaluation: FALSE
[08:06:50.498] | : Local evaluation: TRUE
[08:06:50.498] | : Asynchronous evaluation: TRUE
[08:06:50.498] | : Early signaling: FALSE
[08:06:50.498] | : Environment: R_GlobalEnv
[08:06:50.498] | : State: ‘finished’
[08:06:50.498] | : Resolved: TRUE
[08:06:50.498] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-2
[08:06:50.498] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:50.498] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:06:50.498] | : Value: 55 bytes of class ‘list’
[08:06:50.498] | : Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
[08:06:50.498] | : Duration: 0.5254941 secs (started 2025-06-17 08:06:49.959456)
[08:06:50.498] | : Worker process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:50.499] | : Chunk #1 of 1 ... DONE
[08:06:50.499] | : Launching 1 futures (chunks) ... DONE
[08:06:50.500] | : Resolving 1 futures (chunks) ...
[08:06:50.500] | : value() for list ...
[08:06:50.500] | : . recursive: 0
[08:06:50.500] | : . reduce: FALSE
[08:06:50.500] | : . length: 1

[08:06:50.500] | : . Number of remaining objects: 1
[08:06:50.500] | : . checking value #1:
[08:06:50.500] | : . 'obj' is SequentialFuture
[08:06:50.501] | : . resolved() for SequentialFuture (‘future_lapply-1’) ...
[08:06:50.501] | : . ' state: ‘finished’
[08:06:50.501] | : . ' run: TRUE
[08:06:50.501] | : . ' result: ‘FutureResult’
[08:06:50.501] | : . resolved() for SequentialFuture (‘future_lapply-1’) ... done
[08:06:50.501] | : . SequentialFuture #1
[08:06:50.501] | : . signalConditionsASAP(SequentialFuture, pos=1) ...
[08:06:50.501] | : . ' nx: 1
[08:06:50.501] | : . ' relay: TRUE
[08:06:50.501] | : . ' stdout: TRUE
[08:06:50.504] | : . ' signal: TRUE
[08:06:50.504] | : . ' resignal: FALSE
[08:06:50.504] | : . ' force: TRUE
[08:06:50.504] | : . ' relayed: [n=1] FALSE
[08:06:50.505] | : . ' queued futures: [n=1] FALSE
[08:06:50.505] | : . ' until=1
[08:06:50.505] | : . ' relaying element #1
[08:06:50.505] | : . ' value() for SequentialFuture (‘future_lapply-1’) ...
[08:06:50.505] | : . ' , signalConditions() ...
[08:06:50.505] | : . ' , ; include = ‘immediateCondition’
[08:06:50.505] | : . ' , ; exclude = 
[08:06:50.505] | : . ' , ; resignal = FALSE
[08:06:50.505] | : . ' , ; Number of conditions: 6
[08:06:50.506] | : . ' , ;  int 6
[08:06:50.506] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.506] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.506] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.507] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.507] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.507] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.507] | : . ' , ; Drop signaled conditions: 0
[08:06:50.507] | : . ' , signalConditions() ... done
[08:06:50.507] | : . ' , relay stdout ...
[08:06:50.507] | : . ' , relay stdout ... done
[08:06:50.507] | : . ' , check for misuse ...
[08:06:50.508] | : . ' , check for misuse ... done
[08:06:50.508] | : . ' value() for SequentialFuture (‘future_lapply-1’) ... done
[08:06:50.508] | : . ' signalConditions() ...
[08:06:50.508] | : . ' , include = ‘immediateCondition’
[08:06:50.508] | : . ' , exclude = 
[08:06:50.508] | : . ' , resignal = FALSE
[08:06:50.508] | : . ' , Number of conditions: 6
[08:06:50.508] | : . ' ,  int 6
[08:06:50.509] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.509] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.509] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.509] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.509] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.510] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.510] | : . ' , Drop signaled conditions: 0
[08:06:50.510] | : . ' signalConditions() ... done
[08:06:50.510] | : . ' signalConditions() ...
[08:06:50.510] | : . ' , include = ‘condition’
[08:06:50.510] | : . ' , exclude = ‘error’, ‘immediateCondition’
[08:06:50.510] | : . ' , resignal = TRUE
[08:06:50.510] | : . ' , Number of conditions: 6
[08:06:50.510] | : . ' ,  int 6
[08:06:50.511] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.511] | : . ' , Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:49.959] | : . ' , ; ` attachPackages() ...
[08:06:50.511] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.511] | : . ' , Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:49.959] | : . ' , ; ` | packages: [n=1] ‘future’
[08:06:50.511] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.512] | : . ' , Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:49.959] | : . ' , ; ` attachPackages() ... done
[08:06:50.512] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.512] | : . ' , Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:49.960] | : . ' , ; ` attachPackages() ...
[08:06:50.512] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.512] | : . ' , Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:49.960] | : . ' , ; ` | packages: [n=0] 
[08:06:50.512] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:50.512] | : . ' , Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:49.960] | : . ' , ; ` attachPackages() ... done
[08:06:50.513] | : . ' , Drop signaled conditions: 6
[08:06:50.513] | : . ' signalConditions() ... done
[08:06:50.513] | : . ' relayed: [n=1] TRUE
[08:06:50.513] | : . ' queued futures: [n=1] TRUE
[08:06:50.513] | : . signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:06:50.513] | : . value(<SequentialFuture>, ...) ...
[08:06:50.513] | : . value(<SequentialFuture>, ...) ... done
[08:06:50.513] | : . value() for SequentialFuture (‘future_lapply-1’) ...
[08:06:50.513] | : . ' signalConditions() ...
[08:06:50.514] | : . ' , include = ‘immediateCondition’
[08:06:50.514] | : . ' , exclude = 
[08:06:50.514] | : . ' , resignal = FALSE
[08:06:50.514] | : . ' , Number of conditions: 0
[08:06:50.514] | : . ' ,  int 0
[08:06:50.515] | : . ' signalConditions() ... done
[08:06:50.515] | : . ' check for misuse ...
[08:06:50.515] | : . ' check for misuse ... done
[08:06:50.515] | : . value() for SequentialFuture (‘future_lapply-1’) ... done
[08:06:50.515] | : . value: <list>
[08:06:50.515] | : . signalConditionsASAP(SequentialFuture, pos=1) ...
[08:06:50.515] | : . ' nx: 1
[08:06:50.515] | : . ' relay: TRUE
[08:06:50.515] | : . ' stdout: TRUE
[08:06:50.516] | : . ' signal: TRUE
[08:06:50.516] | : . ' resignal: FALSE
[08:06:50.516] | : . ' force: TRUE
[08:06:50.516] | : . ' relayed: [n=1] TRUE
[08:06:50.516] | : . ' queued futures: [n=1] TRUE
[08:06:50.516] | : . ' until=1
[08:06:50.516] | : . ' relayed: [n=1] TRUE
[08:06:50.516] | : . ' queued futures: [n=1] TRUE
[08:06:50.516] | : . signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:06:50.516] | : . resolve() for SequentialFuture ...
[08:06:50.517] | : . resolve() for SequentialFuture ... done
[08:06:50.517] | : . length: 0 (resolved future 1)
[08:06:50.517] | : value() for list ... done
[08:06:50.517] | : Relaying remaining futures ...
[08:06:50.517] | : . signalConditionsASAP(NULL, pos=0) ...
[08:06:50.517] | : . ' nx: 1
[08:06:50.517] | : . ' relay: TRUE
[08:06:50.517] | : . ' stdout: TRUE
[08:06:50.517] | : . ' signal: TRUE
[08:06:50.518] | : . ' resignal: FALSE
[08:06:50.518] | : . ' force: TRUE
[08:06:50.518] | : . ' relayed: [n=1] TRUE
[08:06:50.518] | : . ' queued futures: [n=1] TRUE
 - flush all
[08:06:50.518] | : . ' relayed: [n=1] TRUE
[08:06:50.518] | : . ' queued futures: [n=1] TRUE
[08:06:50.518] | : . signalConditionsASAP(NULL, pos=0) ... done
[08:06:50.518] | : Relaying remaining futures ... done
[08:06:50.518] | future_lapply() -> future_xapply() ... done
[08:06:50.519] |  - Number of value chunks collected: 1
[08:06:50.519] | Resolving 1 futures (chunks) ... DONE
[08:06:50.519] | Reducing values from 1 chunks ...
[08:06:50.519] |  - Number of values collected after concatenation: 2
[08:06:50.519] |  - Number of values expected: 2
[08:06:50.519] | Reducing values from 1 chunks ... DONE
[08:06:50.519] future_lapply() ... done

* future_lapply(x, ..., future.stdout = TRUE) ... DONE
* future_lapply(x, ..., future.stdout = NA) ...
[08:06:50.520] future_lapply() ...
[08:06:50.521] | Globals in FUN(): [n=4] ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[08:06:50.521] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:06:50.521] | future_lapply() -> future_xapply() ...
[08:06:50.521] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:50.521] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:50.521] | : Number of chunks: 1
[08:06:50.522] | : getGlobalsAndPackagesXApply() ...
[08:06:50.522] | : . future.globals: TRUE
[08:06:50.522] | : . getGlobalsAndPackages() ...
[08:06:50.522] | : . ' Searching for globals ...
[08:06:50.532] | : . ' , globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[08:06:50.533] | : . ' Searching for globals ... done
[08:06:50.533] | : . ' Resolving globals: FALSE
[08:06:50.533] | : . ' Search for packages associated with the globals ...
[08:06:50.533] | : . ' , Packages associated with globals: [1] ‘base’
[08:06:50.533] | : . ' , Packages: [1] ‘base’
[08:06:50.534] | : . ' Search for packages associated with the globals ... done
[08:06:50.534] | : . ' The total size of the 1 globals is 841 bytes (841 bytes)
[08:06:50.534] | : . ' The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[08:06:50.534] | : . ' Packages after dropping 'base': [0] 
[08:06:50.534] | : . ' globals: [1] ‘FUN’
[08:06:50.535] | : . ' packages: [0] 
[08:06:50.535] | : . getGlobalsAndPackages() ... done
[08:06:50.535] | : . globals found/used: [n=1] ‘FUN’
[08:06:50.535] | : . needed namespaces: [n=0] 
[08:06:50.535] | : . use_args: TRUE
[08:06:50.535] | : . Getting '...' globals ...
[08:06:50.535] | : . ' resolve() for FutureGlobals ...
[08:06:50.536] | : . ' , recursive: 0
[08:06:50.536] | : . ' , Number of elements: 1
[08:06:50.536] | : . ' , elements: ‘...’
[08:06:50.536] | : . ' , 'obj' is DotDotDotList
[08:06:50.536] | : . ' , resolve(obj, ...) ...
[08:06:50.536] | : . ' , ; resolve() for DotDotDotList ...
[08:06:50.536] | : . ' , ; ` recursive: -1
[08:06:50.537] | : . ' , ; resolve() for DotDotDotList ... done
[08:06:50.537] | : . ' , resolve(obj, ...) ... done
[08:06:50.537] | : . ' , resolved() for DotDotDotList ...
[08:06:50.537] | : . ' , ; Number of elements: 0
[08:06:50.537] | : . ' , ; Number of futures: 0
[08:06:50.537] | : . ' , resolved() for DotDotDotList ... done
[08:06:50.537] | : . ' , length: 0 (resolved future 1)
[08:06:50.537] | : . ' resolve() for FutureGlobals ... done
[08:06:50.537] | : . ' '...' content: [n=0] 
[08:06:50.538] | : . ' List of 1
[08:06:50.538] | : . '  $ ...: list()
[08:06:50.538] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:50.538] | : . '  - attr(*, "where")=List of 1
[08:06:50.538] | : . '   ..$ ...:<environment: 0x55eee05b5468> 
[08:06:50.538] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:50.538] | : . '  - attr(*, "resolved")= logi TRUE
[08:06:50.538] | : . '  - attr(*, "total_size")= num NA
[08:06:50.540] | : . Getting '...' globals ... done
[08:06:50.541] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:06:50.541] | : . List of 2
[08:06:50.541] | : .  $ ...future.FUN:function (x)  
[08:06:50.541] | : .  $ ...          : list()
[08:06:50.541] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:50.541] | : .  - attr(*, "where")=List of 2
[08:06:50.541] | : .   ..$ ...future.FUN:<environment: 0x55eee05b5468> 
[08:06:50.541] | : .   ..$ ...          :<environment: 0x55eee05b5468> 
[08:06:50.541] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:50.541] | : .  - attr(*, "resolved")= logi FALSE
[08:06:50.541] | : .  - attr(*, "total_size")= num 6008
[08:06:50.544] | : . Packages to be attached in all futures: [n=0] 
[08:06:50.544] | : getGlobalsAndPackagesXApply() ... done
[08:06:50.544] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:50.544] | : List of 5
[08:06:50.544] | :  $ ...future.FUN            :function (x)  
[08:06:50.544] | :  $ ...                      : list()
[08:06:50.544] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:50.544] | :  $ ...future.elements_ii    : NULL
[08:06:50.544] | :  $ ...future.seeds_ii       : NULL
[08:06:50.544] | :  $ ...future.globals.maxSize: NULL
[08:06:50.544] | :  - attr(*, "where")=List of 5
[08:06:50.544] | :   ..$ ...future.FUN            :<environment: 0x55eee05b5468> 
[08:06:50.544] | :   ..$ ...                      :<environment: 0x55eee05b5468> 
[08:06:50.544] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:50.544] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:50.544] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:50.544] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:50.544] | :  - attr(*, "resolved")= logi FALSE
[08:06:50.544] | :  - attr(*, "total_size")= num 6008
[08:06:50.551] | : Number of futures (= number of chunks): 1
[08:06:50.551] | : Launching 1 futures (chunks) ...
[08:06:50.551] | : Chunk #1 of 1 ...
[08:06:50.551] | :  - Finding globals in 'X' for chunk #1 ...
[08:06:50.551] | : getGlobalsAndPackages() ...
[08:06:50.551] | : . Searching for globals ...
[08:06:50.552] | : . ' globals found: [0] 
[08:06:50.552] | : . Searching for globals ... done
[08:06:50.552] | : . globals: [0] <none>
[08:06:50.552] | : . packages: [0] <none>
[08:06:50.552] | : getGlobalsAndPackages() ... done
[08:06:50.552] | :    + additional globals found: [n=0] 
[08:06:50.553] | :    + additional namespaces needed: [n=0] 
[08:06:50.553] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:06:50.553] | :  - seeds: <none>
[08:06:50.553] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:50.553] | : future(..., label = ‘future_lapply-1’) ...
[08:06:50.553] | : . lazy: FALSE
[08:06:50.553] | : . stdout: NA
[08:06:50.553] | : . conditions: [n=1] ‘condition’
[08:06:50.553] | : . gc: FALSE
[08:06:50.553] | : . earlySignal: FALSE
[08:06:50.554] | : . getGlobalsAndPackages() ...
[08:06:50.554] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:50.554] | : . ' Resolving globals: FALSE
[08:06:50.554] | : . ' Tweak future expression to call with '...' arguments ...
[08:06:50.554] | : . ' , {
[08:06:50.554] | : . ' ,     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:50.554] | : . ' ,     "# expression in do.call(), because function called uses '...'  "
[08:06:50.554] | : . ' ,     "# as a global variable                                         "
[08:06:50.554] | : . ' ,     do.call(function(...) {
[08:06:50.554] | : . ' ,         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:50.554] | : . ' ,         "# without having an '...' argument. This means '...' is treated"
[08:06:50.554] | : . ' ,         "# as a global variable. This may happen when FUN() is an       "
[08:06:50.554] | : . ' ,         "# anonymous function.                                          "
[08:06:50.554] | : . ' ,         "#                                                              "
[08:06:50.554] | : . ' ,         "# If an anonymous function, we will make sure to restore the   "
[08:06:50.554] | : . ' ,         "# function environment of FUN() to the calling environment.    "
[08:06:50.554] | : . ' ,         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:50.554] | : . ' ,         "# global environment, which is where globals are written.      "
[08:06:50.554] | : . ' ,         penv <- env <- environment(...future.FUN)
[08:06:50.554] | : . ' ,         repeat {
[08:06:50.554] | : . ' ,             if (identical(env, globalenv()) || identical(env, 
[08:06:50.554] | : . ' ,                 emptyenv())) 
[08:06:50.554] | : . ' ,                 break
[08:06:50.554] | : . ' ,             penv <- env
[08:06:50.554] | : . ' ,             env <- parent.env(env)
[08:06:50.554] | : . ' ,         }
[08:06:50.554] | : . ' ,         if (identical(penv, globalenv())) {
[08:06:50.554] | : . ' ,             environment(...future.FUN) <- environment()
[08:06:50.554] | : . ' ,         }
[08:06:50.554] | : . ' ,         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:50.554] | : . ' ,             !isNamespace(penv)) {
[08:06:50.554] | : . ' ,             parent.env(penv) <- environment()
[08:06:50.554] | : . ' ,         }
[08:06:50.554] | : . ' ,         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:50.554] | : . ' ,         {
[08:06:50.554] | : . ' ,             "# future.apply:::future_xapply(): preserve future option"
[08:06:50.554] | : . ' ,             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:50.554] | : . ' ,             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:50.554] | : . ' ,                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:50.554] | : . ' ,                 on.exit(options(oopts), add = TRUE)
[08:06:50.554] | : . ' ,             }
[08:06:50.554] | : . ' ,             {
[08:06:50.554] | : . ' ,                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:50.554] | : . ' ,                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:50.554] | : . ' ,                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:50.554] | : . ' ,                   {
[08:06:50.554] | : . ' ,                     ...future.FUN(...future.X_jj, ...)
[08:06:50.554] | : . ' ,                   }
[08:06:50.554] | : . ' ,                 })
[08:06:50.554] | : . ' ,             }
[08:06:50.554] | : . ' ,         }
[08:06:50.554] | : . ' ,     }, args = future.call.arguments)
[08:06:50.554] | : . ' , }
[08:06:50.555] | : . ' Tweak future expression to call with '...' arguments ... done
[08:06:50.555] | : . ' Search for packages associated with the globals ...
[08:06:50.555] | : . ' , Packages associated with globals: [0] 
[08:06:50.555] | : . ' , Packages: [0] 
[08:06:50.555] | : . ' Search for packages associated with the globals ... done
[08:06:50.556] | : . ' Packages after dropping 'base': [0] 
[08:06:50.556] | : . ' globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:50.556] | : . ' packages: [0] 
[08:06:50.556] | : . getGlobalsAndPackages() ... done
[08:06:50.556] | : . run() for ‘Future’ (‘future_lapply-1’) ...
[08:06:50.556] | : . ' state: ‘created’
[08:06:50.557] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:50.557] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:50.557] | : . ' Using SequentialFutureBackend ...
[08:06:50.557] | : . ' , Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:06:50.557] | : . ' , Launching futures ...
[08:06:50.557] | : . ' , ; launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:06:50.557] | : . ' , ; ` getFutureData() ...
[08:06:50.557] | : . ' , ; ` | getFutureCore() ...
[08:06:50.557] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:06:50.558] | : . ' , ; ` | getFutureCore() ... done
[08:06:50.558] | : . ' , ; ` | getFutureCapture() ...
[08:06:50.558] | : . ' , ; ` | getFutureCapture() ... done
[08:06:50.558] | : . ' , ; ` | getFutureContext() ...
[08:06:50.558] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:50.558] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:06:50.558] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:50.558] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:06:50.559] | : . ' , ; ` | getFutureContext() ... done
[08:06:50.559] | : . ' , ; ` getFutureData() ... done
[08:06:50.560] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:50.560] | : . ' , ; ` | Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:06:50.560] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:50.561] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:50.561] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:50.561] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:06:50.561] | : . ' , ; ` | : . New stack:
[08:06:50.561] | : . ' , ; ` | : . List of 1
[08:06:50.561] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:50.561] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:50.561] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:06:50.561] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:50.561] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:50.561] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:50.561] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:50.561] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:50.564] | : . ' , ; ` | : . Old stack:
[08:06:50.564] | : . ' , ; ` | : . List of 1
[08:06:50.564] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:50.564] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:50.564] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:50.564] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:50.564] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:50.564] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:50.564] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:06:50.564] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:50.564] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:50.564] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:50.564] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:50.569] | : . ' , ; ` | : . Not identical
[08:06:50.570] | : . ' , ; ` | : . all.equal() for future ...
[08:06:50.570] | : . ' , ; ` | : . ' List of 2
[08:06:50.570] | : . ' , ; ` | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:50.570] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:50.570] | : . ' , ; ` | : . '   ..- attr(*, "init")= logi TRUE
[08:06:50.570] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:50.570] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:50.570] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:50.570] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:50.570] | : . ' , ; ` | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:50.570] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:50.570] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:50.570] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:50.570] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:50.570] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:50.570] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(sequential)
[08:06:50.570] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:50.570] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:50.570] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:50.575] | : . ' , ; ` | : . all.equal() for future ... done
[08:06:50.575] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:06:50.576] | : . ' , ; ` | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:06:50.576] | : . ' , ; ` | : List of future strategies:
[08:06:50.576] | : . ' , ; ` | : 1. sequential:
[08:06:50.576] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:50.576] | : . ' , ; ` | :    - tweaked: FALSE
[08:06:50.576] | : . ' , ; ` | :    - call: plan(sequential)
[08:06:50.576] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:50.576] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:50.576] | : . ' , ; ` assign_globals() ...
[08:06:50.577] | : . ' , ; ` List of 5
[08:06:50.577] | : . ' , ; `  $ ...future.FUN            :function (x)  
[08:06:50.577] | : . ' , ; `  $ future.call.arguments    : list()
[08:06:50.577] | : . ' , ; `   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:50.577] | : . ' , ; `  $ ...future.elements_ii    :List of 2
[08:06:50.577] | : . ' , ; `   ..$ : int 1
[08:06:50.577] | : . ' , ; `   ..$ : int 0
[08:06:50.577] | : . ' , ; `  $ ...future.seeds_ii       : NULL
[08:06:50.577] | : . ' , ; `  $ ...future.globals.maxSize: NULL
[08:06:50.577] | : . ' , ; `  - attr(*, "where")=List of 5
[08:06:50.577] | : . ' , ; `   ..$ ...future.FUN            :<environment: 0x55eee05b5468> 
[08:06:50.577] | : . ' , ; `   ..$ future.call.arguments    :<environment: 0x55eee05b5468> 
[08:06:50.577] | : . ' , ; `   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:50.577] | : . ' , ; `   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:50.577] | : . ' , ; `   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:50.577] | : . ' , ; `  - attr(*, "resolved")= logi FALSE
[08:06:50.577] | : . ' , ; `  - attr(*, "total_size")= num 6008
[08:06:50.577] | : . ' , ; `  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:50.577] | : . ' , ; `  - attr(*, "already-done")= logi TRUE
[08:06:50.582] | : . ' , ; ` - copied ‘...future.FUN’ to environment
[08:06:50.582] | : . ' , ; ` - copied ‘future.call.arguments’ to environment
[08:06:50.582] | : . ' , ; ` - copied ‘...future.elements_ii’ to environment
[08:06:50.582] | : . ' , ; ` - copied ‘...future.seeds_ii’ to environment
[08:06:50.583] | : . ' , ; ` - copied ‘...future.globals.maxSize’ to environment
[08:06:50.583] | : . ' , ; ` assign_globals() ... done
[08:06:51.085] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:51.087] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:51.088] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:51.088] | : . ' , ; ` | : . all.equal() for FutureStrategyList ...
[08:06:51.088] | : . ' , ; ` | : . ' New stack:
[08:06:51.088] | : . ' , ; ` | : . ' List of 1
[08:06:51.088] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:51.088] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:51.088] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:51.088] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:51.088] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.088] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.088] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(sequential)
[08:06:51.088] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:51.088] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:51.088] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.088] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:51.091] | : . ' , ; ` | : . ' Old stack:
[08:06:51.092] | : . ' , ; ` | : . ' List of 1
[08:06:51.092] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:51.092] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:51.092] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:51.092] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:51.092] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.092] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.092] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(sequential)
[08:06:51.092] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:51.092] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:51.092] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.092] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:51.095] | : . ' , ; ` | : . ' Identical
[08:06:51.095] | : . ' , ; ` | : . all.equal() for FutureStrategyList ... done
[08:06:51.095] | : . ' , ; ` | : . plan(): Skip setting new future backend stack because it is the same as the current one:
[08:06:51.095] | : . ' , ; ` | : . List of future strategies:
[08:06:51.095] | : . ' , ; ` | : . 1. sequential:
[08:06:51.095] | : . ' , ; ` | : .    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:51.095] | : . ' , ; ` | : .    - tweaked: FALSE
[08:06:51.095] | : . ' , ; ` | : .    - call: plan(sequential)
[08:06:51.096] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:51.096] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:51.096] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:51.096] | : . ' , ; ` SequentialFuture started (and completed)
[08:06:51.096] | : . ' , ; ` signalConditions() ...
[08:06:51.096] | : . ' , ; ` | include = ‘immediateCondition’
[08:06:51.096] | : . ' , ; ` | exclude = 
[08:06:51.097] | : . ' , ; ` | resignal = FALSE
[08:06:51.097] | : . ' , ; ` | Number of conditions: 6
[08:06:51.097] | : . ' , ; ` |  int 6
[08:06:51.097] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.097] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.097] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.098] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.098] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.098] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.098] | : . ' , ; ` | Drop signaled conditions: 0
[08:06:51.098] | : . ' , ; ` signalConditions() ... done
[08:06:51.098] | : . ' , ; launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:06:51.098] | : . ' , Launching futures ... done
[08:06:51.098] | : . ' , Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:06:51.098] | : . ' Using SequentialFutureBackend ... done
[08:06:51.098] | : . run() for ‘Future’ (‘future_lapply-1’) ... done
[08:06:51.099] | : future(..., label = ‘future_lapply-1’) ... done
[08:06:51.099] | : Created future:
[08:06:51.099] | : SequentialFuture:
[08:06:51.099] | : Label: ‘future_lapply-1’
[08:06:51.099] | : Expression:
[08:06:51.099] | : {
[08:06:51.099] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:51.099] | :     "# expression in do.call(), because function called uses '...'  "
[08:06:51.099] | :     "# as a global variable                                         "
[08:06:51.099] | :     do.call(function(...) {
[08:06:51.099] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:51.099] | :         "# without having an '...' argument. This means '...' is treated"
[08:06:51.099] | :         "# as a global variable. This may happen when FUN() is an       "
[08:06:51.099] | :         "# anonymous function.                                          "
[08:06:51.099] | :         "#                                                              "
[08:06:51.099] | :         "# If an anonymous function, we will make sure to restore the   "
[08:06:51.099] | :         "# function environment of FUN() to the calling environment.    "
[08:06:51.099] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:51.099] | :         "# global environment, which is where globals are written.      "
[08:06:51.099] | :         penv <- env <- environment(...future.FUN)
[08:06:51.099] | :         repeat {
[08:06:51.099] | :             if (identical(env, globalenv()) || identical(env, 
[08:06:51.099] | :                 emptyenv())) 
[08:06:51.099] | :                 break
[08:06:51.099] | :             penv <- env
[08:06:51.099] | :             env <- parent.env(env)
[08:06:51.099] | :         }
[08:06:51.099] | :         if (identical(penv, globalenv())) {
[08:06:51.099] | :             environment(...future.FUN) <- environment()
[08:06:51.099] | :         }
[08:06:51.099] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:51.099] | :             !isNamespace(penv)) {
[08:06:51.099] | :             parent.env(penv) <- environment()
[08:06:51.099] | :         }
[08:06:51.099] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:51.099] | :         {
[08:06:51.099] | :             "# future.apply:::future_xapply(): preserve future option"
[08:06:51.099] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:51.099] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:51.099] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:51.099] | :                 on.exit(options(oopts), add = TRUE)
[08:06:51.099] | :             }
[08:06:51.099] | :             {
[08:06:51.099] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:51.099] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:51.099] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:51.099] | :                   {
[08:06:51.099] | :                     ...future.FUN(...future.X_jj, ...)
[08:06:51.099] | :                   }
[08:06:51.099] | :                 })
[08:06:51.099] | :             }
[08:06:51.099] | :         }
[08:06:51.099] | :     }, args = future.call.arguments)
[08:06:51.099] | : }
[08:06:51.099] | : Globals: 5 objects totaling 6.13 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:51.099] | : Packages: <none>
[08:06:51.099] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:51.099] | : Capture standard output: NA
[08:06:51.099] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:51.099] | : Immediate condition classes: ‘immediateCondition’
[08:06:51.099] | : Lazy evaluation: FALSE
[08:06:51.099] | : Local evaluation: TRUE
[08:06:51.099] | : Asynchronous evaluation: TRUE
[08:06:51.099] | : Early signaling: FALSE
[08:06:51.099] | : Environment: R_GlobalEnv
[08:06:51.099] | : State: ‘finished’
[08:06:51.099] | : Resolved: TRUE
[08:06:51.099] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-3
[08:06:51.099] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:51.099] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:06:51.099] | : Value: 55 bytes of class ‘list’
[08:06:51.099] | : Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
[08:06:51.099] | : Duration: 0.5262878 secs (started 2025-06-17 08:06:50.559359)
[08:06:51.099] | : Worker process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:51.100] | : Chunk #1 of 1 ... DONE
[08:06:51.100] | : Launching 1 futures (chunks) ... DONE
[08:06:51.100] | : Resolving 1 futures (chunks) ...
[08:06:51.100] | : value() for list ...
[08:06:51.101] | : . recursive: 0
[08:06:51.101] | : . reduce: FALSE
[08:06:51.101] | : . length: 1

[08:06:51.101] | : . Number of remaining objects: 1
[08:06:51.101] | : . checking value #1:
[08:06:51.101] | : . 'obj' is SequentialFuture
[08:06:51.101] | : . resolved() for SequentialFuture (‘future_lapply-1’) ...
[08:06:51.101] | : . ' state: ‘finished’
[08:06:51.102] | : . ' run: TRUE
[08:06:51.102] | : . ' result: ‘FutureResult’
[08:06:51.102] | : . resolved() for SequentialFuture (‘future_lapply-1’) ... done
[08:06:51.102] | : . SequentialFuture #1
[08:06:51.102] | : . signalConditionsASAP(SequentialFuture, pos=1) ...
[08:06:51.102] | : . ' nx: 1
[08:06:51.102] | : . ' relay: TRUE
[08:06:51.102] | : . ' stdout: TRUE
[08:06:51.102] | : . ' signal: TRUE
[08:06:51.102] | : . ' resignal: FALSE
[08:06:51.102] | : . ' force: TRUE
[08:06:51.103] | : . ' relayed: [n=1] FALSE
[08:06:51.103] | : . ' queued futures: [n=1] FALSE
[08:06:51.103] | : . ' until=1
[08:06:51.103] | : . ' relaying element #1
[08:06:51.103] | : . ' value() for SequentialFuture (‘future_lapply-1’) ...
[08:06:51.103] | : . ' , signalConditions() ...
[08:06:51.103] | : . ' , ; include = ‘immediateCondition’
[08:06:51.103] | : . ' , ; exclude = 
[08:06:51.103] | : . ' , ; resignal = FALSE
[08:06:51.103] | : . ' , ; Number of conditions: 6
[08:06:51.104] | : . ' , ;  int 6
[08:06:51.104] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.104] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.104] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.104] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.104] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.105] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.105] | : . ' , ; Drop signaled conditions: 0
[08:06:51.105] | : . ' , signalConditions() ... done
[08:06:51.105] | : . ' , relay stdout ...
[08:06:51.105] | : . ' , relay stdout ... done
[08:06:51.107] | : . ' , check for misuse ...
[08:06:51.107] | : . ' , check for misuse ... done
[08:06:51.107] | : . ' value() for SequentialFuture (‘future_lapply-1’) ... done
[08:06:51.107] | : . ' signalConditions() ...
[08:06:51.107] | : . ' , include = ‘immediateCondition’
[08:06:51.107] | : . ' , exclude = 
[08:06:51.107] | : . ' , resignal = FALSE
[08:06:51.107] | : . ' , Number of conditions: 6
[08:06:51.107] | : . ' ,  int 6
[08:06:51.108] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.108] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.108] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.108] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.108] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.108] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.109] | : . ' , Drop signaled conditions: 0
[08:06:51.109] | : . ' signalConditions() ... done
[08:06:51.109] | : . ' signalConditions() ...
[08:06:51.109] | : . ' , include = ‘condition’
[08:06:51.109] | : . ' , exclude = ‘error’, ‘immediateCondition’
[08:06:51.109] | : . ' , resignal = TRUE
[08:06:51.109] | : . ' , Number of conditions: 6
[08:06:51.109] | : . ' ,  int 6
[08:06:51.110] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.110] | : . ' , Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:50.559] | : . ' , ; ` attachPackages() ...
[08:06:51.110] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.110] | : . ' , Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:50.559] | : . ' , ; ` | packages: [n=1] ‘future’
[08:06:51.110] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.110] | : . ' , Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:50.559] | : . ' , ; ` attachPackages() ... done
[08:06:51.110] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.111] | : . ' , Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:50.559] | : . ' , ; ` attachPackages() ...
[08:06:51.111] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.111] | : . ' , Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:50.559] | : . ' , ; ` | packages: [n=0] 
[08:06:51.111] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.111] | : . ' , Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:50.560] | : . ' , ; ` attachPackages() ... done
[08:06:51.111] | : . ' , Drop signaled conditions: 6
[08:06:51.111] | : . ' signalConditions() ... done
[08:06:51.111] | : . ' relayed: [n=1] TRUE
[08:06:51.112] | : . ' queued futures: [n=1] TRUE
[08:06:51.112] | : . signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:06:51.112] | : . value(<SequentialFuture>, ...) ...
[08:06:51.112] | : . value(<SequentialFuture>, ...) ... done
[08:06:51.112] | : . value() for SequentialFuture (‘future_lapply-1’) ...
[08:06:51.112] | : . ' signalConditions() ...
[08:06:51.112] | : . ' , include = ‘immediateCondition’
[08:06:51.112] | : . ' , exclude = 
[08:06:51.112] | : . ' , resignal = FALSE
[08:06:51.112] | : . ' , Number of conditions: 0
[08:06:51.113] | : . ' ,  int 0
[08:06:51.113] | : . ' signalConditions() ... done
[08:06:51.113] | : . ' check for misuse ...
[08:06:51.113] | : . ' check for misuse ... done
[08:06:51.113] | : . value() for SequentialFuture (‘future_lapply-1’) ... done
[08:06:51.113] | : . value: <list>
[08:06:51.113] | : . signalConditionsASAP(SequentialFuture, pos=1) ...
[08:06:51.114] | : . ' nx: 1
[08:06:51.114] | : . ' relay: TRUE
[08:06:51.114] | : . ' stdout: TRUE
[08:06:51.114] | : . ' signal: TRUE
[08:06:51.114] | : . ' resignal: FALSE
[08:06:51.114] | : . ' force: TRUE
[08:06:51.114] | : . ' relayed: [n=1] TRUE
[08:06:51.114] | : . ' queued futures: [n=1] TRUE
[08:06:51.114] | : . ' until=1
[08:06:51.114] | : . ' relayed: [n=1] TRUE
[08:06:51.115] | : . ' queued futures: [n=1] TRUE
[08:06:51.115] | : . signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:06:51.115] | : . resolve() for SequentialFuture ...
[08:06:51.115] | : . resolve() for SequentialFuture ... done
[08:06:51.115] | : . length: 0 (resolved future 1)
[08:06:51.115] | : value() for list ... done
[08:06:51.115] | : Relaying remaining futures ...
[08:06:51.115] | : . signalConditionsASAP(NULL, pos=0) ...
[08:06:51.115] | : . ' nx: 1
[08:06:51.115] | : . ' relay: TRUE
[08:06:51.116] | : . ' stdout: TRUE
[08:06:51.116] | : . ' signal: TRUE
[08:06:51.116] | : . ' resignal: FALSE
[08:06:51.116] | : . ' force: TRUE
[08:06:51.116] | : . ' relayed: [n=1] TRUE
[08:06:51.116] | : . ' queued futures: [n=1] TRUE
 - flush all
[08:06:51.116] | : . ' relayed: [n=1] TRUE
[08:06:51.116] | : . ' queued futures: [n=1] TRUE
[08:06:51.116] | : . signalConditionsASAP(NULL, pos=0) ... done
[08:06:51.116] | : Relaying remaining futures ... done
[08:06:51.117] | future_lapply() -> future_xapply() ... done
[08:06:51.117] |  - Number of value chunks collected: 1
[08:06:51.117] | Resolving 1 futures (chunks) ... DONE
[08:06:51.117] | Reducing values from 1 chunks ...
[08:06:51.117] |  - Number of values collected after concatenation: 2
[08:06:51.117] |  - Number of values expected: 2
[08:06:51.117] | Reducing values from 1 chunks ... DONE
[08:06:51.117] future_lapply() ... done

* future_lapply(x, ..., future.stdout = NA) ... DONE
* future_mapply(x, ..., future.stdout = FALSE) ...
[08:06:51.118] future_mapply() ...
[08:06:51.118] | future_mapply() -> future_xapply() ...
[08:06:51.118] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:51.118] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:51.118] | : Number of chunks: 1
[08:06:51.118] | : getGlobalsAndPackagesXApply() ...
[08:06:51.118] | : . future.globals: TRUE
[08:06:51.118] | : . getGlobalsAndPackages() ...
[08:06:51.119] | : . ' Searching for globals ...
[08:06:51.128] | : . ' , globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[08:06:51.128] | : . ' Searching for globals ... done
[08:06:51.128] | : . ' Resolving globals: FALSE
[08:06:51.129] | : . ' Search for packages associated with the globals ...
[08:06:51.129] | : . ' , Packages associated with globals: [1] ‘base’
[08:06:51.129] | : . ' , Packages: [1] ‘base’
[08:06:51.129] | : . ' Search for packages associated with the globals ... done
[08:06:51.129] | : . ' The total size of the 1 globals is 1.04 KiB (1066 bytes)
[08:06:51.130] | : . ' The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[08:06:51.130] | : . ' Packages after dropping 'base': [0] 
[08:06:51.130] | : . ' globals: [1] ‘FUN’
[08:06:51.130] | : . ' packages: [0] 
[08:06:51.130] | : . getGlobalsAndPackages() ... done
[08:06:51.130] | : . globals found/used: [n=1] ‘FUN’
[08:06:51.130] | : . needed namespaces: [n=0] 
[08:06:51.131] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[08:06:51.131] | : . List of 2
[08:06:51.131] | : .  $ ...future.FUN:function (x, y)  
[08:06:51.131] | : .  $ MoreArgs     : NULL
[08:06:51.131] | : .  - attr(*, "where")=List of 2
[08:06:51.131] | : .   ..$ ...future.FUN:<environment: 0x55eee02c13e8> 
[08:06:51.131] | : .   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[08:06:51.131] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:51.131] | : .  - attr(*, "resolved")= logi FALSE
[08:06:51.131] | : .  - attr(*, "total_size")= num NA
[08:06:51.133] | : . Packages to be attached in all futures: [n=0] 
[08:06:51.134] | : getGlobalsAndPackagesXApply() ... done
[08:06:51.134] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:51.134] | : List of 5
[08:06:51.134] | :  $ ...future.FUN            :function (x, y)  
[08:06:51.134] | :  $ MoreArgs                 : NULL
[08:06:51.134] | :  $ ...future.elements_ii    : NULL
[08:06:51.134] | :  $ ...future.seeds_ii       : NULL
[08:06:51.134] | :  $ ...future.globals.maxSize: NULL
[08:06:51.134] | :  - attr(*, "where")=List of 5
[08:06:51.134] | :   ..$ ...future.FUN            :<environment: 0x55eee02c13e8> 
[08:06:51.134] | :   ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[08:06:51.134] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:51.134] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:51.134] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:51.134] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:51.134] | :  - attr(*, "resolved")= logi FALSE
[08:06:51.134] | :  - attr(*, "total_size")= num NA
[08:06:51.138] | : Number of futures (= number of chunks): 1
[08:06:51.138] | : Launching 1 futures (chunks) ...
[08:06:51.138] | : Chunk #1 of 1 ...
[08:06:51.138] | :  - Finding globals in '...' for chunk #1 ...
[08:06:51.138] | : getGlobalsAndPackages() ...
[08:06:51.138] | : . Searching for globals ...
[08:06:51.139] | : . ' globals found: [0] 
[08:06:51.139] | : . Searching for globals ... done
[08:06:51.139] | : . globals: [0] <none>
[08:06:51.139] | : . packages: [0] <none>
[08:06:51.139] | : getGlobalsAndPackages() ... done
[08:06:51.140] | :    + additional globals found: [n=0] 
[08:06:51.140] | :    + additional namespaces needed: [n=0] 
[08:06:51.140] | :  - Finding globals in '...' for chunk #1 ... DONE
[08:06:51.142] | :  - seeds: <none>
[08:06:51.142] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:51.142] | : future(..., label = ‘future_mapply-1’) ...
[08:06:51.142] | : . lazy: FALSE
[08:06:51.142] | : . stdout: FALSE
[08:06:51.142] | : . conditions: [n=1] ‘condition’
[08:06:51.142] | : . gc: FALSE
[08:06:51.142] | : . earlySignal: FALSE
[08:06:51.142] | : . getGlobalsAndPackages() ...
[08:06:51.143] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:51.143] | : . ' Resolving globals: FALSE
[08:06:51.143] | : . ' Search for packages associated with the globals ...
[08:06:51.143] | : . ' , Packages associated with globals: [0] 
[08:06:51.143] | : . ' , Packages: [0] 
[08:06:51.143] | : . ' Search for packages associated with the globals ... done
[08:06:51.144] | : . ' Packages after dropping 'base': [0] 
[08:06:51.144] | : . ' globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:51.144] | : . ' packages: [0] 
[08:06:51.144] | : . getGlobalsAndPackages() ... done
[08:06:51.144] | : . run() for ‘Future’ (‘future_mapply-1’) ...
[08:06:51.144] | : . ' state: ‘created’
[08:06:51.144] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:51.145] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:51.145] | : . ' Using SequentialFutureBackend ...
[08:06:51.145] | : . ' , Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:06:51.145] | : . ' , Launching futures ...
[08:06:51.145] | : . ' , ; launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:06:51.145] | : . ' , ; ` getFutureData() ...
[08:06:51.145] | : . ' , ; ` | getFutureCore() ...
[08:06:51.145] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:06:51.146] | : . ' , ; ` | getFutureCore() ... done
[08:06:51.146] | : . ' , ; ` | getFutureCapture() ...
[08:06:51.146] | : . ' , ; ` | getFutureCapture() ... done
[08:06:51.146] | : . ' , ; ` | getFutureContext() ...
[08:06:51.146] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:51.146] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:06:51.146] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:51.146] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:06:51.146] | : . ' , ; ` | getFutureContext() ... done
[08:06:51.147] | : . ' , ; ` getFutureData() ... done
[08:06:51.148] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:51.148] | : . ' , ; ` | Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:06:51.148] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:51.148] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:51.149] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:51.149] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:06:51.149] | : . ' , ; ` | : . New stack:
[08:06:51.149] | : . ' , ; ` | : . List of 1
[08:06:51.149] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:51.149] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:51.149] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:06:51.149] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:51.149] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.149] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.149] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:51.149] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:51.152] | : . ' , ; ` | : . Old stack:
[08:06:51.152] | : . ' , ; ` | : . List of 1
[08:06:51.152] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:51.152] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:51.152] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:51.152] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:51.152] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.152] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.152] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:06:51.152] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:51.152] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:51.152] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.152] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:51.155] | : . ' , ; ` | : . Not identical
[08:06:51.155] | : . ' , ; ` | : . all.equal() for future ...
[08:06:51.156] | : . ' , ; ` | : . ' List of 2
[08:06:51.156] | : . ' , ; ` | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:51.156] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:51.156] | : . ' , ; ` | : . '   ..- attr(*, "init")= logi TRUE
[08:06:51.156] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:51.156] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.156] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.156] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:51.156] | : . ' , ; ` | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:51.156] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:51.156] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:51.156] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:51.156] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.156] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.156] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(sequential)
[08:06:51.156] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:51.156] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:51.156] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.199] | : . ' , ; ` | : . all.equal() for future ... done
[08:06:51.199] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:06:51.199] | : . ' , ; ` | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:06:51.199] | : . ' , ; ` | : List of future strategies:
[08:06:51.199] | : . ' , ; ` | : 1. sequential:
[08:06:51.199] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:51.199] | : . ' , ; ` | :    - tweaked: FALSE
[08:06:51.199] | : . ' , ; ` | :    - call: plan(sequential)
[08:06:51.199] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:51.200] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:51.200] | : . ' , ; ` assign_globals() ...
[08:06:51.200] | : . ' , ; ` List of 5
[08:06:51.200] | : . ' , ; `  $ ...future.FUN            :function (x, y)  
[08:06:51.200] | : . ' , ; `  $ MoreArgs                 : NULL
[08:06:51.200] | : . ' , ; `  $ ...future.elements_ii    :List of 2
[08:06:51.200] | : . ' , ; `   ..$ :List of 2
[08:06:51.200] | : . ' , ; `   .. ..$ : int 1
[08:06:51.200] | : . ' , ; `   .. ..$ : int 0
[08:06:51.200] | : . ' , ; `   ..$ :List of 2
[08:06:51.200] | : . ' , ; `   .. ..$ : int 0
[08:06:51.200] | : . ' , ; `   .. ..$ : int 1
[08:06:51.200] | : . ' , ; `  $ ...future.seeds_ii       : NULL
[08:06:51.200] | : . ' , ; `  $ ...future.globals.maxSize: NULL
[08:06:51.200] | : . ' , ; `  - attr(*, "where")=List of 5
[08:06:51.200] | : . ' , ; `   ..$ ...future.FUN            :<environment: 0x55eee02c13e8> 
[08:06:51.200] | : . ' , ; `   ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[08:06:51.200] | : . ' , ; `   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:51.200] | : . ' , ; `   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:51.200] | : . ' , ; `   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:51.200] | : . ' , ; `  - attr(*, "resolved")= logi FALSE
[08:06:51.200] | : . ' , ; `  - attr(*, "total_size")= num NA
[08:06:51.200] | : . ' , ; `  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:51.200] | : . ' , ; `  - attr(*, "already-done")= logi TRUE
[08:06:51.206] | : . ' , ; ` - copied ‘...future.FUN’ to environment
[08:06:51.206] | : . ' , ; ` - copied ‘MoreArgs’ to environment
[08:06:51.206] | : . ' , ; ` - copied ‘...future.elements_ii’ to environment
[08:06:51.206] | : . ' , ; ` - copied ‘...future.seeds_ii’ to environment
[08:06:51.207] | : . ' , ; ` - copied ‘...future.globals.maxSize’ to environment
[08:06:51.207] | : . ' , ; ` assign_globals() ... done
[08:06:51.709] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:51.710] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:51.710] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:51.710] | : . ' , ; ` | : . all.equal() for FutureStrategyList ...
[08:06:51.710] | : . ' , ; ` | : . ' New stack:
[08:06:51.710] | : . ' , ; ` | : . ' List of 1
[08:06:51.710] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:51.710] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:51.710] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:51.710] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:51.710] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.710] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.710] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(sequential)
[08:06:51.710] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:51.710] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:51.710] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.710] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:51.714] | : . ' , ; ` | : . ' Old stack:
[08:06:51.714] | : . ' , ; ` | : . ' List of 1
[08:06:51.714] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:51.714] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:51.714] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:51.714] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:51.714] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.714] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.714] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(sequential)
[08:06:51.714] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:51.714] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:51.714] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.714] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:51.718] | : . ' , ; ` | : . ' Identical
[08:06:51.719] | : . ' , ; ` | : . all.equal() for FutureStrategyList ... done
[08:06:51.719] | : . ' , ; ` | : . plan(): Skip setting new future backend stack because it is the same as the current one:
[08:06:51.719] | : . ' , ; ` | : . List of future strategies:
[08:06:51.719] | : . ' , ; ` | : . 1. sequential:
[08:06:51.719] | : . ' , ; ` | : .    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:51.719] | : . ' , ; ` | : .    - tweaked: FALSE
[08:06:51.719] | : . ' , ; ` | : .    - call: plan(sequential)
[08:06:51.719] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:51.720] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:51.720] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:51.720] | : . ' , ; ` SequentialFuture started (and completed)
[08:06:51.720] | : . ' , ; ` signalConditions() ...
[08:06:51.720] | : . ' , ; ` | include = ‘immediateCondition’
[08:06:51.720] | : . ' , ; ` | exclude = 
[08:06:51.720] | : . ' , ; ` | resignal = FALSE
[08:06:51.721] | : . ' , ; ` | Number of conditions: 6
[08:06:51.721] | : . ' , ; ` |  int 6
[08:06:51.721] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.721] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.721] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.721] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.721] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.722] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.722] | : . ' , ; ` | Drop signaled conditions: 0
[08:06:51.722] | : . ' , ; ` signalConditions() ... done
[08:06:51.722] | : . ' , ; launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:06:51.722] | : . ' , Launching futures ... done
[08:06:51.722] | : . ' , Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:06:51.722] | : . ' Using SequentialFutureBackend ... done
[08:06:51.722] | : . run() for ‘Future’ (‘future_mapply-1’) ... done
[08:06:51.722] | : future(..., label = ‘future_mapply-1’) ... done
[08:06:51.723] | : Created future:
[08:06:51.723] | : SequentialFuture:
[08:06:51.723] | : Label: ‘future_mapply-1’
[08:06:51.723] | : Expression:
[08:06:51.723] | : {
[08:06:51.723] | :     "# future.apply:::future_xapply(): preserve future option"
[08:06:51.723] | :     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:51.723] | :     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:51.723] | :         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:51.723] | :         on.exit(options(oopts), add = TRUE)
[08:06:51.723] | :     }
[08:06:51.723] | :     {
[08:06:51.723] | :         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[08:06:51.723] | :             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[08:06:51.723] | :         do.call(mapply, args = args)
[08:06:51.723] | :     }
[08:06:51.723] | : }
[08:06:51.723] | : Globals: 5 objects totaling 6.53 KiB (function ‘...future.FUN’ of 1.04 KiB, list ‘...future.elements_ii’ of 95 bytes, NULL ‘MoreArgs’ of 27 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:51.723] | : Packages: <none>
[08:06:51.723] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:51.723] | : Capture standard output: FALSE
[08:06:51.723] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:51.723] | : Immediate condition classes: ‘immediateCondition’
[08:06:51.723] | : Lazy evaluation: FALSE
[08:06:51.723] | : Local evaluation: TRUE
[08:06:51.723] | : Asynchronous evaluation: TRUE
[08:06:51.723] | : Early signaling: FALSE
[08:06:51.723] | : Environment: R_GlobalEnv
[08:06:51.723] | : State: ‘finished’
[08:06:51.723] | : Resolved: TRUE
[08:06:51.723] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-4
[08:06:51.723] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:51.723] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:06:51.723] | : Value: 184 bytes of class ‘list’
[08:06:51.723] | : Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
[08:06:51.723] | : Duration: 0.5623837 secs (started 2025-06-17 08:06:51.147194)
[08:06:51.723] | : Worker process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:51.724] | : Chunk #1 of 1 ... DONE
[08:06:51.724] | : Launching 1 futures (chunks) ... DONE
[08:06:51.724] | : Resolving 1 futures (chunks) ...
[08:06:51.724] | : value() for list ...
[08:06:51.724] | : . recursive: 0
[08:06:51.724] | : . reduce: FALSE
[08:06:51.724] | : . length: 1

[08:06:51.725] | : . Number of remaining objects: 1
[08:06:51.725] | : . checking value #1:
[08:06:51.725] | : . 'obj' is SequentialFuture
[08:06:51.725] | : . resolved() for SequentialFuture (‘future_mapply-1’) ...
[08:06:51.725] | : . ' state: ‘finished’
[08:06:51.725] | : . ' run: TRUE
[08:06:51.725] | : . ' result: ‘FutureResult’
[08:06:51.725] | : . resolved() for SequentialFuture (‘future_mapply-1’) ... done
[08:06:51.725] | : . SequentialFuture #1
[08:06:51.726] | : . signalConditionsASAP(SequentialFuture, pos=1) ...
[08:06:51.726] | : . ' nx: 1
[08:06:51.726] | : . ' relay: TRUE
[08:06:51.726] | : . ' stdout: TRUE
[08:06:51.726] | : . ' signal: TRUE
[08:06:51.726] | : . ' resignal: FALSE
[08:06:51.726] | : . ' force: TRUE
[08:06:51.726] | : . ' relayed: [n=1] FALSE
[08:06:51.726] | : . ' queued futures: [n=1] FALSE
[08:06:51.726] | : . ' until=1
[08:06:51.727] | : . ' relaying element #1
[08:06:51.727] | : . ' value() for SequentialFuture (‘future_mapply-1’) ...
[08:06:51.727] | : . ' , signalConditions() ...
[08:06:51.727] | : . ' , ; include = ‘immediateCondition’
[08:06:51.727] | : . ' , ; exclude = 
[08:06:51.727] | : . ' , ; resignal = FALSE
[08:06:51.727] | : . ' , ; Number of conditions: 6
[08:06:51.727] | : . ' , ;  int 6
[08:06:51.728] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.728] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.728] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.728] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.728] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.728] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.728] | : . ' , ; Drop signaled conditions: 0
[08:06:51.728] | : . ' , signalConditions() ... done
[08:06:51.729] | : . ' , relay stdout ...
[08:06:51.729] | : . ' , relay stdout ... done
[08:06:51.729] | : . ' , check for misuse ...
[08:06:51.729] | : . ' , check for misuse ... done
[08:06:51.729] | : . ' value() for SequentialFuture (‘future_mapply-1’) ... done
[08:06:51.729] | : . ' signalConditions() ...
[08:06:51.729] | : . ' , include = ‘immediateCondition’
[08:06:51.729] | : . ' , exclude = 
[08:06:51.729] | : . ' , resignal = FALSE
[08:06:51.729] | : . ' , Number of conditions: 6
[08:06:51.730] | : . ' ,  int 6
[08:06:51.730] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.730] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.730] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.730] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.730] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.730] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.731] | : . ' , Drop signaled conditions: 0
[08:06:51.731] | : . ' signalConditions() ... done
[08:06:51.731] | : . ' signalConditions() ...
[08:06:51.731] | : . ' , include = ‘condition’
[08:06:51.731] | : . ' , exclude = ‘error’, ‘immediateCondition’
[08:06:51.731] | : . ' , resignal = TRUE
[08:06:51.731] | : . ' , Number of conditions: 6
[08:06:51.731] | : . ' ,  int 6
[08:06:51.732] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.732] | : . ' , Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:51.147] | : . ' , ; ` attachPackages() ...
[08:06:51.732] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.732] | : . ' , Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:51.147] | : . ' , ; ` | packages: [n=1] ‘future’
[08:06:51.732] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.732] | : . ' , Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:51.147] | : . ' , ; ` attachPackages() ... done
[08:06:51.732] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.733] | : . ' , Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:51.147] | : . ' , ; ` attachPackages() ...
[08:06:51.733] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.733] | : . ' , Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:51.147] | : . ' , ; ` | packages: [n=0] 
[08:06:51.733] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:51.733] | : . ' , Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:51.148] | : . ' , ; ` attachPackages() ... done
[08:06:51.733] | : . ' , Drop signaled conditions: 6
[08:06:51.733] | : . ' signalConditions() ... done
[08:06:51.733] | : . ' relayed: [n=1] TRUE
[08:06:51.733] | : . ' queued futures: [n=1] TRUE
[08:06:51.734] | : . signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:06:51.734] | : . value(<SequentialFuture>, ...) ...
[08:06:51.734] | : . value(<SequentialFuture>, ...) ... done
[08:06:51.734] | : . value() for SequentialFuture (‘future_mapply-1’) ...
[08:06:51.734] | : . ' signalConditions() ...
[08:06:51.734] | : . ' , include = ‘immediateCondition’
[08:06:51.734] | : . ' , exclude = 
[08:06:51.734] | : . ' , resignal = FALSE
[08:06:51.734] | : . ' , Number of conditions: 0
[08:06:51.734] | : . ' ,  int 0
[08:06:51.735] | : . ' signalConditions() ... done
[08:06:51.735] | : . ' check for misuse ...
[08:06:51.735] | : . ' check for misuse ... done
[08:06:51.735] | : . value() for SequentialFuture (‘future_mapply-1’) ... done
[08:06:51.735] | : . value: <list>
[08:06:51.735] | : . signalConditionsASAP(SequentialFuture, pos=1) ...
[08:06:51.735] | : . ' nx: 1
[08:06:51.736] | : . ' relay: TRUE
[08:06:51.736] | : . ' stdout: TRUE
[08:06:51.736] | : . ' signal: TRUE
[08:06:51.736] | : . ' resignal: FALSE
[08:06:51.736] | : . ' force: TRUE
[08:06:51.736] | : . ' relayed: [n=1] TRUE
[08:06:51.736] | : . ' queued futures: [n=1] TRUE
[08:06:51.736] | : . ' until=1
[08:06:51.736] | : . ' relayed: [n=1] TRUE
[08:06:51.736] | : . ' queued futures: [n=1] TRUE
[08:06:51.737] | : . signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:06:51.737] | : . resolve() for SequentialFuture ...
[08:06:51.737] | : . resolve() for SequentialFuture ... done
[08:06:51.737] | : . length: 0 (resolved future 1)
[08:06:51.738] | : value() for list ... done
[08:06:51.738] | : Relaying remaining futures ...
[08:06:51.738] | : . signalConditionsASAP(NULL, pos=0) ...
[08:06:51.738] | : . ' nx: 1
[08:06:51.738] | : . ' relay: TRUE
[08:06:51.738] | : . ' stdout: TRUE
[08:06:51.739] | : . ' signal: TRUE
[08:06:51.739] | : . ' resignal: FALSE
[08:06:51.739] | : . ' force: TRUE
[08:06:51.739] | : . ' relayed: [n=1] TRUE
[08:06:51.739] | : . ' queued futures: [n=1] TRUE
 - flush all
[08:06:51.739] | : . ' relayed: [n=1] TRUE
[08:06:51.739] | : . ' queued futures: [n=1] TRUE
[08:06:51.739] | : . signalConditionsASAP(NULL, pos=0) ... done
[08:06:51.739] | : Relaying remaining futures ... done
[08:06:51.739] | future_mapply() -> future_xapply() ... done
[08:06:51.740] |  - Number of value chunks collected: 1
[08:06:51.740] | Resolving 1 futures (chunks) ... DONE
[08:06:51.740] | Reducing values from 1 chunks ...
[08:06:51.740] |  - Number of values collected after concatenation: 2
[08:06:51.740] |  - Number of values expected: 2
[08:06:51.740] | Reducing values from 1 chunks ... DONE
[08:06:51.740] future_mapply() ... done

* future_mapply(x, ..., future.stdout = FALSE) ... DONE
* future_mapply(x, ..., future.stdout = TRUE) ...
[08:06:51.741] future_mapply() ...
[08:06:51.741] | future_mapply() -> future_xapply() ...
[08:06:51.741] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:51.741] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:51.741] | : Number of chunks: 1
[08:06:51.741] | : getGlobalsAndPackagesXApply() ...
[08:06:51.741] | : . future.globals: TRUE
[08:06:51.741] | : . getGlobalsAndPackages() ...
[08:06:51.742] | : . ' Searching for globals ...
[08:06:51.750] | : . ' , globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[08:06:51.750] | : . ' Searching for globals ... done
[08:06:51.750] | : . ' Resolving globals: FALSE
[08:06:51.750] | : . ' Search for packages associated with the globals ...
[08:06:51.750] | : . ' , Packages associated with globals: [1] ‘base’
[08:06:51.750] | : . ' , Packages: [1] ‘base’
[08:06:51.751] | : . ' Search for packages associated with the globals ... done
[08:06:51.751] | : . ' The total size of the 1 globals is 1.04 KiB (1066 bytes)
[08:06:51.751] | : . ' The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[08:06:51.751] | : . ' Packages after dropping 'base': [0] 
[08:06:51.751] | : . ' globals: [1] ‘FUN’
[08:06:51.751] | : . ' packages: [0] 
[08:06:51.752] | : . getGlobalsAndPackages() ... done
[08:06:51.752] | : . globals found/used: [n=1] ‘FUN’
[08:06:51.752] | : . needed namespaces: [n=0] 
[08:06:51.752] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[08:06:51.752] | : . List of 2
[08:06:51.752] | : .  $ ...future.FUN:function (x, y)  
[08:06:51.752] | : .  $ MoreArgs     : NULL
[08:06:51.752] | : .  - attr(*, "where")=List of 2
[08:06:51.752] | : .   ..$ ...future.FUN:<environment: 0x55eedf9698b0> 
[08:06:51.752] | : .   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[08:06:51.752] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:51.752] | : .  - attr(*, "resolved")= logi FALSE
[08:06:51.752] | : .  - attr(*, "total_size")= num NA
[08:06:51.756] | : . Packages to be attached in all futures: [n=0] 
[08:06:51.756] | : getGlobalsAndPackagesXApply() ... done
[08:06:51.756] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:51.756] | : List of 5
[08:06:51.756] | :  $ ...future.FUN            :function (x, y)  
[08:06:51.756] | :  $ MoreArgs                 : NULL
[08:06:51.756] | :  $ ...future.elements_ii    : NULL
[08:06:51.756] | :  $ ...future.seeds_ii       : NULL
[08:06:51.756] | :  $ ...future.globals.maxSize: NULL
[08:06:51.756] | :  - attr(*, "where")=List of 5
[08:06:51.756] | :   ..$ ...future.FUN            :<environment: 0x55eedf9698b0> 
[08:06:51.756] | :   ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[08:06:51.756] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:51.756] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:51.756] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:51.756] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:51.756] | :  - attr(*, "resolved")= logi FALSE
[08:06:51.756] | :  - attr(*, "total_size")= num NA
[08:06:51.760] | : Number of futures (= number of chunks): 1
[08:06:51.760] | : Launching 1 futures (chunks) ...
[08:06:51.760] | : Chunk #1 of 1 ...
[08:06:51.760] | :  - Finding globals in '...' for chunk #1 ...
[08:06:51.760] | : getGlobalsAndPackages() ...
[08:06:51.760] | : . Searching for globals ...
[08:06:51.761] | : . ' globals found: [0] 
[08:06:51.761] | : . Searching for globals ... done
[08:06:51.761] | : . globals: [0] <none>
[08:06:51.761] | : . packages: [0] <none>
[08:06:51.761] | : getGlobalsAndPackages() ... done
[08:06:51.762] | :    + additional globals found: [n=0] 
[08:06:51.762] | :    + additional namespaces needed: [n=0] 
[08:06:51.762] | :  - Finding globals in '...' for chunk #1 ... DONE
[08:06:51.762] | :  - seeds: <none>
[08:06:51.762] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:51.762] | : future(..., label = ‘future_mapply-1’) ...
[08:06:51.762] | : . lazy: FALSE
[08:06:51.762] | : . stdout: TRUE
[08:06:51.762] | : . conditions: [n=1] ‘condition’
[08:06:51.762] | : . gc: FALSE
[08:06:51.762] | : . earlySignal: FALSE
[08:06:51.763] | : . getGlobalsAndPackages() ...
[08:06:51.763] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:51.763] | : . ' Resolving globals: FALSE
[08:06:51.763] | : . ' Search for packages associated with the globals ...
[08:06:51.763] | : . ' , Packages associated with globals: [0] 
[08:06:51.763] | : . ' , Packages: [0] 
[08:06:51.763] | : . ' Search for packages associated with the globals ... done
[08:06:51.764] | : . ' Packages after dropping 'base': [0] 
[08:06:51.764] | : . ' globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:51.764] | : . ' packages: [0] 
[08:06:51.764] | : . getGlobalsAndPackages() ... done
[08:06:51.764] | : . run() for ‘Future’ (‘future_mapply-1’) ...
[08:06:51.764] | : . ' state: ‘created’
[08:06:51.764] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:51.764] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:51.765] | : . ' Using SequentialFutureBackend ...
[08:06:51.765] | : . ' , Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:06:51.765] | : . ' , Launching futures ...
[08:06:51.765] | : . ' , ; launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:06:51.765] | : . ' , ; ` getFutureData() ...
[08:06:51.765] | : . ' , ; ` | getFutureCore() ...
[08:06:51.765] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:06:51.765] | : . ' , ; ` | getFutureCore() ... done
[08:06:51.765] | : . ' , ; ` | getFutureCapture() ...
[08:06:51.766] | : . ' , ; ` | getFutureCapture() ... done
[08:06:51.766] | : . ' , ; ` | getFutureContext() ...
[08:06:51.766] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:51.766] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:06:51.766] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:51.766] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:06:51.766] | : . ' , ; ` | getFutureContext() ... done
[08:06:51.766] | : . ' , ; ` getFutureData() ... done
[08:06:51.768] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:51.768] | : . ' , ; ` | Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:06:51.768] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:51.768] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:51.768] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:51.768] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:06:51.768] | : . ' , ; ` | : . New stack:
[08:06:51.769] | : . ' , ; ` | : . List of 1
[08:06:51.769] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:51.769] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:51.769] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:06:51.769] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:51.769] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.769] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.769] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:51.769] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:51.771] | : . ' , ; ` | : . Old stack:
[08:06:51.771] | : . ' , ; ` | : . List of 1
[08:06:51.771] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:51.771] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:51.771] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:51.771] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:51.771] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.771] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.771] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:06:51.771] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:51.771] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:51.771] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.771] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:51.775] | : . ' , ; ` | : . Not identical
[08:06:51.776] | : . ' , ; ` | : . all.equal() for future ...
[08:06:51.776] | : . ' , ; ` | : . ' List of 2
[08:06:51.776] | : . ' , ; ` | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:51.776] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:51.776] | : . ' , ; ` | : . '   ..- attr(*, "init")= logi TRUE
[08:06:51.776] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:51.776] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.776] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.776] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:51.776] | : . ' , ; ` | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:51.776] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:51.776] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:51.776] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:51.776] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.776] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.776] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(sequential)
[08:06:51.776] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:51.776] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:51.776] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:51.781] | : . ' , ; ` | : . all.equal() for future ... done
[08:06:51.781] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:06:51.781] | : . ' , ; ` | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:06:51.781] | : . ' , ; ` | : List of future strategies:
[08:06:51.781] | : . ' , ; ` | : 1. sequential:
[08:06:51.781] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:51.781] | : . ' , ; ` | :    - tweaked: FALSE
[08:06:51.781] | : . ' , ; ` | :    - call: plan(sequential)
[08:06:51.781] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:51.782] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:51.782] | : . ' , ; ` assign_globals() ...
[08:06:51.782] | : . ' , ; ` List of 5
[08:06:51.782] | : . ' , ; `  $ ...future.FUN            :function (x, y)  
[08:06:51.782] | : . ' , ; `  $ MoreArgs                 : NULL
[08:06:51.782] | : . ' , ; `  $ ...future.elements_ii    :List of 2
[08:06:51.782] | : . ' , ; `   ..$ :List of 2
[08:06:51.782] | : . ' , ; `   .. ..$ : int 1
[08:06:51.782] | : . ' , ; `   .. ..$ : int 0
[08:06:51.782] | : . ' , ; `   ..$ :List of 2
[08:06:51.782] | : . ' , ; `   .. ..$ : int 0
[08:06:51.782] | : . ' , ; `   .. ..$ : int 1
[08:06:51.782] | : . ' , ; `  $ ...future.seeds_ii       : NULL
[08:06:51.782] | : . ' , ; `  $ ...future.globals.maxSize: NULL
[08:06:51.782] | : . ' , ; `  - attr(*, "where")=List of 5
[08:06:51.782] | : . ' , ; `   ..$ ...future.FUN            :<environment: 0x55eedf9698b0> 
[08:06:51.782] | : . ' , ; `   ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[08:06:51.782] | : . ' , ; `   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:51.782] | : . ' , ; `   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:51.782] | : . ' , ; `   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:51.782] | : . ' , ; `  - attr(*, "resolved")= logi FALSE
[08:06:51.782] | : . ' , ; `  - attr(*, "total_size")= num NA
[08:06:51.782] | : . ' , ; `  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:51.782] | : . ' , ; `  - attr(*, "already-done")= logi TRUE
[08:06:51.788] | : . ' , ; ` - copied ‘...future.FUN’ to environment
[08:06:51.788] | : . ' , ; ` - copied ‘MoreArgs’ to environment
[08:06:51.788] | : . ' , ; ` - copied ‘...future.elements_ii’ to environment
[08:06:51.788] | : . ' , ; ` - copied ‘...future.seeds_ii’ to environment
[08:06:51.788] | : . ' , ; ` - copied ‘...future.globals.maxSize’ to environment
[08:06:51.788] | : . ' , ; ` assign_globals() ... done
[08:06:52.291] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:52.291] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:52.291] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:52.291] | : . ' , ; ` | : . all.equal() for FutureStrategyList ...
[08:06:52.291] | : . ' , ; ` | : . ' New stack:
[08:06:52.292] | : . ' , ; ` | : . ' List of 1
[08:06:52.292] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:52.292] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:52.292] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:52.292] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:52.292] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.292] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.292] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(sequential)
[08:06:52.292] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:52.292] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:52.292] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.292] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:52.297] | : . ' , ; ` | : . ' Old stack:
[08:06:52.297] | : . ' , ; ` | : . ' List of 1
[08:06:52.297] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:52.297] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:52.297] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:52.297] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:52.297] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.297] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.297] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(sequential)
[08:06:52.297] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:52.297] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:52.297] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.297] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:52.300] | : . ' , ; ` | : . ' Identical
[08:06:52.300] | : . ' , ; ` | : . all.equal() for FutureStrategyList ... done
[08:06:52.300] | : . ' , ; ` | : . plan(): Skip setting new future backend stack because it is the same as the current one:
[08:06:52.301] | : . ' , ; ` | : . List of future strategies:
[08:06:52.301] | : . ' , ; ` | : . 1. sequential:
[08:06:52.301] | : . ' , ; ` | : .    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:52.301] | : . ' , ; ` | : .    - tweaked: FALSE
[08:06:52.301] | : . ' , ; ` | : .    - call: plan(sequential)
[08:06:52.301] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:52.301] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:52.301] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:52.302] | : . ' , ; ` SequentialFuture started (and completed)
[08:06:52.302] | : . ' , ; ` signalConditions() ...
[08:06:52.302] | : . ' , ; ` | include = ‘immediateCondition’
[08:06:52.302] | : . ' , ; ` | exclude = 
[08:06:52.302] | : . ' , ; ` | resignal = FALSE
[08:06:52.302] | : . ' , ; ` | Number of conditions: 6
[08:06:52.302] | : . ' , ; ` |  int 6
[08:06:52.303] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.303] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.303] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.303] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.303] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.303] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.303] | : . ' , ; ` | Drop signaled conditions: 0
[08:06:52.303] | : . ' , ; ` signalConditions() ... done
[08:06:52.304] | : . ' , ; launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:06:52.304] | : . ' , Launching futures ... done
[08:06:52.304] | : . ' , Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:06:52.304] | : . ' Using SequentialFutureBackend ... done
[08:06:52.304] | : . run() for ‘Future’ (‘future_mapply-1’) ... done
[08:06:52.304] | : future(..., label = ‘future_mapply-1’) ... done
[08:06:52.304] | : Created future:
[08:06:52.304] | : SequentialFuture:
[08:06:52.304] | : Label: ‘future_mapply-1’
[08:06:52.304] | : Expression:
[08:06:52.304] | : {
[08:06:52.304] | :     "# future.apply:::future_xapply(): preserve future option"
[08:06:52.304] | :     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:52.304] | :     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:52.304] | :         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:52.304] | :         on.exit(options(oopts), add = TRUE)
[08:06:52.304] | :     }
[08:06:52.304] | :     {
[08:06:52.304] | :         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[08:06:52.304] | :             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[08:06:52.304] | :         do.call(mapply, args = args)
[08:06:52.304] | :     }
[08:06:52.304] | : }
[08:06:52.304] | : Globals: 5 objects totaling 6.53 KiB (function ‘...future.FUN’ of 1.04 KiB, list ‘...future.elements_ii’ of 95 bytes, NULL ‘MoreArgs’ of 27 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:52.304] | : Packages: <none>
[08:06:52.304] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:52.304] | : Capture standard output: TRUE
[08:06:52.304] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:52.304] | : Immediate condition classes: ‘immediateCondition’
[08:06:52.304] | : Lazy evaluation: FALSE
[08:06:52.304] | : Local evaluation: TRUE
[08:06:52.304] | : Asynchronous evaluation: TRUE
[08:06:52.304] | : Early signaling: FALSE
[08:06:52.304] | : Environment: R_GlobalEnv
[08:06:52.304] | : State: ‘finished’
[08:06:52.304] | : Resolved: TRUE
[08:06:52.304] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-5
[08:06:52.304] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:52.304] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:06:52.304] | : Value: 184 bytes of class ‘list’
[08:06:52.304] | : Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
[08:06:52.304] | : Duration: 0.5240073 secs (started 2025-06-17 08:06:51.766962)
[08:06:52.304] | : Worker process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:52.305] | : Chunk #1 of 1 ... DONE
[08:06:52.306] | : Launching 1 futures (chunks) ... DONE
[08:06:52.306] | : Resolving 1 futures (chunks) ...
[08:06:52.306] | : value() for list ...
[08:06:52.306] | : . recursive: 0
[08:06:52.306] | : . reduce: FALSE
[08:06:52.306] | : . length: 1

[08:06:52.306] | : . Number of remaining objects: 1
[08:06:52.306] | : . checking value #1:
[08:06:52.306] | : . 'obj' is SequentialFuture
[08:06:52.307] | : . resolved() for SequentialFuture (‘future_mapply-1’) ...
[08:06:52.307] | : . ' state: ‘finished’
[08:06:52.307] | : . ' run: TRUE
[08:06:52.307] | : . ' result: ‘FutureResult’
[08:06:52.307] | : . resolved() for SequentialFuture (‘future_mapply-1’) ... done
[08:06:52.307] | : . SequentialFuture #1
[08:06:52.307] | : . signalConditionsASAP(SequentialFuture, pos=1) ...
[08:06:52.307] | : . ' nx: 1
[08:06:52.307] | : . ' relay: TRUE
[08:06:52.308] | : . ' stdout: TRUE
[08:06:52.308] | : . ' signal: TRUE
[08:06:52.308] | : . ' resignal: FALSE
[08:06:52.308] | : . ' force: TRUE
[08:06:52.308] | : . ' relayed: [n=1] FALSE
[08:06:52.308] | : . ' queued futures: [n=1] FALSE
[08:06:52.308] | : . ' until=1
[08:06:52.308] | : . ' relaying element #1
[08:06:52.308] | : . ' value() for SequentialFuture (‘future_mapply-1’) ...
[08:06:52.308] | : . ' , signalConditions() ...
[08:06:52.309] | : . ' , ; include = ‘immediateCondition’
[08:06:52.309] | : . ' , ; exclude = 
[08:06:52.309] | : . ' , ; resignal = FALSE
[08:06:52.309] | : . ' , ; Number of conditions: 6
[08:06:52.309] | : . ' , ;  int 6
[08:06:52.309] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.310] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.310] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.310] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.310] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.310] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.310] | : . ' , ; Drop signaled conditions: 0
[08:06:52.310] | : . ' , signalConditions() ... done
[08:06:52.310] | : . ' , relay stdout ...
[08:06:52.310] | : . ' , relay stdout ... done
[08:06:52.311] | : . ' , check for misuse ...
[08:06:52.311] | : . ' , check for misuse ... done
[08:06:52.311] | : . ' value() for SequentialFuture (‘future_mapply-1’) ... done
[08:06:52.311] | : . ' signalConditions() ...
[08:06:52.311] | : . ' , include = ‘immediateCondition’
[08:06:52.311] | : . ' , exclude = 
[08:06:52.311] | : . ' , resignal = FALSE
[08:06:52.311] | : . ' , Number of conditions: 6
[08:06:52.311] | : . ' ,  int 6
[08:06:52.312] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.312] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.312] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.312] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.312] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.312] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.312] | : . ' , Drop signaled conditions: 0
[08:06:52.313] | : . ' signalConditions() ... done
[08:06:52.313] | : . ' signalConditions() ...
[08:06:52.314] | : . ' , include = ‘condition’
[08:06:52.314] | : . ' , exclude = ‘error’, ‘immediateCondition’
[08:06:52.314] | : . ' , resignal = TRUE
[08:06:52.314] | : . ' , Number of conditions: 6
[08:06:52.314] | : . ' ,  int 6
[08:06:52.315] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.315] | : . ' , Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:51.767] | : . ' , ; ` attachPackages() ...
[08:06:52.315] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.315] | : . ' , Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:51.767] | : . ' , ; ` | packages: [n=1] ‘future’
[08:06:52.315] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.316] | : . ' , Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:51.767] | : . ' , ; ` attachPackages() ... done
[08:06:52.316] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.316] | : . ' , Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:51.767] | : . ' , ; ` attachPackages() ...
[08:06:52.316] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.316] | : . ' , Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:51.767] | : . ' , ; ` | packages: [n=0] 
[08:06:52.316] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.316] | : . ' , Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:51.767] | : . ' , ; ` attachPackages() ... done
[08:06:52.316] | : . ' , Drop signaled conditions: 6
[08:06:52.317] | : . ' signalConditions() ... done
[08:06:52.317] | : . ' relayed: [n=1] TRUE
[08:06:52.317] | : . ' queued futures: [n=1] TRUE
[08:06:52.317] | : . signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:06:52.317] | : . value(<SequentialFuture>, ...) ...
[08:06:52.317] | : . value(<SequentialFuture>, ...) ... done
[08:06:52.317] | : . value() for SequentialFuture (‘future_mapply-1’) ...
[08:06:52.317] | : . ' signalConditions() ...
[08:06:52.317] | : . ' , include = ‘immediateCondition’
[08:06:52.318] | : . ' , exclude = 
[08:06:52.318] | : . ' , resignal = FALSE
[08:06:52.318] | : . ' , Number of conditions: 0
[08:06:52.318] | : . ' ,  int 0
[08:06:52.318] | : . ' signalConditions() ... done
[08:06:52.318] | : . ' check for misuse ...
[08:06:52.318] | : . ' check for misuse ... done
[08:06:52.319] | : . value() for SequentialFuture (‘future_mapply-1’) ... done
[08:06:52.319] | : . value: <list>
[08:06:52.319] | : . signalConditionsASAP(SequentialFuture, pos=1) ...
[08:06:52.319] | : . ' nx: 1
[08:06:52.319] | : . ' relay: TRUE
[08:06:52.319] | : . ' stdout: TRUE
[08:06:52.319] | : . ' signal: TRUE
[08:06:52.319] | : . ' resignal: FALSE
[08:06:52.319] | : . ' force: TRUE
[08:06:52.319] | : . ' relayed: [n=1] TRUE
[08:06:52.319] | : . ' queued futures: [n=1] TRUE
[08:06:52.320] | : . ' until=1
[08:06:52.320] | : . ' relayed: [n=1] TRUE
[08:06:52.320] | : . ' queued futures: [n=1] TRUE
[08:06:52.320] | : . signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:06:52.320] | : . resolve() for SequentialFuture ...
[08:06:52.320] | : . resolve() for SequentialFuture ... done
[08:06:52.320] | : . length: 0 (resolved future 1)
[08:06:52.320] | : value() for list ... done
[08:06:52.320] | : Relaying remaining futures ...
[08:06:52.320] | : . signalConditionsASAP(NULL, pos=0) ...
[08:06:52.321] | : . ' nx: 1
[08:06:52.321] | : . ' relay: TRUE
[08:06:52.321] | : . ' stdout: TRUE
[08:06:52.321] | : . ' signal: TRUE
[08:06:52.321] | : . ' resignal: FALSE
[08:06:52.321] | : . ' force: TRUE
[08:06:52.321] | : . ' relayed: [n=1] TRUE
[08:06:52.321] | : . ' queued futures: [n=1] TRUE
 - flush all
[08:06:52.321] | : . ' relayed: [n=1] TRUE
[08:06:52.321] | : . ' queued futures: [n=1] TRUE
[08:06:52.322] | : . signalConditionsASAP(NULL, pos=0) ... done
[08:06:52.322] | : Relaying remaining futures ... done
[08:06:52.322] | future_mapply() -> future_xapply() ... done
[08:06:52.322] |  - Number of value chunks collected: 1
[08:06:52.322] | Resolving 1 futures (chunks) ... DONE
[08:06:52.322] | Reducing values from 1 chunks ...
[08:06:52.322] |  - Number of values collected after concatenation: 2
[08:06:52.322] |  - Number of values expected: 2
[08:06:52.322] | Reducing values from 1 chunks ... DONE
[08:06:52.322] future_mapply() ... done

* future_mapply(x, ..., future.stdout = TRUE) ... DONE
* future_mapply(x, ..., future.stdout = NA) ...
[08:06:52.323] future_mapply() ...
[08:06:52.323] | future_mapply() -> future_xapply() ...
[08:06:52.323] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:52.323] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:52.323] | : Number of chunks: 1
[08:06:52.324] | : getGlobalsAndPackagesXApply() ...
[08:06:52.324] | : . future.globals: TRUE
[08:06:52.324] | : . getGlobalsAndPackages() ...
[08:06:52.324] | : . ' Searching for globals ...
[08:06:52.333] | : . ' , globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[08:06:52.334] | : . ' Searching for globals ... done
[08:06:52.334] | : . ' Resolving globals: FALSE
[08:06:52.334] | : . ' Search for packages associated with the globals ...
[08:06:52.334] | : . ' , Packages associated with globals: [1] ‘base’
[08:06:52.334] | : . ' , Packages: [1] ‘base’
[08:06:52.334] | : . ' Search for packages associated with the globals ... done
[08:06:52.335] | : . ' The total size of the 1 globals is 1.04 KiB (1066 bytes)
[08:06:52.335] | : . ' The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[08:06:52.335] | : . ' Packages after dropping 'base': [0] 
[08:06:52.335] | : . ' globals: [1] ‘FUN’
[08:06:52.335] | : . ' packages: [0] 
[08:06:52.336] | : . getGlobalsAndPackages() ... done
[08:06:52.336] | : . globals found/used: [n=1] ‘FUN’
[08:06:52.336] | : . needed namespaces: [n=0] 
[08:06:52.336] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[08:06:52.336] | : . List of 2
[08:06:52.336] | : .  $ ...future.FUN:function (x, y)  
[08:06:52.336] | : .  $ MoreArgs     : NULL
[08:06:52.336] | : .  - attr(*, "where")=List of 2
[08:06:52.336] | : .   ..$ ...future.FUN:<environment: 0x55eedfec7748> 
[08:06:52.336] | : .   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[08:06:52.336] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:52.336] | : .  - attr(*, "resolved")= logi FALSE
[08:06:52.336] | : .  - attr(*, "total_size")= num NA
[08:06:52.339] | : . Packages to be attached in all futures: [n=0] 
[08:06:52.339] | : getGlobalsAndPackagesXApply() ... done
[08:06:52.339] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:52.339] | : List of 5
[08:06:52.339] | :  $ ...future.FUN            :function (x, y)  
[08:06:52.339] | :  $ MoreArgs                 : NULL
[08:06:52.339] | :  $ ...future.elements_ii    : NULL
[08:06:52.339] | :  $ ...future.seeds_ii       : NULL
[08:06:52.339] | :  $ ...future.globals.maxSize: NULL
[08:06:52.339] | :  - attr(*, "where")=List of 5
[08:06:52.339] | :   ..$ ...future.FUN            :<environment: 0x55eedfec7748> 
[08:06:52.339] | :   ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[08:06:52.339] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:52.339] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:52.339] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:52.339] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:52.339] | :  - attr(*, "resolved")= logi FALSE
[08:06:52.339] | :  - attr(*, "total_size")= num NA
[08:06:52.343] | : Number of futures (= number of chunks): 1
[08:06:52.343] | : Launching 1 futures (chunks) ...
[08:06:52.343] | : Chunk #1 of 1 ...
[08:06:52.343] | :  - Finding globals in '...' for chunk #1 ...
[08:06:52.343] | : getGlobalsAndPackages() ...
[08:06:52.344] | : . Searching for globals ...
[08:06:52.344] | : . ' globals found: [0] 
[08:06:52.344] | : . Searching for globals ... done
[08:06:52.344] | : . globals: [0] <none>
[08:06:52.344] | : . packages: [0] <none>
[08:06:52.344] | : getGlobalsAndPackages() ... done
[08:06:52.345] | :    + additional globals found: [n=0] 
[08:06:52.345] | :    + additional namespaces needed: [n=0] 
[08:06:52.345] | :  - Finding globals in '...' for chunk #1 ... DONE
[08:06:52.345] | :  - seeds: <none>
[08:06:52.345] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:52.345] | : future(..., label = ‘future_mapply-1’) ...
[08:06:52.345] | : . lazy: FALSE
[08:06:52.345] | : . stdout: NA
[08:06:52.345] | : . conditions: [n=1] ‘condition’
[08:06:52.345] | : . gc: FALSE
[08:06:52.346] | : . earlySignal: FALSE
[08:06:52.346] | : . getGlobalsAndPackages() ...
[08:06:52.346] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:52.346] | : . ' Resolving globals: FALSE
[08:06:52.346] | : . ' Search for packages associated with the globals ...
[08:06:52.346] | : . ' , Packages associated with globals: [0] 
[08:06:52.346] | : . ' , Packages: [0] 
[08:06:52.347] | : . ' Search for packages associated with the globals ... done
[08:06:52.347] | : . ' Packages after dropping 'base': [0] 
[08:06:52.347] | : . ' globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:52.347] | : . ' packages: [0] 
[08:06:52.347] | : . getGlobalsAndPackages() ... done
[08:06:52.347] | : . run() for ‘Future’ (‘future_mapply-1’) ...
[08:06:52.347] | : . ' state: ‘created’
[08:06:52.348] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:52.348] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:52.348] | : . ' Using SequentialFutureBackend ...
[08:06:52.348] | : . ' , Number of futures since start: 5 (5 created, 5 launched, 5 finished)
[08:06:52.348] | : . ' , Launching futures ...
[08:06:52.348] | : . ' , ; launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:06:52.348] | : . ' , ; ` getFutureData() ...
[08:06:52.348] | : . ' , ; ` | getFutureCore() ...
[08:06:52.348] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:06:52.349] | : . ' , ; ` | getFutureCore() ... done
[08:06:52.349] | : . ' , ; ` | getFutureCapture() ...
[08:06:52.349] | : . ' , ; ` | getFutureCapture() ... done
[08:06:52.349] | : . ' , ; ` | getFutureContext() ...
[08:06:52.349] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:52.349] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:06:52.350] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:52.351] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:06:52.351] | : . ' , ; ` | getFutureContext() ... done
[08:06:52.351] | : . ' , ; ` getFutureData() ... done
[08:06:52.352] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:52.352] | : . ' , ; ` | Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:06:52.352] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:52.353] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:52.353] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:52.353] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:06:52.353] | : . ' , ; ` | : . New stack:
[08:06:52.353] | : . ' , ; ` | : . List of 1
[08:06:52.353] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:52.353] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:52.353] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:06:52.353] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:52.353] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.353] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.353] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:52.353] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:52.356] | : . ' , ; ` | : . Old stack:
[08:06:52.356] | : . ' , ; ` | : . List of 1
[08:06:52.356] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:52.356] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:52.356] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:52.356] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:52.356] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.356] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.356] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:06:52.356] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:52.356] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:52.356] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.356] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:52.359] | : . ' , ; ` | : . Not identical
[08:06:52.359] | : . ' , ; ` | : . all.equal() for future ...
[08:06:52.359] | : . ' , ; ` | : . ' List of 2
[08:06:52.359] | : . ' , ; ` | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:52.359] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:52.359] | : . ' , ; ` | : . '   ..- attr(*, "init")= logi TRUE
[08:06:52.359] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:52.359] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.359] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.359] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:52.359] | : . ' , ; ` | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:52.359] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:52.359] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:52.359] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:52.359] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.359] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.359] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(sequential)
[08:06:52.359] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:52.359] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:52.359] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.364] | : . ' , ; ` | : . all.equal() for future ... done
[08:06:52.364] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:06:52.365] | : . ' , ; ` | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:06:52.365] | : . ' , ; ` | : List of future strategies:
[08:06:52.365] | : . ' , ; ` | : 1. sequential:
[08:06:52.365] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:52.365] | : . ' , ; ` | :    - tweaked: FALSE
[08:06:52.365] | : . ' , ; ` | :    - call: plan(sequential)
[08:06:52.365] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:52.365] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:52.365] | : . ' , ; ` assign_globals() ...
[08:06:52.366] | : . ' , ; ` List of 5
[08:06:52.366] | : . ' , ; `  $ ...future.FUN            :function (x, y)  
[08:06:52.366] | : . ' , ; `  $ MoreArgs                 : NULL
[08:06:52.366] | : . ' , ; `  $ ...future.elements_ii    :List of 2
[08:06:52.366] | : . ' , ; `   ..$ :List of 2
[08:06:52.366] | : . ' , ; `   .. ..$ : int 1
[08:06:52.366] | : . ' , ; `   .. ..$ : int 0
[08:06:52.366] | : . ' , ; `   ..$ :List of 2
[08:06:52.366] | : . ' , ; `   .. ..$ : int 0
[08:06:52.366] | : . ' , ; `   .. ..$ : int 1
[08:06:52.366] | : . ' , ; `  $ ...future.seeds_ii       : NULL
[08:06:52.366] | : . ' , ; `  $ ...future.globals.maxSize: NULL
[08:06:52.366] | : . ' , ; `  - attr(*, "where")=List of 5
[08:06:52.366] | : . ' , ; `   ..$ ...future.FUN            :<environment: 0x55eedfec7748> 
[08:06:52.366] | : . ' , ; `   ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[08:06:52.366] | : . ' , ; `   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:52.366] | : . ' , ; `   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:52.366] | : . ' , ; `   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:52.366] | : . ' , ; `  - attr(*, "resolved")= logi FALSE
[08:06:52.366] | : . ' , ; `  - attr(*, "total_size")= num NA
[08:06:52.366] | : . ' , ; `  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:52.366] | : . ' , ; `  - attr(*, "already-done")= logi TRUE
[08:06:52.372] | : . ' , ; ` - copied ‘...future.FUN’ to environment
[08:06:52.373] | : . ' , ; ` - copied ‘MoreArgs’ to environment
[08:06:52.373] | : . ' , ; ` - copied ‘...future.elements_ii’ to environment
[08:06:52.373] | : . ' , ; ` - copied ‘...future.seeds_ii’ to environment
[08:06:52.373] | : . ' , ; ` - copied ‘...future.globals.maxSize’ to environment
[08:06:52.373] | : . ' , ; ` assign_globals() ... done
[08:06:52.876] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:52.876] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:52.876] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:52.876] | : . ' , ; ` | : . all.equal() for FutureStrategyList ...
[08:06:52.876] | : . ' , ; ` | : . ' New stack:
[08:06:52.877] | : . ' , ; ` | : . ' List of 1
[08:06:52.877] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:52.877] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:52.877] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:52.877] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:52.877] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.877] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.877] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(sequential)
[08:06:52.877] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:52.877] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:52.877] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.877] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:52.880] | : . ' , ; ` | : . ' Old stack:
[08:06:52.880] | : . ' , ; ` | : . ' List of 1
[08:06:52.880] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:52.880] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:52.880] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:52.880] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:52.880] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.880] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.880] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(sequential)
[08:06:52.880] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:52.880] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:52.880] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.880] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:52.883] | : . ' , ; ` | : . ' Identical
[08:06:52.883] | : . ' , ; ` | : . all.equal() for FutureStrategyList ... done
[08:06:52.884] | : . ' , ; ` | : . plan(): Skip setting new future backend stack because it is the same as the current one:
[08:06:52.884] | : . ' , ; ` | : . List of future strategies:
[08:06:52.884] | : . ' , ; ` | : . 1. sequential:
[08:06:52.884] | : . ' , ; ` | : .    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:52.884] | : . ' , ; ` | : .    - tweaked: FALSE
[08:06:52.884] | : . ' , ; ` | : .    - call: plan(sequential)
[08:06:52.884] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:52.884] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:52.884] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:52.885] | : . ' , ; ` SequentialFuture started (and completed)
[08:06:52.885] | : . ' , ; ` signalConditions() ...
[08:06:52.885] | : . ' , ; ` | include = ‘immediateCondition’
[08:06:52.885] | : . ' , ; ` | exclude = 
[08:06:52.885] | : . ' , ; ` | resignal = FALSE
[08:06:52.885] | : . ' , ; ` | Number of conditions: 6
[08:06:52.885] | : . ' , ; ` |  int 6
[08:06:52.886] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.886] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.886] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.886] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.886] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.886] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.886] | : . ' , ; ` | Drop signaled conditions: 0
[08:06:52.887] | : . ' , ; ` signalConditions() ... done
[08:06:52.887] | : . ' , ; launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:06:52.887] | : . ' , Launching futures ... done
[08:06:52.887] | : . ' , Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:06:52.887] | : . ' Using SequentialFutureBackend ... done
[08:06:52.887] | : . run() for ‘Future’ (‘future_mapply-1’) ... done
[08:06:52.889] | : future(..., label = ‘future_mapply-1’) ... done
[08:06:52.889] | : Created future:
[08:06:52.889] | : SequentialFuture:
[08:06:52.889] | : Label: ‘future_mapply-1’
[08:06:52.889] | : Expression:
[08:06:52.889] | : {
[08:06:52.889] | :     "# future.apply:::future_xapply(): preserve future option"
[08:06:52.889] | :     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:52.889] | :     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:52.889] | :         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:52.889] | :         on.exit(options(oopts), add = TRUE)
[08:06:52.889] | :     }
[08:06:52.889] | :     {
[08:06:52.889] | :         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[08:06:52.889] | :             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[08:06:52.889] | :         do.call(mapply, args = args)
[08:06:52.889] | :     }
[08:06:52.889] | : }
[08:06:52.889] | : Globals: 5 objects totaling 6.53 KiB (function ‘...future.FUN’ of 1.04 KiB, list ‘...future.elements_ii’ of 95 bytes, NULL ‘MoreArgs’ of 27 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:52.889] | : Packages: <none>
[08:06:52.889] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:52.889] | : Capture standard output: NA
[08:06:52.889] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:52.889] | : Immediate condition classes: ‘immediateCondition’
[08:06:52.889] | : Lazy evaluation: FALSE
[08:06:52.889] | : Local evaluation: TRUE
[08:06:52.889] | : Asynchronous evaluation: TRUE
[08:06:52.889] | : Early signaling: FALSE
[08:06:52.889] | : Environment: R_GlobalEnv
[08:06:52.889] | : State: ‘finished’
[08:06:52.889] | : Resolved: TRUE
[08:06:52.889] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-6
[08:06:52.889] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:52.889] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:06:52.889] | : Value: 184 bytes of class ‘list’
[08:06:52.889] | : Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
[08:06:52.889] | : Duration: 0.52441 secs (started 2025-06-17 08:06:52.351566)
[08:06:52.889] | : Worker process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:52.890] | : Chunk #1 of 1 ... DONE
[08:06:52.890] | : Launching 1 futures (chunks) ... DONE
[08:06:52.891] | : Resolving 1 futures (chunks) ...
[08:06:52.891] | : value() for list ...
[08:06:52.891] | : . recursive: 0
[08:06:52.891] | : . reduce: FALSE
[08:06:52.891] | : . length: 1

[08:06:52.891] | : . Number of remaining objects: 1
[08:06:52.891] | : . checking value #1:
[08:06:52.891] | : . 'obj' is SequentialFuture
[08:06:52.892] | : . resolved() for SequentialFuture (‘future_mapply-1’) ...
[08:06:52.892] | : . ' state: ‘finished’
[08:06:52.892] | : . ' run: TRUE
[08:06:52.892] | : . ' result: ‘FutureResult’
[08:06:52.892] | : . resolved() for SequentialFuture (‘future_mapply-1’) ... done
[08:06:52.892] | : . SequentialFuture #1
[08:06:52.892] | : . signalConditionsASAP(SequentialFuture, pos=1) ...
[08:06:52.892] | : . ' nx: 1
[08:06:52.892] | : . ' relay: TRUE
[08:06:52.892] | : . ' stdout: TRUE
[08:06:52.893] | : . ' signal: TRUE
[08:06:52.893] | : . ' resignal: FALSE
[08:06:52.893] | : . ' force: TRUE
[08:06:52.893] | : . ' relayed: [n=1] FALSE
[08:06:52.893] | : . ' queued futures: [n=1] FALSE
[08:06:52.893] | : . ' until=1
[08:06:52.893] | : . ' relaying element #1
[08:06:52.893] | : . ' value() for SequentialFuture (‘future_mapply-1’) ...
[08:06:52.893] | : . ' , signalConditions() ...
[08:06:52.893] | : . ' , ; include = ‘immediateCondition’
[08:06:52.894] | : . ' , ; exclude = 
[08:06:52.894] | : . ' , ; resignal = FALSE
[08:06:52.894] | : . ' , ; Number of conditions: 6
[08:06:52.894] | : . ' , ;  int 6
[08:06:52.894] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.894] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.894] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.895] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.895] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.895] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.895] | : . ' , ; Drop signaled conditions: 0
[08:06:52.895] | : . ' , signalConditions() ... done
[08:06:52.895] | : . ' , relay stdout ...
[08:06:52.895] | : . ' , relay stdout ... done
[08:06:52.895] | : . ' , check for misuse ...
[08:06:52.895] | : . ' , check for misuse ... done
[08:06:52.896] | : . ' value() for SequentialFuture (‘future_mapply-1’) ... done
[08:06:52.896] | : . ' signalConditions() ...
[08:06:52.896] | : . ' , include = ‘immediateCondition’
[08:06:52.896] | : . ' , exclude = 
[08:06:52.896] | : . ' , resignal = FALSE
[08:06:52.896] | : . ' , Number of conditions: 6
[08:06:52.896] | : . ' ,  int 6
[08:06:52.896] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.897] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.897] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.897] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.897] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.897] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.897] | : . ' , Drop signaled conditions: 0
[08:06:52.897] | : . ' signalConditions() ... done
[08:06:52.897] | : . ' signalConditions() ...
[08:06:52.897] | : . ' , include = ‘condition’
[08:06:52.898] | : . ' , exclude = ‘error’, ‘immediateCondition’
[08:06:52.898] | : . ' , resignal = TRUE
[08:06:52.898] | : . ' , Number of conditions: 6
[08:06:52.898] | : . ' ,  int 6
[08:06:52.898] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.898] | : . ' , Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:52.351] | : . ' , ; ` attachPackages() ...
[08:06:52.898] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.899] | : . ' , Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:52.351] | : . ' , ; ` | packages: [n=1] ‘future’
[08:06:52.899] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.899] | : . ' , Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:52.351] | : . ' , ; ` attachPackages() ... done
[08:06:52.899] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.899] | : . ' , Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:52.352] | : . ' , ; ` attachPackages() ...
[08:06:52.899] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.899] | : . ' , Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:52.352] | : . ' , ; ` | packages: [n=0] 
[08:06:52.899] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:52.900] | : . ' , Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:52.352] | : . ' , ; ` attachPackages() ... done
[08:06:52.900] | : . ' , Drop signaled conditions: 6
[08:06:52.900] | : . ' signalConditions() ... done
[08:06:52.900] | : . ' relayed: [n=1] TRUE
[08:06:52.900] | : . ' queued futures: [n=1] TRUE
[08:06:52.900] | : . signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:06:52.900] | : . value(<SequentialFuture>, ...) ...
[08:06:52.900] | : . value(<SequentialFuture>, ...) ... done
[08:06:52.900] | : . value() for SequentialFuture (‘future_mapply-1’) ...
[08:06:52.900] | : . ' signalConditions() ...
[08:06:52.901] | : . ' , include = ‘immediateCondition’
[08:06:52.901] | : . ' , exclude = 
[08:06:52.901] | : . ' , resignal = FALSE
[08:06:52.901] | : . ' , Number of conditions: 0
[08:06:52.901] | : . ' ,  int 0
[08:06:52.901] | : . ' signalConditions() ... done
[08:06:52.901] | : . ' check for misuse ...
[08:06:52.902] | : . ' check for misuse ... done
[08:06:52.902] | : . value() for SequentialFuture (‘future_mapply-1’) ... done
[08:06:52.902] | : . value: <list>
[08:06:52.902] | : . signalConditionsASAP(SequentialFuture, pos=1) ...
[08:06:52.902] | : . ' nx: 1
[08:06:52.902] | : . ' relay: TRUE
[08:06:52.902] | : . ' stdout: TRUE
[08:06:52.902] | : . ' signal: TRUE
[08:06:52.902] | : . ' resignal: FALSE
[08:06:52.902] | : . ' force: TRUE
[08:06:52.902] | : . ' relayed: [n=1] TRUE
[08:06:52.903] | : . ' queued futures: [n=1] TRUE
[08:06:52.903] | : . ' until=1
[08:06:52.903] | : . ' relayed: [n=1] TRUE
[08:06:52.903] | : . ' queued futures: [n=1] TRUE
[08:06:52.903] | : . signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:06:52.903] | : . resolve() for SequentialFuture ...
[08:06:52.903] | : . resolve() for SequentialFuture ... done
[08:06:52.903] | : . length: 0 (resolved future 1)
[08:06:52.903] | : value() for list ... done
[08:06:52.903] | : Relaying remaining futures ...
[08:06:52.904] | : . signalConditionsASAP(NULL, pos=0) ...
[08:06:52.904] | : . ' nx: 1
[08:06:52.904] | : . ' relay: TRUE
[08:06:52.904] | : . ' stdout: TRUE
[08:06:52.904] | : . ' signal: TRUE
[08:06:52.904] | : . ' resignal: FALSE
[08:06:52.904] | : . ' force: TRUE
[08:06:52.904] | : . ' relayed: [n=1] TRUE
[08:06:52.904] | : . ' queued futures: [n=1] TRUE
 - flush all
[08:06:52.905] | : . ' relayed: [n=1] TRUE
[08:06:52.905] | : . ' queued futures: [n=1] TRUE
[08:06:52.905] | : . signalConditionsASAP(NULL, pos=0) ... done
[08:06:52.905] | : Relaying remaining futures ... done
[08:06:52.905] | future_mapply() -> future_xapply() ... done
[08:06:52.905] |  - Number of value chunks collected: 1
[08:06:52.905] | Resolving 1 futures (chunks) ... DONE
[08:06:52.905] | Reducing values from 1 chunks ...
[08:06:52.905] |  - Number of values collected after concatenation: 2
[08:06:52.905] |  - Number of values expected: 2
[08:06:52.905] | Reducing values from 1 chunks ... DONE
[08:06:52.906] future_mapply() ... done

* future_mapply(x, ..., future.stdout = NA) ... DONE
* plan('sequential') ... DONE
  - Testing with 1 cores ... DONE
  - Testing with 2 cores ...
* plan('multicore') ...
[08:06:52.906] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:52.907] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:06:52.908] | : all.equal() for FutureStrategyList ...
[08:06:52.908] | : . New stack:
[08:06:52.908] | : . List of 1
[08:06:52.908] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:52.908] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:52.908] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:52.908] | : .   ..- attr(*, "init")= logi TRUE
[08:06:52.908] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:52.908] | : .     ...)  
[08:06:52.908] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:52.908] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:52.908] | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:52.908] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:52.910] | : . Old stack:
[08:06:52.911] | : . List of 1
[08:06:52.911] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:52.911] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:52.911] | : .   ..- attr(*, "init")= chr "done"
[08:06:52.911] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:52.911] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.911] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.911] | : .   ..- attr(*, "call")= language plan(sequential)
[08:06:52.911] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:52.911] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:52.911] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.911] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:52.914] | : . Not identical
[08:06:52.914] | : . all.equal() for future ...
[08:06:52.914] | : . ' List of 2
[08:06:52.914] | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:52.914] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:52.914] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:52.914] | : . '   ..- attr(*, "init")= logi TRUE
[08:06:52.914] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:52.914] | : . '     ...)  
[08:06:52.914] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:52.914] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:52.914] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:52.914] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:52.914] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:52.914] | : . '   ..- attr(*, "init")= chr "done"
[08:06:52.914] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:52.914] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.914] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.914] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:06:52.914] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee058c080> 
[08:06:52.914] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:52.914] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.919] | : . ' Formals differ
[08:06:52.919] | : . all.equal() for future ... done
[08:06:52.919] | : . Future strategies differ at level 1
[08:06:52.919] | : all.equal() for FutureStrategyList ... done
[08:06:52.920] | : plan(): Setting new future backend stack:
[08:06:52.920] | : List of future strategies:
[08:06:52.920] | : 1. multicore:
[08:06:52.920] | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:06:52.920] | :    - tweaked: FALSE
[08:06:52.920] | :    - call: plan(strategy)
[08:06:52.920] | : List of 1
[08:06:52.920] | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:52.920] | :     earlySignal = FALSE, envir = parent.frame())  
[08:06:52.920] | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:52.920] | :   ..- attr(*, "init")= logi TRUE
[08:06:52.920] | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:52.920] | :     ...)  
[08:06:52.920] | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:52.920] | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:52.920] | :   ..- attr(*, "call")= language plan(strategy)
[08:06:52.920] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:52.923] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:06:52.923] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:52.923] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:06:52.923] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:52.923] | : . Legacy shutdown of cluster workers ...
[08:06:52.923] | : . ' Stopping existing cluster ...
[08:06:52.924] | : . ' , No pre-existing cluster. Skipping
[08:06:52.924] | : . ' Stopping existing cluster ... done
[08:06:52.924] | : . Legacy shutdown of cluster workers ... done
[08:06:52.924] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:06:52.924] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:06:52.924] | : . function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:52.924] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:52.924] | : .  - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:52.924] | : .  - attr(*, "init")= logi TRUE
[08:06:52.924] | : .  - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:52.924] | : .     ...)  
[08:06:52.924] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:52.924] | : .  - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:52.924] | : .  - attr(*, "call")= language plan(strategy)
[08:06:52.928] | : . init: TRUE
[08:06:52.928] | : . makeFutureBackend(<multicore>) ...
[08:06:52.928] | : . ' Backend function: <‘NULL’>
[08:06:52.928] | : . ' Evaluator tweak arguments: [n=0]
[08:06:52.928] | : . '  list()
[08:06:52.929] | : . ' Evaluator formal arguments: [n=3]
[08:06:52.929] | : . '  list()
[08:06:52.929] | : . ' Backend factory arguments: [n=3]
[08:06:52.929] | : . ' Dotted pair list of 3
[08:06:52.929] | : . '  $ workers    : language availableCores(constraints = "multicore")
[08:06:52.929] | : . '  $ gc         : logi FALSE
[08:06:52.929] | : . '  $ earlySignal: logi FALSE
[08:06:52.932] | : . ' Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:06:52.932] | : . makeFutureBackend(<multicore>) ... done
[08:06:52.932] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:06:52.932] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:52.933] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:52.933] | : plan(): nbrOfWorkers() = 2
[08:06:52.933] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:06:52.933] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
* future_lapply(x, ..., future.stdout = FALSE) ...
[08:06:52.933] future_lapply() ...
[08:06:52.934] | Globals in FUN(): [n=4] ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[08:06:52.934] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:06:52.934] | future_lapply() -> future_xapply() ...
[08:06:52.934] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:52.935] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:52.936] | : Number of chunks: 2
[08:06:52.936] | : getGlobalsAndPackagesXApply() ...
[08:06:52.936] | : . future.globals: TRUE
[08:06:52.936] | : . getGlobalsAndPackages() ...
[08:06:52.936] | : . ' Searching for globals ...
[08:06:52.945] | : . ' , globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[08:06:52.945] | : . ' Searching for globals ... done
[08:06:52.945] | : . ' Resolving globals: FALSE
[08:06:52.945] | : . ' Search for packages associated with the globals ...
[08:06:52.946] | : . ' , Packages associated with globals: [1] ‘base’
[08:06:52.946] | : . ' , Packages: [1] ‘base’
[08:06:52.946] | : . ' Search for packages associated with the globals ... done
[08:06:52.946] | : . ' The total size of the 1 globals is 841 bytes (841 bytes)
[08:06:52.947] | : . ' The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[08:06:52.947] | : . ' Packages after dropping 'base': [0] 
[08:06:52.947] | : . ' globals: [1] ‘FUN’
[08:06:52.947] | : . ' packages: [0] 
[08:06:52.947] | : . getGlobalsAndPackages() ... done
[08:06:52.947] | : . globals found/used: [n=1] ‘FUN’
[08:06:52.947] | : . needed namespaces: [n=0] 
[08:06:52.947] | : . use_args: TRUE
[08:06:52.948] | : . Getting '...' globals ...
[08:06:52.948] | : . ' resolve() for FutureGlobals ...
[08:06:52.948] | : . ' , recursive: 0
[08:06:52.948] | : . ' , Number of elements: 1
[08:06:52.948] | : . ' , elements: ‘...’
[08:06:52.948] | : . ' , 'obj' is DotDotDotList
[08:06:52.948] | : . ' , resolve(obj, ...) ...
[08:06:52.949] | : . ' , ; resolve() for DotDotDotList ...
[08:06:52.949] | : . ' , ; ` recursive: -1
[08:06:52.949] | : . ' , ; resolve() for DotDotDotList ... done
[08:06:52.949] | : . ' , resolve(obj, ...) ... done
[08:06:52.949] | : . ' , resolved() for DotDotDotList ...
[08:06:52.949] | : . ' , ; Number of elements: 0
[08:06:52.949] | : . ' , ; Number of futures: 0
[08:06:52.949] | : . ' , resolved() for DotDotDotList ... done
[08:06:52.949] | : . ' , length: 0 (resolved future 1)
[08:06:52.950] | : . ' resolve() for FutureGlobals ... done
[08:06:52.950] | : . ' '...' content: [n=0] 
[08:06:52.950] | : . ' List of 1
[08:06:52.950] | : . '  $ ...: list()
[08:06:52.950] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:52.950] | : . '  - attr(*, "where")=List of 1
[08:06:52.950] | : . '   ..$ ...:<environment: 0x55eedefe3328> 
[08:06:52.950] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:52.950] | : . '  - attr(*, "resolved")= logi TRUE
[08:06:52.950] | : . '  - attr(*, "total_size")= num NA
[08:06:52.952] | : . Getting '...' globals ... done
[08:06:52.952] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:06:52.953] | : . List of 2
[08:06:52.953] | : .  $ ...future.FUN:function (x)  
[08:06:52.953] | : .  $ ...          : list()
[08:06:52.953] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:52.953] | : .  - attr(*, "where")=List of 2
[08:06:52.953] | : .   ..$ ...future.FUN:<environment: 0x55eedefe3328> 
[08:06:52.953] | : .   ..$ ...          :<environment: 0x55eedefe3328> 
[08:06:52.953] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:52.953] | : .  - attr(*, "resolved")= logi FALSE
[08:06:52.953] | : .  - attr(*, "total_size")= num 6008
[08:06:52.955] | : . Packages to be attached in all futures: [n=0] 
[08:06:52.955] | : getGlobalsAndPackagesXApply() ... done
[08:06:52.956] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:52.956] | : List of 5
[08:06:52.956] | :  $ ...future.FUN            :function (x)  
[08:06:52.956] | :  $ ...                      : list()
[08:06:52.956] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:52.956] | :  $ ...future.elements_ii    : NULL
[08:06:52.956] | :  $ ...future.seeds_ii       : NULL
[08:06:52.956] | :  $ ...future.globals.maxSize: NULL
[08:06:52.956] | :  - attr(*, "where")=List of 5
[08:06:52.956] | :   ..$ ...future.FUN            :<environment: 0x55eedefe3328> 
[08:06:52.956] | :   ..$ ...                      :<environment: 0x55eedefe3328> 
[08:06:52.956] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:52.956] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:52.956] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:52.956] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:52.956] | :  - attr(*, "resolved")= logi FALSE
[08:06:52.956] | :  - attr(*, "total_size")= num 6008
[08:06:52.960] | : Number of futures (= number of chunks): 2
[08:06:52.960] | : Launching 2 futures (chunks) ...
[08:06:52.960] | : Chunk #1 of 2 ...
[08:06:52.960] | :  - Finding globals in 'X' for chunk #1 ...
[08:06:52.960] | : getGlobalsAndPackages() ...
[08:06:52.960] | : . Searching for globals ...
[08:06:52.961] | : . ' globals found: [0] 
[08:06:52.961] | : . Searching for globals ... done
[08:06:52.961] | : . globals: [0] <none>
[08:06:52.961] | : . packages: [0] <none>
[08:06:52.961] | : getGlobalsAndPackages() ... done
[08:06:52.961] | :    + additional globals found: [n=0] 
[08:06:52.963] | :    + additional namespaces needed: [n=0] 
[08:06:52.963] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:06:52.963] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:06:52.963] | :  - seeds: <none>
[08:06:52.963] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:52.963] | : future(..., label = ‘future_lapply-1’) ...
[08:06:52.963] | : . lazy: FALSE
[08:06:52.963] | : . stdout: FALSE
[08:06:52.964] | : . conditions: [n=1] ‘condition’
[08:06:52.964] | : . gc: FALSE
[08:06:52.964] | : . earlySignal: FALSE
[08:06:52.964] | : . getGlobalsAndPackages() ...
[08:06:52.964] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:52.964] | : . ' Resolving globals: FALSE
[08:06:52.964] | : . ' Tweak future expression to call with '...' arguments ...
[08:06:52.964] | : . ' , {
[08:06:52.964] | : . ' ,     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:52.964] | : . ' ,     "# expression in do.call(), because function called uses '...'  "
[08:06:52.964] | : . ' ,     "# as a global variable                                         "
[08:06:52.964] | : . ' ,     do.call(function(...) {
[08:06:52.964] | : . ' ,         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:52.964] | : . ' ,         "# without having an '...' argument. This means '...' is treated"
[08:06:52.964] | : . ' ,         "# as a global variable. This may happen when FUN() is an       "
[08:06:52.964] | : . ' ,         "# anonymous function.                                          "
[08:06:52.964] | : . ' ,         "#                                                              "
[08:06:52.964] | : . ' ,         "# If an anonymous function, we will make sure to restore the   "
[08:06:52.964] | : . ' ,         "# function environment of FUN() to the calling environment.    "
[08:06:52.964] | : . ' ,         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:52.964] | : . ' ,         "# global environment, which is where globals are written.      "
[08:06:52.964] | : . ' ,         penv <- env <- environment(...future.FUN)
[08:06:52.964] | : . ' ,         repeat {
[08:06:52.964] | : . ' ,             if (identical(env, globalenv()) || identical(env, 
[08:06:52.964] | : . ' ,                 emptyenv())) 
[08:06:52.964] | : . ' ,                 break
[08:06:52.964] | : . ' ,             penv <- env
[08:06:52.964] | : . ' ,             env <- parent.env(env)
[08:06:52.964] | : . ' ,         }
[08:06:52.964] | : . ' ,         if (identical(penv, globalenv())) {
[08:06:52.964] | : . ' ,             environment(...future.FUN) <- environment()
[08:06:52.964] | : . ' ,         }
[08:06:52.964] | : . ' ,         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:52.964] | : . ' ,             !isNamespace(penv)) {
[08:06:52.964] | : . ' ,             parent.env(penv) <- environment()
[08:06:52.964] | : . ' ,         }
[08:06:52.964] | : . ' ,         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:52.964] | : . ' ,         {
[08:06:52.964] | : . ' ,             "# future.apply:::future_xapply(): preserve future option"
[08:06:52.964] | : . ' ,             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:52.964] | : . ' ,             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:52.964] | : . ' ,                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:52.964] | : . ' ,                 on.exit(options(oopts), add = TRUE)
[08:06:52.964] | : . ' ,             }
[08:06:52.964] | : . ' ,             {
[08:06:52.964] | : . ' ,                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:52.964] | : . ' ,                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:52.964] | : . ' ,                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:52.964] | : . ' ,                   {
[08:06:52.964] | : . ' ,                     ...future.FUN(...future.X_jj, ...)
[08:06:52.964] | : . ' ,                   }
[08:06:52.964] | : . ' ,                 })
[08:06:52.964] | : . ' ,             }
[08:06:52.964] | : . ' ,         }
[08:06:52.964] | : . ' ,     }, args = future.call.arguments)
[08:06:52.964] | : . ' , }
[08:06:52.965] | : . ' Tweak future expression to call with '...' arguments ... done
[08:06:52.965] | : . ' Search for packages associated with the globals ...
[08:06:52.965] | : . ' , Packages associated with globals: [0] 
[08:06:52.965] | : . ' , Packages: [0] 
[08:06:52.966] | : . ' Search for packages associated with the globals ... done
[08:06:52.966] | : . ' Packages after dropping 'base': [0] 
[08:06:52.966] | : . ' globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:52.966] | : . ' packages: [0] 
[08:06:52.966] | : . getGlobalsAndPackages() ... done
[08:06:52.966] | : . run() for ‘Future’ (‘future_lapply-1’) ...
[08:06:52.966] | : . ' state: ‘created’
[08:06:52.967] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:52.967] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:52.967] | : . ' Using MulticoreFutureBackend ...
[08:06:52.967] | : . ' , Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:06:52.967] | : . ' , Launching futures ...
[08:06:52.967] | : . ' , ; launchFuture() for MulticoreFutureBackend ...
[08:06:52.967] | : . ' , ; ` getFutureData() ...
[08:06:52.968] | : . ' , ; ` | getFutureCore() ...
[08:06:52.968] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:06:52.968] | : . ' , ; ` | getFutureCore() ... done
[08:06:52.968] | : . ' , ; ` | getFutureCapture() ...
[08:06:52.968] | : . ' , ; ` | getFutureCapture() ... done
[08:06:52.968] | : . ' , ; ` | getFutureContext() ...
[08:06:52.968] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:52.968] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:06:52.968] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:52.969] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:06:52.969] | : . ' , ; ` | getFutureContext() ... done
[08:06:52.969] | : . ' , ; ` getFutureData() ... done
[08:06:52.969] | : . ' , ; ` requestCore(..., workers = 2) ...
[08:06:52.970] | : . ' , ; ` requestCore(..., workers = 2) ... done
[08:06:52.972] | : . ' , ; ` MulticoreFuture started
[08:06:52.973] | : . ' , ; launchFuture() for MulticoreFutureBackend ... done
[08:06:52.973] | : . ' , Launching futures ... done
[08:06:52.974] | : . ' , Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:52.974] | : . ' Using MulticoreFutureBackend ... done
[08:06:52.974] | : . run() for ‘Future’ (‘future_lapply-1’) ... done
[08:06:52.975] | : future(..., label = ‘future_lapply-1’) ... done
[08:06:52.975] | : Created future:
[08:06:52.976] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:52.976] | : . ' , ; ` | Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:06:52.976] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:52.977] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:52.977] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:52.977] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:06:52.978] | : . ' , ; ` | : . New stack:
[08:06:52.978] | : . ' , ; ` | : . List of 1
[08:06:52.978] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:52.978] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:52.978] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:06:52.978] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:52.978] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.978] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.978] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:52.978] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:52.983] | : . ' , ; ` | : . Old stack:
[08:06:52.983] | : . ' , ; ` | : . List of 1
[08:06:52.983] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:52.983] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:52.983] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:52.983] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:52.983] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:52.983] | : . ' , ; ` | : .     ...)  
[08:06:52.983] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:52.983] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:52.983] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:52.983] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:52.983] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:52.983] | : . ' , ; ` | : .     ...)  
[08:06:52.983] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:52.983] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:52.988] | : . ' , ; ` | : . Not identical
[08:06:52.989] | : . ' , ; ` | : . all.equal() for future ...
[08:06:52.989] | : readImmediateCondition() ...
[08:06:52.990] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:52.990] | : . Number of RDS files: 0
[08:06:52.990] | : . Returned conditions set:
[08:06:52.990] | : .  list()
[08:06:52.991] | : readImmediateCondition() ... done
[08:06:52.975] | : MulticoreFuture:
[08:06:52.975] | : Label: ‘future_lapply-1’
[08:06:52.975] | : Expression:
[08:06:52.975] | : {
[08:06:52.975] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:52.975] | :     "# expression in do.call(), because function called uses '...'  "
[08:06:52.975] | :     "# as a global variable                                         "
[08:06:52.975] | :     do.call(function(...) {
[08:06:52.975] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:52.975] | :         "# without having an '...' argument. This means '...' is treated"
[08:06:52.975] | :         "# as a global variable. This may happen when FUN() is an       "
[08:06:52.975] | :         "# anonymous function.                                          "
[08:06:52.975] | :         "#                                                              "
[08:06:52.975] | :         "# If an anonymous function, we will make sure to restore the   "
[08:06:52.975] | :         "# function environment of FUN() to the calling environment.    "
[08:06:52.975] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:52.975] | :         "# global environment, which is where globals are written.      "
[08:06:52.975] | :         penv <- env <- environment(...future.FUN)
[08:06:52.975] | :         repeat {
[08:06:52.975] | :             if (identical(env, globalenv()) || identical(env, 
[08:06:52.975] | :                 emptyenv())) 
[08:06:52.975] | :                 break
[08:06:52.975] | :             penv <- env
[08:06:52.975] | :             env <- parent.env(env)
[08:06:52.975] | :         }
[08:06:52.975] | :         if (identical(penv, globalenv())) {
[08:06:52.975] | :             environment(...future.FUN) <- environment()
[08:06:52.975] | :         }
[08:06:52.975] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:52.975] | :             !isNamespace(penv)) {
[08:06:52.975] | :             parent.env(penv) <- environment()
[08:06:52.975] | :         }
[08:06:52.975] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:52.975] | :         {
[08:06:52.975] | :             "# future.apply:::future_xapply(): preserve future option"
[08:06:52.975] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:52.975] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:52.975] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:52.975] | :                 on.exit(options(oopts), add = TRUE)
[08:06:52.975] | :             }
[08:06:52.975] | :             {
[08:06:52.975] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:52.975] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:52.975] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:52.975] | :                   {
[08:06:52.975] | :                     ...future.FUN(...future.X_jj, ...)
[08:06:52.975] | :                   }
[08:06:52.975] | :                 })
[08:06:52.975] | :             }
[08:06:52.975] | :         }
[08:06:52.975] | :     }, args = future.call.arguments)
[08:06:52.975] | : }
[08:06:52.975] | : Globals: 5 objects totaling 6.12 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:52.975] | : Packages: <none>
[08:06:52.975] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:52.975] | : Capture standard output: FALSE
[08:06:52.975] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:52.975] | : Immediate condition classes: ‘immediateCondition’
[08:06:52.975] | : Lazy evaluation: FALSE
[08:06:52.975] | : Local evaluation: TRUE
[08:06:52.975] | : Asynchronous evaluation: TRUE
[08:06:52.975] | : Early signaling: FALSE
[08:06:52.975] | : Environment: R_GlobalEnv
[08:06:52.975] | : State: ‘running’
[08:06:52.975] | : Resolved: FALSE
[08:06:52.975] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-7
[08:06:52.975] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:52.975] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:52.975] | : Value: <not collected>
[08:06:52.975] | : Conditions captured: <none>
[08:06:52.992] | : Chunk #1 of 2 ... DONE
[08:06:52.992] | : Chunk #2 of 2 ...
[08:06:52.992] | :  - Finding globals in 'X' for chunk #2 ...
[08:06:52.992] | : getGlobalsAndPackages() ...
[08:06:52.992] | : . Searching for globals ...
[08:06:52.993] | : . ' globals found: [0] 
[08:06:52.993] | : . Searching for globals ... done
[08:06:52.994] | : . globals: [0] <none>
[08:06:52.994] | : . packages: [0] <none>
[08:06:52.994] | : getGlobalsAndPackages() ... done
[08:06:52.994] | :    + additional globals found: [n=0] 
[08:06:52.994] | :    + additional namespaces needed: [n=0] 
[08:06:52.994] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:06:52.994] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:06:52.995] | :  - seeds: <none>
[08:06:52.995] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:52.995] | : future(..., label = ‘future_lapply-2’) ...
[08:06:52.995] | : . lazy: FALSE
[08:06:52.995] | : . stdout: FALSE
[08:06:52.995] | : . conditions: [n=1] ‘condition’
[08:06:52.996] | : . gc: FALSE
[08:06:52.996] | : . earlySignal: FALSE
[08:06:52.996] | : . getGlobalsAndPackages() ...
[08:06:52.996] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:52.996] | : . ' Resolving globals: FALSE
[08:06:52.996] | : . ' Tweak future expression to call with '...' arguments ...
[08:06:52.997] | : . ' , {
[08:06:52.997] | : . ' ,     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:52.997] | : . ' ,     "# expression in do.call(), because function called uses '...'  "
[08:06:52.997] | : . ' ,     "# as a global variable                                         "
[08:06:52.997] | : . ' ,     do.call(function(...) {
[08:06:52.997] | : . ' ,         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:52.997] | : . ' ,         "# without having an '...' argument. This means '...' is treated"
[08:06:52.997] | : . ' ,         "# as a global variable. This may happen when FUN() is an       "
[08:06:52.997] | : . ' ,         "# anonymous function.                                          "
[08:06:52.997] | : . ' ,         "#                                                              "
[08:06:52.997] | : . ' ,         "# If an anonymous function, we will make sure to restore the   "
[08:06:52.997] | : . ' ,         "# function environment of FUN() to the calling environment.    "
[08:06:52.997] | : . ' ,         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:52.997] | : . ' ,         "# global environment, which is where globals are written.      "
[08:06:52.997] | : . ' ,         penv <- env <- environment(...future.FUN)
[08:06:52.997] | : . ' ,         repeat {
[08:06:52.997] | : . ' ,             if (identical(env, globalenv()) || identical(env, 
[08:06:52.997] | : . ' ,                 emptyenv())) 
[08:06:52.997] | : . ' ,                 break
[08:06:52.997] | : . ' ,             penv <- env
[08:06:52.997] | : . ' ,             env <- parent.env(env)
[08:06:52.997] | : . ' ,         }
[08:06:52.997] | : . ' ,         if (identical(penv, globalenv())) {
[08:06:52.997] | : . ' ,             environment(...future.FUN) <- environment()
[08:06:52.997] | : . ' ,         }
[08:06:52.997] | : . ' ,         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:52.997] | : . ' ,             !isNamespace(penv)) {
[08:06:52.997] | : . ' ,             parent.env(penv) <- environment()
[08:06:52.997] | : . ' ,         }
[08:06:52.997] | : . ' ,         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:52.997] | : . ' ,         {
[08:06:52.997] | : . ' ,             "# future.apply:::future_xapply(): preserve future option"
[08:06:52.997] | : . ' ,             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:52.997] | : . ' ,             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:52.997] | : . ' ,                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:52.997] | : . ' ,                 on.exit(options(oopts), add = TRUE)
[08:06:52.997] | : . ' ,             }
[08:06:52.997] | : . ' ,             {
[08:06:52.997] | : . ' ,                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:52.997] | : . ' ,                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:52.997] | : . ' ,                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:52.997] | : . ' ,                   {
[08:06:52.997] | : . ' ,                     ...future.FUN(...future.X_jj, ...)
[08:06:52.997] | : . ' ,                   }
[08:06:52.997] | : . ' ,                 })
[08:06:52.997] | : . ' ,             }
[08:06:52.997] | : . ' ,         }
[08:06:52.997] | : . ' ,     }, args = future.call.arguments)
[08:06:52.997] | : . ' , }
[08:06:52.997] | : . ' Tweak future expression to call with '...' arguments ... done
[08:06:52.997] | : . ' Search for packages associated with the globals ...
[08:06:52.998] | : . ' , Packages associated with globals: [0] 
[08:06:52.998] | : . ' , Packages: [0] 
[08:06:52.998] | : . ' Search for packages associated with the globals ... done
[08:06:52.999] | : . ' Packages after dropping 'base': [0] 
[08:06:52.999] | : . ' globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:52.999] | : . ' packages: [0] 
[08:06:52.999] | : . getGlobalsAndPackages() ... done
[08:06:52.999] | : . run() for ‘Future’ (‘future_lapply-2’) ...
[08:06:53.000] | : . ' state: ‘created’
[08:06:53.000] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:53.000] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:53.000] | : . ' Using MulticoreFutureBackend ...
[08:06:53.000] | : . ' , Number of futures since start: 1 (1 created, 1 launched, 0 finished)
[08:06:53.001] | : . ' , Launching futures ...
[08:06:53.001] | : . ' , ; launchFuture() for MulticoreFutureBackend ...
[08:06:53.001] | : . ' , ; ` getFutureData() ...
[08:06:52.989] | : . ' , ; ` | : . ' List of 2
[08:06:52.989] | : . ' , ; ` | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:52.989] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:52.989] | : . ' , ; ` | : . '   ..- attr(*, "init")= logi TRUE
[08:06:52.989] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:52.989] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.989] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:52.989] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:52.989] | : . ' , ; ` | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:52.989] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:52.989] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:52.989] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:52.989] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:52.989] | : . ' , ; ` | : . '     ...)  
[08:06:52.989] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:52.989] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:52.989] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:52.989] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:52.989] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:52.989] | : . ' , ; ` | : . '     ...)  
[08:06:52.989] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.001] | : . ' , ; ` | getFutureCore() ...
[08:06:53.001] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:06:53.001] | : . ' , ; ` | getFutureCore() ... done
[08:06:53.002] | : . ' , ; ` | getFutureCapture() ...
[08:06:53.002] | : . ' , ; ` | getFutureCapture() ... done
[08:06:53.002] | : . ' , ; ` | : . ' Formals differ
[08:06:53.002] | : . ' , ; ` | getFutureContext() ...
[08:06:53.002] | : . ' , ; ` | : . all.equal() for future ... done
[08:06:53.002] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:53.002] | : . ' , ; ` | : . Future strategies differ at level 1
[08:06:53.002] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:06:53.002] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:06:53.002] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:53.002] | : . ' , ; ` | : plan(): Setting new future backend stack:
[08:06:53.003] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:06:53.003] | : . ' , ; ` | getFutureContext() ... done
[08:06:53.003] | : . ' , ; ` getFutureData() ... done
[08:06:53.003] | : . ' , ; ` requestCore(..., workers = 2) ...
[08:06:53.003] | : . ' , ; ` | : List of future strategies:
[08:06:53.003] | : . ' , ; ` | : 1. sequential:
[08:06:53.003] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:53.003] | : . ' , ; ` | :    - tweaked: FALSE
[08:06:53.003] | : . ' , ; ` | :    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.004] | : . ' , ; ` requestCore(..., workers = 2) ... done
[08:06:53.003] | : . ' , ; ` | : List of 1
[08:06:53.003] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:53.003] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:53.003] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:06:53.003] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.003] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.003] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.003] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.003] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:53.007] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:53.007] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:53.006] | : . ' , ; ` MulticoreFuture started
[08:06:53.007] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:53.007] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:06:53.007] | : . ' , ; launchFuture() for MulticoreFutureBackend ... done
[08:06:53.007] | : . ' , Launching futures ... done
[08:06:53.008] | : . ' , Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:53.008] | : . ' Using MulticoreFutureBackend ... done
[08:06:53.009] | : . run() for ‘Future’ (‘future_lapply-2’) ... done
[08:06:53.007] | : . ' , ; ` | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:53.007] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:53.007] | : . ' , ; ` | : . '  - attr(*, "init")= logi TRUE
[08:06:53.007] | : . ' , ; ` | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.007] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.007] | : . ' , ; ` | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.007] | : . ' , ; ` | : . '  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.009] | : . ' , ; ` | : . ' init: TRUE
[08:06:53.009] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ...
[08:06:53.010] | : . ' , ; ` | : . ' , Backend function: <‘NULL’>
[08:06:53.010] | : . ' , ; ` | : . ' , Evaluator tweak arguments: [n=0]
[08:06:53.010] | : . ' , ; ` | : . ' ,  list()
[08:06:53.010] | : . ' , ; ` | : . ' , Evaluator formal arguments: [n=2]
[08:06:53.010] | : . ' , ; ` | : . ' ,  list()
[08:06:53.010] | : . ' , ; ` | : . ' , Backend factory arguments: [n=2]
[08:06:53.011] | : . ' , ; ` | : . ' , Dotted pair list of 2
[08:06:53.011] | : . ' , ; ` | : . ' ,  $ gc         : logi FALSE
[08:06:53.011] | : . ' , ; ` | : . ' ,  $ earlySignal: logi FALSE
[08:06:53.012] | : . ' , ; ` | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:06:53.012] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ... done
[08:06:53.012] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:06:53.012] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:53.012] | : . ' , ; ` | : plan(): nbrOfWorkers() = 1
[08:06:53.012] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:53.012] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:53.013] | : . ' , ; ` assign_globals() ...
[08:06:53.015] | : future(..., label = ‘future_lapply-2’) ... done
[08:06:53.016] | : Created future:
[08:06:53.018] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:53.019] | : . ' , ; ` | Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:06:53.020] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:53.021] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:53.021] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:53.022] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:06:53.022] | : . ' , ; ` | : . New stack:
[08:06:53.013] | : . ' , ; ` List of 5
[08:06:53.013] | : . ' , ; `  $ ...future.FUN            :function (x)  
[08:06:53.013] | : . ' , ; `  $ future.call.arguments    : list()
[08:06:53.013] | : . ' , ; `   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:53.013] | : . ' , ; `  $ ...future.elements_ii    :List of 1
[08:06:53.013] | : . ' , ; `   ..$ : int 1
[08:06:53.013] | : . ' , ; `  $ ...future.seeds_ii       : NULL
[08:06:53.013] | : . ' , ; `  $ ...future.globals.maxSize: NULL
[08:06:53.013] | : . ' , ; `  - attr(*, "where")=List of 5
[08:06:53.013] | : . ' , ; `   ..$ ...future.FUN            :<environment: 0x55eedefe3328> 
[08:06:53.013] | : . ' , ; `   ..$ future.call.arguments    :<environment: 0x55eedefe3328> 
[08:06:53.013] | : . ' , ; `   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:53.013] | : . ' , ; `   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:53.013] | : . ' , ; `   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:53.013] | : . ' , ; `  - attr(*, "resolved")= logi FALSE
[08:06:53.013] | : . ' , ; `  - attr(*, "total_size")= num 6008
[08:06:53.013] | : . ' , ; `  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:53.013] | : . ' , ; `  - attr(*, "already-done")= logi TRUE
[08:06:53.023] | : . ' , ; ` - copied ‘...future.FUN’ to environment
[08:06:53.023] | : . ' , ; ` - copied ‘future.call.arguments’ to environment
[08:06:53.023] | : . ' , ; ` - copied ‘...future.elements_ii’ to environment
[08:06:53.023] | : . ' , ; ` - copied ‘...future.seeds_ii’ to environment
[08:06:53.024] | : . ' , ; ` - copied ‘...future.globals.maxSize’ to environment
[08:06:53.024] | : . ' , ; ` assign_globals() ... done
[08:06:53.022] | : . ' , ; ` | : . List of 1
[08:06:53.022] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:53.022] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:53.022] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:06:53.022] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.022] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.022] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.022] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.022] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:53.027] | : . ' , ; ` | : . Old stack:
[08:06:53.031] | : readImmediateCondition() ...
[08:06:53.031] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.032] | : . Number of RDS files: 0
[08:06:53.032] | : . Returned conditions set:
[08:06:53.027] | : . ' , ; ` | : . List of 1
[08:06:53.027] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(cons[08:06:53.032] | : .  list()
traints = "multicore"), gc = FALSE, 
[08:06:53.027] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:53.027] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:53.027] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:53.027] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.027] | : . ' , ; ` | : .     ...)  
[08:06:53.027] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.027] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.027] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:53.027] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:53.027] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.027] | : . ' , ; ` | : .     ...)  
[08:06:53.027] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.027] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:53.033] | : . ' , ; ` | : . Not identical
[08:06:53.033] | : readImmediateCondition() ... done
[08:06:53.033] | : . ' , ; ` | : . all.equal() for future ...
[08:06:53.017] | : MulticoreFuture:
[08:06:53.017] | : Label: ‘future_lapply-2’
[08:06:53.017] | : Expression:
[08:06:53.017] | : {
[08:06:53.017] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:53.017] | :     "# expression in do.call(), because function called uses '...'  "
[08:06:53.017] | :     "# as a global variable                                         "
[08:06:53.017] | :     do.call(function(...) {
[08:06:53.017] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:53.017] | :         "# without having an '...' argument. This means '...' is treated"
[08:06:53.017] | :         "# as a global variable. This may happen when FUN() is an       "
[08:06:53.017] | :         "# anonymous function.                                          "
[08:06:53.017] | :         "#                                                              "
[08:06:53.017] | :         "# If an anonymous function, we will make sure to restore the   "
[08:06:53.017] | :         "# function environment of FUN() to the calling environment.    "
[08:06:53.017] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:53.017] | :         "# global environment, which is where globals are written.      "
[08:06:53.017] | :         penv <- env <- environment(...future.FUN)
[08:06:53.017] | :         repeat {
[08:06:53.017] | :             if (identical(env, globalenv()) || identical(env, 
[08:06:53.017] | :                 emptyenv())) 
[08:06:53.017] | :                 break
[08:06:53.017] | :             penv <- env
[08:06:53.017] | :             env <- parent.env(env)
[08:06:53.017] | :         }
[08:06:53.017] | :         if (identical(penv, globalenv())) {
[08:06:53.017] | :             environment(...future.FUN) <- environment()
[08:06:53.017] | :         }
[08:06:53.017] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:53.017] | :             !isNamespace(penv)) {
[08:06:53.017] | :             parent.env(penv) <- environment()
[08:06:53.017] | :         }
[08:06:53.017] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:53.017] | :         {
[08:06:53.017] | :             "# future.apply:::future_xapply(): preserve future option"
[08:06:53.017] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:53.017] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:53.017] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:53.017] | :                 on.exit(options(oopts), add = TRUE)
[08:06:53.017] | :             }
[08:06:53.017] | :             {
[08:06:53.017] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:53.017] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:53.017] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:53.017] | :                   {
[08:06:53.017] | :                     ...future.FUN(...future.X_jj, ...)
[08:06:53.017] | :                   }
[08:06:53.017] | :                 })
[08:06:53.017] | :             }
[08:06:53.017] | :         }
[08:06:53.017] | :     }, args = future.call.arguments)
[08:06:53.017] | : }
[08:06:53.017] | : Globals: 5 objects totaling 6.12 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:53.017] | : Packages: <none>
[08:06:53.017] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:53.017] | : Capture standard output: FALSE
[08:06:53.017] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:53.017] | : Immediate condition classes: ‘immediateCondition’
[08:06:53.017] | : Lazy evaluation: FALSE
[08:06:53.017] | : Local evaluation: TRUE
[08:06:53.017] | : Asynchronous evaluation: TRUE
[08:06:53.017] | : Early signaling: FALSE
[08:06:53.017] | : Environment: R_GlobalEnv
[08:06:53.017] | : State: ‘running’
[08:06:53.017] | : Resolved: FALSE
[08:06:53.017] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-8
[08:06:53.017] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:53.017] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:53.017] | : Value: <not collected>
[08:06:53.017] | : Conditions captured: <none>
[08:06:53.034] | : Chunk #2 of 2 ... DONE
[08:06:53.034] | : Launching 2 futures (chunks) ... DONE
[08:06:53.035] | : Resolving 2 futures (chunks) ...
[08:06:53.035] | : value() for list ...
[08:06:53.035] | : . recursive: 0
[08:06:53.035] | : . reduce: FALSE
[08:06:53.036] | : . length: 2

[08:06:53.036] | : . Number of remaining objects: 2
[08:06:53.036] | : . checking value #1:
[08:06:53.036] | : . 'obj' is MulticoreFuture
[08:06:53.034] | : . ' , ; ` | : . ' List of 2
[08:06:53.034] | : . ' , ; ` | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:53.034] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:53.034] | : . ' , ; ` | : . '   ..- attr(*, "init")= logi TRUE
[08:06:53.034] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.034] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.034] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.034] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.034] | : . ' , ; ` | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:53.034] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:53.034] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:53.034] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:53.034] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.034] | : . ' , ; ` | : . '     ...)  
[08:06:53.034] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.034] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.034] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:53.034] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:53.034] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.034] | : . ' , ; ` | : . '     ...)  
[08:06:53.034] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.042] | : . ' , ; ` | : . ' Formals differ
[08:06:53.042] | : . ' , ; ` | : . all.equal() for future ... done
[08:06:53.042] | : . ' , ; ` | : . Future strategies differ at level 1
[08:06:53.042] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:06:53.043] | : . ' , ; ` | : plan(): Setting new future backend stack:
[08:06:53.043] | : . ' , ; ` | : List of future strategies:
[08:06:53.043] | : . ' , ; ` | : 1. sequential:
[08:06:53.043] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:53.043] | : . ' , ; ` | :    - tweaked: FALSE
[08:06:53.043] | : . ' , ; ` | :    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.047] | : . readImmediateCondition() ...
[08:06:53.047] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.047] | : . ' Number of RDS files: 0
[08:06:53.048] | : . ' Returned conditions set:
[08:06:53.048] | : . '  list()
[08:06:53.048] | : . readImmediateCondition() ... done
[08:06:53.049] | : . checking value #2:
[08:06:53.049] | : . 'obj' is MulticoreFuture
[08:06:53.043] | : . ' , ; ` | : List of 1
[08:06:53.043] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:53.043] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:53.043] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:06:53.043] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.043] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.043] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.043] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.043] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:53.051] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:53.051] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:53.052] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:53.052] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:06:53.052] | : . ' , ; ` | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:53.052] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:53.052] | : . ' , ; ` | : . '  - attr(*, "init")= logi TRUE
[08:06:53.052] | : . ' , ; ` | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.052] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.052] | : . ' , ; ` | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.052] | : . ' , ; ` | : . '  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.054] | : . ' , ; ` | : . ' init: TRUE
[08:06:53.054] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ...
[08:06:53.054] | : . ' , ; ` | : . ' , Backend function: <‘NULL’>
[08:06:53.055] | : . ' , ; ` | : . ' , Evaluator tweak arguments: [n=0]
[08:06:53.055] | : . ' , ; ` | : . ' ,  list()
[08:06:53.055] | : . ' , ; ` | : . ' , Evaluator formal arguments: [n=2]
[08:06:53.055] | : . ' , ; ` | : . ' ,  list()
[08:06:53.055] | : . ' , ; ` | : . ' , Backend factory arguments: [n=2]
[08:06:53.055] | : . ' , ; ` | : . ' , Dotted pair list of 2
[08:06:53.055] | : . ' , ; ` | : . ' ,  $ gc         : logi FALSE
[08:06:53.055] | : . ' , ; ` | : . ' ,  $ earlySignal: logi FALSE
[08:06:53.057] | : . ' , ; ` | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:06:53.057] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ... done
[08:06:53.057] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:06:53.057] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:53.057] | : . ' , ; ` | : plan(): nbrOfWorkers() = 1
[08:06:53.057] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:53.057] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:53.058] | : . ' , ; ` assign_globals() ...
[08:06:53.059] | : . readImmediateCondition() ...
[08:06:53.059] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.060] | : . ' Number of RDS files: 0
[08:06:53.060] | : . ' Returned conditions set:
[08:06:53.060] | : . '  list()
[08:06:53.061] | : . readImmediateCondition() ... done
[08:06:53.058] | : . ' , ; ` List of 5
[08:06:53.058] | : . ' , ; `  $ ...future.FUN            :function (x)  
[08:06:53.058] | : . ' , ; `  $ future.call.arguments    : list()
[08:06:53.058] | : . ' , ; `   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:53.058] | : . ' , ; `  $ ...future.elements_ii    :List of 1
[08:06:53.058] | : . ' , ; `   ..$ : int 0
[08:06:53.058] | : . ' , ; `  $ ...future.seeds_ii       : NULL
[08:06:53.058] | : . ' , ; `  $ ...future.globals.maxSize: NULL
[08:06:53.058] | : . ' , ; `  - attr(*, "where")=List of 5
[08:06:53.058] | : . ' , ; `   ..$ ...future.FUN            :<environment: 0x55eedefe3328> 
[08:06:53.058] | : . ' , ; `   ..$ future.call.arguments    :<environment: 0x55eedefe3328> 
[08:06:53.058] | : . ' , ; `   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:53.058] | : . ' , ; `   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:53.058] | : . ' , ; `   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:53.058] | : . ' , ; `  - attr(*, "resolved")= logi FALSE
[08:06:53.058] | : . ' , ; `  - attr(*, "total_size")= num 6008
[08:06:53.058] | : . ' , ; `  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:53.058] | : . ' , ; `  - attr(*, "already-done")= logi TRUE
[08:06:53.063] | : . ' , ; ` - copied ‘...future.FUN’ to environment
[08:06:53.063] | : . ' , ; ` - copied ‘future.call.arguments’ to environment
[08:06:53.064] | : . ' , ; ` - copied ‘...future.elements_ii’ to environment
[08:06:53.064] | : . ' , ; ` - copied ‘...future.seeds_ii’ to environment
[08:06:53.064] | : . ' , ; ` - copied ‘...future.globals.maxSize’ to environment
[08:06:53.064] | : . ' , ; ` assign_globals() ... done
[08:06:53.066] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:53.066] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:53.067] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:53.067] | : . ' , ; ` | : . all.equal() for FutureStrategyList ...
[08:06:53.067] | : . ' , ; ` | : . ' New stack:
[08:06:53.071] | : . Number of remaining objects: 2
[08:06:53.072] | : . checking value #1:
[08:06:53.072] | : . 'obj' is MulticoreFuture
[08:06:53.067] | : . ' , ; ` | : . ' List of 1
[08:06:53.067] | : . ' , ; ` | : . '  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:53.067] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:53.067] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:53.067] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:53.067] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.067] | : . ' , ; ` | : . '     ...)  
[08:06:53.067] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.067] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.067] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:53.067] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:53.067] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.067] | : . ' , ; ` | : . '     ...)  
[08:06:53.067] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.067] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:53.072] | : . ' , ; ` | : . ' Old stack:
[08:06:53.072] | : . ' , ; ` | : . ' List of 1
[08:06:53.072] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:53.072] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:53.072] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:53.072] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.072] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.072] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.072] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.072] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede34a640> 
[08:06:53.072] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.072] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.072] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:53.076] | : . ' , ; ` | : . ' Not identical
[08:06:53.076] | : . ' , ; ` | : . ' all.equal() for future ...
[08:06:53.076] | : . ' , ; ` | : . ' , List of 2
[08:06:53.076] | : . ' , ; ` | : . ' ,  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:53.076] | : . ' , ; ` | : . ' ,     earlySignal = FALSE, envir = parent.frame())  
[08:06:53.076] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:53.076] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:53.076] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.076] | : . ' , ; ` | : . ' ,     ...)  
[08:06:53.076] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.076] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.076] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategy)
[08:06:53.076] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:53.076] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.076] | : . ' , ; ` | : . ' ,     ...)  
[08:06:53.076] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.076] | : . ' , ; ` | : . ' ,  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:53.076] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:53.076] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:53.076] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.076] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.076] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.076] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.076] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede34a640> 
[08:06:53.076] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.076] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.082] | : . ' , ; ` | : . ' , Formals differ
[08:06:53.082] | : . ' , ; ` | : . ' all.equal() for future ... done
[08:06:53.082] | : . ' , ; ` | : . ' Future strategies differ at level 1
[08:06:53.082] | : . readImmediateCondition() ...
[08:06:53.083] | : . ' , ; ` | : . all.equal() for FutureStrategyList ... done
[08:06:53.083] | : . ' , ; ` | : . plan(): Setting new future backend stack:
[08:06:53.083] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.083] | : . ' , ; ` | : . List of future strategies:
[08:06:53.083] | : . ' , ; ` | : . 1. multicore:
[08:06:53.083] | : . ' , ; ` | : .    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:06:53.083] | : . ' , ; ` | : .    - tweaked: FALSE
[08:06:53.083] | : . ' , ; ` | : .    - call: plan(strategy)
[08:06:53.083] | : . ' Number of RDS files: 0
[08:06:53.083] | : . ' Returned conditions set:
[08:06:53.083] | : . '  list()
[08:06:53.084] | : . readImmediateCondition() ... done
[08:06:53.084] | : . checking value #2:
[08:06:53.084] | : . 'obj' is MulticoreFuture
[08:06:53.083] | : . ' , ; ` | : . List of 1
[08:06:53.083] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:53.083] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:53.083] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:53.083] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:53.083] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.083] | : . ' , ; ` | : .     ...)  
[08:06:53.083] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.083] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.083] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:53.083] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:53.083] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.083] | : . ' , ; ` | : .     ...)  
[08:06:53.083] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.083] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:53.086] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:53.087] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:53.087] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:53.087] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:53.087] | : . ' , ; ` | : . plan(): nbrOfWorkers() = 2
[08:06:53.087] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:53.087] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:53.087] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:53.088] | : . readImmediateCondition() ...
[08:06:53.088] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.088] | : . ' Number of RDS files: 0
[08:06:53.088] | : . ' Returned conditions set:
[08:06:53.088] | : . '  list()
[08:06:53.089] | : . readImmediateCondition() ... done
[08:06:53.089] | : . MulticoreFuture #2
[08:06:53.089] | : . signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:06:53.089] | : . ' nx: 2
[08:06:53.089] | : . ' relay: TRUE
[08:06:53.089] | : . ' stdout: TRUE
[08:06:53.090] | : . ' signal: TRUE
[08:06:53.090] | : . ' resignal: FALSE
[08:06:53.090] | : . ' force: TRUE
[08:06:53.090] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:53.090] | : . ' queued futures: [n=2] FALSE, FALSE
[08:06:53.090] | : . ' until=1
[08:06:53.090] | : . ' relaying element #1
[08:06:53.090] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:53.091] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:53.091] | : . signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:06:53.091] | : . value(<MulticoreFuture>, ...) ...
[08:06:53.091] | : . value(<MulticoreFuture>, ...) ... done
[08:06:53.091] | : . value() for MulticoreFuture (‘future_lapply-2’) ...
[08:06:53.093] | : . ' result() for MulticoreFuture ...
[08:06:53.093] | : . ' , readImmediateCondition() ...
[08:06:53.094] | : . ' , ; Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.094] | : . ' , ; Number of RDS files: 0
[08:06:53.094] | : . ' , ; Returned conditions set:
[08:06:53.094] | : . ' , ;  list()
[08:06:53.094] | : . ' , readImmediateCondition() ... done
[08:06:53.095] | : . ' , result() for MulticoreFuture ...
[08:06:53.095] | : . ' , result() for MulticoreFuture ... done
[08:06:53.095] | : . ' , signalConditions() ...
[08:06:53.095] | : . ' , ; include = ‘immediateCondition’
[08:06:53.095] | : . ' , ; exclude = 
[08:06:53.096] | : . ' , ; resignal = FALSE
[08:06:53.096] | : . ' , ; Number of conditions: 6
[08:06:53.096] | : . ' , ;  int 6
[08:06:53.096] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.096] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.097] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.097] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.097] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.097] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.097] | : . ' , ; Drop signaled conditions: 0
[08:06:53.097] | : . ' , signalConditions() ... done
[08:06:53.097] | : . ' result() for MulticoreFuture ... done
[08:06:53.098] | : . ' result() for MulticoreFuture ...
[08:06:53.098] | : . ' result() for MulticoreFuture ... done
[08:06:53.098] | : . ' signalConditions() ...
[08:06:53.098] | : . ' , include = ‘immediateCondition’
[08:06:53.098] | : . ' , exclude = 
[08:06:53.098] | : . ' , resignal = FALSE
[08:06:53.098] | : . ' , Number of conditions: 6
[08:06:53.098] | : . ' ,  int 6
[08:06:53.099] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.099] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.099] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.099] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.099] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.100] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.100] | : . ' , Drop signaled conditions: 0
[08:06:53.100] | : . ' signalConditions() ... done
[08:06:53.100] | : . ' check for misuse ...
[08:06:53.100] | : . ' check for misuse ... done
[08:06:53.100] | : . value() for MulticoreFuture (‘future_lapply-2’) ... done
[08:06:53.100] | : . value: <list>
[08:06:53.101] | : . signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:06:53.101] | : . ' nx: 2
[08:06:53.101] | : . ' relay: TRUE
[08:06:53.101] | : . ' stdout: TRUE
[08:06:53.101] | : . ' signal: TRUE
[08:06:53.101] | : . ' resignal: FALSE
[08:06:53.101] | : . ' force: TRUE
[08:06:53.101] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:53.101] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:53.102] | : . ' until=1
[08:06:53.102] | : . ' relaying element #1
[08:06:53.102] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:53.102] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:53.106] | : . signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:06:53.106] | : . resolve() for MulticoreFuture ...
[08:06:53.106] | : . resolve() for MulticoreFuture ... done
[08:06:53.106] | : . length: 1 (resolved future 2)
[08:06:53.106] | : value() for list ... done
[08:06:53.117] | : Number of remaining objects: 1
[08:06:53.117] | : checking value #1:
[08:06:53.117] | : 'obj' is MulticoreFuture
[08:06:53.127] | : readImmediateCondition() ...
[08:06:53.127] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.128] | : . Number of RDS files: 0
[08:06:53.128] | : . Returned conditions set:
[08:06:53.128] | : .  list()
[08:06:53.129] | : readImmediateCondition() ... done
[08:06:53.139] | : Number of remaining objects: 1
[08:06:53.139] | : checking value #1:
[08:06:53.139] | : 'obj' is MulticoreFuture
[08:06:53.150] | : readImmediateCondition() ...
[08:06:53.150] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.150] | : . Number of RDS files: 0
[08:06:53.150] | : . Returned conditions set:
[08:06:53.150] | : .  list()
[08:06:53.151] | : readImmediateCondition() ... done
[08:06:53.161] | : Number of remaining objects: 1
[08:06:53.161] | : checking value #1:
[08:06:53.161] | : 'obj' is MulticoreFuture
[08:06:53.172] | : readImmediateCondition() ...
[08:06:53.172] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.172] | : . Number of RDS files: 0
[08:06:53.172] | : . Returned conditions set:
[08:06:53.173] | : .  list()
[08:06:53.173] | : readImmediateCondition() ... done
[08:06:53.183] | : Number of remaining objects: 1
[08:06:53.183] | : checking value #1:
[08:06:53.184] | : 'obj' is MulticoreFuture
[08:06:53.194] | : readImmediateCondition() ...
[08:06:53.194] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.194] | : . Number of RDS files: 0
[08:06:53.195] | : . Returned conditions set:
[08:06:53.195] | : .  list()
[08:06:53.195] | : readImmediateCondition() ... done
[08:06:53.205] | : Number of remaining objects: 1
[08:06:53.206] | : checking value #1:
[08:06:53.206] | : 'obj' is MulticoreFuture
[08:06:53.216] | : readImmediateCondition() ...
[08:06:53.216] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.217] | : . Number of RDS files: 0
[08:06:53.217] | : . Returned conditions set:
[08:06:53.217] | : .  list()
[08:06:53.217] | : readImmediateCondition() ... done
[08:06:53.228] | : Number of remaining objects: 1
[08:06:53.228] | : checking value #1:
[08:06:53.228] | : 'obj' is MulticoreFuture
[08:06:53.239] | : readImmediateCondition() ...
[08:06:53.239] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.239] | : . Number of RDS files: 0
[08:06:53.240] | : . Returned conditions set:
[08:06:53.240] | : .  list()
[08:06:53.240] | : readImmediateCondition() ... done
[08:06:53.250] | : Number of remaining objects: 1
[08:06:53.251] | : checking value #1:
[08:06:53.251] | : 'obj' is MulticoreFuture
[08:06:53.261] | : readImmediateCondition() ...
[08:06:53.262] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.262] | : . Number of RDS files: 0
[08:06:53.262] | : . Returned conditions set:
[08:06:53.262] | : .  list()
[08:06:53.263] | : readImmediateCondition() ... done
[08:06:53.273] | : Number of remaining objects: 1
[08:06:53.273] | : checking value #1:
[08:06:53.273] | : 'obj' is MulticoreFuture
[08:06:53.284] | : readImmediateCondition() ...
[08:06:53.284] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.285] | : . Number of RDS files: 0
[08:06:53.285] | : . Returned conditions set:
[08:06:53.285] | : .  list()
[08:06:53.285] | : readImmediateCondition() ... done
[08:06:53.296] | : Number of remaining objects: 1
[08:06:53.296] | : checking value #1:
[08:06:53.296] | : 'obj' is MulticoreFuture
[08:06:53.306] | : readImmediateCondition() ...
[08:06:53.307] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.307] | : . Number of RDS files: 0
[08:06:53.307] | : . Returned conditions set:
[08:06:53.307] | : .  list()
[08:06:53.308] | : readImmediateCondition() ... done
[08:06:53.318] | : Number of remaining objects: 1
[08:06:53.319] | : checking value #1:
[08:06:53.319] | : 'obj' is MulticoreFuture
[08:06:53.329] | : readImmediateCondition() ...
[08:06:53.329] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.330] | : . Number of RDS files: 0
[08:06:53.330] | : . Returned conditions set:
[08:06:53.330] | : .  list()
[08:06:53.330] | : readImmediateCondition() ... done
[08:06:53.341] | : Number of remaining objects: 1
[08:06:53.341] | : checking value #1:
[08:06:53.341] | : 'obj' is MulticoreFuture
[08:06:53.352] | : readImmediateCondition() ...
[08:06:53.352] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.352] | : . Number of RDS files: 0
[08:06:53.353] | : . Returned conditions set:
[08:06:53.353] | : .  list()
[08:06:53.353] | : readImmediateCondition() ... done
[08:06:53.363] | : Number of remaining objects: 1
[08:06:53.364] | : checking value #1:
[08:06:53.364] | : 'obj' is MulticoreFuture
[08:06:53.374] | : readImmediateCondition() ...
[08:06:53.374] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.375] | : . Number of RDS files: 0
[08:06:53.375] | : . Returned conditions set:
[08:06:53.375] | : .  list()
[08:06:53.375] | : readImmediateCondition() ... done
[08:06:53.386] | : Number of remaining objects: 1
[08:06:53.386] | : checking value #1:
[08:06:53.386] | : 'obj' is MulticoreFuture
[08:06:53.396] | : readImmediateCondition() ...
[08:06:53.397] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.397] | : . Number of RDS files: 0
[08:06:53.397] | : . Returned conditions set:
[08:06:53.397] | : .  list()
[08:06:53.398] | : readImmediateCondition() ... done
[08:06:53.408] | : Number of remaining objects: 1
[08:06:53.408] | : checking value #1:
[08:06:53.408] | : 'obj' is MulticoreFuture
[08:06:53.419] | : readImmediateCondition() ...
[08:06:53.419] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.419] | : . Number of RDS files: 0
[08:06:53.419] | : . Returned conditions set:
[08:06:53.420] | : .  list()
[08:06:53.420] | : readImmediateCondition() ... done
[08:06:53.430] | : Number of remaining objects: 1
[08:06:53.431] | : checking value #1:
[08:06:53.431] | : 'obj' is MulticoreFuture
[08:06:53.441] | : readImmediateCondition() ...
[08:06:53.441] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.442] | : . Number of RDS files: 0
[08:06:53.444] | : . Returned conditions set:
[08:06:53.444] | : .  list()
[08:06:53.445] | : readImmediateCondition() ... done
[08:06:53.455] | : Number of remaining objects: 1
[08:06:53.455] | : checking value #1:
[08:06:53.455] | : 'obj' is MulticoreFuture
[08:06:53.466] | : readImmediateCondition() ...
[08:06:53.466] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.466] | : . Number of RDS files: 0
[08:06:53.466] | : . Returned conditions set:
[08:06:53.467] | : .  list()
[08:06:53.467] | : readImmediateCondition() ... done
[08:06:53.477] | : Number of remaining objects: 1
[08:06:53.478] | : checking value #1:
[08:06:53.478] | : 'obj' is MulticoreFuture
[08:06:53.488] | : readImmediateCondition() ...
[08:06:53.489] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.489] | : . Number of RDS files: 0
[08:06:53.489] | : . Returned conditions set:
[08:06:53.489] | : .  list()
[08:06:53.490] | : readImmediateCondition() ... done
[08:06:53.500] | : Number of remaining objects: 1
[08:06:53.500] | : checking value #1:
[08:06:53.501] | : 'obj' is MulticoreFuture
[08:06:53.511] | : readImmediateCondition() ...
[08:06:53.511] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.512] | : . Number of RDS files: 0
[08:06:53.512] | : . Returned conditions set:
[08:06:53.512] | : .  list()
[08:06:53.512] | : readImmediateCondition() ... done
[08:06:53.523] | : Number of remaining objects: 1
[08:06:53.523] | : checking value #1:
[08:06:53.523] | : 'obj' is MulticoreFuture
[08:06:53.528] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:53.528] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:53.528] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:53.529] | : . ' , ; ` | : . all.equal() for FutureStrategyList ...
[08:06:53.529] | : . ' , ; ` | : . ' New stack:
[08:06:53.529] | : . ' , ; ` | : . ' List of 1
[08:06:53.529] | : . ' , ; ` | : . '  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:53.529] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:53.529] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:53.529] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:53.529] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.529] | : . ' , ; ` | : . '     ...)  
[08:06:53.529] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.529] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.529] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:53.529] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:53.529] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.529] | : . ' , ; ` | : . '     ...)  
[08:06:53.529] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.529] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:53.534] | : readImmediateCondition() ...
[08:06:53.534] | : . ' , ; ` | : . ' Old stack:
[08:06:53.534] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.534] | : . Number of RDS files: 0
[08:06:53.535] | : . Returned conditions set:
[08:06:53.535] | : .  list()
[08:06:53.536] | : readImmediateCondition() ... done
[08:06:53.534] | : . ' , ; ` | : . ' List of 1
[08:06:53.534] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:53.534] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:53.534] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:53.534] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.534] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.534] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.534] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.534] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee044a748> 
[08:06:53.534] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.534] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.534] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:53.539] | : . ' , ; ` | : . ' Not identical
[08:06:53.539] | : . ' , ; ` | : . ' all.equal() for future ...
[08:06:53.546] | : Number of remaining objects: 1
[08:06:53.546] | : checking value #1:
[08:06:53.547] | : 'obj' is MulticoreFuture
[08:06:53.539] | : . ' , ; ` | : . ' , List of 2
[08:06:53.539] | : . ' , ; ` | : . ' ,  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:53.539] | : . ' , ; ` | : . ' ,     earlySignal = FALSE, envir = parent.frame())  
[08:06:53.539] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:53.539] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:53.539] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.539] | : . ' , ; ` | : . ' ,     ...)  
[08:06:53.539] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.539] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.539] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategy)
[08:06:53.539] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:53.539] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.539] | : . ' , ; ` | : . ' ,     ...)  
[08:06:53.539] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.539] | : . ' , ; ` | : . ' ,  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:53.539] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:53.539] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:53.539] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.539] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.539] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.539] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.539] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee044a748> 
[08:06:53.539] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.539] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.550] | : . ' , ; ` | : . ' , Formals differ
[08:06:53.550] | : . ' , ; ` | : . ' all.equal() for future ... done
[08:06:53.550] | : . ' , ; ` | : . ' Future strategies differ at level 1
[08:06:53.550] | : . ' , ; ` | : . all.equal() for FutureStrategyList ... done
[08:06:53.550] | : . ' , ; ` | : . plan(): Setting new future backend stack:
[08:06:53.550] | : . ' , ; ` | : . List of future strategies:
[08:06:53.550] | : . ' , ; ` | : . 1. multicore:
[08:06:53.550] | : . ' , ; ` | : .    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:06:53.550] | : . ' , ; ` | : .    - tweaked: FALSE
[08:06:53.550] | : . ' , ; ` | : .    - call: plan(strategy)
[08:06:53.551] | : . ' , ; ` | : . List of 1
[08:06:53.551] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:53.551] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:53.551] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:53.551] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:53.551] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.551] | : . ' , ; ` | : .     ...)  
[08:06:53.551] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.551] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.551] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:53.551] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:53.551] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.551] | : . ' , ; ` | : .     ...)  
[08:06:53.551] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.551] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:53.556] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:53.556] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:53.556] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:53.556] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:53.556] | : . ' , ; ` | : . plan(): nbrOfWorkers() = 2
[08:06:53.557] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:53.557] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:53.557] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:53.557] | : readImmediateCondition() ...
[08:06:53.557] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.558] | : . Number of RDS files: 0
[08:06:53.558] | : . Returned conditions set:
[08:06:53.558] | : .  list()
[08:06:53.559] | : readImmediateCondition() ... done
[08:06:53.569] | : Number of remaining objects: 1
[08:06:53.569] | : checking value #1:
[08:06:53.569] | : 'obj' is MulticoreFuture
[08:06:53.570] | : readImmediateCondition() ...
[08:06:53.570] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.570] | : . Number of RDS files: 0
[08:06:53.570] | : . Returned conditions set:
[08:06:53.570] | : .  list()
[08:06:53.571] | : readImmediateCondition() ... done
[08:06:53.571] | : MulticoreFuture #1
[08:06:53.571] | : signalConditionsASAP(MulticoreFuture, pos=1) ...
[08:06:53.571] | : . nx: 2
[08:06:53.571] | : . relay: TRUE
[08:06:53.571] | : . stdout: TRUE
[08:06:53.572] | : . signal: TRUE
[08:06:53.572] | : . resignal: FALSE
[08:06:53.572] | : . force: TRUE
[08:06:53.572] | : . relayed: [n=2] FALSE, FALSE
[08:06:53.572] | : . queued futures: [n=2] FALSE, TRUE
[08:06:53.572] | : . until=1
[08:06:53.572] | : . relaying element #1
[08:06:53.572] | : . value() for MulticoreFuture (‘future_lapply-1’) ...
[08:06:53.573] | : . ' result() for MulticoreFuture ...
[08:06:53.573] | : . ' , readImmediateCondition() ...
[08:06:53.573] | : . ' , ; Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.574] | : . ' , ; Number of RDS files: 0
[08:06:53.574] | : . ' , ; Returned conditions set:
[08:06:53.574] | : . ' , ;  list()
[08:06:53.575] | : . ' , readImmediateCondition() ... done
[08:06:53.575] | : . ' , result() for MulticoreFuture ...
[08:06:53.575] | : . ' , result() for MulticoreFuture ... done
[08:06:53.575] | : . ' , signalConditions() ...
[08:06:53.576] | : . ' , ; include = ‘immediateCondition’
[08:06:53.576] | : . ' , ; exclude = 
[08:06:53.576] | : . ' , ; resignal = FALSE
[08:06:53.576] | : . ' , ; Number of conditions: 6
[08:06:53.576] | : . ' , ;  int 6
[08:06:53.577] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.577] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.577] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.577] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.577] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.577] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.577] | : . ' , ; Drop signaled conditions: 0
[08:06:53.577] | : . ' , signalConditions() ... done
[08:06:53.578] | : . ' result() for MulticoreFuture ... done
[08:06:53.578] | : . ' result() for MulticoreFuture ...
[08:06:53.578] | : . ' result() for MulticoreFuture ... done
[08:06:53.578] | : . ' signalConditions() ...
[08:06:53.578] | : . ' , include = ‘immediateCondition’
[08:06:53.578] | : . ' , exclude = 
[08:06:53.578] | : . ' , resignal = FALSE
[08:06:53.578] | : . ' , Number of conditions: 6
[08:06:53.578] | : . ' ,  int 6
[08:06:53.579] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.579] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.579] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.579] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.579] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.580] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.580] | : . ' , Drop signaled conditions: 0
[08:06:53.580] | : . ' signalConditions() ... done
[08:06:53.580] | : . ' relay stdout ...
[08:06:53.580] | : . ' relay stdout ... done
[08:06:53.580] | : . ' check for misuse ...
[08:06:53.580] | : . ' check for misuse ... done
[08:06:53.580] | : . value() for MulticoreFuture (‘future_lapply-1’) ... done
[08:06:53.581] | : . result() for MulticoreFuture ...
[08:06:53.581] | : . result() for MulticoreFuture ... done
[08:06:53.581] | : . signalConditions() ...
[08:06:53.581] | : . ' include = ‘immediateCondition’
[08:06:53.581] | : . ' exclude = 
[08:06:53.581] | : . ' resignal = FALSE
[08:06:53.581] | : . ' Number of conditions: 6
[08:06:53.581] | : . '  int 6
[08:06:53.582] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.582] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.582] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.582] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.582] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.583] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.583] | : . ' Drop signaled conditions: 0
[08:06:53.583] | : . signalConditions() ... done
[08:06:53.583] | : . result() for MulticoreFuture ...
[08:06:53.583] | : . result() for MulticoreFuture ... done
[08:06:53.583] | : . signalConditions() ...
[08:06:53.583] | : . ' include = ‘condition’
[08:06:53.583] | : . ' exclude = ‘error’, ‘immediateCondition’
[08:06:53.586] | : . ' resignal = TRUE
[08:06:53.586] | : . ' Number of conditions: 6
[08:06:53.586] | : . '  int 6
[08:06:53.587] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.587] | : . ' Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:52.973] | : . ' , ; ` attachPackages() ...
[08:06:53.587] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.587] | : . ' Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:52.974] | : . ' , ; ` | packages: [n=1] ‘future’
[08:06:53.588] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.588] | : . ' Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:52.974] | : . ' , ; ` attachPackages() ... done
[08:06:53.588] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.588] | : . ' Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:52.974] | : . ' , ; ` attachPackages() ...
[08:06:53.588] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.588] | : . ' Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:52.975] | : . ' , ; ` | packages: [n=0] 
[08:06:53.589] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.589] | : . ' Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:52.975] | : . ' , ; ` attachPackages() ... done
[08:06:53.589] | : . ' Drop signaled conditions: 6
[08:06:53.589] | : . signalConditions() ... done
[08:06:53.589] | : . relayed: [n=2] TRUE, FALSE
[08:06:53.590] | : . queued futures: [n=2] TRUE, TRUE
[08:06:53.590] | : signalConditionsASAP(MulticoreFuture, pos=1) ... done
[08:06:53.590] | : value(<MulticoreFuture>, ...) ...
[08:06:53.590] | : value(<MulticoreFuture>, ...) ... done
[08:06:53.590] | : value() for MulticoreFuture (‘future_lapply-1’) ...
[08:06:53.590] | : . result() for MulticoreFuture ...
[08:06:53.590] | : . result() for MulticoreFuture ... done
[08:06:53.591] | : . result() for MulticoreFuture ...
[08:06:53.591] | : . result() for MulticoreFuture ... done
[08:06:53.591] | : . signalConditions() ...
[08:06:53.591] | : . ' include = ‘immediateCondition’
[08:06:53.591] | : . ' exclude = 
[08:06:53.591] | : . ' resignal = FALSE
[08:06:53.591] | : . ' Number of conditions: 0
[08:06:53.591] | : . '  int 0
[08:06:53.592] | : . signalConditions() ... done
[08:06:53.592] | : . check for misuse ...
[08:06:53.592] | : . check for misuse ... done
[08:06:53.592] | : value() for MulticoreFuture (‘future_lapply-1’) ... done
[08:06:53.593] | : value: <list>
[08:06:53.593] | : signalConditionsASAP(MulticoreFuture, pos=1) ...
[08:06:53.593] | : . nx: 2
[08:06:53.593] | : . relay: TRUE
[08:06:53.593] | : . stdout: TRUE
[08:06:53.593] | : . signal: TRUE
[08:06:53.593] | : . resignal: FALSE
[08:06:53.593] | : . force: TRUE
[08:06:53.593] | : . relayed: [n=2] TRUE, FALSE
[08:06:53.593] | : . queued futures: [n=2] TRUE, TRUE
[08:06:53.594] | : . until=2
[08:06:53.594] | : . relaying element #2
[08:06:53.594] | : . value() for MulticoreFuture (‘future_lapply-2’) ...
[08:06:53.594] | : . ' result() for MulticoreFuture ...
[08:06:53.594] | : . ' result() for MulticoreFuture ... done
[08:06:53.594] | : . ' result() for MulticoreFuture ...
[08:06:53.594] | : . ' result() for MulticoreFuture ... done
[08:06:53.595] | : . ' signalConditions() ...
[08:06:53.595] | : . ' , include = ‘immediateCondition’
[08:06:53.595] | : . ' , exclude = 
[08:06:53.595] | : . ' , resignal = FALSE
[08:06:53.595] | : . ' , Number of conditions: 6
[08:06:53.595] | : . ' ,  int 6
[08:06:53.596] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.596] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.596] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.596] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.596] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.596] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.596] | : . ' , Drop signaled conditions: 0
[08:06:53.597] | : . ' signalConditions() ... done
[08:06:53.597] | : . ' relay stdout ...
[08:06:53.597] | : . ' relay stdout ... done
[08:06:53.597] | : . ' check for misuse ...
[08:06:53.597] | : . ' check for misuse ... done
[08:06:53.597] | : . value() for MulticoreFuture (‘future_lapply-2’) ... done
[08:06:53.597] | : . result() for MulticoreFuture ...
[08:06:53.597] | : . result() for MulticoreFuture ... done
[08:06:53.598] | : . signalConditions() ...
[08:06:53.598] | : . ' include = ‘immediateCondition’
[08:06:53.598] | : . ' exclude = 
[08:06:53.598] | : . ' resignal = FALSE
[08:06:53.598] | : . ' Number of conditions: 6
[08:06:53.598] | : . '  int 6
[08:06:53.599] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.599] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.599] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.599] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.599] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.599] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.599] | : . ' Drop signaled conditions: 0
[08:06:53.600] | : . signalConditions() ... done
[08:06:53.600] | : . result() for MulticoreFuture ...
[08:06:53.600] | : . result() for MulticoreFuture ... done
[08:06:53.600] | : . signalConditions() ...
[08:06:53.600] | : . ' include = ‘condition’
[08:06:53.600] | : . ' exclude = ‘error’, ‘immediateCondition’
[08:06:53.600] | : . ' resignal = TRUE
[08:06:53.600] | : . ' Number of conditions: 6
[08:06:53.600] | : . '  int 6
[08:06:53.601] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.601] | : . ' Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:53.007] | : . ' , ; ` attachPackages() ...
[08:06:53.601] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.601] | : . ' Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:53.008] | : . ' , ; ` | packages: [n=1] ‘future’
[08:06:53.602] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.602] | : . ' Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:53.008] | : . ' , ; ` attachPackages() ... done
[08:06:53.602] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.602] | : . ' Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:53.009] | : . ' , ; ` attachPackages() ...
[08:06:53.602] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.602] | : . ' Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:53.016] | : . ' , ; ` | packages: [n=0] 
[08:06:53.602] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.603] | : . ' Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:53.017] | : . ' , ; ` attachPackages() ... done
[08:06:53.603] | : . ' Drop signaled conditions: 6
[08:06:53.603] | : . signalConditions() ... done
[08:06:53.603] | : . relayed: [n=2] TRUE, TRUE
[08:06:53.603] | : . queued futures: [n=2] TRUE, TRUE
[08:06:53.603] | : signalConditionsASAP(MulticoreFuture, pos=1) ... done
[08:06:53.603] | : resolve() for MulticoreFuture ...
[08:06:53.603] | : resolve() for MulticoreFuture ... done
[08:06:53.604] | : length: 0 (resolved future 1)
[08:06:53.604] | future_lapply() -> future_xapply() ... done
[08:06:53.604] | Relaying remaining futures ...
[08:06:53.604] | : signalConditionsASAP(NULL, pos=0) ...
[08:06:53.604] | : . nx: 2
[08:06:53.604] | : . relay: TRUE
[08:06:53.604] | : . stdout: TRUE
[08:06:53.604] | : . signal: TRUE
[08:06:53.604] | : . resignal: FALSE
[08:06:53.604] | : . force: TRUE
[08:06:53.605] | : . relayed: [n=2] TRUE, TRUE
[08:06:53.605] | : . queued futures: [n=2] TRUE, TRUE
 - flush all
[08:06:53.605] | : . relayed: [n=2] TRUE, TRUE
[08:06:53.605] | : . queued futures: [n=2] TRUE, TRUE
[08:06:53.605] | : signalConditionsASAP(NULL, pos=0) ... done
[08:06:53.605] | Relaying remaining futures ... done
[08:06:53.605] future_lapply() ... done
[08:06:53.605]  - Number of value chunks collected: 2
[08:06:53.606] Resolving 2 futures (chunks) ... DONE
[08:06:53.606] Reducing values from 2 chunks ...
[08:06:53.606]  - Number of values collected after concatenation: 2
[08:06:53.606]  - Number of values expected: 2
[08:06:53.606] Reducing values from 2 chunks ... DONE


* future_lapply(x, ..., future.stdout = FALSE) ... DONE
* future_lapply(x, ..., future.stdout = TRUE) ...
[08:06:53.609] future_lapply() ...
[08:06:53.610] | Globals in FUN(): [n=4] ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[08:06:53.610] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:06:53.611] | future_lapply() -> future_xapply() ...
[08:06:53.611] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:53.611] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:53.612] | : Number of chunks: 2
[08:06:53.612] | : getGlobalsAndPackagesXApply() ...
[08:06:53.612] | : . future.globals: TRUE
[08:06:53.612] | : . getGlobalsAndPackages() ...
[08:06:53.612] | : . ' Searching for globals ...
[08:06:53.620] | : . ' , globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[08:06:53.621] | : . ' Searching for globals ... done
[08:06:53.621] | : . ' Resolving globals: FALSE
[08:06:53.621] | : . ' Search for packages associated with the globals ...
[08:06:53.621] | : . ' , Packages associated with globals: [1] ‘base’
[08:06:53.621] | : . ' , Packages: [1] ‘base’
[08:06:53.622] | : . ' Search for packages associated with the globals ... done
[08:06:53.622] | : . ' The total size of the 1 globals is 841 bytes (841 bytes)
[08:06:53.622] | : . ' The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[08:06:53.622] | : . ' Packages after dropping 'base': [0] 
[08:06:53.622] | : . ' globals: [1] ‘FUN’
[08:06:53.623] | : . ' packages: [0] 
[08:06:53.623] | : . getGlobalsAndPackages() ... done
[08:06:53.623] | : . globals found/used: [n=1] ‘FUN’
[08:06:53.623] | : . needed namespaces: [n=0] 
[08:06:53.623] | : . use_args: TRUE
[08:06:53.623] | : . Getting '...' globals ...
[08:06:53.623] | : . ' resolve() for FutureGlobals ...
[08:06:53.624] | : . ' , recursive: 0
[08:06:53.624] | : . ' , Number of elements: 1
[08:06:53.624] | : . ' , elements: ‘...’
[08:06:53.624] | : . ' , 'obj' is DotDotDotList
[08:06:53.624] | : . ' , resolve(obj, ...) ...
[08:06:53.624] | : . ' , ; resolve() for DotDotDotList ...
[08:06:53.624] | : . ' , ; ` recursive: -1
[08:06:53.625] | : . ' , ; resolve() for DotDotDotList ... done
[08:06:53.625] | : . ' , resolve(obj, ...) ... done
[08:06:53.625] | : . ' , resolved() for DotDotDotList ...
[08:06:53.625] | : . ' , ; Number of elements: 0
[08:06:53.625] | : . ' , ; Number of futures: 0
[08:06:53.625] | : . ' , resolved() for DotDotDotList ... done
[08:06:53.625] | : . ' , length: 0 (resolved future 1)
[08:06:53.625] | : . ' resolve() for FutureGlobals ... done
[08:06:53.626] | : . ' '...' content: [n=0] 
[08:06:53.626] | : . ' List of 1
[08:06:53.626] | : . '  $ ...: list()
[08:06:53.626] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:53.626] | : . '  - attr(*, "where")=List of 1
[08:06:53.626] | : . '   ..$ ...:<environment: 0x55eee0ad52b0> 
[08:06:53.626] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:53.626] | : . '  - attr(*, "resolved")= logi TRUE
[08:06:53.626] | : . '  - attr(*, "total_size")= num NA
[08:06:53.631] | : . Getting '...' globals ... done
[08:06:53.632] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:06:53.632] | : . List of 2
[08:06:53.632] | : .  $ ...future.FUN:function (x)  
[08:06:53.632] | : .  $ ...          : list()
[08:06:53.632] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:53.632] | : .  - attr(*, "where")=List of 2
[08:06:53.632] | : .   ..$ ...future.FUN:<environment: 0x55eee0ad52b0> 
[08:06:53.632] | : .   ..$ ...          :<environment: 0x55eee0ad52b0> 
[08:06:53.632] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:53.632] | : .  - attr(*, "resolved")= logi FALSE
[08:06:53.632] | : .  - attr(*, "total_size")= num 6008
[08:06:53.635] | : . Packages to be attached in all futures: [n=0] 
[08:06:53.636] | : getGlobalsAndPackagesXApply() ... done
[08:06:53.636] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:53.636] | : List of 5
[08:06:53.636] | :  $ ...future.FUN            :function (x)  
[08:06:53.636] | :  $ ...                      : list()
[08:06:53.636] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:53.636] | :  $ ...future.elements_ii    : NULL
[08:06:53.636] | :  $ ...future.seeds_ii       : NULL
[08:06:53.636] | :  $ ...future.globals.maxSize: NULL
[08:06:53.636] | :  - attr(*, "where")=List of 5
[08:06:53.636] | :   ..$ ...future.FUN            :<environment: 0x55eee0ad52b0> 
[08:06:53.636] | :   ..$ ...                      :<environment: 0x55eee0ad52b0> 
[08:06:53.636] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:53.636] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:53.636] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:53.636] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:53.636] | :  - attr(*, "resolved")= logi FALSE
[08:06:53.636] | :  - attr(*, "total_size")= num 6008
[08:06:53.640] | : Number of futures (= number of chunks): 2
[08:06:53.641] | : Launching 2 futures (chunks) ...
[08:06:53.641] | : Chunk #1 of 2 ...
[08:06:53.641] | :  - Finding globals in 'X' for chunk #1 ...
[08:06:53.641] | : getGlobalsAndPackages() ...
[08:06:53.641] | : . Searching for globals ...
[08:06:53.642] | : . ' globals found: [0] 
[08:06:53.642] | : . Searching for globals ... done
[08:06:53.642] | : . globals: [0] <none>
[08:06:53.642] | : . packages: [0] <none>
[08:06:53.642] | : getGlobalsAndPackages() ... done
[08:06:53.642] | :    + additional globals found: [n=0] 
[08:06:53.642] | :    + additional namespaces needed: [n=0] 
[08:06:53.642] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:06:53.642] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:06:53.643] | :  - seeds: <none>
[08:06:53.643] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:53.643] | : future(..., label = ‘future_lapply-1’) ...
[08:06:53.643] | : . lazy: FALSE
[08:06:53.643] | : . stdout: TRUE
[08:06:53.643] | : . conditions: [n=1] ‘condition’
[08:06:53.643] | : . gc: FALSE
[08:06:53.643] | : . earlySignal: FALSE
[08:06:53.643] | : . getGlobalsAndPackages() ...
[08:06:53.644] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:53.644] | : . ' Resolving globals: FALSE
[08:06:53.644] | : . ' Tweak future expression to call with '...' arguments ...
[08:06:53.644] | : . ' , {
[08:06:53.644] | : . ' ,     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:53.644] | : . ' ,     "# expression in do.call(), because function called uses '...'  "
[08:06:53.644] | : . ' ,     "# as a global variable                                         "
[08:06:53.644] | : . ' ,     do.call(function(...) {
[08:06:53.644] | : . ' ,         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:53.644] | : . ' ,         "# without having an '...' argument. This means '...' is treated"
[08:06:53.644] | : . ' ,         "# as a global variable. This may happen when FUN() is an       "
[08:06:53.644] | : . ' ,         "# anonymous function.                                          "
[08:06:53.644] | : . ' ,         "#                                                              "
[08:06:53.644] | : . ' ,         "# If an anonymous function, we will make sure to restore the   "
[08:06:53.644] | : . ' ,         "# function environment of FUN() to the calling environment.    "
[08:06:53.644] | : . ' ,         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:53.644] | : . ' ,         "# global environment, which is where globals are written.      "
[08:06:53.644] | : . ' ,         penv <- env <- environment(...future.FUN)
[08:06:53.644] | : . ' ,         repeat {
[08:06:53.644] | : . ' ,             if (identical(env, globalenv()) || identical(env, 
[08:06:53.644] | : . ' ,                 emptyenv())) 
[08:06:53.644] | : . ' ,                 break
[08:06:53.644] | : . ' ,             penv <- env
[08:06:53.644] | : . ' ,             env <- parent.env(env)
[08:06:53.644] | : . ' ,         }
[08:06:53.644] | : . ' ,         if (identical(penv, globalenv())) {
[08:06:53.644] | : . ' ,             environment(...future.FUN) <- environment()
[08:06:53.644] | : . ' ,         }
[08:06:53.644] | : . ' ,         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:53.644] | : . ' ,             !isNamespace(penv)) {
[08:06:53.644] | : . ' ,             parent.env(penv) <- environment()
[08:06:53.644] | : . ' ,         }
[08:06:53.644] | : . ' ,         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:53.644] | : . ' ,         {
[08:06:53.644] | : . ' ,             "# future.apply:::future_xapply(): preserve future option"
[08:06:53.644] | : . ' ,             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:53.644] | : . ' ,             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:53.644] | : . ' ,                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:53.644] | : . ' ,                 on.exit(options(oopts), add = TRUE)
[08:06:53.644] | : . ' ,             }
[08:06:53.644] | : . ' ,             {
[08:06:53.644] | : . ' ,                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:53.644] | : . ' ,                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:53.644] | : . ' ,                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:53.644] | : . ' ,                   {
[08:06:53.644] | : . ' ,                     ...future.FUN(...future.X_jj, ...)
[08:06:53.644] | : . ' ,                   }
[08:06:53.644] | : . ' ,                 })
[08:06:53.644] | : . ' ,             }
[08:06:53.644] | : . ' ,         }
[08:06:53.644] | : . ' ,     }, args = future.call.arguments)
[08:06:53.644] | : . ' , }
[08:06:53.645] | : . ' Tweak future expression to call with '...' arguments ... done
[08:06:53.645] | : . ' Search for packages associated with the globals ...
[08:06:53.645] | : . ' , Packages associated with globals: [0] 
[08:06:53.645] | : . ' , Packages: [0] 
[08:06:53.645] | : . ' Search for packages associated with the globals ... done
[08:06:53.645] | : . ' Packages after dropping 'base': [0] 
[08:06:53.646] | : . ' globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:53.646] | : . ' packages: [0] 
[08:06:53.646] | : . getGlobalsAndPackages() ... done
[08:06:53.646] | : . run() for ‘Future’ (‘future_lapply-1’) ...
[08:06:53.646] | : . ' state: ‘created’
[08:06:53.646] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:53.647] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:53.647] | : . ' Using MulticoreFutureBackend ...
[08:06:53.647] | : . ' , Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:06:53.647] | : . ' , Launching futures ...
[08:06:53.647] | : . ' , ; launchFuture() for MulticoreFutureBackend ...
[08:06:53.647] | : . ' , ; ` getFutureData() ...
[08:06:53.647] | : . ' , ; ` | getFutureCore() ...
[08:06:53.647] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:06:53.647] | : . ' , ; ` | getFutureCore() ... done
[08:06:53.648] | : . ' , ; ` | getFutureCapture() ...
[08:06:53.648] | : . ' , ; ` | getFutureCapture() ... done
[08:06:53.648] | : . ' , ; ` | getFutureContext() ...
[08:06:53.648] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:53.648] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:06:53.648] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:53.648] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:06:53.648] | : . ' , ; ` | getFutureContext() ... done
[08:06:53.651] | : . ' , ; ` getFutureData() ... done
[08:06:53.651] | : . ' , ; ` requestCore(..., workers = 2) ...
[08:06:53.651] | : . ' , ; ` requestCore(..., workers = 2) ... done
[08:06:53.654] | : . ' , ; ` MulticoreFuture started
[08:06:53.655] | : . ' , ; launchFuture() for MulticoreFutureBackend ... done
[08:06:53.655] | : . ' , Launching futures ... done
[08:06:53.656] | : . ' , Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:53.657] | : . ' Using MulticoreFutureBackend ... done
[08:06:53.657] | : . run() for ‘Future’ (‘future_lapply-1’) ... done
[08:06:53.658] | : future(..., label = ‘future_lapply-1’) ... done
[08:06:53.658] | : Created future:
[08:06:53.660] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:53.661] | : . ' , ; ` | Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:06:53.661] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:53.662] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:53.663] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:53.663] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:06:53.664] | : . ' , ; ` | : . New stack:
[08:06:53.664] | : . ' , ; ` | : . List of 1
[08:06:53.664] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:53.664] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:53.664] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:06:53.664] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.664] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.664] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.664] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.664] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:53.670] | : . ' , ; ` | : . Old stack:
[08:06:53.672] | : readImmediateCondition() ...
[08:06:53.672] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.673] | : . Number of RDS files: 0
[08:06:53.673] | : . Returned conditions set:
[08:06:53.673] | : .  list()
[08:06:53.674] | : readImmediateCondition() ... done
[08:06:53.659] | : MulticoreFuture:
[08:06:53.659] | : Label: ‘future_lapply-1’
[08:06:53.659] | : Expression:
[08:06:53.659] | : {
[08:06:53.659] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:53.659] | :     "# expression in do.call(), because function called uses '...'  "
[08:06:53.659] | :     "# as a global variable                                         "
[08:06:53.659] | :     do.call(function(...) {
[08:06:53.659] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:53.659] | :         "# without having an '...' argument. This means '...' is treated"
[08:06:53.659] | :         "# as a global variable. This may happen when FUN() is an       "
[08:06:53.659] | :         "# anonymous function.                                          "
[08:06:53.659] | :         "#                                                              "
[08:06:53.659] | :         "# If an anonymous function, we will make sure to restore the   "
[08:06:53.659] | :         "# function environment of FUN() to the calling environment.    "
[08:06:53.659] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:53.659] | :         "# global environment, which is where globals are written.      "
[08:06:53.659] | :         penv <- env <- environment(...future.FUN)
[08:06:53.659] | :         repeat {
[08:06:53.659] | :             if (identical(env, globalenv()) || identical(env, 
[08:06:53.659] | :                 emptyenv())) 
[08:06:53.659] | :                 break
[08:06:53.659] | :             penv <- env
[08:06:53.659] | :             env <- parent.env(env)
[08:06:53.659] | :         }
[08:06:53.659] | :         if (identical(penv, globalenv())) {
[08:06:53.659] | :             environment(...future.FUN) <- environment()
[08:06:53.659] | :         }
[08:06:53.659] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:53.659] | :             !isNamespace(penv)) {
[08:06:53.659] | :             parent.env(penv) <- environment()
[08:06:53.659] | :         }
[08:06:53.659] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:53.659] | :         {
[08:06:53.659] | :             "# future.apply:::future_xapply(): preserve future option"
[08:06:53.659] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:53.659] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:53.659] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:53.659] | :                 on.exit(options(oopts), add = TRUE)
[08:06:53.659] | :             }
[08:06:53.659] | :             {
[08:06:53.659] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:53.659] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:53.659] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:53.659] | :                   {
[08:06:53.659] | :                     ...future.FUN(...future.X_jj, ...)
[08:06:53.659] | :                   }
[08:06:53.659] | :                 })
[08:06:53.659] | :             }
[08:06:53.659] | :         }
[08:06:53.659] | :     }, args = future.call.arguments)
[08:06:53.659] | : }
[08:06:53.659] | : Globals: 5 objects totaling 6.12 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:53.659] | : Packages: <none>
[08:06:53.659] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:53.659] | : Capture standard output: TRUE
[08:06:53.659] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:53.659] | : Immediate condition classes: ‘immediateCondition’
[08:06:53.659] | : Lazy evaluation: FALSE
[08:06:53.659] | : Local evaluation: TRUE
[08:06:53.659] | : Asynchronous evaluation: TRUE
[08:06:53.659] | : Early signaling: FALSE
[08:06:53.659] | : Environment: R_GlobalEnv
[08:06:53.659] | : State: ‘running’
[08:06:53.659] | : Resolved: FALSE
[08:06:53.659] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-9
[08:06:53.659] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:53.659] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:53.659] | : Value: <not collected>
[08:06:53.659] | : Conditions captured: <none>
[08:06:53.675] | : Chunk #1 of 2 ... DONE
[08:06:53.670] | : . ' , ; ` | : . List of 1
[08:06:53.670] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:53.670] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:53.670] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:53.670] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:53.670] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.670] | : . ' , ; ` | : .     ...)  
[08:06:53.670] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.670] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.670] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:53.670] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:53.670] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.670] | : . ' , ; ` | : .     ...)  
[08:06:53.670] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.670] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:53.675] | : Chunk #2 of 2 ...
[08:06:53.675] | : . ' , ; ` | : . Not identical
[08:06:53.675] | :  - Finding globals in 'X' for chunk #2 ...
[08:06:53.675] | : . ' , ; ` | : . all.equal() for future ...
[08:06:53.675] | : getGlobalsAndPackages() ...
[08:06:53.675] | : . Searching for globals ...
[08:06:53.676] | : . ' globals found: [0] 
[08:06:53.676] | : . Searching for globals ... done
[08:06:53.676] | : . globals: [0] <none>
[08:06:53.677] | : . packages: [0] <none>
[08:06:53.677] | : getGlobalsAndPackages() ... done
[08:06:53.677] | :    + additional globals found: [n=0] 
[08:06:53.677] | :    + additional namespaces needed: [n=0] 
[08:06:53.677] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:06:53.677] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:06:53.677] | :  - seeds: <none>
[08:06:53.678] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:53.678] | : future(..., label = ‘future_lapply-2’) ...
[08:06:53.678] | : . lazy: FALSE
[08:06:53.678] | : . stdout: TRUE
[08:06:53.678] | : . conditions: [n=1] ‘condition’
[08:06:53.679] | : . gc: FALSE
[08:06:53.679] | : . earlySignal: FALSE
[08:06:53.679] | : . getGlobalsAndPackages() ...
[08:06:53.679] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:53.679] | : . ' Resolving globals: FALSE
[08:06:53.679] | : . ' Tweak future expression to call with '...' arguments ...
[08:06:53.679] | : . ' , {
[08:06:53.679] | : . ' ,     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:53.679] | : . ' ,     "# expression in do.call(), because function called uses '...'  "
[08:06:53.679] | : . ' ,     "# as a global variable                                         "
[08:06:53.679] | : . ' ,     do.call(function(...) {
[08:06:53.679] | : . ' ,         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:53.679] | : . ' ,         "# without having an '...' argument. This means '...' is treated"
[08:06:53.679] | : . ' ,         "# as a global variable. This may happen when FUN() is an       "
[08:06:53.679] | : . ' ,         "# anonymous function.                                          "
[08:06:53.679] | : . ' ,         "#                                                              "
[08:06:53.679] | : . ' ,         "# If an anonymous function, we will make sure to restore the   "
[08:06:53.679] | : . ' ,         "# function environment of FUN() to the calling environment.    "
[08:06:53.679] | : . ' ,         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:53.679] | : . ' ,         "# global environment, which is where globals are written.      "
[08:06:53.679] | : . ' ,         penv <- env <- environment(...future.FUN)
[08:06:53.679] | : . ' ,         repeat {
[08:06:53.679] | : . ' ,             if (identical(env, globalenv()) || identical(env, 
[08:06:53.679] | : . ' ,                 emptyenv())) 
[08:06:53.679] | : . ' ,                 break
[08:06:53.679] | : . ' ,             penv <- env
[08:06:53.679] | : . ' ,             env <- parent.env(env)
[08:06:53.679] | : . ' ,         }
[08:06:53.679] | : . ' ,         if (identical(penv, globalenv())) {
[08:06:53.679] | : . ' ,             environment(...future.FUN) <- environment()
[08:06:53.679] | : . ' ,         }
[08:06:53.679] | : . ' ,         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:53.679] | : . ' ,             !isNamespace(penv)) {
[08:06:53.679] | : . ' ,             parent.env(penv) <- environment()
[08:06:53.679] | : . ' ,         }
[08:06:53.679] | : . ' ,         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:53.679] | : . ' ,         {
[08:06:53.679] | : . ' ,             "# future.apply:::future_xapply(): preserve future option"
[08:06:53.679] | : . ' ,             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:53.679] | : . ' ,             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:53.679] | : . ' ,                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:53.679] | : . ' ,                 on.exit(options(oopts), add = TRUE)
[08:06:53.679] | : . ' ,             }
[08:06:53.679] | : . ' ,             {
[08:06:53.679] | : . ' ,                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:53.679] | : . ' ,                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:53.679] | : . ' ,                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:53.679] | : . ' ,                   {
[08:06:53.679] | : . ' ,                     ...future.FUN(...future.X_jj, ...)
[08:06:53.679] | : . ' ,                   }
[08:06:53.679] | : . ' ,                 })
[08:06:53.679] | : . ' ,             }
[08:06:53.679] | : . ' ,         }
[08:06:53.679] | : . ' ,     }, args = future.call.arguments)
[08:06:53.679] | : . ' , }
[08:06:53.680] | : . ' Tweak future expression to call with '...' arguments ... done
[08:06:53.680] | : . ' Search for packages associated with the globals ...
[08:06:53.681] | : . ' , Packages associated with globals: [0] 
[08:06:53.681] | : . ' , Packages: [0] 
[08:06:53.681] | : . ' Search for packages associated with the globals ... done
[08:06:53.681] | : . ' Packages after dropping 'base': [0] 
[08:06:53.681] | : . ' globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:53.682] | : . ' packages: [0] 
[08:06:53.682] | : . getGlobalsAndPackages() ... done
[08:06:53.675] | : . ' , ; ` | : . ' List of 2
[08:06:53.675] | : . ' , ; ` | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:53.675] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:53.675] | : . ' , ; ` | : . '   ..- attr(*, "init")= logi TRUE
[08:06:53.675] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.675] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.675] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.675] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.675] | : . ' , ; ` | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:53.675] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:53.675] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:53.675] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:53.675] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.675] | : . ' , ; ` | : . '     ...)  
[08:06:53.675] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.675] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.675] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:53.675] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:53.675] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.675] | : . ' , ; ` | : . '     ...)  
[08:06:53.675] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.682] | : . run() for ‘Future’ (‘future_lapply-2’) ...
[08:06:53.682] | : . ' state: ‘created’
[08:06:53.682] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:53.683] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:53.683] | : . ' Using MulticoreFutureBackend ...
[08:06:53.683] | : . ' , ; ` | : . ' Formals differ
[08:06:53.683] | : . ' , Number of futures since start: 3 (3 created, 3 launched, 2 finished)
[08:06:53.683] | : . ' , ; ` | : . all.equal() for future ... done
[08:06:53.683] | : . ' , Launching futures ...
[08:06:53.683] | : . ' , ; ` | : . Future strategies differ at level 1
[08:06:53.683] | : . ' , ; launchFuture() for MulticoreFutureBackend ...
[08:06:53.683] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:06:53.683] | : . ' , ; ` getFutureData() ...
[08:06:53.683] | : . ' , ; ` | : plan(): Setting new future backend stack:
[08:06:53.683] | : . ' , ; ` | getFutureCore() ...
[08:06:53.684] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:06:53.684] | : . ' , ; ` | getFutureCore() ... done
[08:06:53.684] | : . ' , ; ` | getFutureCapture() ...
[08:06:53.684] | : . ' , ; ` | getFutureCapture() ... done
[08:06:53.684] | : . ' , ; ` | : List of future strategies:
[08:06:53.684] | : . ' , ; ` | : 1. sequential:
[08:06:53.684] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:53.684] | : . ' , ; ` | :    - tweaked: FALSE
[08:06:53.684] | : . ' , ; ` | :    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.684] | : . ' , ; ` | getFutureContext() ...
[08:06:53.684] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:53.684] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:06:53.685] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:53.685] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:06:53.685] | : . ' , ; ` | getFutureContext() ... done
[08:06:53.685] | : . ' , ; ` getFutureData() ... done
[08:06:53.685] | : . ' , ; ` requestCore(..., workers = 2) ...
[08:06:53.686] | : . ' , ; ` requestCore(..., workers = 2) ... done
[08:06:53.688] | : . ' , ; ` MulticoreFuture started
[08:06:53.689] | : . ' , ; launchFuture() for MulticoreFutureBackend ... done
[08:06:53.689] | : . ' , Launching futures ... done
[08:06:53.689] | : . ' , Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:53.690] | : . ' Using MulticoreFutureBackend ... done
[08:06:53.690] | : . run() for ‘Future’ (‘future_lapply-2’) ... done
[08:06:53.690] | : future(..., label = ‘future_lapply-2’) ... done
[08:06:53.691] | : Created future:
[08:06:53.684] | : . ' , ; ` | : List of 1
[08:06:53.684] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:53.684] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:53.684] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:06:53.684] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.684] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.684] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.684] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.684] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:53.691] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:53.692] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:53.692] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:53.692] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:06:53.693] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:53.693] | : . ' , ; ` | Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:06:53.694] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:53.694] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:53.692] | : . ' , ; ` | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:53.692] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:53.692] | : . ' , ; ` | : . '  - attr(*, "init")= logi TRUE
[08:06:53.692] | : . ' , ; ` | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.692] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.692] | : . ' , ; ` | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.692] | : . ' , ; ` | : . '  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.695] | : . ' , ; ` | : . ' init: TRUE
[08:06:53.695] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ...
[08:06:53.695] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:53.695] | : . ' , ; ` | : . ' , Backend function: <‘NULL’>
[08:06:53.695] | : . ' , ; ` | : . ' , Evaluator tweak arguments: [n=0]
[08:06:53.695] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:06:53.695] | : . ' , ; ` | : . New stack:
[08:06:53.695] | : . ' , ; ` | : . ' ,  list()
[08:06:53.696] | : . ' , ; ` | : . ' , Evaluator formal arguments: [n=2]
[08:06:53.696] | : . ' , ; ` | : . ' ,  list()
[08:06:53.696] | : . ' , ; ` | : . ' , Backend factory arguments: [n=2]
[08:06:53.696] | : . ' , ; ` | : . ' , Dotted pair list of 2
[08:06:53.696] | : . ' , ; ` | : . ' ,  $ gc         : logi FALSE
[08:06:53.696] | : . ' , ; ` | : . ' ,  $ earlySignal: logi FALSE
[08:06:53.697] | : . ' , ; ` | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:06:53.698] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ... done
[08:06:53.698] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:06:53.698] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:53.698] | : . ' , ; ` | : plan(): nbrOfWorkers() = 1
[08:06:53.698] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:53.698] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:53.698] | : . ' , ; ` assign_globals() ...
[08:06:53.696] | : . ' , ; ` | : . List of 1
[08:06:53.696] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:53.696] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:53.696] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:06:53.696] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.696] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.696] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.696] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.696] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:53.701] | : . ' , ; ` | : . Old stack:
[08:06:53.699] | : . ' , ; ` List of 5
[08:06:53.699] | : . ' , ; `  $ ...future.FUN            :function (x)  
[08:06:53.699] | : . ' , ; `  $ future.call.arguments    : list()
[08:06:53.699] | : . ' , ; `   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:53.699] | : . ' , ; `  $ ...future.elements_ii    :List of 1
[08:06:53.699] | : . ' , ; `   ..$ : int 1
[08:06:53.699] | : . ' , ; `  $ ...future.seeds_ii       : NULL
[08:06:53.699] | : . ' , ; `  $ ...future.globals.maxSize: NULL
[08:06:53.699] | : . ' , ; `  - attr(*, "where")=List of 5
[08:06:53.699] | : . ' , ; `   ..$ ...future.FUN            :<environment: 0x55eee0ad52b0> 
[08:06:53.699] | : . ' , ; `   ..$ future.call.arguments    :<environment: 0x55eee0ad52b0> 
[08:06:53.699] | : . ' , ; `   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:53.699] | : . ' , ; `   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:53.699] | : . ' , ; `   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:53.699] | : . ' , ; `  - attr(*, "resolved")= logi FALSE
[08:06:53.699] | : . ' , ; `  - attr(*, "total_size")= num 6008
[08:06:53.699] | : . ' , ; `  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:53.699] | : . ' , ; `  - attr(*, "already-done")= logi TRUE
[08:06:53.704] | : . ' , ; ` - copied ‘...future.FUN’ to environment
[08:06:53.704] | : . ' , ; ` - copied ‘future.call.arguments’ to environment
[08:06:53.705] | : . ' , ; ` - copied ‘...future.elements_ii’ to environment
[08:06:53.705] | : . ' , ; ` - copied ‘...future.seeds_ii’ to environment
[08:06:53.705] | : . ' , ; ` - copied ‘...future.globals.maxSize’ to environment
[08:06:53.705] | : readImmediateCondition() ...
[08:06:53.705] | : . ' , ; ` assign_globals() ... done
[08:06:53.705] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.705] | : . Number of RDS files: 0
[08:06:53.706] | : . Returned conditions set:
[08:06:53.706] | : .  list()
[08:06:53.707] | : readImmediateCondition() ... done
[08:06:53.691] | : MulticoreFuture:
[08:06:53.691] | : Label: ‘future_lapply-2’
[08:06:53.691] | : Expression:
[08:06:53.691] | : {
[08:06:53.691] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:53.691] | :     "# expression in do.call(), because function called uses '...'  "
[08:06:53.691] | :     "# as a global variable                                         "
[08:06:53.691] | :     do.call(function(...) {
[08:06:53.691] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:53.691] | :         "# without having an '...' argument. This means '...' is treated"
[08:06:53.691] | :         "# as a global variable. This may happen when FUN() is an       "
[08:06:53.691] | :         "# anonymous function.                                          "
[08:06:53.691] | :         "#                                                              "
[08:06:53.691] | :         "# If an anonymous function, we will make sure to restore the   "
[08:06:53.691] | :         "# function environment of FUN() to the calling environment.    "
[08:06:53.691] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:53.691] | :         "# global environment, which is where globals are written.      "
[08:06:53.691] | :         penv <- env <- environment(...future.FUN)
[08:06:53.691] | :         repeat {
[08:06:53.691] | :             if (identical(env, globalenv()) || identical(env, 
[08:06:53.691] | :                 emptyenv())) 
[08:06:53.691] | :                 break
[08:06:53.691] | :             penv <- env
[08:06:53.691] | :             env <- parent.env(env)
[08:06:53.691] | :         }
[08:06:53.691] | :         if (identical(penv, globalenv())) {
[08:06:53.691] | :             environment(...future.FUN) <- environment()
[08:06:53.691] | :         }
[08:06:53.691] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:53.691] | :             !isNamespace(penv)) {
[08:06:53.691] | :             parent.env(penv) <- environment()
[08:06:53.691] | :         }
[08:06:53.691] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:53.691] | :         {
[08:06:53.691] | :             "# future.apply:::future_xapply(): preserve future option"
[08:06:53.691] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:53.691] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:53.691] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:53.691] | :                 on.exit(options(oopts), add = TRUE)
[08:06:53.691] | :             }
[08:06:53.691] | :             {
[08:06:53.691] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:53.691] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:53.691] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:53.691] | :                   {
[08:06:53.691] | :                     ...future.FUN(...future.X_jj, ...)
[08:06:53.691] | :                   }
[08:06:53.691] | :                 })
[08:06:53.691] | :             }
[08:06:53.691] | :         }
[08:06:53.691] | :     }, args = future.call.arguments)
[08:06:53.691] | : }
[08:06:53.691] | : Globals: 5 objects totaling 6.12 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:53.691] | : Packages: <none>
[08:06:53.691] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:53.691] | : Capture standard output: TRUE
[08:06:53.691] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:53.691] | : Immediate condition classes: ‘immediateCondition’
[08:06:53.691] | : Lazy evaluation: FALSE
[08:06:53.691] | : Local evaluation: TRUE
[08:06:53.691] | : Asynchronous evaluation: TRUE
[08:06:53.691] | : Early signaling: FALSE
[08:06:53.691] | : Environment: R_GlobalEnv
[08:06:53.691] | : State: ‘running’
[08:06:53.691] | : Resolved: FALSE
[08:06:53.691] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-10
[08:06:53.691] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:53.691] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:53.691] | : Value: <not collected>
[08:06:53.691] | : Conditions captured: <none>
[08:06:53.707] | : Chunk #2 of 2 ... DONE
[08:06:53.708] | : Launching 2 futures (chunks) ... DONE
[08:06:53.708] | : Resolving 2 futures (chunks) ...
[08:06:53.708] | : value() for list ...
[08:06:53.708] | : . recursive: 0
[08:06:53.708] | : . reduce: FALSE
[08:06:53.709] | : . length: 2

[08:06:53.709] | : . Number of remaining objects: 2
[08:06:53.709] | : . checking value #1:
[08:06:53.710] | : . 'obj' is MulticoreFuture
[08:06:53.701] | : . ' , ; ` | : . List of 1
[08:06:53.701] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:53.701] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:53.701] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:53.701] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:53.701] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.701] | : . ' , ; ` | : .     ...)  
[08:06:53.701] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.701] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.701] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:53.701] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:53.701] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.701] | : . ' , ; ` | : .     ...)  
[08:06:53.701] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.701] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:53.715] | : . ' , ; ` | : . Not identical
[08:06:53.715] | : . ' , ; ` | : . all.equal() for future ...
[08:06:53.720] | : . readImmediateCondition() ...
[08:06:53.720] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.721] | : . ' Number of RDS files: 0
[08:06:53.721] | : . ' Returned conditions set:
[08:06:53.721] | : . '  list()
[08:06:53.722] | : . readImmediateCondition() ... done
[08:06:53.722] | : . checking value #2:
[08:06:53.722] | : . 'obj' is MulticoreFuture
[08:06:53.715] | : . ' , ; ` | : . ' List of 2
[08:06:53.715] | : . ' , ; ` | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:53.715] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:53.715] | : . ' , ; ` | : . '   ..- attr(*, "init")= logi TRUE
[08:06:53.715] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.715] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.715] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.715] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.715] | : . ' , ; ` | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:53.715] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:53.715] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:53.715] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:53.715] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.715] | : . ' , ; ` | : . '     ...)  
[08:06:53.715] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.715] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.715] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:53.715] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:53.715] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.715] | : . ' , ; ` | : . '     ...)  
[08:06:53.715] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.725] | : . ' , ; ` | : . ' Formals differ
[08:06:53.725] | : . ' , ; ` | : . all.equal() for future ... done
[08:06:53.725] | : . ' , ; ` | : . Future strategies differ at level 1
[08:06:53.725] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:06:53.726] | : . ' , ; ` | : plan(): Setting new future backend stack:
[08:06:53.726] | : . ' , ; ` | : List of future strategies:
[08:06:53.726] | : . ' , ; ` | : 1. sequential:
[08:06:53.726] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:53.726] | : . ' , ; ` | :    - tweaked: FALSE
[08:06:53.726] | : . ' , ; ` | :    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.726] | : . ' , ; ` | : List of 1
[08:06:53.726] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:53.726] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:53.726] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:06:53.726] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.726] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.726] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.726] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.726] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:53.730] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:53.730] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:53.730] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:53.730] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:06:53.730] | : . ' , ; ` | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:53.730] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:53.730] | : . ' , ; ` | : . '  - attr(*, "init")= logi TRUE
[08:06:53.730] | : . ' , ; ` | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.730] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.730] | : . ' , ; ` | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.730] | : . ' , ; ` | : . '  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.732] | : . ' , ; ` | : . ' init: TRUE
[08:06:53.733] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ...
[08:06:53.733] | : . ' , ; ` | : . ' , Backend function: <‘NULL’>
[08:06:53.733] | : . ' , ; ` | : . ' , Evaluator tweak arguments: [n=0]
[08:06:53.733] | : . readImmediateCondition() ...
[08:06:53.733] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.733] | : . ' , ; ` | : . ' ,  list()
[08:06:53.734] | : . ' , ; ` | : . ' , Evaluator formal arguments: [n=2]
[08:06:53.734] | : . ' Number of RDS files: 0
[08:06:53.734] | : . ' Returned conditions set:
[08:06:53.734] | : . ' , ; ` | : . ' ,  list()
[08:06:53.734] | : . ' , ; ` | : . ' , Backend factory arguments: [n=2]
[08:06:53.734] | : . '  list()
[08:06:53.735] | : . readImmediateCondition() ... done
[08:06:53.735] | : . ' , ; ` | : . ' , Dotted pair list of 2
[08:06:53.735] | : . ' , ; ` | : . ' ,  $ gc         : logi FALSE
[08:06:53.735] | : . ' , ; ` | : . ' ,  $ earlySignal: logi FALSE
[08:06:53.745] | : . Number of remaining objects: 2
[08:06:53.745] | : . checking value #1:
[08:06:53.746] | : . 'obj' is MulticoreFuture
[08:06:53.756] | : . readImmediateCondition() ...
[08:06:53.756] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.757] | : . ' Number of RDS files: 0
[08:06:53.757] | : . ' Returned conditions set:
[08:06:53.757] | : . '  list()
[08:06:53.758] | : . readImmediateCondition() ... done
[08:06:53.762] | : . checking value #2:
[08:06:53.762] | : . 'obj' is MulticoreFuture
[08:06:53.772] | : . readImmediateCondition() ...
[08:06:53.773] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.773] | : . ' Number of RDS files: 0
[08:06:53.773] | : . ' Returned conditions set:
[08:06:53.774] | : . '  list()
[08:06:53.774] | : . readImmediateCondition() ... done
[08:06:53.736] | : . ' , ; ` | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:06:53.783] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ... done
[08:06:53.783] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:06:53.784] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:53.784] | : . ' , ; ` | : plan(): nbrOfWorkers() = 1
[08:06:53.784] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:53.784] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:53.784] | : . ' , ; ` assign_globals() ...
[08:06:53.785] | : . Number of remaining objects: 2
[08:06:53.785] | : . checking value #1:
[08:06:53.785] | : . 'obj' is MulticoreFuture
[08:06:53.784] | : . ' , ; ` List of 5
[08:06:53.784] | : . ' , ; `  $ ...future.FUN            :function (x)  
[08:06:53.784] | : . ' , ; `  $ future.call.arguments    : list()
[08:06:53.784] | : . ' , ; `   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:53.784] | : . ' , ; `  $ ...future.elements_ii    :List of 1
[08:06:53.784] | : . ' , ; `   ..$ : int 0
[08:06:53.784] | : . ' , ; `  $ ...future.seeds_ii       : NULL
[08:06:53.784] | : . ' , ; `  $ ...future.globals.maxSize: NULL
[08:06:53.784] | : . ' , ; `  - attr(*, "where")=List of 5
[08:06:53.784] | : . ' , ; `   ..$ ...future.FUN            :<environment: 0x55eee0ad52b0> 
[08:06:53.784] | : . ' , ; `   ..$ future.call.arguments    :<environment: 0x55eee0ad52b0> 
[08:06:53.784] | : . ' , ; `   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:53.784] | : . ' , ; `   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:53.784] | : . ' , ; `   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:53.784] | : . ' , ; `  - attr(*, "resolved")= logi FALSE
[08:06:53.784] | : . ' , ; `  - attr(*, "total_size")= num 6008
[08:06:53.784] | : . ' , ; `  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:53.784] | : . ' , ; `  - attr(*, "already-done")= logi TRUE
[08:06:53.789] | : . ' , ; ` - copied ‘...future.FUN’ to environment
[08:06:53.789] | : . ' , ; ` - copied ‘future.call.arguments’ to environment
[08:06:53.790] | : . ' , ; ` - copied ‘...future.elements_ii’ to environment
[08:06:53.790] | : . ' , ; ` - copied ‘...future.seeds_ii’ to environment
[08:06:53.790] | : . ' , ; ` - copied ‘...future.globals.maxSize’ to environment
[08:06:53.790] | : . ' , ; ` assign_globals() ... done
[08:06:53.792] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:53.792] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:53.792] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:53.792] | : . ' , ; ` | : . all.equal() for FutureStrategyList ...
[08:06:53.792] | : . ' , ; ` | : . ' New stack:
[08:06:53.793] | : . ' , ; ` | : . ' List of 1
[08:06:53.793] | : . ' , ; ` | : . '  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:53.793] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:53.793] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:53.793] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:53.793] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.793] | : . ' , ; ` | : . '     ...)  
[08:06:53.793] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.793] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.793] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:53.793] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:53.793] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.793] | : . ' , ; ` | : . '     ...)  
[08:06:53.793] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.793] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:53.796] | : . readImmediateCondition() ...
[08:06:53.796] | : . ' , ; ` | : . ' Old stack:
[08:06:53.796] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.796] | : . ' Number of RDS files: 0
[08:06:53.797] | : . ' Returned conditions set:
[08:06:53.797] | : . '  list()
[08:06:53.797] | : . readImmediateCondition() ... done
[08:06:53.798] | : . checking value #2:
[08:06:53.798] | : . 'obj' is MulticoreFuture
[08:06:53.796] | : . ' , ; ` | : . ' List of 1
[08:06:53.796] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:53.796] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:53.796] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:53.796] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.796] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.796] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.796] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.796] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee0b8c338> 
[08:06:53.796] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.796] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.796] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:53.799] | : . ' , ; ` | : . ' Not identical
[08:06:53.799] | : . ' , ; ` | : . ' all.equal() for future ...
[08:06:53.799] | : . ' , ; ` | : . ' , List of 2
[08:06:53.799] | : . ' , ; ` | : . ' ,  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:53.799] | : . ' , ; ` | : . ' ,     earlySignal = FALSE, envir = parent.frame())  
[08:06:53.799] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:53.799] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:53.799] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.799] | : . ' , ; ` | : . ' ,     ...)  
[08:06:53.799] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.799] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.799] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategy)
[08:06:53.799] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:53.799] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.799] | : . ' , ; ` | : . ' ,     ...)  
[08:06:53.799] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.799] | : . ' , ; ` | : . ' ,  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:53.799] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:53.799] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:53.799] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.799] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.799] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.799] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:53.799] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee0b8c338> 
[08:06:53.799] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:53.799] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:53.805] | : . ' , ; ` | : . ' , Formals differ
[08:06:53.805] | : . ' , ; ` | : . ' all.equal() for future ... done
[08:06:53.806] | : . ' , ; ` | : . ' Future strategies differ at level 1
[08:06:53.806] | : . ' , ; ` | : . all.equal() for FutureStrategyList ... done
[08:06:53.806] | : . ' , ; ` | : . plan(): Setting new future backend stack:
[08:06:53.806] | : . ' , ; ` | : . List of future strategies:
[08:06:53.806] | : . ' , ; ` | : . 1. multicore:
[08:06:53.806] | : . ' , ; ` | : .    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:06:53.806] | : . ' , ; ` | : .    - tweaked: FALSE
[08:06:53.806] | : . ' , ; ` | : .    - call: plan(strategy)
[08:06:53.808] | : . readImmediateCondition() ...
[08:06:53.808] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.809] | : . ' Number of RDS files: 0
[08:06:53.809] | : . ' Returned conditions set:
[08:06:53.809] | : . '  list()
[08:06:53.809] | : . readImmediateCondition() ... done
[08:06:53.806] | : . ' , ; ` | : . List of 1
[08:06:53.806] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:53.806] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:53.806] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:53.806] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:53.806] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.806] | : . ' , ; ` | : .     ...)  
[08:06:53.806] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.806] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.806] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:53.806] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:53.806] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:53.806] | : . ' , ; ` | : .     ...)  
[08:06:53.806] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:53.806] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:53.811] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:53.811] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:53.811] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:53.811] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:53.812] | : . ' , ; ` | : . plan(): nbrOfWorkers() = 2
[08:06:53.812] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:53.812] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:53.812] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:53.820] | : . Number of remaining objects: 2
[08:06:53.820] | : . checking value #1:
[08:06:53.820] | : . 'obj' is MulticoreFuture
[08:06:53.830] | : . readImmediateCondition() ...
[08:06:53.830] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.831] | : . ' Number of RDS files: 0
[08:06:53.831] | : . ' Returned conditions set:
[08:06:53.831] | : . '  list()
[08:06:53.831] | : . readImmediateCondition() ... done
[08:06:53.832] | : . checking value #2:
[08:06:53.832] | : . 'obj' is MulticoreFuture
[08:06:53.832] | : . readImmediateCondition() ...
[08:06:53.832] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.832] | : . ' Number of RDS files: 0
[08:06:53.832] | : . ' Returned conditions set:
[08:06:53.833] | : . '  list()
[08:06:53.833] | : . readImmediateCondition() ... done
[08:06:53.833] | : . MulticoreFuture #2
[08:06:53.833] | : . signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:06:53.833] | : . ' nx: 2
[08:06:53.833] | : . ' relay: TRUE
[08:06:53.834] | : . ' stdout: TRUE
[08:06:53.834] | : . ' signal: TRUE
[08:06:53.834] | : . ' resignal: FALSE
[08:06:53.834] | : . ' force: TRUE
[08:06:53.834] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:53.834] | : . ' queued futures: [n=2] FALSE, FALSE
[08:06:53.834] | : . ' until=1
[08:06:53.834] | : . ' relaying element #1
[08:06:53.834] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:53.835] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:53.835] | : . signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:06:53.835] | : . value(<MulticoreFuture>, ...) ...
[08:06:53.835] | : . value(<MulticoreFuture>, ...) ... done
[08:06:53.835] | : . value() for MulticoreFuture (‘future_lapply-2’) ...
[08:06:53.835] | : . ' result() for MulticoreFuture ...
[08:06:53.836] | : . ' , readImmediateCondition() ...
[08:06:53.836] | : . ' , ; Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.836] | : . ' , ; Number of RDS files: 0
[08:06:53.836] | : . ' , ; Returned conditions set:
[08:06:53.837] | : . ' , ;  list()
[08:06:53.837] | : . ' , readImmediateCondition() ... done
[08:06:53.837] | : . ' , result() for MulticoreFuture ...
[08:06:53.837] | : . ' , result() for MulticoreFuture ... done
[08:06:53.837] | : . ' , signalConditions() ...
[08:06:53.838] | : . ' , ; include = ‘immediateCondition’
[08:06:53.838] | : . ' , ; exclude = 
[08:06:53.838] | : . ' , ; resignal = FALSE
[08:06:53.838] | : . ' , ; Number of conditions: 6
[08:06:53.838] | : . ' , ;  int 6
[08:06:53.839] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.839] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.839] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.839] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.839] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.839] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.839] | : . ' , ; Drop signaled conditions: 0
[08:06:53.840] | : . ' , signalConditions() ... done
[08:06:53.840] | : . ' result() for MulticoreFuture ... done
[08:06:53.840] | : . ' result() for MulticoreFuture ...
[08:06:53.840] | : . ' result() for MulticoreFuture ... done
[08:06:53.840] | : . ' signalConditions() ...
[08:06:53.840] | : . ' , include = ‘immediateCondition’
[08:06:53.840] | : . ' , exclude = 
[08:06:53.840] | : . ' , resignal = FALSE
[08:06:53.840] | : . ' , Number of conditions: 6
[08:06:53.841] | : . ' ,  int 6
[08:06:53.841] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.841] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.841] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.841] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.841] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.842] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:53.842] | : . ' , Drop signaled conditions: 0
[08:06:53.842] | : . ' signalConditions() ... done
[08:06:53.842] | : . ' check for misuse ...
[08:06:53.842] | : . ' check for misuse ... done
[08:06:53.842] | : . value() for MulticoreFuture (‘future_lapply-2’) ... done
[08:06:53.842] | : . value: <list>
[08:06:53.842] | : . signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:06:53.843] | : . ' nx: 2
[08:06:53.843] | : . ' relay: TRUE
[08:06:53.843] | : . ' stdout: TRUE
[08:06:53.843] | : . ' signal: TRUE
[08:06:53.843] | : . ' resignal: FALSE
[08:06:53.843] | : . ' force: TRUE
[08:06:53.843] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:53.843] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:53.843] | : . ' until=1
[08:06:53.843] | : . ' relaying element #1
[08:06:53.843] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:53.844] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:53.844] | : . signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:06:53.844] | : . resolve() for MulticoreFuture ...
[08:06:53.844] | : . resolve() for MulticoreFuture ... done
[08:06:53.844] | : . length: 1 (resolved future 2)
[08:06:53.844] | : value() for list ... done
[08:06:53.854] | : Number of remaining objects: 1
[08:06:53.855] | : checking value #1:
[08:06:53.855] | : 'obj' is MulticoreFuture
[08:06:53.865] | : readImmediateCondition() ...
[08:06:53.865] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.865] | : . Number of RDS files: 0
[08:06:53.865] | : . Returned conditions set:
[08:06:53.865] | : .  list()
[08:06:53.866] | : readImmediateCondition() ... done
[08:06:53.876] | : Number of remaining objects: 1
[08:06:53.876] | : checking value #1:
[08:06:53.876] | : 'obj' is MulticoreFuture
[08:06:53.887] | : readImmediateCondition() ...
[08:06:53.887] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.887] | : . Number of RDS files: 0
[08:06:53.936] | : . Returned conditions set:
[08:06:53.936] | : .  list()
[08:06:53.937] | : readImmediateCondition() ... done
[08:06:53.947] | : Number of remaining objects: 1
[08:06:53.947] | : checking value #1:
[08:06:53.947] | : 'obj' is MulticoreFuture
[08:06:53.958] | : readImmediateCondition() ...
[08:06:53.958] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.958] | : . Number of RDS files: 0
[08:06:53.958] | : . Returned conditions set:
[08:06:53.959] | : .  list()
[08:06:53.959] | : readImmediateCondition() ... done
[08:06:53.969] | : Number of remaining objects: 1
[08:06:53.970] | : checking value #1:
[08:06:53.970] | : 'obj' is MulticoreFuture
[08:06:53.980] | : readImmediateCondition() ...
[08:06:53.980] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:53.981] | : . Number of RDS files: 0
[08:06:53.981] | : . Returned conditions set:
[08:06:53.981] | : .  list()
[08:06:53.981] | : readImmediateCondition() ... done
[08:06:53.992] | : Number of remaining objects: 1
[08:06:53.992] | : checking value #1:
[08:06:53.992] | : 'obj' is MulticoreFuture
[08:06:54.002] | : readImmediateCondition() ...
[08:06:54.002] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.003] | : . Number of RDS files: 0
[08:06:54.003] | : . Returned conditions set:
[08:06:54.003] | : .  list()
[08:06:54.003] | : readImmediateCondition() ... done
[08:06:54.013] | : Number of remaining objects: 1
[08:06:54.014] | : checking value #1:
[08:06:54.014] | : 'obj' is MulticoreFuture
[08:06:54.024] | : readImmediateCondition() ...
[08:06:54.024] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.024] | : . Number of RDS files: 0
[08:06:54.025] | : . Returned conditions set:
[08:06:54.025] | : .  list()
[08:06:54.025] | : readImmediateCondition() ... done
[08:06:54.035] | : Number of remaining objects: 1
[08:06:54.035] | : checking value #1:
[08:06:54.036] | : 'obj' is MulticoreFuture
[08:06:54.046] | : readImmediateCondition() ...
[08:06:54.046] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.046] | : . Number of RDS files: 0
[08:06:54.046] | : . Returned conditions set:
[08:06:54.046] | : .  list()
[08:06:54.047] | : readImmediateCondition() ... done
[08:06:54.057] | : Number of remaining objects: 1
[08:06:54.057] | : checking value #1:
[08:06:54.057] | : 'obj' is MulticoreFuture
[08:06:54.068] | : readImmediateCondition() ...
[08:06:54.068] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.068] | : . Number of RDS files: 0
[08:06:54.068] | : . Returned conditions set:
[08:06:54.068] | : .  list()
[08:06:54.069] | : readImmediateCondition() ... done
[08:06:54.079] | : Number of remaining objects: 1
[08:06:54.079] | : checking value #1:
[08:06:54.079] | : 'obj' is MulticoreFuture
[08:06:54.089] | : readImmediateCondition() ...
[08:06:54.090] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.090] | : . Number of RDS files: 0
[08:06:54.090] | : . Returned conditions set:
[08:06:54.090] | : .  list()
[08:06:54.090] | : readImmediateCondition() ... done
[08:06:54.101] | : Number of remaining objects: 1
[08:06:54.101] | : checking value #1:
[08:06:54.101] | : 'obj' is MulticoreFuture
[08:06:54.111] | : readImmediateCondition() ...
[08:06:54.111] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.112] | : . Number of RDS files: 0
[08:06:54.112] | : . Returned conditions set:
[08:06:54.112] | : .  list()
[08:06:54.112] | : readImmediateCondition() ... done
[08:06:54.122] | : Number of remaining objects: 1
[08:06:54.123] | : checking value #1:
[08:06:54.123] | : 'obj' is MulticoreFuture
[08:06:54.133] | : readImmediateCondition() ...
[08:06:54.133] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.133] | : . Number of RDS files: 0
[08:06:54.133] | : . Returned conditions set:
[08:06:54.134] | : .  list()
[08:06:54.134] | : readImmediateCondition() ... done
[08:06:54.144] | : Number of remaining objects: 1
[08:06:54.144] | : checking value #1:
[08:06:54.144] | : 'obj' is MulticoreFuture
[08:06:54.155] | : readImmediateCondition() ...
[08:06:54.155] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.155] | : . Number of RDS files: 0
[08:06:54.155] | : . Returned conditions set:
[08:06:54.155] | : .  list()
[08:06:54.156] | : readImmediateCondition() ... done
[08:06:54.166] | : Number of remaining objects: 1
[08:06:54.166] | : checking value #1:
[08:06:54.166] | : 'obj' is MulticoreFuture
[08:06:54.176] | : readImmediateCondition() ...
[08:06:54.176] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.177] | : . Number of RDS files: 0
[08:06:54.177] | : . Returned conditions set:
[08:06:54.177] | : .  list()
[08:06:54.177] | : readImmediateCondition() ... done
[08:06:54.187] | : Number of remaining objects: 1
[08:06:54.188] | : checking value #1:
[08:06:54.188] | : 'obj' is MulticoreFuture
[08:06:54.198] | : readImmediateCondition() ...
[08:06:54.198] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.198] | : . Number of RDS files: 0
[08:06:54.198] | : . Returned conditions set:
[08:06:54.199] | : .  list()
[08:06:54.199] | : readImmediateCondition() ... done
[08:06:54.208] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:54.208] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:54.209] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:54.209] | : . ' , ; ` | : . all.equal() for FutureStrategyList ...
[08:06:54.209] | : . ' , ; ` | : . ' New stack:
[08:06:54.209] | : Number of remaining objects: 1
[08:06:54.209] | : checking value #1:
[08:06:54.209] | : 'obj' is MulticoreFuture
[08:06:54.220] | : readImmediateCondition() ...
[08:06:54.220] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.220] | : . Number of RDS files: 0
[08:06:54.220] | : . Returned conditions set:
[08:06:54.221] | : .  list()
[08:06:54.221] | : readImmediateCondition() ... done
[08:06:54.231] | : Number of remaining objects: 1
[08:06:54.231] | : checking value #1:
[08:06:54.232] | : 'obj' is MulticoreFuture
[08:06:54.242] | : readImmediateCondition() ...
[08:06:54.242] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.242] | : . Number of RDS files: 0
[08:06:54.243] | : . Returned conditions set:
[08:06:54.243] | : .  list()
[08:06:54.243] | : readImmediateCondition() ... done
[08:06:54.254] | : Number of remaining objects: 1
[08:06:54.254] | : checking value #1:
[08:06:54.254] | : 'obj' is MulticoreFuture
[08:06:54.209] | : . ' , ; ` | : . ' List of 1
[08:06:54.209] | : . ' , ; ` | : . '  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:54.209] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:54.209] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:54.209] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:54.209] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.209] | : . ' , ; ` | : . '     ...)  
[08:06:54.209] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.209] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.209] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:54.209] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:54.209] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.209] | : . ' , ; ` | : . '     ...)  
[08:06:54.209] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.209] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:54.257] | : . ' , ; ` | : . ' Old stack:
[08:06:54.257] | : . ' , ; ` | : . ' List of 1
[08:06:54.257] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:54.257] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:54.257] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:54.257] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:54.257] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.257] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.257] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:54.257] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2b33c0> 
[08:06:54.257] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:54.257] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.257] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:54.261] | : . ' , ; ` | : . ' Not identical
[08:06:54.261] | : . ' , ; ` | : . ' all.equal() for future ...
[08:06:54.265] | : readImmediateCondition() ...
[08:06:54.265] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.265] | : . Number of RDS files: 0
[08:06:54.265] | : . Returned conditions set:
[08:06:54.265] | : .  list()
[08:06:54.266] | : readImmediateCondition() ... done
[08:06:54.261] | : . ' , ; ` | : . ' , List of 2
[08:06:54.261] | : . ' , ; ` | : . ' ,  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:54.261] | : . ' , ; ` | : . ' ,     earlySignal = FALSE, envir = parent.frame())  
[08:06:54.261] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:54.261] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:54.261] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.261] | : . ' , ; ` | : . ' ,     ...)  
[08:06:54.261] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.261] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.261] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategy)
[08:06:54.261] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:54.261] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.261] | : . ' , ; ` | : . ' ,     ...)  
[08:06:54.261] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.261] | : . ' , ; ` | : . ' ,  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:54.261] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:54.261] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:54.261] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:54.261] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.261] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.261] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:54.261] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2b33c0> 
[08:06:54.261] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:54.261] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.267] | : . ' , ; ` | : . ' , Formals differ
[08:06:54.267] | : . ' , ; ` | : . ' all.equal() for future ... done
[08:06:54.267] | : . ' , ; ` | : . ' Future strategies differ at level 1
[08:06:54.267] | : . ' , ; ` | : . all.equal() for FutureStrategyList ... done
[08:06:54.267] | : . ' , ; ` | : . plan(): Setting new future backend stack:
[08:06:54.267] | : . ' , ; ` | : . List of future strategies:
[08:06:54.267] | : . ' , ; ` | : . 1. multicore:
[08:06:54.267] | : . ' , ; ` | : .    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:06:54.267] | : . ' , ; ` | : .    - tweaked: FALSE
[08:06:54.267] | : . ' , ; ` | : .    - call: plan(strategy)
[08:06:54.268] | : . ' , ; ` | : . List of 1
[08:06:54.268] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:54.268] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:54.268] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:54.268] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:54.268] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.268] | : . ' , ; ` | : .     ...)  
[08:06:54.268] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.268] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.268] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:54.268] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:54.268] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.268] | : . ' , ; ` | : .     ...)  
[08:06:54.268] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.268] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:54.271] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:54.271] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:54.271] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:54.271] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:54.271] | : . ' , ; ` | : . plan(): nbrOfWorkers() = 2
[08:06:54.272] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:54.272] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:54.272] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:54.276] | : Number of remaining objects: 1
[08:06:54.276] | : checking value #1:
[08:06:54.276] | : 'obj' is MulticoreFuture
[08:06:54.276] | : readImmediateCondition() ...
[08:06:54.277] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.277] | : . Number of RDS files: 0
[08:06:54.277] | : . Returned conditions set:
[08:06:54.277] | : .  list()
[08:06:54.277] | : readImmediateCondition() ... done
[08:06:54.278] | : MulticoreFuture #1
[08:06:54.278] | : signalConditionsASAP(MulticoreFuture, pos=1) ...
[08:06:54.278] | : . nx: 2
[08:06:54.278] | : . relay: TRUE
[08:06:54.278] | : . stdout: TRUE
[08:06:54.278] | : . signal: TRUE
[08:06:54.278] | : . resignal: FALSE
[08:06:54.278] | : . force: TRUE
[08:06:54.278] | : . relayed: [n=2] FALSE, FALSE
[08:06:54.278] | : . queued futures: [n=2] FALSE, TRUE
[08:06:54.279] | : . until=1
[08:06:54.279] | : . relaying element #1
[08:06:54.279] | : . value() for MulticoreFuture (‘future_lapply-1’) ...
[08:06:54.279] | : . ' result() for MulticoreFuture ...
[08:06:54.279] | : . ' , readImmediateCondition() ...
[08:06:54.279] | : . ' , ; Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.280] | : . ' , ; Number of RDS files: 0
[08:06:54.280] | : . ' , ; Returned conditions set:
[08:06:54.280] | : . ' , ;  list()
[08:06:54.280] | : . ' , readImmediateCondition() ... done
[08:06:54.280] | : . ' , result() for MulticoreFuture ...
[08:06:54.281] | : . ' , result() for MulticoreFuture ... done
[08:06:54.281] | : . ' , signalConditions() ...
[08:06:54.281] | : . ' , ; include = ‘immediateCondition’
[08:06:54.281] | : . ' , ; exclude = 
[08:06:54.281] | : . ' , ; resignal = FALSE
[08:06:54.281] | : . ' , ; Number of conditions: 6
[08:06:54.281] | : . ' , ;  int 6
[08:06:54.282] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.282] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.282] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.282] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.282] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.282] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.282] | : . ' , ; Drop signaled conditions: 0
[08:06:54.282] | : . ' , signalConditions() ... done
[08:06:54.283] | : . ' result() for MulticoreFuture ... done
[08:06:54.283] | : . ' result() for MulticoreFuture ...
[08:06:54.283] | : . ' result() for MulticoreFuture ... done
[08:06:54.283] | : . ' signalConditions() ...
[08:06:54.283] | : . ' , include = ‘immediateCondition’
[08:06:54.283] | : . ' , exclude = 
[08:06:54.283] | : . ' , resignal = FALSE
[08:06:54.283] | : . ' , Number of conditions: 6
[08:06:54.284] | : . ' ,  int 6
[08:06:54.284] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.284] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.284] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.285] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.285] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.285] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.285] | : . ' , Drop signaled conditions: 0
[08:06:54.285] | : . ' signalConditions() ... done
[08:06:54.285] | : . ' relay stdout ...
[08:06:54.285] | : . ' relay stdout ... done
[08:06:54.285] | : . ' check for misuse ...
[08:06:54.286] | : . ' check for misuse ... done
[08:06:54.286] | : . value() for MulticoreFuture (‘future_lapply-1’) ... done
[08:06:54.286] | : . result() for MulticoreFuture ...
[08:06:54.286] | : . result() for MulticoreFuture ... done
[08:06:54.286] | : . signalConditions() ...
[08:06:54.286] | : . ' include = ‘immediateCondition’
[08:06:54.286] | : . ' exclude = 
[08:06:54.287] | : . ' resignal = FALSE
[08:06:54.287] | : . ' Number of conditions: 6
[08:06:54.287] | : . '  int 6
[08:06:54.287] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.287] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.287] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.288] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.288] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.288] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.288] | : . ' Drop signaled conditions: 0
[08:06:54.288] | : . signalConditions() ... done
[08:06:54.288] | : . result() for MulticoreFuture ...
[08:06:54.288] | : . result() for MulticoreFuture ... done
[08:06:54.289] | : . signalConditions() ...
[08:06:54.289] | : . ' include = ‘condition’
[08:06:54.289] | : . ' exclude = ‘error’, ‘immediateCondition’
[08:06:54.289] | : . ' resignal = TRUE
[08:06:54.289] | : . ' Number of conditions: 6
[08:06:54.289] | : . '  int 6
[08:06:54.290] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.290] | : . ' Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:53.655] | : . ' , ; ` attachPackages() ...
[08:06:54.290] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.290] | : . ' Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:53.656] | : . ' , ; ` | packages: [n=1] ‘future’
[08:06:54.290] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.290] | : . ' Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:53.657] | : . ' , ; ` attachPackages() ... done
[08:06:54.291] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.291] | : . ' Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:53.658] | : . ' , ; ` attachPackages() ...
[08:06:54.291] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.291] | : . ' Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:53.658] | : . ' , ; ` | packages: [n=0] 
[08:06:54.291] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.291] | : . ' Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:53.659] | : . ' , ; ` attachPackages() ... done
[08:06:54.292] | : . ' Drop signaled conditions: 6
[08:06:54.292] | : . signalConditions() ... done
[08:06:54.292] | : . relayed: [n=2] TRUE, FALSE
[08:06:54.292] | : . queued futures: [n=2] TRUE, TRUE
[08:06:54.292] | : signalConditionsASAP(MulticoreFuture, pos=1) ... done
[08:06:54.292] | : value(<MulticoreFuture>, ...) ...
[08:06:54.292] | : value(<MulticoreFuture>, ...) ... done
[08:06:54.292] | : value() for MulticoreFuture (‘future_lapply-1’) ...
[08:06:54.293] | : . result() for MulticoreFuture ...
[08:06:54.293] | : . result() for MulticoreFuture ... done
[08:06:54.293] | : . result() for MulticoreFuture ...
[08:06:54.293] | : . result() for MulticoreFuture ... done
[08:06:54.293] | : . signalConditions() ...
[08:06:54.293] | : . ' include = ‘immediateCondition’
[08:06:54.293] | : . ' exclude = 
[08:06:54.294] | : . ' resignal = FALSE
[08:06:54.294] | : . ' Number of conditions: 0
[08:06:54.294] | : . '  int 0
[08:06:54.294] | : . signalConditions() ... done
[08:06:54.294] | : . check for misuse ...
[08:06:54.295] | : . check for misuse ... done
[08:06:54.295] | : value() for MulticoreFuture (‘future_lapply-1’) ... done
[08:06:54.295] | : value: <list>
[08:06:54.295] | : signalConditionsASAP(MulticoreFuture, pos=1) ...
[08:06:54.295] | : . nx: 2
[08:06:54.295] | : . relay: TRUE
[08:06:54.295] | : . stdout: TRUE
[08:06:54.295] | : . signal: TRUE
[08:06:54.296] | : . resignal: FALSE
[08:06:54.296] | : . force: TRUE
[08:06:54.296] | : . relayed: [n=2] TRUE, FALSE
[08:06:54.296] | : . queued futures: [n=2] TRUE, TRUE
[08:06:54.296] | : . until=2
[08:06:54.296] | : . relaying element #2
[08:06:54.296] | : . value() for MulticoreFuture (‘future_lapply-2’) ...
[08:06:54.296] | : . ' result() for MulticoreFuture ...
[08:06:54.297] | : . ' result() for MulticoreFuture ... done
[08:06:54.297] | : . ' result() for MulticoreFuture ...
[08:06:54.297] | : . ' result() for MulticoreFuture ... done
[08:06:54.297] | : . ' signalConditions() ...
[08:06:54.297] | : . ' , include = ‘immediateCondition’
[08:06:54.297] | : . ' , exclude = 
[08:06:54.297] | : . ' , resignal = FALSE
[08:06:54.298] | : . ' , Number of conditions: 6
[08:06:54.298] | : . ' ,  int 6
[08:06:54.298] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.298] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.298] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.299] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.299] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.299] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.299] | : . ' , Drop signaled conditions: 0
[08:06:54.299] | : . ' signalConditions() ... done
[08:06:54.299] | : . ' relay stdout ...
[08:06:54.299] | : . ' relay stdout ... done
[08:06:54.300] | : . ' check for misuse ...
[08:06:54.300] | : . ' check for misuse ... done
[08:06:54.300] | : . value() for MulticoreFuture (‘future_lapply-2’) ... done
[08:06:54.300] | : . result() for MulticoreFuture ...
[08:06:54.300] | : . result() for MulticoreFuture ... done
[08:06:54.300] | : . signalConditions() ...
[08:06:54.300] | : . ' include = ‘immediateCondition’
[08:06:54.301] | : . ' exclude = 
[08:06:54.301] | : . ' resignal = FALSE
[08:06:54.301] | : . ' Number of conditions: 6
[08:06:54.301] | : . '  int 6
[08:06:54.301] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.302] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.302] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.302] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.302] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.302] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.302] | : . ' Drop signaled conditions: 0
[08:06:54.302] | : . signalConditions() ... done
[08:06:54.303] | : . result() for MulticoreFuture ...
[08:06:54.303] | : . result() for MulticoreFuture ... done
[08:06:54.303] | : . signalConditions() ...
[08:06:54.303] | : . ' include = ‘condition’
[08:06:54.303] | : . ' exclude = ‘error’, ‘immediateCondition’
[08:06:54.303] | : . ' resignal = TRUE
[08:06:54.303] | : . ' Number of conditions: 6
[08:06:54.303] | : . '  int 6
[08:06:54.304] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.304] | : . ' Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:53.689] | : . ' , ; ` attachPackages() ...
[08:06:54.304] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.304] | : . ' Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:53.690] | : . ' , ; ` | packages: [n=1] ‘future’
[08:06:54.305] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.305] | : . ' Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:53.691] | : . ' , ; ` attachPackages() ... done
[08:06:54.305] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.305] | : . ' Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:53.691] | : . ' , ; ` attachPackages() ...
[08:06:54.305] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.305] | : . ' Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:53.691] | : . ' , ; ` | packages: [n=0] 
[08:06:54.306] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.306] | : . ' Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:53.692] | : . ' , ; ` attachPackages() ... done
[08:06:54.306] | : . ' Drop signaled conditions: 6
[08:06:54.306] | : . signalConditions() ... done
[08:06:54.306] | : . relayed: [n=2] TRUE, TRUE
[08:06:54.306] | : . queued futures: [n=2] TRUE, TRUE
[08:06:54.306] | : signalConditionsASAP(MulticoreFuture, pos=1) ... done
[08:06:54.307] | : resolve() for MulticoreFuture ...
[08:06:54.307] | : resolve() for MulticoreFuture ... done
[08:06:54.307] | : length: 0 (resolved future 1)
[08:06:54.307] | future_lapply() -> future_xapply() ... done
[08:06:54.307] | Relaying remaining futures ...
[08:06:54.307] | : signalConditionsASAP(NULL, pos=0) ...
[08:06:54.307] | : . nx: 2
[08:06:54.307] | : . relay: TRUE
[08:06:54.308] | : . stdout: TRUE
[08:06:54.308] | : . signal: TRUE
[08:06:54.308] | : . resignal: FALSE
[08:06:54.308] | : . force: TRUE
[08:06:54.308] | : . relayed: [n=2] TRUE, TRUE
[08:06:54.308] | : . queued futures: [n=2] TRUE, TRUE
 - flush all
[08:06:54.308] | : . relayed: [n=2] TRUE, TRUE
[08:06:54.308] | : . queued futures: [n=2] TRUE, TRUE
[08:06:54.309] | : signalConditionsASAP(NULL, pos=0) ... done
[08:06:54.309] | Relaying remaining futures ... done
[08:06:54.309] future_lapply() ... done
[08:06:54.309]  - Number of value chunks collected: 2
[08:06:54.309] Resolving 2 futures (chunks) ... DONE
[08:06:54.309] Reducing values from 2 chunks ...
[08:06:54.309]  - Number of values collected after concatenation: 2
[08:06:54.309]  - Number of values expected: 2
[08:06:54.310] Reducing values from 2 chunks ... DONE


* future_lapply(x, ..., future.stdout = TRUE) ... DONE
* future_lapply(x, ..., future.stdout = NA) ...
[08:06:54.310] future_lapply() ...
[08:06:54.311] | Globals in FUN(): [n=4] ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[08:06:54.311] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:06:54.312] | future_lapply() -> future_xapply() ...
[08:06:54.312] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:54.312] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:54.312] | : Number of chunks: 2
[08:06:54.313] | : getGlobalsAndPackagesXApply() ...
[08:06:54.313] | : . future.globals: TRUE
[08:06:54.313] | : . getGlobalsAndPackages() ...
[08:06:54.313] | : . ' Searching for globals ...
[08:06:54.322] | : . ' , globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[08:06:54.322] | : . ' Searching for globals ... done
[08:06:54.323] | : . ' Resolving globals: FALSE
[08:06:54.323] | : . ' Search for packages associated with the globals ...
[08:06:54.323] | : . ' , Packages associated with globals: [1] ‘base’
[08:06:54.323] | : . ' , Packages: [1] ‘base’
[08:06:54.323] | : . ' Search for packages associated with the globals ... done
[08:06:54.324] | : . ' The total size of the 1 globals is 841 bytes (841 bytes)
[08:06:54.324] | : . ' The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[08:06:54.324] | : . ' Packages after dropping 'base': [0] 
[08:06:54.324] | : . ' globals: [1] ‘FUN’
[08:06:54.325] | : . ' packages: [0] 
[08:06:54.325] | : . getGlobalsAndPackages() ... done
[08:06:54.325] | : . globals found/used: [n=1] ‘FUN’
[08:06:54.325] | : . needed namespaces: [n=0] 
[08:06:54.325] | : . use_args: TRUE
[08:06:54.325] | : . Getting '...' globals ...
[08:06:54.325] | : . ' resolve() for FutureGlobals ...
[08:06:54.326] | : . ' , recursive: 0
[08:06:54.326] | : . ' , Number of elements: 1
[08:06:54.326] | : . ' , elements: ‘...’
[08:06:54.326] | : . ' , 'obj' is DotDotDotList
[08:06:54.326] | : . ' , resolve(obj, ...) ...
[08:06:54.326] | : . ' , ; resolve() for DotDotDotList ...
[08:06:54.327] | : . ' , ; ` recursive: -1
[08:06:54.327] | : . ' , ; resolve() for DotDotDotList ... done
[08:06:54.327] | : . ' , resolve(obj, ...) ... done
[08:06:54.327] | : . ' , resolved() for DotDotDotList ...
[08:06:54.327] | : . ' , ; Number of elements: 0
[08:06:54.327] | : . ' , ; Number of futures: 0
[08:06:54.327] | : . ' , resolved() for DotDotDotList ... done
[08:06:54.328] | : . ' , length: 0 (resolved future 1)
[08:06:54.328] | : . ' resolve() for FutureGlobals ... done
[08:06:54.328] | : . ' '...' content: [n=0] 
[08:06:54.328] | : . ' List of 1
[08:06:54.328] | : . '  $ ...: list()
[08:06:54.328] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:54.328] | : . '  - attr(*, "where")=List of 1
[08:06:54.328] | : . '   ..$ ...:<environment: 0x55eee21ac5b0> 
[08:06:54.328] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:54.328] | : . '  - attr(*, "resolved")= logi TRUE
[08:06:54.328] | : . '  - attr(*, "total_size")= num NA
[08:06:54.331] | : . Getting '...' globals ... done
[08:06:54.331] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:06:54.332] | : . List of 2
[08:06:54.332] | : .  $ ...future.FUN:function (x)  
[08:06:54.332] | : .  $ ...          : list()
[08:06:54.332] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:54.332] | : .  - attr(*, "where")=List of 2
[08:06:54.332] | : .   ..$ ...future.FUN:<environment: 0x55eee21ac5b0> 
[08:06:54.332] | : .   ..$ ...          :<environment: 0x55eee21ac5b0> 
[08:06:54.332] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:54.332] | : .  - attr(*, "resolved")= logi FALSE
[08:06:54.332] | : .  - attr(*, "total_size")= num 6008
[08:06:54.335] | : . Packages to be attached in all futures: [n=0] 
[08:06:54.336] | : getGlobalsAndPackagesXApply() ... done
[08:06:54.336] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:54.336] | : List of 5
[08:06:54.336] | :  $ ...future.FUN            :function (x)  
[08:06:54.336] | :  $ ...                      : list()
[08:06:54.336] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:54.336] | :  $ ...future.elements_ii    : NULL
[08:06:54.336] | :  $ ...future.seeds_ii       : NULL
[08:06:54.336] | :  $ ...future.globals.maxSize: NULL
[08:06:54.336] | :  - attr(*, "where")=List of 5
[08:06:54.336] | :   ..$ ...future.FUN            :<environment: 0x55eee21ac5b0> 
[08:06:54.336] | :   ..$ ...                      :<environment: 0x55eee21ac5b0> 
[08:06:54.336] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:54.336] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:54.336] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:54.336] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:54.336] | :  - attr(*, "resolved")= logi FALSE
[08:06:54.336] | :  - attr(*, "total_size")= num 6008
[08:06:54.341] | : Number of futures (= number of chunks): 2
[08:06:54.341] | : Launching 2 futures (chunks) ...
[08:06:54.341] | : Chunk #1 of 2 ...
[08:06:54.342] | :  - Finding globals in 'X' for chunk #1 ...
[08:06:54.342] | : getGlobalsAndPackages() ...
[08:06:54.342] | : . Searching for globals ...
[08:06:54.342] | : . ' globals found: [0] 
[08:06:54.342] | : . Searching for globals ... done
[08:06:54.343] | : . globals: [0] <none>
[08:06:54.343] | : . packages: [0] <none>
[08:06:54.343] | : getGlobalsAndPackages() ... done
[08:06:54.343] | :    + additional globals found: [n=0] 
[08:06:54.343] | :    + additional namespaces needed: [n=0] 
[08:06:54.343] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:06:54.343] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:06:54.343] | :  - seeds: <none>
[08:06:54.344] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:54.344] | : future(..., label = ‘future_lapply-1’) ...
[08:06:54.344] | : . lazy: FALSE
[08:06:54.344] | : . stdout: NA
[08:06:54.344] | : . conditions: [n=1] ‘condition’
[08:06:54.344] | : . gc: FALSE
[08:06:54.344] | : . earlySignal: FALSE
[08:06:54.345] | : . getGlobalsAndPackages() ...
[08:06:54.345] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:54.345] | : . ' Resolving globals: FALSE
[08:06:54.345] | : . ' Tweak future expression to call with '...' arguments ...
[08:06:54.345] | : . ' , {
[08:06:54.345] | : . ' ,     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:54.345] | : . ' ,     "# expression in do.call(), because function called uses '...'  "
[08:06:54.345] | : . ' ,     "# as a global variable                                         "
[08:06:54.345] | : . ' ,     do.call(function(...) {
[08:06:54.345] | : . ' ,         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:54.345] | : . ' ,         "# without having an '...' argument. This means '...' is treated"
[08:06:54.345] | : . ' ,         "# as a global variable. This may happen when FUN() is an       "
[08:06:54.345] | : . ' ,         "# anonymous function.                                          "
[08:06:54.345] | : . ' ,         "#                                                              "
[08:06:54.345] | : . ' ,         "# If an anonymous function, we will make sure to restore the   "
[08:06:54.345] | : . ' ,         "# function environment of FUN() to the calling environment.    "
[08:06:54.345] | : . ' ,         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:54.345] | : . ' ,         "# global environment, which is where globals are written.      "
[08:06:54.345] | : . ' ,         penv <- env <- environment(...future.FUN)
[08:06:54.345] | : . ' ,         repeat {
[08:06:54.345] | : . ' ,             if (identical(env, globalenv()) || identical(env, 
[08:06:54.345] | : . ' ,                 emptyenv())) 
[08:06:54.345] | : . ' ,                 break
[08:06:54.345] | : . ' ,             penv <- env
[08:06:54.345] | : . ' ,             env <- parent.env(env)
[08:06:54.345] | : . ' ,         }
[08:06:54.345] | : . ' ,         if (identical(penv, globalenv())) {
[08:06:54.345] | : . ' ,             environment(...future.FUN) <- environment()
[08:06:54.345] | : . ' ,         }
[08:06:54.345] | : . ' ,         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:54.345] | : . ' ,             !isNamespace(penv)) {
[08:06:54.345] | : . ' ,             parent.env(penv) <- environment()
[08:06:54.345] | : . ' ,         }
[08:06:54.345] | : . ' ,         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:54.345] | : . ' ,         {
[08:06:54.345] | : . ' ,             "# future.apply:::future_xapply(): preserve future option"
[08:06:54.345] | : . ' ,             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:54.345] | : . ' ,             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:54.345] | : . ' ,                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:54.345] | : . ' ,                 on.exit(options(oopts), add = TRUE)
[08:06:54.345] | : . ' ,             }
[08:06:54.345] | : . ' ,             {
[08:06:54.345] | : . ' ,                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:54.345] | : . ' ,                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:54.345] | : . ' ,                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:54.345] | : . ' ,                   {
[08:06:54.345] | : . ' ,                     ...future.FUN(...future.X_jj, ...)
[08:06:54.345] | : . ' ,                   }
[08:06:54.345] | : . ' ,                 })
[08:06:54.345] | : . ' ,             }
[08:06:54.345] | : . ' ,         }
[08:06:54.345] | : . ' ,     }, args = future.call.arguments)
[08:06:54.345] | : . ' , }
[08:06:54.346] | : . ' Tweak future expression to call with '...' arguments ... done
[08:06:54.346] | : . ' Search for packages associated with the globals ...
[08:06:54.346] | : . ' , Packages associated with globals: [0] 
[08:06:54.346] | : . ' , Packages: [0] 
[08:06:54.347] | : . ' Search for packages associated with the globals ... done
[08:06:54.347] | : . ' Packages after dropping 'base': [0] 
[08:06:54.347] | : . ' globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:54.347] | : . ' packages: [0] 
[08:06:54.347] | : . getGlobalsAndPackages() ... done
[08:06:54.347] | : . run() for ‘Future’ (‘future_lapply-1’) ...
[08:06:54.348] | : . ' state: ‘created’
[08:06:54.348] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:54.348] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:54.348] | : . ' Using MulticoreFutureBackend ...
[08:06:54.348] | : . ' , Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:06:54.348] | : . ' , Launching futures ...
[08:06:54.349] | : . ' , ; launchFuture() for MulticoreFutureBackend ...
[08:06:54.349] | : . ' , ; ` getFutureData() ...
[08:06:54.349] | : . ' , ; ` | getFutureCore() ...
[08:06:54.349] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:06:54.349] | : . ' , ; ` | getFutureCore() ... done
[08:06:54.349] | : . ' , ; ` | getFutureCapture() ...
[08:06:54.349] | : . ' , ; ` | getFutureCapture() ... done
[08:06:54.349] | : . ' , ; ` | getFutureContext() ...
[08:06:54.350] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:54.350] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:06:54.350] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:54.350] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:06:54.350] | : . ' , ; ` | getFutureContext() ... done
[08:06:54.350] | : . ' , ; ` getFutureData() ... done
[08:06:54.351] | : . ' , ; ` requestCore(..., workers = 2) ...
[08:06:54.351] | : . ' , ; ` requestCore(..., workers = 2) ... done
[08:06:54.354] | : . ' , ; ` MulticoreFuture started
[08:06:54.354] | : . ' , ; launchFuture() for MulticoreFutureBackend ... done
[08:06:54.354] | : . ' , Launching futures ... done
[08:06:54.354] | : . ' , Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:54.355] | : . ' Using MulticoreFutureBackend ... done
[08:06:54.355] | : . run() for ‘Future’ (‘future_lapply-1’) ... done
[08:06:54.355] | : future(..., label = ‘future_lapply-1’) ... done
[08:06:54.355] | : Created future:
[08:06:54.357] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:54.357] | : . ' , ; ` | Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:06:54.361] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:54.361] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:54.362] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:54.362] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:06:54.362] | : . ' , ; ` | : . New stack:
[08:06:54.362] | : . ' , ; ` | : . List of 1
[08:06:54.362] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:54.362] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:54.362] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:06:54.362] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:54.362] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.362] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.362] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:54.362] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:54.366] | : . ' , ; ` | : . Old stack:
[08:06:54.366] | : . ' , ; ` | : . List of 1
[08:06:54.366] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:54.366] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:54.366] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:54.366] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:54.366] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.366] | : . ' , ; ` | : .     ...)  
[08:06:54.366] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.366] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.366] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:54.366] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:54.366] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.366] | : . ' , ; ` | : .     ...)  
[08:06:54.366] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.366] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:54.371] | : . ' , ; ` | : . Not identical
[08:06:54.371] | : readImmediateCondition() ...
[08:06:54.371] | : . ' , ; ` | : . all.equal() for future ...
[08:06:54.372] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.372] | : . Number of RDS files: 0
[08:06:54.372] | : . Returned conditions set:
[08:06:54.372] | : .  list()
[08:06:54.373] | : readImmediateCondition() ... done
[08:06:54.355] | : MulticoreFuture:
[08:06:54.355] | : Label: ‘future_lapply-1’
[08:06:54.355] | : Expression:
[08:06:54.355] | : {
[08:06:54.355] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:54.355] | :     "# expression in do.call(), because function called uses '...'  "
[08:06:54.355] | :     "# as a global variable                                         "
[08:06:54.355] | :     do.call(function(...) {
[08:06:54.355] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:54.355] | :         "# without having an '...' argument. This means '...' is treated"
[08:06:54.355] | :         "# as a global variable. This may happen when FUN() is an       "
[08:06:54.355] | :         "# anonymous function.                                          "
[08:06:54.355] | :         "#                                                              "
[08:06:54.355] | :         "# If an anonymous function, we will make sure to restore the   "
[08:06:54.355] | :         "# function environment of FUN() to the calling environment.    "
[08:06:54.355] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:54.355] | :         "# global environment, which is where globals are written.      "
[08:06:54.355] | :         penv <- env <- environment(...future.FUN)
[08:06:54.355] | :         repeat {
[08:06:54.355] | :             if (identical(env, globalenv()) || identical(env, 
[08:06:54.355] | :                 emptyenv())) 
[08:06:54.355] | :                 break
[08:06:54.355] | :             penv <- env
[08:06:54.355] | :             env <- parent.env(env)
[08:06:54.355] | :         }
[08:06:54.355] | :         if (identical(penv, globalenv())) {
[08:06:54.355] | :             environment(...future.FUN) <- environment()
[08:06:54.355] | :         }
[08:06:54.355] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:54.355] | :             !isNamespace(penv)) {
[08:06:54.355] | :             parent.env(penv) <- environment()
[08:06:54.355] | :         }
[08:06:54.355] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:54.355] | :         {
[08:06:54.355] | :             "# future.apply:::future_xapply(): preserve future option"
[08:06:54.355] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:54.355] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:54.355] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:54.355] | :                 on.exit(options(oopts), add = TRUE)
[08:06:54.355] | :             }
[08:06:54.355] | :             {
[08:06:54.355] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:54.355] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:54.355] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:54.355] | :                   {
[08:06:54.355] | :                     ...future.FUN(...future.X_jj, ...)
[08:06:54.355] | :                   }
[08:06:54.355] | :                 })
[08:06:54.355] | :             }
[08:06:54.355] | :         }
[08:06:54.355] | :     }, args = future.call.arguments)
[08:06:54.355] | : }
[08:06:54.355] | : Globals: 5 objects totaling 6.12 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:54.355] | : Packages: <none>
[08:06:54.355] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:54.355] | : Capture standard output: NA
[08:06:54.355] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:54.355] | : Immediate condition classes: ‘immediateCondition’
[08:06:54.355] | : Lazy evaluation: FALSE
[08:06:54.355] | : Local evaluation: TRUE
[08:06:54.355] | : Asynchronous evaluation: TRUE
[08:06:54.355] | : Early signaling: FALSE
[08:06:54.355] | : Environment: R_GlobalEnv
[08:06:54.355] | : State: ‘running’
[08:06:54.355] | : Resolved: FALSE
[08:06:54.355] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-11
[08:06:54.355] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:54.355] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:54.355] | : Value: <not collected>
[08:06:54.355] | : Conditions captured: <none>
[08:06:54.373] | : Chunk #1 of 2 ... DONE
[08:06:54.373] | : Chunk #2 of 2 ...
[08:06:54.374] | :  - Finding globals in 'X' for chunk #2 ...
[08:06:54.374] | : getGlobalsAndPackages() ...
[08:06:54.374] | : . Searching for globals ...
[08:06:54.374] | : . ' globals found: [0] 
[08:06:54.375] | : . Searching for globals ... done
[08:06:54.375] | : . globals: [0] <none>
[08:06:54.375] | : . packages: [0] <none>
[08:06:54.375] | : getGlobalsAndPackages() ... done
[08:06:54.375] | :    + additional globals found: [n=0] 
[08:06:54.375] | :    + additional namespaces needed: [n=0] 
[08:06:54.375] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:06:54.375] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:06:54.376] | :  - seeds: <none>
[08:06:54.376] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:54.376] | : future(..., label = ‘future_lapply-2’) ...
[08:06:54.376] | : . lazy: FALSE
[08:06:54.376] | : . stdout: NA
[08:06:54.376] | : . conditions: [n=1] ‘condition’
[08:06:54.376] | : . gc: FALSE
[08:06:54.376] | : . earlySignal: FALSE
[08:06:54.377] | : . getGlobalsAndPackages() ...
[08:06:54.377] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:54.377] | : . ' Resolving globals: FALSE
[08:06:54.377] | : . ' Tweak future expression to call with '...' arguments ...
[08:06:54.377] | : . ' , {
[08:06:54.377] | : . ' ,     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:54.377] | : . ' ,     "# expression in do.call(), because function called uses '...'  "
[08:06:54.377] | : . ' ,     "# as a global variable                                         "
[08:06:54.377] | : . ' ,     do.call(function(...) {
[08:06:54.377] | : . ' ,         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:54.377] | : . ' ,         "# without having an '...' argument. This means '...' is treated"
[08:06:54.377] | : . ' ,         "# as a global variable. This may happen when FUN() is an       "
[08:06:54.377] | : . ' ,         "# anonymous function.                                          "
[08:06:54.377] | : . ' ,         "#                                                              "
[08:06:54.377] | : . ' ,         "# If an anonymous function, we will make sure to restore the   "
[08:06:54.377] | : . ' ,         "# function environment of FUN() to the calling environment.    "
[08:06:54.377] | : . ' ,         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:54.377] | : . ' ,         "# global environment, which is where globals are written.      "
[08:06:54.377] | : . ' ,         penv <- env <- environment(...future.FUN)
[08:06:54.377] | : . ' ,         repeat {
[08:06:54.377] | : . ' ,             if (identical(env, globalenv()) || identical(env, 
[08:06:54.377] | : . ' ,                 emptyenv())) 
[08:06:54.377] | : . ' ,                 break
[08:06:54.377] | : . ' ,             penv <- env
[08:06:54.377] | : . ' ,             env <- parent.env(env)
[08:06:54.377] | : . ' ,         }
[08:06:54.377] | : . ' ,         if (identical(penv, globalenv())) {
[08:06:54.377] | : . ' ,             environment(...future.FUN) <- environment()
[08:06:54.377] | : . ' ,         }
[08:06:54.377] | : . ' ,         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:54.377] | : . ' ,             !isNamespace(penv)) {
[08:06:54.377] | : . ' ,             parent.env(penv) <- environment()
[08:06:54.377] | : . ' ,         }
[08:06:54.377] | : . ' ,         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:54.377] | : . ' ,         {
[08:06:54.377] | : . ' ,             "# future.apply:::future_xapply(): preserve future option"
[08:06:54.377] | : . ' ,             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:54.377] | : . ' ,             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:54.377] | : . ' ,                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:54.377] | : . ' ,                 on.exit(options(oopts), add = TRUE)
[08:06:54.377] | : . ' ,             }
[08:06:54.377] | : . ' ,             {
[08:06:54.377] | : . ' ,                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:54.377] | : . ' ,                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:54.377] | : . ' ,                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:54.377] | : . ' ,                   {
[08:06:54.377] | : . ' ,                     ...future.FUN(...future.X_jj, ...)
[08:06:54.377] | : . ' ,                   }
[08:06:54.377] | : . ' ,                 })
[08:06:54.377] | : . ' ,             }
[08:06:54.377] | : . ' ,         }
[08:06:54.377] | : . ' ,     }, args = future.call.arguments)
[08:06:54.377] | : . ' , }
[08:06:54.378] | : . ' Tweak future expression to call with '...' arguments ... done
[08:06:54.378] | : . ' Search for packages associated with the globals ...
[08:06:54.378] | : . ' , Packages associated with globals: [0] 
[08:06:54.372] | : . ' , ; ` | : . ' List of 2
[08:06:54.372] | : . ' , ; ` | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:54.372] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:54.372] | : . ' , ; ` | : . '   ..- attr(*, "init")= logi TRUE
[08:06:54.372] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:54.372] | : . ' , ; ` | : . '   .. ..- attr(*[08:06:54.379] | : . ' , Packages: [0] 
, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.372] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.372] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:54.372] | : . ' , ; ` | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:54.372] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:54.372] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:54.372] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:54.372] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.372] | : . ' , ; ` | : . '     ...)  
[08:06:54.372] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.372] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.372] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:54.372] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:54.372] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.372] | : . ' , ; ` | : . '     ...)  
[08:06:54.372] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.379] | : . ' Search for packages associated with the globals ... done
[08:06:54.379] | : . ' Packages after dropping 'base': [0] 
[08:06:54.379] | : . ' globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:54.379] | : . ' packages: [0] 
[08:06:54.379] | : . getGlobalsAndPackages() ... done
[08:06:54.379] | : . ' , ; ` | : . ' Formals differ
[08:06:54.380] | : . ' , ; ` | : . all.equal() for future ... done
[08:06:54.380] | : . ' , ; ` | : . Future strategies differ at level 1
[08:06:54.380] | : . run() for ‘Future’ (‘future_lapply-2’) ...
[08:06:54.380] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:06:54.380] | : . ' state: ‘created’
[08:06:54.380] | : . ' , ; ` | : plan(): Setting new future backend stack:
[08:06:54.380] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:54.380] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:54.380] | : . ' Using MulticoreFutureBackend ...
[08:06:54.381] | : . ' , Number of futures since start: 5 (5 created, 5 launched, 4 finished)
[08:06:54.381] | : . ' , Launching futures ...
[08:06:54.380] | : . ' , ; ` | : List of future strategies:
[08:06:54.380] | : . ' , ; ` | : 1. sequential:
[08:06:54.380] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:54.380] | : . ' , ; ` | :    - tweaked: FALSE
[08:06:54.380] | : . ' , ; ` | :    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:54.381] | : . ' , ; launchFuture() for MulticoreFutureBackend ...
[08:06:54.381] | : . ' , ; ` getFutureData() ...
[08:06:54.381] | : . ' , ; ` | getFutureCore() ...
[08:06:54.381] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:06:54.381] | : . ' , ; ` | getFutureCore() ... done
[08:06:54.382] | : . ' , ; ` | getFutureCapture() ...
[08:06:54.382] | : . ' , ; ` | getFutureCapture() ... done
[08:06:54.382] | : . ' , ; ` | getFutureContext() ...
[08:06:54.382] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:54.382] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:06:54.382] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:54.382] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:06:54.383] | : . ' , ; ` | getFutureContext() ... done
[08:06:54.383] | : . ' , ; ` getFutureData() ... done
[08:06:54.383] | : . ' , ; ` requestCore(..., workers = 2) ...
[08:06:54.384] | : . ' , ; ` requestCore(..., workers = 2) ... done
[08:06:54.381] | : . ' , ; ` | : List of 1
[08:06:54.381] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:54.381] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:54.381] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:06:54.381] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:54.381] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.381] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.381] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:54.381] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:54.385] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:54.386] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:54.386] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:54.386] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:06:54.387] | : . ' , ; ` MulticoreFuture started
[08:06:54.387] | : . ' , ; launchFuture() for MulticoreFutureBackend ... done
[08:06:54.388] | : . ' , Launching futures ... done
[08:06:54.388] | : . ' , Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:54.388] | : . ' Using MulticoreFutureBackend ... done
[08:06:54.389] | : . run() for ‘Future’ (‘future_lapply-2’) ... done
[08:06:54.389] | : future(..., label = ‘future_lapply-2’) ... done
[08:06:54.386] | : . ' , ; ` | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:54.386] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:54.386] | : . ' , ; ` | : . '  - attr(*, "init")= logi TRUE
[08:06:54.386] | : . ' , ; ` | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:54.386] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.386] | : . ' , ; ` | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.386] | : . ' , ; ` | : . '  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:54.389] | : . ' , ; ` | : . ' init: TRUE
[08:06:54.389] | : Created future:
[08:06:54.389] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ...
[08:06:54.390] | : . ' , ; ` | : . ' , Backend function: <‘NULL’>
[08:06:54.390] | : . ' , ; ` | : . ' , Evaluator tweak arguments: [n=0]
[08:06:54.390] | : . ' , ; ` | : . ' ,  list()
[08:06:54.391] | : . ' , ; ` | : . ' , Evaluator formal arguments: [n=2]
[08:06:54.391] | : . ' , ; ` | : . ' ,  list()
[08:06:54.391] | : . ' , ; ` | : . ' , Backend factory arguments: [n=2]
[08:06:54.391] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:54.392] | : . ' , ; ` | Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:06:54.392] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:54.393] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:54.391] | : . ' , ; ` | : . ' , Dotted pair list of 2
[08:06:54.391] | : . ' , ; ` | : . ' ,  $ gc         : logi FALSE
[08:06:54.391] | : . ' , ; ` | : . ' ,  $ earlySignal: logi FALSE
[08:06:54.393] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:54.393] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:06:54.393] | : . ' , ; ` | : . New stack:
[08:06:54.393] | : . ' , ; ` | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:06:54.394] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ... done
[08:06:54.394] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:06:54.394] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:54.394] | : . ' , ; ` | : plan(): nbrOfWorkers() = 1
[08:06:54.394] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:54.395] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:54.395] | : . ' , ; ` assign_globals() ...
[08:06:54.394] | : . ' , ; ` | : . List of 1
[08:06:54.394] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:54.394] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:54.394] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:06:54.394] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:54.394] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.394] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.394] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:54.394] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:54.398] | : . ' , ; ` | : . Old stack:
[08:06:54.395] | : . ' , ; ` List of 5
[08:06:54.395] | : . ' , ; `  $ ...future.FUN            :function (x)  
[08:06:54.395] | : . ' , ; `  $ future.call.arguments    : list()
[08:06:54.395] | : . ' , ; `   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:54.395] | : . ' , ; `  $ ...future.elements_ii    :List of 1
[08:06:54.395] | : . ' , ; `   ..$ : int 1
[08:06:54.395] | : . ' , ; `  $ ...future.seeds_ii       : NULL
[08:06:54.395] | : . ' , ; `  $ ...future.globals.maxSize: NULL
[08:06:54.395] | : . ' , ; `  - attr(*, "where")=List of 5
[08:06:54.395] | : . ' , ; `   ..$ ...future.FUN            :<environment: 0x55eee21ac5b0> 
[08:06:54.395] | : . ' , ; `   ..$ future.call.arguments    :<environment: 0x55eee21ac5b0> 
[08:06:54.395] | : . ' , ; `   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:54.395] | : . ' , ; `   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:54.395] | : . ' , ; `   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:54.395] | : . ' , ; `  - attr(*, "resolved")= logi FALSE
[08:06:54.395] | : . ' , ; `  - attr(*, "total_size")= num 6008
[08:06:54.395] | : . ' , ; `  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:54.395] | : . ' , ; `  - attr(*, "already-done")= logi TRUE
[08:06:54.403] | : . ' , ; ` - copied ‘...future.FUN’ to environment
[08:06:54.403] | : . ' , ; ` - copied ‘future.call.arguments’ to environment
[08:06:54.403] | : readImmediateCondition() ...
[08:06:54.403] | : . ' , ; ` - copied ‘...future.elements_ii’ to environment
[08:06:54.403] | : . ' , ; ` - copied ‘...future.seeds_ii’ to environment
[08:06:54.403] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.403] | : . ' , ; ` - copied ‘...future.globals.maxSize’ to environment
[08:06:54.404] | : . ' , ; ` assign_globals() ... done
[08:06:54.404] | : . Number of RDS files: 0
[08:06:54.404] | : . Returned conditions set:
[08:06:54.404] | : .  list()
[08:06:54.405] | : readImmediateCondition() ... done
[08:06:54.399] | : . ' , ; ` | : . List of 1
[08:06:54.399] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:54.399] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:54.399] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:54.399] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:54.399] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.399] | : . ' , ; ` | : .     ...)  
[08:06:54.399] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.399] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.399] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:54.399] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:54.399] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.399] | : . ' , ; ` | : .     ...)  
[08:06:54.399] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.399] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:54.389] | : MulticoreFuture:
[08:06:54.389] | : Label: ‘future_lapply-2’
[08:06:54.389] | : Expression:
[08:06:54.389] | : {
[08:06:54.389] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:54.389] | :     "# expression in do.call(), because function called uses '...'  "
[08:06:54.389] | :     "# as a global variable                                         "
[08:06:54.389] | :     do.call(function(...) {
[08:06:54.389] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:54.389] | :         "# without having an '...' argument. This means '...' is treated"
[08:06:54.389] | :         "# as a global variable. This may happen when FUN() is an       "
[08:06:54.389] | :         "# anonymous function.                                          "
[08:06:54.389] | :         "#                                                              "
[08:06:54.389] | :         "# If an anonymous function, we will make sure to restore the   "
[08:06:54.389] | :         "# function environment of FUN() to the calling environment.    "
[08:06:54.389] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:54.389] | :         "# global environment, which is where globals are written.      "
[08:06:54.389] | :         penv <- env <- environment(...future.FUN)
[08:06:54.389] | :         repeat {
[08:06:54.389] | :             if (identical(env, globalenv()) || identical(env, 
[08:06:54.389] | :                 emptyenv())) 
[08:06:54.389] | :                 break
[08:06:54.389] | :             penv <- env
[08:06:54.389] | :             env <- parent.env(env)
[08:06:54.389] | :         }
[08:06:54.389] | :         if (identical(penv, globalenv())) {
[08:06:54.389] | :             environment(...future.FUN) <- environment()
[08:06:54.389] | :         }
[08:06:54.389] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:54.389] | :             !isNamespace(penv)) {
[08:06:54.389] | :             parent.env(penv) <- environment()
[08:06:54.389] | :         }
[08:06:54.389] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:54.389] | :         {
[08:06:54.389] | :             "# future.apply:::future_xapply(): preserve future option"
[08:06:54.389] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:54.389] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:54.389] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:54.389] | :                 on.exit(options(oopts), add = TRUE)
[08:06:54.389] | :             }
[08:06:54.389] | :             {
[08:06:54.389] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:54.389] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:54.389] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:54.389] | :                   {
[08:06:54.389] | :                     ...future.FUN(...future.X_jj, ...)
[08:06:54.389] | :                   }
[08:06:54.389] | :                 })
[08:06:54.389] | :             }
[08:06:54.389] | :         }
[08:06:54.389] | :     }, args = future.call.arguments)
[08:06:54.389] | : }
[08:06:54.389] | : Globals: 5 objects totaling 6.12 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:54.389] | : Packages: <none>
[08:06:54.389] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:54.389] | : Capture standard output: NA
[08:06:54.389] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:54.389] | : Immediate condition classes: ‘immediateCondition’
[08:06:54.389] | : Lazy evaluation: FALSE
[08:06:54.389] | : Local evaluation: TRUE
[08:06:54.389] | : Asynchronous evaluation: TRUE
[08:06:54.389] | : Early signaling: FALSE
[08:06:54.389] | : Environment: R_GlobalEnv
[08:06:54.389] | : State: ‘running’
[08:06:54.389] | : Resolved[08:06:54.405] | : . ' , ; ` | : . Not identical
: FALSE
[08:06:54.389] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-12
[08:06:54.389] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:54.389] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:54.389] | : Value: <not collected>
[08:06:54.389] | : Conditions captured: <none>
[08:06:54.406] | : . ' , ; ` | : . all.equal() for future ...
[08:06:54.406] | : Chunk #2 of 2 ... DONE
[08:06:54.406] | : Launching 2 futures (chunks) ... DONE
[08:06:54.406] | : Resolving 2 futures (chunks) ...
[08:06:54.406] | : value() for list ...
[08:06:54.407] | : . recursive: 0
[08:06:54.407] | : . reduce: FALSE
[08:06:54.407] | : . length: 2

[08:06:54.407] | : . Number of remaining objects: 2
[08:06:54.408] | : . checking value #1:
[08:06:54.408] | : . 'obj' is MulticoreFuture
[08:06:54.406] | : . ' , ; ` | : . ' List of 2
[08:06:54.406] | : . ' , ; ` | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:54.406] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:54.406] | : . ' , ; ` | : . '   ..- attr(*, "init")= logi TRUE
[08:06:54.406] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:54.406] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.406] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.406] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:54.406] | : . ' , ; ` | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:54.406] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:54.406] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:54.406] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:54.406] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.406] | : . ' , ; ` | : . '     ...)  
[08:06:54.406] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.406] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.406] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:54.406] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:54.406] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.406] | : . ' , ; ` | : . '     ...)  
[08:06:54.406] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.416] | : . ' , ; ` | : . ' Formals differ
[08:06:54.416] | : . ' , ; ` | : . all.equal() for future ... done
[08:06:54.416] | : . ' , ; ` | : . Future strategies differ at level 1
[08:06:54.416] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:06:54.417] | : . ' , ; ` | : plan(): Setting new future backend stack:
[08:06:54.417] | : . ' , ; ` | : List of future strategies:
[08:06:54.417] | : . ' , ; ` | : 1. sequential:
[08:06:54.417] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:54.417] | : . ' , ; ` | :    - tweaked: FALSE
[08:06:54.417] | : . ' , ; ` | :    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:54.418] | : . readImmediateCondition() ...
[08:06:54.419] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.419] | : . ' Number of RDS files: 0
[08:06:54.419] | : . ' Returned conditions set:
[08:06:54.419] | : . '  list()
[08:06:54.420] | : . readImmediateCondition() ... done
[08:06:54.420] | : . checking value #2:
[08:06:54.420] | : . 'obj' is MulticoreFuture
[08:06:54.418] | : . ' , ; ` | : List of 1
[08:06:54.418] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:54.418] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:54.418] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:06:54.418] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:54.418] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.418] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.418] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:54.418] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:54.422] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:54.423] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:54.423] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:54.423] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:06:54.423] | : . ' , ; ` | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:54.423] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:54.423] | : . ' , ; ` | : . '  - attr(*, "init")= logi TRUE
[08:06:54.423] | : . ' , ; ` | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:54.423] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.423] | : . ' , ; ` | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.423] | : . ' , ; ` | : . '  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:54.426] | : . ' , ; ` | : . ' init: TRUE
[08:06:54.426] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ...
[08:06:54.426] | : . ' , ; ` | : . ' , Backend function: <‘NULL’>
[08:06:54.427] | : . ' , ; ` | : . ' , Evaluator tweak arguments: [n=0]
[08:06:54.427] | : . ' , ; ` | : . ' ,  list()
[08:06:54.427] | : . ' , ; ` | : . ' , Evaluator formal arguments: [n=2]
[08:06:54.427] | : . ' , ; ` | : . ' ,  list()
[08:06:54.428] | : . ' , ; ` | : . ' , Backend factory arguments: [n=2]
[08:06:54.428] | : . ' , ; ` | : . ' , Dotted pair list of 2
[08:06:54.428] | : . ' , ; ` | : . ' ,  $ gc         : logi FALSE
[08:06:54.428] | : . ' , ; ` | : . ' ,  $ earlySignal: logi FALSE
[08:06:54.430] | : . ' , ; ` | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:06:54.430] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ... done
[08:06:54.430] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:06:54.430] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:54.430] | : . ' , ; ` | : plan(): nbrOfWorkers() = 1
[08:06:54.430] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:54.431] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:54.431] | : . ' , ; ` assign_globals() ...
[08:06:54.431] | : . readImmediateCondition() ...
[08:06:54.431] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.432] | : . ' Number of RDS files: 0
[08:06:54.432] | : . ' Returned conditions set:
[08:06:54.432] | : . '  list()
[08:06:54.433] | : . readImmediateCondition() ... done
[08:06:54.431] | : . ' , ; ` List of 5
[08:06:54.431] | : . ' , ; `  $ ...future.FUN            :function (x)  
[08:06:54.431] | : . ' , ; `  $ future.call.arguments    : list()
[08:06:54.431] | : . ' , ; `   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:54.431] | : . ' , ; `  $ ...future.elements_ii    :List of 1
[08:06:54.431] | : . ' , ; `   ..$ : int 0
[08:06:54.431] | : . ' , ; `  $ ...future.seeds_ii       : NULL
[08:06:54.431] | : . ' , ; `  $ ...future.globals.maxSize: NULL
[08:06:54.431] | : . ' , ; `  - attr(*, "where")=List of 5
[08:06:54.431] | : . ' , ; `   ..$ ...future.FUN            :<environment: 0x55eee21ac5b0> 
[08:06:54.431] | : . ' , ; `   ..$ future.call.arguments    :<environment: 0x55eee21ac5b0> 
[08:06:54.431] | : . ' , ; `   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:54.431] | : . ' , ; `   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:54.431] | : . ' , ; `   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:54.431] | : . ' , ; `  - attr(*, "resolved")= logi FALSE
[08:06:54.431] | : . ' , ; `  - attr(*, "total_size")= num 6008
[08:06:54.431] | : . ' , ; `  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:54.431] | : . ' , ; `  - attr(*, "already-done")= logi TRUE
[08:06:54.439] | : . ' , ; ` - copied ‘...future.FUN’ to environment
[08:06:54.440] | : . ' , ; ` - copied ‘future.call.arguments’ to environment
[08:06:54.440] | : . ' , ; ` - copied ‘...future.elements_ii’ to environment
[08:06:54.440] | : . ' , ; ` - copied ‘...future.seeds_ii’ to environment
[08:06:54.440] | : . ' , ; ` - copied ‘...future.globals.maxSize’ to environment
[08:06:54.440] | : . ' , ; ` assign_globals() ... done
[08:06:54.443] | : . Number of remaining objects: 2
[08:06:54.443] | : . checking value #1:
[08:06:54.443] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:54.443] | : . 'obj' is MulticoreFuture
[08:06:54.444] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:54.444] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:54.444] | : . ' , ; ` | : . all.equal() for FutureStrategyList ...
[08:06:54.444] | : . ' , ; ` | : . ' New stack:
[08:06:54.444] | : . ' , ; ` | : . ' List of 1
[08:06:54.444] | : . ' , ; ` | : . '  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:54.444] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:54.444] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:54.444] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:54.444] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.444] | : . ' , ; ` | : . '     ...)  
[08:06:54.444] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.444] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.444] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:54.444] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:54.444] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.444] | : . ' , ; ` | : . '     ...)  
[08:06:54.444] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.444] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:54.449] | : . ' , ; ` | : . ' Old stack:
[08:06:54.450] | : . ' , ; ` | : . ' List of 1
[08:06:54.450] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal =[08:06:54.454] | : . readImmediateCondition() ...
 FALSE, envir = parent.frame())  
[08:06:54.450] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:54.450] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:54.450] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:54.450] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.450] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.450] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:54.450] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee1b8c370> 
[08:06:54.450] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:54.450] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.450] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:54.454] | : . ' , ; ` | : . ' Not identical
[08:06:54.454] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.455] | : . ' , ; ` | : . ' all.equal() for future ...
[08:06:54.455] | : . ' Number of RDS files: 0
[08:06:54.455] | : . ' Returned conditions set:
[08:06:54.455] | : . '  list()
[08:06:54.456] | : . readImmediateCondition() ... done
[08:06:54.456] | : . checking value #2:
[08:06:54.456] | : . 'obj' is MulticoreFuture
[08:06:54.455] | : . ' , ; ` | : . ' , List of 2
[08:06:54.455] | : . ' , ; ` | : . ' ,  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:54.455] | : . ' , ; ` | : . ' ,     earlySignal = FALSE, envir = parent.frame())  
[08:06:54.455] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:54.455] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:54.455] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.455] | : . ' , ; ` | : . ' ,     ...)  
[08:06:54.455] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.455] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.455] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategy)
[08:06:54.455] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:54.455] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.455] | : . ' , ; ` | : . ' ,     ...)  
[08:06:54.455] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.455] | : . ' , ; ` | : . ' ,  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:54.455] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:54.455] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:54.455] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:54.455] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.455] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.455] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:54.455] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee1b8c370> 
[08:06:54.455] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:54.455] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.464] | : . ' , ; ` | : . ' , Formals differ
[08:06:54.464] | : . ' , ; ` | : . ' all.equal() for future ... done
[08:06:54.464] | : . ' , ; ` | : . ' Future strategies differ at level 1
[08:06:54.464] | : . ' , ; ` | : . all.equal() for FutureStrategyList ... done
[08:06:54.464] | : . ' , ; ` | : . plan(): Setting new future backend stack:
[08:06:54.465] | : . ' , ; ` | : . List of future strategies:
[08:06:54.465] | : . ' , ; ` | : . 1. multicore:
[08:06:54.465] | : . ' , ; ` | : .    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:06:54.465] | : . ' , ; ` | : .    - tweaked: FALSE
[08:06:54.465] | : . ' , ; ` | : .    - call: plan(strategy)
[08:06:54.467] | : . readImmediateCondition() ...
[08:06:54.467] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.467] | : . ' Number of RDS files: 0
[08:06:54.468] | : . ' Returned conditions set:
[08:06:54.468] | : . '  list()
[08:06:54.468] | : . readImmediateCondition() ... done
[08:06:54.465] | : . ' , ; ` | : . List of 1
[08:06:54.465] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:54.465] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:54.465] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:54.465] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:54.465] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.465] | : . ' , ; ` | : .     ...)  
[08:06:54.465] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.465] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.465] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:54.465] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:54.465] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.465] | : . ' , ; ` | : .     ...)  
[08:06:54.465] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.465] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:54.471] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:54.471] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:54.471] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:54.471] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:54.471] | : . ' , ; ` | : . plan(): nbrOfWorkers() = 2
[08:06:54.472] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:54.472] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:54.472] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:54.479] | : . Number of remaining objects: 2
[08:06:54.479] | : . checking value #1:
[08:06:54.479] | : . 'obj' is MulticoreFuture
[08:06:54.490] | : . readImmediateCondition() ...
[08:06:54.490] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.490] | : . ' Number of RDS files: 0
[08:06:54.490] | : . ' Returned conditions set:
[08:06:54.491] | : . '  list()
[08:06:54.491] | : . readImmediateCondition() ... done
[08:06:54.491] | : . checking value #2:
[08:06:54.491] | : . 'obj' is MulticoreFuture
[08:06:54.492] | : . readImmediateCondition() ...
[08:06:54.492] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.492] | : . ' Number of RDS files: 0
[08:06:54.492] | : . ' Returned conditions set:
[08:06:54.492] | : . '  list()
[08:06:54.493] | : . readImmediateCondition() ... done
[08:06:54.493] | : . MulticoreFuture #2
[08:06:54.493] | : . signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:06:54.493] | : . ' nx: 2
[08:06:54.493] | : . ' relay: TRUE
[08:06:54.493] | : . ' stdout: TRUE
[08:06:54.493] | : . ' signal: TRUE
[08:06:54.493] | : . ' resignal: FALSE
[08:06:54.494] | : . ' force: TRUE
[08:06:54.494] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:54.494] | : . ' queued futures: [n=2] FALSE, FALSE
[08:06:54.494] | : . ' until=1
[08:06:54.494] | : . ' relaying element #1
[08:06:54.494] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:54.494] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:54.494] | : . signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:06:54.495] | : . value(<MulticoreFuture>, ...) ...
[08:06:54.495] | : . value(<MulticoreFuture>, ...) ... done
[08:06:54.495] | : . value() for MulticoreFuture (‘future_lapply-2’) ...
[08:06:54.495] | : . ' result() for MulticoreFuture ...
[08:06:54.496] | : . ' , readImmediateCondition() ...
[08:06:54.496] | : . ' , ; Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.496] | : . ' , ; Number of RDS files: 0
[08:06:54.496] | : . ' , ; Returned conditions set:
[08:06:54.497] | : . ' , ;  list()
[08:06:54.497] | : . ' , readImmediateCondition() ... done
[08:06:54.498] | : . ' , result() for MulticoreFuture ...
[08:06:54.498] | : . ' , result() for MulticoreFuture ... done
[08:06:54.498] | : . ' , signalConditions() ...
[08:06:54.498] | : . ' , ; include = ‘immediateCondition’
[08:06:54.499] | : . ' , ; exclude = 
[08:06:54.499] | : . ' , ; resignal = FALSE
[08:06:54.499] | : . ' , ; Number of conditions: 6
[08:06:54.499] | : . ' , ;  int 6
[08:06:54.500] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.500] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.500] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.501] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.501] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.501] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.501] | : . ' , ; Drop signaled conditions: 0
[08:06:54.501] | : . ' , signalConditions() ... done
[08:06:54.502] | : . ' result() for MulticoreFuture ... done
[08:06:54.502] | : . ' result() for MulticoreFuture ...
[08:06:54.502] | : . ' result() for MulticoreFuture ... done
[08:06:54.502] | : . ' signalConditions() ...
[08:06:54.502] | : . ' , include = ‘immediateCondition’
[08:06:54.502] | : . ' , exclude = 
[08:06:54.503] | : . ' , resignal = FALSE
[08:06:54.503] | : . ' , Number of conditions: 6
[08:06:54.503] | : . ' ,  int 6
[08:06:54.503] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.504] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.504] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.504] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.504] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.504] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.504] | : . ' , Drop signaled conditions: 0
[08:06:54.504] | : . ' signalConditions() ... done
[08:06:54.505] | : . ' check for misuse ...
[08:06:54.505] | : . ' check for misuse ... done
[08:06:54.505] | : . value() for MulticoreFuture (‘future_lapply-2’) ... done
[08:06:54.505] | : . value: <list>
[08:06:54.505] | : . signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:06:54.505] | : . ' nx: 2
[08:06:54.505] | : . ' relay: TRUE
[08:06:54.505] | : . ' stdout: TRUE
[08:06:54.506] | : . ' signal: TRUE
[08:06:54.506] | : . ' resignal: FALSE
[08:06:54.506] | : . ' force: TRUE
[08:06:54.506] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:54.506] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:54.506] | : . ' until=1
[08:06:54.506] | : . ' relaying element #1
[08:06:54.506] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:54.507] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:54.507] | : . signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:06:54.507] | : . resolve() for MulticoreFuture ...
[08:06:54.507] | : . resolve() for MulticoreFuture ... done
[08:06:54.507] | : . length: 1 (resolved future 2)
[08:06:54.507] | : value() for list ... done
[08:06:54.518] | : Number of remaining objects: 1
[08:06:54.518] | : checking value #1:
[08:06:54.518] | : 'obj' is MulticoreFuture
[08:06:54.528] | : readImmediateCondition() ...
[08:06:54.529] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.529] | : . Number of RDS files: 0
[08:06:54.529] | : . Returned conditions set:
[08:06:54.529] | : .  list()
[08:06:54.530] | : readImmediateCondition() ... done
[08:06:54.540] | : Number of remaining objects: 1
[08:06:54.540] | : checking value #1:
[08:06:54.540] | : 'obj' is MulticoreFuture
[08:06:54.551] | : readImmediateCondition() ...
[08:06:54.551] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.551] | : . Number of RDS files: 0
[08:06:54.551] | : . Returned conditions set:
[08:06:54.552] | : .  list()
[08:06:54.552] | : readImmediateCondition() ... done
[08:06:54.562] | : Number of remaining objects: 1
[08:06:54.563] | : checking value #1:
[08:06:54.563] | : 'obj' is MulticoreFuture
[08:06:54.573] | : readImmediateCondition() ...
[08:06:54.573] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.574] | : . Number of RDS files: 0
[08:06:54.574] | : . Returned conditions set:
[08:06:54.574] | : .  list()
[08:06:54.575] | : readImmediateCondition() ... done
[08:06:54.585] | : Number of remaining objects: 1
[08:06:54.585] | : checking value #1:
[08:06:54.585] | : 'obj' is MulticoreFuture
[08:06:54.596] | : readImmediateCondition() ...
[08:06:54.596] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.596] | : . Number of RDS files: 0
[08:06:54.596] | : . Returned conditions set:
[08:06:54.597] | : .  list()
[08:06:54.597] | : readImmediateCondition() ... done
[08:06:54.607] | : Number of remaining objects: 1
[08:06:54.608] | : checking value #1:
[08:06:54.608] | : 'obj' is MulticoreFuture
[08:06:54.618] | : readImmediateCondition() ...
[08:06:54.619] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.619] | : . Number of RDS files: 0
[08:06:54.619] | : . Returned conditions set:
[08:06:54.619] | : .  list()
[08:06:54.620] | : readImmediateCondition() ... done
[08:06:54.630] | : Number of remaining objects: 1
[08:06:54.630] | : checking value #1:
[08:06:54.631] | : 'obj' is MulticoreFuture
[08:06:54.641] | : readImmediateCondition() ...
[08:06:54.642] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.642] | : . Number of RDS files: 0
[08:06:54.642] | : . Returned conditions set:
[08:06:54.642] | : .  list()
[08:06:54.643] | : readImmediateCondition() ... done
[08:06:54.653] | : Number of remaining objects: 1
[08:06:54.654] | : checking value #1:
[08:06:54.654] | : 'obj' is MulticoreFuture
[08:06:54.665] | : readImmediateCondition() ...
[08:06:54.665] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.665] | : . Number of RDS files: 0
[08:06:54.666] | : . Returned conditions set:
[08:06:54.666] | : .  list()
[08:06:54.666] | : readImmediateCondition() ... done
[08:06:54.677] | : Number of remaining objects: 1
[08:06:54.677] | : checking value #1:
[08:06:54.677] | : 'obj' is MulticoreFuture
[08:06:54.688] | : readImmediateCondition() ...
[08:06:54.688] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.689] | : . Number of RDS files: 0
[08:06:54.689] | : . Returned conditions set:
[08:06:54.689] | : .  list()
[08:06:54.689] | : readImmediateCondition() ... done
[08:06:54.700] | : Number of remaining objects: 1
[08:06:54.700] | : checking value #1:
[08:06:54.700] | : 'obj' is MulticoreFuture
[08:06:54.710] | : readImmediateCondition() ...
[08:06:54.711] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.711] | : . Number of RDS files: 0
[08:06:54.711] | : . Returned conditions set:
[08:06:54.711] | : .  list()
[08:06:54.712] | : readImmediateCondition() ... done
[08:06:54.722] | : Number of remaining objects: 1
[08:06:54.722] | : checking value #1:
[08:06:54.722] | : 'obj' is MulticoreFuture
[08:06:54.733] | : readImmediateCondition() ...
[08:06:54.733] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.733] | : . Number of RDS files: 0
[08:06:54.733] | : . Returned conditions set:
[08:06:54.733] | : .  list()
[08:06:54.734] | : readImmediateCondition() ... done
[08:06:54.744] | : Number of remaining objects: 1
[08:06:54.744] | : checking value #1:
[08:06:54.745] | : 'obj' is MulticoreFuture
[08:06:54.755] | : readImmediateCondition() ...
[08:06:54.755] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.755] | : . Number of RDS files: 0
[08:06:54.756] | : . Returned conditions set:
[08:06:54.756] | : .  list()
[08:06:54.756] | : readImmediateCondition() ... done
[08:06:54.766] | : Number of remaining objects: 1
[08:06:54.767] | : checking value #1:
[08:06:54.767] | : 'obj' is MulticoreFuture
[08:06:54.777] | : readImmediateCondition() ...
[08:06:54.777] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.778] | : . Number of RDS files: 0
[08:06:54.778] | : . Returned conditions set:
[08:06:54.778] | : .  list()
[08:06:54.778] | : readImmediateCondition() ... done
[08:06:54.789] | : Number of remaining objects: 1
[08:06:54.789] | : checking value #1:
[08:06:54.789] | : 'obj' is MulticoreFuture
[08:06:54.799] | : readImmediateCondition() ...
[08:06:54.800] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.800] | : . Number of RDS files: 0
[08:06:54.800] | : . Returned conditions set:
[08:06:54.800] | : .  list()
[08:06:54.801] | : readImmediateCondition() ... done
[08:06:54.811] | : Number of remaining objects: 1
[08:06:54.811] | : checking value #1:
[08:06:54.811] | : 'obj' is MulticoreFuture
[08:06:54.822] | : readImmediateCondition() ...
[08:06:54.822] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.822] | : . Number of RDS files: 0
[08:06:54.822] | : . Returned conditions set:
[08:06:54.823] | : .  list()
[08:06:54.823] | : readImmediateCondition() ... done
[08:06:54.833] | : Number of remaining objects: 1
[08:06:54.833] | : checking value #1:
[08:06:54.834] | : 'obj' is MulticoreFuture
[08:06:54.844] | : readImmediateCondition() ...
[08:06:54.844] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.845] | : . Number of RDS files: 0
[08:06:54.845] | : . Returned conditions set:
[08:06:54.845] | : .  list()
[08:06:54.845] | : readImmediateCondition() ... done
[08:06:54.856] | : Number of remaining objects: 1
[08:06:54.856] | : checking value #1:
[08:06:54.856] | : 'obj' is MulticoreFuture
[08:06:54.866] | : readImmediateCondition() ...
[08:06:54.866] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.867] | : . Number of RDS files: 0
[08:06:54.867] | : . Returned conditions set:
[08:06:54.867] | : .  list()
[08:06:54.867] | : readImmediateCondition() ... done
[08:06:54.878] | : Number of remaining objects: 1
[08:06:54.878] | : checking value #1:
[08:06:54.878] | : 'obj' is MulticoreFuture
[08:06:54.889] | : readImmediateCondition() ...
[08:06:54.889] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.889] | : . Number of RDS files: 0
[08:06:54.889] | : . Returned conditions set:
[08:06:54.889] | : .  list()
[08:06:54.890] | : readImmediateCondition() ... done
[08:06:54.900] | : Number of remaining objects: 1
[08:06:54.900] | : checking value #1:
[08:06:54.901] | : 'obj' is MulticoreFuture
[08:06:54.907] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:54.907] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:54.907] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:54.908] | : . ' , ; ` | : . all.equal() for FutureStrategyList ...
[08:06:54.908] | : . ' , ; ` | : . ' New stack:
[08:06:54.911] | : readImmediateCondition() ...
[08:06:54.911] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.911] | : . Number of RDS files: 0
[08:06:54.912] | : . Returned conditions set:
[08:06:54.912] | : .  list()
[08:06:54.912] | : readImmediateCondition() ... done
[08:06:54.908] | : . ' , ; ` | : . ' List of 1
[08:06:54.908] | : . ' , ; ` | : . '  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:54.908] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:54.908] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:54.908] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:54.908] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.908] | : . ' , ; ` | : . '     ...)  
[08:06:54.908] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.908] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.908] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:54.908] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:54.908] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.908] | : . ' , ; ` | : . '     ...)  
[08:06:54.908] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.908] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:54.913] | : . ' , ; ` | : . ' Old stack:
[08:06:54.913] | : . ' , ; ` | : . ' List of 1
[08:06:54.913] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:54.913] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:54.913] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:54.913] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:54.913] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.913] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.913] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:54.913] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eedebb4c08> 
[08:06:54.913] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:54.913] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.913] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:54.917] | : . ' , ; ` | : . ' Not identical
[08:06:54.917] | : . ' , ; ` | : . ' all.equal() for future ...
[08:06:54.923] | : Number of remaining objects: 1
[08:06:54.923] | : checking value #1:
[08:06:54.923] | : 'obj' is MulticoreFuture
[08:06:54.917] | : . ' , ; ` | : . ' , List of 2
[08:06:54.917] | : . ' , ; ` | : . ' ,  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:54.917] | : . ' , ; ` | : . ' ,     earlySignal = FALSE, envir = parent.frame())  
[08:06:54.917] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:54.917] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:54.917] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.917] | : . ' , ; ` | : . ' ,     ...)  
[08:06:54.917] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.917] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.917] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategy)
[08:06:54.917] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:54.917] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.917] | : . ' , ; ` | : . ' ,     ...)  
[08:06:54.917] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.917] | : . ' , ; ` | : . ' ,  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:54.917] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:54.917] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:54.917] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:54.917] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.917] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.917] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:54.917] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eedebb4c08> 
[08:06:54.917] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:54.917] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:54.925] | : . ' , ; ` | : . ' , Formals differ
[08:06:54.925] | : . ' , ; ` | : . ' all.equal() for future ... done
[08:06:54.925] | : . ' , ; ` | : . ' Future strategies differ at level 1
[08:06:54.925] | : . ' , ; ` | : . all.equal() for FutureStrategyList ... done
[08:06:54.925] | : . ' , ; ` | : . plan(): Setting new future backend stack:
[08:06:54.925] | : . ' , ; ` | : . List of future strategies:
[08:06:54.925] | : . ' , ; ` | : . 1. multicore:
[08:06:54.925] | : . ' , ; ` | : .    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:06:54.925] | : . ' , ; ` | : .    - tweaked: FALSE
[08:06:54.925] | : . ' , ; ` | : .    - call: plan(strategy)
[08:06:54.926] | : . ' , ; ` | : . List of 1
[08:06:54.926] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:54.926] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:54.926] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:54.926] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:54.926] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.926] | : . ' , ; ` | : .     ...)  
[08:06:54.926] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.926] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.926] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:54.926] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:54.926] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:54.926] | : . ' , ; ` | : .     ...)  
[08:06:54.926] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:54.926] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:54.930] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:54.930] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:54.930] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:54.931] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:54.931] | : . ' , ; ` | : . plan(): nbrOfWorkers() = 2
[08:06:54.931] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:54.931] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:54.931] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:54.932] | : readImmediateCondition() ...
[08:06:54.932] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.932] | : . Number of RDS files: 0
[08:06:54.932] | : . Returned conditions set:
[08:06:54.932] | : .  list()
[08:06:54.933] | : readImmediateCondition() ... done
[08:06:54.933] | : MulticoreFuture #1
[08:06:54.933] | : signalConditionsASAP(MulticoreFuture, pos=1) ...
[08:06:54.933] | : . nx: 2
[08:06:54.933] | : . relay: TRUE
[08:06:54.933] | : . stdout: TRUE
[08:06:54.933] | : . signal: TRUE
[08:06:54.933] | : . resignal: FALSE
[08:06:54.933] | : . force: TRUE
[08:06:54.934] | : . relayed: [n=2] FALSE, FALSE
[08:06:54.934] | : . queued futures: [n=2] FALSE, TRUE
[08:06:54.934] | : . until=1
[08:06:54.934] | : . relaying element #1
[08:06:54.934] | : . value() for MulticoreFuture (‘future_lapply-1’) ...
[08:06:54.934] | : . ' result() for MulticoreFuture ...
[08:06:54.935] | : . ' , readImmediateCondition() ...
[08:06:54.935] | : . ' , ; Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:54.935] | : . ' , ; Number of RDS files: 0
[08:06:54.935] | : . ' , ; Returned conditions set:
[08:06:54.936] | : . ' , ;  list()
[08:06:54.936] | : . ' , readImmediateCondition() ... done
[08:06:54.936] | : . ' , result() for MulticoreFuture ...
[08:06:54.937] | : . ' , result() for MulticoreFuture ... done
[08:06:54.937] | : . ' , signalConditions() ...
[08:06:54.937] | : . ' , ; include = ‘immediateCondition’
[08:06:54.937] | : . ' , ; exclude = 
[08:06:54.937] | : . ' , ; resignal = FALSE
[08:06:54.937] | : . ' , ; Number of conditions: 6
[08:06:54.938] | : . ' , ;  int 6
[08:06:54.938] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.939] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.939] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.939] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.939] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.939] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.940] | : . ' , ; Drop signaled conditions: 0
[08:06:54.940] | : . ' , signalConditions() ... done
[08:06:54.940] | : . ' result() for MulticoreFuture ... done
[08:06:54.940] | : . ' result() for MulticoreFuture ...
[08:06:54.940] | : . ' result() for MulticoreFuture ... done
[08:06:54.941] | : . ' signalConditions() ...
[08:06:54.941] | : . ' , include = ‘immediateCondition’
[08:06:54.941] | : . ' , exclude = 
[08:06:54.941] | : . ' , resignal = FALSE
[08:06:54.941] | : . ' , Number of conditions: 6
[08:06:54.941] | : . ' ,  int 6
[08:06:54.942] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.942] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.943] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.943] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.943] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.943] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.943] | : . ' , Drop signaled conditions: 0
[08:06:54.943] | : . ' signalConditions() ... done
[08:06:54.943] | : . ' relay stdout ...
[08:06:54.943] | : . ' relay stdout ... done
[08:06:54.944] | : . ' check for misuse ...
[08:06:54.944] | : . ' check for misuse ... done
[08:06:54.944] | : . value() for MulticoreFuture (‘future_lapply-1’) ... done
[08:06:54.944] | : . result() for MulticoreFuture ...
[08:06:54.944] | : . result() for MulticoreFuture ... done
[08:06:54.944] | : . signalConditions() ...
[08:06:54.944] | : . ' include = ‘immediateCondition’
[08:06:54.944] | : . ' exclude = 
[08:06:54.945] | : . ' resignal = FALSE
[08:06:54.945] | : . ' Number of conditions: 6
[08:06:54.945] | : . '  int 6
[08:06:54.945] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.945] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.945] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.946] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.946] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.946] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.946] | : . ' Drop signaled conditions: 0
[08:06:54.946] | : . signalConditions() ... done
[08:06:54.946] | : . result() for MulticoreFuture ...
[08:06:54.946] | : . result() for MulticoreFuture ... done
[08:06:54.947] | : . signalConditions() ...
[08:06:54.947] | : . ' include = ‘condition’
[08:06:54.947] | : . ' exclude = ‘error’, ‘immediateCondition’
[08:06:54.947] | : . ' resignal = TRUE
[08:06:54.947] | : . ' Number of conditions: 6
[08:06:54.947] | : . '  int 6
[08:06:54.948] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.948] | : . ' Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:54.354] | : . ' , ; ` attachPackages() ...
[08:06:54.948] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.948] | : . ' Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:54.355] | : . ' , ; ` | packages: [n=1] ‘future’
[08:06:54.948] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.948] | : . ' Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:54.355] | : . ' , ; ` attachPackages() ... done
[08:06:54.949] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.949] | : . ' Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:54.356] | : . ' , ; ` attachPackages() ...
[08:06:54.949] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.949] | : . ' Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:54.356] | : . ' , ; ` | packages: [n=0] 
[08:06:54.949] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.949] | : . ' Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:54.356] | : . ' , ; ` attachPackages() ... done
[08:06:54.949] | : . ' Drop signaled conditions: 6
[08:06:54.950] | : . signalConditions() ... done
[08:06:54.950] | : . relayed: [n=2] TRUE, FALSE
[08:06:54.950] | : . queued futures: [n=2] TRUE, TRUE
[08:06:54.950] | : signalConditionsASAP(MulticoreFuture, pos=1) ... done
[08:06:54.950] | : value(<MulticoreFuture>, ...) ...
[08:06:54.950] | : value(<MulticoreFuture>, ...) ... done
[08:06:54.950] | : value() for MulticoreFuture (‘future_lapply-1’) ...
[08:06:54.950] | : . result() for MulticoreFuture ...
[08:06:54.951] | : . result() for MulticoreFuture ... done
[08:06:54.951] | : . result() for MulticoreFuture ...
[08:06:54.951] | : . result() for MulticoreFuture ... done
[08:06:54.951] | : . signalConditions() ...
[08:06:54.951] | : . ' include = ‘immediateCondition’
[08:06:54.951] | : . ' exclude = 
[08:06:54.951] | : . ' resignal = FALSE
[08:06:54.951] | : . ' Number of conditions: 0
[08:06:54.951] | : . '  int 0
[08:06:54.952] | : . signalConditions() ... done
[08:06:54.952] | : . check for misuse ...
[08:06:54.952] | : . check for misuse ... done
[08:06:54.952] | : value() for MulticoreFuture (‘future_lapply-1’) ... done
[08:06:54.952] | : value: <list>
[08:06:54.953] | : signalConditionsASAP(MulticoreFuture, pos=1) ...
[08:06:54.953] | : . nx: 2
[08:06:54.953] | : . relay: TRUE
[08:06:54.953] | : . stdout: TRUE
[08:06:54.953] | : . signal: TRUE
[08:06:54.953] | : . resignal: FALSE
[08:06:54.953] | : . force: TRUE
[08:06:54.953] | : . relayed: [n=2] TRUE, FALSE
[08:06:54.953] | : . queued futures: [n=2] TRUE, TRUE
[08:06:54.954] | : . until=2
[08:06:54.954] | : . relaying element #2
[08:06:54.954] | : . value() for MulticoreFuture (‘future_lapply-2’) ...
[08:06:54.954] | : . ' result() for MulticoreFuture ...
[08:06:54.954] | : . ' result() for MulticoreFuture ... done
[08:06:54.954] | : . ' result() for MulticoreFuture ...
[08:06:54.954] | : . ' result() for MulticoreFuture ... done
[08:06:54.954] | : . ' signalConditions() ...
[08:06:54.955] | : . ' , include = ‘immediateCondition’
[08:06:54.955] | : . ' , exclude = 
[08:06:54.955] | : . ' , resignal = FALSE
[08:06:54.955] | : . ' , Number of conditions: 6
[08:06:54.955] | : . ' ,  int 6
[08:06:54.956] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.956] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.956] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.956] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.956] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.956] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.956] | : . ' , Drop signaled conditions: 0
[08:06:54.956] | : . ' signalConditions() ... done
[08:06:54.957] | : . ' relay stdout ...
[08:06:54.957] | : . ' relay stdout ... done
[08:06:54.957] | : . ' check for misuse ...
[08:06:54.957] | : . ' check for misuse ... done
[08:06:54.957] | : . value() for MulticoreFuture (‘future_lapply-2’) ... done
[08:06:54.957] | : . result() for MulticoreFuture ...
[08:06:54.957] | : . result() for MulticoreFuture ... done
[08:06:54.957] | : . signalConditions() ...
[08:06:54.957] | : . ' include = ‘immediateCondition’
[08:06:54.958] | : . ' exclude = 
[08:06:54.958] | : . ' resignal = FALSE
[08:06:54.958] | : . ' Number of conditions: 6
[08:06:54.958] | : . '  int 6
[08:06:54.958] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.959] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.959] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.959] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.959] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.959] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.959] | : . ' Drop signaled conditions: 0
[08:06:54.959] | : . signalConditions() ... done
[08:06:54.959] | : . result() for MulticoreFuture ...
[08:06:54.960] | : . result() for MulticoreFuture ... done
[08:06:54.960] | : . signalConditions() ...
[08:06:54.960] | : . ' include = ‘condition’
[08:06:54.960] | : . ' exclude = ‘error’, ‘immediateCondition’
[08:06:54.960] | : . ' resignal = TRUE
[08:06:54.960] | : . ' Number of conditions: 6
[08:06:54.960] | : . '  int 6
[08:06:54.961] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.961] | : . ' Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:54.388] | : . ' , ; ` attachPackages() ...
[08:06:54.961] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.961] | : . ' Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:54.388] | : . ' , ; ` | packages: [n=1] ‘future’
[08:06:54.961] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.962] | : . ' Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:54.389] | : . ' , ; ` attachPackages() ... done
[08:06:54.962] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.962] | : . ' Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:54.389] | : . ' , ; ` attachPackages() ...
[08:06:54.962] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.962] | : . ' Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:54.389] | : . ' , ; ` | packages: [n=0] 
[08:06:54.962] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:54.962] | : . ' Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:54.390] | : . ' , ; ` attachPackages() ... done
[08:06:54.963] | : . ' Drop signaled conditions: 6
[08:06:54.963] | : . signalConditions() ... done
[08:06:54.963] | : . relayed: [n=2] TRUE, TRUE
[08:06:54.963] | : . queued futures: [n=2] TRUE, TRUE
[08:06:54.963] | : signalConditionsASAP(MulticoreFuture, pos=1) ... done
[08:06:54.963] | : resolve() for MulticoreFuture ...
[08:06:54.963] | : resolve() for MulticoreFuture ... done
[08:06:54.963] | : length: 0 (resolved future 1)
[08:06:54.964] | future_lapply() -> future_xapply() ... done
[08:06:54.964] | Relaying remaining futures ...
[08:06:54.964] | : signalConditionsASAP(NULL, pos=0) ...
[08:06:54.964] | : . nx: 2
[08:06:54.964] | : . relay: TRUE
[08:06:54.964] | : . stdout: TRUE
[08:06:54.964] | : . signal: TRUE
[08:06:54.964] | : . resignal: FALSE
[08:06:54.964] | : . force: TRUE
[08:06:54.965] | : . relayed: [n=2] TRUE, TRUE
[08:06:54.965] | : . queued futures: [n=2] TRUE, TRUE
 - flush all
[08:06:54.965] | : . relayed: [n=2] TRUE, TRUE
[08:06:54.965] | : . queued futures: [n=2] TRUE, TRUE
[08:06:54.965] | : signalConditionsASAP(NULL, pos=0) ... done
[08:06:54.965] | Relaying remaining futures ... done
[08:06:54.965] future_lapply() ... done
[08:06:54.965]  - Number of value chunks collected: 2
[08:06:54.966] Resolving 2 futures (chunks) ... DONE
[08:06:54.966] Reducing values from 2 chunks ...
[08:06:54.966]  - Number of values collected after concatenation: 2
[08:06:54.966]  - Number of values expected: 2
[08:06:54.966] Reducing values from 2 chunks ... DONE


* future_lapply(x, ..., future.stdout = NA) ... DONE
* future_mapply(x, ..., future.stdout = FALSE) ...
[08:06:54.967] future_mapply() ...
[08:06:54.967] | future_mapply() -> future_xapply() ...
[08:06:54.967] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:54.967] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:54.968] | : Number of chunks: 2
[08:06:54.968] | : getGlobalsAndPackagesXApply() ...
[08:06:54.968] | : . future.globals: TRUE
[08:06:54.968] | : . getGlobalsAndPackages() ...
[08:06:54.968] | : . ' Searching for globals ...
[08:06:54.980] | : . ' , globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[08:06:54.980] | : . ' Searching for globals ... done
[08:06:54.980] | : . ' Resolving globals: FALSE
[08:06:54.980] | : . ' Search for packages associated with the globals ...
[08:06:54.981] | : . ' , Packages associated with globals: [1] ‘base’
[08:06:54.981] | : . ' , Packages: [1] ‘base’
[08:06:54.981] | : . ' Search for packages associated with the globals ... done
[08:06:54.981] | : . ' The total size of the 1 globals is 1.04 KiB (1066 bytes)
[08:06:54.982] | : . ' The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[08:06:54.982] | : . ' Packages after dropping 'base': [0] 
[08:06:54.982] | : . ' globals: [1] ‘FUN’
[08:06:54.982] | : . ' packages: [0] 
[08:06:54.982] | : . getGlobalsAndPackages() ... done
[08:06:54.982] | : . globals found/used: [n=1] ‘FUN’
[08:06:54.982] | : . needed namespaces: [n=0] 
[08:06:54.982] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[08:06:54.983] | : . List of 2
[08:06:54.983] | : .  $ ...future.FUN:function (x, y)  
[08:06:54.983] | : .  $ MoreArgs     : NULL
[08:06:54.983] | : .  - attr(*, "where")=List of 2
[08:06:54.983] | : .   ..$ ...future.FUN:<environment: 0x55eee2f8fb78> 
[08:06:54.983] | : .   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[08:06:54.983] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:54.983] | : .  - attr(*, "resolved")= logi FALSE
[08:06:54.983] | : .  - attr(*, "total_size")= num NA
[08:06:54.985] | : . Packages to be attached in all futures: [n=0] 
[08:06:54.985] | : getGlobalsAndPackagesXApply() ... done
[08:06:54.986] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:54.986] | : List of 5
[08:06:54.986] | :  $ ...future.FUN            :function (x, y)  
[08:06:54.986] | :  $ MoreArgs                 : NULL
[08:06:54.986] | :  $ ...future.elements_ii    : NULL
[08:06:54.986] | :  $ ...future.seeds_ii       : NULL
[08:06:54.986] | :  $ ...future.globals.maxSize: NULL
[08:06:54.986] | :  - attr(*, "where")=List of 5
[08:06:54.986] | :   ..$ ...future.FUN            :<environment: 0x55eee2f8fb78> 
[08:06:54.986] | :   ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[08:06:54.986] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:54.986] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:54.986] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:54.986] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:54.986] | :  - attr(*, "resolved")= logi FALSE
[08:06:54.986] | :  - attr(*, "total_size")= num NA
[08:06:54.990] | : Number of futures (= number of chunks): 2
[08:06:54.990] | : Launching 2 futures (chunks) ...
[08:06:54.990] | : Chunk #1 of 2 ...
[08:06:54.990] | :  - Finding globals in '...' for chunk #1 ...
[08:06:54.990] | : getGlobalsAndPackages() ...
[08:06:54.990] | : . Searching for globals ...
[08:06:54.991] | : . ' globals found: [0] 
[08:06:54.991] | : . Searching for globals ... done
[08:06:54.991] | : . globals: [0] <none>
[08:06:54.991] | : . packages: [0] <none>
[08:06:54.991] | : getGlobalsAndPackages() ... done
[08:06:54.991] | :    + additional globals found: [n=0] 
[08:06:54.991] | :    + additional namespaces needed: [n=0] 
[08:06:54.992] | :  - Finding globals in '...' for chunk #1 ... DONE
[08:06:54.992] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:06:54.992] | :  - seeds: <none>
[08:06:54.992] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:54.992] | : future(..., label = ‘future_mapply-1’) ...
[08:06:54.992] | : . lazy: FALSE
[08:06:54.992] | : . stdout: FALSE
[08:06:54.992] | : . conditions: [n=1] ‘condition’
[08:06:54.992] | : . gc: FALSE
[08:06:54.992] | : . earlySignal: FALSE
[08:06:54.993] | : . getGlobalsAndPackages() ...
[08:06:54.993] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:54.993] | : . ' Resolving globals: FALSE
[08:06:54.993] | : . ' Search for packages associated with the globals ...
[08:06:54.993] | : . ' , Packages associated with globals: [0] 
[08:06:54.993] | : . ' , Packages: [0] 
[08:06:54.993] | : . ' Search for packages associated with the globals ... done
[08:06:54.994] | : . ' Packages after dropping 'base': [0] 
[08:06:54.994] | : . ' globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:54.994] | : . ' packages: [0] 
[08:06:54.994] | : . getGlobalsAndPackages() ... done
[08:06:54.994] | : . run() for ‘Future’ (‘future_mapply-1’) ...
[08:06:54.994] | : . ' state: ‘created’
[08:06:54.995] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:54.995] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:54.995] | : . ' Using MulticoreFutureBackend ...
[08:06:54.995] | : . ' , Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:06:54.995] | : . ' , Launching futures ...
[08:06:54.995] | : . ' , ; launchFuture() for MulticoreFutureBackend ...
[08:06:54.995] | : . ' , ; ` getFutureData() ...
[08:06:54.995] | : . ' , ; ` | getFutureCore() ...
[08:06:54.995] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:06:54.996] | : . ' , ; ` | getFutureCore() ... done
[08:06:54.996] | : . ' , ; ` | getFutureCapture() ...
[08:06:54.996] | : . ' , ; ` | getFutureCapture() ... done
[08:06:54.996] | : . ' , ; ` | getFutureContext() ...
[08:06:54.996] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:54.996] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:06:54.996] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:54.996] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:06:54.996] | : . ' , ; ` | getFutureContext() ... done
[08:06:54.997] | : . ' , ; ` getFutureData() ... done
[08:06:54.997] | : . ' , ; ` requestCore(..., workers = 2) ...
[08:06:54.997] | : . ' , ; ` requestCore(..., workers = 2) ... done
[08:06:55.000] | : . ' , ; ` MulticoreFuture started
[08:06:55.000] | : . ' , ; launchFuture() for MulticoreFutureBackend ... done
[08:06:55.000] | : . ' , Launching futures ... done
[08:06:55.001] | : . ' , Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:55.001] | : . ' Using MulticoreFutureBackend ... done
[08:06:55.001] | : . run() for ‘Future’ (‘future_mapply-1’) ... done
[08:06:55.001] | : future(..., label = ‘future_mapply-1’) ... done
[08:06:55.001] | : Created future:
[08:06:55.003] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:55.003] | : . ' , ; ` | Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:06:55.004] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:55.004] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:55.004] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:55.004] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:06:55.005] | : . ' , ; ` | : . New stack:
[08:06:55.005] | : . ' , ; ` | : . List of 1
[08:06:55.005] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:55.005] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:55.005] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:06:55.005] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.005] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.005] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.005] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.005] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:55.009] | : . ' , ; ` | : . Old stack:
[08:06:55.014] | : readImmediateCondition() ...
[08:06:55.014] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.009] | : . ' , ; ` | : . List of 1
[08:06:55.009] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:55.009] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:55.009] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:55.009] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:55.009] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.009] | : . ' , ; ` | : .     ...)  
[08:06:55.009] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.009] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.009] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:55.009] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:55.009] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.009] | : . ' , ; ` | : .     ...)  
[08:06:55.009] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.009] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:55.014] | : . ' , ; ` | : . Not identical
[08:06:55.014] | : . Number of RDS files: 0
[08:06:55.014] | : . ' , ; ` | : . all.equal() for future ...
[08:06:55.014] | : . Returned conditions set:
[08:06:55.015] | : .  list()
[08:06:55.015] | : readImmediateCondition() ... done
[08:06:55.002] | : MulticoreFuture:
[08:06:55.002] | : Label: ‘future_mapply-1’
[08:06:55.002] | : Expression:
[08:06:55.002] | : {
[08:06:55.002] | :     "# future.apply:::future_xapply(): preserve future option"
[08:06:55.002] | :     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:55.002] | :     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:55.002] | :         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:55.002] | :         on.exit(options(oopts), add = TRUE)
[08:06:55.002] | :     }
[08:06:55.002] | :     {
[08:06:55.002] | :         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[08:06:55.002] | :             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[08:06:55.002] | :         do.call(mapply, args = args)
[08:06:55.002] | :     }
[08:06:55.002] | : }
[08:06:55.002] | : Globals: 5 objects totaling 6.51 KiB (function ‘...future.FUN’ of 1.04 KiB, list ‘...future.elements_ii’ of 71 bytes, NULL ‘MoreArgs’ of 27 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:55.002] | : Packages: <none>
[08:06:55.002] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:55.002] | : Capture standard output: FALSE
[08:06:55.002] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:55.002] | : Immediate condition classes: ‘immediateCondition’
[08:06:55.002] | : Lazy evaluation: FALSE
[08:06:55.002] | : Local evaluation: TRUE
[08:06:55.002] | : Asynchronous evaluation: TRUE
[08:06:55.002] | : Early signaling: FALSE
[08:06:55.002] | : Environment: R_GlobalEnv
[08:06:55.002] | : State: ‘running’
[08:06:55.002] | : Resolved: FALSE
[08:06:55.002] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-13
[08:06:55.002] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:55.002] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:55.002] | : Value: <not collected>
[08:06:55.002] | : Conditions captured: <none>
[08:06:55.016] | : Chunk #1 of 2 ... DONE
[08:06:55.016] | : Chunk #2 of 2 ...
[08:06:55.016] | :  - Finding globals in '...' for chunk #2 ...
[08:06:55.016] | : getGlobalsAndPackages() ...
[08:06:55.016] | : . Searching for globals ...
[08:06:55.018] | : . ' globals found: [0] 
[08:06:55.018] | : . Searching for globals ... done
[08:06:55.018] | : . globals: [0] <none>
[08:06:55.018] | : . packages: [0] <none>
[08:06:55.018] | : getGlobalsAndPackages() ... done
[08:06:55.018] | :    + additional globals found: [n=0] 
[08:06:55.018] | :    + additional namespaces needed: [n=0] 
[08:06:55.019] | :  - Finding globals in '...' for chunk #2 ... DONE
[08:06:55.019] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:06:55.019] | :  - seeds: <none>
[08:06:55.019] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:55.019] | : future(..., label = ‘future_mapply-2’) ...
[08:06:55.019] | : . lazy: FALSE
[08:06:55.019] | : . stdout: FALSE
[08:06:55.019] | : . conditions: [n=1] ‘condition’
[08:06:55.020] | : . gc: FALSE
[08:06:55.020] | : . earlySignal: FALSE
[08:06:55.020] | : . getGlobalsAndPackages() ...
[08:06:55.020] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:55.020] | : . ' Resolving globals: FALSE
[08:06:55.020] | : . ' Search for packages associated with the globals ...
[08:06:55.021] | : . ' , Packages associated with globals: [0] 
[08:06:55.021] | : . ' , Packages: [0] 
[08:06:55.014] | : . ' , ; ` | : . ' List of 2
[08:06:55.014] | : . ' , ; ` | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:55.014] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:55.014] | : . ' , ; ` | : . '   ..- attr(*, "init")= logi TRUE
[08:06:55.014] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.014] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.014] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.014] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.014] | : . ' , ; ` | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:55.014] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:55.014] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multipro[08:06:55.021] | : . ' Search for packages associated with the globals ... done
cess" "future" "function"
[08:06:55.014] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:55.014] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.014] | : . ' , ; ` | : . '     ...)  
[08:06:55.014] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.014] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.014] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:55.014] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:55.014] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.014] | : . ' , ; ` | : . '     ...)  
[08:06:55.014] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.021] | : . ' Packages after dropping 'base': [0] 
[08:06:55.022] | : . ' globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:55.022] | : . ' packages: [0] 
[08:06:55.022] | : . getGlobalsAndPackages() ... done
[08:06:55.022] | : . ' , ; ` | : . ' Formals differ
[08:06:55.022] | : . ' , ; ` | : . all.equal() for future ... done
[08:06:55.022] | : . run() for ‘Future’ (‘future_mapply-2’) ...
[08:06:55.022] | : . ' , ; ` | : . Future strategies differ at level 1
[08:06:55.022] | : . ' state: ‘created’
[08:06:55.022] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:06:55.023] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:55.023] | : . ' , ; ` | : plan(): Setting new future backend stack:
[08:06:55.023] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:55.023] | : . ' Using MulticoreFutureBackend ...
[08:06:55.023] | : . ' , Number of futures since start: 7 (7 created, 7 launched, 6 finished)
[08:06:55.023] | : . ' , Launching futures ...
[08:06:55.023] | : . ' , ; ` | : List of future strategies:
[08:06:55.023] | : . ' , ; ` | : 1. sequential:
[08:06:55.023] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:55.023] | : . ' , ; ` | :    - tweaked: FALSE
[08:06:55.023] | : . ' , ; ` | :    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.023] | : . ' , ; launchFuture() for MulticoreFutureBackend ...
[08:06:55.024] | : . ' , ; ` getFutureData() ...
[08:06:55.024] | : . ' , ; ` | getFutureCore() ...
[08:06:55.024] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:06:55.024] | : . ' , ; ` | getFutureCore() ... done
[08:06:55.024] | : . ' , ; ` | getFutureCapture() ...
[08:06:55.024] | : . ' , ; ` | getFutureCapture() ... done
[08:06:55.024] | : . ' , ; ` | getFutureContext() ...
[08:06:55.025] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:55.025] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:06:55.025] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:55.025] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:06:55.025] | : . ' , ; ` | getFutureContext() ... done
[08:06:55.025] | : . ' , ; ` getFutureData() ... done
[08:06:55.026] | : . ' , ; ` requestCore(..., workers = 2) ...
[08:06:55.026] | : . ' , ; ` requestCore(..., workers = 2) ... done
[08:06:55.024] | : . ' , ; ` | : List of 1
[08:06:55.024] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:55.024] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:55.024] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:06:55.024] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.024] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.024] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.024] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.024] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:55.027] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:55.028] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:55.028] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:55.028] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:06:55.029] | : . ' , ; ` MulticoreFuture started
[08:06:55.029] | : . ' , ; launchFuture() for MulticoreFutureBackend ... done
[08:06:55.030] | : . ' , Launching futures ... done
[08:06:55.030] | : . ' , Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:55.030] | : . ' Using MulticoreFutureBackend ... done
[08:06:55.031] | : . run() for ‘Future’ (‘future_mapply-2’) ... done
[08:06:55.028] | : . ' , ; ` | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:55.028] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:55.028] | : . ' , ; ` | : . '  - attr(*, "init")= logi TRUE
[08:06:55.028] | : . ' , ; ` | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.028] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.028] | : . ' , ; ` | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.028] | : . ' , ; ` | : . '  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.031] | : future(..., label = ‘future_mapply-2’) ... done
[08:06:55.031] | : . ' , ; ` | : . ' init: TRUE
[08:06:55.031] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ...
[08:06:55.031] | : Created future:
[08:06:55.031] | : . ' , ; ` | : . ' , Backend function: <‘NULL’>
[08:06:55.031] | : . ' , ; ` | : . ' , Evaluator tweak arguments: [n=0]
[08:06:55.032] | : . ' , ; ` | : . ' ,  list()
[08:06:55.032] | : . ' , ; ` | : . ' , Evaluator formal arguments: [n=2]
[08:06:55.032] | : . ' , ; ` | : . ' ,  list()
[08:06:55.032] | : . ' , ; ` | : . ' , Backend factory arguments: [n=2]
[08:06:55.033] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:55.034] | : . ' , ; ` | Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:06:55.033] | : . ' , ; ` | : . ' , Dotted pair list of 2
[08:06:55.033] | : . ' , ; ` | : . ' ,  $ gc         : logi FALSE
[08:06:55.033] | : . ' , ; ` | : . ' ,  $ earlySignal: logi FALSE
[08:06:55.034] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:55.034] | : . ' , ; ` | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:06:55.034] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ... done
[08:06:55.035] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:06:55.035] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:55.035] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:55.035] | : . ' , ; ` | : plan(): nbrOfWorkers() = 1
[08:06:55.035] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:55.035] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:55.035] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:55.035] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:06:55.035] | : . ' , ; ` | : . New stack:
[08:06:55.035] | : . ' , ; ` assign_globals() ...
[08:06:55.036] | : . ' , ; ` | : . List of 1
[08:06:55.036] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:55.036] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:55.036] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:06:55.036] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.036] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.036] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.036] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.036] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:55.040] | : . ' , ; ` | : . Old stack:
[08:06:55.036] | : . ' , ; ` List of 5
[08:06:55.036] | : . ' , ; `  $ ...future.FUN            :function (x, y)  
[08:06:55.036] | : . ' , ; `  $ MoreArgs                 : NULL
[08:06:55.036] | : . ' , ; `  $ ...future.elements_ii    :List of 2
[08:06:55.036] | : . ' , ; `   ..$ :List of 1
[08:06:55.036] | : . ' , ; `   .. ..$ : int 1
[08:06:55.036] | : . ' , ; `   ..$ :List of 1
[08:06:55.036] | : . ' , ; `   .. ..$ : int 0
[08:06:55.036] | : . ' , ; `  $ ...future.seeds_ii       : NULL
[08:06:55.036] | : . ' , ; `  $ ...future.globals.maxSize: NULL
[08:06:55.036] | : . ' , ; `  - attr(*, "where")=List of 5
[08:06:55.036] | : . ' , ; `   ..$ ...future.FUN            :<environment: 0x55eee2f8fb78> 
[08:06:55.036] | : . ' , ; `   ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[08:06:55.036] | : . ' , ; `   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:55.036] | : . ' , ; `   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:55.036] | : . ' , ; `   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:55.036] | : . ' , ; `  - attr(*, "resolved")= logi FALSE
[08:06:55.036] | : . ' , ; `  - attr(*, "total_size")= num NA
[08:06:55.036] | : . ' , ; `  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:55.036] | : . ' , ; `  - attr(*, "already-done")= logi TRUE
[08:06:55.043] | : . ' , ; ` - copied ‘...future.FUN’ to environment
[08:06:55.044] | : . ' , ; ` - copied ‘MoreArgs’ to environment
[08:06:55.044] | : . ' , ; ` - copied ‘...future.elements_ii’ to environment
[08:06:55.044] | : . ' , ; ` - copied ‘...future.seeds_ii’ to environment
[08:06:55.044] | : . ' , ; ` - copied ‘...future.globals.maxSize’ to environment
[08:06:55.044] | : readImmediateCondition() ...
[08:06:55.044] | : . ' , ; ` assign_globals() ... done
[08:06:55.044] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.045] | : . Number of RDS files: 0
[08:06:55.045] | : . Returned conditions set:
[08:06:55.045] | : .  list()
[08:06:55.046] | : readImmediateCondition() ... done
[08:06:55.040] | : . ' , ; ` | : . List of 1
[08:06:55.040] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:55.040] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:55.040] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:55.040] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:55.040] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.040] | : . ' , ; ` | : .     ...)  
[08:06:55.040] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.040] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.040] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:55.040] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:55.040] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.040] | : . ' , ; ` | : .     ...)  
[08:06:55.040] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.040] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:55.046] | : . ' , ; ` | : . Not identical
[08:06:55.031] | : MulticoreFuture:
[08:06:55.031] | : Label: ‘future_mapply-2’
[08:06:55.031] | : Expression:
[08:06:55.031] | : {
[08:06:55.031] | :     "# future.apply:::future_xapply(): preserve future option"
[08:06:55.031] | :     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:55.031] | :     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:55.031] | :         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:55.031] | :         on.exit(options(oopts), add = TRUE)
[08:06:55.031] | :     }
[08:06:55.031] | :     {
[08:06:55.031] | :         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[08:06:55.031] | :             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[08:06:55.031] | :         do.call(mapply, args = args)
[08:06:55.031] | :     }
[08:06:55.031] | : }
[08:06:55.031] | : Globals: 5 objects totaling 6.51 KiB (function ‘...future.FUN’ of 1.04 KiB, list ‘...future.elements_ii’ of 71 bytes, NULL ‘MoreArgs’ of 27 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:55.031] | : Packages: <none>
[08:06:55.031] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:55.031] | : Capture standard output: FALSE
[08:06:55.031] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:55.031] | : Immediate condition classes: ‘immediateCondition’
[08:06:55.031] | : Lazy evaluation: FALSE
[08:06:55.031] | : Local evaluation: TRUE
[08:06:55.031] | : Asynchronous evaluation: TRUE
[08:06:55.031] | : Early signaling: FALSE
[08:06:55.031] | : Environment: R_GlobalEnv
[08:06:55.031] | : State: ‘running’
[08:06:55.031] | : Resolved: FALSE
[08:06:55.031] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-14
[08:06:55.031] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:55.031] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:55.031] | : Value: <not collected>
[08:06:55.031] | : Conditions captured: <none>
[08:06:55.046] | : . ' , ; ` | : . all.equal() for future ...
[08:06:55.047] | : Chunk #2 of 2 ... DONE
[08:06:55.047] | : Launching 2 futures (chunks) ... DONE
[08:06:55.047] | : Resolving 2 futures (chunks) ...
[08:06:55.047] | : value() for list ...
[08:06:55.048] | : . recursive: 0
[08:06:55.048] | : . reduce: FALSE
[08:06:55.048] | : . length: 2

[08:06:55.049] | : . Number of remaining objects: 2
[08:06:55.049] | : . checking value #1:
[08:06:55.049] | : . 'obj' is MulticoreFuture
[08:06:55.047] | : . ' , ; ` | : . ' List of 2
[08:06:55.047] | : . ' , ; ` | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:55.047] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:55.047] | : . ' , ; ` | : . '   ..- attr(*, "init")= logi TRUE
[08:06:55.047] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.047] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.047] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.047] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.047] | : . ' , ; ` | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:55.047] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:55.047] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:55.047] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:55.047] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.047] | : . ' , ; ` | : . '     ...)  
[08:06:55.047] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.047] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.047] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:55.047] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:55.047] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.047] | : . ' , ; ` | : . '     ...)  
[08:06:55.047] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.055] | : . ' , ; ` | : . ' Formals differ
[08:06:55.055] | : . ' , ; ` | : . all.equal() for future ... done
[08:06:55.056] | : . ' , ; ` | : . Future strategies differ at level 1
[08:06:55.056] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:06:55.056] | : . ' , ; ` | : plan(): Setting new future backend stack:
[08:06:55.056] | : . ' , ; ` | : List of future strategies:
[08:06:55.056] | : . ' , ; ` | : 1. sequential:
[08:06:55.056] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:55.056] | : . ' , ; ` | :    - tweaked: FALSE
[08:06:55.056] | : . ' , ; ` | :    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.059] | : . readImmediateCondition() ...
[08:06:55.060] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.060] | : . ' Number of RDS files: 0
[08:06:55.060] | : . ' Returned conditions set:
[08:06:55.057] | : . ' , ; ` | : List of 1
[08:06:55.057] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:55.057] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:55.057] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:06:55.057] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.057] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.057] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.057] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.057] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:55.060] | : . '  list()
[08:06:55.061] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:55.061] | : . readImmediateCondition() ... done
[08:06:55.061] | : . checking value #2:
[08:06:55.061] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:55.061] | : . 'obj' is MulticoreFuture
[08:06:55.061] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:55.062] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:06:55.062] | : . ' , ; ` | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:55.062] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:55.062] | : . ' , ; ` | : . '  - attr(*, "init")= logi TRUE
[08:06:55.062] | : . ' , ; ` | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.062] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.062] | : . ' , ; ` | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.062] | : . ' , ; ` | : . '  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.065] | : . ' , ; ` | : . ' init: TRUE
[08:06:55.065] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ...
[08:06:55.065] | : . ' , ; ` | : . ' , Backend function: <‘NULL’>
[08:06:55.065] | : . ' , ; ` | : . ' , Evaluator tweak arguments: [n=0]
[08:06:55.065] | : . ' , ; ` | : . ' ,  list()
[08:06:55.066] | : . ' , ; ` | : . ' , Evaluator formal arguments: [n=2]
[08:06:55.066] | : . ' , ; ` | : . ' ,  list()
[08:06:55.066] | : . ' , ; ` | : . ' , Backend factory arguments: [n=2]
[08:06:55.066] | : . ' , ; ` | : . ' , Dotted pair list of 2
[08:06:55.066] | : . ' , ; ` | : . ' ,  $ gc         : logi FALSE
[08:06:55.066] | : . ' , ; ` | : . ' ,  $ earlySignal: logi FALSE
[08:06:55.068] | : . ' , ; ` | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:06:55.068] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ... done
[08:06:55.068] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:06:55.068] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:55.068] | : . ' , ; ` | : plan(): nbrOfWorkers() = 1
[08:06:55.069] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:55.069] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:55.069] | : . ' , ; ` assign_globals() ...
[08:06:55.072] | : . readImmediateCondition() ...
[08:06:55.072] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.072] | : . ' Number of RDS files: 0
[08:06:55.073] | : . ' Returned conditions set:
[08:06:55.073] | : . '  list()
[08:06:55.073] | : . readImmediateCondition() ... done
[08:06:55.069] | : . ' , ; ` List of 5
[08:06:55.069] | : . ' , ; `  $ ...future.FUN            :function (x, y)  
[08:06:55.069] | : . ' , ; `  $ MoreArgs                 : NULL
[08:06:55.069] | : . ' , ; `  $ ...future.elements_ii    :List of 2
[08:06:55.069] | : . ' , ; `   ..$ :List of 1
[08:06:55.069] | : . ' , ; `   .. ..$ : int 0
[08:06:55.069] | : . ' , ; `   ..$ :List of 1
[08:06:55.069] | : . ' , ; `   .. ..$ : int 1
[08:06:55.069] | : . ' , ; `  $ ...future.seeds_ii       : NULL
[08:06:55.069] | : . ' , ; `  $ ...future.globals.maxSize: NULL
[08:06:55.069] | : . ' , ; `  - attr(*, "where")=List of 5
[08:06:55.069] | : . ' , ; `   ..$ ...future.FUN            :<environment: 0x55eee2f8fb78> 
[08:06:55.069] | : . ' , ; `   ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[08:06:55.069] | : . ' , ; `   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:55.069] | : . ' , ; `   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:55.069] | : . ' , ; `   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:55.069] | : . ' , ; `  - attr(*, "resolved")= logi FALSE
[08:06:55.069] | : . ' , ; `  - attr(*, "total_size")= num NA
[08:06:55.069] | : . ' , ; `  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:55.069] | : . ' , ; `  - attr(*, "already-done")= logi TRUE
[08:06:55.077] | : . ' , ; ` - copied ‘...future.FUN’ to environment
[08:06:55.078] | : . ' , ; ` - copied ‘MoreArgs’ to environment
[08:06:55.078] | : . ' , ; ` - copied ‘...future.elements_ii’ to environment
[08:06:55.078] | : . ' , ; ` - copied ‘...future.seeds_ii’ to environment
[08:06:55.078] | : . ' , ; ` - copied ‘...future.globals.maxSize’ to environment
[08:06:55.078] | : . ' , ; ` assign_globals() ... done
[08:06:55.081] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:55.082] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:55.082] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:55.082] | : . ' , ; ` | : . all.equal() for FutureStrategyList ...
[08:06:55.082] | : . ' , ; ` | : . ' New stack:
[08:06:55.084] | : . Number of remaining objects: 2
[08:06:55.084] | : . checking value #1:
[08:06:55.084] | : . 'obj' is MulticoreFuture
[08:06:55.082] | : . ' , ; ` | : . ' List of 1
[08:06:55.082] | : . ' , ; ` | : . '  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:55.082] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:55.082] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:55.082] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:55.082] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.082] | : . ' , ; ` | : . '     ...)  
[08:06:55.082] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.082] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.082] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:55.082] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:55.082] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.082] | : . ' , ; ` | : . '     ...)  
[08:06:55.082] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.082] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:55.088] | : . ' , ; ` | : . ' Old stack:
[08:06:55.088] | : . ' , ; ` | : . ' List of 1
[08:06:55.088] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:55.088] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:55.088] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:55.088] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.088] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.088] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.088] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.088] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee27466d0> 
[08:06:55.088] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.088] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.088] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:55.093] | : . ' , ; ` | : . ' Not identical
[08:06:55.093] | : . ' , ; ` | : . ' all.equal() for future ...
[08:06:55.094] | : . readImmediateCondition() ...
[08:06:55.095] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.095] | : . ' Number of RDS files: 0
[08:06:55.095] | : . ' Returned conditions set:
[08:06:55.095] | : . '  list()
[08:06:55.096] | : . readImmediateCondition() ... done
[08:06:55.096] | : . checking value #2:
[08:06:55.096] | : . 'obj' is MulticoreFuture
[08:06:55.106] | : . readImmediateCondition() ...
[08:06:55.094] | : . ' , ; ` | : . ' , List of 2
[08:06:55.094] | : . ' , ; ` | : . ' ,  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:55.094] | : . ' , ; ` | : . ' ,     earlySignal = FALSE, envir = parent.frame())  
[08:06:55.094] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:55.094] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:55.094] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.094] | : . ' , ; ` | : . ' ,     ...)  
[08:06:55.094] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.094] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.094] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategy)
[08:06:55.094] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:55.094] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.094] | : . ' , ; ` | : . ' ,     ...)  
[08:06:55.094] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.094] | : . ' , ; ` | : . ' ,  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:55.094] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:55.094] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:55.094] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.094] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.094] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.094] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.094] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee27466d0> 
[08:06:55.094] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.094] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.106] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.106] | : . ' Number of RDS files: 0
[08:06:55.107] | : . ' Returned conditions set:
[08:06:55.107] | : . '  list()
[08:06:55.107] | : . ' , ; ` | : . ' , Formals differ
[08:06:55.107] | : . readImmediateCondition() ... done
[08:06:55.107] | : . ' , ; ` | : . ' all.equal() for future ... done
[08:06:55.107] | : . ' , ; ` | : . ' Future strategies differ at level 1
[08:06:55.108] | : . ' , ; ` | : . all.equal() for FutureStrategyList ... done
[08:06:55.108] | : . ' , ; ` | : . plan(): Setting new future backend stack:
[08:06:55.108] | : . ' , ; ` | : . List of future strategies:
[08:06:55.108] | : . ' , ; ` | : . 1. multicore:
[08:06:55.108] | : . ' , ; ` | : .    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:06:55.108] | : . ' , ; ` | : .    - tweaked: FALSE
[08:06:55.108] | : . ' , ; ` | : .    - call: plan(strategy)
[08:06:55.108] | : . ' , ; ` | : . List of 1
[08:06:55.108] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:55.108] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:55.108] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:55.108] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:55.108] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.108] | : . ' , ; ` | : .     ...)  
[08:06:55.108] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.108] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.108] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:55.108] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:55.108] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.108] | : . ' , ; ` | : .     ...)  
[08:06:55.108] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.108] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:55.113] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:55.113] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:55.113] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:55.113] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:55.114] | : . ' , ; ` | : . plan(): nbrOfWorkers() = 2
[08:06:55.114] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:55.114] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:55.114] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:55.117] | : . Number of remaining objects: 2
[08:06:55.118] | : . checking value #1:
[08:06:55.118] | : . 'obj' is MulticoreFuture
[08:06:55.128] | : . readImmediateCondition() ...
[08:06:55.128] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.129] | : . ' Number of RDS files: 0
[08:06:55.129] | : . ' Returned conditions set:
[08:06:55.129] | : . '  list()
[08:06:55.129] | : . readImmediateCondition() ... done
[08:06:55.129] | : . checking value #2:
[08:06:55.130] | : . 'obj' is MulticoreFuture
[08:06:55.130] | : . readImmediateCondition() ...
[08:06:55.130] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.130] | : . ' Number of RDS files: 0
[08:06:55.130] | : . ' Returned conditions set:
[08:06:55.130] | : . '  list()
[08:06:55.131] | : . readImmediateCondition() ... done
[08:06:55.131] | : . MulticoreFuture #2
[08:06:55.131] | : . signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:06:55.131] | : . ' nx: 2
[08:06:55.131] | : . ' relay: TRUE
[08:06:55.131] | : . ' stdout: TRUE
[08:06:55.131] | : . ' signal: TRUE
[08:06:55.131] | : . ' resignal: FALSE
[08:06:55.132] | : . ' force: TRUE
[08:06:55.132] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:55.132] | : . ' queued futures: [n=2] FALSE, FALSE
[08:06:55.132] | : . ' until=1
[08:06:55.132] | : . ' relaying element #1
[08:06:55.132] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:55.132] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:55.132] | : . signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:06:55.133] | : . value(<MulticoreFuture>, ...) ...
[08:06:55.133] | : . value(<MulticoreFuture>, ...) ... done
[08:06:55.133] | : . value() for MulticoreFuture (‘future_mapply-2’) ...
[08:06:55.133] | : . ' result() for MulticoreFuture ...
[08:06:55.134] | : . ' , readImmediateCondition() ...
[08:06:55.134] | : . ' , ; Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.134] | : . ' , ; Number of RDS files: 0
[08:06:55.134] | : . ' , ; Returned conditions set:
[08:06:55.134] | : . ' , ;  list()
[08:06:55.135] | : . ' , readImmediateCondition() ... done
[08:06:55.135] | : . ' , result() for MulticoreFuture ...
[08:06:55.135] | : . ' , result() for MulticoreFuture ... done
[08:06:55.136] | : . ' , signalConditions() ...
[08:06:55.136] | : . ' , ; include = ‘immediateCondition’
[08:06:55.136] | : . ' , ; exclude = 
[08:06:55.136] | : . ' , ; resignal = FALSE
[08:06:55.136] | : . ' , ; Number of conditions: 6
[08:06:55.136] | : . ' , ;  int 6
[08:06:55.137] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.137] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.137] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.137] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.138] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.138] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.138] | : . ' , ; Drop signaled conditions: 0
[08:06:55.138] | : . ' , signalConditions() ... done
[08:06:55.138] | : . ' result() for MulticoreFuture ... done
[08:06:55.138] | : . ' result() for MulticoreFuture ...
[08:06:55.138] | : . ' result() for MulticoreFuture ... done
[08:06:55.139] | : . ' signalConditions() ...
[08:06:55.139] | : . ' , include = ‘immediateCondition’
[08:06:55.139] | : . ' , exclude = 
[08:06:55.139] | : . ' , resignal = FALSE
[08:06:55.139] | : . ' , Number of conditions: 6
[08:06:55.139] | : . ' ,  int 6
[08:06:55.140] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.140] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.140] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.140] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.140] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.140] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.140] | : . ' , Drop signaled conditions: 0
[08:06:55.141] | : . ' signalConditions() ... done
[08:06:55.141] | : . ' check for misuse ...
[08:06:55.141] | : . ' check for misuse ... done
[08:06:55.141] | : . value() for MulticoreFuture (‘future_mapply-2’) ... done
[08:06:55.141] | : . value: <list>
[08:06:55.141] | : . signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:06:55.141] | : . ' nx: 2
[08:06:55.141] | : . ' relay: TRUE
[08:06:55.142] | : . ' stdout: TRUE
[08:06:55.142] | : . ' signal: TRUE
[08:06:55.142] | : . ' resignal: FALSE
[08:06:55.142] | : . ' force: TRUE
[08:06:55.142] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:55.142] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:55.142] | : . ' until=1
[08:06:55.142] | : . ' relaying element #1
[08:06:55.143] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:55.143] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:55.143] | : . signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:06:55.143] | : . resolve() for MulticoreFuture ...
[08:06:55.143] | : . resolve() for MulticoreFuture ... done
[08:06:55.143] | : . length: 1 (resolved future 2)
[08:06:55.143] | : value() for list ... done
[08:06:55.154] | : Number of remaining objects: 1
[08:06:55.154] | : checking value #1:
[08:06:55.154] | : 'obj' is MulticoreFuture
[08:06:55.164] | : readImmediateCondition() ...
[08:06:55.164] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.165] | : . Number of RDS files: 0
[08:06:55.165] | : . Returned conditions set:
[08:06:55.165] | : .  list()
[08:06:55.165] | : readImmediateCondition() ... done
[08:06:55.175] | : Number of remaining objects: 1
[08:06:55.176] | : checking value #1:
[08:06:55.176] | : 'obj' is MulticoreFuture
[08:06:55.186] | : readImmediateCondition() ...
[08:06:55.186] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.186] | : . Number of RDS files: 0
[08:06:55.187] | : . Returned conditions set:
[08:06:55.187] | : .  list()
[08:06:55.187] | : readImmediateCondition() ... done
[08:06:55.197] | : Number of remaining objects: 1
[08:06:55.198] | : checking value #1:
[08:06:55.198] | : 'obj' is MulticoreFuture
[08:06:55.208] | : readImmediateCondition() ...
[08:06:55.208] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.208] | : . Number of RDS files: 0
[08:06:55.209] | : . Returned conditions set:
[08:06:55.209] | : .  list()
[08:06:55.209] | : readImmediateCondition() ... done
[08:06:55.220] | : Number of remaining objects: 1
[08:06:55.220] | : checking value #1:
[08:06:55.220] | : 'obj' is MulticoreFuture
[08:06:55.230] | : readImmediateCondition() ...
[08:06:55.230] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.231] | : . Number of RDS files: 0
[08:06:55.231] | : . Returned conditions set:
[08:06:55.231] | : .  list()
[08:06:55.232] | : readImmediateCondition() ... done
[08:06:55.242] | : Number of remaining objects: 1
[08:06:55.242] | : checking value #1:
[08:06:55.242] | : 'obj' is MulticoreFuture
[08:06:55.253] | : readImmediateCondition() ...
[08:06:55.253] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.253] | : . Number of RDS files: 0
[08:06:55.253] | : . Returned conditions set:
[08:06:55.253] | : .  list()
[08:06:55.254] | : readImmediateCondition() ... done
[08:06:55.264] | : Number of remaining objects: 1
[08:06:55.264] | : checking value #1:
[08:06:55.264] | : 'obj' is MulticoreFuture
[08:06:55.275] | : readImmediateCondition() ...
[08:06:55.275] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.275] | : . Number of RDS files: 0
[08:06:55.276] | : . Returned conditions set:
[08:06:55.276] | : .  list()
[08:06:55.276] | : readImmediateCondition() ... done
[08:06:55.286] | : Number of remaining objects: 1
[08:06:55.287] | : checking value #1:
[08:06:55.287] | : 'obj' is MulticoreFuture
[08:06:55.297] | : readImmediateCondition() ...
[08:06:55.297] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.298] | : . Number of RDS files: 0
[08:06:55.298] | : . Returned conditions set:
[08:06:55.298] | : .  list()
[08:06:55.299] | : readImmediateCondition() ... done
[08:06:55.309] | : Number of remaining objects: 1
[08:06:55.309] | : checking value #1:
[08:06:55.309] | : 'obj' is MulticoreFuture
[08:06:55.319] | : readImmediateCondition() ...
[08:06:55.320] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.320] | : . Number of RDS files: 0
[08:06:55.320] | : . Returned conditions set:
[08:06:55.320] | : .  list()
[08:06:55.321] | : readImmediateCondition() ... done
[08:06:55.331] | : Number of remaining objects: 1
[08:06:55.331] | : checking value #1:
[08:06:55.331] | : 'obj' is MulticoreFuture
[08:06:55.342] | : readImmediateCondition() ...
[08:06:55.342] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.342] | : . Number of RDS files: 0
[08:06:55.342] | : . Returned conditions set:
[08:06:55.342] | : .  list()
[08:06:55.343] | : readImmediateCondition() ... done
[08:06:55.353] | : Number of remaining objects: 1
[08:06:55.353] | : checking value #1:
[08:06:55.354] | : 'obj' is MulticoreFuture
[08:06:55.364] | : readImmediateCondition() ...
[08:06:55.364] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.364] | : . Number of RDS files: 0
[08:06:55.364] | : . Returned conditions set:
[08:06:55.365] | : .  list()
[08:06:55.365] | : readImmediateCondition() ... done
[08:06:55.375] | : Number of remaining objects: 1
[08:06:55.375] | : checking value #1:
[08:06:55.376] | : 'obj' is MulticoreFuture
[08:06:55.386] | : readImmediateCondition() ...
[08:06:55.386] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.386] | : . Number of RDS files: 0
[08:06:55.387] | : . Returned conditions set:
[08:06:55.387] | : .  list()
[08:06:55.387] | : readImmediateCondition() ... done
[08:06:55.397] | : Number of remaining objects: 1
[08:06:55.398] | : checking value #1:
[08:06:55.398] | : 'obj' is MulticoreFuture
[08:06:55.408] | : readImmediateCondition() ...
[08:06:55.408] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.409] | : . Number of RDS files: 0
[08:06:55.409] | : . Returned conditions set:
[08:06:55.409] | : .  list()
[08:06:55.409] | : readImmediateCondition() ... done
[08:06:55.419] | : Number of remaining objects: 1
[08:06:55.420] | : checking value #1:
[08:06:55.420] | : 'obj' is MulticoreFuture
[08:06:55.430] | : readImmediateCondition() ...
[08:06:55.430] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.431] | : . Number of RDS files: 0
[08:06:55.431] | : . Returned conditions set:
[08:06:55.431] | : .  list()
[08:06:55.431] | : readImmediateCondition() ... done
[08:06:55.442] | : Number of remaining objects: 1
[08:06:55.442] | : checking value #1:
[08:06:55.442] | : 'obj' is MulticoreFuture
[08:06:55.452] | : readImmediateCondition() ...
[08:06:55.452] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.453] | : . Number of RDS files: 0
[08:06:55.453] | : . Returned conditions set:
[08:06:55.453] | : .  list()
[08:06:55.453] | : readImmediateCondition() ... done
[08:06:55.464] | : Number of remaining objects: 1
[08:06:55.464] | : checking value #1:
[08:06:55.464] | : 'obj' is MulticoreFuture
[08:06:55.474] | : readImmediateCondition() ...
[08:06:55.475] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.475] | : . Number of RDS files: 0
[08:06:55.475] | : . Returned conditions set:
[08:06:55.475] | : .  list()
[08:06:55.476] | : readImmediateCondition() ... done
[08:06:55.486] | : Number of remaining objects: 1
[08:06:55.486] | : checking value #1:
[08:06:55.486] | : 'obj' is MulticoreFuture
[08:06:55.496] | : readImmediateCondition() ...
[08:06:55.497] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.497] | : . Number of RDS files: 0
[08:06:55.497] | : . Returned conditions set:
[08:06:55.497] | : .  list()
[08:06:55.498] | : readImmediateCondition() ... done
[08:06:55.508] | : Number of remaining objects: 1
[08:06:55.508] | : checking value #1:
[08:06:55.508] | : 'obj' is MulticoreFuture
[08:06:55.519] | : readImmediateCondition() ...
[08:06:55.519] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.519] | : . Number of RDS files: 0
[08:06:55.519] | : . Returned conditions set:
[08:06:55.519] | : .  list()
[08:06:55.520] | : readImmediateCondition() ... done
[08:06:55.530] | : Number of remaining objects: 1
[08:06:55.530] | : checking value #1:
[08:06:55.530] | : 'obj' is MulticoreFuture
[08:06:55.541] | : readImmediateCondition() ...
[08:06:55.541] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.541] | : . Number of RDS files: 0
[08:06:55.541] | : . Returned conditions set:
[08:06:55.542] | : .  list()
[08:06:55.542] | : readImmediateCondition() ... done
[08:06:55.548] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:55.548] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:55.548] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:55.548] | : . ' , ; ` | : . all.equal() for FutureStrategyList ...
[08:06:55.549] | : . ' , ; ` | : . ' New stack:
[08:06:55.552] | : Number of remaining objects: 1
[08:06:55.552] | : checking value #1:
[08:06:55.549] | : . ' , ; ` | : . ' List of 1
[08:06:55.549] | : . ' , ; ` | : . '  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:55.549] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:55.549] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:55.549] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:55.549] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.549] | : . ' , ; ` | : . '     ...)  
[08:06:55.549] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.549] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.549] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:55.549] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:55.549] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.549] | : . ' , ; ` | : . '     ...)  
[08:06:55.549] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.549] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:55.553] | : 'obj' is MulticoreFuture
[08:06:55.553] | : . ' , ; ` | : . ' Old stack:
[08:06:55.553] | : . ' , ; ` | : . ' List of 1
[08:06:55.553] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:55.553] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:55.553] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:55.553] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.553] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.553] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.553] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.553] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee22ec430> 
[08:06:55.553] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.553] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.553] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:55.557] | : . ' , ; ` | : . ' Not identical
[08:06:55.557] | : . ' , ; ` | : . ' all.equal() for future ...
[08:06:55.563] | : readImmediateCondition() ...
[08:06:55.563] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.557] | : . ' , ; ` | : . ' , List of 2
[08:06:55.557] | : . ' , ; ` | : . ' ,  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:55.557] | : . ' , ; ` | : . ' ,     earlySignal = FALSE, envir = parent.frame())  
[08:06:55.557] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:55.557] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:55.557] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.557] | : . ' , ; ` | : . ' ,     ...)  
[08:06:55.557] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.557] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.557] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategy)
[08:06:55.557] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:55.557] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.557] | : . ' , ; ` | : . ' ,     ...)  
[08:06:55.557] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.557] | : . ' , ; ` | : . ' ,  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:55.557] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:55.557] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:55.557] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.557] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.557] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.557] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.557] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee22ec430> 
[08:06:55.557] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.557] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.563] | : . Number of RDS files: 0
[08:06:55.564] | : . Returned conditions set:
[08:06:55.564] | : . ' , ; ` | : . ' , Formals differ
[08:06:55.564] | : .  list()
[08:06:55.564] | : . ' , ; ` | : . ' all.equal() for future ... done
[08:06:55.564] | : readImmediateCondition() ... done
[08:06:55.564] | : . ' , ; ` | : . ' Future strategies differ at level 1
[08:06:55.564] | : . ' , ; ` | : . all.equal() for FutureStrategyList ... done
[08:06:55.565] | : . ' , ; ` | : . plan(): Setting new future backend stack:
[08:06:55.565] | : . ' , ; ` | : . List of future strategies:
[08:06:55.565] | : . ' , ; ` | : . 1. multicore:
[08:06:55.565] | : . ' , ; ` | : .    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:06:55.565] | : . ' , ; ` | : .    - tweaked: FALSE
[08:06:55.565] | : . ' , ; ` | : .    - call: plan(strategy)
[08:06:55.565] | : . ' , ; ` | : . List of 1
[08:06:55.565] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:55.565] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:55.565] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:55.565] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:55.565] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.565] | : . ' , ; ` | : .     ...)  
[08:06:55.565] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.565] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.565] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:55.565] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:55.565] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.565] | : . ' , ; ` | : .     ...)  
[08:06:55.565] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.565] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:55.569] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:55.570] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:55.570] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:55.570] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:55.570] | : . ' , ; ` | : . plan(): nbrOfWorkers() = 2
[08:06:55.570] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:55.570] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:55.571] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:55.574] | : Number of remaining objects: 1
[08:06:55.575] | : checking value #1:
[08:06:55.575] | : 'obj' is MulticoreFuture
[08:06:55.575] | : readImmediateCondition() ...
[08:06:55.575] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.575] | : . Number of RDS files: 0
[08:06:55.575] | : . Returned conditions set:
[08:06:55.576] | : .  list()
[08:06:55.576] | : readImmediateCondition() ... done
[08:06:55.576] | : MulticoreFuture #1
[08:06:55.576] | : signalConditionsASAP(MulticoreFuture, pos=1) ...
[08:06:55.576] | : . nx: 2
[08:06:55.576] | : . relay: TRUE
[08:06:55.577] | : . stdout: TRUE
[08:06:55.577] | : . signal: TRUE
[08:06:55.577] | : . resignal: FALSE
[08:06:55.577] | : . force: TRUE
[08:06:55.577] | : . relayed: [n=2] FALSE, FALSE
[08:06:55.577] | : . queued futures: [n=2] FALSE, TRUE
[08:06:55.577] | : . until=1
[08:06:55.577] | : . relaying element #1
[08:06:55.577] | : . value() for MulticoreFuture (‘future_mapply-1’) ...
[08:06:55.578] | : . ' result() for MulticoreFuture ...
[08:06:55.578] | : . ' , readImmediateCondition() ...
[08:06:55.578] | : . ' , ; Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.579] | : . ' , ; Number of RDS files: 0
[08:06:55.579] | : . ' , ; Returned conditions set:
[08:06:55.579] | : . ' , ;  list()
[08:06:55.579] | : . ' , readImmediateCondition() ... done
[08:06:55.579] | : . ' , result() for MulticoreFuture ...
[08:06:55.580] | : . ' , result() for MulticoreFuture ... done
[08:06:55.580] | : . ' , signalConditions() ...
[08:06:55.580] | : . ' , ; include = ‘immediateCondition’
[08:06:55.580] | : . ' , ; exclude = 
[08:06:55.580] | : . ' , ; resignal = FALSE
[08:06:55.580] | : . ' , ; Number of conditions: 6
[08:06:55.580] | : . ' , ;  int 6
[08:06:55.581] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.581] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.581] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.584] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.584] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.584] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.584] | : . ' , ; Drop signaled conditions: 0
[08:06:55.584] | : . ' , signalConditions() ... done
[08:06:55.585] | : . ' result() for MulticoreFuture ... done
[08:06:55.585] | : . ' result() for MulticoreFuture ...
[08:06:55.585] | : . ' result() for MulticoreFuture ... done
[08:06:55.585] | : . ' signalConditions() ...
[08:06:55.585] | : . ' , include = ‘immediateCondition’
[08:06:55.585] | : . ' , exclude = 
[08:06:55.585] | : . ' , resignal = FALSE
[08:06:55.585] | : . ' , Number of conditions: 6
[08:06:55.586] | : . ' ,  int 6
[08:06:55.586] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.586] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.586] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.587] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.587] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.587] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.587] | : . ' , Drop signaled conditions: 0
[08:06:55.587] | : . ' signalConditions() ... done
[08:06:55.587] | : . ' relay stdout ...
[08:06:55.587] | : . ' relay stdout ... done
[08:06:55.587] | : . ' check for misuse ...
[08:06:55.588] | : . ' check for misuse ... done
[08:06:55.588] | : . value() for MulticoreFuture (‘future_mapply-1’) ... done
[08:06:55.588] | : . result() for MulticoreFuture ...
[08:06:55.588] | : . result() for MulticoreFuture ... done
[08:06:55.588] | : . signalConditions() ...
[08:06:55.588] | : . ' include = ‘immediateCondition’
[08:06:55.588] | : . ' exclude = 
[08:06:55.588] | : . ' resignal = FALSE
[08:06:55.589] | : . ' Number of conditions: 6
[08:06:55.589] | : . '  int 6
[08:06:55.589] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.589] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.589] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.590] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.590] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.590] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.590] | : . ' Drop signaled conditions: 0
[08:06:55.590] | : . signalConditions() ... done
[08:06:55.590] | : . result() for MulticoreFuture ...
[08:06:55.590] | : . result() for MulticoreFuture ... done
[08:06:55.590] | : . signalConditions() ...
[08:06:55.590] | : . ' include = ‘condition’
[08:06:55.591] | : . ' exclude = ‘error’, ‘immediateCondition’
[08:06:55.591] | : . ' resignal = TRUE
[08:06:55.591] | : . ' Number of conditions: 6
[08:06:55.591] | : . '  int 6
[08:06:55.591] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.592] | : . ' Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.001] | : . ' , ; ` attachPackages() ...
[08:06:55.592] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.592] | : . ' Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.001] | : . ' , ; ` | packages: [n=1] ‘future’
[08:06:55.592] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.592] | : . ' Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.001] | : . ' , ; ` attachPackages() ... done
[08:06:55.592] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.592] | : . ' Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.002] | : . ' , ; ` attachPackages() ...
[08:06:55.593] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.593] | : . ' Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.002] | : . ' , ; ` | packages: [n=0] 
[08:06:55.593] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.593] | : . ' Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.002] | : . ' , ; ` attachPackages() ... done
[08:06:55.593] | : . ' Drop signaled conditions: 6
[08:06:55.593] | : . signalConditions() ... done
[08:06:55.593] | : . relayed: [n=2] TRUE, FALSE
[08:06:55.594] | : . queued futures: [n=2] TRUE, TRUE
[08:06:55.594] | : signalConditionsASAP(MulticoreFuture, pos=1) ... done
[08:06:55.594] | : value(<MulticoreFuture>, ...) ...
[08:06:55.594] | : value(<MulticoreFuture>, ...) ... done
[08:06:55.594] | : value() for MulticoreFuture (‘future_mapply-1’) ...
[08:06:55.594] | : . result() for MulticoreFuture ...
[08:06:55.594] | : . result() for MulticoreFuture ... done
[08:06:55.595] | : . result() for MulticoreFuture ...
[08:06:55.595] | : . result() for MulticoreFuture ... done
[08:06:55.595] | : . signalConditions() ...
[08:06:55.595] | : . ' include = ‘immediateCondition’
[08:06:55.595] | : . ' exclude = 
[08:06:55.595] | : . ' resignal = FALSE
[08:06:55.595] | : . ' Number of conditions: 0
[08:06:55.595] | : . '  int 0
[08:06:55.596] | : . signalConditions() ... done
[08:06:55.596] | : . check for misuse ...
[08:06:55.596] | : . check for misuse ... done
[08:06:55.596] | : value() for MulticoreFuture (‘future_mapply-1’) ... done
[08:06:55.596] | : value: <list>
[08:06:55.597] | : signalConditionsASAP(MulticoreFuture, pos=1) ...
[08:06:55.597] | : . nx: 2
[08:06:55.597] | : . relay: TRUE
[08:06:55.597] | : . stdout: TRUE
[08:06:55.597] | : . signal: TRUE
[08:06:55.597] | : . resignal: FALSE
[08:06:55.597] | : . force: TRUE
[08:06:55.597] | : . relayed: [n=2] TRUE, FALSE
[08:06:55.597] | : . queued futures: [n=2] TRUE, TRUE
[08:06:55.598] | : . until=2
[08:06:55.598] | : . relaying element #2
[08:06:55.598] | : . value() for MulticoreFuture (‘future_mapply-2’) ...
[08:06:55.598] | : . ' result() for MulticoreFuture ...
[08:06:55.598] | : . ' result() for MulticoreFuture ... done
[08:06:55.598] | : . ' result() for MulticoreFuture ...
[08:06:55.598] | : . ' result() for MulticoreFuture ... done
[08:06:55.598] | : . ' signalConditions() ...
[08:06:55.599] | : . ' , include = ‘immediateCondition’
[08:06:55.599] | : . ' , exclude = 
[08:06:55.599] | : . ' , resignal = FALSE
[08:06:55.599] | : . ' , Number of conditions: 6
[08:06:55.599] | : . ' ,  int 6
[08:06:55.600] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.600] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.600] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.600] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.600] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.600] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.600] | : . ' , Drop signaled conditions: 0
[08:06:55.600] | : . ' signalConditions() ... done
[08:06:55.601] | : . ' relay stdout ...
[08:06:55.601] | : . ' relay stdout ... done
[08:06:55.601] | : . ' check for misuse ...
[08:06:55.601] | : . ' check for misuse ... done
[08:06:55.601] | : . value() for MulticoreFuture (‘future_mapply-2’) ... done
[08:06:55.601] | : . result() for MulticoreFuture ...
[08:06:55.601] | : . result() for MulticoreFuture ... done
[08:06:55.602] | : . signalConditions() ...
[08:06:55.602] | : . ' include = ‘immediateCondition’
[08:06:55.602] | : . ' exclude = 
[08:06:55.602] | : . ' resignal = FALSE
[08:06:55.602] | : . ' Number of conditions: 6
[08:06:55.602] | : . '  int 6
[08:06:55.603] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.603] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.603] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.603] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.603] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.603] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.603] | : . ' Drop signaled conditions: 0
[08:06:55.604] | : . signalConditions() ... done
[08:06:55.604] | : . result() for MulticoreFuture ...
[08:06:55.604] | : . result() for MulticoreFuture ... done
[08:06:55.604] | : . signalConditions() ...
[08:06:55.604] | : . ' include = ‘condition’
[08:06:55.604] | : . ' exclude = ‘error’, ‘immediateCondition’
[08:06:55.604] | : . ' resignal = TRUE
[08:06:55.604] | : . ' Number of conditions: 6
[08:06:55.605] | : . '  int 6
[08:06:55.605] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.605] | : . ' Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.030] | : . ' , ; ` attachPackages() ...
[08:06:55.605] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.606] | : . ' Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.031] | : . ' , ; ` | packages: [n=1] ‘future’
[08:06:55.606] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.606] | : . ' Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.031] | : . ' , ; ` attachPackages() ... done
[08:06:55.606] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.606] | : . ' Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.031] | : . ' , ; ` attachPackages() ...
[08:06:55.606] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.606] | : . ' Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.032] | : . ' , ; ` | packages: [n=0] 
[08:06:55.607] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.607] | : . ' Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.032] | : . ' , ; ` attachPackages() ... done
[08:06:55.607] | : . ' Drop signaled conditions: 6
[08:06:55.607] | : . signalConditions() ... done
[08:06:55.607] | : . relayed: [n=2] TRUE, TRUE
[08:06:55.607] | : . queued futures: [n=2] TRUE, TRUE
[08:06:55.607] | : signalConditionsASAP(MulticoreFuture, pos=1) ... done
[08:06:55.608] | : resolve() for MulticoreFuture ...
[08:06:55.608] | : resolve() for MulticoreFuture ... done
[08:06:55.608] | : length: 0 (resolved future 1)
[08:06:55.608] | future_mapply() -> future_xapply() ... done
[08:06:55.608] | Relaying remaining futures ...
[08:06:55.608] | : signalConditionsASAP(NULL, pos=0) ...
[08:06:55.608] | : . nx: 2
[08:06:55.609] | : . relay: TRUE
[08:06:55.609] | : . stdout: TRUE
[08:06:55.609] | : . signal: TRUE
[08:06:55.609] | : . resignal: FALSE
[08:06:55.609] | : . force: TRUE
[08:06:55.609] | : . relayed: [n=2] TRUE, TRUE
[08:06:55.609] | : . queued futures: [n=2] TRUE, TRUE
 - flush all
[08:06:55.609] | : . relayed: [n=2] TRUE, TRUE
[08:06:55.610] | : . queued futures: [n=2] TRUE, TRUE
[08:06:55.610] | : signalConditionsASAP(NULL, pos=0) ... done
[08:06:55.610] | Relaying remaining futures ... done
[08:06:55.610] future_mapply() ... done
[08:06:55.610]  - Number of value chunks collected: 2
[08:06:55.610] Resolving 2 futures (chunks) ... DONE
[08:06:55.610] Reducing values from 2 chunks ...
[08:06:55.610]  - Number of values collected after concatenation: 2
[08:06:55.611]  - Number of values expected: 2
[08:06:55.611] Reducing values from 2 chunks ... DONE


* future_mapply(x, ..., future.stdout = FALSE) ... DONE
* future_mapply(x, ..., future.stdout = TRUE) ...
[08:06:55.611] future_mapply() ...
[08:06:55.612] | future_mapply() -> future_xapply() ...
[08:06:55.612] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:55.612] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:55.612] | : Number of chunks: 2
[08:06:55.613] | : getGlobalsAndPackagesXApply() ...
[08:06:55.613] | : . future.globals: TRUE
[08:06:55.613] | : . getGlobalsAndPackages() ...
[08:06:55.613] | : . ' Searching for globals ...
[08:06:55.623] | : . ' , globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[08:06:55.623] | : . ' Searching for globals ... done
[08:06:55.623] | : . ' Resolving globals: FALSE
[08:06:55.623] | : . ' Search for packages associated with the globals ...
[08:06:55.624] | : . ' , Packages associated with globals: [1] ‘base’
[08:06:55.624] | : . ' , Packages: [1] ‘base’
[08:06:55.624] | : . ' Search for packages associated with the globals ... done
[08:06:55.624] | : . ' The total size of the 1 globals is 1.04 KiB (1066 bytes)
[08:06:55.625] | : . ' The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[08:06:55.625] | : . ' Packages after dropping 'base': [0] 
[08:06:55.625] | : . ' globals: [1] ‘FUN’
[08:06:55.625] | : . ' packages: [0] 
[08:06:55.625] | : . getGlobalsAndPackages() ... done
[08:06:55.625] | : . globals found/used: [n=1] ‘FUN’
[08:06:55.625] | : . needed namespaces: [n=0] 
[08:06:55.626] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[08:06:55.626] | : . List of 2
[08:06:55.626] | : .  $ ...future.FUN:function (x, y)  
[08:06:55.626] | : .  $ MoreArgs     : NULL
[08:06:55.626] | : .  - attr(*, "where")=List of 2
[08:06:55.626] | : .   ..$ ...future.FUN:<environment: 0x55eede2ef348> 
[08:06:55.626] | : .   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[08:06:55.626] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:55.626] | : .  - attr(*, "resolved")= logi FALSE
[08:06:55.626] | : .  - attr(*, "total_size")= num NA
[08:06:55.628] | : . Packages to be attached in all futures: [n=0] 
[08:06:55.629] | : getGlobalsAndPackagesXApply() ... done
[08:06:55.629] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:55.629] | : List of 5
[08:06:55.629] | :  $ ...future.FUN            :function (x, y)  
[08:06:55.629] | :  $ MoreArgs                 : NULL
[08:06:55.629] | :  $ ...future.elements_ii    : NULL
[08:06:55.629] | :  $ ...future.seeds_ii       : NULL
[08:06:55.629] | :  $ ...future.globals.maxSize: NULL
[08:06:55.629] | :  - attr(*, "where")=List of 5
[08:06:55.629] | :   ..$ ...future.FUN            :<environment: 0x55eede2ef348> 
[08:06:55.629] | :   ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[08:06:55.629] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:55.629] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:55.629] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:55.629] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:55.629] | :  - attr(*, "resolved")= logi FALSE
[08:06:55.629] | :  - attr(*, "total_size")= num NA
[08:06:55.633] | : Number of futures (= number of chunks): 2
[08:06:55.633] | : Launching 2 futures (chunks) ...
[08:06:55.633] | : Chunk #1 of 2 ...
[08:06:55.633] | :  - Finding globals in '...' for chunk #1 ...
[08:06:55.633] | : getGlobalsAndPackages() ...
[08:06:55.633] | : . Searching for globals ...
[08:06:55.634] | : . ' globals found: [0] 
[08:06:55.634] | : . Searching for globals ... done
[08:06:55.634] | : . globals: [0] <none>
[08:06:55.634] | : . packages: [0] <none>
[08:06:55.634] | : getGlobalsAndPackages() ... done
[08:06:55.635] | :    + additional globals found: [n=0] 
[08:06:55.635] | :    + additional namespaces needed: [n=0] 
[08:06:55.635] | :  - Finding globals in '...' for chunk #1 ... DONE
[08:06:55.635] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:06:55.635] | :  - seeds: <none>
[08:06:55.635] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:55.635] | : future(..., label = ‘future_mapply-1’) ...
[08:06:55.635] | : . lazy: FALSE
[08:06:55.635] | : . stdout: TRUE
[08:06:55.636] | : . conditions: [n=1] ‘condition’
[08:06:55.636] | : . gc: FALSE
[08:06:55.636] | : . earlySignal: FALSE
[08:06:55.636] | : . getGlobalsAndPackages() ...
[08:06:55.636] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:55.636] | : . ' Resolving globals: FALSE
[08:06:55.636] | : . ' Search for packages associated with the globals ...
[08:06:55.636] | : . ' , Packages associated with globals: [0] 
[08:06:55.637] | : . ' , Packages: [0] 
[08:06:55.637] | : . ' Search for packages associated with the globals ... done
[08:06:55.637] | : . ' Packages after dropping 'base': [0] 
[08:06:55.637] | : . ' globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:55.637] | : . ' packages: [0] 
[08:06:55.637] | : . getGlobalsAndPackages() ... done
[08:06:55.638] | : . run() for ‘Future’ (‘future_mapply-1’) ...
[08:06:55.638] | : . ' state: ‘created’
[08:06:55.638] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:55.638] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:55.638] | : . ' Using MulticoreFutureBackend ...
[08:06:55.638] | : . ' , Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:06:55.638] | : . ' , Launching futures ...
[08:06:55.638] | : . ' , ; launchFuture() for MulticoreFutureBackend ...
[08:06:55.639] | : . ' , ; ` getFutureData() ...
[08:06:55.639] | : . ' , ; ` | getFutureCore() ...
[08:06:55.639] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:06:55.639] | : . ' , ; ` | getFutureCore() ... done
[08:06:55.639] | : . ' , ; ` | getFutureCapture() ...
[08:06:55.639] | : . ' , ; ` | getFutureCapture() ... done
[08:06:55.639] | : . ' , ; ` | getFutureContext() ...
[08:06:55.639] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:55.639] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:06:55.640] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:55.640] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:06:55.640] | : . ' , ; ` | getFutureContext() ... done
[08:06:55.640] | : . ' , ; ` getFutureData() ... done
[08:06:55.640] | : . ' , ; ` requestCore(..., workers = 2) ...
[08:06:55.640] | : . ' , ; ` requestCore(..., workers = 2) ... done
[08:06:55.643] | : . ' , ; ` MulticoreFuture started
[08:06:55.643] | : . ' , ; launchFuture() for MulticoreFutureBackend ... done
[08:06:55.644] | : . ' , Launching futures ... done
[08:06:55.644] | : . ' , Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:55.644] | : . ' Using MulticoreFutureBackend ... done
[08:06:55.644] | : . run() for ‘Future’ (‘future_mapply-1’) ... done
[08:06:55.644] | : future(..., label = ‘future_mapply-1’) ... done
[08:06:55.645] | : Created future:
[08:06:55.646] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:55.646] | : . ' , ; ` | Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:06:55.647] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:55.647] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:55.647] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:55.648] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:06:55.648] | : . ' , ; ` | : . New stack:
[08:06:55.648] | : . ' , ; ` | : . List of 1
[08:06:55.648] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:55.648] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:55.648] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:06:55.648] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.648] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.648] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.648] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.648] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:55.653] | : . ' , ; ` | : . Old stack:
[08:06:55.657] | : readImmediateCondition() ...
[08:06:55.657] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.657] | : . Number of RDS files: 0
[08:06:55.657] | : . Returned conditions set:
[08:06:55.658] | : .  list()
[08:06:55.658] | : readImmediateCondition() ... done
[08:06:55.645] | : MulticoreFuture:
[08:06:55.645] | : Label: ‘future_mapply-1’
[08:06:55.645] | : Expression:
[08:06:55.645] | : {
[08:06:55.645] | :     "# future.apply:::future_xapply(): preserve future option"
[08:06:55.645] | :     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:55.645] | :     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:55.645] | :         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:55.645] | :         on.exit(options(oopts), add = TRUE)
[08:06:55.645] | :     }
[08:06:55.645] | :     {
[08:06:55.645] | :         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[08:06:55.645] | :             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[08:06:55.645] | :         do.call(mapply, args = args)
[08:06:55.645] | :     }
[08:06:55.645] | : }
[08:06:55.645] | : Globals: 5 objects totaling 6.51 KiB (function ‘...future.FUN’ of 1.04 KiB, list ‘...future.elements_ii’ of 71 bytes, NULL ‘MoreArgs’ of 27 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:55.645] | : Packages: <none>
[08:06:55.645] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:55.645] | : Capture standard output: TRUE
[08:06:55.645] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:55.645] | : Immediate condition classes: ‘immediateCondition’
[08:06:55.645] | : Lazy evaluation: FALSE
[08:06:55.645] | : Local evaluation: TRUE
[08:06:55.645] | : Asynchronous evaluation: TRUE
[08:06:55.645] | : Early signaling: FALSE
[08:06:55.645] | : Environment: R_GlobalEnv
[08:06:55.645] | : State: ‘running’
[08:06:55.645] | : Resolved: FALSE
[08:06:55.645] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-15
[08:06:55.645] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:55.645] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:55.645] | : Value: <not collected>
[08:06:55.645] | : Conditions captured: <none>
[08:06:55.653] | : . ' , ; ` | : . List of 1
[08:06:55.653] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:55.653] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:55.653] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:55.653] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:55.653] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.653] | : . ' , ; ` | : .     ...)  
[08:06:55.653] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.653] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.653] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:55.653] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:55.653] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.653] | : . ' , ; ` | : .     ...)  
[08:06:55.653] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.653] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:55.659] | : Chunk #1 of 2 ... DONE
[08:06:55.659] | : . ' , ; ` | : . Not identical
[08:06:55.659] | : Chunk #2 of 2 ...
[08:06:55.659] | : . ' , ; ` | : . all.equal() for future ...
[08:06:55.659] | :  - Finding globals in '...' for chunk #2 ...
[08:06:55.660] | : getGlobalsAndPackages() ...
[08:06:55.660] | : . Searching for globals ...
[08:06:55.661] | : . ' globals found: [0] 
[08:06:55.661] | : . Searching for globals ... done
[08:06:55.661] | : . globals: [0] <none>
[08:06:55.661] | : . packages: [0] <none>
[08:06:55.661] | : getGlobalsAndPackages() ... done
[08:06:55.661] | :    + additional globals found: [n=0] 
[08:06:55.661] | :    + additional namespaces needed: [n=0] 
[08:06:55.662] | :  - Finding globals in '...' for chunk #2 ... DONE
[08:06:55.662] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:06:55.662] | :  - seeds: <none>
[08:06:55.662] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:55.662] | : future(..., label = ‘future_mapply-2’) ...
[08:06:55.662] | : . lazy: FALSE
[08:06:55.662] | : . stdout: TRUE
[08:06:55.662] | : . conditions: [n=1] ‘condition’
[08:06:55.663] | : . gc: FALSE
[08:06:55.663] | : . earlySignal: FALSE
[08:06:55.663] | : . getGlobalsAndPackages() ...
[08:06:55.663] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:55.663] | : . ' Resolving globals: FALSE
[08:06:55.663] | : . ' Search for packages associated with the globals ...
[08:06:55.664] | : . ' , Packages associated with globals: [0] 
[08:06:55.664] | : . ' , Packages: [0] 
[08:06:55.664] | : . ' Search for packages associated with the globals ... done
[08:06:55.664] | : . ' Packages after dropping 'base': [0] 
[08:06:55.665] | : . ' globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:55.665] | : . ' packages: [0] 
[08:06:55.665] | : . getGlobalsAndPackages() ... done
[08:06:55.665] | : . run() for ‘Future’ (‘future_mapply-2’) ...
[08:06:55.665] | : . ' state: ‘created’
[08:06:55.666] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:55.666] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:55.666] | : . ' Using MulticoreFutureBackend ...
[08:06:55.659] | : . ' , ; ` | : . ' List of 2
[08:06:55.659] | : . ' , ; ` | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:55.659] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:55.659] | : . ' , ; ` | : . '   ..- attr(*, "init")= logi TRUE
[08:06:55.659] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.659] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.659] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.659] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.659] | : . ' , ; ` | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:55.659] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:55.659] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:55.659] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:55.659] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.659] | : . ' , ; ` | : . '     ...)  
[08:06:55.659] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.659] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.659] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:55.659] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:55.659] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.659] | : . ' , ; ` | : . '     ...)  
[08:06:55.659] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.666] | : . ' , Number of futures since start: 9 (9 created, 9 launched, 8 finished)
[08:06:55.666] | : . ' , Launching futures ...
[08:06:55.666] | : . ' , ; launchFuture() for MulticoreFutureBackend ...
[08:06:55.667] | : . ' , ; ` getFutureData() ...
[08:06:55.667] | : . ' , ; ` | getFutureCore() ...
[08:06:55.667] | : . ' , ; ` | : . ' Formals differ
[08:06:55.667] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:06:55.667] | : . ' , ; ` | : . all.equal() for future ... done
[08:06:55.667] | : . ' , ; ` | getFutureCore() ... done
[08:06:55.667] | : . ' , ; ` | : . Future strategies differ at level 1
[08:06:55.667] | : . ' , ; ` | getFutureCapture() ...
[08:06:55.667] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:06:55.667] | : . ' , ; ` | getFutureCapture() ... done
[08:06:55.667] | : . ' , ; ` | : plan(): Setting new future backend stack:
[08:06:55.667] | : . ' , ; ` | getFutureContext() ...
[08:06:55.668] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:55.668] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:06:55.668] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:55.668] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:06:55.667] | : . ' , ; ` | : List of future strategies:
[08:06:55.667] | : . ' , ; ` | : 1. sequential:
[08:06:55.667] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:55.667] | : . ' , ; ` | :    - tweaked: FALSE
[08:06:55.667] | : . ' , ; ` | :    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.668] | : . ' , ; ` | getFutureContext() ... done
[08:06:55.668] | : . ' , ; ` getFutureData() ... done
[08:06:55.669] | : . ' , ; ` requestCore(..., workers = 2) ...
[08:06:55.669] | : . ' , ; ` requestCore(..., workers = 2) ... done
[08:06:55.668] | : . ' , ; ` | : List of 1
[08:06:55.668] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:55.668] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:55.668] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:06:55.668] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.668] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.668] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.668] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.668] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:55.672] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:55.672] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:55.672] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:55.672] | : . ' , ; ` MulticoreFuture started
[08:06:55.672] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:06:55.672] | : . ' , ; launchFuture() for MulticoreFutureBackend ... done
[08:06:55.673] | : . ' , Launching futures ... done
[08:06:55.673] | : . ' , Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:55.673] | : . ' Using MulticoreFutureBackend ... done
[08:06:55.673] | : . run() for ‘Future’ (‘future_mapply-2’) ... done
[08:06:55.674] | : future(..., label = ‘future_mapply-2’) ... done
[08:06:55.674] | : Created future:
[08:06:55.672] | : . ' , ; ` | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:55.672] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:55.672] | : . ' , ; ` | : . '  - attr(*, "init")= logi TRUE
[08:06:55.672] | : . ' , ; ` | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.672] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.672] | : . ' , ; ` | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.672] | : . ' , ; ` | : . '  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.675] | : . ' , ; ` | : . ' init: TRUE
[08:06:55.675] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ...
[08:06:55.675] | : . ' , ; ` | : . ' , Backend function: <‘NULL’>
[08:06:55.676] | : . ' , ; ` | : . ' , Evaluator tweak arguments: [n=0]
[08:06:55.676] | : . ' , ; ` | : . ' ,  list()
[08:06:55.676] | : . ' , ; ` | : . ' , Evaluator formal arguments: [n=2]
[08:06:55.676] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:55.676] | : . ' , ; ` | : . ' ,  list()
[08:06:55.676] | : . ' , ; ` | Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:06:55.677] | : . ' , ; ` | : . ' , Backend factory arguments: [n=2]
[08:06:55.677] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:55.677] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:55.677] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:55.678] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:06:55.678] | : . ' , ; ` | : . New stack:
[08:06:55.677] | : . ' , ; ` | : . ' , Dotted pair list of 2
[08:06:55.677] | : . ' , ; ` | : . ' ,  $ gc         : logi FALSE
[08:06:55.677] | : . ' , ; ` | : . ' ,  $ earlySignal: logi FALSE
[08:06:55.678] | : . ' , ; ` | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:06:55.679] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ... done
[08:06:55.679] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:06:55.679] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:55.679] | : . ' , ; ` | : plan(): nbrOfWorkers() = 1
[08:06:55.679] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:55.679] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:55.680] | : . ' , ; ` assign_globals() ...
[08:06:55.678] | : . ' , ; ` | : . List of 1
[08:06:55.678] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:55.678] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:55.678] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:06:55.678] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.678] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.678] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.678] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.678] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:55.682] | : . ' , ; ` | : . Old stack:
[08:06:55.687] | : readImmediateCondition() ...
[08:06:55.687] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.688] | : . Number of RDS files: 0
[08:06:55.683] | : . ' , ; ` | : . List of 1
[08:06:55.683] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:55.683] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:55.683] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:55.683] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:55.683] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.683] | : . ' , ; ` | : .     ...)  
[08:06:55.683] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.683] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.683] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:55.683] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:55.683] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.683] | : . ' , ; ` | : .     ...)  
[08:06:55.683] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.683] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:55.688] | : . Returned conditions set:
[08:06:55.688] | : . ' , ; ` | : . Not identical
[08:06:55.688] | : . ' , ; ` | : . all.equal() for future ...
[08:06:55.688] | : .  list()
[08:06:55.689] | : readImmediateCondition() ... done
[08:06:55.674] | : MulticoreFuture:
[08:06:55.674] | : Label: ‘future_mapply-2’
[08:06:55.674] | : Expression:
[08:06:55.674] | : {
[08:06:55.674] | :     "# future.apply:::future_xapply(): preserve future option"
[08:06:55.674] | :     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:55.674] | :     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:55.674] | :         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:55.674] | :         on.exit(options(oopts), add = TRUE)
[08:06:55.674] | :     }
[08:06:55.674] | :     {
[08:06:55.674] | :         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[08:06:55.674] | :             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[08:06:55.674] | :         do.call(mapply, args = args)
[08:06:55.674] | :     }
[08:06:55.674] | : }
[08:06:55.674] | : Globals: 5 objects totaling 6.51 KiB (function ‘...future.FUN’ of 1.04 KiB, list ‘...future.elements_ii’ of 71 bytes, NULL ‘MoreArgs’ of 27 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:55.674] | : Packages: <none>
[08:06:55.674] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:55.674] | : Capture standard output: TRUE
[08:06:55.674] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:55.674] | : Immediate condition classes: ‘immediateCondition’
[08:06:55.674] | : Lazy evaluation: FALSE
[08:06:55.674] | : Local evaluation: TRUE
[08:06:55.674] | : Asynchronous evaluation: TRUE
[08:06:55.674] | : Early signaling: FALSE
[08:06:55.674] | : Environment: R_GlobalEnv
[08:06:55.674] | : State: ‘running’
[08:06:55.674] | : Resolved: FALSE
[08:06:55.674] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-16
[08:06:55.674] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:55.674] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:55.674] | : Value: <not collected>
[08:06:55.674] | : Conditions captured: <none>
[08:06:55.689] | : Chunk #2 of 2 ... DONE
[08:06:55.690] | : Launching 2 futures (chunks) ... DONE
[08:06:55.690] | : Resolving 2 futures (chunks) ...
[08:06:55.690] | : value() for list ...
[08:06:55.690] | : . recursive: 0
[08:06:55.691] | : . reduce: FALSE
[08:06:55.680] | : . ' , ; ` List of 5
[08:06:55.680] | : . ' , ; `  $ ...future.FUN            :function (x, y)  
[08:06:55.680] | : . ' , ; `  $ MoreArgs                 : NULL
[08:06:55.680] | : . ' , ; `  $ ...future.elements_ii    :List of 2
[08:06:55.680] | : . ' , ; `   ..$ :List of 1
[08:06:55.680] | : . ' , ; `   .. ..$ : int 1
[08:06:55.680] | : . ' , ; `   ..$ :List of 1
[08:06:55.680] | : . ' , ; `   .. ..$ : int 0
[08:06:55.680] | : . ' , ; `  $ ...future.seeds_ii       : NULL
[08:06:55.680] | : . ' , ; `  $ ...future.globals.maxSize: NULL
[08:06:55.680] | : . ' , ; `  - attr(*, "where")=List of 5
[08:06:55.680] | : . ' , ; `   ..$ ...future.FUN            :<environment: 0x55eede2ef348> 
[08:06:55.680] | : . ' , ; `   ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[08:06:55.680] | : . ' , ; `   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:55.680] | : . ' , ; `   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:55.680] | : . ' , ; `   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:55.680] | : . ' , ; `  - attr(*, "resolved")= logi FALSE
[08:06:55.680] | : . ' , ; `  - attr(*, "total_size")= num NA
[08:06:55.680] | : . ' , ; `  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:55.680] | : . ' , ; `  - attr(*, "already-done")= logi TRUE
[08:06:55.691] | : . length: 2
[08:06:55.691] | : . ' , ; ` - copied ‘...future.FUN’ to environment

[08:06:55.691] | : . ' , ; ` - copied ‘MoreArgs’ to environment
[08:06:55.691] | : . ' , ; ` - copied ‘...future.elements_ii’ to environment
[08:06:55.691] | : . Number of remaining objects: 2
[08:06:55.691] | : . ' , ; ` - copied ‘...future.seeds_ii’ to environment
[08:06:55.691] | : . checking value #1:
[08:06:55.692] | : . ' , ; ` - copied ‘...future.globals.maxSize’ to environment
[08:06:55.692] | : . 'obj' is MulticoreFuture
[08:06:55.692] | : . ' , ; ` assign_globals() ... done
[08:06:55.688] | : . ' , ; ` | : . ' List of 2
[08:06:55.688] | : . ' , ; ` | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:55.688] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:55.688] | : . ' , ; ` | : . '   ..- attr(*, "init")= logi TRUE
[08:06:55.688] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.688] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.688] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.688] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.688] | : . ' , ; ` | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:55.688] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:55.688] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:55.688] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:55.688] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.688] | : . ' , ; ` | : . '     ...)  
[08:06:55.688] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.688] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.688] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:55.688] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:55.688] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.688] | : . ' , ; ` | : . '     ...)  
[08:06:55.688] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.697] | : . ' , ; ` | : . ' Formals differ
[08:06:55.697] | : . ' , ; ` | : . all.equal() for future ... done
[08:06:55.697] | : . ' , ; ` | : . Future strategies differ at level 1
[08:06:55.697] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:06:55.698] | : . ' , ; ` | : plan(): Setting new future backend stack:
[08:06:55.698] | : . ' , ; ` | : List of future strategies:
[08:06:55.698] | : . ' , ; ` | : 1. sequential:
[08:06:55.698] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:55.698] | : . ' , ; ` | :    - tweaked: FALSE
[08:06:55.698] | : . ' , ; ` | :    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.699] | : . ' , ; ` | : List of 1
[08:06:55.699] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:55.699] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:55.699] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:06:55.699] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.699] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.699] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.699] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.699] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:55.702] | : . readImmediateCondition() ...
[08:06:55.702] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:55.702] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.703] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:55.703] | : . ' Number of RDS files: 0
[08:06:55.703] | : . ' Returned conditions set:
[08:06:55.703] | : . '  list()
[08:06:55.704] | : . readImmediateCondition() ... done
[08:06:55.704] | : . checking value #2:
[08:06:55.704] | : . 'obj' is MulticoreFuture
[08:06:55.703] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:55.707] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:06:55.707] | : . ' , ; ` | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:55.707] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:55.707] | : . ' , ; ` | : . '  - attr(*, "init")= logi TRUE
[08:06:55.707] | : . ' , ; ` | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.707] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.707] | : . ' , ; ` | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.707] | : . ' , ; ` | : . '  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.710] | : . ' , ; ` | : . ' init: TRUE
[08:06:55.710] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ...
[08:06:55.710] | : . ' , ; ` | : . ' , Backend function: <‘NULL’>
[08:06:55.711] | : . ' , ; ` | : . ' , Evaluator tweak arguments: [n=0]
[08:06:55.711] | : . ' , ; ` | : . ' ,  list()
[08:06:55.711] | : . ' , ; ` | : . ' , Evaluator formal arguments: [n=2]
[08:06:55.711] | : . ' , ; ` | : . ' ,  list()
[08:06:55.712] | : . ' , ; ` | : . ' , Backend factory arguments: [n=2]
[08:06:55.712] | : . ' , ; ` | : . ' , Dotted pair list of 2
[08:06:55.712] | : . ' , ; ` | : . ' ,  $ gc         : logi FALSE
[08:06:55.712] | : . ' , ; ` | : . ' ,  $ earlySignal: logi FALSE
[08:06:55.713] | : . ' , ; ` | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:06:55.713] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ... done
[08:06:55.713] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:06:55.714] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:55.714] | : . ' , ; ` | : plan(): nbrOfWorkers() = 1
[08:06:55.714] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:55.714] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:55.714] | : . readImmediateCondition() ...
[08:06:55.714] | : . ' , ; ` assign_globals() ...
[08:06:55.715] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.715] | : . ' Number of RDS files: 0
[08:06:55.715] | : . ' Returned conditions set:
[08:06:55.715] | : . '  list()
[08:06:55.716] | : . readImmediateCondition() ... done
[08:06:55.715] | : . ' , ; ` List of 5
[08:06:55.715] | : . ' , ; `  $ ...future.FUN            :function (x, y)  
[08:06:55.715] | : . ' , ; `  $ MoreArgs                 : NULL
[08:06:55.715] | : . ' , ; `  $ ...future.elements_ii    :List of 2
[08:06:55.715] | : . ' , ; `   ..$ :List of 1
[08:06:55.715] | : . ' , ; `   .. ..$ : int 0
[08:06:55.715] | : . ' , ; `   ..$ :List of 1
[08:06:55.715] | : . ' , ; `   .. ..$ : int 1
[08:06:55.715] | : . ' , ; `  $ ...future.seeds_ii       : NULL
[08:06:55.715] | : . ' , ; `  $ ...future.globals.maxSize: NULL
[08:06:55.715] | : . ' , ; `  - attr(*, "where")=List of 5
[08:06:55.715] | : . ' , ; `   ..$ ...future.FUN            :<environment: 0x55eede2ef348> 
[08:06:55.715] | : . ' , ; `   ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[08:06:55.715] | : . ' , ; `   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:55.715] | : . ' , ; `   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:55.715] | : . ' , ; `   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:55.715] | : . ' , ; `  - attr(*, "resolved")= logi FALSE
[08:06:55.715] | : . ' , ; `  - attr(*, "total_size")= num NA
[08:06:55.715] | : . ' , ; `  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:55.715] | : . ' , ; `  - attr(*, "already-done")= logi TRUE
[08:06:55.723] | : . ' , ; ` - copied ‘...future.FUN’ to environment
[08:06:55.723] | : . ' , ; ` - copied ‘MoreArgs’ to environment
[08:06:55.723] | : . ' , ; ` - copied ‘...future.elements_ii’ to environment
[08:06:55.724] | : . ' , ; ` - copied ‘...future.seeds_ii’ to environment
[08:06:55.724] | : . ' , ; ` - copied ‘...future.globals.maxSize’ to environment
[08:06:55.724] | : . ' , ; ` assign_globals() ... done
[08:06:55.726] | : . Number of remaining objects: 2
[08:06:55.726] | : . checking value #1:
[08:06:55.727] | : . 'obj' is MulticoreFuture
[08:06:55.727] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:55.728] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:55.728] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:55.728] | : . ' , ; ` | : . all.equal() for FutureStrategyList ...
[08:06:55.728] | : . ' , ; ` | : . ' New stack:
[08:06:55.728] | : . ' , ; ` | : . ' List of 1
[08:06:55.728] | : . ' , ; ` | : . '  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:55.728] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:55.728] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:55.728] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:55.728] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.728] | : . ' , ; ` | : . '     ...)  
[08:06:55.728] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.728] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.728] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:55.728] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:55.728] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.728] | : . ' , ; ` | : . '     ...)  
[08:06:55.728] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.728] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:55.734] | : . ' , ; ` | : . ' Old stack:
[08:06:55.737] | : . readImmediateCondition() ...
[08:06:55.737] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.738] | : . ' Number of RDS files: 0
[08:06:55.738] | : . ' Returned conditions set:
[08:06:55.738] | : . '  list()
[08:06:55.738] | : . readImmediateCondition() ... done
[08:06:55.739] | : . checking value #2:
[08:06:55.739] | : . 'obj' is MulticoreFuture
[08:06:55.734] | : . ' , ; ` | : . ' List of 1
[08:06:55.734] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:55.734] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:55.734] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:55.734] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.734] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.734] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.734] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.734] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee1047a58> 
[08:06:55.734] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.734] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.734] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:55.740] | : . ' , ; ` | : . ' Not identical
[08:06:55.740] | : . ' , ; ` | : . ' all.equal() for future ...
[08:06:55.741] | : . ' , ; ` | : . ' , List of 2
[08:06:55.741] | : . ' , ; ` | : . ' ,  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:55.741] | : . ' , ; ` | : . ' ,     earlySignal = FALSE, envir = parent.frame())  
[08:06:55.741] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:55.741] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:55.741] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.741] | : . ' , ; ` | : . ' ,     ...)  
[08:06:55.741] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.741] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.741] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategy)
[08:06:55.741] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:55.741] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.741] | : . ' , ; ` | : . ' ,     ...)  
[08:06:55.741] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.741] | : . ' , ; ` | : . ' ,  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:55.741] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:55.741] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:55.741] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.741] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.741] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.741] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:55.741] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee1047a58> 
[08:06:55.741] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:55.741] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:55.749] | : . readImmediateCondition() ...
[08:06:55.750] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.750] | : . ' , ; ` | : . ' , Formals differ
[08:06:55.750] | : . ' Number of RDS files: 0
[08:06:55.750] | : . ' Returned conditions set:
[08:06:55.750] | : . ' , ; ` | : . ' all.equal() for future ... done
[08:06:55.750] | : . ' , ; ` | : . ' Future strategies differ at level 1
[08:06:55.750] | : . '  list()
[08:06:55.751] | : . readImmediateCondition() ... done
[08:06:55.750] | : . ' , ; ` | : . all.equal() for FutureStrategyList ... done
[08:06:55.751] | : . ' , ; ` | : . plan(): Setting new future backend stack:
[08:06:55.751] | : . ' , ; ` | : . List of future strategies:
[08:06:55.751] | : . ' , ; ` | : . 1. multicore:
[08:06:55.751] | : . ' , ; ` | : .    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:06:55.751] | : . ' , ; ` | : .    - tweaked: FALSE
[08:06:55.751] | : . ' , ; ` | : .    - call: plan(strategy)
[08:06:55.752] | : . ' , ; ` | : . List of 1
[08:06:55.752] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:55.752] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:55.752] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:55.752] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:55.752] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.752] | : . ' , ; ` | : .     ...)  
[08:06:55.752] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.752] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.752] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:55.752] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:55.752] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:55.752] | : . ' , ; ` | : .     ...)  
[08:06:55.752] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:55.752] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:55.757] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:55.758] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:55.758] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:55.758] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:55.758] | : . ' , ; ` | : . plan(): nbrOfWorkers() = 2
[08:06:55.758] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:55.759] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:55.759] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:55.761] | : . Number of remaining objects: 2
[08:06:55.761] | : . checking value #1:
[08:06:55.761] | : . 'obj' is MulticoreFuture
[08:06:55.771] | : . readImmediateCondition() ...
[08:06:55.772] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.772] | : . ' Number of RDS files: 0
[08:06:55.772] | : . ' Returned conditions set:
[08:06:55.772] | : . '  list()
[08:06:55.773] | : . readImmediateCondition() ... done
[08:06:55.773] | : . checking value #2:
[08:06:55.773] | : . 'obj' is MulticoreFuture
[08:06:55.773] | : . readImmediateCondition() ...
[08:06:55.773] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.774] | : . ' Number of RDS files: 0
[08:06:55.774] | : . ' Returned conditions set:
[08:06:55.774] | : . '  list()
[08:06:55.774] | : . readImmediateCondition() ... done
[08:06:55.774] | : . MulticoreFuture #2
[08:06:55.775] | : . signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:06:55.775] | : . ' nx: 2
[08:06:55.775] | : . ' relay: TRUE
[08:06:55.775] | : . ' stdout: TRUE
[08:06:55.775] | : . ' signal: TRUE
[08:06:55.775] | : . ' resignal: FALSE
[08:06:55.775] | : . ' force: TRUE
[08:06:55.775] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:55.775] | : . ' queued futures: [n=2] FALSE, FALSE
[08:06:55.776] | : . ' until=1
[08:06:55.776] | : . ' relaying element #1
[08:06:55.776] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:55.776] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:55.776] | : . signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:06:55.776] | : . value(<MulticoreFuture>, ...) ...
[08:06:55.776] | : . value(<MulticoreFuture>, ...) ... done
[08:06:55.776] | : . value() for MulticoreFuture (‘future_mapply-2’) ...
[08:06:55.777] | : . ' result() for MulticoreFuture ...
[08:06:55.777] | : . ' , readImmediateCondition() ...
[08:06:55.778] | : . ' , ; Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.778] | : . ' , ; Number of RDS files: 0
[08:06:55.778] | : . ' , ; Returned conditions set:
[08:06:55.778] | : . ' , ;  list()
[08:06:55.778] | : . ' , readImmediateCondition() ... done
[08:06:55.779] | : . ' , result() for MulticoreFuture ...
[08:06:55.779] | : . ' , result() for MulticoreFuture ... done
[08:06:55.779] | : . ' , signalConditions() ...
[08:06:55.779] | : . ' , ; include = ‘immediateCondition’
[08:06:55.779] | : . ' , ; exclude = 
[08:06:55.780] | : . ' , ; resignal = FALSE
[08:06:55.780] | : . ' , ; Number of conditions: 6
[08:06:55.780] | : . ' , ;  int 6
[08:06:55.780] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.781] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.781] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.781] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.781] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.781] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.781] | : . ' , ; Drop signaled conditions: 0
[08:06:55.781] | : . ' , signalConditions() ... done
[08:06:55.781] | : . ' result() for MulticoreFuture ... done
[08:06:55.782] | : . ' result() for MulticoreFuture ...
[08:06:55.782] | : . ' result() for MulticoreFuture ... done
[08:06:55.782] | : . ' signalConditions() ...
[08:06:55.782] | : . ' , include = ‘immediateCondition’
[08:06:55.782] | : . ' , exclude = 
[08:06:55.782] | : . ' , resignal = FALSE
[08:06:55.782] | : . ' , Number of conditions: 6
[08:06:55.783] | : . ' ,  int 6
[08:06:55.783] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.783] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.783] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.783] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.784] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.784] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:55.784] | : . ' , Drop signaled conditions: 0
[08:06:55.784] | : . ' signalConditions() ... done
[08:06:55.784] | : . ' check for misuse ...
[08:06:55.784] | : . ' check for misuse ... done
[08:06:55.784] | : . value() for MulticoreFuture (‘future_mapply-2’) ... done
[08:06:55.784] | : . value: <list>
[08:06:55.785] | : . signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:06:55.785] | : . ' nx: 2
[08:06:55.785] | : . ' relay: TRUE
[08:06:55.785] | : . ' stdout: TRUE
[08:06:55.785] | : . ' signal: TRUE
[08:06:55.785] | : . ' resignal: FALSE
[08:06:55.785] | : . ' force: TRUE
[08:06:55.785] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:55.786] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:55.786] | : . ' until=1
[08:06:55.788] | : . ' relaying element #1
[08:06:55.788] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:55.788] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:55.788] | : . signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:06:55.789] | : . resolve() for MulticoreFuture ...
[08:06:55.789] | : . resolve() for MulticoreFuture ... done
[08:06:55.789] | : . length: 1 (resolved future 2)
[08:06:55.789] | : value() for list ... done
[08:06:55.799] | : Number of remaining objects: 1
[08:06:55.799] | : checking value #1:
[08:06:55.800] | : 'obj' is MulticoreFuture
[08:06:55.810] | : readImmediateCondition() ...
[08:06:55.810] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.810] | : . Number of RDS files: 0
[08:06:55.810] | : . Returned conditions set:
[08:06:55.810] | : .  list()
[08:06:55.811] | : readImmediateCondition() ... done
[08:06:55.821] | : Number of remaining objects: 1
[08:06:55.821] | : checking value #1:
[08:06:55.821] | : 'obj' is MulticoreFuture
[08:06:55.832] | : readImmediateCondition() ...
[08:06:55.832] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.832] | : . Number of RDS files: 0
[08:06:55.832] | : . Returned conditions set:
[08:06:55.832] | : .  list()
[08:06:55.833] | : readImmediateCondition() ... done
[08:06:55.843] | : Number of remaining objects: 1
[08:06:55.843] | : checking value #1:
[08:06:55.843] | : 'obj' is MulticoreFuture
[08:06:55.854] | : readImmediateCondition() ...
[08:06:55.854] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.854] | : . Number of RDS files: 0
[08:06:55.854] | : . Returned conditions set:
[08:06:55.854] | : .  list()
[08:06:55.855] | : readImmediateCondition() ... done
[08:06:55.865] | : Number of remaining objects: 1
[08:06:55.865] | : checking value #1:
[08:06:55.865] | : 'obj' is MulticoreFuture
[08:06:55.876] | : readImmediateCondition() ...
[08:06:55.876] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.876] | : . Number of RDS files: 0
[08:06:55.876] | : . Returned conditions set:
[08:06:55.877] | : .  list()
[08:06:55.877] | : readImmediateCondition() ... done
[08:06:55.887] | : Number of remaining objects: 1
[08:06:55.887] | : checking value #1:
[08:06:55.888] | : 'obj' is MulticoreFuture
[08:06:55.898] | : readImmediateCondition() ...
[08:06:55.898] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.898] | : . Number of RDS files: 0
[08:06:55.899] | : . Returned conditions set:
[08:06:55.899] | : .  list()
[08:06:55.899] | : readImmediateCondition() ... done
[08:06:55.909] | : Number of remaining objects: 1
[08:06:55.910] | : checking value #1:
[08:06:55.910] | : 'obj' is MulticoreFuture
[08:06:55.920] | : readImmediateCondition() ...
[08:06:55.920] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.921] | : . Number of RDS files: 0
[08:06:55.921] | : . Returned conditions set:
[08:06:55.921] | : .  list()
[08:06:55.921] | : readImmediateCondition() ... done
[08:06:55.932] | : Number of remaining objects: 1
[08:06:55.932] | : checking value #1:
[08:06:55.932] | : 'obj' is MulticoreFuture
[08:06:55.942] | : readImmediateCondition() ...
[08:06:55.943] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.943] | : . Number of RDS files: 0
[08:06:55.943] | : . Returned conditions set:
[08:06:55.943] | : .  list()
[08:06:55.944] | : readImmediateCondition() ... done
[08:06:55.954] | : Number of remaining objects: 1
[08:06:55.954] | : checking value #1:
[08:06:55.954] | : 'obj' is MulticoreFuture
[08:06:55.965] | : readImmediateCondition() ...
[08:06:55.965] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.965] | : . Number of RDS files: 0
[08:06:55.965] | : . Returned conditions set:
[08:06:55.966] | : .  list()
[08:06:55.966] | : readImmediateCondition() ... done
[08:06:55.976] | : Number of remaining objects: 1
[08:06:55.977] | : checking value #1:
[08:06:55.977] | : 'obj' is MulticoreFuture
[08:06:55.987] | : readImmediateCondition() ...
[08:06:55.987] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:55.987] | : . Number of RDS files: 0
[08:06:55.988] | : . Returned conditions set:
[08:06:55.988] | : .  list()
[08:06:55.988] | : readImmediateCondition() ... done
[08:06:55.998] | : Number of remaining objects: 1
[08:06:55.999] | : checking value #1:
[08:06:55.999] | : 'obj' is MulticoreFuture
[08:06:56.009] | : readImmediateCondition() ...
[08:06:56.009] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.010] | : . Number of RDS files: 0
[08:06:56.010] | : . Returned conditions set:
[08:06:56.010] | : .  list()
[08:06:56.011] | : readImmediateCondition() ... done
[08:06:56.021] | : Number of remaining objects: 1
[08:06:56.021] | : checking value #1:
[08:06:56.021] | : 'obj' is MulticoreFuture
[08:06:56.031] | : readImmediateCondition() ...
[08:06:56.032] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.032] | : . Number of RDS files: 0
[08:06:56.032] | : . Returned conditions set:
[08:06:56.032] | : .  list()
[08:06:56.033] | : readImmediateCondition() ... done
[08:06:56.043] | : Number of remaining objects: 1
[08:06:56.043] | : checking value #1:
[08:06:56.043] | : 'obj' is MulticoreFuture
[08:06:56.054] | : readImmediateCondition() ...
[08:06:56.054] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.054] | : . Number of RDS files: 0
[08:06:56.055] | : . Returned conditions set:
[08:06:56.055] | : .  list()
[08:06:56.055] | : readImmediateCondition() ... done
[08:06:56.066] | : Number of remaining objects: 1
[08:06:56.066] | : checking value #1:
[08:06:56.066] | : 'obj' is MulticoreFuture
[08:06:56.077] | : readImmediateCondition() ...
[08:06:56.077] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.077] | : . Number of RDS files: 0
[08:06:56.077] | : . Returned conditions set:
[08:06:56.077] | : .  list()
[08:06:56.078] | : readImmediateCondition() ... done
[08:06:56.088] | : Number of remaining objects: 1
[08:06:56.089] | : checking value #1:
[08:06:56.089] | : 'obj' is MulticoreFuture
[08:06:56.099] | : readImmediateCondition() ...
[08:06:56.099] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.100] | : . Number of RDS files: 0
[08:06:56.100] | : . Returned conditions set:
[08:06:56.100] | : .  list()
[08:06:56.101] | : readImmediateCondition() ... done
[08:06:56.111] | : Number of remaining objects: 1
[08:06:56.111] | : checking value #1:
[08:06:56.111] | : 'obj' is MulticoreFuture
[08:06:56.122] | : readImmediateCondition() ...
[08:06:56.122] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.122] | : . Number of RDS files: 0
[08:06:56.122] | : . Returned conditions set:
[08:06:56.122] | : .  list()
[08:06:56.123] | : readImmediateCondition() ... done
[08:06:56.133] | : Number of remaining objects: 1
[08:06:56.133] | : checking value #1:
[08:06:56.134] | : 'obj' is MulticoreFuture
[08:06:56.144] | : readImmediateCondition() ...
[08:06:56.144] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.144] | : . Number of RDS files: 0
[08:06:56.145] | : . Returned conditions set:
[08:06:56.145] | : .  list()
[08:06:56.145] | : readImmediateCondition() ... done
[08:06:56.155] | : Number of remaining objects: 1
[08:06:56.156] | : checking value #1:
[08:06:56.156] | : 'obj' is MulticoreFuture
[08:06:56.166] | : readImmediateCondition() ...
[08:06:56.166] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.167] | : . Number of RDS files: 0
[08:06:56.167] | : . Returned conditions set:
[08:06:56.167] | : .  list()
[08:06:56.167] | : readImmediateCondition() ... done
[08:06:56.178] | : Number of remaining objects: 1
[08:06:56.178] | : checking value #1:
[08:06:56.178] | : 'obj' is MulticoreFuture
[08:06:56.189] | : readImmediateCondition() ...
[08:06:56.189] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.189] | : . Number of RDS files: 0
[08:06:56.189] | : . Returned conditions set:
[08:06:56.190] | : .  list()
[08:06:56.190] | : readImmediateCondition() ... done
[08:06:56.196] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:56.196] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:56.196] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:56.196] | : . ' , ; ` | : . all.equal() for FutureStrategyList ...
[08:06:56.196] | : . ' , ; ` | : . ' New stack:
[08:06:56.196] | : . ' , ; ` | : . ' List of 1
[08:06:56.196] | : . ' , ; ` | : . '  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:56.196] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:56.196] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:56.196] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:56.196] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.196] | : . ' , ; ` | : . '     ...)  
[08:06:56.196] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.196] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.196] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:56.196] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:56.196] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.196] | : . ' , ; ` | : . '     ...)  
[08:06:56.196] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.196] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:56.200] | : . ' , ; ` | : . ' Old stack:
[08:06:56.200] | : Number of remaining objects: 1
[08:06:56.201] | : checking value #1:
[08:06:56.201] | : 'obj' is MulticoreFuture
[08:06:56.201] | : . ' , ; ` | : . ' List of 1
[08:06:56.201] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:56.201] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:56.201] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:56.201] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:56.201] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.201] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.201] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:56.201] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee2f5cb98> 
[08:06:56.201] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:56.201] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.201] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:56.204] | : . ' , ; ` | : . ' Not identical
[08:06:56.205] | : . ' , ; ` | : . ' all.equal() for future ...
[08:06:56.211] | : readImmediateCondition() ...
[08:06:56.205] | : . ' , ; ` | : . ' , List of 2
[08:06:56.205] | : . ' , ; ` | : . ' ,  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:56.205] | : . ' , ; ` | : . ' ,     earlySignal = FALSE, envir = parent.frame())  
[08:06:56.205] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:56.205] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:56.205] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.205] | : . ' , ; ` | : . ' ,     ...)  
[08:06:56.205] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.205] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.205] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategy)
[08:06:56.205] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:56.205] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.205] | : . ' , ; ` | : . ' ,     ...)  
[08:06:56.205] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.205] | : . ' , ; ` | : . ' ,  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:56.205] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:56.205] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:56.205] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:56.205] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.205] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.205] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:56.205] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee2f5cb98> 
[08:06:56.205] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:56.205] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.211] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.212] | : . Number of RDS files: 0
[08:06:56.212] | : . Returned conditions set:
[08:06:56.212] | : . ' , ; ` | : . ' , Formals differ
[08:06:56.212] | : . ' , ; ` | : . ' all.equal() for future ... done
[08:06:56.212] | : . ' , ; ` | : . ' Future strategies differ at level 1
[08:06:56.212] | : . ' , ; ` | : . all.equal() for FutureStrategyList ... done
[08:06:56.212] | : .  list()
[08:06:56.213] | : . ' , ; ` | : . plan(): Setting new future backend stack:
[08:06:56.213] | : readImmediateCondition() ... done
[08:06:56.213] | : . ' , ; ` | : . List of future strategies:
[08:06:56.213] | : . ' , ; ` | : . 1. multicore:
[08:06:56.213] | : . ' , ; ` | : .    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:06:56.213] | : . ' , ; ` | : .    - tweaked: FALSE
[08:06:56.213] | : . ' , ; ` | : .    - call: plan(strategy)
[08:06:56.213] | : . ' , ; ` | : . List of 1
[08:06:56.213] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:56.213] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:56.213] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:56.213] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:56.213] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.213] | : . ' , ; ` | : .     ...)  
[08:06:56.213] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.213] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.213] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:56.213] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:56.213] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.213] | : . ' , ; ` | : .     ...)  
[08:06:56.213] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.213] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:56.218] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:56.218] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:56.219] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:56.219] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:56.219] | : . ' , ; ` | : . plan(): nbrOfWorkers() = 2
[08:06:56.219] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:56.219] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:56.219] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:56.223] | : Number of remaining objects: 1
[08:06:56.223] | : checking value #1:
[08:06:56.223] | : 'obj' is MulticoreFuture
[08:06:56.223] | : readImmediateCondition() ...
[08:06:56.224] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.224] | : . Number of RDS files: 0
[08:06:56.224] | : . Returned conditions set:
[08:06:56.224] | : .  list()
[08:06:56.225] | : readImmediateCondition() ... done
[08:06:56.225] | : MulticoreFuture #1
[08:06:56.225] | : signalConditionsASAP(MulticoreFuture, pos=1) ...
[08:06:56.225] | : . nx: 2
[08:06:56.225] | : . relay: TRUE
[08:06:56.225] | : . stdout: TRUE
[08:06:56.225] | : . signal: TRUE
[08:06:56.225] | : . resignal: FALSE
[08:06:56.225] | : . force: TRUE
[08:06:56.226] | : . relayed: [n=2] FALSE, FALSE
[08:06:56.226] | : . queued futures: [n=2] FALSE, TRUE
[08:06:56.226] | : . until=1
[08:06:56.226] | : . relaying element #1
[08:06:56.226] | : . value() for MulticoreFuture (‘future_mapply-1’) ...
[08:06:56.226] | : . ' result() for MulticoreFuture ...
[08:06:56.227] | : . ' , readImmediateCondition() ...
[08:06:56.227] | : . ' , ; Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.227] | : . ' , ; Number of RDS files: 0
[08:06:56.227] | : . ' , ; Returned conditions set:
[08:06:56.228] | : . ' , ;  list()
[08:06:56.228] | : . ' , readImmediateCondition() ... done
[08:06:56.228] | : . ' , result() for MulticoreFuture ...
[08:06:56.229] | : . ' , result() for MulticoreFuture ... done
[08:06:56.229] | : . ' , signalConditions() ...
[08:06:56.229] | : . ' , ; include = ‘immediateCondition’
[08:06:56.229] | : . ' , ; exclude = 
[08:06:56.229] | : . ' , ; resignal = FALSE
[08:06:56.229] | : . ' , ; Number of conditions: 6
[08:06:56.229] | : . ' , ;  int 6
[08:06:56.230] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.230] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.230] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.230] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.231] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.231] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.231] | : . ' , ; Drop signaled conditions: 0
[08:06:56.231] | : . ' , signalConditions() ... done
[08:06:56.231] | : . ' result() for MulticoreFuture ... done
[08:06:56.231] | : . ' result() for MulticoreFuture ...
[08:06:56.232] | : . ' result() for MulticoreFuture ... done
[08:06:56.232] | : . ' signalConditions() ...
[08:06:56.232] | : . ' , include = ‘immediateCondition’
[08:06:56.232] | : . ' , exclude = 
[08:06:56.232] | : . ' , resignal = FALSE
[08:06:56.232] | : . ' , Number of conditions: 6
[08:06:56.232] | : . ' ,  int 6
[08:06:56.233] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.233] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.233] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.233] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.233] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.234] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.234] | : . ' , Drop signaled conditions: 0
[08:06:56.234] | : . ' signalConditions() ... done
[08:06:56.234] | : . ' relay stdout ...
[08:06:56.234] | : . ' relay stdout ... done
[08:06:56.234] | : . ' check for misuse ...
[08:06:56.234] | : . ' check for misuse ... done
[08:06:56.234] | : . value() for MulticoreFuture (‘future_mapply-1’) ... done
[08:06:56.235] | : . result() for MulticoreFuture ...
[08:06:56.235] | : . result() for MulticoreFuture ... done
[08:06:56.235] | : . signalConditions() ...
[08:06:56.235] | : . ' include = ‘immediateCondition’
[08:06:56.235] | : . ' exclude = 
[08:06:56.235] | : . ' resignal = FALSE
[08:06:56.235] | : . ' Number of conditions: 6
[08:06:56.235] | : . '  int 6
[08:06:56.236] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.236] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.236] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.236] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.237] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.237] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.237] | : . ' Drop signaled conditions: 0
[08:06:56.237] | : . signalConditions() ... done
[08:06:56.237] | : . result() for MulticoreFuture ...
[08:06:56.237] | : . result() for MulticoreFuture ... done
[08:06:56.237] | : . signalConditions() ...
[08:06:56.237] | : . ' include = ‘condition’
[08:06:56.238] | : . ' exclude = ‘error’, ‘immediateCondition’
[08:06:56.238] | : . ' resignal = TRUE
[08:06:56.238] | : . ' Number of conditions: 6
[08:06:56.238] | : . '  int 6
[08:06:56.238] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.238] | : . ' Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.644] | : . ' , ; ` attachPackages() ...
[08:06:56.239] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.239] | : . ' Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.644] | : . ' , ; ` | packages: [n=1] ‘future’
[08:06:56.239] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.239] | : . ' Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.645] | : . ' , ; ` attachPackages() ... done
[08:06:56.239] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.239] | : . ' Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.645] | : . ' , ; ` attachPackages() ...
[08:06:56.240] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.240] | : . ' Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.645] | : . ' , ; ` | packages: [n=0] 
[08:06:56.240] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.240] | : . ' Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.645] | : . ' , ; ` attachPackages() ... done
[08:06:56.240] | : . ' Drop signaled conditions: 6
[08:06:56.240] | : . signalConditions() ... done
[08:06:56.240] | : . relayed: [n=2] TRUE, FALSE
[08:06:56.240] | : . queued futures: [n=2] TRUE, TRUE
[08:06:56.241] | : signalConditionsASAP(MulticoreFuture, pos=1) ... done
[08:06:56.241] | : value(<MulticoreFuture>, ...) ...
[08:06:56.241] | : value(<MulticoreFuture>, ...) ... done
[08:06:56.241] | : value() for MulticoreFuture (‘future_mapply-1’) ...
[08:06:56.241] | : . result() for MulticoreFuture ...
[08:06:56.241] | : . result() for MulticoreFuture ... done
[08:06:56.241] | : . result() for MulticoreFuture ...
[08:06:56.241] | : . result() for MulticoreFuture ... done
[08:06:56.242] | : . signalConditions() ...
[08:06:56.242] | : . ' include = ‘immediateCondition’
[08:06:56.242] | : . ' exclude = 
[08:06:56.242] | : . ' resignal = FALSE
[08:06:56.242] | : . ' Number of conditions: 0
[08:06:56.242] | : . '  int 0
[08:06:56.243] | : . signalConditions() ... done
[08:06:56.243] | : . check for misuse ...
[08:06:56.243] | : . check for misuse ... done
[08:06:56.243] | : value() for MulticoreFuture (‘future_mapply-1’) ... done
[08:06:56.243] | : value: <list>
[08:06:56.243] | : signalConditionsASAP(MulticoreFuture, pos=1) ...
[08:06:56.243] | : . nx: 2
[08:06:56.244] | : . relay: TRUE
[08:06:56.244] | : . stdout: TRUE
[08:06:56.244] | : . signal: TRUE
[08:06:56.244] | : . resignal: FALSE
[08:06:56.244] | : . force: TRUE
[08:06:56.244] | : . relayed: [n=2] TRUE, FALSE
[08:06:56.244] | : . queued futures: [n=2] TRUE, TRUE
[08:06:56.244] | : . until=2
[08:06:56.244] | : . relaying element #2
[08:06:56.245] | : . value() for MulticoreFuture (‘future_mapply-2’) ...
[08:06:56.245] | : . ' result() for MulticoreFuture ...
[08:06:56.245] | : . ' result() for MulticoreFuture ... done
[08:06:56.245] | : . ' result() for MulticoreFuture ...
[08:06:56.245] | : . ' result() for MulticoreFuture ... done
[08:06:56.245] | : . ' signalConditions() ...
[08:06:56.245] | : . ' , include = ‘immediateCondition’
[08:06:56.245] | : . ' , exclude = 
[08:06:56.246] | : . ' , resignal = FALSE
[08:06:56.246] | : . ' , Number of conditions: 6
[08:06:56.246] | : . ' ,  int 6
[08:06:56.246] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.246] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.246] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.247] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.247] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.247] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.247] | : . ' , Drop signaled conditions: 0
[08:06:56.247] | : . ' signalConditions() ... done
[08:06:56.247] | : . ' relay stdout ...
[08:06:56.247] | : . ' relay stdout ... done
[08:06:56.248] | : . ' check for misuse ...
[08:06:56.248] | : . ' check for misuse ... done
[08:06:56.248] | : . value() for MulticoreFuture (‘future_mapply-2’) ... done
[08:06:56.248] | : . result() for MulticoreFuture ...
[08:06:56.248] | : . result() for MulticoreFuture ... done
[08:06:56.248] | : . signalConditions() ...
[08:06:56.248] | : . ' include = ‘immediateCondition’
[08:06:56.248] | : . ' exclude = 
[08:06:56.248] | : . ' resignal = FALSE
[08:06:56.249] | : . ' Number of conditions: 6
[08:06:56.249] | : . '  int 6
[08:06:56.249] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.249] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.249] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.250] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.250] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.250] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.250] | : . ' Drop signaled conditions: 0
[08:06:56.250] | : . signalConditions() ... done
[08:06:56.250] | : . result() for MulticoreFuture ...
[08:06:56.250] | : . result() for MulticoreFuture ... done
[08:06:56.250] | : . signalConditions() ...
[08:06:56.251] | : . ' include = ‘condition’
[08:06:56.251] | : . ' exclude = ‘error’, ‘immediateCondition’
[08:06:56.251] | : . ' resignal = TRUE
[08:06:56.251] | : . ' Number of conditions: 6
[08:06:56.251] | : . '  int 6
[08:06:56.251] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.252] | : . ' Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.673] | : . ' , ; ` attachPackages() ...
[08:06:56.252] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.252] | : . ' Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.673] | : . ' , ; ` | packages: [n=1] ‘future’
[08:06:56.252] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.252] | : . ' Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.674] | : . ' , ; ` attachPackages() ... done
[08:06:56.252] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.252] | : . ' Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.674] | : . ' , ; ` attachPackages() ...
[08:06:56.253] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.253] | : . ' Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.675] | : . ' , ; ` | packages: [n=0] 
[08:06:56.253] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.253] | : . ' Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:55.675] | : . ' , ; ` attachPackages() ... done
[08:06:56.253] | : . ' Drop signaled conditions: 6
[08:06:56.253] | : . signalConditions() ... done
[08:06:56.253] | : . relayed: [n=2] TRUE, TRUE
[08:06:56.253] | : . queued futures: [n=2] TRUE, TRUE
[08:06:56.254] | : signalConditionsASAP(MulticoreFuture, pos=1) ... done
[08:06:56.254] | : resolve() for MulticoreFuture ...
[08:06:56.254] | : resolve() for MulticoreFuture ... done
[08:06:56.254] | : length: 0 (resolved future 1)
[08:06:56.254] | future_mapply() -> future_xapply() ... done
[08:06:56.254] | Relaying remaining futures ...
[08:06:56.254] | : signalConditionsASAP(NULL, pos=0) ...
[08:06:56.254] | : . nx: 2
[08:06:56.255] | : . relay: TRUE
[08:06:56.255] | : . stdout: TRUE
[08:06:56.255] | : . signal: TRUE
[08:06:56.255] | : . resignal: FALSE
[08:06:56.255] | : . force: TRUE
[08:06:56.255] | : . relayed: [n=2] TRUE, TRUE
[08:06:56.255] | : . queued futures: [n=2] TRUE, TRUE
 - flush all
[08:06:56.255] | : . relayed: [n=2] TRUE, TRUE
[08:06:56.256] | : . queued futures: [n=2] TRUE, TRUE
[08:06:56.256] | : signalConditionsASAP(NULL, pos=0) ... done
[08:06:56.256] | Relaying remaining futures ... done
[08:06:56.256] future_mapply() ... done
[08:06:56.256]  - Number of value chunks collected: 2
[08:06:56.256] Resolving 2 futures (chunks) ... DONE
[08:06:56.256] Reducing values from 2 chunks ...
[08:06:56.256]  - Number of values collected after concatenation: 2
[08:06:56.256]  - Number of values expected: 2
[08:06:56.257] Reducing values from 2 chunks ... DONE


* future_mapply(x, ..., future.stdout = TRUE) ... DONE
* future_mapply(x, ..., future.stdout = NA) ...
[08:06:56.257] future_mapply() ...
[08:06:56.257] | future_mapply() -> future_xapply() ...
[08:06:56.258] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:56.258] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:56.258] | : Number of chunks: 2
[08:06:56.258] | : getGlobalsAndPackagesXApply() ...
[08:06:56.258] | : . future.globals: TRUE
[08:06:56.259] | : . getGlobalsAndPackages() ...
[08:06:56.259] | : . ' Searching for globals ...
[08:06:56.269] | : . ' , globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[08:06:56.269] | : . ' Searching for globals ... done
[08:06:56.269] | : . ' Resolving globals: FALSE
[08:06:56.269] | : . ' Search for packages associated with the globals ...
[08:06:56.269] | : . ' , Packages associated with globals: [1] ‘base’
[08:06:56.270] | : . ' , Packages: [1] ‘base’
[08:06:56.270] | : . ' Search for packages associated with the globals ... done
[08:06:56.270] | : . ' The total size of the 1 globals is 1.04 KiB (1066 bytes)
[08:06:56.270] | : . ' The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[08:06:56.270] | : . ' Packages after dropping 'base': [0] 
[08:06:56.271] | : . ' globals: [1] ‘FUN’
[08:06:56.271] | : . ' packages: [0] 
[08:06:56.271] | : . getGlobalsAndPackages() ... done
[08:06:56.271] | : . globals found/used: [n=1] ‘FUN’
[08:06:56.271] | : . needed namespaces: [n=0] 
[08:06:56.271] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[08:06:56.271] | : . List of 2
[08:06:56.271] | : .  $ ...future.FUN:function (x, y)  
[08:06:56.271] | : .  $ MoreArgs     : NULL
[08:06:56.271] | : .  - attr(*, "where")=List of 2
[08:06:56.271] | : .   ..$ ...future.FUN:<environment: 0x55eee2403360> 
[08:06:56.271] | : .   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[08:06:56.271] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:56.271] | : .  - attr(*, "resolved")= logi FALSE
[08:06:56.271] | : .  - attr(*, "total_size")= num NA
[08:06:56.274] | : . Packages to be attached in all futures: [n=0] 
[08:06:56.274] | : getGlobalsAndPackagesXApply() ... done
[08:06:56.275] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:56.275] | : List of 5
[08:06:56.275] | :  $ ...future.FUN            :function (x, y)  
[08:06:56.275] | :  $ MoreArgs                 : NULL
[08:06:56.275] | :  $ ...future.elements_ii    : NULL
[08:06:56.275] | :  $ ...future.seeds_ii       : NULL
[08:06:56.275] | :  $ ...future.globals.maxSize: NULL
[08:06:56.275] | :  - attr(*, "where")=List of 5
[08:06:56.275] | :   ..$ ...future.FUN            :<environment: 0x55eee2403360> 
[08:06:56.275] | :   ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[08:06:56.275] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:56.275] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:56.275] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:56.275] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:56.275] | :  - attr(*, "resolved")= logi FALSE
[08:06:56.275] | :  - attr(*, "total_size")= num NA
[08:06:56.279] | : Number of futures (= number of chunks): 2
[08:06:56.279] | : Launching 2 futures (chunks) ...
[08:06:56.279] | : Chunk #1 of 2 ...
[08:06:56.279] | :  - Finding globals in '...' for chunk #1 ...
[08:06:56.279] | : getGlobalsAndPackages() ...
[08:06:56.279] | : . Searching for globals ...
[08:06:56.280] | : . ' globals found: [0] 
[08:06:56.280] | : . Searching for globals ... done
[08:06:56.280] | : . globals: [0] <none>
[08:06:56.280] | : . packages: [0] <none>
[08:06:56.280] | : getGlobalsAndPackages() ... done
[08:06:56.280] | :    + additional globals found: [n=0] 
[08:06:56.280] | :    + additional namespaces needed: [n=0] 
[08:06:56.281] | :  - Finding globals in '...' for chunk #1 ... DONE
[08:06:56.281] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:06:56.281] | :  - seeds: <none>
[08:06:56.281] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:56.281] | : future(..., label = ‘future_mapply-1’) ...
[08:06:56.281] | : . lazy: FALSE
[08:06:56.281] | : . stdout: NA
[08:06:56.281] | : . conditions: [n=1] ‘condition’
[08:06:56.281] | : . gc: FALSE
[08:06:56.281] | : . earlySignal: FALSE
[08:06:56.282] | : . getGlobalsAndPackages() ...
[08:06:56.282] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:56.282] | : . ' Resolving globals: FALSE
[08:06:56.282] | : . ' Search for packages associated with the globals ...
[08:06:56.282] | : . ' , Packages associated with globals: [0] 
[08:06:56.282] | : . ' , Packages: [0] 
[08:06:56.282] | : . ' Search for packages associated with the globals ... done
[08:06:56.283] | : . ' Packages after dropping 'base': [0] 
[08:06:56.283] | : . ' globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:56.283] | : . ' packages: [0] 
[08:06:56.283] | : . getGlobalsAndPackages() ... done
[08:06:56.283] | : . run() for ‘Future’ (‘future_mapply-1’) ...
[08:06:56.283] | : . ' state: ‘created’
[08:06:56.283] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:56.284] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:56.284] | : . ' Using MulticoreFutureBackend ...
[08:06:56.284] | : . ' , Number of futures since start: 10 (10 created, 10 launched, 10 finished)
[08:06:56.284] | : . ' , Launching futures ...
[08:06:56.284] | : . ' , ; launchFuture() for MulticoreFutureBackend ...
[08:06:56.284] | : . ' , ; ` getFutureData() ...
[08:06:56.284] | : . ' , ; ` | getFutureCore() ...
[08:06:56.284] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:06:56.285] | : . ' , ; ` | getFutureCore() ... done
[08:06:56.285] | : . ' , ; ` | getFutureCapture() ...
[08:06:56.285] | : . ' , ; ` | getFutureCapture() ... done
[08:06:56.285] | : . ' , ; ` | getFutureContext() ...
[08:06:56.285] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:56.285] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:06:56.285] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:56.285] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:06:56.285] | : . ' , ; ` | getFutureContext() ... done
[08:06:56.286] | : . ' , ; ` getFutureData() ... done
[08:06:56.286] | : . ' , ; ` requestCore(..., workers = 2) ...
[08:06:56.286] | : . ' , ; ` requestCore(..., workers = 2) ... done
[08:06:56.293] | : . ' , ; ` MulticoreFuture started
[08:06:56.294] | : . ' , ; launchFuture() for MulticoreFutureBackend ... done
[08:06:56.294] | : . ' , Launching futures ... done
[08:06:56.294] | : . ' , Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:56.294] | : . ' Using MulticoreFutureBackend ... done
[08:06:56.295] | : . run() for ‘Future’ (‘future_mapply-1’) ... done
[08:06:56.295] | : future(..., label = ‘future_mapply-1’) ... done
[08:06:56.295] | : Created future:
[08:06:56.296] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:56.296] | : . ' , ; ` | Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:06:56.297] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:56.297] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:56.297] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:56.297] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:06:56.298] | : . ' , ; ` | : . New stack:
[08:06:56.298] | : . ' , ; ` | : . List of 1
[08:06:56.298] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:56.298] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:56.298] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:06:56.298] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:56.298] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.298] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.298] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:56.298] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:56.302] | : . ' , ; ` | : . Old stack:
[08:06:56.302] | : . ' , ; ` | : . List of 1
[08:06:56.302] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:56.302] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:56.302] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:56.302] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:56.302] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.302] | : . ' , ; ` | : .     ...)  
[08:06:56.302] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.302] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.302] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:56.302] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:56.302] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.302] | : . ' , ; ` | : .     ...)  
[08:06:56.302] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.302] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:56.307] | : . ' , ; ` | : . Not identical
[08:06:56.307] | : . ' , ; ` | : . all.equal() for future ...
[08:06:56.307] | : readImmediateCondition() ...
[08:06:56.308] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.308] | : . Number of RDS files: 0
[08:06:56.308] | : . Returned conditions set:
[08:06:56.308] | : .  list()
[08:06:56.309] | : readImmediateCondition() ... done
[08:06:56.295] | : MulticoreFuture:
[08:06:56.295] | : Label: ‘future_mapply-1’
[08:06:56.295] | : Expression:
[08:06:56.295] | : {
[08:06:56.295] | :     "# future.apply:::future_xapply(): preserve future option"
[08:06:56.295] | :     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:56.295] | :     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:56.295] | :         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:56.295] | :         on.exit(options(oopts), add = TRUE)
[08:06:56.295] | :     }
[08:06:56.295] | :     {
[08:06:56.295] | :         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[08:06:56.295] | :             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[08:06:56.295] | :         do.call(mapply, args = args)
[08:06:56.295] | :     }
[08:06:56.295] | : }
[08:06:56.295] | : Globals: 5 objects totaling 6.51 KiB (function ‘...future.FUN’ of 1.04 KiB, list ‘...future.elements_ii’ of 71 bytes, NULL ‘MoreArgs’ of 27 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:56.295] | : Packages: <none>
[08:06:56.295] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:56.295] | : Capture standard output: NA
[08:06:56.295] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:56.295] | : Immediate condition classes: ‘immediateCondition’
[08:06:56.295] | : Lazy evaluation: FALSE
[08:06:56.295] | : Local evaluation: TRUE
[08:06:56.295] | : Asynchronous evaluation: TRUE
[08:06:56.295] | : Early signaling: FALSE
[08:06:56.295] | : Environment: R_GlobalEnv
[08:06:56.295] | : State: ‘running’
[08:06:56.295] | : Resolved: FALSE
[08:06:56.295] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-17
[08:06:56.295] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:56.295] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:56.295] | : Value: <not collected>
[08:06:56.295] | : Conditions captured: <none>
[08:06:56.309] | : Chunk #1 of 2 ... DONE
[08:06:56.309] | : Chunk #2 of 2 ...
[08:06:56.310] | :  - Finding globals in '...' for chunk #2 ...
[08:06:56.310] | : getGlobalsAndPackages() ...
[08:06:56.310] | : . Searching for globals ...
[08:06:56.311] | : . ' globals found: [0] 
[08:06:56.311] | : . Searching for globals ... done
[08:06:56.311] | : . globals: [0] <none>
[08:06:56.311] | : . packages: [0] <none>
[08:06:56.311] | : getGlobalsAndPackages() ... done
[08:06:56.312] | :    + additional globals found: [n=0] 
[08:06:56.312] | :    + additional namespaces needed: [n=0] 
[08:06:56.312] | :  - Finding globals in '...' for chunk #2 ... DONE
[08:06:56.312] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:06:56.312] | :  - seeds: <none>
[08:06:56.312] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:56.312] | : future(..., label = ‘future_mapply-2’) ...
[08:06:56.312] | : . lazy: FALSE
[08:06:56.313] | : . stdout: NA
[08:06:56.313] | : . conditions: [n=1] ‘condition’
[08:06:56.313] | : . gc: FALSE
[08:06:56.313] | : . earlySignal: FALSE
[08:06:56.313] | : . getGlobalsAndPackages() ...
[08:06:56.313] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:56.313] | : . ' Resolving globals: FALSE
[08:06:56.314] | : . ' Search for packages associated with the globals ...
[08:06:56.314] | : . ' , Packages associated with globals: [0] 
[08:06:56.307] | : . ' , ; ` | : . ' List of 2
[08:06:56.307] | : . ' , ; ` | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:56.307] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:56.307] | : . ' , ; ` | : . '   ..- attr(*, "init")= logi TRUE
[08:06:56.307] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:56.307] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.307] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.307] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:56.307] | : . ' , ; ` | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:56.307] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:56.307] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:56.307] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:56.307] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.307] | : . ' , ; ` | : . '     ...)  
[08:06:56.307] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.307] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.307] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:56.307] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:56.307] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.307] | : . ' , ; ` | : . '     ...)  
[08:06:56.307] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.314] | : . ' , Packages: [0] 
[08:06:56.315] | : . ' Search for packages associated with the globals ... done
[08:06:56.315] | : . ' Packages after dropping 'base': [0] 
[08:06:56.315] | : . ' globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:56.315] | : . ' packages: [0] 
[08:06:56.315] | : . ' , ; ` | : . ' Formals differ
[08:06:56.315] | : . getGlobalsAndPackages() ... done
[08:06:56.315] | : . ' , ; ` | : . all.equal() for future ... done
[08:06:56.315] | : . ' , ; ` | : . Future strategies differ at level 1
[08:06:56.315] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:06:56.316] | : . ' , ; ` | : plan(): Setting new future backend stack:
[08:06:56.316] | : . run() for ‘Future’ (‘future_mapply-2’) ...
[08:06:56.316] | : . ' state: ‘created’
[08:06:56.316] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:56.316] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:56.316] | : . ' Using MulticoreFutureBackend ...
[08:06:56.316] | : . ' , ; ` | : List of future strategies:
[08:06:56.316] | : . ' , ; ` | : 1. sequential:
[08:06:56.316] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:56.316] | : . ' , ; ` | :    - tweaked: FALSE
[08:06:56.316] | : . ' , ; ` | :    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:56.316] | : . ' , Number of futures since start: 11 (11 created, 11 launched, 10 finished)
[08:06:56.317] | : . ' , Launching futures ...
[08:06:56.317] | : . ' , ; launchFuture() for MulticoreFutureBackend ...
[08:06:56.317] | : . ' , ; ` getFutureData() ...
[08:06:56.317] | : . ' , ; ` | getFutureCore() ...
[08:06:56.317] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:06:56.317] | : . ' , ; ` | getFutureCore() ... done
[08:06:56.318] | : . ' , ; ` | getFutureCapture() ...
[08:06:56.318] | : . ' , ; ` | getFutureCapture() ... done
[08:06:56.318] | : . ' , ; ` | getFutureContext() ...
[08:06:56.318] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:56.318] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:06:56.318] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:56.318] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:06:56.319] | : . ' , ; ` | getFutureContext() ... done
[08:06:56.319] | : . ' , ; ` getFutureData() ... done
[08:06:56.319] | : . ' , ; ` requestCore(..., workers = 2) ...
[08:06:56.320] | : . ' , ; ` requestCore(..., workers = 2) ... done
[08:06:56.317] | : . ' , ; ` | : List of 1
[08:06:56.317] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:56.317] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:56.317] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:06:56.317] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:56.317] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.317] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.317] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:56.317] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:56.321] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:56.321] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:56.321] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:56.321] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:06:56.322] | : . ' , ; ` MulticoreFuture started
[08:06:56.323] | : . ' , ; launchFuture() for MulticoreFutureBackend ... done
[08:06:56.323] | : . ' , Launching futures ... done
[08:06:56.324] | : . ' , Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:56.324] | : . ' Using MulticoreFutureBackend ... done
[08:06:56.324] | : . run() for ‘Future’ (‘future_mapply-2’) ... done
[08:06:56.325] | : future(..., label = ‘future_mapply-2’) ... done
[08:06:56.321] | : . ' , ; ` | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:56.321] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:56.321] | : . ' , ; ` | : . '  - attr(*, "init")= logi TRUE
[08:06:56.321] | : . ' , ; ` | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:56.321] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.321] | : . ' , ; ` | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.321] | : . ' , ; ` | : . '  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:56.325] | : Created future:
[08:06:56.325] | : . ' , ; ` | : . ' init: TRUE
[08:06:56.325] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ...
[08:06:56.325] | : . ' , ; ` | : . ' , Backend function: <‘NULL’>
[08:06:56.325] | : . ' , ; ` | : . ' , Evaluator tweak arguments: [n=0]
[08:06:56.326] | : . ' , ; ` | : . ' ,  list()
[08:06:56.326] | : . ' , ; ` | : . ' , Evaluator formal arguments: [n=2]
[08:06:56.326] | : . ' , ; ` | : . ' ,  list()
[08:06:56.327] | : . ' , ; ` | : . ' , Backend factory arguments: [n=2]
[08:06:56.327] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:56.327] | : . ' , ; ` | Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:06:56.327] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:56.328] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:56.328] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:56.327] | : . ' , ; ` | : . ' , Dotted pair list of 2
[08:06:56.327] | : . ' , ; ` | : . ' ,  $ gc         : logi FALSE
[08:06:56.327] | : . ' , ; ` | : . ' ,  $ earlySignal: logi FALSE
[08:06:56.328] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:06:56.329] | : . ' , ; ` | : . New stack:
[08:06:56.329] | : . ' , ; ` | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:06:56.329] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ... done
[08:06:56.329] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:06:56.329] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:56.329] | : . ' , ; ` | : plan(): nbrOfWorkers() = 1
[08:06:56.329] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:56.330] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:56.330] | : . ' , ; ` assign_globals() ...
[08:06:56.329] | : . ' , ; ` | : . List of 1
[08:06:56.329] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:56.329] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:56.329] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:06:56.329] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:56.329] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.329] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.329] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:56.329] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:56.333] | : . ' , ; ` | : . Old stack:
[08:06:56.330] | : . ' , ; ` List of 5
[08:06:56.330] | : . ' , ; `  $ ...future.FUN            :function (x, y)  
[08:06:56.330] | : . ' , ; `  $ MoreArgs                 : NULL
[08:06:56.330] | : . ' , ; `  $ ...future.elements_ii    :List of 2
[08:06:56.330] | : . ' , ; `   ..$ :List of 1
[08:06:56.330] | : . ' , ; `   .. ..$ : int 1
[08:06:56.330] | : . ' , ; `   ..$ :List of 1
[08:06:56.330] | : . ' , ; `   .. ..$ : int 0
[08:06:56.330] | : . ' , ; `  $ ...future.seeds_ii       : NULL
[08:06:56.330] | : . ' , ; `  $ ...future.globals.maxSize: NULL
[08:06:56.330] | : . ' , ; `  - attr(*, "where")=List of 5
[08:06:56.330] | : . ' , ; `   ..$ ...future.FUN            :<environment: 0x55eee2403360> 
[08:06:56.330] | : . ' , ; `   ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[08:06:56.330] | : . ' , ; `   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:56.330] | : . ' , ; `   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:56.330] | : . ' , ; `   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:56.330] | : . ' , ; `  - attr(*, "resolved")= logi FALSE
[08:06:56.330] | : . ' , ; `  - attr(*, "total_size")= num NA
[08:06:56.330] | : . ' , ; `  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:56.330] | : . ' , ; `  - attr(*, "already-done")= logi TRUE
[08:06:56.338] | : readImmediateCondition() ...
[08:06:56.338] | : . ' , ; ` - copied ‘...future.FUN’ to environment
[08:06:56.338] | : . ' , ; ` - copied ‘MoreArgs’ to environment
[08:06:56.338] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.338] | : . ' , ; ` - copied ‘...future.elements_ii’ to environment
[08:06:56.338] | : . ' , ; ` - copied ‘...future.seeds_ii’ to environment
[08:06:56.338] | : . ' , ; ` - copied ‘...future.globals.maxSize’ to environment
[08:06:56.338] | : . Number of RDS files: 0
[08:06:56.339] | : . ' , ; ` assign_globals() ... done
[08:06:56.339] | : . Returned conditions set:
[08:06:56.339] | : .  list()
[08:06:56.339] | : readImmediateCondition() ... done
[08:06:56.325] | : MulticoreFuture:
[08:06:56.325] | : Label: ‘future_mapply-2’
[08:06:56.325] | : Expression:
[08:06:56.325] | : {
[08:06:56.325] | :     "# future.apply:::future_xapply(): preserve future option"
[08:06:56.325] | :     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:56.325] | :     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:56.325] | :         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:56.325] | :         on.exit(options(oopts), add = TRUE)
[08:06:56.325] | :     }
[08:06:56.325] | :     {
[08:06:56.325] | :         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[08:06:56.325] | :             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[08:06:56.325] | :         do.call(mapply, args = args)
[08:06:56.325] | :     }
[08:06:56.325] | : }
[08:06:56.325] | : Globals: 5 objects totaling 6.51 KiB (function ‘...future.FUN’ of 1.04 KiB, list ‘...future.elements_ii’ of 71 bytes, NULL ‘MoreArgs’ of 27 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.ma[08:06:56.334] | : . ' , ; ` | : . List of 1
[08:06:56.334] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(consxSize’ of 27 bytes)
[08:06:56.325] | : Packages: <none>
[08:06:56.325] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:0traints = "multicore"), gc = FALSE, 
[08:06:56.334] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:56.325] | : Capture standard output: NA
[08:06:56.325] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)6:56.334] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:56.334] | 
[08:06:56.325] | : Immediate condition classes: ‘immediateCondition’
[08:06:56.325] | : Lazy evaluation: FALSE
[08:06:56.32: . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:56.334] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (worker5] | : Local evaluation: TRUE
[08:06:56.325] | : Asynchronous evaluation: TRUE
[08:06:56.325] | : Early signaling: FALSE
[08:06:s = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.334] | : . ' , ; ` | : .     ...)  
[08:06:5656.325] | : Environment: R_GlobalEnv
[08:06:56.325] | : State: ‘running’
[08:06:56.325] | : Resolved: FALSE
[08:06:56.325] |.334] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" . : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-18
[08:06:56.325] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08..
[08:06:56.334] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.in:06:56.325] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:56.325] | : Value: <not collected>
[terval" ...
[08:06:56.334] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:56.334] | : . ' , ; ` | : .08:06:56.325] | : Conditions captured: <none>
   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:56.334] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.334] | : . ' , ; ` | : .     ...)  
[08:06:56.334] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.334] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:56.340] | : . ' , ; ` | : . Not identical
[08:06:56.340] | : Chunk #2 of 2 ... DONE
[08:06:56.340] | : Launching 2 futures (chunks) ... DONE
[08:06:56.340] | : . ' , ; ` | : . all.equal() for future ...
[08:06:56.341] | : Resolving 2 futures (chunks) ...
[08:06:56.341] | : value() for list ...
[08:06:56.341] | : . recursive: 0
[08:06:56.341] | : . reduce: FALSE
[08:06:56.342] | : . length: 2

[08:06:56.342] | : . Number of remaining objects: 2
[08:06:56.342] | : . checking value #1:
[08:06:56.343] | : . 'obj' is MulticoreFuture
[08:06:56.341] | : . ' , ; ` | : . ' List of 2
[08:06:56.341] | : . ' , ; ` | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:56.341] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:56.341] | : . ' , ; ` | : . '   ..- attr(*, "init")= logi TRUE
[08:06:56.341] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:56.341] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.341] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.341] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:56.341] | : . ' , ; ` | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:56.341] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:56.341] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:56.341] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:56.341] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.341] | : . ' , ; ` | : . '     ...)  
[08:06:56.341] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.341] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.341] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:56.341] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:56.341] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.341] | : . ' , ; ` | : . '     ...)  
[08:06:56.341] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.351] | : . ' , ; ` | : . ' Formals differ
[08:06:56.351] | : . ' , ; ` | : . all.equal() for future ... done
[08:06:56.351] | : . ' , ; ` | : . Future strategies differ at level 1
[08:06:56.351] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:06:56.351] | : . ' , ; ` | : plan(): Setting new future backend stack:
[08:06:56.351] | : . ' , ; ` | : List of future strategies:
[08:06:56.351] | : . ' , ; ` | : 1. sequential:
[08:06:56.351] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:06:56.351] | : . ' , ; ` | :    - tweaked: FALSE
[08:06:56.351] | : . ' , ; ` | :    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:56.353] | : . readImmediateCondition() ...
[08:06:56.353] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.353] | : . ' Number of RDS files: 0
[08:06:56.354] | : . ' Returned conditions set:
[08:06:56.354] | : . '  list()
[08:06:56.354] | : . readImmediateCondition() ... done
[08:06:56.355] | : . checking value #2:
[08:06:56.355] | : . 'obj' is MulticoreFuture
[08:06:56.352] | : . ' , ; ` | : List of 1
[08:06:56.352] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:56.352] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:56.352] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:06:56.352] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:56.352] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.352] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.352] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:56.352] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:56.357] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:56.357] | : . ' , ; ` | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:56.357] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:56.358] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:06:56.358] | : . ' , ; ` | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:56.358] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:56.358] | : . ' , ; ` | : . '  - attr(*, "init")= logi TRUE
[08:06:56.358] | : . ' , ; ` | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:56.358] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.358] | : . ' , ; ` | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.358] | : . ' , ; ` | : . '  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:56.361] | : . ' , ; ` | : . ' init: TRUE
[08:06:56.361] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ...
[08:06:56.361] | : . ' , ; ` | : . ' , Backend function: <‘NULL’>
[08:06:56.361] | : . ' , ; ` | : . ' , Evaluator tweak arguments: [n=0]
[08:06:56.361] | : . ' , ; ` | : . ' ,  list()
[08:06:56.362] | : . ' , ; ` | : . ' , Evaluator formal arguments: [n=2]
[08:06:56.362] | : . ' , ; ` | : . ' ,  list()
[08:06:56.362] | : . ' , ; ` | : . ' , Backend factory arguments: [n=2]
[08:06:56.362] | : . ' , ; ` | : . ' , Dotted pair list of 2
[08:06:56.362] | : . ' , ; ` | : . ' ,  $ gc         : logi FALSE
[08:06:56.362] | : . ' , ; ` | : . ' ,  $ earlySignal: logi FALSE
[08:06:56.364] | : . ' , ; ` | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:06:56.364] | : . ' , ; ` | : . ' makeFutureBackend(<sequential>) ... done
[08:06:56.364] | : . ' , ; ` | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:06:56.364] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:56.364] | : . ' , ; ` | : plan(): nbrOfWorkers() = 1
[08:06:56.365] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:56.365] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:56.365] | : . ' , ; ` assign_globals() ...
[08:06:56.365] | : . readImmediateCondition() ...
[08:06:56.366] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.366] | : . ' Number of RDS files: 0
[08:06:56.366] | : . ' Returned conditions set:
[08:06:56.366] | : . '  list()
[08:06:56.367] | : . readImmediateCondition() ... done
[08:06:56.365] | : . ' , ; ` List of 5
[08:06:56.365] | : . ' , ; `  $ ...future.FUN            :function (x, y)  
[08:06:56.365] | : . ' , ; `  $ MoreArgs                 : NULL
[08:06:56.365] | : . ' , ; `  $ ...future.elements_ii    :List of 2
[08:06:56.365] | : . ' , ; `   ..$ :List of 1
[08:06:56.365] | : . ' , ; `   .. ..$ : int 0
[08:06:56.365] | : . ' , ; `   ..$ :List of 1
[08:06:56.365] | : . ' , ; `   .. ..$ : int 1
[08:06:56.365] | : . ' , ; `  $ ...future.seeds_ii       : NULL
[08:06:56.365] | : . ' , ; `  $ ...future.globals.maxSize: NULL
[08:06:56.365] | : . ' , ; `  - attr(*, "where")=List of 5
[08:06:56.365] | : . ' , ; `   ..$ ...future.FUN            :<environment: 0x55eee2403360> 
[08:06:56.365] | : . ' , ; `   ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[08:06:56.365] | : . ' , ; `   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:56.365] | : . ' , ; `   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:56.365] | : . ' , ; `   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:56.365] | : . ' , ; `  - attr(*, "resolved")= logi FALSE
[08:06:56.365] | : . ' , ; `  - attr(*, "total_size")= num NA
[08:06:56.365] | : . ' , ; `  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:56.365] | : . ' , ; `  - attr(*, "already-done")= logi TRUE
[08:06:56.374] | : . ' , ; ` - copied ‘...future.FUN’ to environment
[08:06:56.374] | : . ' , ; ` - copied ‘MoreArgs’ to environment
[08:06:56.374] | : . ' , ; ` - copied ‘...future.elements_ii’ to environment
[08:06:56.374] | : . ' , ; ` - copied ‘...future.seeds_ii’ to environment
[08:06:56.374] | : . ' , ; ` - copied ‘...future.globals.maxSize’ to environment
[08:06:56.375] | : . ' , ; ` assign_globals() ... done
[08:06:56.377] | : . Number of remaining objects: 2
[08:06:56.377] | : . checking value #1:
[08:06:56.378] | : . 'obj' is MulticoreFuture
[08:06:56.378] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:56.378] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:56.378] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:56.378] | : . ' , ; ` | : . all.equal() for FutureStrategyList ...
[08:06:56.379] | : . ' , ; ` | : . ' New stack:
[08:06:56.379] | : . ' , ; ` | : . ' List of 1
[08:06:56.379] | : . ' , ; ` | : . '  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:56.379] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:56.379] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:56.379] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:56.379] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.379] | : . ' , ; ` | : . '     ...)  
[08:06:56.379] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.379] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.379] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:56.379] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:56.379] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.379] | : . ' , ; ` | : . '     ...)  
[08:06:56.379] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.379] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:56.383] | : . ' , ; ` | : . ' Old stack:
[08:06:56.384] | : . ' , ; ` | : . ' List of 1
[08:06:56.384] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:56.384] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:56.384] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:56.384] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:56.384] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.384] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.384] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:56.384] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee1c119a8> 
[08:06:56.384] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:56.384] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.384] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:56.388] | : . ' , ; ` | : . ' Not identical
[08:06:56.388] | : . readImmediateCondition() ...
[08:06:56.388] | : . ' , ; ` | : . ' all.equal() for future ...
[08:06:56.388] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.389] | : . ' Number of RDS files: 0
[08:06:56.389] | : . ' Returned conditions set:
[08:06:56.389] | : . '  list()
[08:06:56.390] | : . readImmediateCondition() ... done
[08:06:56.390] | : . checking value #2:
[08:06:56.390] | : . 'obj' is MulticoreFuture
[08:06:56.388] | : . ' , ; ` | : . ' , List of 2
[08:06:56.388] | : . ' , ; ` | : . ' ,  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:56.388] | : . ' , ; ` | : . ' ,     earlySignal = FALSE, envir = parent.frame())  
[08:06:56.388] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:56.388] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:56.388] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.388] | : . ' , ; ` | : . ' ,     ...)  
[08:06:56.388] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.388] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.388] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategy)
[08:06:56.388] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:56.388] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.388] | : . ' , ; ` | : . ' ,     ...)  
[08:06:56.388] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.388] | : . ' , ; ` | : . ' ,  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:56.388] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:56.388] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:56.388] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:56.388] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.388] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.388] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:56.388] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eee1c119a8> 
[08:06:56.388] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:56.388] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.397] | : . ' , ; ` | : . ' , Formals differ
[08:06:56.398] | : . ' , ; ` | : . ' all.equal() for future ... done
[08:06:56.398] | : . ' , ; ` | : . ' Future strategies differ at level 1
[08:06:56.398] | : . ' , ; ` | : . all.equal() for FutureStrategyList ... done
[08:06:56.398] | : . ' , ; ` | : . plan(): Setting new future backend stack:
[08:06:56.398] | : . ' , ; ` | : . List of future strategies:
[08:06:56.398] | : . ' , ; ` | : . 1. multicore:
[08:06:56.398] | : . ' , ; ` | : .    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:06:56.398] | : . ' , ; ` | : .    - tweaked: FALSE
[08:06:56.398] | : . ' , ; ` | : .    - call: plan(strategy)
[08:06:56.400] | : . readImmediateCondition() ...
[08:06:56.401] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.401] | : . ' Number of RDS files: 0
[08:06:56.401] | : . ' Returned conditions set:
[08:06:56.401] | : . '  list()
[08:06:56.402] | : . readImmediateCondition() ... done
[08:06:56.399] | : . ' , ; ` | : . List of 1
[08:06:56.399] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:56.399] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:56.399] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:56.399] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:56.399] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.399] | : . ' , ; ` | : .     ...)  
[08:06:56.399] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.399] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.399] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:56.399] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:56.399] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.399] | : . ' , ; ` | : .     ...)  
[08:06:56.399] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.399] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:56.404] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:56.404] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:56.404] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:56.404] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:56.405] | : . ' , ; ` | : . plan(): nbrOfWorkers() = 2
[08:06:56.405] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:56.405] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:56.405] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:56.412] | : . Number of remaining objects: 2
[08:06:56.413] | : . checking value #1:
[08:06:56.413] | : . 'obj' is MulticoreFuture
[08:06:56.423] | : . readImmediateCondition() ...
[08:06:56.423] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.424] | : . ' Number of RDS files: 0
[08:06:56.424] | : . ' Returned conditions set:
[08:06:56.424] | : . '  list()
[08:06:56.424] | : . readImmediateCondition() ... done
[08:06:56.425] | : . checking value #2:
[08:06:56.425] | : . 'obj' is MulticoreFuture
[08:06:56.425] | : . readImmediateCondition() ...
[08:06:56.425] | : . ' Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.425] | : . ' Number of RDS files: 0
[08:06:56.425] | : . ' Returned conditions set:
[08:06:56.425] | : . '  list()
[08:06:56.426] | : . readImmediateCondition() ... done
[08:06:56.426] | : . MulticoreFuture #2
[08:06:56.426] | : . signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:06:56.426] | : . ' nx: 2
[08:06:56.426] | : . ' relay: TRUE
[08:06:56.426] | : . ' stdout: TRUE
[08:06:56.426] | : . ' signal: TRUE
[08:06:56.427] | : . ' resignal: FALSE
[08:06:56.427] | : . ' force: TRUE
[08:06:56.427] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:56.427] | : . ' queued futures: [n=2] FALSE, FALSE
[08:06:56.427] | : . ' until=1
[08:06:56.427] | : . ' relaying element #1
[08:06:56.427] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:56.428] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:56.428] | : . signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:06:56.428] | : . value(<MulticoreFuture>, ...) ...
[08:06:56.428] | : . value(<MulticoreFuture>, ...) ... done
[08:06:56.428] | : . value() for MulticoreFuture (‘future_mapply-2’) ...
[08:06:56.428] | : . ' result() for MulticoreFuture ...
[08:06:56.429] | : . ' , readImmediateCondition() ...
[08:06:56.429] | : . ' , ; Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.430] | : . ' , ; Number of RDS files: 0
[08:06:56.430] | : . ' , ; Returned conditions set:
[08:06:56.430] | : . ' , ;  list()
[08:06:56.430] | : . ' , readImmediateCondition() ... done
[08:06:56.431] | : . ' , result() for MulticoreFuture ...
[08:06:56.431] | : . ' , result() for MulticoreFuture ... done
[08:06:56.432] | : . ' , signalConditions() ...
[08:06:56.432] | : . ' , ; include = ‘immediateCondition’
[08:06:56.432] | : . ' , ; exclude = 
[08:06:56.432] | : . ' , ; resignal = FALSE
[08:06:56.432] | : . ' , ; Number of conditions: 6
[08:06:56.432] | : . ' , ;  int 6
[08:06:56.433] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.434] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.434] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.434] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.434] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.434] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.434] | : . ' , ; Drop signaled conditions: 0
[08:06:56.435] | : . ' , signalConditions() ... done
[08:06:56.435] | : . ' result() for MulticoreFuture ... done
[08:06:56.435] | : . ' result() for MulticoreFuture ...
[08:06:56.435] | : . ' result() for MulticoreFuture ... done
[08:06:56.435] | : . ' signalConditions() ...
[08:06:56.436] | : . ' , include = ‘immediateCondition’
[08:06:56.436] | : . ' , exclude = 
[08:06:56.436] | : . ' , resignal = FALSE
[08:06:56.436] | : . ' , Number of conditions: 6
[08:06:56.436] | : . ' ,  int 6
[08:06:56.437] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.437] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.437] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.437] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.438] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.438] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.438] | : . ' , Drop signaled conditions: 0
[08:06:56.438] | : . ' signalConditions() ... done
[08:06:56.438] | : . ' check for misuse ...
[08:06:56.438] | : . ' check for misuse ... done
[08:06:56.438] | : . value() for MulticoreFuture (‘future_mapply-2’) ... done
[08:06:56.439] | : . value: <list>
[08:06:56.439] | : . signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:06:56.439] | : . ' nx: 2
[08:06:56.439] | : . ' relay: TRUE
[08:06:56.439] | : . ' stdout: TRUE
[08:06:56.439] | : . ' signal: TRUE
[08:06:56.439] | : . ' resignal: FALSE
[08:06:56.439] | : . ' force: TRUE
[08:06:56.439] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:56.440] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:56.440] | : . ' until=1
[08:06:56.440] | : . ' relaying element #1
[08:06:56.440] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:56.440] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:56.440] | : . signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:06:56.440] | : . resolve() for MulticoreFuture ...
[08:06:56.440] | : . resolve() for MulticoreFuture ... done
[08:06:56.441] | : . length: 1 (resolved future 2)
[08:06:56.441] | : value() for list ... done
[08:06:56.451] | : Number of remaining objects: 1
[08:06:56.451] | : checking value #1:
[08:06:56.451] | : 'obj' is MulticoreFuture
[08:06:56.462] | : readImmediateCondition() ...
[08:06:56.462] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.462] | : . Number of RDS files: 0
[08:06:56.462] | : . Returned conditions set:
[08:06:56.462] | : .  list()
[08:06:56.463] | : readImmediateCondition() ... done
[08:06:56.473] | : Number of remaining objects: 1
[08:06:56.473] | : checking value #1:
[08:06:56.473] | : 'obj' is MulticoreFuture
[08:06:56.484] | : readImmediateCondition() ...
[08:06:56.484] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.484] | : . Number of RDS files: 0
[08:06:56.484] | : . Returned conditions set:
[08:06:56.484] | : .  list()
[08:06:56.485] | : readImmediateCondition() ... done
[08:06:56.495] | : Number of remaining objects: 1
[08:06:56.495] | : checking value #1:
[08:06:56.495] | : 'obj' is MulticoreFuture
[08:06:56.506] | : readImmediateCondition() ...
[08:06:56.506] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.506] | : . Number of RDS files: 0
[08:06:56.506] | : . Returned conditions set:
[08:06:56.507] | : .  list()
[08:06:56.507] | : readImmediateCondition() ... done
[08:06:56.517] | : Number of remaining objects: 1
[08:06:56.518] | : checking value #1:
[08:06:56.518] | : 'obj' is MulticoreFuture
[08:06:56.528] | : readImmediateCondition() ...
[08:06:56.528] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.529] | : . Number of RDS files: 0
[08:06:56.529] | : . Returned conditions set:
[08:06:56.529] | : .  list()
[08:06:56.529] | : readImmediateCondition() ... done
[08:06:56.540] | : Number of remaining objects: 1
[08:06:56.540] | : checking value #1:
[08:06:56.540] | : 'obj' is MulticoreFuture
[08:06:56.550] | : readImmediateCondition() ...
[08:06:56.551] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.551] | : . Number of RDS files: 0
[08:06:56.551] | : . Returned conditions set:
[08:06:56.551] | : .  list()
[08:06:56.552] | : readImmediateCondition() ... done
[08:06:56.562] | : Number of remaining objects: 1
[08:06:56.562] | : checking value #1:
[08:06:56.562] | : 'obj' is MulticoreFuture
[08:06:56.573] | : readImmediateCondition() ...
[08:06:56.573] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.573] | : . Number of RDS files: 0
[08:06:56.573] | : . Returned conditions set:
[08:06:56.573] | : .  list()
[08:06:56.574] | : readImmediateCondition() ... done
[08:06:56.584] | : Number of remaining objects: 1
[08:06:56.584] | : checking value #1:
[08:06:56.584] | : 'obj' is MulticoreFuture
[08:06:56.595] | : readImmediateCondition() ...
[08:06:56.595] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.595] | : . Number of RDS files: 0
[08:06:56.595] | : . Returned conditions set:
[08:06:56.595] | : .  list()
[08:06:56.596] | : readImmediateCondition() ... done
[08:06:56.606] | : Number of remaining objects: 1
[08:06:56.606] | : checking value #1:
[08:06:56.606] | : 'obj' is MulticoreFuture
[08:06:56.617] | : readImmediateCondition() ...
[08:06:56.617] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.617] | : . Number of RDS files: 0
[08:06:56.617] | : . Returned conditions set:
[08:06:56.618] | : .  list()
[08:06:56.618] | : readImmediateCondition() ... done
[08:06:56.628] | : Number of remaining objects: 1
[08:06:56.629] | : checking value #1:
[08:06:56.629] | : 'obj' is MulticoreFuture
[08:06:56.639] | : readImmediateCondition() ...
[08:06:56.639] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.640] | : . Number of RDS files: 0
[08:06:56.640] | : . Returned conditions set:
[08:06:56.640] | : .  list()
[08:06:56.640] | : readImmediateCondition() ... done
[08:06:56.651] | : Number of remaining objects: 1
[08:06:56.651] | : checking value #1:
[08:06:56.651] | : 'obj' is MulticoreFuture
[08:06:56.661] | : readImmediateCondition() ...
[08:06:56.662] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.662] | : . Number of RDS files: 0
[08:06:56.662] | : . Returned conditions set:
[08:06:56.662] | : .  list()
[08:06:56.663] | : readImmediateCondition() ... done
[08:06:56.673] | : Number of remaining objects: 1
[08:06:56.673] | : checking value #1:
[08:06:56.673] | : 'obj' is MulticoreFuture
[08:06:56.684] | : readImmediateCondition() ...
[08:06:56.684] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.684] | : . Number of RDS files: 0
[08:06:56.684] | : . Returned conditions set:
[08:06:56.684] | : .  list()
[08:06:56.685] | : readImmediateCondition() ... done
[08:06:56.695] | : Number of remaining objects: 1
[08:06:56.695] | : checking value #1:
[08:06:56.695] | : 'obj' is MulticoreFuture
[08:06:56.706] | : readImmediateCondition() ...
[08:06:56.706] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.706] | : . Number of RDS files: 0
[08:06:56.706] | : . Returned conditions set:
[08:06:56.706] | : .  list()
[08:06:56.707] | : readImmediateCondition() ... done
[08:06:56.717] | : Number of remaining objects: 1
[08:06:56.717] | : checking value #1:
[08:06:56.717] | : 'obj' is MulticoreFuture
[08:06:56.728] | : readImmediateCondition() ...
[08:06:56.728] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.728] | : . Number of RDS files: 0
[08:06:56.728] | : . Returned conditions set:
[08:06:56.728] | : .  list()
[08:06:56.729] | : readImmediateCondition() ... done
[08:06:56.739] | : Number of remaining objects: 1
[08:06:56.739] | : checking value #1:
[08:06:56.739] | : 'obj' is MulticoreFuture
[08:06:56.750] | : readImmediateCondition() ...
[08:06:56.750] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.750] | : . Number of RDS files: 0
[08:06:56.750] | : . Returned conditions set:
[08:06:56.750] | : .  list()
[08:06:56.751] | : readImmediateCondition() ... done
[08:06:56.761] | : Number of remaining objects: 1
[08:06:56.761] | : checking value #1:
[08:06:56.761] | : 'obj' is MulticoreFuture
[08:06:56.772] | : readImmediateCondition() ...
[08:06:56.772] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.772] | : . Number of RDS files: 0
[08:06:56.772] | : . Returned conditions set:
[08:06:56.772] | : .  list()
[08:06:56.773] | : readImmediateCondition() ... done
[08:06:56.783] | : Number of remaining objects: 1
[08:06:56.783] | : checking value #1:
[08:06:56.783] | : 'obj' is MulticoreFuture
[08:06:56.794] | : readImmediateCondition() ...
[08:06:56.794] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.794] | : . Number of RDS files: 0
[08:06:56.794] | : . Returned conditions set:
[08:06:56.794] | : .  list()
[08:06:56.795] | : readImmediateCondition() ... done
[08:06:56.805] | : Number of remaining objects: 1
[08:06:56.805] | : checking value #1:
[08:06:56.805] | : 'obj' is MulticoreFuture
[08:06:56.816] | : readImmediateCondition() ...
[08:06:56.816] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.816] | : . Number of RDS files: 0
[08:06:56.816] | : . Returned conditions set:
[08:06:56.816] | : .  list()
[08:06:56.817] | : readImmediateCondition() ... done
[08:06:56.827] | : Number of remaining objects: 1
[08:06:56.827] | : checking value #1:
[08:06:56.827] | : 'obj' is MulticoreFuture
[08:06:56.838] | : readImmediateCondition() ...
[08:06:56.838] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.838] | : . Number of RDS files: 0
[08:06:56.838] | : . Returned conditions set:
[08:06:56.838] | : .  list()
[08:06:56.839] | : readImmediateCondition() ... done
[08:06:56.842] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:56.842] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:06:56.842] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:06:56.843] | : . ' , ; ` | : . all.equal() for FutureStrategyList ...
[08:06:56.843] | : . ' , ; ` | : . ' New stack:
[08:06:56.843] | : . ' , ; ` | : . ' List of 1
[08:06:56.843] | : . ' , ; ` | : . '  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:56.843] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:56.843] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:56.843] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:56.843] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.843] | : . ' , ; ` | : . '     ...)  
[08:06:56.843] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.843] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.843] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:56.843] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:56.843] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.843] | : . ' , ; ` | : . '     ...)  
[08:06:56.843] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.843] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:56.847] | : . ' , ; ` | : . ' Old stack:
[08:06:56.849] | : Number of remaining objects: 1
[08:06:56.849] | : checking value #1:
[08:06:56.849] | : 'obj' is MulticoreFuture
[08:06:56.847] | : . ' , ; ` | : . ' List of 1
[08:06:56.847] | : . ' , ; ` | : . '  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:56.847] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:56.847] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:06:56.847] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:56.847] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.847] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.847] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:56.847] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede244560> 
[08:06:56.847] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:56.847] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.847] | : . ' , ; ` | : . '  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:56.851] | : . ' , ; ` | : . ' Not identical
[08:06:56.851] | : . ' , ; ` | : . ' all.equal() for future ...
[08:06:56.851] | : . ' , ; ` | : . ' , List of 2
[08:06:56.851] | : . ' , ; ` | : . ' ,  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:56.851] | : . ' , ; ` | : . ' ,     earlySignal = FALSE, envir = parent.frame())  
[08:06:56.851] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:56.851] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:56.851] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.851] | : . ' , ; ` | : . ' ,     ...)  
[08:06:56.851] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.851] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.851] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategy)
[08:06:56.851] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:56.851] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.851] | : . ' , ; ` | : . ' ,     ...)  
[08:06:56.851] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.851] | : . ' , ; ` | : . ' ,  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:56.851] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:06:56.851] | : . ' , ; ` | : . ' ,   ..- attr(*, "init")= chr "done"
[08:06:56.851] | : . ' , ; ` | : . ' ,   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:56.851] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.851] | : . ' , ; ` | : . ' ,   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.851] | : . ' , ; ` | : . ' ,   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:06:56.851] | : . ' , ; ` | : . ' ,   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede244560> 
[08:06:56.851] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:06:56.851] | : . ' , ; ` | : . ' ,   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:06:56.858] | : . ' , ; ` | : . ' , Formals differ
[08:06:56.858] | : . ' , ; ` | : . ' all.equal() for future ... done
[08:06:56.859] | : . ' , ; ` | : . ' Future strategies differ at level 1
[08:06:56.859] | : . ' , ; ` | : . all.equal() for FutureStrategyList ... done
[08:06:56.859] | : . ' , ; ` | : . plan(): Setting new future backend stack:
[08:06:56.859] | : . ' , ; ` | : . List of future strategies:
[08:06:56.859] | : . ' , ; ` | : . 1. multicore:
[08:06:56.859] | : . ' , ; ` | : .    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:06:56.859] | : . ' , ; ` | : .    - tweaked: FALSE
[08:06:56.859] | : . ' , ; ` | : .    - call: plan(strategy)
[08:06:56.860] | : readImmediateCondition() ...
[08:06:56.860] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.860] | : . Number of RDS files: 0
[08:06:56.860] | : . Returned conditions set:
[08:06:56.860] | : .  list()
[08:06:56.861] | : readImmediateCondition() ... done
[08:06:56.859] | : . ' , ; ` | : . List of 1
[08:06:56.859] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:56.859] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:56.859] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:56.859] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:06:56.859] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.859] | : . ' , ; ` | : .     ...)  
[08:06:56.859] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.859] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.859] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:56.859] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:56.859] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.859] | : . ' , ; ` | : .     ...)  
[08:06:56.859] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.859] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:56.864] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:06:56.864] | : . ' , ; ` | : . plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:06:56.864] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:56.864] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:56.864] | : . ' , ; ` | : . plan(): nbrOfWorkers() = 2
[08:06:56.865] | : . ' , ; ` | : plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:06:56.865] | : . ' , ; ` | plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:56.865] | : . ' , ; ` plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:06:56.871] | : Number of remaining objects: 1
[08:06:56.871] | : checking value #1:
[08:06:56.871] | : 'obj' is MulticoreFuture
[08:06:56.872] | : readImmediateCondition() ...
[08:06:56.872] | : . Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.872] | : . Number of RDS files: 0
[08:06:56.872] | : . Returned conditions set:
[08:06:56.872] | : .  list()
[08:06:56.873] | : readImmediateCondition() ... done
[08:06:56.873] | : MulticoreFuture #1
[08:06:56.873] | : signalConditionsASAP(MulticoreFuture, pos=1) ...
[08:06:56.873] | : . nx: 2
[08:06:56.873] | : . relay: TRUE
[08:06:56.873] | : . stdout: TRUE
[08:06:56.873] | : . signal: TRUE
[08:06:56.873] | : . resignal: FALSE
[08:06:56.874] | : . force: TRUE
[08:06:56.874] | : . relayed: [n=2] FALSE, FALSE
[08:06:56.874] | : . queued futures: [n=2] FALSE, TRUE
[08:06:56.874] | : . until=1
[08:06:56.874] | : . relaying element #1
[08:06:56.874] | : . value() for MulticoreFuture (‘future_mapply-1’) ...
[08:06:56.874] | : . ' result() for MulticoreFuture ...
[08:06:56.875] | : . ' , readImmediateCondition() ...
[08:06:56.875] | : . ' , ; Path: ‘/tmp/Rtmp8IMcV3/.future/immediateConditions’
[08:06:56.875] | : . ' , ; Number of RDS files: 0
[08:06:56.875] | : . ' , ; Returned conditions set:
[08:06:56.875] | : . ' , ;  list()
[08:06:56.876] | : . ' , readImmediateCondition() ... done
[08:06:56.876] | : . ' , result() for MulticoreFuture ...
[08:06:56.876] | : . ' , result() for MulticoreFuture ... done
[08:06:56.876] | : . ' , signalConditions() ...
[08:06:56.877] | : . ' , ; include = ‘immediateCondition’
[08:06:56.877] | : . ' , ; exclude = 
[08:06:56.877] | : . ' , ; resignal = FALSE
[08:06:56.877] | : . ' , ; Number of conditions: 6
[08:06:56.877] | : . ' , ;  int 6
[08:06:56.878] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.878] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.878] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.878] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.878] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.878] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.879] | : . ' , ; Drop signaled conditions: 0
[08:06:56.879] | : . ' , signalConditions() ... done
[08:06:56.879] | : . ' result() for MulticoreFuture ... done
[08:06:56.879] | : . ' result() for MulticoreFuture ...
[08:06:56.879] | : . ' result() for MulticoreFuture ... done
[08:06:56.879] | : . ' signalConditions() ...
[08:06:56.879] | : . ' , include = ‘immediateCondition’
[08:06:56.880] | : . ' , exclude = 
[08:06:56.880] | : . ' , resignal = FALSE
[08:06:56.880] | : . ' , Number of conditions: 6
[08:06:56.880] | : . ' ,  int 6
[08:06:56.880] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.880] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.881] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.881] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.881] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.881] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.881] | : . ' , Drop signaled conditions: 0
[08:06:56.881] | : . ' signalConditions() ... done
[08:06:56.881] | : . ' relay stdout ...
[08:06:56.882] | : . ' relay stdout ... done
[08:06:56.882] | : . ' check for misuse ...
[08:06:56.882] | : . ' check for misuse ... done
[08:06:56.882] | : . value() for MulticoreFuture (‘future_mapply-1’) ... done
[08:06:56.882] | : . result() for MulticoreFuture ...
[08:06:56.882] | : . result() for MulticoreFuture ... done
[08:06:56.882] | : . signalConditions() ...
[08:06:56.882] | : . ' include = ‘immediateCondition’
[08:06:56.883] | : . ' exclude = 
[08:06:56.883] | : . ' resignal = FALSE
[08:06:56.883] | : . ' Number of conditions: 6
[08:06:56.883] | : . '  int 6
[08:06:56.883] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.884] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.884] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.884] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.884] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.884] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.884] | : . ' Drop signaled conditions: 0
[08:06:56.884] | : . signalConditions() ... done
[08:06:56.884] | : . result() for MulticoreFuture ...
[08:06:56.885] | : . result() for MulticoreFuture ... done
[08:06:56.885] | : . signalConditions() ...
[08:06:56.885] | : . ' include = ‘condition’
[08:06:56.885] | : . ' exclude = ‘error’, ‘immediateCondition’
[08:06:56.885] | : . ' resignal = TRUE
[08:06:56.885] | : . ' Number of conditions: 6
[08:06:56.885] | : . '  int 6
[08:06:56.886] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.886] | : . ' Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:56.294] | : . ' , ; ` attachPackages() ...
[08:06:56.886] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.886] | : . ' Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:56.294] | : . ' , ; ` | packages: [n=1] ‘future’
[08:06:56.886] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.886] | : . ' Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:56.295] | : . ' , ; ` attachPackages() ... done
[08:06:56.887] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.887] | : . ' Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:56.295] | : . ' , ; ` attachPackages() ...
[08:06:56.887] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.887] | : . ' Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:56.295] | : . ' , ; ` | packages: [n=0] 
[08:06:56.887] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.887] | : . ' Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:56.295] | : . ' , ; ` attachPackages() ... done
[08:06:56.887] | : . ' Drop signaled conditions: 6
[08:06:56.888] | : . signalConditions() ... done
[08:06:56.888] | : . relayed: [n=2] TRUE, FALSE
[08:06:56.888] | : . queued futures: [n=2] TRUE, TRUE
[08:06:56.888] | : signalConditionsASAP(MulticoreFuture, pos=1) ... done
[08:06:56.888] | : value(<MulticoreFuture>, ...) ...
[08:06:56.888] | : value(<MulticoreFuture>, ...) ... done
[08:06:56.888] | : value() for MulticoreFuture (‘future_mapply-1’) ...
[08:06:56.888] | : . result() for MulticoreFuture ...
[08:06:56.889] | : . result() for MulticoreFuture ... done
[08:06:56.889] | : . result() for MulticoreFuture ...
[08:06:56.889] | : . result() for MulticoreFuture ... done
[08:06:56.889] | : . signalConditions() ...
[08:06:56.889] | : . ' include = ‘immediateCondition’
[08:06:56.889] | : . ' exclude = 
[08:06:56.889] | : . ' resignal = FALSE
[08:06:56.889] | : . ' Number of conditions: 0
[08:06:56.890] | : . '  int 0
[08:06:56.890] | : . signalConditions() ... done
[08:06:56.890] | : . check for misuse ...
[08:06:56.890] | : . check for misuse ... done
[08:06:56.890] | : value() for MulticoreFuture (‘future_mapply-1’) ... done
[08:06:56.890] | : value: <list>
[08:06:56.891] | : signalConditionsASAP(MulticoreFuture, pos=1) ...
[08:06:56.891] | : . nx: 2
[08:06:56.891] | : . relay: TRUE
[08:06:56.891] | : . stdout: TRUE
[08:06:56.891] | : . signal: TRUE
[08:06:56.891] | : . resignal: FALSE
[08:06:56.891] | : . force: TRUE
[08:06:56.891] | : . relayed: [n=2] TRUE, FALSE
[08:06:56.891] | : . queued futures: [n=2] TRUE, TRUE
[08:06:56.892] | : . until=2
[08:06:56.892] | : . relaying element #2
[08:06:56.892] | : . value() for MulticoreFuture (‘future_mapply-2’) ...
[08:06:56.892] | : . ' result() for MulticoreFuture ...
[08:06:56.892] | : . ' result() for MulticoreFuture ... done
[08:06:56.892] | : . ' result() for MulticoreFuture ...
[08:06:56.892] | : . ' result() for MulticoreFuture ... done
[08:06:56.892] | : . ' signalConditions() ...
[08:06:56.893] | : . ' , include = ‘immediateCondition’
[08:06:56.893] | : . ' , exclude = 
[08:06:56.893] | : . ' , resignal = FALSE
[08:06:56.893] | : . ' , Number of conditions: 6
[08:06:56.893] | : . ' ,  int 6
[08:06:56.894] | : . ' , Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.894] | : . ' , Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.894] | : . ' , Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.894] | : . ' , Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.894] | : . ' , Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.894] | : . ' , Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.894] | : . ' , Drop signaled conditions: 0
[08:06:56.894] | : . ' signalConditions() ... done
[08:06:56.895] | : . ' relay stdout ...
[08:06:56.895] | : . ' relay stdout ... done
[08:06:56.895] | : . ' check for misuse ...
[08:06:56.895] | : . ' check for misuse ... done
[08:06:56.895] | : . value() for MulticoreFuture (‘future_mapply-2’) ... done
[08:06:56.895] | : . result() for MulticoreFuture ...
[08:06:56.895] | : . result() for MulticoreFuture ... done
[08:06:56.895] | : . signalConditions() ...
[08:06:56.896] | : . ' include = ‘immediateCondition’
[08:06:56.896] | : . ' exclude = 
[08:06:56.896] | : . ' resignal = FALSE
[08:06:56.896] | : . ' Number of conditions: 6
[08:06:56.896] | : . '  int 6
[08:06:56.896] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.897] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.897] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.897] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.897] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.897] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.897] | : . ' Drop signaled conditions: 0
[08:06:56.897] | : . signalConditions() ... done
[08:06:56.897] | : . result() for MulticoreFuture ...
[08:06:56.898] | : . result() for MulticoreFuture ... done
[08:06:56.898] | : . signalConditions() ...
[08:06:56.898] | : . ' include = ‘condition’
[08:06:56.898] | : . ' exclude = ‘error’, ‘immediateCondition’
[08:06:56.898] | : . ' resignal = TRUE
[08:06:56.898] | : . ' Number of conditions: 6
[08:06:56.898] | : . '  int 6
[08:06:56.899] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.899] | : . ' Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:56.323] | : . ' , ; ` attachPackages() ...
[08:06:56.899] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.899] | : . ' Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:56.324] | : . ' , ; ` | packages: [n=1] ‘future’
[08:06:56.899] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.899] | : . ' Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:56.325] | : . ' , ; ` attachPackages() ... done
[08:06:56.900] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.900] | : . ' Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:56.325] | : . ' , ; ` attachPackages() ...
[08:06:56.900] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.900] | : . ' Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:56.325] | : . ' , ; ` | packages: [n=0] 
[08:06:56.900] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:06:56.900] | : . ' Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:06:56.325] | : . ' , ; ` attachPackages() ... done
[08:06:56.901] | : . ' Drop signaled conditions: 6
[08:06:56.901] | : . signalConditions() ... done
[08:06:56.901] | : . relayed: [n=2] TRUE, TRUE
[08:06:56.901] | : . queued futures: [n=2] TRUE, TRUE
[08:06:56.901] | : signalConditionsASAP(MulticoreFuture, pos=1) ... done
[08:06:56.901] | : resolve() for MulticoreFuture ...
[08:06:56.901] | : resolve() for MulticoreFuture ... done
[08:06:56.901] | : length: 0 (resolved future 1)
[08:06:56.902] | future_mapply() -> future_xapply() ... done
[08:06:56.902] | Relaying remaining futures ...
[08:06:56.902] | : signalConditionsASAP(NULL, pos=0) ...
[08:06:56.902] | : . nx: 2
[08:06:56.902] | : . relay: TRUE
[08:06:56.902] | : . stdout: TRUE
[08:06:56.902] | : . signal: TRUE
[08:06:56.902] | : . resignal: FALSE
[08:06:56.902] | : . force: TRUE
[08:06:56.903] | : . relayed: [n=2] TRUE, TRUE
[08:06:56.903] | : . queued futures: [n=2] TRUE, TRUE
 - flush all
[08:06:56.903] | : . relayed: [n=2] TRUE, TRUE
[08:06:56.903] | : . queued futures: [n=2] TRUE, TRUE
[08:06:56.903] | : signalConditionsASAP(NULL, pos=0) ... done
[08:06:56.903] | Relaying remaining futures ... done
[08:06:56.903] future_mapply() ... done
[08:06:56.903]  - Number of value chunks collected: 2
[08:06:56.904] Resolving 2 futures (chunks) ... DONE
[08:06:56.904] Reducing values from 2 chunks ...
[08:06:56.904]  - Number of values collected after concatenation: 2
[08:06:56.904]  - Number of values expected: 2
[08:06:56.904] Reducing values from 2 chunks ... DONE


* future_mapply(x, ..., future.stdout = NA) ... DONE
* plan('multicore') ... DONE
* plan('multisession') ...
[08:06:56.905] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:56.905] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:06:56.905] | : all.equal() for FutureStrategyList ...
[08:06:56.905] | : . New stack:
[08:06:56.908] | : . List of 1
[08:06:56.908] | : .  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:06:56.908] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:56.908] | : .   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:06:56.908] | : .   ..- attr(*, "init")= logi TRUE
[08:06:56.908] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:06:56.908] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:06:56.908] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:06:56.908] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:06:56.908] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:06:56.908] | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:56.908] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:56.911] | : . Old stack:
[08:06:56.911] | : . List of 1
[08:06:56.911] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:56.911] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:06:56.911] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:56.911] | : .   ..- attr(*, "init")= chr "done"
[08:06:56.911] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.911] | : .     ...)  
[08:06:56.911] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.911] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.911] | : .   ..- attr(*, "call")= language plan(strategy)
[08:06:56.911] | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:56.911] | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.911] | : .     ...)  
[08:06:56.911] | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.911] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:56.915] | : . Not identical
[08:06:56.915] | : . all.equal() for future ...
[08:06:56.915] | : . ' List of 2
[08:06:56.915] | : . '  $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:06:56.915] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:56.915] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:06:56.915] | : . '   ..- attr(*, "init")= logi TRUE
[08:06:56.915] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:06:56.915] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:06:56.915] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:06:56.915] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:06:56.915] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:06:56.915] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:56.915] | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:06:56.915] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:06:56.915] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:06:56.915] | : . '   ..- attr(*, "init")= chr "done"
[08:06:56.915] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.915] | : . '     ...)  
[08:06:56.915] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.915] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.915] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:06:56.915] | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55eede2eac88> 
[08:06:56.915] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:06:56.915] | : . '     ...)  
[08:06:56.915] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:06:56.921] | : . ' Formals differ
[08:06:56.921] | : . all.equal() for future ... done
[08:06:56.921] | : . Future strategies differ at level 1
[08:06:56.921] | : all.equal() for FutureStrategyList ... done
[08:06:56.922] | : plan(): Setting new future backend stack:
[08:06:56.922] | : List of future strategies:
[08:06:56.922] | : 1. multisession:
[08:06:56.922] | :    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:06:56.922] | :    - tweaked: FALSE
[08:06:56.922] | :    - call: plan(strategy)
[08:06:56.922] | : List of 1
[08:06:56.922] | :  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:06:56.922] | :     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:56.922] | :   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:06:56.922] | :   ..- attr(*, "init")= logi TRUE
[08:06:56.922] | :   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:06:56.922] | :     gc = FALSE, earlySignal = FALSE, ...)  
[08:06:56.922] | :   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:06:56.922] | :   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:06:56.922] | :   ..- attr(*, "untweakable")= chr "persistent"
[08:06:56.922] | :   ..- attr(*, "call")= language plan(strategy)
[08:06:56.922] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:06:56.925] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:06:56.925] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:56.925] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:06:56.925] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:56.926] | : . Legacy shutdown of cluster workers ...
[08:06:56.926] | : . ' Stopping existing cluster ...
[08:06:56.926] | : . ' , No pre-existing cluster. Skipping
[08:06:56.926] | : . ' Stopping existing cluster ... done
[08:06:56.927] | : . Legacy shutdown of cluster workers ... done
[08:06:56.927] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:06:56.927] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:06:56.927] | : . function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:06:56.927] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:06:56.927] | : .  - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:06:56.927] | : .  - attr(*, "init")= logi TRUE
[08:06:56.927] | : .  - attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:06:56.927] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:06:56.927] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:06:56.927] | : .  - attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:06:56.927] | : .  - attr(*, "untweakable")= chr "persistent"
[08:06:56.927] | : .  - attr(*, "call")= language plan(strategy)
[08:06:56.929] | : . init: TRUE
[08:06:56.929] | : . makeFutureBackend(<multisession>) ...
[08:06:56.929] | : . ' Backend function: <‘NULL’>
[08:06:56.930] | : . ' Evaluator tweak arguments: [n=0]
[08:06:56.930] | : . '  list()
[08:06:56.930] | : . ' Evaluator formal arguments: [n=4]
[08:06:56.930] | : . '  list()
[08:06:56.930] | : . ' Backend factory arguments: [n=4]
[08:06:56.930] | : . ' Dotted pair list of 4
[08:06:56.930] | : . '  $ workers     : language availableCores()
[08:06:56.930] | : . '  $ rscript_libs: language .libPaths()
[08:06:56.930] | : . '  $ gc          : logi FALSE
[08:06:56.930] | : . '  $ earlySignal : logi FALSE
[08:06:56.932] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ...
[08:06:56.932] | : . ' , Arguments:
[08:06:56.932] | : . ' , List of 5
[08:06:56.932] | : . ' ,  $ workers     : Named int 2
[08:06:56.932] | : . ' ,   ..- attr(*, "names")= chr "mc.cores"
[08:06:56.932] | : . ' ,  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:06:56.932] | : . ' ,  $ interrupts  : logi TRUE
[08:06:56.932] | : . ' ,  $ gc          : logi FALSE
[08:06:56.932] | : . ' ,  $ earlySignal : logi FALSE
[08:06:56.936] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[08:06:56.936] | : . ' , ; workers: 2
[08:06:56.937] | : . ' , ; getCluster() ...
[08:06:56.937] | : . ' , ; getCluster() ... done
[08:06:56.937] | : . ' , ; Stopping existing cluster ...
[08:06:56.937] | : . ' , ; ` No pre-existing cluster. Skipping
[08:06:56.937] | : . ' , ; Stopping existing cluster ... done
[08:06:56.937] | : . ' , ; Starting new cluster ...
[08:06:56.937] | : . ' , ; ` makeCluster(workers, ...) ...
[08:06:56.937] | : . ' , ; ` | Arguments:
[08:06:56.937] | : . ' , ; ` | List of 2
[08:06:56.937] | : . ' , ; ` |  $             : int 2
[08:06:56.937] | : . ' , ; ` |  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:06:56.938] | : . ' , ; ` | .makeCluster() ...
[08:06:56.938] | : . ' , ; ` | : workers: ‘2’
[08:06:56.939] | : . ' , ; ` | : R_FUTURE_PLAN: NA
[08:06:56.939] | : . ' , ; ` | : parallelly::makeClusterPSOCK() arguments:
[08:06:56.939] | : . ' , ; ` | : List of 2
[08:06:56.939] | : . ' , ; ` | :  $             : int 2
[08:06:56.939] | : . ' , ; ` | :  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:06:57.455] | : . ' , ; ` | : Generated cluster UUID
[08:06:57.455] | : . ' , ; ` | : Cluster UUID: ‘e636a28029c6e30b2bebe5fb0c115fc6’
[08:06:57.455] | : . ' , ; ` | : Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:06:57.458] | : . ' , ; ` | .makeCluster() ... done
[08:06:57.458] | : . ' , ; ` | Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:06:57.459] | : . ' , ; ` makeCluster(workers, ...) ... done
[08:06:57.460] | : . ' , ; ` Number of workers: 2
[08:06:57.460] | : . ' , ; ` Workers UUID: ‘e636a28029c6e30b2bebe5fb0c115fc6’
[08:06:57.460] | : . ' , ; Starting new cluster ... done
[08:06:57.460] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[08:06:57.460] | : . ' , Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:06:57.460] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ... done
[08:06:57.460] | : . makeFutureBackend(<multisession>) ... done
[08:06:57.460] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:57.461] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:57.461] | : . plan(): nbrOfWorkers() = 2
[08:06:57.461] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:06:57.461] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
* future_lapply(x, ..., future.stdout = FALSE) ...
[08:06:57.461] | future_lapply() ...
[08:06:57.462] | : Globals in FUN(): [n=4] ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[08:06:57.462] | : => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:06:57.462] | : future_lapply() -> future_xapply() ...
[08:06:57.463] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:57.463] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:57.463] | : . Number of chunks: 2
[08:06:57.463] | : . getGlobalsAndPackagesXApply() ...
[08:06:57.463] | : . ' future.globals: TRUE
[08:06:57.463] | : . ' getGlobalsAndPackages() ...
[08:06:57.463] | : . ' , Searching for globals ...
[08:06:57.470] | : . ' , ; globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[08:06:57.470] | : . ' , Searching for globals ... done
[08:06:57.470] | : . ' , Resolving globals: FALSE
[08:06:57.471] | : . ' , Search for packages associated with the globals ...
[08:06:57.471] | : . ' , ; Packages associated with globals: [1] ‘base’
[08:06:57.471] | : . ' , ; Packages: [1] ‘base’
[08:06:57.471] | : . ' , Search for packages associated with the globals ... done
[08:06:57.471] | : . ' , The total size of the 1 globals is 841 bytes (841 bytes)
[08:06:57.472] | : . ' , The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[08:06:57.472] | : . ' , Packages after dropping 'base': [0] 
[08:06:57.472] | : . ' , globals: [1] ‘FUN’
[08:06:57.472] | : . ' , packages: [0] 
[08:06:57.472] | : . ' getGlobalsAndPackages() ... done
[08:06:57.472] | : . ' globals found/used: [n=1] ‘FUN’
[08:06:57.472] | : . ' needed namespaces: [n=0] 
[08:06:57.473] | : . ' use_args: TRUE
[08:06:57.473] | : . ' Getting '...' globals ...
[08:06:57.473] | : . ' , resolve() for FutureGlobals ...
[08:06:57.473] | : . ' , ; recursive: 0
[08:06:57.473] | : . ' , ; Number of elements: 1
[08:06:57.473] | : . ' , ; elements: ‘...’
[08:06:57.473] | : . ' , ; 'obj' is DotDotDotList
[08:06:57.474] | : . ' , ; resolve(obj, ...) ...
[08:06:57.474] | : . ' , ; ` resolve() for DotDotDotList ...
[08:06:57.474] | : . ' , ; ` | recursive: -1
[08:06:57.474] | : . ' , ; ` resolve() for DotDotDotList ... done
[08:06:57.474] | : . ' , ; resolve(obj, ...) ... done
[08:06:57.474] | : . ' , ; resolved() for DotDotDotList ...
[08:06:57.474] | : . ' , ; ` Number of elements: 0
[08:06:57.474] | : . ' , ; ` Number of futures: 0
[08:06:57.474] | : . ' , ; resolved() for DotDotDotList ... done
[08:06:57.475] | : . ' , ; length: 0 (resolved future 1)
[08:06:57.475] | : . ' , resolve() for FutureGlobals ... done
[08:06:57.475] | : . ' , '...' content: [n=0] 
[08:06:57.475] | : . ' , List of 1
[08:06:57.475] | : . ' ,  $ ...: list()
[08:06:57.475] | : . ' ,   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:57.475] | : . ' ,  - attr(*, "where")=List of 1
[08:06:57.475] | : . ' ,   ..$ ...:<environment: 0x55eee0a7ce28> 
[08:06:57.475] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:57.475] | : . ' ,  - attr(*, "resolved")= logi TRUE
[08:06:57.475] | : . ' ,  - attr(*, "total_size")= num NA
[08:06:57.477] | : . ' Getting '...' globals ... done
[08:06:57.478] | : . ' Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:06:57.478] | : . ' List of 2
[08:06:57.478] | : . '  $ ...future.FUN:function (x)  
[08:06:57.478] | : . '  $ ...          : list()
[08:06:57.478] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:57.478] | : . '  - attr(*, "where")=List of 2
[08:06:57.478] | : . '   ..$ ...future.FUN:<environment: 0x55eee0a7ce28> 
[08:06:57.478] | : . '   ..$ ...          :<environment: 0x55eee0a7ce28> 
[08:06:57.478] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:57.478] | : . '  - attr(*, "resolved")= logi FALSE
[08:06:57.478] | : . '  - attr(*, "total_size")= num 6008
[08:06:57.481] | : . ' Packages to be attached in all futures: [n=0] 
[08:06:57.481] | : . getGlobalsAndPackagesXApply() ... done
[08:06:57.481] | : . Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:57.481] | : . List of 5
[08:06:57.481] | : .  $ ...future.FUN            :function (x)  
[08:06:57.481] | : .  $ ...                      : list()
[08:06:57.481] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:57.481] | : .  $ ...future.elements_ii    : NULL
[08:06:57.481] | : .  $ ...future.seeds_ii       : NULL
[08:06:57.481] | : .  $ ...future.globals.maxSize: NULL
[08:06:57.481] | : .  - attr(*, "where")=List of 5
[08:06:57.481] | : .   ..$ ...future.FUN            :<environment: 0x55eee0a7ce28> 
[08:06:57.481] | : .   ..$ ...                      :<environment: 0x55eee0a7ce28> 
[08:06:57.481] | : .   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:57.481] | : .   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:57.481] | : .   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:57.481] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:57.481] | : .  - attr(*, "resolved")= logi FALSE
[08:06:57.481] | : .  - attr(*, "total_size")= num 6008
[08:06:57.485] | : . Number of futures (= number of chunks): 2
[08:06:57.485] | : . Launching 2 futures (chunks) ...
[08:06:57.486] | : . Chunk #1 of 2 ...
[08:06:57.486] | : .  - Finding globals in 'X' for chunk #1 ...
[08:06:57.486] | : . getGlobalsAndPackages() ...
[08:06:57.486] | : . ' Searching for globals ...
[08:06:57.486] | : . ' , globals found: [0] 
[08:06:57.486] | : . ' Searching for globals ... done
[08:06:57.487] | : . ' globals: [0] <none>
[08:06:57.487] | : . ' packages: [0] <none>
[08:06:57.487] | : . getGlobalsAndPackages() ... done
[08:06:57.487] | : .    + additional globals found: [n=0] 
[08:06:57.487] | : .    + additional namespaces needed: [n=0] 
[08:06:57.487] | : .  - Finding globals in 'X' for chunk #1 ... DONE
[08:06:57.487] | : .  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:06:57.487] | : .  - seeds: <none>
[08:06:57.487] | : .  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:57.487] | : . future(..., label = ‘future_lapply-1’) ...
[08:06:57.488] | : . ' lazy: FALSE
[08:06:57.488] | : . ' stdout: FALSE
[08:06:57.488] | : . ' conditions: [n=1] ‘condition’
[08:06:57.488] | : . ' gc: FALSE
[08:06:57.488] | : . ' earlySignal: FALSE
[08:06:57.488] | : . ' getGlobalsAndPackages() ...
[08:06:57.488] | : . ' , globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:57.488] | : . ' , Resolving globals: FALSE
[08:06:57.488] | : . ' , Tweak future expression to call with '...' arguments ...
[08:06:57.489] | : . ' , ; {
[08:06:57.489] | : . ' , ;     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:57.489] | : . ' , ;     "# expression in do.call(), because function called uses '...'  "
[08:06:57.489] | : . ' , ;     "# as a global variable                                         "
[08:06:57.489] | : . ' , ;     do.call(function(...) {
[08:06:57.489] | : . ' , ;         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:57.489] | : . ' , ;         "# without having an '...' argument. This means '...' is treated"
[08:06:57.489] | : . ' , ;         "# as a global variable. This may happen when FUN() is an       "
[08:06:57.489] | : . ' , ;         "# anonymous function.                                          "
[08:06:57.489] | : . ' , ;         "#                                                              "
[08:06:57.489] | : . ' , ;         "# If an anonymous function, we will make sure to restore the   "
[08:06:57.489] | : . ' , ;         "# function environment of FUN() to the calling environment.    "
[08:06:57.489] | : . ' , ;         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:57.489] | : . ' , ;         "# global environment, which is where globals are written.      "
[08:06:57.489] | : . ' , ;         penv <- env <- environment(...future.FUN)
[08:06:57.489] | : . ' , ;         repeat {
[08:06:57.489] | : . ' , ;             if (identical(env, globalenv()) || identical(env, 
[08:06:57.489] | : . ' , ;                 emptyenv())) 
[08:06:57.489] | : . ' , ;                 break
[08:06:57.489] | : . ' , ;             penv <- env
[08:06:57.489] | : . ' , ;             env <- parent.env(env)
[08:06:57.489] | : . ' , ;         }
[08:06:57.489] | : . ' , ;         if (identical(penv, globalenv())) {
[08:06:57.489] | : . ' , ;             environment(...future.FUN) <- environment()
[08:06:57.489] | : . ' , ;         }
[08:06:57.489] | : . ' , ;         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:57.489] | : . ' , ;             !isNamespace(penv)) {
[08:06:57.489] | : . ' , ;             parent.env(penv) <- environment()
[08:06:57.489] | : . ' , ;         }
[08:06:57.489] | : . ' , ;         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:57.489] | : . ' , ;         {
[08:06:57.489] | : . ' , ;             "# future.apply:::future_xapply(): preserve future option"
[08:06:57.489] | : . ' , ;             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:57.489] | : . ' , ;             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:57.489] | : . ' , ;                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:57.489] | : . ' , ;                 on.exit(options(oopts), add = TRUE)
[08:06:57.489] | : . ' , ;             }
[08:06:57.489] | : . ' , ;             {
[08:06:57.489] | : . ' , ;                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:57.489] | : . ' , ;                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:57.489] | : . ' , ;                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:57.489] | : . ' , ;                   {
[08:06:57.489] | : . ' , ;                     ...future.FUN(...future.X_jj, ...)
[08:06:57.489] | : . ' , ;                   }
[08:06:57.489] | : . ' , ;                 })
[08:06:57.489] | : . ' , ;             }
[08:06:57.489] | : . ' , ;         }
[08:06:57.489] | : . ' , ;     }, args = future.call.arguments)
[08:06:57.489] | : . ' , ; }
[08:06:57.489] | : . ' , Tweak future expression to call with '...' arguments ... done
[08:06:57.489] | : . ' , Search for packages associated with the globals ...
[08:06:57.489] | : . ' , ; Packages associated with globals: [0] 
[08:06:57.490] | : . ' , ; Packages: [0] 
[08:06:57.490] | : . ' , Search for packages associated with the globals ... done
[08:06:57.490] | : . ' , Packages after dropping 'base': [0] 
[08:06:57.490] | : . ' , globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:57.490] | : . ' , packages: [0] 
[08:06:57.490] | : . ' getGlobalsAndPackages() ... done
[08:06:57.490] | : . ' run() for ‘Future’ (‘future_lapply-1’) ...
[08:06:57.491] | : . ' , state: ‘created’
[08:06:57.491] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:57.491] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:57.491] | : . ' , Using MultisessionFutureBackend ...
[08:06:57.491] | : . ' , ; Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:06:57.491] | : . ' , ; Launching futures ...
[08:06:57.492] | : . ' , ; ` launchFuture() for ClusterFutureBackend ...
[08:06:57.492] | : . ' , ; ` | Workers: [n=2]
[08:06:57.492] | : . ' , ; ` | Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:06:57.493] | : . ' , ; ` | FutureRegistry: ‘workers-e636a28029c6e30b2bebe5fb0c115fc6’
[08:06:57.494] | : . ' , ; ` | requestWorker() ...
[08:06:57.494] | : . ' , ; ` | : requestNode() ...
[08:06:57.494] | : . ' , ; ` | : . Number of workers: 2
[08:06:57.494] | : . ' , ; ` | : . Polling for a free worker ...
[08:06:57.494] | : . ' , ; ` | : . ' FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:57.494] | : . ' , ; ` | : . ' , Created empty registry ‘workers-e636a28029c6e30b2bebe5fb0c115fc6’
[08:06:57.495] | : . ' , ; ` | : . ' , Listing all futures
[08:06:57.495] | : . ' , ; ` | : . ' , Number of registered futures: 0
[08:06:57.495] | : . ' , ; ` | : . ' FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:57.495] | : . ' , ; ` | : . ' Total time: 0
[08:06:57.495] | : . ' , ; ` | : . Polling for a free worker ... done
[08:06:57.495] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:57.495] | : . ' , ; ` | : . ' Listing all futures
[08:06:57.495] | : . ' , ; ` | : . ' Number of registered futures: 0
[08:06:57.495] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:57.496] | : . ' , ; ` | : . avail: [n=2] ‘1’, ‘2’
[08:06:57.496] | : . ' , ; ` | : . Index of first available worker: 1
[08:06:57.496] | : . ' , ; ` | : . Validate that the worker is functional ...
[08:06:57.564] | : . ' , ; ` | : . ' Worker is functional
[08:06:57.564] | : . ' , ; ` | : . ' FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:57.564] | : . ' , ; ` | : . ' , Listing all futures
[08:06:57.565] | : . ' , ; ` | : . ' , Number of registered futures: 0
[08:06:57.565] | : . ' , ; ` | : . ' FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:57.565] | : . ' , ; ` | : . Validate that the worker is functional ... done
[08:06:57.565] | : . ' , ; ` | : requestNode() ... done
[08:06:57.565] | : . ' , ; ` | : cluster node index: 1
[08:06:57.565] | : . ' , ; ` | requestWorker() ... done
[08:06:57.565] | : . ' , ; ` | eraseGlobalEnvironment() ...
[08:06:57.566] | : . ' , ; ` | eraseGlobalEnvironment() ... done
[08:06:57.566] | : . ' , ; ` | launchFuture() ...
[08:06:57.566] | : . ' , ; ` | : cluster node index: 1
[08:06:57.566] | : . ' , ; ` | : getFutureData() ...
[08:06:57.566] | : . ' , ; ` | : . getFutureCore() ...
[08:06:57.567] | : . ' , ; ` | : . ' Packages needed by the future expression (n = 0): <none>
[08:06:57.567] | : . ' , ; ` | : . getFutureCore() ... done
[08:06:57.567] | : . ' , ; ` | : . getFutureCapture() ...
[08:06:57.567] | : . ' , ; ` | : . getFutureCapture() ... done
[08:06:57.567] | : . ' , ; ` | : . getFutureContext() ...
[08:06:57.567] | : . ' , ; ` | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:57.567] | : . ' , ; ` | : . ' , Getting stack without first backend: [n=0] 
[08:06:57.567] | : . ' , ; ` | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:57.567] | : . ' , ; ` | : . ' Packages needed by future backend (n = 0): <none>
[08:06:57.568] | : . ' , ; ` | : . getFutureContext() ... done
[08:06:57.568] | : . ' , ; ` | : getFutureData() ... done
[08:06:57.568] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ...
[08:06:57.568] | : . ' , ; ` | : . Appended future to position #1
[08:06:57.568] | : . ' , ; ` | : . Number of registered futures: 1
[08:06:57.569] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ... done
[08:06:57.569] | : . ' , ; ` | launchFuture() ... done
[08:06:57.569] | : . ' , ; ` | MultisessionFuture started
[08:06:57.569] | : . ' , ; ` launchFuture() for ClusterFutureBackend ... done
[08:06:57.569] | : . ' , ; Launching futures ... done
[08:06:57.569] | : . ' , ; Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:57.569] | : . ' , Using MultisessionFutureBackend ... done
[08:06:57.569] | : . ' run() for ‘Future’ (‘future_lapply-1’) ... done
[08:06:57.569] | : . future(..., label = ‘future_lapply-1’) ... done
[08:06:57.570] | : . Created future:
[08:06:57.571] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:57.571] | : . ' Cluster node socket connection: index=4, id=729
[08:06:57.572] | : . ' assertValidConnection() ...
[08:06:57.572] | : . ' , cluster node index: 1
[08:06:57.572] | : . ' assertValidConnection() ... done
[08:06:57.582] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:57.583] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:57.570] | : . MultisessionFuture:
[08:06:57.570] | : . Label: ‘future_lapply-1’
[08:06:57.570] | : . Expression:
[08:06:57.570] | : . {
[08:06:57.570] | : .     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:57.570] | : .     "# expression in do.call(), because function called uses '...'  "
[08:06:57.570] | : .     "# as a global variable                                         "
[08:06:57.570] | : .     do.call(function(...) {
[08:06:57.570] | : .         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:57.570] | : .         "# without having an '...' argument. This means '...' is treated"
[08:06:57.570] | : .         "# as a global variable. This may happen when FUN() is an       "
[08:06:57.570] | : .         "# anonymous function.                                          "
[08:06:57.570] | : .         "#                                                              "
[08:06:57.570] | : .         "# If an anonymous function, we will make sure to restore the   "
[08:06:57.570] | : .         "# function environment of FUN() to the calling environment.    "
[08:06:57.570] | : .         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:57.570] | : .         "# global environment, which is where globals are written.      "
[08:06:57.570] | : .         penv <- env <- environment(...future.FUN)
[08:06:57.570] | : .         repeat {
[08:06:57.570] | : .             if (identical(env, globalenv()) || identical(env, 
[08:06:57.570] | : .                 emptyenv())) 
[08:06:57.570] | : .                 break
[08:06:57.570] | : .             penv <- env
[08:06:57.570] | : .             env <- parent.env(env)
[08:06:57.570] | : .         }
[08:06:57.570] | : .         if (identical(penv, globalenv())) {
[08:06:57.570] | : .             environment(...future.FUN) <- environment()
[08:06:57.570] | : .         }
[08:06:57.570] | : .         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:57.570] | : .             !isNamespace(penv)) {
[08:06:57.570] | : .             parent.env(penv) <- environment()
[08:06:57.570] | : .         }
[08:06:57.570] | : .         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:57.570] | : .         {
[08:06:57.570] | : .             "# future.apply:::future_xapply(): preserve future option"
[08:06:57.570] | : .             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:57.570] | : .             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:57.570] | : .                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:57.570] | : .                 on.exit(options(oopts), add = TRUE)
[08:06:57.570] | : .             }
[08:06:57.570] | : .             {
[08:06:57.570] | : .                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:57.570] | : .                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:57.570] | : .                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:57.570] | : .                   {
[08:06:57.570] | : .                     ...future.FUN(...future.X_jj, ...)
[08:06:57.570] | : .                   }
[08:06:57.570] | : .                 })
[08:06:57.570] | : .             }
[08:06:57.570] | : .         }
[08:06:57.570] | : .     }, args = future.call.arguments)
[08:06:57.570] | : . }
[08:06:57.570] | : . Globals: 5 objects totaling 6.12 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:57.570] | : . Packages: <none>
[08:06:57.570] | : . L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:57.570] | : . Capture standard output: FALSE
[08:06:57.570] | : . Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:57.570] | : . Immediate condition classes: ‘immediateCondition’
[08:06:57.570] | : . Lazy evaluation: FALSE
[08:06:57.570] | : . Local evaluation: TRUE
[08:06:57.570] | : . Asynchronous evaluation: TRUE
[08:06:57.570] | : . Early signaling: FALSE
[08:06:57.570] | : . Environment: R_GlobalEnv
[08:06:57.570] | : . State: ‘running’
[08:06:57.570] | : . Resolved: FALSE
[08:06:57.570] | : . Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-19
[08:06:57.570] | : . Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:57.570] | : . Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:57.570] | : . Value: <not collected>
[08:06:57.570] | : . Conditions captured: <none>
[08:06:57.583] | : . Chunk #1 of 2 ... DONE
[08:06:57.583] | : . Chunk #2 of 2 ...
[08:06:57.583] | : .  - Finding globals in 'X' for chunk #2 ...
[08:06:57.583] | : . getGlobalsAndPackages() ...
[08:06:57.584] | : . ' Searching for globals ...
[08:06:57.584] | : . ' , globals found: [0] 
[08:06:57.584] | : . ' Searching for globals ... done
[08:06:57.584] | : . ' globals: [0] <none>
[08:06:57.584] | : . ' packages: [0] <none>
[08:06:57.584] | : . getGlobalsAndPackages() ... done
[08:06:57.585] | : .    + additional globals found: [n=0] 
[08:06:57.585] | : .    + additional namespaces needed: [n=0] 
[08:06:57.585] | : .  - Finding globals in 'X' for chunk #2 ... DONE
[08:06:57.585] | : .  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:06:57.585] | : .  - seeds: <none>
[08:06:57.585] | : .  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:57.585] | : . future(..., label = ‘future_lapply-2’) ...
[08:06:57.585] | : . ' lazy: FALSE
[08:06:57.585] | : . ' stdout: FALSE
[08:06:57.586] | : . ' conditions: [n=1] ‘condition’
[08:06:57.586] | : . ' gc: FALSE
[08:06:57.586] | : . ' earlySignal: FALSE
[08:06:57.586] | : . ' getGlobalsAndPackages() ...
[08:06:57.586] | : . ' , globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:57.586] | : . ' , Resolving globals: FALSE
[08:06:57.586] | : . ' , Tweak future expression to call with '...' arguments ...
[08:06:57.586] | : . ' , ; {
[08:06:57.586] | : . ' , ;     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:57.586] | : . ' , ;     "# expression in do.call(), because function called uses '...'  "
[08:06:57.586] | : . ' , ;     "# as a global variable                                         "
[08:06:57.586] | : . ' , ;     do.call(function(...) {
[08:06:57.586] | : . ' , ;         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:57.586] | : . ' , ;         "# without having an '...' argument. This means '...' is treated"
[08:06:57.586] | : . ' , ;         "# as a global variable. This may happen when FUN() is an       "
[08:06:57.586] | : . ' , ;         "# anonymous function.                                          "
[08:06:57.586] | : . ' , ;         "#                                                              "
[08:06:57.586] | : . ' , ;         "# If an anonymous function, we will make sure to restore the   "
[08:06:57.586] | : . ' , ;         "# function environment of FUN() to the calling environment.    "
[08:06:57.586] | : . ' , ;         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:57.586] | : . ' , ;         "# global environment, which is where globals are written.      "
[08:06:57.586] | : . ' , ;         penv <- env <- environment(...future.FUN)
[08:06:57.586] | : . ' , ;         repeat {
[08:06:57.586] | : . ' , ;             if (identical(env, globalenv()) || identical(env, 
[08:06:57.586] | : . ' , ;                 emptyenv())) 
[08:06:57.586] | : . ' , ;                 break
[08:06:57.586] | : . ' , ;             penv <- env
[08:06:57.586] | : . ' , ;             env <- parent.env(env)
[08:06:57.586] | : . ' , ;         }
[08:06:57.586] | : . ' , ;         if (identical(penv, globalenv())) {
[08:06:57.586] | : . ' , ;             environment(...future.FUN) <- environment()
[08:06:57.586] | : . ' , ;         }
[08:06:57.586] | : . ' , ;         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:57.586] | : . ' , ;             !isNamespace(penv)) {
[08:06:57.586] | : . ' , ;             parent.env(penv) <- environment()
[08:06:57.586] | : . ' , ;         }
[08:06:57.586] | : . ' , ;         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:57.586] | : . ' , ;         {
[08:06:57.586] | : . ' , ;             "# future.apply:::future_xapply(): preserve future option"
[08:06:57.586] | : . ' , ;             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:57.586] | : . ' , ;             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:57.586] | : . ' , ;                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:57.586] | : . ' , ;                 on.exit(options(oopts), add = TRUE)
[08:06:57.586] | : . ' , ;             }
[08:06:57.586] | : . ' , ;             {
[08:06:57.586] | : . ' , ;                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:57.586] | : . ' , ;                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:57.586] | : . ' , ;                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:57.586] | : . ' , ;                   {
[08:06:57.586] | : . ' , ;                     ...future.FUN(...future.X_jj, ...)
[08:06:57.586] | : . ' , ;                   }
[08:06:57.586] | : . ' , ;                 })
[08:06:57.586] | : . ' , ;             }
[08:06:57.586] | : . ' , ;         }
[08:06:57.586] | : . ' , ;     }, args = future.call.arguments)
[08:06:57.586] | : . ' , ; }
[08:06:57.587] | : . ' , Tweak future expression to call with '...' arguments ... done
[08:06:57.587] | : . ' , Search for packages associated with the globals ...
[08:06:57.587] | : . ' , ; Packages associated with globals: [0] 
[08:06:57.587] | : . ' , ; Packages: [0] 
[08:06:57.588] | : . ' , Search for packages associated with the globals ... done
[08:06:57.588] | : . ' , Packages after dropping 'base': [0] 
[08:06:57.588] | : . ' , globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:57.588] | : . ' , packages: [0] 
[08:06:57.588] | : . ' getGlobalsAndPackages() ... done
[08:06:57.588] | : . ' run() for ‘Future’ (‘future_lapply-2’) ...
[08:06:57.588] | : . ' , state: ‘created’
[08:06:57.589] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:57.589] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:57.589] | : . ' , Using MultisessionFutureBackend ...
[08:06:57.589] | : . ' , ; Number of futures since start: 1 (1 created, 1 launched, 0 finished)
[08:06:57.589] | : . ' , ; Launching futures ...
[08:06:57.589] | : . ' , ; ` launchFuture() for ClusterFutureBackend ...
[08:06:57.589] | : . ' , ; ` | Workers: [n=2]
[08:06:57.589] | : . ' , ; ` | Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:06:57.591] | : . ' , ; ` | FutureRegistry: ‘workers-e636a28029c6e30b2bebe5fb0c115fc6’
[08:06:57.591] | : . ' , ; ` | requestWorker() ...
[08:06:57.591] | : . ' , ; ` | : requestNode() ...
[08:06:57.591] | : . ' , ; ` | : . Number of workers: 2
[08:06:57.592] | : . ' , ; ` | : . Polling for a free worker ...
[08:06:57.592] | : . ' , ; ` | : . ' FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:57.592] | : . ' , ; ` | : . ' , Listing all futures
[08:06:57.592] | : . ' , ; ` | : . ' , Number of registered futures: 1
[08:06:57.592] | : . ' , ; ` | : . ' FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:57.592] | : . ' , ; ` | : . ' Total time: 0
[08:06:57.592] | : . ' , ; ` | : . Polling for a free worker ... done
[08:06:57.592] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:57.592] | : . ' , ; ` | : . ' Listing all futures
[08:06:57.592] | : . ' , ; ` | : . ' Number of registered futures: 1
[08:06:57.593] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:57.593] | : . ' , ; ` | : . avail: [n=2] ‘2’
[08:06:57.593] | : . ' , ; ` | : . Index of first available worker: 2
[08:06:57.593] | : . ' , ; ` | : . Validate that the worker is functional ...
[08:06:57.692] | : . ' , ; ` | : . ' Worker is functional
[08:06:57.693] | : . ' , ; ` | : . ' FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:57.693] | : . ' , ; ` | : . ' , Listing all futures
[08:06:57.693] | : . ' , ; ` | : . ' , Number of registered futures: 1
[08:06:57.693] | : . ' , ; ` | : . ' FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:57.697] | : . ' , ; ` | : . Validate that the worker is functional ... done
[08:06:57.697] | : . ' , ; ` | : requestNode() ... done
[08:06:57.697] | : . ' , ; ` | : cluster node index: 2
[08:06:57.698] | : . ' , ; ` | requestWorker() ... done
[08:06:57.698] | : . ' , ; ` | eraseGlobalEnvironment() ...
[08:06:57.698] | : . ' , ; ` | eraseGlobalEnvironment() ... done
[08:06:57.699] | : . ' , ; ` | launchFuture() ...
[08:06:57.699] | : . ' , ; ` | : cluster node index: 2
[08:06:57.699] | : . ' , ; ` | : getFutureData() ...
[08:06:57.699] | : . ' , ; ` | : . getFutureCore() ...
[08:06:57.699] | : . ' , ; ` | : . ' Packages needed by the future expression (n = 0): <none>
[08:06:57.700] | : . ' , ; ` | : . getFutureCore() ... done
[08:06:57.700] | : . ' , ; ` | : . getFutureCapture() ...
[08:06:57.700] | : . ' , ; ` | : . getFutureCapture() ... done
[08:06:57.700] | : . ' , ; ` | : . getFutureContext() ...
[08:06:57.700] | : . ' , ; ` | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:57.701] | : . ' , ; ` | : . ' , Getting stack without first backend: [n=0] 
[08:06:57.701] | : . ' , ; ` | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:57.701] | : . ' , ; ` | : . ' Packages needed by future backend (n = 0): <none>
[08:06:57.701] | : . ' , ; ` | : . getFutureContext() ... done
[08:06:57.702] | : . ' , ; ` | : getFutureData() ... done
[08:06:57.702] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ...
[08:06:57.702] | : . ' , ; ` | : . Appended future to position #2
[08:06:57.703] | : . ' , ; ` | : . Number of registered futures: 2
[08:06:57.703] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ... done
[08:06:57.703] | : . ' , ; ` | launchFuture() ... done
[08:06:57.703] | : . ' , ; ` | MultisessionFuture started
[08:06:57.703] | : . ' , ; ` launchFuture() for ClusterFutureBackend ... done
[08:06:57.704] | : . ' , ; Launching futures ... done
[08:06:57.704] | : . ' , ; Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:57.704] | : . ' , Using MultisessionFutureBackend ... done
[08:06:57.704] | : . ' run() for ‘Future’ (‘future_lapply-2’) ... done
[08:06:57.704] | : . future(..., label = ‘future_lapply-2’) ... done
[08:06:57.705] | : . Created future:
[08:06:57.707] | : . resolved() for MultisessionFuture (‘future_lapply-2’) ...
[08:06:57.707] | : . ' Cluster node socket connection: index=5, id=730
[08:06:57.707] | : . ' assertValidConnection() ...
[08:06:57.708] | : . ' , cluster node index: 2
[08:06:57.708] | : . ' assertValidConnection() ... done
[08:06:57.718] | : . ' socketSelect(list(<connection #5 (id=730)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:57.718] | : . resolved() for MultisessionFuture (‘future_lapply-2’) ... done
[08:06:57.705] | : . MultisessionFuture:
[08:06:57.705] | : . Label: ‘future_lapply-2’
[08:06:57.705] | : . Expression:
[08:06:57.705] | : . {
[08:06:57.705] | : .     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:57.705] | : .     "# expression in do.call(), because function called uses '...'  "
[08:06:57.705] | : .     "# as a global variable                                         "
[08:06:57.705] | : .     do.call(function(...) {
[08:06:57.705] | : .         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:57.705] | : .         "# without having an '...' argument. This means '...' is treated"
[08:06:57.705] | : .         "# as a global variable. This may happen when FUN() is an       "
[08:06:57.705] | : .         "# anonymous function.                                          "
[08:06:57.705] | : .         "#                                                              "
[08:06:57.705] | : .         "# If an anonymous function, we will make sure to restore the   "
[08:06:57.705] | : .         "# function environment of FUN() to the calling environment.    "
[08:06:57.705] | : .         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:57.705] | : .         "# global environment, which is where globals are written.      "
[08:06:57.705] | : .         penv <- env <- environment(...future.FUN)
[08:06:57.705] | : .         repeat {
[08:06:57.705] | : .             if (identical(env, globalenv()) || identical(env, 
[08:06:57.705] | : .                 emptyenv())) 
[08:06:57.705] | : .                 break
[08:06:57.705] | : .             penv <- env
[08:06:57.705] | : .             env <- parent.env(env)
[08:06:57.705] | : .         }
[08:06:57.705] | : .         if (identical(penv, globalenv())) {
[08:06:57.705] | : .             environment(...future.FUN) <- environment()
[08:06:57.705] | : .         }
[08:06:57.705] | : .         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:57.705] | : .             !isNamespace(penv)) {
[08:06:57.705] | : .             parent.env(penv) <- environment()
[08:06:57.705] | : .         }
[08:06:57.705] | : .         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:57.705] | : .         {
[08:06:57.705] | : .             "# future.apply:::future_xapply(): preserve future option"
[08:06:57.705] | : .             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:57.705] | : .             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:57.705] | : .                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:57.705] | : .                 on.exit(options(oopts), add = TRUE)
[08:06:57.705] | : .             }
[08:06:57.705] | : .             {
[08:06:57.705] | : .                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:57.705] | : .                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:57.705] | : .                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:57.705] | : .                   {
[08:06:57.705] | : .                     ...future.FUN(...future.X_jj, ...)
[08:06:57.705] | : .                   }
[08:06:57.705] | : .                 })
[08:06:57.705] | : .             }
[08:06:57.705] | : .         }
[08:06:57.705] | : .     }, args = future.call.arguments)
[08:06:57.705] | : . }
[08:06:57.705] | : . Globals: 5 objects totaling 6.12 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:57.705] | : . Packages: <none>
[08:06:57.705] | : . L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:57.705] | : . Capture standard output: FALSE
[08:06:57.705] | : . Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:57.705] | : . Immediate condition classes: ‘immediateCondition’
[08:06:57.705] | : . Lazy evaluation: FALSE
[08:06:57.705] | : . Local evaluation: TRUE
[08:06:57.705] | : . Asynchronous evaluation: TRUE
[08:06:57.705] | : . Early signaling: FALSE
[08:06:57.705] | : . Environment: R_GlobalEnv
[08:06:57.705] | : . State: ‘running’
[08:06:57.705] | : . Resolved: FALSE
[08:06:57.705] | : . Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-20
[08:06:57.705] | : . Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:57.705] | : . Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:57.705] | : . Value: <not collected>
[08:06:57.705] | : . Conditions captured: <none>
[08:06:57.719] | : . Chunk #2 of 2 ... DONE
[08:06:57.719] | : . Launching 2 futures (chunks) ... DONE
[08:06:57.719] | : . Resolving 2 futures (chunks) ...
[08:06:57.719] | : . value() for list ...
[08:06:57.719] | : . ' recursive: 0
[08:06:57.719] | : . ' reduce: FALSE
[08:06:57.719] | : . ' length: 2

[08:06:57.720] | : . ' Number of remaining objects: 2
[08:06:57.720] | : . ' checking value #1:
[08:06:57.720] | : . ' 'obj' is MultisessionFuture
[08:06:57.720] | : . ' resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:57.720] | : . ' , Cluster node socket connection: index=4, id=729
[08:06:57.720] | : . ' , assertValidConnection() ...
[08:06:57.721] | : . ' , ; cluster node index: 1
[08:06:57.721] | : . ' , assertValidConnection() ... done
[08:06:57.731] | : . ' , socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:57.731] | : . ' resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:57.731] | : . ' checking value #2:
[08:06:57.731] | : . ' 'obj' is MultisessionFuture
[08:06:57.732] | : . ' resolved() for MultisessionFuture (‘future_lapply-2’) ...
[08:06:57.732] | : . ' , Cluster node socket connection: index=5, id=730
[08:06:57.732] | : . ' , assertValidConnection() ...
[08:06:57.732] | : . ' , ; cluster node index: 2
[08:06:57.733] | : . ' , assertValidConnection() ... done
[08:06:57.743] | : . ' , socketSelect(list(<connection #5 (id=730)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:57.743] | : . ' resolved() for MultisessionFuture (‘future_lapply-2’) ... done
[08:06:57.753] | : . ' Number of remaining objects: 2
[08:06:57.753] | : . ' checking value #1:
[08:06:57.753] | : . ' 'obj' is MultisessionFuture
[08:06:57.754] | : . ' resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:57.754] | : . ' , Cluster node socket connection: index=4, id=729
[08:06:57.754] | : . ' , assertValidConnection() ...
[08:06:57.754] | : . ' , ; cluster node index: 1
[08:06:57.755] | : . ' , assertValidConnection() ... done
[08:06:57.765] | : . ' , socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:57.765] | : . ' resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:57.765] | : . ' checking value #2:
[08:06:57.765] | : . ' 'obj' is MultisessionFuture
[08:06:57.765] | : . ' resolved() for MultisessionFuture (‘future_lapply-2’) ...
[08:06:57.766] | : . ' , Cluster node socket connection: index=5, id=730
[08:06:57.766] | : . ' , assertValidConnection() ...
[08:06:57.766] | : . ' , ; cluster node index: 2
[08:06:57.766] | : . ' , assertValidConnection() ... done
[08:06:57.776] | : . ' , socketSelect(list(<connection #5 (id=730)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:57.777] | : . ' resolved() for MultisessionFuture (‘future_lapply-2’) ... done
[08:06:57.787] | : . ' Number of remaining objects: 2
[08:06:57.787] | : . ' checking value #1:
[08:06:57.787] | : . ' 'obj' is MultisessionFuture
[08:06:57.787] | : . ' resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:57.788] | : . ' , Cluster node socket connection: index=4, id=729
[08:06:57.788] | : . ' , assertValidConnection() ...
[08:06:57.788] | : . ' , ; cluster node index: 1
[08:06:57.788] | : . ' , assertValidConnection() ... done
[08:06:57.798] | : . ' , socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:57.799] | : . ' resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:57.799] | : . ' checking value #2:
[08:06:57.799] | : . ' 'obj' is MultisessionFuture
[08:06:57.799] | : . ' resolved() for MultisessionFuture (‘future_lapply-2’) ...
[08:06:57.799] | : . ' , Cluster node socket connection: index=5, id=730
[08:06:57.799] | : . ' , assertValidConnection() ...
[08:06:57.800] | : . ' , ; cluster node index: 2
[08:06:57.800] | : . ' , assertValidConnection() ... done
[08:06:57.800] | : . ' , receiveMessageFromWorker() for ClusterFuture ...
[08:06:57.800] | : . ' , ; cluster node index: 2
[08:06:57.801] | : . ' , ; [1] TRUE
[08:06:57.801] | : . ' , ; received data:
[08:06:57.801] | : . ' , ; List of 5
[08:06:57.801] | : . ' , ;  $ type   : chr "VALUE"
[08:06:57.801] | : . ' , ;  $ value  :List of 16
[08:06:57.801] | : . ' , ;   ..$ value              :List of 1
[08:06:57.801] | : . ' , ;   .. ..$ : int 0
[08:06:57.801] | : . ' , ;   ..$ visible            : logi TRUE
[08:06:57.801] | : . ' , ;   ..$ stdout             : NULL
[08:06:57.801] | : . ' , ;   ..$ conditions         : list()
[08:06:57.801] | : . ' , ;   ..$ rng                : logi FALSE
[08:06:57.801] | : . ' , ;   ..$ seed               : NULL
[08:06:57.801] | : . ' , ;   ..$ misuseGlobalEnv    : NULL
[08:06:57.801] | : . ' , ;   ..$ misuseConnections  :List of 3
[08:06:57.801] | : . ' , ;   .. ..$ added   : NULL
[08:06:57.801] | : . ' , ;   .. ..$ removed : NULL
[08:06:57.801] | : . ' , ;   .. ..$ replaced: NULL
[08:06:57.801] | : . ' , ;   ..$ misuseDevices      : NULL
[08:06:57.801] | : . ' , ;   ..$ misuseDefaultDevice: list()
[08:06:57.801] | : . ' , ;   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:06:57"
[08:06:57.801] | : . ' , ;   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:06:57"
[08:06:57.801] | : . ' , ;   ..$ uuid               : chr [1:2] "f4771e5023ec0cad125ea4ef8f863db5" "20"
[08:06:57.801] | : . ' , ;   ..$ session_uuid       : chr "cff9dc43f82d54f766a25be23dee84a0"
[08:06:57.801] | : . ' , ;   .. ..- attr(*, "source")=List of 5
[08:06:57.801] | : . ' , ;   .. .. ..$ host  : Named chr "28bb34de9501"
[08:06:57.801] | : . ' , ;   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:06:57.801] | : . ' , ;   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:06:57.801] | : . ' , ;   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:06:57.801] | : . ' , ;   .. .. ..$ pid   : int 65455
[08:06:57.801] | : . ' , ;   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:06:57"
[08:06:57.801] | : . ' , ;   .. .. ..$ random: int 2147483647
[08:06:57.801] | : . ' , ;   ..$ r_info             :List of 4
[08:06:57.801] | : . ' , ;   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:06:57.801] | : . ' , ;   .. .. ..$ : int [1:3] 4 5 1
[08:06:57.801] | : . ' , ;   .. ..$ os           : chr "unix"
[08:06:57.801] | : . ' , ;   .. ..$ os_name      : chr "Linux"
[08:06:57.801] | : . ' , ;   .. ..$ captures_utf8: logi TRUE
[08:06:57.801] | : . ' , ;   ..$ version            : chr "1.8"
[08:06:57.801] | : . ' , ;   ..- attr(*, "class")= chr "FutureResult"
[08:06:57.801] | : . ' , ;  $ success: logi TRUE
[08:06:57.801] | : . ' , ;  $ time   : 'proc_time' Named num [1:5] 0.051 0.002 0.053 0 0
[08:06:57.801] | : . ' , ;   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:06:57.801] | : . ' , ;  $ tag    : NULL
[08:06:57.812] | : . ' , ; Received FutureResult
[08:06:57.812] | : . ' , ; FutureResult:
[08:06:57.812] | : . ' , ; value: ‘list’
[08:06:57.812] | : . ' , ; visible: TRUE
[08:06:57.812] | : . ' , ; stdout: NULL
[08:06:57.812] | : . ' , ; conditions: [n = 0] 
[08:06:57.812] | : . ' , ; RNG used: FALSE
[08:06:57.812] | : . ' , ; duration: 0.0514729 secs (started 2025-06-17 08:06:57.744263)
[08:06:57.812] | : . ' , ; version: 1.8
[08:06:57.813] | : . ' , ; FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ...
[08:06:57.813] | : . ' , ; ` Removed future from position #2
[08:06:57.813] | : . ' , ; ` Number of registered futures: 1
[08:06:57.813] | : . ' , ; FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ... done
[08:06:57.813] | : . ' , ; Erased future from future backend
[08:06:57.814] | : . ' , ; result() for ClusterFuture ...
[08:06:57.814] | : . ' , ; ` result already collected: FutureResult
[08:06:57.814] | : . ' , ; result() for ClusterFuture ... done
[08:06:57.814] | : . ' , ; signalConditions() ...
[08:06:57.814] | : . ' , ; ` include = ‘immediateCondition’
[08:06:57.814] | : . ' , ; ` exclude = 
[08:06:57.814] | : . ' , ; ` resignal = FALSE
[08:06:57.814] | : . ' , ; ` Number of conditions: 0
[08:06:57.814] | : . ' , ; `  int 0
[08:06:57.815] | : . ' , ; signalConditions() ... done
[08:06:57.815] | : . ' , receiveMessageFromWorker() for ClusterFuture ... done
[08:06:57.815] | : . ' , receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:06:57.815] | : . ' resolved() for MultisessionFuture (‘future_lapply-2’) ... done
[08:06:57.815] | : . ' assertFutureResult() ...
[08:06:57.815] | : . ' , Future uuid: f4771e5023ec0cad125ea4ef8f863db5[08:06:57.815] | : . ' , Future uuid: 20
[08:06:57.815] | : . ' , identical; success
[08:06:57.816] | : . ' assertFutureResult() ... done
[08:06:57.816] | : . ' MultisessionFuture #2
[08:06:57.816] | : . ' signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:06:57.816] | : . ' , nx: 2
[08:06:57.816] | : . ' , relay: TRUE
[08:06:57.816] | : . ' , stdout: TRUE
[08:06:57.816] | : . ' , signal: TRUE
[08:06:57.816] | : . ' , resignal: FALSE
[08:06:57.816] | : . ' , force: TRUE
[08:06:57.816] | : . ' , relayed: [n=2] FALSE, FALSE
[08:06:57.816] | : . ' , queued futures: [n=2] FALSE, FALSE
[08:06:57.817] | : . ' , until=1
[08:06:57.817] | : . ' , relaying element #1
[08:06:57.817] | : . ' , relayed: [n=2] FALSE, FALSE
[08:06:57.817] | : . ' , queued futures: [n=2] FALSE, TRUE
[08:06:57.817] | : . ' signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:06:57.817] | : . ' value(<MultisessionFuture>, ...) ...
[08:06:57.817] | : . ' value(<MultisessionFuture>, ...) ... done
[08:06:57.817] | : . ' value() for MultisessionFuture (‘future_lapply-2’) ...
[08:06:57.817] | : . ' , result() for ClusterFuture ...
[08:06:57.817] | : . ' , ; result already collected: FutureResult
[08:06:57.818] | : . ' , result() for ClusterFuture ... done
[08:06:57.818] | : . ' , result() for ClusterFuture ...
[08:06:57.818] | : . ' , ; result already collected: FutureResult
[08:06:57.818] | : . ' , result() for ClusterFuture ... done
[08:06:57.818] | : . ' , signalConditions() ...
[08:06:57.818] | : . ' , ; include = ‘immediateCondition’
[08:06:57.818] | : . ' , ; exclude = 
[08:06:57.818] | : . ' , ; resignal = FALSE
[08:06:57.818] | : . ' , ; Number of conditions: 0
[08:06:57.818] | : . ' , ;  int 0
[08:06:57.819] | : . ' , signalConditions() ... done
[08:06:57.819] | : . ' , check for misuse ...
[08:06:57.819] | : . ' , check for misuse ... done
[08:06:57.819] | : . ' value() for MultisessionFuture (‘future_lapply-2’) ... done
[08:06:57.819] | : . ' value: <list>
[08:06:57.819] | : . ' signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:06:57.820] | : . ' , nx: 2
[08:06:57.820] | : . ' , relay: TRUE
[08:06:57.820] | : . ' , stdout: TRUE
[08:06:57.820] | : . ' , signal: TRUE
[08:06:57.820] | : . ' , resignal: FALSE
[08:06:57.820] | : . ' , force: TRUE
[08:06:57.820] | : . ' , relayed: [n=2] FALSE, FALSE
[08:06:57.820] | : . ' , queued futures: [n=2] FALSE, TRUE
[08:06:57.820] | : . ' , until=1
[08:06:57.820] | : . ' , relaying element #1
[08:06:57.820] | : . ' , relayed: [n=2] FALSE, FALSE
[08:06:57.821] | : . ' , queued futures: [n=2] FALSE, TRUE
[08:06:57.821] | : . ' signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:06:57.821] | : . ' resolve() for MultisessionFuture ...
[08:06:57.821] | : . ' resolve() for MultisessionFuture ... done
[08:06:57.821] | : . ' length: 1 (resolved future 2)
[08:06:57.821] | : . value() for list ... done
[08:06:57.831] | : . Number of remaining objects: 1
[08:06:57.831] | : . checking value #1:
[08:06:57.832] | : . 'obj' is MultisessionFuture
[08:06:57.832] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:57.832] | : . ' Cluster node socket connection: index=4, id=729
[08:06:57.832] | : . ' assertValidConnection() ...
[08:06:57.832] | : . ' , cluster node index: 1
[08:06:57.833] | : . ' assertValidConnection() ... done
[08:06:57.843] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:57.843] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:57.853] | : . Number of remaining objects: 1
[08:06:57.854] | : . checking value #1:
[08:06:57.854] | : . 'obj' is MultisessionFuture
[08:06:57.854] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:57.854] | : . ' Cluster node socket connection: index=4, id=729
[08:06:57.854] | : . ' assertValidConnection() ...
[08:06:57.854] | : . ' , cluster node index: 1
[08:06:57.855] | : . ' assertValidConnection() ... done
[08:06:57.865] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:57.865] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:57.875] | : . Number of remaining objects: 1
[08:06:57.876] | : . checking value #1:
[08:06:57.876] | : . 'obj' is MultisessionFuture
[08:06:57.876] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:57.876] | : . ' Cluster node socket connection: index=4, id=729
[08:06:57.876] | : . ' assertValidConnection() ...
[08:06:57.877] | : . ' , cluster node index: 1
[08:06:57.877] | : . ' assertValidConnection() ... done
[08:06:57.887] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:57.887] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:57.897] | : . Number of remaining objects: 1
[08:06:57.898] | : . checking value #1:
[08:06:57.898] | : . 'obj' is MultisessionFuture
[08:06:57.898] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:57.898] | : . ' Cluster node socket connection: index=4, id=729
[08:06:57.898] | : . ' assertValidConnection() ...
[08:06:57.899] | : . ' , cluster node index: 1
[08:06:57.899] | : . ' assertValidConnection() ... done
[08:06:57.909] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:57.909] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:57.919] | : . Number of remaining objects: 1
[08:06:57.920] | : . checking value #1:
[08:06:57.920] | : . 'obj' is MultisessionFuture
[08:06:57.920] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:57.920] | : . ' Cluster node socket connection: index=4, id=729
[08:06:57.920] | : . ' assertValidConnection() ...
[08:06:57.920] | : . ' , cluster node index: 1
[08:06:57.921] | : . ' assertValidConnection() ... done
[08:06:57.931] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:57.931] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:57.941] | : . Number of remaining objects: 1
[08:06:57.941] | : . checking value #1:
[08:06:57.942] | : . 'obj' is MultisessionFuture
[08:06:57.942] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:57.942] | : . ' Cluster node socket connection: index=4, id=729
[08:06:57.942] | : . ' assertValidConnection() ...
[08:06:57.942] | : . ' , cluster node index: 1
[08:06:57.943] | : . ' assertValidConnection() ... done
[08:06:57.953] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:57.953] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:57.963] | : . Number of remaining objects: 1
[08:06:57.963] | : . checking value #1:
[08:06:57.963] | : . 'obj' is MultisessionFuture
[08:06:57.964] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:57.964] | : . ' Cluster node socket connection: index=4, id=729
[08:06:57.964] | : . ' assertValidConnection() ...
[08:06:57.964] | : . ' , cluster node index: 1
[08:06:57.965] | : . ' assertValidConnection() ... done
[08:06:57.975] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:57.975] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:57.985] | : . Number of remaining objects: 1
[08:06:57.985] | : . checking value #1:
[08:06:57.985] | : . 'obj' is MultisessionFuture
[08:06:57.986] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:57.986] | : . ' Cluster node socket connection: index=4, id=729
[08:06:57.986] | : . ' assertValidConnection() ...
[08:06:57.986] | : . ' , cluster node index: 1
[08:06:57.987] | : . ' assertValidConnection() ... done
[08:06:57.997] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:57.997] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.007] | : . Number of remaining objects: 1
[08:06:58.007] | : . checking value #1:
[08:06:58.007] | : . 'obj' is MultisessionFuture
[08:06:58.007] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.008] | : . ' Cluster node socket connection: index=4, id=729
[08:06:58.008] | : . ' assertValidConnection() ...
[08:06:58.008] | : . ' , cluster node index: 1
[08:06:58.008] | : . ' assertValidConnection() ... done
[08:06:58.019] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.019] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.029] | : . Number of remaining objects: 1
[08:06:58.029] | : . checking value #1:
[08:06:58.029] | : . 'obj' is MultisessionFuture
[08:06:58.029] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.030] | : . ' Cluster node socket connection: index=4, id=729
[08:06:58.030] | : . ' assertValidConnection() ...
[08:06:58.030] | : . ' , cluster node index: 1
[08:06:58.030] | : . ' assertValidConnection() ... done
[08:06:58.040] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.040] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.051] | : . Number of remaining objects: 1
[08:06:58.051] | : . checking value #1:
[08:06:58.051] | : . 'obj' is MultisessionFuture
[08:06:58.051] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.052] | : . ' Cluster node socket connection: index=4, id=729
[08:06:58.052] | : . ' assertValidConnection() ...
[08:06:58.052] | : . ' , cluster node index: 1
[08:06:58.052] | : . ' assertValidConnection() ... done
[08:06:58.062] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.062] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.073] | : . Number of remaining objects: 1
[08:06:58.073] | : . checking value #1:
[08:06:58.073] | : . 'obj' is MultisessionFuture
[08:06:58.073] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.073] | : . ' Cluster node socket connection: index=4, id=729
[08:06:58.074] | : . ' assertValidConnection() ...
[08:06:58.074] | : . ' , cluster node index: 1
[08:06:58.074] | : . ' assertValidConnection() ... done
[08:06:58.084] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.084] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.095] | : . Number of remaining objects: 1
[08:06:58.095] | : . checking value #1:
[08:06:58.095] | : . 'obj' is MultisessionFuture
[08:06:58.095] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.095] | : . ' Cluster node socket connection: index=4, id=729
[08:06:58.096] | : . ' assertValidConnection() ...
[08:06:58.096] | : . ' , cluster node index: 1
[08:06:58.096] | : . ' assertValidConnection() ... done
[08:06:58.106] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.106] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.117] | : . Number of remaining objects: 1
[08:06:58.117] | : . checking value #1:
[08:06:58.117] | : . 'obj' is MultisessionFuture
[08:06:58.117] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.117] | : . ' Cluster node socket connection: index=4, id=729
[08:06:58.117] | : . ' assertValidConnection() ...
[08:06:58.118] | : . ' , cluster node index: 1
[08:06:58.118] | : . ' assertValidConnection() ... done
[08:06:58.128] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.128] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.138] | : . Number of remaining objects: 1
[08:06:58.139] | : . checking value #1:
[08:06:58.139] | : . 'obj' is MultisessionFuture
[08:06:58.139] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.139] | : . ' Cluster node socket connection: index=4, id=729
[08:06:58.139] | : . ' assertValidConnection() ...
[08:06:58.139] | : . ' , cluster node index: 1
[08:06:58.140] | : . ' assertValidConnection() ... done
[08:06:58.150] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.150] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.160] | : . Number of remaining objects: 1
[08:06:58.160] | : . checking value #1:
[08:06:58.161] | : . 'obj' is MultisessionFuture
[08:06:58.161] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.161] | : . ' Cluster node socket connection: index=4, id=729
[08:06:58.161] | : . ' assertValidConnection() ...
[08:06:58.161] | : . ' , cluster node index: 1
[08:06:58.162] | : . ' assertValidConnection() ... done
[08:06:58.172] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.172] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.182] | : . Number of remaining objects: 1
[08:06:58.182] | : . checking value #1:
[08:06:58.182] | : . 'obj' is MultisessionFuture
[08:06:58.183] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.183] | : . ' Cluster node socket connection: index=4, id=729
[08:06:58.183] | : . ' assertValidConnection() ...
[08:06:58.183] | : . ' , cluster node index: 1
[08:06:58.183] | : . ' assertValidConnection() ... done
[08:06:58.184] | : . ' receiveMessageFromWorker() for ClusterFuture ...
[08:06:58.184] | : . ' , cluster node index: 1
[08:06:58.184] | : . ' , [1] TRUE
[08:06:58.184] | : . ' , received data:
[08:06:58.184] | : . ' , List of 5
[08:06:58.184] | : . ' ,  $ type   : chr "VALUE"
[08:06:58.184] | : . ' ,  $ value  :List of 16
[08:06:58.184] | : . ' ,   ..$ value              :List of 1
[08:06:58.184] | : . ' ,   .. ..$ : int 1
[08:06:58.184] | : . ' ,   ..$ visible            : logi TRUE
[08:06:58.184] | : . ' ,   ..$ stdout             : NULL
[08:06:58.184] | : . ' ,   ..$ conditions         : list()
[08:06:58.184] | : . ' ,   ..$ rng                : logi FALSE
[08:06:58.184] | : . ' ,   ..$ seed               : NULL
[08:06:58.184] | : . ' ,   ..$ misuseGlobalEnv    : NULL
[08:06:58.184] | : . ' ,   ..$ misuseConnections  :List of 3
[08:06:58.184] | : . ' ,   .. ..$ added   : NULL
[08:06:58.184] | : . ' ,   .. ..$ removed : NULL
[08:06:58.184] | : . ' ,   .. ..$ replaced: NULL
[08:06:58.184] | : . ' ,   ..$ misuseDevices      : NULL
[08:06:58.184] | : . ' ,   ..$ misuseDefaultDevice: list()
[08:06:58.184] | : . ' ,   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:06:57"
[08:06:58.184] | : . ' ,   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:06:58"
[08:06:58.184] | : . ' ,   ..$ uuid               : chr [1:2] "f4771e5023ec0cad125ea4ef8f863db5" "19"
[08:06:58.184] | : . ' ,   ..$ session_uuid       : chr "59b306a9e84480e65c32ece688378702"
[08:06:58.184] | : . ' ,   .. ..- attr(*, "source")=List of 5
[08:06:58.184] | : . ' ,   .. .. ..$ host  : Named chr "28bb34de9501"
[08:06:58.184] | : . ' ,   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:06:58.184] | : . ' ,   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:06:58.184] | : . ' ,   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:06:58.184] | : . ' ,   .. .. ..$ pid   : int 65456
[08:06:58.184] | : . ' ,   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:06:57"
[08:06:58.184] | : . ' ,   .. .. ..$ random: int 2147483647
[08:06:58.184] | : . ' ,   ..$ r_info             :List of 4
[08:06:58.184] | : . ' ,   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:06:58.184] | : . ' ,   .. .. ..$ : int [1:3] 4 5 1
[08:06:58.184] | : . ' ,   .. ..$ os           : chr "unix"
[08:06:58.184] | : . ' ,   .. ..$ os_name      : chr "Linux"
[08:06:58.184] | : . ' ,   .. ..$ captures_utf8: logi TRUE
[08:06:58.184] | : . ' ,   ..$ version            : chr "1.8"
[08:06:58.184] | : . ' ,   ..- attr(*, "class")= chr "FutureResult"
[08:06:58.184] | : . ' ,  $ success: logi TRUE
[08:06:58.184] | : . ' ,  $ time   : 'proc_time' Named num [1:5] 0.069 0.004 0.573 0 0
[08:06:58.184] | : . ' ,   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:06:58.184] | : . ' ,  $ tag    : NULL
[08:06:58.195] | : . ' , Received FutureResult
[08:06:58.195] | : . ' , FutureResult:
[08:06:58.195] | : . ' , value: ‘list’
[08:06:58.195] | : . ' , visible: TRUE
[08:06:58.195] | : . ' , stdout: NULL
[08:06:58.195] | : . ' , conditions: [n = 0] 
[08:06:58.195] | : . ' , RNG used: FALSE
[08:06:58.195] | : . ' , duration: 0.5703945 secs (started 2025-06-17 08:06:57.610684)
[08:06:58.195] | : . ' , version: 1.8
[08:06:58.196] | : . ' , FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ...
[08:06:58.196] | : . ' , ; Removed future from position #1
[08:06:58.196] | : . ' , ; Number of registered futures: 0
[08:06:58.196] | : . ' , FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ... done
[08:06:58.196] | : . ' , Erased future from future backend
[08:06:58.197] | : . ' , result() for ClusterFuture ...
[08:06:58.197] | : . ' , ; result already collected: FutureResult
[08:06:58.197] | : . ' , result() for ClusterFuture ... done
[08:06:58.197] | : . ' , signalConditions() ...
[08:06:58.197] | : . ' , ; include = ‘immediateCondition’
[08:06:58.197] | : . ' , ; exclude = 
[08:06:58.197] | : . ' , ; resignal = FALSE
[08:06:58.197] | : . ' , ; Number of conditions: 0
[08:06:58.197] | : . ' , ;  int 0
[08:06:58.198] | : . ' , signalConditions() ... done
[08:06:58.198] | : . ' receiveMessageFromWorker() for ClusterFuture ... done
[08:06:58.198] | : . ' receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:06:58.198] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.198] | : . assertFutureResult() ...
[08:06:58.198] | : . ' Future uuid: f4771e5023ec0cad125ea4ef8f863db5[08:06:58.198] | : . ' Future uuid: 19
[08:06:58.198] | : . ' identical; success
[08:06:58.198] | : . assertFutureResult() ... done
[08:06:58.199] | : . MultisessionFuture #1
[08:06:58.199] | : . signalConditionsASAP(MultisessionFuture, pos=1) ...
[08:06:58.199] | : . ' nx: 2
[08:06:58.199] | : . ' relay: TRUE
[08:06:58.199] | : . ' stdout: TRUE
[08:06:58.199] | : . ' signal: TRUE
[08:06:58.199] | : . ' resignal: FALSE
[08:06:58.199] | : . ' force: TRUE
[08:06:58.199] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:58.199] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:58.200] | : . ' until=1
[08:06:58.201] | : . ' relaying element #1
[08:06:58.202] | : . ' value() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.202] | : . ' , result() for ClusterFuture ...
[08:06:58.202] | : . ' , ; result already collected: FutureResult
[08:06:58.202] | : . ' , result() for ClusterFuture ... done
[08:06:58.202] | : . ' , result() for ClusterFuture ...
[08:06:58.202] | : . ' , ; result already collected: FutureResult
[08:06:58.202] | : . ' , result() for ClusterFuture ... done
[08:06:58.202] | : . ' , signalConditions() ...
[08:06:58.202] | : . ' , ; include = ‘immediateCondition’
[08:06:58.203] | : . ' , ; exclude = 
[08:06:58.203] | : . ' , ; resignal = FALSE
[08:06:58.203] | : . ' , ; Number of conditions: 0
[08:06:58.203] | : . ' , ;  int 0
[08:06:58.203] | : . ' , signalConditions() ... done
[08:06:58.203] | : . ' , relay stdout ...
[08:06:58.204] | : . ' , relay stdout ... done
[08:06:58.204] | : . ' , check for misuse ...
[08:06:58.204] | : . ' , check for misuse ... done
[08:06:58.204] | : . ' value() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.204] | : . ' result() for ClusterFuture ...
[08:06:58.204] | : . ' , result already collected: FutureResult
[08:06:58.204] | : . ' result() for ClusterFuture ... done
[08:06:58.204] | : . ' signalConditions() ...
[08:06:58.204] | : . ' , include = ‘immediateCondition’
[08:06:58.204] | : . ' , exclude = 
[08:06:58.205] | : . ' , resignal = FALSE
[08:06:58.205] | : . ' , Number of conditions: 0
[08:06:58.205] | : . ' ,  int 0
[08:06:58.205] | : . ' signalConditions() ... done
[08:06:58.205] | : . ' result() for ClusterFuture ...
[08:06:58.205] | : . ' , result already collected: FutureResult
[08:06:58.205] | : . ' result() for ClusterFuture ... done
[08:06:58.206] | : . ' signalConditions() ...
[08:06:58.206] | : . ' , include = ‘condition’
[08:06:58.206] | : . ' , exclude = ‘error’, ‘immediateCondition’
[08:06:58.206] | : . ' , resignal = TRUE
[08:06:58.206] | : . ' , Number of conditions: 0
[08:06:58.206] | : . ' ,  int 0
[08:06:58.207] | : . ' signalConditions() ... done
[08:06:58.207] | : . ' relayed: [n=2] TRUE, FALSE
[08:06:58.207] | : . ' queued futures: [n=2] TRUE, TRUE
[08:06:58.207] | : . signalConditionsASAP(MultisessionFuture, pos=1) ... done
[08:06:58.207] | : . value(<MultisessionFuture>, ...) ...
[08:06:58.207] | : . value(<MultisessionFuture>, ...) ... done
[08:06:58.207] | : . value() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.207] | : . ' result() for ClusterFuture ...
[08:06:58.207] | : . ' , result already collected: FutureResult
[08:06:58.207] | : . ' result() for ClusterFuture ... done
[08:06:58.208] | : . ' result() for ClusterFuture ...
[08:06:58.208] | : . ' , result already collected: FutureResult
[08:06:58.208] | : . ' result() for ClusterFuture ... done
[08:06:58.208] | : . ' signalConditions() ...
[08:06:58.208] | : . ' , include = ‘immediateCondition’
[08:06:58.208] | : . ' , exclude = 
[08:06:58.208] | : . ' , resignal = FALSE
[08:06:58.208] | : . ' , Number of conditions: 0
[08:06:58.208] | : . ' ,  int 0
[08:06:58.209] | : . ' signalConditions() ... done
[08:06:58.209] | : . ' check for misuse ...
[08:06:58.209] | : . ' check for misuse ... done
[08:06:58.209] | : . value() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.209] | : . value: <list>
[08:06:58.209] | : . signalConditionsASAP(MultisessionFuture, pos=1) ...
[08:06:58.209] | : . ' nx: 2
[08:06:58.209] | : . ' relay: TRUE
[08:06:58.209] | : . ' stdout: TRUE
[08:06:58.210] | : . ' signal: TRUE
[08:06:58.210] | : . ' resignal: FALSE
[08:06:58.210] | : . ' force: TRUE
[08:06:58.210] | : . ' relayed: [n=2] TRUE, FALSE
[08:06:58.210] | : . ' queued futures: [n=2] TRUE, TRUE
[08:06:58.210] | : . ' until=2
[08:06:58.210] | : . ' relaying element #2
[08:06:58.210] | : . ' value() for MultisessionFuture (‘future_lapply-2’) ...
[08:06:58.210] | : . ' , result() for ClusterFuture ...
[08:06:58.210] | : . ' , ; result already collected: FutureResult
[08:06:58.211] | : . ' , result() for ClusterFuture ... done
[08:06:58.211] | : . ' , result() for ClusterFuture ...
[08:06:58.211] | : . ' , ; result already collected: FutureResult
[08:06:58.211] | : . ' , result() for ClusterFuture ... done
[08:06:58.211] | : . ' , signalConditions() ...
[08:06:58.211] | : . ' , ; include = ‘immediateCondition’
[08:06:58.211] | : . ' , ; exclude = 
[08:06:58.211] | : . ' , ; resignal = FALSE
[08:06:58.211] | : . ' , ; Number of conditions: 0
[08:06:58.211] | : . ' , ;  int 0
[08:06:58.212] | : . ' , signalConditions() ... done
[08:06:58.212] | : . ' , relay stdout ...
[08:06:58.212] | : . ' , relay stdout ... done
[08:06:58.212] | : . ' , check for misuse ...
[08:06:58.212] | : . ' , check for misuse ... done
[08:06:58.212] | : . ' value() for MultisessionFuture (‘future_lapply-2’) ... done
[08:06:58.212] | : . ' result() for ClusterFuture ...
[08:06:58.213] | : . ' , result already collected: FutureResult
[08:06:58.213] | : . ' result() for ClusterFuture ... done
[08:06:58.213] | : . ' signalConditions() ...
[08:06:58.213] | : . ' , include = ‘immediateCondition’
[08:06:58.213] | : . ' , exclude = 
[08:06:58.213] | : . ' , resignal = FALSE
[08:06:58.213] | : . ' , Number of conditions: 0
[08:06:58.213] | : . ' ,  int 0
[08:06:58.214] | : . ' signalConditions() ... done
[08:06:58.214] | : . ' result() for ClusterFuture ...
[08:06:58.214] | : . ' , result already collected: FutureResult
[08:06:58.214] | : . ' result() for ClusterFuture ... done
[08:06:58.214] | : . ' signalConditions() ...
[08:06:58.214] | : . ' , include = ‘condition’
[08:06:58.214] | : . ' , exclude = ‘error’, ‘immediateCondition’
[08:06:58.214] | : . ' , resignal = TRUE
[08:06:58.214] | : . ' , Number of conditions: 0
[08:06:58.214] | : . ' ,  int 0
[08:06:58.215] | : . ' signalConditions() ... done
[08:06:58.215] | : . ' relayed: [n=2] TRUE, TRUE
[08:06:58.215] | : . ' queued futures: [n=2] TRUE, TRUE
[08:06:58.215] | : . signalConditionsASAP(MultisessionFuture, pos=1) ... done
[08:06:58.215] | : . resolve() for MultisessionFuture ...
[08:06:58.215] | : . resolve() for MultisessionFuture ... done
[08:06:58.215] | : . length: 0 (resolved future 1)
[08:06:58.216] | : future_lapply() -> future_xapply() ... done
[08:06:58.216] | : Relaying remaining futures ...
[08:06:58.216] | : . signalConditionsASAP(NULL, pos=0) ...
[08:06:58.216] | : . ' nx: 2
[08:06:58.216] | : . ' relay: TRUE
[08:06:58.216] | : . ' stdout: TRUE
[08:06:58.216] | : . ' signal: TRUE
[08:06:58.216] | : . ' resignal: FALSE
[08:06:58.216] | : . ' force: TRUE
[08:06:58.216] | : . ' relayed: [n=2] TRUE, TRUE
[08:06:58.216] | : . ' queued futures: [n=2] TRUE, TRUE
 - flush all
[08:06:58.217] | : . ' relayed: [n=2] TRUE, TRUE
[08:06:58.217] | : . ' queued futures: [n=2] TRUE, TRUE
[08:06:58.217] | : . signalConditionsASAP(NULL, pos=0) ... done
[08:06:58.217] | : Relaying remaining futures ... done
[08:06:58.217] | future_lapply() ... done
[08:06:58.217] |  - Number of value chunks collected: 2
[08:06:58.217] | Resolving 2 futures (chunks) ... DONE
[08:06:58.217] | Reducing values from 2 chunks ...
[08:06:58.217] |  - Number of values collected after concatenation: 2
[08:06:58.217] |  - Number of values expected: 2
[08:06:58.217] | Reducing values from 2 chunks ... DONE
[08:06:58.218] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done

* future_lapply(x, ..., future.stdout = FALSE) ... DONE
* future_lapply(x, ..., future.stdout = TRUE) ...
[08:06:58.218] future_lapply() ...
[08:06:58.219] | Globals in FUN(): [n=4] ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[08:06:58.219] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:06:58.219] | future_lapply() -> future_xapply() ...
[08:06:58.219] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:58.219] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:58.220] | : Number of chunks: 2
[08:06:58.220] | : getGlobalsAndPackagesXApply() ...
[08:06:58.220] | : . future.globals: TRUE
[08:06:58.220] | : . getGlobalsAndPackages() ...
[08:06:58.220] | : . ' Searching for globals ...
[08:06:58.227] | : . ' , globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[08:06:58.227] | : . ' Searching for globals ... done
[08:06:58.227] | : . ' Resolving globals: FALSE
[08:06:58.227] | : . ' Search for packages associated with the globals ...
[08:06:58.228] | : . ' , Packages associated with globals: [1] ‘base’
[08:06:58.228] | : . ' , Packages: [1] ‘base’
[08:06:58.228] | : . ' Search for packages associated with the globals ... done
[08:06:58.228] | : . ' The total size of the 1 globals is 841 bytes (841 bytes)
[08:06:58.229] | : . ' The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[08:06:58.229] | : . ' Packages after dropping 'base': [0] 
[08:06:58.229] | : . ' globals: [1] ‘FUN’
[08:06:58.229] | : . ' packages: [0] 
[08:06:58.229] | : . getGlobalsAndPackages() ... done
[08:06:58.229] | : . globals found/used: [n=1] ‘FUN’
[08:06:58.229] | : . needed namespaces: [n=0] 
[08:06:58.229] | : . use_args: TRUE
[08:06:58.229] | : . Getting '...' globals ...
[08:06:58.230] | : . ' resolve() for FutureGlobals ...
[08:06:58.230] | : . ' , recursive: 0
[08:06:58.230] | : . ' , Number of elements: 1
[08:06:58.230] | : . ' , elements: ‘...’
[08:06:58.230] | : . ' , 'obj' is DotDotDotList
[08:06:58.230] | : . ' , resolve(obj, ...) ...
[08:06:58.230] | : . ' , ; resolve() for DotDotDotList ...
[08:06:58.231] | : . ' , ; ` recursive: -1
[08:06:58.231] | : . ' , ; resolve() for DotDotDotList ... done
[08:06:58.231] | : . ' , resolve(obj, ...) ... done
[08:06:58.231] | : . ' , resolved() for DotDotDotList ...
[08:06:58.231] | : . ' , ; Number of elements: 0
[08:06:58.231] | : . ' , ; Number of futures: 0
[08:06:58.231] | : . ' , resolved() for DotDotDotList ... done
[08:06:58.231] | : . ' , length: 0 (resolved future 1)
[08:06:58.231] | : . ' resolve() for FutureGlobals ... done
[08:06:58.231] | : . ' '...' content: [n=0] 
[08:06:58.232] | : . ' List of 1
[08:06:58.232] | : . '  $ ...: list()
[08:06:58.232] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:58.232] | : . '  - attr(*, "where")=List of 1
[08:06:58.232] | : . '   ..$ ...:<environment: 0x55eee026cc28> 
[08:06:58.232] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:58.232] | : . '  - attr(*, "resolved")= logi TRUE
[08:06:58.232] | : . '  - attr(*, "total_size")= num NA
[08:06:58.234] | : . Getting '...' globals ... done
[08:06:58.234] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:06:58.234] | : . List of 2
[08:06:58.234] | : .  $ ...future.FUN:function (x)  
[08:06:58.234] | : .  $ ...          : list()
[08:06:58.234] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:58.234] | : .  - attr(*, "where")=List of 2
[08:06:58.234] | : .   ..$ ...future.FUN:<environment: 0x55eee026cc28> 
[08:06:58.234] | : .   ..$ ...          :<environment: 0x55eee026cc28> 
[08:06:58.234] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:58.234] | : .  - attr(*, "resolved")= logi FALSE
[08:06:58.234] | : .  - attr(*, "total_size")= num 6008
[08:06:58.237] | : . Packages to be attached in all futures: [n=0] 
[08:06:58.237] | : getGlobalsAndPackagesXApply() ... done
[08:06:58.237] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:58.238] | : List of 5
[08:06:58.238] | :  $ ...future.FUN            :function (x)  
[08:06:58.238] | :  $ ...                      : list()
[08:06:58.238] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:58.238] | :  $ ...future.elements_ii    : NULL
[08:06:58.238] | :  $ ...future.seeds_ii       : NULL
[08:06:58.238] | :  $ ...future.globals.maxSize: NULL
[08:06:58.238] | :  - attr(*, "where")=List of 5
[08:06:58.238] | :   ..$ ...future.FUN            :<environment: 0x55eee026cc28> 
[08:06:58.238] | :   ..$ ...                      :<environment: 0x55eee026cc28> 
[08:06:58.238] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:58.238] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:58.238] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:58.238] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:58.238] | :  - attr(*, "resolved")= logi FALSE
[08:06:58.238] | :  - attr(*, "total_size")= num 6008
[08:06:58.242] | : Number of futures (= number of chunks): 2
[08:06:58.242] | : Launching 2 futures (chunks) ...
[08:06:58.242] | : Chunk #1 of 2 ...
[08:06:58.242] | :  - Finding globals in 'X' for chunk #1 ...
[08:06:58.242] | : getGlobalsAndPackages() ...
[08:06:58.242] | : . Searching for globals ...
[08:06:58.243] | : . ' globals found: [0] 
[08:06:58.243] | : . Searching for globals ... done
[08:06:58.243] | : . globals: [0] <none>
[08:06:58.243] | : . packages: [0] <none>
[08:06:58.243] | : getGlobalsAndPackages() ... done
[08:06:58.243] | :    + additional globals found: [n=0] 
[08:06:58.243] | :    + additional namespaces needed: [n=0] 
[08:06:58.243] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:06:58.243] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:06:58.243] | :  - seeds: <none>
[08:06:58.244] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:58.244] | : future(..., label = ‘future_lapply-1’) ...
[08:06:58.244] | : . lazy: FALSE
[08:06:58.244] | : . stdout: TRUE
[08:06:58.244] | : . conditions: [n=1] ‘condition’
[08:06:58.244] | : . gc: FALSE
[08:06:58.244] | : . earlySignal: FALSE
[08:06:58.244] | : . getGlobalsAndPackages() ...
[08:06:58.244] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:58.244] | : . ' Resolving globals: FALSE
[08:06:58.245] | : . ' Tweak future expression to call with '...' arguments ...
[08:06:58.245] | : . ' , {
[08:06:58.245] | : . ' ,     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:58.245] | : . ' ,     "# expression in do.call(), because function called uses '...'  "
[08:06:58.245] | : . ' ,     "# as a global variable                                         "
[08:06:58.245] | : . ' ,     do.call(function(...) {
[08:06:58.245] | : . ' ,         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:58.245] | : . ' ,         "# without having an '...' argument. This means '...' is treated"
[08:06:58.245] | : . ' ,         "# as a global variable. This may happen when FUN() is an       "
[08:06:58.245] | : . ' ,         "# anonymous function.                                          "
[08:06:58.245] | : . ' ,         "#                                                              "
[08:06:58.245] | : . ' ,         "# If an anonymous function, we will make sure to restore the   "
[08:06:58.245] | : . ' ,         "# function environment of FUN() to the calling environment.    "
[08:06:58.245] | : . ' ,         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:58.245] | : . ' ,         "# global environment, which is where globals are written.      "
[08:06:58.245] | : . ' ,         penv <- env <- environment(...future.FUN)
[08:06:58.245] | : . ' ,         repeat {
[08:06:58.245] | : . ' ,             if (identical(env, globalenv()) || identical(env, 
[08:06:58.245] | : . ' ,                 emptyenv())) 
[08:06:58.245] | : . ' ,                 break
[08:06:58.245] | : . ' ,             penv <- env
[08:06:58.245] | : . ' ,             env <- parent.env(env)
[08:06:58.245] | : . ' ,         }
[08:06:58.245] | : . ' ,         if (identical(penv, globalenv())) {
[08:06:58.245] | : . ' ,             environment(...future.FUN) <- environment()
[08:06:58.245] | : . ' ,         }
[08:06:58.245] | : . ' ,         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:58.245] | : . ' ,             !isNamespace(penv)) {
[08:06:58.245] | : . ' ,             parent.env(penv) <- environment()
[08:06:58.245] | : . ' ,         }
[08:06:58.245] | : . ' ,         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:58.245] | : . ' ,         {
[08:06:58.245] | : . ' ,             "# future.apply:::future_xapply(): preserve future option"
[08:06:58.245] | : . ' ,             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:58.245] | : . ' ,             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:58.245] | : . ' ,                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:58.245] | : . ' ,                 on.exit(options(oopts), add = TRUE)
[08:06:58.245] | : . ' ,             }
[08:06:58.245] | : . ' ,             {
[08:06:58.245] | : . ' ,                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:58.245] | : . ' ,                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:58.245] | : . ' ,                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:58.245] | : . ' ,                   {
[08:06:58.245] | : . ' ,                     ...future.FUN(...future.X_jj, ...)
[08:06:58.245] | : . ' ,                   }
[08:06:58.245] | : . ' ,                 })
[08:06:58.245] | : . ' ,             }
[08:06:58.245] | : . ' ,         }
[08:06:58.245] | : . ' ,     }, args = future.call.arguments)
[08:06:58.245] | : . ' , }
[08:06:58.245] | : . ' Tweak future expression to call with '...' arguments ... done
[08:06:58.245] | : . ' Search for packages associated with the globals ...
[08:06:58.246] | : . ' , Packages associated with globals: [0] 
[08:06:58.246] | : . ' , Packages: [0] 
[08:06:58.246] | : . ' Search for packages associated with the globals ... done
[08:06:58.246] | : . ' Packages after dropping 'base': [0] 
[08:06:58.246] | : . ' globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:58.246] | : . ' packages: [0] 
[08:06:58.246] | : . getGlobalsAndPackages() ... done
[08:06:58.247] | : . run() for ‘Future’ (‘future_lapply-1’) ...
[08:06:58.247] | : . ' state: ‘created’
[08:06:58.247] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:58.247] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:58.247] | : . ' Using MultisessionFutureBackend ...
[08:06:58.247] | : . ' , Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:06:58.247] | : . ' , Launching futures ...
[08:06:58.247] | : . ' , ; launchFuture() for ClusterFutureBackend ...
[08:06:58.248] | : . ' , ; ` Workers: [n=2]
[08:06:58.248] | : . ' , ; ` Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:06:58.249] | : . ' , ; ` FutureRegistry: ‘workers-e636a28029c6e30b2bebe5fb0c115fc6’
[08:06:58.249] | : . ' , ; ` requestWorker() ...
[08:06:58.249] | : . ' , ; ` | requestNode() ...
[08:06:58.250] | : . ' , ; ` | : Number of workers: 2
[08:06:58.250] | : . ' , ; ` | : Polling for a free worker ...
[08:06:58.250] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:58.250] | : . ' , ; ` | : . ' Listing all futures
[08:06:58.250] | : . ' , ; ` | : . ' Number of registered futures: 0
[08:06:58.250] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:58.250] | : . ' , ; ` | : . Total time: 0
[08:06:58.250] | : . ' , ; ` | : Polling for a free worker ... done
[08:06:58.250] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:58.251] | : . ' , ; ` | : . Listing all futures
[08:06:58.251] | : . ' , ; ` | : . Number of registered futures: 0
[08:06:58.251] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:58.251] | : . ' , ; ` | : avail: [n=2] ‘1’, ‘2’
[08:06:58.251] | : . ' , ; ` | : Index of first available worker: 1
[08:06:58.251] | : . ' , ; ` | : Validate that the worker is functional ...
[08:06:58.309] | : . ' , ; ` | : . Worker is functional
[08:06:58.309] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:58.309] | : . ' , ; ` | : . ' Listing all futures
[08:06:58.309] | : . ' , ; ` | : . ' Number of registered futures: 0
[08:06:58.309] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:58.309] | : . ' , ; ` | : Validate that the worker is functional ... done
[08:06:58.309] | : . ' , ; ` | requestNode() ... done
[08:06:58.310] | : . ' , ; ` | cluster node index: 1
[08:06:58.310] | : . ' , ; ` requestWorker() ... done
[08:06:58.310] | : . ' , ; ` eraseGlobalEnvironment() ...
[08:06:58.310] | : . ' , ; ` eraseGlobalEnvironment() ... done
[08:06:58.310] | : . ' , ; ` launchFuture() ...
[08:06:58.310] | : . ' , ; ` | cluster node index: 1
[08:06:58.310] | : . ' , ; ` | getFutureData() ...
[08:06:58.311] | : . ' , ; ` | : getFutureCore() ...
[08:06:58.311] | : . ' , ; ` | : . Packages needed by the future expression (n = 0): <none>
[08:06:58.311] | : . ' , ; ` | : getFutureCore() ... done
[08:06:58.311] | : . ' , ; ` | : getFutureCapture() ...
[08:06:58.311] | : . ' , ; ` | : getFutureCapture() ... done
[08:06:58.311] | : . ' , ; ` | : getFutureContext() ...
[08:06:58.311] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:58.311] | : . ' , ; ` | : . ' Getting stack without first backend: [n=0] 
[08:06:58.311] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:58.312] | : . ' , ; ` | : . Packages needed by future backend (n = 0): <none>
[08:06:58.312] | : . ' , ; ` | : getFutureContext() ... done
[08:06:58.312] | : . ' , ; ` | getFutureData() ... done
[08:06:58.312] | : . ' , ; ` | FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ...
[08:06:58.312] | : . ' , ; ` | : Appended future to position #1
[08:06:58.312] | : . ' , ; ` | : Number of registered futures: 1
[08:06:58.312] | : . ' , ; ` | FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ... done
[08:06:58.313] | : . ' , ; ` launchFuture() ... done
[08:06:58.313] | : . ' , ; ` MultisessionFuture started
[08:06:58.313] | : . ' , ; launchFuture() for ClusterFutureBackend ... done
[08:06:58.313] | : . ' , Launching futures ... done
[08:06:58.313] | : . ' , Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:58.313] | : . ' Using MultisessionFutureBackend ... done
[08:06:58.313] | : . run() for ‘Future’ (‘future_lapply-1’) ... done
[08:06:58.313] | : future(..., label = ‘future_lapply-1’) ... done
[08:06:58.313] | : Created future:
[08:06:58.315] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.315] | : . Cluster node socket connection: index=4, id=729
[08:06:58.315] | : . assertValidConnection() ...
[08:06:58.315] | : . ' cluster node index: 1
[08:06:58.315] | : . assertValidConnection() ... done
[08:06:58.326] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.326] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.314] | : MultisessionFuture:
[08:06:58.314] | : Label: ‘future_lapply-1’
[08:06:58.314] | : Expression:
[08:06:58.314] | : {
[08:06:58.314] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:58.314] | :     "# expression in do.call(), because function called uses '...'  "
[08:06:58.314] | :     "# as a global variable                                         "
[08:06:58.314] | :     do.call(function(...) {
[08:06:58.314] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:58.314] | :         "# without having an '...' argument. This means '...' is treated"
[08:06:58.314] | :         "# as a global variable. This may happen when FUN() is an       "
[08:06:58.314] | :         "# anonymous function.                                          "
[08:06:58.314] | :         "#                                                              "
[08:06:58.314] | :         "# If an anonymous function, we will make sure to restore the   "
[08:06:58.314] | :         "# function environment of FUN() to the calling environment.    "
[08:06:58.314] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:58.314] | :         "# global environment, which is where globals are written.      "
[08:06:58.314] | :         penv <- env <- environment(...future.FUN)
[08:06:58.314] | :         repeat {
[08:06:58.314] | :             if (identical(env, globalenv()) || identical(env, 
[08:06:58.314] | :                 emptyenv())) 
[08:06:58.314] | :                 break
[08:06:58.314] | :             penv <- env
[08:06:58.314] | :             env <- parent.env(env)
[08:06:58.314] | :         }
[08:06:58.314] | :         if (identical(penv, globalenv())) {
[08:06:58.314] | :             environment(...future.FUN) <- environment()
[08:06:58.314] | :         }
[08:06:58.314] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:58.314] | :             !isNamespace(penv)) {
[08:06:58.314] | :             parent.env(penv) <- environment()
[08:06:58.314] | :         }
[08:06:58.314] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:58.314] | :         {
[08:06:58.314] | :             "# future.apply:::future_xapply(): preserve future option"
[08:06:58.314] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:58.314] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:58.314] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:58.314] | :                 on.exit(options(oopts), add = TRUE)
[08:06:58.314] | :             }
[08:06:58.314] | :             {
[08:06:58.314] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:58.314] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:58.314] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:58.314] | :                   {
[08:06:58.314] | :                     ...future.FUN(...future.X_jj, ...)
[08:06:58.314] | :                   }
[08:06:58.314] | :                 })
[08:06:58.314] | :             }
[08:06:58.314] | :         }
[08:06:58.314] | :     }, args = future.call.arguments)
[08:06:58.314] | : }
[08:06:58.314] | : Globals: 5 objects totaling 6.12 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:58.314] | : Packages: <none>
[08:06:58.314] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:58.314] | : Capture standard output: TRUE
[08:06:58.314] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:58.314] | : Immediate condition classes: ‘immediateCondition’
[08:06:58.314] | : Lazy evaluation: FALSE
[08:06:58.314] | : Local evaluation: TRUE
[08:06:58.314] | : Asynchronous evaluation: TRUE
[08:06:58.314] | : Early signaling: FALSE
[08:06:58.314] | : Environment: R_GlobalEnv
[08:06:58.314] | : State: ‘running’
[08:06:58.314] | : Resolved: FALSE
[08:06:58.314] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-21
[08:06:58.314] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:58.314] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:58.314] | : Value: <not collected>
[08:06:58.314] | : Conditions captured: <none>
[08:06:58.326] | : Chunk #1 of 2 ... DONE
[08:06:58.327] | : Chunk #2 of 2 ...
[08:06:58.327] | :  - Finding globals in 'X' for chunk #2 ...
[08:06:58.327] | : getGlobalsAndPackages() ...
[08:06:58.327] | : . Searching for globals ...
[08:06:58.327] | : . ' globals found: [0] 
[08:06:58.328] | : . Searching for globals ... done
[08:06:58.328] | : . globals: [0] <none>
[08:06:58.328] | : . packages: [0] <none>
[08:06:58.328] | : getGlobalsAndPackages() ... done
[08:06:58.328] | :    + additional globals found: [n=0] 
[08:06:58.328] | :    + additional namespaces needed: [n=0] 
[08:06:58.328] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:06:58.328] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:06:58.328] | :  - seeds: <none>
[08:06:58.328] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:58.329] | : future(..., label = ‘future_lapply-2’) ...
[08:06:58.329] | : . lazy: FALSE
[08:06:58.329] | : . stdout: TRUE
[08:06:58.329] | : . conditions: [n=1] ‘condition’
[08:06:58.329] | : . gc: FALSE
[08:06:58.329] | : . earlySignal: FALSE
[08:06:58.329] | : . getGlobalsAndPackages() ...
[08:06:58.329] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:58.329] | : . ' Resolving globals: FALSE
[08:06:58.330] | : . ' Tweak future expression to call with '...' arguments ...
[08:06:58.330] | : . ' , {
[08:06:58.330] | : . ' ,     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:58.330] | : . ' ,     "# expression in do.call(), because function called uses '...'  "
[08:06:58.330] | : . ' ,     "# as a global variable                                         "
[08:06:58.330] | : . ' ,     do.call(function(...) {
[08:06:58.330] | : . ' ,         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:58.330] | : . ' ,         "# without having an '...' argument. This means '...' is treated"
[08:06:58.330] | : . ' ,         "# as a global variable. This may happen when FUN() is an       "
[08:06:58.330] | : . ' ,         "# anonymous function.                                          "
[08:06:58.330] | : . ' ,         "#                                                              "
[08:06:58.330] | : . ' ,         "# If an anonymous function, we will make sure to restore the   "
[08:06:58.330] | : . ' ,         "# function environment of FUN() to the calling environment.    "
[08:06:58.330] | : . ' ,         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:58.330] | : . ' ,         "# global environment, which is where globals are written.      "
[08:06:58.330] | : . ' ,         penv <- env <- environment(...future.FUN)
[08:06:58.330] | : . ' ,         repeat {
[08:06:58.330] | : . ' ,             if (identical(env, globalenv()) || identical(env, 
[08:06:58.330] | : . ' ,                 emptyenv())) 
[08:06:58.330] | : . ' ,                 break
[08:06:58.330] | : . ' ,             penv <- env
[08:06:58.330] | : . ' ,             env <- parent.env(env)
[08:06:58.330] | : . ' ,         }
[08:06:58.330] | : . ' ,         if (identical(penv, globalenv())) {
[08:06:58.330] | : . ' ,             environment(...future.FUN) <- environment()
[08:06:58.330] | : . ' ,         }
[08:06:58.330] | : . ' ,         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:58.330] | : . ' ,             !isNamespace(penv)) {
[08:06:58.330] | : . ' ,             parent.env(penv) <- environment()
[08:06:58.330] | : . ' ,         }
[08:06:58.330] | : . ' ,         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:58.330] | : . ' ,         {
[08:06:58.330] | : . ' ,             "# future.apply:::future_xapply(): preserve future option"
[08:06:58.330] | : . ' ,             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:58.330] | : . ' ,             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:58.330] | : . ' ,                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:58.330] | : . ' ,                 on.exit(options(oopts), add = TRUE)
[08:06:58.330] | : . ' ,             }
[08:06:58.330] | : . ' ,             {
[08:06:58.330] | : . ' ,                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:58.330] | : . ' ,                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:58.330] | : . ' ,                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:58.330] | : . ' ,                   {
[08:06:58.330] | : . ' ,                     ...future.FUN(...future.X_jj, ...)
[08:06:58.330] | : . ' ,                   }
[08:06:58.330] | : . ' ,                 })
[08:06:58.330] | : . ' ,             }
[08:06:58.330] | : . ' ,         }
[08:06:58.330] | : . ' ,     }, args = future.call.arguments)
[08:06:58.330] | : . ' , }
[08:06:58.330] | : . ' Tweak future expression to call with '...' arguments ... done
[08:06:58.330] | : . ' Search for packages associated with the globals ...
[08:06:58.331] | : . ' , Packages associated with globals: [0] 
[08:06:58.331] | : . ' , Packages: [0] 
[08:06:58.331] | : . ' Search for packages associated with the globals ... done
[08:06:58.331] | : . ' Packages after dropping 'base': [0] 
[08:06:58.331] | : . ' globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:58.331] | : . ' packages: [0] 
[08:06:58.331] | : . getGlobalsAndPackages() ... done
[08:06:58.332] | : . run() for ‘Future’ (‘future_lapply-2’) ...
[08:06:58.332] | : . ' state: ‘created’
[08:06:58.332] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:58.332] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:58.332] | : . ' Using MultisessionFutureBackend ...
[08:06:58.332] | : . ' , Number of futures since start: 3 (3 created, 3 launched, 2 finished)
[08:06:58.332] | : . ' , Launching futures ...
[08:06:58.332] | : . ' , ; launchFuture() for ClusterFutureBackend ...
[08:06:58.333] | : . ' , ; ` Workers: [n=2]
[08:06:58.333] | : . ' , ; ` Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:06:58.334] | : . ' , ; ` FutureRegistry: ‘workers-e636a28029c6e30b2bebe5fb0c115fc6’
[08:06:58.334] | : . ' , ; ` requestWorker() ...
[08:06:58.334] | : . ' , ; ` | requestNode() ...
[08:06:58.335] | : . ' , ; ` | : Number of workers: 2
[08:06:58.335] | : . ' , ; ` | : Polling for a free worker ...
[08:06:58.335] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:58.335] | : . ' , ; ` | : . ' Listing all futures
[08:06:58.335] | : . ' , ; ` | : . ' Number of registered futures: 1
[08:06:58.335] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:58.335] | : . ' , ; ` | : . Total time: 0
[08:06:58.335] | : . ' , ; ` | : Polling for a free worker ... done
[08:06:58.335] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:58.336] | : . ' , ; ` | : . Listing all futures
[08:06:58.336] | : . ' , ; ` | : . Number of registered futures: 1
[08:06:58.336] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:58.336] | : . ' , ; ` | : avail: [n=2] ‘2’
[08:06:58.336] | : . ' , ; ` | : Index of first available worker: 2
[08:06:58.336] | : . ' , ; ` | : Validate that the worker is functional ...
[08:06:58.395] | : . ' , ; ` | : . Worker is functional
[08:06:58.395] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:58.395] | : . ' , ; ` | : . ' Listing all futures
[08:06:58.395] | : . ' , ; ` | : . ' Number of registered futures: 1
[08:06:58.396] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:58.396] | : . ' , ; ` | : Validate that the worker is functional ... done
[08:06:58.396] | : . ' , ; ` | requestNode() ... done
[08:06:58.396] | : . ' , ; ` | cluster node index: 2
[08:06:58.396] | : . ' , ; ` requestWorker() ... done
[08:06:58.396] | : . ' , ; ` eraseGlobalEnvironment() ...
[08:06:58.396] | : . ' , ; ` eraseGlobalEnvironment() ... done
[08:06:58.397] | : . ' , ; ` launchFuture() ...
[08:06:58.397] | : . ' , ; ` | cluster node index: 2
[08:06:58.397] | : . ' , ; ` | getFutureData() ...
[08:06:58.397] | : . ' , ; ` | : getFutureCore() ...
[08:06:58.397] | : . ' , ; ` | : . Packages needed by the future expression (n = 0): <none>
[08:06:58.397] | : . ' , ; ` | : getFutureCore() ... done
[08:06:58.397] | : . ' , ; ` | : getFutureCapture() ...
[08:06:58.397] | : . ' , ; ` | : getFutureCapture() ... done
[08:06:58.397] | : . ' , ; ` | : getFutureContext() ...
[08:06:58.398] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:58.398] | : . ' , ; ` | : . ' Getting stack without first backend: [n=0] 
[08:06:58.398] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:58.398] | : . ' , ; ` | : . Packages needed by future backend (n = 0): <none>
[08:06:58.398] | : . ' , ; ` | : getFutureContext() ... done
[08:06:58.398] | : . ' , ; ` | getFutureData() ... done
[08:06:58.398] | : . ' , ; ` | FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ...
[08:06:58.399] | : . ' , ; ` | : Appended future to position #2
[08:06:58.399] | : . ' , ; ` | : Number of registered futures: 2
[08:06:58.399] | : . ' , ; ` | FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ... done
[08:06:58.399] | : . ' , ; ` launchFuture() ... done
[08:06:58.399] | : . ' , ; ` MultisessionFuture started
[08:06:58.399] | : . ' , ; launchFuture() for ClusterFutureBackend ... done
[08:06:58.399] | : . ' , Launching futures ... done
[08:06:58.399] | : . ' , Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:58.399] | : . ' Using MultisessionFutureBackend ... done
[08:06:58.400] | : . run() for ‘Future’ (‘future_lapply-2’) ... done
[08:06:58.400] | : future(..., label = ‘future_lapply-2’) ... done
[08:06:58.400] | : Created future:
[08:06:58.401] | : resolved() for MultisessionFuture (‘future_lapply-2’) ...
[08:06:58.401] | : . Cluster node socket connection: index=5, id=730
[08:06:58.401] | : . assertValidConnection() ...
[08:06:58.401] | : . ' cluster node index: 2
[08:06:58.402] | : . assertValidConnection() ... done
[08:06:58.412] | : . socketSelect(list(<connection #5 (id=730)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.412] | : resolved() for MultisessionFuture (‘future_lapply-2’) ... done
[08:06:58.400] | : MultisessionFuture:
[08:06:58.400] | : Label: ‘future_lapply-2’
[08:06:58.400] | : Expression:
[08:06:58.400] | : {
[08:06:58.400] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:58.400] | :     "# expression in do.call(), because function called uses '...'  "
[08:06:58.400] | :     "# as a global variable                                         "
[08:06:58.400] | :     do.call(function(...) {
[08:06:58.400] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:58.400] | :         "# without having an '...' argument. This means '...' is treated"
[08:06:58.400] | :         "# as a global variable. This may happen when FUN() is an       "
[08:06:58.400] | :         "# anonymous function.                                          "
[08:06:58.400] | :         "#                                                              "
[08:06:58.400] | :         "# If an anonymous function, we will make sure to restore the   "
[08:06:58.400] | :         "# function environment of FUN() to the calling environment.    "
[08:06:58.400] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:58.400] | :         "# global environment, which is where globals are written.      "
[08:06:58.400] | :         penv <- env <- environment(...future.FUN)
[08:06:58.400] | :         repeat {
[08:06:58.400] | :             if (identical(env, globalenv()) || identical(env, 
[08:06:58.400] | :                 emptyenv())) 
[08:06:58.400] | :                 break
[08:06:58.400] | :             penv <- env
[08:06:58.400] | :             env <- parent.env(env)
[08:06:58.400] | :         }
[08:06:58.400] | :         if (identical(penv, globalenv())) {
[08:06:58.400] | :             environment(...future.FUN) <- environment()
[08:06:58.400] | :         }
[08:06:58.400] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:58.400] | :             !isNamespace(penv)) {
[08:06:58.400] | :             parent.env(penv) <- environment()
[08:06:58.400] | :         }
[08:06:58.400] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:58.400] | :         {
[08:06:58.400] | :             "# future.apply:::future_xapply(): preserve future option"
[08:06:58.400] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:58.400] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:58.400] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:58.400] | :                 on.exit(options(oopts), add = TRUE)
[08:06:58.400] | :             }
[08:06:58.400] | :             {
[08:06:58.400] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:58.400] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:58.400] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:58.400] | :                   {
[08:06:58.400] | :                     ...future.FUN(...future.X_jj, ...)
[08:06:58.400] | :                   }
[08:06:58.400] | :                 })
[08:06:58.400] | :             }
[08:06:58.400] | :         }
[08:06:58.400] | :     }, args = future.call.arguments)
[08:06:58.400] | : }
[08:06:58.400] | : Globals: 5 objects totaling 6.12 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:58.400] | : Packages: <none>
[08:06:58.400] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:58.400] | : Capture standard output: TRUE
[08:06:58.400] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:58.400] | : Immediate condition classes: ‘immediateCondition’
[08:06:58.400] | : Lazy evaluation: FALSE
[08:06:58.400] | : Local evaluation: TRUE
[08:06:58.400] | : Asynchronous evaluation: TRUE
[08:06:58.400] | : Early signaling: FALSE
[08:06:58.400] | : Environment: R_GlobalEnv
[08:06:58.400] | : State: ‘running’
[08:06:58.400] | : Resolved: FALSE
[08:06:58.400] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-22
[08:06:58.400] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:58.400] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:58.400] | : Value: <not collected>
[08:06:58.400] | : Conditions captured: <none>
[08:06:58.413] | : Chunk #2 of 2 ... DONE
[08:06:58.413] | : Launching 2 futures (chunks) ... DONE
[08:06:58.413] | : Resolving 2 futures (chunks) ...
[08:06:58.413] | : value() for list ...
[08:06:58.413] | : . recursive: 0
[08:06:58.413] | : . reduce: FALSE
[08:06:58.413] | : . length: 2

[08:06:58.414] | : . Number of remaining objects: 2
[08:06:58.414] | : . checking value #1:
[08:06:58.414] | : . 'obj' is MultisessionFuture
[08:06:58.414] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.414] | : . ' Cluster node socket connection: index=4, id=729
[08:06:58.414] | : . ' assertValidConnection() ...
[08:06:58.415] | : . ' , cluster node index: 1
[08:06:58.415] | : . ' assertValidConnection() ... done
[08:06:58.425] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.425] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.425] | : . checking value #2:
[08:06:58.425] | : . 'obj' is MultisessionFuture
[08:06:58.426] | : . resolved() for MultisessionFuture (‘future_lapply-2’) ...
[08:06:58.426] | : . ' Cluster node socket connection: index=5, id=730
[08:06:58.426] | : . ' assertValidConnection() ...
[08:06:58.426] | : . ' , cluster node index: 2
[08:06:58.426] | : . ' assertValidConnection() ... done
[08:06:58.436] | : . ' socketSelect(list(<connection #5 (id=730)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.437] | : . resolved() for MultisessionFuture (‘future_lapply-2’) ... done
[08:06:58.447] | : . Number of remaining objects: 2
[08:06:58.447] | : . checking value #1:
[08:06:58.447] | : . 'obj' is MultisessionFuture
[08:06:58.447] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.448] | : . ' Cluster node socket connection: index=4, id=729
[08:06:58.448] | : . ' assertValidConnection() ...
[08:06:58.448] | : . ' , cluster node index: 1
[08:06:58.448] | : . ' assertValidConnection() ... done
[08:06:58.458] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.458] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.459] | : . checking value #2:
[08:06:58.459] | : . 'obj' is MultisessionFuture
[08:06:58.459] | : . resolved() for MultisessionFuture (‘future_lapply-2’) ...
[08:06:58.459] | : . ' Cluster node socket connection: index=5, id=730
[08:06:58.459] | : . ' assertValidConnection() ...
[08:06:58.459] | : . ' , cluster node index: 2
[08:06:58.460] | : . ' assertValidConnection() ... done
[08:06:58.460] | : . ' receiveMessageFromWorker() for ClusterFuture ...
[08:06:58.460] | : . ' , cluster node index: 2
[08:06:58.460] | : . ' , [1] TRUE
[08:06:58.460] | : . ' , received data:
[08:06:58.460] | : . ' , List of 5
[08:06:58.460] | : . ' ,  $ type   : chr "VALUE"
[08:06:58.460] | : . ' ,  $ value  :List of 16
[08:06:58.460] | : . ' ,   ..$ value              :List of 1
[08:06:58.460] | : . ' ,   .. ..$ : int 0
[08:06:58.460] | : . ' ,   ..$ visible            : logi TRUE
[08:06:58.460] | : . ' ,   ..$ stdout             : chr "[1] 0\n"
[08:06:58.460] | : . ' ,   ..$ conditions         : list()
[08:06:58.460] | : . ' ,   ..$ rng                : logi FALSE
[08:06:58.460] | : . ' ,   ..$ seed               : NULL
[08:06:58.460] | : . ' ,   ..$ misuseGlobalEnv    : NULL
[08:06:58.460] | : . ' ,   ..$ misuseConnections  :List of 3
[08:06:58.460] | : . ' ,   .. ..$ added   : NULL
[08:06:58.460] | : . ' ,   .. ..$ removed : NULL
[08:06:58.460] | : . ' ,   .. ..$ replaced: NULL
[08:06:58.460] | : . ' ,   ..$ misuseDevices      : NULL
[08:06:58.460] | : . ' ,   ..$ misuseDefaultDevice: list()
[08:06:58.460] | : . ' ,   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:06:58"
[08:06:58.460] | : . ' ,   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:06:58"
[08:06:58.460] | : . ' ,   ..$ uuid               : chr [1:2] "f4771e5023ec0cad125ea4ef8f863db5" "22"
[08:06:58.460] | : . ' ,   ..$ session_uuid       : chr "cff9dc43f82d54f766a25be23dee84a0"
[08:06:58.460] | : . ' ,   .. ..- attr(*, "source")=List of 5
[08:06:58.460] | : . ' ,   .. .. ..$ host  : Named chr "28bb34de9501"
[08:06:58.460] | : . ' ,   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:06:58.460] | : . ' ,   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:06:58.460] | : . ' ,   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:06:58.460] | : . ' ,   .. .. ..$ pid   : int 65455
[08:06:58.460] | : . ' ,   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:06:57"
[08:06:58.460] | : . ' ,   .. .. ..$ random: int 2147483647
[08:06:58.460] | : . ' ,   ..$ r_info             :List of 4
[08:06:58.460] | : . ' ,   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:06:58.460] | : . ' ,   .. .. ..$ : int [1:3] 4 5 1
[08:06:58.460] | : . ' ,   .. ..$ os           : chr "unix"
[08:06:58.460] | : . ' ,   .. ..$ os_name      : chr "Linux"
[08:06:58.460] | : . ' ,   .. ..$ captures_utf8: logi TRUE
[08:06:58.460] | : . ' ,   ..$ version            : chr "1.8"
[08:06:58.460] | : . ' ,   ..- attr(*, "class")= chr "FutureResult"
[08:06:58.460] | : . ' ,  $ success: logi TRUE
[08:06:58.460] | : . ' ,  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:06:58.460] | : . ' ,   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:06:58.460] | : . ' ,  $ tag    : NULL
[08:06:58.471] | : . ' , Received FutureResult
[08:06:58.472] | : . ' , FutureResult:
[08:06:58.472] | : . ' , value: ‘list’
[08:06:58.472] | : . ' , visible: TRUE
[08:06:58.472] | : . ' , stdout: character
[08:06:58.472] | : . ' , conditions: [n = 0] 
[08:06:58.472] | : . ' , RNG used: FALSE
[08:06:58.472] | : . ' , duration: 0.002876043 secs (started 2025-06-17 08:06:58.439961)
[08:06:58.472] | : . ' , version: 1.8
[08:06:58.472] | : . ' , FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ...
[08:06:58.472] | : . ' , ; Removed future from position #2
[08:06:58.472] | : . ' , ; Number of registered futures: 1
[08:06:58.472] | : . ' , FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ... done
[08:06:58.473] | : . ' , Erased future from future backend
[08:06:58.473] | : . ' , result() for ClusterFuture ...
[08:06:58.473] | : . ' , ; result already collected: FutureResult
[08:06:58.473] | : . ' , result() for ClusterFuture ... done
[08:06:58.473] | : . ' , signalConditions() ...
[08:06:58.473] | : . ' , ; include = ‘immediateCondition’
[08:06:58.473] | : . ' , ; exclude = 
[08:06:58.473] | : . ' , ; resignal = FALSE
[08:06:58.473] | : . ' , ; Number of conditions: 0
[08:06:58.473] | : . ' , ;  int 0
[08:06:58.474] | : . ' , signalConditions() ... done
[08:06:58.474] | : . ' receiveMessageFromWorker() for ClusterFuture ... done
[08:06:58.474] | : . ' receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:06:58.474] | : . resolved() for MultisessionFuture (‘future_lapply-2’) ... done
[08:06:58.474] | : . assertFutureResult() ...
[08:06:58.474] | : . ' Future uuid: f4771e5023ec0cad125ea4ef8f863db5[08:06:58.474] | : . ' Future uuid: 22
[08:06:58.474] | : . ' identical; success
[08:06:58.475] | : . assertFutureResult() ... done
[08:06:58.475] | : . MultisessionFuture #2
[08:06:58.475] | : . signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:06:58.475] | : . ' nx: 2
[08:06:58.475] | : . ' relay: TRUE
[08:06:58.475] | : . ' stdout: TRUE
[08:06:58.475] | : . ' signal: TRUE
[08:06:58.475] | : . ' resignal: FALSE
[08:06:58.475] | : . ' force: TRUE
[08:06:58.475] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:58.475] | : . ' queued futures: [n=2] FALSE, FALSE
[08:06:58.476] | : . ' until=1
[08:06:58.476] | : . ' relaying element #1
[08:06:58.476] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:58.476] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:58.476] | : . signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:06:58.476] | : . value(<MultisessionFuture>, ...) ...
[08:06:58.476] | : . value(<MultisessionFuture>, ...) ... done
[08:06:58.476] | : . value() for MultisessionFuture (‘future_lapply-2’) ...
[08:06:58.476] | : . ' result() for ClusterFuture ...
[08:06:58.476] | : . ' , result already collected: FutureResult
[08:06:58.477] | : . ' result() for ClusterFuture ... done
[08:06:58.477] | : . ' result() for ClusterFuture ...
[08:06:58.477] | : . ' , result already collected: FutureResult
[08:06:58.477] | : . ' result() for ClusterFuture ... done
[08:06:58.477] | : . ' signalConditions() ...
[08:06:58.477] | : . ' , include = ‘immediateCondition’
[08:06:58.477] | : . ' , exclude = 
[08:06:58.477] | : . ' , resignal = FALSE
[08:06:58.477] | : . ' , Number of conditions: 0
[08:06:58.477] | : . ' ,  int 0
[08:06:58.478] | : . ' signalConditions() ... done
[08:06:58.478] | : . ' check for misuse ...
[08:06:58.478] | : . ' check for misuse ... done
[08:06:58.478] | : . value() for MultisessionFuture (‘future_lapply-2’) ... done
[08:06:58.478] | : . value: <list>
[08:06:58.478] | : . signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:06:58.479] | : . ' nx: 2
[08:06:58.479] | : . ' relay: TRUE
[08:06:58.479] | : . ' stdout: TRUE
[08:06:58.479] | : . ' signal: TRUE
[08:06:58.479] | : . ' resignal: FALSE
[08:06:58.479] | : . ' force: TRUE
[08:06:58.479] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:58.479] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:58.479] | : . ' until=1
[08:06:58.479] | : . ' relaying element #1
[08:06:58.479] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:58.480] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:58.480] | : . signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:06:58.480] | : . resolve() for MultisessionFuture ...
[08:06:58.480] | : . resolve() for MultisessionFuture ... done
[08:06:58.480] | : . length: 1 (resolved future 2)
[08:06:58.480] | : value() for list ... done
[08:06:58.490] | : Number of remaining objects: 1
[08:06:58.490] | : checking value #1:
[08:06:58.491] | : 'obj' is MultisessionFuture
[08:06:58.491] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.491] | : . Cluster node socket connection: index=4, id=729
[08:06:58.491] | : . assertValidConnection() ...
[08:06:58.491] | : . ' cluster node index: 1
[08:06:58.492] | : . assertValidConnection() ... done
[08:06:58.502] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.502] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.512] | : Number of remaining objects: 1
[08:06:58.512] | : checking value #1:
[08:06:58.513] | : 'obj' is MultisessionFuture
[08:06:58.513] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.513] | : . Cluster node socket connection: index=4, id=729
[08:06:58.513] | : . assertValidConnection() ...
[08:06:58.513] | : . ' cluster node index: 1
[08:06:58.514] | : . assertValidConnection() ... done
[08:06:58.524] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.524] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.534] | : Number of remaining objects: 1
[08:06:58.534] | : checking value #1:
[08:06:58.535] | : 'obj' is MultisessionFuture
[08:06:58.535] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.535] | : . Cluster node socket connection: index=4, id=729
[08:06:58.535] | : . assertValidConnection() ...
[08:06:58.535] | : . ' cluster node index: 1
[08:06:58.536] | : . assertValidConnection() ... done
[08:06:58.546] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.546] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.556] | : Number of remaining objects: 1
[08:06:58.556] | : checking value #1:
[08:06:58.556] | : 'obj' is MultisessionFuture
[08:06:58.557] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.557] | : . Cluster node socket connection: index=4, id=729
[08:06:58.557] | : . assertValidConnection() ...
[08:06:58.557] | : . ' cluster node index: 1
[08:06:58.558] | : . assertValidConnection() ... done
[08:06:58.568] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.568] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.578] | : Number of remaining objects: 1
[08:06:58.578] | : checking value #1:
[08:06:58.578] | : 'obj' is MultisessionFuture
[08:06:58.579] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.579] | : . Cluster node socket connection: index=4, id=729
[08:06:58.579] | : . assertValidConnection() ...
[08:06:58.579] | : . ' cluster node index: 1
[08:06:58.579] | : . assertValidConnection() ... done
[08:06:58.590] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.590] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.600] | : Number of remaining objects: 1
[08:06:58.600] | : checking value #1:
[08:06:58.600] | : 'obj' is MultisessionFuture
[08:06:58.600] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.601] | : . Cluster node socket connection: index=4, id=729
[08:06:58.601] | : . assertValidConnection() ...
[08:06:58.601] | : . ' cluster node index: 1
[08:06:58.601] | : . assertValidConnection() ... done
[08:06:58.611] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.612] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.622] | : Number of remaining objects: 1
[08:06:58.622] | : checking value #1:
[08:06:58.622] | : 'obj' is MultisessionFuture
[08:06:58.622] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.623] | : . Cluster node socket connection: index=4, id=729
[08:06:58.623] | : . assertValidConnection() ...
[08:06:58.623] | : . ' cluster node index: 1
[08:06:58.623] | : . assertValidConnection() ... done
[08:06:58.633] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.633] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.644] | : Number of remaining objects: 1
[08:06:58.644] | : checking value #1:
[08:06:58.644] | : 'obj' is MultisessionFuture
[08:06:58.644] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.644] | : . Cluster node socket connection: index=4, id=729
[08:06:58.645] | : . assertValidConnection() ...
[08:06:58.645] | : . ' cluster node index: 1
[08:06:58.645] | : . assertValidConnection() ... done
[08:06:58.655] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.655] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.665] | : Number of remaining objects: 1
[08:06:58.666] | : checking value #1:
[08:06:58.666] | : 'obj' is MultisessionFuture
[08:06:58.666] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.666] | : . Cluster node socket connection: index=4, id=729
[08:06:58.667] | : . assertValidConnection() ...
[08:06:58.667] | : . ' cluster node index: 1
[08:06:58.667] | : . assertValidConnection() ... done
[08:06:58.677] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.677] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.688] | : Number of remaining objects: 1
[08:06:58.688] | : checking value #1:
[08:06:58.688] | : 'obj' is MultisessionFuture
[08:06:58.688] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.688] | : . Cluster node socket connection: index=4, id=729
[08:06:58.688] | : . assertValidConnection() ...
[08:06:58.689] | : . ' cluster node index: 1
[08:06:58.689] | : . assertValidConnection() ... done
[08:06:58.699] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.699] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.709] | : Number of remaining objects: 1
[08:06:58.710] | : checking value #1:
[08:06:58.710] | : 'obj' is MultisessionFuture
[08:06:58.710] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.710] | : . Cluster node socket connection: index=4, id=729
[08:06:58.710] | : . assertValidConnection() ...
[08:06:58.710] | : . ' cluster node index: 1
[08:06:58.711] | : . assertValidConnection() ... done
[08:06:58.721] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.721] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.731] | : Number of remaining objects: 1
[08:06:58.731] | : checking value #1:
[08:06:58.731] | : 'obj' is MultisessionFuture
[08:06:58.732] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.732] | : . Cluster node socket connection: index=4, id=729
[08:06:58.732] | : . assertValidConnection() ...
[08:06:58.732] | : . ' cluster node index: 1
[08:06:58.732] | : . assertValidConnection() ... done
[08:06:58.743] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.743] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.753] | : Number of remaining objects: 1
[08:06:58.753] | : checking value #1:
[08:06:58.753] | : 'obj' is MultisessionFuture
[08:06:58.753] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.754] | : . Cluster node socket connection: index=4, id=729
[08:06:58.754] | : . assertValidConnection() ...
[08:06:58.754] | : . ' cluster node index: 1
[08:06:58.754] | : . assertValidConnection() ... done
[08:06:58.764] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.765] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.775] | : Number of remaining objects: 1
[08:06:58.775] | : checking value #1:
[08:06:58.775] | : 'obj' is MultisessionFuture
[08:06:58.775] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.775] | : . Cluster node socket connection: index=4, id=729
[08:06:58.776] | : . assertValidConnection() ...
[08:06:58.776] | : . ' cluster node index: 1
[08:06:58.776] | : . assertValidConnection() ... done
[08:06:58.786] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.786] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.797] | : Number of remaining objects: 1
[08:06:58.797] | : checking value #1:
[08:06:58.797] | : 'obj' is MultisessionFuture
[08:06:58.797] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.797] | : . Cluster node socket connection: index=4, id=729
[08:06:58.798] | : . assertValidConnection() ...
[08:06:58.798] | : . ' cluster node index: 1
[08:06:58.798] | : . assertValidConnection() ... done
[08:06:58.808] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.808] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.819] | : Number of remaining objects: 1
[08:06:58.819] | : checking value #1:
[08:06:58.819] | : 'obj' is MultisessionFuture
[08:06:58.819] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.819] | : . Cluster node socket connection: index=4, id=729
[08:06:58.819] | : . assertValidConnection() ...
[08:06:58.820] | : . ' cluster node index: 1
[08:06:58.820] | : . assertValidConnection() ... done
[08:06:58.830] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.830] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.840] | : Number of remaining objects: 1
[08:06:58.841] | : checking value #1:
[08:06:58.841] | : 'obj' is MultisessionFuture
[08:06:58.841] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.841] | : . Cluster node socket connection: index=4, id=729
[08:06:58.841] | : . assertValidConnection() ...
[08:06:58.841] | : . ' cluster node index: 1
[08:06:58.842] | : . assertValidConnection() ... done
[08:06:58.852] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:58.852] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.862] | : Number of remaining objects: 1
[08:06:58.862] | : checking value #1:
[08:06:58.863] | : 'obj' is MultisessionFuture
[08:06:58.863] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.863] | : . Cluster node socket connection: index=4, id=729
[08:06:58.863] | : . assertValidConnection() ...
[08:06:58.863] | : . ' cluster node index: 1
[08:06:58.864] | : . assertValidConnection() ... done
[08:06:58.864] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:06:58.864] | : . ' cluster node index: 1
[08:06:58.864] | : . ' [1] TRUE
[08:06:58.864] | : . ' received data:
[08:06:58.864] | : . ' List of 5
[08:06:58.864] | : . '  $ type   : chr "VALUE"
[08:06:58.864] | : . '  $ value  :List of 16
[08:06:58.864] | : . '   ..$ value              :List of 1
[08:06:58.864] | : . '   .. ..$ : int 1
[08:06:58.864] | : . '   ..$ visible            : logi TRUE
[08:06:58.864] | : . '   ..$ stdout             : chr "[1] 1\n"
[08:06:58.864] | : . '   ..$ conditions         : list()
[08:06:58.864] | : . '   ..$ rng                : logi FALSE
[08:06:58.864] | : . '   ..$ seed               : NULL
[08:06:58.864] | : . '   ..$ misuseGlobalEnv    : NULL
[08:06:58.864] | : . '   ..$ misuseConnections  :List of 3
[08:06:58.864] | : . '   .. ..$ added   : NULL
[08:06:58.864] | : . '   .. ..$ removed : NULL
[08:06:58.864] | : . '   .. ..$ replaced: NULL
[08:06:58.864] | : . '   ..$ misuseDevices      : NULL
[08:06:58.864] | : . '   ..$ misuseDefaultDevice: list()
[08:06:58.864] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:06:58"
[08:06:58.864] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:06:58"
[08:06:58.864] | : . '   ..$ uuid               : chr [1:2] "f4771e5023ec0cad125ea4ef8f863db5" "21"
[08:06:58.864] | : . '   ..$ session_uuid       : chr "59b306a9e84480e65c32ece688378702"
[08:06:58.864] | : . '   .. ..- attr(*, "source")=List of 5
[08:06:58.864] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:06:58.864] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:06:58.864] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:06:58.864] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:06:58.864] | : . '   .. .. ..$ pid   : int 65456
[08:06:58.864] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:06:57"
[08:06:58.864] | : . '   .. .. ..$ random: int 2147483647
[08:06:58.864] | : . '   ..$ r_info             :List of 4
[08:06:58.864] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:06:58.864] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:06:58.864] | : . '   .. ..$ os           : chr "unix"
[08:06:58.864] | : . '   .. ..$ os_name      : chr "Linux"
[08:06:58.864] | : . '   .. ..$ captures_utf8: logi TRUE
[08:06:58.864] | : . '   ..$ version            : chr "1.8"
[08:06:58.864] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:06:58.864] | : . '  $ success: logi TRUE
[08:06:58.864] | : . '  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.505 0 0
[08:06:58.864] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:06:58.864] | : . '  $ tag    : NULL
[08:06:58.878] | : . ' Received FutureResult
[08:06:58.878] | : . ' FutureResult:
[08:06:58.878] | : . ' value: ‘list’
[08:06:58.878] | : . ' visible: TRUE
[08:06:58.878] | : . ' stdout: character
[08:06:58.878] | : . ' conditions: [n = 0] 
[08:06:58.878] | : . ' RNG used: FALSE
[08:06:58.878] | : . ' duration: 0.50387 secs (started 2025-06-17 08:06:58.353089)
[08:06:58.878] | : . ' version: 1.8
[08:06:58.878] | : . ' FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ...
[08:06:58.878] | : . ' , Removed future from position #1
[08:06:58.878] | : . ' , Number of registered futures: 0
[08:06:58.879] | : . ' FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ... done
[08:06:58.879] | : . ' Erased future from future backend
[08:06:58.879] | : . ' result() for ClusterFuture ...
[08:06:58.879] | : . ' , result already collected: FutureResult
[08:06:58.879] | : . ' result() for ClusterFuture ... done
[08:06:58.879] | : . ' signalConditions() ...
[08:06:58.879] | : . ' , include = ‘immediateCondition’
[08:06:58.879] | : . ' , exclude = 
[08:06:58.879] | : . ' , resignal = FALSE
[08:06:58.879] | : . ' , Number of conditions: 0
[08:06:58.880] | : . ' ,  int 0
[08:06:58.880] | : . ' signalConditions() ... done
[08:06:58.880] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:06:58.880] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:06:58.880] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.880] | : assertFutureResult() ...
[08:06:58.880] | : . Future uuid: f4771e5023ec0cad125ea4ef8f863db5[08:06:58.880] | : . Future uuid: 21
[08:06:58.881] | : . identical; success
[08:06:58.881] | : assertFutureResult() ... done
[08:06:58.881] | : MultisessionFuture #1
[08:06:58.881] | : signalConditionsASAP(MultisessionFuture, pos=1) ...
[08:06:58.881] | : . nx: 2
[08:06:58.881] | : . relay: TRUE
[08:06:58.881] | : . stdout: TRUE
[08:06:58.881] | : . signal: TRUE
[08:06:58.881] | : . resignal: FALSE
[08:06:58.881] | : . force: TRUE
[08:06:58.881] | : . relayed: [n=2] FALSE, FALSE
[08:06:58.881] | : . queued futures: [n=2] FALSE, TRUE
[08:06:58.882] | : . until=1
[08:06:58.882] | : . relaying element #1
[08:06:58.882] | : . value() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.882] | : . ' result() for ClusterFuture ...
[08:06:58.882] | : . ' , result already collected: FutureResult
[08:06:58.882] | : . ' result() for ClusterFuture ... done
[08:06:58.882] | : . ' result() for ClusterFuture ...
[08:06:58.882] | : . ' , result already collected: FutureResult
[08:06:58.882] | : . ' result() for ClusterFuture ... done
[08:06:58.882] | : . ' signalConditions() ...
[08:06:58.883] | : . ' , include = ‘immediateCondition’
[08:06:58.883] | : . ' , exclude = 
[08:06:58.883] | : . ' , resignal = FALSE
[08:06:58.883] | : . ' , Number of conditions: 0
[08:06:58.883] | : . ' ,  int 0
[08:06:58.883] | : . ' signalConditions() ... done
[08:06:58.883] | : . ' relay stdout ...
[08:06:58.884] | : . ' relay stdout ... done
[08:06:58.884] | : . ' check for misuse ...
[08:06:58.884] | : . ' check for misuse ... done
[08:06:58.884] | : . value() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.884] | : . result() for ClusterFuture ...
[08:06:58.884] | : . ' result already collected: FutureResult
[08:06:58.884] | : . result() for ClusterFuture ... done
[08:06:58.884] | : . signalConditions() ...
[08:06:58.884] | : . ' include = ‘immediateCondition’
[08:06:58.884] | : . ' exclude = 
[08:06:58.885] | : . ' resignal = FALSE
[08:06:58.885] | : . ' Number of conditions: 0
[08:06:58.885] | : . '  int 0
[08:06:58.885] | : . signalConditions() ... done
[08:06:58.885] | : . result() for ClusterFuture ...
[08:06:58.885] | : . ' result already collected: FutureResult
[08:06:58.885] | : . result() for ClusterFuture ... done
[08:06:58.886] | : . signalConditions() ...
[08:06:58.886] | : . ' include = ‘condition’
[08:06:58.886] | : . ' exclude = ‘error’, ‘immediateCondition’
[08:06:58.886] | : . ' resignal = TRUE
[08:06:58.886] | : . ' Number of conditions: 0
[08:06:58.886] | : . '  int 0
[08:06:58.886] | : . signalConditions() ... done
[08:06:58.886] | : . relayed: [n=2] TRUE, FALSE
[08:06:58.887] | : . queued futures: [n=2] TRUE, TRUE
[08:06:58.887] | : signalConditionsASAP(MultisessionFuture, pos=1) ... done
[08:06:58.887] | : value(<MultisessionFuture>, ...) ...
[08:06:58.887] | : value(<MultisessionFuture>, ...) ... done
[08:06:58.887] | : value() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.887] | : . result() for ClusterFuture ...
[08:06:58.887] | : . ' result already collected: FutureResult
[08:06:58.887] | : . result() for ClusterFuture ... done
[08:06:58.887] | : . result() for ClusterFuture ...
[08:06:58.887] | : . ' result already collected: FutureResult
[08:06:58.888] | : . result() for ClusterFuture ... done
[08:06:58.888] | : . signalConditions() ...
[08:06:58.888] | : . ' include = ‘immediateCondition’
[08:06:58.888] | : . ' exclude = 
[08:06:58.888] | : . ' resignal = FALSE
[08:06:58.888] | : . ' Number of conditions: 0
[08:06:58.888] | : . '  int 0
[08:06:58.889] | : . signalConditions() ... done
[08:06:58.889] | : . check for misuse ...
[08:06:58.889] | : . check for misuse ... done
[08:06:58.889] | : value() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.889] | : value: <list>
[08:06:58.889] | : signalConditionsASAP(MultisessionFuture, pos=1) ...
[08:06:58.889] | : . nx: 2
[08:06:58.889] | : . relay: TRUE
[08:06:58.889] | : . stdout: TRUE
[08:06:58.889] | : . signal: TRUE
[08:06:58.890] | : . resignal: FALSE
[08:06:58.890] | : . force: TRUE
[08:06:58.890] | : . relayed: [n=2] TRUE, FALSE
[08:06:58.890] | : . queued futures: [n=2] TRUE, TRUE
[08:06:58.890] | : . until=2
[08:06:58.890] | : . relaying element #2
[08:06:58.890] | : . value() for MultisessionFuture (‘future_lapply-2’) ...
[08:06:58.890] | : . ' result() for ClusterFuture ...
[08:06:58.890] | : . ' , result already collected: FutureResult
[08:06:58.890] | : . ' result() for ClusterFuture ... done
[08:06:58.890] | : . ' result() for ClusterFuture ...
[08:06:58.891] | : . ' , result already collected: FutureResult
[08:06:58.891] | : . ' result() for ClusterFuture ... done
[08:06:58.891] | : . ' signalConditions() ...
[08:06:58.891] | : . ' , include = ‘immediateCondition’
[08:06:58.891] | : . ' , exclude = 
[08:06:58.891] | : . ' , resignal = FALSE
[08:06:58.891] | : . ' , Number of conditions: 0
[08:06:58.891] | : . ' ,  int 0
[08:06:58.892] | : . ' signalConditions() ... done
[08:06:58.892] | : . ' relay stdout ...
[08:06:58.892] | : . ' relay stdout ... done
[08:06:58.892] | : . ' check for misuse ...
[08:06:58.892] | : . ' check for misuse ... done
[08:06:58.892] | : . value() for MultisessionFuture (‘future_lapply-2’) ... done
[08:06:58.892] | : . result() for ClusterFuture ...
[08:06:58.892] | : . ' result already collected: FutureResult
[08:06:58.893] | : . result() for ClusterFuture ... done
[08:06:58.893] | : . signalConditions() ...
[08:06:58.893] | : . ' include = ‘immediateCondition’
[08:06:58.893] | : . ' exclude = 
[08:06:58.893] | : . ' resignal = FALSE
[08:06:58.893] | : . ' Number of conditions: 0
[08:06:58.893] | : . '  int 0
[08:06:58.893] | : . signalConditions() ... done
[08:06:58.894] | : . result() for ClusterFuture ...
[08:06:58.894] | : . ' result already collected: FutureResult
[08:06:58.894] | : . result() for ClusterFuture ... done
[08:06:58.894] | : . signalConditions() ...
[08:06:58.894] | : . ' include = ‘condition’
[08:06:58.894] | : . ' exclude = ‘error’, ‘immediateCondition’
[08:06:58.894] | : . ' resignal = TRUE
[08:06:58.894] | : . ' Number of conditions: 0
[08:06:58.894] | : . '  int 0
[08:06:58.895] | : . signalConditions() ... done
[08:06:58.895] | : . relayed: [n=2] TRUE, TRUE
[08:06:58.895] | : . queued futures: [n=2] TRUE, TRUE
[08:06:58.895] | : signalConditionsASAP(MultisessionFuture, pos=1) ... done
[08:06:58.895] | : resolve() for MultisessionFuture ...
[08:06:58.895] | : resolve() for MultisessionFuture ... done
[08:06:58.895] | : length: 0 (resolved future 1)
[08:06:58.895] | future_lapply() -> future_xapply() ... done
[08:06:58.896] | Relaying remaining futures ...
[08:06:58.896] | : signalConditionsASAP(NULL, pos=0) ...
[08:06:58.896] | : . nx: 2
[08:06:58.896] | : . relay: TRUE
[08:06:58.896] | : . stdout: TRUE
[08:06:58.896] | : . signal: TRUE
[08:06:58.896] | : . resignal: FALSE
[08:06:58.896] | : . force: TRUE
[08:06:58.896] | : . relayed: [n=2] TRUE, TRUE
[08:06:58.896] | : . queued futures: [n=2] TRUE, TRUE
 - flush all
[08:06:58.897] | : . relayed: [n=2] TRUE, TRUE
[08:06:58.897] | : . queued futures: [n=2] TRUE, TRUE
[08:06:58.897] | : signalConditionsASAP(NULL, pos=0) ... done
[08:06:58.897] | Relaying remaining futures ... done
[08:06:58.897] future_lapply() ... done
[08:06:58.897]  - Number of value chunks collected: 2
[08:06:58.897] Resolving 2 futures (chunks) ... DONE
[08:06:58.897] Reducing values from 2 chunks ...
[08:06:58.897]  - Number of values collected after concatenation: 2
[08:06:58.897]  - Number of values expected: 2
[08:06:58.897] Reducing values from 2 chunks ... DONE


* future_lapply(x, ..., future.stdout = TRUE) ... DONE
* future_lapply(x, ..., future.stdout = NA) ...
[08:06:58.898] future_lapply() ...
[08:06:58.899] | Globals in FUN(): [n=4] ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[08:06:58.899] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:06:58.899] | future_lapply() -> future_xapply() ...
[08:06:58.899] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:58.899] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:58.900] | : Number of chunks: 2
[08:06:58.900] | : getGlobalsAndPackagesXApply() ...
[08:06:58.900] | : . future.globals: TRUE
[08:06:58.900] | : . getGlobalsAndPackages() ...
[08:06:58.900] | : . ' Searching for globals ...
[08:06:58.907] | : . ' , globals found: [5] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’
[08:06:58.907] | : . ' Searching for globals ... done
[08:06:58.907] | : . ' Resolving globals: FALSE
[08:06:58.907] | : . ' Search for packages associated with the globals ...
[08:06:58.908] | : . ' , Packages associated with globals: [1] ‘base’
[08:06:58.908] | : . ' , Packages: [1] ‘base’
[08:06:58.908] | : . ' Search for packages associated with the globals ... done
[08:06:58.908] | : . ' The total size of the 1 globals is 841 bytes (841 bytes)
[08:06:58.909] | : . ' The total size of the 1 globals exported for future expression (‘FUN()’) is 841 bytes There is one global: ‘FUN’ (841 bytes of class ‘function’)
[08:06:58.909] | : . ' Packages after dropping 'base': [0] 
[08:06:58.909] | : . ' globals: [1] ‘FUN’
[08:06:58.909] | : . ' packages: [0] 
[08:06:58.909] | : . getGlobalsAndPackages() ... done
[08:06:58.909] | : . globals found/used: [n=1] ‘FUN’
[08:06:58.909] | : . needed namespaces: [n=0] 
[08:06:58.909] | : . use_args: TRUE
[08:06:58.909] | : . Getting '...' globals ...
[08:06:58.910] | : . ' resolve() for FutureGlobals ...
[08:06:58.910] | : . ' , recursive: 0
[08:06:58.910] | : . ' , Number of elements: 1
[08:06:58.910] | : . ' , elements: ‘...’
[08:06:58.910] | : . ' , 'obj' is DotDotDotList
[08:06:58.910] | : . ' , resolve(obj, ...) ...
[08:06:58.910] | : . ' , ; resolve() for DotDotDotList ...
[08:06:58.911] | : . ' , ; ` recursive: -1
[08:06:58.911] | : . ' , ; resolve() for DotDotDotList ... done
[08:06:58.911] | : . ' , resolve(obj, ...) ... done
[08:06:58.911] | : . ' , resolved() for DotDotDotList ...
[08:06:58.911] | : . ' , ; Number of elements: 0
[08:06:58.911] | : . ' , ; Number of futures: 0
[08:06:58.911] | : . ' , resolved() for DotDotDotList ... done
[08:06:58.911] | : . ' , length: 0 (resolved future 1)
[08:06:58.911] | : . ' resolve() for FutureGlobals ... done
[08:06:58.912] | : . ' '...' content: [n=0] 
[08:06:58.912] | : . ' List of 1
[08:06:58.912] | : . '  $ ...: list()
[08:06:58.912] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:58.912] | : . '  - attr(*, "where")=List of 1
[08:06:58.912] | : . '   ..$ ...:<environment: 0x55eedfb50c58> 
[08:06:58.912] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:58.912] | : . '  - attr(*, "resolved")= logi TRUE
[08:06:58.912] | : . '  - attr(*, "total_size")= num NA
[08:06:58.914] | : . Getting '...' globals ... done
[08:06:58.914] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:06:58.915] | : . List of 2
[08:06:58.915] | : .  $ ...future.FUN:function (x)  
[08:06:58.915] | : .  $ ...          : list()
[08:06:58.915] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:58.915] | : .  - attr(*, "where")=List of 2
[08:06:58.915] | : .   ..$ ...future.FUN:<environment: 0x55eedfb50c58> 
[08:06:58.915] | : .   ..$ ...          :<environment: 0x55eedfb50c58> 
[08:06:58.915] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:58.915] | : .  - attr(*, "resolved")= logi FALSE
[08:06:58.915] | : .  - attr(*, "total_size")= num 6008
[08:06:58.917] | : . Packages to be attached in all futures: [n=0] 
[08:06:58.917] | : getGlobalsAndPackagesXApply() ... done
[08:06:58.918] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:58.918] | : List of 5
[08:06:58.918] | :  $ ...future.FUN            :function (x)  
[08:06:58.918] | :  $ ...                      : list()
[08:06:58.918] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:06:58.918] | :  $ ...future.elements_ii    : NULL
[08:06:58.918] | :  $ ...future.seeds_ii       : NULL
[08:06:58.918] | :  $ ...future.globals.maxSize: NULL
[08:06:58.918] | :  - attr(*, "where")=List of 5
[08:06:58.918] | :   ..$ ...future.FUN            :<environment: 0x55eedfb50c58> 
[08:06:58.918] | :   ..$ ...                      :<environment: 0x55eedfb50c58> 
[08:06:58.918] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:58.918] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:58.918] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:58.918] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:58.918] | :  - attr(*, "resolved")= logi FALSE
[08:06:58.918] | :  - attr(*, "total_size")= num 6008
[08:06:58.922] | : Number of futures (= number of chunks): 2
[08:06:58.922] | : Launching 2 futures (chunks) ...
[08:06:58.922] | : Chunk #1 of 2 ...
[08:06:58.922] | :  - Finding globals in 'X' for chunk #1 ...
[08:06:58.922] | : getGlobalsAndPackages() ...
[08:06:58.923] | : . Searching for globals ...
[08:06:58.923] | : . ' globals found: [0] 
[08:06:58.923] | : . Searching for globals ... done
[08:06:58.923] | : . globals: [0] <none>
[08:06:58.923] | : . packages: [0] <none>
[08:06:58.923] | : getGlobalsAndPackages() ... done
[08:06:58.923] | :    + additional globals found: [n=0] 
[08:06:58.924] | :    + additional namespaces needed: [n=0] 
[08:06:58.924] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:06:58.924] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:06:58.924] | :  - seeds: <none>
[08:06:58.924] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:58.924] | : future(..., label = ‘future_lapply-1’) ...
[08:06:58.924] | : . lazy: FALSE
[08:06:58.924] | : . stdout: NA
[08:06:58.924] | : . conditions: [n=1] ‘condition’
[08:06:58.924] | : . gc: FALSE
[08:06:58.925] | : . earlySignal: FALSE
[08:06:58.925] | : . getGlobalsAndPackages() ...
[08:06:58.925] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:58.925] | : . ' Resolving globals: FALSE
[08:06:58.925] | : . ' Tweak future expression to call with '...' arguments ...
[08:06:58.925] | : . ' , {
[08:06:58.925] | : . ' ,     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:58.925] | : . ' ,     "# expression in do.call(), because function called uses '...'  "
[08:06:58.925] | : . ' ,     "# as a global variable                                         "
[08:06:58.925] | : . ' ,     do.call(function(...) {
[08:06:58.925] | : . ' ,         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:58.925] | : . ' ,         "# without having an '...' argument. This means '...' is treated"
[08:06:58.925] | : . ' ,         "# as a global variable. This may happen when FUN() is an       "
[08:06:58.925] | : . ' ,         "# anonymous function.                                          "
[08:06:58.925] | : . ' ,         "#                                                              "
[08:06:58.925] | : . ' ,         "# If an anonymous function, we will make sure to restore the   "
[08:06:58.925] | : . ' ,         "# function environment of FUN() to the calling environment.    "
[08:06:58.925] | : . ' ,         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:58.925] | : . ' ,         "# global environment, which is where globals are written.      "
[08:06:58.925] | : . ' ,         penv <- env <- environment(...future.FUN)
[08:06:58.925] | : . ' ,         repeat {
[08:06:58.925] | : . ' ,             if (identical(env, globalenv()) || identical(env, 
[08:06:58.925] | : . ' ,                 emptyenv())) 
[08:06:58.925] | : . ' ,                 break
[08:06:58.925] | : . ' ,             penv <- env
[08:06:58.925] | : . ' ,             env <- parent.env(env)
[08:06:58.925] | : . ' ,         }
[08:06:58.925] | : . ' ,         if (identical(penv, globalenv())) {
[08:06:58.925] | : . ' ,             environment(...future.FUN) <- environment()
[08:06:58.925] | : . ' ,         }
[08:06:58.925] | : . ' ,         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:58.925] | : . ' ,             !isNamespace(penv)) {
[08:06:58.925] | : . ' ,             parent.env(penv) <- environment()
[08:06:58.925] | : . ' ,         }
[08:06:58.925] | : . ' ,         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:58.925] | : . ' ,         {
[08:06:58.925] | : . ' ,             "# future.apply:::future_xapply(): preserve future option"
[08:06:58.925] | : . ' ,             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:58.925] | : . ' ,             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:58.925] | : . ' ,                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:58.925] | : . ' ,                 on.exit(options(oopts), add = TRUE)
[08:06:58.925] | : . ' ,             }
[08:06:58.925] | : . ' ,             {
[08:06:58.925] | : . ' ,                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:58.925] | : . ' ,                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:58.925] | : . ' ,                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:58.925] | : . ' ,                   {
[08:06:58.925] | : . ' ,                     ...future.FUN(...future.X_jj, ...)
[08:06:58.925] | : . ' ,                   }
[08:06:58.925] | : . ' ,                 })
[08:06:58.925] | : . ' ,             }
[08:06:58.925] | : . ' ,         }
[08:06:58.925] | : . ' ,     }, args = future.call.arguments)
[08:06:58.925] | : . ' , }
[08:06:58.926] | : . ' Tweak future expression to call with '...' arguments ... done
[08:06:58.926] | : . ' Search for packages associated with the globals ...
[08:06:58.926] | : . ' , Packages associated with globals: [0] 
[08:06:58.926] | : . ' , Packages: [0] 
[08:06:58.926] | : . ' Search for packages associated with the globals ... done
[08:06:58.927] | : . ' Packages after dropping 'base': [0] 
[08:06:58.927] | : . ' globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:58.927] | : . ' packages: [0] 
[08:06:58.927] | : . getGlobalsAndPackages() ... done
[08:06:58.927] | : . run() for ‘Future’ (‘future_lapply-1’) ...
[08:06:58.927] | : . ' state: ‘created’
[08:06:58.927] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:58.928] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:58.928] | : . ' Using MultisessionFutureBackend ...
[08:06:58.928] | : . ' , Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:06:58.928] | : . ' , Launching futures ...
[08:06:58.928] | : . ' , ; launchFuture() for ClusterFutureBackend ...
[08:06:58.928] | : . ' , ; ` Workers: [n=2]
[08:06:58.928] | : . ' , ; ` Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:06:58.930] | : . ' , ; ` FutureRegistry: ‘workers-e636a28029c6e30b2bebe5fb0c115fc6’
[08:06:58.930] | : . ' , ; ` requestWorker() ...
[08:06:58.930] | : . ' , ; ` | requestNode() ...
[08:06:58.930] | : . ' , ; ` | : Number of workers: 2
[08:06:58.931] | : . ' , ; ` | : Polling for a free worker ...
[08:06:58.931] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:58.931] | : . ' , ; ` | : . ' Listing all futures
[08:06:58.931] | : . ' , ; ` | : . ' Number of registered futures: 0
[08:06:58.931] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:58.931] | : . ' , ; ` | : . Total time: 0
[08:06:58.931] | : . ' , ; ` | : Polling for a free worker ... done
[08:06:58.931] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:58.931] | : . ' , ; ` | : . Listing all futures
[08:06:58.932] | : . ' , ; ` | : . Number of registered futures: 0
[08:06:58.932] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:58.932] | : . ' , ; ` | : avail: [n=2] ‘1’, ‘2’
[08:06:58.932] | : . ' , ; ` | : Index of first available worker: 1
[08:06:58.932] | : . ' , ; ` | : Validate that the worker is functional ...
[08:06:58.988] | : . ' , ; ` | : . Worker is functional
[08:06:58.989] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:58.989] | : . ' , ; ` | : . ' Listing all futures
[08:06:58.989] | : . ' , ; ` | : . ' Number of registered futures: 0
[08:06:58.989] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:58.989] | : . ' , ; ` | : Validate that the worker is functional ... done
[08:06:58.989] | : . ' , ; ` | requestNode() ... done
[08:06:58.989] | : . ' , ; ` | cluster node index: 1
[08:06:58.989] | : . ' , ; ` requestWorker() ... done
[08:06:58.989] | : . ' , ; ` eraseGlobalEnvironment() ...
[08:06:58.990] | : . ' , ; ` eraseGlobalEnvironment() ... done
[08:06:58.990] | : . ' , ; ` launchFuture() ...
[08:06:58.990] | : . ' , ; ` | cluster node index: 1
[08:06:58.990] | : . ' , ; ` | getFutureData() ...
[08:06:58.990] | : . ' , ; ` | : getFutureCore() ...
[08:06:58.990] | : . ' , ; ` | : . Packages needed by the future expression (n = 0): <none>
[08:06:58.991] | : . ' , ; ` | : getFutureCore() ... done
[08:06:58.991] | : . ' , ; ` | : getFutureCapture() ...
[08:06:58.991] | : . ' , ; ` | : getFutureCapture() ... done
[08:06:58.991] | : . ' , ; ` | : getFutureContext() ...
[08:06:58.991] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:58.991] | : . ' , ; ` | : . ' Getting stack without first backend: [n=0] 
[08:06:58.991] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:58.991] | : . ' , ; ` | : . Packages needed by future backend (n = 0): <none>
[08:06:58.991] | : . ' , ; ` | : getFutureContext() ... done
[08:06:58.992] | : . ' , ; ` | getFutureData() ... done
[08:06:58.992] | : . ' , ; ` | FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ...
[08:06:58.992] | : . ' , ; ` | : Appended future to position #1
[08:06:58.992] | : . ' , ; ` | : Number of registered futures: 1
[08:06:58.992] | : . ' , ; ` | FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ... done
[08:06:58.992] | : . ' , ; ` launchFuture() ... done
[08:06:58.993] | : . ' , ; ` MultisessionFuture started
[08:06:58.993] | : . ' , ; launchFuture() for ClusterFutureBackend ... done
[08:06:58.993] | : . ' , Launching futures ... done
[08:06:58.993] | : . ' , Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:58.993] | : . ' Using MultisessionFutureBackend ... done
[08:06:58.993] | : . run() for ‘Future’ (‘future_lapply-1’) ... done
[08:06:58.993] | : future(..., label = ‘future_lapply-1’) ... done
[08:06:58.993] | : Created future:
[08:06:58.994] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:58.995] | : . Cluster node socket connection: index=4, id=729
[08:06:58.995] | : . assertValidConnection() ...
[08:06:58.995] | : . ' cluster node index: 1
[08:06:58.995] | : . assertValidConnection() ... done
[08:06:59.006] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.006] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:58.993] | : MultisessionFuture:
[08:06:58.993] | : Label: ‘future_lapply-1’
[08:06:58.993] | : Expression:
[08:06:58.993] | : {
[08:06:58.993] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:58.993] | :     "# expression in do.call(), because function called uses '...'  "
[08:06:58.993] | :     "# as a global variable                                         "
[08:06:58.993] | :     do.call(function(...) {
[08:06:58.993] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:58.993] | :         "# without having an '...' argument. This means '...' is treated"
[08:06:58.993] | :         "# as a global variable. This may happen when FUN() is an       "
[08:06:58.993] | :         "# anonymous function.                                          "
[08:06:58.993] | :         "#                                                              "
[08:06:58.993] | :         "# If an anonymous function, we will make sure to restore the   "
[08:06:58.993] | :         "# function environment of FUN() to the calling environment.    "
[08:06:58.993] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:58.993] | :         "# global environment, which is where globals are written.      "
[08:06:58.993] | :         penv <- env <- environment(...future.FUN)
[08:06:58.993] | :         repeat {
[08:06:58.993] | :             if (identical(env, globalenv()) || identical(env, 
[08:06:58.993] | :                 emptyenv())) 
[08:06:58.993] | :                 break
[08:06:58.993] | :             penv <- env
[08:06:58.993] | :             env <- parent.env(env)
[08:06:58.993] | :         }
[08:06:58.993] | :         if (identical(penv, globalenv())) {
[08:06:58.993] | :             environment(...future.FUN) <- environment()
[08:06:58.993] | :         }
[08:06:58.993] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:58.993] | :             !isNamespace(penv)) {
[08:06:58.993] | :             parent.env(penv) <- environment()
[08:06:58.993] | :         }
[08:06:58.993] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:58.993] | :         {
[08:06:58.993] | :             "# future.apply:::future_xapply(): preserve future option"
[08:06:58.993] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:58.993] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:58.993] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:58.993] | :                 on.exit(options(oopts), add = TRUE)
[08:06:58.993] | :             }
[08:06:58.993] | :             {
[08:06:58.993] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:58.993] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:58.993] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:58.993] | :                   {
[08:06:58.993] | :                     ...future.FUN(...future.X_jj, ...)
[08:06:58.993] | :                   }
[08:06:58.993] | :                 })
[08:06:58.993] | :             }
[08:06:58.993] | :         }
[08:06:58.993] | :     }, args = future.call.arguments)
[08:06:58.993] | : }
[08:06:58.993] | : Globals: 5 objects totaling 6.12 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:58.993] | : Packages: <none>
[08:06:58.993] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:58.993] | : Capture standard output: NA
[08:06:58.993] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:58.993] | : Immediate condition classes: ‘immediateCondition’
[08:06:58.993] | : Lazy evaluation: FALSE
[08:06:58.993] | : Local evaluation: TRUE
[08:06:58.993] | : Asynchronous evaluation: TRUE
[08:06:58.993] | : Early signaling: FALSE
[08:06:58.993] | : Environment: R_GlobalEnv
[08:06:58.993] | : State: ‘running’
[08:06:58.993] | : Resolved: FALSE
[08:06:58.993] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-23
[08:06:58.993] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:58.993] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:58.993] | : Value: <not collected>
[08:06:58.993] | : Conditions captured: <none>
[08:06:59.006] | : Chunk #1 of 2 ... DONE
[08:06:59.006] | : Chunk #2 of 2 ...
[08:06:59.007] | :  - Finding globals in 'X' for chunk #2 ...
[08:06:59.007] | : getGlobalsAndPackages() ...
[08:06:59.007] | : . Searching for globals ...
[08:06:59.007] | : . ' globals found: [0] 
[08:06:59.007] | : . Searching for globals ... done
[08:06:59.007] | : . globals: [0] <none>
[08:06:59.008] | : . packages: [0] <none>
[08:06:59.008] | : getGlobalsAndPackages() ... done
[08:06:59.008] | :    + additional globals found: [n=0] 
[08:06:59.008] | :    + additional namespaces needed: [n=0] 
[08:06:59.008] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:06:59.008] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:06:59.008] | :  - seeds: <none>
[08:06:59.008] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:59.008] | : future(..., label = ‘future_lapply-2’) ...
[08:06:59.008] | : . lazy: FALSE
[08:06:59.009] | : . stdout: NA
[08:06:59.009] | : . conditions: [n=1] ‘condition’
[08:06:59.009] | : . gc: FALSE
[08:06:59.009] | : . earlySignal: FALSE
[08:06:59.009] | : . getGlobalsAndPackages() ...
[08:06:59.009] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:59.009] | : . ' Resolving globals: FALSE
[08:06:59.009] | : . ' Tweak future expression to call with '...' arguments ...
[08:06:59.009] | : . ' , {
[08:06:59.009] | : . ' ,     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:59.009] | : . ' ,     "# expression in do.call(), because function called uses '...'  "
[08:06:59.009] | : . ' ,     "# as a global variable                                         "
[08:06:59.009] | : . ' ,     do.call(function(...) {
[08:06:59.009] | : . ' ,         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:59.009] | : . ' ,         "# without having an '...' argument. This means '...' is treated"
[08:06:59.009] | : . ' ,         "# as a global variable. This may happen when FUN() is an       "
[08:06:59.009] | : . ' ,         "# anonymous function.                                          "
[08:06:59.009] | : . ' ,         "#                                                              "
[08:06:59.009] | : . ' ,         "# If an anonymous function, we will make sure to restore the   "
[08:06:59.009] | : . ' ,         "# function environment of FUN() to the calling environment.    "
[08:06:59.009] | : . ' ,         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:59.009] | : . ' ,         "# global environment, which is where globals are written.      "
[08:06:59.009] | : . ' ,         penv <- env <- environment(...future.FUN)
[08:06:59.009] | : . ' ,         repeat {
[08:06:59.009] | : . ' ,             if (identical(env, globalenv()) || identical(env, 
[08:06:59.009] | : . ' ,                 emptyenv())) 
[08:06:59.009] | : . ' ,                 break
[08:06:59.009] | : . ' ,             penv <- env
[08:06:59.009] | : . ' ,             env <- parent.env(env)
[08:06:59.009] | : . ' ,         }
[08:06:59.009] | : . ' ,         if (identical(penv, globalenv())) {
[08:06:59.009] | : . ' ,             environment(...future.FUN) <- environment()
[08:06:59.009] | : . ' ,         }
[08:06:59.009] | : . ' ,         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:59.009] | : . ' ,             !isNamespace(penv)) {
[08:06:59.009] | : . ' ,             parent.env(penv) <- environment()
[08:06:59.009] | : . ' ,         }
[08:06:59.009] | : . ' ,         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:59.009] | : . ' ,         {
[08:06:59.009] | : . ' ,             "# future.apply:::future_xapply(): preserve future option"
[08:06:59.009] | : . ' ,             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:59.009] | : . ' ,             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:59.009] | : . ' ,                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:59.009] | : . ' ,                 on.exit(options(oopts), add = TRUE)
[08:06:59.009] | : . ' ,             }
[08:06:59.009] | : . ' ,             {
[08:06:59.009] | : . ' ,                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:59.009] | : . ' ,                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:59.009] | : . ' ,                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:59.009] | : . ' ,                   {
[08:06:59.009] | : . ' ,                     ...future.FUN(...future.X_jj, ...)
[08:06:59.009] | : . ' ,                   }
[08:06:59.009] | : . ' ,                 })
[08:06:59.009] | : . ' ,             }
[08:06:59.009] | : . ' ,         }
[08:06:59.009] | : . ' ,     }, args = future.call.arguments)
[08:06:59.009] | : . ' , }
[08:06:59.010] | : . ' Tweak future expression to call with '...' arguments ... done
[08:06:59.010] | : . ' Search for packages associated with the globals ...
[08:06:59.010] | : . ' , Packages associated with globals: [0] 
[08:06:59.011] | : . ' , Packages: [0] 
[08:06:59.011] | : . ' Search for packages associated with the globals ... done
[08:06:59.011] | : . ' Packages after dropping 'base': [0] 
[08:06:59.011] | : . ' globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:59.011] | : . ' packages: [0] 
[08:06:59.011] | : . getGlobalsAndPackages() ... done
[08:06:59.011] | : . run() for ‘Future’ (‘future_lapply-2’) ...
[08:06:59.013] | : . ' state: ‘created’
[08:06:59.014] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:59.014] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:59.014] | : . ' Using MultisessionFutureBackend ...
[08:06:59.014] | : . ' , Number of futures since start: 5 (5 created, 5 launched, 4 finished)
[08:06:59.014] | : . ' , Launching futures ...
[08:06:59.014] | : . ' , ; launchFuture() for ClusterFutureBackend ...
[08:06:59.014] | : . ' , ; ` Workers: [n=2]
[08:06:59.014] | : . ' , ; ` Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:06:59.016] | : . ' , ; ` FutureRegistry: ‘workers-e636a28029c6e30b2bebe5fb0c115fc6’
[08:06:59.016] | : . ' , ; ` requestWorker() ...
[08:06:59.016] | : . ' , ; ` | requestNode() ...
[08:06:59.016] | : . ' , ; ` | : Number of workers: 2
[08:06:59.016] | : . ' , ; ` | : Polling for a free worker ...
[08:06:59.016] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:59.016] | : . ' , ; ` | : . ' Listing all futures
[08:06:59.017] | : . ' , ; ` | : . ' Number of registered futures: 1
[08:06:59.017] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:59.017] | : . ' , ; ` | : . Total time: 0
[08:06:59.017] | : . ' , ; ` | : Polling for a free worker ... done
[08:06:59.017] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:59.017] | : . ' , ; ` | : . Listing all futures
[08:06:59.017] | : . ' , ; ` | : . Number of registered futures: 1
[08:06:59.017] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:59.017] | : . ' , ; ` | : avail: [n=2] ‘2’
[08:06:59.018] | : . ' , ; ` | : Index of first available worker: 2
[08:06:59.018] | : . ' , ; ` | : Validate that the worker is functional ...
[08:06:59.118] | : . ' , ; ` | : . Worker is functional
[08:06:59.118] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:59.118] | : . ' , ; ` | : . ' Listing all futures
[08:06:59.118] | : . ' , ; ` | : . ' Number of registered futures: 1
[08:06:59.118] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:59.118] | : . ' , ; ` | : Validate that the worker is functional ... done
[08:06:59.119] | : . ' , ; ` | requestNode() ... done
[08:06:59.119] | : . ' , ; ` | cluster node index: 2
[08:06:59.119] | : . ' , ; ` requestWorker() ... done
[08:06:59.119] | : . ' , ; ` eraseGlobalEnvironment() ...
[08:06:59.119] | : . ' , ; ` eraseGlobalEnvironment() ... done
[08:06:59.119] | : . ' , ; ` launchFuture() ...
[08:06:59.120] | : . ' , ; ` | cluster node index: 2
[08:06:59.120] | : . ' , ; ` | getFutureData() ...
[08:06:59.120] | : . ' , ; ` | : getFutureCore() ...
[08:06:59.120] | : . ' , ; ` | : . Packages needed by the future expression (n = 0): <none>
[08:06:59.120] | : . ' , ; ` | : getFutureCore() ... done
[08:06:59.120] | : . ' , ; ` | : getFutureCapture() ...
[08:06:59.120] | : . ' , ; ` | : getFutureCapture() ... done
[08:06:59.120] | : . ' , ; ` | : getFutureContext() ...
[08:06:59.120] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:59.121] | : . ' , ; ` | : . ' Getting stack without first backend: [n=0] 
[08:06:59.121] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:59.121] | : . ' , ; ` | : . Packages needed by future backend (n = 0): <none>
[08:06:59.121] | : . ' , ; ` | : getFutureContext() ... done
[08:06:59.121] | : . ' , ; ` | getFutureData() ... done
[08:06:59.121] | : . ' , ; ` | FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ...
[08:06:59.122] | : . ' , ; ` | : Appended future to position #2
[08:06:59.122] | : . ' , ; ` | : Number of registered futures: 2
[08:06:59.122] | : . ' , ; ` | FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ... done
[08:06:59.122] | : . ' , ; ` launchFuture() ... done
[08:06:59.122] | : . ' , ; ` MultisessionFuture started
[08:06:59.122] | : . ' , ; launchFuture() for ClusterFutureBackend ... done
[08:06:59.122] | : . ' , Launching futures ... done
[08:06:59.122] | : . ' , Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:59.122] | : . ' Using MultisessionFutureBackend ... done
[08:06:59.122] | : . run() for ‘Future’ (‘future_lapply-2’) ... done
[08:06:59.123] | : future(..., label = ‘future_lapply-2’) ... done
[08:06:59.123] | : Created future:
[08:06:59.124] | : resolved() for MultisessionFuture (‘future_lapply-2’) ...
[08:06:59.124] | : . Cluster node socket connection: index=5, id=730
[08:06:59.124] | : . assertValidConnection() ...
[08:06:59.124] | : . ' cluster node index: 2
[08:06:59.125] | : . assertValidConnection() ... done
[08:06:59.135] | : . socketSelect(list(<connection #5 (id=730)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.135] | : resolved() for MultisessionFuture (‘future_lapply-2’) ... done
[08:06:59.123] | : MultisessionFuture:
[08:06:59.123] | : Label: ‘future_lapply-2’
[08:06:59.123] | : Expression:
[08:06:59.123] | : {
[08:06:59.123] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:06:59.123] | :     "# expression in do.call(), because function called uses '...'  "
[08:06:59.123] | :     "# as a global variable                                         "
[08:06:59.123] | :     do.call(function(...) {
[08:06:59.123] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:06:59.123] | :         "# without having an '...' argument. This means '...' is treated"
[08:06:59.123] | :         "# as a global variable. This may happen when FUN() is an       "
[08:06:59.123] | :         "# anonymous function.                                          "
[08:06:59.123] | :         "#                                                              "
[08:06:59.123] | :         "# If an anonymous function, we will make sure to restore the   "
[08:06:59.123] | :         "# function environment of FUN() to the calling environment.    "
[08:06:59.123] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:06:59.123] | :         "# global environment, which is where globals are written.      "
[08:06:59.123] | :         penv <- env <- environment(...future.FUN)
[08:06:59.123] | :         repeat {
[08:06:59.123] | :             if (identical(env, globalenv()) || identical(env, 
[08:06:59.123] | :                 emptyenv())) 
[08:06:59.123] | :                 break
[08:06:59.123] | :             penv <- env
[08:06:59.123] | :             env <- parent.env(env)
[08:06:59.123] | :         }
[08:06:59.123] | :         if (identical(penv, globalenv())) {
[08:06:59.123] | :             environment(...future.FUN) <- environment()
[08:06:59.123] | :         }
[08:06:59.123] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:06:59.123] | :             !isNamespace(penv)) {
[08:06:59.123] | :             parent.env(penv) <- environment()
[08:06:59.123] | :         }
[08:06:59.123] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:06:59.123] | :         {
[08:06:59.123] | :             "# future.apply:::future_xapply(): preserve future option"
[08:06:59.123] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:59.123] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:59.123] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:59.123] | :                 on.exit(options(oopts), add = TRUE)
[08:06:59.123] | :             }
[08:06:59.123] | :             {
[08:06:59.123] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:06:59.123] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:06:59.123] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:06:59.123] | :                   {
[08:06:59.123] | :                     ...future.FUN(...future.X_jj, ...)
[08:06:59.123] | :                   }
[08:06:59.123] | :                 })
[08:06:59.123] | :             }
[08:06:59.123] | :         }
[08:06:59.123] | :     }, args = future.call.arguments)
[08:06:59.123] | : }
[08:06:59.123] | : Globals: 5 objects totaling 6.12 KiB (function ‘...future.FUN’ of 841 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:59.123] | : Packages: <none>
[08:06:59.123] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:59.123] | : Capture standard output: NA
[08:06:59.123] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:59.123] | : Immediate condition classes: ‘immediateCondition’
[08:06:59.123] | : Lazy evaluation: FALSE
[08:06:59.123] | : Local evaluation: TRUE
[08:06:59.123] | : Asynchronous evaluation: TRUE
[08:06:59.123] | : Early signaling: FALSE
[08:06:59.123] | : Environment: R_GlobalEnv
[08:06:59.123] | : State: ‘running’
[08:06:59.123] | : Resolved: FALSE
[08:06:59.123] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-24
[08:06:59.123] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:59.123] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:59.123] | : Value: <not collected>
[08:06:59.123] | : Conditions captured: <none>
[08:06:59.136] | : Chunk #2 of 2 ... DONE
[08:06:59.136] | : Launching 2 futures (chunks) ... DONE
[08:06:59.136] | : Resolving 2 futures (chunks) ...
[08:06:59.136] | : value() for list ...
[08:06:59.136] | : . recursive: 0
[08:06:59.136] | : . reduce: FALSE
[08:06:59.136] | : . length: 2

[08:06:59.136] | : . Number of remaining objects: 2
[08:06:59.137] | : . checking value #1:
[08:06:59.137] | : . 'obj' is MultisessionFuture
[08:06:59.137] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:59.137] | : . ' Cluster node socket connection: index=4, id=729
[08:06:59.137] | : . ' assertValidConnection() ...
[08:06:59.137] | : . ' , cluster node index: 1
[08:06:59.138] | : . ' assertValidConnection() ... done
[08:06:59.148] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.148] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:59.148] | : . checking value #2:
[08:06:59.148] | : . 'obj' is MultisessionFuture
[08:06:59.148] | : . resolved() for MultisessionFuture (‘future_lapply-2’) ...
[08:06:59.149] | : . ' Cluster node socket connection: index=5, id=730
[08:06:59.149] | : . ' assertValidConnection() ...
[08:06:59.149] | : . ' , cluster node index: 2
[08:06:59.149] | : . ' assertValidConnection() ... done
[08:06:59.159] | : . ' socketSelect(list(<connection #5 (id=730)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.160] | : . resolved() for MultisessionFuture (‘future_lapply-2’) ... done
[08:06:59.170] | : . Number of remaining objects: 2
[08:06:59.170] | : . checking value #1:
[08:06:59.170] | : . 'obj' is MultisessionFuture
[08:06:59.170] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:59.171] | : . ' Cluster node socket connection: index=4, id=729
[08:06:59.171] | : . ' assertValidConnection() ...
[08:06:59.171] | : . ' , cluster node index: 1
[08:06:59.171] | : . ' assertValidConnection() ... done
[08:06:59.181] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.182] | : . resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:59.182] | : . checking value #2:
[08:06:59.182] | : . 'obj' is MultisessionFuture
[08:06:59.182] | : . resolved() for MultisessionFuture (‘future_lapply-2’) ...
[08:06:59.182] | : . ' Cluster node socket connection: index=5, id=730
[08:06:59.182] | : . ' assertValidConnection() ...
[08:06:59.183] | : . ' , cluster node index: 2
[08:06:59.183] | : . ' assertValidConnection() ... done
[08:06:59.183] | : . ' receiveMessageFromWorker() for ClusterFuture ...
[08:06:59.183] | : . ' , cluster node index: 2
[08:06:59.183] | : . ' , [1] TRUE
[08:06:59.184] | : . ' , received data:
[08:06:59.184] | : . ' , List of 5
[08:06:59.184] | : . ' ,  $ type   : chr "VALUE"
[08:06:59.184] | : . ' ,  $ value  :List of 16
[08:06:59.184] | : . ' ,   ..$ value              :List of 1
[08:06:59.184] | : . ' ,   .. ..$ : int 0
[08:06:59.184] | : . ' ,   ..$ visible            : logi TRUE
[08:06:59.184] | : . ' ,   ..$ stdout             : NULL
[08:06:59.184] | : . ' ,   ..$ conditions         : list()
[08:06:59.184] | : . ' ,   ..$ rng                : logi FALSE
[08:06:59.184] | : . ' ,   ..$ seed               : NULL
[08:06:59.184] | : . ' ,   ..$ misuseGlobalEnv    : NULL
[08:06:59.184] | : . ' ,   ..$ misuseConnections  :List of 3
[08:06:59.184] | : . ' ,   .. ..$ added   : NULL
[08:06:59.184] | : . ' ,   .. ..$ removed : NULL
[08:06:59.184] | : . ' ,   .. ..$ replaced: NULL
[08:06:59.184] | : . ' ,   ..$ misuseDevices      : NULL
[08:06:59.184] | : . ' ,   ..$ misuseDefaultDevice: list()
[08:06:59.184] | : . ' ,   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:06:59"
[08:06:59.184] | : . ' ,   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:06:59"
[08:06:59.184] | : . ' ,   ..$ uuid               : chr [1:2] "f4771e5023ec0cad125ea4ef8f863db5" "24"
[08:06:59.184] | : . ' ,   ..$ session_uuid       : chr "cff9dc43f82d54f766a25be23dee84a0"
[08:06:59.184] | : . ' ,   .. ..- attr(*, "source")=List of 5
[08:06:59.184] | : . ' ,   .. .. ..$ host  : Named chr "28bb34de9501"
[08:06:59.184] | : . ' ,   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:06:59.184] | : . ' ,   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:06:59.184] | : . ' ,   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:06:59.184] | : . ' ,   .. .. ..$ pid   : int 65455
[08:06:59.184] | : . ' ,   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:06:57"
[08:06:59.184] | : . ' ,   .. .. ..$ random: int 2147483647
[08:06:59.184] | : . ' ,   ..$ r_info             :List of 4
[08:06:59.184] | : . ' ,   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:06:59.184] | : . ' ,   .. .. ..$ : int [1:3] 4 5 1
[08:06:59.184] | : . ' ,   .. ..$ os           : chr "unix"
[08:06:59.184] | : . ' ,   .. ..$ os_name      : chr "Linux"
[08:06:59.184] | : . ' ,   .. ..$ captures_utf8: logi TRUE
[08:06:59.184] | : . ' ,   ..$ version            : chr "1.8"
[08:06:59.184] | : . ' ,   ..- attr(*, "class")= chr "FutureResult"
[08:06:59.184] | : . ' ,  $ success: logi TRUE
[08:06:59.184] | : . ' ,  $ time   : 'proc_time' Named num [1:5] 0.005 0 0.005 0 0
[08:06:59.184] | : . ' ,   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:06:59.184] | : . ' ,  $ tag    : NULL
[08:06:59.195] | : . ' , Received FutureResult
[08:06:59.195] | : . ' , FutureResult:
[08:06:59.195] | : . ' , value: ‘list’
[08:06:59.195] | : . ' , visible: TRUE
[08:06:59.195] | : . ' , stdout: NULL
[08:06:59.195] | : . ' , conditions: [n = 0] 
[08:06:59.195] | : . ' , RNG used: FALSE
[08:06:59.195] | : . ' , duration: 0.004266977 secs (started 2025-06-17 08:06:59.163042)
[08:06:59.195] | : . ' , version: 1.8
[08:06:59.195] | : . ' , FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ...
[08:06:59.196] | : . ' , ; Removed future from position #2
[08:06:59.196] | : . ' , ; Number of registered futures: 1
[08:06:59.196] | : . ' , FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ... done
[08:06:59.196] | : . ' , Erased future from future backend
[08:06:59.196] | : . ' , result() for ClusterFuture ...
[08:06:59.196] | : . ' , ; result already collected: FutureResult
[08:06:59.196] | : . ' , result() for ClusterFuture ... done
[08:06:59.196] | : . ' , signalConditions() ...
[08:06:59.197] | : . ' , ; include = ‘immediateCondition’
[08:06:59.197] | : . ' , ; exclude = 
[08:06:59.197] | : . ' , ; resignal = FALSE
[08:06:59.197] | : . ' , ; Number of conditions: 0
[08:06:59.197] | : . ' , ;  int 0
[08:06:59.197] | : . ' , signalConditions() ... done
[08:06:59.197] | : . ' receiveMessageFromWorker() for ClusterFuture ... done
[08:06:59.198] | : . ' receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:06:59.198] | : . resolved() for MultisessionFuture (‘future_lapply-2’) ... done
[08:06:59.198] | : . assertFutureResult() ...
[08:06:59.198] | : . ' Future uuid: f4771e5023ec0cad125ea4ef8f863db5[08:06:59.198] | : . ' Future uuid: 24
[08:06:59.198] | : . ' identical; success
[08:06:59.198] | : . assertFutureResult() ... done
[08:06:59.198] | : . MultisessionFuture #2
[08:06:59.198] | : . signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:06:59.198] | : . ' nx: 2
[08:06:59.198] | : . ' relay: TRUE
[08:06:59.199] | : . ' stdout: TRUE
[08:06:59.199] | : . ' signal: TRUE
[08:06:59.199] | : . ' resignal: FALSE
[08:06:59.199] | : . ' force: TRUE
[08:06:59.199] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:59.199] | : . ' queued futures: [n=2] FALSE, FALSE
[08:06:59.199] | : . ' until=1
[08:06:59.199] | : . ' relaying element #1
[08:06:59.199] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:59.199] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:59.200] | : . signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:06:59.200] | : . value(<MultisessionFuture>, ...) ...
[08:06:59.200] | : . value(<MultisessionFuture>, ...) ... done
[08:06:59.200] | : . value() for MultisessionFuture (‘future_lapply-2’) ...
[08:06:59.200] | : . ' result() for ClusterFuture ...
[08:06:59.200] | : . ' , result already collected: FutureResult
[08:06:59.200] | : . ' result() for ClusterFuture ... done
[08:06:59.200] | : . ' result() for ClusterFuture ...
[08:06:59.200] | : . ' , result already collected: FutureResult
[08:06:59.200] | : . ' result() for ClusterFuture ... done
[08:06:59.201] | : . ' signalConditions() ...
[08:06:59.201] | : . ' , include = ‘immediateCondition’
[08:06:59.201] | : . ' , exclude = 
[08:06:59.201] | : . ' , resignal = FALSE
[08:06:59.201] | : . ' , Number of conditions: 0
[08:06:59.201] | : . ' ,  int 0
[08:06:59.201] | : . ' signalConditions() ... done
[08:06:59.202] | : . ' check for misuse ...
[08:06:59.202] | : . ' check for misuse ... done
[08:06:59.202] | : . value() for MultisessionFuture (‘future_lapply-2’) ... done
[08:06:59.202] | : . value: <list>
[08:06:59.202] | : . signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:06:59.202] | : . ' nx: 2
[08:06:59.202] | : . ' relay: TRUE
[08:06:59.202] | : . ' stdout: TRUE
[08:06:59.202] | : . ' signal: TRUE
[08:06:59.202] | : . ' resignal: FALSE
[08:06:59.203] | : . ' force: TRUE
[08:06:59.203] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:59.203] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:59.203] | : . ' until=1
[08:06:59.203] | : . ' relaying element #1
[08:06:59.203] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:59.203] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:59.203] | : . signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:06:59.203] | : . resolve() for MultisessionFuture ...
[08:06:59.203] | : . resolve() for MultisessionFuture ... done
[08:06:59.204] | : . length: 1 (resolved future 2)
[08:06:59.204] | : value() for list ... done
[08:06:59.214] | : Number of remaining objects: 1
[08:06:59.214] | : checking value #1:
[08:06:59.214] | : 'obj' is MultisessionFuture
[08:06:59.214] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:59.215] | : . Cluster node socket connection: index=4, id=729
[08:06:59.215] | : . assertValidConnection() ...
[08:06:59.215] | : . ' cluster node index: 1
[08:06:59.215] | : . assertValidConnection() ... done
[08:06:59.225] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.226] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:59.236] | : Number of remaining objects: 1
[08:06:59.236] | : checking value #1:
[08:06:59.236] | : 'obj' is MultisessionFuture
[08:06:59.236] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:59.237] | : . Cluster node socket connection: index=4, id=729
[08:06:59.237] | : . assertValidConnection() ...
[08:06:59.237] | : . ' cluster node index: 1
[08:06:59.237] | : . assertValidConnection() ... done
[08:06:59.247] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.248] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:59.258] | : Number of remaining objects: 1
[08:06:59.258] | : checking value #1:
[08:06:59.258] | : 'obj' is MultisessionFuture
[08:06:59.258] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:59.258] | : . Cluster node socket connection: index=4, id=729
[08:06:59.259] | : . assertValidConnection() ...
[08:06:59.259] | : . ' cluster node index: 1
[08:06:59.259] | : . assertValidConnection() ... done
[08:06:59.269] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.269] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:59.280] | : Number of remaining objects: 1
[08:06:59.280] | : checking value #1:
[08:06:59.280] | : 'obj' is MultisessionFuture
[08:06:59.280] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:59.280] | : . Cluster node socket connection: index=4, id=729
[08:06:59.281] | : . assertValidConnection() ...
[08:06:59.281] | : . ' cluster node index: 1
[08:06:59.281] | : . assertValidConnection() ... done
[08:06:59.291] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.291] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:59.302] | : Number of remaining objects: 1
[08:06:59.302] | : checking value #1:
[08:06:59.302] | : 'obj' is MultisessionFuture
[08:06:59.302] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:59.302] | : . Cluster node socket connection: index=4, id=729
[08:06:59.302] | : . assertValidConnection() ...
[08:06:59.303] | : . ' cluster node index: 1
[08:06:59.303] | : . assertValidConnection() ... done
[08:06:59.313] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.313] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:59.323] | : Number of remaining objects: 1
[08:06:59.324] | : checking value #1:
[08:06:59.324] | : 'obj' is MultisessionFuture
[08:06:59.324] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:59.324] | : . Cluster node socket connection: index=4, id=729
[08:06:59.324] | : . assertValidConnection() ...
[08:06:59.324] | : . ' cluster node index: 1
[08:06:59.325] | : . assertValidConnection() ... done
[08:06:59.335] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.335] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:59.345] | : Number of remaining objects: 1
[08:06:59.345] | : checking value #1:
[08:06:59.345] | : 'obj' is MultisessionFuture
[08:06:59.346] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:59.346] | : . Cluster node socket connection: index=4, id=729
[08:06:59.346] | : . assertValidConnection() ...
[08:06:59.346] | : . ' cluster node index: 1
[08:06:59.347] | : . assertValidConnection() ... done
[08:06:59.357] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.357] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:59.367] | : Number of remaining objects: 1
[08:06:59.367] | : checking value #1:
[08:06:59.367] | : 'obj' is MultisessionFuture
[08:06:59.368] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:59.368] | : . Cluster node socket connection: index=4, id=729
[08:06:59.368] | : . assertValidConnection() ...
[08:06:59.368] | : . ' cluster node index: 1
[08:06:59.368] | : . assertValidConnection() ... done
[08:06:59.379] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.379] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:59.389] | : Number of remaining objects: 1
[08:06:59.389] | : checking value #1:
[08:06:59.389] | : 'obj' is MultisessionFuture
[08:06:59.389] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:59.390] | : . Cluster node socket connection: index=4, id=729
[08:06:59.390] | : . assertValidConnection() ...
[08:06:59.390] | : . ' cluster node index: 1
[08:06:59.390] | : . assertValidConnection() ... done
[08:06:59.401] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.401] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:59.411] | : Number of remaining objects: 1
[08:06:59.411] | : checking value #1:
[08:06:59.411] | : 'obj' is MultisessionFuture
[08:06:59.411] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:59.412] | : . Cluster node socket connection: index=4, id=729
[08:06:59.412] | : . assertValidConnection() ...
[08:06:59.412] | : . ' cluster node index: 1
[08:06:59.412] | : . assertValidConnection() ... done
[08:06:59.422] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.423] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:59.433] | : Number of remaining objects: 1
[08:06:59.433] | : checking value #1:
[08:06:59.433] | : 'obj' is MultisessionFuture
[08:06:59.433] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:59.434] | : . Cluster node socket connection: index=4, id=729
[08:06:59.434] | : . assertValidConnection() ...
[08:06:59.434] | : . ' cluster node index: 1
[08:06:59.434] | : . assertValidConnection() ... done
[08:06:59.444] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.444] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:59.455] | : Number of remaining objects: 1
[08:06:59.455] | : checking value #1:
[08:06:59.455] | : 'obj' is MultisessionFuture
[08:06:59.455] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:59.455] | : . Cluster node socket connection: index=4, id=729
[08:06:59.456] | : . assertValidConnection() ...
[08:06:59.456] | : . ' cluster node index: 1
[08:06:59.456] | : . assertValidConnection() ... done
[08:06:59.466] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.466] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:59.476] | : Number of remaining objects: 1
[08:06:59.477] | : checking value #1:
[08:06:59.477] | : 'obj' is MultisessionFuture
[08:06:59.477] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:59.477] | : . Cluster node socket connection: index=4, id=729
[08:06:59.477] | : . assertValidConnection() ...
[08:06:59.478] | : . ' cluster node index: 1
[08:06:59.478] | : . assertValidConnection() ... done
[08:06:59.488] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.488] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:59.498] | : Number of remaining objects: 1
[08:06:59.499] | : checking value #1:
[08:06:59.499] | : 'obj' is MultisessionFuture
[08:06:59.499] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:59.499] | : . Cluster node socket connection: index=4, id=729
[08:06:59.499] | : . assertValidConnection() ...
[08:06:59.499] | : . ' cluster node index: 1
[08:06:59.500] | : . assertValidConnection() ... done
[08:06:59.510] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.510] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:59.520] | : Number of remaining objects: 1
[08:06:59.521] | : checking value #1:
[08:06:59.521] | : 'obj' is MultisessionFuture
[08:06:59.521] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:59.521] | : . Cluster node socket connection: index=4, id=729
[08:06:59.521] | : . assertValidConnection() ...
[08:06:59.522] | : . ' cluster node index: 1
[08:06:59.522] | : . assertValidConnection() ... done
[08:06:59.532] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.532] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:59.542] | : Number of remaining objects: 1
[08:06:59.543] | : checking value #1:
[08:06:59.543] | : 'obj' is MultisessionFuture
[08:06:59.543] | : resolved() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:59.543] | : . Cluster node socket connection: index=4, id=729
[08:06:59.543] | : . assertValidConnection() ...
[08:06:59.543] | : . ' cluster node index: 1
[08:06:59.544] | : . assertValidConnection() ... done
[08:06:59.544] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:06:59.544] | : . ' cluster node index: 1
[08:06:59.544] | : . ' [1] TRUE
[08:06:59.544] | : . ' received data:
[08:06:59.544] | : . ' List of 5
[08:06:59.544] | : . '  $ type   : chr "VALUE"
[08:06:59.544] | : . '  $ value  :List of 16
[08:06:59.544] | : . '   ..$ value              :List of 1
[08:06:59.544] | : . '   .. ..$ : int 1
[08:06:59.544] | : . '   ..$ visible            : logi TRUE
[08:06:59.544] | : . '   ..$ stdout             : NULL
[08:06:59.544] | : . '   ..$ conditions         : list()
[08:06:59.544] | : . '   ..$ rng                : logi FALSE
[08:06:59.544] | : . '   ..$ seed               : NULL
[08:06:59.544] | : . '   ..$ misuseGlobalEnv    : NULL
[08:06:59.544] | : . '   ..$ misuseConnections  :List of 3
[08:06:59.544] | : . '   .. ..$ added   : NULL
[08:06:59.544] | : . '   .. ..$ removed : NULL
[08:06:59.544] | : . '   .. ..$ replaced: NULL
[08:06:59.544] | : . '   ..$ misuseDevices      : NULL
[08:06:59.544] | : . '   ..$ misuseDefaultDevice: list()
[08:06:59.544] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:06:59"
[08:06:59.544] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:06:59"
[08:06:59.544] | : . '   ..$ uuid               : chr [1:2] "f4771e5023ec0cad125ea4ef8f863db5" "23"
[08:06:59.544] | : . '   ..$ session_uuid       : chr "59b306a9e84480e65c32ece688378702"
[08:06:59.544] | : . '   .. ..- attr(*, "source")=List of 5
[08:06:59.544] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:06:59.544] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:06:59.544] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:06:59.544] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:06:59.544] | : . '   .. .. ..$ pid   : int 65456
[08:06:59.544] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:06:57"
[08:06:59.544] | : . '   .. .. ..$ random: int 2147483647
[08:06:59.544] | : . '   ..$ r_info             :List of 4
[08:06:59.544] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:06:59.544] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:06:59.544] | : . '   .. ..$ os           : chr "unix"
[08:06:59.544] | : . '   .. ..$ os_name      : chr "Linux"
[08:06:59.544] | : . '   .. ..$ captures_utf8: logi TRUE
[08:06:59.544] | : . '   ..$ version            : chr "1.8"
[08:06:59.544] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:06:59.544] | : . '  $ success: logi TRUE
[08:06:59.544] | : . '  $ time   : 'proc_time' Named num [1:5] 0.005 0.001 0.506 0 0
[08:06:59.544] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:06:59.544] | : . '  $ tag    : NULL
[08:06:59.558] | : . ' Received FutureResult
[08:06:59.558] | : . ' FutureResult:
[08:06:59.558] | : . ' value: ‘list’
[08:06:59.558] | : . ' visible: TRUE
[08:06:59.558] | : . ' stdout: NULL
[08:06:59.558] | : . ' conditions: [n = 0] 
[08:06:59.558] | : . ' RNG used: FALSE
[08:06:59.558] | : . ' duration: 0.5051887 secs (started 2025-06-17 08:06:59.032938)
[08:06:59.558] | : . ' version: 1.8
[08:06:59.558] | : . ' FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ...
[08:06:59.558] | : . ' , Removed future from position #1
[08:06:59.559] | : . ' , Number of registered futures: 0
[08:06:59.559] | : . ' FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ... done
[08:06:59.559] | : . ' Erased future from future backend
[08:06:59.559] | : . ' result() for ClusterFuture ...
[08:06:59.559] | : . ' , result already collected: FutureResult
[08:06:59.559] | : . ' result() for ClusterFuture ... done
[08:06:59.559] | : . ' signalConditions() ...
[08:06:59.559] | : . ' , include = ‘immediateCondition’
[08:06:59.559] | : . ' , exclude = 
[08:06:59.559] | : . ' , resignal = FALSE
[08:06:59.560] | : . ' , Number of conditions: 0
[08:06:59.560] | : . ' ,  int 0
[08:06:59.560] | : . ' signalConditions() ... done
[08:06:59.560] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:06:59.560] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:06:59.560] | : resolved() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:59.560] | : assertFutureResult() ...
[08:06:59.561] | : . Future uuid: f4771e5023ec0cad125ea4ef8f863db5[08:06:59.561] | : . Future uuid: 23
[08:06:59.561] | : . identical; success
[08:06:59.561] | : assertFutureResult() ... done
[08:06:59.561] | : MultisessionFuture #1
[08:06:59.561] | : signalConditionsASAP(MultisessionFuture, pos=1) ...
[08:06:59.561] | : . nx: 2
[08:06:59.561] | : . relay: TRUE
[08:06:59.561] | : . stdout: TRUE
[08:06:59.561] | : . signal: TRUE
[08:06:59.561] | : . resignal: FALSE
[08:06:59.561] | : . force: TRUE
[08:06:59.562] | : . relayed: [n=2] FALSE, FALSE
[08:06:59.562] | : . queued futures: [n=2] FALSE, TRUE
[08:06:59.562] | : . until=1
[08:06:59.562] | : . relaying element #1
[08:06:59.562] | : . value() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:59.562] | : . ' result() for ClusterFuture ...
[08:06:59.562] | : . ' , result already collected: FutureResult
[08:06:59.562] | : . ' result() for ClusterFuture ... done
[08:06:59.562] | : . ' result() for ClusterFuture ...
[08:06:59.562] | : . ' , result already collected: FutureResult
[08:06:59.563] | : . ' result() for ClusterFuture ... done
[08:06:59.563] | : . ' signalConditions() ...
[08:06:59.563] | : . ' , include = ‘immediateCondition’
[08:06:59.563] | : . ' , exclude = 
[08:06:59.563] | : . ' , resignal = FALSE
[08:06:59.563] | : . ' , Number of conditions: 0
[08:06:59.563] | : . ' ,  int 0
[08:06:59.564] | : . ' signalConditions() ... done
[08:06:59.564] | : . ' relay stdout ...
[08:06:59.564] | : . ' relay stdout ... done
[08:06:59.564] | : . ' check for misuse ...
[08:06:59.564] | : . ' check for misuse ... done
[08:06:59.564] | : . value() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:59.564] | : . result() for ClusterFuture ...
[08:06:59.564] | : . ' result already collected: FutureResult
[08:06:59.564] | : . result() for ClusterFuture ... done
[08:06:59.564] | : . signalConditions() ...
[08:06:59.565] | : . ' include = ‘immediateCondition’
[08:06:59.565] | : . ' exclude = 
[08:06:59.565] | : . ' resignal = FALSE
[08:06:59.565] | : . ' Number of conditions: 0
[08:06:59.565] | : . '  int 0
[08:06:59.565] | : . signalConditions() ... done
[08:06:59.565] | : . result() for ClusterFuture ...
[08:06:59.565] | : . ' result already collected: FutureResult
[08:06:59.566] | : . result() for ClusterFuture ... done
[08:06:59.566] | : . signalConditions() ...
[08:06:59.566] | : . ' include = ‘condition’
[08:06:59.566] | : . ' exclude = ‘error’, ‘immediateCondition’
[08:06:59.566] | : . ' resignal = TRUE
[08:06:59.566] | : . ' Number of conditions: 0
[08:06:59.566] | : . '  int 0
[08:06:59.567] | : . signalConditions() ... done
[08:06:59.567] | : . relayed: [n=2] TRUE, FALSE
[08:06:59.567] | : . queued futures: [n=2] TRUE, TRUE
[08:06:59.567] | : signalConditionsASAP(MultisessionFuture, pos=1) ... done
[08:06:59.567] | : value(<MultisessionFuture>, ...) ...
[08:06:59.567] | : value(<MultisessionFuture>, ...) ... done
[08:06:59.567] | : value() for MultisessionFuture (‘future_lapply-1’) ...
[08:06:59.567] | : . result() for ClusterFuture ...
[08:06:59.567] | : . ' result already collected: FutureResult
[08:06:59.567] | : . result() for ClusterFuture ... done
[08:06:59.568] | : . result() for ClusterFuture ...
[08:06:59.568] | : . ' result already collected: FutureResult
[08:06:59.568] | : . result() for ClusterFuture ... done
[08:06:59.568] | : . signalConditions() ...
[08:06:59.568] | : . ' include = ‘immediateCondition’
[08:06:59.568] | : . ' exclude = 
[08:06:59.568] | : . ' resignal = FALSE
[08:06:59.568] | : . ' Number of conditions: 0
[08:06:59.568] | : . '  int 0
[08:06:59.569] | : . signalConditions() ... done
[08:06:59.569] | : . check for misuse ...
[08:06:59.569] | : . check for misuse ... done
[08:06:59.569] | : value() for MultisessionFuture (‘future_lapply-1’) ... done
[08:06:59.569] | : value: <list>
[08:06:59.569] | : signalConditionsASAP(MultisessionFuture, pos=1) ...
[08:06:59.569] | : . nx: 2
[08:06:59.569] | : . relay: TRUE
[08:06:59.569] | : . stdout: TRUE
[08:06:59.570] | : . signal: TRUE
[08:06:59.570] | : . resignal: FALSE
[08:06:59.570] | : . force: TRUE
[08:06:59.570] | : . relayed: [n=2] TRUE, FALSE
[08:06:59.570] | : . queued futures: [n=2] TRUE, TRUE
[08:06:59.570] | : . until=2
[08:06:59.570] | : . relaying element #2
[08:06:59.570] | : . value() for MultisessionFuture (‘future_lapply-2’) ...
[08:06:59.570] | : . ' result() for ClusterFuture ...
[08:06:59.570] | : . ' , result already collected: FutureResult
[08:06:59.570] | : . ' result() for ClusterFuture ... done
[08:06:59.571] | : . ' result() for ClusterFuture ...
[08:06:59.571] | : . ' , result already collected: FutureResult
[08:06:59.571] | : . ' result() for ClusterFuture ... done
[08:06:59.571] | : . ' signalConditions() ...
[08:06:59.571] | : . ' , include = ‘immediateCondition’
[08:06:59.571] | : . ' , exclude = 
[08:06:59.571] | : . ' , resignal = FALSE
[08:06:59.571] | : . ' , Number of conditions: 0
[08:06:59.571] | : . ' ,  int 0
[08:06:59.572] | : . ' signalConditions() ... done
[08:06:59.572] | : . ' relay stdout ...
[08:06:59.572] | : . ' relay stdout ... done
[08:06:59.572] | : . ' check for misuse ...
[08:06:59.572] | : . ' check for misuse ... done
[08:06:59.572] | : . value() for MultisessionFuture (‘future_lapply-2’) ... done
[08:06:59.572] | : . result() for ClusterFuture ...
[08:06:59.572] | : . ' result already collected: FutureResult
[08:06:59.573] | : . result() for ClusterFuture ... done
[08:06:59.573] | : . signalConditions() ...
[08:06:59.573] | : . ' include = ‘immediateCondition’
[08:06:59.573] | : . ' exclude = 
[08:06:59.573] | : . ' resignal = FALSE
[08:06:59.573] | : . ' Number of conditions: 0
[08:06:59.573] | : . '  int 0
[08:06:59.573] | : . signalConditions() ... done
[08:06:59.574] | : . result() for ClusterFuture ...
[08:06:59.574] | : . ' result already collected: FutureResult
[08:06:59.574] | : . result() for ClusterFuture ... done
[08:06:59.574] | : . signalConditions() ...
[08:06:59.574] | : . ' include = ‘condition’
[08:06:59.574] | : . ' exclude = ‘error’, ‘immediateCondition’
[08:06:59.574] | : . ' resignal = TRUE
[08:06:59.574] | : . ' Number of conditions: 0
[08:06:59.574] | : . '  int 0
[08:06:59.575] | : . signalConditions() ... done
[08:06:59.575] | : . relayed: [n=2] TRUE, TRUE
[08:06:59.575] | : . queued futures: [n=2] TRUE, TRUE
[08:06:59.575] | : signalConditionsASAP(MultisessionFuture, pos=1) ... done
[08:06:59.575] | : resolve() for MultisessionFuture ...
[08:06:59.575] | : resolve() for MultisessionFuture ... done
[08:06:59.575] | : length: 0 (resolved future 1)
[08:06:59.575] | future_lapply() -> future_xapply() ... done
[08:06:59.576] | Relaying remaining futures ...
[08:06:59.576] | : signalConditionsASAP(NULL, pos=0) ...
[08:06:59.576] | : . nx: 2
[08:06:59.576] | : . relay: TRUE
[08:06:59.576] | : . stdout: TRUE
[08:06:59.576] | : . signal: TRUE
[08:06:59.576] | : . resignal: FALSE
[08:06:59.576] | : . force: TRUE
[08:06:59.576] | : . relayed: [n=2] TRUE, TRUE
[08:06:59.576] | : . queued futures: [n=2] TRUE, TRUE
 - flush all
[08:06:59.577] | : . relayed: [n=2] TRUE, TRUE
[08:06:59.577] | : . queued futures: [n=2] TRUE, TRUE
[08:06:59.577] | : signalConditionsASAP(NULL, pos=0) ... done
[08:06:59.577] | Relaying remaining futures ... done
[08:06:59.577] future_lapply() ... done
[08:06:59.577]  - Number of value chunks collected: 2
[08:06:59.577] Resolving 2 futures (chunks) ... DONE
[08:06:59.577] Reducing values from 2 chunks ...
[08:06:59.577]  - Number of values collected after concatenation: 2
[08:06:59.577]  - Number of values expected: 2
[08:06:59.578] Reducing values from 2 chunks ... DONE


* future_lapply(x, ..., future.stdout = NA) ... DONE
* future_mapply(x, ..., future.stdout = FALSE) ...
[08:06:59.578] future_mapply() ...
[08:06:59.578] | future_mapply() -> future_xapply() ...
[08:06:59.578] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:59.578] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:59.579] | : Number of chunks: 2
[08:06:59.579] | : getGlobalsAndPackagesXApply() ...
[08:06:59.579] | : . future.globals: TRUE
[08:06:59.579] | : . getGlobalsAndPackages() ...
[08:06:59.579] | : . ' Searching for globals ...
[08:06:59.587] | : . ' , globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[08:06:59.588] | : . ' Searching for globals ... done
[08:06:59.588] | : . ' Resolving globals: FALSE
[08:06:59.588] | : . ' Search for packages associated with the globals ...
[08:06:59.588] | : . ' , Packages associated with globals: [1] ‘base’
[08:06:59.588] | : . ' , Packages: [1] ‘base’
[08:06:59.588] | : . ' Search for packages associated with the globals ... done
[08:06:59.589] | : . ' The total size of the 1 globals is 1.04 KiB (1066 bytes)
[08:06:59.589] | : . ' The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[08:06:59.589] | : . ' Packages after dropping 'base': [0] 
[08:06:59.589] | : . ' globals: [1] ‘FUN’
[08:06:59.589] | : . ' packages: [0] 
[08:06:59.589] | : . getGlobalsAndPackages() ... done
[08:06:59.590] | : . globals found/used: [n=1] ‘FUN’
[08:06:59.590] | : . needed namespaces: [n=0] 
[08:06:59.590] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[08:06:59.590] | : . List of 2
[08:06:59.590] | : .  $ ...future.FUN:function (x, y)  
[08:06:59.590] | : .  $ MoreArgs     : NULL
[08:06:59.590] | : .  - attr(*, "where")=List of 2
[08:06:59.590] | : .   ..$ ...future.FUN:<environment: 0x55eede2b2978> 
[08:06:59.590] | : .   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[08:06:59.590] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:59.590] | : .  - attr(*, "resolved")= logi FALSE
[08:06:59.590] | : .  - attr(*, "total_size")= num NA
[08:06:59.593] | : . Packages to be attached in all futures: [n=0] 
[08:06:59.593] | : getGlobalsAndPackagesXApply() ... done
[08:06:59.593] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:59.593] | : List of 5
[08:06:59.593] | :  $ ...future.FUN            :function (x, y)  
[08:06:59.593] | :  $ MoreArgs                 : NULL
[08:06:59.593] | :  $ ...future.elements_ii    : NULL
[08:06:59.593] | :  $ ...future.seeds_ii       : NULL
[08:06:59.593] | :  $ ...future.globals.maxSize: NULL
[08:06:59.593] | :  - attr(*, "where")=List of 5
[08:06:59.593] | :   ..$ ...future.FUN            :<environment: 0x55eede2b2978> 
[08:06:59.593] | :   ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[08:06:59.593] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:06:59.593] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:06:59.593] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:06:59.593] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:06:59.593] | :  - attr(*, "resolved")= logi FALSE
[08:06:59.593] | :  - attr(*, "total_size")= num NA
[08:06:59.597] | : Number of futures (= number of chunks): 2
[08:06:59.597] | : Launching 2 futures (chunks) ...
[08:06:59.597] | : Chunk #1 of 2 ...
[08:06:59.597] | :  - Finding globals in '...' for chunk #1 ...
[08:06:59.597] | : getGlobalsAndPackages() ...
[08:06:59.598] | : . Searching for globals ...
[08:06:59.598] | : . ' globals found: [0] 
[08:06:59.598] | : . Searching for globals ... done
[08:06:59.598] | : . globals: [0] <none>
[08:06:59.598] | : . packages: [0] <none>
[08:06:59.598] | : getGlobalsAndPackages() ... done
[08:06:59.599] | :    + additional globals found: [n=0] 
[08:06:59.599] | :    + additional namespaces needed: [n=0] 
[08:06:59.599] | :  - Finding globals in '...' for chunk #1 ... DONE
[08:06:59.599] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:06:59.599] | :  - seeds: <none>
[08:06:59.599] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:59.599] | : future(..., label = ‘future_mapply-1’) ...
[08:06:59.599] | : . lazy: FALSE
[08:06:59.599] | : . stdout: FALSE
[08:06:59.600] | : . conditions: [n=1] ‘condition’
[08:06:59.600] | : . gc: FALSE
[08:06:59.600] | : . earlySignal: FALSE
[08:06:59.600] | : . getGlobalsAndPackages() ...
[08:06:59.600] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:59.600] | : . ' Resolving globals: FALSE
[08:06:59.600] | : . ' Search for packages associated with the globals ...
[08:06:59.600] | : . ' , Packages associated with globals: [0] 
[08:06:59.601] | : . ' , Packages: [0] 
[08:06:59.601] | : . ' Search for packages associated with the globals ... done
[08:06:59.601] | : . ' Packages after dropping 'base': [0] 
[08:06:59.601] | : . ' globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:59.601] | : . ' packages: [0] 
[08:06:59.601] | : . getGlobalsAndPackages() ... done
[08:06:59.601] | : . run() for ‘Future’ (‘future_mapply-1’) ...
[08:06:59.602] | : . ' state: ‘created’
[08:06:59.602] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:59.602] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:59.602] | : . ' Using MultisessionFutureBackend ...
[08:06:59.602] | : . ' , Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:06:59.602] | : . ' , Launching futures ...
[08:06:59.602] | : . ' , ; launchFuture() for ClusterFutureBackend ...
[08:06:59.602] | : . ' , ; ` Workers: [n=2]
[08:06:59.603] | : . ' , ; ` Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:06:59.604] | : . ' , ; ` FutureRegistry: ‘workers-e636a28029c6e30b2bebe5fb0c115fc6’
[08:06:59.604] | : . ' , ; ` requestWorker() ...
[08:06:59.604] | : . ' , ; ` | requestNode() ...
[08:06:59.604] | : . ' , ; ` | : Number of workers: 2
[08:06:59.605] | : . ' , ; ` | : Polling for a free worker ...
[08:06:59.605] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:59.605] | : . ' , ; ` | : . ' Listing all futures
[08:06:59.605] | : . ' , ; ` | : . ' Number of registered futures: 0
[08:06:59.605] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:59.605] | : . ' , ; ` | : . Total time: 0
[08:06:59.605] | : . ' , ; ` | : Polling for a free worker ... done
[08:06:59.605] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:59.605] | : . ' , ; ` | : . Listing all futures
[08:06:59.606] | : . ' , ; ` | : . Number of registered futures: 0
[08:06:59.606] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:59.606] | : . ' , ; ` | : avail: [n=2] ‘1’, ‘2’
[08:06:59.606] | : . ' , ; ` | : Index of first available worker: 1
[08:06:59.606] | : . ' , ; ` | : Validate that the worker is functional ...
[08:06:59.662] | : . ' , ; ` | : . Worker is functional
[08:06:59.663] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:59.663] | : . ' , ; ` | : . ' Listing all futures
[08:06:59.663] | : . ' , ; ` | : . ' Number of registered futures: 0
[08:06:59.663] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:59.663] | : . ' , ; ` | : Validate that the worker is functional ... done
[08:06:59.663] | : . ' , ; ` | requestNode() ... done
[08:06:59.663] | : . ' , ; ` | cluster node index: 1
[08:06:59.664] | : . ' , ; ` requestWorker() ... done
[08:06:59.664] | : . ' , ; ` eraseGlobalEnvironment() ...
[08:06:59.664] | : . ' , ; ` eraseGlobalEnvironment() ... done
[08:06:59.664] | : . ' , ; ` launchFuture() ...
[08:06:59.664] | : . ' , ; ` | cluster node index: 1
[08:06:59.664] | : . ' , ; ` | getFutureData() ...
[08:06:59.664] | : . ' , ; ` | : getFutureCore() ...
[08:06:59.665] | : . ' , ; ` | : . Packages needed by the future expression (n = 0): <none>
[08:06:59.665] | : . ' , ; ` | : getFutureCore() ... done
[08:06:59.665] | : . ' , ; ` | : getFutureCapture() ...
[08:06:59.665] | : . ' , ; ` | : getFutureCapture() ... done
[08:06:59.665] | : . ' , ; ` | : getFutureContext() ...
[08:06:59.665] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:59.665] | : . ' , ; ` | : . ' Getting stack without first backend: [n=0] 
[08:06:59.665] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:59.665] | : . ' , ; ` | : . Packages needed by future backend (n = 0): <none>
[08:06:59.666] | : . ' , ; ` | : getFutureContext() ... done
[08:06:59.666] | : . ' , ; ` | getFutureData() ... done
[08:06:59.666] | : . ' , ; ` | FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ...
[08:06:59.666] | : . ' , ; ` | : Appended future to position #1
[08:06:59.666] | : . ' , ; ` | : Number of registered futures: 1
[08:06:59.666] | : . ' , ; ` | FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ... done
[08:06:59.667] | : . ' , ; ` launchFuture() ... done
[08:06:59.667] | : . ' , ; ` MultisessionFuture started
[08:06:59.667] | : . ' , ; launchFuture() for ClusterFutureBackend ... done
[08:06:59.667] | : . ' , Launching futures ... done
[08:06:59.667] | : . ' , Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:59.667] | : . ' Using MultisessionFutureBackend ... done
[08:06:59.667] | : . run() for ‘Future’ (‘future_mapply-1’) ... done
[08:06:59.667] | : future(..., label = ‘future_mapply-1’) ... done
[08:06:59.667] | : Created future:
[08:06:59.668] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:06:59.669] | : . Cluster node socket connection: index=4, id=729
[08:06:59.669] | : . assertValidConnection() ...
[08:06:59.669] | : . ' cluster node index: 1
[08:06:59.669] | : . assertValidConnection() ... done
[08:06:59.680] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.680] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:06:59.668] | : MultisessionFuture:
[08:06:59.668] | : Label: ‘future_mapply-1’
[08:06:59.668] | : Expression:
[08:06:59.668] | : {
[08:06:59.668] | :     "# future.apply:::future_xapply(): preserve future option"
[08:06:59.668] | :     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:59.668] | :     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:59.668] | :         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:59.668] | :         on.exit(options(oopts), add = TRUE)
[08:06:59.668] | :     }
[08:06:59.668] | :     {
[08:06:59.668] | :         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[08:06:59.668] | :             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[08:06:59.668] | :         do.call(mapply, args = args)
[08:06:59.668] | :     }
[08:06:59.668] | : }
[08:06:59.668] | : Globals: 5 objects totaling 6.51 KiB (function ‘...future.FUN’ of 1.04 KiB, list ‘...future.elements_ii’ of 71 bytes, NULL ‘MoreArgs’ of 27 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:59.668] | : Packages: <none>
[08:06:59.668] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:59.668] | : Capture standard output: FALSE
[08:06:59.668] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:59.668] | : Immediate condition classes: ‘immediateCondition’
[08:06:59.668] | : Lazy evaluation: FALSE
[08:06:59.668] | : Local evaluation: TRUE
[08:06:59.668] | : Asynchronous evaluation: TRUE
[08:06:59.668] | : Early signaling: FALSE
[08:06:59.668] | : Environment: R_GlobalEnv
[08:06:59.668] | : State: ‘running’
[08:06:59.668] | : Resolved: FALSE
[08:06:59.668] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-25
[08:06:59.668] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:59.668] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:59.668] | : Value: <not collected>
[08:06:59.668] | : Conditions captured: <none>
[08:06:59.680] | : Chunk #1 of 2 ... DONE
[08:06:59.680] | : Chunk #2 of 2 ...
[08:06:59.680] | :  - Finding globals in '...' for chunk #2 ...
[08:06:59.681] | : getGlobalsAndPackages() ...
[08:06:59.681] | : . Searching for globals ...
[08:06:59.681] | : . ' globals found: [0] 
[08:06:59.681] | : . Searching for globals ... done
[08:06:59.682] | : . globals: [0] <none>
[08:06:59.682] | : . packages: [0] <none>
[08:06:59.682] | : getGlobalsAndPackages() ... done
[08:06:59.682] | :    + additional globals found: [n=0] 
[08:06:59.682] | :    + additional namespaces needed: [n=0] 
[08:06:59.682] | :  - Finding globals in '...' for chunk #2 ... DONE
[08:06:59.682] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:06:59.682] | :  - seeds: <none>
[08:06:59.682] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:59.683] | : future(..., label = ‘future_mapply-2’) ...
[08:06:59.683] | : . lazy: FALSE
[08:06:59.683] | : . stdout: FALSE
[08:06:59.683] | : . conditions: [n=1] ‘condition’
[08:06:59.683] | : . gc: FALSE
[08:06:59.683] | : . earlySignal: FALSE
[08:06:59.683] | : . getGlobalsAndPackages() ...
[08:06:59.683] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:59.683] | : . ' Resolving globals: FALSE
[08:06:59.683] | : . ' Search for packages associated with the globals ...
[08:06:59.684] | : . ' , Packages associated with globals: [0] 
[08:06:59.684] | : . ' , Packages: [0] 
[08:06:59.684] | : . ' Search for packages associated with the globals ... done
[08:06:59.684] | : . ' Packages after dropping 'base': [0] 
[08:06:59.684] | : . ' globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:06:59.684] | : . ' packages: [0] 
[08:06:59.685] | : . getGlobalsAndPackages() ... done
[08:06:59.685] | : . run() for ‘Future’ (‘future_mapply-2’) ...
[08:06:59.685] | : . ' state: ‘created’
[08:06:59.685] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:59.685] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:59.685] | : . ' Using MultisessionFutureBackend ...
[08:06:59.685] | : . ' , Number of futures since start: 7 (7 created, 7 launched, 6 finished)
[08:06:59.687] | : . ' , Launching futures ...
[08:06:59.688] | : . ' , ; launchFuture() for ClusterFutureBackend ...
[08:06:59.688] | : . ' , ; ` Workers: [n=2]
[08:06:59.688] | : . ' , ; ` Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:06:59.689] | : . ' , ; ` FutureRegistry: ‘workers-e636a28029c6e30b2bebe5fb0c115fc6’
[08:06:59.689] | : . ' , ; ` requestWorker() ...
[08:06:59.690] | : . ' , ; ` | requestNode() ...
[08:06:59.690] | : . ' , ; ` | : Number of workers: 2
[08:06:59.690] | : . ' , ; ` | : Polling for a free worker ...
[08:06:59.690] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:59.690] | : . ' , ; ` | : . ' Listing all futures
[08:06:59.690] | : . ' , ; ` | : . ' Number of registered futures: 1
[08:06:59.690] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:59.690] | : . ' , ; ` | : . Total time: 0
[08:06:59.690] | : . ' , ; ` | : Polling for a free worker ... done
[08:06:59.691] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:59.691] | : . ' , ; ` | : . Listing all futures
[08:06:59.691] | : . ' , ; ` | : . Number of registered futures: 1
[08:06:59.691] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:59.691] | : . ' , ; ` | : avail: [n=2] ‘2’
[08:06:59.691] | : . ' , ; ` | : Index of first available worker: 2
[08:06:59.691] | : . ' , ; ` | : Validate that the worker is functional ...
[08:06:59.789] | : . ' , ; ` | : . Worker is functional
[08:06:59.789] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:06:59.789] | : . ' , ; ` | : . ' Listing all futures
[08:06:59.789] | : . ' , ; ` | : . ' Number of registered futures: 1
[08:06:59.789] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:06:59.790] | : . ' , ; ` | : Validate that the worker is functional ... done
[08:06:59.790] | : . ' , ; ` | requestNode() ... done
[08:06:59.790] | : . ' , ; ` | cluster node index: 2
[08:06:59.790] | : . ' , ; ` requestWorker() ... done
[08:06:59.790] | : . ' , ; ` eraseGlobalEnvironment() ...
[08:06:59.790] | : . ' , ; ` eraseGlobalEnvironment() ... done
[08:06:59.791] | : . ' , ; ` launchFuture() ...
[08:06:59.791] | : . ' , ; ` | cluster node index: 2
[08:06:59.791] | : . ' , ; ` | getFutureData() ...
[08:06:59.791] | : . ' , ; ` | : getFutureCore() ...
[08:06:59.791] | : . ' , ; ` | : . Packages needed by the future expression (n = 0): <none>
[08:06:59.791] | : . ' , ; ` | : getFutureCore() ... done
[08:06:59.791] | : . ' , ; ` | : getFutureCapture() ...
[08:06:59.791] | : . ' , ; ` | : getFutureCapture() ... done
[08:06:59.791] | : . ' , ; ` | : getFutureContext() ...
[08:06:59.791] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:06:59.792] | : . ' , ; ` | : . ' Getting stack without first backend: [n=0] 
[08:06:59.792] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:06:59.792] | : . ' , ; ` | : . Packages needed by future backend (n = 0): <none>
[08:06:59.792] | : . ' , ; ` | : getFutureContext() ... done
[08:06:59.792] | : . ' , ; ` | getFutureData() ... done
[08:06:59.792] | : . ' , ; ` | FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ...
[08:06:59.793] | : . ' , ; ` | : Appended future to position #2
[08:06:59.793] | : . ' , ; ` | : Number of registered futures: 2
[08:06:59.793] | : . ' , ; ` | FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ... done
[08:06:59.793] | : . ' , ; ` launchFuture() ... done
[08:06:59.793] | : . ' , ; ` MultisessionFuture started
[08:06:59.793] | : . ' , ; launchFuture() for ClusterFutureBackend ... done
[08:06:59.793] | : . ' , Launching futures ... done
[08:06:59.793] | : . ' , Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:59.793] | : . ' Using MultisessionFutureBackend ... done
[08:06:59.794] | : . run() for ‘Future’ (‘future_mapply-2’) ... done
[08:06:59.794] | : future(..., label = ‘future_mapply-2’) ... done
[08:06:59.794] | : Created future:
[08:06:59.795] | : resolved() for MultisessionFuture (‘future_mapply-2’) ...
[08:06:59.795] | : . Cluster node socket connection: index=5, id=730
[08:06:59.795] | : . assertValidConnection() ...
[08:06:59.795] | : . ' cluster node index: 2
[08:06:59.796] | : . assertValidConnection() ... done
[08:06:59.806] | : . socketSelect(list(<connection #5 (id=730)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.806] | : resolved() for MultisessionFuture (‘future_mapply-2’) ... done
[08:06:59.794] | : MultisessionFuture:
[08:06:59.794] | : Label: ‘future_mapply-2’
[08:06:59.794] | : Expression:
[08:06:59.794] | : {
[08:06:59.794] | :     "# future.apply:::future_xapply(): preserve future option"
[08:06:59.794] | :     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:06:59.794] | :     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:06:59.794] | :         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:06:59.794] | :         on.exit(options(oopts), add = TRUE)
[08:06:59.794] | :     }
[08:06:59.794] | :     {
[08:06:59.794] | :         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[08:06:59.794] | :             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[08:06:59.794] | :         do.call(mapply, args = args)
[08:06:59.794] | :     }
[08:06:59.794] | : }
[08:06:59.794] | : Globals: 5 objects totaling 6.51 KiB (function ‘...future.FUN’ of 1.04 KiB, list ‘...future.elements_ii’ of 71 bytes, NULL ‘MoreArgs’ of 27 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:06:59.794] | : Packages: <none>
[08:06:59.794] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:06:59.794] | : Capture standard output: FALSE
[08:06:59.794] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:06:59.794] | : Immediate condition classes: ‘immediateCondition’
[08:06:59.794] | : Lazy evaluation: FALSE
[08:06:59.794] | : Local evaluation: TRUE
[08:06:59.794] | : Asynchronous evaluation: TRUE
[08:06:59.794] | : Early signaling: FALSE
[08:06:59.794] | : Environment: R_GlobalEnv
[08:06:59.794] | : State: ‘running’
[08:06:59.794] | : Resolved: FALSE
[08:06:59.794] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-26
[08:06:59.794] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:06:59.794] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:06:59.794] | : Value: <not collected>
[08:06:59.794] | : Conditions captured: <none>
[08:06:59.807] | : Chunk #2 of 2 ... DONE
[08:06:59.807] | : Launching 2 futures (chunks) ... DONE
[08:06:59.807] | : Resolving 2 futures (chunks) ...
[08:06:59.807] | : value() for list ...
[08:06:59.807] | : . recursive: 0
[08:06:59.807] | : . reduce: FALSE
[08:06:59.807] | : . length: 2

[08:06:59.807] | : . Number of remaining objects: 2
[08:06:59.808] | : . checking value #1:
[08:06:59.808] | : . 'obj' is MultisessionFuture
[08:06:59.808] | : . resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:06:59.808] | : . ' Cluster node socket connection: index=4, id=729
[08:06:59.808] | : . ' assertValidConnection() ...
[08:06:59.808] | : . ' , cluster node index: 1
[08:06:59.809] | : . ' assertValidConnection() ... done
[08:06:59.819] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.819] | : . resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:06:59.819] | : . checking value #2:
[08:06:59.819] | : . 'obj' is MultisessionFuture
[08:06:59.819] | : . resolved() for MultisessionFuture (‘future_mapply-2’) ...
[08:06:59.820] | : . ' Cluster node socket connection: index=5, id=730
[08:06:59.820] | : . ' assertValidConnection() ...
[08:06:59.820] | : . ' , cluster node index: 2
[08:06:59.820] | : . ' assertValidConnection() ... done
[08:06:59.830] | : . ' socketSelect(list(<connection #5 (id=730)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.831] | : . resolved() for MultisessionFuture (‘future_mapply-2’) ... done
[08:06:59.841] | : . Number of remaining objects: 2
[08:06:59.841] | : . checking value #1:
[08:06:59.841] | : . 'obj' is MultisessionFuture
[08:06:59.841] | : . resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:06:59.842] | : . ' Cluster node socket connection: index=4, id=729
[08:06:59.842] | : . ' assertValidConnection() ...
[08:06:59.842] | : . ' , cluster node index: 1
[08:06:59.842] | : . ' assertValidConnection() ... done
[08:06:59.852] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.853] | : . resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:06:59.853] | : . checking value #2:
[08:06:59.853] | : . 'obj' is MultisessionFuture
[08:06:59.853] | : . resolved() for MultisessionFuture (‘future_mapply-2’) ...
[08:06:59.853] | : . ' Cluster node socket connection: index=5, id=730
[08:06:59.853] | : . ' assertValidConnection() ...
[08:06:59.854] | : . ' , cluster node index: 2
[08:06:59.854] | : . ' assertValidConnection() ... done
[08:06:59.854] | : . ' receiveMessageFromWorker() for ClusterFuture ...
[08:06:59.854] | : . ' , cluster node index: 2
[08:06:59.854] | : . ' , [1] TRUE
[08:06:59.854] | : . ' , received data:
[08:06:59.855] | : . ' , List of 5
[08:06:59.855] | : . ' ,  $ type   : chr "VALUE"
[08:06:59.855] | : . ' ,  $ value  :List of 16
[08:06:59.855] | : . ' ,   ..$ value              :List of 1
[08:06:59.855] | : . ' ,   .. ..$ :List of 2
[08:06:59.855] | : . ' ,   .. .. ..$ x: int 0
[08:06:59.855] | : . ' ,   .. .. ..$ y: int 1
[08:06:59.855] | : . ' ,   ..$ visible            : logi TRUE
[08:06:59.855] | : . ' ,   ..$ stdout             : NULL
[08:06:59.855] | : . ' ,   ..$ conditions         : list()
[08:06:59.855] | : . ' ,   ..$ rng                : logi FALSE
[08:06:59.855] | : . ' ,   ..$ seed               : NULL
[08:06:59.855] | : . ' ,   ..$ misuseGlobalEnv    : NULL
[08:06:59.855] | : . ' ,   ..$ misuseConnections  :List of 3
[08:06:59.855] | : . ' ,   .. ..$ added   : NULL
[08:06:59.855] | : . ' ,   .. ..$ removed : NULL
[08:06:59.855] | : . ' ,   .. ..$ replaced: NULL
[08:06:59.855] | : . ' ,   ..$ misuseDevices      : NULL
[08:06:59.855] | : . ' ,   ..$ misuseDefaultDevice: list()
[08:06:59.855] | : . ' ,   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:06:59"
[08:06:59.855] | : . ' ,   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:06:59"
[08:06:59.855] | : . ' ,   ..$ uuid               : chr [1:2] "f4771e5023ec0cad125ea4ef8f863db5" "26"
[08:06:59.855] | : . ' ,   ..$ session_uuid       : chr "cff9dc43f82d54f766a25be23dee84a0"
[08:06:59.855] | : . ' ,   .. ..- attr(*, "source")=List of 5
[08:06:59.855] | : . ' ,   .. .. ..$ host  : Named chr "28bb34de9501"
[08:06:59.855] | : . ' ,   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:06:59.855] | : . ' ,   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:06:59.855] | : . ' ,   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:06:59.855] | : . ' ,   .. .. ..$ pid   : int 65455
[08:06:59.855] | : . ' ,   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:06:57"
[08:06:59.855] | : . ' ,   .. .. ..$ random: int 2147483647
[08:06:59.855] | : . ' ,   ..$ r_info             :List of 4
[08:06:59.855] | : . ' ,   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:06:59.855] | : . ' ,   .. .. ..$ : int [1:3] 4 5 1
[08:06:59.855] | : . ' ,   .. ..$ os           : chr "unix"
[08:06:59.855] | : . ' ,   .. ..$ os_name      : chr "Linux"
[08:06:59.855] | : . ' ,   .. ..$ captures_utf8: logi TRUE
[08:06:59.855] | : . ' ,   ..$ version            : chr "1.8"
[08:06:59.855] | : . ' ,   ..- attr(*, "class")= chr "FutureResult"
[08:06:59.855] | : . ' ,  $ success: logi TRUE
[08:06:59.855] | : . ' ,  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:06:59.855] | : . ' ,   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:06:59.855] | : . ' ,  $ tag    : NULL
[08:06:59.866] | : . ' , Received FutureResult
[08:06:59.866] | : . ' , FutureResult:
[08:06:59.866] | : . ' , value: ‘list’
[08:06:59.866] | : . ' , visible: TRUE
[08:06:59.866] | : . ' , stdout: NULL
[08:06:59.866] | : . ' , conditions: [n = 0] 
[08:06:59.866] | : . ' , RNG used: FALSE
[08:06:59.866] | : . ' , duration: 0.002975464 secs (started 2025-06-17 08:06:59.834049)
[08:06:59.866] | : . ' , version: 1.8
[08:06:59.867] | : . ' , FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ...
[08:06:59.867] | : . ' , ; Removed future from position #2
[08:06:59.867] | : . ' , ; Number of registered futures: 1
[08:06:59.867] | : . ' , FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ... done
[08:06:59.867] | : . ' , Erased future from future backend
[08:06:59.868] | : . ' , result() for ClusterFuture ...
[08:06:59.868] | : . ' , ; result already collected: FutureResult
[08:06:59.868] | : . ' , result() for ClusterFuture ... done
[08:06:59.868] | : . ' , signalConditions() ...
[08:06:59.868] | : . ' , ; include = ‘immediateCondition’
[08:06:59.868] | : . ' , ; exclude = 
[08:06:59.868] | : . ' , ; resignal = FALSE
[08:06:59.868] | : . ' , ; Number of conditions: 0
[08:06:59.868] | : . ' , ;  int 0
[08:06:59.869] | : . ' , signalConditions() ... done
[08:06:59.869] | : . ' receiveMessageFromWorker() for ClusterFuture ... done
[08:06:59.869] | : . ' receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:06:59.869] | : . resolved() for MultisessionFuture (‘future_mapply-2’) ... done
[08:06:59.869] | : . assertFutureResult() ...
[08:06:59.869] | : . ' Future uuid: f4771e5023ec0cad125ea4ef8f863db5[08:06:59.869] | : . ' Future uuid: 26
[08:06:59.869] | : . ' identical; success
[08:06:59.869] | : . assertFutureResult() ... done
[08:06:59.870] | : . MultisessionFuture #2
[08:06:59.870] | : . signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:06:59.870] | : . ' nx: 2
[08:06:59.870] | : . ' relay: TRUE
[08:06:59.870] | : . ' stdout: TRUE
[08:06:59.870] | : . ' signal: TRUE
[08:06:59.870] | : . ' resignal: FALSE
[08:06:59.870] | : . ' force: TRUE
[08:06:59.870] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:59.870] | : . ' queued futures: [n=2] FALSE, FALSE
[08:06:59.871] | : . ' until=1
[08:06:59.871] | : . ' relaying element #1
[08:06:59.871] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:59.871] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:59.871] | : . signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:06:59.871] | : . value(<MultisessionFuture>, ...) ...
[08:06:59.871] | : . value(<MultisessionFuture>, ...) ... done
[08:06:59.871] | : . value() for MultisessionFuture (‘future_mapply-2’) ...
[08:06:59.871] | : . ' result() for ClusterFuture ...
[08:06:59.871] | : . ' , result already collected: FutureResult
[08:06:59.872] | : . ' result() for ClusterFuture ... done
[08:06:59.872] | : . ' result() for ClusterFuture ...
[08:06:59.872] | : . ' , result already collected: FutureResult
[08:06:59.872] | : . ' result() for ClusterFuture ... done
[08:06:59.872] | : . ' signalConditions() ...
[08:06:59.872] | : . ' , include = ‘immediateCondition’
[08:06:59.872] | : . ' , exclude = 
[08:06:59.872] | : . ' , resignal = FALSE
[08:06:59.872] | : . ' , Number of conditions: 0
[08:06:59.873] | : . ' ,  int 0
[08:06:59.873] | : . ' signalConditions() ... done
[08:06:59.873] | : . ' check for misuse ...
[08:06:59.873] | : . ' check for misuse ... done
[08:06:59.873] | : . value() for MultisessionFuture (‘future_mapply-2’) ... done
[08:06:59.873] | : . value: <list>
[08:06:59.873] | : . signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:06:59.874] | : . ' nx: 2
[08:06:59.874] | : . ' relay: TRUE
[08:06:59.874] | : . ' stdout: TRUE
[08:06:59.874] | : . ' signal: TRUE
[08:06:59.874] | : . ' resignal: FALSE
[08:06:59.874] | : . ' force: TRUE
[08:06:59.874] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:59.874] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:59.874] | : . ' until=1
[08:06:59.874] | : . ' relaying element #1
[08:06:59.875] | : . ' relayed: [n=2] FALSE, FALSE
[08:06:59.875] | : . ' queued futures: [n=2] FALSE, TRUE
[08:06:59.875] | : . signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:06:59.875] | : . resolve() for MultisessionFuture ...
[08:06:59.875] | : . resolve() for MultisessionFuture ... done
[08:06:59.875] | : . length: 1 (resolved future 2)
[08:06:59.875] | : value() for list ... done
[08:06:59.885] | : Number of remaining objects: 1
[08:06:59.886] | : checking value #1:
[08:06:59.886] | : 'obj' is MultisessionFuture
[08:06:59.886] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:06:59.886] | : . Cluster node socket connection: index=4, id=729
[08:06:59.886] | : . assertValidConnection() ...
[08:06:59.886] | : . ' cluster node index: 1
[08:06:59.887] | : . assertValidConnection() ... done
[08:06:59.897] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.897] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:06:59.907] | : Number of remaining objects: 1
[08:06:59.907] | : checking value #1:
[08:06:59.908] | : 'obj' is MultisessionFuture
[08:06:59.908] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:06:59.908] | : . Cluster node socket connection: index=4, id=729
[08:06:59.908] | : . assertValidConnection() ...
[08:06:59.908] | : . ' cluster node index: 1
[08:06:59.909] | : . assertValidConnection() ... done
[08:06:59.919] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.919] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:06:59.929] | : Number of remaining objects: 1
[08:06:59.929] | : checking value #1:
[08:06:59.929] | : 'obj' is MultisessionFuture
[08:06:59.930] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:06:59.930] | : . Cluster node socket connection: index=4, id=729
[08:06:59.930] | : . assertValidConnection() ...
[08:06:59.930] | : . ' cluster node index: 1
[08:06:59.931] | : . assertValidConnection() ... done
[08:06:59.941] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.941] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:06:59.951] | : Number of remaining objects: 1
[08:06:59.951] | : checking value #1:
[08:06:59.951] | : 'obj' is MultisessionFuture
[08:06:59.952] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:06:59.952] | : . Cluster node socket connection: index=4, id=729
[08:06:59.952] | : . assertValidConnection() ...
[08:06:59.952] | : . ' cluster node index: 1
[08:06:59.953] | : . assertValidConnection() ... done
[08:06:59.963] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.963] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:06:59.973] | : Number of remaining objects: 1
[08:06:59.973] | : checking value #1:
[08:06:59.973] | : 'obj' is MultisessionFuture
[08:06:59.974] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:06:59.974] | : . Cluster node socket connection: index=4, id=729
[08:06:59.974] | : . assertValidConnection() ...
[08:06:59.974] | : . ' cluster node index: 1
[08:06:59.975] | : . assertValidConnection() ... done
[08:06:59.985] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:06:59.985] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:06:59.995] | : Number of remaining objects: 1
[08:06:59.995] | : checking value #1:
[08:06:59.995] | : 'obj' is MultisessionFuture
[08:06:59.995] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:06:59.996] | : . Cluster node socket connection: index=4, id=729
[08:06:59.996] | : . assertValidConnection() ...
[08:06:59.996] | : . ' cluster node index: 1
[08:06:59.996] | : . assertValidConnection() ... done
[08:07:00.007] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.007] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.017] | : Number of remaining objects: 1
[08:07:00.017] | : checking value #1:
[08:07:00.017] | : 'obj' is MultisessionFuture
[08:07:00.017] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.018] | : . Cluster node socket connection: index=4, id=729
[08:07:00.018] | : . assertValidConnection() ...
[08:07:00.018] | : . ' cluster node index: 1
[08:07:00.018] | : . assertValidConnection() ... done
[08:07:00.029] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.029] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.039] | : Number of remaining objects: 1
[08:07:00.039] | : checking value #1:
[08:07:00.039] | : 'obj' is MultisessionFuture
[08:07:00.039] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.040] | : . Cluster node socket connection: index=4, id=729
[08:07:00.040] | : . assertValidConnection() ...
[08:07:00.040] | : . ' cluster node index: 1
[08:07:00.040] | : . assertValidConnection() ... done
[08:07:00.051] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.051] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.061] | : Number of remaining objects: 1
[08:07:00.061] | : checking value #1:
[08:07:00.061] | : 'obj' is MultisessionFuture
[08:07:00.061] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.062] | : . Cluster node socket connection: index=4, id=729
[08:07:00.062] | : . assertValidConnection() ...
[08:07:00.062] | : . ' cluster node index: 1
[08:07:00.062] | : . assertValidConnection() ... done
[08:07:00.073] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.073] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.083] | : Number of remaining objects: 1
[08:07:00.083] | : checking value #1:
[08:07:00.083] | : 'obj' is MultisessionFuture
[08:07:00.083] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.084] | : . Cluster node socket connection: index=4, id=729
[08:07:00.084] | : . assertValidConnection() ...
[08:07:00.084] | : . ' cluster node index: 1
[08:07:00.084] | : . assertValidConnection() ... done
[08:07:00.094] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.095] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.105] | : Number of remaining objects: 1
[08:07:00.105] | : checking value #1:
[08:07:00.105] | : 'obj' is MultisessionFuture
[08:07:00.105] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.105] | : . Cluster node socket connection: index=4, id=729
[08:07:00.106] | : . assertValidConnection() ...
[08:07:00.106] | : . ' cluster node index: 1
[08:07:00.106] | : . assertValidConnection() ... done
[08:07:00.116] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.116] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.127] | : Number of remaining objects: 1
[08:07:00.127] | : checking value #1:
[08:07:00.127] | : 'obj' is MultisessionFuture
[08:07:00.127] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.127] | : . Cluster node socket connection: index=4, id=729
[08:07:00.127] | : . assertValidConnection() ...
[08:07:00.128] | : . ' cluster node index: 1
[08:07:00.128] | : . assertValidConnection() ... done
[08:07:00.138] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.138] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.148] | : Number of remaining objects: 1
[08:07:00.148] | : checking value #1:
[08:07:00.149] | : 'obj' is MultisessionFuture
[08:07:00.149] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.149] | : . Cluster node socket connection: index=4, id=729
[08:07:00.149] | : . assertValidConnection() ...
[08:07:00.149] | : . ' cluster node index: 1
[08:07:00.150] | : . assertValidConnection() ... done
[08:07:00.160] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.160] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.170] | : Number of remaining objects: 1
[08:07:00.170] | : checking value #1:
[08:07:00.170] | : 'obj' is MultisessionFuture
[08:07:00.171] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.171] | : . Cluster node socket connection: index=4, id=729
[08:07:00.171] | : . assertValidConnection() ...
[08:07:00.171] | : . ' cluster node index: 1
[08:07:00.171] | : . assertValidConnection() ... done
[08:07:00.182] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.182] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.192] | : Number of remaining objects: 1
[08:07:00.192] | : checking value #1:
[08:07:00.192] | : 'obj' is MultisessionFuture
[08:07:00.192] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.193] | : . Cluster node socket connection: index=4, id=729
[08:07:00.193] | : . assertValidConnection() ...
[08:07:00.193] | : . ' cluster node index: 1
[08:07:00.193] | : . assertValidConnection() ... done
[08:07:00.203] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.204] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.214] | : Number of remaining objects: 1
[08:07:00.214] | : checking value #1:
[08:07:00.214] | : 'obj' is MultisessionFuture
[08:07:00.214] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.215] | : . Cluster node socket connection: index=4, id=729
[08:07:00.215] | : . assertValidConnection() ...
[08:07:00.215] | : . ' cluster node index: 1
[08:07:00.215] | : . assertValidConnection() ... done
[08:07:00.215] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:07:00.215] | : . ' cluster node index: 1
[08:07:00.216] | : . ' [1] TRUE
[08:07:00.216] | : . ' received data:
[08:07:00.216] | : . ' List of 5
[08:07:00.216] | : . '  $ type   : chr "VALUE"
[08:07:00.216] | : . '  $ value  :List of 16
[08:07:00.216] | : . '   ..$ value              :List of 1
[08:07:00.216] | : . '   .. ..$ :List of 2
[08:07:00.216] | : . '   .. .. ..$ x: int 1
[08:07:00.216] | : . '   .. .. ..$ y: int 0
[08:07:00.216] | : . '   ..$ visible            : logi TRUE
[08:07:00.216] | : . '   ..$ stdout             : NULL
[08:07:00.216] | : . '   ..$ conditions         : list()
[08:07:00.216] | : . '   ..$ rng                : logi FALSE
[08:07:00.216] | : . '   ..$ seed               : NULL
[08:07:00.216] | : . '   ..$ misuseGlobalEnv    : NULL
[08:07:00.216] | : . '   ..$ misuseConnections  :List of 3
[08:07:00.216] | : . '   .. ..$ added   : NULL
[08:07:00.216] | : . '   .. ..$ removed : NULL
[08:07:00.216] | : . '   .. ..$ replaced: NULL
[08:07:00.216] | : . '   ..$ misuseDevices      : NULL
[08:07:00.216] | : . '   ..$ misuseDefaultDevice: list()
[08:07:00.216] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:06:59"
[08:07:00.216] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:00"
[08:07:00.216] | : . '   ..$ uuid               : chr [1:2] "f4771e5023ec0cad125ea4ef8f863db5" "25"
[08:07:00.216] | : . '   ..$ session_uuid       : chr "59b306a9e84480e65c32ece688378702"
[08:07:00.216] | : . '   .. ..- attr(*, "source")=List of 5
[08:07:00.216] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:07:00.216] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:00.216] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:07:00.216] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:00.216] | : . '   .. .. ..$ pid   : int 65456
[08:07:00.216] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:06:57"
[08:07:00.216] | : . '   .. .. ..$ random: int 2147483647
[08:07:00.216] | : . '   ..$ r_info             :List of 4
[08:07:00.216] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:00.216] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:07:00.216] | : . '   .. ..$ os           : chr "unix"
[08:07:00.216] | : . '   .. ..$ os_name      : chr "Linux"
[08:07:00.216] | : . '   .. ..$ captures_utf8: logi TRUE
[08:07:00.216] | : . '   ..$ version            : chr "1.8"
[08:07:00.216] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:07:00.216] | : . '  $ success: logi TRUE
[08:07:00.216] | : . '  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.505 0 0
[08:07:00.216] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:00.216] | : . '  $ tag    : NULL
[08:07:00.230] | : . ' Received FutureResult
[08:07:00.230] | : . ' FutureResult:
[08:07:00.230] | : . ' value: ‘list’
[08:07:00.230] | : . ' visible: TRUE
[08:07:00.230] | : . ' stdout: NULL
[08:07:00.230] | : . ' conditions: [n = 0] 
[08:07:00.230] | : . ' RNG used: FALSE
[08:07:00.230] | : . ' duration: 0.5039959 secs (started 2025-06-17 08:06:59.707124)
[08:07:00.230] | : . ' version: 1.8
[08:07:00.230] | : . ' FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ...
[08:07:00.230] | : . ' , Removed future from position #1
[08:07:00.231] | : . ' , Number of registered futures: 0
[08:07:00.231] | : . ' FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ... done
[08:07:00.231] | : . ' Erased future from future backend
[08:07:00.231] | : . ' result() for ClusterFuture ...
[08:07:00.231] | : . ' , result already collected: FutureResult
[08:07:00.231] | : . ' result() for ClusterFuture ... done
[08:07:00.231] | : . ' signalConditions() ...
[08:07:00.231] | : . ' , include = ‘immediateCondition’
[08:07:00.231] | : . ' , exclude = 
[08:07:00.231] | : . ' , resignal = FALSE
[08:07:00.232] | : . ' , Number of conditions: 0
[08:07:00.232] | : . ' ,  int 0
[08:07:00.232] | : . ' signalConditions() ... done
[08:07:00.232] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:07:00.232] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:07:00.232] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.232] | : assertFutureResult() ...
[08:07:00.233] | : . Future uuid: f4771e5023ec0cad125ea4ef8f863db5[08:07:00.233] | : . Future uuid: 25
[08:07:00.233] | : . identical; success
[08:07:00.233] | : assertFutureResult() ... done
[08:07:00.233] | : MultisessionFuture #1
[08:07:00.233] | : signalConditionsASAP(MultisessionFuture, pos=1) ...
[08:07:00.233] | : . nx: 2
[08:07:00.233] | : . relay: TRUE
[08:07:00.233] | : . stdout: TRUE
[08:07:00.233] | : . signal: TRUE
[08:07:00.233] | : . resignal: FALSE
[08:07:00.233] | : . force: TRUE
[08:07:00.234] | : . relayed: [n=2] FALSE, FALSE
[08:07:00.234] | : . queued futures: [n=2] FALSE, TRUE
[08:07:00.234] | : . until=1
[08:07:00.234] | : . relaying element #1
[08:07:00.234] | : . value() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.234] | : . ' result() for ClusterFuture ...
[08:07:00.234] | : . ' , result already collected: FutureResult
[08:07:00.234] | : . ' result() for ClusterFuture ... done
[08:07:00.234] | : . ' result() for ClusterFuture ...
[08:07:00.234] | : . ' , result already collected: FutureResult
[08:07:00.235] | : . ' result() for ClusterFuture ... done
[08:07:00.235] | : . ' signalConditions() ...
[08:07:00.235] | : . ' , include = ‘immediateCondition’
[08:07:00.235] | : . ' , exclude = 
[08:07:00.235] | : . ' , resignal = FALSE
[08:07:00.235] | : . ' , Number of conditions: 0
[08:07:00.235] | : . ' ,  int 0
[08:07:00.236] | : . ' signalConditions() ... done
[08:07:00.236] | : . ' relay stdout ...
[08:07:00.236] | : . ' relay stdout ... done
[08:07:00.236] | : . ' check for misuse ...
[08:07:00.236] | : . ' check for misuse ... done
[08:07:00.236] | : . value() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.236] | : . result() for ClusterFuture ...
[08:07:00.236] | : . ' result already collected: FutureResult
[08:07:00.236] | : . result() for ClusterFuture ... done
[08:07:00.236] | : . signalConditions() ...
[08:07:00.237] | : . ' include = ‘immediateCondition’
[08:07:00.237] | : . ' exclude = 
[08:07:00.237] | : . ' resignal = FALSE
[08:07:00.237] | : . ' Number of conditions: 0
[08:07:00.237] | : . '  int 0
[08:07:00.237] | : . signalConditions() ... done
[08:07:00.237] | : . result() for ClusterFuture ...
[08:07:00.238] | : . ' result already collected: FutureResult
[08:07:00.238] | : . result() for ClusterFuture ... done
[08:07:00.238] | : . signalConditions() ...
[08:07:00.238] | : . ' include = ‘condition’
[08:07:00.238] | : . ' exclude = ‘error’, ‘immediateCondition’
[08:07:00.238] | : . ' resignal = TRUE
[08:07:00.238] | : . ' Number of conditions: 0
[08:07:00.238] | : . '  int 0
[08:07:00.239] | : . signalConditions() ... done
[08:07:00.239] | : . relayed: [n=2] TRUE, FALSE
[08:07:00.239] | : . queued futures: [n=2] TRUE, TRUE
[08:07:00.239] | : signalConditionsASAP(MultisessionFuture, pos=1) ... done
[08:07:00.239] | : value(<MultisessionFuture>, ...) ...
[08:07:00.239] | : value(<MultisessionFuture>, ...) ... done
[08:07:00.239] | : value() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.239] | : . result() for ClusterFuture ...
[08:07:00.239] | : . ' result already collected: FutureResult
[08:07:00.239] | : . result() for ClusterFuture ... done
[08:07:00.240] | : . result() for ClusterFuture ...
[08:07:00.240] | : . ' result already collected: FutureResult
[08:07:00.240] | : . result() for ClusterFuture ... done
[08:07:00.240] | : . signalConditions() ...
[08:07:00.240] | : . ' include = ‘immediateCondition’
[08:07:00.240] | : . ' exclude = 
[08:07:00.240] | : . ' resignal = FALSE
[08:07:00.240] | : . ' Number of conditions: 0
[08:07:00.240] | : . '  int 0
[08:07:00.241] | : . signalConditions() ... done
[08:07:00.241] | : . check for misuse ...
[08:07:00.241] | : . check for misuse ... done
[08:07:00.241] | : value() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.241] | : value: <list>
[08:07:00.241] | : signalConditionsASAP(MultisessionFuture, pos=1) ...
[08:07:00.241] | : . nx: 2
[08:07:00.241] | : . relay: TRUE
[08:07:00.241] | : . stdout: TRUE
[08:07:00.242] | : . signal: TRUE
[08:07:00.242] | : . resignal: FALSE
[08:07:00.242] | : . force: TRUE
[08:07:00.242] | : . relayed: [n=2] TRUE, FALSE
[08:07:00.242] | : . queued futures: [n=2] TRUE, TRUE
[08:07:00.242] | : . until=2
[08:07:00.242] | : . relaying element #2
[08:07:00.242] | : . value() for MultisessionFuture (‘future_mapply-2’) ...
[08:07:00.242] | : . ' result() for ClusterFuture ...
[08:07:00.242] | : . ' , result already collected: FutureResult
[08:07:00.243] | : . ' result() for ClusterFuture ... done
[08:07:00.243] | : . ' result() for ClusterFuture ...
[08:07:00.243] | : . ' , result already collected: FutureResult
[08:07:00.243] | : . ' result() for ClusterFuture ... done
[08:07:00.243] | : . ' signalConditions() ...
[08:07:00.243] | : . ' , include = ‘immediateCondition’
[08:07:00.243] | : . ' , exclude = 
[08:07:00.243] | : . ' , resignal = FALSE
[08:07:00.243] | : . ' , Number of conditions: 0
[08:07:00.243] | : . ' ,  int 0
[08:07:00.244] | : . ' signalConditions() ... done
[08:07:00.244] | : . ' relay stdout ...
[08:07:00.244] | : . ' relay stdout ... done
[08:07:00.244] | : . ' check for misuse ...
[08:07:00.244] | : . ' check for misuse ... done
[08:07:00.244] | : . value() for MultisessionFuture (‘future_mapply-2’) ... done
[08:07:00.244] | : . result() for ClusterFuture ...
[08:07:00.245] | : . ' result already collected: FutureResult
[08:07:00.245] | : . result() for ClusterFuture ... done
[08:07:00.245] | : . signalConditions() ...
[08:07:00.245] | : . ' include = ‘immediateCondition’
[08:07:00.245] | : . ' exclude = 
[08:07:00.245] | : . ' resignal = FALSE
[08:07:00.245] | : . ' Number of conditions: 0
[08:07:00.245] | : . '  int 0
[08:07:00.246] | : . signalConditions() ... done
[08:07:00.246] | : . result() for ClusterFuture ...
[08:07:00.246] | : . ' result already collected: FutureResult
[08:07:00.246] | : . result() for ClusterFuture ... done
[08:07:00.246] | : . signalConditions() ...
[08:07:00.246] | : . ' include = ‘condition’
[08:07:00.246] | : . ' exclude = ‘error’, ‘immediateCondition’
[08:07:00.246] | : . ' resignal = TRUE
[08:07:00.246] | : . ' Number of conditions: 0
[08:07:00.246] | : . '  int 0
[08:07:00.247] | : . signalConditions() ... done
[08:07:00.247] | : . relayed: [n=2] TRUE, TRUE
[08:07:00.247] | : . queued futures: [n=2] TRUE, TRUE
[08:07:00.247] | : signalConditionsASAP(MultisessionFuture, pos=1) ... done
[08:07:00.247] | : resolve() for MultisessionFuture ...
[08:07:00.247] | : resolve() for MultisessionFuture ... done
[08:07:00.248] | : length: 0 (resolved future 1)
[08:07:00.248] | future_mapply() -> future_xapply() ... done
[08:07:00.248] | Relaying remaining futures ...
[08:07:00.248] | : signalConditionsASAP(NULL, pos=0) ...
[08:07:00.248] | : . nx: 2
[08:07:00.248] | : . relay: TRUE
[08:07:00.248] | : . stdout: TRUE
[08:07:00.248] | : . signal: TRUE
[08:07:00.248] | : . resignal: FALSE
[08:07:00.248] | : . force: TRUE
[08:07:00.248] | : . relayed: [n=2] TRUE, TRUE
[08:07:00.249] | : . queued futures: [n=2] TRUE, TRUE
 - flush all
[08:07:00.249] | : . relayed: [n=2] TRUE, TRUE
[08:07:00.249] | : . queued futures: [n=2] TRUE, TRUE
[08:07:00.249] | : signalConditionsASAP(NULL, pos=0) ... done
[08:07:00.249] | Relaying remaining futures ... done
[08:07:00.249] future_mapply() ... done
[08:07:00.249]  - Number of value chunks collected: 2
[08:07:00.249] Resolving 2 futures (chunks) ... DONE
[08:07:00.249] Reducing values from 2 chunks ...
[08:07:00.249]  - Number of values collected after concatenation: 2
[08:07:00.249]  - Number of values expected: 2
[08:07:00.250] Reducing values from 2 chunks ... DONE


* future_mapply(x, ..., future.stdout = FALSE) ... DONE
* future_mapply(x, ..., future.stdout = TRUE) ...
[08:07:00.250] future_mapply() ...
[08:07:00.250] | future_mapply() -> future_xapply() ...
[08:07:00.250] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:00.251] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:00.251] | : Number of chunks: 2
[08:07:00.251] | : getGlobalsAndPackagesXApply() ...
[08:07:00.251] | : . future.globals: TRUE
[08:07:00.251] | : . getGlobalsAndPackages() ...
[08:07:00.251] | : . ' Searching for globals ...
[08:07:00.259] | : . ' , globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[08:07:00.260] | : . ' Searching for globals ... done
[08:07:00.260] | : . ' Resolving globals: FALSE
[08:07:00.260] | : . ' Search for packages associated with the globals ...
[08:07:00.260] | : . ' , Packages associated with globals: [1] ‘base’
[08:07:00.260] | : . ' , Packages: [1] ‘base’
[08:07:00.260] | : . ' Search for packages associated with the globals ... done
[08:07:00.261] | : . ' The total size of the 1 globals is 1.04 KiB (1066 bytes)
[08:07:00.261] | : . ' The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[08:07:00.261] | : . ' Packages after dropping 'base': [0] 
[08:07:00.261] | : . ' globals: [1] ‘FUN’
[08:07:00.261] | : . ' packages: [0] 
[08:07:00.261] | : . getGlobalsAndPackages() ... done
[08:07:00.261] | : . globals found/used: [n=1] ‘FUN’
[08:07:00.262] | : . needed namespaces: [n=0] 
[08:07:00.262] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[08:07:00.262] | : . List of 2
[08:07:00.262] | : .  $ ...future.FUN:function (x, y)  
[08:07:00.262] | : .  $ MoreArgs     : NULL
[08:07:00.262] | : .  - attr(*, "where")=List of 2
[08:07:00.262] | : .   ..$ ...future.FUN:<environment: 0x55eee1d8ae28> 
[08:07:00.262] | : .   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[08:07:00.262] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:00.262] | : .  - attr(*, "resolved")= logi FALSE
[08:07:00.262] | : .  - attr(*, "total_size")= num NA
[08:07:00.265] | : . Packages to be attached in all futures: [n=0] 
[08:07:00.265] | : getGlobalsAndPackagesXApply() ... done
[08:07:00.265] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:07:00.265] | : List of 5
[08:07:00.265] | :  $ ...future.FUN            :function (x, y)  
[08:07:00.265] | :  $ MoreArgs                 : NULL
[08:07:00.265] | :  $ ...future.elements_ii    : NULL
[08:07:00.265] | :  $ ...future.seeds_ii       : NULL
[08:07:00.265] | :  $ ...future.globals.maxSize: NULL
[08:07:00.265] | :  - attr(*, "where")=List of 5
[08:07:00.265] | :   ..$ ...future.FUN            :<environment: 0x55eee1d8ae28> 
[08:07:00.265] | :   ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[08:07:00.265] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:07:00.265] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:07:00.265] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:07:00.265] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:00.265] | :  - attr(*, "resolved")= logi FALSE
[08:07:00.265] | :  - attr(*, "total_size")= num NA
[08:07:00.269] | : Number of futures (= number of chunks): 2
[08:07:00.269] | : Launching 2 futures (chunks) ...
[08:07:00.269] | : Chunk #1 of 2 ...
[08:07:00.269] | :  - Finding globals in '...' for chunk #1 ...
[08:07:00.269] | : getGlobalsAndPackages() ...
[08:07:00.269] | : . Searching for globals ...
[08:07:00.270] | : . ' globals found: [0] 
[08:07:00.270] | : . Searching for globals ... done
[08:07:00.270] | : . globals: [0] <none>
[08:07:00.270] | : . packages: [0] <none>
[08:07:00.270] | : getGlobalsAndPackages() ... done
[08:07:00.270] | :    + additional globals found: [n=0] 
[08:07:00.271] | :    + additional namespaces needed: [n=0] 
[08:07:00.271] | :  - Finding globals in '...' for chunk #1 ... DONE
[08:07:00.271] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:07:00.271] | :  - seeds: <none>
[08:07:00.271] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:07:00.271] | : future(..., label = ‘future_mapply-1’) ...
[08:07:00.271] | : . lazy: FALSE
[08:07:00.271] | : . stdout: TRUE
[08:07:00.271] | : . conditions: [n=1] ‘condition’
[08:07:00.271] | : . gc: FALSE
[08:07:00.272] | : . earlySignal: FALSE
[08:07:00.272] | : . getGlobalsAndPackages() ...
[08:07:00.272] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:07:00.272] | : . ' Resolving globals: FALSE
[08:07:00.272] | : . ' Search for packages associated with the globals ...
[08:07:00.272] | : . ' , Packages associated with globals: [0] 
[08:07:00.272] | : . ' , Packages: [0] 
[08:07:00.272] | : . ' Search for packages associated with the globals ... done
[08:07:00.273] | : . ' Packages after dropping 'base': [0] 
[08:07:00.273] | : . ' globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:07:00.273] | : . ' packages: [0] 
[08:07:00.273] | : . getGlobalsAndPackages() ... done
[08:07:00.273] | : . run() for ‘Future’ (‘future_mapply-1’) ...
[08:07:00.273] | : . ' state: ‘created’
[08:07:00.273] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:00.274] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:00.274] | : . ' Using MultisessionFutureBackend ...
[08:07:00.274] | : . ' , Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:07:00.274] | : . ' , Launching futures ...
[08:07:00.274] | : . ' , ; launchFuture() for ClusterFutureBackend ...
[08:07:00.274] | : . ' , ; ` Workers: [n=2]
[08:07:00.274] | : . ' , ; ` Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:00.276] | : . ' , ; ` FutureRegistry: ‘workers-e636a28029c6e30b2bebe5fb0c115fc6’
[08:07:00.276] | : . ' , ; ` requestWorker() ...
[08:07:00.276] | : . ' , ; ` | requestNode() ...
[08:07:00.276] | : . ' , ; ` | : Number of workers: 2
[08:07:00.276] | : . ' , ; ` | : Polling for a free worker ...
[08:07:00.276] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:07:00.277] | : . ' , ; ` | : . ' Listing all futures
[08:07:00.277] | : . ' , ; ` | : . ' Number of registered futures: 0
[08:07:00.277] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:07:00.277] | : . ' , ; ` | : . Total time: 0
[08:07:00.277] | : . ' , ; ` | : Polling for a free worker ... done
[08:07:00.277] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:07:00.277] | : . ' , ; ` | : . Listing all futures
[08:07:00.277] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:00.277] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:07:00.277] | : . ' , ; ` | : avail: [n=2] ‘1’, ‘2’
[08:07:00.278] | : . ' , ; ` | : Index of first available worker: 1
[08:07:00.278] | : . ' , ; ` | : Validate that the worker is functional ...
[08:07:00.334] | : . ' , ; ` | : . Worker is functional
[08:07:00.334] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:07:00.334] | : . ' , ; ` | : . ' Listing all futures
[08:07:00.334] | : . ' , ; ` | : . ' Number of registered futures: 0
[08:07:00.334] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:07:00.334] | : . ' , ; ` | : Validate that the worker is functional ... done
[08:07:00.335] | : . ' , ; ` | requestNode() ... done
[08:07:00.335] | : . ' , ; ` | cluster node index: 1
[08:07:00.335] | : . ' , ; ` requestWorker() ... done
[08:07:00.335] | : . ' , ; ` eraseGlobalEnvironment() ...
[08:07:00.335] | : . ' , ; ` eraseGlobalEnvironment() ... done
[08:07:00.335] | : . ' , ; ` launchFuture() ...
[08:07:00.335] | : . ' , ; ` | cluster node index: 1
[08:07:00.336] | : . ' , ; ` | getFutureData() ...
[08:07:00.336] | : . ' , ; ` | : getFutureCore() ...
[08:07:00.336] | : . ' , ; ` | : . Packages needed by the future expression (n = 0): <none>
[08:07:00.336] | : . ' , ; ` | : getFutureCore() ... done
[08:07:00.336] | : . ' , ; ` | : getFutureCapture() ...
[08:07:00.336] | : . ' , ; ` | : getFutureCapture() ... done
[08:07:00.336] | : . ' , ; ` | : getFutureContext() ...
[08:07:00.336] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:00.336] | : . ' , ; ` | : . ' Getting stack without first backend: [n=0] 
[08:07:00.337] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:00.337] | : . ' , ; ` | : . Packages needed by future backend (n = 0): <none>
[08:07:00.337] | : . ' , ; ` | : getFutureContext() ... done
[08:07:00.337] | : . ' , ; ` | getFutureData() ... done
[08:07:00.337] | : . ' , ; ` | FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ...
[08:07:00.337] | : . ' , ; ` | : Appended future to position #1
[08:07:00.337] | : . ' , ; ` | : Number of registered futures: 1
[08:07:00.338] | : . ' , ; ` | FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ... done
[08:07:00.338] | : . ' , ; ` launchFuture() ... done
[08:07:00.338] | : . ' , ; ` MultisessionFuture started
[08:07:00.338] | : . ' , ; launchFuture() for ClusterFutureBackend ... done
[08:07:00.338] | : . ' , Launching futures ... done
[08:07:00.338] | : . ' , Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:00.338] | : . ' Using MultisessionFutureBackend ... done
[08:07:00.338] | : . run() for ‘Future’ (‘future_mapply-1’) ... done
[08:07:00.338] | : future(..., label = ‘future_mapply-1’) ... done
[08:07:00.339] | : Created future:
[08:07:00.339] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.340] | : . Cluster node socket connection: index=4, id=729
[08:07:00.340] | : . assertValidConnection() ...
[08:07:00.340] | : . ' cluster node index: 1
[08:07:00.340] | : . assertValidConnection() ... done
[08:07:00.351] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.351] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.339] | : MultisessionFuture:
[08:07:00.339] | : Label: ‘future_mapply-1’
[08:07:00.339] | : Expression:
[08:07:00.339] | : {
[08:07:00.339] | :     "# future.apply:::future_xapply(): preserve future option"
[08:07:00.339] | :     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:07:00.339] | :     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:07:00.339] | :         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:07:00.339] | :         on.exit(options(oopts), add = TRUE)
[08:07:00.339] | :     }
[08:07:00.339] | :     {
[08:07:00.339] | :         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[08:07:00.339] | :             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[08:07:00.339] | :         do.call(mapply, args = args)
[08:07:00.339] | :     }
[08:07:00.339] | : }
[08:07:00.339] | : Globals: 5 objects totaling 6.51 KiB (function ‘...future.FUN’ of 1.04 KiB, list ‘...future.elements_ii’ of 71 bytes, NULL ‘MoreArgs’ of 27 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:07:00.339] | : Packages: <none>
[08:07:00.339] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:07:00.339] | : Capture standard output: TRUE
[08:07:00.339] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:07:00.339] | : Immediate condition classes: ‘immediateCondition’
[08:07:00.339] | : Lazy evaluation: FALSE
[08:07:00.339] | : Local evaluation: TRUE
[08:07:00.339] | : Asynchronous evaluation: TRUE
[08:07:00.339] | : Early signaling: FALSE
[08:07:00.339] | : Environment: R_GlobalEnv
[08:07:00.339] | : State: ‘running’
[08:07:00.339] | : Resolved: FALSE
[08:07:00.339] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-27
[08:07:00.339] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:07:00.339] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:00.339] | : Value: <not collected>
[08:07:00.339] | : Conditions captured: <none>
[08:07:00.351] | : Chunk #1 of 2 ... DONE
[08:07:00.351] | : Chunk #2 of 2 ...
[08:07:00.351] | :  - Finding globals in '...' for chunk #2 ...
[08:07:00.352] | : getGlobalsAndPackages() ...
[08:07:00.352] | : . Searching for globals ...
[08:07:00.352] | : . ' globals found: [0] 
[08:07:00.352] | : . Searching for globals ... done
[08:07:00.353] | : . globals: [0] <none>
[08:07:00.353] | : . packages: [0] <none>
[08:07:00.353] | : getGlobalsAndPackages() ... done
[08:07:00.353] | :    + additional globals found: [n=0] 
[08:07:00.353] | :    + additional namespaces needed: [n=0] 
[08:07:00.353] | :  - Finding globals in '...' for chunk #2 ... DONE
[08:07:00.353] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:07:00.353] | :  - seeds: <none>
[08:07:00.353] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:07:00.353] | : future(..., label = ‘future_mapply-2’) ...
[08:07:00.354] | : . lazy: FALSE
[08:07:00.354] | : . stdout: TRUE
[08:07:00.354] | : . conditions: [n=1] ‘condition’
[08:07:00.354] | : . gc: FALSE
[08:07:00.354] | : . earlySignal: FALSE
[08:07:00.354] | : . getGlobalsAndPackages() ...
[08:07:00.354] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:07:00.354] | : . ' Resolving globals: FALSE
[08:07:00.356] | : . ' Search for packages associated with the globals ...
[08:07:00.357] | : . ' , Packages associated with globals: [0] 
[08:07:00.357] | : . ' , Packages: [0] 
[08:07:00.357] | : . ' Search for packages associated with the globals ... done
[08:07:00.357] | : . ' Packages after dropping 'base': [0] 
[08:07:00.357] | : . ' globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:07:00.357] | : . ' packages: [0] 
[08:07:00.357] | : . getGlobalsAndPackages() ... done
[08:07:00.358] | : . run() for ‘Future’ (‘future_mapply-2’) ...
[08:07:00.358] | : . ' state: ‘created’
[08:07:00.358] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:00.358] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:00.358] | : . ' Using MultisessionFutureBackend ...
[08:07:00.358] | : . ' , Number of futures since start: 9 (9 created, 9 launched, 8 finished)
[08:07:00.358] | : . ' , Launching futures ...
[08:07:00.358] | : . ' , ; launchFuture() for ClusterFutureBackend ...
[08:07:00.359] | : . ' , ; ` Workers: [n=2]
[08:07:00.359] | : . ' , ; ` Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:00.360] | : . ' , ; ` FutureRegistry: ‘workers-e636a28029c6e30b2bebe5fb0c115fc6’
[08:07:00.360] | : . ' , ; ` requestWorker() ...
[08:07:00.360] | : . ' , ; ` | requestNode() ...
[08:07:00.360] | : . ' , ; ` | : Number of workers: 2
[08:07:00.361] | : . ' , ; ` | : Polling for a free worker ...
[08:07:00.361] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:07:00.361] | : . ' , ; ` | : . ' Listing all futures
[08:07:00.361] | : . ' , ; ` | : . ' Number of registered futures: 1
[08:07:00.361] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:07:00.361] | : . ' , ; ` | : . Total time: 0
[08:07:00.361] | : . ' , ; ` | : Polling for a free worker ... done
[08:07:00.361] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:07:00.361] | : . ' , ; ` | : . Listing all futures
[08:07:00.361] | : . ' , ; ` | : . Number of registered futures: 1
[08:07:00.362] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:07:00.362] | : . ' , ; ` | : avail: [n=2] ‘2’
[08:07:00.362] | : . ' , ; ` | : Index of first available worker: 2
[08:07:00.362] | : . ' , ; ` | : Validate that the worker is functional ...
[08:07:00.460] | : . ' , ; ` | : . Worker is functional
[08:07:00.460] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:07:00.460] | : . ' , ; ` | : . ' Listing all futures
[08:07:00.460] | : . ' , ; ` | : . ' Number of registered futures: 1
[08:07:00.460] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:07:00.460] | : . ' , ; ` | : Validate that the worker is functional ... done
[08:07:00.460] | : . ' , ; ` | requestNode() ... done
[08:07:00.461] | : . ' , ; ` | cluster node index: 2
[08:07:00.461] | : . ' , ; ` requestWorker() ... done
[08:07:00.461] | : . ' , ; ` eraseGlobalEnvironment() ...
[08:07:00.461] | : . ' , ; ` eraseGlobalEnvironment() ... done
[08:07:00.461] | : . ' , ; ` launchFuture() ...
[08:07:00.461] | : . ' , ; ` | cluster node index: 2
[08:07:00.462] | : . ' , ; ` | getFutureData() ...
[08:07:00.462] | : . ' , ; ` | : getFutureCore() ...
[08:07:00.462] | : . ' , ; ` | : . Packages needed by the future expression (n = 0): <none>
[08:07:00.462] | : . ' , ; ` | : getFutureCore() ... done
[08:07:00.462] | : . ' , ; ` | : getFutureCapture() ...
[08:07:00.462] | : . ' , ; ` | : getFutureCapture() ... done
[08:07:00.462] | : . ' , ; ` | : getFutureContext() ...
[08:07:00.462] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:00.462] | : . ' , ; ` | : . ' Getting stack without first backend: [n=0] 
[08:07:00.463] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:00.463] | : . ' , ; ` | : . Packages needed by future backend (n = 0): <none>
[08:07:00.463] | : . ' , ; ` | : getFutureContext() ... done
[08:07:00.463] | : . ' , ; ` | getFutureData() ... done
[08:07:00.463] | : . ' , ; ` | FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ...
[08:07:00.463] | : . ' , ; ` | : Appended future to position #2
[08:07:00.463] | : . ' , ; ` | : Number of registered futures: 2
[08:07:00.464] | : . ' , ; ` | FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ... done
[08:07:00.464] | : . ' , ; ` launchFuture() ... done
[08:07:00.464] | : . ' , ; ` MultisessionFuture started
[08:07:00.464] | : . ' , ; launchFuture() for ClusterFutureBackend ... done
[08:07:00.464] | : . ' , Launching futures ... done
[08:07:00.464] | : . ' , Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:00.464] | : . ' Using MultisessionFutureBackend ... done
[08:07:00.464] | : . run() for ‘Future’ (‘future_mapply-2’) ... done
[08:07:00.464] | : future(..., label = ‘future_mapply-2’) ... done
[08:07:00.464] | : Created future:
[08:07:00.465] | : resolved() for MultisessionFuture (‘future_mapply-2’) ...
[08:07:00.466] | : . Cluster node socket connection: index=5, id=730
[08:07:00.466] | : . assertValidConnection() ...
[08:07:00.466] | : . ' cluster node index: 2
[08:07:00.466] | : . assertValidConnection() ... done
[08:07:00.477] | : . socketSelect(list(<connection #5 (id=730)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.477] | : resolved() for MultisessionFuture (‘future_mapply-2’) ... done
[08:07:00.465] | : MultisessionFuture:
[08:07:00.465] | : Label: ‘future_mapply-2’
[08:07:00.465] | : Expression:
[08:07:00.465] | : {
[08:07:00.465] | :     "# future.apply:::future_xapply(): preserve future option"
[08:07:00.465] | :     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:07:00.465] | :     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:07:00.465] | :         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:07:00.465] | :         on.exit(options(oopts), add = TRUE)
[08:07:00.465] | :     }
[08:07:00.465] | :     {
[08:07:00.465] | :         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[08:07:00.465] | :             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[08:07:00.465] | :         do.call(mapply, args = args)
[08:07:00.465] | :     }
[08:07:00.465] | : }
[08:07:00.465] | : Globals: 5 objects totaling 6.51 KiB (function ‘...future.FUN’ of 1.04 KiB, list ‘...future.elements_ii’ of 71 bytes, NULL ‘MoreArgs’ of 27 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:07:00.465] | : Packages: <none>
[08:07:00.465] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:07:00.465] | : Capture standard output: TRUE
[08:07:00.465] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:07:00.465] | : Immediate condition classes: ‘immediateCondition’
[08:07:00.465] | : Lazy evaluation: FALSE
[08:07:00.465] | : Local evaluation: TRUE
[08:07:00.465] | : Asynchronous evaluation: TRUE
[08:07:00.465] | : Early signaling: FALSE
[08:07:00.465] | : Environment: R_GlobalEnv
[08:07:00.465] | : State: ‘running’
[08:07:00.465] | : Resolved: FALSE
[08:07:00.465] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-28
[08:07:00.465] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:07:00.465] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:00.465] | : Value: <not collected>
[08:07:00.465] | : Conditions captured: <none>
[08:07:00.477] | : Chunk #2 of 2 ... DONE
[08:07:00.477] | : Launching 2 futures (chunks) ... DONE
[08:07:00.477] | : Resolving 2 futures (chunks) ...
[08:07:00.477] | : value() for list ...
[08:07:00.478] | : . recursive: 0
[08:07:00.478] | : . reduce: FALSE
[08:07:00.478] | : . length: 2

[08:07:00.478] | : . Number of remaining objects: 2
[08:07:00.478] | : . checking value #1:
[08:07:00.478] | : . 'obj' is MultisessionFuture
[08:07:00.478] | : . resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.479] | : . ' Cluster node socket connection: index=4, id=729
[08:07:00.479] | : . ' assertValidConnection() ...
[08:07:00.479] | : . ' , cluster node index: 1
[08:07:00.479] | : . ' assertValidConnection() ... done
[08:07:00.489] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.489] | : . resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.490] | : . checking value #2:
[08:07:00.490] | : . 'obj' is MultisessionFuture
[08:07:00.490] | : . resolved() for MultisessionFuture (‘future_mapply-2’) ...
[08:07:00.490] | : . ' Cluster node socket connection: index=5, id=730
[08:07:00.490] | : . ' assertValidConnection() ...
[08:07:00.490] | : . ' , cluster node index: 2
[08:07:00.491] | : . ' assertValidConnection() ... done
[08:07:00.501] | : . ' socketSelect(list(<connection #5 (id=730)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.501] | : . resolved() for MultisessionFuture (‘future_mapply-2’) ... done
[08:07:00.511] | : . Number of remaining objects: 2
[08:07:00.511] | : . checking value #1:
[08:07:00.512] | : . 'obj' is MultisessionFuture
[08:07:00.512] | : . resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.512] | : . ' Cluster node socket connection: index=4, id=729
[08:07:00.512] | : . ' assertValidConnection() ...
[08:07:00.512] | : . ' , cluster node index: 1
[08:07:00.513] | : . ' assertValidConnection() ... done
[08:07:00.523] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.523] | : . resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.523] | : . checking value #2:
[08:07:00.523] | : . 'obj' is MultisessionFuture
[08:07:00.523] | : . resolved() for MultisessionFuture (‘future_mapply-2’) ...
[08:07:00.524] | : . ' Cluster node socket connection: index=5, id=730
[08:07:00.524] | : . ' assertValidConnection() ...
[08:07:00.524] | : . ' , cluster node index: 2
[08:07:00.524] | : . ' assertValidConnection() ... done
[08:07:00.524] | : . ' receiveMessageFromWorker() for ClusterFuture ...
[08:07:00.524] | : . ' , cluster node index: 2
[08:07:00.525] | : . ' , [1] TRUE
[08:07:00.525] | : . ' , received data:
[08:07:00.525] | : . ' , List of 5
[08:07:00.525] | : . ' ,  $ type   : chr "VALUE"
[08:07:00.525] | : . ' ,  $ value  :List of 16
[08:07:00.525] | : . ' ,   ..$ value              :List of 1
[08:07:00.525] | : . ' ,   .. ..$ :List of 2
[08:07:00.525] | : . ' ,   .. .. ..$ x: int 0
[08:07:00.525] | : . ' ,   .. .. ..$ y: int 1
[08:07:00.525] | : . ' ,   ..$ visible            : logi TRUE
[08:07:00.525] | : . ' ,   ..$ stdout             : chr "$x\n[1] 0\n\n$y\n[1] 1\n\n"
[08:07:00.525] | : . ' ,   ..$ conditions         : list()
[08:07:00.525] | : . ' ,   ..$ rng                : logi FALSE
[08:07:00.525] | : . ' ,   ..$ seed               : NULL
[08:07:00.525] | : . ' ,   ..$ misuseGlobalEnv    : NULL
[08:07:00.525] | : . ' ,   ..$ misuseConnections  :List of 3
[08:07:00.525] | : . ' ,   .. ..$ added   : NULL
[08:07:00.525] | : . ' ,   .. ..$ removed : NULL
[08:07:00.525] | : . ' ,   .. ..$ replaced: NULL
[08:07:00.525] | : . ' ,   ..$ misuseDevices      : NULL
[08:07:00.525] | : . ' ,   ..$ misuseDefaultDevice: list()
[08:07:00.525] | : . ' ,   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:00"
[08:07:00.525] | : . ' ,   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:00"
[08:07:00.525] | : . ' ,   ..$ uuid               : chr [1:2] "f4771e5023ec0cad125ea4ef8f863db5" "28"
[08:07:00.525] | : . ' ,   ..$ session_uuid       : chr "cff9dc43f82d54f766a25be23dee84a0"
[08:07:00.525] | : . ' ,   .. ..- attr(*, "source")=List of 5
[08:07:00.525] | : . ' ,   .. .. ..$ host  : Named chr "28bb34de9501"
[08:07:00.525] | : . ' ,   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:00.525] | : . ' ,   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:07:00.525] | : . ' ,   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:00.525] | : . ' ,   .. .. ..$ pid   : int 65455
[08:07:00.525] | : . ' ,   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:06:57"
[08:07:00.525] | : . ' ,   .. .. ..$ random: int 2147483647
[08:07:00.525] | : . ' ,   ..$ r_info             :List of 4
[08:07:00.525] | : . ' ,   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:00.525] | : . ' ,   .. .. ..$ : int [1:3] 4 5 1
[08:07:00.525] | : . ' ,   .. ..$ os           : chr "unix"
[08:07:00.525] | : . ' ,   .. ..$ os_name      : chr "Linux"
[08:07:00.525] | : . ' ,   .. ..$ captures_utf8: logi TRUE
[08:07:00.525] | : . ' ,   ..$ version            : chr "1.8"
[08:07:00.525] | : . ' ,   ..- attr(*, "class")= chr "FutureResult"
[08:07:00.525] | : . ' ,  $ success: logi TRUE
[08:07:00.525] | : . ' ,  $ time   : 'proc_time' Named num [1:5] 0.005 0 0.004 0 0
[08:07:00.525] | : . ' ,   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:00.525] | : . ' ,  $ tag    : NULL
[08:07:00.536] | : . ' , Received FutureResult
[08:07:00.537] | : . ' , FutureResult:
[08:07:00.537] | : . ' , value: ‘list’
[08:07:00.537] | : . ' , visible: TRUE
[08:07:00.537] | : . ' , stdout: character
[08:07:00.537] | : . ' , conditions: [n = 0] 
[08:07:00.537] | : . ' , RNG used: FALSE
[08:07:00.537] | : . ' , duration: 0.004282951 secs (started 2025-06-17 08:07:00.504914)
[08:07:00.537] | : . ' , version: 1.8
[08:07:00.537] | : . ' , FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ...
[08:07:00.537] | : . ' , ; Removed future from position #2
[08:07:00.537] | : . ' , ; Number of registered futures: 1
[08:07:00.537] | : . ' , FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ... done
[08:07:00.538] | : . ' , Erased future from future backend
[08:07:00.538] | : . ' , result() for ClusterFuture ...
[08:07:00.538] | : . ' , ; result already collected: FutureResult
[08:07:00.538] | : . ' , result() for ClusterFuture ... done
[08:07:00.538] | : . ' , signalConditions() ...
[08:07:00.538] | : . ' , ; include = ‘immediateCondition’
[08:07:00.538] | : . ' , ; exclude = 
[08:07:00.538] | : . ' , ; resignal = FALSE
[08:07:00.538] | : . ' , ; Number of conditions: 0
[08:07:00.539] | : . ' , ;  int 0
[08:07:00.539] | : . ' , signalConditions() ... done
[08:07:00.539] | : . ' receiveMessageFromWorker() for ClusterFuture ... done
[08:07:00.539] | : . ' receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:07:00.539] | : . resolved() for MultisessionFuture (‘future_mapply-2’) ... done
[08:07:00.539] | : . assertFutureResult() ...
[08:07:00.539] | : . ' Future uuid: f4771e5023ec0cad125ea4ef8f863db5[08:07:00.539] | : . ' Future uuid: 28
[08:07:00.540] | : . ' identical; success
[08:07:00.540] | : . assertFutureResult() ... done
[08:07:00.540] | : . MultisessionFuture #2
[08:07:00.540] | : . signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:07:00.540] | : . ' nx: 2
[08:07:00.540] | : . ' relay: TRUE
[08:07:00.540] | : . ' stdout: TRUE
[08:07:00.540] | : . ' signal: TRUE
[08:07:00.540] | : . ' resignal: FALSE
[08:07:00.540] | : . ' force: TRUE
[08:07:00.541] | : . ' relayed: [n=2] FALSE, FALSE
[08:07:00.541] | : . ' queued futures: [n=2] FALSE, FALSE
[08:07:00.541] | : . ' until=1
[08:07:00.541] | : . ' relaying element #1
[08:07:00.541] | : . ' relayed: [n=2] FALSE, FALSE
[08:07:00.541] | : . ' queued futures: [n=2] FALSE, TRUE
[08:07:00.541] | : . signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:07:00.541] | : . value(<MultisessionFuture>, ...) ...
[08:07:00.541] | : . value(<MultisessionFuture>, ...) ... done
[08:07:00.541] | : . value() for MultisessionFuture (‘future_mapply-2’) ...
[08:07:00.542] | : . ' result() for ClusterFuture ...
[08:07:00.542] | : . ' , result already collected: FutureResult
[08:07:00.542] | : . ' result() for ClusterFuture ... done
[08:07:00.542] | : . ' result() for ClusterFuture ...
[08:07:00.542] | : . ' , result already collected: FutureResult
[08:07:00.542] | : . ' result() for ClusterFuture ... done
[08:07:00.542] | : . ' signalConditions() ...
[08:07:00.542] | : . ' , include = ‘immediateCondition’
[08:07:00.542] | : . ' , exclude = 
[08:07:00.542] | : . ' , resignal = FALSE
[08:07:00.543] | : . ' , Number of conditions: 0
[08:07:00.543] | : . ' ,  int 0
[08:07:00.543] | : . ' signalConditions() ... done
[08:07:00.543] | : . ' check for misuse ...
[08:07:00.543] | : . ' check for misuse ... done
[08:07:00.543] | : . value() for MultisessionFuture (‘future_mapply-2’) ... done
[08:07:00.544] | : . value: <list>
[08:07:00.544] | : . signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:07:00.544] | : . ' nx: 2
[08:07:00.544] | : . ' relay: TRUE
[08:07:00.544] | : . ' stdout: TRUE
[08:07:00.544] | : . ' signal: TRUE
[08:07:00.544] | : . ' resignal: FALSE
[08:07:00.544] | : . ' force: TRUE
[08:07:00.544] | : . ' relayed: [n=2] FALSE, FALSE
[08:07:00.544] | : . ' queued futures: [n=2] FALSE, TRUE
[08:07:00.545] | : . ' until=1
[08:07:00.545] | : . ' relaying element #1
[08:07:00.545] | : . ' relayed: [n=2] FALSE, FALSE
[08:07:00.545] | : . ' queued futures: [n=2] FALSE, TRUE
[08:07:00.545] | : . signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:07:00.545] | : . resolve() for MultisessionFuture ...
[08:07:00.545] | : . resolve() for MultisessionFuture ... done
[08:07:00.545] | : . length: 1 (resolved future 2)
[08:07:00.545] | : value() for list ... done
[08:07:00.556] | : Number of remaining objects: 1
[08:07:00.556] | : checking value #1:
[08:07:00.556] | : 'obj' is MultisessionFuture
[08:07:00.556] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.556] | : . Cluster node socket connection: index=4, id=729
[08:07:00.556] | : . assertValidConnection() ...
[08:07:00.556] | : . ' cluster node index: 1
[08:07:00.557] | : . assertValidConnection() ... done
[08:07:00.567] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.567] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.577] | : Number of remaining objects: 1
[08:07:00.577] | : checking value #1:
[08:07:00.578] | : 'obj' is MultisessionFuture
[08:07:00.578] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.578] | : . Cluster node socket connection: index=4, id=729
[08:07:00.578] | : . assertValidConnection() ...
[08:07:00.578] | : . ' cluster node index: 1
[08:07:00.579] | : . assertValidConnection() ... done
[08:07:00.589] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.589] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.599] | : Number of remaining objects: 1
[08:07:00.599] | : checking value #1:
[08:07:00.599] | : 'obj' is MultisessionFuture
[08:07:00.600] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.600] | : . Cluster node socket connection: index=4, id=729
[08:07:00.600] | : . assertValidConnection() ...
[08:07:00.600] | : . ' cluster node index: 1
[08:07:00.601] | : . assertValidConnection() ... done
[08:07:00.611] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.611] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.621] | : Number of remaining objects: 1
[08:07:00.621] | : checking value #1:
[08:07:00.621] | : 'obj' is MultisessionFuture
[08:07:00.621] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.622] | : . Cluster node socket connection: index=4, id=729
[08:07:00.622] | : . assertValidConnection() ...
[08:07:00.622] | : . ' cluster node index: 1
[08:07:00.622] | : . assertValidConnection() ... done
[08:07:00.633] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.633] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.643] | : Number of remaining objects: 1
[08:07:00.643] | : checking value #1:
[08:07:00.643] | : 'obj' is MultisessionFuture
[08:07:00.643] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.644] | : . Cluster node socket connection: index=4, id=729
[08:07:00.644] | : . assertValidConnection() ...
[08:07:00.644] | : . ' cluster node index: 1
[08:07:00.644] | : . assertValidConnection() ... done
[08:07:00.654] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.654] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.665] | : Number of remaining objects: 1
[08:07:00.665] | : checking value #1:
[08:07:00.665] | : 'obj' is MultisessionFuture
[08:07:00.665] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.666] | : . Cluster node socket connection: index=4, id=729
[08:07:00.666] | : . assertValidConnection() ...
[08:07:00.666] | : . ' cluster node index: 1
[08:07:00.666] | : . assertValidConnection() ... done
[08:07:00.676] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.676] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.687] | : Number of remaining objects: 1
[08:07:00.687] | : checking value #1:
[08:07:00.687] | : 'obj' is MultisessionFuture
[08:07:00.687] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.687] | : . Cluster node socket connection: index=4, id=729
[08:07:00.688] | : . assertValidConnection() ...
[08:07:00.688] | : . ' cluster node index: 1
[08:07:00.688] | : . assertValidConnection() ... done
[08:07:00.698] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.698] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.708] | : Number of remaining objects: 1
[08:07:00.709] | : checking value #1:
[08:07:00.709] | : 'obj' is MultisessionFuture
[08:07:00.709] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.709] | : . Cluster node socket connection: index=4, id=729
[08:07:00.709] | : . assertValidConnection() ...
[08:07:00.709] | : . ' cluster node index: 1
[08:07:00.710] | : . assertValidConnection() ... done
[08:07:00.720] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.720] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.730] | : Number of remaining objects: 1
[08:07:00.730] | : checking value #1:
[08:07:00.731] | : 'obj' is MultisessionFuture
[08:07:00.731] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.731] | : . Cluster node socket connection: index=4, id=729
[08:07:00.731] | : . assertValidConnection() ...
[08:07:00.731] | : . ' cluster node index: 1
[08:07:00.732] | : . assertValidConnection() ... done
[08:07:00.742] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.742] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.752] | : Number of remaining objects: 1
[08:07:00.752] | : checking value #1:
[08:07:00.752] | : 'obj' is MultisessionFuture
[08:07:00.753] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.753] | : . Cluster node socket connection: index=4, id=729
[08:07:00.753] | : . assertValidConnection() ...
[08:07:00.753] | : . ' cluster node index: 1
[08:07:00.753] | : . assertValidConnection() ... done
[08:07:00.764] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.764] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.774] | : Number of remaining objects: 1
[08:07:00.774] | : checking value #1:
[08:07:00.774] | : 'obj' is MultisessionFuture
[08:07:00.774] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.775] | : . Cluster node socket connection: index=4, id=729
[08:07:00.775] | : . assertValidConnection() ...
[08:07:00.775] | : . ' cluster node index: 1
[08:07:00.775] | : . assertValidConnection() ... done
[08:07:00.786] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.786] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.796] | : Number of remaining objects: 1
[08:07:00.796] | : checking value #1:
[08:07:00.796] | : 'obj' is MultisessionFuture
[08:07:00.796] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.797] | : . Cluster node socket connection: index=4, id=729
[08:07:00.797] | : . assertValidConnection() ...
[08:07:00.797] | : . ' cluster node index: 1
[08:07:00.797] | : . assertValidConnection() ... done
[08:07:00.807] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.808] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.818] | : Number of remaining objects: 1
[08:07:00.818] | : checking value #1:
[08:07:00.818] | : 'obj' is MultisessionFuture
[08:07:00.818] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.818] | : . Cluster node socket connection: index=4, id=729
[08:07:00.819] | : . assertValidConnection() ...
[08:07:00.819] | : . ' cluster node index: 1
[08:07:00.819] | : . assertValidConnection() ... done
[08:07:00.829] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.829] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.840] | : Number of remaining objects: 1
[08:07:00.840] | : checking value #1:
[08:07:00.840] | : 'obj' is MultisessionFuture
[08:07:00.840] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.840] | : . Cluster node socket connection: index=4, id=729
[08:07:00.841] | : . assertValidConnection() ...
[08:07:00.841] | : . ' cluster node index: 1
[08:07:00.841] | : . assertValidConnection() ... done
[08:07:00.851] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.851] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.862] | : Number of remaining objects: 1
[08:07:00.862] | : checking value #1:
[08:07:00.862] | : 'obj' is MultisessionFuture
[08:07:00.862] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.862] | : . Cluster node socket connection: index=4, id=729
[08:07:00.862] | : . assertValidConnection() ...
[08:07:00.863] | : . ' cluster node index: 1
[08:07:00.863] | : . assertValidConnection() ... done
[08:07:00.873] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:00.873] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.883] | : Number of remaining objects: 1
[08:07:00.884] | : checking value #1:
[08:07:00.884] | : 'obj' is MultisessionFuture
[08:07:00.884] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.884] | : . Cluster node socket connection: index=4, id=729
[08:07:00.884] | : . assertValidConnection() ...
[08:07:00.884] | : . ' cluster node index: 1
[08:07:00.885] | : . assertValidConnection() ... done
[08:07:00.885] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:07:00.885] | : . ' cluster node index: 1
[08:07:00.885] | : . ' [1] TRUE
[08:07:00.885] | : . ' received data:
[08:07:00.885] | : . ' List of 5
[08:07:00.885] | : . '  $ type   : chr "VALUE"
[08:07:00.885] | : . '  $ value  :List of 16
[08:07:00.885] | : . '   ..$ value              :List of 1
[08:07:00.885] | : . '   .. ..$ :List of 2
[08:07:00.885] | : . '   .. .. ..$ x: int 1
[08:07:00.885] | : . '   .. .. ..$ y: int 0
[08:07:00.885] | : . '   ..$ visible            : logi TRUE
[08:07:00.885] | : . '   ..$ stdout             : chr "$x\n[1] 1\n\n$y\n[1] 0\n\n"
[08:07:00.885] | : . '   ..$ conditions         : list()
[08:07:00.885] | : . '   ..$ rng                : logi FALSE
[08:07:00.885] | : . '   ..$ seed               : NULL
[08:07:00.885] | : . '   ..$ misuseGlobalEnv    : NULL
[08:07:00.885] | : . '   ..$ misuseConnections  :List of 3
[08:07:00.885] | : . '   .. ..$ added   : NULL
[08:07:00.885] | : . '   .. ..$ removed : NULL
[08:07:00.885] | : . '   .. ..$ replaced: NULL
[08:07:00.885] | : . '   ..$ misuseDevices      : NULL
[08:07:00.885] | : . '   ..$ misuseDefaultDevice: list()
[08:07:00.885] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:00"
[08:07:00.885] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:00"
[08:07:00.885] | : . '   ..$ uuid               : chr [1:2] "f4771e5023ec0cad125ea4ef8f863db5" "27"
[08:07:00.885] | : . '   ..$ session_uuid       : chr "59b306a9e84480e65c32ece688378702"
[08:07:00.885] | : . '   .. ..- attr(*, "source")=List of 5
[08:07:00.885] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:07:00.885] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:00.885] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:07:00.885] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:00.885] | : . '   .. .. ..$ pid   : int 65456
[08:07:00.885] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:06:57"
[08:07:00.885] | : . '   .. .. ..$ random: int 2147483647
[08:07:00.885] | : . '   ..$ r_info             :List of 4
[08:07:00.885] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:00.885] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:07:00.885] | : . '   .. ..$ os           : chr "unix"
[08:07:00.885] | : . '   .. ..$ os_name      : chr "Linux"
[08:07:00.885] | : . '   .. ..$ captures_utf8: logi TRUE
[08:07:00.885] | : . '   ..$ version            : chr "1.8"
[08:07:00.885] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:07:00.885] | : . '  $ success: logi TRUE
[08:07:00.885] | : . '  $ time   : 'proc_time' Named num [1:5] 0.006 0 0.506 0 0
[08:07:00.885] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:00.885] | : . '  $ tag    : NULL
[08:07:00.899] | : . ' Received FutureResult
[08:07:00.899] | : . ' FutureResult:
[08:07:00.899] | : . ' value: ‘list’
[08:07:00.899] | : . ' visible: TRUE
[08:07:00.899] | : . ' stdout: character
[08:07:00.899] | : . ' conditions: [n = 0] 
[08:07:00.899] | : . ' RNG used: FALSE
[08:07:00.899] | : . ' duration: 0.5053227 secs (started 2025-06-17 08:07:00.37898)
[08:07:00.899] | : . ' version: 1.8
[08:07:00.900] | : . ' FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ...
[08:07:00.900] | : . ' , Removed future from position #1
[08:07:00.900] | : . ' , Number of registered futures: 0
[08:07:00.900] | : . ' FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ... done
[08:07:00.900] | : . ' Erased future from future backend
[08:07:00.900] | : . ' result() for ClusterFuture ...
[08:07:00.900] | : . ' , result already collected: FutureResult
[08:07:00.901] | : . ' result() for ClusterFuture ... done
[08:07:00.901] | : . ' signalConditions() ...
[08:07:00.901] | : . ' , include = ‘immediateCondition’
[08:07:00.901] | : . ' , exclude = 
[08:07:00.901] | : . ' , resignal = FALSE
[08:07:00.901] | : . ' , Number of conditions: 0
[08:07:00.901] | : . ' ,  int 0
[08:07:00.902] | : . ' signalConditions() ... done
[08:07:00.902] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:07:00.902] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:07:00.902] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.902] | : assertFutureResult() ...
[08:07:00.902] | : . Future uuid: f4771e5023ec0cad125ea4ef8f863db5[08:07:00.902] | : . Future uuid: 27
[08:07:00.902] | : . identical; success
[08:07:00.902] | : assertFutureResult() ... done
[08:07:00.902] | : MultisessionFuture #1
[08:07:00.902] | : signalConditionsASAP(MultisessionFuture, pos=1) ...
[08:07:00.903] | : . nx: 2
[08:07:00.903] | : . relay: TRUE
[08:07:00.903] | : . stdout: TRUE
[08:07:00.903] | : . signal: TRUE
[08:07:00.903] | : . resignal: FALSE
[08:07:00.903] | : . force: TRUE
[08:07:00.903] | : . relayed: [n=2] FALSE, FALSE
[08:07:00.903] | : . queued futures: [n=2] FALSE, TRUE
[08:07:00.903] | : . until=1
[08:07:00.903] | : . relaying element #1
[08:07:00.903] | : . value() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.904] | : . ' result() for ClusterFuture ...
[08:07:00.904] | : . ' , result already collected: FutureResult
[08:07:00.904] | : . ' result() for ClusterFuture ... done
[08:07:00.904] | : . ' result() for ClusterFuture ...
[08:07:00.904] | : . ' , result already collected: FutureResult
[08:07:00.904] | : . ' result() for ClusterFuture ... done
[08:07:00.904] | : . ' signalConditions() ...
[08:07:00.904] | : . ' , include = ‘immediateCondition’
[08:07:00.904] | : . ' , exclude = 
[08:07:00.905] | : . ' , resignal = FALSE
[08:07:00.905] | : . ' , Number of conditions: 0
[08:07:00.905] | : . ' ,  int 0
[08:07:00.905] | : . ' signalConditions() ... done
[08:07:00.905] | : . ' relay stdout ...
[08:07:00.905] | : . ' relay stdout ... done
[08:07:00.905] | : . ' check for misuse ...
[08:07:00.906] | : . ' check for misuse ... done
[08:07:00.906] | : . value() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.906] | : . result() for ClusterFuture ...
[08:07:00.906] | : . ' result already collected: FutureResult
[08:07:00.906] | : . result() for ClusterFuture ... done
[08:07:00.906] | : . signalConditions() ...
[08:07:00.906] | : . ' include = ‘immediateCondition’
[08:07:00.906] | : . ' exclude = 
[08:07:00.906] | : . ' resignal = FALSE
[08:07:00.906] | : . ' Number of conditions: 0
[08:07:00.907] | : . '  int 0
[08:07:00.907] | : . signalConditions() ... done
[08:07:00.907] | : . result() for ClusterFuture ...
[08:07:00.907] | : . ' result already collected: FutureResult
[08:07:00.907] | : . result() for ClusterFuture ... done
[08:07:00.907] | : . signalConditions() ...
[08:07:00.907] | : . ' include = ‘condition’
[08:07:00.908] | : . ' exclude = ‘error’, ‘immediateCondition’
[08:07:00.908] | : . ' resignal = TRUE
[08:07:00.908] | : . ' Number of conditions: 0
[08:07:00.908] | : . '  int 0
[08:07:00.908] | : . signalConditions() ... done
[08:07:00.908] | : . relayed: [n=2] TRUE, FALSE
[08:07:00.908] | : . queued futures: [n=2] TRUE, TRUE
[08:07:00.909] | : signalConditionsASAP(MultisessionFuture, pos=1) ... done
[08:07:00.909] | : value(<MultisessionFuture>, ...) ...
[08:07:00.909] | : value(<MultisessionFuture>, ...) ... done
[08:07:00.909] | : value() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:00.909] | : . result() for ClusterFuture ...
[08:07:00.909] | : . ' result already collected: FutureResult
[08:07:00.909] | : . result() for ClusterFuture ... done
[08:07:00.909] | : . result() for ClusterFuture ...
[08:07:00.909] | : . ' result already collected: FutureResult
[08:07:00.909] | : . result() for ClusterFuture ... done
[08:07:00.910] | : . signalConditions() ...
[08:07:00.910] | : . ' include = ‘immediateCondition’
[08:07:00.910] | : . ' exclude = 
[08:07:00.910] | : . ' resignal = FALSE
[08:07:00.910] | : . ' Number of conditions: 0
[08:07:00.910] | : . '  int 0
[08:07:00.910] | : . signalConditions() ... done
[08:07:00.910] | : . check for misuse ...
[08:07:00.911] | : . check for misuse ... done
[08:07:00.911] | : value() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:00.911] | : value: <list>
[08:07:00.911] | : signalConditionsASAP(MultisessionFuture, pos=1) ...
[08:07:00.911] | : . nx: 2
[08:07:00.911] | : . relay: TRUE
[08:07:00.911] | : . stdout: TRUE
[08:07:00.911] | : . signal: TRUE
[08:07:00.911] | : . resignal: FALSE
[08:07:00.911] | : . force: TRUE
[08:07:00.912] | : . relayed: [n=2] TRUE, FALSE
[08:07:00.912] | : . queued futures: [n=2] TRUE, TRUE
[08:07:00.912] | : . until=2
[08:07:00.912] | : . relaying element #2
[08:07:00.912] | : . value() for MultisessionFuture (‘future_mapply-2’) ...
[08:07:00.912] | : . ' result() for ClusterFuture ...
[08:07:00.912] | : . ' , result already collected: FutureResult
[08:07:00.912] | : . ' result() for ClusterFuture ... done
[08:07:00.912] | : . ' result() for ClusterFuture ...
[08:07:00.912] | : . ' , result already collected: FutureResult
[08:07:00.913] | : . ' result() for ClusterFuture ... done
[08:07:00.913] | : . ' signalConditions() ...
[08:07:00.913] | : . ' , include = ‘immediateCondition’
[08:07:00.913] | : . ' , exclude = 
[08:07:00.913] | : . ' , resignal = FALSE
[08:07:00.913] | : . ' , Number of conditions: 0
[08:07:00.913] | : . ' ,  int 0
[08:07:00.913] | : . ' signalConditions() ... done
[08:07:00.914] | : . ' relay stdout ...
[08:07:00.914] | : . ' relay stdout ... done
[08:07:00.914] | : . ' check for misuse ...
[08:07:00.914] | : . ' check for misuse ... done
[08:07:00.914] | : . value() for MultisessionFuture (‘future_mapply-2’) ... done
[08:07:00.914] | : . result() for ClusterFuture ...
[08:07:00.914] | : . ' result already collected: FutureResult
[08:07:00.914] | : . result() for ClusterFuture ... done
[08:07:00.914] | : . signalConditions() ...
[08:07:00.915] | : . ' include = ‘immediateCondition’
[08:07:00.915] | : . ' exclude = 
[08:07:00.915] | : . ' resignal = FALSE
[08:07:00.915] | : . ' Number of conditions: 0
[08:07:00.915] | : . '  int 0
[08:07:00.915] | : . signalConditions() ... done
[08:07:00.916] | : . result() for ClusterFuture ...
[08:07:00.916] | : . ' result already collected: FutureResult
[08:07:00.916] | : . result() for ClusterFuture ... done
[08:07:00.916] | : . signalConditions() ...
[08:07:00.916] | : . ' include = ‘condition’
[08:07:00.916] | : . ' exclude = ‘error’, ‘immediateCondition’
[08:07:00.916] | : . ' resignal = TRUE
[08:07:00.916] | : . ' Number of conditions: 0
[08:07:00.916] | : . '  int 0
[08:07:00.917] | : . signalConditions() ... done
[08:07:00.917] | : . relayed: [n=2] TRUE, TRUE
[08:07:00.917] | : . queued futures: [n=2] TRUE, TRUE
[08:07:00.917] | : signalConditionsASAP(MultisessionFuture, pos=1) ... done
[08:07:00.917] | : resolve() for MultisessionFuture ...
[08:07:00.917] | : resolve() for MultisessionFuture ... done
[08:07:00.917] | : length: 0 (resolved future 1)
[08:07:00.917] | future_mapply() -> future_xapply() ... done
[08:07:00.917] | Relaying remaining futures ...
[08:07:00.918] | : signalConditionsASAP(NULL, pos=0) ...
[08:07:00.918] | : . nx: 2
[08:07:00.918] | : . relay: TRUE
[08:07:00.918] | : . stdout: TRUE
[08:07:00.918] | : . signal: TRUE
[08:07:00.918] | : . resignal: FALSE
[08:07:00.918] | : . force: TRUE
[08:07:00.918] | : . relayed: [n=2] TRUE, TRUE
[08:07:00.918] | : . queued futures: [n=2] TRUE, TRUE
 - flush all
[08:07:00.918] | : . relayed: [n=2] TRUE, TRUE
[08:07:00.919] | : . queued futures: [n=2] TRUE, TRUE
[08:07:00.919] | : signalConditionsASAP(NULL, pos=0) ... done
[08:07:00.919] | Relaying remaining futures ... done
[08:07:00.919] future_mapply() ... done
[08:07:00.919]  - Number of value chunks collected: 2
[08:07:00.919] Resolving 2 futures (chunks) ... DONE
[08:07:00.919] Reducing values from 2 chunks ...
[08:07:00.919]  - Number of values collected after concatenation: 2
[08:07:00.919]  - Number of values expected: 2
[08:07:00.919] Reducing values from 2 chunks ... DONE


* future_mapply(x, ..., future.stdout = TRUE) ... DONE
* future_mapply(x, ..., future.stdout = NA) ...
[08:07:00.920] future_mapply() ...
[08:07:00.920] | future_mapply() -> future_xapply() ...
[08:07:00.920] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:00.920] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:00.921] | : Number of chunks: 2
[08:07:00.921] | : getGlobalsAndPackagesXApply() ...
[08:07:00.921] | : . future.globals: TRUE
[08:07:00.921] | : . getGlobalsAndPackages() ...
[08:07:00.921] | : . ' Searching for globals ...
[08:07:00.929] | : . ' , globals found: [6] ‘FUN’, ‘{’, ‘Sys.sleep’, ‘/’, ‘print’, ‘list’
[08:07:00.929] | : . ' Searching for globals ... done
[08:07:00.930] | : . ' Resolving globals: FALSE
[08:07:00.930] | : . ' Search for packages associated with the globals ...
[08:07:00.930] | : . ' , Packages associated with globals: [1] ‘base’
[08:07:00.930] | : . ' , Packages: [1] ‘base’
[08:07:00.930] | : . ' Search for packages associated with the globals ... done
[08:07:00.930] | : . ' The total size of the 1 globals is 1.04 KiB (1066 bytes)
[08:07:00.931] | : . ' The total size of the 1 globals exported for future expression (‘FUN()’) is 1.04 KiB There is one global: ‘FUN’ (1.04 KiB of class ‘function’)
[08:07:00.931] | : . ' Packages after dropping 'base': [0] 
[08:07:00.931] | : . ' globals: [1] ‘FUN’
[08:07:00.931] | : . ' packages: [0] 
[08:07:00.931] | : . getGlobalsAndPackages() ... done
[08:07:00.931] | : . globals found/used: [n=1] ‘FUN’
[08:07:00.932] | : . needed namespaces: [n=0] 
[08:07:00.932] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘MoreArgs’
[08:07:00.932] | : . List of 2
[08:07:00.932] | : .  $ ...future.FUN:function (x, y)  
[08:07:00.932] | : .  $ MoreArgs     : NULL
[08:07:00.932] | : .  - attr(*, "where")=List of 2
[08:07:00.932] | : .   ..$ ...future.FUN:<environment: 0x55eee253cb18> 
[08:07:00.932] | : .   ..$ MoreArgs     :<environment: R_EmptyEnv> 
[08:07:00.932] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:00.932] | : .  - attr(*, "resolved")= logi FALSE
[08:07:00.932] | : .  - attr(*, "total_size")= num NA
[08:07:00.934] | : . Packages to be attached in all futures: [n=0] 
[08:07:00.935] | : getGlobalsAndPackagesXApply() ... done
[08:07:00.935] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:07:00.935] | : List of 5
[08:07:00.935] | :  $ ...future.FUN            :function (x, y)  
[08:07:00.935] | :  $ MoreArgs                 : NULL
[08:07:00.935] | :  $ ...future.elements_ii    : NULL
[08:07:00.935] | :  $ ...future.seeds_ii       : NULL
[08:07:00.935] | :  $ ...future.globals.maxSize: NULL
[08:07:00.935] | :  - attr(*, "where")=List of 5
[08:07:00.935] | :   ..$ ...future.FUN            :<environment: 0x55eee253cb18> 
[08:07:00.935] | :   ..$ MoreArgs                 :<environment: R_EmptyEnv> 
[08:07:00.935] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:07:00.935] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:07:00.935] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:07:00.935] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:00.935] | :  - attr(*, "resolved")= logi FALSE
[08:07:00.935] | :  - attr(*, "total_size")= num NA
[08:07:00.939] | : Number of futures (= number of chunks): 2
[08:07:00.939] | : Launching 2 futures (chunks) ...
[08:07:00.939] | : Chunk #1 of 2 ...
[08:07:00.939] | :  - Finding globals in '...' for chunk #1 ...
[08:07:00.939] | : getGlobalsAndPackages() ...
[08:07:00.939] | : . Searching for globals ...
[08:07:00.940] | : . ' globals found: [0] 
[08:07:00.940] | : . Searching for globals ... done
[08:07:00.940] | : . globals: [0] <none>
[08:07:00.940] | : . packages: [0] <none>
[08:07:00.940] | : getGlobalsAndPackages() ... done
[08:07:00.940] | :    + additional globals found: [n=0] 
[08:07:00.941] | :    + additional namespaces needed: [n=0] 
[08:07:00.941] | :  - Finding globals in '...' for chunk #1 ... DONE
[08:07:00.941] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:07:00.941] | :  - seeds: <none>
[08:07:00.941] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:07:00.941] | : future(..., label = ‘future_mapply-1’) ...
[08:07:00.941] | : . lazy: FALSE
[08:07:00.941] | : . stdout: NA
[08:07:00.941] | : . conditions: [n=1] ‘condition’
[08:07:00.941] | : . gc: FALSE
[08:07:00.942] | : . earlySignal: FALSE
[08:07:00.942] | : . getGlobalsAndPackages() ...
[08:07:00.942] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:07:00.942] | : . ' Resolving globals: FALSE
[08:07:00.942] | : . ' Search for packages associated with the globals ...
[08:07:00.942] | : . ' , Packages associated with globals: [0] 
[08:07:00.942] | : . ' , Packages: [0] 
[08:07:00.943] | : . ' Search for packages associated with the globals ... done
[08:07:00.943] | : . ' Packages after dropping 'base': [0] 
[08:07:00.943] | : . ' globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:07:00.943] | : . ' packages: [0] 
[08:07:00.943] | : . getGlobalsAndPackages() ... done
[08:07:00.943] | : . run() for ‘Future’ (‘future_mapply-1’) ...
[08:07:00.943] | : . ' state: ‘created’
[08:07:00.944] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:00.944] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:00.944] | : . ' Using MultisessionFutureBackend ...
[08:07:00.944] | : . ' , Number of futures since start: 10 (10 created, 10 launched, 10 finished)
[08:07:00.944] | : . ' , Launching futures ...
[08:07:00.944] | : . ' , ; launchFuture() for ClusterFutureBackend ...
[08:07:00.944] | : . ' , ; ` Workers: [n=2]
[08:07:00.944] | : . ' , ; ` Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:00.946] | : . ' , ; ` FutureRegistry: ‘workers-e636a28029c6e30b2bebe5fb0c115fc6’
[08:07:00.946] | : . ' , ; ` requestWorker() ...
[08:07:00.946] | : . ' , ; ` | requestNode() ...
[08:07:00.946] | : . ' , ; ` | : Number of workers: 2
[08:07:00.946] | : . ' , ; ` | : Polling for a free worker ...
[08:07:00.946] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:07:00.947] | : . ' , ; ` | : . ' Listing all futures
[08:07:00.947] | : . ' , ; ` | : . ' Number of registered futures: 0
[08:07:00.947] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:07:00.947] | : . ' , ; ` | : . Total time: 0
[08:07:00.947] | : . ' , ; ` | : Polling for a free worker ... done
[08:07:00.947] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:07:00.947] | : . ' , ; ` | : . Listing all futures
[08:07:00.947] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:00.947] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:07:00.948] | : . ' , ; ` | : avail: [n=2] ‘1’, ‘2’
[08:07:00.948] | : . ' , ; ` | : Index of first available worker: 1
[08:07:00.948] | : . ' , ; ` | : Validate that the worker is functional ...
[08:07:01.005] | : . ' , ; ` | : . Worker is functional
[08:07:01.005] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:07:01.006] | : . ' , ; ` | : . ' Listing all futures
[08:07:01.006] | : . ' , ; ` | : . ' Number of registered futures: 0
[08:07:01.006] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:07:01.006] | : . ' , ; ` | : Validate that the worker is functional ... done
[08:07:01.006] | : . ' , ; ` | requestNode() ... done
[08:07:01.006] | : . ' , ; ` | cluster node index: 1
[08:07:01.006] | : . ' , ; ` requestWorker() ... done
[08:07:01.006] | : . ' , ; ` eraseGlobalEnvironment() ...
[08:07:01.007] | : . ' , ; ` eraseGlobalEnvironment() ... done
[08:07:01.007] | : . ' , ; ` launchFuture() ...
[08:07:01.007] | : . ' , ; ` | cluster node index: 1
[08:07:01.007] | : . ' , ; ` | getFutureData() ...
[08:07:01.007] | : . ' , ; ` | : getFutureCore() ...
[08:07:01.007] | : . ' , ; ` | : . Packages needed by the future expression (n = 0): <none>
[08:07:01.007] | : . ' , ; ` | : getFutureCore() ... done
[08:07:01.007] | : . ' , ; ` | : getFutureCapture() ...
[08:07:01.008] | : . ' , ; ` | : getFutureCapture() ... done
[08:07:01.008] | : . ' , ; ` | : getFutureContext() ...
[08:07:01.008] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:01.008] | : . ' , ; ` | : . ' Getting stack without first backend: [n=0] 
[08:07:01.008] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:01.008] | : . ' , ; ` | : . Packages needed by future backend (n = 0): <none>
[08:07:01.008] | : . ' , ; ` | : getFutureContext() ... done
[08:07:01.008] | : . ' , ; ` | getFutureData() ... done
[08:07:01.009] | : . ' , ; ` | FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ...
[08:07:01.009] | : . ' , ; ` | : Appended future to position #1
[08:07:01.009] | : . ' , ; ` | : Number of registered futures: 1
[08:07:01.009] | : . ' , ; ` | FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ... done
[08:07:01.009] | : . ' , ; ` launchFuture() ... done
[08:07:01.009] | : . ' , ; ` MultisessionFuture started
[08:07:01.009] | : . ' , ; launchFuture() for ClusterFutureBackend ... done
[08:07:01.010] | : . ' , Launching futures ... done
[08:07:01.010] | : . ' , Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:01.010] | : . ' Using MultisessionFutureBackend ... done
[08:07:01.010] | : . run() for ‘Future’ (‘future_mapply-1’) ... done
[08:07:01.010] | : future(..., label = ‘future_mapply-1’) ... done
[08:07:01.010] | : Created future:
[08:07:01.011] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:01.011] | : . Cluster node socket connection: index=4, id=729
[08:07:01.011] | : . assertValidConnection() ...
[08:07:01.012] | : . ' cluster node index: 1
[08:07:01.012] | : . assertValidConnection() ... done
[08:07:01.022] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:01.022] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:01.010] | : MultisessionFuture:
[08:07:01.010] | : Label: ‘future_mapply-1’
[08:07:01.010] | : Expression:
[08:07:01.010] | : {
[08:07:01.010] | :     "# future.apply:::future_xapply(): preserve future option"
[08:07:01.010] | :     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:07:01.010] | :     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:07:01.010] | :         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:07:01.010] | :         on.exit(options(oopts), add = TRUE)
[08:07:01.010] | :     }
[08:07:01.010] | :     {
[08:07:01.010] | :         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[08:07:01.010] | :             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[08:07:01.010] | :         do.call(mapply, args = args)
[08:07:01.010] | :     }
[08:07:01.010] | : }
[08:07:01.010] | : Globals: 5 objects totaling 6.51 KiB (function ‘...future.FUN’ of 1.04 KiB, list ‘...future.elements_ii’ of 71 bytes, NULL ‘MoreArgs’ of 27 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:07:01.010] | : Packages: <none>
[08:07:01.010] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:07:01.010] | : Capture standard output: NA
[08:07:01.010] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:07:01.010] | : Immediate condition classes: ‘immediateCondition’
[08:07:01.010] | : Lazy evaluation: FALSE
[08:07:01.010] | : Local evaluation: TRUE
[08:07:01.010] | : Asynchronous evaluation: TRUE
[08:07:01.010] | : Early signaling: FALSE
[08:07:01.010] | : Environment: R_GlobalEnv
[08:07:01.010] | : State: ‘running’
[08:07:01.010] | : Resolved: FALSE
[08:07:01.010] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-29
[08:07:01.010] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:07:01.010] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:01.010] | : Value: <not collected>
[08:07:01.010] | : Conditions captured: <none>
[08:07:01.023] | : Chunk #1 of 2 ... DONE
[08:07:01.023] | : Chunk #2 of 2 ...
[08:07:01.025] | :  - Finding globals in '...' for chunk #2 ...
[08:07:01.025] | : getGlobalsAndPackages() ...
[08:07:01.025] | : . Searching for globals ...
[08:07:01.026] | : . ' globals found: [0] 
[08:07:01.026] | : . Searching for globals ... done
[08:07:01.026] | : . globals: [0] <none>
[08:07:01.026] | : . packages: [0] <none>
[08:07:01.026] | : getGlobalsAndPackages() ... done
[08:07:01.026] | :    + additional globals found: [n=0] 
[08:07:01.027] | :    + additional namespaces needed: [n=0] 
[08:07:01.027] | :  - Finding globals in '...' for chunk #2 ... DONE
[08:07:01.027] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:07:01.027] | :  - seeds: <none>
[08:07:01.027] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:07:01.027] | : future(..., label = ‘future_mapply-2’) ...
[08:07:01.027] | : . lazy: FALSE
[08:07:01.027] | : . stdout: NA
[08:07:01.027] | : . conditions: [n=1] ‘condition’
[08:07:01.027] | : . gc: FALSE
[08:07:01.028] | : . earlySignal: FALSE
[08:07:01.028] | : . getGlobalsAndPackages() ...
[08:07:01.028] | : . ' globals passed as-is: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:07:01.028] | : . ' Resolving globals: FALSE
[08:07:01.028] | : . ' Search for packages associated with the globals ...
[08:07:01.028] | : . ' , Packages associated with globals: [0] 
[08:07:01.028] | : . ' , Packages: [0] 
[08:07:01.028] | : . ' Search for packages associated with the globals ... done
[08:07:01.029] | : . ' Packages after dropping 'base': [0] 
[08:07:01.029] | : . ' globals: [5] ‘...future.FUN’, ‘MoreArgs’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:07:01.029] | : . ' packages: [0] 
[08:07:01.029] | : . getGlobalsAndPackages() ... done
[08:07:01.029] | : . run() for ‘Future’ (‘future_mapply-2’) ...
[08:07:01.029] | : . ' state: ‘created’
[08:07:01.029] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:01.030] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:01.030] | : . ' Using MultisessionFutureBackend ...
[08:07:01.030] | : . ' , Number of futures since start: 11 (11 created, 11 launched, 10 finished)
[08:07:01.030] | : . ' , Launching futures ...
[08:07:01.030] | : . ' , ; launchFuture() for ClusterFutureBackend ...
[08:07:01.030] | : . ' , ; ` Workers: [n=2]
[08:07:01.030] | : . ' , ; ` Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.1 (2025-06-13), platform x86_64-pc-linux-gnu)
[08:07:01.032] | : . ' , ; ` FutureRegistry: ‘workers-e636a28029c6e30b2bebe5fb0c115fc6’
[08:07:01.032] | : . ' , ; ` requestWorker() ...
[08:07:01.032] | : . ' , ; ` | requestNode() ...
[08:07:01.032] | : . ' , ; ` | : Number of workers: 2
[08:07:01.032] | : . ' , ; ` | : Polling for a free worker ...
[08:07:01.032] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:07:01.032] | : . ' , ; ` | : . ' Listing all futures
[08:07:01.033] | : . ' , ; ` | : . ' Number of registered futures: 1
[08:07:01.033] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:07:01.033] | : . ' , ; ` | : . Total time: 0
[08:07:01.033] | : . ' , ; ` | : Polling for a free worker ... done
[08:07:01.033] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:07:01.033] | : . ' , ; ` | : . Listing all futures
[08:07:01.033] | : . ' , ; ` | : . Number of registered futures: 1
[08:07:01.033] | : . ' , ; ` | : FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:07:01.033] | : . ' , ; ` | : avail: [n=2] ‘2’
[08:07:01.033] | : . ' , ; ` | : Index of first available worker: 2
[08:07:01.034] | : . ' , ; ` | : Validate that the worker is functional ...
[08:07:01.132] | : . ' , ; ` | : . Worker is functional
[08:07:01.132] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ...
[08:07:01.132] | : . ' , ; ` | : . ' Listing all futures
[08:07:01.132] | : . ' , ; ` | : . ' Number of registered futures: 1
[08:07:01.132] | : . ' , ; ` | : . FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'list', earlySignal = 0) ... done
[08:07:01.132] | : . ' , ; ` | : Validate that the worker is functional ... done
[08:07:01.133] | : . ' , ; ` | requestNode() ... done
[08:07:01.133] | : . ' , ; ` | cluster node index: 2
[08:07:01.133] | : . ' , ; ` requestWorker() ... done
[08:07:01.133] | : . ' , ; ` eraseGlobalEnvironment() ...
[08:07:01.133] | : . ' , ; ` eraseGlobalEnvironment() ... done
[08:07:01.133] | : . ' , ; ` launchFuture() ...
[08:07:01.134] | : . ' , ; ` | cluster node index: 2
[08:07:01.134] | : . ' , ; ` | getFutureData() ...
[08:07:01.134] | : . ' , ; ` | : getFutureCore() ...
[08:07:01.134] | : . ' , ; ` | : . Packages needed by the future expression (n = 0): <none>
[08:07:01.134] | : . ' , ; ` | : getFutureCore() ... done
[08:07:01.134] | : . ' , ; ` | : getFutureCapture() ...
[08:07:01.134] | : . ' , ; ` | : getFutureCapture() ... done
[08:07:01.134] | : . ' , ; ` | : getFutureContext() ...
[08:07:01.134] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:01.135] | : . ' , ; ` | : . ' Getting stack without first backend: [n=0] 
[08:07:01.135] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:01.135] | : . ' , ; ` | : . Packages needed by future backend (n = 0): <none>
[08:07:01.135] | : . ' , ; ` | : getFutureContext() ... done
[08:07:01.135] | : . ' , ; ` | getFutureData() ... done
[08:07:01.135] | : . ' , ; ` | FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ...
[08:07:01.136] | : . ' , ; ` | : Appended future to position #2
[08:07:01.136] | : . ' , ; ` | : Number of registered futures: 2
[08:07:01.136] | : . ' , ; ` | FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'add', earlySignal = 0) ... done
[08:07:01.136] | : . ' , ; ` launchFuture() ... done
[08:07:01.136] | : . ' , ; ` MultisessionFuture started
[08:07:01.136] | : . ' , ; launchFuture() for ClusterFutureBackend ... done
[08:07:01.136] | : . ' , Launching futures ... done
[08:07:01.136] | : . ' , Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:01.136] | : . ' Using MultisessionFutureBackend ... done
[08:07:01.136] | : . run() for ‘Future’ (‘future_mapply-2’) ... done
[08:07:01.137] | : future(..., label = ‘future_mapply-2’) ... done
[08:07:01.137] | : Created future:
[08:07:01.138] | : resolved() for MultisessionFuture (‘future_mapply-2’) ...
[08:07:01.138] | : . Cluster node socket connection: index=5, id=730
[08:07:01.138] | : . assertValidConnection() ...
[08:07:01.138] | : . ' cluster node index: 2
[08:07:01.138] | : . assertValidConnection() ... done
[08:07:01.149] | : . socketSelect(list(<connection #5 (id=730)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:01.149] | : resolved() for MultisessionFuture (‘future_mapply-2’) ... done
[08:07:01.137] | : MultisessionFuture:
[08:07:01.137] | : Label: ‘future_mapply-2’
[08:07:01.137] | : Expression:
[08:07:01.137] | : {
[08:07:01.137] | :     "# future.apply:::future_xapply(): preserve future option"
[08:07:01.137] | :     ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:07:01.137] | :     if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:07:01.137] | :         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:07:01.137] | :         on.exit(options(oopts), add = TRUE)
[08:07:01.137] | :     }
[08:07:01.137] | :     {
[08:07:01.137] | :         args <- c(list(FUN = ...future.FUN), ...future.elements_ii, 
[08:07:01.137] | :             MoreArgs = list(MoreArgs), SIMPLIFY = FALSE, USE.NAMES = FALSE)
[08:07:01.137] | :         do.call(mapply, args = args)
[08:07:01.137] | :     }
[08:07:01.137] | : }
[08:07:01.137] | : Globals: 5 objects totaling 6.51 KiB (function ‘...future.FUN’ of 1.04 KiB, list ‘...future.elements_ii’ of 71 bytes, NULL ‘MoreArgs’ of 27 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:07:01.137] | : Packages: <none>
[08:07:01.137] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:07:01.137] | : Capture standard output: NA
[08:07:01.137] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:07:01.137] | : Immediate condition classes: ‘immediateCondition’
[08:07:01.137] | : Lazy evaluation: FALSE
[08:07:01.137] | : Local evaluation: TRUE
[08:07:01.137] | : Asynchronous evaluation: TRUE
[08:07:01.137] | : Early signaling: FALSE
[08:07:01.137] | : Environment: R_GlobalEnv
[08:07:01.137] | : State: ‘running’
[08:07:01.137] | : Resolved: FALSE
[08:07:01.137] | : Unique identifier: f4771e5023ec0cad125ea4ef8f863db5-30
[08:07:01.137] | : Owner process: f4771e5023ec0cad125ea4ef8f863db5
[08:07:01.137] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:01.137] | : Value: <not collected>
[08:07:01.137] | : Conditions captured: <none>
[08:07:01.149] | : Chunk #2 of 2 ... DONE
[08:07:01.149] | : Launching 2 futures (chunks) ... DONE
[08:07:01.150] | : Resolving 2 futures (chunks) ...
[08:07:01.150] | : value() for list ...
[08:07:01.150] | : . recursive: 0
[08:07:01.150] | : . reduce: FALSE
[08:07:01.150] | : . length: 2

[08:07:01.150] | : . Number of remaining objects: 2
[08:07:01.150] | : . checking value #1:
[08:07:01.150] | : . 'obj' is MultisessionFuture
[08:07:01.150] | : . resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:01.151] | : . ' Cluster node socket connection: index=4, id=729
[08:07:01.151] | : . ' assertValidConnection() ...
[08:07:01.151] | : . ' , cluster node index: 1
[08:07:01.151] | : . ' assertValidConnection() ... done
[08:07:01.161] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:01.162] | : . resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:01.162] | : . checking value #2:
[08:07:01.162] | : . 'obj' is MultisessionFuture
[08:07:01.162] | : . resolved() for MultisessionFuture (‘future_mapply-2’) ...
[08:07:01.162] | : . ' Cluster node socket connection: index=5, id=730
[08:07:01.162] | : . ' assertValidConnection() ...
[08:07:01.163] | : . ' , cluster node index: 2
[08:07:01.163] | : . ' assertValidConnection() ... done
[08:07:01.173] | : . ' socketSelect(list(<connection #5 (id=730)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:01.173] | : . resolved() for MultisessionFuture (‘future_mapply-2’) ... done
[08:07:01.183] | : . Number of remaining objects: 2
[08:07:01.184] | : . checking value #1:
[08:07:01.184] | : . 'obj' is MultisessionFuture
[08:07:01.184] | : . resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:01.184] | : . ' Cluster node socket connection: index=4, id=729
[08:07:01.184] | : . ' assertValidConnection() ...
[08:07:01.184] | : . ' , cluster node index: 1
[08:07:01.185] | : . ' assertValidConnection() ... done
[08:07:01.195] | : . ' socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:01.195] | : . resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:01.195] | : . checking value #2:
[08:07:01.195] | : . 'obj' is MultisessionFuture
[08:07:01.195] | : . resolved() for MultisessionFuture (‘future_mapply-2’) ...
[08:07:01.196] | : . ' Cluster node socket connection: index=5, id=730
[08:07:01.196] | : . ' assertValidConnection() ...
[08:07:01.196] | : . ' , cluster node index: 2
[08:07:01.196] | : . ' assertValidConnection() ... done
[08:07:01.196] | : . ' receiveMessageFromWorker() for ClusterFuture ...
[08:07:01.196] | : . ' , cluster node index: 2
[08:07:01.197] | : . ' , [1] TRUE
[08:07:01.197] | : . ' , received data:
[08:07:01.197] | : . ' , List of 5
[08:07:01.197] | : . ' ,  $ type   : chr "VALUE"
[08:07:01.197] | : . ' ,  $ value  :List of 16
[08:07:01.197] | : . ' ,   ..$ value              :List of 1
[08:07:01.197] | : . ' ,   .. ..$ :List of 2
[08:07:01.197] | : . ' ,   .. .. ..$ x: int 0
[08:07:01.197] | : . ' ,   .. .. ..$ y: int 1
[08:07:01.197] | : . ' ,   ..$ visible            : logi TRUE
[08:07:01.197] | : . ' ,   ..$ stdout             : NULL
[08:07:01.197] | : . ' ,   ..$ conditions         : list()
[08:07:01.197] | : . ' ,   ..$ rng                : logi FALSE
[08:07:01.197] | : . ' ,   ..$ seed               : NULL
[08:07:01.197] | : . ' ,   ..$ misuseGlobalEnv    : NULL
[08:07:01.197] | : . ' ,   ..$ misuseConnections  :List of 3
[08:07:01.197] | : . ' ,   .. ..$ added   : NULL
[08:07:01.197] | : . ' ,   .. ..$ removed : NULL
[08:07:01.197] | : . ' ,   .. ..$ replaced: NULL
[08:07:01.197] | : . ' ,   ..$ misuseDevices      : NULL
[08:07:01.197] | : . ' ,   ..$ misuseDefaultDevice: list()
[08:07:01.197] | : . ' ,   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:01"
[08:07:01.197] | : . ' ,   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:01"
[08:07:01.197] | : . ' ,   ..$ uuid               : chr [1:2] "f4771e5023ec0cad125ea4ef8f863db5" "30"
[08:07:01.197] | : . ' ,   ..$ session_uuid       : chr "cff9dc43f82d54f766a25be23dee84a0"
[08:07:01.197] | : . ' ,   .. ..- attr(*, "source")=List of 5
[08:07:01.197] | : . ' ,   .. .. ..$ host  : Named chr "28bb34de9501"
[08:07:01.197] | : . ' ,   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:01.197] | : . ' ,   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:07:01.197] | : . ' ,   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:01.197] | : . ' ,   .. .. ..$ pid   : int 65455
[08:07:01.197] | : . ' ,   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:06:57"
[08:07:01.197] | : . ' ,   .. .. ..$ random: int 2147483647
[08:07:01.197] | : . ' ,   ..$ r_info             :List of 4
[08:07:01.197] | : . ' ,   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:01.197] | : . ' ,   .. .. ..$ : int [1:3] 4 5 1
[08:07:01.197] | : . ' ,   .. ..$ os           : chr "unix"
[08:07:01.197] | : . ' ,   .. ..$ os_name      : chr "Linux"
[08:07:01.197] | : . ' ,   .. ..$ captures_utf8: logi TRUE
[08:07:01.197] | : . ' ,   ..$ version            : chr "1.8"
[08:07:01.197] | : . ' ,   ..- attr(*, "class")= chr "FutureResult"
[08:07:01.197] | : . ' ,  $ success: logi TRUE
[08:07:01.197] | : . ' ,  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:07:01.197] | : . ' ,   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:01.197] | : . ' ,  $ tag    : NULL
[08:07:01.209] | : . ' , Received FutureResult
[08:07:01.209] | : . ' , FutureResult:
[08:07:01.209] | : . ' , value: ‘list’
[08:07:01.209] | : . ' , visible: TRUE
[08:07:01.209] | : . ' , stdout: NULL
[08:07:01.209] | : . ' , conditions: [n = 0] 
[08:07:01.209] | : . ' , RNG used: FALSE
[08:07:01.209] | : . ' , duration: 0.002611637 secs (started 2025-06-17 08:07:01.176955)
[08:07:01.209] | : . ' , version: 1.8
[08:07:01.209] | : . ' , FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ...
[08:07:01.209] | : . ' , ; Removed future from position #2
[08:07:01.210] | : . ' , ; Number of registered futures: 1
[08:07:01.210] | : . ' , FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ... done
[08:07:01.210] | : . ' , Erased future from future backend
[08:07:01.210] | : . ' , result() for ClusterFuture ...
[08:07:01.210] | : . ' , ; result already collected: FutureResult
[08:07:01.210] | : . ' , result() for ClusterFuture ... done
[08:07:01.210] | : . ' , signalConditions() ...
[08:07:01.210] | : . ' , ; include = ‘immediateCondition’
[08:07:01.210] | : . ' , ; exclude = 
[08:07:01.211] | : . ' , ; resignal = FALSE
[08:07:01.211] | : . ' , ; Number of conditions: 0
[08:07:01.211] | : . ' , ;  int 0
[08:07:01.211] | : . ' , signalConditions() ... done
[08:07:01.211] | : . ' receiveMessageFromWorker() for ClusterFuture ... done
[08:07:01.211] | : . ' receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:07:01.211] | : . resolved() for MultisessionFuture (‘future_mapply-2’) ... done
[08:07:01.212] | : . assertFutureResult() ...
[08:07:01.212] | : . ' Future uuid: f4771e5023ec0cad125ea4ef8f863db5[08:07:01.212] | : . ' Future uuid: 30
[08:07:01.212] | : . ' identical; success
[08:07:01.212] | : . assertFutureResult() ... done
[08:07:01.212] | : . MultisessionFuture #2
[08:07:01.212] | : . signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:07:01.212] | : . ' nx: 2
[08:07:01.212] | : . ' relay: TRUE
[08:07:01.212] | : . ' stdout: TRUE
[08:07:01.212] | : . ' signal: TRUE
[08:07:01.213] | : . ' resignal: FALSE
[08:07:01.213] | : . ' force: TRUE
[08:07:01.213] | : . ' relayed: [n=2] FALSE, FALSE
[08:07:01.213] | : . ' queued futures: [n=2] FALSE, FALSE
[08:07:01.213] | : . ' until=1
[08:07:01.213] | : . ' relaying element #1
[08:07:01.213] | : . ' relayed: [n=2] FALSE, FALSE
[08:07:01.213] | : . ' queued futures: [n=2] FALSE, TRUE
[08:07:01.213] | : . signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:07:01.213] | : . value(<MultisessionFuture>, ...) ...
[08:07:01.213] | : . value(<MultisessionFuture>, ...) ... done
[08:07:01.214] | : . value() for MultisessionFuture (‘future_mapply-2’) ...
[08:07:01.214] | : . ' result() for ClusterFuture ...
[08:07:01.214] | : . ' , result already collected: FutureResult
[08:07:01.214] | : . ' result() for ClusterFuture ... done
[08:07:01.214] | : . ' result() for ClusterFuture ...
[08:07:01.214] | : . ' , result already collected: FutureResult
[08:07:01.214] | : . ' result() for ClusterFuture ... done
[08:07:01.214] | : . ' signalConditions() ...
[08:07:01.214] | : . ' , include = ‘immediateCondition’
[08:07:01.215] | : . ' , exclude = 
[08:07:01.215] | : . ' , resignal = FALSE
[08:07:01.215] | : . ' , Number of conditions: 0
[08:07:01.215] | : . ' ,  int 0
[08:07:01.215] | : . ' signalConditions() ... done
[08:07:01.215] | : . ' check for misuse ...
[08:07:01.215] | : . ' check for misuse ... done
[08:07:01.216] | : . value() for MultisessionFuture (‘future_mapply-2’) ... done
[08:07:01.216] | : . value: <list>
[08:07:01.216] | : . signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:07:01.216] | : . ' nx: 2
[08:07:01.216] | : . ' relay: TRUE
[08:07:01.216] | : . ' stdout: TRUE
[08:07:01.216] | : . ' signal: TRUE
[08:07:01.216] | : . ' resignal: FALSE
[08:07:01.216] | : . ' force: TRUE
[08:07:01.216] | : . ' relayed: [n=2] FALSE, FALSE
[08:07:01.216] | : . ' queued futures: [n=2] FALSE, TRUE
[08:07:01.217] | : . ' until=1
[08:07:01.217] | : . ' relaying element #1
[08:07:01.217] | : . ' relayed: [n=2] FALSE, FALSE
[08:07:01.217] | : . ' queued futures: [n=2] FALSE, TRUE
[08:07:01.217] | : . signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:07:01.217] | : . resolve() for MultisessionFuture ...
[08:07:01.217] | : . resolve() for MultisessionFuture ... done
[08:07:01.217] | : . length: 1 (resolved future 2)
[08:07:01.217] | : value() for list ... done
[08:07:01.228] | : Number of remaining objects: 1
[08:07:01.228] | : checking value #1:
[08:07:01.228] | : 'obj' is MultisessionFuture
[08:07:01.228] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:01.228] | : . Cluster node socket connection: index=4, id=729
[08:07:01.229] | : . assertValidConnection() ...
[08:07:01.229] | : . ' cluster node index: 1
[08:07:01.229] | : . assertValidConnection() ... done
[08:07:01.239] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:01.239] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:01.250] | : Number of remaining objects: 1
[08:07:01.250] | : checking value #1:
[08:07:01.250] | : 'obj' is MultisessionFuture
[08:07:01.250] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:01.250] | : . Cluster node socket connection: index=4, id=729
[08:07:01.250] | : . assertValidConnection() ...
[08:07:01.251] | : . ' cluster node index: 1
[08:07:01.251] | : . assertValidConnection() ... done
[08:07:01.261] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:01.261] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:01.271] | : Number of remaining objects: 1
[08:07:01.272] | : checking value #1:
[08:07:01.272] | : 'obj' is MultisessionFuture
[08:07:01.272] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:01.272] | : . Cluster node socket connection: index=4, id=729
[08:07:01.272] | : . assertValidConnection() ...
[08:07:01.272] | : . ' cluster node index: 1
[08:07:01.273] | : . assertValidConnection() ... done
[08:07:01.283] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:01.283] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:01.293] | : Number of remaining objects: 1
[08:07:01.293] | : checking value #1:
[08:07:01.294] | : 'obj' is MultisessionFuture
[08:07:01.294] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:01.294] | : . Cluster node socket connection: index=4, id=729
[08:07:01.294] | : . assertValidConnection() ...
[08:07:01.294] | : . ' cluster node index: 1
[08:07:01.294] | : . assertValidConnection() ... done
[08:07:01.305] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:01.305] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:01.315] | : Number of remaining objects: 1
[08:07:01.315] | : checking value #1:
[08:07:01.315] | : 'obj' is MultisessionFuture
[08:07:01.315] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:01.316] | : . Cluster node socket connection: index=4, id=729
[08:07:01.316] | : . assertValidConnection() ...
[08:07:01.316] | : . ' cluster node index: 1
[08:07:01.316] | : . assertValidConnection() ... done
[08:07:01.326] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:01.327] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:01.337] | : Number of remaining objects: 1
[08:07:01.337] | : checking value #1:
[08:07:01.337] | : 'obj' is MultisessionFuture
[08:07:01.337] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:01.338] | : . Cluster node socket connection: index=4, id=729
[08:07:01.338] | : . assertValidConnection() ...
[08:07:01.338] | : . ' cluster node index: 1
[08:07:01.338] | : . assertValidConnection() ... done
[08:07:01.348] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:01.348] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:01.359] | : Number of remaining objects: 1
[08:07:01.359] | : checking value #1:
[08:07:01.359] | : 'obj' is MultisessionFuture
[08:07:01.359] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:01.359] | : . Cluster node socket connection: index=4, id=729
[08:07:01.360] | : . assertValidConnection() ...
[08:07:01.360] | : . ' cluster node index: 1
[08:07:01.360] | : . assertValidConnection() ... done
[08:07:01.370] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:01.370] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:01.381] | : Number of remaining objects: 1
[08:07:01.381] | : checking value #1:
[08:07:01.381] | : 'obj' is MultisessionFuture
[08:07:01.381] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:01.382] | : . Cluster node socket connection: index=4, id=729
[08:07:01.382] | : . assertValidConnection() ...
[08:07:01.382] | : . ' cluster node index: 1
[08:07:01.382] | : . assertValidConnection() ... done
[08:07:01.392] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:01.393] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:01.403] | : Number of remaining objects: 1
[08:07:01.403] | : checking value #1:
[08:07:01.403] | : 'obj' is MultisessionFuture
[08:07:01.403] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:01.404] | : . Cluster node socket connection: index=4, id=729
[08:07:01.404] | : . assertValidConnection() ...
[08:07:01.404] | : . ' cluster node index: 1
[08:07:01.404] | : . assertValidConnection() ... done
[08:07:01.415] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:01.415] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:01.425] | : Number of remaining objects: 1
[08:07:01.425] | : checking value #1:
[08:07:01.425] | : 'obj' is MultisessionFuture
[08:07:01.426] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:01.426] | : . Cluster node socket connection: index=4, id=729
[08:07:01.426] | : . assertValidConnection() ...
[08:07:01.426] | : . ' cluster node index: 1
[08:07:01.427] | : . assertValidConnection() ... done
[08:07:01.437] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:01.437] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:01.447] | : Number of remaining objects: 1
[08:07:01.448] | : checking value #1:
[08:07:01.448] | : 'obj' is MultisessionFuture
[08:07:01.448] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:01.448] | : . Cluster node socket connection: index=4, id=729
[08:07:01.449] | : . assertValidConnection() ...
[08:07:01.449] | : . ' cluster node index: 1
[08:07:01.449] | : . assertValidConnection() ... done
[08:07:01.459] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:01.459] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:01.470] | : Number of remaining objects: 1
[08:07:01.470] | : checking value #1:
[08:07:01.470] | : 'obj' is MultisessionFuture
[08:07:01.470] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:01.470] | : . Cluster node socket connection: index=4, id=729
[08:07:01.470] | : . assertValidConnection() ...
[08:07:01.471] | : . ' cluster node index: 1
[08:07:01.471] | : . assertValidConnection() ... done
[08:07:01.481] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:01.481] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:01.491] | : Number of remaining objects: 1
[08:07:01.492] | : checking value #1:
[08:07:01.492] | : 'obj' is MultisessionFuture
[08:07:01.492] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:01.492] | : . Cluster node socket connection: index=4, id=729
[08:07:01.492] | : . assertValidConnection() ...
[08:07:01.492] | : . ' cluster node index: 1
[08:07:01.493] | : . assertValidConnection() ... done
[08:07:01.503] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:01.503] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:01.513] | : Number of remaining objects: 1
[08:07:01.513] | : checking value #1:
[08:07:01.513] | : 'obj' is MultisessionFuture
[08:07:01.514] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:01.514] | : . Cluster node socket connection: index=4, id=729
[08:07:01.514] | : . assertValidConnection() ...
[08:07:01.514] | : . ' cluster node index: 1
[08:07:01.514] | : . assertValidConnection() ... done
[08:07:01.525] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:01.525] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:01.535] | : Number of remaining objects: 1
[08:07:01.535] | : checking value #1:
[08:07:01.535] | : 'obj' is MultisessionFuture
[08:07:01.535] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:01.536] | : . Cluster node socket connection: index=4, id=729
[08:07:01.536] | : . assertValidConnection() ...
[08:07:01.536] | : . ' cluster node index: 1
[08:07:01.536] | : . assertValidConnection() ... done
[08:07:01.546] | : . socketSelect(list(<connection #4 (id=729)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:01.547] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:01.557] | : Number of remaining objects: 1
[08:07:01.557] | : checking value #1:
[08:07:01.557] | : 'obj' is MultisessionFuture
[08:07:01.557] | : resolved() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:01.558] | : . Cluster node socket connection: index=4, id=729
[08:07:01.558] | : . assertValidConnection() ...
[08:07:01.558] | : . ' cluster node index: 1
[08:07:01.558] | : . assertValidConnection() ... done
[08:07:01.558] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:07:01.559] | : . ' cluster node index: 1
[08:07:01.559] | : . ' [1] TRUE
[08:07:01.559] | : . ' received data:
[08:07:01.559] | : . ' List of 5
[08:07:01.559] | : . '  $ type   : chr "VALUE"
[08:07:01.559] | : . '  $ value  :List of 16
[08:07:01.559] | : . '   ..$ value              :List of 1
[08:07:01.559] | : . '   .. ..$ :List of 2
[08:07:01.559] | : . '   .. .. ..$ x: int 1
[08:07:01.559] | : . '   .. .. ..$ y: int 0
[08:07:01.559] | : . '   ..$ visible            : logi TRUE
[08:07:01.559] | : . '   ..$ stdout             : NULL
[08:07:01.559] | : . '   ..$ conditions         : list()
[08:07:01.559] | : . '   ..$ rng                : logi FALSE
[08:07:01.559] | : . '   ..$ seed               : NULL
[08:07:01.559] | : . '   ..$ misuseGlobalEnv    : NULL
[08:07:01.559] | : . '   ..$ misuseConnections  :List of 3
[08:07:01.559] | : . '   .. ..$ added   : NULL
[08:07:01.559] | : . '   .. ..$ removed : NULL
[08:07:01.559] | : . '   .. ..$ replaced: NULL
[08:07:01.559] | : . '   ..$ misuseDevices      : NULL
[08:07:01.559] | : . '   ..$ misuseDefaultDevice: list()
[08:07:01.559] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:01"
[08:07:01.559] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:01"
[08:07:01.559] | : . '   ..$ uuid               : chr [1:2] "f4771e5023ec0cad125ea4ef8f863db5" "29"
[08:07:01.559] | : . '   ..$ session_uuid       : chr "59b306a9e84480e65c32ece688378702"
[08:07:01.559] | : . '   .. ..- attr(*, "source")=List of 5
[08:07:01.559] | : . '   .. .. ..$ host  : Named chr "28bb34de9501"
[08:07:01.559] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:01.559] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "28bb34de9501" ...
[08:07:01.559] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:01.559] | : . '   .. .. ..$ pid   : int 65456
[08:07:01.559] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:06:57"
[08:07:01.559] | : . '   .. .. ..$ random: int 2147483647
[08:07:01.559] | : . '   ..$ r_info             :List of 4
[08:07:01.559] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:01.559] | : . '   .. .. ..$ : int [1:3] 4 5 1
[08:07:01.559] | : . '   .. ..$ os           : chr "unix"
[08:07:01.559] | : . '   .. ..$ os_name      : chr "Linux"
[08:07:01.559] | : . '   .. ..$ captures_utf8: logi TRUE
[08:07:01.559] | : . '   ..$ version            : chr "1.8"
[08:07:01.559] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:07:01.559] | : . '  $ success: logi TRUE
[08:07:01.559] | : . '  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.505 0 0
[08:07:01.559] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:01.559] | : . '  $ tag    : NULL
[08:07:01.573] | : . ' Received FutureResult
[08:07:01.573] | : . ' FutureResult:
[08:07:01.573] | : . ' value: ‘list’
[08:07:01.573] | : . ' visible: TRUE
[08:07:01.573] | : . ' stdout: NULL
[08:07:01.573] | : . ' conditions: [n = 0] 
[08:07:01.573] | : . ' RNG used: FALSE
[08:07:01.573] | : . ' duration: 0.503787 secs (started 2025-06-17 08:07:01.049993)
[08:07:01.573] | : . ' version: 1.8
[08:07:01.574] | : . ' FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ...
[08:07:01.574] | : . ' , Removed future from position #1
[08:07:01.574] | : . ' , Number of registered futures: 0
[08:07:01.574] | : . ' FutureRegistry('workers-e636a28029c6e30b2bebe5fb0c115fc6', action = 'remove', earlySignal = 0) ... done
[08:07:01.574] | : . ' Erased future from future backend
[08:07:01.574] | : . ' result() for ClusterFuture ...
[08:07:01.574] | : . ' , result already collected: FutureResult
[08:07:01.574] | : . ' result() for ClusterFuture ... done
[08:07:01.575] | : . ' signalConditions() ...
[08:07:01.575] | : . ' , include = ‘immediateCondition’
[08:07:01.575] | : . ' , exclude = 
[08:07:01.575] | : . ' , resignal = FALSE
[08:07:01.575] | : . ' , Number of conditions: 0
[08:07:01.575] | : . ' ,  int 0
[08:07:01.575] | : . ' signalConditions() ... done
[08:07:01.576] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:07:01.576] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:07:01.576] | : resolved() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:01.576] | : assertFutureResult() ...
[08:07:01.576] | : . Future uuid: f4771e5023ec0cad125ea4ef8f863db5[08:07:01.576] | : . Future uuid: 29
[08:07:01.576] | : . identical; success
[08:07:01.576] | : assertFutureResult() ... done
[08:07:01.576] | : MultisessionFuture #1
[08:07:01.576] | : signalConditionsASAP(MultisessionFuture, pos=1) ...
[08:07:01.576] | : . nx: 2
[08:07:01.576] | : . relay: TRUE
[08:07:01.577] | : . stdout: TRUE
[08:07:01.577] | : . signal: TRUE
[08:07:01.577] | : . resignal: FALSE
[08:07:01.577] | : . force: TRUE
[08:07:01.577] | : . relayed: [n=2] FALSE, FALSE
[08:07:01.577] | : . queued futures: [n=2] FALSE, TRUE
[08:07:01.577] | : . until=1
[08:07:01.577] | : . relaying element #1
[08:07:01.577] | : . value() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:01.578] | : . ' result() for ClusterFuture ...
[08:07:01.578] | : . ' , result already collected: FutureResult
[08:07:01.578] | : . ' result() for ClusterFuture ... done
[08:07:01.578] | : . ' result() for ClusterFuture ...
[08:07:01.578] | : . ' , result already collected: FutureResult
[08:07:01.578] | : . ' result() for ClusterFuture ... done
[08:07:01.578] | : . ' signalConditions() ...
[08:07:01.578] | : . ' , include = ‘immediateCondition’
[08:07:01.578] | : . ' , exclude = 
[08:07:01.578] | : . ' , resignal = FALSE
[08:07:01.579] | : . ' , Number of conditions: 0
[08:07:01.579] | : . ' ,  int 0
[08:07:01.579] | : . ' signalConditions() ... done
[08:07:01.579] | : . ' relay stdout ...
[08:07:01.579] | : . ' relay stdout ... done
[08:07:01.579] | : . ' check for misuse ...
[08:07:01.580] | : . ' check for misuse ... done
[08:07:01.580] | : . value() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:01.580] | : . result() for ClusterFuture ...
[08:07:01.580] | : . ' result already collected: FutureResult
[08:07:01.580] | : . result() for ClusterFuture ... done
[08:07:01.580] | : . signalConditions() ...
[08:07:01.580] | : . ' include = ‘immediateCondition’
[08:07:01.580] | : . ' exclude = 
[08:07:01.580] | : . ' resignal = FALSE
[08:07:01.580] | : . ' Number of conditions: 0
[08:07:01.580] | : . '  int 0
[08:07:01.581] | : . signalConditions() ... done
[08:07:01.581] | : . result() for ClusterFuture ...
[08:07:01.581] | : . ' result already collected: FutureResult
[08:07:01.581] | : . result() for ClusterFuture ... done
[08:07:01.581] | : . signalConditions() ...
[08:07:01.581] | : . ' include = ‘condition’
[08:07:01.582] | : . ' exclude = ‘error’, ‘immediateCondition’
[08:07:01.582] | : . ' resignal = TRUE
[08:07:01.582] | : . ' Number of conditions: 0
[08:07:01.582] | : . '  int 0
[08:07:01.582] | : . signalConditions() ... done
[08:07:01.582] | : . relayed: [n=2] TRUE, FALSE
[08:07:01.582] | : . queued futures: [n=2] TRUE, TRUE
[08:07:01.583] | : signalConditionsASAP(MultisessionFuture, pos=1) ... done
[08:07:01.583] | : value(<MultisessionFuture>, ...) ...
[08:07:01.583] | : value(<MultisessionFuture>, ...) ... done
[08:07:01.583] | : value() for MultisessionFuture (‘future_mapply-1’) ...
[08:07:01.583] | : . result() for ClusterFuture ...
[08:07:01.583] | : . ' result already collected: FutureResult
[08:07:01.583] | : . result() for ClusterFuture ... done
[08:07:01.583] | : . result() for ClusterFuture ...
[08:07:01.583] | : . ' result already collected: FutureResult
[08:07:01.583] | : . result() for ClusterFuture ... done
[08:07:01.584] | : . signalConditions() ...
[08:07:01.584] | : . ' include = ‘immediateCondition’
[08:07:01.584] | : . ' exclude = 
[08:07:01.584] | : . ' resignal = FALSE
[08:07:01.584] | : . ' Number of conditions: 0
[08:07:01.584] | : . '  int 0
[08:07:01.584] | : . signalConditions() ... done
[08:07:01.585] | : . check for misuse ...
[08:07:01.585] | : . check for misuse ... done
[08:07:01.585] | : value() for MultisessionFuture (‘future_mapply-1’) ... done
[08:07:01.585] | : value: <list>
[08:07:01.585] | : signalConditionsASAP(MultisessionFuture, pos=1) ...
[08:07:01.585] | : . nx: 2
[08:07:01.585] | : . relay: TRUE
[08:07:01.585] | : . stdout: TRUE
[08:07:01.585] | : . signal: TRUE
[08:07:01.585] | : . resignal: FALSE
[08:07:01.586] | : . force: TRUE
[08:07:01.586] | : . relayed: [n=2] TRUE, FALSE
[08:07:01.586] | : . queued futures: [n=2] TRUE, TRUE
[08:07:01.586] | : . until=2
[08:07:01.586] | : . relaying element #2
[08:07:01.586] | : . value() for MultisessionFuture (‘future_mapply-2’) ...
[08:07:01.586] | : . ' result() for ClusterFuture ...
[08:07:01.586] | : . ' , result already collected: FutureResult
[08:07:01.586] | : . ' result() for ClusterFuture ... done
[08:07:01.586] | : . ' result() for ClusterFuture ...
[08:07:01.587] | : . ' , result already collected: FutureResult
[08:07:01.587] | : . ' result() for ClusterFuture ... done
[08:07:01.587] | : . ' signalConditions() ...
[08:07:01.587] | : . ' , include = ‘immediateCondition’
[08:07:01.587] | : . ' , exclude = 
[08:07:01.587] | : . ' , resignal = FALSE
[08:07:01.587] | : . ' , Number of conditions: 0
[08:07:01.587] | : . ' ,  int 0
[08:07:01.588] | : . ' signalConditions() ... done
[08:07:01.588] | : . ' relay stdout ...
[08:07:01.588] | : . ' relay stdout ... done
[08:07:01.588] | : . ' check for misuse ...
[08:07:01.588] | : . ' check for misuse ... done
[08:07:01.588] | : . value() for MultisessionFuture (‘future_mapply-2’) ... done
[08:07:01.588] | : . result() for ClusterFuture ...
[08:07:01.588] | : . ' result already collected: FutureResult
[08:07:01.588] | : . result() for ClusterFuture ... done
[08:07:01.589] | : . signalConditions() ...
[08:07:01.589] | : . ' include = ‘immediateCondition’
[08:07:01.589] | : . ' exclude = 
[08:07:01.589] | : . ' resignal = FALSE
[08:07:01.589] | : . ' Number of conditions: 0
[08:07:01.589] | : . '  int 0
[08:07:01.589] | : . signalConditions() ... done
[08:07:01.590] | : . result() for ClusterFuture ...
[08:07:01.590] | : . ' result already collected: FutureResult
[08:07:01.590] | : . result() for ClusterFuture ... done
[08:07:01.590] | : . signalConditions() ...
[08:07:01.590] | : . ' include = ‘condition’
[08:07:01.590] | : . ' exclude = ‘error’, ‘immediateCondition’
[08:07:01.590] | : . ' resignal = TRUE
[08:07:01.590] | : . ' Number of conditions: 0
[08:07:01.590] | : . '  int 0
[08:07:01.591] | : . signalConditions() ... done
[08:07:01.591] | : . relayed: [n=2] TRUE, TRUE
[08:07:01.591] | : . queued futures: [n=2] TRUE, TRUE
[08:07:01.591] | : signalConditionsASAP(MultisessionFuture, pos=1) ... done
[08:07:01.591] | : resolve() for MultisessionFuture ...
[08:07:01.591] | : resolve() for MultisessionFuture ... done
[08:07:01.591] | : length: 0 (resolved future 1)
[08:07:01.592] | future_mapply() -> future_xapply() ... done
[08:07:01.592] | Relaying remaining futures ...
[08:07:01.592] | : signalConditionsASAP(NULL, pos=0) ...
[08:07:01.592] | : . nx: 2
[08:07:01.592] | : . relay: TRUE
[08:07:01.592] | : . stdout: TRUE
[08:07:01.592] | : . signal: TRUE
[08:07:01.592] | : . resignal: FALSE
[08:07:01.592] | : . force: TRUE
[08:07:01.592] | : . relayed: [n=2] TRUE, TRUE
[08:07:01.592] | : . queued futures: [n=2] TRUE, TRUE
 - flush all
[08:07:01.593] | : . relayed: [n=2] TRUE, TRUE
[08:07:01.593] | : . queued futures: [n=2] TRUE, TRUE
[08:07:01.593] | : signalConditionsASAP(NULL, pos=0) ... done
[08:07:01.593] | Relaying remaining futures ... done
[08:07:01.593] future_mapply() ... done
[08:07:01.593]  - Number of value chunks collected: 2
[08:07:01.593] Resolving 2 futures (chunks) ... DONE
[08:07:01.593] Reducing values from 2 chunks ...
[08:07:01.593]  - Number of values collected after concatenation: 2
[08:07:01.594]  - Number of values expected: 2
[08:07:01.594] Reducing values from 2 chunks ... DONE


* future_mapply(x, ..., future.stdout = NA) ... DONE
* plan('multisession') ... DONE
  - Testing with 2 cores ... DONE

> message("*** future_*apply() and 'future.stdout' ... DONE")
*** future_*apply() and 'future.stdout' ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=3s, sys.self=0.3s, elapsed=1e+01s, user.child=1s, sys.child=0.7s
Test ‘stdout’ ... success
> 
