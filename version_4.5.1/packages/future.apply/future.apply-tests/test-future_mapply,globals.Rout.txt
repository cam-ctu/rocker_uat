
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-future_mapply,globals.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future.apply:::testme("future_mapply,globals")
Test ‘future_mapply,globals’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future.apply/testme/test-future_mapply,globals.R’

> library(future.apply)
Loading required package: future

> library(tools)

> message("*** future_mapply() - globals ...")
*** future_mapply() - globals ...

> plan(sequential)

> options(future.debug = FALSE)

> a <- 1

> b <- 2

> globals_set <- list(A = FALSE, B = TRUE, C = c("a", 
+     "b"), D = list(a = 1, b = 2))

> x <- list(1)

> for (name in names(globals_set)) {
+     globals <- globals_set[[name]]
+     message("Globals set ", sQuote(name))
+     str(globals)
+     y_truth .... [TRUNCATED] 
Globals set ‘A’
 logi FALSE
[1] 1
[1] 1
Globals set ‘B’
 logi TRUE
[1] 1
[1] 1
Globals set ‘C’
 chr [1:2] "a" "b"
[1] 1
[1] 1
Globals set ‘D’
List of 2
 $ a: num 1
 $ b: num 2
[1] 1
[1] 1

> message("*** future_mapply() - globals ... DONE")
*** future_mapply() - globals ... DONE

> message("*** future_mapply() - tricky globals ...")
*** future_mapply() - tricky globals ...

> my_add <- function(a, b) a + b

> call_my_add <- function(a, b) {
+     do.call(my_add, args = list(a = a, b = b))
+ }

> call_my_add_caller <- function(a, b, FUN = call_my_add) {
+     do.call(FUN, args = list(a = a, b = b))
+ }

> main <- function(x = 1:2, caller = call_my_add_caller, 
+     args = list(FUN = call_my_add)) {
+     results <- future_mapply(function(i) {
+       .... [TRUNCATED] 

> x <- list(list(1:2))

> z_length <- mapply(do.call, args = x, MoreArgs = list(what = length))

> fun <- function(...) sum(...)

> z_fun <- mapply(do.call, args = x, MoreArgs = list(what = fun))

> y0 <- NULL

> for (strategy in supportedStrategies()) {
+     plan(strategy)
+     y <- main(1:3)
+     if (is.null(y0)) 
+         y0 <- y
+     stopifnot(identi .... [TRUNCATED] 
- future_mapply(do.call, x, ...) ...
- future_mapply(FUN, x, ...) - passing arguments via '...' ...
- future_mapply(FUN, X, ...) - 'X' containing globals ...
 num [1:4] 85 12.5 66 15
 num [1:4] 85 12.5 66 15
- future_mapply(do.call, x, ...) ...
- future_mapply(FUN, x, ...) - passing arguments via '...' ...
- future_mapply(FUN, X, ...) - 'X' containing globals ...
 num [1:4] 85 12.5 66 15
 num [1:4] 85 12.5 66 15
- future_mapply(do.call, x, ...) ...
- future_mapply(FUN, x, ...) - passing arguments via '...' ...
- future_mapply(FUN, X, ...) - 'X' containing globals ...
 num [1:4] 85 12.5 66 15
 num [1:4] 85 12.5 66 15

> message("*** future_mapply() - tricky globals ... DONE")
*** future_mapply() - tricky globals ... DONE

> message("*** future_mapply() - missing arguments ...")
*** future_mapply() - missing arguments ...

> foo <- function(x, abc) mapply(function(y) y, x)

> y0 <- foo(1:2)

> foo <- function(x, abc) future_mapply(function(y) y, 
+     x)

> y <- foo(1:2)

> stopifnot(identical(y, y0))

> message("*** future_mapply() - missing arguments ... DONE")
*** future_mapply() - missing arguments ... DONE

> message("*** future_mapply() - false positives ...")
*** future_mapply() - false positives ...

> suppressWarnings(rm(list = "xyz"))

> foo <- function(x, abc) mapply(function(y) y, x)

> y0 <- foo(1:2, abc = (xyz >= 3.14))

> foo <- function(x, abc) future_mapply(function(y) y, 
+     x)

> y <- foo(1:2, abc = (xyz >= 3.14))

> stopifnot(identical(y, y0))

> message("*** future_mapply() - false positives ... DONE")
*** future_mapply() - false positives ... DONE

> message("*** future_mapply() - too large ...")
*** future_mapply() - too large ...

> X <- replicate(10, 1:100, simplify = FALSE)

> FUN <- function(x) {
+     getOption("future.globals.maxSize")
+ }

> y0 <- mapply(FUN = FUN, X)

> sizes <- unclass(c(FUN = object.size(FUN), X = object.size(X)))

> cat(sprintf("Baseline size of globals: %.2f KiB\n", 
+     sizes[["FUN"]]/1024))
Baseline size of globals: 1.80 KiB

> message("- true positive ...")
- true positive ...

> oMaxSize <- getOption("future.globals.maxSize")

> options(future.globals.maxSize = 1)

> res <- tryCatch({
+     y <- future_mapply(FUN = FUN, X)
+ }, error = identity)

> stopifnot(inherits(res, "error"))

> res <- NULL

> options(future.globals.maxSize = oMaxSize)

> maxSize <- getOption("future.globals.maxSize")

> y <- future_mapply(FUN = FUN, X)

> str(y)
List of 10
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL

> stopifnot(all(sapply(y, FUN = identical, oMaxSize)))

> message("- approximately invariant to chunk size ...")
- approximately invariant to chunk size ...

> maxSize <- sizes[["FUN"]] + sizes[["X"]]/length(X)

> maxSize <- 4 * maxSize

> options(future.globals.maxSize = maxSize)

> for (chunk.size in c(1, 2, 5, structure(10, ordering = "random"))) {
+     y <- future_mapply(FUN = FUN, X, future.chunk.size = chunk.size)
+     st .... [TRUNCATED] 
 num [1:10] 9222 9222 9222 9222 9222 ...
maxSize = 9222.4 bytes
future.globals.maxSize = 9222.4 bytes
 num [1:10] 9222 9222 9222 9222 9222 ...
maxSize = 9222.4 bytes
future.globals.maxSize = 9222.4 bytes
 num [1:10] 9222 9222 9222 9222 9222 ...
maxSize = 9222.4 bytes
future.globals.maxSize = 9222.4 bytes
 num [1:10] 9222 9222 9222 9222 9222 ...
maxSize = 9222.4 bytes
future.globals.maxSize = 9222.4 bytes

> y <- NULL

> options(future.globals.maxSize = oMaxSize)

> message("*** future_mapply() - too large ... DONE")
*** future_mapply() - too large ... DONE

> message("*** future_mapply() - globals exceptions ...")
*** future_mapply() - globals exceptions ...

> res <- tryCatch({
+     y <- future_mapply(function(x) x, 1, future.globals = 42)
+ }, error = identity)

> stopifnot(inherits(res, "error"))

> res <- tryCatch({
+     y <- future_mapply(function(x) x, 1, future.globals = list(1))
+ }, error = identity)

> stopifnot(inherits(res, "error"))

> res <- tryCatch({
+     y <- future_mapply(function(x) x, 1, future.globals = "...future.FUN")
+ }, error = identity)

> stopifnot(inherits(res, "error"))

> ...future.elements_ii <- 42

> X <- list(function() 2 * ...future.elements_ii)

> res <- tryCatch({
+     y <- future_mapply(FUN = function(f) f(), X)
+ }, error = identity)
Warning: Caught simpleError. Canceling all iterations ...

> stopifnot(inherits(res, "error"))

> message("*** future_mapply() - globals exceptions ... DONE")
*** future_mapply() - globals exceptions ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=3s, sys.self=0.2s, elapsed=5s, user.child=0.2s, sys.child=0.4s
Test ‘future_mapply,globals’ ... success
> 
