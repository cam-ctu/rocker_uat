
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-fold.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future.apply:::testme("fold")
Test ‘fold’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future.apply/testme/test-fold.R’

> loadNamespace("future.apply")
<environment: namespace:future.apply>

> message("*** fold() ...")
*** fold() ...

> x1s <- list(a = NULL, b = 1, c = c(a = 1, b = 2), 
+     d = 1:10000)

> x2s <- lapply(x1s, FUN = as.list)

> names(x2s) <- toupper(names(x1s))

> x3s <- list(E = data.frame(a = 1:3), F = data.frame(a = 1:3, 
+     b = letters[1:3], stringsAsFactors = FALSE))

> xs <- c(x1s, x2s, x3s)

> fcns <- list(c = base::c, cbind = base::cbind)

> for (kk in seq_along(xs)) {
+     x_name <- names(xs)[kk]
+     for (fcn_name in names(fcns)) {
+         fcn <- fcns[[fcn_name]]
+         message( .... [TRUNCATED] 
 - #1. c(x[['a']]) ...
List of 1
 $ x: NULL
List of 3
 $ y0: NULL
 $ y1: NULL
 $ y2: NULL
List of 3
 $ y0: NULL
 $ y1: NULL
 $ y2: NULL
 - #1. c(x[['a']]) ... DONE
 - #1. cbind(x[['a']]) ...
List of 1
 $ x: NULL
List of 3
 $ y0: NULL
 $ y1: NULL
 $ y2: NULL
List of 3
 $ y0: NULL
 $ y1: NULL
 $ y2: NULL
 - #1. cbind(x[['a']]) ... DONE
 - #2. c(x[['b']]) ...
List of 1
 $ x: num 1
List of 3
 $ y0: num 1
 $ y1: num 1
 $ y2: num 1
List of 3
 $ y0: num 1
 $ y1: num 1
 $ y2: num 1
 - #2. c(x[['b']]) ... DONE
 - #2. cbind(x[['b']]) ...
List of 1
 $ x: num 1
List of 3
 $ y0: num 1
 $ y1: num 1
 $ y2: num 1
List of 3
 $ y0: num 1
 $ y1: num 1
 $ y2: num 1
 - #2. cbind(x[['b']]) ... DONE
 - #3. c(x[['c']]) ...
List of 1
 $ x: Named num [1:2] 1 2
  ..- attr(*, "names")= chr [1:2] "a" "b"
List of 3
 $ y0: num [1:2] 1 2
 $ y1: num [1:2] 1 2
 $ y2: num [1:2] 1 2
List of 3
 $ y0: num [1:2] 1 2
 $ y1: num [1:2] 1 2
 $ y2: num [1:2] 1 2
 - #3. c(x[['c']]) ... DONE
 - #3. cbind(x[['c']]) ...
List of 1
 $ x: Named num [1:2] 1 2
  ..- attr(*, "names")= chr [1:2] "a" "b"
List of 3
 $ y0: num [1, 1:2] 1 2
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:2] "init" ""
 $ y1: num [1, 1:2] 1 2
 $ y2: num [1, 1:2] 1 2
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:2] "y" ""
List of 3
 $ y0: num [1, 1:2] 1 2
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:2] "" "init"
 $ y1: num [1, 1:2] 1 2
 $ y2: num [1, 1:2] 1 2
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:2] "" "y"
 - #3. cbind(x[['c']]) ... DONE
 - #4. c(x[['d']]) ...
List of 1
 $ x: int [1:10000] 1 2 3 4 5 6 7 8 9 10 ...
List of 3
 $ y0: int [1:10000] 1 2 3 4 5 6 7 8 9 10 ...
 $ y1: int [1:10000] 1 2 3 4 5 6 7 8 9 10 ...
 $ y2: int [1:10000] 1 2 3 4 5 6 7 8 9 10 ...
List of 3
 $ y0: int [1:10000] 1 2 3 4 5 6 7 8 9 10 ...
 $ y1: int [1:10000] 1 2 3 4 5 6 7 8 9 10 ...
 $ y2: int [1:10000] 1 2 3 4 5 6 7 8 9 10 ...
 - #4. c(x[['d']]) ... DONE
 - #4. cbind(x[['d']]) ...
List of 1
 $ x: int [1:10000] 1 2 3 4 5 6 7 8 9 10 ...
List of 3
 $ y0: int [1, 1:10000] 1 2 3 4 5 6 7 8 9 10 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:10000] "init" "" "" "" ...
 $ y1: int [1, 1:10000] 1 2 3 4 5 6 7 8 9 10 ...
 $ y2: int [1, 1:10000] 1 2 3 4 5 6 7 8 9 10 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:10000] "y" "" "" "" ...
List of 3
 $ y0: int [1, 1:10000] 1 2 3 4 5 6 7 8 9 10 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:10000] "" "" "" "" ...
 $ y1: int [1, 1:10000] 1 2 3 4 5 6 7 8 9 10 ...
 $ y2: int [1, 1:10000] 1 2 3 4 5 6 7 8 9 10 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:10000] "" "" "" "" ...
 - #4. cbind(x[['d']]) ... DONE
 - #5. c(x[['A']]) ...
List of 1
 $ x: list()
List of 3
 $ y0: NULL
 $ y1: NULL
 $ y2: NULL
List of 3
 $ y0: NULL
 $ y1: NULL
 $ y2: NULL
 - #5. c(x[['A']]) ... DONE
 - #5. cbind(x[['A']]) ...
List of 1
 $ x: list()
List of 3
 $ y0: NULL
 $ y1: NULL
 $ y2: NULL
List of 3
 $ y0: NULL
 $ y1: NULL
 $ y2: NULL
 - #5. cbind(x[['A']]) ... DONE
 - #6. c(x[['B']]) ...
List of 1
 $ x:List of 1
  ..$ : num 1
List of 3
 $ y0: num 1
 $ y1: num 1
 $ y2: num 1
List of 3
 $ y0: num 1
 $ y1: num 1
 $ y2: num 1
 - #6. c(x[['B']]) ... DONE
 - #6. cbind(x[['B']]) ...
List of 1
 $ x:List of 1
  ..$ : num 1
List of 3
 $ y0: num 1
 $ y1: num 1
 $ y2: num 1
List of 3
 $ y0: num 1
 $ y1: num 1
 $ y2: num 1
 - #6. cbind(x[['B']]) ... DONE
 - #7. c(x[['C']]) ...
List of 1
 $ x:List of 2
  ..$ a: num 1
  ..$ b: num 2
List of 3
 $ y0: num [1:2] 1 2
 $ y1: num [1:2] 1 2
 $ y2: num [1:2] 1 2
List of 3
 $ y0: num [1:2] 1 2
 $ y1: num [1:2] 1 2
 $ y2: num [1:2] 1 2
 - #7. c(x[['C']]) ... DONE
 - #7. cbind(x[['C']]) ...
List of 1
 $ x:List of 2
  ..$ a: num 1
  ..$ b: num 2
List of 3
 $ y0: num [1, 1:2] 1 2
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:2] "init" ""
 $ y1: num [1, 1:2] 1 2
 $ y2: num [1, 1:2] 1 2
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:2] "y" ""
List of 3
 $ y0: num [1, 1:2] 1 2
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:2] "" "init"
 $ y1: num [1, 1:2] 1 2
 $ y2: num [1, 1:2] 1 2
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:2] "" "y"
 - #7. cbind(x[['C']]) ... DONE
 - #8. c(x[['D']]) ...
List of 1
 $ x:List of 10000
  ..$ : int 1
  ..$ : int 2
  ..$ : int 3
  ..$ : int 4
  ..$ : int 5
  ..$ : int 6
  ..$ : int 7
  ..$ : int 8
  ..$ : int 9
  ..$ : int 10
  ..$ : int 11
  ..$ : int 12
  ..$ : int 13
  ..$ : int 14
  ..$ : int 15
  ..$ : int 16
  ..$ : int 17
  ..$ : int 18
  ..$ : int 19
  ..$ : int 20
  ..$ : int 21
  ..$ : int 22
  ..$ : int 23
  ..$ : int 24
  ..$ : int 25
  ..$ : int 26
  ..$ : int 27
  ..$ : int 28
  ..$ : int 29
  ..$ : int 30
  ..$ : int 31
  ..$ : int 32
  ..$ : int 33
  ..$ : int 34
  ..$ : int 35
  ..$ : int 36
  ..$ : int 37
  ..$ : int 38
  ..$ : int 39
  ..$ : int 40
  ..$ : int 41
  ..$ : int 42
  ..$ : int 43
  ..$ : int 44
  ..$ : int 45
  ..$ : int 46
  ..$ : int 47
  ..$ : int 48
  ..$ : int 49
  ..$ : int 50
  ..$ : int 51
  ..$ : int 52
  ..$ : int 53
  ..$ : int 54
  ..$ : int 55
  ..$ : int 56
  ..$ : int 57
  ..$ : int 58
  ..$ : int 59
  ..$ : int 60
  ..$ : int 61
  ..$ : int 62
  ..$ : int 63
  ..$ : int 64
  ..$ : int 65
  ..$ : int 66
  ..$ : int 67
  ..$ : int 68
  ..$ : int 69
  ..$ : int 70
  ..$ : int 71
  ..$ : int 72
  ..$ : int 73
  ..$ : int 74
  ..$ : int 75
  ..$ : int 76
  ..$ : int 77
  ..$ : int 78
  ..$ : int 79
  ..$ : int 80
  ..$ : int 81
  ..$ : int 82
  ..$ : int 83
  ..$ : int 84
  ..$ : int 85
  ..$ : int 86
  ..$ : int 87
  ..$ : int 88
  ..$ : int 89
  ..$ : int 90
  ..$ : int 91
  ..$ : int 92
  ..$ : int 93
  ..$ : int 94
  ..$ : int 95
  ..$ : int 96
  ..$ : int 97
  ..$ : int 98
  ..$ : int 99
  .. [list output truncated]
List of 3
 $ y0: int [1:10000] 1 2 3 4 5 6 7 8 9 10 ...
 $ y1: int [1:10000] 1 2 3 4 5 6 7 8 9 10 ...
 $ y2: int [1:10000] 1 2 3 4 5 6 7 8 9 10 ...
List of 3
 $ y0: int [1:10000] 1 2 3 4 5 6 7 8 9 10 ...
 $ y1: int [1:10000] 1 2 3 4 5 6 7 8 9 10 ...
 $ y2: int [1:10000] 1 2 3 4 5 6 7 8 9 10 ...
 - #8. c(x[['D']]) ... DONE
 - #8. cbind(x[['D']]) ...
List of 1
 $ x:List of 10000
  ..$ : int 1
  ..$ : int 2
  ..$ : int 3
  ..$ : int 4
  ..$ : int 5
  ..$ : int 6
  ..$ : int 7
  ..$ : int 8
  ..$ : int 9
  ..$ : int 10
  ..$ : int 11
  ..$ : int 12
  ..$ : int 13
  ..$ : int 14
  ..$ : int 15
  ..$ : int 16
  ..$ : int 17
  ..$ : int 18
  ..$ : int 19
  ..$ : int 20
  ..$ : int 21
  ..$ : int 22
  ..$ : int 23
  ..$ : int 24
  ..$ : int 25
  ..$ : int 26
  ..$ : int 27
  ..$ : int 28
  ..$ : int 29
  ..$ : int 30
  ..$ : int 31
  ..$ : int 32
  ..$ : int 33
  ..$ : int 34
  ..$ : int 35
  ..$ : int 36
  ..$ : int 37
  ..$ : int 38
  ..$ : int 39
  ..$ : int 40
  ..$ : int 41
  ..$ : int 42
  ..$ : int 43
  ..$ : int 44
  ..$ : int 45
  ..$ : int 46
  ..$ : int 47
  ..$ : int 48
  ..$ : int 49
  ..$ : int 50
  ..$ : int 51
  ..$ : int 52
  ..$ : int 53
  ..$ : int 54
  ..$ : int 55
  ..$ : int 56
  ..$ : int 57
  ..$ : int 58
  ..$ : int 59
  ..$ : int 60
  ..$ : int 61
  ..$ : int 62
  ..$ : int 63
  ..$ : int 64
  ..$ : int 65
  ..$ : int 66
  ..$ : int 67
  ..$ : int 68
  ..$ : int 69
  ..$ : int 70
  ..$ : int 71
  ..$ : int 72
  ..$ : int 73
  ..$ : int 74
  ..$ : int 75
  ..$ : int 76
  ..$ : int 77
  ..$ : int 78
  ..$ : int 79
  ..$ : int 80
  ..$ : int 81
  ..$ : int 82
  ..$ : int 83
  ..$ : int 84
  ..$ : int 85
  ..$ : int 86
  ..$ : int 87
  ..$ : int 88
  ..$ : int 89
  ..$ : int 90
  ..$ : int 91
  ..$ : int 92
  ..$ : int 93
  ..$ : int 94
  ..$ : int 95
  ..$ : int 96
  ..$ : int 97
  ..$ : int 98
  ..$ : int 99
  .. [list output truncated]
List of 3
 $ y0: int [1, 1:10000] 1 2 3 4 5 6 7 8 9 10 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:10000] "init" "" "" "" ...
 $ y1: int [1, 1:10000] 1 2 3 4 5 6 7 8 9 10 ...
 $ y2: int [1, 1:10000] 1 2 3 4 5 6 7 8 9 10 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:10000] "y" "" "" "" ...
List of 3
 $ y0: int [1, 1:10000] 1 2 3 4 5 6 7 8 9 10 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:10000] "" "" "" "" ...
 $ y1: int [1, 1:10000] 1 2 3 4 5 6 7 8 9 10 ...
 $ y2: int [1, 1:10000] 1 2 3 4 5 6 7 8 9 10 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:10000] "" "" "" "" ...
 - #8. cbind(x[['D']]) ... DONE
 - #9. c(x[['E']]) ...
List of 1
 $ x:'data.frame':	3 obs. of  1 variable:
  ..$ a: int [1:3] 1 2 3
List of 3
 $ y0: int [1:3] 1 2 3
 $ y1: int [1:3] 1 2 3
 $ y2: int [1:3] 1 2 3
List of 3
 $ y0: int [1:3] 1 2 3
 $ y1: int [1:3] 1 2 3
 $ y2: int [1:3] 1 2 3
 - #9. c(x[['E']]) ... DONE
 - #9. cbind(x[['E']]) ...
List of 1
 $ x:'data.frame':	3 obs. of  1 variable:
  ..$ a: int [1:3] 1 2 3
List of 3
 $ y0: int [1:3] 1 2 3
 $ y1: int [1:3] 1 2 3
 $ y2: int [1:3] 1 2 3
List of 3
 $ y0: int [1:3] 1 2 3
 $ y1: int [1:3] 1 2 3
 $ y2: int [1:3] 1 2 3
 - #9. cbind(x[['E']]) ... DONE
 - #10. c(x[['F']]) ...
List of 1
 $ x:'data.frame':	3 obs. of  2 variables:
  ..$ a: int [1:3] 1 2 3
  ..$ b: chr [1:3] "a" "b" "c"
List of 3
 $ y0: chr [1:6] "1" "2" "3" "a" ...
 $ y1: chr [1:6] "1" "2" "3" "a" ...
 $ y2: chr [1:6] "1" "2" "3" "a" ...
List of 3
 $ y0: chr [1:6] "1" "2" "3" "a" ...
 $ y1: chr [1:6] "1" "2" "3" "a" ...
 $ y2: chr [1:6] "1" "2" "3" "a" ...
 - #10. c(x[['F']]) ... DONE
 - #10. cbind(x[['F']]) ...
List of 1
 $ x:'data.frame':	3 obs. of  2 variables:
  ..$ a: int [1:3] 1 2 3
  ..$ b: chr [1:3] "a" "b" "c"
List of 3
 $ y0: chr [1:3, 1:2] "1" "2" "3" "a" ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:2] "init" ""
 $ y1: chr [1:3, 1:2] "1" "2" "3" "a" ...
 $ y2: chr [1:3, 1:2] "1" "2" "3" "a" ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:2] "y" ""
List of 3
 $ y0: chr [1:3, 1:2] "1" "2" "3" "a" ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:2] "" "init"
 $ y1: chr [1:3, 1:2] "1" "2" "3" "a" ...
 $ y2: chr [1:3, 1:2] "1" "2" "3" "a" ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:2] "" "y"
 - #10. cbind(x[['F']]) ... DONE

> make_table <- function(n) {
+     data.frame(key = sample(n), value = sample(n), stringsAsFactors = FALSE)
+ }

> sizes <- rep(10, 20)

> set.seed(3180)

> tables <- lapply(sizes, make_table)

> key_merge <- function(x, y) merge(x, y, by = "key", 
+     all = FALSE)

> suppressWarnings(folded <- fold(tables, key_merge, 
+     left = TRUE, unname = FALSE, threshold = 6))

> suppressWarnings(reduced <- Reduce(key_merge, tables[-1], 
+     tables[[1]]))

> stopifnot(all.equal(unname(folded), unname(reduced)))

> message("*** fold() ... DONE")
*** fold() ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=2s, sys.self=0.03s, elapsed=2s, user.child=0.002s, sys.child=0.003s
Test ‘fold’ ... success
> 
