
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-future_lapply,globals.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future.apply:::testme("future_lapply,globals")
Test ‘future_lapply,globals’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future.apply/testme/test-future_lapply,globals.R’

> library(future.apply)
Loading required package: future

> library(tools)

> options(future.debug = FALSE)

> options(future.apply.debug = TRUE)

> message("*** future_lapply() - globals ...")
*** future_lapply() - globals ...

> plan(cluster, workers = "localhost")

> a <- 1

> b <- 2

> globals_set <- list(A = FALSE, B = TRUE, C = c("a", 
+     "b"), D = list(a = 2, b = 3))

> x <- list(1)

> y_truth <- list(A = NULL, B = list(1), C = list(1), 
+     D = list(2))

> str(y_truth)
List of 4
 $ A: NULL
 $ B:List of 1
  ..$ : num 1
 $ C:List of 1
  ..$ : num 1
 $ D:List of 1
  ..$ : num 2

> for (name in names(globals_set)) {
+     globals <- globals_set[[name]]
+     message("Globals set ", sQuote(name))
+     y <- tryCatch({
+          .... [TRUNCATED] 
Globals set ‘A’
[08:05:06.552] future_lapply() ...
[08:05:06.559] | Globals in FUN(): [n=5] ‘{’, ‘median’, ‘c’, ‘a’, ‘b’
[08:05:06.559] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:06.560] | future_lapply() -> future_xapply() ...
[08:05:06.560] | : Number of chunks: 1
[08:05:06.561] | : getGlobalsAndPackagesXApply() ...
[08:05:06.561] | : . future.globals: FALSE
[08:05:06.564] | : . globals found/used: [n=2] ‘FUN’, ‘future.call.arguments’
[08:05:06.564] | : . needed namespaces: [n=0] 
[08:05:06.564] | : . use_args: TRUE
[08:05:06.564] | : . Getting '...' globals ...
[08:05:06.565] | : . ' '...' content: [n=0] 
[08:05:06.565] | : . ' List of 1
[08:05:06.565] | : . '  $ ...: list()
[08:05:06.565] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:06.565] | : . '  - attr(*, "where")=List of 1
[08:05:06.565] | : . '   ..$ ...:<environment: 0x5595ae4d6430> 
[08:05:06.565] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:06.565] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:06.565] | : . '  - attr(*, "total_size")= num NA
[08:05:06.568] | : . Getting '...' globals ... done
[08:05:06.569] | : . Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘future.call.arguments’, ‘...’
[08:05:06.569] | : . List of 3
[08:05:06.569] | : .  $ ...future.FUN        :function (x)  
[08:05:06.569] | : .  $ future.call.arguments: list()
[08:05:06.569] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:06.569] | : .  $ ...                  : list()
[08:05:06.569] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:06.569] | : .  - attr(*, "where")=List of 3
[08:05:06.569] | : .   ..$ ...future.FUN        :<environment: 0x5595ae4d6430> 
[08:05:06.569] | : .   ..$ future.call.arguments:<environment: 0x5595ae4d6430> 
[08:05:06.569] | : .   ..$ ...                  :<environment: 0x5595ae4d6430> 
[08:05:06.569] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:06.569] | : .  - attr(*, "resolved")= logi FALSE
[08:05:06.569] | : .  - attr(*, "total_size")= num 5448
[08:05:06.574] | : . Packages to be attached in all futures: [n=1] ‘utils’
[08:05:06.574] | : getGlobalsAndPackagesXApply() ... done
[08:05:06.574] | : Globals pass to each chunk: [n=6] ‘...future.FUN’, ‘future.call.arguments’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:06.574] | : List of 6
[08:05:06.574] | :  $ ...future.FUN            :function (x)  
[08:05:06.574] | :  $ future.call.arguments    : list()
[08:05:06.574] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:06.574] | :  $ ...                      : list()
[08:05:06.574] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:06.574] | :  $ ...future.elements_ii    : NULL
[08:05:06.574] | :  $ ...future.seeds_ii       : NULL
[08:05:06.574] | :  $ ...future.globals.maxSize: NULL
[08:05:06.574] | :  - attr(*, "where")=List of 6
[08:05:06.574] | :   ..$ ...future.FUN            :<environment: 0x5595ae4d6430> 
[08:05:06.574] | :   ..$ future.call.arguments    :<environment: 0x5595ae4d6430> 
[08:05:06.574] | :   ..$ ...                      :<environment: 0x5595ae4d6430> 
[08:05:06.574] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:06.574] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:06.574] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:06.574] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:06.574] | :  - attr(*, "resolved")= logi FALSE
[08:05:06.574] | :  - attr(*, "total_size")= num 5448
[08:05:06.581] | : Number of futures (= number of chunks): 1
[08:05:06.581] | : Launching 1 futures (chunks) ...
[08:05:06.581] | : Chunk #1 of 1 ...
[08:05:06.581] | :  - seeds: <none>
[08:05:06.581] | :  - All globals exported: [n=6] ‘...future.FUN’, ‘future.call.arguments’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:06.655] | : Created future:
[08:05:06.655] | : ClusterFuture:
[08:05:06.655] | : Label: ‘future_lapply-1’
[08:05:06.655] | : Expression:
[08:05:06.655] | : {
[08:05:06.655] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:06.655] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:06.655] | :     "# as a global variable                                         "
[08:05:06.655] | :     do.call(function(...) {
[08:05:06.655] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:06.655] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:06.655] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:06.655] | :         "# anonymous function.                                          "
[08:05:06.655] | :         "#                                                              "
[08:05:06.655] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:06.655] | :         "# function environment of FUN() to the calling environment.    "
[08:05:06.655] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:06.655] | :         "# global environment, which is where globals are written.      "
[08:05:06.655] | :         penv <- env <- environment(...future.FUN)
[08:05:06.655] | :         repeat {
[08:05:06.655] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:06.655] | :                 emptyenv())) 
[08:05:06.655] | :                 break
[08:05:06.655] | :             penv <- env
[08:05:06.655] | :             env <- parent.env(env)
[08:05:06.655] | :         }
[08:05:06.655] | :         if (identical(penv, globalenv())) {
[08:05:06.655] | :             environment(...future.FUN) <- environment()
[08:05:06.655] | :         }
[08:05:06.655] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:06.655] | :             !isNamespace(penv)) {
[08:05:06.655] | :             parent.env(penv) <- environment()
[08:05:06.655] | :         }
[08:05:06.655] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:06.655] | :         {
[08:05:06.655] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:06.655] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:06.655] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:06.655] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:06.655] | :                 on.exit(options(oopts), add = TRUE)
[08:05:06.655] | :             }
[08:05:06.655] | :             {
[08:05:06.655] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:06.655] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:06.655] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:06.655] | :                   {
[08:05:06.655] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:06.655] | :                   }
[08:05:06.655] | :                 })
[08:05:06.655] | :             }
[08:05:06.655] | :         }
[08:05:06.655] | :     }, args = future.call.arguments)
[08:05:06.655] | : }
[08:05:06.655] | : Globals: 5 objects totaling 5.48 KiB (function ‘...future.FUN’ of 683 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:06.655] | : Packages: 1 packages (‘utils’)
[08:05:06.655] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:06.655] | : Capture standard output: TRUE
[08:05:06.655] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:06.655] | : Immediate condition classes: ‘immediateCondition’
[08:05:06.655] | : Lazy evaluation: FALSE
[08:05:06.655] | : Local evaluation: TRUE
[08:05:06.655] | : Asynchronous evaluation: TRUE
[08:05:06.655] | : Early signaling: FALSE
[08:05:06.655] | : Environment: R_GlobalEnv
[08:05:06.655] | : State: ‘running’
[08:05:06.655] | : Resolved: FALSE
[08:05:06.655] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-1
[08:05:06.655] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:06.655] | : Class: ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:06.655] | : Value: <not collected>
[08:05:06.655] | : Conditions captured: <none>
[08:05:06.669] | : Chunk #1 of 1 ... DONE
[08:05:06.669] | : Launching 1 futures (chunks) ... DONE
[08:05:06.669] | : Resolving 1 futures (chunks) ...
[08:05:06.760] | : onError() ...
[08:05:06.761] | : . Received <simpleError>
Warning: Caught simpleError. Canceling all iterations ...
[08:05:06.761] | : . Signaling: <simpleError>
[08:05:06.761] | : onError() ... done
[08:05:06.761] | future_lapply() -> future_xapply() ... done
[08:05:06.762] future_lapply() ... done
<simpleError in ...future.FUN(...future.X_jj, ...): object 'a' not found>
Globals set ‘B’
[08:05:06.766] future_lapply() ...
[08:05:06.766] | Globals in FUN(): [n=5] ‘{’, ‘median’, ‘c’, ‘a’, ‘b’
[08:05:06.766] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:06.767] | future_lapply() -> future_xapply() ...
[08:05:06.767] | : Number of chunks: 1
[08:05:06.767] | : getGlobalsAndPackagesXApply() ...
[08:05:06.767] | : . future.globals: TRUE
[08:05:06.775] | : . globals found/used: [n=3] ‘FUN’, ‘a’, ‘b’
[08:05:06.775] | : . needed namespaces: [n=1] ‘stats’
[08:05:06.775] | : . use_args: TRUE
[08:05:06.776] | : . Getting '...' globals ...
[08:05:06.776] | : . ' '...' content: [n=0] 
[08:05:06.776] | : . ' List of 1
[08:05:06.776] | : . '  $ ...: list()
[08:05:06.776] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:06.776] | : . '  - attr(*, "where")=List of 1
[08:05:06.776] | : . '   ..$ ...:<environment: 0x5595af947660> 
[08:05:06.776] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:06.776] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:06.776] | : . '  - attr(*, "total_size")= num NA
[08:05:06.779] | : . Getting '...' globals ... done
[08:05:06.779] | : . Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘a’, ‘b’, ‘...’
[08:05:06.779] | : . List of 4
[08:05:06.779] | : .  $ ...future.FUN:function (x)  
[08:05:06.779] | : .  $ a            : num 1
[08:05:06.779] | : .  $ b            : num 2
[08:05:06.779] | : .  $ ...          : list()
[08:05:06.779] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:06.779] | : .  - attr(*, "where")=List of 4
[08:05:06.779] | : .   ..$ ...future.FUN:<environment: 0x5595af947660> 
[08:05:06.779] | : .   ..$ a            :<environment: R_GlobalEnv> 
[08:05:06.779] | : .   ..$ b            :<environment: R_GlobalEnv> 
[08:05:06.779] | : .   ..$ ...          :<environment: 0x5595af947660> 
[08:05:06.779] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:06.779] | : .  - attr(*, "resolved")= logi FALSE
[08:05:06.779] | : .  - attr(*, "total_size")= num 5429
[08:05:06.783] | : . Packages to be attached in all futures: [n=2] ‘stats’, ‘utils’
[08:05:06.783] | : getGlobalsAndPackagesXApply() ... done
[08:05:06.783] | : Globals pass to each chunk: [n=7] ‘...future.FUN’, ‘a’, ‘b’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:06.783] | : List of 7
[08:05:06.783] | :  $ ...future.FUN            :function (x)  
[08:05:06.783] | :  $ a                        : num 1
[08:05:06.783] | :  $ b                        : num 2
[08:05:06.783] | :  $ ...                      : list()
[08:05:06.783] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:06.783] | :  $ ...future.elements_ii    : NULL
[08:05:06.783] | :  $ ...future.seeds_ii       : NULL
[08:05:06.783] | :  $ ...future.globals.maxSize: NULL
[08:05:06.783] | :  - attr(*, "where")=List of 7
[08:05:06.783] | :   ..$ ...future.FUN            :<environment: 0x5595af947660> 
[08:05:06.783] | :   ..$ a                        :<environment: R_GlobalEnv> 
[08:05:06.783] | :   ..$ b                        :<environment: R_GlobalEnv> 
[08:05:06.783] | :   ..$ ...                      :<environment: 0x5595af947660> 
[08:05:06.783] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:06.783] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:06.783] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:06.783] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:06.783] | :  - attr(*, "resolved")= logi FALSE
[08:05:06.783] | :  - attr(*, "total_size")= num 5429
[08:05:06.789] | : Number of futures (= number of chunks): 1
[08:05:06.789] | : Launching 1 futures (chunks) ...
[08:05:06.789] | : Chunk #1 of 1 ...
[08:05:06.789] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:06.790] | :    + additional globals found: [n=0] 
[08:05:06.790] | :    + additional namespaces needed: [n=0] 
[08:05:06.790] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:06.790] | :  - seeds: <none>
[08:05:06.790] | :  - All globals exported: [n=7] ‘...future.FUN’, ‘a’, ‘b’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:06.828] | : Created future:
[08:05:06.828] | : ClusterFuture:
[08:05:06.828] | : Label: ‘future_lapply-1’
[08:05:06.828] | : Expression:
[08:05:06.828] | : {
[08:05:06.828] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:06.828] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:06.828] | :     "# as a global variable                                         "
[08:05:06.828] | :     do.call(function(...) {
[08:05:06.828] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:06.828] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:06.828] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:06.828] | :         "# anonymous function.                                          "
[08:05:06.828] | :         "#                                                              "
[08:05:06.828] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:06.828] | :         "# function environment of FUN() to the calling environment.    "
[08:05:06.828] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:06.828] | :         "# global environment, which is where globals are written.      "
[08:05:06.828] | :         penv <- env <- environment(...future.FUN)
[08:05:06.828] | :         repeat {
[08:05:06.828] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:06.828] | :                 emptyenv())) 
[08:05:06.828] | :                 break
[08:05:06.828] | :             penv <- env
[08:05:06.828] | :             env <- parent.env(env)
[08:05:06.828] | :         }
[08:05:06.828] | :         if (identical(penv, globalenv())) {
[08:05:06.828] | :             environment(...future.FUN) <- environment()
[08:05:06.828] | :         }
[08:05:06.828] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:06.828] | :             !isNamespace(penv)) {
[08:05:06.828] | :             parent.env(penv) <- environment()
[08:05:06.828] | :         }
[08:05:06.828] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:06.828] | :         {
[08:05:06.828] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:06.828] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:06.828] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:06.828] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:06.828] | :                 on.exit(options(oopts), add = TRUE)
[08:05:06.828] | :             }
[08:05:06.828] | :             {
[08:05:06.828] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:06.828] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:06.828] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:06.828] | :                   {
[08:05:06.828] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:06.828] | :                   }
[08:05:06.828] | :                 })
[08:05:06.828] | :             }
[08:05:06.828] | :         }
[08:05:06.828] | :     }, args = future.call.arguments)
[08:05:06.828] | : }
[08:05:06.828] | : Globals: 7 objects totaling 5.55 KiB (function ‘...future.FUN’ of 683 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, numeric ‘b’ of 39 bytes, ...)
[08:05:06.828] | : Packages: 2 packages (‘stats’, ‘utils’)
[08:05:06.828] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:06.828] | : Capture standard output: TRUE
[08:05:06.828] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:06.828] | : Immediate condition classes: ‘immediateCondition’
[08:05:06.828] | : Lazy evaluation: FALSE
[08:05:06.828] | : Local evaluation: TRUE
[08:05:06.828] | : Asynchronous evaluation: TRUE
[08:05:06.828] | : Early signaling: FALSE
[08:05:06.828] | : Environment: R_GlobalEnv
[08:05:06.828] | : State: ‘running’
[08:05:06.828] | : Resolved: FALSE
[08:05:06.828] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-2
[08:05:06.828] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:06.828] | : Class: ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:06.828] | : Value: <not collected>
[08:05:06.828] | : Conditions captured: <none>
[08:05:06.840] | : Chunk #1 of 1 ... DONE
[08:05:06.840] | : Launching 1 futures (chunks) ... DONE
[08:05:06.840] | : Resolving 1 futures (chunks) ...
[08:05:06.883] | :  - Number of value chunks collected: 1
[08:05:06.883] | : Resolving 1 futures (chunks) ... DONE
[08:05:06.883] | : Reducing values from 1 chunks ...
[08:05:06.883] | :  - Number of values collected after concatenation: 1
[08:05:06.884] | :  - Number of values expected: 1
[08:05:06.884] | : Reducing values from 1 chunks ... DONE
[08:05:06.884] | future_lapply() -> future_xapply() ... done
[08:05:06.884] future_lapply() ... done
[[1]]
[1] 1

Globals set ‘C’
[08:05:06.884] future_lapply() ...
[08:05:06.885] | Globals in FUN(): [n=5] ‘{’, ‘median’, ‘c’, ‘a’, ‘b’
[08:05:06.885] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:06.885] | future_lapply() -> future_xapply() ...
[08:05:06.886] | : Number of chunks: 1
[08:05:06.886] | : getGlobalsAndPackagesXApply() ...
[08:05:06.886] | : . future.globals: ‘a’, ‘b’
[08:05:06.886] | : . use_args: TRUE
[08:05:06.886] | : . Globals to be used in all futures (chunks): [n=4] ‘a’, ‘b’, ‘...future.FUN’, ‘...’
[08:05:06.886] | : . List of 4
[08:05:06.886] | : .  $ a            : num 1
[08:05:06.886] | : .  $ b            : num 2
[08:05:06.886] | : .  $ ...future.FUN:function (x)  
[08:05:06.886] | : .  $ ...          : list()
[08:05:06.886] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:06.886] | : .  - attr(*, "where")=List of 4
[08:05:06.886] | : .   ..$ a            :<environment: R_GlobalEnv> 
[08:05:06.886] | : .   ..$ b            :<environment: R_GlobalEnv> 
[08:05:06.886] | : .   ..$ ...future.FUN:<environment: 0x5595b033e9c8> 
[08:05:06.886] | : .   ..$ ...          :<environment: 0x5595b033e9c8> 
[08:05:06.886] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:06.886] | : .  - attr(*, "resolved")= logi FALSE
[08:05:06.886] | : .  - attr(*, "total_size")= num NA
[08:05:06.891] | : . Packages to be attached in all futures: [n=1] ‘utils’
[08:05:06.891] | : getGlobalsAndPackagesXApply() ... done
[08:05:06.891] | : Globals pass to each chunk: [n=7] ‘a’, ‘b’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:06.891] | : List of 7
[08:05:06.891] | :  $ a                        : num 1
[08:05:06.891] | :  $ b                        : num 2
[08:05:06.891] | :  $ ...future.FUN            :function (x)  
[08:05:06.891] | :  $ ...                      : list()
[08:05:06.891] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:06.891] | :  $ ...future.elements_ii    : NULL
[08:05:06.891] | :  $ ...future.seeds_ii       : NULL
[08:05:06.891] | :  $ ...future.globals.maxSize: NULL
[08:05:06.891] | :  - attr(*, "where")=List of 7
[08:05:06.891] | :   ..$ a                        :<environment: R_GlobalEnv> 
[08:05:06.891] | :   ..$ b                        :<environment: R_GlobalEnv> 
[08:05:06.891] | :   ..$ ...future.FUN            :<environment: 0x5595b033e9c8> 
[08:05:06.891] | :   ..$ ...                      :<environment: 0x5595b033e9c8> 
[08:05:06.891] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:06.891] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:06.891] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:06.891] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:06.891] | :  - attr(*, "resolved")= logi FALSE
[08:05:06.891] | :  - attr(*, "total_size")= num NA
[08:05:06.896] | : Number of futures (= number of chunks): 1
[08:05:06.897] | : Launching 1 futures (chunks) ...
[08:05:06.897] | : Chunk #1 of 1 ...
[08:05:06.897] | :  - seeds: <none>
[08:05:06.897] | :  - All globals exported: [n=7] ‘a’, ‘b’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:06.979] | : Created future:
[08:05:06.979] | : ClusterFuture:
[08:05:06.979] | : Label: ‘future_lapply-1’
[08:05:06.979] | : Expression:
[08:05:06.979] | : {
[08:05:06.979] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:06.979] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:06.979] | :     "# as a global variable                                         "
[08:05:06.979] | :     do.call(function(...) {
[08:05:06.979] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:06.979] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:06.979] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:06.979] | :         "# anonymous function.                                          "
[08:05:06.979] | :         "#                                                              "
[08:05:06.979] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:06.979] | :         "# function environment of FUN() to the calling environment.    "
[08:05:06.979] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:06.979] | :         "# global environment, which is where globals are written.      "
[08:05:06.979] | :         penv <- env <- environment(...future.FUN)
[08:05:06.979] | :         repeat {
[08:05:06.979] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:06.979] | :                 emptyenv())) 
[08:05:06.979] | :                 break
[08:05:06.979] | :             penv <- env
[08:05:06.979] | :             env <- parent.env(env)
[08:05:06.979] | :         }
[08:05:06.979] | :         if (identical(penv, globalenv())) {
[08:05:06.979] | :             environment(...future.FUN) <- environment()
[08:05:06.979] | :         }
[08:05:06.979] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:06.979] | :             !isNamespace(penv)) {
[08:05:06.979] | :             parent.env(penv) <- environment()
[08:05:06.979] | :         }
[08:05:06.979] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:06.979] | :         {
[08:05:06.979] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:06.979] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:06.979] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:06.979] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:06.979] | :                 on.exit(options(oopts), add = TRUE)
[08:05:06.979] | :             }
[08:05:06.979] | :             {
[08:05:06.979] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:06.979] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:06.979] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:06.979] | :                   {
[08:05:06.979] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:06.979] | :                   }
[08:05:06.979] | :                 })
[08:05:06.979] | :             }
[08:05:06.979] | :         }
[08:05:06.979] | :     }, args = future.call.arguments)
[08:05:06.979] | : }
[08:05:06.979] | : Globals: 7 objects totaling 5.57 KiB (function ‘...future.FUN’ of 683 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, numeric ‘b’ of 39 bytes, ...)
[08:05:06.979] | : Packages: 1 packages (‘utils’)
[08:05:06.979] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:06.979] | : Capture standard output: TRUE
[08:05:06.979] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:06.979] | : Immediate condition classes: ‘immediateCondition’
[08:05:06.979] | : Lazy evaluation: FALSE
[08:05:06.979] | : Local evaluation: TRUE
[08:05:06.979] | : Asynchronous evaluation: TRUE
[08:05:06.979] | : Early signaling: FALSE
[08:05:06.979] | : Environment: R_GlobalEnv
[08:05:06.979] | : State: ‘running’
[08:05:06.979] | : Resolved: FALSE
[08:05:06.979] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-3
[08:05:06.979] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:06.979] | : Class: ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:06.979] | : Value: <not collected>
[08:05:06.979] | : Conditions captured: <none>
[08:05:06.991] | : Chunk #1 of 1 ... DONE
[08:05:06.991] | : Launching 1 futures (chunks) ... DONE
[08:05:06.992] | : Resolving 1 futures (chunks) ...
[08:05:07.024] | :  - Number of value chunks collected: 1
[08:05:07.024] | : Resolving 1 futures (chunks) ... DONE
[08:05:07.024] | : Reducing values from 1 chunks ...
[08:05:07.024] | :  - Number of values collected after concatenation: 1
[08:05:07.024] | :  - Number of values expected: 1
[08:05:07.024] | : Reducing values from 1 chunks ... DONE
[08:05:07.024] | future_lapply() -> future_xapply() ... done
[08:05:07.024] future_lapply() ... done
[[1]]
[1] 1

Globals set ‘D’
[08:05:07.025] future_lapply() ...
[08:05:07.025] | Globals in FUN(): [n=5] ‘{’, ‘median’, ‘c’, ‘a’, ‘b’
[08:05:07.025] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:07.026] | future_lapply() -> future_xapply() ...
[08:05:07.026] | : Number of chunks: 1
[08:05:07.026] | : getGlobalsAndPackagesXApply() ...
[08:05:07.026] | : . future.globals: <name-value list> with names ‘a’, ‘b’
[08:05:07.026] | : . use_args: TRUE
[08:05:07.026] | : . Getting '...' globals ...
[08:05:07.027] | : . ' '...' content: [n=0] 
[08:05:07.027] | : . ' List of 1
[08:05:07.027] | : . '  $ ...: list()
[08:05:07.027] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.027] | : . '  - attr(*, "where")=List of 1
[08:05:07.027] | : . '   ..$ ...:<environment: 0x5595af07db50> 
[08:05:07.027] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.027] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:07.027] | : . '  - attr(*, "total_size")= num NA
[08:05:07.030] | : . Getting '...' globals ... done
[08:05:07.030] | : . Globals to be used in all futures (chunks): [n=4] ‘a’, ‘b’, ‘...future.FUN’, ‘...’
[08:05:07.030] | : . List of 4
[08:05:07.030] | : .  $ a            : num 2
[08:05:07.030] | : .  $ b            : num 3
[08:05:07.030] | : .  $ ...future.FUN:function (x)  
[08:05:07.030] | : .  $ ...          : list()
[08:05:07.030] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.030] | : .  - attr(*, "where")=List of 4
[08:05:07.030] | : .   ..$ a            :<environment: R_EmptyEnv> 
[08:05:07.030] | : .   ..$ b            :<environment: R_EmptyEnv> 
[08:05:07.030] | : .   ..$ ...future.FUN:<environment: R_GlobalEnv> 
[08:05:07.030] | : .   ..$ ...          :<environment: 0x5595af07db50> 
[08:05:07.030] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.030] | : .  - attr(*, "resolved")= logi FALSE
[08:05:07.030] | : .  - attr(*, "total_size")= num NA
[08:05:07.034] | : . Packages to be attached in all futures: [n=1] ‘utils’
[08:05:07.034] | : getGlobalsAndPackagesXApply() ... done
[08:05:07.034] | : Globals pass to each chunk: [n=7] ‘a’, ‘b’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:07.034] | : List of 7
[08:05:07.034] | :  $ a                        : num 2
[08:05:07.034] | :  $ b                        : num 3
[08:05:07.034] | :  $ ...future.FUN            :function (x)  
[08:05:07.034] | :  $ ...                      : list()
[08:05:07.034] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.034] | :  $ ...future.elements_ii    : NULL
[08:05:07.034] | :  $ ...future.seeds_ii       : NULL
[08:05:07.034] | :  $ ...future.globals.maxSize: NULL
[08:05:07.034] | :  - attr(*, "where")=List of 7
[08:05:07.034] | :   ..$ a                        :<environment: R_EmptyEnv> 
[08:05:07.034] | :   ..$ b                        :<environment: R_EmptyEnv> 
[08:05:07.034] | :   ..$ ...future.FUN            :<environment: R_GlobalEnv> 
[08:05:07.034] | :   ..$ ...                      :<environment: 0x5595af07db50> 
[08:05:07.034] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:07.034] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:07.034] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:07.034] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.034] | :  - attr(*, "resolved")= logi FALSE
[08:05:07.034] | :  - attr(*, "total_size")= num NA
[08:05:07.039] | : Number of futures (= number of chunks): 1
[08:05:07.040] | : Launching 1 futures (chunks) ...
[08:05:07.040] | : Chunk #1 of 1 ...
[08:05:07.040] | :  - seeds: <none>
[08:05:07.040] | :  - All globals exported: [n=7] ‘a’, ‘b’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:07.118] | : Created future:
[08:05:07.118] | : ClusterFuture:
[08:05:07.118] | : Label: ‘future_lapply-1’
[08:05:07.118] | : Expression:
[08:05:07.118] | : {
[08:05:07.118] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:07.118] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:07.118] | :     "# as a global variable                                         "
[08:05:07.118] | :     do.call(function(...) {
[08:05:07.118] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:07.118] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:07.118] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:07.118] | :         "# anonymous function.                                          "
[08:05:07.118] | :         "#                                                              "
[08:05:07.118] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:07.118] | :         "# function environment of FUN() to the calling environment.    "
[08:05:07.118] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:07.118] | :         "# global environment, which is where globals are written.      "
[08:05:07.118] | :         penv <- env <- environment(...future.FUN)
[08:05:07.118] | :         repeat {
[08:05:07.118] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:07.118] | :                 emptyenv())) 
[08:05:07.118] | :                 break
[08:05:07.118] | :             penv <- env
[08:05:07.118] | :             env <- parent.env(env)
[08:05:07.118] | :         }
[08:05:07.118] | :         if (identical(penv, globalenv())) {
[08:05:07.118] | :             environment(...future.FUN) <- environment()
[08:05:07.118] | :         }
[08:05:07.118] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:07.118] | :             !isNamespace(penv)) {
[08:05:07.118] | :             parent.env(penv) <- environment()
[08:05:07.118] | :         }
[08:05:07.118] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:07.118] | :         {
[08:05:07.118] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:07.118] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:07.118] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:07.118] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:07.118] | :                 on.exit(options(oopts), add = TRUE)
[08:05:07.118] | :             }
[08:05:07.118] | :             {
[08:05:07.118] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:07.118] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:07.118] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:07.118] | :                   {
[08:05:07.118] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:07.118] | :                   }
[08:05:07.118] | :                 })
[08:05:07.118] | :             }
[08:05:07.118] | :         }
[08:05:07.118] | :     }, args = future.call.arguments)
[08:05:07.118] | : }
[08:05:07.118] | : Globals: 7 objects totaling 5.62 KiB (function ‘...future.FUN’ of 683 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, numeric ‘b’ of 39 bytes, ...)
[08:05:07.118] | : Packages: 1 packages (‘utils’)
[08:05:07.118] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:07.118] | : Capture standard output: TRUE
[08:05:07.118] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:07.118] | : Immediate condition classes: ‘immediateCondition’
[08:05:07.118] | : Lazy evaluation: FALSE
[08:05:07.118] | : Local evaluation: TRUE
[08:05:07.118] | : Asynchronous evaluation: TRUE
[08:05:07.118] | : Early signaling: FALSE
[08:05:07.118] | : Environment: R_GlobalEnv
[08:05:07.118] | : State: ‘running’
[08:05:07.118] | : Resolved: FALSE
[08:05:07.118] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-4
[08:05:07.118] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:07.118] | : Class: ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:07.118] | : Value: <not collected>
[08:05:07.118] | : Conditions captured: <none>
[08:05:07.130] | : Chunk #1 of 1 ... DONE
[08:05:07.130] | : Launching 1 futures (chunks) ... DONE
[08:05:07.130] | : Resolving 1 futures (chunks) ...
[08:05:07.173] | :  - Number of value chunks collected: 1
[08:05:07.173] | : Resolving 1 futures (chunks) ... DONE
[08:05:07.173] | : Reducing values from 1 chunks ...
[08:05:07.173] | :  - Number of values collected after concatenation: 1
[08:05:07.173] | :  - Number of values expected: 1
[08:05:07.173] | : Reducing values from 1 chunks ... DONE
[08:05:07.173] | future_lapply() -> future_xapply() ... done
[08:05:07.174] future_lapply() ... done
[[1]]
[1] 2


> message("*** future_lapply() - globals ... DONE")
*** future_lapply() - globals ... DONE

> message("*** future_lapply() - manual globals ...")
*** future_lapply() - manual globals ...

> d <- 42

> y <- future_lapply(1:2, FUN = function(x) {
+     x * d
+ }, future.globals = structure(FALSE, add = "d"))
[08:05:07.174] future_lapply() ...
[08:05:07.175] | Globals in FUN(): [n=3] ‘{’, ‘*’, ‘d’
[08:05:07.175] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:07.175] | future_lapply() -> future_xapply() ...
[08:05:07.175] | : Number of chunks: 1
[08:05:07.175] | : getGlobalsAndPackagesXApply() ...
[08:05:07.176] | : . future.globals: FALSE
[08:05:07.176] | : . globals found/used: [n=3] ‘d’, ‘FUN’, ‘future.call.arguments’
[08:05:07.177] | : . needed namespaces: [n=0] 
[08:05:07.177] | : . use_args: TRUE
[08:05:07.177] | : . Getting '...' globals ...
[08:05:07.177] | : . ' '...' content: [n=0] 
[08:05:07.177] | : . ' List of 1
[08:05:07.177] | : . '  $ ...: list()
[08:05:07.177] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.177] | : . '  - attr(*, "where")=List of 1
[08:05:07.177] | : . '   ..$ ...:<environment: 0x5595b025dd30> 
[08:05:07.177] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.177] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:07.177] | : . '  - attr(*, "total_size")= num NA
[08:05:07.180] | : . Getting '...' globals ... done
[08:05:07.180] | : . Globals to be used in all futures (chunks): [n=4] ‘d’, ‘...future.FUN’, ‘future.call.arguments’, ‘...’
[08:05:07.181] | : . List of 4
[08:05:07.181] | : .  $ d                    : num 42
[08:05:07.181] | : .  $ ...future.FUN        :function (x)  
[08:05:07.181] | : .  $ future.call.arguments: list()
[08:05:07.181] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.181] | : .  $ ...                  : list()
[08:05:07.181] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.181] | : .  - attr(*, "where")=List of 4
[08:05:07.181] | : .   ..$ d                    :<environment: R_GlobalEnv> 
[08:05:07.181] | : .   ..$ ...future.FUN        :<environment: 0x5595b025dd30> 
[08:05:07.181] | : .   ..$ future.call.arguments:<environment: 0x5595b025dd30> 
[08:05:07.181] | : .   ..$ ...                  :<environment: 0x5595b025dd30> 
[08:05:07.181] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.181] | : .  - attr(*, "resolved")= logi FALSE
[08:05:07.181] | : .  - attr(*, "total_size")= num 3723
[08:05:07.185] | : . Packages to be attached in all futures: [n=0] 
[08:05:07.185] | : getGlobalsAndPackagesXApply() ... done
[08:05:07.185] | : Globals pass to each chunk: [n=7] ‘d’, ‘...future.FUN’, ‘future.call.arguments’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:07.185] | : List of 7
[08:05:07.185] | :  $ d                        : num 42
[08:05:07.185] | :  $ ...future.FUN            :function (x)  
[08:05:07.185] | :  $ future.call.arguments    : list()
[08:05:07.185] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.185] | :  $ ...                      : list()
[08:05:07.185] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.185] | :  $ ...future.elements_ii    : NULL
[08:05:07.185] | :  $ ...future.seeds_ii       : NULL
[08:05:07.185] | :  $ ...future.globals.maxSize: NULL
[08:05:07.185] | :  - attr(*, "where")=List of 7
[08:05:07.185] | :   ..$ d                        :<environment: R_GlobalEnv> 
[08:05:07.185] | :   ..$ ...future.FUN            :<environment: 0x5595b025dd30> 
[08:05:07.185] | :   ..$ future.call.arguments    :<environment: 0x5595b025dd30> 
[08:05:07.185] | :   ..$ ...                      :<environment: 0x5595b025dd30> 
[08:05:07.185] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:07.185] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:07.185] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:07.185] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.185] | :  - attr(*, "resolved")= logi FALSE
[08:05:07.185] | :  - attr(*, "total_size")= num 3723
[08:05:07.193] | : Number of futures (= number of chunks): 1
[08:05:07.193] | : Launching 1 futures (chunks) ...
[08:05:07.193] | : Chunk #1 of 1 ...
[08:05:07.193] | :  - seeds: <none>
[08:05:07.193] | :  - All globals exported: [n=7] ‘d’, ‘...future.FUN’, ‘future.call.arguments’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:07.269] | : Created future:
[08:05:07.270] | : ClusterFuture:
[08:05:07.270] | : Label: ‘future_lapply-1’
[08:05:07.270] | : Expression:
[08:05:07.270] | : {
[08:05:07.270] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:07.270] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:07.270] | :     "# as a global variable                                         "
[08:05:07.270] | :     do.call(function(...) {
[08:05:07.270] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:07.270] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:07.270] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:07.270] | :         "# anonymous function.                                          "
[08:05:07.270] | :         "#                                                              "
[08:05:07.270] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:07.270] | :         "# function environment of FUN() to the calling environment.    "
[08:05:07.270] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:07.270] | :         "# global environment, which is where globals are written.      "
[08:05:07.270] | :         penv <- env <- environment(...future.FUN)
[08:05:07.270] | :         repeat {
[08:05:07.270] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:07.270] | :                 emptyenv())) 
[08:05:07.270] | :                 break
[08:05:07.270] | :             penv <- env
[08:05:07.270] | :             env <- parent.env(env)
[08:05:07.270] | :         }
[08:05:07.270] | :         if (identical(penv, globalenv())) {
[08:05:07.270] | :             environment(...future.FUN) <- environment()
[08:05:07.270] | :         }
[08:05:07.270] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:07.270] | :             !isNamespace(penv)) {
[08:05:07.270] | :             parent.env(penv) <- environment()
[08:05:07.270] | :         }
[08:05:07.270] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:07.270] | :         {
[08:05:07.270] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:07.270] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:07.270] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:07.270] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:07.270] | :                 on.exit(options(oopts), add = TRUE)
[08:05:07.270] | :             }
[08:05:07.270] | :             {
[08:05:07.270] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:07.270] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:07.270] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:07.270] | :                   {
[08:05:07.270] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:07.270] | :                   }
[08:05:07.270] | :                 })
[08:05:07.270] | :             }
[08:05:07.270] | :         }
[08:05:07.270] | :     }, args = future.call.arguments)
[08:05:07.270] | : }
[08:05:07.270] | : Globals: 6 objects totaling 3.83 KiB (function ‘...future.FUN’ of 127 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, numeric ‘d’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[08:05:07.270] | : Packages: <none>
[08:05:07.270] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:07.270] | : Capture standard output: TRUE
[08:05:07.270] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:07.270] | : Immediate condition classes: ‘immediateCondition’
[08:05:07.270] | : Lazy evaluation: FALSE
[08:05:07.270] | : Local evaluation: TRUE
[08:05:07.270] | : Asynchronous evaluation: TRUE
[08:05:07.270] | : Early signaling: FALSE
[08:05:07.270] | : Environment: R_GlobalEnv
[08:05:07.270] | : State: ‘running’
[08:05:07.270] | : Resolved: FALSE
[08:05:07.270] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-5
[08:05:07.270] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:07.270] | : Class: ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:07.270] | : Value: <not collected>
[08:05:07.270] | : Conditions captured: <none>
[08:05:07.282] | : Chunk #1 of 1 ... DONE
[08:05:07.282] | : Launching 1 futures (chunks) ... DONE
[08:05:07.282] | : Resolving 1 futures (chunks) ...
[08:05:07.324] | :  - Number of value chunks collected: 1
[08:05:07.324] | : Resolving 1 futures (chunks) ... DONE
[08:05:07.324] | : Reducing values from 1 chunks ...
[08:05:07.324] | :  - Number of values collected after concatenation: 2
[08:05:07.324] | :  - Number of values expected: 2
[08:05:07.325] | : Reducing values from 1 chunks ... DONE
[08:05:07.325] | future_lapply() -> future_xapply() ... done
[08:05:07.325] future_lapply() ... done

> stopifnot(identical(y, list(42, 84)))

> e <- 42

> res <- tryCatch({
+     future_lapply(1:2, FUN = function(x) {
+         2 * e
+     }, future.globals = structure(TRUE, ignore = "e"))
+ }, error = .... [TRUNCATED] 
[08:05:07.325] future_lapply() ...
[08:05:07.326] | Globals in FUN(): [n=3] ‘{’, ‘*’, ‘e’
[08:05:07.326] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:07.326] | future_lapply() -> future_xapply() ...
[08:05:07.326] | : Number of chunks: 1
[08:05:07.326] | : getGlobalsAndPackagesXApply() ...
[08:05:07.326] | : . future.globals: TRUE
[08:05:07.332] | : . globals found/used: [n=1] ‘FUN’
[08:05:07.332] | : . needed namespaces: [n=0] 
[08:05:07.333] | : . use_args: TRUE
[08:05:07.333] | : . Getting '...' globals ...
[08:05:07.333] | : . ' '...' content: [n=0] 
[08:05:07.333] | : . ' List of 1
[08:05:07.333] | : . '  $ ...: list()
[08:05:07.333] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.333] | : . '  - attr(*, "where")=List of 1
[08:05:07.333] | : . '   ..$ ...:<environment: 0x5595aeb6fe98> 
[08:05:07.333] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.333] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:07.333] | : . '  - attr(*, "total_size")= num NA
[08:05:07.336] | : . Getting '...' globals ... done
[08:05:07.336] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:07.336] | : . List of 2
[08:05:07.336] | : .  $ ...future.FUN:function (x)  
[08:05:07.336] | : .  $ ...          : list()
[08:05:07.336] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.336] | : .  - attr(*, "where")=List of 2
[08:05:07.336] | : .   ..$ ...future.FUN:<environment: 0x5595aeb6fe98> 
[08:05:07.336] | : .   ..$ ...          :<environment: 0x5595aeb6fe98> 
[08:05:07.336] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.336] | : .  - attr(*, "resolved")= logi FALSE
[08:05:07.336] | : .  - attr(*, "total_size")= num 3614
[08:05:07.339] | : . Packages to be attached in all futures: [n=0] 
[08:05:07.339] | : getGlobalsAndPackagesXApply() ... done
[08:05:07.339] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:07.339] | : List of 5
[08:05:07.339] | :  $ ...future.FUN            :function (x)  
[08:05:07.339] | :  $ ...                      : list()
[08:05:07.339] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.339] | :  $ ...future.elements_ii    : NULL
[08:05:07.339] | :  $ ...future.seeds_ii       : NULL
[08:05:07.339] | :  $ ...future.globals.maxSize: NULL
[08:05:07.339] | :  - attr(*, "where")=List of 5
[08:05:07.339] | :   ..$ ...future.FUN            :<environment: 0x5595aeb6fe98> 
[08:05:07.339] | :   ..$ ...                      :<environment: 0x5595aeb6fe98> 
[08:05:07.339] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:07.339] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:07.339] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:07.339] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.339] | :  - attr(*, "resolved")= logi FALSE
[08:05:07.339] | :  - attr(*, "total_size")= num 3614
[08:05:07.343] | : Number of futures (= number of chunks): 1
[08:05:07.343] | : Launching 1 futures (chunks) ...
[08:05:07.344] | : Chunk #1 of 1 ...
[08:05:07.344] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:07.344] | :    + additional globals found: [n=0] 
[08:05:07.344] | :    + additional namespaces needed: [n=0] 
[08:05:07.344] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:07.344] | :  - seeds: <none>
[08:05:07.344] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:07.420] | : Created future:
[08:05:07.420] | : ClusterFuture:
[08:05:07.420] | : Label: ‘future_lapply-1’
[08:05:07.420] | : Expression:
[08:05:07.420] | : {
[08:05:07.420] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:07.420] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:07.420] | :     "# as a global variable                                         "
[08:05:07.420] | :     do.call(function(...) {
[08:05:07.420] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:07.420] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:07.420] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:07.420] | :         "# anonymous function.                                          "
[08:05:07.420] | :         "#                                                              "
[08:05:07.420] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:07.420] | :         "# function environment of FUN() to the calling environment.    "
[08:05:07.420] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:07.420] | :         "# global environment, which is where globals are written.      "
[08:05:07.420] | :         penv <- env <- environment(...future.FUN)
[08:05:07.420] | :         repeat {
[08:05:07.420] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:07.420] | :                 emptyenv())) 
[08:05:07.420] | :                 break
[08:05:07.420] | :             penv <- env
[08:05:07.420] | :             env <- parent.env(env)
[08:05:07.420] | :         }
[08:05:07.420] | :         if (identical(penv, globalenv())) {
[08:05:07.420] | :             environment(...future.FUN) <- environment()
[08:05:07.420] | :         }
[08:05:07.420] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:07.420] | :             !isNamespace(penv)) {
[08:05:07.420] | :             parent.env(penv) <- environment()
[08:05:07.420] | :         }
[08:05:07.420] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:07.420] | :         {
[08:05:07.420] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:07.420] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:07.420] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:07.420] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:07.420] | :                 on.exit(options(oopts), add = TRUE)
[08:05:07.420] | :             }
[08:05:07.420] | :             {
[08:05:07.420] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:07.420] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:07.420] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:07.420] | :                   {
[08:05:07.420] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:07.420] | :                   }
[08:05:07.420] | :                 })
[08:05:07.420] | :             }
[08:05:07.420] | :         }
[08:05:07.420] | :     }, args = future.call.arguments)
[08:05:07.420] | : }
[08:05:07.420] | : Globals: 5 objects totaling 3.82 KiB (function ‘...future.FUN’ of 139 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:07.420] | : Packages: <none>
[08:05:07.420] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:07.420] | : Capture standard output: TRUE
[08:05:07.420] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:07.420] | : Immediate condition classes: ‘immediateCondition’
[08:05:07.420] | : Lazy evaluation: FALSE
[08:05:07.420] | : Local evaluation: TRUE
[08:05:07.420] | : Asynchronous evaluation: TRUE
[08:05:07.420] | : Early signaling: FALSE
[08:05:07.420] | : Environment: R_GlobalEnv
[08:05:07.420] | : State: ‘running’
[08:05:07.420] | : Resolved: FALSE
[08:05:07.420] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-6
[08:05:07.420] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:07.420] | : Class: ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:07.420] | : Value: <not collected>
[08:05:07.420] | : Conditions captured: <none>
[08:05:07.432] | : Chunk #1 of 1 ... DONE
[08:05:07.432] | : Launching 1 futures (chunks) ... DONE
[08:05:07.432] | : Resolving 1 futures (chunks) ...
[08:05:07.475] | : onError() ...
[08:05:07.475] | : . Received <simpleError>
Warning: Caught simpleError. Canceling all iterations ...
[08:05:07.475] | : . Signaling: <simpleError>
[08:05:07.475] | : onError() ... done
[08:05:07.476] | future_lapply() -> future_xapply() ... done
[08:05:07.476] future_lapply() ... done

> stopifnot(inherits(res, "error"))

> message("*** future_lapply() - manual globals ... DONE")
*** future_lapply() - manual globals ... DONE

> message("*** future_lapply() - tricky globals ...")
*** future_lapply() - tricky globals ...

> my_add <- function(a, b) a + b

> call_my_add <- function(a, b) {
+     do.call(my_add, args = list(a = a, b = b))
+ }

> call_my_add_caller <- function(a, b, FUN = call_my_add) {
+     do.call(FUN, args = list(a = a, b = b))
+ }

> main <- function(x = 1:2, caller = call_my_add_caller, 
+     args = list(FUN = call_my_add)) {
+     results <- future_lapply(x, FUN = function(i)  .... [TRUNCATED] 

> x <- list(list(1:2))

> z_length <- lapply(x, FUN = do.call, what = length)

> fun <- function(...) sum(...)

> z_fun <- lapply(x, FUN = do.call, what = fun)

> y0 <- NULL

> for (strategy in supportedStrategies()) {
+     plan(strategy)
+     y <- main(1:3)
+     if (is.null(y0)) 
+         y0 <- y
+     stopifnot(identi .... [TRUNCATED] 
[08:05:07.566] future_lapply() ...
[08:05:07.567] | Globals in FUN(): [n=7] ‘{’, ‘do.call’, ‘caller’, ‘c’, ‘list’, ‘+’, ‘args’
[08:05:07.567] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:07.567] | future_lapply() -> future_xapply() ...
[08:05:07.567] | : Number of chunks: 1
[08:05:07.567] | : getGlobalsAndPackagesXApply() ...
[08:05:07.567] | : . future.globals: TRUE
[08:05:07.588] | : . globals found/used: [n=5] ‘FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’
[08:05:07.588] | : . needed namespaces: [n=0] 
[08:05:07.588] | : . use_args: TRUE
[08:05:07.588] | : . Getting '...' globals ...
[08:05:07.589] | : . ' '...' content: [n=0] 
[08:05:07.589] | : . ' List of 1
[08:05:07.589] | : . '  $ ...: list()
[08:05:07.589] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.589] | : . '  - attr(*, "where")=List of 1
[08:05:07.589] | : . '   ..$ ...:<environment: 0x5595b0db4c10> 
[08:05:07.589] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.589] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:07.589] | : . '  - attr(*, "total_size")= num NA
[08:05:07.591] | : . Getting '...' globals ... done
[08:05:07.592] | : . Globals to be used in all futures (chunks): [n=6] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’
[08:05:07.592] | : . List of 6
[08:05:07.592] | : .  $ ...future.FUN:function (i)  
[08:05:07.592] | : .  $ caller       :function (a, b, FUN = call_my_add)  
[08:05:07.592] | : .  $ args         :List of 1
[08:05:07.592] | : .   ..$ FUN:function (a, b)  
[08:05:07.592] | : .  $ call_my_add  :function (a, b)  
[08:05:07.592] | : .  $ my_add       :function (a, b)  
[08:05:07.592] | : .  $ ...          : list()
[08:05:07.592] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.592] | : .  - attr(*, "where")=List of 6
[08:05:07.592] | : .   ..$ ...future.FUN:<environment: 0x5595b0db4c10> 
[08:05:07.592] | : .   ..$ caller       :<environment: 0x5595b0db88e8> 
[08:05:07.592] | : .   ..$ args         :<environment: 0x5595b0db88e8> 
[08:05:07.592] | : .   ..$ call_my_add  :<environment: R_GlobalEnv> 
[08:05:07.592] | : .   ..$ my_add       :<environment: R_GlobalEnv> 
[08:05:07.592] | : .   ..$ ...          :<environment: 0x5595b0db4c10> 
[08:05:07.592] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.592] | : .  - attr(*, "resolved")= logi FALSE
[08:05:07.592] | : .  - attr(*, "total_size")= num 6429
[08:05:07.597] | : . Packages to be attached in all futures: [n=0] 
[08:05:07.597] | : getGlobalsAndPackagesXApply() ... done
[08:05:07.597] | : Globals pass to each chunk: [n=9] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:07.597] | : List of 9
[08:05:07.597] | :  $ ...future.FUN            :function (i)  
[08:05:07.597] | :  $ caller                   :function (a, b, FUN = call_my_add)  
[08:05:07.597] | :  $ args                     :List of 1
[08:05:07.597] | :   ..$ FUN:function (a, b)  
[08:05:07.597] | :  $ call_my_add              :function (a, b)  
[08:05:07.597] | :  $ my_add                   :function (a, b)  
[08:05:07.597] | :  $ ...                      : list()
[08:05:07.597] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.597] | :  $ ...future.elements_ii    : NULL
[08:05:07.597] | :  $ ...future.seeds_ii       : NULL
[08:05:07.597] | :  $ ...future.globals.maxSize: NULL
[08:05:07.597] | :  - attr(*, "where")=List of 9
[08:05:07.597] | :   ..$ ...future.FUN            :<environment: 0x5595b0db4c10> 
[08:05:07.597] | :   ..$ caller                   :<environment: 0x5595b0db88e8> 
[08:05:07.597] | :   ..$ args                     :<environment: 0x5595b0db88e8> 
[08:05:07.597] | :   ..$ call_my_add              :<environment: R_GlobalEnv> 
[08:05:07.597] | :   ..$ my_add                   :<environment: R_GlobalEnv> 
[08:05:07.597] | :   ..$ ...                      :<environment: 0x5595b0db4c10> 
[08:05:07.597] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:07.597] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:07.597] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:07.597] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.597] | :  - attr(*, "resolved")= logi FALSE
[08:05:07.597] | :  - attr(*, "total_size")= num 6429
[08:05:07.603] | : Number of futures (= number of chunks): 1
[08:05:07.603] | : Launching 1 futures (chunks) ...
[08:05:07.603] | : Chunk #1 of 1 ...
[08:05:07.604] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:07.604] | :    + additional globals found: [n=0] 
[08:05:07.604] | :    + additional namespaces needed: [n=0] 
[08:05:07.604] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:07.604] | :  - seeds: <none>
[08:05:07.604] | :  - All globals exported: [n=9] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:07.615] | : Created future:
[08:05:07.615] | : SequentialFuture:
[08:05:07.615] | : Label: ‘future_lapply-1’
[08:05:07.615] | : Expression:
[08:05:07.615] | : {
[08:05:07.615] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:07.615] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:07.615] | :     "# as a global variable                                         "
[08:05:07.615] | :     do.call(function(...) {
[08:05:07.615] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:07.615] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:07.615] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:07.615] | :         "# anonymous function.                                          "
[08:05:07.615] | :         "#                                                              "
[08:05:07.615] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:07.615] | :         "# function environment of FUN() to the calling environment.    "
[08:05:07.615] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:07.615] | :         "# global environment, which is where globals are written.      "
[08:05:07.615] | :         penv <- env <- environment(...future.FUN)
[08:05:07.615] | :         repeat {
[08:05:07.615] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:07.615] | :                 emptyenv())) 
[08:05:07.615] | :                 break
[08:05:07.615] | :             penv <- env
[08:05:07.615] | :             env <- parent.env(env)
[08:05:07.615] | :         }
[08:05:07.615] | :         if (identical(penv, globalenv())) {
[08:05:07.615] | :             environment(...future.FUN) <- environment()
[08:05:07.615] | :         }
[08:05:07.615] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:07.615] | :             !isNamespace(penv)) {
[08:05:07.615] | :             parent.env(penv) <- environment()
[08:05:07.615] | :         }
[08:05:07.615] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:07.615] | :         {
[08:05:07.615] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:07.615] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:07.615] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:07.615] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:07.615] | :                 on.exit(options(oopts), add = TRUE)
[08:05:07.615] | :             }
[08:05:07.615] | :             {
[08:05:07.615] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:07.615] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:07.615] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:07.615] | :                   {
[08:05:07.615] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:07.615] | :                   }
[08:05:07.615] | :                 })
[08:05:07.615] | :             }
[08:05:07.615] | :         }
[08:05:07.615] | :     }, args = future.call.arguments)
[08:05:07.615] | : }
[08:05:07.615] | : Globals: 9 objects totaling 8.83 KiB (function ‘...future.FUN’ of 2.77 KiB, list ‘args’ of 928 bytes, function ‘caller’ of 904 bytes, function ‘call_my_add’ of 876 bytes, function ‘my_add’ of 114 bytes, ...)
[08:05:07.615] | : Packages: <none>
[08:05:07.615] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:07.615] | : Capture standard output: TRUE
[08:05:07.615] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:07.615] | : Immediate condition classes: ‘immediateCondition’
[08:05:07.615] | : Lazy evaluation: FALSE
[08:05:07.615] | : Local evaluation: TRUE
[08:05:07.615] | : Asynchronous evaluation: TRUE
[08:05:07.615] | : Early signaling: FALSE
[08:05:07.615] | : Environment: 0x5595b0db88e8
[08:05:07.615] | : State: ‘finished’
[08:05:07.615] | : Resolved: TRUE
[08:05:07.615] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-7
[08:05:07.615] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:07.615] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:05:07.615] | : Value: 67 bytes of class ‘list’
[08:05:07.615] | : Duration: 0.006598711 secs (started 2025-06-17 08:05:07.608254)
[08:05:07.615] | : Worker process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:07.617] | : Chunk #1 of 1 ... DONE
[08:05:07.617] | : Launching 1 futures (chunks) ... DONE
[08:05:07.617] | : Resolving 1 futures (chunks) ...
[08:05:07.618] | :  - Number of value chunks collected: 1
[08:05:07.618] | : Resolving 1 futures (chunks) ... DONE
[08:05:07.618] | : Reducing values from 1 chunks ...
[08:05:07.618] | :  - Number of values collected after concatenation: 3
[08:05:07.618] | :  - Number of values expected: 3
[08:05:07.618] | : Reducing values from 1 chunks ... DONE
[08:05:07.618] | future_lapply() -> future_xapply() ... done
[08:05:07.618] future_lapply() ... done
- future_lapply(x, FUN = do.call, ...) ...
[08:05:07.618] future_lapply() ...
[08:05:07.620] | Globals in FUN(): [n=10] ‘parent.frame’, ‘{’, ‘if’, ‘!’, ‘is.list’, ‘stop’, ‘<-’, ‘lapply’, ‘enquote’, ‘.Internal’
[08:05:07.620] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:07.620] | future_lapply() -> future_xapply() ...
[08:05:07.621] | : Number of chunks: 1
[08:05:07.621] | : getGlobalsAndPackagesXApply() ...
[08:05:07.621] | : . future.globals: TRUE
[08:05:07.637] | : . globals found/used: [n=1] ‘FUN’
[08:05:07.637] | : . needed namespaces: [n=0] 
[08:05:07.638] | : . use_args: TRUE
[08:05:07.638] | : . Getting '...' globals ...
[08:05:07.638] | : . ' '...' content: [n=1] ‘what’
[08:05:07.638] | : . ' List of 1
[08:05:07.638] | : . '  $ ...:List of 1
[08:05:07.638] | : . '   ..$ what:function (x)  
[08:05:07.638] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.638] | : . '  - attr(*, "where")=List of 1
[08:05:07.638] | : . '   ..$ ...:<environment: 0x5595aeb865e8> 
[08:05:07.638] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.638] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:07.638] | : . '  - attr(*, "total_size")= num NA
[08:05:07.641] | : . Getting '...' globals ... done
[08:05:07.641] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:07.641] | : . List of 2
[08:05:07.641] | : .  $ ...future.FUN:function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:07.641] | : .  $ ...          :List of 1
[08:05:07.641] | : .   ..$ what:function (x)  
[08:05:07.641] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.641] | : .  - attr(*, "where")=List of 2
[08:05:07.641] | : .   ..$ ...future.FUN:<environment: 0x5595aeb865e8> 
[08:05:07.641] | : .   ..$ ...          :<environment: 0x5595aeb865e8> 
[08:05:07.641] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.641] | : .  - attr(*, "resolved")= logi FALSE
[08:05:07.641] | : .  - attr(*, "total_size")= num 7368
[08:05:07.644] | : . Packages to be attached in all futures: [n=0] 
[08:05:07.644] | : getGlobalsAndPackagesXApply() ... done
[08:05:07.645] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:07.645] | : List of 5
[08:05:07.645] | :  $ ...future.FUN            :function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:07.645] | :  $ ...                      :List of 1
[08:05:07.645] | :   ..$ what:function (x)  
[08:05:07.645] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.645] | :  $ ...future.elements_ii    : NULL
[08:05:07.645] | :  $ ...future.seeds_ii       : NULL
[08:05:07.645] | :  $ ...future.globals.maxSize: NULL
[08:05:07.645] | :  - attr(*, "where")=List of 5
[08:05:07.645] | :   ..$ ...future.FUN            :<environment: 0x5595aeb865e8> 
[08:05:07.645] | :   ..$ ...                      :<environment: 0x5595aeb865e8> 
[08:05:07.645] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:07.645] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:07.645] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:07.645] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.645] | :  - attr(*, "resolved")= logi FALSE
[08:05:07.645] | :  - attr(*, "total_size")= num 7368
[08:05:07.649] | : Number of futures (= number of chunks): 1
[08:05:07.651] | : Launching 1 futures (chunks) ...
[08:05:07.651] | : Chunk #1 of 1 ...
[08:05:07.651] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:07.652] | :    + additional globals found: [n=0] 
[08:05:07.652] | :    + additional namespaces needed: [n=0] 
[08:05:07.652] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:07.652] | :  - seeds: <none>
[08:05:07.652] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:07.656] | : Created future:
[08:05:07.656] | : SequentialFuture:
[08:05:07.656] | : Label: ‘future_lapply-1’
[08:05:07.656] | : Expression:
[08:05:07.656] | : {
[08:05:07.656] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:07.656] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:07.656] | :     "# as a global variable                                         "
[08:05:07.656] | :     do.call(function(...) {
[08:05:07.656] | :         "# future.apply:::future_xapply(): preserve future option"
[08:05:07.656] | :         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:07.656] | :         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:07.656] | :             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:07.656] | :             on.exit(options(oopts), add = TRUE)
[08:05:07.656] | :         }
[08:05:07.656] | :         {
[08:05:07.656] | :             "# future.apply::future_lapply(): process chunk of elements"
[08:05:07.656] | :             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:07.656] | :                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:07.656] | :                 {
[08:05:07.656] | :                   ...future.FUN(...future.X_jj, ...)
[08:05:07.656] | :                 }
[08:05:07.656] | :             })
[08:05:07.656] | :         }
[08:05:07.656] | :     }, args = future.call.arguments)
[08:05:07.656] | : }
[08:05:07.656] | : Globals: 5 objects totaling 7.38 KiB (function ‘...future.FUN’ of 1.79 KiB, DotDotDotList ‘future.call.arguments’ of 152 bytes, list ‘...future.elements_ii’ of 149 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:07.656] | : Packages: <none>
[08:05:07.656] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:07.656] | : Capture standard output: TRUE
[08:05:07.656] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:07.656] | : Immediate condition classes: ‘immediateCondition’
[08:05:07.656] | : Lazy evaluation: FALSE
[08:05:07.656] | : Local evaluation: TRUE
[08:05:07.656] | : Asynchronous evaluation: TRUE
[08:05:07.656] | : Early signaling: FALSE
[08:05:07.656] | : Environment: R_GlobalEnv
[08:05:07.656] | : State: ‘finished’
[08:05:07.656] | : Resolved: TRUE
[08:05:07.656] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-8
[08:05:07.656] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:07.656] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:05:07.656] | : Value: 43 bytes of class ‘list’
[08:05:07.656] | : Duration: 0.002228498 secs (started 2025-06-17 08:05:07.653335)
[08:05:07.656] | : Worker process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:07.657] | : Chunk #1 of 1 ... DONE
[08:05:07.657] | : Launching 1 futures (chunks) ... DONE
[08:05:07.657] | : Resolving 1 futures (chunks) ...
[08:05:07.657] | :  - Number of value chunks collected: 1
[08:05:07.658] | : Resolving 1 futures (chunks) ... DONE
[08:05:07.658] | : Reducing values from 1 chunks ...
[08:05:07.658] | :  - Number of values collected after concatenation: 1
[08:05:07.658] | :  - Number of values expected: 1
[08:05:07.658] | : Reducing values from 1 chunks ... DONE
[08:05:07.658] | future_lapply() -> future_xapply() ... done
[08:05:07.658] future_lapply() ... done
[08:05:07.658] future_lapply() ...
[08:05:07.659] | Globals in FUN(): [n=10] ‘parent.frame’, ‘{’, ‘if’, ‘!’, ‘is.list’, ‘stop’, ‘<-’, ‘lapply’, ‘enquote’, ‘.Internal’
[08:05:07.660] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:07.660] | future_lapply() -> future_xapply() ...
[08:05:07.660] | : Number of chunks: 1
[08:05:07.660] | : getGlobalsAndPackagesXApply() ...
[08:05:07.660] | : . future.globals: TRUE
[08:05:07.678] | : . globals found/used: [n=1] ‘FUN’
[08:05:07.678] | : . needed namespaces: [n=0] 
[08:05:07.678] | : . use_args: TRUE
[08:05:07.678] | : . Getting '...' globals ...
[08:05:07.679] | : . ' '...' content: [n=1] ‘what’
[08:05:07.679] | : . ' List of 1
[08:05:07.679] | : . '  $ ...:List of 1
[08:05:07.679] | : . '   ..$ what:function (...)  
[08:05:07.679] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.679] | : . '  - attr(*, "where")=List of 1
[08:05:07.679] | : . '   ..$ ...:<environment: 0x5595af12ed78> 
[08:05:07.679] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.679] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:07.679] | : . '  - attr(*, "total_size")= num NA
[08:05:07.682] | : . Getting '...' globals ... done
[08:05:07.682] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:07.682] | : . List of 2
[08:05:07.682] | : .  $ ...future.FUN:function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:07.682] | : .  $ ...          :List of 1
[08:05:07.682] | : .   ..$ what:function (...)  
[08:05:07.682] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.682] | : .  - attr(*, "where")=List of 2
[08:05:07.682] | : .   ..$ ...future.FUN:<environment: 0x5595af12ed78> 
[08:05:07.682] | : .   ..$ ...          :<environment: 0x5595af12ed78> 
[08:05:07.682] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.682] | : .  - attr(*, "resolved")= logi FALSE
[08:05:07.682] | : .  - attr(*, "total_size")= num 7436
[08:05:07.685] | : . Packages to be attached in all futures: [n=0] 
[08:05:07.685] | : getGlobalsAndPackagesXApply() ... done
[08:05:07.685] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:07.685] | : List of 5
[08:05:07.685] | :  $ ...future.FUN            :function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:07.685] | :  $ ...                      :List of 1
[08:05:07.685] | :   ..$ what:function (...)  
[08:05:07.685] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.685] | :  $ ...future.elements_ii    : NULL
[08:05:07.685] | :  $ ...future.seeds_ii       : NULL
[08:05:07.685] | :  $ ...future.globals.maxSize: NULL
[08:05:07.685] | :  - attr(*, "where")=List of 5
[08:05:07.685] | :   ..$ ...future.FUN            :<environment: 0x5595af12ed78> 
[08:05:07.685] | :   ..$ ...                      :<environment: 0x5595af12ed78> 
[08:05:07.685] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:07.685] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:07.685] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:07.685] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.685] | :  - attr(*, "resolved")= logi FALSE
[08:05:07.685] | :  - attr(*, "total_size")= num 7436
[08:05:07.690] | : Number of futures (= number of chunks): 1
[08:05:07.690] | : Launching 1 futures (chunks) ...
[08:05:07.690] | : Chunk #1 of 1 ...
[08:05:07.690] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:07.692] | :    + additional globals found: [n=0] 
[08:05:07.692] | :    + additional namespaces needed: [n=0] 
[08:05:07.692] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:07.692] | :  - seeds: <none>
[08:05:07.692] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:07.697] | : Created future:
[08:05:07.697] | : SequentialFuture:
[08:05:07.697] | : Label: ‘future_lapply-1’
[08:05:07.697] | : Expression:
[08:05:07.697] | : {
[08:05:07.697] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:07.697] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:07.697] | :     "# as a global variable                                         "
[08:05:07.697] | :     do.call(function(...) {
[08:05:07.697] | :         "# future.apply:::future_xapply(): preserve future option"
[08:05:07.697] | :         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:07.697] | :         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:07.697] | :             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:07.697] | :             on.exit(options(oopts), add = TRUE)
[08:05:07.697] | :         }
[08:05:07.697] | :         {
[08:05:07.697] | :             "# future.apply::future_lapply(): process chunk of elements"
[08:05:07.697] | :             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:07.697] | :                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:07.697] | :                 {
[08:05:07.697] | :                   ...future.FUN(...future.X_jj, ...)
[08:05:07.697] | :                 }
[08:05:07.697] | :             })
[08:05:07.697] | :         }
[08:05:07.697] | :     }, args = future.call.arguments)
[08:05:07.697] | : }
[08:05:07.697] | : Globals: 5 objects totaling 7.80 KiB (function ‘...future.FUN’ of 1.79 KiB, DotDotDotList ‘future.call.arguments’ of 388 bytes, list ‘...future.elements_ii’ of 149 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:07.697] | : Packages: <none>
[08:05:07.697] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:07.697] | : Capture standard output: TRUE
[08:05:07.697] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:07.697] | : Immediate condition classes: ‘immediateCondition’
[08:05:07.697] | : Lazy evaluation: FALSE
[08:05:07.697] | : Local evaluation: TRUE
[08:05:07.697] | : Asynchronous evaluation: TRUE
[08:05:07.697] | : Early signaling: FALSE
[08:05:07.697] | : Environment: R_GlobalEnv
[08:05:07.697] | : State: ‘finished’
[08:05:07.697] | : Resolved: TRUE
[08:05:07.697] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-9
[08:05:07.697] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:07.697] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:05:07.697] | : Value: 43 bytes of class ‘list’
[08:05:07.697] | : Duration: 0.003134012 secs (started 2025-06-17 08:05:07.693739)
[08:05:07.697] | : Worker process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:07.698] | : Chunk #1 of 1 ... DONE
[08:05:07.698] | : Launching 1 futures (chunks) ... DONE
[08:05:07.698] | : Resolving 1 futures (chunks) ...
[08:05:07.699] | :  - Number of value chunks collected: 1
[08:05:07.699] | : Resolving 1 futures (chunks) ... DONE
[08:05:07.699] | : Reducing values from 1 chunks ...
[08:05:07.699] | :  - Number of values collected after concatenation: 1
[08:05:07.699] | :  - Number of values expected: 1
[08:05:07.699] | : Reducing values from 1 chunks ... DONE
[08:05:07.699] | future_lapply() -> future_xapply() ... done
[08:05:07.699] future_lapply() ... done
- future_lapply(x, ...) - passing arguments via '...' ...
[08:05:07.700] future_lapply() ...
[08:05:07.700] | Globals in FUN(): [n=1] ‘typeof’
[08:05:07.700] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:07.700] | future_lapply() -> future_xapply() ...
[08:05:07.701] | : Number of chunks: 1
[08:05:07.701] | : getGlobalsAndPackagesXApply() ...
[08:05:07.701] | : . future.globals: TRUE
[08:05:07.706] | : . globals found/used: [n=1] ‘FUN’
[08:05:07.706] | : . needed namespaces: [n=0] 
[08:05:07.707] | : . use_args: TRUE
[08:05:07.707] | : . Getting '...' globals ...
[08:05:07.707] | : . ' '...' content: [n=1] ‘b’
[08:05:07.707] | : . ' List of 1
[08:05:07.707] | : . '  $ ...:List of 1
[08:05:07.707] | : . '   ..$ b:'data.frame':	2 obs. of  1 variable:
[08:05:07.707] | : . '   .. ..$ a: int [1:2] 1 2
[08:05:07.707] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.707] | : . '  - attr(*, "where")=List of 1
[08:05:07.707] | : . '   ..$ ...:<environment: 0x5595af0732a0> 
[08:05:07.707] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.707] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:07.707] | : . '  - attr(*, "total_size")= num NA
[08:05:07.710] | : . Getting '...' globals ... done
[08:05:07.710] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:07.711] | : . List of 2
[08:05:07.711] | : .  $ ...future.FUN:function (a, b)  
[08:05:07.711] | : .  $ ...          :List of 1
[08:05:07.711] | : .   ..$ b:'data.frame':	2 obs. of  1 variable:
[08:05:07.711] | : .   .. ..$ a: int [1:2] 1 2
[08:05:07.711] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.711] | : .  - attr(*, "where")=List of 2
[08:05:07.711] | : .   ..$ ...future.FUN:<environment: 0x5595af0732a0> 
[08:05:07.711] | : .   ..$ ...          :<environment: 0x5595af0732a0> 
[08:05:07.711] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.711] | : .  - attr(*, "resolved")= logi FALSE
[08:05:07.711] | : .  - attr(*, "total_size")= num 4505
[08:05:07.714] | : . Packages to be attached in all futures: [n=0] 
[08:05:07.714] | : getGlobalsAndPackagesXApply() ... done
[08:05:07.714] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:07.714] | : List of 5
[08:05:07.714] | :  $ ...future.FUN            :function (a, b)  
[08:05:07.714] | :  $ ...                      :List of 1
[08:05:07.714] | :   ..$ b:'data.frame':	2 obs. of  1 variable:
[08:05:07.714] | :   .. ..$ a: int [1:2] 1 2
[08:05:07.714] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.714] | :  $ ...future.elements_ii    : NULL
[08:05:07.714] | :  $ ...future.seeds_ii       : NULL
[08:05:07.714] | :  $ ...future.globals.maxSize: NULL
[08:05:07.714] | :  - attr(*, "where")=List of 5
[08:05:07.714] | :   ..$ ...future.FUN            :<environment: 0x5595af0732a0> 
[08:05:07.714] | :   ..$ ...                      :<environment: 0x5595af0732a0> 
[08:05:07.714] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:07.714] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:07.714] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:07.714] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.714] | :  - attr(*, "resolved")= logi FALSE
[08:05:07.714] | :  - attr(*, "total_size")= num 4505
[08:05:07.719] | : Number of futures (= number of chunks): 1
[08:05:07.719] | : Launching 1 futures (chunks) ...
[08:05:07.719] | : Chunk #1 of 1 ...
[08:05:07.719] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:07.720] | :    + additional globals found: [n=0] 
[08:05:07.720] | :    + additional namespaces needed: [n=0] 
[08:05:07.720] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:07.720] | :  - seeds: <none>
[08:05:07.720] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:07.724] | : Created future:
[08:05:07.724] | : SequentialFuture:
[08:05:07.724] | : Label: ‘future_lapply-1’
[08:05:07.724] | : Expression:
[08:05:07.724] | : {
[08:05:07.724] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:07.724] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:07.724] | :     "# as a global variable                                         "
[08:05:07.724] | :     do.call(function(...) {
[08:05:07.724] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:07.724] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:07.724] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:07.724] | :         "# anonymous function.                                          "
[08:05:07.724] | :         "#                                                              "
[08:05:07.724] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:07.724] | :         "# function environment of FUN() to the calling environment.    "
[08:05:07.724] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:07.724] | :         "# global environment, which is where globals are written.      "
[08:05:07.724] | :         penv <- env <- environment(...future.FUN)
[08:05:07.724] | :         repeat {
[08:05:07.724] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:07.724] | :                 emptyenv())) 
[08:05:07.724] | :                 break
[08:05:07.724] | :             penv <- env
[08:05:07.724] | :             env <- parent.env(env)
[08:05:07.724] | :         }
[08:05:07.724] | :         if (identical(penv, globalenv())) {
[08:05:07.724] | :             environment(...future.FUN) <- environment()
[08:05:07.724] | :         }
[08:05:07.724] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:07.724] | :             !isNamespace(penv)) {
[08:05:07.724] | :             parent.env(penv) <- environment()
[08:05:07.724] | :         }
[08:05:07.724] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:07.724] | :         {
[08:05:07.724] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:07.724] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:07.724] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:07.724] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:07.724] | :                 on.exit(options(oopts), add = TRUE)
[08:05:07.724] | :             }
[08:05:07.724] | :             {
[08:05:07.724] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:07.724] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:07.724] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:07.724] | :                   {
[08:05:07.724] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:07.724] | :                   }
[08:05:07.724] | :                 })
[08:05:07.724] | :             }
[08:05:07.724] | :         }
[08:05:07.724] | :     }, args = future.call.arguments)
[08:05:07.724] | : }
[08:05:07.724] | : Globals: 5 objects totaling 4.67 KiB (DotDotDotList ‘future.call.arguments’ of 357 bytes, function ‘...future.FUN’ of 332 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:07.724] | : Packages: <none>
[08:05:07.724] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:07.724] | : Capture standard output: TRUE
[08:05:07.724] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:07.724] | : Immediate condition classes: ‘immediateCondition’
[08:05:07.724] | : Lazy evaluation: FALSE
[08:05:07.724] | : Local evaluation: TRUE
[08:05:07.724] | : Asynchronous evaluation: TRUE
[08:05:07.724] | : Early signaling: FALSE
[08:05:07.724] | : Environment: R_GlobalEnv
[08:05:07.724] | : State: ‘finished’
[08:05:07.724] | : Resolved: TRUE
[08:05:07.724] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-10
[08:05:07.724] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:07.724] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:05:07.724] | : Value: 51 bytes of class ‘list’
[08:05:07.724] | : Duration: 0.002184868 secs (started 2025-06-17 08:05:07.721449)
[08:05:07.724] | : Worker process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:07.725] | : Chunk #1 of 1 ... DONE
[08:05:07.725] | : Launching 1 futures (chunks) ... DONE
[08:05:07.725] | : Resolving 1 futures (chunks) ...
[08:05:07.726] | :  - Number of value chunks collected: 1
[08:05:07.726] | : Resolving 1 futures (chunks) ... DONE
[08:05:07.726] | : Reducing values from 1 chunks ...
[08:05:07.726] | :  - Number of values collected after concatenation: 1
[08:05:07.726] | :  - Number of values expected: 1
[08:05:07.726] | : Reducing values from 1 chunks ... DONE
[08:05:07.726] | future_lapply() -> future_xapply() ... done
[08:05:07.726] future_lapply() ... done
[08:05:07.726] future_lapply() ...
[08:05:07.727] | Globals in FUN(): [n=1] ‘typeof’
[08:05:07.727] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:07.727] | future_lapply() -> future_xapply() ...
[08:05:07.727] | : Number of chunks: 1
[08:05:07.727] | : getGlobalsAndPackagesXApply() ...
[08:05:07.728] | : . future.globals: TRUE
[08:05:07.733] | : . globals found/used: [n=1] ‘FUN’
[08:05:07.733] | : . needed namespaces: [n=0] 
[08:05:07.733] | : . use_args: TRUE
[08:05:07.733] | : . Getting '...' globals ...
[08:05:07.734] | : . ' '...' content: [n=1] ‘b’
[08:05:07.734] | : . ' List of 1
[08:05:07.734] | : . '  $ ...:List of 1
[08:05:07.734] | : . '   ..$ b:<environment: 0x5595b0c8e9c0> 
[08:05:07.734] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.734] | : . '  - attr(*, "where")=List of 1
[08:05:07.734] | : . '   ..$ ...:<environment: 0x5595b0c91d38> 
[08:05:07.734] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.734] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:07.734] | : . '  - attr(*, "total_size")= num NA
[08:05:07.738] | : . Getting '...' globals ... done
[08:05:07.738] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:07.738] | : . List of 2
[08:05:07.738] | : .  $ ...future.FUN:function (a, b)  
[08:05:07.738] | : .  $ ...          :List of 1
[08:05:07.738] | : .   ..$ b:<environment: 0x5595b0c8e9c0> 
[08:05:07.738] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.738] | : .  - attr(*, "where")=List of 2
[08:05:07.738] | : .   ..$ ...future.FUN:<environment: 0x5595b0c91d38> 
[08:05:07.738] | : .   ..$ ...          :<environment: 0x5595b0c91d38> 
[08:05:07.738] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.738] | : .  - attr(*, "resolved")= logi FALSE
[08:05:07.738] | : .  - attr(*, "total_size")= num 4260
[08:05:07.741] | : . Packages to be attached in all futures: [n=0] 
[08:05:07.741] | : getGlobalsAndPackagesXApply() ... done
[08:05:07.742] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:07.742] | : List of 5
[08:05:07.742] | :  $ ...future.FUN            :function (a, b)  
[08:05:07.742] | :  $ ...                      :List of 1
[08:05:07.742] | :   ..$ b:<environment: 0x5595b0c8e9c0> 
[08:05:07.742] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.742] | :  $ ...future.elements_ii    : NULL
[08:05:07.742] | :  $ ...future.seeds_ii       : NULL
[08:05:07.742] | :  $ ...future.globals.maxSize: NULL
[08:05:07.742] | :  - attr(*, "where")=List of 5
[08:05:07.742] | :   ..$ ...future.FUN            :<environment: 0x5595b0c91d38> 
[08:05:07.742] | :   ..$ ...                      :<environment: 0x5595b0c91d38> 
[08:05:07.742] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:07.742] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:07.742] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:07.742] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.742] | :  - attr(*, "resolved")= logi FALSE
[08:05:07.742] | :  - attr(*, "total_size")= num 4260
[08:05:07.746] | : Number of futures (= number of chunks): 1
[08:05:07.746] | : Launching 1 futures (chunks) ...
[08:05:07.746] | : Chunk #1 of 1 ...
[08:05:07.746] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:07.747] | :    + additional globals found: [n=0] 
[08:05:07.747] | :    + additional namespaces needed: [n=0] 
[08:05:07.747] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:07.747] | :  - seeds: <none>
[08:05:07.747] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:07.750] | : Created future:
[08:05:07.751] | : SequentialFuture:
[08:05:07.751] | : Label: ‘future_lapply-1’
[08:05:07.751] | : Expression:
[08:05:07.751] | : {
[08:05:07.751] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:07.751] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:07.751] | :     "# as a global variable                                         "
[08:05:07.751] | :     do.call(function(...) {
[08:05:07.751] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:07.751] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:07.751] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:07.751] | :         "# anonymous function.                                          "
[08:05:07.751] | :         "#                                                              "
[08:05:07.751] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:07.751] | :         "# function environment of FUN() to the calling environment.    "
[08:05:07.751] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:07.751] | :         "# global environment, which is where globals are written.      "
[08:05:07.751] | :         penv <- env <- environment(...future.FUN)
[08:05:07.751] | :         repeat {
[08:05:07.751] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:07.751] | :                 emptyenv())) 
[08:05:07.751] | :                 break
[08:05:07.751] | :             penv <- env
[08:05:07.751] | :             env <- parent.env(env)
[08:05:07.751] | :         }
[08:05:07.751] | :         if (identical(penv, globalenv())) {
[08:05:07.751] | :             environment(...future.FUN) <- environment()
[08:05:07.751] | :         }
[08:05:07.751] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:07.751] | :             !isNamespace(penv)) {
[08:05:07.751] | :             parent.env(penv) <- environment()
[08:05:07.751] | :         }
[08:05:07.751] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:07.751] | :         {
[08:05:07.751] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:07.751] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:07.751] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:07.751] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:07.751] | :                 on.exit(options(oopts), add = TRUE)
[08:05:07.751] | :             }
[08:05:07.751] | :             {
[08:05:07.751] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:07.751] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:07.751] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:07.751] | :                   {
[08:05:07.751] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:07.751] | :                   }
[08:05:07.751] | :                 })
[08:05:07.751] | :             }
[08:05:07.751] | :         }
[08:05:07.751] | :     }, args = future.call.arguments)
[08:05:07.751] | : }
[08:05:07.751] | : Globals: 5 objects totaling 4.43 KiB (function ‘...future.FUN’ of 332 bytes, DotDotDotList ‘future.call.arguments’ of 279 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:07.751] | : Packages: <none>
[08:05:07.751] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:07.751] | : Capture standard output: TRUE
[08:05:07.751] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:07.751] | : Immediate condition classes: ‘immediateCondition’
[08:05:07.751] | : Lazy evaluation: FALSE
[08:05:07.751] | : Local evaluation: TRUE
[08:05:07.751] | : Asynchronous evaluation: TRUE
[08:05:07.751] | : Early signaling: FALSE
[08:05:07.751] | : Environment: R_GlobalEnv
[08:05:07.751] | : State: ‘finished’
[08:05:07.751] | : Resolved: TRUE
[08:05:07.751] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-11
[08:05:07.751] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:07.751] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:05:07.751] | : Value: 58 bytes of class ‘list’
[08:05:07.751] | : Duration: 0.002177238 secs (started 2025-06-17 08:05:07.748239)
[08:05:07.751] | : Worker process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:07.752] | : Chunk #1 of 1 ... DONE
[08:05:07.752] | : Launching 1 futures (chunks) ... DONE
[08:05:07.752] | : Resolving 1 futures (chunks) ...
[08:05:07.752] | :  - Number of value chunks collected: 1
[08:05:07.753] | : Resolving 1 futures (chunks) ... DONE
[08:05:07.753] | : Reducing values from 1 chunks ...
[08:05:07.753] | :  - Number of values collected after concatenation: 1
[08:05:07.753] | :  - Number of values expected: 1
[08:05:07.753] | : Reducing values from 1 chunks ... DONE
[08:05:07.753] | future_lapply() -> future_xapply() ... done
[08:05:07.753] future_lapply() ... done
[08:05:07.753] future_lapply() ...
[08:05:07.754] | Globals in FUN(): [n=1] ‘typeof’
[08:05:07.754] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:07.754] | future_lapply() -> future_xapply() ...
[08:05:07.754] | : Number of chunks: 1
[08:05:07.754] | : getGlobalsAndPackagesXApply() ...
[08:05:07.754] | : . future.globals: TRUE
[08:05:07.760] | : . globals found/used: [n=1] ‘FUN’
[08:05:07.760] | : . needed namespaces: [n=0] 
[08:05:07.760] | : . use_args: TRUE
[08:05:07.760] | : . Getting '...' globals ...
[08:05:07.761] | : . ' '...' content: [n=1] ‘b’
[08:05:07.761] | : . ' List of 1
[08:05:07.761] | : . '  $ ...:List of 1
[08:05:07.761] | : . '   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[08:05:07.761] | : . '   .. .. ..@ slots     :List of 4
[08:05:07.761] | : . '   .. .. .. ..$ .Data  : chr "function"
[08:05:07.761] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. ..$ target : chr "signature"
[08:05:07.761] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. ..$ defined: chr "signature"
[08:05:07.761] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. ..$ generic: chr "character"
[08:05:07.761] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. ..@ contains  :List of 4
[08:05:07.761] | : . '   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.761] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ superClass: chr "function"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.761] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:07.761] | : . '   .. .. .. .. .. ..@ dataPart  : logi TRUE
[08:05:07.761] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:07.761] | : . '   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.761] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.761] | : . '   .. .. .. .. .. ..@ by        : chr "function"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.761] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:07.761] | : . '   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.761] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.761] | : . '   .. .. .. .. .. ..@ by        : chr "function"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.761] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:07.761] | : . '   .. .. .. ..$ optionalMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.761] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ superClass: chr "optionalMethod"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.761] | : . '   .. .. .. .. .. ..@ by        : chr "function"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.761] | : . '   .. .. .. .. .. ..@ distance  : num 3
[08:05:07.761] | : . '   .. .. ..@ virtual   : logi FALSE
[08:05:07.761] | : . '   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[08:05:07.761] | : . '  list()
[08:05:07.761] | : . '   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[08:05:07.761] | : . '   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:07.761] | : . '   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:07.761] | : . '   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:07.761] | : . '   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[08:05:07.761] | : . '   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:07.761] | : . '   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:07.761] | : . '   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:07.761] | : . '   .. .. .. .. ..$ generic: chr(0) 
[08:05:07.761] | : . '   .. .. ..@ validity  : NULL
[08:05:07.761] | : . '   .. .. ..@ access    : list()
[08:05:07.761] | : . '   .. .. ..@ className : chr "MethodDefinition"
[08:05:07.761] | : . '   .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. ..@ package   : chr "methods"
[08:05:07.761] | : . '   .. .. ..@ subclasses:List of 7
[08:05:07.761] | : . '   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.761] | : . '   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.761] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:07.761] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.761] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:07.761] | : . '   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.761] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.761] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:07.761] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.761] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:07.761] | : . '   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.761] | : . '   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.761] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:07.761] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.761] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:07.761] | : . '   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.761] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.761] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:07.761] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.761] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:07.761] | : . '   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.761] | : . '   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.761] | : . '   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.761] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:07.761] | : . '   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.761] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.761] | : . '   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.761] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:07.761] | : . '   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.761] | : . '   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.761] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.761] | : . '   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:07.761] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.761] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.761] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:07.761] | : . '   .. .. ..@ versionKey:<externalptr> 
[08:05:07.761] | : . '   .. .. ..@ sealed    : logi TRUE
[08:05:07.761] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.761] | : . '  - attr(*, "where")=List of 1
[08:05:07.761] | : . '   ..$ ...:<environment: 0x5595ae4652c8> 
[08:05:07.761] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.761] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:07.761] | : . '  - attr(*, "total_size")= num NA
[08:05:07.814] | : . Getting '...' globals ... done
[08:05:07.815] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:07.815] | : . List of 2
[08:05:07.815] | : .  $ ...future.FUN:function (a, b)  
[08:05:07.815] | : .  $ ...          :List of 1
[08:05:07.815] | : .   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[08:05:07.815] | : .   .. .. ..@ slots     :List of 4
[08:05:07.815] | : .   .. .. .. ..$ .Data  : chr "function"
[08:05:07.815] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. ..$ target : chr "signature"
[08:05:07.815] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. ..$ defined: chr "signature"
[08:05:07.815] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. ..$ generic: chr "character"
[08:05:07.815] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. ..@ contains  :List of 4
[08:05:07.815] | : .   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.815] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ superClass: chr "function"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.815] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:07.815] | : .   .. .. .. .. .. ..@ dataPart  : logi TRUE
[08:05:07.815] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:07.815] | : .   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.815] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.815] | : .   .. .. .. .. .. ..@ by        : chr "function"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.815] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:07.815] | : .   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.815] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.815] | : .   .. .. .. .. .. ..@ by        : chr "function"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.815] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:07.815] | : .   .. .. .. ..$ optionalMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.815] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ superClass: chr "optionalMethod"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.815] | : .   .. .. .. .. .. ..@ by        : chr "function"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.815] | : .   .. .. .. .. .. ..@ distance  : num 3
[08:05:07.815] | : .   .. .. ..@ virtual   : logi FALSE
[08:05:07.815] | : .   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[08:05:07.815] | : .  list()
[08:05:07.815] | : .   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[08:05:07.815] | : .   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:07.815] | : .   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:07.815] | : .   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:07.815] | : .   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[08:05:07.815] | : .   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:07.815] | : .   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:07.815] | : .   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:07.815] | : .   .. .. .. .. ..$ generic: chr(0) 
[08:05:07.815] | : .   .. .. ..@ validity  : NULL
[08:05:07.815] | : .   .. .. ..@ access    : list()
[08:05:07.815] | : .   .. .. ..@ className : chr "MethodDefinition"
[08:05:07.815] | : .   .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. ..@ package   : chr "methods"
[08:05:07.815] | : .   .. .. ..@ subclasses:List of 7
[08:05:07.815] | : .   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.815] | : .   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.815] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:07.815] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.815] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:07.815] | : .   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.815] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.815] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:07.815] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.815] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:07.815] | : .   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.815] | : .   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.815] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:07.815] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.815] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:07.815] | : .   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.815] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.815] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:07.815] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.815] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:07.815] | : .   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.815] | : .   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.815] | : .   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.815] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:07.815] | : .   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.815] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.815] | : .   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.815] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:07.815] | : .   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.815] | : .   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.815] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.815] | : .   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:07.815] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.815] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.815] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:07.815] | : .   .. .. ..@ versionKey:<externalptr> 
[08:05:07.815] | : .   .. .. ..@ sealed    : logi TRUE
[08:05:07.815] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.815] | : .  - attr(*, "where")=List of 2
[08:05:07.815] | : .   ..$ ...future.FUN:<environment: 0x5595ae4652c8> 
[08:05:07.815] | : .   ..$ ...          :<environment: 0x5595ae4652c8> 
[08:05:07.815] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.815] | : .  - attr(*, "resolved")= logi FALSE
[08:05:07.815] | : .  - attr(*, "total_size")= num 106127
[08:05:07.869] | : . Packages to be attached in all futures: [n=0] 
[08:05:07.869] | : getGlobalsAndPackagesXApply() ... done
[08:05:07.869] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:07.869] | : List of 5
[08:05:07.869] | :  $ ...future.FUN            :function (a, b)  
[08:05:07.869] | :  $ ...                      :List of 1
[08:05:07.869] | :   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[08:05:07.869] | :   .. .. ..@ slots     :List of 4
[08:05:07.869] | :   .. .. .. ..$ .Data  : chr "function"
[08:05:07.869] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. ..$ target : chr "signature"
[08:05:07.869] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. ..$ defined: chr "signature"
[08:05:07.869] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. ..$ generic: chr "character"
[08:05:07.869] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. ..@ contains  :List of 4
[08:05:07.869] | :   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.869] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ superClass: chr "function"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.869] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.869] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.869] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.869] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:07.869] | :   .. .. .. .. .. ..@ dataPart  : logi TRUE
[08:05:07.869] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:07.869] | :   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.869] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.869] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.869] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.869] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.869] | :   .. .. .. .. .. ..@ by        : chr "function"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.869] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:07.869] | :   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.869] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.869] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.869] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.869] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.869] | :   .. .. .. .. .. ..@ by        : chr "function"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.869] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:07.869] | :   .. .. .. ..$ optionalMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.869] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ superClass: chr "optionalMethod"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.869] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.869] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.869] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.869] | :   .. .. .. .. .. ..@ by        : chr "function"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.869] | :   .. .. .. .. .. ..@ distance  : num 3
[08:05:07.869] | :   .. .. ..@ virtual   : logi FALSE
[08:05:07.869] | :   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[08:05:07.869] | :  list()
[08:05:07.869] | :   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[08:05:07.869] | :   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:07.869] | :   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:07.869] | :   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:07.869] | :   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[08:05:07.869] | :   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:07.869] | :   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:07.869] | :   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:07.869] | :   .. .. .. .. ..$ generic: chr(0) 
[08:05:07.869] | :   .. .. ..@ validity  : NULL
[08:05:07.869] | :   .. .. ..@ access    : list()
[08:05:07.869] | :   .. .. ..@ className : chr "MethodDefinition"
[08:05:07.869] | :   .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. ..@ package   : chr "methods"
[08:05:07.869] | :   .. .. ..@ subclasses:List of 7
[08:05:07.869] | :   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.869] | :   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.869] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.869] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.869] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.869] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:07.869] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.869] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:07.869] | :   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.869] | :   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.869] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.869] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.869] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.869] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:07.869] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.869] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:07.869] | :   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.869] | :   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.869] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.869] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.869] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.869] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:07.869] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.869] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:07.869] | :   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.869] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.869] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.869] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.869] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.869] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:07.869] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.869] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:07.869] | :   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.869] | :   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.869] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.869] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.869] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.869] | :   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.869] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:07.869] | :   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.869] | :   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.869] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.869] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.869] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.869] | :   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.869] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:07.869] | :   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:07.869] | :   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:07.869] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:07.869] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:07.869] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:07.869] | :   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:07.869] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:07.869] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:07.869] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:07.869] | :   .. .. ..@ versionKey:<externalptr> 
[08:05:07.869] | :   .. .. ..@ sealed    : logi TRUE
[08:05:07.869] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.869] | :  $ ...future.elements_ii    : NULL
[08:05:07.869] | :  $ ...future.seeds_ii       : NULL
[08:05:07.869] | :  $ ...future.globals.maxSize: NULL
[08:05:07.869] | :  - attr(*, "where")=List of 5
[08:05:07.869] | :   ..$ ...future.FUN            :<environment: 0x5595ae4652c8> 
[08:05:07.869] | :   ..$ ...                      :<environment: 0x5595ae4652c8> 
[08:05:07.869] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:07.869] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:07.869] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:07.869] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.869] | :  - attr(*, "resolved")= logi FALSE
[08:05:07.869] | :  - attr(*, "total_size")= num 106127
[08:05:07.923] | : Number of futures (= number of chunks): 1
[08:05:07.923] | : Launching 1 futures (chunks) ...
[08:05:07.923] | : Chunk #1 of 1 ...
[08:05:07.923] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:07.924] | :    + additional globals found: [n=0] 
[08:05:07.924] | :    + additional namespaces needed: [n=0] 
[08:05:07.924] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:07.924] | :  - seeds: <none>
[08:05:07.924] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:07.928] | : Created future:
[08:05:07.928] | : SequentialFuture:
[08:05:07.928] | : Label: ‘future_lapply-1’
[08:05:07.928] | : Expression:
[08:05:07.928] | : {
[08:05:07.928] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:07.928] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:07.928] | :     "# as a global variable                                         "
[08:05:07.928] | :     do.call(function(...) {
[08:05:07.928] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:07.928] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:07.928] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:07.928] | :         "# anonymous function.                                          "
[08:05:07.928] | :         "#                                                              "
[08:05:07.928] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:07.928] | :         "# function environment of FUN() to the calling environment.    "
[08:05:07.928] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:07.928] | :         "# global environment, which is where globals are written.      "
[08:05:07.928] | :         penv <- env <- environment(...future.FUN)
[08:05:07.928] | :         repeat {
[08:05:07.928] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:07.928] | :                 emptyenv())) 
[08:05:07.928] | :                 break
[08:05:07.928] | :             penv <- env
[08:05:07.928] | :             env <- parent.env(env)
[08:05:07.928] | :         }
[08:05:07.928] | :         if (identical(penv, globalenv())) {
[08:05:07.928] | :             environment(...future.FUN) <- environment()
[08:05:07.928] | :         }
[08:05:07.928] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:07.928] | :             !isNamespace(penv)) {
[08:05:07.928] | :             parent.env(penv) <- environment()
[08:05:07.928] | :         }
[08:05:07.928] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:07.928] | :         {
[08:05:07.928] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:07.928] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:07.928] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:07.928] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:07.928] | :                 on.exit(options(oopts), add = TRUE)
[08:05:07.928] | :             }
[08:05:07.928] | :             {
[08:05:07.928] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:07.928] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:07.928] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:07.928] | :                   {
[08:05:07.928] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:07.928] | :                   }
[08:05:07.928] | :                 })
[08:05:07.928] | :             }
[08:05:07.928] | :         }
[08:05:07.928] | :     }, args = future.call.arguments)
[08:05:07.928] | : }
[08:05:07.928] | : Globals: 5 objects totaling 103.91 KiB (DotDotDotList ‘future.call.arguments’ of 50.30 KiB, function ‘...future.FUN’ of 332 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:07.928] | : Packages: <none>
[08:05:07.928] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:07.928] | : Capture standard output: TRUE
[08:05:07.928] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:07.928] | : Immediate condition classes: ‘immediateCondition’
[08:05:07.928] | : Lazy evaluation: FALSE
[08:05:07.928] | : Local evaluation: TRUE
[08:05:07.928] | : Asynchronous evaluation: TRUE
[08:05:07.928] | : Early signaling: FALSE
[08:05:07.928] | : Environment: R_GlobalEnv
[08:05:07.928] | : State: ‘finished’
[08:05:07.928] | : Resolved: TRUE
[08:05:07.928] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-12
[08:05:07.928] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:07.928] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:05:07.928] | : Value: 49 bytes of class ‘list’
[08:05:07.928] | : Duration: 0.002383947 secs (started 2025-06-17 08:05:07.92566)
[08:05:07.928] | : Worker process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:07.930] | : Chunk #1 of 1 ... DONE
[08:05:07.930] | : Launching 1 futures (chunks) ... DONE
[08:05:07.930] | : Resolving 1 futures (chunks) ...
[08:05:07.931] | :  - Number of value chunks collected: 1
[08:05:07.931] | : Resolving 1 futures (chunks) ... DONE
[08:05:07.931] | : Reducing values from 1 chunks ...
[08:05:07.931] | :  - Number of values collected after concatenation: 1
[08:05:07.931] | :  - Number of values expected: 1
[08:05:07.931] | : Reducing values from 1 chunks ... DONE
[08:05:07.931] | future_lapply() -> future_xapply() ... done
[08:05:07.931] future_lapply() ... done
- future_lapply(X, ...) - 'X' containing globals ...
List of 4
 $ : num 84
 $ : num 10.5
 $ : num 63
 $ : int 11
[08:05:07.933] future_lapply() ...
[08:05:07.934] | Globals in FUN(): [n=0] 
[08:05:07.934] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:07.934] | future_lapply() -> future_xapply() ...
[08:05:07.934] | : Number of chunks: 1
[08:05:07.934] | : getGlobalsAndPackagesXApply() ...
[08:05:07.934] | : . future.globals: TRUE
[08:05:07.938] | : . globals found/used: [n=1] ‘FUN’
[08:05:07.938] | : . needed namespaces: [n=0] 
[08:05:07.938] | : . use_args: TRUE
[08:05:07.938] | : . Getting '...' globals ...
[08:05:07.939] | : . ' '...' content: [n=0] 
[08:05:07.939] | : . ' List of 1
[08:05:07.939] | : . '  $ ...: list()
[08:05:07.939] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.939] | : . '  - attr(*, "where")=List of 1
[08:05:07.939] | : . '   ..$ ...:<environment: 0x5595b0b4b1a0> 
[08:05:07.939] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.939] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:07.939] | : . '  - attr(*, "total_size")= num NA
[08:05:07.942] | : . Getting '...' globals ... done
[08:05:07.943] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:07.943] | : . List of 2
[08:05:07.943] | : .  $ ...future.FUN:function (f)  
[08:05:07.943] | : .  $ ...          : list()
[08:05:07.943] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.943] | : .  - attr(*, "where")=List of 2
[08:05:07.943] | : .   ..$ ...future.FUN:<environment: 0x5595b0b4b1a0> 
[08:05:07.943] | : .   ..$ ...          :<environment: 0x5595b0b4b1a0> 
[08:05:07.943] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.943] | : .  - attr(*, "resolved")= logi FALSE
[08:05:07.943] | : .  - attr(*, "total_size")= num 5165
[08:05:07.945] | : . Packages to be attached in all futures: [n=0] 
[08:05:07.945] | : getGlobalsAndPackagesXApply() ... done
[08:05:07.946] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:07.946] | : List of 5
[08:05:07.946] | :  $ ...future.FUN            :function (f)  
[08:05:07.946] | :  $ ...                      : list()
[08:05:07.946] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.946] | :  $ ...future.elements_ii    : NULL
[08:05:07.946] | :  $ ...future.seeds_ii       : NULL
[08:05:07.946] | :  $ ...future.globals.maxSize: NULL
[08:05:07.946] | :  - attr(*, "where")=List of 5
[08:05:07.946] | :   ..$ ...future.FUN            :<environment: 0x5595b0b4b1a0> 
[08:05:07.946] | :   ..$ ...                      :<environment: 0x5595b0b4b1a0> 
[08:05:07.946] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:07.946] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:07.946] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:07.946] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.946] | :  - attr(*, "resolved")= logi FALSE
[08:05:07.946] | :  - attr(*, "total_size")= num 5165
[08:05:07.950] | : Number of futures (= number of chunks): 1
[08:05:07.950] | : Launching 1 futures (chunks) ...
[08:05:07.950] | : Chunk #1 of 1 ...
[08:05:07.950] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:07.968] | :    + additional globals found: [n=2] ‘a’, ‘b’
[08:05:07.968] | :    + additional namespaces needed: [n=1] ‘tools’
[08:05:07.969] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:07.969] | :  - seeds: <none>
[08:05:07.969] | :  - All globals exported: [n=7] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’, ‘a’, ‘b’
[08:05:07.973] | : Created future:
[08:05:07.973] | : SequentialFuture:
[08:05:07.973] | : Label: ‘future_lapply-1’
[08:05:07.973] | : Expression:
[08:05:07.973] | : {
[08:05:07.973] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:07.973] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:07.973] | :     "# as a global variable                                         "
[08:05:07.973] | :     do.call(function(...) {
[08:05:07.973] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:07.973] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:07.973] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:07.973] | :         "# anonymous function.                                          "
[08:05:07.973] | :         "#                                                              "
[08:05:07.973] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:07.973] | :         "# function environment of FUN() to the calling environment.    "
[08:05:07.973] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:07.973] | :         "# global environment, which is where globals are written.      "
[08:05:07.973] | :         penv <- env <- environment(...future.FUN)
[08:05:07.973] | :         repeat {
[08:05:07.973] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:07.973] | :                 emptyenv())) 
[08:05:07.973] | :                 break
[08:05:07.973] | :             penv <- env
[08:05:07.973] | :             env <- parent.env(env)
[08:05:07.973] | :         }
[08:05:07.973] | :         if (identical(penv, globalenv())) {
[08:05:07.973] | :             environment(...future.FUN) <- environment()
[08:05:07.973] | :         }
[08:05:07.973] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:07.973] | :             !isNamespace(penv)) {
[08:05:07.973] | :             parent.env(penv) <- environment()
[08:05:07.973] | :         }
[08:05:07.973] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:07.973] | :         {
[08:05:07.973] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:07.973] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:07.973] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:07.973] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:07.973] | :                 on.exit(options(oopts), add = TRUE)
[08:05:07.973] | :             }
[08:05:07.973] | :             {
[08:05:07.973] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:07.973] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:07.973] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:07.973] | :                   {
[08:05:07.973] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:07.973] | :                   }
[08:05:07.973] | :                 })
[08:05:07.973] | :             }
[08:05:07.973] | :         }
[08:05:07.973] | :     }, args = future.call.arguments)
[08:05:07.973] | : }
[08:05:07.973] | : Globals: 7 objects totaling 6.68 KiB (list ‘...future.elements_ii’ of 1.40 KiB, function ‘...future.FUN’ of 225 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘a’ of 39 bytes, numeric ‘b’ of 39 bytes, ...)
[08:05:07.973] | : Packages: 1 packages (‘tools’)
[08:05:07.973] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:07.973] | : Capture standard output: TRUE
[08:05:07.973] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:07.973] | : Immediate condition classes: ‘immediateCondition’
[08:05:07.973] | : Lazy evaluation: FALSE
[08:05:07.973] | : Local evaluation: TRUE
[08:05:07.973] | : Asynchronous evaluation: TRUE
[08:05:07.973] | : Early signaling: FALSE
[08:05:07.973] | : Environment: R_GlobalEnv
[08:05:07.973] | : State: ‘finished’
[08:05:07.973] | : Resolved: TRUE
[08:05:07.973] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-13
[08:05:07.973] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:07.973] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:05:07.973] | : Value: 91 bytes of class ‘list’
[08:05:07.973] | : Duration: 0.002617598 secs (started 2025-06-17 08:05:07.97025)
[08:05:07.973] | : Worker process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:07.974] | : Chunk #1 of 1 ... DONE
[08:05:07.974] | : Launching 1 futures (chunks) ... DONE
[08:05:07.975] | : Resolving 1 futures (chunks) ...
[08:05:07.975] | :  - Number of value chunks collected: 1
[08:05:07.975] | : Resolving 1 futures (chunks) ... DONE
[08:05:07.975] | : Reducing values from 1 chunks ...
[08:05:07.975] | :  - Number of values collected after concatenation: 4
[08:05:07.975] | :  - Number of values expected: 4
[08:05:07.975] | : Reducing values from 1 chunks ... DONE
[08:05:07.976] | future_lapply() -> future_xapply() ... done
[08:05:07.976] future_lapply() ... done
List of 4
 $ : num 84
 $ : num 10.5
 $ : num 63
 $ : int 11
- future_lapply(X, ...) - '{ a <- a + 1; a }' ...
[08:05:07.977] future_lapply() ...
[08:05:07.979] | Globals in FUN(): [n=4] ‘{’, ‘<-’, ‘a’, ‘+’
[08:05:07.979] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:07.980] | future_lapply() -> future_xapply() ...
[08:05:07.980] | : Number of chunks: 1
[08:05:07.980] | : getGlobalsAndPackagesXApply() ...
[08:05:07.980] | : . future.globals: TRUE
[08:05:07.987] | : . globals found/used: [n=2] ‘FUN’, ‘a’
[08:05:07.987] | : . needed namespaces: [n=0] 
[08:05:07.987] | : . use_args: TRUE
[08:05:07.987] | : . Getting '...' globals ...
[08:05:07.988] | : . ' '...' content: [n=0] 
[08:05:07.988] | : . ' List of 1
[08:05:07.988] | : . '  $ ...: list()
[08:05:07.988] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.988] | : . '  - attr(*, "where")=List of 1
[08:05:07.988] | : . '   ..$ ...:<environment: 0x5595b0108608> 
[08:05:07.988] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.988] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:07.988] | : . '  - attr(*, "total_size")= num NA
[08:05:07.990] | : . Getting '...' globals ... done
[08:05:07.990] | : . Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘a’, ‘...’
[08:05:07.990] | : . List of 3
[08:05:07.990] | : .  $ ...future.FUN:function (ii)  
[08:05:07.990] | : .  $ a            : num 1
[08:05:07.990] | : .  $ ...          : list()
[08:05:07.990] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.990] | : .  - attr(*, "where")=List of 3
[08:05:07.990] | : .   ..$ ...future.FUN:<environment: 0x5595b0108608> 
[08:05:07.990] | : .   ..$ a            :<environment: R_GlobalEnv> 
[08:05:07.990] | : .   ..$ ...          :<environment: 0x5595b0108608> 
[08:05:07.990] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.990] | : .  - attr(*, "resolved")= logi FALSE
[08:05:07.990] | : .  - attr(*, "total_size")= num 4124
[08:05:07.994] | : . Packages to be attached in all futures: [n=0] 
[08:05:07.994] | : getGlobalsAndPackagesXApply() ... done
[08:05:07.994] | : Globals pass to each chunk: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:07.994] | : List of 6
[08:05:07.994] | :  $ ...future.FUN            :function (ii)  
[08:05:07.994] | :  $ a                        : num 1
[08:05:07.994] | :  $ ...                      : list()
[08:05:07.994] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:07.994] | :  $ ...future.elements_ii    : NULL
[08:05:07.994] | :  $ ...future.seeds_ii       : NULL
[08:05:07.994] | :  $ ...future.globals.maxSize: NULL
[08:05:07.994] | :  - attr(*, "where")=List of 6
[08:05:07.994] | :   ..$ ...future.FUN            :<environment: 0x5595b0108608> 
[08:05:07.994] | :   ..$ a                        :<environment: R_GlobalEnv> 
[08:05:07.994] | :   ..$ ...                      :<environment: 0x5595b0108608> 
[08:05:07.994] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:07.994] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:07.994] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:07.994] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:07.994] | :  - attr(*, "resolved")= logi FALSE
[08:05:07.994] | :  - attr(*, "total_size")= num 4124
[08:05:07.998] | : Number of futures (= number of chunks): 1
[08:05:07.999] | : Launching 1 futures (chunks) ...
[08:05:07.999] | : Chunk #1 of 1 ...
[08:05:07.999] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:07.999] | :    + additional globals found: [n=0] 
[08:05:07.999] | :    + additional namespaces needed: [n=0] 
[08:05:07.999] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:07.999] | :  - seeds: <none>
[08:05:08.000] | :  - All globals exported: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.003] | : Created future:
[08:05:08.003] | : SequentialFuture:
[08:05:08.003] | : Label: ‘future_lapply-1’
[08:05:08.003] | : Expression:
[08:05:08.003] | : {
[08:05:08.003] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:08.003] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:08.003] | :     "# as a global variable                                         "
[08:05:08.003] | :     do.call(function(...) {
[08:05:08.003] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:08.003] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:08.003] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:08.003] | :         "# anonymous function.                                          "
[08:05:08.003] | :         "#                                                              "
[08:05:08.003] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:08.003] | :         "# function environment of FUN() to the calling environment.    "
[08:05:08.003] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:08.003] | :         "# global environment, which is where globals are written.      "
[08:05:08.003] | :         penv <- env <- environment(...future.FUN)
[08:05:08.003] | :         repeat {
[08:05:08.003] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:08.003] | :                 emptyenv())) 
[08:05:08.003] | :                 break
[08:05:08.003] | :             penv <- env
[08:05:08.003] | :             env <- parent.env(env)
[08:05:08.003] | :         }
[08:05:08.003] | :         if (identical(penv, globalenv())) {
[08:05:08.003] | :             environment(...future.FUN) <- environment()
[08:05:08.003] | :         }
[08:05:08.003] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:08.003] | :             !isNamespace(penv)) {
[08:05:08.003] | :             parent.env(penv) <- environment()
[08:05:08.003] | :         }
[08:05:08.003] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:08.003] | :         {
[08:05:08.003] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:08.003] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:08.003] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:08.003] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:08.003] | :                 on.exit(options(oopts), add = TRUE)
[08:05:08.003] | :             }
[08:05:08.003] | :             {
[08:05:08.003] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:08.003] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:08.003] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:08.003] | :                   {
[08:05:08.003] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:08.003] | :                   }
[08:05:08.003] | :                 })
[08:05:08.003] | :             }
[08:05:08.003] | :         }
[08:05:08.003] | :     }, args = future.call.arguments)
[08:05:08.003] | : }
[08:05:08.003] | : Globals: 6 objects totaling 4.29 KiB (function ‘...future.FUN’ of 511 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[08:05:08.003] | : Packages: <none>
[08:05:08.003] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:08.003] | : Capture standard output: TRUE
[08:05:08.003] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:08.003] | : Immediate condition classes: ‘immediateCondition’
[08:05:08.003] | : Lazy evaluation: FALSE
[08:05:08.003] | : Local evaluation: TRUE
[08:05:08.003] | : Asynchronous evaluation: TRUE
[08:05:08.003] | : Early signaling: FALSE
[08:05:08.003] | : Environment: R_GlobalEnv
[08:05:08.003] | : State: ‘finished’
[08:05:08.003] | : Resolved: TRUE
[08:05:08.003] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-14
[08:05:08.003] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:08.003] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:05:08.003] | : Value: 47 bytes of class ‘list’
[08:05:08.003] | : Duration: 0.002306461 secs (started 2025-06-17 08:05:08.000869)
[08:05:08.003] | : Worker process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:08.005] | : Chunk #1 of 1 ... DONE
[08:05:08.005] | : Launching 1 futures (chunks) ... DONE
[08:05:08.005] | : Resolving 1 futures (chunks) ...
[08:05:08.005] | :  - Number of value chunks collected: 1
[08:05:08.005] | : Resolving 1 futures (chunks) ... DONE
[08:05:08.005] | : Reducing values from 1 chunks ...
[08:05:08.005] | :  - Number of values collected after concatenation: 1
[08:05:08.006] | :  - Number of values expected: 1
[08:05:08.006] | : Reducing values from 1 chunks ... DONE
[08:05:08.006] | future_lapply() -> future_xapply() ... done
[08:05:08.006] future_lapply() ... done
- future_lapply(X, ...) - '{ a; a <- a + 1 }' ...
[08:05:08.006] future_lapply() ...
[08:05:08.007] | Globals in FUN(): [n=4] ‘{’, ‘a’, ‘<-’, ‘+’
[08:05:08.007] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:08.007] | future_lapply() -> future_xapply() ...
[08:05:08.007] | : Number of chunks: 1
[08:05:08.007] | : getGlobalsAndPackagesXApply() ...
[08:05:08.007] | : . future.globals: TRUE
[08:05:08.014] | : . globals found/used: [n=2] ‘FUN’, ‘a’
[08:05:08.014] | : . needed namespaces: [n=0] 
[08:05:08.015] | : . use_args: TRUE
[08:05:08.015] | : . Getting '...' globals ...
[08:05:08.015] | : . ' '...' content: [n=0] 
[08:05:08.015] | : . ' List of 1
[08:05:08.015] | : . '  $ ...: list()
[08:05:08.015] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.015] | : . '  - attr(*, "where")=List of 1
[08:05:08.015] | : . '   ..$ ...:<environment: 0x5595b07ac500> 
[08:05:08.015] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.015] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:08.015] | : . '  - attr(*, "total_size")= num NA
[08:05:08.018] | : . Getting '...' globals ... done
[08:05:08.018] | : . Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘a’, ‘...’
[08:05:08.018] | : . List of 3
[08:05:08.018] | : .  $ ...future.FUN:function (ii)  
[08:05:08.018] | : .  $ a            : num 1
[08:05:08.018] | : .  $ ...          : list()
[08:05:08.018] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.018] | : .  - attr(*, "where")=List of 3
[08:05:08.018] | : .   ..$ ...future.FUN:<environment: 0x5595b07ac500> 
[08:05:08.018] | : .   ..$ a            :<environment: R_GlobalEnv> 
[08:05:08.018] | : .   ..$ ...          :<environment: 0x5595b07ac500> 
[08:05:08.018] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.018] | : .  - attr(*, "resolved")= logi FALSE
[08:05:08.018] | : .  - attr(*, "total_size")= num 4140
[08:05:08.023] | : . Packages to be attached in all futures: [n=0] 
[08:05:08.023] | : getGlobalsAndPackagesXApply() ... done
[08:05:08.023] | : Globals pass to each chunk: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.023] | : List of 6
[08:05:08.023] | :  $ ...future.FUN            :function (ii)  
[08:05:08.023] | :  $ a                        : num 1
[08:05:08.023] | :  $ ...                      : list()
[08:05:08.023] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.023] | :  $ ...future.elements_ii    : NULL
[08:05:08.023] | :  $ ...future.seeds_ii       : NULL
[08:05:08.023] | :  $ ...future.globals.maxSize: NULL
[08:05:08.023] | :  - attr(*, "where")=List of 6
[08:05:08.023] | :   ..$ ...future.FUN            :<environment: 0x5595b07ac500> 
[08:05:08.023] | :   ..$ a                        :<environment: R_GlobalEnv> 
[08:05:08.023] | :   ..$ ...                      :<environment: 0x5595b07ac500> 
[08:05:08.023] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:08.023] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:08.023] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:08.023] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.023] | :  - attr(*, "resolved")= logi FALSE
[08:05:08.023] | :  - attr(*, "total_size")= num 4140
[08:05:08.027] | : Number of futures (= number of chunks): 1
[08:05:08.027] | : Launching 1 futures (chunks) ...
[08:05:08.028] | : Chunk #1 of 1 ...
[08:05:08.028] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:08.028] | :    + additional globals found: [n=0] 
[08:05:08.028] | :    + additional namespaces needed: [n=0] 
[08:05:08.028] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:08.028] | :  - seeds: <none>
[08:05:08.028] | :  - All globals exported: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.032] | : Created future:
[08:05:08.032] | : SequentialFuture:
[08:05:08.032] | : Label: ‘future_lapply-1’
[08:05:08.032] | : Expression:
[08:05:08.032] | : {
[08:05:08.032] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:08.032] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:08.032] | :     "# as a global variable                                         "
[08:05:08.032] | :     do.call(function(...) {
[08:05:08.032] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:08.032] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:08.032] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:08.032] | :         "# anonymous function.                                          "
[08:05:08.032] | :         "#                                                              "
[08:05:08.032] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:08.032] | :         "# function environment of FUN() to the calling environment.    "
[08:05:08.032] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:08.032] | :         "# global environment, which is where globals are written.      "
[08:05:08.032] | :         penv <- env <- environment(...future.FUN)
[08:05:08.032] | :         repeat {
[08:05:08.032] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:08.032] | :                 emptyenv())) 
[08:05:08.032] | :                 break
[08:05:08.032] | :             penv <- env
[08:05:08.032] | :             env <- parent.env(env)
[08:05:08.032] | :         }
[08:05:08.032] | :         if (identical(penv, globalenv())) {
[08:05:08.032] | :             environment(...future.FUN) <- environment()
[08:05:08.032] | :         }
[08:05:08.032] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:08.032] | :             !isNamespace(penv)) {
[08:05:08.032] | :             parent.env(penv) <- environment()
[08:05:08.032] | :         }
[08:05:08.032] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:08.032] | :         {
[08:05:08.032] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:08.032] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:08.032] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:08.032] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:08.032] | :                 on.exit(options(oopts), add = TRUE)
[08:05:08.032] | :             }
[08:05:08.032] | :             {
[08:05:08.032] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:08.032] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:08.032] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:08.032] | :                   {
[08:05:08.032] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:08.032] | :                   }
[08:05:08.032] | :                 })
[08:05:08.032] | :             }
[08:05:08.032] | :         }
[08:05:08.032] | :     }, args = future.call.arguments)
[08:05:08.032] | : }
[08:05:08.032] | : Globals: 6 objects totaling 4.30 KiB (function ‘...future.FUN’ of 519 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[08:05:08.032] | : Packages: <none>
[08:05:08.032] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:08.032] | : Capture standard output: TRUE
[08:05:08.032] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:08.032] | : Immediate condition classes: ‘immediateCondition’
[08:05:08.032] | : Lazy evaluation: FALSE
[08:05:08.032] | : Local evaluation: TRUE
[08:05:08.032] | : Asynchronous evaluation: TRUE
[08:05:08.032] | : Early signaling: FALSE
[08:05:08.032] | : Environment: R_GlobalEnv
[08:05:08.032] | : State: ‘finished’
[08:05:08.032] | : Resolved: TRUE
[08:05:08.032] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-15
[08:05:08.032] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:08.032] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:05:08.032] | : Value: 47 bytes of class ‘list’
[08:05:08.032] | : Duration: 0.002158165 secs (started 2025-06-17 08:05:08.029777)
[08:05:08.032] | : Worker process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:08.033] | : Chunk #1 of 1 ... DONE
[08:05:08.033] | : Launching 1 futures (chunks) ... DONE
[08:05:08.033] | : Resolving 1 futures (chunks) ...
[08:05:08.034] | :  - Number of value chunks collected: 1
[08:05:08.034] | : Resolving 1 futures (chunks) ... DONE
[08:05:08.034] | : Reducing values from 1 chunks ...
[08:05:08.034] | :  - Number of values collected after concatenation: 1
[08:05:08.034] | :  - Number of values expected: 1
[08:05:08.034] | : Reducing values from 1 chunks ... DONE
[08:05:08.034] | future_lapply() -> future_xapply() ... done
[08:05:08.035] future_lapply() ... done
- future_lapply(..., future.globals = <list>) ...
[08:05:08.035] future_lapply() ...
[08:05:08.035] | Globals in FUN(): [n=1] ‘a’
[08:05:08.035] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:08.035] | future_lapply() -> future_xapply() ...
[08:05:08.035] | : Number of chunks: 1
[08:05:08.036] | : getGlobalsAndPackagesXApply() ...
[08:05:08.036] | : . future.globals: <name-value list> with names ‘a’
[08:05:08.036] | : . use_args: TRUE
[08:05:08.036] | : . Getting '...' globals ...
[08:05:08.036] | : . ' '...' content: [n=0] 
[08:05:08.037] | : . ' List of 1
[08:05:08.037] | : . '  $ ...: list()
[08:05:08.037] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.037] | : . '  - attr(*, "where")=List of 1
[08:05:08.037] | : . '   ..$ ...:<environment: 0x5595ae648948> 
[08:05:08.037] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.037] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:08.037] | : . '  - attr(*, "total_size")= num NA
[08:05:08.039] | : . Getting '...' globals ... done
[08:05:08.039] | : . Globals to be used in all futures (chunks): [n=3] ‘a’, ‘...future.FUN’, ‘...’
[08:05:08.039] | : . List of 3
[08:05:08.039] | : .  $ a            : num 42
[08:05:08.039] | : .  $ ...future.FUN:function (x)  
[08:05:08.039] | : .  $ ...          : list()
[08:05:08.039] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.039] | : .  - attr(*, "where")=List of 3
[08:05:08.039] | : .   ..$ a            :<environment: R_EmptyEnv> 
[08:05:08.039] | : .   ..$ ...future.FUN:<environment: R_GlobalEnv> 
[08:05:08.039] | : .   ..$ ...          :<environment: 0x5595ae648948> 
[08:05:08.039] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.039] | : .  - attr(*, "resolved")= logi FALSE
[08:05:08.039] | : .  - attr(*, "total_size")= num NA
[08:05:08.042] | : . Packages to be attached in all futures: [n=0] 
[08:05:08.042] | : getGlobalsAndPackagesXApply() ... done
[08:05:08.043] | : Globals pass to each chunk: [n=6] ‘a’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.043] | : List of 6
[08:05:08.043] | :  $ a                        : num 42
[08:05:08.043] | :  $ ...future.FUN            :function (x)  
[08:05:08.043] | :  $ ...                      : list()
[08:05:08.043] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.043] | :  $ ...future.elements_ii    : NULL
[08:05:08.043] | :  $ ...future.seeds_ii       : NULL
[08:05:08.043] | :  $ ...future.globals.maxSize: NULL
[08:05:08.043] | :  - attr(*, "where")=List of 6
[08:05:08.043] | :   ..$ a                        :<environment: R_EmptyEnv> 
[08:05:08.043] | :   ..$ ...future.FUN            :<environment: R_GlobalEnv> 
[08:05:08.043] | :   ..$ ...                      :<environment: 0x5595ae648948> 
[08:05:08.043] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:08.043] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:08.043] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:08.043] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.043] | :  - attr(*, "resolved")= logi FALSE
[08:05:08.043] | :  - attr(*, "total_size")= num NA
[08:05:08.047] | : Number of futures (= number of chunks): 1
[08:05:08.047] | : Launching 1 futures (chunks) ...
[08:05:08.047] | : Chunk #1 of 1 ...
[08:05:08.047] | :  - seeds: <none>
[08:05:08.048] | :  - All globals exported: [n=6] ‘a’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.051] | : Created future:
[08:05:08.051] | : SequentialFuture:
[08:05:08.051] | : Label: ‘future_lapply-1’
[08:05:08.051] | : Expression:
[08:05:08.051] | : {
[08:05:08.051] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:08.051] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:08.051] | :     "# as a global variable                                         "
[08:05:08.051] | :     do.call(function(...) {
[08:05:08.051] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:08.051] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:08.051] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:08.051] | :         "# anonymous function.                                          "
[08:05:08.051] | :         "#                                                              "
[08:05:08.051] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:08.051] | :         "# function environment of FUN() to the calling environment.    "
[08:05:08.051] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:08.051] | :         "# global environment, which is where globals are written.      "
[08:05:08.051] | :         penv <- env <- environment(...future.FUN)
[08:05:08.051] | :         repeat {
[08:05:08.051] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:08.051] | :                 emptyenv())) 
[08:05:08.051] | :                 break
[08:05:08.051] | :             penv <- env
[08:05:08.051] | :             env <- parent.env(env)
[08:05:08.051] | :         }
[08:05:08.051] | :         if (identical(penv, globalenv())) {
[08:05:08.051] | :             environment(...future.FUN) <- environment()
[08:05:08.051] | :         }
[08:05:08.051] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:08.051] | :             !isNamespace(penv)) {
[08:05:08.051] | :             parent.env(penv) <- environment()
[08:05:08.051] | :         }
[08:05:08.051] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:08.051] | :         {
[08:05:08.051] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:08.051] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:08.051] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:08.051] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:08.051] | :                 on.exit(options(oopts), add = TRUE)
[08:05:08.051] | :             }
[08:05:08.051] | :             {
[08:05:08.051] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:08.051] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:08.051] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:08.051] | :                   {
[08:05:08.051] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:08.051] | :                   }
[08:05:08.051] | :                 })
[08:05:08.051] | :             }
[08:05:08.051] | :         }
[08:05:08.051] | :     }, args = future.call.arguments)
[08:05:08.051] | : }
[08:05:08.051] | : Globals: 6 objects totaling 4.16 KiB (function ‘...future.FUN’ of 298 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[08:05:08.051] | : Packages: <none>
[08:05:08.051] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:08.051] | : Capture standard output: TRUE
[08:05:08.051] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:08.051] | : Immediate condition classes: ‘immediateCondition’
[08:05:08.051] | : Lazy evaluation: FALSE
[08:05:08.051] | : Local evaluation: TRUE
[08:05:08.051] | : Asynchronous evaluation: TRUE
[08:05:08.051] | : Early signaling: FALSE
[08:05:08.051] | : Environment: R_GlobalEnv
[08:05:08.051] | : State: ‘finished’
[08:05:08.051] | : Resolved: TRUE
[08:05:08.051] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-16
[08:05:08.051] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:08.051] | : Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:05:08.051] | : Value: 47 bytes of class ‘list’
[08:05:08.051] | : Duration: 0.002207279 secs (started 2025-06-17 08:05:08.048891)
[08:05:08.051] | : Worker process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:08.052] | : Chunk #1 of 1 ... DONE
[08:05:08.053] | : Launching 1 futures (chunks) ... DONE
[08:05:08.053] | : Resolving 1 futures (chunks) ...
[08:05:08.053] | :  - Number of value chunks collected: 1
[08:05:08.053] | : Resolving 1 futures (chunks) ... DONE
[08:05:08.053] | : Reducing values from 1 chunks ...
[08:05:08.053] | :  - Number of values collected after concatenation: 1
[08:05:08.053] | :  - Number of values expected: 1
[08:05:08.054] | : Reducing values from 1 chunks ... DONE
[08:05:08.054] | future_lapply() -> future_xapply() ... done
[08:05:08.054] future_lapply() ... done
List of 1
 $ : num 42
[08:05:08.060] future_lapply() ...
[08:05:08.061] | Globals in FUN(): [n=7] ‘{’, ‘do.call’, ‘caller’, ‘c’, ‘list’, ‘+’, ‘args’
[08:05:08.061] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:08.061] | future_lapply() -> future_xapply() ...
[08:05:08.062] | : Number of chunks: 2
[08:05:08.062] | : getGlobalsAndPackagesXApply() ...
[08:05:08.063] | : . future.globals: TRUE
[08:05:08.085] | : . globals found/used: [n=5] ‘FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’
[08:05:08.085] | : . needed namespaces: [n=0] 
[08:05:08.085] | : . use_args: TRUE
[08:05:08.085] | : . Getting '...' globals ...
[08:05:08.086] | : . ' '...' content: [n=0] 
[08:05:08.086] | : . ' List of 1
[08:05:08.086] | : . '  $ ...: list()
[08:05:08.086] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.086] | : . '  - attr(*, "where")=List of 1
[08:05:08.086] | : . '   ..$ ...:<environment: 0x5595b0262c58> 
[08:05:08.086] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.086] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:08.086] | : . '  - attr(*, "total_size")= num NA
[08:05:08.088] | : . Getting '...' globals ... done
[08:05:08.088] | : . Globals to be used in all futures (chunks): [n=6] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’
[08:05:08.089] | : . List of 6
[08:05:08.089] | : .  $ ...future.FUN:function (i)  
[08:05:08.089] | : .  $ caller       :function (a, b, FUN = call_my_add)  
[08:05:08.089] | : .  $ args         :List of 1
[08:05:08.089] | : .   ..$ FUN:function (a, b)  
[08:05:08.089] | : .  $ call_my_add  :function (a, b)  
[08:05:08.089] | : .  $ my_add       :function (a, b)  
[08:05:08.089] | : .  $ ...          : list()
[08:05:08.089] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.089] | : .  - attr(*, "where")=List of 6
[08:05:08.089] | : .   ..$ ...future.FUN:<environment: 0x5595b0262c58> 
[08:05:08.089] | : .   ..$ caller       :<environment: 0x5595b0a87198> 
[08:05:08.089] | : .   ..$ args         :<environment: 0x5595b0a87198> 
[08:05:08.089] | : .   ..$ call_my_add  :<environment: R_GlobalEnv> 
[08:05:08.089] | : .   ..$ my_add       :<environment: R_GlobalEnv> 
[08:05:08.089] | : .   ..$ ...          :<environment: 0x5595b0262c58> 
[08:05:08.089] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.089] | : .  - attr(*, "resolved")= logi FALSE
[08:05:08.089] | : .  - attr(*, "total_size")= num 13245
[08:05:08.093] | : . Packages to be attached in all futures: [n=0] 
[08:05:08.093] | : getGlobalsAndPackagesXApply() ... done
[08:05:08.094] | : Globals pass to each chunk: [n=9] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.094] | : List of 9
[08:05:08.094] | :  $ ...future.FUN            :function (i)  
[08:05:08.094] | :  $ caller                   :function (a, b, FUN = call_my_add)  
[08:05:08.094] | :  $ args                     :List of 1
[08:05:08.094] | :   ..$ FUN:function (a, b)  
[08:05:08.094] | :  $ call_my_add              :function (a, b)  
[08:05:08.094] | :  $ my_add                   :function (a, b)  
[08:05:08.094] | :  $ ...                      : list()
[08:05:08.094] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.094] | :  $ ...future.elements_ii    : NULL
[08:05:08.094] | :  $ ...future.seeds_ii       : NULL
[08:05:08.094] | :  $ ...future.globals.maxSize: NULL
[08:05:08.094] | :  - attr(*, "where")=List of 9
[08:05:08.094] | :   ..$ ...future.FUN            :<environment: 0x5595b0262c58> 
[08:05:08.094] | :   ..$ caller                   :<environment: 0x5595b0a87198> 
[08:05:08.094] | :   ..$ args                     :<environment: 0x5595b0a87198> 
[08:05:08.094] | :   ..$ call_my_add              :<environment: R_GlobalEnv> 
[08:05:08.094] | :   ..$ my_add                   :<environment: R_GlobalEnv> 
[08:05:08.094] | :   ..$ ...                      :<environment: 0x5595b0262c58> 
[08:05:08.094] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:08.094] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:08.094] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:08.094] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.094] | :  - attr(*, "resolved")= logi FALSE
[08:05:08.094] | :  - attr(*, "total_size")= num 13245
[08:05:08.100] | : Number of futures (= number of chunks): 2
[08:05:08.100] | : Launching 2 futures (chunks) ...
[08:05:08.100] | : Chunk #1 of 2 ...
[08:05:08.100] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:08.100] | :    + additional globals found: [n=0] 
[08:05:08.101] | :    + additional namespaces needed: [n=0] 
[08:05:08.101] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:08.101] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:08.101] | :  - seeds: <none>
[08:05:08.101] | :  - All globals exported: [n=9] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.107] | : Created future:
[08:05:08.108] | : MulticoreFuture:
[08:05:08.108] | : Label: ‘future_lapply-1’
[08:05:08.108] | : Expression:
[08:05:08.108] | : {
[08:05:08.108] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:08.108] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:08.108] | :     "# as a global variable                                         "
[08:05:08.108] | :     do.call(function(...) {
[08:05:08.108] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:08.108] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:08.108] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:08.108] | :         "# anonymous function.                                          "
[08:05:08.108] | :         "#                                                              "
[08:05:08.108] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:08.108] | :         "# function environment of FUN() to the calling environment.    "
[08:05:08.108] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:08.108] | :         "# global environment, which is where globals are written.      "
[08:05:08.108] | :         penv <- env <- environment(...future.FUN)
[08:05:08.108] | :         repeat {
[08:05:08.108] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:08.108] | :                 emptyenv())) 
[08:05:08.108] | :                 break
[08:05:08.108] | :             penv <- env
[08:05:08.108] | :             env <- parent.env(env)
[08:05:08.108] | :         }
[08:05:08.108] | :         if (identical(penv, globalenv())) {
[08:05:08.108] | :             environment(...future.FUN) <- environment()
[08:05:08.108] | :         }
[08:05:08.108] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:08.108] | :             !isNamespace(penv)) {
[08:05:08.108] | :             parent.env(penv) <- environment()
[08:05:08.108] | :         }
[08:05:08.108] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:08.108] | :         {
[08:05:08.108] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:08.108] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:08.108] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:08.108] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:08.108] | :                 on.exit(options(oopts), add = TRUE)
[08:05:08.108] | :             }
[08:05:08.108] | :             {
[08:05:08.108] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:08.108] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:08.108] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:08.108] | :                   {
[08:05:08.108] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:08.108] | :                   }
[08:05:08.108] | :                 })
[08:05:08.108] | :             }
[08:05:08.108] | :         }
[08:05:08.108] | :     }, args = future.call.arguments)
[08:05:08.108] | : }
[08:05:08.108] | : Globals: 9 objects totaling 10.71 KiB (function ‘...future.FUN’ of 3.30 KiB, list ‘args’ of 928 bytes, function ‘caller’ of 904 bytes, function ‘call_my_add’ of 876 bytes, function ‘my_add’ of 114 bytes, ...)
[08:05:08.108] | : Packages: <none>
[08:05:08.108] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:08.108] | : Capture standard output: TRUE
[08:05:08.108] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:08.108] | : Immediate condition classes: ‘immediateCondition’
[08:05:08.108] | : Lazy evaluation: FALSE
[08:05:08.108] | : Local evaluation: TRUE
[08:05:08.108] | : Asynchronous evaluation: TRUE
[08:05:08.108] | : Early signaling: FALSE
[08:05:08.108] | : Environment: 0x5595b0a87198
[08:05:08.108] | : State: ‘running’
[08:05:08.108] | : Resolved: TRUE
[08:05:08.108] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-17
[08:05:08.108] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:08.108] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:08.108] | : Value: <not collected>
[08:05:08.108] | : Conditions captured: <none>
[08:05:08.117] | : Chunk #1 of 2 ... DONE
[08:05:08.117] | : Chunk #2 of 2 ...
[08:05:08.117] | :  - Finding globals in 'X' for chunk #2 ...
[08:05:08.118] | :    + additional globals found: [n=0] 
[08:05:08.118] | :    + additional namespaces needed: [n=0] 
[08:05:08.118] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:05:08.118] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:08.119] | :  - seeds: <none>
[08:05:08.119] | :  - All globals exported: [n=9] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.124] | : Created future:
[08:05:08.124] | : MulticoreFuture:
[08:05:08.124] | : Label: ‘future_lapply-2’
[08:05:08.124] | : Expression:
[08:05:08.124] | : {
[08:05:08.124] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:08.124] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:08.124] | :     "# as a global variable                                         "
[08:05:08.124] | :     do.call(function(...) {
[08:05:08.124] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:08.124] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:08.124] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:08.124] | :         "# anonymous function.                                          "
[08:05:08.124] | :         "#                                                              "
[08:05:08.124] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:08.124] | :         "# function environment of FUN() to the calling environment.    "
[08:05:08.124] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:08.124] | :         "# global environment, which is where globals are written.      "
[08:05:08.124] | :         penv <- env <- environment(...future.FUN)
[08:05:08.124] | :         repeat {
[08:05:08.124] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:08.124] | :                 emptyenv())) 
[08:05:08.124] | :                 break
[08:05:08.124] | :             penv <- env
[08:05:08.124] | :             env <- parent.env(env)
[08:05:08.124] | :         }
[08:05:08.124] | :         if (identical(penv, globalenv())) {
[08:05:08.124] | :             environment(...future.FUN) <- environment()
[08:05:08.124] | :         }
[08:05:08.124] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:08.124] | :             !isNamespace(penv)) {
[08:05:08.124] | :             parent.env(penv) <- environment()
[08:05:08.124] | :         }
[08:05:08.124] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:08.124] | :         {
[08:05:08.124] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:08.124] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:08.124] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:08.124] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:08.124] | :                 on.exit(options(oopts), add = TRUE)
[08:05:08.124] | :             }
[08:05:08.124] | :             {
[08:05:08.124] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:08.124] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:08.124] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:08.124] | :                   {
[08:05:08.124] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:08.124] | :                   }
[08:05:08.124] | :                 })
[08:05:08.124] | :             }
[08:05:08.124] | :         }
[08:05:08.124] | :     }, args = future.call.arguments)
[08:05:08.124] | : }
[08:05:08.124] | : Globals: 9 objects totaling 10.72 KiB (function ‘...future.FUN’ of 3.30 KiB, list ‘args’ of 928 bytes, function ‘caller’ of 904 bytes, function ‘call_my_add’ of 876 bytes, function ‘my_add’ of 114 bytes, ...)
[08:05:08.124] | : Packages: <none>
[08:05:08.124] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:08.124] | : Capture standard output: TRUE
[08:05:08.124] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:08.124] | : Immediate condition classes: ‘immediateCondition’
[08:05:08.124] | : Lazy evaluation: FALSE
[08:05:08.124] | : Local evaluation: TRUE
[08:05:08.124] | : Asynchronous evaluation: TRUE
[08:05:08.124] | : Early signaling: FALSE
[08:05:08.124] | : Environment: 0x5595b0a87198
[08:05:08.124] | : State: ‘running’
[08:05:08.124] | : Resolved: TRUE
[08:05:08.124] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-18
[08:05:08.124] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:08.124] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:08.124] | : Value: <not collected>
[08:05:08.124] | : Conditions captured: <none>
[08:05:08.133] | : Chunk #2 of 2 ... DONE
[08:05:08.133] | : Launching 2 futures (chunks) ... DONE
[08:05:08.134] | : Resolving 2 futures (chunks) ...
[08:05:08.140] | :  - Number of value chunks collected: 2
[08:05:08.140] | : Resolving 2 futures (chunks) ... DONE
[08:05:08.141] | : Reducing values from 2 chunks ...
[08:05:08.141] | :  - Number of values collected after concatenation: 3
[08:05:08.141] | :  - Number of values expected: 3
[08:05:08.141] | : Reducing values from 2 chunks ... DONE
[08:05:08.141] | future_lapply() -> future_xapply() ... done
[08:05:08.141] future_lapply() ... done
- future_lapply(x, FUN = do.call, ...) ...
[08:05:08.142] future_lapply() ...
[08:05:08.144] | Globals in FUN(): [n=10] ‘parent.frame’, ‘{’, ‘if’, ‘!’, ‘is.list’, ‘stop’, ‘<-’, ‘lapply’, ‘enquote’, ‘.Internal’
[08:05:08.144] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:08.144] | future_lapply() -> future_xapply() ...
[08:05:08.145] | : Number of chunks: 1
[08:05:08.145] | : getGlobalsAndPackagesXApply() ...
[08:05:08.145] | : . future.globals: TRUE
[08:05:08.167] | : . globals found/used: [n=1] ‘FUN’
[08:05:08.167] | : . needed namespaces: [n=0] 
[08:05:08.167] | : . use_args: TRUE
[08:05:08.168] | : . Getting '...' globals ...
[08:05:08.168] | : . ' '...' content: [n=1] ‘what’
[08:05:08.168] | : . ' List of 1
[08:05:08.168] | : . '  $ ...:List of 1
[08:05:08.168] | : . '   ..$ what:function (x)  
[08:05:08.168] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.168] | : . '  - attr(*, "where")=List of 1
[08:05:08.168] | : . '   ..$ ...:<environment: 0x5595af012238> 
[08:05:08.168] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.168] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:08.168] | : . '  - attr(*, "total_size")= num NA
[08:05:08.172] | : . Getting '...' globals ... done
[08:05:08.172] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:08.172] | : . List of 2
[08:05:08.172] | : .  $ ...future.FUN:function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:08.172] | : .  $ ...          :List of 1
[08:05:08.172] | : .   ..$ what:function (x)  
[08:05:08.172] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.172] | : .  - attr(*, "where")=List of 2
[08:05:08.172] | : .   ..$ ...future.FUN:<environment: 0x5595af012238> 
[08:05:08.172] | : .   ..$ ...          :<environment: 0x5595af012238> 
[08:05:08.172] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.172] | : .  - attr(*, "resolved")= logi FALSE
[08:05:08.172] | : .  - attr(*, "total_size")= num 7368
[08:05:08.176] | : . Packages to be attached in all futures: [n=0] 
[08:05:08.176] | : getGlobalsAndPackagesXApply() ... done
[08:05:08.176] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.176] | : List of 5
[08:05:08.176] | :  $ ...future.FUN            :function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:08.176] | :  $ ...                      :List of 1
[08:05:08.176] | :   ..$ what:function (x)  
[08:05:08.176] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.176] | :  $ ...future.elements_ii    : NULL
[08:05:08.176] | :  $ ...future.seeds_ii       : NULL
[08:05:08.176] | :  $ ...future.globals.maxSize: NULL
[08:05:08.176] | :  - attr(*, "where")=List of 5
[08:05:08.176] | :   ..$ ...future.FUN            :<environment: 0x5595af012238> 
[08:05:08.176] | :   ..$ ...                      :<environment: 0x5595af012238> 
[08:05:08.176] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:08.176] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:08.176] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:08.176] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.176] | :  - attr(*, "resolved")= logi FALSE
[08:05:08.176] | :  - attr(*, "total_size")= num 7368
[08:05:08.186] | : Number of futures (= number of chunks): 1
[08:05:08.187] | : Launching 1 futures (chunks) ...
[08:05:08.187] | : Chunk #1 of 1 ...
[08:05:08.187] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:08.187] | :    + additional globals found: [n=0] 
[08:05:08.188] | :    + additional namespaces needed: [n=0] 
[08:05:08.188] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:08.188] | :  - seeds: <none>
[08:05:08.188] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.191] | : Created future:
[08:05:08.191] | : MulticoreFuture:
[08:05:08.191] | : Label: ‘future_lapply-1’
[08:05:08.191] | : Expression:
[08:05:08.191] | : {
[08:05:08.191] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:08.191] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:08.191] | :     "# as a global variable                                         "
[08:05:08.191] | :     do.call(function(...) {
[08:05:08.191] | :         "# future.apply:::future_xapply(): preserve future option"
[08:05:08.191] | :         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:08.191] | :         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:08.191] | :             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:08.191] | :             on.exit(options(oopts), add = TRUE)
[08:05:08.191] | :         }
[08:05:08.191] | :         {
[08:05:08.191] | :             "# future.apply::future_lapply(): process chunk of elements"
[08:05:08.191] | :             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:08.191] | :                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:08.191] | :                 {
[08:05:08.191] | :                   ...future.FUN(...future.X_jj, ...)
[08:05:08.191] | :                 }
[08:05:08.191] | :             })
[08:05:08.191] | :         }
[08:05:08.191] | :     }, args = future.call.arguments)
[08:05:08.191] | : }
[08:05:08.191] | : Globals: 5 objects totaling 7.38 KiB (function ‘...future.FUN’ of 1.79 KiB, DotDotDotList ‘future.call.arguments’ of 152 bytes, list ‘...future.elements_ii’ of 149 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:08.191] | : Packages: <none>
[08:05:08.191] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:08.191] | : Capture standard output: TRUE
[08:05:08.191] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:08.191] | : Immediate condition classes: ‘immediateCondition’
[08:05:08.191] | : Lazy evaluation: FALSE
[08:05:08.191] | : Local evaluation: TRUE
[08:05:08.191] | : Asynchronous evaluation: TRUE
[08:05:08.191] | : Early signaling: FALSE
[08:05:08.191] | : Environment: R_GlobalEnv
[08:05:08.191] | : State: ‘running’
[08:05:08.191] | : Resolved: TRUE
[08:05:08.191] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-19
[08:05:08.191] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:08.191] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:08.191] | : Value: <not collected>
[08:05:08.191] | : Conditions captured: <none>
[08:05:08.199] | : Chunk #1 of 1 ... DONE
[08:05:08.200] | : Launching 1 futures (chunks) ... DONE
[08:05:08.200] | : Resolving 1 futures (chunks) ...
[08:05:08.202] | :  - Number of value chunks collected: 1
[08:05:08.202] | : Resolving 1 futures (chunks) ... DONE
[08:05:08.202] | : Reducing values from 1 chunks ...
[08:05:08.202] | :  - Number of values collected after concatenation: 1
[08:05:08.202] | :  - Number of values expected: 1
[08:05:08.202] | : Reducing values from 1 chunks ... DONE
[08:05:08.202] | future_lapply() -> future_xapply() ... done
[08:05:08.202] future_lapply() ... done
[08:05:08.203] future_lapply() ...
[08:05:08.205] | Globals in FUN(): [n=10] ‘parent.frame’, ‘{’, ‘if’, ‘!’, ‘is.list’, ‘stop’, ‘<-’, ‘lapply’, ‘enquote’, ‘.Internal’
[08:05:08.205] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:08.205] | future_lapply() -> future_xapply() ...
[08:05:08.205] | : Number of chunks: 1
[08:05:08.206] | : getGlobalsAndPackagesXApply() ...
[08:05:08.206] | : . future.globals: TRUE
[08:05:08.229] | : . globals found/used: [n=1] ‘FUN’
[08:05:08.229] | : . needed namespaces: [n=0] 
[08:05:08.230] | : . use_args: TRUE
[08:05:08.230] | : . Getting '...' globals ...
[08:05:08.230] | : . ' '...' content: [n=1] ‘what’
[08:05:08.230] | : . ' List of 1
[08:05:08.230] | : . '  $ ...:List of 1
[08:05:08.230] | : . '   ..$ what:function (...)  
[08:05:08.230] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.230] | : . '  - attr(*, "where")=List of 1
[08:05:08.230] | : . '   ..$ ...:<environment: 0x5595af675e98> 
[08:05:08.230] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.230] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:08.230] | : . '  - attr(*, "total_size")= num NA
[08:05:08.234] | : . Getting '...' globals ... done
[08:05:08.234] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:08.234] | : . List of 2
[08:05:08.234] | : .  $ ...future.FUN:function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:08.234] | : .  $ ...          :List of 1
[08:05:08.234] | : .   ..$ what:function (...)  
[08:05:08.234] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.234] | : .  - attr(*, "where")=List of 2
[08:05:08.234] | : .   ..$ ...future.FUN:<environment: 0x5595af675e98> 
[08:05:08.234] | : .   ..$ ...          :<environment: 0x5595af675e98> 
[08:05:08.234] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.234] | : .  - attr(*, "resolved")= logi FALSE
[08:05:08.234] | : .  - attr(*, "total_size")= num 7804
[08:05:08.238] | : . Packages to be attached in all futures: [n=0] 
[08:05:08.238] | : getGlobalsAndPackagesXApply() ... done
[08:05:08.238] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.238] | : List of 5
[08:05:08.238] | :  $ ...future.FUN            :function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:08.238] | :  $ ...                      :List of 1
[08:05:08.238] | :   ..$ what:function (...)  
[08:05:08.238] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.238] | :  $ ...future.elements_ii    : NULL
[08:05:08.238] | :  $ ...future.seeds_ii       : NULL
[08:05:08.238] | :  $ ...future.globals.maxSize: NULL
[08:05:08.238] | :  - attr(*, "where")=List of 5
[08:05:08.238] | :   ..$ ...future.FUN            :<environment: 0x5595af675e98> 
[08:05:08.238] | :   ..$ ...                      :<environment: 0x5595af675e98> 
[08:05:08.238] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:08.238] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:08.238] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:08.238] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.238] | :  - attr(*, "resolved")= logi FALSE
[08:05:08.238] | :  - attr(*, "total_size")= num 7804
[08:05:08.245] | : Number of futures (= number of chunks): 1
[08:05:08.246] | : Launching 1 futures (chunks) ...
[08:05:08.246] | : Chunk #1 of 1 ...
[08:05:08.246] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:08.246] | :    + additional globals found: [n=0] 
[08:05:08.247] | :    + additional namespaces needed: [n=0] 
[08:05:08.247] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:08.247] | :  - seeds: <none>
[08:05:08.247] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.250] | : Created future:
[08:05:08.250] | : MulticoreFuture:
[08:05:08.250] | : Label: ‘future_lapply-1’
[08:05:08.250] | : Expression:
[08:05:08.250] | : {
[08:05:08.250] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:08.250] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:08.250] | :     "# as a global variable                                         "
[08:05:08.250] | :     do.call(function(...) {
[08:05:08.250] | :         "# future.apply:::future_xapply(): preserve future option"
[08:05:08.250] | :         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:08.250] | :         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:08.250] | :             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:08.250] | :             on.exit(options(oopts), add = TRUE)
[08:05:08.250] | :         }
[08:05:08.250] | :         {
[08:05:08.250] | :             "# future.apply::future_lapply(): process chunk of elements"
[08:05:08.250] | :             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:08.250] | :                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:08.250] | :                 {
[08:05:08.250] | :                   ...future.FUN(...future.X_jj, ...)
[08:05:08.250] | :                 }
[08:05:08.250] | :             })
[08:05:08.250] | :         }
[08:05:08.250] | :     }, args = future.call.arguments)
[08:05:08.250] | : }
[08:05:08.250] | : Globals: 5 objects totaling 7.80 KiB (function ‘...future.FUN’ of 1.79 KiB, DotDotDotList ‘future.call.arguments’ of 388 bytes, list ‘...future.elements_ii’ of 149 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:08.250] | : Packages: <none>
[08:05:08.250] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:08.250] | : Capture standard output: TRUE
[08:05:08.250] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:08.250] | : Immediate condition classes: ‘immediateCondition’
[08:05:08.250] | : Lazy evaluation: FALSE
[08:05:08.250] | : Local evaluation: TRUE
[08:05:08.250] | : Asynchronous evaluation: TRUE
[08:05:08.250] | : Early signaling: FALSE
[08:05:08.250] | : Environment: R_GlobalEnv
[08:05:08.250] | : State: ‘running’
[08:05:08.250] | : Resolved: TRUE
[08:05:08.250] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-20
[08:05:08.250] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:08.250] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:08.250] | : Value: <not collected>
[08:05:08.250] | : Conditions captured: <none>
[08:05:08.259] | : Chunk #1 of 1 ... DONE
[08:05:08.259] | : Launching 1 futures (chunks) ... DONE
[08:05:08.259] | : Resolving 1 futures (chunks) ...
[08:05:08.261] | :  - Number of value chunks collected: 1
[08:05:08.261] | : Resolving 1 futures (chunks) ... DONE
[08:05:08.261] | : Reducing values from 1 chunks ...
[08:05:08.261] | :  - Number of values collected after concatenation: 1
[08:05:08.261] | :  - Number of values expected: 1
[08:05:08.261] | : Reducing values from 1 chunks ... DONE
[08:05:08.261] | future_lapply() -> future_xapply() ... done
[08:05:08.262] future_lapply() ... done
- future_lapply(x, ...) - passing arguments via '...' ...
[08:05:08.262] future_lapply() ...
[08:05:08.263] | Globals in FUN(): [n=1] ‘typeof’
[08:05:08.263] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:08.263] | future_lapply() -> future_xapply() ...
[08:05:08.263] | : Number of chunks: 1
[08:05:08.264] | : getGlobalsAndPackagesXApply() ...
[08:05:08.264] | : . future.globals: TRUE
[08:05:08.271] | : . globals found/used: [n=1] ‘FUN’
[08:05:08.271] | : . needed namespaces: [n=0] 
[08:05:08.272] | : . use_args: TRUE
[08:05:08.272] | : . Getting '...' globals ...
[08:05:08.272] | : . ' '...' content: [n=1] ‘b’
[08:05:08.272] | : . ' List of 1
[08:05:08.272] | : . '  $ ...:List of 1
[08:05:08.272] | : . '   ..$ b:'data.frame':	2 obs. of  1 variable:
[08:05:08.272] | : . '   .. ..$ a: int [1:2] 1 2
[08:05:08.272] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.272] | : . '  - attr(*, "where")=List of 1
[08:05:08.272] | : . '   ..$ ...:<environment: 0x5595af766838> 
[08:05:08.272] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.272] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:08.272] | : . '  - attr(*, "total_size")= num NA
[08:05:08.276] | : . Getting '...' globals ... done
[08:05:08.277] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:08.277] | : . List of 2
[08:05:08.277] | : .  $ ...future.FUN:function (a, b)  
[08:05:08.277] | : .  $ ...          :List of 1
[08:05:08.277] | : .   ..$ b:'data.frame':	2 obs. of  1 variable:
[08:05:08.277] | : .   .. ..$ a: int [1:2] 1 2
[08:05:08.277] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.277] | : .  - attr(*, "where")=List of 2
[08:05:08.277] | : .   ..$ ...future.FUN:<environment: 0x5595af766838> 
[08:05:08.277] | : .   ..$ ...          :<environment: 0x5595af766838> 
[08:05:08.277] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.277] | : .  - attr(*, "resolved")= logi FALSE
[08:05:08.277] | : .  - attr(*, "total_size")= num 4505
[08:05:08.281] | : . Packages to be attached in all futures: [n=0] 
[08:05:08.281] | : getGlobalsAndPackagesXApply() ... done
[08:05:08.282] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.282] | : List of 5
[08:05:08.282] | :  $ ...future.FUN            :function (a, b)  
[08:05:08.282] | :  $ ...                      :List of 1
[08:05:08.282] | :   ..$ b:'data.frame':	2 obs. of  1 variable:
[08:05:08.282] | :   .. ..$ a: int [1:2] 1 2
[08:05:08.282] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.282] | :  $ ...future.elements_ii    : NULL
[08:05:08.282] | :  $ ...future.seeds_ii       : NULL
[08:05:08.282] | :  $ ...future.globals.maxSize: NULL
[08:05:08.282] | :  - attr(*, "where")=List of 5
[08:05:08.282] | :   ..$ ...future.FUN            :<environment: 0x5595af766838> 
[08:05:08.282] | :   ..$ ...                      :<environment: 0x5595af766838> 
[08:05:08.282] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:08.282] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:08.282] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:08.282] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.282] | :  - attr(*, "resolved")= logi FALSE
[08:05:08.282] | :  - attr(*, "total_size")= num 4505
[08:05:08.288] | : Number of futures (= number of chunks): 1
[08:05:08.288] | : Launching 1 futures (chunks) ...
[08:05:08.288] | : Chunk #1 of 1 ...
[08:05:08.288] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:08.289] | :    + additional globals found: [n=0] 
[08:05:08.289] | :    + additional namespaces needed: [n=0] 
[08:05:08.289] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:08.289] | :  - seeds: <none>
[08:05:08.289] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.292] | : Created future:
[08:05:08.293] | : MulticoreFuture:
[08:05:08.293] | : Label: ‘future_lapply-1’
[08:05:08.293] | : Expression:
[08:05:08.293] | : {
[08:05:08.293] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:08.293] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:08.293] | :     "# as a global variable                                         "
[08:05:08.293] | :     do.call(function(...) {
[08:05:08.293] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:08.293] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:08.293] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:08.293] | :         "# anonymous function.                                          "
[08:05:08.293] | :         "#                                                              "
[08:05:08.293] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:08.293] | :         "# function environment of FUN() to the calling environment.    "
[08:05:08.293] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:08.293] | :         "# global environment, which is where globals are written.      "
[08:05:08.293] | :         penv <- env <- environment(...future.FUN)
[08:05:08.293] | :         repeat {
[08:05:08.293] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:08.293] | :                 emptyenv())) 
[08:05:08.293] | :                 break
[08:05:08.293] | :             penv <- env
[08:05:08.293] | :             env <- parent.env(env)
[08:05:08.293] | :         }
[08:05:08.293] | :         if (identical(penv, globalenv())) {
[08:05:08.293] | :             environment(...future.FUN) <- environment()
[08:05:08.293] | :         }
[08:05:08.293] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:08.293] | :             !isNamespace(penv)) {
[08:05:08.293] | :             parent.env(penv) <- environment()
[08:05:08.293] | :         }
[08:05:08.293] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:08.293] | :         {
[08:05:08.293] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:08.293] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:08.293] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:08.293] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:08.293] | :                 on.exit(options(oopts), add = TRUE)
[08:05:08.293] | :             }
[08:05:08.293] | :             {
[08:05:08.293] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:08.293] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:08.293] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:08.293] | :                   {
[08:05:08.293] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:08.293] | :                   }
[08:05:08.293] | :                 })
[08:05:08.293] | :             }
[08:05:08.293] | :         }
[08:05:08.293] | :     }, args = future.call.arguments)
[08:05:08.293] | : }
[08:05:08.293] | : Globals: 5 objects totaling 4.67 KiB (DotDotDotList ‘future.call.arguments’ of 357 bytes, function ‘...future.FUN’ of 332 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:08.293] | : Packages: <none>
[08:05:08.293] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:08.293] | : Capture standard output: TRUE
[08:05:08.293] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:08.293] | : Immediate condition classes: ‘immediateCondition’
[08:05:08.293] | : Lazy evaluation: FALSE
[08:05:08.293] | : Local evaluation: TRUE
[08:05:08.293] | : Asynchronous evaluation: TRUE
[08:05:08.293] | : Early signaling: FALSE
[08:05:08.293] | : Environment: R_GlobalEnv
[08:05:08.293] | : State: ‘running’
[08:05:08.293] | : Resolved: TRUE
[08:05:08.293] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-21
[08:05:08.293] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:08.293] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:08.293] | : Value: <not collected>
[08:05:08.293] | : Conditions captured: <none>
[08:05:08.301] | : Chunk #1 of 1 ... DONE
[08:05:08.301] | : Launching 1 futures (chunks) ... DONE
[08:05:08.301] | : Resolving 1 futures (chunks) ...
[08:05:08.303] | :  - Number of value chunks collected: 1
[08:05:08.303] | : Resolving 1 futures (chunks) ... DONE
[08:05:08.303] | : Reducing values from 1 chunks ...
[08:05:08.303] | :  - Number of values collected after concatenation: 1
[08:05:08.303] | :  - Number of values expected: 1
[08:05:08.303] | : Reducing values from 1 chunks ... DONE
[08:05:08.304] | future_lapply() -> future_xapply() ... done
[08:05:08.304] future_lapply() ... done
[08:05:08.304] future_lapply() ...
[08:05:08.305] | Globals in FUN(): [n=1] ‘typeof’
[08:05:08.305] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:08.305] | future_lapply() -> future_xapply() ...
[08:05:08.305] | : Number of chunks: 1
[08:05:08.305] | : getGlobalsAndPackagesXApply() ...
[08:05:08.305] | : . future.globals: TRUE
[08:05:08.313] | : . globals found/used: [n=1] ‘FUN’
[08:05:08.313] | : . needed namespaces: [n=0] 
[08:05:08.313] | : . use_args: TRUE
[08:05:08.313] | : . Getting '...' globals ...
[08:05:08.314] | : . ' '...' content: [n=1] ‘b’
[08:05:08.314] | : . ' List of 1
[08:05:08.314] | : . '  $ ...:List of 1
[08:05:08.314] | : . '   ..$ b:<environment: 0x5595af73e318> 
[08:05:08.314] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.314] | : . '  - attr(*, "where")=List of 1
[08:05:08.314] | : . '   ..$ ...:<environment: 0x5595af73d860> 
[08:05:08.314] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.314] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:08.314] | : . '  - attr(*, "total_size")= num NA
[08:05:08.317] | : . Getting '...' globals ... done
[08:05:08.318] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:08.318] | : . List of 2
[08:05:08.318] | : .  $ ...future.FUN:function (a, b)  
[08:05:08.318] | : .  $ ...          :List of 1
[08:05:08.318] | : .   ..$ b:<environment: 0x5595af73e318> 
[08:05:08.318] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.318] | : .  - attr(*, "where")=List of 2
[08:05:08.318] | : .   ..$ ...future.FUN:<environment: 0x5595af73d860> 
[08:05:08.318] | : .   ..$ ...          :<environment: 0x5595af73d860> 
[08:05:08.318] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.318] | : .  - attr(*, "resolved")= logi FALSE
[08:05:08.318] | : .  - attr(*, "total_size")= num 4260
[08:05:08.326] | : . Packages to be attached in all futures: [n=0] 
[08:05:08.326] | : getGlobalsAndPackagesXApply() ... done
[08:05:08.327] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.327] | : List of 5
[08:05:08.327] | :  $ ...future.FUN            :function (a, b)  
[08:05:08.327] | :  $ ...                      :List of 1
[08:05:08.327] | :   ..$ b:<environment: 0x5595af73e318> 
[08:05:08.327] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.327] | :  $ ...future.elements_ii    : NULL
[08:05:08.327] | :  $ ...future.seeds_ii       : NULL
[08:05:08.327] | :  $ ...future.globals.maxSize: NULL
[08:05:08.327] | :  - attr(*, "where")=List of 5
[08:05:08.327] | :   ..$ ...future.FUN            :<environment: 0x5595af73d860> 
[08:05:08.327] | :   ..$ ...                      :<environment: 0x5595af73d860> 
[08:05:08.327] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:08.327] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:08.327] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:08.327] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.327] | :  - attr(*, "resolved")= logi FALSE
[08:05:08.327] | :  - attr(*, "total_size")= num 4260
[08:05:08.332] | : Number of futures (= number of chunks): 1
[08:05:08.333] | : Launching 1 futures (chunks) ...
[08:05:08.333] | : Chunk #1 of 1 ...
[08:05:08.333] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:08.333] | :    + additional globals found: [n=0] 
[08:05:08.333] | :    + additional namespaces needed: [n=0] 
[08:05:08.334] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:08.334] | :  - seeds: <none>
[08:05:08.334] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.338] | : Created future:
[08:05:08.338] | : MulticoreFuture:
[08:05:08.338] | : Label: ‘future_lapply-1’
[08:05:08.338] | : Expression:
[08:05:08.338] | : {
[08:05:08.338] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:08.338] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:08.338] | :     "# as a global variable                                         "
[08:05:08.338] | :     do.call(function(...) {
[08:05:08.338] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:08.338] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:08.338] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:08.338] | :         "# anonymous function.                                          "
[08:05:08.338] | :         "#                                                              "
[08:05:08.338] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:08.338] | :         "# function environment of FUN() to the calling environment.    "
[08:05:08.338] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:08.338] | :         "# global environment, which is where globals are written.      "
[08:05:08.338] | :         penv <- env <- environment(...future.FUN)
[08:05:08.338] | :         repeat {
[08:05:08.338] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:08.338] | :                 emptyenv())) 
[08:05:08.338] | :                 break
[08:05:08.338] | :             penv <- env
[08:05:08.338] | :             env <- parent.env(env)
[08:05:08.338] | :         }
[08:05:08.338] | :         if (identical(penv, globalenv())) {
[08:05:08.338] | :             environment(...future.FUN) <- environment()
[08:05:08.338] | :         }
[08:05:08.338] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:08.338] | :             !isNamespace(penv)) {
[08:05:08.338] | :             parent.env(penv) <- environment()
[08:05:08.338] | :         }
[08:05:08.338] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:08.338] | :         {
[08:05:08.338] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:08.338] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:08.338] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:08.338] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:08.338] | :                 on.exit(options(oopts), add = TRUE)
[08:05:08.338] | :             }
[08:05:08.338] | :             {
[08:05:08.338] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:08.338] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:08.338] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:08.338] | :                   {
[08:05:08.338] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:08.338] | :                   }
[08:05:08.338] | :                 })
[08:05:08.338] | :             }
[08:05:08.338] | :         }
[08:05:08.338] | :     }, args = future.call.arguments)
[08:05:08.338] | : }
[08:05:08.338] | : Globals: 5 objects totaling 4.43 KiB (function ‘...future.FUN’ of 332 bytes, DotDotDotList ‘future.call.arguments’ of 279 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:08.338] | : Packages: <none>
[08:05:08.338] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:08.338] | : Capture standard output: TRUE
[08:05:08.338] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:08.338] | : Immediate condition classes: ‘immediateCondition’
[08:05:08.338] | : Lazy evaluation: FALSE
[08:05:08.338] | : Local evaluation: TRUE
[08:05:08.338] | : Asynchronous evaluation: TRUE
[08:05:08.338] | : Early signaling: FALSE
[08:05:08.338] | : Environment: R_GlobalEnv
[08:05:08.338] | : State: ‘running’
[08:05:08.338] | : Resolved: TRUE
[08:05:08.338] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-22
[08:05:08.338] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:08.338] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:08.338] | : Value: <not collected>
[08:05:08.338] | : Conditions captured: <none>
[08:05:08.346] | : Chunk #1 of 1 ... DONE
[08:05:08.347] | : Launching 1 futures (chunks) ... DONE
[08:05:08.347] | : Resolving 1 futures (chunks) ...
[08:05:08.349] | :  - Number of value chunks collected: 1
[08:05:08.349] | : Resolving 1 futures (chunks) ... DONE
[08:05:08.349] | : Reducing values from 1 chunks ...
[08:05:08.349] | :  - Number of values collected after concatenation: 1
[08:05:08.349] | :  - Number of values expected: 1
[08:05:08.349] | : Reducing values from 1 chunks ... DONE
[08:05:08.349] | future_lapply() -> future_xapply() ... done
[08:05:08.350] future_lapply() ... done
[08:05:08.350] future_lapply() ...
[08:05:08.350] | Globals in FUN(): [n=1] ‘typeof’
[08:05:08.351] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:08.351] | future_lapply() -> future_xapply() ...
[08:05:08.351] | : Number of chunks: 1
[08:05:08.351] | : getGlobalsAndPackagesXApply() ...
[08:05:08.351] | : . future.globals: TRUE
[08:05:08.359] | : . globals found/used: [n=1] ‘FUN’
[08:05:08.359] | : . needed namespaces: [n=0] 
[08:05:08.360] | : . use_args: TRUE
[08:05:08.360] | : . Getting '...' globals ...
[08:05:08.360] | : . ' '...' content: [n=1] ‘b’
[08:05:08.361] | : . ' List of 1
[08:05:08.361] | : . '  $ ...:List of 1
[08:05:08.361] | : . '   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[08:05:08.361] | : . '   .. .. ..@ slots     :List of 4
[08:05:08.361] | : . '   .. .. .. ..$ .Data  : chr "function"
[08:05:08.361] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. ..$ target : chr "signature"
[08:05:08.361] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. ..$ defined: chr "signature"
[08:05:08.361] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. ..$ generic: chr "character"
[08:05:08.361] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. ..@ contains  :List of 4
[08:05:08.361] | : . '   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.361] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ superClass: chr "function"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.361] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:08.361] | : . '   .. .. .. .. .. ..@ dataPart  : logi TRUE
[08:05:08.361] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:08.361] | : . '   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.361] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.361] | : . '   .. .. .. .. .. ..@ by        : chr "function"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.361] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:08.361] | : . '   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.361] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.361] | : . '   .. .. .. .. .. ..@ by        : chr "function"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.361] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:08.361] | : . '   .. .. .. ..$ optionalMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.361] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ superClass: chr "optionalMethod"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.361] | : . '   .. .. .. .. .. ..@ by        : chr "function"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.361] | : . '   .. .. .. .. .. ..@ distance  : num 3
[08:05:08.361] | : . '   .. .. ..@ virtual   : logi FALSE
[08:05:08.361] | : . '   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[08:05:08.361] | : . '  list()
[08:05:08.361] | : . '   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[08:05:08.361] | : . '   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:08.361] | : . '   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:08.361] | : . '   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:08.361] | : . '   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[08:05:08.361] | : . '   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:08.361] | : . '   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:08.361] | : . '   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:08.361] | : . '   .. .. .. .. ..$ generic: chr(0) 
[08:05:08.361] | : . '   .. .. ..@ validity  : NULL
[08:05:08.361] | : . '   .. .. ..@ access    : list()
[08:05:08.361] | : . '   .. .. ..@ className : chr "MethodDefinition"
[08:05:08.361] | : . '   .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. ..@ package   : chr "methods"
[08:05:08.361] | : . '   .. .. ..@ subclasses:List of 7
[08:05:08.361] | : . '   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.361] | : . '   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.361] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:08.361] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.361] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:08.361] | : . '   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.361] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.361] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:08.361] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.361] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:08.361] | : . '   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.361] | : . '   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.361] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:08.361] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.361] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:08.361] | : . '   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.361] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.361] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:08.361] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.361] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:08.361] | : . '   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.361] | : . '   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.361] | : . '   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.361] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:08.361] | : . '   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.361] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.361] | : . '   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.361] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:08.361] | : . '   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.361] | : . '   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.361] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.361] | : . '   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:08.361] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.361] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.361] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:08.361] | : . '   .. .. ..@ versionKey:<externalptr> 
[08:05:08.361] | : . '   .. .. ..@ sealed    : logi TRUE
[08:05:08.361] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.361] | : . '  - attr(*, "where")=List of 1
[08:05:08.361] | : . '   ..$ ...:<environment: 0x5595aea22dd0> 
[08:05:08.361] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.361] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:08.361] | : . '  - attr(*, "total_size")= num NA
[08:05:08.423] | : . Getting '...' globals ... done
[08:05:08.423] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:08.423] | : . List of 2
[08:05:08.423] | : .  $ ...future.FUN:function (a, b)  
[08:05:08.423] | : .  $ ...          :List of 1
[08:05:08.423] | : .   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[08:05:08.423] | : .   .. .. ..@ slots     :List of 4
[08:05:08.423] | : .   .. .. .. ..$ .Data  : chr "function"
[08:05:08.423] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. ..$ target : chr "signature"
[08:05:08.423] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. ..$ defined: chr "signature"
[08:05:08.423] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. ..$ generic: chr "character"
[08:05:08.423] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. ..@ contains  :List of 4
[08:05:08.423] | : .   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.423] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ superClass: chr "function"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.423] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:08.423] | : .   .. .. .. .. .. ..@ dataPart  : logi TRUE
[08:05:08.423] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:08.423] | : .   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.423] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.423] | : .   .. .. .. .. .. ..@ by        : chr "function"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.423] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:08.423] | : .   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.423] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.423] | : .   .. .. .. .. .. ..@ by        : chr "function"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.423] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:08.423] | : .   .. .. .. ..$ optionalMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.423] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ superClass: chr "optionalMethod"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.423] | : .   .. .. .. .. .. ..@ by        : chr "function"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.423] | : .   .. .. .. .. .. ..@ distance  : num 3
[08:05:08.423] | : .   .. .. ..@ virtual   : logi FALSE
[08:05:08.423] | : .   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[08:05:08.423] | : .  list()
[08:05:08.423] | : .   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[08:05:08.423] | : .   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:08.423] | : .   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:08.423] | : .   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:08.423] | : .   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[08:05:08.423] | : .   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:08.423] | : .   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:08.423] | : .   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:08.423] | : .   .. .. .. .. ..$ generic: chr(0) 
[08:05:08.423] | : .   .. .. ..@ validity  : NULL
[08:05:08.423] | : .   .. .. ..@ access    : list()
[08:05:08.423] | : .   .. .. ..@ className : chr "MethodDefinition"
[08:05:08.423] | : .   .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. ..@ package   : chr "methods"
[08:05:08.423] | : .   .. .. ..@ subclasses:List of 7
[08:05:08.423] | : .   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.423] | : .   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.423] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:08.423] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.423] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:08.423] | : .   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.423] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.423] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:08.423] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.423] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:08.423] | : .   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.423] | : .   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.423] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:08.423] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.423] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:08.423] | : .   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.423] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.423] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:08.423] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.423] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:08.423] | : .   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.423] | : .   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.423] | : .   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.423] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:08.423] | : .   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.423] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.423] | : .   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.423] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:08.423] | : .   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.423] | : .   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.423] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.423] | : .   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:08.423] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.423] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.423] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:08.423] | : .   .. .. ..@ versionKey:<externalptr> 
[08:05:08.423] | : .   .. .. ..@ sealed    : logi TRUE
[08:05:08.423] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.423] | : .  - attr(*, "where")=List of 2
[08:05:08.423] | : .   ..$ ...future.FUN:<environment: 0x5595aea22dd0> 
[08:05:08.423] | : .   ..$ ...          :<environment: 0x5595aea22dd0> 
[08:05:08.423] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.423] | : .  - attr(*, "resolved")= logi FALSE
[08:05:08.423] | : .  - attr(*, "total_size")= num 106127
[08:05:08.478] | : . Packages to be attached in all futures: [n=0] 
[08:05:08.478] | : getGlobalsAndPackagesXApply() ... done
[08:05:08.478] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.479] | : List of 5
[08:05:08.479] | :  $ ...future.FUN            :function (a, b)  
[08:05:08.479] | :  $ ...                      :List of 1
[08:05:08.479] | :   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[08:05:08.479] | :   .. .. ..@ slots     :List of 4
[08:05:08.479] | :   .. .. .. ..$ .Data  : chr "function"
[08:05:08.479] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. ..$ target : chr "signature"
[08:05:08.479] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. ..$ defined: chr "signature"
[08:05:08.479] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. ..$ generic: chr "character"
[08:05:08.479] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. ..@ contains  :List of 4
[08:05:08.479] | :   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.479] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ superClass: chr "function"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.479] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.479] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.479] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.479] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:08.479] | :   .. .. .. .. .. ..@ dataPart  : logi TRUE
[08:05:08.479] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:08.479] | :   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.479] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.479] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.479] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.479] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.479] | :   .. .. .. .. .. ..@ by        : chr "function"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.479] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:08.479] | :   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.479] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.479] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.479] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.479] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.479] | :   .. .. .. .. .. ..@ by        : chr "function"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.479] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:08.479] | :   .. .. .. ..$ optionalMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.479] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ superClass: chr "optionalMethod"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.479] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.479] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.479] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.479] | :   .. .. .. .. .. ..@ by        : chr "function"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.479] | :   .. .. .. .. .. ..@ distance  : num 3
[08:05:08.479] | :   .. .. ..@ virtual   : logi FALSE
[08:05:08.479] | :   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[08:05:08.479] | :  list()
[08:05:08.479] | :   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[08:05:08.479] | :   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:08.479] | :   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:08.479] | :   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:08.479] | :   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[08:05:08.479] | :   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:08.479] | :   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:08.479] | :   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:08.479] | :   .. .. .. .. ..$ generic: chr(0) 
[08:05:08.479] | :   .. .. ..@ validity  : NULL
[08:05:08.479] | :   .. .. ..@ access    : list()
[08:05:08.479] | :   .. .. ..@ className : chr "MethodDefinition"
[08:05:08.479] | :   .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. ..@ package   : chr "methods"
[08:05:08.479] | :   .. .. ..@ subclasses:List of 7
[08:05:08.479] | :   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.479] | :   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.479] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.479] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.479] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.479] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:08.479] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.479] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:08.479] | :   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.479] | :   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.479] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.479] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.479] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.479] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:08.479] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.479] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:08.479] | :   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.479] | :   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.479] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.479] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.479] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.479] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:08.479] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.479] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:08.479] | :   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.479] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.479] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.479] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.479] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.479] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:08.479] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.479] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:08.479] | :   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.479] | :   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.479] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.479] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.479] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.479] | :   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.479] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:08.479] | :   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.479] | :   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.479] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.479] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.479] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.479] | :   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.479] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:08.479] | :   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:08.479] | :   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:08.479] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:08.479] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:08.479] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:08.479] | :   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:08.479] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:08.479] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:08.479] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:08.479] | :   .. .. ..@ versionKey:<externalptr> 
[08:05:08.479] | :   .. .. ..@ sealed    : logi TRUE
[08:05:08.479] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.479] | :  $ ...future.elements_ii    : NULL
[08:05:08.479] | :  $ ...future.seeds_ii       : NULL
[08:05:08.479] | :  $ ...future.globals.maxSize: NULL
[08:05:08.479] | :  - attr(*, "where")=List of 5
[08:05:08.479] | :   ..$ ...future.FUN            :<environment: 0x5595aea22dd0> 
[08:05:08.479] | :   ..$ ...                      :<environment: 0x5595aea22dd0> 
[08:05:08.479] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:08.479] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:08.479] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:08.479] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.479] | :  - attr(*, "resolved")= logi FALSE
[08:05:08.479] | :  - attr(*, "total_size")= num 106127
[08:05:08.532] | : Number of futures (= number of chunks): 1
[08:05:08.532] | : Launching 1 futures (chunks) ...
[08:05:08.533] | : Chunk #1 of 1 ...
[08:05:08.533] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:08.533] | :    + additional globals found: [n=0] 
[08:05:08.533] | :    + additional namespaces needed: [n=0] 
[08:05:08.533] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:08.533] | :  - seeds: <none>
[08:05:08.534] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.537] | : Created future:
[08:05:08.538] | : MulticoreFuture:
[08:05:08.538] | : Label: ‘future_lapply-1’
[08:05:08.538] | : Expression:
[08:05:08.538] | : {
[08:05:08.538] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:08.538] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:08.538] | :     "# as a global variable                                         "
[08:05:08.538] | :     do.call(function(...) {
[08:05:08.538] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:08.538] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:08.538] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:08.538] | :         "# anonymous function.                                          "
[08:05:08.538] | :         "#                                                              "
[08:05:08.538] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:08.538] | :         "# function environment of FUN() to the calling environment.    "
[08:05:08.538] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:08.538] | :         "# global environment, which is where globals are written.      "
[08:05:08.538] | :         penv <- env <- environment(...future.FUN)
[08:05:08.538] | :         repeat {
[08:05:08.538] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:08.538] | :                 emptyenv())) 
[08:05:08.538] | :                 break
[08:05:08.538] | :             penv <- env
[08:05:08.538] | :             env <- parent.env(env)
[08:05:08.538] | :         }
[08:05:08.538] | :         if (identical(penv, globalenv())) {
[08:05:08.538] | :             environment(...future.FUN) <- environment()
[08:05:08.538] | :         }
[08:05:08.538] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:08.538] | :             !isNamespace(penv)) {
[08:05:08.538] | :             parent.env(penv) <- environment()
[08:05:08.538] | :         }
[08:05:08.538] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:08.538] | :         {
[08:05:08.538] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:08.538] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:08.538] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:08.538] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:08.538] | :                 on.exit(options(oopts), add = TRUE)
[08:05:08.538] | :             }
[08:05:08.538] | :             {
[08:05:08.538] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:08.538] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:08.538] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:08.538] | :                   {
[08:05:08.538] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:08.538] | :                   }
[08:05:08.538] | :                 })
[08:05:08.538] | :             }
[08:05:08.538] | :         }
[08:05:08.538] | :     }, args = future.call.arguments)
[08:05:08.538] | : }
[08:05:08.538] | : Globals: 5 objects totaling 103.91 KiB (DotDotDotList ‘future.call.arguments’ of 50.30 KiB, function ‘...future.FUN’ of 332 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:08.538] | : Packages: <none>
[08:05:08.538] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:08.538] | : Capture standard output: TRUE
[08:05:08.538] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:08.538] | : Immediate condition classes: ‘immediateCondition’
[08:05:08.538] | : Lazy evaluation: FALSE
[08:05:08.538] | : Local evaluation: TRUE
[08:05:08.538] | : Asynchronous evaluation: TRUE
[08:05:08.538] | : Early signaling: FALSE
[08:05:08.538] | : Environment: R_GlobalEnv
[08:05:08.538] | : State: ‘running’
[08:05:08.538] | : Resolved: TRUE
[08:05:08.538] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-23
[08:05:08.538] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:08.538] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:08.538] | : Value: <not collected>
[08:05:08.538] | : Conditions captured: <none>
[08:05:08.546] | : Chunk #1 of 1 ... DONE
[08:05:08.546] | : Launching 1 futures (chunks) ... DONE
[08:05:08.546] | : Resolving 1 futures (chunks) ...
[08:05:08.548] | :  - Number of value chunks collected: 1
[08:05:08.548] | : Resolving 1 futures (chunks) ... DONE
[08:05:08.549] | : Reducing values from 1 chunks ...
[08:05:08.549] | :  - Number of values collected after concatenation: 1
[08:05:08.549] | :  - Number of values expected: 1
[08:05:08.549] | : Reducing values from 1 chunks ... DONE
[08:05:08.549] | future_lapply() -> future_xapply() ... done
[08:05:08.549] future_lapply() ... done
- future_lapply(X, ...) - 'X' containing globals ...
List of 4
 $ : num 84
 $ : num 10.5
 $ : num 63
 $ : int 11
[08:05:08.552] future_lapply() ...
[08:05:08.553] | Globals in FUN(): [n=0] 
[08:05:08.553] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:08.553] | future_lapply() -> future_xapply() ...
[08:05:08.554] | : Number of chunks: 2
[08:05:08.554] | : getGlobalsAndPackagesXApply() ...
[08:05:08.554] | : . future.globals: TRUE
[08:05:08.561] | : . globals found/used: [n=1] ‘FUN’
[08:05:08.561] | : . needed namespaces: [n=0] 
[08:05:08.562] | : . use_args: TRUE
[08:05:08.562] | : . Getting '...' globals ...
[08:05:08.562] | : . ' '...' content: [n=0] 
[08:05:08.563] | : . ' List of 1
[08:05:08.563] | : . '  $ ...: list()
[08:05:08.563] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.563] | : . '  - attr(*, "where")=List of 1
[08:05:08.563] | : . '   ..$ ...:<environment: 0x5595b0eacf88> 
[08:05:08.563] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.563] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:08.563] | : . '  - attr(*, "total_size")= num NA
[08:05:08.566] | : . Getting '...' globals ... done
[08:05:08.566] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:08.566] | : . List of 2
[08:05:08.566] | : .  $ ...future.FUN:function (f)  
[08:05:08.566] | : .  $ ...          : list()
[08:05:08.566] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.566] | : .  - attr(*, "where")=List of 2
[08:05:08.566] | : .   ..$ ...future.FUN:<environment: 0x5595b0eacf88> 
[08:05:08.566] | : .   ..$ ...          :<environment: 0x5595b0eacf88> 
[08:05:08.566] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.566] | : .  - attr(*, "resolved")= logi FALSE
[08:05:08.566] | : .  - attr(*, "total_size")= num 5165
[08:05:08.569] | : . Packages to be attached in all futures: [n=0] 
[08:05:08.570] | : getGlobalsAndPackagesXApply() ... done
[08:05:08.570] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.570] | : List of 5
[08:05:08.570] | :  $ ...future.FUN            :function (f)  
[08:05:08.570] | :  $ ...                      : list()
[08:05:08.570] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.570] | :  $ ...future.elements_ii    : NULL
[08:05:08.570] | :  $ ...future.seeds_ii       : NULL
[08:05:08.570] | :  $ ...future.globals.maxSize: NULL
[08:05:08.570] | :  - attr(*, "where")=List of 5
[08:05:08.570] | :   ..$ ...future.FUN            :<environment: 0x5595b0eacf88> 
[08:05:08.570] | :   ..$ ...                      :<environment: 0x5595b0eacf88> 
[08:05:08.570] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:08.570] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:08.570] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:08.570] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.570] | :  - attr(*, "resolved")= logi FALSE
[08:05:08.570] | :  - attr(*, "total_size")= num 5165
[08:05:08.575] | : Number of futures (= number of chunks): 2
[08:05:08.575] | : Launching 2 futures (chunks) ...
[08:05:08.575] | : Chunk #1 of 2 ...
[08:05:08.575] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:08.587] | :    + additional globals found: [n=2] ‘a’, ‘b’
[08:05:08.587] | :    + additional namespaces needed: [n=0] 
[08:05:08.588] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:08.588] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:08.588] | :  - seeds: <none>
[08:05:08.588] | :  - All globals exported: [n=7] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’, ‘a’, ‘b’
[08:05:08.591] | : Created future:
[08:05:08.592] | : MulticoreFuture:
[08:05:08.592] | : Label: ‘future_lapply-1’
[08:05:08.592] | : Expression:
[08:05:08.592] | : {
[08:05:08.592] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:08.592] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:08.592] | :     "# as a global variable                                         "
[08:05:08.592] | :     do.call(function(...) {
[08:05:08.592] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:08.592] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:08.592] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:08.592] | :         "# anonymous function.                                          "
[08:05:08.592] | :         "#                                                              "
[08:05:08.592] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:08.592] | :         "# function environment of FUN() to the calling environment.    "
[08:05:08.592] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:08.592] | :         "# global environment, which is where globals are written.      "
[08:05:08.592] | :         penv <- env <- environment(...future.FUN)
[08:05:08.592] | :         repeat {
[08:05:08.592] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:08.592] | :                 emptyenv())) 
[08:05:08.592] | :                 break
[08:05:08.592] | :             penv <- env
[08:05:08.592] | :             env <- parent.env(env)
[08:05:08.592] | :         }
[08:05:08.592] | :         if (identical(penv, globalenv())) {
[08:05:08.592] | :             environment(...future.FUN) <- environment()
[08:05:08.592] | :         }
[08:05:08.592] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:08.592] | :             !isNamespace(penv)) {
[08:05:08.592] | :             parent.env(penv) <- environment()
[08:05:08.592] | :         }
[08:05:08.592] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:08.592] | :         {
[08:05:08.592] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:08.592] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:08.592] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:08.592] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:08.592] | :                 on.exit(options(oopts), add = TRUE)
[08:05:08.592] | :             }
[08:05:08.592] | :             {
[08:05:08.592] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:08.592] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:08.592] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:08.592] | :                   {
[08:05:08.592] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:08.592] | :                   }
[08:05:08.592] | :                 })
[08:05:08.592] | :             }
[08:05:08.592] | :         }
[08:05:08.592] | :     }, args = future.call.arguments)
[08:05:08.592] | : }
[08:05:08.592] | : Globals: 7 objects totaling 5.90 KiB (list ‘...future.elements_ii’ of 588 bytes, function ‘...future.FUN’ of 225 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘a’ of 39 bytes, numeric ‘b’ of 39 bytes, ...)
[08:05:08.592] | : Packages: <none>
[08:05:08.592] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:08.592] | : Capture standard output: TRUE
[08:05:08.592] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:08.592] | : Immediate condition classes: ‘immediateCondition’
[08:05:08.592] | : Lazy evaluation: FALSE
[08:05:08.592] | : Local evaluation: TRUE
[08:05:08.592] | : Asynchronous evaluation: TRUE
[08:05:08.592] | : Early signaling: FALSE
[08:05:08.592] | : Environment: R_GlobalEnv
[08:05:08.592] | : State: ‘running’
[08:05:08.592] | : Resolved: TRUE
[08:05:08.592] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-24
[08:05:08.592] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:08.592] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:08.592] | : Value: <not collected>
[08:05:08.592] | : Conditions captured: <none>
[08:05:08.600] | : Chunk #1 of 2 ... DONE
[08:05:08.600] | : Chunk #2 of 2 ...
[08:05:08.600] | :  - Finding globals in 'X' for chunk #2 ...
[08:05:08.618] | :    + additional globals found: [n=2] ‘a’, ‘b’
[08:05:08.618] | :    + additional namespaces needed: [n=1] ‘tools’
[08:05:08.618] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:05:08.619] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:08.619] | :  - seeds: <none>
[08:05:08.619] | :  - All globals exported: [n=7] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’, ‘a’, ‘b’
[08:05:08.623] | : Created future:
[08:05:08.624] | : MulticoreFuture:
[08:05:08.624] | : Label: ‘future_lapply-2’
[08:05:08.624] | : Expression:
[08:05:08.624] | : {
[08:05:08.624] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:08.624] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:08.624] | :     "# as a global variable                                         "
[08:05:08.624] | :     do.call(function(...) {
[08:05:08.624] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:08.624] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:08.624] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:08.624] | :         "# anonymous function.                                          "
[08:05:08.624] | :         "#                                                              "
[08:05:08.624] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:08.624] | :         "# function environment of FUN() to the calling environment.    "
[08:05:08.624] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:08.624] | :         "# global environment, which is where globals are written.      "
[08:05:08.624] | :         penv <- env <- environment(...future.FUN)
[08:05:08.624] | :         repeat {
[08:05:08.624] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:08.624] | :                 emptyenv())) 
[08:05:08.624] | :                 break
[08:05:08.624] | :             penv <- env
[08:05:08.624] | :             env <- parent.env(env)
[08:05:08.624] | :         }
[08:05:08.624] | :         if (identical(penv, globalenv())) {
[08:05:08.624] | :             environment(...future.FUN) <- environment()
[08:05:08.624] | :         }
[08:05:08.624] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:08.624] | :             !isNamespace(penv)) {
[08:05:08.624] | :             parent.env(penv) <- environment()
[08:05:08.624] | :         }
[08:05:08.624] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:08.624] | :         {
[08:05:08.624] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:08.624] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:08.624] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:08.624] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:08.624] | :                 on.exit(options(oopts), add = TRUE)
[08:05:08.624] | :             }
[08:05:08.624] | :             {
[08:05:08.624] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:08.624] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:08.624] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:08.624] | :                   {
[08:05:08.624] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:08.624] | :                   }
[08:05:08.624] | :                 })
[08:05:08.624] | :             }
[08:05:08.624] | :         }
[08:05:08.624] | :     }, args = future.call.arguments)
[08:05:08.624] | : }
[08:05:08.624] | : Globals: 7 objects totaling 6.18 KiB (list ‘...future.elements_ii’ of 903 bytes, function ‘...future.FUN’ of 225 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘a’ of 39 bytes, numeric ‘b’ of 39 bytes, ...)
[08:05:08.624] | : Packages: 1 packages (‘tools’)
[08:05:08.624] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:08.624] | : Capture standard output: TRUE
[08:05:08.624] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:08.624] | : Immediate condition classes: ‘immediateCondition’
[08:05:08.624] | : Lazy evaluation: FALSE
[08:05:08.624] | : Local evaluation: TRUE
[08:05:08.624] | : Asynchronous evaluation: TRUE
[08:05:08.624] | : Early signaling: FALSE
[08:05:08.624] | : Environment: R_GlobalEnv
[08:05:08.624] | : State: ‘running’
[08:05:08.624] | : Resolved: TRUE
[08:05:08.624] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-25
[08:05:08.624] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:08.624] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:08.624] | : Value: <not collected>
[08:05:08.624] | : Conditions captured: <none>
[08:05:08.638] | : Chunk #2 of 2 ... DONE
[08:05:08.639] | : Launching 2 futures (chunks) ... DONE
[08:05:08.639] | : Resolving 2 futures (chunks) ...
[08:05:08.643] | :  - Number of value chunks collected: 2
[08:05:08.643] | : Resolving 2 futures (chunks) ... DONE
[08:05:08.643] | : Reducing values from 2 chunks ...
[08:05:08.644] | :  - Number of values collected after concatenation: 4
[08:05:08.644] | :  - Number of values expected: 4
[08:05:08.644] | : Reducing values from 2 chunks ... DONE
[08:05:08.644] | future_lapply() -> future_xapply() ... done
[08:05:08.644] future_lapply() ... done
List of 4
 $ : num 84
 $ : num 10.5
 $ : num 63
 $ : int 11
- future_lapply(X, ...) - '{ a <- a + 1; a }' ...
[08:05:08.647] future_lapply() ...
[08:05:08.648] | Globals in FUN(): [n=4] ‘{’, ‘<-’, ‘a’, ‘+’
[08:05:08.648] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:08.649] | future_lapply() -> future_xapply() ...
[08:05:08.649] | : Number of chunks: 1
[08:05:08.649] | : getGlobalsAndPackagesXApply() ...
[08:05:08.649] | : . future.globals: TRUE
[08:05:08.658] | : . globals found/used: [n=2] ‘FUN’, ‘a’
[08:05:08.658] | : . needed namespaces: [n=0] 
[08:05:08.658] | : . use_args: TRUE
[08:05:08.659] | : . Getting '...' globals ...
[08:05:08.659] | : . ' '...' content: [n=0] 
[08:05:08.659] | : . ' List of 1
[08:05:08.659] | : . '  $ ...: list()
[08:05:08.659] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.659] | : . '  - attr(*, "where")=List of 1
[08:05:08.659] | : . '   ..$ ...:<environment: 0x5595af894258> 
[08:05:08.659] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.659] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:08.659] | : . '  - attr(*, "total_size")= num NA
[08:05:08.662] | : . Getting '...' globals ... done
[08:05:08.662] | : . Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘a’, ‘...’
[08:05:08.663] | : . List of 3
[08:05:08.663] | : .  $ ...future.FUN:function (ii)  
[08:05:08.663] | : .  $ a            : num 1
[08:05:08.663] | : .  $ ...          : list()
[08:05:08.663] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.663] | : .  - attr(*, "where")=List of 3
[08:05:08.663] | : .   ..$ ...future.FUN:<environment: 0x5595af894258> 
[08:05:08.663] | : .   ..$ a            :<environment: R_GlobalEnv> 
[08:05:08.663] | : .   ..$ ...          :<environment: 0x5595af894258> 
[08:05:08.663] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.663] | : .  - attr(*, "resolved")= logi FALSE
[08:05:08.663] | : .  - attr(*, "total_size")= num 4124
[08:05:08.667] | : . Packages to be attached in all futures: [n=0] 
[08:05:08.667] | : getGlobalsAndPackagesXApply() ... done
[08:05:08.667] | : Globals pass to each chunk: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.667] | : List of 6
[08:05:08.667] | :  $ ...future.FUN            :function (ii)  
[08:05:08.667] | :  $ a                        : num 1
[08:05:08.667] | :  $ ...                      : list()
[08:05:08.667] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.667] | :  $ ...future.elements_ii    : NULL
[08:05:08.667] | :  $ ...future.seeds_ii       : NULL
[08:05:08.667] | :  $ ...future.globals.maxSize: NULL
[08:05:08.667] | :  - attr(*, "where")=List of 6
[08:05:08.667] | :   ..$ ...future.FUN            :<environment: 0x5595af894258> 
[08:05:08.667] | :   ..$ a                        :<environment: R_GlobalEnv> 
[08:05:08.667] | :   ..$ ...                      :<environment: 0x5595af894258> 
[08:05:08.667] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:08.667] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:08.667] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:08.667] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.667] | :  - attr(*, "resolved")= logi FALSE
[08:05:08.667] | :  - attr(*, "total_size")= num 4124
[08:05:08.673] | : Number of futures (= number of chunks): 1
[08:05:08.673] | : Launching 1 futures (chunks) ...
[08:05:08.673] | : Chunk #1 of 1 ...
[08:05:08.673] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:08.674] | :    + additional globals found: [n=0] 
[08:05:08.674] | :    + additional namespaces needed: [n=0] 
[08:05:08.674] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:08.674] | :  - seeds: <none>
[08:05:08.674] | :  - All globals exported: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.677] | : Created future:
[08:05:08.678] | : MulticoreFuture:
[08:05:08.678] | : Label: ‘future_lapply-1’
[08:05:08.678] | : Expression:
[08:05:08.678] | : {
[08:05:08.678] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:08.678] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:08.678] | :     "# as a global variable                                         "
[08:05:08.678] | :     do.call(function(...) {
[08:05:08.678] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:08.678] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:08.678] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:08.678] | :         "# anonymous function.                                          "
[08:05:08.678] | :         "#                                                              "
[08:05:08.678] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:08.678] | :         "# function environment of FUN() to the calling environment.    "
[08:05:08.678] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:08.678] | :         "# global environment, which is where globals are written.      "
[08:05:08.678] | :         penv <- env <- environment(...future.FUN)
[08:05:08.678] | :         repeat {
[08:05:08.678] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:08.678] | :                 emptyenv())) 
[08:05:08.678] | :                 break
[08:05:08.678] | :             penv <- env
[08:05:08.678] | :             env <- parent.env(env)
[08:05:08.678] | :         }
[08:05:08.678] | :         if (identical(penv, globalenv())) {
[08:05:08.678] | :             environment(...future.FUN) <- environment()
[08:05:08.678] | :         }
[08:05:08.678] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:08.678] | :             !isNamespace(penv)) {
[08:05:08.678] | :             parent.env(penv) <- environment()
[08:05:08.678] | :         }
[08:05:08.678] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:08.678] | :         {
[08:05:08.678] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:08.678] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:08.678] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:08.678] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:08.678] | :                 on.exit(options(oopts), add = TRUE)
[08:05:08.678] | :             }
[08:05:08.678] | :             {
[08:05:08.678] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:08.678] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:08.678] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:08.678] | :                   {
[08:05:08.678] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:08.678] | :                   }
[08:05:08.678] | :                 })
[08:05:08.678] | :             }
[08:05:08.678] | :         }
[08:05:08.678] | :     }, args = future.call.arguments)
[08:05:08.678] | : }
[08:05:08.678] | : Globals: 6 objects totaling 4.29 KiB (function ‘...future.FUN’ of 511 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[08:05:08.678] | : Packages: <none>
[08:05:08.678] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:08.678] | : Capture standard output: TRUE
[08:05:08.678] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:08.678] | : Immediate condition classes: ‘immediateCondition’
[08:05:08.678] | : Lazy evaluation: FALSE
[08:05:08.678] | : Local evaluation: TRUE
[08:05:08.678] | : Asynchronous evaluation: TRUE
[08:05:08.678] | : Early signaling: FALSE
[08:05:08.678] | : Environment: R_GlobalEnv
[08:05:08.678] | : State: ‘running’
[08:05:08.678] | : Resolved: TRUE
[08:05:08.678] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-26
[08:05:08.678] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:08.678] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:08.678] | : Value: <not collected>
[08:05:08.678] | : Conditions captured: <none>
[08:05:08.686] | : Chunk #1 of 1 ... DONE
[08:05:08.686] | : Launching 1 futures (chunks) ... DONE
[08:05:08.686] | : Resolving 1 futures (chunks) ...
[08:05:08.688] | :  - Number of value chunks collected: 1
[08:05:08.688] | : Resolving 1 futures (chunks) ... DONE
[08:05:08.688] | : Reducing values from 1 chunks ...
[08:05:08.689] | :  - Number of values collected after concatenation: 1
[08:05:08.689] | :  - Number of values expected: 1
[08:05:08.689] | : Reducing values from 1 chunks ... DONE
[08:05:08.689] | future_lapply() -> future_xapply() ... done
[08:05:08.689] future_lapply() ... done
- future_lapply(X, ...) - '{ a; a <- a + 1 }' ...
[08:05:08.689] future_lapply() ...
[08:05:08.691] | Globals in FUN(): [n=4] ‘{’, ‘a’, ‘<-’, ‘+’
[08:05:08.691] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:08.691] | future_lapply() -> future_xapply() ...
[08:05:08.691] | : Number of chunks: 1
[08:05:08.691] | : getGlobalsAndPackagesXApply() ...
[08:05:08.691] | : . future.globals: TRUE
[08:05:08.701] | : . globals found/used: [n=2] ‘FUN’, ‘a’
[08:05:08.701] | : . needed namespaces: [n=0] 
[08:05:08.701] | : . use_args: TRUE
[08:05:08.701] | : . Getting '...' globals ...
[08:05:08.704] | : . ' '...' content: [n=0] 
[08:05:08.704] | : . ' List of 1
[08:05:08.704] | : . '  $ ...: list()
[08:05:08.704] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.704] | : . '  - attr(*, "where")=List of 1
[08:05:08.704] | : . '   ..$ ...:<environment: 0x5595b0a686c8> 
[08:05:08.704] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.704] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:08.704] | : . '  - attr(*, "total_size")= num NA
[08:05:08.708] | : . Getting '...' globals ... done
[08:05:08.708] | : . Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘a’, ‘...’
[08:05:08.708] | : . List of 3
[08:05:08.708] | : .  $ ...future.FUN:function (ii)  
[08:05:08.708] | : .  $ a            : num 1
[08:05:08.708] | : .  $ ...          : list()
[08:05:08.708] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.708] | : .  - attr(*, "where")=List of 3
[08:05:08.708] | : .   ..$ ...future.FUN:<environment: 0x5595b0a686c8> 
[08:05:08.708] | : .   ..$ a            :<environment: R_GlobalEnv> 
[08:05:08.708] | : .   ..$ ...          :<environment: 0x5595b0a686c8> 
[08:05:08.708] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.708] | : .  - attr(*, "resolved")= logi FALSE
[08:05:08.708] | : .  - attr(*, "total_size")= num 4140
[08:05:08.712] | : . Packages to be attached in all futures: [n=0] 
[08:05:08.712] | : getGlobalsAndPackagesXApply() ... done
[08:05:08.712] | : Globals pass to each chunk: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.713] | : List of 6
[08:05:08.713] | :  $ ...future.FUN            :function (ii)  
[08:05:08.713] | :  $ a                        : num 1
[08:05:08.713] | :  $ ...                      : list()
[08:05:08.713] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.713] | :  $ ...future.elements_ii    : NULL
[08:05:08.713] | :  $ ...future.seeds_ii       : NULL
[08:05:08.713] | :  $ ...future.globals.maxSize: NULL
[08:05:08.713] | :  - attr(*, "where")=List of 6
[08:05:08.713] | :   ..$ ...future.FUN            :<environment: 0x5595b0a686c8> 
[08:05:08.713] | :   ..$ a                        :<environment: R_GlobalEnv> 
[08:05:08.713] | :   ..$ ...                      :<environment: 0x5595b0a686c8> 
[08:05:08.713] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:08.713] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:08.713] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:08.713] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.713] | :  - attr(*, "resolved")= logi FALSE
[08:05:08.713] | :  - attr(*, "total_size")= num 4140
[08:05:08.718] | : Number of futures (= number of chunks): 1
[08:05:08.718] | : Launching 1 futures (chunks) ...
[08:05:08.718] | : Chunk #1 of 1 ...
[08:05:08.718] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:08.719] | :    + additional globals found: [n=0] 
[08:05:08.719] | :    + additional namespaces needed: [n=0] 
[08:05:08.719] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:08.719] | :  - seeds: <none>
[08:05:08.719] | :  - All globals exported: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.723] | : Created future:
[08:05:08.723] | : MulticoreFuture:
[08:05:08.723] | : Label: ‘future_lapply-1’
[08:05:08.723] | : Expression:
[08:05:08.723] | : {
[08:05:08.723] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:08.723] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:08.723] | :     "# as a global variable                                         "
[08:05:08.723] | :     do.call(function(...) {
[08:05:08.723] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:08.723] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:08.723] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:08.723] | :         "# anonymous function.                                          "
[08:05:08.723] | :         "#                                                              "
[08:05:08.723] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:08.723] | :         "# function environment of FUN() to the calling environment.    "
[08:05:08.723] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:08.723] | :         "# global environment, which is where globals are written.      "
[08:05:08.723] | :         penv <- env <- environment(...future.FUN)
[08:05:08.723] | :         repeat {
[08:05:08.723] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:08.723] | :                 emptyenv())) 
[08:05:08.723] | :                 break
[08:05:08.723] | :             penv <- env
[08:05:08.723] | :             env <- parent.env(env)
[08:05:08.723] | :         }
[08:05:08.723] | :         if (identical(penv, globalenv())) {
[08:05:08.723] | :             environment(...future.FUN) <- environment()
[08:05:08.723] | :         }
[08:05:08.723] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:08.723] | :             !isNamespace(penv)) {
[08:05:08.723] | :             parent.env(penv) <- environment()
[08:05:08.723] | :         }
[08:05:08.723] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:08.723] | :         {
[08:05:08.723] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:08.723] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:08.723] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:08.723] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:08.723] | :                 on.exit(options(oopts), add = TRUE)
[08:05:08.723] | :             }
[08:05:08.723] | :             {
[08:05:08.723] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:08.723] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:08.723] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:08.723] | :                   {
[08:05:08.723] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:08.723] | :                   }
[08:05:08.723] | :                 })
[08:05:08.723] | :             }
[08:05:08.723] | :         }
[08:05:08.723] | :     }, args = future.call.arguments)
[08:05:08.723] | : }
[08:05:08.723] | : Globals: 6 objects totaling 4.30 KiB (function ‘...future.FUN’ of 519 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[08:05:08.723] | : Packages: <none>
[08:05:08.723] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:08.723] | : Capture standard output: TRUE
[08:05:08.723] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:08.723] | : Immediate condition classes: ‘immediateCondition’
[08:05:08.723] | : Lazy evaluation: FALSE
[08:05:08.723] | : Local evaluation: TRUE
[08:05:08.723] | : Asynchronous evaluation: TRUE
[08:05:08.723] | : Early signaling: FALSE
[08:05:08.723] | : Environment: R_GlobalEnv
[08:05:08.723] | : State: ‘running’
[08:05:08.723] | : Resolved: TRUE
[08:05:08.723] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-27
[08:05:08.723] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:08.723] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:08.723] | : Value: <not collected>
[08:05:08.723] | : Conditions captured: <none>
[08:05:08.731] | : Chunk #1 of 1 ... DONE
[08:05:08.732] | : Launching 1 futures (chunks) ... DONE
[08:05:08.732] | : Resolving 1 futures (chunks) ...
[08:05:08.734] | :  - Number of value chunks collected: 1
[08:05:08.734] | : Resolving 1 futures (chunks) ... DONE
[08:05:08.734] | : Reducing values from 1 chunks ...
[08:05:08.734] | :  - Number of values collected after concatenation: 1
[08:05:08.734] | :  - Number of values expected: 1
[08:05:08.734] | : Reducing values from 1 chunks ... DONE
[08:05:08.734] | future_lapply() -> future_xapply() ... done
[08:05:08.735] future_lapply() ... done
- future_lapply(..., future.globals = <list>) ...
[08:05:08.735] future_lapply() ...
[08:05:08.735] | Globals in FUN(): [n=1] ‘a’
[08:05:08.736] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:08.736] | future_lapply() -> future_xapply() ...
[08:05:08.736] | : Number of chunks: 1
[08:05:08.736] | : getGlobalsAndPackagesXApply() ...
[08:05:08.736] | : . future.globals: <name-value list> with names ‘a’
[08:05:08.737] | : . use_args: TRUE
[08:05:08.737] | : . Getting '...' globals ...
[08:05:08.737] | : . ' '...' content: [n=0] 
[08:05:08.738] | : . ' List of 1
[08:05:08.738] | : . '  $ ...: list()
[08:05:08.738] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.738] | : . '  - attr(*, "where")=List of 1
[08:05:08.738] | : . '   ..$ ...:<environment: 0x5595ae4e37b8> 
[08:05:08.738] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.738] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:08.738] | : . '  - attr(*, "total_size")= num NA
[08:05:08.741] | : . Getting '...' globals ... done
[08:05:08.741] | : . Globals to be used in all futures (chunks): [n=3] ‘a’, ‘...future.FUN’, ‘...’
[08:05:08.741] | : . List of 3
[08:05:08.741] | : .  $ a            : num 42
[08:05:08.741] | : .  $ ...future.FUN:function (x)  
[08:05:08.741] | : .  $ ...          : list()
[08:05:08.741] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.741] | : .  - attr(*, "where")=List of 3
[08:05:08.741] | : .   ..$ a            :<environment: R_EmptyEnv> 
[08:05:08.741] | : .   ..$ ...future.FUN:<environment: R_GlobalEnv> 
[08:05:08.741] | : .   ..$ ...          :<environment: 0x5595ae4e37b8> 
[08:05:08.741] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.741] | : .  - attr(*, "resolved")= logi FALSE
[08:05:08.741] | : .  - attr(*, "total_size")= num NA
[08:05:08.745] | : . Packages to be attached in all futures: [n=0] 
[08:05:08.746] | : getGlobalsAndPackagesXApply() ... done
[08:05:08.746] | : Globals pass to each chunk: [n=6] ‘a’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.746] | : List of 6
[08:05:08.746] | :  $ a                        : num 42
[08:05:08.746] | :  $ ...future.FUN            :function (x)  
[08:05:08.746] | :  $ ...                      : list()
[08:05:08.746] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:08.746] | :  $ ...future.elements_ii    : NULL
[08:05:08.746] | :  $ ...future.seeds_ii       : NULL
[08:05:08.746] | :  $ ...future.globals.maxSize: NULL
[08:05:08.746] | :  - attr(*, "where")=List of 6
[08:05:08.746] | :   ..$ a                        :<environment: R_EmptyEnv> 
[08:05:08.746] | :   ..$ ...future.FUN            :<environment: R_GlobalEnv> 
[08:05:08.746] | :   ..$ ...                      :<environment: 0x5595ae4e37b8> 
[08:05:08.746] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:08.746] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:08.746] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:08.746] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:08.746] | :  - attr(*, "resolved")= logi FALSE
[08:05:08.746] | :  - attr(*, "total_size")= num NA
[08:05:08.752] | : Number of futures (= number of chunks): 1
[08:05:08.752] | : Launching 1 futures (chunks) ...
[08:05:08.752] | : Chunk #1 of 1 ...
[08:05:08.752] | :  - seeds: <none>
[08:05:08.752] | :  - All globals exported: [n=6] ‘a’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:08.755] | : Created future:
[08:05:08.756] | : MulticoreFuture:
[08:05:08.756] | : Label: ‘future_lapply-1’
[08:05:08.756] | : Expression:
[08:05:08.756] | : {
[08:05:08.756] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:08.756] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:08.756] | :     "# as a global variable                                         "
[08:05:08.756] | :     do.call(function(...) {
[08:05:08.756] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:08.756] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:08.756] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:08.756] | :         "# anonymous function.                                          "
[08:05:08.756] | :         "#                                                              "
[08:05:08.756] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:08.756] | :         "# function environment of FUN() to the calling environment.    "
[08:05:08.756] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:08.756] | :         "# global environment, which is where globals are written.      "
[08:05:08.756] | :         penv <- env <- environment(...future.FUN)
[08:05:08.756] | :         repeat {
[08:05:08.756] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:08.756] | :                 emptyenv())) 
[08:05:08.756] | :                 break
[08:05:08.756] | :             penv <- env
[08:05:08.756] | :             env <- parent.env(env)
[08:05:08.756] | :         }
[08:05:08.756] | :         if (identical(penv, globalenv())) {
[08:05:08.756] | :             environment(...future.FUN) <- environment()
[08:05:08.756] | :         }
[08:05:08.756] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:08.756] | :             !isNamespace(penv)) {
[08:05:08.756] | :             parent.env(penv) <- environment()
[08:05:08.756] | :         }
[08:05:08.756] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:08.756] | :         {
[08:05:08.756] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:08.756] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:08.756] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:08.756] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:08.756] | :                 on.exit(options(oopts), add = TRUE)
[08:05:08.756] | :             }
[08:05:08.756] | :             {
[08:05:08.756] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:08.756] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:08.756] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:08.756] | :                   {
[08:05:08.756] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:08.756] | :                   }
[08:05:08.756] | :                 })
[08:05:08.756] | :             }
[08:05:08.756] | :         }
[08:05:08.756] | :     }, args = future.call.arguments)
[08:05:08.756] | : }
[08:05:08.756] | : Globals: 6 objects totaling 4.16 KiB (function ‘...future.FUN’ of 298 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[08:05:08.756] | : Packages: <none>
[08:05:08.756] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:08.756] | : Capture standard output: TRUE
[08:05:08.756] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:08.756] | : Immediate condition classes: ‘immediateCondition’
[08:05:08.756] | : Lazy evaluation: FALSE
[08:05:08.756] | : Local evaluation: TRUE
[08:05:08.756] | : Asynchronous evaluation: TRUE
[08:05:08.756] | : Early signaling: FALSE
[08:05:08.756] | : Environment: R_GlobalEnv
[08:05:08.756] | : State: ‘running’
[08:05:08.756] | : Resolved: TRUE
[08:05:08.756] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-28
[08:05:08.756] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:08.756] | : Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:08.756] | : Value: <not collected>
[08:05:08.756] | : Conditions captured: <none>
[08:05:08.764] | : Chunk #1 of 1 ... DONE
[08:05:08.764] | : Launching 1 futures (chunks) ... DONE
[08:05:08.764] | : Resolving 1 futures (chunks) ...
[08:05:08.766] | :  - Number of value chunks collected: 1
[08:05:08.766] | : Resolving 1 futures (chunks) ... DONE
[08:05:08.766] | : Reducing values from 1 chunks ...
[08:05:08.766] | :  - Number of values collected after concatenation: 1
[08:05:08.766] | :  - Number of values expected: 1
[08:05:08.766] | : Reducing values from 1 chunks ... DONE
[08:05:08.766] | future_lapply() -> future_xapply() ... done
[08:05:08.767] future_lapply() ... done
List of 1
 $ : num 42
[08:05:09.048] future_lapply() ...
[08:05:09.050] | Globals in FUN(): [n=7] ‘{’, ‘do.call’, ‘caller’, ‘c’, ‘list’, ‘+’, ‘args’
[08:05:09.050] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:09.050] | future_lapply() -> future_xapply() ...
[08:05:09.051] | : Number of chunks: 2
[08:05:09.051] | : getGlobalsAndPackagesXApply() ...
[08:05:09.051] | : . future.globals: TRUE
[08:05:09.077] | : . globals found/used: [n=5] ‘FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’
[08:05:09.077] | : . needed namespaces: [n=0] 
[08:05:09.077] | : . use_args: TRUE
[08:05:09.078] | : . Getting '...' globals ...
[08:05:09.078] | : . ' '...' content: [n=0] 
[08:05:09.078] | : . ' List of 1
[08:05:09.078] | : . '  $ ...: list()
[08:05:09.078] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:09.078] | : . '  - attr(*, "where")=List of 1
[08:05:09.078] | : . '   ..$ ...:<environment: 0x5595b0ba75e8> 
[08:05:09.078] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:09.078] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:09.078] | : . '  - attr(*, "total_size")= num NA
[08:05:09.081] | : . Getting '...' globals ... done
[08:05:09.081] | : . Globals to be used in all futures (chunks): [n=6] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’
[08:05:09.081] | : . List of 6
[08:05:09.081] | : .  $ ...future.FUN:function (i)  
[08:05:09.081] | : .  $ caller       :function (a, b, FUN = call_my_add)  
[08:05:09.081] | : .  $ args         :List of 1
[08:05:09.081] | : .   ..$ FUN:function (a, b)  
[08:05:09.081] | : .  $ call_my_add  :function (a, b)  
[08:05:09.081] | : .  $ my_add       :function (a, b)  
[08:05:09.081] | : .  $ ...          : list()
[08:05:09.081] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:09.081] | : .  - attr(*, "where")=List of 6
[08:05:09.081] | : .   ..$ ...future.FUN:<environment: 0x5595b0ba75e8> 
[08:05:09.081] | : .   ..$ caller       :<environment: 0x5595b0ba7a48> 
[08:05:09.081] | : .   ..$ args         :<environment: 0x5595b0ba7a48> 
[08:05:09.081] | : .   ..$ call_my_add  :<environment: R_GlobalEnv> 
[08:05:09.081] | : .   ..$ my_add       :<environment: R_GlobalEnv> 
[08:05:09.081] | : .   ..$ ...          :<environment: 0x5595b0ba75e8> 
[08:05:09.081] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:09.081] | : .  - attr(*, "resolved")= logi FALSE
[08:05:09.081] | : .  - attr(*, "total_size")= num 13245
[08:05:09.086] | : . Packages to be attached in all futures: [n=0] 
[08:05:09.087] | : getGlobalsAndPackagesXApply() ... done
[08:05:09.087] | : Globals pass to each chunk: [n=9] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:09.087] | : List of 9
[08:05:09.087] | :  $ ...future.FUN            :function (i)  
[08:05:09.087] | :  $ caller                   :function (a, b, FUN = call_my_add)  
[08:05:09.087] | :  $ args                     :List of 1
[08:05:09.087] | :   ..$ FUN:function (a, b)  
[08:05:09.087] | :  $ call_my_add              :function (a, b)  
[08:05:09.087] | :  $ my_add                   :function (a, b)  
[08:05:09.087] | :  $ ...                      : list()
[08:05:09.087] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:09.087] | :  $ ...future.elements_ii    : NULL
[08:05:09.087] | :  $ ...future.seeds_ii       : NULL
[08:05:09.087] | :  $ ...future.globals.maxSize: NULL
[08:05:09.087] | :  - attr(*, "where")=List of 9
[08:05:09.087] | :   ..$ ...future.FUN            :<environment: 0x5595b0ba75e8> 
[08:05:09.087] | :   ..$ caller                   :<environment: 0x5595b0ba7a48> 
[08:05:09.087] | :   ..$ args                     :<environment: 0x5595b0ba7a48> 
[08:05:09.087] | :   ..$ call_my_add              :<environment: R_GlobalEnv> 
[08:05:09.087] | :   ..$ my_add                   :<environment: R_GlobalEnv> 
[08:05:09.087] | :   ..$ ...                      :<environment: 0x5595b0ba75e8> 
[08:05:09.087] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:09.087] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:09.087] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:09.087] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:09.087] | :  - attr(*, "resolved")= logi FALSE
[08:05:09.087] | :  - attr(*, "total_size")= num 13245
[08:05:09.095] | : Number of futures (= number of chunks): 2
[08:05:09.095] | : Launching 2 futures (chunks) ...
[08:05:09.095] | : Chunk #1 of 2 ...
[08:05:09.095] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:09.095] | :    + additional globals found: [n=0] 
[08:05:09.096] | :    + additional namespaces needed: [n=0] 
[08:05:09.096] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:09.096] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:09.096] | :  - seeds: <none>
[08:05:09.096] | :  - All globals exported: [n=9] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:09.166] | : Created future:
[08:05:09.166] | : MultisessionFuture:
[08:05:09.166] | : Label: ‘future_lapply-1’
[08:05:09.166] | : Expression:
[08:05:09.166] | : {
[08:05:09.166] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:09.166] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:09.166] | :     "# as a global variable                                         "
[08:05:09.166] | :     do.call(function(...) {
[08:05:09.166] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:09.166] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:09.166] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:09.166] | :         "# anonymous function.                                          "
[08:05:09.166] | :         "#                                                              "
[08:05:09.166] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:09.166] | :         "# function environment of FUN() to the calling environment.    "
[08:05:09.166] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:09.166] | :         "# global environment, which is where globals are written.      "
[08:05:09.166] | :         penv <- env <- environment(...future.FUN)
[08:05:09.166] | :         repeat {
[08:05:09.166] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:09.166] | :                 emptyenv())) 
[08:05:09.166] | :                 break
[08:05:09.166] | :             penv <- env
[08:05:09.166] | :             env <- parent.env(env)
[08:05:09.166] | :         }
[08:05:09.166] | :         if (identical(penv, globalenv())) {
[08:05:09.166] | :             environment(...future.FUN) <- environment()
[08:05:09.166] | :         }
[08:05:09.166] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:09.166] | :             !isNamespace(penv)) {
[08:05:09.166] | :             parent.env(penv) <- environment()
[08:05:09.166] | :         }
[08:05:09.166] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:09.166] | :         {
[08:05:09.166] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:09.166] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:09.166] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:09.166] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:09.166] | :                 on.exit(options(oopts), add = TRUE)
[08:05:09.166] | :             }
[08:05:09.166] | :             {
[08:05:09.166] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:09.166] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:09.166] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:09.166] | :                   {
[08:05:09.166] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:09.166] | :                   }
[08:05:09.166] | :                 })
[08:05:09.166] | :             }
[08:05:09.166] | :         }
[08:05:09.166] | :     }, args = future.call.arguments)
[08:05:09.166] | : }
[08:05:09.166] | : Globals: 9 objects totaling 10.71 KiB (function ‘...future.FUN’ of 3.30 KiB, list ‘args’ of 928 bytes, function ‘caller’ of 904 bytes, function ‘call_my_add’ of 876 bytes, function ‘my_add’ of 114 bytes, ...)
[08:05:09.166] | : Packages: <none>
[08:05:09.166] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:09.166] | : Capture standard output: TRUE
[08:05:09.166] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:09.166] | : Immediate condition classes: ‘immediateCondition’
[08:05:09.166] | : Lazy evaluation: FALSE
[08:05:09.166] | : Local evaluation: TRUE
[08:05:09.166] | : Asynchronous evaluation: TRUE
[08:05:09.166] | : Early signaling: FALSE
[08:05:09.166] | : Environment: 0x5595b0ba7a48
[08:05:09.166] | : State: ‘running’
[08:05:09.166] | : Resolved: FALSE
[08:05:09.166] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-29
[08:05:09.166] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:09.166] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:09.166] | : Value: <not collected>
[08:05:09.166] | : Conditions captured: <none>
[08:05:09.178] | : Chunk #1 of 2 ... DONE
[08:05:09.178] | : Chunk #2 of 2 ...
[08:05:09.178] | :  - Finding globals in 'X' for chunk #2 ...
[08:05:09.179] | :    + additional globals found: [n=0] 
[08:05:09.179] | :    + additional namespaces needed: [n=0] 
[08:05:09.179] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:05:09.179] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:09.179] | :  - seeds: <none>
[08:05:09.179] | :  - All globals exported: [n=9] ‘...future.FUN’, ‘caller’, ‘args’, ‘call_my_add’, ‘my_add’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:09.294] | : Created future:
[08:05:09.294] | : MultisessionFuture:
[08:05:09.294] | : Label: ‘future_lapply-2’
[08:05:09.294] | : Expression:
[08:05:09.294] | : {
[08:05:09.294] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:09.294] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:09.294] | :     "# as a global variable                                         "
[08:05:09.294] | :     do.call(function(...) {
[08:05:09.294] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:09.294] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:09.294] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:09.294] | :         "# anonymous function.                                          "
[08:05:09.294] | :         "#                                                              "
[08:05:09.294] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:09.294] | :         "# function environment of FUN() to the calling environment.    "
[08:05:09.294] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:09.294] | :         "# global environment, which is where globals are written.      "
[08:05:09.294] | :         penv <- env <- environment(...future.FUN)
[08:05:09.294] | :         repeat {
[08:05:09.294] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:09.294] | :                 emptyenv())) 
[08:05:09.294] | :                 break
[08:05:09.294] | :             penv <- env
[08:05:09.294] | :             env <- parent.env(env)
[08:05:09.294] | :         }
[08:05:09.294] | :         if (identical(penv, globalenv())) {
[08:05:09.294] | :             environment(...future.FUN) <- environment()
[08:05:09.294] | :         }
[08:05:09.294] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:09.294] | :             !isNamespace(penv)) {
[08:05:09.294] | :             parent.env(penv) <- environment()
[08:05:09.294] | :         }
[08:05:09.294] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:09.294] | :         {
[08:05:09.294] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:09.294] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:09.294] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:09.294] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:09.294] | :                 on.exit(options(oopts), add = TRUE)
[08:05:09.294] | :             }
[08:05:09.294] | :             {
[08:05:09.294] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:09.294] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:09.294] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:09.294] | :                   {
[08:05:09.294] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:09.294] | :                   }
[08:05:09.294] | :                 })
[08:05:09.294] | :             }
[08:05:09.294] | :         }
[08:05:09.294] | :     }, args = future.call.arguments)
[08:05:09.294] | : }
[08:05:09.294] | : Globals: 9 objects totaling 10.72 KiB (function ‘...future.FUN’ of 3.30 KiB, list ‘args’ of 928 bytes, function ‘caller’ of 904 bytes, function ‘call_my_add’ of 876 bytes, function ‘my_add’ of 114 bytes, ...)
[08:05:09.294] | : Packages: <none>
[08:05:09.294] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:09.294] | : Capture standard output: TRUE
[08:05:09.294] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:09.294] | : Immediate condition classes: ‘immediateCondition’
[08:05:09.294] | : Lazy evaluation: FALSE
[08:05:09.294] | : Local evaluation: TRUE
[08:05:09.294] | : Asynchronous evaluation: TRUE
[08:05:09.294] | : Early signaling: FALSE
[08:05:09.294] | : Environment: 0x5595b0ba7a48
[08:05:09.294] | : State: ‘running’
[08:05:09.294] | : Resolved: FALSE
[08:05:09.294] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-30
[08:05:09.294] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:09.294] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:09.294] | : Value: <not collected>
[08:05:09.294] | : Conditions captured: <none>
[08:05:09.306] | : Chunk #2 of 2 ... DONE
[08:05:09.306] | : Launching 2 futures (chunks) ... DONE
[08:05:09.306] | : Resolving 2 futures (chunks) ...
[08:05:09.391] | :  - Number of value chunks collected: 2
[08:05:09.391] | : Resolving 2 futures (chunks) ... DONE
[08:05:09.392] | : Reducing values from 2 chunks ...
[08:05:09.392] | :  - Number of values collected after concatenation: 3
[08:05:09.392] | :  - Number of values expected: 3
[08:05:09.392] | : Reducing values from 2 chunks ... DONE
[08:05:09.392] | future_lapply() -> future_xapply() ... done
[08:05:09.392] future_lapply() ... done
- future_lapply(x, FUN = do.call, ...) ...
[08:05:09.392] future_lapply() ...
[08:05:09.394] | Globals in FUN(): [n=10] ‘parent.frame’, ‘{’, ‘if’, ‘!’, ‘is.list’, ‘stop’, ‘<-’, ‘lapply’, ‘enquote’, ‘.Internal’
[08:05:09.394] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:09.394] | future_lapply() -> future_xapply() ...
[08:05:09.394] | : Number of chunks: 1
[08:05:09.395] | : getGlobalsAndPackagesXApply() ...
[08:05:09.395] | : . future.globals: TRUE
[08:05:09.415] | : . globals found/used: [n=1] ‘FUN’
[08:05:09.415] | : . needed namespaces: [n=0] 
[08:05:09.415] | : . use_args: TRUE
[08:05:09.415] | : . Getting '...' globals ...
[08:05:09.416] | : . ' '...' content: [n=1] ‘what’
[08:05:09.416] | : . ' List of 1
[08:05:09.416] | : . '  $ ...:List of 1
[08:05:09.416] | : . '   ..$ what:function (x)  
[08:05:09.416] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:09.416] | : . '  - attr(*, "where")=List of 1
[08:05:09.416] | : . '   ..$ ...:<environment: 0x5595b0a43750> 
[08:05:09.416] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:09.416] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:09.416] | : . '  - attr(*, "total_size")= num NA
[08:05:09.419] | : . Getting '...' globals ... done
[08:05:09.419] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:09.419] | : . List of 2
[08:05:09.419] | : .  $ ...future.FUN:function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:09.419] | : .  $ ...          :List of 1
[08:05:09.419] | : .   ..$ what:function (x)  
[08:05:09.419] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:09.419] | : .  - attr(*, "where")=List of 2
[08:05:09.419] | : .   ..$ ...future.FUN:<environment: 0x5595b0a43750> 
[08:05:09.419] | : .   ..$ ...          :<environment: 0x5595b0a43750> 
[08:05:09.419] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:09.419] | : .  - attr(*, "resolved")= logi FALSE
[08:05:09.419] | : .  - attr(*, "total_size")= num 7368
[08:05:09.422] | : . Packages to be attached in all futures: [n=0] 
[08:05:09.422] | : getGlobalsAndPackagesXApply() ... done
[08:05:09.422] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:09.422] | : List of 5
[08:05:09.422] | :  $ ...future.FUN            :function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:09.422] | :  $ ...                      :List of 1
[08:05:09.422] | :   ..$ what:function (x)  
[08:05:09.422] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:09.422] | :  $ ...future.elements_ii    : NULL
[08:05:09.422] | :  $ ...future.seeds_ii       : NULL
[08:05:09.422] | :  $ ...future.globals.maxSize: NULL
[08:05:09.422] | :  - attr(*, "where")=List of 5
[08:05:09.422] | :   ..$ ...future.FUN            :<environment: 0x5595b0a43750> 
[08:05:09.422] | :   ..$ ...                      :<environment: 0x5595b0a43750> 
[08:05:09.422] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:09.422] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:09.422] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:09.422] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:09.422] | :  - attr(*, "resolved")= logi FALSE
[08:05:09.422] | :  - attr(*, "total_size")= num 7368
[08:05:09.427] | : Number of futures (= number of chunks): 1
[08:05:09.427] | : Launching 1 futures (chunks) ...
[08:05:09.427] | : Chunk #1 of 1 ...
[08:05:09.427] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:09.428] | :    + additional globals found: [n=0] 
[08:05:09.428] | :    + additional namespaces needed: [n=0] 
[08:05:09.428] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:09.428] | :  - seeds: <none>
[08:05:09.428] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:09.490] | : Created future:
[08:05:09.490] | : MultisessionFuture:
[08:05:09.490] | : Label: ‘future_lapply-1’
[08:05:09.490] | : Expression:
[08:05:09.490] | : {
[08:05:09.490] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:09.490] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:09.490] | :     "# as a global variable                                         "
[08:05:09.490] | :     do.call(function(...) {
[08:05:09.490] | :         "# future.apply:::future_xapply(): preserve future option"
[08:05:09.490] | :         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:09.490] | :         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:09.490] | :             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:09.490] | :             on.exit(options(oopts), add = TRUE)
[08:05:09.490] | :         }
[08:05:09.490] | :         {
[08:05:09.490] | :             "# future.apply::future_lapply(): process chunk of elements"
[08:05:09.490] | :             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:09.490] | :                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:09.490] | :                 {
[08:05:09.490] | :                   ...future.FUN(...future.X_jj, ...)
[08:05:09.490] | :                 }
[08:05:09.490] | :             })
[08:05:09.490] | :         }
[08:05:09.490] | :     }, args = future.call.arguments)
[08:05:09.490] | : }
[08:05:09.490] | : Globals: 5 objects totaling 7.38 KiB (function ‘...future.FUN’ of 1.79 KiB, DotDotDotList ‘future.call.arguments’ of 152 bytes, list ‘...future.elements_ii’ of 149 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:09.490] | : Packages: <none>
[08:05:09.490] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:09.490] | : Capture standard output: TRUE
[08:05:09.490] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:09.490] | : Immediate condition classes: ‘immediateCondition’
[08:05:09.490] | : Lazy evaluation: FALSE
[08:05:09.490] | : Local evaluation: TRUE
[08:05:09.490] | : Asynchronous evaluation: TRUE
[08:05:09.490] | : Early signaling: FALSE
[08:05:09.490] | : Environment: R_GlobalEnv
[08:05:09.490] | : State: ‘running’
[08:05:09.490] | : Resolved: FALSE
[08:05:09.490] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-31
[08:05:09.490] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:09.490] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:09.490] | : Value: <not collected>
[08:05:09.490] | : Conditions captured: <none>
[08:05:09.502] | : Chunk #1 of 1 ... DONE
[08:05:09.502] | : Launching 1 futures (chunks) ... DONE
[08:05:09.502] | : Resolving 1 futures (chunks) ...
[08:05:09.545] | :  - Number of value chunks collected: 1
[08:05:09.545] | : Resolving 1 futures (chunks) ... DONE
[08:05:09.545] | : Reducing values from 1 chunks ...
[08:05:09.545] | :  - Number of values collected after concatenation: 1
[08:05:09.545] | :  - Number of values expected: 1
[08:05:09.545] | : Reducing values from 1 chunks ... DONE
[08:05:09.545] | future_lapply() -> future_xapply() ... done
[08:05:09.545] future_lapply() ... done
[08:05:09.545] future_lapply() ...
[08:05:09.547] | Globals in FUN(): [n=10] ‘parent.frame’, ‘{’, ‘if’, ‘!’, ‘is.list’, ‘stop’, ‘<-’, ‘lapply’, ‘enquote’, ‘.Internal’
[08:05:09.547] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:09.547] | future_lapply() -> future_xapply() ...
[08:05:09.547] | : Number of chunks: 1
[08:05:09.547] | : getGlobalsAndPackagesXApply() ...
[08:05:09.548] | : . future.globals: TRUE
[08:05:09.568] | : . globals found/used: [n=1] ‘FUN’
[08:05:09.568] | : . needed namespaces: [n=0] 
[08:05:09.568] | : . use_args: TRUE
[08:05:09.568] | : . Getting '...' globals ...
[08:05:09.569] | : . ' '...' content: [n=1] ‘what’
[08:05:09.569] | : . ' List of 1
[08:05:09.569] | : . '  $ ...:List of 1
[08:05:09.569] | : . '   ..$ what:function (...)  
[08:05:09.569] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:09.569] | : . '  - attr(*, "where")=List of 1
[08:05:09.569] | : . '   ..$ ...:<environment: 0x5595b0990af0> 
[08:05:09.569] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:09.569] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:09.569] | : . '  - attr(*, "total_size")= num NA
[08:05:09.572] | : . Getting '...' globals ... done
[08:05:09.572] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:09.572] | : . List of 2
[08:05:09.572] | : .  $ ...future.FUN:function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:09.572] | : .  $ ...          :List of 1
[08:05:09.572] | : .   ..$ what:function (...)  
[08:05:09.572] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:09.572] | : .  - attr(*, "where")=List of 2
[08:05:09.572] | : .   ..$ ...future.FUN:<environment: 0x5595b0990af0> 
[08:05:09.572] | : .   ..$ ...          :<environment: 0x5595b0990af0> 
[08:05:09.572] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:09.572] | : .  - attr(*, "resolved")= logi FALSE
[08:05:09.572] | : .  - attr(*, "total_size")= num 7804
[08:05:09.575] | : . Packages to be attached in all futures: [n=0] 
[08:05:09.575] | : getGlobalsAndPackagesXApply() ... done
[08:05:09.575] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:09.576] | : List of 5
[08:05:09.576] | :  $ ...future.FUN            :function (what, args, quote = FALSE, envir = parent.frame())  
[08:05:09.576] | :  $ ...                      :List of 1
[08:05:09.576] | :   ..$ what:function (...)  
[08:05:09.576] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:09.576] | :  $ ...future.elements_ii    : NULL
[08:05:09.576] | :  $ ...future.seeds_ii       : NULL
[08:05:09.576] | :  $ ...future.globals.maxSize: NULL
[08:05:09.576] | :  - attr(*, "where")=List of 5
[08:05:09.576] | :   ..$ ...future.FUN            :<environment: 0x5595b0990af0> 
[08:05:09.576] | :   ..$ ...                      :<environment: 0x5595b0990af0> 
[08:05:09.576] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:09.576] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:09.576] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:09.576] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:09.576] | :  - attr(*, "resolved")= logi FALSE
[08:05:09.576] | :  - attr(*, "total_size")= num 7804
[08:05:09.580] | : Number of futures (= number of chunks): 1
[08:05:09.580] | : Launching 1 futures (chunks) ...
[08:05:09.580] | : Chunk #1 of 1 ...
[08:05:09.580] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:09.581] | :    + additional globals found: [n=0] 
[08:05:09.581] | :    + additional namespaces needed: [n=0] 
[08:05:09.581] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:09.581] | :  - seeds: <none>
[08:05:09.581] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:09.679] | : Created future:
[08:05:09.679] | : MultisessionFuture:
[08:05:09.679] | : Label: ‘future_lapply-1’
[08:05:09.679] | : Expression:
[08:05:09.679] | : {
[08:05:09.679] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:09.679] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:09.679] | :     "# as a global variable                                         "
[08:05:09.679] | :     do.call(function(...) {
[08:05:09.679] | :         "# future.apply:::future_xapply(): preserve future option"
[08:05:09.679] | :         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:09.679] | :         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:09.679] | :             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:09.679] | :             on.exit(options(oopts), add = TRUE)
[08:05:09.679] | :         }
[08:05:09.679] | :         {
[08:05:09.679] | :             "# future.apply::future_lapply(): process chunk of elements"
[08:05:09.679] | :             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:09.679] | :                 ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:09.679] | :                 {
[08:05:09.679] | :                   ...future.FUN(...future.X_jj, ...)
[08:05:09.679] | :                 }
[08:05:09.679] | :             })
[08:05:09.679] | :         }
[08:05:09.679] | :     }, args = future.call.arguments)
[08:05:09.679] | : }
[08:05:09.679] | : Globals: 5 objects totaling 7.80 KiB (function ‘...future.FUN’ of 1.79 KiB, DotDotDotList ‘future.call.arguments’ of 388 bytes, list ‘...future.elements_ii’ of 149 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:09.679] | : Packages: <none>
[08:05:09.679] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:09.679] | : Capture standard output: TRUE
[08:05:09.679] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:09.679] | : Immediate condition classes: ‘immediateCondition’
[08:05:09.679] | : Lazy evaluation: FALSE
[08:05:09.679] | : Local evaluation: TRUE
[08:05:09.679] | : Asynchronous evaluation: TRUE
[08:05:09.679] | : Early signaling: FALSE
[08:05:09.679] | : Environment: R_GlobalEnv
[08:05:09.679] | : State: ‘running’
[08:05:09.679] | : Resolved: FALSE
[08:05:09.679] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-32
[08:05:09.679] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:09.679] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:09.679] | : Value: <not collected>
[08:05:09.679] | : Conditions captured: <none>
[08:05:09.693] | : Chunk #1 of 1 ... DONE
[08:05:09.693] | : Launching 1 futures (chunks) ... DONE
[08:05:09.693] | : Resolving 1 futures (chunks) ...
[08:05:09.736] | :  - Number of value chunks collected: 1
[08:05:09.736] | : Resolving 1 futures (chunks) ... DONE
[08:05:09.736] | : Reducing values from 1 chunks ...
[08:05:09.736] | :  - Number of values collected after concatenation: 1
[08:05:09.736] | :  - Number of values expected: 1
[08:05:09.737] | : Reducing values from 1 chunks ... DONE
[08:05:09.737] | future_lapply() -> future_xapply() ... done
[08:05:09.737] future_lapply() ... done
- future_lapply(x, ...) - passing arguments via '...' ...
[08:05:09.737] future_lapply() ...
[08:05:09.738] | Globals in FUN(): [n=1] ‘typeof’
[08:05:09.738] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:09.738] | future_lapply() -> future_xapply() ...
[08:05:09.738] | : Number of chunks: 1
[08:05:09.738] | : getGlobalsAndPackagesXApply() ...
[08:05:09.738] | : . future.globals: TRUE
[08:05:09.744] | : . globals found/used: [n=1] ‘FUN’
[08:05:09.744] | : . needed namespaces: [n=0] 
[08:05:09.744] | : . use_args: TRUE
[08:05:09.745] | : . Getting '...' globals ...
[08:05:09.745] | : . ' '...' content: [n=1] ‘b’
[08:05:09.745] | : . ' List of 1
[08:05:09.745] | : . '  $ ...:List of 1
[08:05:09.745] | : . '   ..$ b:'data.frame':	2 obs. of  1 variable:
[08:05:09.745] | : . '   .. ..$ a: int [1:2] 1 2
[08:05:09.745] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:09.745] | : . '  - attr(*, "where")=List of 1
[08:05:09.745] | : . '   ..$ ...:<environment: 0x5595b0811138> 
[08:05:09.745] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:09.745] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:09.745] | : . '  - attr(*, "total_size")= num NA
[08:05:09.748] | : . Getting '...' globals ... done
[08:05:09.749] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:09.749] | : . List of 2
[08:05:09.749] | : .  $ ...future.FUN:function (a, b)  
[08:05:09.749] | : .  $ ...          :List of 1
[08:05:09.749] | : .   ..$ b:'data.frame':	2 obs. of  1 variable:
[08:05:09.749] | : .   .. ..$ a: int [1:2] 1 2
[08:05:09.749] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:09.749] | : .  - attr(*, "where")=List of 2
[08:05:09.749] | : .   ..$ ...future.FUN:<environment: 0x5595b0811138> 
[08:05:09.749] | : .   ..$ ...          :<environment: 0x5595b0811138> 
[08:05:09.749] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:09.749] | : .  - attr(*, "resolved")= logi FALSE
[08:05:09.749] | : .  - attr(*, "total_size")= num 4505
[08:05:09.752] | : . Packages to be attached in all futures: [n=0] 
[08:05:09.752] | : getGlobalsAndPackagesXApply() ... done
[08:05:09.753] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:09.753] | : List of 5
[08:05:09.753] | :  $ ...future.FUN            :function (a, b)  
[08:05:09.753] | :  $ ...                      :List of 1
[08:05:09.753] | :   ..$ b:'data.frame':	2 obs. of  1 variable:
[08:05:09.753] | :   .. ..$ a: int [1:2] 1 2
[08:05:09.753] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:09.753] | :  $ ...future.elements_ii    : NULL
[08:05:09.753] | :  $ ...future.seeds_ii       : NULL
[08:05:09.753] | :  $ ...future.globals.maxSize: NULL
[08:05:09.753] | :  - attr(*, "where")=List of 5
[08:05:09.753] | :   ..$ ...future.FUN            :<environment: 0x5595b0811138> 
[08:05:09.753] | :   ..$ ...                      :<environment: 0x5595b0811138> 
[08:05:09.753] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:09.753] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:09.753] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:09.753] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:09.753] | :  - attr(*, "resolved")= logi FALSE
[08:05:09.753] | :  - attr(*, "total_size")= num 4505
[08:05:09.758] | : Number of futures (= number of chunks): 1
[08:05:09.758] | : Launching 1 futures (chunks) ...
[08:05:09.758] | : Chunk #1 of 1 ...
[08:05:09.758] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:09.758] | :    + additional globals found: [n=0] 
[08:05:09.758] | :    + additional namespaces needed: [n=0] 
[08:05:09.758] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:09.759] | :  - seeds: <none>
[08:05:09.759] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:09.856] | : Created future:
[08:05:09.856] | : MultisessionFuture:
[08:05:09.856] | : Label: ‘future_lapply-1’
[08:05:09.856] | : Expression:
[08:05:09.856] | : {
[08:05:09.856] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:09.856] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:09.856] | :     "# as a global variable                                         "
[08:05:09.856] | :     do.call(function(...) {
[08:05:09.856] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:09.856] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:09.856] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:09.856] | :         "# anonymous function.                                          "
[08:05:09.856] | :         "#                                                              "
[08:05:09.856] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:09.856] | :         "# function environment of FUN() to the calling environment.    "
[08:05:09.856] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:09.856] | :         "# global environment, which is where globals are written.      "
[08:05:09.856] | :         penv <- env <- environment(...future.FUN)
[08:05:09.856] | :         repeat {
[08:05:09.856] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:09.856] | :                 emptyenv())) 
[08:05:09.856] | :                 break
[08:05:09.856] | :             penv <- env
[08:05:09.856] | :             env <- parent.env(env)
[08:05:09.856] | :         }
[08:05:09.856] | :         if (identical(penv, globalenv())) {
[08:05:09.856] | :             environment(...future.FUN) <- environment()
[08:05:09.856] | :         }
[08:05:09.856] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:09.856] | :             !isNamespace(penv)) {
[08:05:09.856] | :             parent.env(penv) <- environment()
[08:05:09.856] | :         }
[08:05:09.856] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:09.856] | :         {
[08:05:09.856] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:09.856] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:09.856] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:09.856] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:09.856] | :                 on.exit(options(oopts), add = TRUE)
[08:05:09.856] | :             }
[08:05:09.856] | :             {
[08:05:09.856] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:09.856] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:09.856] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:09.856] | :                   {
[08:05:09.856] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:09.856] | :                   }
[08:05:09.856] | :                 })
[08:05:09.856] | :             }
[08:05:09.856] | :         }
[08:05:09.856] | :     }, args = future.call.arguments)
[08:05:09.856] | : }
[08:05:09.856] | : Globals: 5 objects totaling 4.67 KiB (DotDotDotList ‘future.call.arguments’ of 357 bytes, function ‘...future.FUN’ of 332 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:09.856] | : Packages: <none>
[08:05:09.856] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:09.856] | : Capture standard output: TRUE
[08:05:09.856] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:09.856] | : Immediate condition classes: ‘immediateCondition’
[08:05:09.856] | : Lazy evaluation: FALSE
[08:05:09.856] | : Local evaluation: TRUE
[08:05:09.856] | : Asynchronous evaluation: TRUE
[08:05:09.856] | : Early signaling: FALSE
[08:05:09.856] | : Environment: R_GlobalEnv
[08:05:09.856] | : State: ‘running’
[08:05:09.856] | : Resolved: FALSE
[08:05:09.856] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-33
[08:05:09.856] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:09.856] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:09.856] | : Value: <not collected>
[08:05:09.856] | : Conditions captured: <none>
[08:05:09.868] | : Chunk #1 of 1 ... DONE
[08:05:09.868] | : Launching 1 futures (chunks) ... DONE
[08:05:09.868] | : Resolving 1 futures (chunks) ...
[08:05:09.900] | :  - Number of value chunks collected: 1
[08:05:09.900] | : Resolving 1 futures (chunks) ... DONE
[08:05:09.900] | : Reducing values from 1 chunks ...
[08:05:09.900] | :  - Number of values collected after concatenation: 1
[08:05:09.901] | :  - Number of values expected: 1
[08:05:09.901] | : Reducing values from 1 chunks ... DONE
[08:05:09.901] | future_lapply() -> future_xapply() ... done
[08:05:09.901] future_lapply() ... done
[08:05:09.901] future_lapply() ...
[08:05:09.901] | Globals in FUN(): [n=1] ‘typeof’
[08:05:09.902] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:09.902] | future_lapply() -> future_xapply() ...
[08:05:09.902] | : Number of chunks: 1
[08:05:09.902] | : getGlobalsAndPackagesXApply() ...
[08:05:09.902] | : . future.globals: TRUE
[08:05:09.910] | : . globals found/used: [n=1] ‘FUN’
[08:05:09.911] | : . needed namespaces: [n=0] 
[08:05:09.911] | : . use_args: TRUE
[08:05:09.911] | : . Getting '...' globals ...
[08:05:09.911] | : . ' '...' content: [n=1] ‘b’
[08:05:09.911] | : . ' List of 1
[08:05:09.911] | : . '  $ ...:List of 1
[08:05:09.911] | : . '   ..$ b:<environment: 0x5595b0650720> 
[08:05:09.911] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:09.911] | : . '  - attr(*, "where")=List of 1
[08:05:09.911] | : . '   ..$ ...:<environment: 0x5595b0653a60> 
[08:05:09.911] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:09.911] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:09.911] | : . '  - attr(*, "total_size")= num NA
[08:05:09.914] | : . Getting '...' globals ... done
[08:05:09.914] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:09.914] | : . List of 2
[08:05:09.914] | : .  $ ...future.FUN:function (a, b)  
[08:05:09.914] | : .  $ ...          :List of 1
[08:05:09.914] | : .   ..$ b:<environment: 0x5595b0650720> 
[08:05:09.914] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:09.914] | : .  - attr(*, "where")=List of 2
[08:05:09.914] | : .   ..$ ...future.FUN:<environment: 0x5595b0653a60> 
[08:05:09.914] | : .   ..$ ...          :<environment: 0x5595b0653a60> 
[08:05:09.914] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:09.914] | : .  - attr(*, "resolved")= logi FALSE
[08:05:09.914] | : .  - attr(*, "total_size")= num 4260
[08:05:09.917] | : . Packages to be attached in all futures: [n=0] 
[08:05:09.918] | : getGlobalsAndPackagesXApply() ... done
[08:05:09.918] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:09.918] | : List of 5
[08:05:09.918] | :  $ ...future.FUN            :function (a, b)  
[08:05:09.918] | :  $ ...                      :List of 1
[08:05:09.918] | :   ..$ b:<environment: 0x5595b0650720> 
[08:05:09.918] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:09.918] | :  $ ...future.elements_ii    : NULL
[08:05:09.918] | :  $ ...future.seeds_ii       : NULL
[08:05:09.918] | :  $ ...future.globals.maxSize: NULL
[08:05:09.918] | :  - attr(*, "where")=List of 5
[08:05:09.918] | :   ..$ ...future.FUN            :<environment: 0x5595b0653a60> 
[08:05:09.918] | :   ..$ ...                      :<environment: 0x5595b0653a60> 
[08:05:09.918] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:09.918] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:09.918] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:09.918] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:09.918] | :  - attr(*, "resolved")= logi FALSE
[08:05:09.918] | :  - attr(*, "total_size")= num 4260
[08:05:09.922] | : Number of futures (= number of chunks): 1
[08:05:09.922] | : Launching 1 futures (chunks) ...
[08:05:09.922] | : Chunk #1 of 1 ...
[08:05:09.923] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:09.923] | :    + additional globals found: [n=0] 
[08:05:09.923] | :    + additional namespaces needed: [n=0] 
[08:05:09.923] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:09.923] | :  - seeds: <none>
[08:05:09.923] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:10.026] | : Created future:
[08:05:10.026] | : MultisessionFuture:
[08:05:10.026] | : Label: ‘future_lapply-1’
[08:05:10.026] | : Expression:
[08:05:10.026] | : {
[08:05:10.026] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:10.026] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:10.026] | :     "# as a global variable                                         "
[08:05:10.026] | :     do.call(function(...) {
[08:05:10.026] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:10.026] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:10.026] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:10.026] | :         "# anonymous function.                                          "
[08:05:10.026] | :         "#                                                              "
[08:05:10.026] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:10.026] | :         "# function environment of FUN() to the calling environment.    "
[08:05:10.026] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:10.026] | :         "# global environment, which is where globals are written.      "
[08:05:10.026] | :         penv <- env <- environment(...future.FUN)
[08:05:10.026] | :         repeat {
[08:05:10.026] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:10.026] | :                 emptyenv())) 
[08:05:10.026] | :                 break
[08:05:10.026] | :             penv <- env
[08:05:10.026] | :             env <- parent.env(env)
[08:05:10.026] | :         }
[08:05:10.026] | :         if (identical(penv, globalenv())) {
[08:05:10.026] | :             environment(...future.FUN) <- environment()
[08:05:10.026] | :         }
[08:05:10.026] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:10.026] | :             !isNamespace(penv)) {
[08:05:10.026] | :             parent.env(penv) <- environment()
[08:05:10.026] | :         }
[08:05:10.026] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:10.026] | :         {
[08:05:10.026] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:10.026] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:10.026] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:10.026] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:10.026] | :                 on.exit(options(oopts), add = TRUE)
[08:05:10.026] | :             }
[08:05:10.026] | :             {
[08:05:10.026] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:10.026] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:10.026] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:10.026] | :                   {
[08:05:10.026] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:10.026] | :                   }
[08:05:10.026] | :                 })
[08:05:10.026] | :             }
[08:05:10.026] | :         }
[08:05:10.026] | :     }, args = future.call.arguments)
[08:05:10.026] | : }
[08:05:10.026] | : Globals: 5 objects totaling 4.43 KiB (function ‘...future.FUN’ of 332 bytes, DotDotDotList ‘future.call.arguments’ of 279 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:10.026] | : Packages: <none>
[08:05:10.026] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:10.026] | : Capture standard output: TRUE
[08:05:10.026] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:10.026] | : Immediate condition classes: ‘immediateCondition’
[08:05:10.026] | : Lazy evaluation: FALSE
[08:05:10.026] | : Local evaluation: TRUE
[08:05:10.026] | : Asynchronous evaluation: TRUE
[08:05:10.026] | : Early signaling: FALSE
[08:05:10.026] | : Environment: R_GlobalEnv
[08:05:10.026] | : State: ‘running’
[08:05:10.026] | : Resolved: FALSE
[08:05:10.026] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-34
[08:05:10.026] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:10.026] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:10.026] | : Value: <not collected>
[08:05:10.026] | : Conditions captured: <none>
[08:05:10.038] | : Chunk #1 of 1 ... DONE
[08:05:10.039] | : Launching 1 futures (chunks) ... DONE
[08:05:10.039] | : Resolving 1 futures (chunks) ...
[08:05:10.081] | :  - Number of value chunks collected: 1
[08:05:10.081] | : Resolving 1 futures (chunks) ... DONE
[08:05:10.082] | : Reducing values from 1 chunks ...
[08:05:10.082] | :  - Number of values collected after concatenation: 1
[08:05:10.082] | :  - Number of values expected: 1
[08:05:10.082] | : Reducing values from 1 chunks ... DONE
[08:05:10.082] | future_lapply() -> future_xapply() ... done
[08:05:10.082] future_lapply() ... done
[08:05:10.082] future_lapply() ...
[08:05:10.083] | Globals in FUN(): [n=1] ‘typeof’
[08:05:10.083] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:10.083] | future_lapply() -> future_xapply() ...
[08:05:10.083] | : Number of chunks: 1
[08:05:10.083] | : getGlobalsAndPackagesXApply() ...
[08:05:10.083] | : . future.globals: TRUE
[08:05:10.089] | : . globals found/used: [n=1] ‘FUN’
[08:05:10.089] | : . needed namespaces: [n=0] 
[08:05:10.090] | : . use_args: TRUE
[08:05:10.090] | : . Getting '...' globals ...
[08:05:10.090] | : . ' '...' content: [n=1] ‘b’
[08:05:10.090] | : . ' List of 1
[08:05:10.090] | : . '  $ ...:List of 1
[08:05:10.090] | : . '   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[08:05:10.090] | : . '   .. .. ..@ slots     :List of 4
[08:05:10.090] | : . '   .. .. .. ..$ .Data  : chr "function"
[08:05:10.090] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. ..$ target : chr "signature"
[08:05:10.090] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. ..$ defined: chr "signature"
[08:05:10.090] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. ..$ generic: chr "character"
[08:05:10.090] | : . '   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. ..@ contains  :List of 4
[08:05:10.090] | : . '   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.090] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ superClass: chr "function"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.090] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:10.090] | : . '   .. .. .. .. .. ..@ dataPart  : logi TRUE
[08:05:10.090] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:10.090] | : . '   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.090] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.090] | : . '   .. .. .. .. .. ..@ by        : chr "function"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.090] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:10.090] | : . '   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.090] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.090] | : . '   .. .. .. .. .. ..@ by        : chr "function"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.090] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:10.090] | : . '   .. .. .. ..$ optionalMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.090] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ superClass: chr "optionalMethod"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.090] | : . '   .. .. .. .. .. ..@ by        : chr "function"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.090] | : . '   .. .. .. .. .. ..@ distance  : num 3
[08:05:10.090] | : . '   .. .. ..@ virtual   : logi FALSE
[08:05:10.090] | : . '   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[08:05:10.090] | : . '  list()
[08:05:10.090] | : . '   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[08:05:10.090] | : . '   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:10.090] | : . '   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:10.090] | : . '   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:10.090] | : . '   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[08:05:10.090] | : . '   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:10.090] | : . '   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:10.090] | : . '   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:10.090] | : . '   .. .. .. .. ..$ generic: chr(0) 
[08:05:10.090] | : . '   .. .. ..@ validity  : NULL
[08:05:10.090] | : . '   .. .. ..@ access    : list()
[08:05:10.090] | : . '   .. .. ..@ className : chr "MethodDefinition"
[08:05:10.090] | : . '   .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. ..@ package   : chr "methods"
[08:05:10.090] | : . '   .. .. ..@ subclasses:List of 7
[08:05:10.090] | : . '   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.090] | : . '   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.090] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:10.090] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.090] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:10.090] | : . '   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.090] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.090] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:10.090] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.090] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:10.090] | : . '   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.090] | : . '   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.090] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:10.090] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.090] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:10.090] | : . '   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.090] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.090] | : . '   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:10.090] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.090] | : . '   .. .. .. .. .. ..@ distance  : num 1
[08:05:10.090] | : . '   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.090] | : . '   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.090] | : . '   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.090] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:10.090] | : . '   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.090] | : . '   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.090] | : . '   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.090] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:10.090] | : . '   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.090] | : . '   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.090] | : . '   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.090] | : . '   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:10.090] | : . '   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.090] | : . '   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.090] | : . '   .. .. .. .. .. ..@ distance  : num 2
[08:05:10.090] | : . '   .. .. ..@ versionKey:<externalptr> 
[08:05:10.090] | : . '   .. .. ..@ sealed    : logi TRUE
[08:05:10.090] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:10.090] | : . '  - attr(*, "where")=List of 1
[08:05:10.090] | : . '   ..$ ...:<environment: 0x5595afe30c10> 
[08:05:10.090] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:10.090] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:10.090] | : . '  - attr(*, "total_size")= num NA
[08:05:10.146] | : . Getting '...' globals ... done
[08:05:10.147] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:10.147] | : . List of 2
[08:05:10.147] | : .  $ ...future.FUN:function (a, b)  
[08:05:10.147] | : .  $ ...          :List of 1
[08:05:10.147] | : .   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[08:05:10.147] | : .   .. .. ..@ slots     :List of 4
[08:05:10.147] | : .   .. .. .. ..$ .Data  : chr "function"
[08:05:10.147] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. ..$ target : chr "signature"
[08:05:10.147] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. ..$ defined: chr "signature"
[08:05:10.147] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. ..$ generic: chr "character"
[08:05:10.147] | : .   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. ..@ contains  :List of 4
[08:05:10.147] | : .   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.147] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ superClass: chr "function"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.147] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:10.147] | : .   .. .. .. .. .. ..@ dataPart  : logi TRUE
[08:05:10.147] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:10.147] | : .   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.147] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.147] | : .   .. .. .. .. .. ..@ by        : chr "function"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.147] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:10.147] | : .   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.147] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.147] | : .   .. .. .. .. .. ..@ by        : chr "function"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.147] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:10.147] | : .   .. .. .. ..$ optionalMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.147] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ superClass: chr "optionalMethod"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.147] | : .   .. .. .. .. .. ..@ by        : chr "function"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.147] | : .   .. .. .. .. .. ..@ distance  : num 3
[08:05:10.147] | : .   .. .. ..@ virtual   : logi FALSE
[08:05:10.147] | : .   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[08:05:10.147] | : .  list()
[08:05:10.147] | : .   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[08:05:10.147] | : .   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:10.147] | : .   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:10.147] | : .   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:10.147] | : .   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[08:05:10.147] | : .   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:10.147] | : .   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:10.147] | : .   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:10.147] | : .   .. .. .. .. ..$ generic: chr(0) 
[08:05:10.147] | : .   .. .. ..@ validity  : NULL
[08:05:10.147] | : .   .. .. ..@ access    : list()
[08:05:10.147] | : .   .. .. ..@ className : chr "MethodDefinition"
[08:05:10.147] | : .   .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. ..@ package   : chr "methods"
[08:05:10.147] | : .   .. .. ..@ subclasses:List of 7
[08:05:10.147] | : .   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.147] | : .   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.147] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:10.147] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.147] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:10.147] | : .   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.147] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.147] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:10.147] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.147] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:10.147] | : .   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.147] | : .   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.147] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:10.147] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.147] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:10.147] | : .   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.147] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.147] | : .   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:10.147] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.147] | : .   .. .. .. .. .. ..@ distance  : num 1
[08:05:10.147] | : .   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.147] | : .   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.147] | : .   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.147] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:10.147] | : .   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.147] | : .   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.147] | : .   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.147] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:10.147] | : .   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.147] | : .   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.147] | : .   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.147] | : .   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:10.147] | : .   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.147] | : .   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.147] | : .   .. .. .. .. .. ..@ distance  : num 2
[08:05:10.147] | : .   .. .. ..@ versionKey:<externalptr> 
[08:05:10.147] | : .   .. .. ..@ sealed    : logi TRUE
[08:05:10.147] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:10.147] | : .  - attr(*, "where")=List of 2
[08:05:10.147] | : .   ..$ ...future.FUN:<environment: 0x5595afe30c10> 
[08:05:10.147] | : .   ..$ ...          :<environment: 0x5595afe30c10> 
[08:05:10.147] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:10.147] | : .  - attr(*, "resolved")= logi FALSE
[08:05:10.147] | : .  - attr(*, "total_size")= num 106127
[08:05:10.199] | : . Packages to be attached in all futures: [n=0] 
[08:05:10.199] | : getGlobalsAndPackagesXApply() ... done
[08:05:10.199] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:10.200] | : List of 5
[08:05:10.200] | :  $ ...future.FUN            :function (a, b)  
[08:05:10.200] | :  $ ...                      :List of 1
[08:05:10.200] | :   ..$ b:Formal class 'classRepresentation' [package "methods"] with 11 slots
[08:05:10.200] | :   .. .. ..@ slots     :List of 4
[08:05:10.200] | :   .. .. .. ..$ .Data  : chr "function"
[08:05:10.200] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. ..$ target : chr "signature"
[08:05:10.200] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. ..$ defined: chr "signature"
[08:05:10.200] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. ..$ generic: chr "character"
[08:05:10.200] | :   .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. ..@ contains  :List of 4
[08:05:10.200] | :   .. .. .. ..$ function        :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.200] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ superClass: chr "function"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.200] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.200] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.200] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.200] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:10.200] | :   .. .. .. .. .. ..@ dataPart  : logi TRUE
[08:05:10.200] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:10.200] | :   .. .. .. ..$ OptionalFunction:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.200] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ superClass: chr "OptionalFunction"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.200] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.200] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.200] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.200] | :   .. .. .. .. .. ..@ by        : chr "function"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.200] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:10.200] | :   .. .. .. ..$ PossibleMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.200] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ superClass: chr "PossibleMethod"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.200] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.200] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.200] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.200] | :   .. .. .. .. .. ..@ by        : chr "function"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.200] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:10.200] | :   .. .. .. ..$ optionalMethod  :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.200] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinition"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ superClass: chr "optionalMethod"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.200] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.200] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.200] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.200] | :   .. .. .. .. .. ..@ by        : chr "function"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.200] | :   .. .. .. .. .. ..@ distance  : num 3
[08:05:10.200] | :   .. .. ..@ virtual   : logi FALSE
[08:05:10.200] | :   .. .. ..@ prototype :Formal class 'function' [package ""] with 0 slots
[08:05:10.200] | :  list()
[08:05:10.200] | :   .. .. .. .. ..$ target :Formal class 'signature' [package "methods"] with 3 slots
[08:05:10.200] | :   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:10.200] | :   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:10.200] | :   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:10.200] | :   .. .. .. .. ..$ defined:Formal class 'signature' [package "methods"] with 3 slots
[08:05:10.200] | :   .. .. .. .. .. .. ..@ .Data  : chr(0) 
[08:05:10.200] | :   .. .. .. .. .. .. ..@ names  : chr(0) 
[08:05:10.200] | :   .. .. .. .. .. .. ..@ package: chr(0) 
[08:05:10.200] | :   .. .. .. .. ..$ generic: chr(0) 
[08:05:10.200] | :   .. .. ..@ validity  : NULL
[08:05:10.200] | :   .. .. ..@ access    : list()
[08:05:10.200] | :   .. .. ..@ className : chr "MethodDefinition"
[08:05:10.200] | :   .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. ..@ package   : chr "methods"
[08:05:10.200] | :   .. .. ..@ subclasses:List of 7
[08:05:10.200] | :   .. .. .. ..$ derivedDefaultMethod         :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.200] | :   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethod"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.200] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.200] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.200] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.200] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:10.200] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.200] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:10.200] | :   .. .. .. ..$ MethodWithNext               :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.200] | :   .. .. .. .. .. ..@ subClass  : chr "MethodWithNext"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.200] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.200] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.200] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.200] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:10.200] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.200] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:10.200] | :   .. .. .. ..$ SealedMethodDefinition       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.200] | :   .. .. .. .. .. ..@ subClass  : chr "SealedMethodDefinition"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.200] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.200] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.200] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.200] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:10.200] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.200] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:10.200] | :   .. .. .. ..$ MethodDefinitionWithTrace    :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.200] | :   .. .. .. .. .. ..@ subClass  : chr "MethodDefinitionWithTrace"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.200] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.200] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.200] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.200] | :   .. .. .. .. .. ..@ by        : chr(0) 
[08:05:10.200] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.200] | :   .. .. .. .. .. ..@ distance  : num 1
[08:05:10.200] | :   .. .. .. ..$ internalDispatchMethod       :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.200] | :   .. .. .. .. .. ..@ subClass  : chr "internalDispatchMethod"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.200] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.200] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.200] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.200] | :   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.200] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:10.200] | :   .. .. .. ..$ MethodWithNextWithTrace      :Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.200] | :   .. .. .. .. .. ..@ subClass  : chr "MethodWithNextWithTrace"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.200] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.200] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.200] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.200] | :   .. .. .. .. .. ..@ by        : chr "MethodWithNext"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.200] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:10.200] | :   .. .. .. ..$ derivedDefaultMethodWithTrace:Formal class 'SClassExtension' [package "methods"] with 10 slots
[08:05:10.200] | :   .. .. .. .. .. ..@ subClass  : chr "derivedDefaultMethodWithTrace"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ superClass: chr "MethodDefinition"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ package   : chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ coerce    :function (from, strict = TRUE)  
[08:05:10.200] | :   .. .. .. .. .. ..@ test      :function (object)  
[08:05:10.200] | :   .. .. .. .. .. ..@ replace   :function (from, to, value)  
[08:05:10.200] | :   .. .. .. .. .. ..@ simple    : logi TRUE
[08:05:10.200] | :   .. .. .. .. .. ..@ by        : chr "derivedDefaultMethod"
[08:05:10.200] | :   .. .. .. .. .. .. ..- attr(*, "package")= chr "methods"
[08:05:10.200] | :   .. .. .. .. .. ..@ dataPart  : logi FALSE
[08:05:10.200] | :   .. .. .. .. .. ..@ distance  : num 2
[08:05:10.200] | :   .. .. ..@ versionKey:<externalptr> 
[08:05:10.200] | :   .. .. ..@ sealed    : logi TRUE
[08:05:10.200] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:10.200] | :  $ ...future.elements_ii    : NULL
[08:05:10.200] | :  $ ...future.seeds_ii       : NULL
[08:05:10.200] | :  $ ...future.globals.maxSize: NULL
[08:05:10.200] | :  - attr(*, "where")=List of 5
[08:05:10.200] | :   ..$ ...future.FUN            :<environment: 0x5595afe30c10> 
[08:05:10.200] | :   ..$ ...                      :<environment: 0x5595afe30c10> 
[08:05:10.200] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:10.200] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:10.200] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:10.200] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:10.200] | :  - attr(*, "resolved")= logi FALSE
[08:05:10.200] | :  - attr(*, "total_size")= num 106127
[08:05:10.255] | : Number of futures (= number of chunks): 1
[08:05:10.255] | : Launching 1 futures (chunks) ...
[08:05:10.255] | : Chunk #1 of 1 ...
[08:05:10.255] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:10.256] | :    + additional globals found: [n=0] 
[08:05:10.256] | :    + additional namespaces needed: [n=0] 
[08:05:10.256] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:10.256] | :  - seeds: <none>
[08:05:10.256] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:10.362] | : Created future:
[08:05:10.362] | : MultisessionFuture:
[08:05:10.362] | : Label: ‘future_lapply-1’
[08:05:10.362] | : Expression:
[08:05:10.362] | : {
[08:05:10.362] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:10.362] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:10.362] | :     "# as a global variable                                         "
[08:05:10.362] | :     do.call(function(...) {
[08:05:10.362] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:10.362] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:10.362] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:10.362] | :         "# anonymous function.                                          "
[08:05:10.362] | :         "#                                                              "
[08:05:10.362] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:10.362] | :         "# function environment of FUN() to the calling environment.    "
[08:05:10.362] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:10.362] | :         "# global environment, which is where globals are written.      "
[08:05:10.362] | :         penv <- env <- environment(...future.FUN)
[08:05:10.362] | :         repeat {
[08:05:10.362] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:10.362] | :                 emptyenv())) 
[08:05:10.362] | :                 break
[08:05:10.362] | :             penv <- env
[08:05:10.362] | :             env <- parent.env(env)
[08:05:10.362] | :         }
[08:05:10.362] | :         if (identical(penv, globalenv())) {
[08:05:10.362] | :             environment(...future.FUN) <- environment()
[08:05:10.362] | :         }
[08:05:10.362] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:10.362] | :             !isNamespace(penv)) {
[08:05:10.362] | :             parent.env(penv) <- environment()
[08:05:10.362] | :         }
[08:05:10.362] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:10.362] | :         {
[08:05:10.362] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:10.362] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:10.362] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:10.362] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:10.362] | :                 on.exit(options(oopts), add = TRUE)
[08:05:10.362] | :             }
[08:05:10.362] | :             {
[08:05:10.362] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:10.362] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:10.362] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:10.362] | :                   {
[08:05:10.362] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:10.362] | :                   }
[08:05:10.362] | :                 })
[08:05:10.362] | :             }
[08:05:10.362] | :         }
[08:05:10.362] | :     }, args = future.call.arguments)
[08:05:10.362] | : }
[08:05:10.362] | : Globals: 5 objects totaling 103.91 KiB (DotDotDotList ‘future.call.arguments’ of 50.30 KiB, function ‘...future.FUN’ of 332 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:10.362] | : Packages: <none>
[08:05:10.362] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:10.362] | : Capture standard output: TRUE
[08:05:10.362] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:10.362] | : Immediate condition classes: ‘immediateCondition’
[08:05:10.362] | : Lazy evaluation: FALSE
[08:05:10.362] | : Local evaluation: TRUE
[08:05:10.362] | : Asynchronous evaluation: TRUE
[08:05:10.362] | : Early signaling: FALSE
[08:05:10.362] | : Environment: R_GlobalEnv
[08:05:10.362] | : State: ‘running’
[08:05:10.362] | : Resolved: FALSE
[08:05:10.362] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-35
[08:05:10.362] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:10.362] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:10.362] | : Value: <not collected>
[08:05:10.362] | : Conditions captured: <none>
[08:05:10.375] | : Chunk #1 of 1 ... DONE
[08:05:10.375] | : Launching 1 futures (chunks) ... DONE
[08:05:10.375] | : Resolving 1 futures (chunks) ...
[08:05:10.406] | :  - Number of value chunks collected: 1
[08:05:10.407] | : Resolving 1 futures (chunks) ... DONE
[08:05:10.407] | : Reducing values from 1 chunks ...
[08:05:10.407] | :  - Number of values collected after concatenation: 1
[08:05:10.407] | :  - Number of values expected: 1
[08:05:10.407] | : Reducing values from 1 chunks ... DONE
[08:05:10.407] | future_lapply() -> future_xapply() ... done
[08:05:10.407] future_lapply() ... done
- future_lapply(X, ...) - 'X' containing globals ...
List of 4
 $ : num 84
 $ : num 10.5
 $ : num 63
 $ : int 11
[08:05:10.409] future_lapply() ...
[08:05:10.410] | Globals in FUN(): [n=0] 
[08:05:10.410] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:10.410] | future_lapply() -> future_xapply() ...
[08:05:10.411] | : Number of chunks: 2
[08:05:10.411] | : getGlobalsAndPackagesXApply() ...
[08:05:10.411] | : . future.globals: TRUE
[08:05:10.414] | : . globals found/used: [n=1] ‘FUN’
[08:05:10.414] | : . needed namespaces: [n=0] 
[08:05:10.414] | : . use_args: TRUE
[08:05:10.415] | : . Getting '...' globals ...
[08:05:10.415] | : . ' '...' content: [n=0] 
[08:05:10.415] | : . ' List of 1
[08:05:10.415] | : . '  $ ...: list()
[08:05:10.415] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:10.415] | : . '  - attr(*, "where")=List of 1
[08:05:10.415] | : . '   ..$ ...:<environment: 0x5595ad15b640> 
[08:05:10.415] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:10.415] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:10.415] | : . '  - attr(*, "total_size")= num NA
[08:05:10.417] | : . Getting '...' globals ... done
[08:05:10.418] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:10.418] | : . List of 2
[08:05:10.418] | : .  $ ...future.FUN:function (f)  
[08:05:10.418] | : .  $ ...          : list()
[08:05:10.418] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:10.418] | : .  - attr(*, "where")=List of 2
[08:05:10.418] | : .   ..$ ...future.FUN:<environment: 0x5595ad15b640> 
[08:05:10.418] | : .   ..$ ...          :<environment: 0x5595ad15b640> 
[08:05:10.418] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:10.418] | : .  - attr(*, "resolved")= logi FALSE
[08:05:10.418] | : .  - attr(*, "total_size")= num 5165
[08:05:10.426] | : . Packages to be attached in all futures: [n=0] 
[08:05:10.426] | : getGlobalsAndPackagesXApply() ... done
[08:05:10.426] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:10.426] | : List of 5
[08:05:10.426] | :  $ ...future.FUN            :function (f)  
[08:05:10.426] | :  $ ...                      : list()
[08:05:10.426] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:10.426] | :  $ ...future.elements_ii    : NULL
[08:05:10.426] | :  $ ...future.seeds_ii       : NULL
[08:05:10.426] | :  $ ...future.globals.maxSize: NULL
[08:05:10.426] | :  - attr(*, "where")=List of 5
[08:05:10.426] | :   ..$ ...future.FUN            :<environment: 0x5595ad15b640> 
[08:05:10.426] | :   ..$ ...                      :<environment: 0x5595ad15b640> 
[08:05:10.426] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:10.426] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:10.426] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:10.426] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:10.426] | :  - attr(*, "resolved")= logi FALSE
[08:05:10.426] | :  - attr(*, "total_size")= num 5165
[08:05:10.430] | : Number of futures (= number of chunks): 2
[08:05:10.430] | : Launching 2 futures (chunks) ...
[08:05:10.430] | : Chunk #1 of 2 ...
[08:05:10.431] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:10.440] | :    + additional globals found: [n=2] ‘a’, ‘b’
[08:05:10.440] | :    + additional namespaces needed: [n=0] 
[08:05:10.440] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:10.441] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:10.441] | :  - seeds: <none>
[08:05:10.441] | :  - All globals exported: [n=7] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’, ‘a’, ‘b’
[08:05:10.545] | : Created future:
[08:05:10.545] | : MultisessionFuture:
[08:05:10.545] | : Label: ‘future_lapply-1’
[08:05:10.545] | : Expression:
[08:05:10.545] | : {
[08:05:10.545] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:10.545] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:10.545] | :     "# as a global variable                                         "
[08:05:10.545] | :     do.call(function(...) {
[08:05:10.545] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:10.545] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:10.545] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:10.545] | :         "# anonymous function.                                          "
[08:05:10.545] | :         "#                                                              "
[08:05:10.545] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:10.545] | :         "# function environment of FUN() to the calling environment.    "
[08:05:10.545] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:10.545] | :         "# global environment, which is where globals are written.      "
[08:05:10.545] | :         penv <- env <- environment(...future.FUN)
[08:05:10.545] | :         repeat {
[08:05:10.545] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:10.545] | :                 emptyenv())) 
[08:05:10.545] | :                 break
[08:05:10.545] | :             penv <- env
[08:05:10.545] | :             env <- parent.env(env)
[08:05:10.545] | :         }
[08:05:10.545] | :         if (identical(penv, globalenv())) {
[08:05:10.545] | :             environment(...future.FUN) <- environment()
[08:05:10.545] | :         }
[08:05:10.545] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:10.545] | :             !isNamespace(penv)) {
[08:05:10.545] | :             parent.env(penv) <- environment()
[08:05:10.545] | :         }
[08:05:10.545] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:10.545] | :         {
[08:05:10.545] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:10.545] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:10.545] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:10.545] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:10.545] | :                 on.exit(options(oopts), add = TRUE)
[08:05:10.545] | :             }
[08:05:10.545] | :             {
[08:05:10.545] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:10.545] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:10.545] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:10.545] | :                   {
[08:05:10.545] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:10.545] | :                   }
[08:05:10.545] | :                 })
[08:05:10.545] | :             }
[08:05:10.545] | :         }
[08:05:10.545] | :     }, args = future.call.arguments)
[08:05:10.545] | : }
[08:05:10.545] | : Globals: 7 objects totaling 5.90 KiB (list ‘...future.elements_ii’ of 588 bytes, function ‘...future.FUN’ of 225 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘a’ of 39 bytes, numeric ‘b’ of 39 bytes, ...)
[08:05:10.545] | : Packages: <none>
[08:05:10.545] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:10.545] | : Capture standard output: TRUE
[08:05:10.545] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:10.545] | : Immediate condition classes: ‘immediateCondition’
[08:05:10.545] | : Lazy evaluation: FALSE
[08:05:10.545] | : Local evaluation: TRUE
[08:05:10.545] | : Asynchronous evaluation: TRUE
[08:05:10.545] | : Early signaling: FALSE
[08:05:10.545] | : Environment: R_GlobalEnv
[08:05:10.545] | : State: ‘running’
[08:05:10.545] | : Resolved: FALSE
[08:05:10.545] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-36
[08:05:10.545] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:10.545] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:10.545] | : Value: <not collected>
[08:05:10.545] | : Conditions captured: <none>
[08:05:10.557] | : Chunk #1 of 2 ... DONE
[08:05:10.557] | : Chunk #2 of 2 ...
[08:05:10.558] | :  - Finding globals in 'X' for chunk #2 ...
[08:05:10.569] | :    + additional globals found: [n=2] ‘a’, ‘b’
[08:05:10.571] | :    + additional namespaces needed: [n=1] ‘tools’
[08:05:10.571] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:05:10.571] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:10.571] | :  - seeds: <none>
[08:05:10.571] | :  - All globals exported: [n=7] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’, ‘a’, ‘b’
[08:05:10.639] | : Created future:
[08:05:10.639] | : MultisessionFuture:
[08:05:10.639] | : Label: ‘future_lapply-2’
[08:05:10.639] | : Expression:
[08:05:10.639] | : {
[08:05:10.639] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:10.639] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:10.639] | :     "# as a global variable                                         "
[08:05:10.639] | :     do.call(function(...) {
[08:05:10.639] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:10.639] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:10.639] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:10.639] | :         "# anonymous function.                                          "
[08:05:10.639] | :         "#                                                              "
[08:05:10.639] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:10.639] | :         "# function environment of FUN() to the calling environment.    "
[08:05:10.639] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:10.639] | :         "# global environment, which is where globals are written.      "
[08:05:10.639] | :         penv <- env <- environment(...future.FUN)
[08:05:10.639] | :         repeat {
[08:05:10.639] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:10.639] | :                 emptyenv())) 
[08:05:10.639] | :                 break
[08:05:10.639] | :             penv <- env
[08:05:10.639] | :             env <- parent.env(env)
[08:05:10.639] | :         }
[08:05:10.639] | :         if (identical(penv, globalenv())) {
[08:05:10.639] | :             environment(...future.FUN) <- environment()
[08:05:10.639] | :         }
[08:05:10.639] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:10.639] | :             !isNamespace(penv)) {
[08:05:10.639] | :             parent.env(penv) <- environment()
[08:05:10.639] | :         }
[08:05:10.639] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:10.639] | :         {
[08:05:10.639] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:10.639] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:10.639] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:10.639] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:10.639] | :                 on.exit(options(oopts), add = TRUE)
[08:05:10.639] | :             }
[08:05:10.639] | :             {
[08:05:10.639] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:10.639] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:10.639] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:10.639] | :                   {
[08:05:10.639] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:10.639] | :                   }
[08:05:10.639] | :                 })
[08:05:10.639] | :             }
[08:05:10.639] | :         }
[08:05:10.639] | :     }, args = future.call.arguments)
[08:05:10.639] | : }
[08:05:10.639] | : Globals: 7 objects totaling 6.18 KiB (list ‘...future.elements_ii’ of 903 bytes, function ‘...future.FUN’ of 225 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘a’ of 39 bytes, numeric ‘b’ of 39 bytes, ...)
[08:05:10.639] | : Packages: 1 packages (‘tools’)
[08:05:10.639] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:10.639] | : Capture standard output: TRUE
[08:05:10.639] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:10.639] | : Immediate condition classes: ‘immediateCondition’
[08:05:10.639] | : Lazy evaluation: FALSE
[08:05:10.639] | : Local evaluation: TRUE
[08:05:10.639] | : Asynchronous evaluation: TRUE
[08:05:10.639] | : Early signaling: FALSE
[08:05:10.639] | : Environment: R_GlobalEnv
[08:05:10.639] | : State: ‘running’
[08:05:10.639] | : Resolved: FALSE
[08:05:10.639] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-37
[08:05:10.639] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:10.639] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:10.639] | : Value: <not collected>
[08:05:10.639] | : Conditions captured: <none>
[08:05:10.651] | : Chunk #2 of 2 ... DONE
[08:05:10.651] | : Launching 2 futures (chunks) ... DONE
[08:05:10.651] | : Resolving 2 futures (chunks) ...
[08:05:10.695] | :  - Number of value chunks collected: 2
[08:05:10.695] | : Resolving 2 futures (chunks) ... DONE
[08:05:10.695] | : Reducing values from 2 chunks ...
[08:05:10.695] | :  - Number of values collected after concatenation: 4
[08:05:10.695] | :  - Number of values expected: 4
[08:05:10.695] | : Reducing values from 2 chunks ... DONE
[08:05:10.696] | future_lapply() -> future_xapply() ... done
[08:05:10.696] future_lapply() ... done
List of 4
 $ : num 84
 $ : num 10.5
 $ : num 63
 $ : int 11
- future_lapply(X, ...) - '{ a <- a + 1; a }' ...
[08:05:10.697] future_lapply() ...
[08:05:10.698] | Globals in FUN(): [n=4] ‘{’, ‘<-’, ‘a’, ‘+’
[08:05:10.698] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:10.698] | future_lapply() -> future_xapply() ...
[08:05:10.699] | : Number of chunks: 1
[08:05:10.699] | : getGlobalsAndPackagesXApply() ...
[08:05:10.699] | : . future.globals: TRUE
[08:05:10.706] | : . globals found/used: [n=2] ‘FUN’, ‘a’
[08:05:10.706] | : . needed namespaces: [n=0] 
[08:05:10.706] | : . use_args: TRUE
[08:05:10.707] | : . Getting '...' globals ...
[08:05:10.707] | : . ' '...' content: [n=0] 
[08:05:10.707] | : . ' List of 1
[08:05:10.707] | : . '  $ ...: list()
[08:05:10.707] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:10.707] | : . '  - attr(*, "where")=List of 1
[08:05:10.707] | : . '   ..$ ...:<environment: 0x5595ae7cd858> 
[08:05:10.707] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:10.707] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:10.707] | : . '  - attr(*, "total_size")= num NA
[08:05:10.710] | : . Getting '...' globals ... done
[08:05:10.710] | : . Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘a’, ‘...’
[08:05:10.710] | : . List of 3
[08:05:10.710] | : .  $ ...future.FUN:function (ii)  
[08:05:10.710] | : .  $ a            : num 1
[08:05:10.710] | : .  $ ...          : list()
[08:05:10.710] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:10.710] | : .  - attr(*, "where")=List of 3
[08:05:10.710] | : .   ..$ ...future.FUN:<environment: 0x5595ae7cd858> 
[08:05:10.710] | : .   ..$ a            :<environment: R_GlobalEnv> 
[08:05:10.710] | : .   ..$ ...          :<environment: 0x5595ae7cd858> 
[08:05:10.710] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:10.710] | : .  - attr(*, "resolved")= logi FALSE
[08:05:10.710] | : .  - attr(*, "total_size")= num 4124
[08:05:10.713] | : . Packages to be attached in all futures: [n=0] 
[08:05:10.713] | : getGlobalsAndPackagesXApply() ... done
[08:05:10.714] | : Globals pass to each chunk: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:10.714] | : List of 6
[08:05:10.714] | :  $ ...future.FUN            :function (ii)  
[08:05:10.714] | :  $ a                        : num 1
[08:05:10.714] | :  $ ...                      : list()
[08:05:10.714] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:10.714] | :  $ ...future.elements_ii    : NULL
[08:05:10.714] | :  $ ...future.seeds_ii       : NULL
[08:05:10.714] | :  $ ...future.globals.maxSize: NULL
[08:05:10.714] | :  - attr(*, "where")=List of 6
[08:05:10.714] | :   ..$ ...future.FUN            :<environment: 0x5595ae7cd858> 
[08:05:10.714] | :   ..$ a                        :<environment: R_GlobalEnv> 
[08:05:10.714] | :   ..$ ...                      :<environment: 0x5595ae7cd858> 
[08:05:10.714] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:10.714] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:10.714] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:10.714] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:10.714] | :  - attr(*, "resolved")= logi FALSE
[08:05:10.714] | :  - attr(*, "total_size")= num 4124
[08:05:10.718] | : Number of futures (= number of chunks): 1
[08:05:10.719] | : Launching 1 futures (chunks) ...
[08:05:10.719] | : Chunk #1 of 1 ...
[08:05:10.719] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:10.719] | :    + additional globals found: [n=0] 
[08:05:10.719] | :    + additional namespaces needed: [n=0] 
[08:05:10.719] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:10.720] | :  - seeds: <none>
[08:05:10.720] | :  - All globals exported: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:10.837] | : Created future:
[08:05:10.837] | : MultisessionFuture:
[08:05:10.837] | : Label: ‘future_lapply-1’
[08:05:10.837] | : Expression:
[08:05:10.837] | : {
[08:05:10.837] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:10.837] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:10.837] | :     "# as a global variable                                         "
[08:05:10.837] | :     do.call(function(...) {
[08:05:10.837] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:10.837] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:10.837] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:10.837] | :         "# anonymous function.                                          "
[08:05:10.837] | :         "#                                                              "
[08:05:10.837] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:10.837] | :         "# function environment of FUN() to the calling environment.    "
[08:05:10.837] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:10.837] | :         "# global environment, which is where globals are written.      "
[08:05:10.837] | :         penv <- env <- environment(...future.FUN)
[08:05:10.837] | :         repeat {
[08:05:10.837] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:10.837] | :                 emptyenv())) 
[08:05:10.837] | :                 break
[08:05:10.837] | :             penv <- env
[08:05:10.837] | :             env <- parent.env(env)
[08:05:10.837] | :         }
[08:05:10.837] | :         if (identical(penv, globalenv())) {
[08:05:10.837] | :             environment(...future.FUN) <- environment()
[08:05:10.837] | :         }
[08:05:10.837] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:10.837] | :             !isNamespace(penv)) {
[08:05:10.837] | :             parent.env(penv) <- environment()
[08:05:10.837] | :         }
[08:05:10.837] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:10.837] | :         {
[08:05:10.837] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:10.837] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:10.837] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:10.837] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:10.837] | :                 on.exit(options(oopts), add = TRUE)
[08:05:10.837] | :             }
[08:05:10.837] | :             {
[08:05:10.837] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:10.837] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:10.837] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:10.837] | :                   {
[08:05:10.837] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:10.837] | :                   }
[08:05:10.837] | :                 })
[08:05:10.837] | :             }
[08:05:10.837] | :         }
[08:05:10.837] | :     }, args = future.call.arguments)
[08:05:10.837] | : }
[08:05:10.837] | : Globals: 6 objects totaling 4.29 KiB (function ‘...future.FUN’ of 511 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[08:05:10.837] | : Packages: <none>
[08:05:10.837] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:10.837] | : Capture standard output: TRUE
[08:05:10.837] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:10.837] | : Immediate condition classes: ‘immediateCondition’
[08:05:10.837] | : Lazy evaluation: FALSE
[08:05:10.837] | : Local evaluation: TRUE
[08:05:10.837] | : Asynchronous evaluation: TRUE
[08:05:10.837] | : Early signaling: FALSE
[08:05:10.837] | : Environment: R_GlobalEnv
[08:05:10.837] | : State: ‘running’
[08:05:10.837] | : Resolved: FALSE
[08:05:10.837] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-38
[08:05:10.837] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:10.837] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:10.837] | : Value: <not collected>
[08:05:10.837] | : Conditions captured: <none>
[08:05:10.849] | : Chunk #1 of 1 ... DONE
[08:05:10.850] | : Launching 1 futures (chunks) ... DONE
[08:05:10.850] | : Resolving 1 futures (chunks) ...
[08:05:10.892] | :  - Number of value chunks collected: 1
[08:05:10.892] | : Resolving 1 futures (chunks) ... DONE
[08:05:10.892] | : Reducing values from 1 chunks ...
[08:05:10.892] | :  - Number of values collected after concatenation: 1
[08:05:10.892] | :  - Number of values expected: 1
[08:05:10.892] | : Reducing values from 1 chunks ... DONE
[08:05:10.893] | future_lapply() -> future_xapply() ... done
[08:05:10.893] future_lapply() ... done
- future_lapply(X, ...) - '{ a; a <- a + 1 }' ...
[08:05:10.893] future_lapply() ...
[08:05:10.894] | Globals in FUN(): [n=4] ‘{’, ‘a’, ‘<-’, ‘+’
[08:05:10.894] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:10.894] | future_lapply() -> future_xapply() ...
[08:05:10.894] | : Number of chunks: 1
[08:05:10.894] | : getGlobalsAndPackagesXApply() ...
[08:05:10.894] | : . future.globals: TRUE
[08:05:10.902] | : . globals found/used: [n=2] ‘FUN’, ‘a’
[08:05:10.902] | : . needed namespaces: [n=0] 
[08:05:10.902] | : . use_args: TRUE
[08:05:10.902] | : . Getting '...' globals ...
[08:05:10.902] | : . ' '...' content: [n=0] 
[08:05:10.903] | : . ' List of 1
[08:05:10.903] | : . '  $ ...: list()
[08:05:10.903] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:10.903] | : . '  - attr(*, "where")=List of 1
[08:05:10.903] | : . '   ..$ ...:<environment: 0x5595af5e9310> 
[08:05:10.903] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:10.903] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:10.903] | : . '  - attr(*, "total_size")= num NA
[08:05:10.905] | : . Getting '...' globals ... done
[08:05:10.905] | : . Globals to be used in all futures (chunks): [n=3] ‘...future.FUN’, ‘a’, ‘...’
[08:05:10.905] | : . List of 3
[08:05:10.905] | : .  $ ...future.FUN:function (ii)  
[08:05:10.905] | : .  $ a            : num 1
[08:05:10.905] | : .  $ ...          : list()
[08:05:10.905] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:10.905] | : .  - attr(*, "where")=List of 3
[08:05:10.905] | : .   ..$ ...future.FUN:<environment: 0x5595af5e9310> 
[08:05:10.905] | : .   ..$ a            :<environment: R_GlobalEnv> 
[08:05:10.905] | : .   ..$ ...          :<environment: 0x5595af5e9310> 
[08:05:10.905] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:10.905] | : .  - attr(*, "resolved")= logi FALSE
[08:05:10.905] | : .  - attr(*, "total_size")= num 4140
[08:05:10.909] | : . Packages to be attached in all futures: [n=0] 
[08:05:10.909] | : getGlobalsAndPackagesXApply() ... done
[08:05:10.909] | : Globals pass to each chunk: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:10.909] | : List of 6
[08:05:10.909] | :  $ ...future.FUN            :function (ii)  
[08:05:10.909] | :  $ a                        : num 1
[08:05:10.909] | :  $ ...                      : list()
[08:05:10.909] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:10.909] | :  $ ...future.elements_ii    : NULL
[08:05:10.909] | :  $ ...future.seeds_ii       : NULL
[08:05:10.909] | :  $ ...future.globals.maxSize: NULL
[08:05:10.909] | :  - attr(*, "where")=List of 6
[08:05:10.909] | :   ..$ ...future.FUN            :<environment: 0x5595af5e9310> 
[08:05:10.909] | :   ..$ a                        :<environment: R_GlobalEnv> 
[08:05:10.909] | :   ..$ ...                      :<environment: 0x5595af5e9310> 
[08:05:10.909] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:10.909] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:10.909] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:10.909] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:10.909] | :  - attr(*, "resolved")= logi FALSE
[08:05:10.909] | :  - attr(*, "total_size")= num 4140
[08:05:10.914] | : Number of futures (= number of chunks): 1
[08:05:10.914] | : Launching 1 futures (chunks) ...
[08:05:10.914] | : Chunk #1 of 1 ...
[08:05:10.914] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:10.914] | :    + additional globals found: [n=0] 
[08:05:10.915] | :    + additional namespaces needed: [n=0] 
[08:05:10.915] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:10.915] | :  - seeds: <none>
[08:05:10.915] | :  - All globals exported: [n=6] ‘...future.FUN’, ‘a’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:11.013] | : Created future:
[08:05:11.013] | : MultisessionFuture:
[08:05:11.013] | : Label: ‘future_lapply-1’
[08:05:11.013] | : Expression:
[08:05:11.013] | : {
[08:05:11.013] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:11.013] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:11.013] | :     "# as a global variable                                         "
[08:05:11.013] | :     do.call(function(...) {
[08:05:11.013] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:11.013] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:11.013] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:11.013] | :         "# anonymous function.                                          "
[08:05:11.013] | :         "#                                                              "
[08:05:11.013] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:11.013] | :         "# function environment of FUN() to the calling environment.    "
[08:05:11.013] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:11.013] | :         "# global environment, which is where globals are written.      "
[08:05:11.013] | :         penv <- env <- environment(...future.FUN)
[08:05:11.013] | :         repeat {
[08:05:11.013] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:11.013] | :                 emptyenv())) 
[08:05:11.013] | :                 break
[08:05:11.013] | :             penv <- env
[08:05:11.013] | :             env <- parent.env(env)
[08:05:11.013] | :         }
[08:05:11.013] | :         if (identical(penv, globalenv())) {
[08:05:11.013] | :             environment(...future.FUN) <- environment()
[08:05:11.013] | :         }
[08:05:11.013] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:11.013] | :             !isNamespace(penv)) {
[08:05:11.013] | :             parent.env(penv) <- environment()
[08:05:11.013] | :         }
[08:05:11.013] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:11.013] | :         {
[08:05:11.013] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:11.013] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:11.013] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:11.013] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:11.013] | :                 on.exit(options(oopts), add = TRUE)
[08:05:11.013] | :             }
[08:05:11.013] | :             {
[08:05:11.013] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:11.013] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:11.013] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:11.013] | :                   {
[08:05:11.013] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:11.013] | :                   }
[08:05:11.013] | :                 })
[08:05:11.013] | :             }
[08:05:11.013] | :         }
[08:05:11.013] | :     }, args = future.call.arguments)
[08:05:11.013] | : }
[08:05:11.013] | : Globals: 6 objects totaling 4.30 KiB (function ‘...future.FUN’ of 519 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[08:05:11.013] | : Packages: <none>
[08:05:11.013] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:11.013] | : Capture standard output: TRUE
[08:05:11.013] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:11.013] | : Immediate condition classes: ‘immediateCondition’
[08:05:11.013] | : Lazy evaluation: FALSE
[08:05:11.013] | : Local evaluation: TRUE
[08:05:11.013] | : Asynchronous evaluation: TRUE
[08:05:11.013] | : Early signaling: FALSE
[08:05:11.013] | : Environment: R_GlobalEnv
[08:05:11.013] | : State: ‘running’
[08:05:11.013] | : Resolved: FALSE
[08:05:11.013] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-39
[08:05:11.013] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:11.013] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:11.013] | : Value: <not collected>
[08:05:11.013] | : Conditions captured: <none>
[08:05:11.025] | : Chunk #1 of 1 ... DONE
[08:05:11.025] | : Launching 1 futures (chunks) ... DONE
[08:05:11.026] | : Resolving 1 futures (chunks) ...
[08:05:11.057] | :  - Number of value chunks collected: 1
[08:05:11.057] | : Resolving 1 futures (chunks) ... DONE
[08:05:11.057] | : Reducing values from 1 chunks ...
[08:05:11.058] | :  - Number of values collected after concatenation: 1
[08:05:11.058] | :  - Number of values expected: 1
[08:05:11.058] | : Reducing values from 1 chunks ... DONE
[08:05:11.058] | future_lapply() -> future_xapply() ... done
[08:05:11.058] future_lapply() ... done
- future_lapply(..., future.globals = <list>) ...
[08:05:11.058] future_lapply() ...
[08:05:11.059] | Globals in FUN(): [n=1] ‘a’
[08:05:11.059] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:11.061] | future_lapply() -> future_xapply() ...
[08:05:11.061] | : Number of chunks: 1
[08:05:11.061] | : getGlobalsAndPackagesXApply() ...
[08:05:11.061] | : . future.globals: <name-value list> with names ‘a’
[08:05:11.062] | : . use_args: TRUE
[08:05:11.062] | : . Getting '...' globals ...
[08:05:11.063] | : . ' '...' content: [n=0] 
[08:05:11.063] | : . ' List of 1
[08:05:11.063] | : . '  $ ...: list()
[08:05:11.063] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:11.063] | : . '  - attr(*, "where")=List of 1
[08:05:11.063] | : . '   ..$ ...:<environment: 0x5595b057a588> 
[08:05:11.063] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:11.063] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:11.063] | : . '  - attr(*, "total_size")= num NA
[08:05:11.065] | : . Getting '...' globals ... done
[08:05:11.065] | : . Globals to be used in all futures (chunks): [n=3] ‘a’, ‘...future.FUN’, ‘...’
[08:05:11.066] | : . List of 3
[08:05:11.066] | : .  $ a            : num 42
[08:05:11.066] | : .  $ ...future.FUN:function (x)  
[08:05:11.066] | : .  $ ...          : list()
[08:05:11.066] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:11.066] | : .  - attr(*, "where")=List of 3
[08:05:11.066] | : .   ..$ a            :<environment: R_EmptyEnv> 
[08:05:11.066] | : .   ..$ ...future.FUN:<environment: R_GlobalEnv> 
[08:05:11.066] | : .   ..$ ...          :<environment: 0x5595b057a588> 
[08:05:11.066] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:11.066] | : .  - attr(*, "resolved")= logi FALSE
[08:05:11.066] | : .  - attr(*, "total_size")= num NA
[08:05:11.069] | : . Packages to be attached in all futures: [n=0] 
[08:05:11.069] | : getGlobalsAndPackagesXApply() ... done
[08:05:11.069] | : Globals pass to each chunk: [n=6] ‘a’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:11.069] | : List of 6
[08:05:11.069] | :  $ a                        : num 42
[08:05:11.069] | :  $ ...future.FUN            :function (x)  
[08:05:11.069] | :  $ ...                      : list()
[08:05:11.069] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:11.069] | :  $ ...future.elements_ii    : NULL
[08:05:11.069] | :  $ ...future.seeds_ii       : NULL
[08:05:11.069] | :  $ ...future.globals.maxSize: NULL
[08:05:11.069] | :  - attr(*, "where")=List of 6
[08:05:11.069] | :   ..$ a                        :<environment: R_EmptyEnv> 
[08:05:11.069] | :   ..$ ...future.FUN            :<environment: R_GlobalEnv> 
[08:05:11.069] | :   ..$ ...                      :<environment: 0x5595b057a588> 
[08:05:11.069] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:11.069] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:11.069] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:11.069] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:11.069] | :  - attr(*, "resolved")= logi FALSE
[08:05:11.069] | :  - attr(*, "total_size")= num NA
[08:05:11.074] | : Number of futures (= number of chunks): 1
[08:05:11.074] | : Launching 1 futures (chunks) ...
[08:05:11.074] | : Chunk #1 of 1 ...
[08:05:11.074] | :  - seeds: <none>
[08:05:11.074] | :  - All globals exported: [n=6] ‘a’, ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:11.175] | : Created future:
[08:05:11.175] | : MultisessionFuture:
[08:05:11.175] | : Label: ‘future_lapply-1’
[08:05:11.175] | : Expression:
[08:05:11.175] | : {
[08:05:11.175] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:11.175] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:11.175] | :     "# as a global variable                                         "
[08:05:11.175] | :     do.call(function(...) {
[08:05:11.175] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:11.175] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:11.175] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:11.175] | :         "# anonymous function.                                          "
[08:05:11.175] | :         "#                                                              "
[08:05:11.175] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:11.175] | :         "# function environment of FUN() to the calling environment.    "
[08:05:11.175] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:11.175] | :         "# global environment, which is where globals are written.      "
[08:05:11.175] | :         penv <- env <- environment(...future.FUN)
[08:05:11.175] | :         repeat {
[08:05:11.175] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:11.175] | :                 emptyenv())) 
[08:05:11.175] | :                 break
[08:05:11.175] | :             penv <- env
[08:05:11.175] | :             env <- parent.env(env)
[08:05:11.175] | :         }
[08:05:11.175] | :         if (identical(penv, globalenv())) {
[08:05:11.175] | :             environment(...future.FUN) <- environment()
[08:05:11.175] | :         }
[08:05:11.175] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:11.175] | :             !isNamespace(penv)) {
[08:05:11.175] | :             parent.env(penv) <- environment()
[08:05:11.175] | :         }
[08:05:11.175] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:11.175] | :         {
[08:05:11.175] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:11.175] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:11.175] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:11.175] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:11.175] | :                 on.exit(options(oopts), add = TRUE)
[08:05:11.175] | :             }
[08:05:11.175] | :             {
[08:05:11.175] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:11.175] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:11.175] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:11.175] | :                   {
[08:05:11.175] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:11.175] | :                   }
[08:05:11.175] | :                 })
[08:05:11.175] | :             }
[08:05:11.175] | :         }
[08:05:11.175] | :     }, args = future.call.arguments)
[08:05:11.175] | : }
[08:05:11.175] | : Globals: 6 objects totaling 4.16 KiB (function ‘...future.FUN’ of 298 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 47 bytes, numeric ‘a’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, ...)
[08:05:11.175] | : Packages: <none>
[08:05:11.175] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:11.175] | : Capture standard output: TRUE
[08:05:11.175] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:11.175] | : Immediate condition classes: ‘immediateCondition’
[08:05:11.175] | : Lazy evaluation: FALSE
[08:05:11.175] | : Local evaluation: TRUE
[08:05:11.175] | : Asynchronous evaluation: TRUE
[08:05:11.175] | : Early signaling: FALSE
[08:05:11.175] | : Environment: R_GlobalEnv
[08:05:11.175] | : State: ‘running’
[08:05:11.175] | : Resolved: FALSE
[08:05:11.175] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-40
[08:05:11.175] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:11.175] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:11.175] | : Value: <not collected>
[08:05:11.175] | : Conditions captured: <none>
[08:05:11.187] | : Chunk #1 of 1 ... DONE
[08:05:11.188] | : Launching 1 futures (chunks) ... DONE
[08:05:11.188] | : Resolving 1 futures (chunks) ...
[08:05:11.251] | :  - Number of value chunks collected: 1
[08:05:11.251] | : Resolving 1 futures (chunks) ... DONE
[08:05:11.251] | : Reducing values from 1 chunks ...
[08:05:11.251] | :  - Number of values collected after concatenation: 1
[08:05:11.251] | :  - Number of values expected: 1
[08:05:11.251] | : Reducing values from 1 chunks ... DONE
[08:05:11.252] | future_lapply() -> future_xapply() ... done
[08:05:11.252] future_lapply() ... done
List of 1
 $ : num 42

> message("*** future_lapply() - tricky globals ... DONE")
*** future_lapply() - tricky globals ... DONE

> message("*** future_lapply() - missing arguments ...")
*** future_lapply() - missing arguments ...

> foo <- function(x, abc) future_lapply(x, FUN = function(y) y)

> y <- foo(1:2)
[08:05:11.253] future_lapply() ...
[08:05:11.253] | Globals in FUN(): [n=0] 
[08:05:11.253] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:11.254] | future_lapply() -> future_xapply() ...
[08:05:11.254] | : Number of chunks: 2
[08:05:11.254] | : getGlobalsAndPackagesXApply() ...
[08:05:11.254] | : . future.globals: TRUE
[08:05:11.258] | : . globals found/used: [n=1] ‘FUN’
[08:05:11.258] | : . needed namespaces: [n=0] 
[08:05:11.258] | : . use_args: TRUE
[08:05:11.258] | : . Getting '...' globals ...
[08:05:11.259] | : . ' '...' content: [n=0] 
[08:05:11.259] | : . ' List of 1
[08:05:11.259] | : . '  $ ...: list()
[08:05:11.259] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:11.259] | : . '  - attr(*, "where")=List of 1
[08:05:11.259] | : . '   ..$ ...:<environment: 0x5595b07498d8> 
[08:05:11.259] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:11.259] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:11.259] | : . '  - attr(*, "total_size")= num NA
[08:05:11.261] | : . Getting '...' globals ... done
[08:05:11.261] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:11.262] | : . List of 2
[08:05:11.262] | : .  $ ...future.FUN:function (y)  
[08:05:11.262] | : .  $ ...          : list()
[08:05:11.262] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:11.262] | : .  - attr(*, "where")=List of 2
[08:05:11.262] | : .   ..$ ...future.FUN:<environment: 0x5595b07498d8> 
[08:05:11.262] | : .   ..$ ...          :<environment: 0x5595b07498d8> 
[08:05:11.262] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:11.262] | : .  - attr(*, "resolved")= logi FALSE
[08:05:11.262] | : .  - attr(*, "total_size")= num 3716
[08:05:11.264] | : . Packages to be attached in all futures: [n=0] 
[08:05:11.264] | : getGlobalsAndPackagesXApply() ... done
[08:05:11.265] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:11.265] | : List of 5
[08:05:11.265] | :  $ ...future.FUN            :function (y)  
[08:05:11.265] | :  $ ...                      : list()
[08:05:11.265] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:11.265] | :  $ ...future.elements_ii    : NULL
[08:05:11.265] | :  $ ...future.seeds_ii       : NULL
[08:05:11.265] | :  $ ...future.globals.maxSize: NULL
[08:05:11.265] | :  - attr(*, "where")=List of 5
[08:05:11.265] | :   ..$ ...future.FUN            :<environment: 0x5595b07498d8> 
[08:05:11.265] | :   ..$ ...                      :<environment: 0x5595b07498d8> 
[08:05:11.265] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:11.265] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:11.265] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:11.265] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:11.265] | :  - attr(*, "resolved")= logi FALSE
[08:05:11.265] | :  - attr(*, "total_size")= num 3716
[08:05:11.269] | : Number of futures (= number of chunks): 2
[08:05:11.271] | : Launching 2 futures (chunks) ...
[08:05:11.271] | : Chunk #1 of 2 ...
[08:05:11.271] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:11.272] | :    + additional globals found: [n=0] 
[08:05:11.272] | :    + additional namespaces needed: [n=0] 
[08:05:11.272] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:11.272] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:11.273] | :  - seeds: <none>
[08:05:11.273] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:11.372] | : Created future:
[08:05:11.372] | : MultisessionFuture:
[08:05:11.372] | : Label: ‘future_lapply-1’
[08:05:11.372] | : Expression:
[08:05:11.372] | : {
[08:05:11.372] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:11.372] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:11.372] | :     "# as a global variable                                         "
[08:05:11.372] | :     do.call(function(...) {
[08:05:11.372] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:11.372] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:11.372] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:11.372] | :         "# anonymous function.                                          "
[08:05:11.372] | :         "#                                                              "
[08:05:11.372] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:11.372] | :         "# function environment of FUN() to the calling environment.    "
[08:05:11.372] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:11.372] | :         "# global environment, which is where globals are written.      "
[08:05:11.372] | :         penv <- env <- environment(...future.FUN)
[08:05:11.372] | :         repeat {
[08:05:11.372] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:11.372] | :                 emptyenv())) 
[08:05:11.372] | :                 break
[08:05:11.372] | :             penv <- env
[08:05:11.372] | :             env <- parent.env(env)
[08:05:11.372] | :         }
[08:05:11.372] | :         if (identical(penv, globalenv())) {
[08:05:11.372] | :             environment(...future.FUN) <- environment()
[08:05:11.372] | :         }
[08:05:11.372] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:11.372] | :             !isNamespace(penv)) {
[08:05:11.372] | :             parent.env(penv) <- environment()
[08:05:11.372] | :         }
[08:05:11.372] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:11.372] | :         {
[08:05:11.372] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:11.372] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:11.372] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:11.372] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:11.372] | :                 on.exit(options(oopts), add = TRUE)
[08:05:11.372] | :             }
[08:05:11.372] | :             {
[08:05:11.372] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:11.372] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:11.372] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:11.372] | :                   {
[08:05:11.372] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:11.372] | :                   }
[08:05:11.372] | :                 })
[08:05:11.372] | :             }
[08:05:11.372] | :         }
[08:05:11.372] | :     }, args = future.call.arguments)
[08:05:11.372] | : }
[08:05:11.372] | : Globals: 5 objects totaling 3.71 KiB (function ‘...future.FUN’ of 295 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:11.372] | : Packages: <none>
[08:05:11.372] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:11.372] | : Capture standard output: TRUE
[08:05:11.372] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:11.372] | : Immediate condition classes: ‘immediateCondition’
[08:05:11.372] | : Lazy evaluation: FALSE
[08:05:11.372] | : Local evaluation: TRUE
[08:05:11.372] | : Asynchronous evaluation: TRUE
[08:05:11.372] | : Early signaling: FALSE
[08:05:11.372] | : Environment: 0x5595b0749cc8
[08:05:11.372] | : State: ‘running’
[08:05:11.372] | : Resolved: FALSE
[08:05:11.372] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-41
[08:05:11.372] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:11.372] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:11.372] | : Value: <not collected>
[08:05:11.372] | : Conditions captured: <none>
[08:05:11.385] | : Chunk #1 of 2 ... DONE
[08:05:11.385] | : Chunk #2 of 2 ...
[08:05:11.385] | :  - Finding globals in 'X' for chunk #2 ...
[08:05:11.385] | :    + additional globals found: [n=0] 
[08:05:11.385] | :    + additional namespaces needed: [n=0] 
[08:05:11.386] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:05:11.386] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:11.386] | :  - seeds: <none>
[08:05:11.386] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:11.494] | : Created future:
[08:05:11.494] | : MultisessionFuture:
[08:05:11.494] | : Label: ‘future_lapply-2’
[08:05:11.494] | : Expression:
[08:05:11.494] | : {
[08:05:11.494] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:11.494] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:11.494] | :     "# as a global variable                                         "
[08:05:11.494] | :     do.call(function(...) {
[08:05:11.494] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:11.494] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:11.494] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:11.494] | :         "# anonymous function.                                          "
[08:05:11.494] | :         "#                                                              "
[08:05:11.494] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:11.494] | :         "# function environment of FUN() to the calling environment.    "
[08:05:11.494] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:11.494] | :         "# global environment, which is where globals are written.      "
[08:05:11.494] | :         penv <- env <- environment(...future.FUN)
[08:05:11.494] | :         repeat {
[08:05:11.494] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:11.494] | :                 emptyenv())) 
[08:05:11.494] | :                 break
[08:05:11.494] | :             penv <- env
[08:05:11.494] | :             env <- parent.env(env)
[08:05:11.494] | :         }
[08:05:11.494] | :         if (identical(penv, globalenv())) {
[08:05:11.494] | :             environment(...future.FUN) <- environment()
[08:05:11.494] | :         }
[08:05:11.494] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:11.494] | :             !isNamespace(penv)) {
[08:05:11.494] | :             parent.env(penv) <- environment()
[08:05:11.494] | :         }
[08:05:11.494] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:11.494] | :         {
[08:05:11.494] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:11.494] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:11.494] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:11.494] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:11.494] | :                 on.exit(options(oopts), add = TRUE)
[08:05:11.494] | :             }
[08:05:11.494] | :             {
[08:05:11.494] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:11.494] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:11.494] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:11.494] | :                   {
[08:05:11.494] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:11.494] | :                   }
[08:05:11.494] | :                 })
[08:05:11.494] | :             }
[08:05:11.494] | :         }
[08:05:11.494] | :     }, args = future.call.arguments)
[08:05:11.494] | : }
[08:05:11.494] | : Globals: 5 objects totaling 3.71 KiB (function ‘...future.FUN’ of 295 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:11.494] | : Packages: <none>
[08:05:11.494] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:11.494] | : Capture standard output: TRUE
[08:05:11.494] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:11.494] | : Immediate condition classes: ‘immediateCondition’
[08:05:11.494] | : Lazy evaluation: FALSE
[08:05:11.494] | : Local evaluation: TRUE
[08:05:11.494] | : Asynchronous evaluation: TRUE
[08:05:11.494] | : Early signaling: FALSE
[08:05:11.494] | : Environment: 0x5595b0749cc8
[08:05:11.494] | : State: ‘running’
[08:05:11.494] | : Resolved: FALSE
[08:05:11.494] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-42
[08:05:11.494] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:11.494] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:11.494] | : Value: <not collected>
[08:05:11.494] | : Conditions captured: <none>
[08:05:11.506] | : Chunk #2 of 2 ... DONE
[08:05:11.506] | : Launching 2 futures (chunks) ... DONE
[08:05:11.506] | : Resolving 2 futures (chunks) ...
[08:05:11.538] | :  - Number of value chunks collected: 2
[08:05:11.538] | : Resolving 2 futures (chunks) ... DONE
[08:05:11.538] | : Reducing values from 2 chunks ...
[08:05:11.539] | :  - Number of values collected after concatenation: 2
[08:05:11.539] | :  - Number of values expected: 2
[08:05:11.539] | : Reducing values from 2 chunks ... DONE
[08:05:11.539] | future_lapply() -> future_xapply() ... done
[08:05:11.539] future_lapply() ... done

> stopifnot(identical(y, as.list(1:2)))

> message("*** future_lapply() - missing arguments ... DONE")
*** future_lapply() - missing arguments ... DONE

> message("*** future_lapply() - false positives ...")
*** future_lapply() - false positives ...

> suppressWarnings(rm(list = "xyz"))

> foo <- function(x, abc) future_lapply(x, FUN = function(y) y)

> y <- foo(1:2, abc = (xyz >= 3.14))
[08:05:11.540] future_lapply() ...
[08:05:11.540] | Globals in FUN(): [n=0] 
[08:05:11.540] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:11.540] | future_lapply() -> future_xapply() ...
[08:05:11.541] | : Number of chunks: 2
[08:05:11.541] | : getGlobalsAndPackagesXApply() ...
[08:05:11.541] | : . future.globals: TRUE
[08:05:11.545] | : . globals found/used: [n=1] ‘FUN’
[08:05:11.545] | : . needed namespaces: [n=0] 
[08:05:11.545] | : . use_args: TRUE
[08:05:11.545] | : . Getting '...' globals ...
[08:05:11.546] | : . ' '...' content: [n=0] 
[08:05:11.546] | : . ' List of 1
[08:05:11.546] | : . '  $ ...: list()
[08:05:11.546] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:11.546] | : . '  - attr(*, "where")=List of 1
[08:05:11.546] | : . '   ..$ ...:<environment: 0x5595accdc598> 
[08:05:11.546] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:11.546] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:11.546] | : . '  - attr(*, "total_size")= num NA
[08:05:11.548] | : . Getting '...' globals ... done
[08:05:11.548] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:11.549] | : . List of 2
[08:05:11.549] | : .  $ ...future.FUN:function (y)  
[08:05:11.549] | : .  $ ...          : list()
[08:05:11.549] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:11.549] | : .  - attr(*, "where")=List of 2
[08:05:11.549] | : .   ..$ ...future.FUN:<environment: 0x5595accdc598> 
[08:05:11.549] | : .   ..$ ...          :<environment: 0x5595accdc598> 
[08:05:11.549] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:11.549] | : .  - attr(*, "resolved")= logi FALSE
[08:05:11.549] | : .  - attr(*, "total_size")= num 3904
[08:05:11.551] | : . Packages to be attached in all futures: [n=0] 
[08:05:11.551] | : getGlobalsAndPackagesXApply() ... done
[08:05:11.552] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:11.552] | : List of 5
[08:05:11.552] | :  $ ...future.FUN            :function (y)  
[08:05:11.552] | :  $ ...                      : list()
[08:05:11.552] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:11.552] | :  $ ...future.elements_ii    : NULL
[08:05:11.552] | :  $ ...future.seeds_ii       : NULL
[08:05:11.552] | :  $ ...future.globals.maxSize: NULL
[08:05:11.552] | :  - attr(*, "where")=List of 5
[08:05:11.552] | :   ..$ ...future.FUN            :<environment: 0x5595accdc598> 
[08:05:11.552] | :   ..$ ...                      :<environment: 0x5595accdc598> 
[08:05:11.552] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:11.552] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:11.552] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:11.552] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:11.552] | :  - attr(*, "resolved")= logi FALSE
[08:05:11.552] | :  - attr(*, "total_size")= num 3904
[08:05:11.556] | : Number of futures (= number of chunks): 2
[08:05:11.556] | : Launching 2 futures (chunks) ...
[08:05:11.556] | : Chunk #1 of 2 ...
[08:05:11.556] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:11.557] | :    + additional globals found: [n=0] 
[08:05:11.557] | :    + additional namespaces needed: [n=0] 
[08:05:11.557] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:11.557] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:11.557] | :  - seeds: <none>
[08:05:11.557] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:11.671] | : Created future:
[08:05:11.671] | : MultisessionFuture:
[08:05:11.671] | : Label: ‘future_lapply-1’
[08:05:11.671] | : Expression:
[08:05:11.671] | : {
[08:05:11.671] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:11.671] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:11.671] | :     "# as a global variable                                         "
[08:05:11.671] | :     do.call(function(...) {
[08:05:11.671] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:11.671] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:11.671] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:11.671] | :         "# anonymous function.                                          "
[08:05:11.671] | :         "#                                                              "
[08:05:11.671] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:11.671] | :         "# function environment of FUN() to the calling environment.    "
[08:05:11.671] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:11.671] | :         "# global environment, which is where globals are written.      "
[08:05:11.671] | :         penv <- env <- environment(...future.FUN)
[08:05:11.671] | :         repeat {
[08:05:11.671] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:11.671] | :                 emptyenv())) 
[08:05:11.671] | :                 break
[08:05:11.671] | :             penv <- env
[08:05:11.671] | :             env <- parent.env(env)
[08:05:11.671] | :         }
[08:05:11.671] | :         if (identical(penv, globalenv())) {
[08:05:11.671] | :             environment(...future.FUN) <- environment()
[08:05:11.671] | :         }
[08:05:11.671] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:11.671] | :             !isNamespace(penv)) {
[08:05:11.671] | :             parent.env(penv) <- environment()
[08:05:11.671] | :         }
[08:05:11.671] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:11.671] | :         {
[08:05:11.671] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:11.671] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:11.671] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:11.671] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:11.671] | :                 on.exit(options(oopts), add = TRUE)
[08:05:11.671] | :             }
[08:05:11.671] | :             {
[08:05:11.671] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:11.671] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:11.671] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:11.671] | :                   {
[08:05:11.671] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:11.671] | :                   }
[08:05:11.671] | :                 })
[08:05:11.671] | :             }
[08:05:11.671] | :         }
[08:05:11.671] | :     }, args = future.call.arguments)
[08:05:11.671] | : }
[08:05:11.671] | : Globals: 5 objects totaling 3.80 KiB (function ‘...future.FUN’ of 389 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:11.671] | : Packages: <none>
[08:05:11.671] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:11.671] | : Capture standard output: TRUE
[08:05:11.671] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:11.671] | : Immediate condition classes: ‘immediateCondition’
[08:05:11.671] | : Lazy evaluation: FALSE
[08:05:11.671] | : Local evaluation: TRUE
[08:05:11.671] | : Asynchronous evaluation: TRUE
[08:05:11.671] | : Early signaling: FALSE
[08:05:11.671] | : Environment: 0x5595accdc138
[08:05:11.671] | : State: ‘running’
[08:05:11.671] | : Resolved: FALSE
[08:05:11.671] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-43
[08:05:11.671] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:11.671] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:11.671] | : Value: <not collected>
[08:05:11.671] | : Conditions captured: <none>
[08:05:11.683] | : Chunk #1 of 2 ... DONE
[08:05:11.684] | : Chunk #2 of 2 ...
[08:05:11.684] | :  - Finding globals in 'X' for chunk #2 ...
[08:05:11.684] | :    + additional globals found: [n=0] 
[08:05:11.684] | :    + additional namespaces needed: [n=0] 
[08:05:11.684] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:05:11.685] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:11.685] | :  - seeds: <none>
[08:05:11.685] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:11.790] | : Created future:
[08:05:11.790] | : MultisessionFuture:
[08:05:11.790] | : Label: ‘future_lapply-2’
[08:05:11.790] | : Expression:
[08:05:11.790] | : {
[08:05:11.790] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:11.790] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:11.790] | :     "# as a global variable                                         "
[08:05:11.790] | :     do.call(function(...) {
[08:05:11.790] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:11.790] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:11.790] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:11.790] | :         "# anonymous function.                                          "
[08:05:11.790] | :         "#                                                              "
[08:05:11.790] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:11.790] | :         "# function environment of FUN() to the calling environment.    "
[08:05:11.790] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:11.790] | :         "# global environment, which is where globals are written.      "
[08:05:11.790] | :         penv <- env <- environment(...future.FUN)
[08:05:11.790] | :         repeat {
[08:05:11.790] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:11.790] | :                 emptyenv())) 
[08:05:11.790] | :                 break
[08:05:11.790] | :             penv <- env
[08:05:11.790] | :             env <- parent.env(env)
[08:05:11.790] | :         }
[08:05:11.790] | :         if (identical(penv, globalenv())) {
[08:05:11.790] | :             environment(...future.FUN) <- environment()
[08:05:11.790] | :         }
[08:05:11.790] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:11.790] | :             !isNamespace(penv)) {
[08:05:11.790] | :             parent.env(penv) <- environment()
[08:05:11.790] | :         }
[08:05:11.790] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:11.790] | :         {
[08:05:11.790] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:11.790] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:11.790] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:11.790] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:11.790] | :                 on.exit(options(oopts), add = TRUE)
[08:05:11.790] | :             }
[08:05:11.790] | :             {
[08:05:11.790] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:11.790] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:11.790] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:11.790] | :                   {
[08:05:11.790] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:11.790] | :                   }
[08:05:11.790] | :                 })
[08:05:11.790] | :             }
[08:05:11.790] | :         }
[08:05:11.790] | :     }, args = future.call.arguments)
[08:05:11.790] | : }
[08:05:11.790] | : Globals: 5 objects totaling 3.80 KiB (function ‘...future.FUN’ of 389 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:11.790] | : Packages: <none>
[08:05:11.790] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:11.790] | : Capture standard output: TRUE
[08:05:11.790] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:11.790] | : Immediate condition classes: ‘immediateCondition’
[08:05:11.790] | : Lazy evaluation: FALSE
[08:05:11.790] | : Local evaluation: TRUE
[08:05:11.790] | : Asynchronous evaluation: TRUE
[08:05:11.790] | : Early signaling: FALSE
[08:05:11.790] | : Environment: 0x5595accdc138
[08:05:11.790] | : State: ‘running’
[08:05:11.790] | : Resolved: FALSE
[08:05:11.790] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-44
[08:05:11.790] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:11.790] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:11.790] | : Value: <not collected>
[08:05:11.790] | : Conditions captured: <none>
[08:05:11.802] | : Chunk #2 of 2 ... DONE
[08:05:11.802] | : Launching 2 futures (chunks) ... DONE
[08:05:11.802] | : Resolving 2 futures (chunks) ...
[08:05:11.867] | :  - Number of value chunks collected: 2
[08:05:11.867] | : Resolving 2 futures (chunks) ... DONE
[08:05:11.867] | : Reducing values from 2 chunks ...
[08:05:11.867] | :  - Number of values collected after concatenation: 2
[08:05:11.867] | :  - Number of values expected: 2
[08:05:11.867] | : Reducing values from 2 chunks ... DONE
[08:05:11.867] | future_lapply() -> future_xapply() ... done
[08:05:11.868] future_lapply() ... done

> stopifnot(identical(y, as.list(1:2)))

> message("*** future_lapply() - false positives ... DONE")
*** future_lapply() - false positives ... DONE

> message("*** future_lapply() - too large ...")
*** future_lapply() - too large ...

> oMaxSize <- getOption("future.globals.maxSize")

> X <- replicate(10, 1:100, simplify = FALSE)

> FUN <- function(x) {
+     getOption("future.globals.maxSize")
+ }

> y0 <- lapply(X, FUN = FUN)

> stopifnot(all(sapply(y0, FUN = identical, oMaxSize)))

> sizes <- unclass(c(FUN = object.size(FUN), X = object.size(X)))

> cat(sprintf("Baseline size of globals: %.2f KiB\n", 
+     sizes[["FUN"]]/1024))
Baseline size of globals: 1.80 KiB

> message("- true positive ...")
- true positive ...

> options(future.globals.maxSize = 1)

> res <- tryCatch({
+     y <- future_lapply(X, FUN = FUN)
+ }, error = identity)
[08:05:11.871] future_lapply() ...
[08:05:11.871] | Globals in FUN(): [n=2] ‘{’, ‘getOption’
[08:05:11.871] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:11.872] | future_lapply() -> future_xapply() ...
[08:05:11.872] | : Number of chunks: 2
[08:05:11.872] | : getGlobalsAndPackagesXApply() ...
[08:05:11.872] | : . future.globals: TRUE
[08:05:11.878] | : getGlobalsAndPackagesXApply() ... done
[08:05:11.878] | future_lapply() -> future_xapply() ... done
[08:05:11.878] future_lapply() ... done

> stopifnot(inherits(res, "error"))

> res <- NULL

> options(future.globals.maxSize = oMaxSize)

> maxSize <- getOption("future.globals.maxSize")

> y <- future_lapply(X, FUN = FUN)
[08:05:11.878] future_lapply() ...
[08:05:11.879] | Globals in FUN(): [n=2] ‘{’, ‘getOption’
[08:05:11.879] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:11.879] | future_lapply() -> future_xapply() ...
[08:05:11.879] | : Number of chunks: 2
[08:05:11.879] | : getGlobalsAndPackagesXApply() ...
[08:05:11.879] | : . future.globals: TRUE
[08:05:11.884] | : . globals found/used: [n=1] ‘FUN’
[08:05:11.885] | : . needed namespaces: [n=0] 
[08:05:11.885] | : . use_args: TRUE
[08:05:11.885] | : . Getting '...' globals ...
[08:05:11.885] | : . ' '...' content: [n=0] 
[08:05:11.885] | : . ' List of 1
[08:05:11.885] | : . '  $ ...: list()
[08:05:11.885] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:11.885] | : . '  - attr(*, "where")=List of 1
[08:05:11.885] | : . '   ..$ ...:<environment: 0x5595b034fed8> 
[08:05:11.885] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:11.885] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:11.885] | : . '  - attr(*, "total_size")= num NA
[08:05:11.890] | : . Getting '...' globals ... done
[08:05:11.890] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:11.890] | : . List of 2
[08:05:11.890] | : .  $ ...future.FUN:function (x)  
[08:05:11.890] | : .  $ ...          : list()
[08:05:11.890] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:11.890] | : .  - attr(*, "where")=List of 2
[08:05:11.890] | : .   ..$ ...future.FUN:<environment: 0x5595b034fed8> 
[08:05:11.890] | : .   ..$ ...          :<environment: 0x5595b034fed8> 
[08:05:11.890] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:11.890] | : .  - attr(*, "resolved")= logi FALSE
[08:05:11.890] | : .  - attr(*, "total_size")= num 4670
[08:05:11.893] | : . Packages to be attached in all futures: [n=0] 
[08:05:11.893] | : getGlobalsAndPackagesXApply() ... done
[08:05:11.894] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:11.894] | : List of 5
[08:05:11.894] | :  $ ...future.FUN            :function (x)  
[08:05:11.894] | :  $ ...                      : list()
[08:05:11.894] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:11.894] | :  $ ...future.elements_ii    : NULL
[08:05:11.894] | :  $ ...future.seeds_ii       : NULL
[08:05:11.894] | :  $ ...future.globals.maxSize: NULL
[08:05:11.894] | :  - attr(*, "where")=List of 5
[08:05:11.894] | :   ..$ ...future.FUN            :<environment: 0x5595b034fed8> 
[08:05:11.894] | :   ..$ ...                      :<environment: 0x5595b034fed8> 
[08:05:11.894] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:11.894] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:11.894] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:11.894] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:11.894] | :  - attr(*, "resolved")= logi FALSE
[08:05:11.894] | :  - attr(*, "total_size")= num 4670
[08:05:11.898] | : Number of futures (= number of chunks): 2
[08:05:11.898] | : Launching 2 futures (chunks) ...
[08:05:11.898] | : Chunk #1 of 2 ...
[08:05:11.898] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:11.898] | :    + additional globals found: [n=0] 
[08:05:11.898] | :    + additional namespaces needed: [n=0] 
[08:05:11.899] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:11.899] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:11.899] | :  - seeds: <none>
[08:05:11.899] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:12.003] | : Created future:
[08:05:12.003] | : MultisessionFuture:
[08:05:12.003] | : Label: ‘future_lapply-1’
[08:05:12.003] | : Expression:
[08:05:12.003] | : {
[08:05:12.003] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:12.003] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:12.003] | :     "# as a global variable                                         "
[08:05:12.003] | :     do.call(function(...) {
[08:05:12.003] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:12.003] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:12.003] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:12.003] | :         "# anonymous function.                                          "
[08:05:12.003] | :         "#                                                              "
[08:05:12.003] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:12.003] | :         "# function environment of FUN() to the calling environment.    "
[08:05:12.003] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:12.003] | :         "# global environment, which is where globals are written.      "
[08:05:12.003] | :         penv <- env <- environment(...future.FUN)
[08:05:12.003] | :         repeat {
[08:05:12.003] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:12.003] | :                 emptyenv())) 
[08:05:12.003] | :                 break
[08:05:12.003] | :             penv <- env
[08:05:12.003] | :             env <- parent.env(env)
[08:05:12.003] | :         }
[08:05:12.003] | :         if (identical(penv, globalenv())) {
[08:05:12.003] | :             environment(...future.FUN) <- environment()
[08:05:12.003] | :         }
[08:05:12.003] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:12.003] | :             !isNamespace(penv)) {
[08:05:12.003] | :             parent.env(penv) <- environment()
[08:05:12.003] | :         }
[08:05:12.003] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:12.003] | :         {
[08:05:12.003] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:12.003] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:12.003] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:12.003] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:12.003] | :                 on.exit(options(oopts), add = TRUE)
[08:05:12.003] | :             }
[08:05:12.003] | :             {
[08:05:12.003] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:12.003] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:12.003] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:12.003] | :                   {
[08:05:12.003] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:12.003] | :                   }
[08:05:12.003] | :                 })
[08:05:12.003] | :             }
[08:05:12.003] | :         }
[08:05:12.003] | :     }, args = future.call.arguments)
[08:05:12.003] | : }
[08:05:12.003] | : Globals: 5 objects totaling 5.19 KiB (list ‘...future.elements_ii’ of 445 bytes, function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:12.003] | : Packages: <none>
[08:05:12.003] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:12.003] | : Capture standard output: TRUE
[08:05:12.003] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:12.003] | : Immediate condition classes: ‘immediateCondition’
[08:05:12.003] | : Lazy evaluation: FALSE
[08:05:12.003] | : Local evaluation: TRUE
[08:05:12.003] | : Asynchronous evaluation: TRUE
[08:05:12.003] | : Early signaling: FALSE
[08:05:12.003] | : Environment: R_GlobalEnv
[08:05:12.003] | : State: ‘running’
[08:05:12.003] | : Resolved: FALSE
[08:05:12.003] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-45
[08:05:12.003] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:12.003] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:12.003] | : Value: <not collected>
[08:05:12.003] | : Conditions captured: <none>
[08:05:12.015] | : Chunk #1 of 2 ... DONE
[08:05:12.015] | : Chunk #2 of 2 ...
[08:05:12.015] | :  - Finding globals in 'X' for chunk #2 ...
[08:05:12.016] | :    + additional globals found: [n=0] 
[08:05:12.016] | :    + additional namespaces needed: [n=0] 
[08:05:12.016] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:05:12.016] | :  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[08:05:12.016] | :  - seeds: <none>
[08:05:12.016] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:12.124] | : Created future:
[08:05:12.124] | : MultisessionFuture:
[08:05:12.124] | : Label: ‘future_lapply-2’
[08:05:12.124] | : Expression:
[08:05:12.124] | : {
[08:05:12.124] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:12.124] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:12.124] | :     "# as a global variable                                         "
[08:05:12.124] | :     do.call(function(...) {
[08:05:12.124] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:12.124] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:12.124] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:12.124] | :         "# anonymous function.                                          "
[08:05:12.124] | :         "#                                                              "
[08:05:12.124] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:12.124] | :         "# function environment of FUN() to the calling environment.    "
[08:05:12.124] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:12.124] | :         "# global environment, which is where globals are written.      "
[08:05:12.124] | :         penv <- env <- environment(...future.FUN)
[08:05:12.124] | :         repeat {
[08:05:12.124] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:12.124] | :                 emptyenv())) 
[08:05:12.124] | :                 break
[08:05:12.124] | :             penv <- env
[08:05:12.124] | :             env <- parent.env(env)
[08:05:12.124] | :         }
[08:05:12.124] | :         if (identical(penv, globalenv())) {
[08:05:12.124] | :             environment(...future.FUN) <- environment()
[08:05:12.124] | :         }
[08:05:12.124] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:12.124] | :             !isNamespace(penv)) {
[08:05:12.124] | :             parent.env(penv) <- environment()
[08:05:12.124] | :         }
[08:05:12.124] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:12.124] | :         {
[08:05:12.124] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:12.124] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:12.124] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:12.124] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:12.124] | :                 on.exit(options(oopts), add = TRUE)
[08:05:12.124] | :             }
[08:05:12.124] | :             {
[08:05:12.124] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:12.124] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:12.124] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:12.124] | :                   {
[08:05:12.124] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:12.124] | :                   }
[08:05:12.124] | :                 })
[08:05:12.124] | :             }
[08:05:12.124] | :         }
[08:05:12.124] | :     }, args = future.call.arguments)
[08:05:12.124] | : }
[08:05:12.124] | : Globals: 5 objects totaling 5.19 KiB (list ‘...future.elements_ii’ of 445 bytes, function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[08:05:12.124] | : Packages: <none>
[08:05:12.124] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:12.124] | : Capture standard output: TRUE
[08:05:12.124] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:12.124] | : Immediate condition classes: ‘immediateCondition’
[08:05:12.124] | : Lazy evaluation: FALSE
[08:05:12.124] | : Local evaluation: TRUE
[08:05:12.124] | : Asynchronous evaluation: TRUE
[08:05:12.124] | : Early signaling: FALSE
[08:05:12.124] | : Environment: R_GlobalEnv
[08:05:12.124] | : State: ‘running’
[08:05:12.124] | : Resolved: FALSE
[08:05:12.124] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-46
[08:05:12.124] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:12.124] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:12.124] | : Value: <not collected>
[08:05:12.124] | : Conditions captured: <none>
[08:05:12.136] | : Chunk #2 of 2 ... DONE
[08:05:12.136] | : Launching 2 futures (chunks) ... DONE
[08:05:12.136] | : Resolving 2 futures (chunks) ...
[08:05:12.168] | :  - Number of value chunks collected: 2
[08:05:12.169] | : Resolving 2 futures (chunks) ... DONE
[08:05:12.169] | : Reducing values from 2 chunks ...
[08:05:12.169] | :  - Number of values collected after concatenation: 10
[08:05:12.169] | :  - Number of values expected: 10
[08:05:12.169] | : Reducing values from 2 chunks ... DONE
[08:05:12.169] | future_lapply() -> future_xapply() ... done
[08:05:12.169] future_lapply() ... done

> str(y)
List of 10
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL
 $ : NULL

> stopifnot(all(sapply(y, FUN = identical, oMaxSize)))

> message("- approximately invariant to chunk size ...")
- approximately invariant to chunk size ...

> maxSize <- sizes[["FUN"]] + sizes[["X"]]/length(X)

> options(future.globals.maxSize = maxSize)

> for (chunk.size in c(1, 2, 5, 10)) {
+     y <- future_lapply(X, FUN = FUN, future.chunk.size = chunk.size)
+     str(y)
+     stopifnot(all(unlist( .... [TRUNCATED] 
[08:05:12.179] future_lapply() ...
[08:05:12.180] | Globals in FUN(): [n=2] ‘{’, ‘getOption’
[08:05:12.180] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:12.180] | future_lapply() -> future_xapply() ...
[08:05:12.181] | : Number of chunks: 10
[08:05:12.181] | : getGlobalsAndPackagesXApply() ...
[08:05:12.181] | : . future.globals: TRUE
[08:05:12.186] | : . globals found/used: [n=1] ‘FUN’
[08:05:12.186] | : . needed namespaces: [n=0] 
[08:05:12.186] | : . use_args: TRUE
[08:05:12.186] | : . Getting '...' globals ...
[08:05:12.187] | : . ' '...' content: [n=0] 
[08:05:12.187] | : . ' List of 1
[08:05:12.187] | : . '  $ ...: list()
[08:05:12.187] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:12.187] | : . '  - attr(*, "where")=List of 1
[08:05:12.187] | : . '   ..$ ...:<environment: 0x5595b02461d8> 
[08:05:12.187] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:12.187] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:12.187] | : . '  - attr(*, "total_size")= num NA
[08:05:12.189] | : . Getting '...' globals ... done
[08:05:12.189] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:12.190] | : . List of 2
[08:05:12.190] | : .  $ ...future.FUN:function (x)  
[08:05:12.190] | : .  $ ...          : list()
[08:05:12.190] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:12.190] | : .  - attr(*, "where")=List of 2
[08:05:12.190] | : .   ..$ ...future.FUN:<environment: 0x5595b02461d8> 
[08:05:12.190] | : .   ..$ ...          :<environment: 0x5595b02461d8> 
[08:05:12.190] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:12.190] | : .  - attr(*, "resolved")= logi FALSE
[08:05:12.190] | : .  - attr(*, "total_size")= num 5085
[08:05:12.192] | : . Packages to be attached in all futures: [n=0] 
[08:05:12.192] | : getGlobalsAndPackagesXApply() ... done
[08:05:12.193] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:12.193] | : List of 5
[08:05:12.193] | :  $ ...future.FUN            :function (x)  
[08:05:12.193] | :  $ ...                      : list()
[08:05:12.193] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:12.193] | :  $ ...future.elements_ii    : NULL
[08:05:12.193] | :  $ ...future.seeds_ii       : NULL
[08:05:12.193] | :  $ ...future.globals.maxSize: NULL
[08:05:12.193] | :  - attr(*, "where")=List of 5
[08:05:12.193] | :   ..$ ...future.FUN            :<environment: 0x5595b02461d8> 
[08:05:12.193] | :   ..$ ...                      :<environment: 0x5595b02461d8> 
[08:05:12.193] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:12.193] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:12.193] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:12.193] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:12.193] | :  - attr(*, "resolved")= logi FALSE
[08:05:12.193] | :  - attr(*, "total_size")= num 5085
[08:05:12.197] | : Number of futures (= number of chunks): 10
[08:05:12.197] | : Launching 10 futures (chunks) ...
[08:05:12.197] | : Chunk #1 of 10 ...
[08:05:12.197] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:12.197] | :    + additional globals found: [n=0] 
[08:05:12.198] | :    + additional namespaces needed: [n=0] 
[08:05:12.198] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:12.198] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[08:05:12.198] | :  - seeds: <none>
[08:05:12.198] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:12.305] | : Created future:
[08:05:12.305] | : MultisessionFuture:
[08:05:12.305] | : Label: ‘future_lapply-1’
[08:05:12.305] | : Expression:
[08:05:12.305] | : {
[08:05:12.305] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:12.305] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:12.305] | :     "# as a global variable                                         "
[08:05:12.305] | :     do.call(function(...) {
[08:05:12.305] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:12.305] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:12.305] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:12.305] | :         "# anonymous function.                                          "
[08:05:12.305] | :         "#                                                              "
[08:05:12.305] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:12.305] | :         "# function environment of FUN() to the calling environment.    "
[08:05:12.305] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:12.305] | :         "# global environment, which is where globals are written.      "
[08:05:12.305] | :         penv <- env <- environment(...future.FUN)
[08:05:12.305] | :         repeat {
[08:05:12.305] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:12.305] | :                 emptyenv())) 
[08:05:12.305] | :                 break
[08:05:12.305] | :             penv <- env
[08:05:12.305] | :             env <- parent.env(env)
[08:05:12.305] | :         }
[08:05:12.305] | :         if (identical(penv, globalenv())) {
[08:05:12.305] | :             environment(...future.FUN) <- environment()
[08:05:12.305] | :         }
[08:05:12.305] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:12.305] | :             !isNamespace(penv)) {
[08:05:12.305] | :             parent.env(penv) <- environment()
[08:05:12.305] | :         }
[08:05:12.305] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:12.305] | :         {
[08:05:12.305] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:12.305] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:12.305] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:12.305] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:12.305] | :                 on.exit(options(oopts), add = TRUE)
[08:05:12.305] | :             }
[08:05:12.305] | :             {
[08:05:12.305] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:12.305] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:12.305] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:12.305] | :                   {
[08:05:12.305] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:12.305] | :                   }
[08:05:12.305] | :                 })
[08:05:12.305] | :             }
[08:05:12.305] | :         }
[08:05:12.305] | :     }, args = future.call.arguments)
[08:05:12.305] | : }
[08:05:12.305] | : Globals: 5 objects totaling 5.31 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 141 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:12.305] | : Packages: <none>
[08:05:12.305] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:12.305] | : Capture standard output: TRUE
[08:05:12.305] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:12.305] | : Immediate condition classes: ‘immediateCondition’
[08:05:12.305] | : Lazy evaluation: FALSE
[08:05:12.305] | : Local evaluation: TRUE
[08:05:12.305] | : Asynchronous evaluation: TRUE
[08:05:12.305] | : Early signaling: FALSE
[08:05:12.305] | : Environment: R_GlobalEnv
[08:05:12.305] | : State: ‘running’
[08:05:12.305] | : Resolved: FALSE
[08:05:12.305] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-47
[08:05:12.305] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:12.305] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:12.305] | : Value: <not collected>
[08:05:12.305] | : Conditions captured: <none>
[08:05:12.317] | : Chunk #1 of 10 ... DONE
[08:05:12.317] | : Chunk #2 of 10 ...
[08:05:12.318] | :  - Finding globals in 'X' for chunk #2 ...
[08:05:12.318] | :    + additional globals found: [n=0] 
[08:05:12.318] | :    + additional namespaces needed: [n=0] 
[08:05:12.318] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:05:12.318] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[08:05:12.319] | :  - seeds: <none>
[08:05:12.319] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:12.420] | : Created future:
[08:05:12.420] | : MultisessionFuture:
[08:05:12.420] | : Label: ‘future_lapply-2’
[08:05:12.420] | : Expression:
[08:05:12.420] | : {
[08:05:12.420] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:12.420] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:12.420] | :     "# as a global variable                                         "
[08:05:12.420] | :     do.call(function(...) {
[08:05:12.420] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:12.420] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:12.420] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:12.420] | :         "# anonymous function.                                          "
[08:05:12.420] | :         "#                                                              "
[08:05:12.420] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:12.420] | :         "# function environment of FUN() to the calling environment.    "
[08:05:12.420] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:12.420] | :         "# global environment, which is where globals are written.      "
[08:05:12.420] | :         penv <- env <- environment(...future.FUN)
[08:05:12.420] | :         repeat {
[08:05:12.420] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:12.420] | :                 emptyenv())) 
[08:05:12.420] | :                 break
[08:05:12.420] | :             penv <- env
[08:05:12.420] | :             env <- parent.env(env)
[08:05:12.420] | :         }
[08:05:12.420] | :         if (identical(penv, globalenv())) {
[08:05:12.420] | :             environment(...future.FUN) <- environment()
[08:05:12.420] | :         }
[08:05:12.420] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:12.420] | :             !isNamespace(penv)) {
[08:05:12.420] | :             parent.env(penv) <- environment()
[08:05:12.420] | :         }
[08:05:12.420] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:12.420] | :         {
[08:05:12.420] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:12.420] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:12.420] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:12.420] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:12.420] | :                 on.exit(options(oopts), add = TRUE)
[08:05:12.420] | :             }
[08:05:12.420] | :             {
[08:05:12.420] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:12.420] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:12.420] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:12.420] | :                   {
[08:05:12.420] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:12.420] | :                   }
[08:05:12.420] | :                 })
[08:05:12.420] | :             }
[08:05:12.420] | :         }
[08:05:12.420] | :     }, args = future.call.arguments)
[08:05:12.420] | : }
[08:05:12.420] | : Globals: 5 objects totaling 5.31 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 141 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:12.420] | : Packages: <none>
[08:05:12.420] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:12.420] | : Capture standard output: TRUE
[08:05:12.420] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:12.420] | : Immediate condition classes: ‘immediateCondition’
[08:05:12.420] | : Lazy evaluation: FALSE
[08:05:12.420] | : Local evaluation: TRUE
[08:05:12.420] | : Asynchronous evaluation: TRUE
[08:05:12.420] | : Early signaling: FALSE
[08:05:12.420] | : Environment: R_GlobalEnv
[08:05:12.420] | : State: ‘running’
[08:05:12.420] | : Resolved: FALSE
[08:05:12.420] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-48
[08:05:12.420] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:12.420] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:12.420] | : Value: <not collected>
[08:05:12.420] | : Conditions captured: <none>
[08:05:12.432] | : Chunk #2 of 10 ... DONE
[08:05:12.433] | : Chunk #3 of 10 ...
[08:05:12.433] | :  - Finding globals in 'X' for chunk #3 ...
[08:05:12.433] | :    + additional globals found: [n=0] 
[08:05:12.433] | :    + additional namespaces needed: [n=0] 
[08:05:12.433] | :  - Finding globals in 'X' for chunk #3 ... DONE
[08:05:12.434] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[08:05:12.434] | :  - seeds: <none>
[08:05:12.434] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:12.554] | : Created future:
[08:05:12.555] | : MultisessionFuture:
[08:05:12.555] | : Label: ‘future_lapply-3’
[08:05:12.555] | : Expression:
[08:05:12.555] | : {
[08:05:12.555] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:12.555] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:12.555] | :     "# as a global variable                                         "
[08:05:12.555] | :     do.call(function(...) {
[08:05:12.555] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:12.555] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:12.555] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:12.555] | :         "# anonymous function.                                          "
[08:05:12.555] | :         "#                                                              "
[08:05:12.555] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:12.555] | :         "# function environment of FUN() to the calling environment.    "
[08:05:12.555] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:12.555] | :         "# global environment, which is where globals are written.      "
[08:05:12.555] | :         penv <- env <- environment(...future.FUN)
[08:05:12.555] | :         repeat {
[08:05:12.555] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:12.555] | :                 emptyenv())) 
[08:05:12.555] | :                 break
[08:05:12.555] | :             penv <- env
[08:05:12.555] | :             env <- parent.env(env)
[08:05:12.555] | :         }
[08:05:12.555] | :         if (identical(penv, globalenv())) {
[08:05:12.555] | :             environment(...future.FUN) <- environment()
[08:05:12.555] | :         }
[08:05:12.555] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:12.555] | :             !isNamespace(penv)) {
[08:05:12.555] | :             parent.env(penv) <- environment()
[08:05:12.555] | :         }
[08:05:12.555] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:12.555] | :         {
[08:05:12.555] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:12.555] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:12.555] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:12.555] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:12.555] | :                 on.exit(options(oopts), add = TRUE)
[08:05:12.555] | :             }
[08:05:12.555] | :             {
[08:05:12.555] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:12.555] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:12.555] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:12.555] | :                   {
[08:05:12.555] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:12.555] | :                   }
[08:05:12.555] | :                 })
[08:05:12.555] | :             }
[08:05:12.555] | :         }
[08:05:12.555] | :     }, args = future.call.arguments)
[08:05:12.555] | : }
[08:05:12.555] | : Globals: 5 objects totaling 5.31 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 141 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:12.555] | : Packages: <none>
[08:05:12.555] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:12.555] | : Capture standard output: TRUE
[08:05:12.555] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:12.555] | : Immediate condition classes: ‘immediateCondition’
[08:05:12.555] | : Lazy evaluation: FALSE
[08:05:12.555] | : Local evaluation: TRUE
[08:05:12.555] | : Asynchronous evaluation: TRUE
[08:05:12.555] | : Early signaling: FALSE
[08:05:12.555] | : Environment: R_GlobalEnv
[08:05:12.555] | : State: ‘running’
[08:05:12.555] | : Resolved: FALSE
[08:05:12.555] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-49
[08:05:12.555] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:12.555] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:12.555] | : Value: <not collected>
[08:05:12.555] | : Conditions captured: <none>
[08:05:12.567] | : Chunk #3 of 10 ... DONE
[08:05:12.567] | : Chunk #4 of 10 ...
[08:05:12.567] | :  - Finding globals in 'X' for chunk #4 ...
[08:05:12.567] | :    + additional globals found: [n=0] 
[08:05:12.567] | :    + additional namespaces needed: [n=0] 
[08:05:12.568] | :  - Finding globals in 'X' for chunk #4 ... DONE
[08:05:12.568] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[08:05:12.568] | :  - seeds: <none>
[08:05:12.568] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:12.713] | : Created future:
[08:05:12.713] | : MultisessionFuture:
[08:05:12.713] | : Label: ‘future_lapply-4’
[08:05:12.713] | : Expression:
[08:05:12.713] | : {
[08:05:12.713] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:12.713] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:12.713] | :     "# as a global variable                                         "
[08:05:12.713] | :     do.call(function(...) {
[08:05:12.713] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:12.713] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:12.713] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:12.713] | :         "# anonymous function.                                          "
[08:05:12.713] | :         "#                                                              "
[08:05:12.713] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:12.713] | :         "# function environment of FUN() to the calling environment.    "
[08:05:12.713] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:12.713] | :         "# global environment, which is where globals are written.      "
[08:05:12.713] | :         penv <- env <- environment(...future.FUN)
[08:05:12.713] | :         repeat {
[08:05:12.713] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:12.713] | :                 emptyenv())) 
[08:05:12.713] | :                 break
[08:05:12.713] | :             penv <- env
[08:05:12.713] | :             env <- parent.env(env)
[08:05:12.713] | :         }
[08:05:12.713] | :         if (identical(penv, globalenv())) {
[08:05:12.713] | :             environment(...future.FUN) <- environment()
[08:05:12.713] | :         }
[08:05:12.713] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:12.713] | :             !isNamespace(penv)) {
[08:05:12.713] | :             parent.env(penv) <- environment()
[08:05:12.713] | :         }
[08:05:12.713] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:12.713] | :         {
[08:05:12.713] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:12.713] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:12.713] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:12.713] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:12.713] | :                 on.exit(options(oopts), add = TRUE)
[08:05:12.713] | :             }
[08:05:12.713] | :             {
[08:05:12.713] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:12.713] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:12.713] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:12.713] | :                   {
[08:05:12.713] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:12.713] | :                   }
[08:05:12.713] | :                 })
[08:05:12.713] | :             }
[08:05:12.713] | :         }
[08:05:12.713] | :     }, args = future.call.arguments)
[08:05:12.713] | : }
[08:05:12.713] | : Globals: 5 objects totaling 5.31 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 141 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:12.713] | : Packages: <none>
[08:05:12.713] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:12.713] | : Capture standard output: TRUE
[08:05:12.713] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:12.713] | : Immediate condition classes: ‘immediateCondition’
[08:05:12.713] | : Lazy evaluation: FALSE
[08:05:12.713] | : Local evaluation: TRUE
[08:05:12.713] | : Asynchronous evaluation: TRUE
[08:05:12.713] | : Early signaling: FALSE
[08:05:12.713] | : Environment: R_GlobalEnv
[08:05:12.713] | : State: ‘running’
[08:05:12.713] | : Resolved: FALSE
[08:05:12.713] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-50
[08:05:12.713] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:12.713] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:12.713] | : Value: <not collected>
[08:05:12.713] | : Conditions captured: <none>
[08:05:12.725] | : Chunk #4 of 10 ... DONE
[08:05:12.725] | : Chunk #5 of 10 ...
[08:05:12.725] | :  - Finding globals in 'X' for chunk #5 ...
[08:05:12.725] | :    + additional globals found: [n=0] 
[08:05:12.725] | :    + additional namespaces needed: [n=0] 
[08:05:12.726] | :  - Finding globals in 'X' for chunk #5 ... DONE
[08:05:12.726] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[08:05:12.726] | :  - seeds: <none>
[08:05:12.726] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:12.839] | : Created future:
[08:05:12.840] | : MultisessionFuture:
[08:05:12.840] | : Label: ‘future_lapply-5’
[08:05:12.840] | : Expression:
[08:05:12.840] | : {
[08:05:12.840] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:12.840] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:12.840] | :     "# as a global variable                                         "
[08:05:12.840] | :     do.call(function(...) {
[08:05:12.840] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:12.840] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:12.840] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:12.840] | :         "# anonymous function.                                          "
[08:05:12.840] | :         "#                                                              "
[08:05:12.840] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:12.840] | :         "# function environment of FUN() to the calling environment.    "
[08:05:12.840] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:12.840] | :         "# global environment, which is where globals are written.      "
[08:05:12.840] | :         penv <- env <- environment(...future.FUN)
[08:05:12.840] | :         repeat {
[08:05:12.840] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:12.840] | :                 emptyenv())) 
[08:05:12.840] | :                 break
[08:05:12.840] | :             penv <- env
[08:05:12.840] | :             env <- parent.env(env)
[08:05:12.840] | :         }
[08:05:12.840] | :         if (identical(penv, globalenv())) {
[08:05:12.840] | :             environment(...future.FUN) <- environment()
[08:05:12.840] | :         }
[08:05:12.840] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:12.840] | :             !isNamespace(penv)) {
[08:05:12.840] | :             parent.env(penv) <- environment()
[08:05:12.840] | :         }
[08:05:12.840] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:12.840] | :         {
[08:05:12.840] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:12.840] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:12.840] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:12.840] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:12.840] | :                 on.exit(options(oopts), add = TRUE)
[08:05:12.840] | :             }
[08:05:12.840] | :             {
[08:05:12.840] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:12.840] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:12.840] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:12.840] | :                   {
[08:05:12.840] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:12.840] | :                   }
[08:05:12.840] | :                 })
[08:05:12.840] | :             }
[08:05:12.840] | :         }
[08:05:12.840] | :     }, args = future.call.arguments)
[08:05:12.840] | : }
[08:05:12.840] | : Globals: 5 objects totaling 5.31 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 141 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:12.840] | : Packages: <none>
[08:05:12.840] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:12.840] | : Capture standard output: TRUE
[08:05:12.840] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:12.840] | : Immediate condition classes: ‘immediateCondition’
[08:05:12.840] | : Lazy evaluation: FALSE
[08:05:12.840] | : Local evaluation: TRUE
[08:05:12.840] | : Asynchronous evaluation: TRUE
[08:05:12.840] | : Early signaling: FALSE
[08:05:12.840] | : Environment: R_GlobalEnv
[08:05:12.840] | : State: ‘running’
[08:05:12.840] | : Resolved: FALSE
[08:05:12.840] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-51
[08:05:12.840] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:12.840] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:12.840] | : Value: <not collected>
[08:05:12.840] | : Conditions captured: <none>
[08:05:12.852] | : Chunk #5 of 10 ... DONE
[08:05:12.852] | : Chunk #6 of 10 ...
[08:05:12.852] | :  - Finding globals in 'X' for chunk #6 ...
[08:05:12.852] | :    + additional globals found: [n=0] 
[08:05:12.853] | :    + additional namespaces needed: [n=0] 
[08:05:12.853] | :  - Finding globals in 'X' for chunk #6 ... DONE
[08:05:12.853] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[08:05:12.853] | :  - seeds: <none>
[08:05:12.853] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:12.971] | : Created future:
[08:05:12.971] | : MultisessionFuture:
[08:05:12.971] | : Label: ‘future_lapply-6’
[08:05:12.971] | : Expression:
[08:05:12.971] | : {
[08:05:12.971] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:12.971] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:12.971] | :     "# as a global variable                                         "
[08:05:12.971] | :     do.call(function(...) {
[08:05:12.971] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:12.971] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:12.971] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:12.971] | :         "# anonymous function.                                          "
[08:05:12.971] | :         "#                                                              "
[08:05:12.971] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:12.971] | :         "# function environment of FUN() to the calling environment.    "
[08:05:12.971] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:12.971] | :         "# global environment, which is where globals are written.      "
[08:05:12.971] | :         penv <- env <- environment(...future.FUN)
[08:05:12.971] | :         repeat {
[08:05:12.971] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:12.971] | :                 emptyenv())) 
[08:05:12.971] | :                 break
[08:05:12.971] | :             penv <- env
[08:05:12.971] | :             env <- parent.env(env)
[08:05:12.971] | :         }
[08:05:12.971] | :         if (identical(penv, globalenv())) {
[08:05:12.971] | :             environment(...future.FUN) <- environment()
[08:05:12.971] | :         }
[08:05:12.971] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:12.971] | :             !isNamespace(penv)) {
[08:05:12.971] | :             parent.env(penv) <- environment()
[08:05:12.971] | :         }
[08:05:12.971] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:12.971] | :         {
[08:05:12.971] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:12.971] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:12.971] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:12.971] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:12.971] | :                 on.exit(options(oopts), add = TRUE)
[08:05:12.971] | :             }
[08:05:12.971] | :             {
[08:05:12.971] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:12.971] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:12.971] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:12.971] | :                   {
[08:05:12.971] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:12.971] | :                   }
[08:05:12.971] | :                 })
[08:05:12.971] | :             }
[08:05:12.971] | :         }
[08:05:12.971] | :     }, args = future.call.arguments)
[08:05:12.971] | : }
[08:05:12.971] | : Globals: 5 objects totaling 5.31 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 141 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:12.971] | : Packages: <none>
[08:05:12.971] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:12.971] | : Capture standard output: TRUE
[08:05:12.971] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:12.971] | : Immediate condition classes: ‘immediateCondition’
[08:05:12.971] | : Lazy evaluation: FALSE
[08:05:12.971] | : Local evaluation: TRUE
[08:05:12.971] | : Asynchronous evaluation: TRUE
[08:05:12.971] | : Early signaling: FALSE
[08:05:12.971] | : Environment: R_GlobalEnv
[08:05:12.971] | : State: ‘running’
[08:05:12.971] | : Resolved: FALSE
[08:05:12.971] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-52
[08:05:12.971] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:12.971] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:12.971] | : Value: <not collected>
[08:05:12.971] | : Conditions captured: <none>
[08:05:12.983] | : Chunk #6 of 10 ... DONE
[08:05:12.983] | : Chunk #7 of 10 ...
[08:05:12.983] | :  - Finding globals in 'X' for chunk #7 ...
[08:05:12.984] | :    + additional globals found: [n=0] 
[08:05:12.984] | :    + additional namespaces needed: [n=0] 
[08:05:12.984] | :  - Finding globals in 'X' for chunk #7 ... DONE
[08:05:12.984] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[08:05:12.984] | :  - seeds: <none>
[08:05:12.984] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:13.098] | : Created future:
[08:05:13.098] | : MultisessionFuture:
[08:05:13.098] | : Label: ‘future_lapply-7’
[08:05:13.098] | : Expression:
[08:05:13.098] | : {
[08:05:13.098] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:13.098] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:13.098] | :     "# as a global variable                                         "
[08:05:13.098] | :     do.call(function(...) {
[08:05:13.098] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:13.098] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:13.098] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:13.098] | :         "# anonymous function.                                          "
[08:05:13.098] | :         "#                                                              "
[08:05:13.098] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:13.098] | :         "# function environment of FUN() to the calling environment.    "
[08:05:13.098] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:13.098] | :         "# global environment, which is where globals are written.      "
[08:05:13.098] | :         penv <- env <- environment(...future.FUN)
[08:05:13.098] | :         repeat {
[08:05:13.098] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:13.098] | :                 emptyenv())) 
[08:05:13.098] | :                 break
[08:05:13.098] | :             penv <- env
[08:05:13.098] | :             env <- parent.env(env)
[08:05:13.098] | :         }
[08:05:13.098] | :         if (identical(penv, globalenv())) {
[08:05:13.098] | :             environment(...future.FUN) <- environment()
[08:05:13.098] | :         }
[08:05:13.098] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:13.098] | :             !isNamespace(penv)) {
[08:05:13.098] | :             parent.env(penv) <- environment()
[08:05:13.098] | :         }
[08:05:13.098] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:13.098] | :         {
[08:05:13.098] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:13.098] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:13.098] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:13.098] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:13.098] | :                 on.exit(options(oopts), add = TRUE)
[08:05:13.098] | :             }
[08:05:13.098] | :             {
[08:05:13.098] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:13.098] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:13.098] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:13.098] | :                   {
[08:05:13.098] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:13.098] | :                   }
[08:05:13.098] | :                 })
[08:05:13.098] | :             }
[08:05:13.098] | :         }
[08:05:13.098] | :     }, args = future.call.arguments)
[08:05:13.098] | : }
[08:05:13.098] | : Globals: 5 objects totaling 5.31 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 141 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:13.098] | : Packages: <none>
[08:05:13.098] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:13.098] | : Capture standard output: TRUE
[08:05:13.098] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:13.098] | : Immediate condition classes: ‘immediateCondition’
[08:05:13.098] | : Lazy evaluation: FALSE
[08:05:13.098] | : Local evaluation: TRUE
[08:05:13.098] | : Asynchronous evaluation: TRUE
[08:05:13.098] | : Early signaling: FALSE
[08:05:13.098] | : Environment: R_GlobalEnv
[08:05:13.098] | : State: ‘running’
[08:05:13.098] | : Resolved: FALSE
[08:05:13.098] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-53
[08:05:13.098] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:13.098] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:13.098] | : Value: <not collected>
[08:05:13.098] | : Conditions captured: <none>
[08:05:13.113] | : Chunk #7 of 10 ... DONE
[08:05:13.113] | : Chunk #8 of 10 ...
[08:05:13.113] | :  - Finding globals in 'X' for chunk #8 ...
[08:05:13.114] | :    + additional globals found: [n=0] 
[08:05:13.114] | :    + additional namespaces needed: [n=0] 
[08:05:13.114] | :  - Finding globals in 'X' for chunk #8 ... DONE
[08:05:13.114] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[08:05:13.114] | :  - seeds: <none>
[08:05:13.114] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:13.231] | : Created future:
[08:05:13.232] | : MultisessionFuture:
[08:05:13.232] | : Label: ‘future_lapply-8’
[08:05:13.232] | : Expression:
[08:05:13.232] | : {
[08:05:13.232] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:13.232] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:13.232] | :     "# as a global variable                                         "
[08:05:13.232] | :     do.call(function(...) {
[08:05:13.232] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:13.232] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:13.232] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:13.232] | :         "# anonymous function.                                          "
[08:05:13.232] | :         "#                                                              "
[08:05:13.232] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:13.232] | :         "# function environment of FUN() to the calling environment.    "
[08:05:13.232] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:13.232] | :         "# global environment, which is where globals are written.      "
[08:05:13.232] | :         penv <- env <- environment(...future.FUN)
[08:05:13.232] | :         repeat {
[08:05:13.232] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:13.232] | :                 emptyenv())) 
[08:05:13.232] | :                 break
[08:05:13.232] | :             penv <- env
[08:05:13.232] | :             env <- parent.env(env)
[08:05:13.232] | :         }
[08:05:13.232] | :         if (identical(penv, globalenv())) {
[08:05:13.232] | :             environment(...future.FUN) <- environment()
[08:05:13.232] | :         }
[08:05:13.232] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:13.232] | :             !isNamespace(penv)) {
[08:05:13.232] | :             parent.env(penv) <- environment()
[08:05:13.232] | :         }
[08:05:13.232] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:13.232] | :         {
[08:05:13.232] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:13.232] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:13.232] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:13.232] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:13.232] | :                 on.exit(options(oopts), add = TRUE)
[08:05:13.232] | :             }
[08:05:13.232] | :             {
[08:05:13.232] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:13.232] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:13.232] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:13.232] | :                   {
[08:05:13.232] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:13.232] | :                   }
[08:05:13.232] | :                 })
[08:05:13.232] | :             }
[08:05:13.232] | :         }
[08:05:13.232] | :     }, args = future.call.arguments)
[08:05:13.232] | : }
[08:05:13.232] | : Globals: 5 objects totaling 5.31 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 141 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:13.232] | : Packages: <none>
[08:05:13.232] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:13.232] | : Capture standard output: TRUE
[08:05:13.232] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:13.232] | : Immediate condition classes: ‘immediateCondition’
[08:05:13.232] | : Lazy evaluation: FALSE
[08:05:13.232] | : Local evaluation: TRUE
[08:05:13.232] | : Asynchronous evaluation: TRUE
[08:05:13.232] | : Early signaling: FALSE
[08:05:13.232] | : Environment: R_GlobalEnv
[08:05:13.232] | : State: ‘running’
[08:05:13.232] | : Resolved: FALSE
[08:05:13.232] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-54
[08:05:13.232] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:13.232] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:13.232] | : Value: <not collected>
[08:05:13.232] | : Conditions captured: <none>
[08:05:13.244] | : Chunk #8 of 10 ... DONE
[08:05:13.244] | : Chunk #9 of 10 ...
[08:05:13.244] | :  - Finding globals in 'X' for chunk #9 ...
[08:05:13.244] | :    + additional globals found: [n=0] 
[08:05:13.245] | :    + additional namespaces needed: [n=0] 
[08:05:13.245] | :  - Finding globals in 'X' for chunk #9 ... DONE
[08:05:13.245] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[08:05:13.245] | :  - seeds: <none>
[08:05:13.245] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:13.363] | : Created future:
[08:05:13.363] | : MultisessionFuture:
[08:05:13.363] | : Label: ‘future_lapply-9’
[08:05:13.363] | : Expression:
[08:05:13.363] | : {
[08:05:13.363] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:13.363] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:13.363] | :     "# as a global variable                                         "
[08:05:13.363] | :     do.call(function(...) {
[08:05:13.363] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:13.363] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:13.363] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:13.363] | :         "# anonymous function.                                          "
[08:05:13.363] | :         "#                                                              "
[08:05:13.363] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:13.363] | :         "# function environment of FUN() to the calling environment.    "
[08:05:13.363] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:13.363] | :         "# global environment, which is where globals are written.      "
[08:05:13.363] | :         penv <- env <- environment(...future.FUN)
[08:05:13.363] | :         repeat {
[08:05:13.363] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:13.363] | :                 emptyenv())) 
[08:05:13.363] | :                 break
[08:05:13.363] | :             penv <- env
[08:05:13.363] | :             env <- parent.env(env)
[08:05:13.363] | :         }
[08:05:13.363] | :         if (identical(penv, globalenv())) {
[08:05:13.363] | :             environment(...future.FUN) <- environment()
[08:05:13.363] | :         }
[08:05:13.363] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:13.363] | :             !isNamespace(penv)) {
[08:05:13.363] | :             parent.env(penv) <- environment()
[08:05:13.363] | :         }
[08:05:13.363] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:13.363] | :         {
[08:05:13.363] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:13.363] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:13.363] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:13.363] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:13.363] | :                 on.exit(options(oopts), add = TRUE)
[08:05:13.363] | :             }
[08:05:13.363] | :             {
[08:05:13.363] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:13.363] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:13.363] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:13.363] | :                   {
[08:05:13.363] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:13.363] | :                   }
[08:05:13.363] | :                 })
[08:05:13.363] | :             }
[08:05:13.363] | :         }
[08:05:13.363] | :     }, args = future.call.arguments)
[08:05:13.363] | : }
[08:05:13.363] | : Globals: 5 objects totaling 5.31 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 141 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:13.363] | : Packages: <none>
[08:05:13.363] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:13.363] | : Capture standard output: TRUE
[08:05:13.363] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:13.363] | : Immediate condition classes: ‘immediateCondition’
[08:05:13.363] | : Lazy evaluation: FALSE
[08:05:13.363] | : Local evaluation: TRUE
[08:05:13.363] | : Asynchronous evaluation: TRUE
[08:05:13.363] | : Early signaling: FALSE
[08:05:13.363] | : Environment: R_GlobalEnv
[08:05:13.363] | : State: ‘running’
[08:05:13.363] | : Resolved: FALSE
[08:05:13.363] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-55
[08:05:13.363] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:13.363] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:13.363] | : Value: <not collected>
[08:05:13.363] | : Conditions captured: <none>
[08:05:13.375] | : Chunk #9 of 10 ... DONE
[08:05:13.375] | : Chunk #10 of 10 ...
[08:05:13.375] | :  - Finding globals in 'X' for chunk #10 ...
[08:05:13.376] | :    + additional globals found: [n=0] 
[08:05:13.376] | :    + additional namespaces needed: [n=0] 
[08:05:13.376] | :  - Finding globals in 'X' for chunk #10 ... DONE
[08:05:13.376] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 10 * 2306 = 23056 (bytes)
[08:05:13.376] | :  - seeds: <none>
[08:05:13.376] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:13.491] | : Created future:
[08:05:13.491] | : MultisessionFuture:
[08:05:13.491] | : Label: ‘future_lapply-10’
[08:05:13.491] | : Expression:
[08:05:13.491] | : {
[08:05:13.491] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:13.491] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:13.491] | :     "# as a global variable                                         "
[08:05:13.491] | :     do.call(function(...) {
[08:05:13.491] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:13.491] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:13.491] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:13.491] | :         "# anonymous function.                                          "
[08:05:13.491] | :         "#                                                              "
[08:05:13.491] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:13.491] | :         "# function environment of FUN() to the calling environment.    "
[08:05:13.491] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:13.491] | :         "# global environment, which is where globals are written.      "
[08:05:13.491] | :         penv <- env <- environment(...future.FUN)
[08:05:13.491] | :         repeat {
[08:05:13.491] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:13.491] | :                 emptyenv())) 
[08:05:13.491] | :                 break
[08:05:13.491] | :             penv <- env
[08:05:13.491] | :             env <- parent.env(env)
[08:05:13.491] | :         }
[08:05:13.491] | :         if (identical(penv, globalenv())) {
[08:05:13.491] | :             environment(...future.FUN) <- environment()
[08:05:13.491] | :         }
[08:05:13.491] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:13.491] | :             !isNamespace(penv)) {
[08:05:13.491] | :             parent.env(penv) <- environment()
[08:05:13.491] | :         }
[08:05:13.491] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:13.491] | :         {
[08:05:13.491] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:13.491] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:13.491] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:13.491] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:13.491] | :                 on.exit(options(oopts), add = TRUE)
[08:05:13.491] | :             }
[08:05:13.491] | :             {
[08:05:13.491] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:13.491] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:13.491] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:13.491] | :                   {
[08:05:13.491] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:13.491] | :                   }
[08:05:13.491] | :                 })
[08:05:13.491] | :             }
[08:05:13.491] | :         }
[08:05:13.491] | :     }, args = future.call.arguments)
[08:05:13.491] | : }
[08:05:13.491] | : Globals: 5 objects totaling 5.31 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 141 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:13.491] | : Packages: <none>
[08:05:13.491] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:13.491] | : Capture standard output: TRUE
[08:05:13.491] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:13.491] | : Immediate condition classes: ‘immediateCondition’
[08:05:13.491] | : Lazy evaluation: FALSE
[08:05:13.491] | : Local evaluation: TRUE
[08:05:13.491] | : Asynchronous evaluation: TRUE
[08:05:13.491] | : Early signaling: FALSE
[08:05:13.491] | : Environment: R_GlobalEnv
[08:05:13.491] | : State: ‘running’
[08:05:13.491] | : Resolved: FALSE
[08:05:13.491] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-56
[08:05:13.491] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:13.491] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:13.491] | : Value: <not collected>
[08:05:13.491] | : Conditions captured: <none>
[08:05:13.503] | : Chunk #10 of 10 ... DONE
[08:05:13.503] | : Launching 10 futures (chunks) ... DONE
[08:05:13.503] | : Resolving 10 futures (chunks) ...
[08:05:13.536] | :  - Number of value chunks collected: 10
[08:05:13.536] | : Resolving 10 futures (chunks) ... DONE
[08:05:13.536] | : Reducing values from 10 chunks ...
[08:05:13.536] | :  - Number of values collected after concatenation: 10
[08:05:13.536] | :  - Number of values expected: 10
[08:05:13.536] | : Reducing values from 10 chunks ... DONE
[08:05:13.536] | future_lapply() -> future_xapply() ... done
[08:05:13.536] future_lapply() ... done
List of 10
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
maxSize = 2305.6 bytes
future.globals.maxSize = 2305.6 bytes
[08:05:13.543] future_lapply() ...
[08:05:13.543] | Globals in FUN(): [n=2] ‘{’, ‘getOption’
[08:05:13.544] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:13.544] | future_lapply() -> future_xapply() ...
[08:05:13.544] | : Number of chunks: 5
[08:05:13.544] | : getGlobalsAndPackagesXApply() ...
[08:05:13.544] | : . future.globals: TRUE
[08:05:13.550] | : . globals found/used: [n=1] ‘FUN’
[08:05:13.550] | : . needed namespaces: [n=0] 
[08:05:13.550] | : . use_args: TRUE
[08:05:13.550] | : . Getting '...' globals ...
[08:05:13.550] | : . ' '...' content: [n=0] 
[08:05:13.551] | : . ' List of 1
[08:05:13.551] | : . '  $ ...: list()
[08:05:13.551] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:13.551] | : . '  - attr(*, "where")=List of 1
[08:05:13.551] | : . '   ..$ ...:<environment: 0x5595ae71af28> 
[08:05:13.551] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:13.551] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:13.551] | : . '  - attr(*, "total_size")= num NA
[08:05:13.553] | : . Getting '...' globals ... done
[08:05:13.553] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:13.553] | : . List of 2
[08:05:13.553] | : .  $ ...future.FUN:function (x)  
[08:05:13.553] | : .  $ ...          : list()
[08:05:13.553] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:13.553] | : .  - attr(*, "where")=List of 2
[08:05:13.553] | : .   ..$ ...future.FUN:<environment: 0x5595ae71af28> 
[08:05:13.553] | : .   ..$ ...          :<environment: 0x5595ae71af28> 
[08:05:13.553] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:13.553] | : .  - attr(*, "resolved")= logi FALSE
[08:05:13.553] | : .  - attr(*, "total_size")= num 5085
[08:05:13.556] | : . Packages to be attached in all futures: [n=0] 
[08:05:13.556] | : getGlobalsAndPackagesXApply() ... done
[08:05:13.556] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:13.557] | : List of 5
[08:05:13.557] | :  $ ...future.FUN            :function (x)  
[08:05:13.557] | :  $ ...                      : list()
[08:05:13.557] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:13.557] | :  $ ...future.elements_ii    : NULL
[08:05:13.557] | :  $ ...future.seeds_ii       : NULL
[08:05:13.557] | :  $ ...future.globals.maxSize: NULL
[08:05:13.557] | :  - attr(*, "where")=List of 5
[08:05:13.557] | :   ..$ ...future.FUN            :<environment: 0x5595ae71af28> 
[08:05:13.557] | :   ..$ ...                      :<environment: 0x5595ae71af28> 
[08:05:13.557] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:13.557] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:13.557] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:13.557] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:13.557] | :  - attr(*, "resolved")= logi FALSE
[08:05:13.557] | :  - attr(*, "total_size")= num 5085
[08:05:13.561] | : Number of futures (= number of chunks): 5
[08:05:13.561] | : Launching 5 futures (chunks) ...
[08:05:13.561] | : Chunk #1 of 5 ...
[08:05:13.561] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:13.561] | :    + additional globals found: [n=0] 
[08:05:13.561] | :    + additional namespaces needed: [n=0] 
[08:05:13.562] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:13.562] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 5 * 2306 = 11528 (bytes)
[08:05:13.562] | :  - seeds: <none>
[08:05:13.562] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:13.665] | : Created future:
[08:05:13.665] | : MultisessionFuture:
[08:05:13.665] | : Label: ‘future_lapply-1’
[08:05:13.665] | : Expression:
[08:05:13.665] | : {
[08:05:13.665] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:13.665] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:13.665] | :     "# as a global variable                                         "
[08:05:13.665] | :     do.call(function(...) {
[08:05:13.665] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:13.665] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:13.665] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:13.665] | :         "# anonymous function.                                          "
[08:05:13.665] | :         "#                                                              "
[08:05:13.665] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:13.665] | :         "# function environment of FUN() to the calling environment.    "
[08:05:13.665] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:13.665] | :         "# global environment, which is where globals are written.      "
[08:05:13.665] | :         penv <- env <- environment(...future.FUN)
[08:05:13.665] | :         repeat {
[08:05:13.665] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:13.665] | :                 emptyenv())) 
[08:05:13.665] | :                 break
[08:05:13.665] | :             penv <- env
[08:05:13.665] | :             env <- parent.env(env)
[08:05:13.665] | :         }
[08:05:13.665] | :         if (identical(penv, globalenv())) {
[08:05:13.665] | :             environment(...future.FUN) <- environment()
[08:05:13.665] | :         }
[08:05:13.665] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:13.665] | :             !isNamespace(penv)) {
[08:05:13.665] | :             parent.env(penv) <- environment()
[08:05:13.665] | :         }
[08:05:13.665] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:13.665] | :         {
[08:05:13.665] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:13.665] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:13.665] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:13.665] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:13.665] | :                 on.exit(options(oopts), add = TRUE)
[08:05:13.665] | :             }
[08:05:13.665] | :             {
[08:05:13.665] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:13.665] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:13.665] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:13.665] | :                   {
[08:05:13.665] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:13.665] | :                   }
[08:05:13.665] | :                 })
[08:05:13.665] | :             }
[08:05:13.665] | :         }
[08:05:13.665] | :     }, args = future.call.arguments)
[08:05:13.665] | : }
[08:05:13.665] | : Globals: 5 objects totaling 5.38 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 217 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:13.665] | : Packages: <none>
[08:05:13.665] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:13.665] | : Capture standard output: TRUE
[08:05:13.665] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:13.665] | : Immediate condition classes: ‘immediateCondition’
[08:05:13.665] | : Lazy evaluation: FALSE
[08:05:13.665] | : Local evaluation: TRUE
[08:05:13.665] | : Asynchronous evaluation: TRUE
[08:05:13.665] | : Early signaling: FALSE
[08:05:13.665] | : Environment: R_GlobalEnv
[08:05:13.665] | : State: ‘running’
[08:05:13.665] | : Resolved: FALSE
[08:05:13.665] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-57
[08:05:13.665] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:13.665] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:13.665] | : Value: <not collected>
[08:05:13.665] | : Conditions captured: <none>
[08:05:13.677] | : Chunk #1 of 5 ... DONE
[08:05:13.678] | : Chunk #2 of 5 ...
[08:05:13.678] | :  - Finding globals in 'X' for chunk #2 ...
[08:05:13.678] | :    + additional globals found: [n=0] 
[08:05:13.678] | :    + additional namespaces needed: [n=0] 
[08:05:13.678] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:05:13.678] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 5 * 2306 = 11528 (bytes)
[08:05:13.679] | :  - seeds: <none>
[08:05:13.679] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:13.782] | : Created future:
[08:05:13.782] | : MultisessionFuture:
[08:05:13.782] | : Label: ‘future_lapply-2’
[08:05:13.782] | : Expression:
[08:05:13.782] | : {
[08:05:13.782] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:13.782] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:13.782] | :     "# as a global variable                                         "
[08:05:13.782] | :     do.call(function(...) {
[08:05:13.782] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:13.782] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:13.782] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:13.782] | :         "# anonymous function.                                          "
[08:05:13.782] | :         "#                                                              "
[08:05:13.782] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:13.782] | :         "# function environment of FUN() to the calling environment.    "
[08:05:13.782] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:13.782] | :         "# global environment, which is where globals are written.      "
[08:05:13.782] | :         penv <- env <- environment(...future.FUN)
[08:05:13.782] | :         repeat {
[08:05:13.782] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:13.782] | :                 emptyenv())) 
[08:05:13.782] | :                 break
[08:05:13.782] | :             penv <- env
[08:05:13.782] | :             env <- parent.env(env)
[08:05:13.782] | :         }
[08:05:13.782] | :         if (identical(penv, globalenv())) {
[08:05:13.782] | :             environment(...future.FUN) <- environment()
[08:05:13.782] | :         }
[08:05:13.782] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:13.782] | :             !isNamespace(penv)) {
[08:05:13.782] | :             parent.env(penv) <- environment()
[08:05:13.782] | :         }
[08:05:13.782] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:13.782] | :         {
[08:05:13.782] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:13.782] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:13.782] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:13.782] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:13.782] | :                 on.exit(options(oopts), add = TRUE)
[08:05:13.782] | :             }
[08:05:13.782] | :             {
[08:05:13.782] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:13.782] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:13.782] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:13.782] | :                   {
[08:05:13.782] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:13.782] | :                   }
[08:05:13.782] | :                 })
[08:05:13.782] | :             }
[08:05:13.782] | :         }
[08:05:13.782] | :     }, args = future.call.arguments)
[08:05:13.782] | : }
[08:05:13.782] | : Globals: 5 objects totaling 5.38 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 217 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:13.782] | : Packages: <none>
[08:05:13.782] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:13.782] | : Capture standard output: TRUE
[08:05:13.782] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:13.782] | : Immediate condition classes: ‘immediateCondition’
[08:05:13.782] | : Lazy evaluation: FALSE
[08:05:13.782] | : Local evaluation: TRUE
[08:05:13.782] | : Asynchronous evaluation: TRUE
[08:05:13.782] | : Early signaling: FALSE
[08:05:13.782] | : Environment: R_GlobalEnv
[08:05:13.782] | : State: ‘running’
[08:05:13.782] | : Resolved: FALSE
[08:05:13.782] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-58
[08:05:13.782] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:13.782] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:13.782] | : Value: <not collected>
[08:05:13.782] | : Conditions captured: <none>
[08:05:13.794] | : Chunk #2 of 5 ... DONE
[08:05:13.794] | : Chunk #3 of 5 ...
[08:05:13.796] | :  - Finding globals in 'X' for chunk #3 ...
[08:05:13.797] | :    + additional globals found: [n=0] 
[08:05:13.797] | :    + additional namespaces needed: [n=0] 
[08:05:13.797] | :  - Finding globals in 'X' for chunk #3 ... DONE
[08:05:13.797] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 5 * 2306 = 11528 (bytes)
[08:05:13.797] | :  - seeds: <none>
[08:05:13.797] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:13.911] | : Created future:
[08:05:13.912] | : MultisessionFuture:
[08:05:13.912] | : Label: ‘future_lapply-3’
[08:05:13.912] | : Expression:
[08:05:13.912] | : {
[08:05:13.912] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:13.912] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:13.912] | :     "# as a global variable                                         "
[08:05:13.912] | :     do.call(function(...) {
[08:05:13.912] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:13.912] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:13.912] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:13.912] | :         "# anonymous function.                                          "
[08:05:13.912] | :         "#                                                              "
[08:05:13.912] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:13.912] | :         "# function environment of FUN() to the calling environment.    "
[08:05:13.912] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:13.912] | :         "# global environment, which is where globals are written.      "
[08:05:13.912] | :         penv <- env <- environment(...future.FUN)
[08:05:13.912] | :         repeat {
[08:05:13.912] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:13.912] | :                 emptyenv())) 
[08:05:13.912] | :                 break
[08:05:13.912] | :             penv <- env
[08:05:13.912] | :             env <- parent.env(env)
[08:05:13.912] | :         }
[08:05:13.912] | :         if (identical(penv, globalenv())) {
[08:05:13.912] | :             environment(...future.FUN) <- environment()
[08:05:13.912] | :         }
[08:05:13.912] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:13.912] | :             !isNamespace(penv)) {
[08:05:13.912] | :             parent.env(penv) <- environment()
[08:05:13.912] | :         }
[08:05:13.912] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:13.912] | :         {
[08:05:13.912] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:13.912] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:13.912] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:13.912] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:13.912] | :                 on.exit(options(oopts), add = TRUE)
[08:05:13.912] | :             }
[08:05:13.912] | :             {
[08:05:13.912] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:13.912] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:13.912] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:13.912] | :                   {
[08:05:13.912] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:13.912] | :                   }
[08:05:13.912] | :                 })
[08:05:13.912] | :             }
[08:05:13.912] | :         }
[08:05:13.912] | :     }, args = future.call.arguments)
[08:05:13.912] | : }
[08:05:13.912] | : Globals: 5 objects totaling 5.38 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 217 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:13.912] | : Packages: <none>
[08:05:13.912] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:13.912] | : Capture standard output: TRUE
[08:05:13.912] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:13.912] | : Immediate condition classes: ‘immediateCondition’
[08:05:13.912] | : Lazy evaluation: FALSE
[08:05:13.912] | : Local evaluation: TRUE
[08:05:13.912] | : Asynchronous evaluation: TRUE
[08:05:13.912] | : Early signaling: FALSE
[08:05:13.912] | : Environment: R_GlobalEnv
[08:05:13.912] | : State: ‘running’
[08:05:13.912] | : Resolved: FALSE
[08:05:13.912] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-59
[08:05:13.912] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:13.912] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:13.912] | : Value: <not collected>
[08:05:13.912] | : Conditions captured: <none>
[08:05:13.924] | : Chunk #3 of 5 ... DONE
[08:05:13.924] | : Chunk #4 of 5 ...
[08:05:13.924] | :  - Finding globals in 'X' for chunk #4 ...
[08:05:13.924] | :    + additional globals found: [n=0] 
[08:05:13.924] | :    + additional namespaces needed: [n=0] 
[08:05:13.925] | :  - Finding globals in 'X' for chunk #4 ... DONE
[08:05:13.925] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 5 * 2306 = 11528 (bytes)
[08:05:13.925] | :  - seeds: <none>
[08:05:13.925] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:14.038] | : Created future:
[08:05:14.038] | : MultisessionFuture:
[08:05:14.038] | : Label: ‘future_lapply-4’
[08:05:14.038] | : Expression:
[08:05:14.038] | : {
[08:05:14.038] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:14.038] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:14.038] | :     "# as a global variable                                         "
[08:05:14.038] | :     do.call(function(...) {
[08:05:14.038] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:14.038] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:14.038] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:14.038] | :         "# anonymous function.                                          "
[08:05:14.038] | :         "#                                                              "
[08:05:14.038] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:14.038] | :         "# function environment of FUN() to the calling environment.    "
[08:05:14.038] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:14.038] | :         "# global environment, which is where globals are written.      "
[08:05:14.038] | :         penv <- env <- environment(...future.FUN)
[08:05:14.038] | :         repeat {
[08:05:14.038] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:14.038] | :                 emptyenv())) 
[08:05:14.038] | :                 break
[08:05:14.038] | :             penv <- env
[08:05:14.038] | :             env <- parent.env(env)
[08:05:14.038] | :         }
[08:05:14.038] | :         if (identical(penv, globalenv())) {
[08:05:14.038] | :             environment(...future.FUN) <- environment()
[08:05:14.038] | :         }
[08:05:14.038] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:14.038] | :             !isNamespace(penv)) {
[08:05:14.038] | :             parent.env(penv) <- environment()
[08:05:14.038] | :         }
[08:05:14.038] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:14.038] | :         {
[08:05:14.038] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:14.038] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:14.038] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:14.038] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:14.038] | :                 on.exit(options(oopts), add = TRUE)
[08:05:14.038] | :             }
[08:05:14.038] | :             {
[08:05:14.038] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:14.038] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:14.038] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:14.038] | :                   {
[08:05:14.038] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:14.038] | :                   }
[08:05:14.038] | :                 })
[08:05:14.038] | :             }
[08:05:14.038] | :         }
[08:05:14.038] | :     }, args = future.call.arguments)
[08:05:14.038] | : }
[08:05:14.038] | : Globals: 5 objects totaling 5.38 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 217 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:14.038] | : Packages: <none>
[08:05:14.038] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:14.038] | : Capture standard output: TRUE
[08:05:14.038] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:14.038] | : Immediate condition classes: ‘immediateCondition’
[08:05:14.038] | : Lazy evaluation: FALSE
[08:05:14.038] | : Local evaluation: TRUE
[08:05:14.038] | : Asynchronous evaluation: TRUE
[08:05:14.038] | : Early signaling: FALSE
[08:05:14.038] | : Environment: R_GlobalEnv
[08:05:14.038] | : State: ‘running’
[08:05:14.038] | : Resolved: FALSE
[08:05:14.038] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-60
[08:05:14.038] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:14.038] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:14.038] | : Value: <not collected>
[08:05:14.038] | : Conditions captured: <none>
[08:05:14.050] | : Chunk #4 of 5 ... DONE
[08:05:14.050] | : Chunk #5 of 5 ...
[08:05:14.050] | :  - Finding globals in 'X' for chunk #5 ...
[08:05:14.050] | :    + additional globals found: [n=0] 
[08:05:14.051] | :    + additional namespaces needed: [n=0] 
[08:05:14.051] | :  - Finding globals in 'X' for chunk #5 ... DONE
[08:05:14.051] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 5 * 2306 = 11528 (bytes)
[08:05:14.051] | :  - seeds: <none>
[08:05:14.051] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:14.164] | : Created future:
[08:05:14.164] | : MultisessionFuture:
[08:05:14.164] | : Label: ‘future_lapply-5’
[08:05:14.164] | : Expression:
[08:05:14.164] | : {
[08:05:14.164] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:14.164] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:14.164] | :     "# as a global variable                                         "
[08:05:14.164] | :     do.call(function(...) {
[08:05:14.164] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:14.164] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:14.164] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:14.164] | :         "# anonymous function.                                          "
[08:05:14.164] | :         "#                                                              "
[08:05:14.164] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:14.164] | :         "# function environment of FUN() to the calling environment.    "
[08:05:14.164] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:14.164] | :         "# global environment, which is where globals are written.      "
[08:05:14.164] | :         penv <- env <- environment(...future.FUN)
[08:05:14.164] | :         repeat {
[08:05:14.164] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:14.164] | :                 emptyenv())) 
[08:05:14.164] | :                 break
[08:05:14.164] | :             penv <- env
[08:05:14.164] | :             env <- parent.env(env)
[08:05:14.164] | :         }
[08:05:14.164] | :         if (identical(penv, globalenv())) {
[08:05:14.164] | :             environment(...future.FUN) <- environment()
[08:05:14.164] | :         }
[08:05:14.164] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:14.164] | :             !isNamespace(penv)) {
[08:05:14.164] | :             parent.env(penv) <- environment()
[08:05:14.164] | :         }
[08:05:14.164] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:14.164] | :         {
[08:05:14.164] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:14.164] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:14.164] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:14.164] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:14.164] | :                 on.exit(options(oopts), add = TRUE)
[08:05:14.164] | :             }
[08:05:14.164] | :             {
[08:05:14.164] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:14.164] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:14.164] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:14.164] | :                   {
[08:05:14.164] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:14.164] | :                   }
[08:05:14.164] | :                 })
[08:05:14.164] | :             }
[08:05:14.164] | :         }
[08:05:14.164] | :     }, args = future.call.arguments)
[08:05:14.164] | : }
[08:05:14.164] | : Globals: 5 objects totaling 5.38 KiB (function ‘...future.FUN’ of 407 bytes, list ‘...future.elements_ii’ of 217 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:14.164] | : Packages: <none>
[08:05:14.164] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:14.164] | : Capture standard output: TRUE
[08:05:14.164] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:14.164] | : Immediate condition classes: ‘immediateCondition’
[08:05:14.164] | : Lazy evaluation: FALSE
[08:05:14.164] | : Local evaluation: TRUE
[08:05:14.164] | : Asynchronous evaluation: TRUE
[08:05:14.164] | : Early signaling: FALSE
[08:05:14.164] | : Environment: R_GlobalEnv
[08:05:14.164] | : State: ‘running’
[08:05:14.164] | : Resolved: FALSE
[08:05:14.164] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-61
[08:05:14.164] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:14.164] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:14.164] | : Value: <not collected>
[08:05:14.164] | : Conditions captured: <none>
[08:05:14.176] | : Chunk #5 of 5 ... DONE
[08:05:14.177] | : Launching 5 futures (chunks) ... DONE
[08:05:14.177] | : Resolving 5 futures (chunks) ...
[08:05:14.221] | :  - Number of value chunks collected: 5
[08:05:14.221] | : Resolving 5 futures (chunks) ... DONE
[08:05:14.221] | : Reducing values from 5 chunks ...
[08:05:14.221] | :  - Number of values collected after concatenation: 10
[08:05:14.221] | :  - Number of values expected: 10
[08:05:14.221] | : Reducing values from 5 chunks ... DONE
[08:05:14.221] | future_lapply() -> future_xapply() ... done
[08:05:14.222] future_lapply() ... done
List of 10
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
maxSize = 2305.6 bytes
future.globals.maxSize = 2305.6 bytes
[08:05:14.225] future_lapply() ...
[08:05:14.228] | Globals in FUN(): [n=2] ‘{’, ‘getOption’
[08:05:14.228] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:14.228] | future_lapply() -> future_xapply() ...
[08:05:14.229] | : Number of chunks: 2
[08:05:14.229] | : getGlobalsAndPackagesXApply() ...
[08:05:14.229] | : . future.globals: TRUE
[08:05:14.234] | : . globals found/used: [n=1] ‘FUN’
[08:05:14.235] | : . needed namespaces: [n=0] 
[08:05:14.235] | : . use_args: TRUE
[08:05:14.235] | : . Getting '...' globals ...
[08:05:14.235] | : . ' '...' content: [n=0] 
[08:05:14.235] | : . ' List of 1
[08:05:14.235] | : . '  $ ...: list()
[08:05:14.235] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:14.235] | : . '  - attr(*, "where")=List of 1
[08:05:14.235] | : . '   ..$ ...:<environment: 0x5595affffba0> 
[08:05:14.235] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:14.235] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:14.235] | : . '  - attr(*, "total_size")= num NA
[08:05:14.238] | : . Getting '...' globals ... done
[08:05:14.238] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:14.238] | : . List of 2
[08:05:14.238] | : .  $ ...future.FUN:function (x)  
[08:05:14.238] | : .  $ ...          : list()
[08:05:14.238] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:14.238] | : .  - attr(*, "where")=List of 2
[08:05:14.238] | : .   ..$ ...future.FUN:<environment: 0x5595affffba0> 
[08:05:14.238] | : .   ..$ ...          :<environment: 0x5595affffba0> 
[08:05:14.238] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:14.238] | : .  - attr(*, "resolved")= logi FALSE
[08:05:14.238] | : .  - attr(*, "total_size")= num 5085
[08:05:14.241] | : . Packages to be attached in all futures: [n=0] 
[08:05:14.241] | : getGlobalsAndPackagesXApply() ... done
[08:05:14.241] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:14.241] | : List of 5
[08:05:14.241] | :  $ ...future.FUN            :function (x)  
[08:05:14.241] | :  $ ...                      : list()
[08:05:14.241] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:14.241] | :  $ ...future.elements_ii    : NULL
[08:05:14.241] | :  $ ...future.seeds_ii       : NULL
[08:05:14.241] | :  $ ...future.globals.maxSize: NULL
[08:05:14.241] | :  - attr(*, "where")=List of 5
[08:05:14.241] | :   ..$ ...future.FUN            :<environment: 0x5595affffba0> 
[08:05:14.241] | :   ..$ ...                      :<environment: 0x5595affffba0> 
[08:05:14.241] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:14.241] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:14.241] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:14.241] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:14.241] | :  - attr(*, "resolved")= logi FALSE
[08:05:14.241] | :  - attr(*, "total_size")= num 5085
[08:05:14.245] | : Number of futures (= number of chunks): 2
[08:05:14.245] | : Launching 2 futures (chunks) ...
[08:05:14.245] | : Chunk #1 of 2 ...
[08:05:14.246] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:14.246] | :    + additional globals found: [n=0] 
[08:05:14.246] | :    + additional namespaces needed: [n=0] 
[08:05:14.246] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:14.246] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 2 * 2306 = 4611 (bytes)
[08:05:14.246] | :  - seeds: <none>
[08:05:14.246] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:14.351] | : Created future:
[08:05:14.351] | : MultisessionFuture:
[08:05:14.351] | : Label: ‘future_lapply-1’
[08:05:14.351] | : Expression:
[08:05:14.351] | : {
[08:05:14.351] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:14.351] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:14.351] | :     "# as a global variable                                         "
[08:05:14.351] | :     do.call(function(...) {
[08:05:14.351] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:14.351] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:14.351] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:14.351] | :         "# anonymous function.                                          "
[08:05:14.351] | :         "#                                                              "
[08:05:14.351] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:14.351] | :         "# function environment of FUN() to the calling environment.    "
[08:05:14.351] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:14.351] | :         "# global environment, which is where globals are written.      "
[08:05:14.351] | :         penv <- env <- environment(...future.FUN)
[08:05:14.351] | :         repeat {
[08:05:14.351] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:14.351] | :                 emptyenv())) 
[08:05:14.351] | :                 break
[08:05:14.351] | :             penv <- env
[08:05:14.351] | :             env <- parent.env(env)
[08:05:14.351] | :         }
[08:05:14.351] | :         if (identical(penv, globalenv())) {
[08:05:14.351] | :             environment(...future.FUN) <- environment()
[08:05:14.351] | :         }
[08:05:14.351] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:14.351] | :             !isNamespace(penv)) {
[08:05:14.351] | :             parent.env(penv) <- environment()
[08:05:14.351] | :         }
[08:05:14.351] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:14.351] | :         {
[08:05:14.351] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:14.351] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:14.351] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:14.351] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:14.351] | :                 on.exit(options(oopts), add = TRUE)
[08:05:14.351] | :             }
[08:05:14.351] | :             {
[08:05:14.351] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:14.351] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:14.351] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:14.351] | :                   {
[08:05:14.351] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:14.351] | :                   }
[08:05:14.351] | :                 })
[08:05:14.351] | :             }
[08:05:14.351] | :         }
[08:05:14.351] | :     }, args = future.call.arguments)
[08:05:14.351] | : }
[08:05:14.351] | : Globals: 5 objects totaling 5.61 KiB (list ‘...future.elements_ii’ of 445 bytes, function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:14.351] | : Packages: <none>
[08:05:14.351] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:14.351] | : Capture standard output: TRUE
[08:05:14.351] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:14.351] | : Immediate condition classes: ‘immediateCondition’
[08:05:14.351] | : Lazy evaluation: FALSE
[08:05:14.351] | : Local evaluation: TRUE
[08:05:14.351] | : Asynchronous evaluation: TRUE
[08:05:14.351] | : Early signaling: FALSE
[08:05:14.351] | : Environment: R_GlobalEnv
[08:05:14.351] | : State: ‘running’
[08:05:14.351] | : Resolved: FALSE
[08:05:14.351] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-62
[08:05:14.351] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:14.351] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:14.351] | : Value: <not collected>
[08:05:14.351] | : Conditions captured: <none>
[08:05:14.363] | : Chunk #1 of 2 ... DONE
[08:05:14.363] | : Chunk #2 of 2 ...
[08:05:14.364] | :  - Finding globals in 'X' for chunk #2 ...
[08:05:14.364] | :    + additional globals found: [n=0] 
[08:05:14.364] | :    + additional namespaces needed: [n=0] 
[08:05:14.364] | :  - Finding globals in 'X' for chunk #2 ... DONE
[08:05:14.364] | :  - Adjusted option 'future.globals.maxSize': 2306 -> 2 * 2306 = 4611 (bytes)
[08:05:14.365] | :  - seeds: <none>
[08:05:14.365] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:14.470] | : Created future:
[08:05:14.470] | : MultisessionFuture:
[08:05:14.470] | : Label: ‘future_lapply-2’
[08:05:14.470] | : Expression:
[08:05:14.470] | : {
[08:05:14.470] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:14.470] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:14.470] | :     "# as a global variable                                         "
[08:05:14.470] | :     do.call(function(...) {
[08:05:14.470] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:14.470] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:14.470] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:14.470] | :         "# anonymous function.                                          "
[08:05:14.470] | :         "#                                                              "
[08:05:14.470] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:14.470] | :         "# function environment of FUN() to the calling environment.    "
[08:05:14.470] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:14.470] | :         "# global environment, which is where globals are written.      "
[08:05:14.470] | :         penv <- env <- environment(...future.FUN)
[08:05:14.470] | :         repeat {
[08:05:14.470] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:14.470] | :                 emptyenv())) 
[08:05:14.470] | :                 break
[08:05:14.470] | :             penv <- env
[08:05:14.470] | :             env <- parent.env(env)
[08:05:14.470] | :         }
[08:05:14.470] | :         if (identical(penv, globalenv())) {
[08:05:14.470] | :             environment(...future.FUN) <- environment()
[08:05:14.470] | :         }
[08:05:14.470] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:14.470] | :             !isNamespace(penv)) {
[08:05:14.470] | :             parent.env(penv) <- environment()
[08:05:14.470] | :         }
[08:05:14.470] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:14.470] | :         {
[08:05:14.470] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:14.470] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:14.470] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:14.470] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:14.470] | :                 on.exit(options(oopts), add = TRUE)
[08:05:14.470] | :             }
[08:05:14.470] | :             {
[08:05:14.470] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:14.470] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:14.470] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:14.470] | :                   {
[08:05:14.470] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:14.470] | :                   }
[08:05:14.470] | :                 })
[08:05:14.470] | :             }
[08:05:14.470] | :         }
[08:05:14.470] | :     }, args = future.call.arguments)
[08:05:14.470] | : }
[08:05:14.470] | : Globals: 5 objects totaling 5.61 KiB (list ‘...future.elements_ii’ of 445 bytes, function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:14.470] | : Packages: <none>
[08:05:14.470] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:14.470] | : Capture standard output: TRUE
[08:05:14.470] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:14.470] | : Immediate condition classes: ‘immediateCondition’
[08:05:14.470] | : Lazy evaluation: FALSE
[08:05:14.470] | : Local evaluation: TRUE
[08:05:14.470] | : Asynchronous evaluation: TRUE
[08:05:14.470] | : Early signaling: FALSE
[08:05:14.470] | : Environment: R_GlobalEnv
[08:05:14.470] | : State: ‘running’
[08:05:14.470] | : Resolved: FALSE
[08:05:14.470] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-63
[08:05:14.470] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:14.470] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:14.470] | : Value: <not collected>
[08:05:14.470] | : Conditions captured: <none>
[08:05:14.482] | : Chunk #2 of 2 ... DONE
[08:05:14.482] | : Launching 2 futures (chunks) ... DONE
[08:05:14.482] | : Resolving 2 futures (chunks) ...
[08:05:14.515] | :  - Number of value chunks collected: 2
[08:05:14.515] | : Resolving 2 futures (chunks) ... DONE
[08:05:14.515] | : Reducing values from 2 chunks ...
[08:05:14.515] | :  - Number of values collected after concatenation: 10
[08:05:14.516] | :  - Number of values expected: 10
[08:05:14.516] | : Reducing values from 2 chunks ... DONE
[08:05:14.516] | future_lapply() -> future_xapply() ... done
[08:05:14.516] future_lapply() ... done
List of 10
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
maxSize = 2305.6 bytes
future.globals.maxSize = 2305.6 bytes
[08:05:14.519] future_lapply() ...
[08:05:14.520] | Globals in FUN(): [n=2] ‘{’, ‘getOption’
[08:05:14.520] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:14.520] | future_lapply() -> future_xapply() ...
[08:05:14.520] | : Number of chunks: 1
[08:05:14.521] | : getGlobalsAndPackagesXApply() ...
[08:05:14.521] | : . future.globals: TRUE
[08:05:14.526] | : . globals found/used: [n=1] ‘FUN’
[08:05:14.526] | : . needed namespaces: [n=0] 
[08:05:14.526] | : . use_args: TRUE
[08:05:14.526] | : . Getting '...' globals ...
[08:05:14.527] | : . ' '...' content: [n=0] 
[08:05:14.527] | : . ' List of 1
[08:05:14.527] | : . '  $ ...: list()
[08:05:14.527] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:14.527] | : . '  - attr(*, "where")=List of 1
[08:05:14.527] | : . '   ..$ ...:<environment: 0x5595af618698> 
[08:05:14.527] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:14.527] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:14.527] | : . '  - attr(*, "total_size")= num NA
[08:05:14.529] | : . Getting '...' globals ... done
[08:05:14.529] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:14.529] | : . List of 2
[08:05:14.529] | : .  $ ...future.FUN:function (x)  
[08:05:14.529] | : .  $ ...          : list()
[08:05:14.529] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:14.529] | : .  - attr(*, "where")=List of 2
[08:05:14.529] | : .   ..$ ...future.FUN:<environment: 0x5595af618698> 
[08:05:14.529] | : .   ..$ ...          :<environment: 0x5595af618698> 
[08:05:14.529] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:14.529] | : .  - attr(*, "resolved")= logi FALSE
[08:05:14.529] | : .  - attr(*, "total_size")= num 5085
[08:05:14.532] | : . Packages to be attached in all futures: [n=0] 
[08:05:14.532] | : getGlobalsAndPackagesXApply() ... done
[08:05:14.532] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:14.533] | : List of 5
[08:05:14.533] | :  $ ...future.FUN            :function (x)  
[08:05:14.533] | :  $ ...                      : list()
[08:05:14.533] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:14.533] | :  $ ...future.elements_ii    : NULL
[08:05:14.533] | :  $ ...future.seeds_ii       : NULL
[08:05:14.533] | :  $ ...future.globals.maxSize: NULL
[08:05:14.533] | :  - attr(*, "where")=List of 5
[08:05:14.533] | :   ..$ ...future.FUN            :<environment: 0x5595af618698> 
[08:05:14.533] | :   ..$ ...                      :<environment: 0x5595af618698> 
[08:05:14.533] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:14.533] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:14.533] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:14.533] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:14.533] | :  - attr(*, "resolved")= logi FALSE
[08:05:14.533] | :  - attr(*, "total_size")= num 5085
[08:05:14.537] | : Number of futures (= number of chunks): 1
[08:05:14.537] | : Launching 1 futures (chunks) ...
[08:05:14.537] | : Chunk #1 of 1 ...
[08:05:14.537] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:14.537] | :    + additional globals found: [n=0] 
[08:05:14.538] | :    + additional namespaces needed: [n=0] 
[08:05:14.538] | :  - Finding globals in 'X' for chunk #1 ... DONE
[08:05:14.538] | :  - seeds: <none>
[08:05:14.538] | :  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:14.636] | : Created future:
[08:05:14.637] | : MultisessionFuture:
[08:05:14.637] | : Label: ‘future_lapply-1’
[08:05:14.637] | : Expression:
[08:05:14.637] | : {
[08:05:14.637] | :     "# future::getGlobalsAndPackages(): wrapping the original future"
[08:05:14.637] | :     "# expression in do.call(), because function called uses '...'  "
[08:05:14.637] | :     "# as a global variable                                         "
[08:05:14.637] | :     do.call(function(...) {
[08:05:14.637] | :         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[08:05:14.637] | :         "# without having an '...' argument. This means '...' is treated"
[08:05:14.637] | :         "# as a global variable. This may happen when FUN() is an       "
[08:05:14.637] | :         "# anonymous function.                                          "
[08:05:14.637] | :         "#                                                              "
[08:05:14.637] | :         "# If an anonymous function, we will make sure to restore the   "
[08:05:14.637] | :         "# function environment of FUN() to the calling environment.    "
[08:05:14.637] | :         "# We assume FUN() an anonymous function if it lives in the     "
[08:05:14.637] | :         "# global environment, which is where globals are written.      "
[08:05:14.637] | :         penv <- env <- environment(...future.FUN)
[08:05:14.637] | :         repeat {
[08:05:14.637] | :             if (identical(env, globalenv()) || identical(env, 
[08:05:14.637] | :                 emptyenv())) 
[08:05:14.637] | :                 break
[08:05:14.637] | :             penv <- env
[08:05:14.637] | :             env <- parent.env(env)
[08:05:14.637] | :         }
[08:05:14.637] | :         if (identical(penv, globalenv())) {
[08:05:14.637] | :             environment(...future.FUN) <- environment()
[08:05:14.637] | :         }
[08:05:14.637] | :         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[08:05:14.637] | :             !isNamespace(penv)) {
[08:05:14.637] | :             parent.env(penv) <- environment()
[08:05:14.637] | :         }
[08:05:14.637] | :         rm(list = c("env", "penv"), inherits = FALSE)
[08:05:14.637] | :         {
[08:05:14.637] | :             "# future.apply:::future_xapply(): preserve future option"
[08:05:14.637] | :             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[08:05:14.637] | :             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[08:05:14.637] | :                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[08:05:14.637] | :                 on.exit(options(oopts), add = TRUE)
[08:05:14.637] | :             }
[08:05:14.637] | :             {
[08:05:14.637] | :                 "# future.apply::future_lapply(): process chunk of elements"
[08:05:14.637] | :                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[08:05:14.637] | :                   ...future.X_jj <- ...future.elements_ii[[jj]]
[08:05:14.637] | :                   {
[08:05:14.637] | :                     ...future.FUN(...future.X_jj, ...)
[08:05:14.637] | :                   }
[08:05:14.637] | :                 })
[08:05:14.637] | :             }
[08:05:14.637] | :         }
[08:05:14.637] | :     }, args = future.call.arguments)
[08:05:14.637] | : }
[08:05:14.637] | : Globals: 5 objects totaling 5.98 KiB (list ‘...future.elements_ii’ of 825 bytes, function ‘...future.FUN’ of 407 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes, NULL ‘...future.seeds_ii’ of 27 bytes)
[08:05:14.637] | : Packages: <none>
[08:05:14.637] | : L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[08:05:14.637] | : Capture standard output: TRUE
[08:05:14.637] | : Capture condition classes: ‘condition’ (excluding ‘<none>’)
[08:05:14.637] | : Immediate condition classes: ‘immediateCondition’
[08:05:14.637] | : Lazy evaluation: FALSE
[08:05:14.637] | : Local evaluation: TRUE
[08:05:14.637] | : Asynchronous evaluation: TRUE
[08:05:14.637] | : Early signaling: FALSE
[08:05:14.637] | : Environment: R_GlobalEnv
[08:05:14.637] | : State: ‘running’
[08:05:14.637] | : Resolved: FALSE
[08:05:14.637] | : Unique identifier: fb61e0d8966103bfb5cadce9e0361ad4-64
[08:05:14.637] | : Owner process: fb61e0d8966103bfb5cadce9e0361ad4
[08:05:14.637] | : Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:05:14.637] | : Value: <not collected>
[08:05:14.637] | : Conditions captured: <none>
[08:05:14.649] | : Chunk #1 of 1 ... DONE
[08:05:14.649] | : Launching 1 futures (chunks) ... DONE
[08:05:14.649] | : Resolving 1 futures (chunks) ...
[08:05:14.692] | :  - Number of value chunks collected: 1
[08:05:14.692] | : Resolving 1 futures (chunks) ... DONE
[08:05:14.692] | : Reducing values from 1 chunks ...
[08:05:14.692] | :  - Number of values collected after concatenation: 10
[08:05:14.692] | :  - Number of values expected: 10
[08:05:14.692] | : Reducing values from 1 chunks ... DONE
[08:05:14.692] | future_lapply() -> future_xapply() ... done
[08:05:14.692] future_lapply() ... done
List of 10
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
 $ : num 2306
maxSize = 2305.6 bytes
future.globals.maxSize = 2305.6 bytes

> y <- NULL

> options(future.globals.maxSize = oMaxSize)

> message("*** future_lapply() - too large ... DONE")
*** future_lapply() - too large ... DONE

> message("*** future_lapply() - globals exceptions ...")
*** future_lapply() - globals exceptions ...

> res <- tryCatch({
+     y <- future_lapply(1, FUN = function(x) x, future.globals = 42)
+ }, error = identity)
[08:05:14.699] future_lapply() ...
[08:05:14.700] | Globals in FUN(): [n=0] 
[08:05:14.700] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:14.700] | future_lapply() -> future_xapply() ...
[08:05:14.700] | : Number of chunks: 1
[08:05:14.700] | : getGlobalsAndPackagesXApply() ...
[08:05:14.701] | : getGlobalsAndPackagesXApply() ... done
[08:05:14.701] | future_lapply() -> future_xapply() ... done
[08:05:14.701] future_lapply() ... done

> stopifnot(inherits(res, "error"))

> res <- tryCatch({
+     y <- future_lapply(1, FUN = function(x) x, future.globals = list(1))
+ }, error = identity)
[08:05:14.701] future_lapply() ...
[08:05:14.701] | Globals in FUN(): [n=0] 
[08:05:14.702] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:14.702] | future_lapply() -> future_xapply() ...
[08:05:14.702] | : Number of chunks: 1
[08:05:14.702] | : getGlobalsAndPackagesXApply() ...
[08:05:14.702] | : . future.globals: <name-value list> with names 
[08:05:14.702] | : getGlobalsAndPackagesXApply() ... done
[08:05:14.702] | future_lapply() -> future_xapply() ... done
[08:05:14.702] future_lapply() ... done

> stopifnot(inherits(res, "error"))

> res <- tryCatch({
+     y <- future_lapply(1, FUN = function(x) x, future.globals = "...future.FUN")
+ }, error = identity)
[08:05:14.703] future_lapply() ...
[08:05:14.703] | Globals in FUN(): [n=0] 
[08:05:14.703] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:14.703] | future_lapply() -> future_xapply() ...
[08:05:14.704] | : Number of chunks: 1
[08:05:14.704] | : getGlobalsAndPackagesXApply() ...
[08:05:14.704] | : . future.globals: ‘...future.FUN’
[08:05:14.704] | : . use_args: TRUE
[08:05:14.704] | : getGlobalsAndPackagesXApply() ... done
[08:05:14.704] | future_lapply() -> future_xapply() ... done
[08:05:14.704] future_lapply() ... done

> stopifnot(inherits(res, "error"))

> res <- tryCatch({
+     y <- future_lapply(1, FUN = function(x) x, future.globals = "...future.FUN")
+ }, error = identity)
[08:05:14.705] future_lapply() ...
[08:05:14.705] | Globals in FUN(): [n=0] 
[08:05:14.705] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:14.705] | future_lapply() -> future_xapply() ...
[08:05:14.705] | : Number of chunks: 1
[08:05:14.706] | : getGlobalsAndPackagesXApply() ...
[08:05:14.706] | : . future.globals: ‘...future.FUN’
[08:05:14.706] | : . use_args: TRUE
[08:05:14.706] | : getGlobalsAndPackagesXApply() ... done
[08:05:14.706] | future_lapply() -> future_xapply() ... done
[08:05:14.706] future_lapply() ... done

> stopifnot(inherits(res, "error"))

> ...future.elements_ii <- 42

> X <- list(function() 2 * ...future.elements_ii)

> res <- tryCatch({
+     y <- future_lapply(X, FUN = function(f) f())
+ }, error = identity)
[08:05:14.707] future_lapply() ...
[08:05:14.707] | Globals in FUN(): [n=0] 
[08:05:14.707] | => Will pass '...' to FUN(): ‘{’, ‘    ...future.FUN(...future.X_jj, ...)’, ‘}’
[08:05:14.707] | future_lapply() -> future_xapply() ...
[08:05:14.707] | : Number of chunks: 1
[08:05:14.708] | : getGlobalsAndPackagesXApply() ...
[08:05:14.708] | : . future.globals: TRUE
[08:05:14.711] | : . globals found/used: [n=1] ‘FUN’
[08:05:14.711] | : . needed namespaces: [n=0] 
[08:05:14.711] | : . use_args: TRUE
[08:05:14.711] | : . Getting '...' globals ...
[08:05:14.712] | : . ' '...' content: [n=0] 
[08:05:14.712] | : . ' List of 1
[08:05:14.712] | : . '  $ ...: list()
[08:05:14.712] | : . '   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:14.712] | : . '  - attr(*, "where")=List of 1
[08:05:14.712] | : . '   ..$ ...:<environment: 0x5595af060538> 
[08:05:14.712] | : . '  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:14.712] | : . '  - attr(*, "resolved")= logi TRUE
[08:05:14.712] | : . '  - attr(*, "total_size")= num NA
[08:05:14.714] | : . Getting '...' globals ... done
[08:05:14.715] | : . Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[08:05:14.715] | : . List of 2
[08:05:14.715] | : .  $ ...future.FUN:function (f)  
[08:05:14.715] | : .  $ ...          : list()
[08:05:14.715] | : .   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:14.715] | : .  - attr(*, "where")=List of 2
[08:05:14.715] | : .   ..$ ...future.FUN:<environment: 0x5595af060538> 
[08:05:14.715] | : .   ..$ ...          :<environment: 0x5595af060538> 
[08:05:14.715] | : .  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:14.715] | : .  - attr(*, "resolved")= logi FALSE
[08:05:14.715] | : .  - attr(*, "total_size")= num 3255
[08:05:14.718] | : . Packages to be attached in all futures: [n=0] 
[08:05:14.718] | : getGlobalsAndPackagesXApply() ... done
[08:05:14.718] | : Globals pass to each chunk: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[08:05:14.718] | : List of 5
[08:05:14.718] | :  $ ...future.FUN            :function (f)  
[08:05:14.718] | :  $ ...                      : list()
[08:05:14.718] | :   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[08:05:14.718] | :  $ ...future.elements_ii    : NULL
[08:05:14.718] | :  $ ...future.seeds_ii       : NULL
[08:05:14.718] | :  $ ...future.globals.maxSize: NULL
[08:05:14.718] | :  - attr(*, "where")=List of 5
[08:05:14.718] | :   ..$ ...future.FUN            :<environment: 0x5595af060538> 
[08:05:14.718] | :   ..$ ...                      :<environment: 0x5595af060538> 
[08:05:14.718] | :   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[08:05:14.718] | :   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[08:05:14.718] | :   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[08:05:14.718] | :  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:05:14.718] | :  - attr(*, "resolved")= logi FALSE
[08:05:14.718] | :  - attr(*, "total_size")= num 3255
[08:05:14.722] | : Number of futures (= number of chunks): 1
[08:05:14.722] | : Launching 1 futures (chunks) ...
[08:05:14.722] | : Chunk #1 of 1 ...
[08:05:14.722] | :  - Finding globals in 'X' for chunk #1 ...
[08:05:14.728] | :    + additional globals found: [n=1] ‘...future.elements_ii’
[08:05:14.728] | :    + additional namespaces needed: [n=0] 
[08:05:14.728] | : onError() ...
[08:05:14.729] | : . Received <simpleError>
Warning: Caught simpleError. Canceling all iterations ...
[08:05:14.729] | : . Signaling: <simpleError>
[08:05:14.729] | : onError() ... done
[08:05:14.729] | future_lapply() -> future_xapply() ... done
[08:05:14.729] future_lapply() ... done

> stopifnot(inherits(res, "error"))

> message("*** future_lapply() - globals exceptions ... DONE")
*** future_lapply() - globals exceptions ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=5s, sys.self=0.2s, elapsed=9s, user.child=0.2s, sys.child=0.4s
Test ‘future_lapply,globals’ ... success
> 
