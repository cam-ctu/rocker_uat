
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-future_lapply.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future.apply:::testme("future_lapply")
Test ‘future_lapply’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future.apply/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future.apply/testme/test-future_lapply.R’

> library(future.apply)
Loading required package: future

> library(listenv)

> message("*** future_lapply() ...")
*** future_lapply() ...

> x_a <- list(a = "integer", b = "numeric", c = "character", 
+     c = "list")

> str(list(x_a = x_a))
List of 1
 $ x_a:List of 4
  ..$ a: chr "integer"
  ..$ b: chr "numeric"
  ..$ c: chr "character"
  ..$ c: chr "list"

> y_a <- lapply(x_a, FUN = base::vector, length = 2)

> str(list(y_a = y_a))
List of 1
 $ y_a:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL

> x_b <- list(a = c("hello", b = 1:100))

> str(list(x_b = x_b))
List of 1
 $ x_b:List of 1
  ..$ a: Named chr [1:101] "hello" "1" "2" "3" ...
  .. ..- attr(*, "names")= chr [1:101] "" "b1" "b2" "b3" ...

> y_b <- lapply(x_b, FUN = future:::hpaste, collapse = "; ", 
+     maxHead = 3)

> str(list(y_b = y_b))
List of 1
 $ y_b:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"

> x_c <- list()

> y_c <- listenv()

> y_c$A <- 3

> x_c$a <- y_c

> y_c <- listenv()

> y_c$A <- 3

> y_c$B <- c("hello", b = 1:100)

> x_c$b <- y_c

> print(x_c)
$a
A ‘listenv’ vector with 1 element (‘A’).

$b
A ‘listenv’ vector with 2 elements (‘A’, ‘B’).


> y_c <- lapply(x_c, FUN = listenv::mapping)

> str(list(y_c = y_c))
List of 1
 $ y_c:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"

> for (cores in 1:availCores) {
+     message(sprintf("Testing with %d cores ...", cores))
+     options(mc.cores = cores)
+     strategies <- support .... [TRUNCATED] 
Testing with 1 cores ...
- plan('sequential') ...
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN, ...) for large length(x) ...
- future_lapply(x, FUN = table, ...) ...
- future_lapply(x, ...) where length(x) != length(as.list(x)) ...
- future_lapply(x, ...) where x[[i]] subsets via S3 method ...
- plan('multicore') ...
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN, ...) for large length(x) ...
- future_lapply(x, FUN = table, ...) ...
- future_lapply(x, ...) where length(x) != length(as.list(x)) ...
- future_lapply(x, ...) where x[[i]] subsets via S3 method ...
- plan('multisession') ...
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN, ...) for large length(x) ...
- future_lapply(x, FUN = table, ...) ...
- future_lapply(x, ...) where length(x) != length(as.list(x)) ...
- future_lapply(x, ...) where x[[i]] subsets via S3 method ...
Testing with 1 cores ... DONE
Testing with 2 cores ...
- plan('sequential') ...
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN, ...) for large length(x) ...
- future_lapply(x, FUN = table, ...) ...
- future_lapply(x, ...) where length(x) != length(as.list(x)) ...
- future_lapply(x, ...) where x[[i]] subsets via S3 method ...
- plan('multicore') ...
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN, ...) for large length(x) ...
- future_lapply(x, FUN = table, ...) ...
- future_lapply(x, ...) where length(x) != length(as.list(x)) ...
- future_lapply(x, ...) where x[[i]] subsets via S3 method ...
- plan('multisession') ...
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN = vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = base::vector, ...) ...
List of 1
 $ y:List of 4
  ..$ a: int [1:2] 0 0
  ..$ b: num [1:2] 0 0
  ..$ c: chr [1:2] "" ""
  ..$ c:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
- future_lapply(x, FUN = future:::hpaste, ...) ...
List of 1
 $ y:List of 1
  ..$ a: chr "hello; 1; 2; ...; 100"
- future_lapply(x, FUN = listenv::listenv, ...) ...
List of 1
 $ y:List of 2
  ..$ a: Named chr "A"
  .. ..- attr(*, "names")= chr "A"
  ..$ b: Named chr [1:2] "A" "B"
  .. ..- attr(*, "names")= chr [1:2] "A" "B"
- future_lapply(x, FUN, ...) for large length(x) ...
- future_lapply(x, FUN = table, ...) ...
- future_lapply(x, ...) where length(x) != length(as.list(x)) ...
- future_lapply(x, ...) where x[[i]] subsets via S3 method ...
Testing with 2 cores ... DONE

> message("*** future_lapply() - special cases ...")
*** future_lapply() - special cases ...

> X <- list()

> names(X) <- character(0)

> y <- future_lapply(X, FUN = identity)

> stopifnot(length(y) == 0, !is.null(names(y)), identical(y, 
+     X))

> X <- character(0)

> y0 <- lapply(X, FUN = identity)

> y <- future_lapply(X, FUN = identity)

> stopifnot(identical(y, y0))

> X <- character(0)

> names(X) <- character(0)

> y0 <- lapply(X, FUN = identity)

> y <- future_lapply(X, FUN = identity)

> stopifnot(identical(y, y0))

> message("*** future_lapply() - special cases ... DONE")
*** future_lapply() - special cases ... DONE

> message("*** future_lapply() - exceptions ...")
*** future_lapply() - exceptions ...

> res <- tryCatch({
+     future_lapply(1:3, FUN = identity, future.chunk.size = structure(1, 
+         ordering = "invalid"))
+ }, error = identity)

> stopifnot(inherits(res, "error"))

> message("*** future_lapply() - exceptions ... DONE")
*** future_lapply() - exceptions ... DONE

> message("*** future_lapply() ... DONE")
*** future_lapply() ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future.apply/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=9s, sys.self=0.5s, elapsed=1e+01s, user.child=0.4s, sys.child=0.8s
Test ‘future_lapply’ ... success
> 
