
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## Subject: [Bug 18417] factanal returns useless SS loading values
> ## Date: Sat, 22 Mar 2025 23:21:10 +0000
> ## --- Comment #21 from Coen Bernaards
> 
> ## create unrotated loadings matrix
> data(ability.cov, package="datasets")
> res <- factanal(covmat = ability.cov$cov, factors = 3, rotation = "none")
> 
> if(FALSE) {
+     ## create the output from oblimin of GPArotation as a list;
+     require(GPArotation)
+     ## keep only what's needed from rotation:
+     keepImp <- function(rot)
+         `[<-`(rot, setdiff(names(rot), c("loadings", "Phi", "Th", "orthogonal")), NULL)
+     set.seed(100)
+     obli100 <- keepImp(oblimin(res$loadings, Tmat = Random.Start(3), eps = 1e-8, maxit = 10000))
+     set.seed(108)
+     obli108 <- keepImp(oblimin(res$loadings, eps = 1e-7, randomStarts = 1))
+     saveRDS(obli100, "obli100.rds")
+     saveRDS(obli108, "obli108.rds")
+ }
> 
> obli100 <- readRDS("obli100.rds") # in ../stats/tests/
> ## perform the factanal using this oblimin rotation
> if(getRversion() >= "4.5") { # rotation now may be _function_
+   resO100 <- factanal(covmat = ability.cov$cov, factors = 3, rotation = \(...) obli100)
+ } else { ## old R:
+   obli_FN <- function(...) obli100
+   resO100 <- factanal(covmat = ability.cov$cov, factors = 3, rotation = "obli_FN")
+ }
> resO100 # print.factanal(..)  --> print.loadings(..)

Call:
factanal(factors = 3, covmat = ability.cov$cov, rotation = function(...) obli100)

Uniquenesses:
general picture  blocks    maze reading   vocab 
  0.441   0.217   0.329   0.580   0.040   0.336 

Loadings:
        Factor1 Factor2 Factor3
general  0.410   0.245   0.302 
picture          0.894         
blocks           0.363   0.544 
maze            -0.116   0.702 
reading  1.003                 
vocab    0.792                 

            Factor1 Factor2 Factor3
SS loadings   1.896   1.124   1.037

Factor Correlations:
        Factor1 Factor2 Factor3
Factor1   1.000   0.341   0.391
Factor2   0.341   1.000   0.496
Factor3   0.391   0.496   1.000

The degrees of freedom for the model is 0 and the fit was 0 
> 
> oriL <-   res     $ loadings
> ldns   <- resO100 $ loadings
> rotmat <- resO100 $ rotmat
> # max |diff| between unrotated and recreated unrotated loadings should be near zero:
> print.default(dev <- ldns %*% solve(rotmat) - oriL)
                 [,1]          [,2]          [,3]
general  2.129519e-12 -3.187117e-12 -1.001643e-12
picture  3.390455e-12 -2.012945e-12 -2.192690e-13
blocks   3.348377e-12 -1.913247e-12 -4.857226e-13
maze     1.996903e-12 -1.078193e-12 -5.045964e-13
reading -1.280642e-12 -4.263243e-12 -7.034512e-13
vocab    4.329870e-13 -4.262667e-12 -1.066328e-12
attr(,"class")
[1] "loadings"
> stopifnot(max(abs(dev)) < 1e-9) # max|dev| was 2.000982 (R <= 4.4.x),
> ##                                now 2.22e-16 [Lnx x86_64, gcc]; 6e-12 on M1mac
> 
> ldns # prints loadings too

Loadings:
        Factor1 Factor2 Factor3
general  0.410   0.245   0.302 
picture          0.894         
blocks           0.363   0.544 
maze            -0.116   0.702 
reading  1.003                 
vocab    0.792                 

            Factor1 Factor2 Factor3
SS loadings   1.896   1.124   1.037
> ## check the "SS loadings .... " line
> L <- ldns
> Phi <- attr(L, "covariance")
> print(digits = 11, SSld <- diag(Phi %*% crossprod(L)))
[1] 1.8964924541 1.1243062406 1.0373362639
> stopifnot(all.equal(c(1.8964924541, 1.1243062406, 1.0373362639), SSld)) # seen  8.49e-12
> 
> ##----------- Checking rotmat in the 108 case ------------------
> ## [Bug 18886] New: R 4.5.0: rotmat not correctly updated  in factanal sortLoadings
> ## 20 Apr 2025 / Reporter: coen.bernaards@gmail.com
> 
> obli108 <- readRDS("obli108.rds")
> 
> res108 <- factanal(covmat = ability.cov$cov, factors = 3, rotation = \(...) obli108)
> res108

Call:
factanal(factors = 3, covmat = ability.cov$cov, rotation = function(...) obli108)

Uniquenesses:
general picture  blocks    maze reading   vocab 
  0.441   0.217   0.329   0.580   0.040   0.336 

Loadings:
        Factor1 Factor2 Factor3
general  0.410   0.245   0.302 
picture          0.894         
blocks           0.363   0.544 
maze            -0.116   0.702 
reading  1.003                 
vocab    0.792                 

            Factor1 Factor2 Factor3
SS loadings   1.896   1.124   1.037

Factor Correlations:
        Factor1 Factor2 Factor3
Factor1   1.000   0.341   0.391
Factor2   0.341   1.000   0.496
Factor3   0.391   0.496   1.000

The degrees of freedom for the model is 0 and the fit was 0 
> (Cov <- tcrossprod( solve(res108$rotmat) ))
          [,1]      [,2]      [,3]
[1,] 1.0000000 0.3408633 0.3905565
[2,] 0.3408633 1.0000000 0.4961548
[3,] 0.3905565 0.4961548 1.0000000
> ## this difference should be near 0 but was not:
> (Dcov <- attr(res108$loadings, "covariance")  -  Cov) # seen 3.33e-16, 4.44e-16 [Lnx x86_64, gcc]
             [,1]          [,2]          [,3]
[1,] 0.000000e+00  0.000000e+00  5.551115e-17
[2,] 0.000000e+00  2.220446e-16 -5.551115e-17
[3,] 5.551115e-17 -5.551115e-17  3.330669e-16
> stopifnot(max(abs(Dcov)) < 1e-9)
> 
