
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###----------------- sparse / dense   interpSpline() ---------------------------
> 
> ## This requires recommended package Matrix.
> 
> if(!requireNamespace("Matrix", quietly = TRUE)) q()
> 
> require("splines")
Loading required package: splines
> 
> ## from  help(interpSpline) -- ../man/interpSpline.Rd
> ispl <- interpSpline( women$height, women$weight)
> isp. <- interpSpline( women$height, women$weight, sparse=TRUE)
Warning message:
'Matrix::..2dge' is deprecated.
Use '.dense2g' instead.
See help("Deprecated") and help("Matrix-deprecated"). 
> stopifnot(all.equal(ispl, isp., tol = 1e-12)) # seen 1.65e-14
> 
> ##' @title Interpolate size-n version of the 'women' data sparsely and densely
> ##' @param n size of "women-like" data to interpolate
> ##' @return list with dense and sparse \code{\link{system.time}()}s
> ##' @author Martin Maechler
> ipStime <- function(n) { # and using 'ispl'
+     h <- seq(55, 75, length.out = n)
+     w <- predict(ispl, h)$y
+     c.d <- system.time(is.d <- interpSpline(h, w, sparse=FALSE))
+     c.s <- system.time(is.s <- interpSpline(h, w, sparse=TRUE ))
+     stopifnot(all.equal(is.d, is.s, tol = 1e-7)) # seen 9.4e-10 (n=1000), 1.3e-7 (n=5000)
+     list(d.time = c.d, s.time = c.s)
+ }
> 
> n.s <- 25 * round(2^seq(1,6, by=.5))
> if(!interactive())# save 'check time'
+     n.s <- n.s[100 <= n.s & n.s <= 800]
> (ipL <- lapply(setNames(n.s, paste0("n=",n.s)), ipStime))
$`n=100`
$`n=100`$d.time
   user  system elapsed 
  0.006   0.001   0.003 

$`n=100`$s.time
   user  system elapsed 
  0.021   0.030   0.021 


$`n=150`
$`n=150`$d.time
   user  system elapsed 
  0.001   0.005   0.003 

$`n=150`$s.time
   user  system elapsed 
  0.006   0.007   0.003 


$`n=200`
$`n=200`$d.time
   user  system elapsed 
  0.003   0.002   0.002 

$`n=200`$s.time
   user  system elapsed 
  0.002   0.010   0.004 


$`n=275`
$`n=275`$d.time
   user  system elapsed 
  0.003   0.006   0.003 

$`n=275`$s.time
   user  system elapsed 
  0.002   0.011   0.004 


$`n=400`
$`n=400`$d.time
   user  system elapsed 
  0.005   0.011   0.006 

$`n=400`$s.time
   user  system elapsed 
  0.003   0.011   0.004 


$`n=575`
$`n=575`$d.time
   user  system elapsed 
  0.008   0.020   0.009 

$`n=575`$s.time
   user  system elapsed 
  0.006   0.007   0.004 


$`n=800`
$`n=800`$d.time
   user  system elapsed 
  0.036   0.015   0.015 

$`n=800`$s.time
   user  system elapsed 
  0.006   0.001   0.004 


Warning messages:
1: 'Matrix::..2dge' is deprecated.
Use '.dense2g' instead.
See help("Deprecated") and help("Matrix-deprecated"). 
2: 'Matrix::..2dge' is deprecated.
Use '.dense2g' instead.
See help("Deprecated") and help("Matrix-deprecated"). 
3: 'Matrix::..2dge' is deprecated.
Use '.dense2g' instead.
See help("Deprecated") and help("Matrix-deprecated"). 
4: 'Matrix::..2dge' is deprecated.
Use '.dense2g' instead.
See help("Deprecated") and help("Matrix-deprecated"). 
5: 'Matrix::..2dge' is deprecated.
Use '.dense2g' instead.
See help("Deprecated") and help("Matrix-deprecated"). 
6: 'Matrix::..2dge' is deprecated.
Use '.dense2g' instead.
See help("Deprecated") and help("Matrix-deprecated"). 
7: 'Matrix::..2dge' is deprecated.
Use '.dense2g' instead.
See help("Deprecated") and help("Matrix-deprecated"). 
> ## sparse is *an order of magnitude* faster for n ~= 1000 but somewhat slower for n ~< 200:
> sapply(ipL, function(ip) round(ip$d.time / ip$s.time, 1)[c(1,3)])
          n=100 n=150 n=200 n=275 n=400 n=575 n=800
user.self   0.3   0.2   1.5   1.5   1.7   1.3   6.0
elapsed     0.1   1.0   0.5   0.7   1.5   2.3   3.8
> ##           n=50 n=75 n=100 n=150 n=200 n=275 n=400 n=575 n=800 n=1125 n=1600 -- nb-mm4, i7-5600U
> ## user.self  0.5  0.5   0.5   0.5   0.7   2.5   4.3  12.3  33.7   70.5  116.1
> ## elapsed    0.5  0.3   0.5   0.7   1.0   2.5   4.3  13.0  26.2   57.4  117.3
> 
