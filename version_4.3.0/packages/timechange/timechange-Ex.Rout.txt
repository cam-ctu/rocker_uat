
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "timechange"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('timechange')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("time-zones")
> ### * time-zones
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: time-zones
> ### Title: Time-zone manipulation
> ### Aliases: time-zones time_at_tz time_force_tz time_clock_at_tz
> 
> ### ** Examples
> 
> 
> x <- as.POSIXct("2009-08-07 00:00:00", tz = "America/New_York")
> time_at_tz(x, "UTC")
[1] "2009-08-07 04:00:00 UTC"
> time_force_tz(x, "UTC")
[1] "2009-08-07 UTC"
> time_force_tz(x, "Europe/Amsterdam")
[1] "2009-08-07 CEST"
> 
> 
> ## DST skip:
> 
> y <- as.POSIXct("2010-03-14 02:05:05", tz = "UTC")
> time_force_tz(y, "America/New_York", roll = "boundary")
[1] "2010-03-14 03:00:00 EDT"
> time_force_tz(y, "America/New_York", roll = "post")
[1] "2010-03-14 03:05:05 EDT"
> time_force_tz(y, "America/New_York", roll = "pre")
[1] "2010-03-14 01:05:05 EST"
> time_force_tz(y, "America/New_York", roll = "NA")
[1] NA
> 
> 
> ## DST skipped and repeated
> 
> y <- as.POSIXct(c("2010-03-14 02:05:05 UTC", "2014-11-02 01:35:00"), tz = "UTC")
> time_force_tz(y, "America/New_York", roll_dst = c("NA", "pre"))
[1] NA                        "2014-11-02 01:35:00 EDT"
> time_force_tz(y, "America/New_York", roll_dst = c("boundary", "post"))
[1] "2010-03-14 03:00:00 EDT" "2014-11-02 01:35:00 EST"
> 
> ## Heterogeneous time-zones:
> 
> x <- as.POSIXct(c("2009-08-07 00:00:01", "2009-08-07 01:02:03"), tz = "UTC")
> time_force_tz(x, tz = c("America/New_York", "Europe/Amsterdam"))
[1] "2009-08-07 00:00:01 EDT" "2009-08-06 19:02:03 EDT"
> time_force_tz(x, tz = c("America/New_York", "Europe/Amsterdam"), tzout = "America/New_York")
[1] "2009-08-07 00:00:01 EDT" "2009-08-06 19:02:03 EDT"
> 
> x <- as.POSIXct("2009-08-07 00:00:01", tz = "UTC")
> time_force_tz(x, tz = c("America/New_York", "Europe/Amsterdam"))
[1] "2009-08-07 00:00:01 EDT" "2009-08-06 18:00:01 EDT"
> 
> ## Local clock:
> x <- as.POSIXct(c("2009-08-07 01:02:03", "2009-08-07 10:20:30"), tz = "UTC")
> time_clock_at_tz(x, units = "secs")
Time differences in secs
[1]  3723 37230
> time_clock_at_tz(x, units = "hours")
Time differences in hours
[1]  1.034167 10.341667
> time_clock_at_tz(x, "Europe/Amsterdam")
Time differences in secs
[1] 10923 44430
> 
> x <- as.POSIXct("2009-08-07 01:02:03", tz = "UTC")
> time_clock_at_tz(x, tz = c("America/New_York", "Europe/Amsterdam", "Asia/Shanghai"), unit = "hours")
Time differences in hours
[1] 21.034167  3.034167  9.034167
> 
> 
> 
> cleanEx()
> nameEx("time_add")
> ### * time_add
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: time_add
> ### Title: Arithmetics with periods
> ### Aliases: time_add time_subtract
> 
> ### ** Examples
> 
> 
> # Addition
> 
> ## Month gap
> x <- as.POSIXct("2000-01-31 01:02:03", tz = "America/Chicago")
> time_add(x, month = 1, roll_month = "postday")
[1] "2000-03-01 01:02:03 CST"
> time_add(x, month = 1, roll_month = "preday")
[1] "2000-02-29 01:02:03 CST"
> time_add(x, month = 1, roll_month = "boundary")
[1] "2000-03-01 CST"
> time_add(x, month = 1, roll_month = "full")
[1] "2000-03-02 01:02:03 CST"
> time_add(x, month = 1, roll_month = "NA")
[1] NA
> time_add(x, month = 1, day = 3,  roll_month = "postday")
[1] "2000-03-04 01:02:03 CST"
> time_add(x, month = 1, day = 3,  roll_month = "preday")
[1] "2000-03-03 01:02:03 CST"
> time_add(x, month = 1, day = 3,  roll_month = "boundary")
[1] "2000-03-04 CST"
> time_add(x, month = 1, day = 3,  roll_month = "full")
[1] "2000-03-05 01:02:03 CST"
> time_add(x, month = 1, day = 3,  roll_month = "NA")
[1] NA
> 
> ## DST gap
> x <- as.POSIXlt("2010-03-14 01:02:03", tz = "America/Chicago")
> time_add(x, hour = 1, minute = 50, roll_dst = "pre")
[1] "2010-03-14 01:52:03 CST"
> time_add(x, hour = 1, minute = 50, roll_dst = "boundary")
[1] "2010-03-14 03:00:00 CDT"
> time_add(x, hour = 1, minute = 50, roll_dst = "post")
[1] "2010-03-14 03:52:03 CDT"
> ##' time_add(x, hours = 1, minutes = 50, roll_dst = "NA")
> 
> ## DST repeated time with cross-first and cross-last
> (tt <- as.POSIXct(c("2014-11-02 00:15:00", "2014-11-02 02:15:00"), tz = "America/New_York"))
[1] "2014-11-02 00:15:00 EDT" "2014-11-02 02:15:00 EST"
> time_add(tt, hours = c(1, -1), roll_dst = "pre")
[1] "2014-11-02 01:15:00 EDT" "2014-11-02 01:15:00 EDT"
> time_add(tt, hours = c(1, -1), roll_dst = "post")
[1] "2014-11-02 01:15:00 EST" "2014-11-02 01:15:00 EST"
> time_add(tt, hours = c(1, -1), roll_dst = "xfirst")
[1] "2014-11-02 01:15:00 EDT" "2014-11-02 01:15:00 EST"
> time_add(tt, hours = c(1, -1), roll_dst = "xlast")
[1] "2014-11-02 01:15:00 EST" "2014-11-02 01:15:00 EDT"
> 
> ## DST skip with cross-first and cross-last
> cst <- as.POSIXlt("2010-03-14 01:02:03", tz = "America/Chicago")
> cdt <- as.POSIXlt("2010-03-14 03:02:03", tz = "America/Chicago")
> time_add(cst, hour = 1, roll_dst = "xfirst")
[1] "2010-03-14 01:02:03 CST"
> time_add(cst, hour = 1, roll_dst = "xlast")
[1] "2010-03-14 03:02:03 CDT"
> time_add(cdt, hour = -1, roll_dst = "xfirst")
[1] "2010-03-14 03:02:03 CDT"
> time_add(cdt, hour = -1, roll_dst = "xlast")
[1] "2010-03-14 01:02:03 CST"
> 
> # WARNING:
> # In the following example the overall period is treated as a negative period
> # because the largest unit (hour) is negative. Thus `xfirst` roll_dst results in the
> # "post" time. To avoid such confusing behavior either avoid supplying multiple
> # units with heterogeneous sign.
> time_add(cst, hour = -1, minute = 170, roll_dst = "xfirst")
[1] "2010-03-14 03:52:03 CDT"
> 
> # SUBTRACTION
> 
> ## Month gap
> x <- as.POSIXct("2000-03-31 01:02:03", tz = "America/Chicago")
> time_subtract(x, month = 1, roll_month = "postday")
[1] "2000-03-01 01:02:03 CST"
> time_subtract(x, month = 1, roll_month = "preday")
[1] "2000-02-29 01:02:03 CST"
> time_subtract(x, month = 1, roll_month = "boundary")
[1] "2000-03-01 CST"
> time_subtract(x, month = 1, roll_month = "full")
[1] "2000-03-02 01:02:03 CST"
> time_subtract(x, month = 1, roll_month = "NA")
[1] NA
> time_subtract(x, month = 1, day = 0, roll_month = "postday")
[1] "2000-03-01 01:02:03 CST"
> time_subtract(x, month = 1, day = 3, roll_month = "postday")
[1] "2000-02-27 01:02:03 CST"
> time_subtract(x, month = 1, day = 0, roll_month = "preday")
[1] "2000-02-29 01:02:03 CST"
> time_subtract(x, month = 1, day = 3, roll_month = "preday")
[1] "2000-02-26 01:02:03 CST"
> time_subtract(x, month = 1, day = 3, roll_month = "boundary")
[1] "2000-02-27 CST"
> time_subtract(x, month = 1, day = 3, roll_month = "full")
[1] "2000-02-28 01:02:03 CST"
> time_subtract(x, month = 1, day = 3, roll_month = "NA")
[1] NA
> 
> ## DST gap
> y <- as.POSIXlt("2010-03-15 01:02:03", tz = "America/Chicago")
> time_subtract(y, hour = 22, minute = 50, roll_dst = "pre")
[1] "2010-03-14 01:12:03 CST"
> time_subtract(y, hour = 22, minute = 50, roll_dst = "boundary")
[1] "2010-03-14 03:00:00 CDT"
> time_subtract(y, hour = 22, minute = 50, roll_dst = "post")
[1] "2010-03-14 03:12:03 CDT"
> time_subtract(y, hour = 22, minute = 50, roll_dst = "NA")
[1] NA
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("time_get")
> ### * time_get
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: time_get
> ### Title: Get components of a date-time object
> ### Aliases: time_get
> 
> ### ** Examples
> 
> x <- as.POSIXct("2019-02-03")
> time_get(x)
  year month yday mday wday hour minute second
1 2019     2   34    3    6    0      0      0
> 
> 
> 
> cleanEx()
> nameEx("time_round")
> ### * time_round
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: time_round
> ### Title: Round, floor and ceiling for date-time objects
> ### Aliases: time_round time_floor time_ceiling
> 
> ### ** Examples
> 
> 
> ## print fractional seconds
> options(digits.secs=6)
> 
> x <- as.POSIXct("2009-08-03 12:01:59.23")
> time_round(x, ".5 asec")
[1] "2009-08-03 12:01:59 UTC"
> time_round(x, "sec")
[1] "2009-08-03 12:01:59 UTC"
> time_round(x, "second")
[1] "2009-08-03 12:01:59 UTC"
> time_round(x, "asecond")
[1] "2009-08-03 12:01:59 UTC"
> time_round(x, "minute")
[1] "2009-08-03 12:02:00 UTC"
> time_round(x, "5 mins")
[1] "2009-08-03 12:00:00 UTC"
> time_round(x, "5M") # "M" for minute "m" for month
[1] "2009-08-03 12:00:00 UTC"
> time_round(x, "hour")
[1] "2009-08-03 12:00:00 UTC"
> time_round(x, "2 hours")
[1] "2009-08-03 12:00:00 UTC"
> time_round(x, "2H")
[1] "2009-08-03 12:00:00 UTC"
> time_round(x, "day")
[1] "2009-08-04 UTC"
> time_round(x, "week")
[1] "2009-08-03 UTC"
> time_round(x, "month")
[1] "2009-08-01 UTC"
> time_round(x, "bimonth")
[1] "2009-09-01 UTC"
> time_round(x, "quarter") == time_round(x, "3 months")
[1] TRUE
> time_round(x, "halfyear")
[1] "2009-07-01 UTC"
> time_round(x, "year")
[1] "2010-01-01 UTC"
> 
> x <- as.POSIXct("2009-08-03 12:01:59.23")
> time_floor(x, ".1 asec")
[1] "2009-08-03 12:01:59.2 UTC"
> time_floor(x, "second")
[1] "2009-08-03 12:01:59 UTC"
> time_floor(x, "minute")
[1] "2009-08-03 12:01:00 UTC"
> time_floor(x, "M")
[1] "2009-08-03 12:01:00 UTC"
> time_floor(x, "hour")
[1] "2009-08-03 12:00:00 UTC"
> time_floor(x, ".2 ahour")
[1] "2009-08-03 12:00:00 UTC"
> time_floor(x, "day")
[1] "2009-08-03 UTC"
> time_floor(x, "week")
[1] "2009-08-03 UTC"
> time_floor(x, "m")
[1] "2009-08-01 UTC"
> time_floor(x, "month")
[1] "2009-08-01 UTC"
> time_floor(x, "bimonth")
[1] "2009-07-01 UTC"
> time_floor(x, "quarter")
[1] "2009-07-01 UTC"
> time_floor(x, "season")
[1] "2009-06-01 UTC"
> time_floor(x, "halfyear")
[1] "2009-07-01 UTC"
> time_floor(x, "year")
[1] "2009-01-01 UTC"
> 
> x <- as.POSIXct("2009-08-03 12:01:59.23")
> time_ceiling(x, ".1 asec")
[1] "2009-08-03 12:01:59.2 UTC"
> time_ceiling(x, "second")
[1] "2009-08-03 12:02:00 UTC"
> time_ceiling(x, "minute")
[1] "2009-08-03 12:02:00 UTC"
> time_ceiling(x, "5 mins")
[1] "2009-08-03 12:05:00 UTC"
> time_ceiling(x, "hour")
[1] "2009-08-03 13:00:00 UTC"
> time_ceiling(x, ".2 ahour")
[1] "2009-08-03 12:12:00 UTC"
> time_ceiling(x, "day")
[1] "2009-08-04 UTC"
> time_ceiling(x, "week")
[1] "2009-08-10 UTC"
> time_ceiling(x, "month")
[1] "2009-09-01 UTC"
> time_ceiling(x, "bimonth") == time_ceiling(x, "2 months")
[1] TRUE
> time_ceiling(x, "quarter")
[1] "2009-10-01 UTC"
> time_ceiling(x, "season")
[1] "2009-09-01 UTC"
> time_ceiling(x, "halfyear")
[1] "2010-01-01 UTC"
> time_ceiling(x, "year")
[1] "2010-01-01 UTC"
> 
> ## behavior on the boundary
> x <- as.Date("2000-01-01")
> time_ceiling(x, "month")
[1] "2000-02-01"
> time_ceiling(x, "month", change_on_boundary = FALSE)
[1] "2000-01-01"
> 
> ## As of R 3.4.2 POSIXct printing of fractional numbers is wrong
> as.POSIXct("2009-08-03 12:01:59.3", tz = "UTC") ## -> "2009-08-03 12:01:59.2 UTC"
[1] "2009-08-03 12:01:59.2 UTC"
> time_ceiling(x, ".1 asec") ## -> "2009-08-03 12:01:59.2 UTC"
[1] "2000-01-01"
> 
> ## Civil Time vs Absolute Time Rounding
> 
> # "2014-11-02 01:59:59.5 EDT" before 1h backroll at 2AM
> x <- .POSIXct(1414907999.5, tz = "America/New_York")
> x
[1] "2014-11-02 01:59:59.5 EDT"
> time_ceiling(x, "hour") # "2014-11-02 02:00:00 EST"
[1] "2014-11-02 02:00:00 EST"
> time_ceiling(x, "minute")
[1] "2014-11-02 02:00:00 EST"
> time_ceiling(x, "sec")
[1] "2014-11-02 02:00:00 EST"
> time_ceiling(x, "1ahour") # "2014-11-02 01:00:00 EST"
[1] "2014-11-02 01:00:00 EST"
> time_ceiling(x, "1asec")
[1] "2014-11-02 01:00:00 EST"
> 
> # "2014-11-02 01:00:00.5 EST" .5s after 1h backroll at 2AM
> x <- .POSIXct(1414908000.5, tz = "America/New_York")
> x
[1] "2014-11-02 01:00:00.5 EST"
> time_floor(x, "hour") # "2014-11-02 01:00:00 EST"
[1] "2014-11-02 01:00:00 EST"
> time_floor(x, "ahour") # "2014-11-02 01:00:00 EST"
[1] "2014-11-02 01:00:00 EST"
> 
> ## behavior on the boundary when rounding multi-units
> 
> x <- as.POSIXct("2009-08-28 22:56:59.23", tz = "UTC")
> time_ceiling(x, "3.4 secs")  # "2009-08-28 22:57:03.4"
[1] "2009-08-28 22:57:03.4 UTC"
> time_ceiling(x, "50.5 secs")  # "2009-08-28 22:57:50.5"
[1] "2009-08-28 22:57:50.5 UTC"
> time_ceiling(x, "57 min")  # "2009-08-28 22:57:00"
[1] "2009-08-28 22:57:00 UTC"
> time_ceiling(x, "56 min")  # "2009-08-28 23:56:00"
[1] "2009-08-28 23:56:00 UTC"
> time_ceiling(x, "7h")  # "2009-08-29 07:00:00"
[1] "2009-08-29 07:00:00 UTC"
> time_ceiling(x, "7d")  # "2009-08-29 00:00:00"
[1] "2009-08-29 UTC"
> time_ceiling(x, "8d")  # "2009-09-09 00:00:00"
[1] "2009-09-09 UTC"
> time_ceiling(x, "8m")  # "2009-09-01 00:00:00"
[1] "2009-09-01 UTC"
> time_ceiling(x, "6m")  # "2010-01-01 00:00:00"
[1] "2010-01-01 UTC"
> time_ceiling(x, "7m")  # "2010-08-01 00:00:00"
[1] "2010-08-01 UTC"
> 
> x <- as.POSIXct("2010-11-25 22:56:57", tz = "UTC")
> time_ceiling(x, "6sec") # "2010-11-25 22:57:00"
[1] "2010-11-25 22:57:00 UTC"
> time_ceiling(x, "60sec") # "2010-11-25 22:57:00"
[1] "2010-11-25 22:57:00 UTC"
> time_ceiling(x, "6min") # "2010-11-25 23:00:00"
[1] "2010-11-25 23:00:00 UTC"
> time_ceiling(x, "60min") # "2010-11-25 23:00:00"
[1] "2010-11-25 23:00:00 UTC"
> time_ceiling(x, "4h") # "2010-11-26 00:00:00"
[1] "2010-11-26 UTC"
> time_ceiling(x, "15d") # "2010-12-01 00:00:00"
[1] "2010-12-01 UTC"
> time_ceiling(x, "15d") # "2010-12-01 00:00:00"
[1] "2010-12-01 UTC"
> time_ceiling(x, "6m") # "2011-01-01 00:00:00"
[1] "2011-01-01 UTC"
> 
> 
> ## custom origin
> x <- as.POSIXct(c("2010-10-01 01:00:01", "2010-11-02 02:00:01"), tz = "America/New_York")
> # 50 minutes from the day or month start
> time_floor(x, "50amin")
[1] "2010-10-01 00:40:00 EDT" "2010-11-02 01:50:00 EDT"
> time_floor(x, "50amin", origin = time_floor(x, "day"))
[1] "2010-10-01 00:50:00 EDT" "2010-11-02 01:40:00 EDT"
> time_floor(x, "50amin", origin = time_floor(x, "month"))
[1] "2010-10-01 00:50:00 EDT" "2010-11-02 01:50:00 EDT"
> time_ceiling(x, "50amin")
[1] "2010-10-01 01:30:00 EDT" "2010-11-02 02:40:00 EDT"
> time_ceiling(x, "50amin", origin = time_floor(x, "day"))
[1] "2010-10-01 01:40:00 EDT" "2010-11-02 02:30:00 EDT"
> time_ceiling(x, "50amin", origin = time_floor(x, "month"))
[1] "2010-10-01 01:40:00 EDT" "2010-11-02 02:40:00 EDT"
> 
> 
> 
> 
> cleanEx()
> nameEx("time_update")
> ### * time_update
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: time_update
> ### Title: Update components of a date-time object
> ### Aliases: time_update
> 
> ### ** Examples
> 
> 
> date <- as.Date("2009-02-10")
> time_update(date, year = 2010, month = 1, mday = 1)
[1] "2010-01-01"
> time_update(date, year = 2010, month = 13, mday = 1)
[1] "2011-01-01"
> time_update(date, minute = 10, second = 3)
[1] "2009-02-10 00:10:03 UTC"
> time_update(date, minute = 10, second = 3, tz = "America/New_York")
[1] "2009-02-10 00:10:03 EST"
> 
> time <- as.POSIXct("2015-02-03 01:02:03", tz = "America/New_York")
> time_update(time, month = 2, mday = 31, roll_month = "preday")
[1] "2015-02-28 01:02:03 EST"
> time_update(time, month = 2, mday = 31, roll_month = "boundary")
[1] "2015-03-01 EST"
> time_update(time, month = 2, mday = 31, roll_month = "postday")
[1] "2015-03-01 01:02:03 EST"
> time_update(time, month = 2, mday = 31, exact = TRUE)
[1] NA
> time_update(time, month = 2, mday = 31, exact = FALSE)
[1] "2015-02-28 01:02:03 EST"
> 
> ## DST skipped
> time <- as.POSIXct("2015-02-03 01:02:03", tz = "America/New_York")
> time_update(time, year = 2016, yday = 10)
[1] "2016-01-10 01:02:03 EST"
> time_update(time, year = 2016, yday = 10, tz = "Europe/Amsterdam")
[1] "2016-01-10 01:02:03 CET"
> time_update(time, second = 30,  tz = "America/New_York")
[1] "2015-02-03 01:02:30 EST"
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.08 0.022 0.102 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
