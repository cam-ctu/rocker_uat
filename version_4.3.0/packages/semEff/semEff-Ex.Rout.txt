
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "semEff"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('semEff')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("R2")
> ### * R2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: R2
> ### Title: R-squared
> ### Aliases: R2
> 
> ### ** Examples
> 
> # Pseudo R-squared for mixed models
> R2(shipley.sem)  # fixed + random ('conditional')
                      DD      Date    Growth      Live
R.squared      0.7080083 0.9855557 0.7938367 0.2668652
R.squared.adj  0.7074791 0.9855351 0.7934879 0.2655971
R.squared.pred 0.6835636 0.9820241 0.7552854        NA
> R2(shipley.sem, re.form = ~ (1 | tree))  # fixed + 'tree'
                      DD      Date    Growth      Live
R.squared      0.5305163 0.8491536 0.6068561 0.2453019
R.squared.adj  0.5295483 0.8489101 0.6060877 0.2439737
R.squared.pred 0.4898536 0.6831439 0.5012969        NA
> R2(shipley.sem, re.form = ~ (1 | site))  # fixed + 'site'
                      DD      Date    Growth      Live
R.squared      0.6839237 0.6925661 0.3081469 0.2016339
R.squared.adj  0.6833402 0.6920022 0.3065040 0.2001797
R.squared.pred 0.6567506 0.2541820 0.1153087        NA
> R2(shipley.sem, re.form = NA)  # fixed only ('marginal')
                      DD      Date     Growth      Live
R.squared      0.5012513 0.4250445 0.04814953 0.1834597
R.squared.adj  0.5002024 0.4237737 0.04554043 0.1819516
R.squared.pred 0.4578167 0.0801710 0.00000000        NA
> R2(shipley.sem, re.form = NA, type = "spearman")  # using Spearman's Rho
                      DD      Date      Growth       Live
R.squared      0.4043303 0.3919543 0.048572025 0.04724129
R.squared.adj  0.4029963 0.3905821 0.045964645 0.04529886
R.squared.pred 0.3008997 0.2992427 0.001204466         NA
> 
> # Predicted R-squared: compare cross-validated predictions calculated/
> # approximated via the hat matrix to standard method (leave-one-out)
> 
> # Fit test models using Shipley data – compare lm vs glm
> d <- na.omit(shipley)
> m <- lm(Live ~ Date + DD + lat, d)
> # m <- glm(Live ~ Date + DD + lat, binomial, d)
> 
> # Manual CV predictions (leave-one-out)
> cvf1 <- sapply(1:nrow(d), function(i) {
+   m.ni <- update(m, data = d[-i, ])
+   predict(m.ni, d[i, ], type = "response")
+ })
> 
> # Short-cut via the hat matrix
> y <- getY(m)
> f <- fitted(m)
> cvf2 <- y - (y - f) / (1 - hatvalues(m))
> 
> # Compare predictions (not exactly equal for GLMs)
> all.equal(cvf1, cvf2)
[1] TRUE
> # lm: TRUE; glm: "Mean relative difference: 1.977725e-06"
> cor(cvf1, cvf2)
[1] 1
> # lm: 1; glm: 0.9999987
> 
> # NOTE: comparison not tested here for mixed models, as hierarchical data can
> # complicate the choice of an appropriate leave-one-out procedure. However,
> # there is no obvious reason why use of the leverage values (diagonals of the
> # hat matrix) to estimate CV predictions shouldn't generalise, roughly, to
> # the mixed model case (at least for LMMs). In any case, users should
> # exercise the appropriate caution in interpretation.
> 
> 
> 
> cleanEx()
> nameEx("VIF")
> ### * VIF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: VIF
> ### Title: Generalised Variance Inflation Factors
> ### Aliases: VIF
> 
> ### ** Examples
> 
> # Model with two correlated terms
> m <- shipley.growth[[3]]
> VIF(m)  # Date & DD somewhat correlated
    Date       DD      lat 
6.062838 6.077410 1.012151 
> VIF(update(m, . ~ . - DD))  # drop DD
    Date      lat 
1.009793 1.009793 
> 
> # Model with different types of predictor (some multi-coefficient terms)
> d <- data.frame(
+   y = rnorm(100),
+   x1 = rnorm(100),
+   x2 = as.factor(rep(c("a", "b", "c", "d"), each = 25)),
+   x3 = rep(1, 100)
+ )
> m <- lm(y ~ poly(x1, 2) + x2 + x3, data = d)
> VIF(m)
poly(x1, 2)1 poly(x1, 2)2          x2b          x2c          x2d           x3 
    1.048451     1.048451     1.032045     1.032045     1.032045           NA 
> 
> 
> 
> cleanEx()
> nameEx("avgEst")
> ### * avgEst
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: avgEst
> ### Title: Weighted Average of Model Estimates
> ### Aliases: avgEst
> 
> ### ** Examples
> 
> # Model-averaged effects (coefficients)
> m <- shipley.growth  # candidate models
> e <- lapply(m, function(i) coef(summary(i))[, 1])
> avgEst(e)
 (Intercept)         Date           DD          lat 
15.135291812  0.290608333 -0.006522619 -0.033495883 
> 
> # Using weights
> w <- runif(length(e), 0, 1)
> avgEst(e, w)
 (Intercept)         Date           DD          lat 
16.431072333  0.288852182 -0.007775535 -0.047555025 
> 
> # Model-averaged predictions
> f <- lapply(m, predict)
> head(avgEst(f, w))
       1        2        3        4        5        6 
56.13123 45.80523 42.12210 50.03579 53.71340 55.76576 
> 
> 
> 
> cleanEx()
> nameEx("bootCI")
> ### * bootCI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bootCI
> ### Title: Bootstrap Confidence Intervals
> ### Aliases: bootCI
> 
> ### ** Examples
> 
> # CIs calculated from bootstrapped SEM
> (shipley.sem.ci <- bootCI(shipley.sem.boot))
$DD
               Effect     Bias   Std. Err.   Lower CI Upper CI    
               ------   ------   ---------   -------- --------    
 (Intercept) | -0.056 | -0.026 |     0.069 |   -0.167    0.085 |  
 lat         | -0.688 |  0.026 |     0.101 |   -0.828   -0.459 | *

$Date
               Effect     Bias   Std. Err.   Lower CI Upper CI    
               ------   ------   ---------   -------- --------    
 (Intercept) | -0.015 | -0.005 |     0.082 |   -0.167    0.179 |  
 DD          | -0.628 |  0.000 |     0.057 |   -0.741   -0.519 | *

$Growth
               Effect     Bias   Std. Err.   Lower CI Upper CI    
               ------   ------   ---------   -------- --------    
 (Intercept) | -0.292 | -0.006 |     0.090 |   -0.497   -0.141 | *
 Date        |  0.382 |  0.011 |     0.058 |    0.293    0.515 | *

$Live
               Effect    Bias   Std. Err.   Lower CI Upper CI    
               ------   -----   ---------   -------- --------    
 (Intercept) |  0.311 | 0.255 |     0.213 |    0.170    0.354 | *
 Growth      |  0.368 | 0.151 |     0.130 |    0.246    0.411 | *

> 
> # From original SEM (models)
> # (not typically recommended – better to use saved boot objects)
> # system.time(
> #   shipley.sem.ci <- bootCI(shipley.sem, R = 1000, seed = 13,
> #                            ran.eff = "site")
> # )
> 
> 
> 
> cleanEx()
> nameEx("bootEff")
> ### * bootEff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bootEff
> ### Title: Bootstrap Effects
> ### Aliases: bootEff
> 
> ### ** Examples
> 
> # Bootstrap Shipley SEM (test – 1 rep)
> # (set 'site' as group for resampling – highest-level random effect)
> bootEff(shipley.sem, R = 1, ran.eff = "site", parallel = "no")
$DD

ORDINARY NONPARAMETRIC BOOTSTRAP


Call:
boot::boot(data = x, statistic = s, R = R, parallel = parallel, 
    ncpus = nc, cl = cl)


Bootstrap Statistics :
       original      bias    std. error
t1* -0.05600661 -0.12504210          NA
t2* -0.68772025 -0.06650516          NA

$Date

ORDINARY NONPARAMETRIC BOOTSTRAP


Call:
boot::boot(data = x, statistic = s, R = R, parallel = parallel, 
    ncpus = nc, cl = cl)


Bootstrap Statistics :
       original      bias    std. error
t1* -0.01493651  0.06567483          NA
t2* -0.62813666 -0.01561637          NA

$Growth

ORDINARY NONPARAMETRIC BOOTSTRAP


Call:
boot::boot(data = x, statistic = s, R = R, parallel = parallel, 
    ncpus = nc, cl = cl)


Bootstrap Statistics :
      original      bias    std. error
t1* -0.2917507 -0.09452344          NA
t2*  0.3824224 -0.00696122          NA

$Live

ORDINARY NONPARAMETRIC BOOTSTRAP


Call:
boot::boot(data = x, statistic = s, R = R, parallel = parallel, 
    ncpus = nc, cl = cl)


Bootstrap Statistics :
     original     bias    std. error
t1* 0.3105220 0.16896513          NA
t2* 0.3681961 0.08565924          NA

> 
> # Check estimates (use saved boot object – 1000 reps)
> lapply(shipley.sem.boot, "[[", 1)  # original
$DD
(Intercept)         lat 
-0.05600661 -0.68772025 

$Date
(Intercept)          DD 
-0.01493651 -0.62813666 

$Growth
(Intercept)        Date 
 -0.2917507   0.3824224 

$Live
(Intercept)      Growth 
  0.3105220   0.3681961 

> lapply(shipley.sem.boot, function(i) head(i$t))  # bootstrapped
$DD
     (Intercept)        lat
[1,]  0.07884187 -0.5481916
[2,] -0.09289124 -0.6231252
[3,] -0.20894499 -0.6936512
[4,] -0.13368868 -0.4139394
[5,] -0.10229480 -0.7023361
[6,] -0.01969415 -0.6358960

$Date
     (Intercept)         DD
[1,] -0.11082251 -0.6196655
[2,] -0.12908598 -0.6238294
[3,]  0.01454823 -0.6291431
[4,] -0.03500544 -0.5212996
[5,] -0.04554961 -0.5774458
[6,] -0.02636631 -0.5555745

$Growth
     (Intercept)      Date
[1,]  -0.2900700 0.3256320
[2,]  -0.2223630 0.3988001
[3,]  -0.3721685 0.4173523
[4,]  -0.2221964 0.3551045
[5,]  -0.1850172 0.4199339
[6,]  -0.3353260 0.3531018

$Live
     (Intercept)    Growth
[1,]   1.0030671 0.8118620
[2,]   0.3839991 0.3822085
[3,]   0.4223174 0.4173702
[4,]   0.3149438 0.3793002
[5,]   0.6149997 0.5659556
[6,]   0.6737008 0.5710483

> 
> 
> 
> cleanEx()
> nameEx("getData")
> ### * getData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getData
> ### Title: Get Model Data
> ### Aliases: getData
> 
> ### ** Examples
> 
> # Get data used to fit SEM from Shipley (2009)
> head(getData(shipley.sem[[1]]))  # from single model
  site tree      lat year     Date       DD   Growth  Survival Live
1    1    1 40.38063 1970 115.4956 160.5703 61.36852 0.9996238    1
2    1    2 40.38063 1970 118.4959 158.9896 43.77182 0.8433521    1
3    1    3 40.38063 1970 115.8836 159.9262 44.74663 0.9441110    1
4    1    4 40.38063 1970 110.9889 161.1282 48.20004 0.9568525    1
5    1    5 40.38063 1970 120.9946 157.3778 50.02237 0.9759584    1
6    1    1 40.38063 1972 114.2315 160.6120 56.29615 0.9983398    1
> lapply(getData(shipley.sem), head)  # from SEM (list)
$DD
  site tree      lat year     Date       DD   Growth  Survival Live
1    1    1 40.38063 1970 115.4956 160.5703 61.36852 0.9996238    1
2    1    2 40.38063 1970 118.4959 158.9896 43.77182 0.8433521    1
3    1    3 40.38063 1970 115.8836 159.9262 44.74663 0.9441110    1
4    1    4 40.38063 1970 110.9889 161.1282 48.20004 0.9568525    1
5    1    5 40.38063 1970 120.9946 157.3778 50.02237 0.9759584    1
6    1    1 40.38063 1972 114.2315 160.6120 56.29615 0.9983398    1

$Date
  site tree      lat year     Date       DD   Growth  Survival Live
1    1    1 40.38063 1970 115.4956 160.5703 61.36852 0.9996238    1
2    1    2 40.38063 1970 118.4959 158.9896 43.77182 0.8433521    1
3    1    3 40.38063 1970 115.8836 159.9262 44.74663 0.9441110    1
4    1    4 40.38063 1970 110.9889 161.1282 48.20004 0.9568525    1
5    1    5 40.38063 1970 120.9946 157.3778 50.02237 0.9759584    1
6    1    1 40.38063 1972 114.2315 160.6120 56.29615 0.9983398    1

$Growth
  site tree      lat year     Date       DD   Growth  Survival Live
1    1    1 40.38063 1970 115.4956 160.5703 61.36852 0.9996238    1
2    1    2 40.38063 1970 118.4959 158.9896 43.77182 0.8433521    1
3    1    3 40.38063 1970 115.8836 159.9262 44.74663 0.9441110    1
4    1    4 40.38063 1970 110.9889 161.1282 48.20004 0.9568525    1
5    1    5 40.38063 1970 120.9946 157.3778 50.02237 0.9759584    1
6    1    1 40.38063 1972 114.2315 160.6120 56.29615 0.9983398    1

$Live
  site tree      lat year     Date       DD   Growth  Survival Live
1    1    1 40.38063 1970 115.4956 160.5703 61.36852 0.9996238    1
2    1    2 40.38063 1970 118.4959 158.9896 43.77182 0.8433521    1
3    1    3 40.38063 1970 115.8836 159.9262 44.74663 0.9441110    1
4    1    4 40.38063 1970 110.9889 161.1282 48.20004 0.9568525    1
5    1    5 40.38063 1970 120.9946 157.3778 50.02237 0.9759584    1
6    1    1 40.38063 1972 114.2315 160.6120 56.29615 0.9983398    1

> head(getData(shipley.sem, merge = TRUE))  # from SEM (single dataset)
  site tree      lat year     Date       DD   Growth  Survival Live
1    1    1 40.38063 1970 115.4956 160.5703 61.36852 0.9996238    1
2    1    2 40.38063 1970 118.4959 158.9896 43.77182 0.8433521    1
3    1    3 40.38063 1970 115.8836 159.9262 44.74663 0.9441110    1
4    1    4 40.38063 1970 110.9889 161.1282 48.20004 0.9568525    1
5    1    5 40.38063 1970 120.9946 157.3778 50.02237 0.9759584    1
6    1    1 40.38063 1972 114.2315 160.6120 56.29615 0.9983398    1
> 
> 
> 
> cleanEx()
> nameEx("getX")
> ### * getX
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getX
> ### Title: Get Model Design Matrix
> ### Aliases: getX
> 
> ### ** Examples
> 
> # Model design matrix (original)
> m <- shipley.growth[[3]]
> x1 <- model.matrix(m)
> x2 <- getX(m)
> stopifnot(all.equal(x1, x2, check.attributes = FALSE))
> 
> # Using formula or term names (supply data)
> d <- shipley
> x1 <- getX(formula(m), data = d)
> x2 <- getX(names(lme4::fixef(m)), data = d)
> stopifnot(all.equal(x1, x2))
> 
> # Scaled terms
> head(getX(m, centre = TRUE, scale = TRUE))
  (Intercept)       Date       DD       lat
1           1 -1.4031190 1.636031 -2.792213
2           1 -1.0345918 1.482206 -2.792213
3           1 -1.3554697 1.573358 -2.792213
4           1 -1.9566917 1.690329 -2.792213
5           1 -0.7276695 1.325356 -2.792213
6           1 -1.5583973 1.640097 -2.792213
> 
> # Combined matrix for SEM
> head(getX(shipley.sem, merge = TRUE))
  (Intercept)      lat       DD     Date   Growth
1           1 40.38063 160.5703 115.4956 61.36852
2           1 40.38063 158.9896 118.4959 43.77182
3           1 40.38063 159.9262 115.8836 44.74663
4           1 40.38063 161.1282 110.9889 48.20004
5           1 40.38063 157.3778 120.9946 50.02237
6           1 40.38063 160.6120 114.2315 56.29615
> head(getX(shipley.sem, merge = TRUE, add.data = TRUE))  # add other variables
  (Intercept)      lat site tree year     Date       DD   Growth  Survival Live
1           1 40.38063    1    1 1970 115.4956 160.5703 61.36852 0.9996238    1
2           1 40.38063    1    2 1970 118.4959 158.9896 43.77182 0.8433521    1
3           1 40.38063    1    3 1970 115.8836 159.9262 44.74663 0.9441110    1
4           1 40.38063    1    4 1970 110.9889 161.1282 48.20004 0.9568525    1
5           1 40.38063    1    5 1970 120.9946 157.3778 50.02237 0.9759584    1
6           1 40.38063    1    1 1972 114.2315 160.6120 56.29615 0.9983398    1
> 
> 
> 
> cleanEx()
> nameEx("getY")
> ### * getY
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getY
> ### Title: Get Model Response Variable
> ### Aliases: getY
> 
> ### ** Examples
> 
> # All SEM responses (original scale)
> head(getY(shipley.sem))
        DD     Date   Growth Live
1 160.5703 115.4956 61.36852    1
2 158.9896 118.4959 43.77182    1
3 159.9262 115.8836 44.74663    1
4 161.1282 110.9889 48.20004    1
5 157.3778 120.9946 50.02237    1
6 160.6120 114.2315 56.29615    1
> 
> # Estimated response in link scale from binomial model
> head(getY(shipley.sem$Live, link = TRUE))
       1        2        3        4        5        6 
18.56607 18.56607 18.56607 18.56607 18.56607 18.56607 
> 
> 
> 
> cleanEx()
> nameEx("glt")
> ### * glt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glt
> ### Title: Generalised Link Transformation
> ### Aliases: glt
> 
> ### ** Examples
> 
> # Compare estimate with a direct link transformation
> # (test with a poisson variable, log link)
> set.seed(13)
> y <- rpois(30, lambda = 10)
> yl <- unname(glt(y, force.est = TRUE))
> 
> # Effectively equal?
> all.equal(log(y), yl)
[1] TRUE
> # TRUE
> 
> # Actual difference...
> all.equal(log(y), yl, tolerance = .Machine$double.eps)
[1] "Mean relative difference: 2.489317e-10"
> # "Mean relative difference: 2.489317e-10"
> 
> 
> 
> cleanEx()
> nameEx("predEff")
> ### * predEff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predEff
> ### Title: Predict Effects
> ### Aliases: predEff
> 
> ### ** Examples
> 
> # Predict effects (direct, total)
> m <- shipley.sem
> e <- shipley.sem.eff
> dir <- getDirEff(e)
> tot <- getTotEff(e)
> f.dir <- predEff(m, effects = dir, type = "response")
> f.tot <- predEff(m, effects = tot, type = "response")
> f.dir$Live[1:10]
        1         2         3         4         5         6         7         8 
0.9998907 0.9525798 0.9657500 0.9894445 0.9943723 0.9993621 0.9911463 0.9582557 
        9        10 
0.9982749 0.9989735 
> f.tot$Live[1:10]
        1         2         3         4         5         6         7         8 
0.9975858 0.5742006 0.5783691 0.7196629 0.9436709 0.9840953 0.8998478 0.5468860 
        9        10 
0.9462890 0.9887104 
> 
> # Using new data for predictors
> d <- na.omit(shipley)
> xn <- c("lat", "DD", "Date", "Growth")
> seq100 <- function(x) seq(min(x), max(x), length = 100)
> nd <- data.frame(sapply(d[xn], seq100))
> f.dir <- predEff(m, nd, dir, type = "response")
> f.tot <- predEff(m, nd, tot, type = "response")
> f.dir$Live[1:10]
        1         2         3         4         5         6         7         8 
0.3000301 0.3279412 0.3571239 0.3874066 0.4185852 0.4504280 0.4826822 0.5150813 
        9        10 
0.5473542 0.5792338 
> f.tot$Live[1:10]
         1          2          3          4          5          6          7 
0.05467217 0.06338280 0.07337353 0.08479648 0.09781007 0.11257517 0.12924985 
         8          9         10 
0.14798252 0.16890356 0.19211539 
> # Add CIs
> # dir.b <- getDirEff(e, "boot")
> # tot.b <- getTotEff(e, "boot")
> # f.dir <- predEff(m, nd, dir, dir.b, type = "response")
> # f.tot <- predEff(m, nd, tot, tot.b, type = "response")
> 
> # Predict an interactive effect (e.g. Live ~ Growth * DD)
> xn <- c("Growth", "DD")
> d[xn] <- scale(d[xn])  # scale predictors (improves fit)
> m <- lme4::glmer(Live ~ Growth * DD + (1 | site) + (1 | tree),
+                  family = binomial, data = d)
> nd <- with(d, expand.grid(
+   Growth = seq100(Growth),
+   DD = mean(DD) + c(-sd(DD), sd(DD))  # two levels for DD
+ ))
> f <- predEff(m, nd, type = "response", interaction = "Growth:DD")
> f$fit[1:10]
        1         2         3         4         5         6         7         8 
0.2935549 0.3230365 0.3539954 0.3862285 0.4194907 0.4535010 0.4879508 0.5225156 
        9        10 
0.5568660 0.5906810 
> f$interaction
Growth:DD_1 Growth:DD_2 
      0.393       0.286 
> # Add CIs (need to bootstrap model...)
> # system.time(B <- bootEff(m, R = 1000, ran.eff = "site"))
> # f <- predEff(m, nd, B, type = "response", interaction = "Growth:DD")
> 
> # Model-averaged predictions (several approaches)
> m <- shipley.growth  # candidate models (list)
> w <- runif(length(m), 0, 1)  # weights
> e <- stdEff(m, w)  # averaged effects
> f1 <- predEff(m[[1]], effects = e)  # pass avg. effects
> f2 <- predEff(m, weights = w)  # pass weights argument
> f3 <- avgEst(predEff(m), w)  # use avgEst function
> stopifnot(all.equal(f1, f2))
> stopifnot(all.equal(f2, f3))
> 
> # Compare model fitted values: predEff() vs. fitted()
> m <- shipley.sem$Live
> f1 <- predEff(m, unique.eff = FALSE, re.form = NULL, type = "response")
Warning in pred + REvals :
  longer object length is not a multiple of shorter object length
> f2 <- fitted(m)
> stopifnot(all.equal(f1, f2))
> 
> # Compare predictions using standardised vs. raw effects (same)
> f1 <- predEff(m)
> f2 <- predEff(m, use.raw = TRUE)
> stopifnot(all.equal(f1, f2))
> 
> 
> 
> cleanEx()
> nameEx("semEff")
> ### * semEff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: semEff
> ### Title: SEM Effects
> ### Aliases: semEff
> 
> ### ** Examples
> 
> # SEM effects
> (shipley.sem.eff <- semEff(shipley.sem.boot))

Piecewise SEM with:
  * 1 exogenous vs. 4 endogenous variable(s)
  * 4 direct vs. 6 indirect effect(s)

Variables:

          Category   Predictor Mediator Response   Dir. Eff. Ind. Eff.  
          --------   --------- -------- --------   --------- ---------  
 lat    | Exog.    |     Y        N        N     |         -         - |
 DD     | Endog.   |     Y        Y        Y     |         1         0 |
 Date   | Endog.   |     Y        Y        Y     |         1         1 |
 Growth | Endog.   |     Y        Y        Y     |         1         2 |
 Live   | Endog.   |     N        N        Y     |         1         3 |

Use summary() for effects and confidence intervals for endogenous variables.

> summary(shipley.sem.eff)

SEM direct, summed indirect, total, and mediator effects:

DD (1/4):

                 Effect    Bias   Std. Err.   Lower CI Upper CI    
                 ------   -----   ---------   -------- --------    
 DIRECT    lat | -0.688 | 0.026 |     0.101 |   -0.828   -0.459 | *
                                                                   
 INDIRECT  n/a |      - |     - |         - |        -        - |  
                                                                   
 TOTAL     lat | -0.688 | 0.026 |     0.101 |   -0.828   -0.459 | *
                                                                   
 MEDIATORS n/a |      - |     - |         - |        -        - |  


Date (2/4):

                 Effect     Bias   Std. Err.   Lower CI Upper CI    
                 ------   ------   ---------   -------- --------    
 DIRECT    DD  | -0.628 |  0.000 |     0.057 |   -0.741   -0.519 | *
                                                                    
 INDIRECT  lat |  0.432 | -0.012 |     0.089 |    0.239    0.580 | *
                                                                    
 TOTAL     lat |  0.432 | -0.012 |     0.089 |    0.239    0.580 | *
           DD  | -0.628 |  0.000 |     0.057 |   -0.741   -0.519 | *
                                                                    
 MEDIATORS DD  |  0.432 | -0.012 |     0.089 |    0.239    0.580 | *


Growth (3/4):

                  Effect     Bias   Std. Err.   Lower CI Upper CI    
                  ------   ------   ---------   -------- --------    
 DIRECT    Date |  0.382 |  0.011 |     0.058 |    0.293    0.515 | *
                                                                     
 INDIRECT  lat  |  0.165 |  0.001 |     0.048 |    0.086    0.281 | *
           DD   | -0.240 | -0.007 |     0.042 |   -0.344   -0.181 | *
                                                                     
 TOTAL     lat  |  0.165 |  0.001 |     0.048 |    0.086    0.281 | *
           DD   | -0.240 | -0.007 |     0.042 |   -0.344   -0.181 | *
           Date |  0.382 |  0.011 |     0.058 |    0.293    0.515 | *
                                                                     
 MEDIATORS DD   |  0.165 |  0.001 |     0.048 |    0.086    0.281 | *
           Date | -0.075 | -0.006 |     0.017 |   -0.109   -0.049 | *


Live (4/4):

                    Effect     Bias   Std. Err.   Lower CI Upper CI    
                    ------   ------   ---------   -------- --------    
 DIRECT    Growth |  0.368 |  0.151 |     0.130 |    0.246    0.411 | *
                                                                       
 INDIRECT  lat    |  0.061 |  0.025 |     0.032 |    0.007    0.095 | *
           DD     | -0.088 | -0.039 |     0.037 |   -0.106   -0.055 | *
           Date   |  0.141 |  0.063 |     0.059 |    0.093    0.163 | *
                                                                       
 TOTAL     lat    |  0.061 |  0.025 |     0.032 |    0.007    0.095 | *
           DD     | -0.088 | -0.039 |     0.037 |   -0.106   -0.055 | *
           Date   |  0.141 |  0.063 |     0.059 |    0.093    0.163 | *
           Growth |  0.368 |  0.151 |     0.130 |    0.246    0.411 | *
                                                                       
 MEDIATORS DD     |  0.061 |  0.025 |     0.032 |    0.007    0.095 | *
           Date   | -0.028 | -0.014 |     0.014 |   -0.033   -0.011 | *
           Growth |  0.113 |  0.049 |     0.051 |    0.051    0.142 | *

> 
> # Effects for selected variables
> summary(shipley.sem.eff, response = "Live")

SEM direct, summed indirect, total, and mediator effects:

Live (4/4):

                    Effect     Bias   Std. Err.   Lower CI Upper CI    
                    ------   ------   ---------   -------- --------    
 DIRECT    Growth |  0.368 |  0.151 |     0.130 |    0.246    0.411 | *
                                                                       
 INDIRECT  lat    |  0.061 |  0.025 |     0.032 |    0.007    0.095 | *
           DD     | -0.088 | -0.039 |     0.037 |   -0.106   -0.055 | *
           Date   |  0.141 |  0.063 |     0.059 |    0.093    0.163 | *
                                                                       
 TOTAL     lat    |  0.061 |  0.025 |     0.032 |    0.007    0.095 | *
           DD     | -0.088 | -0.039 |     0.037 |   -0.106   -0.055 | *
           Date   |  0.141 |  0.063 |     0.059 |    0.093    0.163 | *
           Growth |  0.368 |  0.151 |     0.130 |    0.246    0.411 | *
                                                                       
 MEDIATORS DD     |  0.061 |  0.025 |     0.032 |    0.007    0.095 | *
           Date   | -0.028 | -0.014 |     0.014 |   -0.033   -0.011 | *
           Growth |  0.113 |  0.049 |     0.051 |    0.051    0.142 | *

> # summary(semEff(shipley.sem.boot, predictor = "lat"))
> # summary(semEff(shipley.sem.boot, mediator = "DD"))
> 
> # Effects calculated using original SEM (models)
> # (not typically recommended – better to use saved boot objects)
> # system.time(
> #  shipley.sem.eff <- semEff(shipley.sem, R = 1000, seed = 13,
> #                            ran.eff = "site")
> # )
> 
> 
> 
> cleanEx()
> nameEx("shipley.growth")
> ### * shipley.growth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: shipley.growth
> ### Title: Candidate Model Set from Shipley 'Growth' Model
> ### Aliases: shipley.growth
> ### Keywords: datasets
> 
> ### ** Examples
> 
> # Specification
> # shipley.growth <- list(
> #   lme4::lmer(Growth ~ Date + (1 | site) + (1 | tree), data = shipley),
> #   lme4::lmer(Growth ~ Date + DD + (1 | site) + (1 | tree), data = shipley),
> #   lme4::lmer(Growth ~ Date + DD + lat + (1 | site) + (1 | tree),
> #              data = shipley)
> # )
> 
> 
> 
> cleanEx()
> nameEx("shipley.sem")
> ### * shipley.sem
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: shipley.sem
> ### Title: Hypothesised SEM from Shipley (2009)
> ### Aliases: shipley.sem
> ### Keywords: datasets
> 
> ### ** Examples
> 
> # Specification
> # shipley.sem <- list(
> #   DD = lme4::lmer(DD ~ lat + (1 | site) + (1 | tree), data = shipley),
> #   Date = lme4::lmer(Date ~ DD + (1 | site) + (1 | tree), data = shipley),
> #   Growth = lme4::lmer(Growth ~ Date + (1 | site) + (1 | tree),
> #                       data = shipley),
> #   Live = lme4::glmer(Live ~ Growth + (1 | site) + (1 | tree), binomial,
> #                      data = shipley)
> # )
> 
> 
> 
> cleanEx()
> nameEx("shipley.sem.boot")
> ### * shipley.sem.boot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: shipley.sem.boot
> ### Title: Bootstrapped Estimates for Shipley SEM
> ### Aliases: shipley.sem.boot
> ### Keywords: datasets
> 
> ### ** Examples
> 
> # Specification
> # shipley.sem.boot <- bootEff(shipley.sem, R = 1000, seed = 13,
> #                             ran.eff = "site")
> 
> 
> 
> cleanEx()
> nameEx("shipley.sem.eff")
> ### * shipley.sem.eff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: shipley.sem.eff
> ### Title: Effects for Shipley SEM
> ### Aliases: shipley.sem.eff
> ### Keywords: datasets
> 
> ### ** Examples
> 
> # Specification
> # shipley.sem.eff <- semEff(shipley.sem.boot)
> 
> 
> 
> cleanEx()
> nameEx("stdEff")
> ### * stdEff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stdEff
> ### Title: Standardised Effects
> ### Aliases: stdEff
> 
> ### ** Examples
> 
> library(lme4)
Loading required package: Matrix

Attaching package: ‘lme4’

The following object is masked from ‘package:semEff’:

    getData

> 
> # Standardised (direct) effects for SEM
> m <- shipley.sem
> stdEff(m)
$DD
(Intercept)         lat 
-0.05600661 -0.68772025 

$Date
(Intercept)          DD 
-0.01493651 -0.62813666 

$Growth
(Intercept)        Date 
 -0.2917507   0.3824224 

$Live
(Intercept)      Growth 
  0.3105220   0.3681961 

> stdEff(m, cen.y = FALSE, std.y = FALSE)  # x-only
$DD
(Intercept)         lat 
 143.183138   -7.066909 

$Date
(Intercept)          DD 
  126.79703    -5.11375 

$Growth
(Intercept)        Date 
  48.955514    2.448161 

$Live
(Intercept)      Growth 
   5.452982    2.226862 

> stdEff(m, std.x = FALSE, std.y = FALSE)  # centred only
$DD
(Intercept)         lat 
 -0.5755154  -0.8354729 

$Date
(Intercept)          DD 
 -0.1216002  -0.4976475 

$Growth
(Intercept)        Date 
 -1.8677067   0.3007147 

$Live
(Intercept)      Growth 
  1.8780467   0.3478536 

> stdEff(m, cen.x = FALSE, cen.y = FALSE)  # scaled only
$DD
(Intercept)         lat 
 19.1373370  -0.6877202 

$Date
(Intercept)          DD 
 24.3624481  -0.6281367 

$Growth
(Intercept)        Date 
  1.6853620   0.3824224 

$Live
(Intercept)      Growth 
 -2.0214940   0.3681961 

> stdEff(m, unique.eff = FALSE)  # include multicollinearity
$DD
(Intercept)         lat 
-0.05600661 -0.68772025 

$Date
(Intercept)          DD 
-0.01493651 -0.62813666 

$Growth
(Intercept)        Date 
 -0.2917507   0.3824224 

$Live
(Intercept)      Growth 
  0.3105220   0.3681961 

> stdEff(m, R.squared = TRUE)  # add R-squared
$DD
     (Intercept)              lat      (R.squared)  (R.squared.adj) 
     -0.05600661      -0.68772025       0.70800826       0.70747906 
(R.squared.pred) 
      0.68356361 

$Date
     (Intercept)               DD      (R.squared)  (R.squared.adj) 
     -0.01493651      -0.62813666       0.98555565       0.98553510 
(R.squared.pred) 
      0.98202414 

$Growth
     (Intercept)             Date      (R.squared)  (R.squared.adj) 
      -0.2917507        0.3824224        0.7938367        0.7934879 
(R.squared.pred) 
       0.7552854 

$Live
     (Intercept)           Growth      (R.squared)  (R.squared.adj) 
       0.3105220        0.3681961        0.2668652        0.2655971 
(R.squared.pred) 
              NA 

> stdEff(m, incl.raw = TRUE)  # add unstandardised
$DD
      (Intercept)               lat (raw)_(Intercept)         (raw)_lat 
      -0.05600661       -0.68772025      196.65237838       -0.83547294 

$Date
      (Intercept)                DD (raw)_(Intercept)          (raw)_DD 
      -0.01493651       -0.62813666      198.33816379       -0.49764747 

$Growth
      (Intercept)              Date (raw)_(Intercept)        (raw)_Date 
       -0.2917507         0.3824224        10.7892162         0.3007147 

$Live
      (Intercept)            Growth (raw)_(Intercept)      (raw)_Growth 
        0.3105220         0.3681961       -12.2260588         0.3478536 

> 
> # Demonstrate equality with effects from manually-standardised variables
> # (gaussian models only)
> m <- shipley.growth[[3]]
> d <- data.frame(scale(na.omit(shipley)))
> e1 <- stdEff(m, unique.eff = FALSE)
> e2 <- coef(summary(update(m, data = d)))[, 1]
> stopifnot(all.equal(e1, e2))
> 
> # Demonstrate equality with square root of increment in R-squared
> # (ordinary linear models only)
> m <- lm(Growth ~ Date + DD + lat, data = shipley)
> r2 <- summary(m)$r.squared
> e1 <- stdEff(m)[-1]
> en <- names(e1)
> e2 <- sapply(en, function(i) {
+   f <- reformulate(en[!en %in% i])
+   r2i <- summary(update(m, f))$r.squared
+   sqrt(r2 - r2i)
+ })
> stopifnot(all.equal(e1, e2))
> 
> # Model-averaged standardised effects
> m <- shipley.growth  # candidate models
> w <- runif(length(m), 0, 1)  # weights
> stdEff(m, w)
 (Intercept)         Date           DD          lat 
-0.295652968  0.199025875 -0.005065995 -0.062455990 
> 
> 
> 
> cleanEx()

detaching ‘package:lme4’, ‘package:Matrix’

> nameEx("varW")
> ### * varW
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: varW
> ### Title: Weighted Variance
> ### Aliases: varW
> 
> ### ** Examples
> 
> # Weighted variance
> x <- rnorm(30)
> w <- runif(30, 0, 1)
> varW(x, w)
[1] 0.6252681
> 
> # Simple variance
> varW(x)
[1] 0.8539993
> stopifnot(varW(x) == var(x))
> 
> # NA handling
> varW(c(x[1:29], NA), w, na.rm = TRUE)  # NA in x (removed)
[1] 0.6310022
> varW(c(x[1:29], NA), w, na.rm = FALSE)  # NA in x (NA returned)
[1] NA
> varW(x[1:29], w = c(w[1:29], NA))  # NA in w (NA returned)
[1] NA
> 
> 
> 
> cleanEx()
> nameEx("xNam")
> ### * xNam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: xNam
> ### Title: Get Model Term Names
> ### Aliases: xNam
> 
> ### ** Examples
> 
> # Term names from Shipley SEM
> m <- shipley.sem
> xNam(m)
$DD
[1] "(Intercept)" "lat"        

$Date
[1] "(Intercept)" "DD"         

$Growth
[1] "(Intercept)" "Date"       

$Live
[1] "(Intercept)" "Growth"     

> xNam(m, intercept = FALSE)
$DD
[1] "lat"

$Date
[1] "DD"

$Growth
[1] "Date"

$Live
[1] "Growth"

> 
> # Model with different types of predictor (some multi-coefficient terms)
> d <- data.frame(
+   y = rnorm(100),
+   x1 = rnorm(100),
+   x2 = as.factor(rep(c("a", "b", "c", "d"), each = 25)),
+   x3 = rep(1, 100)
+ )
> m <- lm(y ~ poly(x1, 2) + x2 + x3, data = d)
> xNam(m)
[1] "(Intercept)"  "poly(x1, 2)1" "poly(x1, 2)2" "x2b"          "x2c"         
[6] "x2d"          "x3"          
> xNam(m, aliased = FALSE)  # drop term that cannot be estimated (x3)
[1] "(Intercept)"  "poly(x1, 2)1" "poly(x1, 2)2" "x2b"          "x2c"         
[6] "x2d"         
> xNam(m, aliased = FALSE, list = TRUE)  # names as list
$`(Intercept)`
[1] "(Intercept)"

$`poly(x1, 2)`
[1] "poly(x1, 2)1" "poly(x1, 2)2"

$x2
[1] "x2b" "x2c" "x2d"

> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  10.252 3.592 9.834 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
