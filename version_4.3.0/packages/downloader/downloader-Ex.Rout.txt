
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "downloader"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('downloader')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("download")
> ### * download
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: download
> ### Title: Download a file, using http, https, or ftp
> ### Aliases: download
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Download the downloader source, in binary mode
> ##D download("https://github.com/wch/downloader/zipball/master",
> ##D          "downloader.zip", mode = "wb")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("sha_url")
> ### * sha_url
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sha_url
> ### Title: Download a file from a URL and find a SHA-1 hash of it
> ### Aliases: sha_url
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Get the SHA hash of a file. It will print the text below and return
> ##D # the hash as a string. This is a very long URL; break it up so it can be
> ##D # seen more easily in the examples.
> ##D test_url <- paste0("https://gist.github.com/wch/dae7c106ee99fe1fdfe7",
> ##D                    "/raw/db0c9bfe0de85d15c60b0b9bf22403c0f5e1fb15/test.r")
> ##D sha_url(test_url)
> ##D # Command for sourcing the URL:
> ##D #  downloader::source_url("https://gist.github.com/wch/dae7c106ee99fe1fdfe7
> ##D #  /raw/db0c9bfe0de85d15c60b0b9bf22403c0f5e1fb15/test.r",
> ##D #    sha="9b8ff5213e32a871d6cb95cce0bed35c53307f61")
> ##D # [1] "9b8ff5213e32a871d6cb95cce0bed35c53307f61"
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("source_url")
> ### * source_url
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: source_url
> ### Title: Download an R file from a URL and source it
> ### Aliases: source_url
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Source the a sample file
> ##D 
> ##D # This is a very long URL; break it up so it can be seen more easily in the
> ##D # examples.
> ##D test_url <- paste0("https://gist.github.com/wch/dae7c106ee99fe1fdfe7",
> ##D                    "/raw/db0c9bfe0de85d15c60b0b9bf22403c0f5e1fb15/test.r")
> ##D downloader::source_url(test_url,
> ##D                        sha = "9b8ff5213e32a871d6cb95cce0bed35c53307f61")
> ##D 
> ##D # Find the hash of a file
> ##D downloader::sha_url(test_url)
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.059 0.009 0.069 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
