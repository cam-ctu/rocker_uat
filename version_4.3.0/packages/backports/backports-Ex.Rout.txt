
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "backports"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('backports')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("R_user_dir")
> ### * R_user_dir
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: R_user_dir
> ### Title: Backport of R_user_dir for R < 4.0.0
> ### Aliases: R_user_dir
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_R_user_dir = getFromNamespace("R_user_dir", "backports")
> 
> bp_R_user_dir("backports")
[1] "/github/home/.local/share/R/backports"
> 
> 
> 
> cleanEx()
> nameEx("URLencode")
> ### * URLencode
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: URLencode
> ### Title: Backport of URLencode for R < 3.2.0
> ### Aliases: URLencode
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_URLencode = getFromNamespace("URLencode", "backports")
> 
> URLdecode(z <- "ab%20cd")
[1] "ab cd"
> c(bp_URLencode(z), bp_URLencode(z, repeated = TRUE))
[1] "ab%20cd"   "ab%2520cd"
> 
> 
> 
> cleanEx()
> nameEx("anyNA")
> ### * anyNA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: anyNA
> ### Title: Backport of anyNA for R versions < 3.2.0.
> ### Aliases: anyNA
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_anyNA = getFromNamespace("anyNA", "backports")
> 
> bp_anyNA(letters)
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("asplit")
> ### * asplit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: asplit
> ### Title: Backport of asplit for R < 3.6.0
> ### Aliases: asplit
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_asplit = getFromNamespace("asplit", "backports")
> x = matrix(1:6, 2, 3)
> bp_asplit(x, 1)
[[1]]
[1] 1 3 5

[[2]]
[1] 2 4 6

> 
> 
> 
> cleanEx()
> nameEx("capture.output")
> ### * capture.output
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: capture.output
> ### Title: Backport of capture.output for R < 3.3.0
> ### Aliases: capture.output
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_capture.output <- getFromNamespace("capture.output", "backports")
> 
> captured <- bp_capture.output({ message("hi") }, type = "message")
> str(captured)
 chr "hi"
> 
> 
> 
> cleanEx()
> nameEx("dQuote")
> ### * dQuote
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dQuote
> ### Title: Backport of dQuote and sQuote for R < 3.6.0
> ### Aliases: dQuote sQuote
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_dQuote <- getFromNamespace("dQuote", "backports")
> bp_dQuote("foo")
[1] "“foo”"
> bp_dQuote("foo", q = TRUE)
[1] "“foo”"
> 
> 
> 
> cleanEx()
> nameEx("deparse1")
> ### * deparse1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: deparse1
> ### Title: Backport of deparse1 for R < 4.0.0
> ### Aliases: deparse1
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_deparse1 = getFromNamespace("deparse1", "backports")
> 
> bp_deparse1(quote(`foo bar`))
[1] "foo bar"
> 
> 
> 
> cleanEx()
> nameEx("dir.exists")
> ### * dir.exists
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dir.exists
> ### Title: Backport of dir.exists for R < 3.2.0
> ### Aliases: dir.exists
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_dir.exists = getFromNamespace("dir.exists", "backports")
> 
> bp_dir.exists(tempdir())
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("dotsElt")
> ### * dotsElt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ...elt
> ### Title: Backport of ...elt for R < 3.4.2
> ### Aliases: ...elt
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_...elt = getFromNamespace("...elt", "backports")
> 
> foo = function(n, ...) bp_...elt(n)
> foo(n = 2, "a", "b", "c")
[1] "b"
> 
> 
> 
> cleanEx()
> nameEx("dotsLength")
> ### * dotsLength
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ...length
> ### Title: Backport of ...length for R < 3.4.2
> ### Aliases: ...length
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_...length = getFromNamespace("...length", "backports")
> 
> foo = function(...) bp_...length()
> foo(1, 2, 3)
[1] 3
> 
> 
> 
> cleanEx()
> nameEx("dotsNames")
> ### * dotsNames
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ...names
> ### Title: Backport of ...names for R < 4.1.0
> ### Aliases: ...names
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_...names = getFromNamespace("...names", "backports")
> 
> foo = function(...) bp_...names()
> foo(a = 1, b = 2, 3)
[1] "a" "b" "" 
> 
> 
> 
> cleanEx()
> nameEx("endsWith")
> ### * endsWith
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: endsWith
> ### Title: Backport of endsWith for R < 3.3.0
> ### Aliases: endsWith
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_endsWith = getFromNamespace("endsWith", "backports")
> 
> bp_endsWith(c("aabb", "bbcc"), "bb")
[1]  TRUE FALSE
> 
> 
> 
> cleanEx()
> nameEx("file.info")
> ### * file.info
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: file.info
> ### Title: Backport of 'file.info' for R < 3.2.0
> ### Aliases: file.info
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_file.info = getFromNamespace("file.info", "backports")
> 
> bp_file.info(file.path(R.home(), "COPYING"), extra_cols = FALSE)
                          size isdir mode               mtime
/usr/local/lib/R/COPYING 18011 FALSE  644 2024-06-17 08:24:06
                                       ctime               atime
/usr/local/lib/R/COPYING 2025-01-06 15:02:13 2024-06-17 08:24:06
> 
> 
> 
> cleanEx()
> nameEx("file.size")
> ### * file.size
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: file.mode
> ### Title: Backports of wrappers around 'file.info' for R < 3.2.0
> ### Aliases: file.mode file.mtime file.size
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get functions from namespace instead of possibly getting
> # implementations shipped with recent R versions:
> bp_file.size = getFromNamespace("file.size", "backports")
> bp_file.mode = getFromNamespace("file.size", "backports")
> bp_file.mtime = getFromNamespace("file.size", "backports")
> 
> fn = file.path(R.home(), "COPYING")
> bp_file.size(fn)
[1] 18011
> bp_file.mode(fn)
[1] 18011
> bp_file.size(fn)
[1] 18011
> 
> 
> 
> cleanEx()
> nameEx("get0")
> ### * get0
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get0
> ### Title: Backport of get0 for R < 3.2.0
> ### Aliases: get0
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_get0 = getFromNamespace("get0", "backports")
> 
> bp_get0("a")
NULL
> bp_get0("a", ifnotfound = 0)
[1] 0
> 
> foo = 12
> bp_get0("foo")
[1] 12
> 
> 
> 
> cleanEx()
> nameEx("hasName")
> ### * hasName
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hasName
> ### Title: Backport of hasName for R < 3.4.0
> ### Aliases: hasName
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_hasName = getFromNamespace("hasName", "backports")
> 
> bp_hasName(list(a = 1, b = 2), c("a", "b", "c"))
[1]  TRUE  TRUE FALSE
> 
> 
> 
> cleanEx()
> nameEx("import")
> ### * import
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: import
> ### Title: Import backported functions into your package
> ### Aliases: import
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # This imports all functions implemented in backports while the package is loaded
> ##D .onLoad <- function(libname, pkgname) {
> ##D   backports::import(pkgname)
> ##D }
> ##D 
> ##D # This only imports the function "trimws"
> ##D .onLoad <- function(libname, pkgname) {
> ##D   backports::import(pkgname, "trimws")
> ##D }
> ##D 
> ##D # This imports all backports from base and force-imports "hasName" from utils
> ##D .onLoad <- function(libname, pkgname) {
> ##D   backports::import(pkgname)
> ##D   backports::import(pkgname, "hasName", force = TRUE)
> ##D }
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("isFALSE")
> ### * isFALSE
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isFALSE
> ### Title: Backport of isFALSE for R < 3.4.2
> ### Aliases: isFALSE
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_isFALSE = getFromNamespace("isFALSE", "backports")
> 
> bp_isFALSE(FALSE)
[1] TRUE
> bp_isFALSE(iris)
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("isNamespaceLoaded")
> ### * isNamespaceLoaded
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isNamespaceLoaded
> ### Title: Backport of isNamespaceLoaded for R < 3.2.0
> ### Aliases: isNamespaceLoaded
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_isNamespaceLoaded = getFromNamespace("isNamespaceLoaded", "backports")
> 
> bp_isNamespaceLoaded("backports")
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("isTRUE")
> ### * isTRUE
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isTRUE
> ### Title: Backport of isTRUE for R < 3.5.0
> ### Aliases: isTRUE
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_isTRUE = getFromNamespace("isTRUE", "backports")
> 
> bp_isTRUE(FALSE)
[1] FALSE
> bp_isTRUE(iris)
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("lengths")
> ### * lengths
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lengths
> ### Title: Backport of lengths for R < 3.2.0
> ### Aliases: lengths
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_lengths = getFromNamespace("lengths", "backports")
> 
> bp_lengths(list(1:3, 2))
[1] 3 1
> 
> 
> 
> cleanEx()
> nameEx("list2DF")
> ### * list2DF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: list2DF
> ### Title: Backport of list2DF for R < 4.0.0
> ### Aliases: list2DF
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_list2DF = getFromNamespace("list2DF", "backports")
> 
> bp_list2DF(list(x = 1:3, y = 2:4))
  x y
1 1 2
2 2 3
3 3 4
> 
> 
> 
> cleanEx()
> nameEx("paste")
> ### * paste
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: paste
> ### Title: Backport of paste for R < 4.0.1
> ### Aliases: paste
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_paste = getFromNamespace("paste", "backports")
> bp_paste(letters[1:3], character(), collapse = NULL, recycle0 = TRUE)
character(0)
> 
> 
> 
> cleanEx()
> nameEx("paste0")
> ### * paste0
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: paste0
> ### Title: Backport of paste0 for R < 4.0.1
> ### Aliases: paste0
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_paste0 = getFromNamespace("paste0", "backports")
> bp_paste0(letters[1:3], character(), collapse = NULL, recycle0 = TRUE)
character(0)
> 
> 
> 
> cleanEx()
> nameEx("removeSource")
> ### * removeSource
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: removeSource
> ### Title: Backport of removeSource for R < 3.6.0
> ### Aliases: removeSource
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_removeSource = getFromNamespace("removeSource", "backports")
> 
> bp_removeSource(mean)
function (x, ...) 
UseMethod("mean")
<environment: namespace:base>
> 
> 
> 
> cleanEx()
> nameEx("startsWith")
> ### * startsWith
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: startsWith
> ### Title: Backport of startsWith for R < 3.3.0
> ### Aliases: startsWith
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_startsWith = getFromNamespace("startsWith", "backports")
> 
> bp_startsWith(c("aabb", "bbcc"), "bb")
[1] FALSE  TRUE
> 
> 
> 
> cleanEx()
> nameEx("stopifnot")
> ### * stopifnot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stopifnot
> ### Title: Backport of stopifnot for R versions < 4.0.0.
> ### Aliases: stopifnot
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_stopifnot = getFromNamespace("stopifnot", "backports")
> 
> m <- matrix(c(1, 3, 12, 1), 2, 2)
> ## Not run: bp_stopifnot("m must be symmetric" = m == t(m))
> 
> 
> 
> cleanEx()
> nameEx("str2expression")
> ### * str2expression
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: str2expression
> ### Title: Backport of str2expression for R < 3.6.0
> ### Aliases: str2expression
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> str2expression <- getFromNamespace("str2expression", "backports")
> 
> str2expression("x[3] <- 1+4")
expression(x[3] <- 1 + 4)
> 
> 
> 
> cleanEx()
> nameEx("str2lang")
> ### * str2lang
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: str2lang
> ### Title: Backport of str2lang for R < 3.6.0
> ### Aliases: str2lang
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> str2lang <- getFromNamespace("str2lang", "backports")
> 
> str2lang("x[3] <- 1+4")
x[3] <- 1 + 4
> 
> 
> 
> cleanEx()
> nameEx("strrep")
> ### * strrep
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: strrep
> ### Title: Backport of strrep for R < 3.3.0
> ### Aliases: strrep
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_strrep = getFromNamespace("strrep", "backports")
> 
> bp_strrep("-", 10)
[1] "----------"
> 
> 
> 
> cleanEx()
> nameEx("suppressWarnings")
> ### * suppressWarnings
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: suppressWarnings
> ### Title: Backport of suppressWarnings and suppressMessages for R < 4.0.0
> ### Aliases: suppressWarnings suppressMessages
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_suppressWarnings = getFromNamespace("suppressWarnings", "backports")
> bp_suppressWarnings(warningCondition("warning", class = "testWarning"), "testWarning")
<testWarning: warning>
> 
> 
> 
> cleanEx()
> nameEx("trimws")
> ### * trimws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trimws
> ### Title: Backport of trimws for R < 3.3.0
> ### Aliases: trimws
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_trimws = getFromNamespace("trimws", "backports")
> bp_trimws(c("  a  ", "b  ", "  c"))
[1] "a" "b" "c"
> 
> bp_trimws(c("  a  ", "b  ", "  c"), which = "left")
[1] "a  " "b  " "c"  
> 
> 
> 
> cleanEx()
> nameEx("valid.factor")
> ### * valid.factor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .valid.factor
> ### Title: Backport of .valid.factor for R < 3.4.0
> ### Aliases: .valid.factor
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_.valid_factor = getFromNamespace(".valid.factor", "backports")
> bp_.valid_factor(factor(letters[1:3]))
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("vignetteInfo")
> ### * vignetteInfo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vignetteInfo
> ### Title: Backport of vignetteInfo for R < 3.6.0
> ### Aliases: vignetteInfo
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_vignetteInfo = getFromNamespace("vignetteInfo", "backports")
> 
> 
> 
> cleanEx()
> nameEx("warningCondition")
> ### * warningCondition
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: warningCondition
> ### Title: Backport of warningCondition and errorCondition for R < 3.6.0
> ### Aliases: warningCondition errorCondition
> ### Keywords: internal
> 
> ### ** Examples
> 
> # get function from namespace instead of possibly getting
> # implementation shipped with recent R versions:
> bp_warningCondition = getFromNamespace("warningCondition", "backports")
> bp_warningCondition("package backports not found")
<warning: package backports not found>
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.083 0.008 0.091 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
