
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
> 
> message("*** availableCores() ...")
*** availableCores() ...
> 
> ## detectCores() may return NA_integer_
> n <- parallel::detectCores()
> message(sprintf("detectCores() = %d", n))
detectCores() = 4
> stopifnot(length(n) == 1, is.numeric(n))
> 
> ## Default
> n <- availableCores()
> message(sprintf("availableCores() = %d", n))
availableCores() = 2
> stopifnot(length(n) == 1, is.numeric(n), n >= 1)
> 
> ## Minimium of all known settings (default)
> print(availableCores(which = "min"))
mc.cores 
       2 
> 
> ## Maximum of all known settings (should never be used)
> print(availableCores(which = "max"))
system 
     4 
> 
> ## All known settings
> print(availableCores(na.rm = FALSE, which = "all"))
               system        cgroups.cpuset      cgroups.cpuquota 
                    4                    NA                    NA 
     cgroups2.cpu.max                 nproc              mc.cores 
                   NA                     4                     2 
         BiocParallel _R_CHECK_LIMIT_CORES_          Bioconductor 
                   NA                    NA                    NA 
                  LSF                   PJM                   PBS 
                   NA                    NA                    NA 
                  SGE                 Slurm              fallback 
                   NA                    NA                    NA 
               custom 
                   NA 
> 
> ## System settings
> n <- availableCores(methods = "system")
> print(n)
system 
     4 
> stopifnot(length(n) == 1, is.numeric(n), is.finite(n), n >= 1)
> 
> ## Predefined ones for known cluster schedulers
> print(availableCores(methods = "PBS"))
current 
      1 
> print(availableCores(methods = "SGE"))
current 
      1 
> print(availableCores(methods = "Slurm"))
current 
      1 
> print(availableCores(methods = "LSF"))
current 
      1 
> 
> ## Any R options and system environment variable
> print(availableCores(methods = c("width", "FOO_BAR_ENV"),
+                      na.rm = FALSE, which = "all"))
      width FOO_BAR_ENV 
         80          NA 
> 
> ## Exception handling
> Sys.setenv("FOO_BAR_ENV" = "0")
> res <- try(availableCores(methods = "FOO_BAR_ENV"), silent = TRUE)
[18:07:43.329] Detected invalid (zero or less) core settings: ‘FOO_BAR_ENV’ = 0
> stopifnot(inherits(res, "try-error"))
> 
> 
> ncores0 <- 42L
> 
> message("*** LSF ...")
*** LSF ...
> message(" - LSB_DJOB_NUMPROC")
 - LSB_DJOB_NUMPROC
> Sys.setenv(LSB_DJOB_NUMPROC = as.character(ncores0))
> ncores <- availableCores(methods = "LSF")
> print(ncores)
LSF 
 42 
> stopifnot(ncores == ncores0)
> message("*** LSF ... done")
*** LSF ... done
> 
> message("*** PJM (Fujitsu Technical Computing Suite) ...")
*** PJM (Fujitsu Technical Computing Suite) ...
> message(" - PJM_VNODE_CORE")
 - PJM_VNODE_CORE
> Sys.setenv(PJM_VNODE_CORE = as.character(ncores0))
> ncores <- availableCores(methods = "PJM")
> print(ncores)
PJM 
 42 
> stopifnot(ncores == ncores0)
> Sys.unsetenv("PJM_VNODE_CORE")
> 
> message(" - PJM_PROC_BY_NODE")
 - PJM_PROC_BY_NODE
> Sys.setenv(PJM_PROC_BY_NODE = as.character(ncores0))
> ncores <- availableCores(methods = "PJM")
> print(ncores)
PJM 
 42 
> stopifnot(ncores == ncores0)
> Sys.unsetenv("PJM_PROC_BY_NODE")
> message("*** PJM (Fujitsu Technical Computing Suite) ... done")
*** PJM (Fujitsu Technical Computing Suite) ... done
> 
> 
> message("*** Internal detectCores() ...")
*** Internal detectCores() ...
> 
> ## Option 'parallelly.availableCores.system'
> 
> ## Reset internal cache
> env <- environment(parallelly:::detectCores)
> env$cache <- list()
> 
> options(parallelly.availableCores.system = 2L)
> n <- detectCores()
> print(n)
[1] 2
> stopifnot(is.integer(n), is.finite(n), n >= 1, n == 2L)
> options(parallelly.availableCores.system = NULL)
> 
> ## Reset
> env <- environment(parallelly:::detectCores)
> env$cache <- list()
> 
> n <- detectCores()
> print(n)
[1] 4
> stopifnot(is.integer(n), is.finite(n), n >= 1)
> 
> message("*** Internal detectCores() ... DONE")
*** Internal detectCores() ... DONE
> 
> 
> message("*** availableCores() ... DONE")
*** availableCores() ... DONE
> 
> source("incl/end.R")
> 
