
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "jomo"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('jomo')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("jomo.MCMCchain")
> ### * jomo.MCMCchain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo.MCMCchain
> ### Title: JM Imputation - A tool to check convergence of the MCMC
> ### Aliases: jomo.MCMCchain
> 
> ### ** Examples
> 
> 
>   # define all the inputs:
>   
>   Y<-cldata[,c("measure","age")]
>   clus<-cldata[,c("city")]
>   nburn=as.integer(200);
>   
>   #And finally we run the imputation function:
>   imp<-jomo.MCMCchain(Y,clus=clus,nburn=nburn)
Clustered data, using functions for two-level imputation.
Found  2 continuous outcomes and no categorical. Using function jomo1rancon. 
....................The posterior mean of the fixed effects estimates is:
               X1
measure 0.6655405
age     0.3094749

The posterior mean of the random effects estimates is:
   measure.Z1      age.Z1
0  0.41794002 -0.28258523
1  0.60229986 -0.37163158
2 -0.36102615  0.15469539
3  1.06039170  0.03938371
4 -0.41964912 -0.11211047
5  0.10707736 -0.28046132
6  0.10095477  0.22028967
7 -0.09418288  0.23530210
8 -0.26928229 -0.41146692
9 -0.14584808  0.07512890

The posterior mean of the level 1 covariance matrices is:
            measure         age
measure  1.00350365 -0.09585593
age     -0.09585593  3.49522404

The posterior mean of the level 2 covariance matrix is:
            measure.Z1      age.Z1
measure*Z1  0.37897394 -0.02881529
age*Z1     -0.02881529  0.22255685
>   #We can check the convergence of the first element of beta:
>   
>   plot(c(1:nburn),imp$collectbeta[1,1,1:nburn],type="l")
>   
>   #Or similarly we can check the convergence of any element of the level 2 covariance matrix:
>   
>   plot(c(1:nburn),imp$collectcovu[1,2,1:nburn],type="l")
> 
> 
> 
> cleanEx()
> nameEx("jomo")
> ### * jomo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo
> ### Title: Joint Modelling Imputation
> ### Aliases: jomo
> 
> ### ** Examples
> 
> 
>   # define all the inputs:
>   
>   Y<-cldata[,c("measure","age")]
>   clus<-cldata[,c("city")]
>   nburn=as.integer(200);
>   nbetween=as.integer(200);
>   nimp=as.integer(5);
>   
>   
>   #And finally we run the imputation function:
>   imp<-jomo(Y,clus=clus,nburn=nburn,nbetween=nbetween,nimp=nimp)
Clustered data, using functions for two-level imputation.
Found  2 continuous outcomes and no categorical. Using function jomo1rancon. 
....................First imputation registered. 
....................Imputation number  2 registered 
....................Imputation number  3 registered 
....................Imputation number  4 registered 
....................Imputation number  5 registered 
The posterior mean of the fixed effects estimates is:
               X1
measure 0.8258795
age     0.2289910

The posterior mean of the random effects estimates is:
   measure.Z1      age.Z1
0  0.25479507 -0.20461961
1  0.42865165 -0.29700103
2 -0.52156498  0.22377082
3  0.90840869  0.16063075
4 -0.58221915 -0.04105992
5 -0.03788197 -0.21928126
6 -0.05525023  0.28393631
7 -0.25505282  0.30971719
8 -0.43100440 -0.34355184
9 -0.28088228  0.16514950

The posterior mean of the level 1 covariance matrices is:
           measure        age
measure  0.9932926 -0.1077829
age     -0.1077829  3.5026089

The posterior mean of the level 2 covariance matrix is:
            measure.Z1      age.Z1
measure*Z1  0.36909521 -0.01515055
age*Z1     -0.01515055  0.22883342
>   
>   # Finally we show how to fit the model and combine estimate with Rubin's rules
>   # Here we use mitml, other options are available in mice, mitools, etc etc
> 
>   #if (requireNamespace("mitml", quietly = TRUE)&requireNamespace("lme4", quietly = TRUE)) {
>     #imp.mitml<-jomo2mitml.list(imp)
>     #fit.i<-with(imp.mitml, lmer(measure~age+(1|clus)))
>     #fit.MI<-testEstimates(fit.i, var.comp=T)
>  # }
> 
>   #we could even run imputation with fixed or random cluster-specific covariance matrices:
>   
>   #imp<-jomo(Y,clus=clus,nburn=nburn,nbetween=nbetween,nimp=nimp, meth="fixed")
>   #or:
>   #imp<-jomo(Y,clus=clus,nburn=nburn,nbetween=nbetween,nimp=nimp, meth="random")
>   
>   #if we do not add clus as imput, functions for single level imputation are used:
>   
>   #imp<-jomo(Y)
>   
>   
> 
>   
>   
> 
> 
> 
> cleanEx()
> nameEx("jomo.clmm.MCMCchain")
> ### * jomo.clmm.MCMCchain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo.clmm.MCMCchain
> ### Title: clmm Compatible JM Imputation - A tool to check convergence of
> ###   the MCMC
> ### Aliases: jomo.clmm.MCMCchain
> 
> ### ** Examples
> 
> 
>   # make sure social is a factor:
>   
>   cldata<-within(cldata, social<-factor(social))
>   
>   # we define the data frame with all the variables 
>   
>   data<-cldata[,c("measure","age", "social", "city")]
>   
>   # And the formula of the substantive lm model 
>   # social as an outcome only because it is the only ordinal variable in the dataset...
>   
>   formula<-as.formula(social~age+measure+(1|city))
>   
>   #And finally we run the imputation function:
>   
>   imp<-jomo.clmm.MCMCchain(formula,data, nburn=100)
This function is beta software. Please use carefully and report any bug to the package mantainer
..........First imputation registered. 
The posterior mean of the substantive model fixed effects estimates is:
               age    measure        1|2       2|3      3|4
social -0.02655046 0.02832252 -0.4176594 0.2768608 1.118634
The posterior mean of the substantive model residual variance is:
[1] 1
The posterior mean of the substantive model random effects covariance matrix is:
            (Intercept)
(Intercept)   0.2803047
The posterior mean of the substantive model random effects estimates is:
  (Intercept)
0  -0.1593817
1  -0.6336053
2  -0.4525832
3  -0.1119719
4   0.1227633
5   0.7257102
6   0.5691808
7   0.5550438
8   0.1403781
9  -0.4707765
>   
>   # We can check, for example, the convergence of the first element of beta:
>   
>   # plot(c(1:100),imp$collectbeta[1,1,1:100],type="l")
>   
>   
> 
> 
> 
> cleanEx()
> nameEx("jomo.clmm")
> ### * jomo.clmm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo.clmm
> ### Title: Joint Modelling Imputation Compatible with Cumulative Link Mixed
> ###   Model
> ### Aliases: jomo.clmm
> 
> ### ** Examples
> 
> 
> 
>   # make sure social is a factor:
>   
>   cldata<-within(cldata, social<-factor(social))
>   
>   # we define the data frame with all the variables 
>   
>   data<-cldata[,c("measure","age", "social", "city")]
>   
>   # And the formula of the substantive lm model 
>   # social as an outcome only because it is the only ordinal variable in the dataset...
>   
>   formula<-as.formula(social~age+measure+(1|city))
>   
>   #And finally we run the imputation function:
>   
>   # imp<-jomo.clmm(formula,data, nburn=1000, nbetween=1000, nimp=2)
>   
>   # Note the function is commented out to avoid time consuming examples, 
>   # which go against CRAN policies. 
>   # Check help page for function jomo to see how to fit the model and 
>   # combine estimates with Rubin's rules
>   
>   
>   
> 
> 
> 
> cleanEx()
> nameEx("jomo.coxph.MCMCchain")
> ### * jomo.coxph.MCMCchain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo.coxph.MCMCchain
> ### Title: coxph Compatible JM Imputation - A tool to check convergence of
> ###   the MCMC
> ### Aliases: jomo.coxph.MCMCchain
> 
> ### ** Examples
> 
>     # define substantive model
> 
>     formula<-as.formula(Surv(time, status) ~ measure + sex + I(measure^2))
>     
>     #Run imputation
>     
> if (requireNamespace("survival", quietly = TRUE)) {
+   library(survival)
+   #imp<-jomo.coxph.MCMCchain(formula,surdata, nburn = 100)
+   }
>     
> 
> 
> 
> cleanEx()

detaching ‘package:survival’

> nameEx("jomo.coxph")
> ### * jomo.coxph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo.coxph
> ### Title: Joint Modelling Imputation Compatible with Cox Proportional
> ###   Hazards Model
> ### Aliases: jomo.coxph
> 
> ### ** Examples
> 
> #define substantive model
> formula<-as.formula(Surv(time, status) ~ measure + sex + I(measure^2))
> 
> #Run imputation
> if (requireNamespace("survival", quietly = TRUE)) {
+   library(survival)
+   #imp<-jomo.coxph(formula,surdata, nburn = 100, nbetween = 100, nimp=5)
+ }
>   # Check help page for function jomo to see how to fit the model and 
>   # combine estimates with Rubin's rules
> 
> 
> 
> 
> cleanEx()

detaching ‘package:survival’

> nameEx("jomo.glm.MCMCchain")
> ### * jomo.glm.MCMCchain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo.glm.MCMCchain
> ### Title: glm Compatible JM Imputation - A tool to check convergence of
> ###   the MCMC
> ### Aliases: jomo.glm.MCMCchain
> 
> ### ** Examples
> 
> 
>   # make sure sex is a factor:
>   
>   sldata<-within(sldata, sex<-factor(sex))
>   
>   # we define the data frame with all the variables 
>   
>   data<-sldata[,c("measure","age", "sex")]
>   
>   # And the formula of the substantive lm model 
>   # sex as an outcome only because it is the only binary variable in the dataset...
>   
>   formula<-as.formula(sex~age+measure)
>   
>   #And finally we run the imputation function:
>   
>   imp<-jomo.glm.MCMCchain(formula,data, nburn=10)
This function is beta software. Use carefully and please report any bug to the package mantainer
.First imputation registered. 
The posterior mean of the substantive model fixed effects estimates is:
    (Intercept)          age    measure
sex   0.1789578 -0.002422949 0.05877437
The posterior mean of the substantive model residual variance is:
[1] 1
>   
>   # Note we are using only 10 iterations to avoid time consuming examples,
>   # which go against CRAN policies. In real applications we would use
>   # much larger burn-ins (around 1000, to say the least).
>   
>   # We can check, for example, the convergence of the first element of beta:
>   
>   plot(c(1:10),imp$collectbeta[1,1,1:10],type="l")
>   
>   
> 
> 
> 
> cleanEx()
> nameEx("jomo.glm")
> ### * jomo.glm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo.glm
> ### Title: Joint Modelling Imputation Compatible with glm Model
> ### Aliases: jomo.glm
> 
> ### ** Examples
> 
> 
>    # make sure sex is a factor:
>   
>   sldata<-within(sldata, sex<-factor(sex))
>   
>   # we define the data frame with all the variables 
>   
>   data<-sldata[,c("measure","age", "sex")]
>   
>   # And the formula of the substantive lm model 
>   # sex as an outcome only because it is the only binary variable in the dataset...
>   
>   formula<-as.formula(sex~age+measure)
>   
>   #And finally we run the imputation function:
>   
>   imp<-jomo.glm(formula,data, nburn=10, nbetween=10, nimp=2)
This function is beta software. Use carefully and please report any bug to the package mantainer
.First imputation registered. 
.Imputation number  2 registered 
The posterior mean of the substantive model fixed effects estimates is:
    (Intercept)          age   measure
sex  -0.1511536 0.0006110846 0.1537506
The posterior mean of the substantive model residual variance is:
[1] 1
>   
>   # Note we are using only 10 iterations to avoid time consuming examples, 
>   # which go against CRAN policies. In real applications we would use
>   # much larger burn-ins (around 1000) and at least 5 imputations.
>   # Check help page for function jomo to see how to fit the model and 
>   # combine estimates with Rubin's rules
> 
>   
> 
> 
> 
> cleanEx()
> nameEx("jomo.glmer.MCMCchain")
> ### * jomo.glmer.MCMCchain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo.glmer.MCMCchain
> ### Title: glmer Compatible JM Imputation - A tool to check convergence of
> ###   the MCMC
> ### Aliases: jomo.glmer.MCMCchain
> 
> ### ** Examples
> 
> 
>   # make sure sex is a factor:
>   
>   cldata<-within(cldata, sex<-factor(sex))
>   
>   # we define the data frame with all the variables 
>   
>   data<-cldata[,c("measure","age", "sex", "city")]
>   
>   # And the formula of the substantive lm model 
>   # sex as an outcome only because it is the only binary variable in the dataset...
>   
>   formula<-as.formula(sex~age+measure+(1|city))
>   
>   #And finally we run the imputation function:
>   
>   imp<-jomo.glmer.MCMCchain(formula,data, nburn=100)
This function is beta software. Please use carefully and report any bug to the package mantainer
boundary (singular) fit: see help('isSingular')
..........First imputation registered. 
The posterior mean of the substantive model fixed effects estimates is:
    (Intercept)       age    measure
sex  -0.1264964 0.1761043 0.05845757
The posterior mean of the substantive model residual variance is:
[1] 1
The posterior mean of the substantive model random effects covariance matrix is:
            (Intercept)
(Intercept)   0.1565152
The posterior mean of the substantive model random effects estimates is:
  (Intercept)
0 -0.07478272
1  0.06239043
2  0.06596735
3 -0.02662387
4 -0.03258747
5  0.01897316
6  0.03631361
7  0.03899444
8 -0.01840371
9  0.19159412
>   
>   # We can check, for example, the convergence of the first element of beta:
>   
>   # plot(c(1:100),imp$collectbeta[1,1,1:100],type="l")
>   
>   
> 
> 
> 
> cleanEx()
> nameEx("jomo.glmer")
> ### * jomo.glmer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo.glmer
> ### Title: Joint Modelling Imputation Compatible with Generalized Linear
> ###   Mixed Model
> ### Aliases: jomo.glmer
> 
> ### ** Examples
> 
> 
>  # make sure sex is a factor:
>   
>   cldata<-within(cldata, sex<-factor(sex))
>   
>   # we define the data frame with all the variables 
>   
>   data<-cldata[,c("measure","age", "sex", "city")]
>   
>   # And the formula of the substantive lm model 
>   # sex as an outcome only because it is the only binary variable in the dataset...
>   
>   formula<-as.formula(sex~age+measure+(1|city))
>   
>   #And finally we run the imputation function:
>   
>   imp<-jomo.glmer(formula,data, nburn=2, nbetween=2, nimp=2)
This function is beta software. Please use carefully and report any bug to the package mantainer
boundary (singular) fit: see help('isSingular')
First imputation registered. 
Imputation number  2 registered 
The posterior mean of the substantive model fixed effects estimates is:
    (Intercept)       age    measure
sex  -0.0746925 0.1866882 0.02724895
The posterior mean of the substantive model residual variance is:
[1] 1
The posterior mean of the substantive model random effects covariance matrix is:
            (Intercept)
(Intercept)   0.2129356
The posterior mean of the substantive model random effects estimates is:
    (Intercept)
0  0.1197485224
1  0.1037186272
2  0.0699197220
3 -0.1728599046
4 -0.0557791851
5 -0.0983694143
6 -0.0278788942
7 -0.0052472963
8  0.0002773065
9  0.1769760360
>   
>   # Note we are using only 2 iterations to avoid time consuming examples, 
>   # which go against CRAN policies. In real applications we would use
>   # much larger burn-ins (around 1000) and at least 5 imputations.
>   # Check help page for function jomo to see how to fit the model and 
>   # combine estimates with Rubin's rules
> 
>   
>   
> 
> 
> 
> cleanEx()
> nameEx("jomo.lm.MCMCchain")
> ### * jomo.lm.MCMCchain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo.lm.MCMCchain
> ### Title: lm Compatible JM Imputation - A tool to check convergence of the
> ###   MCMC
> ### Aliases: jomo.lm.MCMCchain
> 
> ### ** Examples
> 
> 
> 
>    # make sure sex is a factor:
>   
>   sldata<-within(sldata, sex<-factor(sex))
>   
>   # we define the data frame with all the variables 
>   
>   data<-sldata[,c("measure","age", "sex")]
>   
>   # And the formula of the substantive lm model
>   
>   formula<-as.formula(measure~sex+age+I(age^2))
>   
>   #And finally we run the imputation function:
>   
>   imp<-jomo.lm.MCMCchain(formula,data, nburn=100)
This function is beta software. Use carefully and please report any bug to the package mantainer
..........First imputation registered. 
The posterior mean of the substantive model fixed effects estimates is:
        (Intercept)      sex1      age     I(age^2)
measure   -8.596696 0.0175454 0.279558 -0.002038667
The posterior mean of the substantive model residual variance is:
[1] 0.7597216
>   
>   # Note we are using only 100 iterations to avoid time consuming examples,
>   # which go against CRAN policies. 
>   
>   # We can check, for example, the convergence of the first element of beta:
>   
>   plot(c(1:100),imp$collectbeta[1,1,1:100],type="l")
>   
>   
> 
> 
> 
> cleanEx()
> nameEx("jomo.lm")
> ### * jomo.lm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo.lm
> ### Title: Joint Modelling Imputation Compatible with Linear Regression
> ###   Model
> ### Aliases: jomo.lm
> 
> ### ** Examples
> 
> 
> 
>    # make sure sex is a factor:
>   
>   sldata<-within(sldata, sex<-factor(sex))
>   
>   # we define the data frame with all the variables 
>   
>   data<-sldata[,c("measure","age", "sex")]
>   
>   # And the formula of the substantive lm model
>   
>   formula<-as.formula(measure~sex+age+I(age^2))
>   
>   #And finally we run the imputation function:
>   
>   imp<-jomo.lm(formula,data, nburn=100, nbetween=100)
This function is beta software. Use carefully and please report any bug to the package mantainer
..........First imputation registered. 
..........Imputation number  2 registered 
..........Imputation number  3 registered 
..........Imputation number  4 registered 
..........Imputation number  5 registered 
The posterior mean of the substantive model fixed effects estimates is:
        (Intercept)       sex1       age     I(age^2)
measure   -9.445672 0.01602583 0.3035626 -0.002204839
The posterior mean of the substantive model residual variance is:
[1] 0.7711634
>   
>   # Note we are using only 100 iterations to avoid time consuming examples, 
>   # which go against CRAN policies. 
>   # If we were interested in a model with interactions:
>   
>   formula2<-as.formula(measure~sex*age)
>   imp2<-jomo.lm(formula2,data, nburn=100, nbetween=100)
This function is beta software. Use carefully and please report any bug to the package mantainer
..........First imputation registered. 
..........Imputation number  2 registered 
..........Imputation number  3 registered 
..........Imputation number  4 registered 
..........Imputation number  5 registered 
The posterior mean of the substantive model fixed effects estimates is:
        (Intercept)       sex1          age   sex1:age
measure   0.9142391 -0.9746183 -0.000201616 0.01420293
The posterior mean of the substantive model residual variance is:
[1] 0.7876293
>   
>   # The analysis and combination steps are as for all the other functions
>   # (see e.g. help file for function jomo)
> 
>   
>   
> 
> 
> 
> cleanEx()
> nameEx("jomo.lmer.MCMCchain")
> ### * jomo.lmer.MCMCchain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo.lmer.MCMCchain
> ### Title: lmer Compatible JM Imputation - A tool to check convergence of
> ###   the MCMC
> ### Aliases: jomo.lmer.MCMCchain
> 
> ### ** Examples
> 
> 
>   # make sure sex is a factor:
>   
>   cldata<-within(cldata, sex<-factor(sex))
>   
>   # we define the data frame with all the variables 
>   
>   data<-cldata[,c("measure","age", "sex", "city")]
>   mylevel<-c(1,1,1,1)
>   
>   # And the formula of the substantive lm model
>   
>   formula<-as.formula(measure~sex+age+I(age^2)+(1|city))
>   
>   #And finally we run the imputation function:
>   
>   imp<-jomo.lmer.MCMCchain(formula,data, level=mylevel, nburn=100)
This function is beta software. Use carefully and please report any bug to the package mantainer
..........First imputation registered. 
The posterior mean of the substantive model fixed effects estimates is:
        (Intercept)      sex1         age     I(age^2)
measure   0.7759147 0.1124738 -0.03227221 -0.007123107
The posterior mean of the substantive model residual variance is:
[1] 0.9790062
The posterior mean of the substantive model random effects covariance matrix is:
            (Intercept)
(Intercept)   0.2532684
The posterior mean of the substantive model random effects estimates is:
  (Intercept)
0  0.25937233
1  0.44491030
2 -0.47929713
3  0.90918357
4 -0.52452439
5 -0.01617967
6 -0.04683733
7 -0.17959535
8 -0.37646252
9 -0.23984461
>   
>   # Note we are using only 100 iterations to avoid time consuming examples, 
>   # which go against CRAN policies. 
>   
>   # We can check, for example, the convergence of the first element of beta:
>   
>   plot(c(1:100),imp$collectbeta[1,1,1:100],type="l")
>   
>   
> 
> 
> 
> cleanEx()
> nameEx("jomo.lmer")
> ### * jomo.lmer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo.lmer
> ### Title: Joint Modelling Imputation Compatible with Linear Mixed-effects
> ###   Regression Model
> ### Aliases: jomo.lmer
> 
> ### ** Examples
> 
> 
>   # make sure sex is a factor:
>   
>   cldata<-within(cldata, sex<-factor(sex))
>   
>   # we define the data frame with all the variables 
>   
>   data<-cldata[,c("measure","age", "sex", "city")]
>   mylevel<-c(1,1,1,1)
>   
>   # And the formula of the substantive lm model
>   
>   formula<-as.formula(measure~sex+age+I(age^2)+(1|city))
>   
>   #And finally we run the imputation function:
>   
>   imp<-jomo.lmer(formula,data, level=mylevel, nburn=10, nbetween=10)
This function is beta software. Use carefully and please report any bug to the package mantainer
.First imputation registered. 
.Imputation number  2 registered 
.Imputation number  3 registered 
.Imputation number  4 registered 
.Imputation number  5 registered 
The posterior mean of the substantive model fixed effects estimates is:
        (Intercept)      sex1         age     I(age^2)
measure   0.7670544 0.1147332 -0.03355975 -0.007353869
The posterior mean of the substantive model residual variance is:
[1] 0.9675603
The posterior mean of the substantive model random effects covariance matrix is:
            (Intercept)
(Intercept)   0.2481979
The posterior mean of the substantive model random effects estimates is:
    (Intercept)
0  2.750670e-01
1  4.939971e-01
2 -4.812490e-01
3  9.265629e-01
4 -5.295025e-01
5 -8.263564e-05
6 -5.894204e-02
7 -1.806015e-01
8 -3.717815e-01
9 -2.752995e-01
>   
>   # Note we are using only 10 iterations to avoid time consuming examples, 
>   # which go against CRAN policies. 
>   # If we were interested in a model with interactions:
>   
>   # formula2<-as.formula(measure~sex*age+(1|city))
>   # imp2<-jomo.lmer(formula2,data, level=mylevel, nburn=10, nbetween=10)
>   
>   # The analysis and combination steps are as for all the other functions
>   # (see e.g. help file for function jomo)
>   
>   
>   
> 
> 
> 
> cleanEx()
> nameEx("jomo.polr.MCMCchain")
> ### * jomo.polr.MCMCchain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo.polr.MCMCchain
> ### Title: polr Compatible JM Imputation - A tool to check convergence of
> ###   the MCMC
> ### Aliases: jomo.polr.MCMCchain
> 
> ### ** Examples
> 
> 
>   # make sure social is a factor:
>   
>   sldata<-within(sldata, social<-factor(social))
>   
>   # we define the data frame with all the variables 
>   
>   data<-sldata[,c("measure","age", "social")]
>   
>   # And the formula of the substantive lm model 
>   # social as an outcome only because it is the only ordinal variable in the dataset...
>   
>   formula<-as.formula(social~age+measure)
>   
>   #And finally we run the imputation function:
>   
>   imp<-jomo.polr.MCMCchain(formula,data, nburn=100)
This function is beta software. Use carefully and please report any bug to the package mantainer
..........First imputation registered. 
The posterior mean of the substantive model fixed effects estimates is:
               age    measure        1|2       2|3      3|4
social 0.006027637 0.09241135 -0.1285322 0.6082406 1.290482
The posterior mean of the substantive model residual variance is:
     [,1]
[1,]    1
>   
>   # Note we are using only 100 iterations to avoid time consuming examples,
>   # which go against CRAN policies. In real applications we would use
>   # much larger burn-ins (around 1000, to say the least).
>   
>   # We can check, for example, the convergence of the first element of beta:
>   
>   plot(c(1:100),imp$collectbeta[1,1,1:100],type="l")
>   
>   
> 
> 
> 
> cleanEx()
> nameEx("jomo.polr")
> ### * jomo.polr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo.polr
> ### Title: Joint Modelling Imputation Compatible with Proportional Odds
> ###   Ordinal Probit Regression
> ### Aliases: jomo.polr
> 
> ### ** Examples
> 
> 
>    # make sure social is a factor:
>   
>   sldata<-within(sldata, social<-factor(social))
>   
>   # we define the data frame with all the variables 
>   
>   data<-sldata[,c("measure","age", "social")]
>   
>   # And the formula of the substantive lm model 
>   # social as an outcome only because it is the only binary variable in the dataset...
>   
>   formula<-as.formula(social~age+measure)
>   
>   #And finally we run the imputation function:
>   
>   imp<-jomo.polr(formula,data, nburn=100, nbetween=100, nimp=2)
This function is beta software. Use carefully and please report any bug to the package mantainer
..........First imputation registered. 
..........Imputation number  2 registered 
The posterior mean of the substantive model fixed effects estimates is:
               age   measure       1|2      2|3      3|4
social 0.004874183 0.1027432 -19.85795 57.56181 121.2329
The posterior mean of the substantive model residual variance is:
     [,1]
[1,]    1
>   
>   # Note we are using only 100 iterations to avoid time consuming examples, 
>   # which go against CRAN policies. In real applications we would use
>   # much larger burn-ins (around 1000) and at least 5 imputations.
>   # Check help page for function jomo to see how to fit the model and 
>   # combine estimates with Rubin's rules
> 
>   
> 
> 
> 
> cleanEx()
> nameEx("jomo.smc.MCMCchain")
> ### * jomo.smc.MCMCchain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo.smc.MCMCchain
> ### Title: Substantive Model Compatible JM Imputation - A tool to check
> ###   convergence of the MCMC
> ### Aliases: jomo.smc.MCMCchain
> 
> ### ** Examples
> 
> 
>  # make sure sex is a factor:
>   
>   cldata<-within(cldata, sex<-factor(sex))
>   
>   # we define the data frame with all the variables 
>   
>   data<-cldata[,c("measure","age", "sex", "city")]
>   mylevel<-c(1,1,1,1)
>   
>   # And the formula of the substantive lm model
>   
>   formula<-as.formula(measure~sex+age+I(age^2)+(1|city))
>   
>   #And finally we run the imputation function:
>   
>   imp<-jomo.smc.MCMCchain(formula,data, level=mylevel, nburn=100, model="lmer")
This function is beta software. Use carefully and please report any bug to the package mantainer
..........First imputation registered. 
The posterior mean of the substantive model fixed effects estimates is:
        (Intercept)      sex1         age     I(age^2)
measure   0.7759147 0.1124738 -0.03227221 -0.007123107
The posterior mean of the substantive model residual variance is:
[1] 0.9790062
The posterior mean of the substantive model random effects covariance matrix is:
            (Intercept)
(Intercept)   0.2532684
The posterior mean of the substantive model random effects estimates is:
  (Intercept)
0  0.25937233
1  0.44491030
2 -0.47929713
3  0.90918357
4 -0.52452439
5 -0.01617967
6 -0.04683733
7 -0.17959535
8 -0.37646252
9 -0.23984461
>   
>   # Note we are using only 100 iterations to avoid time consuming examples, 
>   # which go against CRAN policies. 
>   
>   # We can check, for example, the convergence of the first element of beta:
>   
>   plot(c(1:100),imp$collectbeta[1,1,1:100],type="l")
>  
>   
> 
> 
> 
> cleanEx()
> nameEx("jomo.smc")
> ### * jomo.smc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo.smc
> ### Title: Joint Modelling Substantive Model Compatible Imputation
> ### Aliases: jomo.smc
> 
> ### ** Examples
> 
> 
>   # make sure sex is a factor:
>   
>   cldata<-within(cldata, sex<-factor(sex))
>   
>   # we define the data frame with all the variables 
>   
>   data<-cldata[,c("measure","age", "sex", "city")]
>   mylevel<-c(1,1,1,1)
>   
>   # And the formula of the substantive lm model
>   
>   formula<-as.formula(measure~sex+age+I(age^2)+(1|city))
>   
>   #And finally we run the imputation function:
>   
>   imp<-jomo.smc(formula,data, level=mylevel, nburn=100, nbetween=100, model="lmer")
This function is beta software. Use carefully and please report any bug to the package mantainer
..........First imputation registered. 
..........Imputation number  2 registered 
..........Imputation number  3 registered 
..........Imputation number  4 registered 
..........Imputation number  5 registered 
The posterior mean of the substantive model fixed effects estimates is:
        (Intercept)      sex1         age     I(age^2)
measure   0.7278818 0.1091597 -0.03610134 -0.006206438
The posterior mean of the substantive model residual variance is:
[1] 0.9930269
The posterior mean of the substantive model random effects covariance matrix is:
            (Intercept)
(Intercept)   0.2540688
The posterior mean of the substantive model random effects estimates is:
  (Intercept)
0  0.31517459
1  0.48893626
2 -0.44585301
3  0.96684513
4 -0.49063491
5  0.01489120
6  0.02276451
7 -0.16784140
8 -0.35161046
9 -0.16956867
>   
>   # Note we are using only 100 iterations to avoid time consuming examples, 
>   # which go against CRAN policies. 
>   # If we were interested in a model with interactions:
>   
>   # formula2<-as.formula(measure~sex*age+(1|city))
>   # imp2<-jomo.smc(formula2,data, level=mylevel, nburn=100, nbetween=100, model="lmer")
>   
>   # The analysis and combination steps are as for all the other functions
>   # (see e.g. help file for function jomo)
> 
>   
>   
>   
> 
> 
> 
> cleanEx()
> nameEx("jomo1.MCMCchain")
> ### * jomo1.MCMCchain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo1.MCMCchain
> ### Title: JM Imputation of single level data - A tool to check convergence
> ###   of the MCMC
> ### Aliases: jomo1.MCMCchain
> 
> ### ** Examples
> 
> 
> # define all the inputs:
>   
> Y<-sldata[,c("measure","age")]
> nburn=as.integer(200);
> 
> # Then we run the function:
> 
> imp<-jomo1.MCMCchain(Y,nburn=nburn)
Found  2 continuous outcomes and no categorical. Using function jomo1con. 
....................The posterior mean of the fixed effects estimates is:
                X1
measure  0.8896583
age     67.1090415

The posterior covariance matrix is:
          measure        age
measure 0.7714186  0.4020095
age     0.4020095 53.0292423
> 
> #We can check the convergence of the first element of beta:
> 
> plot(c(1:nburn),imp$collectbeta[1,1,1:nburn],type="l")
> 
> #Or similarly we can check the convergence of any element of omega:
> 
> plot(c(1:nburn),imp$collectomega[1,2,1:nburn],type="l")
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("jomo1")
> ### * jomo1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo1
> ### Title: JM Imputation of single level data
> ### Aliases: jomo1
> 
> ### ** Examples
> 
> 
> # define all the inputs:
>   
> Y<-sldata[,c("measure","age")]
> nburn=as.integer(200);
> nbetween=as.integer(200);
> nimp=as.integer(5);
> 
> # Then we run the function:
> 
> imp<-jomo1(Y,nburn=nburn,nbetween=nbetween,nimp=nimp)
Found  2 continuous outcomes and no categorical. Using function jomo1con. 
....................First imputation registered. 
....................Imputation number  2 registered 
....................Imputation number  3 registered 
....................Imputation number  4 registered 
....................Imputation number  5 registered 
The posterior mean of the fixed effects estimates is:
                X1
measure  0.8865113
age     67.1487682

The posterior covariance matrix is:
          measure        age
measure 0.7870306  0.4214282
age     0.4214282 52.7091731
> 
>   # Check help page for function jomo to see how to fit the model and 
>   # combine estimates with Rubin's rules
> 
> 
> 
> 
> cleanEx()
> nameEx("jomo1cat.MCMCchain")
> ### * jomo1cat.MCMCchain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo1cat.MCMCchain
> ### Title: JM Imputation of single level data with categorical variables -
> ###   A tool to check convergence of the MCMC
> ### Aliases: jomo1cat.MCMCchain
> 
> ### ** Examples
> 
> # make sure sex is a factor:
> 
> sldata<-within(sldata, sex<-factor(sex))
> 
> # we define all the inputs:
> #  nburn is smaller than necessary. This is
> #just because of CRAN policies on the examples.
> 
> Y.cat=sldata[,c("social"), drop=FALSE]
> Y.numcat=matrix(4,1,1)
> X=data.frame(rep(1,300),sldata[,c("sex")])
> colnames(X)<-c("const", "sex")
> beta.start<-matrix(0,2,3)
> l1cov.start<-diag(1,3)
> l1cov.prior=diag(1,3);
> nburn=as.integer(100);
> 
> # Finally we run the sampler:
> 
> imp<-jomo1cat.MCMCchain(Y.cat,Y.numcat,X,beta.start,l1cov.start,l1cov.prior,nburn=nburn)
..........The posterior mean of the fixed effects estimates is:
              const        sex
social.1  0.1022171 0.02438028
social.2 -0.2175556 0.24150418
social.3 -0.2100957 0.19922554

The posterior covariance matrix is:
         social.1 social.2 social.3
social.1      1.0      0.5      0.5
social.2      0.5      1.0      0.5
social.3      0.5      0.5      1.0
> 
> #We can check the convergence of the first element of beta:
> 
> plot(c(1:nburn),imp$collectbeta[1,1,1:nburn],type="l")
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("jomo1cat")
> ### * jomo1cat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo1cat
> ### Title: JM Imputation of single level data with categorical variables
> ### Aliases: jomo1cat
> 
> ### ** Examples
> 
> # make sure sex is a factor:
> 
> sldata<-within(sldata, sex<-factor(sex))
> 
> 
> # we define all the inputs:
> # nimp, nburn and nbetween are smaller than they should. This is
> #just because of CRAN policies on the examples.
> 
> Y.cat=sldata[,c("social"), drop=FALSE]
> Y.numcat=matrix(4,1,1)
> X=data.frame(rep(1,300),sldata[,c("sex")])
> colnames(X)<-c("const", "sex")
> beta.start<-matrix(0,2,3)
> l1cov.start<-diag(1,3)
> l1cov.prior=diag(1,3);
> nburn=as.integer(100);
> nbetween=as.integer(100);
> nimp=as.integer(5);
> 
> # Finally we run the sampler:
> 
> imp<-jomo1cat(Y.cat,Y.numcat,X,beta.start,l1cov.start,l1cov.prior,nburn,nbetween,nimp)
..........First imputation registered. 
..........Imputation number  2 registered 
..........Imputation number  3 registered 
..........Imputation number  4 registered 
..........Imputation number  5 registered 
The posterior mean of the fixed effects estimates is:
               const       sex
social.1  0.04484066 0.0547286
social.2 -0.22726387 0.2366900
social.3 -0.18126040 0.1734801

The posterior covariance matrix is:
         social.1 social.2 social.3
social.1      1.0      0.5      0.5
social.2      0.5      1.0      0.5
social.3      0.5      0.5      1.0
> 
> #See one of the imputed values:
> 
> cat("Original value was missing (",imp[16,1],"), imputed value:", imp[316,1])
Original value was missing ( NA ), imputed value: 1> 
>   # Check help page for function jomo to see how to fit the model and 
>   # combine estimates with Rubin's rules
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("jomo1con.MCMCchain")
> ### * jomo1con.MCMCchain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo1con.MCMCchain
> ### Title: JM Imputation of single level data with continuous variables
> ###   only - A tool to check convergence of the MCMC
> ### Aliases: jomo1con.MCMCchain
> 
> ### ** Examples
> 
> 
> #We define all the inputs:
> 
> Y=sldata[,c("measure", "age")]
> X=data.frame(rep(1,300),sldata[,c("sex")])
> colnames(X)<-c("const", "sex")
> 
> beta.start<-matrix(0,2,2)
> l1cov.start<-diag(1,2)
> l1cov.prior=diag(1,2);
> nburn=as.integer(200);
> 
> # Then we run he function:
> 
> imp<-jomo1con.MCMCchain(Y,X,beta.start,l1cov.start,l1cov.prior,nburn=nburn)
....................The posterior mean of the fixed effects estimates is:
             const           sex
measure  0.8966829 -0.0095578072
age     67.1247189 -0.0002537872

The posterior covariance matrix is:
          measure        age
measure 0.7925897  0.4386093
age     0.4386093 52.8936074
> 
> #We can check the convergence of the first element of beta:
> 
> plot(c(1:nburn),imp$collectbeta[1,1,1:nburn],type="l")
> 
> #Or similarly we can check the convergence of any element of omega:
> 
> plot(c(1:nburn),imp$collectomega[1,2,1:nburn],type="l")
> 
> 
> 
> cleanEx()
> nameEx("jomo1con")
> ### * jomo1con
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo1con
> ### Title: JM Imputation of single level data with continuous variables
> ###   only
> ### Aliases: jomo1con
> 
> ### ** Examples
> 
> 
> #We define all the inputs:
> 
> Y=sldata[,c("measure", "age")]
> X=data.frame(rep(1,300),sldata[,c("sex")])
> colnames(X)<-c("const", "sex")
> beta.start<-matrix(0,2,2)
> l1cov.start<-diag(1,2)
> l1cov.prior=diag(1,2);
> nburn=as.integer(200);
> nbetween=as.integer(200);
> nimp=as.integer(5);
> 
> # Then we run he function:
> 
> imp<-jomo1con(Y,X,beta.start,l1cov.start,l1cov.prior,nburn,nbetween,nimp)
....................First imputation registered. 
....................Imputation number  2 registered 
....................Imputation number  3 registered 
....................Imputation number  4 registered 
....................Imputation number  5 registered 
The posterior mean of the fixed effects estimates is:
             const         sex
measure  0.8874894 0.001808598
age     67.0910369 0.035108606

The posterior covariance matrix is:
          measure       age
measure 0.7933951  0.442556
age     0.4425560 52.698910
> 
> cat("Original value was missing(",imp[1,1],"), imputed value:", imp[301,1])
Original value was missing( NA ), imputed value: -0.4543589> 
>   # Check help page for function jomo to see how to fit the model and 
>   # combine estimates with Rubin's rules
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("jomo1mix.MCMCchain")
> ### * jomo1mix.MCMCchain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo1mix.MCMCchain
> ### Title: JM Imputation of single level data with mixed variable types
> ### Aliases: jomo1mix.MCMCchain
> 
> ### ** Examples
> 
> 
> #Then, we define all the inputs:
> # nburn is smaller than needed. This is
> #just because of CRAN policies on the examples.
> 
> Y.con=sldata[,c("measure","age")]
> Y.cat=sldata[,c("social"), drop=FALSE]
> Y.numcat=matrix(4,1,1)
> X=data.frame(rep(1,300),sldata[,c("sex")])
> colnames(X)<-c("const", "sex")
> beta.start<-matrix(0,2,5)
> l1cov.start<-diag(1,5)
> l1cov.prior=diag(1,5);
> nburn=as.integer(100);
> 
> 
> #Then we run the sampler:
> 
> imp<-jomo1mix.MCMCchain(Y.con,Y.cat,Y.numcat,X,beta.start,l1cov.start,l1cov.prior,nburn=nburn)
..........The posterior mean of the fixed effects estimates is:
                const         sex
measure   0.885838904 -0.01136571
age      67.079264807  0.06154559
social.1  0.126520959  0.04664689
social.2  0.041948895  0.22462631
social.3  0.004400252  0.20686224

The posterior covariance matrix is:
             measure         age    social.1    social.2    social.3
measure   0.77940147  0.31398546 -0.06442451 -0.01003573 -0.09029474
age       0.31398546 29.81650671 -0.09719010  0.06686814 -0.22464229
social.1 -0.06442451 -0.09719010  1.00000000  0.50000000  0.50000000
social.2 -0.01003573  0.06686814  0.50000000  1.00000000  0.50000000
social.3 -0.09029474 -0.22464229  0.50000000  0.50000000  1.00000000
> 
> #We can check the convergence of the first element of beta:
> 
> plot(c(1:nburn),imp$collectbeta[1,1,1:nburn],type="l")
> 
> #Or similarly we can check the convergence of any element of omega:
> 
> plot(c(1:nburn),imp$collectomega[1,1,1:nburn],type="l")
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("jomo1mix")
> ### * jomo1mix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo1mix
> ### Title: JM Imputation of single level data with mixed variable types
> ### Aliases: jomo1mix
> 
> ### ** Examples
> 
> 
> #Then, we define all the inputs:
> # nburn is smaller than needed. This is
> #just because of CRAN policies on the examples.
> 
> Y.con=sldata[,c("measure","age")]
> Y.cat=sldata[,c("social"), drop=FALSE]
> Y.numcat=matrix(4,1,1)
> X=data.frame(rep(1,300),sldata[,c("sex")])
> colnames(X)<-c("const", "sex")
> beta.start<-matrix(0,2,5)
> l1cov.start<-diag(1,5)
> l1cov.prior=diag(1,5);
> nburn=as.integer(100);
> nbetween=as.integer(100);
> nimp=as.integer(5);
> 
> #Then we run the sampler:
> 
> imp<-jomo1mix(Y.con,Y.cat,Y.numcat,X,beta.start,l1cov.start,
+       l1cov.prior,nburn,nbetween,nimp)
..........First imputation registered. 
..........Imputation number  2 registered 
..........Imputation number  3 registered 
..........Imputation number  4 registered 
..........Imputation number  5 registered 
The posterior mean of the fixed effects estimates is:
               const          sex
measure   0.89162718 -0.011188600
age      67.12089774  0.008236397
social.1  0.14564426  0.022980729
social.2  0.05378355  0.206805894
social.3  0.01682586  0.167702239

The posterior covariance matrix is:
             measure        age   social.1    social.2   social.3
measure   0.80599249  0.4791493 -0.1174430 -0.05583169 -0.1632661
age       0.47914935 54.1548064 -0.1687125  0.32599006  0.1119388
social.1 -0.11744303 -0.1687125  1.0000000  0.50000000  0.5000000
social.2 -0.05583169  0.3259901  0.5000000  1.00000000  0.5000000
social.3 -0.16326608  0.1119388  0.5000000  0.50000000  1.0000000
> 
> cat("Original value was missing(",imp[1,1],"), imputed value:", imp[301,1])
Original value was missing( NA ), imputed value: -0.2214449> 
>   # Check help page for function jomo to see how to fit the model and 
>   # combine estimates with Rubin's rules
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("jomo1ran.MCMCchain")
> ### * jomo1ran.MCMCchain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo1ran.MCMCchain
> ### Title: JM Imputation of clustered data - A tool to check convergence of
> ###   the MCMC
> ### Aliases: jomo1ran.MCMCchain
> 
> ### ** Examples
> 
> 
>   # define all the inputs:
>   
>   Y<-cldata[,c("measure","age")]
>   clus<-cldata[,c("city")]
> nburn=as.integer(200);
> 
> #And finally we run the imputation function:
> imp<-jomo1ran.MCMCchain(Y,clus=clus,nburn=nburn)
Found  2 continuous outcomes and no categorical. Using function jomo1rancon. 
....................The posterior mean of the fixed effects estimates is:
               X1
measure 0.6655405
age     0.3094749

The posterior mean of the random effects estimates is:
   measure.Z1      age.Z1
0  0.41794002 -0.28258523
1  0.60229986 -0.37163158
2 -0.36102615  0.15469539
3  1.06039170  0.03938371
4 -0.41964912 -0.11211047
5  0.10707736 -0.28046132
6  0.10095477  0.22028967
7 -0.09418288  0.23530210
8 -0.26928229 -0.41146692
9 -0.14584808  0.07512890

The posterior mean of the level 1 covariance matrices is:
            measure         age
measure  1.00350365 -0.09585593
age     -0.09585593  3.49522404

The posterior mean of the level 2 covariance matrix is:
            measure.Z1      age.Z1
measure*Z1  0.37897394 -0.02881529
age*Z1     -0.02881529  0.22255685
> #We can check the convergence of the first element of beta:
> 
> plot(c(1:nburn),imp$collectbeta[1,1,1:nburn],type="l")
> 
> #Or similarly we can check the convergence of any element of the level 2 covariance matrix:
> 
> plot(c(1:nburn),imp$collectcovu[1,2,1:nburn],type="l")
> 
> 
> 
> cleanEx()
> nameEx("jomo1ran")
> ### * jomo1ran
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo1ran
> ### Title: JM Imputation of clustered data
> ### Aliases: jomo1ran
> 
> ### ** Examples
> 
> 
> 
> # define all the inputs:
>   
> Y<-cldata[,c("measure","age")]
> clus<-cldata[,c("city")]
> nburn=as.integer(200);
> nbetween=as.integer(200);
> nimp=as.integer(5);
> 
> 
> #And finally we run the imputation function:
> imp<-jomo1ran(Y,clus=clus,nburn=nburn,nbetween=nbetween,nimp=nimp)
Found  2 continuous outcomes and no categorical. Using function jomo1rancon. 
....................First imputation registered. 
....................Imputation number  2 registered 
....................Imputation number  3 registered 
....................Imputation number  4 registered 
....................Imputation number  5 registered 
The posterior mean of the fixed effects estimates is:
               X1
measure 0.8258795
age     0.2289910

The posterior mean of the random effects estimates is:
   measure.Z1      age.Z1
0  0.25479507 -0.20461961
1  0.42865165 -0.29700103
2 -0.52156498  0.22377082
3  0.90840869  0.16063075
4 -0.58221915 -0.04105992
5 -0.03788197 -0.21928126
6 -0.05525023  0.28393631
7 -0.25505282  0.30971719
8 -0.43100440 -0.34355184
9 -0.28088228  0.16514950

The posterior mean of the level 1 covariance matrices is:
           measure        age
measure  0.9932926 -0.1077829
age     -0.1077829  3.5026089

The posterior mean of the level 2 covariance matrix is:
            measure.Z1      age.Z1
measure*Z1  0.36909521 -0.01515055
age*Z1     -0.01515055  0.22883342
> 
> #we could even run it with fixed or random cluster-specific covariance matrices:
> 
> #imp<-jomo1ran(Y,clus=clus,nburn=nburn,nbetween=nbetween,nimp=nimp, meth="fixed")
> #or:
> #imp<-jomo1ran(Y,clus=clus,nburn=nburn,nbetween=nbetween,nimp=nimp, meth="random")
> 
>   # Check help page for function jomo to see how to fit the model and 
>   # combine estimates with Rubin's rules
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("jomo1rancat.MCMCchain")
> ### * jomo1rancat.MCMCchain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo1rancat.MCMCchain
> ### Title: JM Imputation of clustered data with categorical variables - A
> ###   tool to check convergence of the MCMC
> ### Aliases: jomo1rancat.MCMCchain
> 
> ### ** Examples
> 
> 
> # define all the inputs:
> # nburn  smaller than needed. This is
> #just because of CRAN policies on the examples.
> 
> Y.cat=cldata[,c("social"), drop=FALSE]
> Y.numcat=matrix(4,1,1)
> X=data.frame(rep(1,1000),cldata[,c("sex")])
> colnames(X)<-c("const", "sex")
> Z<-data.frame(rep(1,1000))
> clus<-cldata[,c("city")]
> beta.start<-matrix(0,2,3)
> u.start<-matrix(0,10,3)
> l1cov.start<-diag(1,3)
> l2cov.start<-diag(1,3)
> l1cov.prior=diag(1,3);
> l2cov.prior=diag(1,3);
> nburn=as.integer(100);
> 
> #And finally we run the imputation function:
> 
> imp<-jomo1rancat.MCMCchain(Y.cat, Y.numcat, X,Z,clus,beta.start,u.start,l1cov.start, 
+ l2cov.start,l1cov.prior,l2cov.prior,nburn=nburn)
..........The posterior mean of the fixed effects estimates is:
             const         sex
social.1 0.4774508 -0.06715957
social.2 0.4930911 -0.02402025
social.3 0.2371039 -0.00589585

The posterior mean of the random effects estimates is:
  social.1.rep.1..1000. social.2.rep.1..1000. social.3.rep.1..1000.
0            0.07452287           -0.44343198           -0.30007536
1            0.69012977            0.14614678            0.11367811
2            0.37843925           -0.30454840           -0.14951742
3            0.16332317            0.01618653            0.30190321
4           -0.12920560            0.41438836            0.49688727
5           -0.82077800           -0.79364977           -0.40980444
6           -0.75103340           -0.64485075           -0.47768706
7           -0.68675434           -0.54336563            0.03722016
8           -0.18584379           -0.11846058            0.23692288
9            0.61220199           -0.03192530            0.22843909

The posterior mean of the level 1 covariance matrices is:
         social.1 social.2 social.3
social.1      1.0      0.5      0.5
social.2      0.5      1.0      0.5
social.3      0.5      0.5      1.0

The posterior mean of the level 2 covariance matrix is:
                      social.1.rep.1..1000. social.2.rep.1..1000.
social.1*rep.1..1000.             0.4862359             0.2052569
social.2*rep.1..1000.             0.2052569             0.4059234
social.3*rep.1..1000.             0.1280114             0.1557246
                      social.3.rep.1..1000.
social.1*rep.1..1000.             0.1280114
social.2*rep.1..1000.             0.1557246
social.3*rep.1..1000.             0.2910399
> #We can check the convergence of the first element of beta:
> 
> plot(c(1:nburn),imp$collectbeta[1,1,1:nburn],type="l")
> 
> #Or similarly we can check the convergence of any element of the level 2 covariance matrix:
> 
> plot(c(1:nburn),imp$collectcovu[1,2,1:nburn],type="l")
> 
> 
> 
> cleanEx()
> nameEx("jomo1rancat")
> ### * jomo1rancat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo1rancat
> ### Title: JM Imputation of clustered data with categorical variables
> ### Aliases: jomo1rancat
> 
> ### ** Examples
> 
> 
> 
> #we define all the inputs:
> # nimp, nburn and nbetween are smaller than they should. This is
> #just because of CRAN policies on the examples.
> 
> Y.cat=cldata[,c("social"), drop=FALSE]
> Y.numcat=matrix(4,1,1)
> X=data.frame(rep(1,1000),cldata[,c("sex")])
> colnames(X)<-c("const", "sex")
> Z<-data.frame(rep(1,1000))
> clus<-cldata[,c("city")]
> beta.start<-matrix(0,2,3)
> u.start<-matrix(0,10,3)
> l1cov.start<-diag(1,3)
> l2cov.start<-diag(1,3)
> l1cov.prior=diag(1,3);
> l2cov.prior=diag(1,3);
> nburn=as.integer(100);
> nbetween=as.integer(100);
> nimp=as.integer(4);
> 
> #And finally we run the imputation function:
> 
> imp<-jomo1rancat(Y.cat, Y.numcat, X,Z,clus,beta.start,u.start,l1cov.start, 
+                l2cov.start,l1cov.prior,l2cov.prior,nburn,nbetween,nimp)
..........First imputation registered. 
..........Imputation number  2 registered 
..........Imputation number  3 registered 
..........Imputation number  4 registered 
The posterior mean of the fixed effects estimates is:
             const         sex
social.1 0.2854197 -0.07468670
social.2 0.2505644 -0.06970922
social.3 0.2202568 -0.02488300

The posterior mean of the random effects estimates is:
  social.1*rep.1..1000. social.2*rep.1..1000. social.3*rep.1..1000.
0            0.28477198           -0.17172231           -0.24585368
1            0.89322251            0.38952022            0.19454584
2            0.60779247           -0.04764229           -0.09477286
3            0.45279810            0.40516940            0.40438720
4            0.05177929            0.68613656            0.53319928
5           -0.66525323           -0.57363786           -0.43668941
6           -0.53766432           -0.37203944           -0.45989780
7           -0.50994453           -0.29108993            0.04729571
8            0.06122843            0.16621690            0.26848468
9            0.74262640            0.19367378            0.20509177

The posterior mean of the level 1 covariance matrices is:
         social.1 social.2 social.3
social.1      1.0      0.5      0.5
social.2      0.5      1.0      0.5
social.3      0.5      0.5      1.0

The posterior mean of the level 2 covariance matrix is:
                      social.1*rep.1..1000. social.2*rep.1..1000.
social.1*rep.1..1000.             0.4963022             0.1819907
social.2*rep.1..1000.             0.1819907             0.3038391
social.3*rep.1..1000.             0.1408289             0.1458590
                      social.3*rep.1..1000.
social.1*rep.1..1000.             0.1408289
social.2*rep.1..1000.             0.1458590
social.3*rep.1..1000.             0.2750728
> 
>  cat("Original value was missing (",imp[3,1],"), imputed value:", imp[1003,1])
Original value was missing ( NA ), imputed value: 3>  
>   # Check help page for function jomo to see how to fit the model and 
>   # combine estimates with Rubin's rules
>              
> 
> 
> 
> 
> cleanEx()
> nameEx("jomo1rancathr.MCMCchain")
> ### * jomo1rancathr.MCMCchain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo1rancathr.MCMCchain
> ### Title: JM Imputation of clustered data with categorical variables with
> ###   cluster-specific covariance matrices - A tool to check convergence of
> ###   the MCMC
> ### Aliases: jomo1rancathr.MCMCchain
> 
> ### ** Examples
> 
> 
> #we define the inputs
> #  nburn is smaller than needed. This is
> #just because of CRAN policies on the examples.
> 
> Y.cat=cldata[,c("social"), drop=FALSE]
> Y.numcat=matrix(4,1,1)
> X=data.frame(rep(1,1000),cldata[,c("sex")])
> colnames(X)<-c("const", "sex")
> Z<-data.frame(rep(1,1000))
> clus<-cldata[,c("city")]
> beta.start<-matrix(0,2,3)
> u.start<-matrix(0,10,3)
> l1cov.start<-matrix(diag(1,3),30,3,2)
> l2cov.start<-diag(1,3)
> l1cov.prior=diag(1,3);
> l2cov.prior=diag(1,3);
> a=5
> nburn=as.integer(100);
> 
> #Finally we run either the model with fixed or random cluster-specific covariance matrices:
> 
> imp<-jomo1rancathr.MCMCchain(Y.cat, Y.numcat, X,Z,clus,beta.start,
+           u.start,l1cov.start, l2cov.start,l1cov.prior,l2cov.prior,nburn=nburn, a=a, meth="fixed")
..........The posterior mean of the fixed effects estimates is:
             const         sex
social.1 0.4774508 -0.06715957
social.2 0.4930911 -0.02402025
social.3 0.2371039 -0.00589585

The posterior mean of the random effects estimates is:
  social.1.rep.1..1000. social.2.rep.1..1000. social.3.rep.1..1000.
0            0.07452287           -0.44343198           -0.30007536
1            0.69012977            0.14614678            0.11367811
2            0.37843925           -0.30454840           -0.14951742
3            0.16332317            0.01618653            0.30190321
4           -0.12920560            0.41438836            0.49688727
5           -0.82077800           -0.79364977           -0.40980444
6           -0.75103340           -0.64485075           -0.47768706
7           -0.68675434           -0.54336563            0.03722016
8           -0.18584379           -0.11846058            0.23692288
9            0.61220199           -0.03192530            0.22843909

The posterior mean of the level 1 covariance matrices is:
           social.1 social.2 social.3
social.1.0      1.0      0.5      0.5
social.2.0      0.5      1.0      0.5
social.3.0      0.5      0.5      1.0
social.1.1      1.0      0.5      0.5
social.2.1      0.5      1.0      0.5
social.3.1      0.5      0.5      1.0
social.1.2      1.0      0.5      0.5
social.2.2      0.5      1.0      0.5
social.3.2      0.5      0.5      1.0
social.1.3      1.0      0.5      0.5
social.2.3      0.5      1.0      0.5
social.3.3      0.5      0.5      1.0
social.1.4      1.0      0.5      0.5
social.2.4      0.5      1.0      0.5
social.3.4      0.5      0.5      1.0
social.1.5      1.0      0.5      0.5
social.2.5      0.5      1.0      0.5
social.3.5      0.5      0.5      1.0
social.1.6      1.0      0.5      0.5
social.2.6      0.5      1.0      0.5
social.3.6      0.5      0.5      1.0
social.1.7      1.0      0.5      0.5
social.2.7      0.5      1.0      0.5
social.3.7      0.5      0.5      1.0
social.1.8      1.0      0.5      0.5
social.2.8      0.5      1.0      0.5
social.3.8      0.5      0.5      1.0
social.1.9      1.0      0.5      0.5
social.2.9      0.5      1.0      0.5
social.3.9      0.5      0.5      1.0

The posterior mean of the level 2 covariance matrix is:
                      social.1.rep.1..1000. social.2.rep.1..1000.
social.1*rep.1..1000.             0.4862359             0.2052569
social.2*rep.1..1000.             0.2052569             0.4059234
social.3*rep.1..1000.             0.1280114             0.1557246
                      social.3.rep.1..1000.
social.1*rep.1..1000.             0.1280114
social.2*rep.1..1000.             0.1557246
social.3*rep.1..1000.             0.2910399
> 
> #We can check the convergence of the first element of beta:
> 
> plot(c(1:nburn),imp$collectbeta[1,1,1:nburn],type="l")
> 
> #Or similarly we can check the convergence of any element of th elevel 2 covariance matrix:
> 
> plot(c(1:nburn),imp$collectcovu[1,2,1:nburn],type="l")
> 
> 
> 
> cleanEx()
> nameEx("jomo1rancathr")
> ### * jomo1rancathr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo1rancathr
> ### Title: JM Imputation of clustered data with categorical variables with
> ###   cluster-specific covariance matrices
> ### Aliases: jomo1rancathr
> 
> ### ** Examples
> 
> 
> # we define the inputs
> # nimp, nburn and nbetween are smaller than they should. This is
> #just because of CRAN policies on the examples.
> 
> Y.cat=cldata[,c("social"), drop=FALSE]
> Y.numcat=matrix(4,1,1)
> X=data.frame(rep(1,1000),cldata[,c("sex")])
> colnames(X)<-c("const", "sex")
> Z<-data.frame(rep(1,1000))
> clus<-cldata[,c("city")]
> beta.start<-matrix(0,2,3)
> u.start<-matrix(0,10,3)
> l1cov.start<-matrix(diag(1,3),30,3,2)
> l2cov.start<-diag(1,3)
> l1cov.prior=diag(1,3);
> l2cov.prior=diag(1,3);
> a=5
> nburn=as.integer(100);
> nbetween=as.integer(100);
> nimp=as.integer(4);
> 
> #Finally we run either the model with fixed or random cluster-specific cov. matrices:
> 
> imp<-jomo1rancathr(Y.cat, Y.numcat, X,Z,clus,beta.start,u.start,l1cov.start, 
+       l2cov.start,l1cov.prior,l2cov.prior,nburn,nbetween,nimp, a, meth="fixed")
..........First imputation registered. 
..........Imputation number  2 registered 
..........Imputation number  3 registered 
..........Imputation number  4 registered 
The posterior mean of the fixed effects estimates is:
             const         sex
social.1 0.2854197 -0.07468670
social.2 0.2505644 -0.06970922
social.3 0.2202568 -0.02488300

The posterior mean of the random effects estimates is:
  social.1.rep.1..1000. social.2.rep.1..1000. social.3.rep.1..1000.
0            0.28477198           -0.17172231           -0.24585368
1            0.89322251            0.38952022            0.19454584
2            0.60779247           -0.04764229           -0.09477286
3            0.45279810            0.40516940            0.40438720
4            0.05177929            0.68613656            0.53319928
5           -0.66525323           -0.57363786           -0.43668941
6           -0.53766432           -0.37203944           -0.45989780
7           -0.50994453           -0.29108993            0.04729571
8            0.06122843            0.16621690            0.26848468
9            0.74262640            0.19367378            0.20509177

The posterior mean of the level 1 covariance matrices is:
           social.1 social.2 social.3
social.1.0      1.0      0.5      0.5
social.2.0      0.5      1.0      0.5
social.3.0      0.5      0.5      1.0
social.1.1      1.0      0.5      0.5
social.2.1      0.5      1.0      0.5
social.3.1      0.5      0.5      1.0
social.1.2      1.0      0.5      0.5
social.2.2      0.5      1.0      0.5
social.3.2      0.5      0.5      1.0
social.1.3      1.0      0.5      0.5
social.2.3      0.5      1.0      0.5
social.3.3      0.5      0.5      1.0
social.1.4      1.0      0.5      0.5
social.2.4      0.5      1.0      0.5
social.3.4      0.5      0.5      1.0
social.1.5      1.0      0.5      0.5
social.2.5      0.5      1.0      0.5
social.3.5      0.5      0.5      1.0
social.1.6      1.0      0.5      0.5
social.2.6      0.5      1.0      0.5
social.3.6      0.5      0.5      1.0
social.1.7      1.0      0.5      0.5
social.2.7      0.5      1.0      0.5
social.3.7      0.5      0.5      1.0
social.1.8      1.0      0.5      0.5
social.2.8      0.5      1.0      0.5
social.3.8      0.5      0.5      1.0
social.1.9      1.0      0.5      0.5
social.2.9      0.5      1.0      0.5
social.3.9      0.5      0.5      1.0

The posterior mean of the level 2 covariance matrix is:
                      social.1.rep.1..1000. social.2.rep.1..1000.
social.1*rep.1..1000.             0.4963022             0.1819907
social.2*rep.1..1000.             0.1819907             0.3038391
social.3*rep.1..1000.             0.1408289             0.1458590
                      social.3.rep.1..1000.
social.1*rep.1..1000.             0.1408289
social.2*rep.1..1000.             0.1458590
social.3*rep.1..1000.             0.2750728
>       
> cat("Original value was missing (",imp[3,1],"), imputed value:", imp[1003,1])
Original value was missing ( NA ), imputed value: 3> 
>   # Check help page for function jomo to see how to fit the model and 
>   # combine estimates with Rubin's rules
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("jomo1rancon.MCMCchain")
> ### * jomo1rancon.MCMCchain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo1rancon.MCMCchain
> ### Title: JM Imputation of clustered data with continuous variables only -
> ###   A tool to check convergence of the MCMC
> ### Aliases: jomo1rancon.MCMCchain
> 
> ### ** Examples
> 
> # define all the inputs:
>   
> Y<-cldata[,c("measure","age")]
> clus<-cldata[,c("city")]
> X=data.frame(rep(1,1000),cldata[,c("sex")])
> colnames(X)<-c("const", "sex")
> Z<-data.frame(rep(1,1000))
> beta.start<-matrix(0,2,2)
> u.start<-matrix(0,10,2)
> l1cov.start<-diag(1,2)
> l2cov.start<-diag(1,2)
> l1cov.prior=diag(1,2);
> nburn=as.integer(200);
> 
> l2cov.prior=diag(1,5);
> 
> #And finally we run the imputation function:
> imp<-jomo1rancon.MCMCchain(Y,X,Z,clus,beta.start,u.start,l1cov.start, 
+           l2cov.start,l1cov.prior,l2cov.prior,nburn=nburn)
....................The posterior mean of the fixed effects estimates is:
             const       sex
measure  0.7170520 0.0981268
age     -0.2241195 0.9300045

The posterior mean of the random effects estimates is:
  measure.rep.1..1000. age.rep.1..1000.
0         0.2924625750     -0.021302902
1         0.4717302870     -0.033866361
2        -0.4602594100      0.009129470
3         0.9582429894      0.004794782
4        -0.4926362435     -0.005940397
5         0.0238420043     -0.020845060
6        -0.0006513998      0.018573587
7        -0.1713572696      0.021042086
8        -0.3869250159     -0.026311843
9        -0.2069795004      0.003779126

The posterior mean of the level 1 covariance matrices is:
           measure        age
measure  0.9900817 -0.1334268
age     -0.1334268  3.3383550

The posterior mean of the level 2 covariance matrix is:
                     measure.rep.1..1000. age.rep.1..1000.
measure*rep.1..1000.          0.367577288     -0.002816683
age*rep.1..1000.             -0.002816683      0.005298639
> 
> #We can check the convergence of the first element of beta:
> 
> plot(c(1:nburn),imp$collectbeta[1,1,1:nburn],type="l")
> 
> #Or similarly we can check the convergence of any element of the level 2 covariance matrix:
> 
> plot(c(1:nburn),imp$collectcovu[1,1,1:nburn],type="l")
> 
> 
> 
> 
> cleanEx()
> nameEx("jomo1rancon")
> ### * jomo1rancon
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo1rancon
> ### Title: JM Imputation of clustered data with continuous variables only
> ### Aliases: jomo1rancon
> 
> ### ** Examples
> 
> 
> 
> # we define all the inputs:
> Y<-cldata[,c("measure","age")]
> clus<-cldata[,c("city")]
> X=data.frame(rep(1,1000),cldata[,c("sex")])
> colnames(X)<-c("const", "sex")
> Z<-data.frame(rep(1,1000))
> beta.start<-matrix(0,2,2)
> u.start<-matrix(0,10,2)
> l1cov.start<-diag(1,2)
> l2cov.start<-diag(1,2)
> l1cov.prior=diag(1,2);
> nburn=as.integer(200);
> nbetween=as.integer(200);
> nimp=as.integer(5);
> l2cov.prior=diag(1,5);
> 
> #And finally we run the imputation function:
> imp<-jomo1rancon(Y,X,Z,clus,beta.start,u.start,l1cov.start, l2cov.start,l1cov.prior,
+              l2cov.prior,nburn,nbetween,nimp)
....................First imputation registered. 
....................Imputation number  2 registered 
....................Imputation number  3 registered 
....................Imputation number  4 registered 
....................Imputation number  5 registered 
The posterior mean of the fixed effects estimates is:
             const        sex
measure  0.8165151 0.07743349
age     -0.2265850 0.92035297

The posterior mean of the random effects estimates is:
  measure.rep.1..1000. age.rep.1..1000.
0           0.21972333    -4.604484e-08
1           0.39294308    -1.319837e-08
2          -0.55774345     1.410265e-07
3           0.88658443    -1.436722e-07
4          -0.60480244     9.249821e-08
5          -0.07807503     1.995220e-09
6          -0.07777149    -8.408829e-08
7          -0.26274297     5.576642e-08
8          -0.46891513     9.541398e-08
9          -0.31268328    -4.493007e-08

The posterior mean of the level 1 covariance matrices is:
           measure        age
measure  0.9952507 -0.1270455
age     -0.1270455  3.3472307

The posterior mean of the level 2 covariance matrix is:
                     measure.rep.1..1000. age.rep.1..1000.
measure*rep.1..1000.         4.290411e-01    -3.019079e-08
age*rep.1..1000.            -3.019079e-08     1.869748e-12
> 
> cat("Original value was missing(",imp[4,1],"), imputed value:", imp[1004,1])
Original value was missing( NA ), imputed value: 2.774167> 
>   # Check help page for function jomo to see how to fit the model and 
>   # combine estimates with Rubin's rules
> 
> 
> 
> 
> cleanEx()
> nameEx("jomo1ranconhr.MCMCchain")
> ### * jomo1ranconhr.MCMCchain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo1ranconhr.MCMCchain
> ### Title: JM Imputation of clustered data with continuous variables only
> ###   with cluster-specific covariance matrices - A tool to check
> ###   convergence of the MCMC
> ### Aliases: jomo1ranconhr.MCMCchain
> 
> ### ** Examples
> 
> 
> 
> 
> # we define the inputs
> # nburn is smaller than needed. This is
> #just because of CRAN policies on the examples.
> 
> Y<-cldata[,c("measure","age")]
> clus<-cldata[,c("city")]
> X=data.frame(rep(1,1000),cldata[,c("sex")])
> colnames(X)<-c("const", "sex")
> Z<-data.frame(rep(1,1000))
> nburn=as.integer(200);
> a=3
> 
> # Finally we run either the model with fixed or random cluster-specific cov. matrices:
> 
> imp<-jomo1ranconhr.MCMCchain(Y,X,Z,clus,nburn=nburn,meth="random")
....................The posterior mean of the fixed effects estimates is:
             const       sex
measure  0.7860331 0.0889132
age     -0.1627977 0.9102956

The posterior mean of the random effects estimates is:
  measure.rep.1..1000. age.rep.1..1000.
0           0.25162304      -0.25235134
1           0.43152103      -0.36496597
2          -0.52020623       0.15343766
3           0.87872737       0.07955773
4          -0.58261883      -0.06285449
5          -0.03099733      -0.28102377
6          -0.06520534       0.21331579
7          -0.24777990       0.23321780
8          -0.41486779      -0.36029711
9          -0.28351934       0.07207775

The posterior mean of the level 1 covariance matrices is:
              measure         age
measure.0  0.92528996 -0.08527473
age.0     -0.08527473  2.56078633
measure.1  1.07225094 -0.09502101
age.1     -0.09502101  2.77351269
measure.2  1.11570557 -0.14904106
age.2     -0.14904106  3.47631212
measure.3  0.89219152 -0.03373800
age.3     -0.03373800  3.03030907
measure.4  0.95641885 -0.24949097
age.4     -0.24949097  4.27303467
measure.5  1.12008109 -0.21670944
age.5     -0.21670944  2.77657976
measure.6  0.95522391 -0.31958891
age.6     -0.31958891  3.62018991
measure.7  1.14665668 -0.08050415
age.7     -0.08050415  3.66784400
measure.8  0.84119507  0.05244542
age.8      0.05244542  3.64113593
measure.9  0.97788265 -0.12793050
age.9     -0.12793050  3.39392663

The posterior mean of the level 2 covariance matrix is:
                     measure.rep.1..1000. age.rep.1..1000.
measure*rep.1..1000.           0.36921051      -0.01948471
age*rep.1..1000.              -0.01948471       0.21662286
>           
> #We can check the convergence of the first element of beta:
> 
> plot(c(1:nburn),imp$collectbeta[1,1,1:nburn],type="l")
> 
> #Or similarly we can check the convergence of any element of the level 2 cov. matrix:
> 
> plot(c(1:nburn),imp$collectcovu[1,2,1:nburn],type="l")
> 
> 
> 
> cleanEx()
> nameEx("jomo1ranconhr")
> ### * jomo1ranconhr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo1ranconhr
> ### Title: JM Imputation of clustered data with continuous variables only
> ###   with cluster-specific covariance matrices
> ### Aliases: jomo1ranconhr
> 
> ### ** Examples
> 
> 
> 
> 
> # we define the inputs
> # nimp, nburn and nbetween are smaller than they should. This is
> #just because of CRAN policies on the examples.
> 
> Y<-cldata[,c("measure","age")]
> clus<-cldata[,c("city")]
> X=data.frame(rep(1,1000),cldata[,c("sex")])
> colnames(X)<-c("const", "sex")
> Z<-data.frame(rep(1,1000))
> beta.start<-matrix(0,2,2)
> u.start<-matrix(0,10,2)
> l1cov.start<-matrix(diag(1,2),20,2,2)
> l2cov.start<-diag(1,2)
> l1cov.prior=diag(1,2);
> nburn=as.integer(50);
> nbetween=as.integer(20);
> nimp=as.integer(5);
> l2cov.prior=diag(1,5);
> a=3
> 
> # Finally we run either the model with fixed or random cluster-specific covariance matrices:
> 
> imp<-jomo1ranconhr(Y,X,Z,clus,beta.start,u.start,l1cov.start, l2cov.start,
+          l1cov.prior,l2cov.prior,nburn,nbetween,nimp,meth="fixed")
.....First imputation registered. 
..Imputation number  2 registered 
..Imputation number  3 registered 
..Imputation number  4 registered 
..Imputation number  5 registered 
The posterior mean of the fixed effects estimates is:
             const        sex
measure  0.8866917 0.08801173
age     -0.2410818 0.92208550

The posterior mean of the random effects estimates is:
  measure.rep.1..1000. age.rep.1..1000.
0            0.1664628     7.646410e-05
1            0.3169079    -4.002209e-05
2           -0.5775132     1.096232e-04
3            0.8158111    -1.373757e-04
4           -0.6562561     1.661558e-04
5           -0.1540757     5.175994e-05
6           -0.1277710     9.411158e-06
7           -0.3486298     1.393386e-04
8           -0.5099242     4.414370e-05
9           -0.3769731     1.013292e-04

The posterior mean of the level 1 covariance matrices is:
              measure         age
measure.0  0.89783080 -0.09432727
age.0     -0.09432727  2.60837135
measure.1  1.07096300 -0.09953057
age.1     -0.09953057  2.89055731
measure.2  1.18980859 -0.22609100
age.2     -0.22609100  3.48543797
measure.3  0.89483734  0.04233940
age.3      0.04233940  3.06608742
measure.4  0.98167234 -0.24683332
age.4     -0.24683332  4.29989728
measure.5  1.13633297 -0.20588713
age.5     -0.20588713  2.85855820
measure.6  0.93094937 -0.34686549
age.6     -0.34686549  3.81907053
measure.7  1.17112775 -0.06925102
age.7     -0.06925102  3.91268288
measure.8  0.81451798  0.05586574
age.8      0.05586574  3.91186473
measure.9  0.97678742 -0.12991295
age.9     -0.12991295  3.41318376

The posterior mean of the level 2 covariance matrix is:
                     measure.rep.1..1000. age.rep.1..1000.
measure*rep.1..1000.         4.264224e-01    -5.875973e-05
age*rep.1..1000.            -5.875973e-05     1.892626e-07
> 
> cat("Original value was missing(",imp[4,1],"), imputed value:", imp[1004,1])
Original value was missing( NA ), imputed value: 1.282233> 
> #or:
> 
> #imp<-jomo1ranconhr(Y,X,Z,clus,beta.start,u.start,l1cov.start, l2cov.start,
> #        l1cov.prior,l2cov.prior,nburn,nbetween,nimp,a,meth="random")
> 
>   # Check help page for function jomo to see how to fit the model and 
>   # combine estimates with Rubin's rules
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("jomo1ranmix.MCMCchain")
> ### * jomo1ranmix.MCMCchain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo1ranmix.MCMCchain
> ### Title: JM Imputation of clustered data with mixed variable types - A
> ###   tool to check convergence of the MCMC
> ### Aliases: jomo1ranmix.MCMCchain
> 
> ### ** Examples
> 
> 
> 
> #we define the inputs:
> #  nburn is smaller than necessary. This is
> #just because of CRAN policies on the examples.
> 
> Y.con=cldata[,c("measure","age")]
> Y.cat=cldata[,c("social"), drop=FALSE]
> Y.numcat=matrix(4,1,1)
> X=data.frame(rep(1,1000),cldata[,c("sex")])
> colnames(X)<-c("const", "sex")
> Z<-data.frame(rep(1,1000))
> clus<-cldata[,c("city")]
> beta.start<-matrix(0,2,5)
> u.start<-matrix(0,10,5)
> l1cov.start<-diag(1,5)
> l2cov.start<-diag(1,5)
> l1cov.prior=diag(1,5);
> l2cov.prior=diag(1,5);
> nburn=as.integer(100);
> 
> #Then we can run the sampler:
> 
> imp<-jomo1ranmix.MCMCchain(Y.con, Y.cat, Y.numcat, X,Z,clus,beta.start,u.start,
+              l1cov.start, l2cov.start,l1cov.prior,l2cov.prior,nburn=nburn)
..........The posterior mean of the fixed effects estimates is:
              const         sex
measure   0.6587856  0.08515986
age      -0.2227283  0.89668747
social.1  0.4275263 -0.05387269
social.2  0.2912366 -0.04761063
social.3  0.2908110  0.00153580

The posterior mean of the random effects estimates is:
  measure.rep.1..1000. age.rep.1..1000. social.1.rep.1..1000.
0           0.33485906      -0.17093516             0.1315716
1           0.53984967      -0.29436937             0.6719128
2          -0.41025145       0.19730033             0.4500832
3           0.98121175       0.12306091             0.2410342
4          -0.47723295       0.03058943            -0.1343501
5           0.09804540      -0.20422421            -0.7906669
6           0.06565583       0.26653873            -0.7260473
7          -0.14758000       0.29770151            -0.6350800
8          -0.29357998      -0.28778451            -0.1010484
9          -0.17110583       0.11119787             0.5779166
  social.2.rep.1..1000. social.3.rep.1..1000.
0           -0.24427468           -0.29626220
1            0.30371571            0.02664545
2           -0.09242925           -0.13437009
3            0.25451715            0.22586861
4            0.61472108            0.44079867
5           -0.59092558           -0.48686332
6           -0.42609478           -0.53470262
7           -0.31391196           -0.04369789
8            0.13457900            0.14686909
9            0.11152755            0.11124140

The posterior mean of the level 1 covariance matrices is:
             measure         age   social.1   social.2   social.3
measure   1.00688927 -0.09918120 0.01652217 -0.0609342 0.04869461
age      -0.09918120  2.90390846 0.08259922  0.2190274 0.07548815
social.1  0.01652217  0.08259922 1.00000000  0.5000000 0.50000000
social.2 -0.06093420  0.21902737 0.50000000  1.0000000 0.50000000
social.3  0.04869461  0.07548815 0.50000000  0.5000000 1.00000000

The posterior mean of the level 2 covariance matrix is:
                      measure.rep.1..1000. age.rep.1..1000.
measure*rep.1..1000.           0.342278411     -0.005506006
age*rep.1..1000.              -0.005506006      0.188874842
social.1*rep.1..1000.          0.048760723     -0.021593878
social.2*rep.1..1000.         -0.014337738      0.005257847
social.3*rep.1..1000.         -0.030099523      0.005295403
                      social.1.rep.1..1000. social.2.rep.1..1000.
measure*rep.1..1000.             0.04876072          -0.014337738
age*rep.1..1000.                -0.02159388           0.005257847
social.1*rep.1..1000.            0.46207645           0.151921294
social.2*rep.1..1000.            0.15192129           0.288498789
social.3*rep.1..1000.            0.10491393           0.129590510
                      social.3.rep.1..1000.
measure*rep.1..1000.           -0.030099523
age*rep.1..1000.                0.005295403
social.1*rep.1..1000.           0.104913926
social.2*rep.1..1000.           0.129590510
social.3*rep.1..1000.           0.243553848
> 
> #We can check the convergence of the first element of beta:
> 
> plot(c(1:nburn),imp$collectbeta[1,1,1:nburn],type="l")
> 
> #Or similarly we can check the convergence of any element of the level 2 covariance matrix:
> 
> plot(c(1:nburn),imp$collectcovu[1,2,1:nburn],type="l")
> 
> 
> 
> cleanEx()
> nameEx("jomo1ranmix")
> ### * jomo1ranmix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo1ranmix
> ### Title: JM Imputation of clustered data with mixed variable types
> ### Aliases: jomo1ranmix
> 
> ### ** Examples
> 
> 
> # we define the inputs:
> # nimp, nburn and nbetween are smaller than they should. This is
> #just because of CRAN policies on the examples.
> 
> Y.con=cldata[,c("measure","age")]
> Y.cat=cldata[,c("social"), drop=FALSE]
> Y.numcat=matrix(4,1,1)
> X=data.frame(rep(1,1000),cldata[,c("sex")])
> colnames(X)<-c("const", "sex")
> Z<-data.frame(rep(1,1000))
> clus<-cldata[,c("city")]
> beta.start<-matrix(0,2,5)
> u.start<-matrix(0,10,5)
> l1cov.start<-diag(1,5)
> l2cov.start<-diag(1,5)
> l1cov.prior=diag(1,5);
> l2cov.prior=diag(1,5);
> nburn=as.integer(50);
> nbetween=as.integer(50);
> nimp=as.integer(5);
> 
> #Then we can run the sampler:
> 
> imp<-jomo1ranmix(Y.con, Y.cat, Y.numcat, X,Z,clus,beta.start,u.start,l1cov.start, 
+           l2cov.start,l1cov.prior,l2cov.prior,nburn,nbetween,nimp)
.....First imputation registered. 
.....Imputation number  2 registered 
.....Imputation number  3 registered 
.....Imputation number  4 registered 
.....Imputation number  5 registered 
The posterior mean of the fixed effects estimates is:
              const           sex
measure   0.6830816  0.0778183393
age      -0.2091555  0.9117634566
social.1  0.5543334 -0.0460695805
social.2  0.4191413 -0.0520727645
social.3  0.3431465 -0.0004416449

The posterior mean of the random effects estimates is:
  measure.rep.1..1000. age.rep.1..1000. social.1.rep.1..1000.
0           0.33257826      -0.17268004            0.01164371
1           0.52838167      -0.30037786            0.57869384
2          -0.41437620       0.16826240            0.32599943
3           0.98814275       0.10462620            0.18852721
4          -0.48230447      -0.02044137           -0.23044159
5           0.07285249      -0.20013634           -0.94691757
6           0.03260661       0.25414909           -0.83544958
7          -0.17223727       0.26760316           -0.76806065
8          -0.32278134      -0.30375482           -0.23756921
9          -0.19533886       0.07365408            0.42967743
  social.2.rep.1..1000. social.3.rep.1..1000.
0          -0.340003854          -0.381375058
1           0.186961572           0.000164973
2          -0.204231118          -0.192394579
3           0.203801259           0.256242511
4           0.516678328           0.386578236
5          -0.711894746          -0.545460271
6          -0.545436843          -0.613522170
7          -0.461185502          -0.081231885
8          -0.011029497           0.137894577
9          -0.005307415           0.015170377

The posterior mean of the level 1 covariance matrices is:
              measure        age     social.1   social.2    social.3
measure   0.993379703 -0.1296529 -0.009003732 -0.1152888 0.006061612
age      -0.129652919  3.3461860  0.157832107  0.3163154 0.178530815
social.1 -0.009003732  0.1578321  1.000000000  0.5000000 0.500000000
social.2 -0.115288821  0.3163154  0.500000000  1.0000000 0.500000000
social.3  0.006061612  0.1785308  0.500000000  0.5000000 1.000000000

The posterior mean of the level 2 covariance matrix is:
                      measure.rep.1..1000. age.rep.1..1000.
measure*rep.1..1000.            0.35407658     -0.012441260
age*rep.1..1000.               -0.01244126      0.203142725
social.1*rep.1..1000.           0.03594728     -0.027835042
social.2*rep.1..1000.          -0.01694305     -0.003228274
social.3*rep.1..1000.          -0.01928640     -0.002782810
                      social.1.rep.1..1000. social.2.rep.1..1000.
measure*rep.1..1000.             0.03594728          -0.016943049
age*rep.1..1000.                -0.02783504          -0.003228274
social.1*rep.1..1000.            0.49371503           0.193945812
social.2*rep.1..1000.            0.19394581           0.327986781
social.3*rep.1..1000.            0.12097444           0.160027447
                      social.3.rep.1..1000.
measure*rep.1..1000.            -0.01928640
age*rep.1..1000.                -0.00278281
social.1*rep.1..1000.            0.12097444
social.2*rep.1..1000.            0.16002745
social.3*rep.1..1000.            0.26593588
> 
> cat("Original value was missing (",imp[4,1],"), imputed value:", imp[1004,1])
Original value was missing ( NA ), imputed value: 2.092452> 
>   # Check help page for function jomo to see how to fit the model and 
>   # combine estimates with Rubin's rules
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("jomo1ranmixhr.MCMCchain")
> ### * jomo1ranmixhr.MCMCchain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo1ranmixhr.MCMCchain
> ### Title: JM Imputation of clustered data with mixed variable types with
> ###   cluster-specific covariance matrices - A tool to check convergence of
> ###   the MCMC
> ### Aliases: jomo1ranmixhr.MCMCchain
> 
> ### ** Examples
> 
> 
> 
> # we define all the inputs:
> # nburn is smaller than needed. This is
> #just because of CRAN policies on the examples.
> 
> Y.con=cldata[,c("measure","age")]
> Y.cat=cldata[,c("social"), drop=FALSE]
> Y.numcat=matrix(4,1,1)
> X=data.frame(rep(1,1000),cldata[,c("sex")])
> colnames(X)<-c("const", "sex")
> Z<-data.frame(rep(1,1000))
> clus<-cldata[,c("city")]
> beta.start<-matrix(0,2,5)
> u.start<-matrix(0,10,5)
> l1cov.start<-matrix(diag(1,5),50,5,2)
> l2cov.start<-diag(1,5)
> l1cov.prior=diag(1,5);
> l2cov.prior=diag(1,5);
> nburn=as.integer(80);
> 
> a=6
> 
> # And we are finally able to run the imputation:
> 
> imp<-jomo1ranmixhr.MCMCchain(Y.con, Y.cat, Y.numcat, X,Z,clus,beta.start,u.start,
+     l1cov.start, l2cov.start,l1cov.prior,l2cov.prior,nburn=nburn, a=a)
........The posterior mean of the fixed effects estimates is:
              const          sex
measure   0.6614119  0.071530320
age      -0.2530085  0.944183525
social.1  0.4290363 -0.043328681
social.2  0.2218205  0.003294609
social.3  0.2178583 -0.027396096

The posterior mean of the random effects estimates is:
  measure.rep.1..1000. age.rep.1..1000. social.1.rep.1..1000.
0           0.35917262     -0.168819390           0.162929534
1           0.55847881     -0.302256756           0.647277703
2          -0.35884487      0.190783733           0.402450289
3           1.00538997      0.150129147           0.348975425
4          -0.43134659     -0.002491956          -0.008175555
5           0.09397313     -0.208644600          -0.762090338
6           0.04445975      0.290230992          -0.691998273
7          -0.13988894      0.331442562          -0.639040258
8          -0.27047605     -0.303294181          -0.142299970
9          -0.17293404      0.136789125           0.539245307
  social.2.rep.1..1000. social.3.rep.1..1000.
0           -0.15152207           -0.22159546
1            0.27192967            0.07225630
2           -0.04734822           -0.10382169
3            0.44268204            0.43359696
4            0.72612206            0.57113074
5           -0.53750647           -0.43785540
6           -0.35172175           -0.40912304
7           -0.26076301            0.08441723
8            0.16210436            0.22002654
9            0.14405301            0.19390906

The posterior mean of the level 1 covariance matrices is:
                 measure         age      social.1     social.2     social.3
measure.0   0.9283232587 -0.10391247  0.0218109374  0.008397671  0.268519787
age.0      -0.1039124651  2.48714370  0.4189820468  0.428086403  0.092126872
social.1.0  0.0218109374  0.41898205  1.0000000000  0.500000000  0.500000000
social.2.0  0.0083976708  0.42808640  0.5000000000  1.000000000  0.500000000
social.3.0  0.2685197867  0.09212687  0.5000000000  0.500000000  1.000000000
measure.1   1.1214964377 -0.05441746 -0.0512588220 -0.120089387  0.010187682
age.1      -0.0544174626  2.60972608  0.1432897833  0.071465158 -0.175026871
social.1.1 -0.0512588220  0.14328978  1.0000000000  0.500000000  0.500000000
social.2.1 -0.1200893870  0.07146516  0.5000000000  1.000000000  0.500000000
social.3.1  0.0101876815 -0.17502687  0.5000000000  0.500000000  1.000000000
measure.2   1.0343189893 -0.05136430 -0.0043784301 -0.045777176  0.050918271
age.2      -0.0513643038  3.12440282  0.2538507350  0.360773907  0.350663452
social.1.2 -0.0043784301  0.25385074  1.0000000000  0.500000000  0.500000000
social.2.2 -0.0457771763  0.36077391  0.5000000000  1.000000000  0.500000000
social.3.2  0.0509182711  0.35066345  0.5000000000  0.500000000  1.000000000
measure.3   0.8726040119  0.05091720  0.0001817393 -0.180256881  0.120356772
age.3       0.0509172040  2.78860475  0.3078742666  0.247436305  0.191896215
social.1.3  0.0001817393  0.30787427  1.0000000000  0.500000000  0.500000000
social.2.3 -0.1802568811  0.24743631  0.5000000000  1.000000000  0.500000000
social.3.3  0.1203567723  0.19189622  0.5000000000  0.500000000  1.000000000
measure.4   0.9346167105 -0.10550963 -0.0449106071 -0.149843150  0.003062505
age.4      -0.1055096274  3.22398795  0.0236915114  0.198425952  0.265582614
social.1.4 -0.0449106071  0.02369151  1.0000000000  0.500000000  0.500000000
social.2.4 -0.1498431503  0.19842595  0.5000000000  1.000000000  0.500000000
social.3.4  0.0030625054  0.26558261  0.5000000000  0.500000000  1.000000000
measure.5   1.0357672321 -0.12310465 -0.1640246968 -0.151023750  0.070210176
age.5      -0.1231046548  2.39220672  0.1985691605  0.217257679  0.032189811
social.1.5 -0.1640246968  0.19856916  1.0000000000  0.500000000  0.500000000
social.2.5 -0.1510237501  0.21725768  0.5000000000  1.000000000  0.500000000
social.3.5  0.0702101762  0.03218981  0.5000000000  0.500000000  1.000000000
measure.6   0.8689494620 -0.14981160 -0.0956341486 -0.123855543  0.026380083
age.6      -0.1498115979  3.23417348  0.5307292355  0.474955433  0.269293763
social.1.6 -0.0956341486  0.53072924  1.0000000000  0.500000000  0.500000000
social.2.6 -0.1238555433  0.47495543  0.5000000000  1.000000000  0.500000000
social.3.6  0.0263800831  0.26929376  0.5000000000  0.500000000  1.000000000
measure.7   1.1581922196 -0.06555970  0.2163650691  0.101015866  0.033130827
age.7      -0.0655597005  3.08986486 -0.1094364508  0.276462556 -0.174407318
social.1.7  0.2163650691 -0.10943645  1.0000000000  0.500000000  0.500000000
social.2.7  0.1010158662  0.27646256  0.5000000000  1.000000000  0.500000000
social.3.7  0.0331308265 -0.17440732  0.5000000000  0.500000000  1.000000000
measure.8   0.8536190062  0.08012417 -0.1204532774 -0.142912989 -0.051621065
age.8       0.0801241699  3.19068351 -0.2492813481 -0.059901405  0.025895039
social.1.8 -0.1204532774 -0.24928135  1.0000000000  0.500000000  0.500000000
social.2.8 -0.1429129888 -0.05990141  0.5000000000  1.000000000  0.500000000
social.3.8 -0.0516210653  0.02589504  0.5000000000  0.500000000  1.000000000
measure.9   0.9861177781 -0.02633206 -0.1597177628 -0.105665858  0.001670459
age.9      -0.0263320632  3.38598918 -0.0592655558  0.280161726  0.136438341
social.1.9 -0.1597177628 -0.05926556  1.0000000000  0.500000000  0.500000000
social.2.9 -0.1056658581  0.28016173  0.5000000000  1.000000000  0.500000000
social.3.9  0.0016704594  0.13643834  0.5000000000  0.500000000  1.000000000

The posterior mean of the level 2 covariance matrix is:
                      measure.rep.1..1000. age.rep.1..1000.
measure*rep.1..1000.            0.36127174     -0.014000626
age*rep.1..1000.               -0.01400063      0.202407867
social.1*rep.1..1000.           0.09518817     -0.031771775
social.2*rep.1..1000.           0.01117949      0.002713729
social.3*rep.1..1000.           0.01701049      0.016651176
                      social.1.rep.1..1000. social.2.rep.1..1000.
measure*rep.1..1000.             0.09518817           0.011179486
age*rep.1..1000.                -0.03177177           0.002713729
social.1*rep.1..1000.            0.45169036           0.120909173
social.2*rep.1..1000.            0.12090917           0.261956685
social.3*rep.1..1000.            0.09045275           0.126985073
                      social.3.rep.1..1000.
measure*rep.1..1000.             0.01701049
age*rep.1..1000.                 0.01665118
social.1*rep.1..1000.            0.09045275
social.2*rep.1..1000.            0.12698507
social.3*rep.1..1000.            0.26748411
>     
> #We can check the convergence of the first element of beta:
> 
> plot(c(1:nburn),imp$collectbeta[1,1,1:nburn],type="l")
> 
> #Or similarly we can check the convergence of any element of the level 2 covariance matrix:
> 
> plot(c(1:nburn),imp$collectcovu[1,2,1:nburn],type="l")
> 
> 
> 
> cleanEx()
> nameEx("jomo1ranmixhr")
> ### * jomo1ranmixhr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo1ranmixhr
> ### Title: JM Imputation of clustered data with mixed variable types with
> ###   cluster-specific covariance matrices
> ### Aliases: jomo1ranmixhr
> 
> ### ** Examples
> 
> 
> 
> 
> #we define all the inputs:
> # nimp, nburn and nbetween are smaller than they should. This is
> #just because of CRAN policies on the examples.
> 
> Y.con=cldata[,c("measure","age")]
> Y.cat=cldata[,c("social"), drop=FALSE]
> Y.numcat=matrix(4,1,1)
> X=data.frame(rep(1,1000),cldata[,c("sex")])
> colnames(X)<-c("const", "sex")
> Z<-data.frame(rep(1,1000))
> clus<-cldata[,c("city")]
> beta.start<-matrix(0,2,5)
> u.start<-matrix(0,10,5)
> l1cov.start<-matrix(diag(1,5),50,5,2)
> l2cov.start<-diag(1,5)
> l1cov.prior=diag(1,5);
> l2cov.prior=diag(1,5);
> nburn=as.integer(50);
> nbetween=as.integer(50);
> nimp=as.integer(5);
> a=6
> 
> # And we are finally able to run the imputation:
> 
> imp<-jomo1ranmixhr(Y.con, Y.cat, Y.numcat, X,Z,clus,beta.start,u.start,l1cov.start, 
+         l2cov.start,l1cov.prior,l2cov.prior,nburn,nbetween,nimp, a, meth="random")
.....First imputation registered. 
.....Imputation number  2 registered 
.....Imputation number  3 registered 
.....Imputation number  4 registered 
.....Imputation number  5 registered 
The posterior mean of the fixed effects estimates is:
              const         sex
measure   0.5883675  0.08061149
age      -0.2269341  0.93721260
social.1  0.3763412 -0.10011437
social.2  0.1665883 -0.08175078
social.3  0.1928689 -0.06896292

The posterior mean of the random effects estimates is:
  measure.rep.1..1000. age.rep.1..1000. social.1.rep.1..1000.
0           0.39965693       -0.1725005            0.22046909
1           0.61282633       -0.3260186            0.78123754
2          -0.33721064        0.1858642            0.46257700
3           1.07775958        0.1081278            0.38201278
4          -0.33989950       -0.0481368           -0.04189392
5           0.14340569       -0.1922560           -0.73354835
6           0.11769185        0.2560989           -0.59879964
7          -0.08614235        0.2957374           -0.59161151
8          -0.23938463       -0.3168865           -0.01245465
9          -0.07321934        0.0858967            0.66513304
  social.2.rep.1..1000. social.3.rep.1..1000.
0           -0.06141597            -0.2072174
1            0.45569374             0.1629365
2           -0.01527799            -0.1500292
3            0.49194418             0.4576688
4            0.77286566             0.5616958
5           -0.46362332            -0.4384759
6           -0.25888006            -0.3388847
7           -0.19628100             0.1216239
8            0.27357961             0.3311257
9            0.31632820             0.2465003

The posterior mean of the level 1 covariance matrices is:
                measure           age      social.1     social.2    social.3
measure.0   0.977923984 -0.2451597743  0.1227654699  0.062958549  0.37906924
age.0      -0.245159774  2.6354248006  0.1155213454  0.140232864 -0.34875402
social.1.0  0.122765470  0.1155213454  1.0000000000  0.500000000  0.50000000
social.2.0  0.062958549  0.1402328638  0.5000000000  1.000000000  0.50000000
social.3.0  0.379069237 -0.3487540223  0.5000000000  0.500000000  1.00000000
measure.1   1.113959476 -0.1011318101  0.0714754609  0.047374389  0.21052456
age.1      -0.101131810  2.8671624038  0.2498729665  0.129430971 -0.11483454
social.1.1  0.071475461  0.2498729665  1.0000000000  0.500000000  0.50000000
social.2.1  0.047374389  0.1294309705  0.5000000000  1.000000000  0.50000000
social.3.1  0.210524563 -0.1148345405  0.5000000000  0.500000000  1.00000000
measure.2   1.167171228 -0.1625611385  0.1762846082  0.008929613  0.24569604
age.2      -0.162561139  3.5220548434  0.1964544778  0.350107079  0.28676496
social.1.2  0.176284608  0.1964544778  1.0000000000  0.500000000  0.50000000
social.2.2  0.008929613  0.3501070791  0.5000000000  1.000000000  0.50000000
social.3.2  0.245696041  0.2867649576  0.5000000000  0.500000000  1.00000000
measure.3   0.924302585  0.0997876486  0.0890961298 -0.060090047  0.27846530
age.3       0.099787649  3.0627354375  0.2632567494  0.326523256  0.20095287
social.1.3  0.089096130  0.2632567494  1.0000000000  0.500000000  0.50000000
social.2.3 -0.060090047  0.3265232557  0.5000000000  1.000000000  0.50000000
social.3.3  0.278465297  0.2009528710  0.5000000000  0.500000000  1.00000000
measure.4   0.993005348 -0.1961157211  0.0061871050 -0.153081292  0.06037610
age.4      -0.196115721  4.1753981615  0.0577421539  0.186637545  0.27282623
social.1.4  0.006187105  0.0577421539  1.0000000000  0.500000000  0.50000000
social.2.4 -0.153081292  0.1866375453  0.5000000000  1.000000000  0.50000000
social.3.4  0.060376096  0.2728262339  0.5000000000  0.500000000  1.00000000
measure.5   1.138337273 -0.1987903964 -0.0909007696 -0.104245026  0.22619668
age.5      -0.198790396  2.9755373282  0.2226111581  0.250021364  0.06251362
social.1.5 -0.090900770  0.2226111581  1.0000000000  0.500000000  0.50000000
social.2.5 -0.104245026  0.2500213644  0.5000000000  1.000000000  0.50000000
social.3.5  0.226196683  0.0625136177  0.5000000000  0.500000000  1.00000000
measure.6   0.972874023 -0.3161615083 -0.0047912401 -0.075309019  0.16226704
age.6      -0.316161508  3.8745658848  0.5365333344  0.431006063  0.16592013
social.1.6 -0.004791240  0.5365333344  1.0000000000  0.500000000  0.50000000
social.2.6 -0.075309019  0.4310060628  0.5000000000  1.000000000  0.50000000
social.3.6  0.162267036  0.1659201290  0.5000000000  0.500000000  1.00000000
measure.7   1.240018636 -0.1169837556  0.2729104038  0.179699439  0.17057516
age.7      -0.116983756  3.6321427143 -0.3153973725  0.056263624 -0.42849009
social.1.7  0.272910404 -0.3153973725  1.0000000000  0.500000000  0.50000000
social.2.7  0.179699439  0.0562636237  0.5000000000  1.000000000  0.50000000
social.3.7  0.170575158 -0.4284900873  0.5000000000  0.500000000  1.00000000
measure.8   0.925220347  0.1900643595 -0.1607460370 -0.155630118 -0.03648413
age.8       0.190064359  3.5081373943 -0.0692606551  0.205255904  0.26735087
social.1.8 -0.160746037 -0.0692606551  1.0000000000  0.500000000  0.50000000
social.2.8 -0.155630118  0.2052559042  0.5000000000  1.000000000  0.50000000
social.3.8 -0.036484133  0.2673508700  0.5000000000  0.500000000  1.00000000
measure.9   0.973791012 -0.0665048696 -0.0470079282 -0.022076229  0.15493257
age.9      -0.066504870  3.3650935758  0.0005057836  0.380523203  0.11090469
social.1.9 -0.047007928  0.0005057836  1.0000000000  0.500000000  0.50000000
social.2.9 -0.022076229  0.3805232031  0.5000000000  1.000000000  0.50000000
social.3.9  0.154932567  0.1109046884  0.5000000000  0.500000000  1.00000000

The posterior mean of the level 2 covariance matrix is:
                      measure.rep.1..1000. age.rep.1..1000.
measure*rep.1..1000.            0.38750757      -0.04285764
age*rep.1..1000.               -0.04285764       0.21348896
social.1*rep.1..1000.           0.08554245      -0.04293590
social.2*rep.1..1000.           0.07662711      -0.04136413
social.3*rep.1..1000.           0.07039223      -0.01477279
                      social.1.rep.1..1000. social.2.rep.1..1000.
measure*rep.1..1000.             0.08554245            0.07662711
age*rep.1..1000.                -0.04293590           -0.04136413
social.1*rep.1..1000.            0.45929105            0.17209559
social.2*rep.1..1000.            0.17209559            0.37691990
social.3*rep.1..1000.            0.12428916            0.20463096
                      social.3.rep.1..1000.
measure*rep.1..1000.             0.07039223
age*rep.1..1000.                -0.01477279
social.1*rep.1..1000.            0.12428916
social.2*rep.1..1000.            0.20463096
social.3*rep.1..1000.            0.32777921
> 
> cat("Original value was missing (",imp[4,1],"), imputed value:", imp[1004,1])
Original value was missing ( NA ), imputed value: 1.013212> 
>   # Check help page for function jomo to see how to fit the model and 
>   # combine estimates with Rubin's rules
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("jomo2.MCMCchain")
> ### * jomo2.MCMCchain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo2.MCMCchain
> ### Title: JM Imputation of 2-level data - A tool to check convergence of
> ###   the MCMC
> ### Aliases: jomo2.MCMCchain
> 
> ### ** Examples
> 
> 
> Y<-tldata[,c("measure.a"), drop=FALSE]
> Y2<-tldata[,c("big.city"), drop=FALSE]
> clus<-tldata[,c("city")]
> nburn=20
> 
> #now we run the imputation function. Note that we would typically use an higher 
> #number of nburn iterations in real applications (at least 100)
> 
> imp<-jomo2.MCMCchain(Y=Y, Y2=Y2, clus=clus,nburn=nburn)
Found  1 level 1 continuous and  0 level 1 categorical outcomes,  0  level 2 continuous and  1  level 2 categorical outcomes. Using function jomo2com, assuming common covariance matrix across clusters 
..The posterior mean of the fixed effects estimates is:
              X1
measure.a 1.9973

The posterior mean of the level 2 fixed effects estimates is:
                 X2.1
big.city.1 0.08658955

The posterior mean of the random effects estimates is:
     measure.a.Z1  big.city.1
0    0.4702939299 -0.82599971
1    0.0117686483  0.59478980
2    0.5874466085 -0.96996717
3    0.1138122694 -0.77645692
4   -0.1689068594  0.15184101
5    0.1682172523 -0.12639947
6    0.2534177890 -0.60915802
7   -0.1865768969 -0.77365995
8   -0.1201021658  0.55771130
9    0.1026073722 -0.87112578
10   0.1121343358  0.58831480
11  -0.0878771912 -0.21140763
12  -0.2073414912 -0.60019651
13   0.1057932885 -0.71411834
14  -0.1340669608  0.42158545
15   0.4199217183 -0.88465010
16  -0.6885960012  0.80575391
17   0.1389715832  0.43781769
18  -0.7901555610  0.96612318
19  -0.3316880373  0.76891354
20  -0.5712292431  0.62155644
21   0.1355171781 -0.85498371
22  -0.1620851876 -0.63226697
23   0.5600522947  0.52587583
24  -0.4430608442  0.66751596
25   0.4897126493 -0.82645108
26   0.1691759791 -0.73380909
27   0.3692207142  0.57899192
28  -0.3831429663  0.66037048
29   0.2288558093  0.48247427
30  -0.3299791066 -0.67975124
31  -0.0872208349  0.52593841
32   0.1447926733 -0.87175846
33   0.0779724824  0.52847482
34   0.1935378648 -0.88081928
35   0.4528904512  0.44955305
36  -0.5661106589  0.45057461
37   0.1508440918  0.54189517
38   0.2516596947 -0.99103007
39   0.1216150323 -0.70935406
40  -0.2257169283 -0.60492201
41  -0.7666651146  1.06057236
42   0.2127464267 -0.84848610
43  -0.2479630581 -0.65724948
44  -0.6153258107  0.36287622
45  -0.3800945091  0.72778346
46   0.3404633045 -0.87835198
47  -0.1217233726 -0.52890211
48  -0.1735961118 -0.85010355
49   0.8323305240  0.52385624
50   0.0575094933  0.65035699
51   0.5969310338 -0.86274641
52  -0.2016662537  0.70996948
53  -0.4994056169  0.80168713
54   0.1424227466 -0.71020492
55   0.0382997388 -0.66045136
56   0.6411291039  0.56011961
57   0.1614057981 -0.36637571
58   0.4711288600 -1.08379144
59  -0.3704257379  0.90525324
60   0.5134192997 -0.99140086
61  -0.2540182530  0.46181217
62   0.3504672818 -0.27576920
63  -0.0003646290 -0.77163574
64  -0.0866249790  0.53159018
65   0.3036985856 -0.90559222
66   0.1723807790  0.72328169
67  -0.1762846501  0.12059512
68   0.7228001603 -0.90427611
69   0.1385208174  0.52719319
70  -0.3067272679 -0.42061529
71   0.0260404293  0.64965798
72   0.0680095950  0.24174752
73   0.5600656914  0.47346944
74   0.0720888208 -1.13709074
75  -0.2005999404  0.71210073
76  -0.0500321190  0.67212799
77   0.0019700447  0.59435612
78  -0.1973420448  0.71083739
79   0.4956748736 -0.55487110
80   0.2703346721  0.66152760
81   0.0639483685  0.01303446
82   0.0142820677 -0.68259561
83   0.2247828474 -0.73312410
84  -0.2240260466 -0.73835807
85  -0.1824542188  0.57228469
86  -0.2490921702  0.24252080
87   0.5605312075 -0.75627287
88  -0.1655530614  0.65406235
89   0.1088852915 -0.74790461
90  -0.3709520665 -0.60315072
91   0.7884205731 -0.93677595
92   0.2292810272 -0.70506372
93   0.1191745887 -0.87381060
94  -0.0002676406 -0.95899955
95  -0.1010397139  0.72538933
96  -0.0285773432 -0.63170475
97   0.0032966983  0.58116302
98  -0.1036224571  0.44326823
99   0.0643292750  0.84774375
100 -0.7613575895  0.36783099
101  0.0687730776  0.59030037
102 -0.4636219372  0.92306296
103 -0.3480005159  0.69328585
104 -0.1130160585  0.64904284
105 -0.1459080858  0.85229562
106 -0.2924621992  0.20354054
107 -0.0479260199  0.61935199
108 -0.3468214476  0.90013650
109  0.3170507046 -1.01566006
110  0.1327928843 -0.64259420
111 -0.1163509091 -0.70056861
112 -0.3927765847  0.82047993
113 -0.0603911091  0.75380390
114  0.3478629037  0.59351330
115  0.0912134779  0.52035745
116  0.4135607375 -0.30229011
117 -0.3067248862  0.28782647
118  0.1128989795 -0.64399791
119  0.1047467049 -0.81539790
120 -0.3429652851  0.81534783
121  0.2539821255 -0.71720905
122  0.1711409255  0.55230473
123  0.1826369388  0.42216027
124  0.2804038409 -0.18914511
125 -0.1877371979  0.56710429
126 -0.3986071388  0.92628615
127  0.2330115072 -0.82552082
128 -0.4370829802 -0.57196358
129 -0.0536534389  0.83306099
130  0.0238582737  0.60107451
131 -0.0105257698  0.67520235
132  0.1881012413  0.57168197
133  0.4323161401  0.58890951
134  0.1951901239 -0.89289963
135  0.4575122442 -0.71444862
136 -0.1218231874  0.93353585
137 -0.8767340478  1.06993412
138  0.4820408946 -0.85881729
139 -0.4757739495  0.42188510
140  0.0728394188 -0.77138940
141  0.0613487890  0.55025987
142 -0.4239796170  0.89460116
143  0.3359561678  0.50488844
144  0.0328275081 -0.74199989
145  0.2580608851 -0.85729539
146  0.3855167787 -0.17648212
147 -0.2260786885  0.15054973
148  0.8308588841  0.34008604
149  0.2253060769 -0.21836062
150 -0.0243094652 -0.13630706
151  0.3793484410 -0.77329200
152  0.1065216531 -0.59958011
153 -0.3072194665  0.93688052
154 -0.1119106082 -0.51162426
155  0.1021874940  0.06073523
156  0.0847581993  0.81267377
157  0.4105739077 -0.77905829
158 -0.3347109959 -0.81735103
159  0.2276899074 -0.13120602
160 -0.1683522029 -0.74618851
161 -0.5445123649  0.87554120
162  0.5089430180 -0.93653281
163 -0.0388224903 -0.20875708
164  0.4099780909 -0.58060562
165 -0.5880158304  0.30504436
166 -0.0391268853  0.54155753
167  0.4838653381 -1.14851570
168  0.2616736550 -0.81238922
169 -0.1944932872  0.56190417
170 -0.0534394692  0.55891586
171  0.0666944140  0.50191540
172 -0.0360877430  0.53148066
173  0.5072894946 -0.89326408
174 -0.0476151049 -0.89027313
175 -0.4047017980  0.87615528
176 -0.4702087247  0.25423357
177  0.0962229761  0.59866682
178  0.0584511694  0.46161543
179 -0.3783625937  0.70092446
180  0.3134896896 -0.11634505
181  0.1506587291 -0.68670235
182  0.0256182960 -0.07863186
183  0.0378414406  0.72088663
184 -0.2371610052  0.59175054
185 -0.1912114504  0.72882512
186  0.1678504939 -0.67508064
187  0.0026465204  0.43137599
188 -0.0248270863 -0.77152964
189  0.3906663873  0.49912932
190 -0.1676798700 -0.72944998
191  0.0299330289  0.65503555
192 -0.2749668951 -0.59872589
193 -0.0474280074  0.73177482
194 -0.5454368031 -0.71566764
195  0.4948671065  0.57355310
196  0.3819053434  0.66277875
197 -0.6602459392  1.12225030
198 -0.1370899377  0.63434915
199  0.1551643028 -0.58458706

The posterior mean of the level 1 covariance matrix is:
          measure.a
measure.a 0.9968096

The posterior mean of the level 2 covariance matrix is:
             measure.a.Z1 big.city.1
measure.a*Z1    0.4029635 -0.2769606
big.city.1     -0.2769606  1.0000000
> 
> #We can check the convergence of the first element of beta:
> 
> plot(c(1:nburn),imp$collectbeta[1,1,1:nburn],type="l")
> 
> #Or similarly we can check the convergence of any element of the level 2 covariance matrix:
> 
> plot(c(1:nburn),imp$collectcovu[1,2,1:nburn],type="l")
> 
> 
> 
> cleanEx()
> nameEx("jomo2")
> ### * jomo2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo2
> ### Title: JM Imputation of 2-level data
> ### Aliases: jomo2
> 
> ### ** Examples
> 
> 
> Y<-tldata[,c("measure.a"), drop=FALSE]
> Y2<-tldata[,c("big.city"), drop=FALSE]
> clus<-tldata[,c("city")]
> nburn=10
> nbetween=10
> nimp=2
> 
> #now we run the imputation function. Note that we would typically use an higher 
> #number of nburn iterations in real applications (at least 1000)
> 
> imp<-jomo2(Y=Y, Y2=Y2, clus=clus,nburn=nburn, nbetween=nbetween, nimp=nimp)
Found  1 level 1 continuous and  0 level 1 categorical outcomes,  0  level 2 continuous and  1  level 2 categorical outcomes. Using function jomo2com, assuming common covariance matrix across clusters 
.First imputation registered. 
.Imputation number  2 registered 
The posterior mean of the fixed effects estimates is:
                X1
measure.a 2.015309

The posterior mean of the level 2 fixed effects estimates is:
                X2.1
big.city.1 0.1155781

The posterior mean of the random effects estimates is:
    measure.a.Z1 big.city.1
0    0.430528685 -0.8681373
1   -0.040107851  0.5340378
2    0.545785055 -1.2464627
3    0.039673424 -0.4859528
4   -0.156214485 -0.5793694
5    0.108542313  0.2497494
6    0.144521025 -0.6769905
7   -0.236271609 -0.6771152
8   -0.115268239  0.2498037
9    0.045205016 -0.9235150
10   0.051960506  0.4118524
11  -0.112079302  0.3753148
12  -0.236508712 -0.5723289
13   0.096759945 -1.0719768
14  -0.147174701  0.5268098
15   0.416452886 -0.8755646
16  -0.740678152  1.1123789
17   0.137813006  0.4232890
18  -0.730425294  0.7108406
19  -0.349620332  1.1634928
20  -0.572791639  0.3543719
21   0.102492019 -0.9347711
22  -0.209492551 -0.8286053
23   0.512159362  0.3210547
24  -0.466748137  0.8880598
25   0.544796666 -0.9517295
26   0.136917323 -1.0216188
27   0.321104273  0.3466504
28  -0.488437313  0.4755479
29   0.112739177  0.5796958
30  -0.394105012 -0.4916484
31  -0.065776923  0.6031029
32   0.140572089 -1.0706594
33   0.101286905  0.7333083
34   0.176819874 -0.8193856
35   0.442028554  0.4632858
36  -0.582341513  1.1749925
37   0.089973855  0.5660784
38   0.207378993 -0.7942890
39   0.174997046 -0.7205422
40  -0.237944085 -0.6585890
41  -0.800386962  0.7891967
42   0.166111961 -0.6409171
43  -0.278923145 -0.7156369
44  -0.637765112  1.1398407
45  -0.396431957  0.6606365
46   0.339574710 -0.5841028
47  -0.166225743 -0.6623206
48  -0.261492976 -0.6840946
49   0.829829367  0.2488060
50   0.003904663  0.4505606
51   0.605586868 -0.9830714
52  -0.209947037  0.4517584
53  -0.518095546  0.9659559
54   0.083404548 -0.8130729
55  -0.005547772 -0.6564804
56   0.612720723  0.3068892
57   0.136325274 -0.8567757
58   0.454983139 -0.8552561
59  -0.397018220  0.5174329
60   0.462448141 -0.8254840
61  -0.320248547  0.8766471
62   0.366001516 -1.0345165
63  -0.060811736 -0.5865970
64  -0.158750713  0.4191617
65   0.322208650 -0.8591105
66   0.110415857  0.6028480
67  -0.213778016  0.6306408
68   0.702955496 -1.0546219
69   0.121244121  0.8180117
70  -0.296337952 -0.4601941
71   0.021008083  0.4743123
72   0.094706838 -0.9893932
73   0.556832158  0.4711692
74   0.091213200 -0.7776968
75  -0.217638968  0.4141589
76  -0.093187135  0.5097783
77  -0.028442146  0.9447078
78  -0.183091852  0.7816325
79   0.495261594 -0.7555847
80   0.213549524  0.3917738
81   0.039035160  0.6801651
82  -0.034371128 -0.9701886
83   0.228723556 -0.8672149
84  -0.273021358 -0.6731776
85  -0.217520269  0.8621047
86  -0.265600338 -0.3819240
87   0.486673917  0.4382148
88  -0.195438735  0.5463167
89   0.124431556 -0.8251554
90  -0.366178862 -0.7322773
91   0.740496879 -1.0139348
92   0.211299517 -0.6644428
93   0.092491730 -0.7736485
94  -0.038365228 -0.8053002
95  -0.148175738  0.8531922
96  -0.019845895 -0.6786724
97  -0.052705294  0.8335276
98  -0.122748533  0.4479898
99   0.083710129  0.5090437
100 -0.842538933  1.2688215
101  0.041229233  0.5929666
102 -0.468929580  0.5478644
103 -0.363077588  0.6947851
104 -0.152188795  0.7024444
105 -0.198381969  0.5313951
106 -0.276348891 -0.4513048
107 -0.089486353  1.0010779
108 -0.367893598  1.2793755
109  0.320812005 -0.9148335
110  0.082879344 -0.5486847
111 -0.082160877 -0.7132514
112 -0.437814702  0.7448242
113 -0.060528017  0.5136896
114  0.322308671  0.5664260
115  0.077517168  0.4339759
116  0.436958033 -0.8394933
117 -0.326992928  0.5945059
118  0.087668953 -0.7431918
119  0.107115389 -0.4651521
120 -0.395231081  0.5780834
121  0.252888831 -0.5689055
122  0.174000704  0.5960174
123  0.134156516  0.3671094
124  0.265716818 -0.7650461
125 -0.165764461  0.5854627
126 -0.432269694  0.7993138
127  0.188763407 -0.8873997
128 -0.434926052 -0.7676059
129 -0.032670647  0.7065045
130 -0.027106170  0.7598989
131 -0.039735998  0.6244336
132  0.139416534  0.5413477
133  0.388032653  0.4480398
134  0.209910294 -0.4881546
135  0.442460418 -0.6286129
136 -0.155371642  0.7731975
137 -0.937930223  0.8462383
138  0.460407950 -0.8753801
139 -0.498248770  1.2748112
140  0.014659148 -0.6983495
141  0.074934733  0.8532788
142 -0.449392026  0.7922152
143  0.285109397  0.8012181
144  0.041923301 -0.8970290
145  0.291917892 -0.7696067
146  0.401610208 -1.0595110
147 -0.234917821 -0.6159882
148  0.786372705  0.2753262
149  0.242522071  0.4294009
150 -0.023392939 -0.6837292
151  0.371167659 -0.7323300
152  0.118951546 -0.8829823
153 -0.392948376  0.8619941
154 -0.154357707 -0.9510490
155  0.080069183  0.6113745
156  0.047874073  0.4758315
157  0.352898988 -0.8051145
158 -0.366491085 -0.7493500
159  0.202739641 -0.7708255
160 -0.248673875 -0.5546152
161 -0.580175540  0.7684560
162  0.546257996 -1.1797752
163 -0.065240097 -0.6386967
164  0.403369647 -1.0539857
165 -0.632608960  0.9450584
166 -0.028419378  0.5685178
167  0.456696290 -0.5865193
168  0.225659255 -0.7835631
169 -0.251306943  0.8925257
170 -0.047878316  0.4946122
171  0.008165269  0.2540044
172 -0.020374942  0.4194842
173  0.541021530 -1.0136697
174 -0.111557641 -0.7826283
175 -0.411111867  0.9006603
176 -0.468195680  1.0466225
177  0.061555113  0.5189891
178  0.029781433  0.5620207
179 -0.393864238  1.1091051
180  0.292301247 -1.1852527
181  0.168345880 -0.9337700
182  0.010392840 -0.6499984
183 -0.008080276  0.7081883
184 -0.270223952  0.8811047
185 -0.200171597  0.7856604
186  0.137096505 -0.7963707
187  0.013901412  0.6649270
188 -0.037682294 -0.7341078
189  0.428444119  0.2549350
190 -0.178834540 -0.6715110
191 -0.012055962  0.6688199
192 -0.220937915 -0.5782595
193 -0.093425737  0.4549061
194 -0.576482814 -0.4061400
195  0.445822662  0.6475852
196  0.455261534  0.4410093
197 -0.678051440  0.8233725
198 -0.215532260  0.7832471
199  0.163030843 -0.8429051

The posterior mean of the level 1 covariance matrix is:
          measure.a
measure.a  1.010012

The posterior mean of the level 2 covariance matrix is:
             measure.a.Z1 big.city.1
measure.a*Z1    0.3285336 -0.3452289
big.city.1     -0.3452289  1.0000000
> 
>   # Check help page for function jomo to see how to fit the model and 
>   # combine estimates with Rubin's rules
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("jomo2com.MCMCchain")
> ### * jomo2com.MCMCchain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo2com.MCMCchain
> ### Title: JM Imputation of 2-level data assuming a common level-1
> ###   covariance matrix across level-2 units - A tool to check convergence
> ###   of the MCMC
> ### Aliases: jomo2com.MCMCchain
> 
> ### ** Examples
> 
> 
> Y<-tldata[,c("measure.a"), drop=FALSE]
> Y2<-tldata[,c("big.city"), drop=FALSE]
> clus<-tldata[,c("city")]
> nburn=20
> 
> #now we run the imputation function. Note that we would typically use an higher 
> #number of nburn iterations in real applications (at least 100)
> 
> imp<-jomo2com.MCMCchain(Y.con=Y, Y2.cat=Y2, Y2.numcat=2, clus=clus,nburn=nburn)
..The posterior mean of the fixed effects estimates is:
              X1
measure.a 1.9973

The posterior mean of the level 2 fixed effects estimates is:
                 X2.1
big.city.1 0.08658955

The posterior mean of the random effects estimates is:
     measure.a.Z1  big.city.1
0    0.4702939299 -0.82599971
1    0.0117686483  0.59478980
2    0.5874466085 -0.96996717
3    0.1138122694 -0.77645692
4   -0.1689068594  0.15184101
5    0.1682172523 -0.12639947
6    0.2534177890 -0.60915802
7   -0.1865768969 -0.77365995
8   -0.1201021658  0.55771130
9    0.1026073722 -0.87112578
10   0.1121343358  0.58831480
11  -0.0878771912 -0.21140763
12  -0.2073414912 -0.60019651
13   0.1057932885 -0.71411834
14  -0.1340669608  0.42158545
15   0.4199217183 -0.88465010
16  -0.6885960012  0.80575391
17   0.1389715832  0.43781769
18  -0.7901555610  0.96612318
19  -0.3316880373  0.76891354
20  -0.5712292431  0.62155644
21   0.1355171781 -0.85498371
22  -0.1620851876 -0.63226697
23   0.5600522947  0.52587583
24  -0.4430608442  0.66751596
25   0.4897126493 -0.82645108
26   0.1691759791 -0.73380909
27   0.3692207142  0.57899192
28  -0.3831429663  0.66037048
29   0.2288558093  0.48247427
30  -0.3299791066 -0.67975124
31  -0.0872208349  0.52593841
32   0.1447926733 -0.87175846
33   0.0779724824  0.52847482
34   0.1935378648 -0.88081928
35   0.4528904512  0.44955305
36  -0.5661106589  0.45057461
37   0.1508440918  0.54189517
38   0.2516596947 -0.99103007
39   0.1216150323 -0.70935406
40  -0.2257169283 -0.60492201
41  -0.7666651146  1.06057236
42   0.2127464267 -0.84848610
43  -0.2479630581 -0.65724948
44  -0.6153258107  0.36287622
45  -0.3800945091  0.72778346
46   0.3404633045 -0.87835198
47  -0.1217233726 -0.52890211
48  -0.1735961118 -0.85010355
49   0.8323305240  0.52385624
50   0.0575094933  0.65035699
51   0.5969310338 -0.86274641
52  -0.2016662537  0.70996948
53  -0.4994056169  0.80168713
54   0.1424227466 -0.71020492
55   0.0382997388 -0.66045136
56   0.6411291039  0.56011961
57   0.1614057981 -0.36637571
58   0.4711288600 -1.08379144
59  -0.3704257379  0.90525324
60   0.5134192997 -0.99140086
61  -0.2540182530  0.46181217
62   0.3504672818 -0.27576920
63  -0.0003646290 -0.77163574
64  -0.0866249790  0.53159018
65   0.3036985856 -0.90559222
66   0.1723807790  0.72328169
67  -0.1762846501  0.12059512
68   0.7228001603 -0.90427611
69   0.1385208174  0.52719319
70  -0.3067272679 -0.42061529
71   0.0260404293  0.64965798
72   0.0680095950  0.24174752
73   0.5600656914  0.47346944
74   0.0720888208 -1.13709074
75  -0.2005999404  0.71210073
76  -0.0500321190  0.67212799
77   0.0019700447  0.59435612
78  -0.1973420448  0.71083739
79   0.4956748736 -0.55487110
80   0.2703346721  0.66152760
81   0.0639483685  0.01303446
82   0.0142820677 -0.68259561
83   0.2247828474 -0.73312410
84  -0.2240260466 -0.73835807
85  -0.1824542188  0.57228469
86  -0.2490921702  0.24252080
87   0.5605312075 -0.75627287
88  -0.1655530614  0.65406235
89   0.1088852915 -0.74790461
90  -0.3709520665 -0.60315072
91   0.7884205731 -0.93677595
92   0.2292810272 -0.70506372
93   0.1191745887 -0.87381060
94  -0.0002676406 -0.95899955
95  -0.1010397139  0.72538933
96  -0.0285773432 -0.63170475
97   0.0032966983  0.58116302
98  -0.1036224571  0.44326823
99   0.0643292750  0.84774375
100 -0.7613575895  0.36783099
101  0.0687730776  0.59030037
102 -0.4636219372  0.92306296
103 -0.3480005159  0.69328585
104 -0.1130160585  0.64904284
105 -0.1459080858  0.85229562
106 -0.2924621992  0.20354054
107 -0.0479260199  0.61935199
108 -0.3468214476  0.90013650
109  0.3170507046 -1.01566006
110  0.1327928843 -0.64259420
111 -0.1163509091 -0.70056861
112 -0.3927765847  0.82047993
113 -0.0603911091  0.75380390
114  0.3478629037  0.59351330
115  0.0912134779  0.52035745
116  0.4135607375 -0.30229011
117 -0.3067248862  0.28782647
118  0.1128989795 -0.64399791
119  0.1047467049 -0.81539790
120 -0.3429652851  0.81534783
121  0.2539821255 -0.71720905
122  0.1711409255  0.55230473
123  0.1826369388  0.42216027
124  0.2804038409 -0.18914511
125 -0.1877371979  0.56710429
126 -0.3986071388  0.92628615
127  0.2330115072 -0.82552082
128 -0.4370829802 -0.57196358
129 -0.0536534389  0.83306099
130  0.0238582737  0.60107451
131 -0.0105257698  0.67520235
132  0.1881012413  0.57168197
133  0.4323161401  0.58890951
134  0.1951901239 -0.89289963
135  0.4575122442 -0.71444862
136 -0.1218231874  0.93353585
137 -0.8767340478  1.06993412
138  0.4820408946 -0.85881729
139 -0.4757739495  0.42188510
140  0.0728394188 -0.77138940
141  0.0613487890  0.55025987
142 -0.4239796170  0.89460116
143  0.3359561678  0.50488844
144  0.0328275081 -0.74199989
145  0.2580608851 -0.85729539
146  0.3855167787 -0.17648212
147 -0.2260786885  0.15054973
148  0.8308588841  0.34008604
149  0.2253060769 -0.21836062
150 -0.0243094652 -0.13630706
151  0.3793484410 -0.77329200
152  0.1065216531 -0.59958011
153 -0.3072194665  0.93688052
154 -0.1119106082 -0.51162426
155  0.1021874940  0.06073523
156  0.0847581993  0.81267377
157  0.4105739077 -0.77905829
158 -0.3347109959 -0.81735103
159  0.2276899074 -0.13120602
160 -0.1683522029 -0.74618851
161 -0.5445123649  0.87554120
162  0.5089430180 -0.93653281
163 -0.0388224903 -0.20875708
164  0.4099780909 -0.58060562
165 -0.5880158304  0.30504436
166 -0.0391268853  0.54155753
167  0.4838653381 -1.14851570
168  0.2616736550 -0.81238922
169 -0.1944932872  0.56190417
170 -0.0534394692  0.55891586
171  0.0666944140  0.50191540
172 -0.0360877430  0.53148066
173  0.5072894946 -0.89326408
174 -0.0476151049 -0.89027313
175 -0.4047017980  0.87615528
176 -0.4702087247  0.25423357
177  0.0962229761  0.59866682
178  0.0584511694  0.46161543
179 -0.3783625937  0.70092446
180  0.3134896896 -0.11634505
181  0.1506587291 -0.68670235
182  0.0256182960 -0.07863186
183  0.0378414406  0.72088663
184 -0.2371610052  0.59175054
185 -0.1912114504  0.72882512
186  0.1678504939 -0.67508064
187  0.0026465204  0.43137599
188 -0.0248270863 -0.77152964
189  0.3906663873  0.49912932
190 -0.1676798700 -0.72944998
191  0.0299330289  0.65503555
192 -0.2749668951 -0.59872589
193 -0.0474280074  0.73177482
194 -0.5454368031 -0.71566764
195  0.4948671065  0.57355310
196  0.3819053434  0.66277875
197 -0.6602459392  1.12225030
198 -0.1370899377  0.63434915
199  0.1551643028 -0.58458706

The posterior mean of the level 1 covariance matrix is:
          measure.a
measure.a 0.9968096

The posterior mean of the level 2 covariance matrix is:
             measure.a.Z1 big.city.1
measure.a*Z1    0.4029635 -0.2769606
big.city.1     -0.2769606  1.0000000
> 
> #We can check the convergence of the first element of beta:
> 
> plot(c(1:nburn),imp$collectbeta[1,1,1:nburn],type="l")
> 
> #Or similarly we can check the convergence of any element of the level 2 covariance matrix:
> 
> plot(c(1:nburn),imp$collectcovu[1,2,1:nburn],type="l")
> 
> 
> 
> 
> cleanEx()
> nameEx("jomo2com")
> ### * jomo2com
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo2com
> ### Title: JM Imputation of 2-level data assuming a common level-1
> ###   covariance matrix across level-2 units.
> ### Aliases: jomo2com
> 
> ### ** Examples
> 
> 
> Y<-tldata[,c("measure.a"), drop=FALSE]
> Y2<-tldata[,c("big.city"), drop=FALSE]
> clus<-tldata[,c("city")]
> 
> #now we run the imputation function. Note that we would typically use an higher 
> #number of nburn iterations in real applications (at least 1000)
> 
> imp<-jomo2com(Y.con=Y, Y2.cat=Y2, Y2.numcat=2, clus=clus,nburn=10, nbetween=10, nimp=2)
.First imputation registered. 
.Imputation number  2 registered 
The posterior mean of the fixed effects estimates is:
                X1
measure.a 2.015309

The posterior mean of the level 2 fixed effects estimates is:
                X2.1
big.city.1 0.1155781

The posterior mean of the random effects estimates is:
    measure.a.Z1 big.city.1
0    0.430528685 -0.8681373
1   -0.040107851  0.5340378
2    0.545785055 -1.2464627
3    0.039673424 -0.4859528
4   -0.156214485 -0.5793694
5    0.108542313  0.2497494
6    0.144521025 -0.6769905
7   -0.236271609 -0.6771152
8   -0.115268239  0.2498037
9    0.045205016 -0.9235150
10   0.051960506  0.4118524
11  -0.112079302  0.3753148
12  -0.236508712 -0.5723289
13   0.096759945 -1.0719768
14  -0.147174701  0.5268098
15   0.416452886 -0.8755646
16  -0.740678152  1.1123789
17   0.137813006  0.4232890
18  -0.730425294  0.7108406
19  -0.349620332  1.1634928
20  -0.572791639  0.3543719
21   0.102492019 -0.9347711
22  -0.209492551 -0.8286053
23   0.512159362  0.3210547
24  -0.466748137  0.8880598
25   0.544796666 -0.9517295
26   0.136917323 -1.0216188
27   0.321104273  0.3466504
28  -0.488437313  0.4755479
29   0.112739177  0.5796958
30  -0.394105012 -0.4916484
31  -0.065776923  0.6031029
32   0.140572089 -1.0706594
33   0.101286905  0.7333083
34   0.176819874 -0.8193856
35   0.442028554  0.4632858
36  -0.582341513  1.1749925
37   0.089973855  0.5660784
38   0.207378993 -0.7942890
39   0.174997046 -0.7205422
40  -0.237944085 -0.6585890
41  -0.800386962  0.7891967
42   0.166111961 -0.6409171
43  -0.278923145 -0.7156369
44  -0.637765112  1.1398407
45  -0.396431957  0.6606365
46   0.339574710 -0.5841028
47  -0.166225743 -0.6623206
48  -0.261492976 -0.6840946
49   0.829829367  0.2488060
50   0.003904663  0.4505606
51   0.605586868 -0.9830714
52  -0.209947037  0.4517584
53  -0.518095546  0.9659559
54   0.083404548 -0.8130729
55  -0.005547772 -0.6564804
56   0.612720723  0.3068892
57   0.136325274 -0.8567757
58   0.454983139 -0.8552561
59  -0.397018220  0.5174329
60   0.462448141 -0.8254840
61  -0.320248547  0.8766471
62   0.366001516 -1.0345165
63  -0.060811736 -0.5865970
64  -0.158750713  0.4191617
65   0.322208650 -0.8591105
66   0.110415857  0.6028480
67  -0.213778016  0.6306408
68   0.702955496 -1.0546219
69   0.121244121  0.8180117
70  -0.296337952 -0.4601941
71   0.021008083  0.4743123
72   0.094706838 -0.9893932
73   0.556832158  0.4711692
74   0.091213200 -0.7776968
75  -0.217638968  0.4141589
76  -0.093187135  0.5097783
77  -0.028442146  0.9447078
78  -0.183091852  0.7816325
79   0.495261594 -0.7555847
80   0.213549524  0.3917738
81   0.039035160  0.6801651
82  -0.034371128 -0.9701886
83   0.228723556 -0.8672149
84  -0.273021358 -0.6731776
85  -0.217520269  0.8621047
86  -0.265600338 -0.3819240
87   0.486673917  0.4382148
88  -0.195438735  0.5463167
89   0.124431556 -0.8251554
90  -0.366178862 -0.7322773
91   0.740496879 -1.0139348
92   0.211299517 -0.6644428
93   0.092491730 -0.7736485
94  -0.038365228 -0.8053002
95  -0.148175738  0.8531922
96  -0.019845895 -0.6786724
97  -0.052705294  0.8335276
98  -0.122748533  0.4479898
99   0.083710129  0.5090437
100 -0.842538933  1.2688215
101  0.041229233  0.5929666
102 -0.468929580  0.5478644
103 -0.363077588  0.6947851
104 -0.152188795  0.7024444
105 -0.198381969  0.5313951
106 -0.276348891 -0.4513048
107 -0.089486353  1.0010779
108 -0.367893598  1.2793755
109  0.320812005 -0.9148335
110  0.082879344 -0.5486847
111 -0.082160877 -0.7132514
112 -0.437814702  0.7448242
113 -0.060528017  0.5136896
114  0.322308671  0.5664260
115  0.077517168  0.4339759
116  0.436958033 -0.8394933
117 -0.326992928  0.5945059
118  0.087668953 -0.7431918
119  0.107115389 -0.4651521
120 -0.395231081  0.5780834
121  0.252888831 -0.5689055
122  0.174000704  0.5960174
123  0.134156516  0.3671094
124  0.265716818 -0.7650461
125 -0.165764461  0.5854627
126 -0.432269694  0.7993138
127  0.188763407 -0.8873997
128 -0.434926052 -0.7676059
129 -0.032670647  0.7065045
130 -0.027106170  0.7598989
131 -0.039735998  0.6244336
132  0.139416534  0.5413477
133  0.388032653  0.4480398
134  0.209910294 -0.4881546
135  0.442460418 -0.6286129
136 -0.155371642  0.7731975
137 -0.937930223  0.8462383
138  0.460407950 -0.8753801
139 -0.498248770  1.2748112
140  0.014659148 -0.6983495
141  0.074934733  0.8532788
142 -0.449392026  0.7922152
143  0.285109397  0.8012181
144  0.041923301 -0.8970290
145  0.291917892 -0.7696067
146  0.401610208 -1.0595110
147 -0.234917821 -0.6159882
148  0.786372705  0.2753262
149  0.242522071  0.4294009
150 -0.023392939 -0.6837292
151  0.371167659 -0.7323300
152  0.118951546 -0.8829823
153 -0.392948376  0.8619941
154 -0.154357707 -0.9510490
155  0.080069183  0.6113745
156  0.047874073  0.4758315
157  0.352898988 -0.8051145
158 -0.366491085 -0.7493500
159  0.202739641 -0.7708255
160 -0.248673875 -0.5546152
161 -0.580175540  0.7684560
162  0.546257996 -1.1797752
163 -0.065240097 -0.6386967
164  0.403369647 -1.0539857
165 -0.632608960  0.9450584
166 -0.028419378  0.5685178
167  0.456696290 -0.5865193
168  0.225659255 -0.7835631
169 -0.251306943  0.8925257
170 -0.047878316  0.4946122
171  0.008165269  0.2540044
172 -0.020374942  0.4194842
173  0.541021530 -1.0136697
174 -0.111557641 -0.7826283
175 -0.411111867  0.9006603
176 -0.468195680  1.0466225
177  0.061555113  0.5189891
178  0.029781433  0.5620207
179 -0.393864238  1.1091051
180  0.292301247 -1.1852527
181  0.168345880 -0.9337700
182  0.010392840 -0.6499984
183 -0.008080276  0.7081883
184 -0.270223952  0.8811047
185 -0.200171597  0.7856604
186  0.137096505 -0.7963707
187  0.013901412  0.6649270
188 -0.037682294 -0.7341078
189  0.428444119  0.2549350
190 -0.178834540 -0.6715110
191 -0.012055962  0.6688199
192 -0.220937915 -0.5782595
193 -0.093425737  0.4549061
194 -0.576482814 -0.4061400
195  0.445822662  0.6475852
196  0.455261534  0.4410093
197 -0.678051440  0.8233725
198 -0.215532260  0.7832471
199  0.163030843 -0.8429051

The posterior mean of the level 1 covariance matrix is:
          measure.a
measure.a  1.010012

The posterior mean of the level 2 covariance matrix is:
             measure.a.Z1 big.city.1
measure.a*Z1    0.3285336 -0.3452289
big.city.1     -0.3452289  1.0000000
>   # Check help page for function jomo to see how to fit the model and 
>   # combine estimates with Rubin's rules
> 
> 
> 
> 
> cleanEx()
> nameEx("jomo2hr.MCMCchain")
> ### * jomo2hr.MCMCchain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo2hr.MCMCchain
> ### Title: JM Imputation of 2-level data assuming cluster-specific level-1
> ###   covariance matrices across level-2 units- A tool to check convergence
> ###   of the MCMC
> ### Aliases: jomo2hr.MCMCchain
> 
> ### ** Examples
> 
> 
> 
> Y<-tldata[,c("measure.a"), drop=FALSE]
> Y2<-tldata[,c("big.city"), drop=FALSE]
> clus<-tldata[,c("city")]
> nburn=20
> 
> #now we run the imputation function. Note that we would typically use an higher 
> #number of nburn iterations in real applications (at least 100)
> 
> imp<-jomo2hr.MCMCchain(Y.con=Y, Y2.cat=Y2, Y2.numcat=2, clus=clus,nburn=nburn)
..The posterior mean of the fixed effects estimates is:
                X1
measure.a 1.981443

The posterior mean of the level 2 fixed effects estimates is:
                 X2.1
big.city.1 0.08772111

The posterior mean of the random effects estimates is:
    measure.a.Z1  big.city.1
0    0.412058075 -0.85196146
1    0.020377556  0.62568726
2    0.586824005 -0.78485332
3    0.057275603 -0.63645830
4   -0.147487676  0.16354876
5    0.147895800 -0.06905064
6    0.211966300  0.42406579
7   -0.143903172 -0.81573302
8   -0.083146005  0.71821349
9    0.063620626 -0.95094026
10   0.121595341  0.30677549
11  -0.073285275  0.13748342
12  -0.233405581 -0.70801292
13   0.104718231 -0.70613990
14  -0.057292453  0.66374735
15   0.418600821 -0.81742220
16  -0.635183733  0.20949382
17   0.190632740  0.73668605
18  -0.748816076  0.71134017
19  -0.276344727  0.75049365
20  -0.526238580  0.74427010
21   0.091877475 -0.78026901
22  -0.169380202 -0.64752816
23   0.536860633  0.36805262
24  -0.414087177  0.66510610
25   0.527137439 -0.98166905
26   0.176505431 -0.70169783
27   0.372958825  0.63236571
28  -0.366776659  0.90320029
29   0.232689539  0.73613546
30  -0.323516790 -0.78790637
31  -0.046318822  0.62400442
32   0.137450461 -0.58682646
33   0.118305656  0.59143317
34   0.223598610 -0.85972066
35   0.435908938  0.49686027
36  -0.534598479  0.04249207
37   0.179646872  0.58400803
38   0.265231467 -0.96619026
39   0.121071759 -0.67877962
40  -0.249706785 -0.71552523
41  -0.751304377  1.02843151
42   0.192503002 -0.78393820
43  -0.229120293 -0.76383703
44  -0.625759988  0.03595987
45  -0.345074718  0.75648260
46   0.384436937 -0.95543925
47  -0.105265656 -0.64208302
48  -0.174516941 -0.82695743
49   0.860972268  0.76935282
50   0.095834223  0.77637747
51   0.616551878 -0.91149296
52  -0.184995618  0.67344013
53  -0.502016488  0.56319267
54   0.125065394 -0.80917342
55   0.053276672 -0.82974117
56   0.597793304  0.62984284
57   0.188259180 -0.05002534
58   0.442923790 -0.89474790
59  -0.336061586  0.62706314
60   0.518194250 -0.79344537
61  -0.244909497  0.16140198
62   0.383407498 -0.43971267
63  -0.009704619 -1.02689457
64  -0.070416260  1.03391881
65   0.335133051 -0.78381932
66   0.173671365  0.55697331
67  -0.133261623  0.33782333
68   0.705938317 -0.97638427
69   0.137687951  0.68426247
70  -0.297479684 -0.92127138
71   0.041945538  0.67052857
72   0.107865230 -0.11990418
73   0.590531033  0.80299881
74   0.122111281 -0.82703851
75  -0.150386619  0.82982743
76  -0.028029595  0.85261026
77   0.030471511  0.62797769
78  -0.213457038  0.85236325
79   0.510822042 -0.38192903
80   0.327136152  0.71270526
81   0.048602078  0.07554352
82   0.010270884 -0.84674862
83   0.256693263 -0.96917446
84  -0.199819918 -1.07366425
85  -0.133622925  0.86752435
86  -0.225758418  0.33412146
87   0.562188176 -0.58187783
88  -0.092054022  0.57165808
89   0.129273753 -0.88753073
90  -0.353804618 -0.86346909
91   0.765474490 -0.86180195
92   0.221502513 -0.58610145
93   0.149106926 -0.90171931
94   0.039601810 -0.74374400
95  -0.116095845  0.96394990
96  -0.027175414 -1.03896967
97  -0.021508225  0.73651333
98  -0.106806305  0.69029457
99   0.140881341  0.56656930
100 -0.786105322  0.67680762
101  0.082690782  0.60320869
102 -0.444547416  0.62492569
103 -0.314109436 -0.04874407
104 -0.116383534  0.53436006
105 -0.175922728  0.73343146
106 -0.247253000  0.58136924
107 -0.034259466  0.60417206
108 -0.366334539  0.43273153
109  0.307647851 -0.90990810
110  0.072983513 -0.61480372
111 -0.085285738 -0.89514183
112 -0.372206107  0.59881855
113 -0.049310949  0.52729542
114  0.352648532  0.82543586
115  0.093489018  0.75063862
116  0.448882473 -0.33380510
117 -0.280059804 -0.04712787
118  0.098910382 -0.98489808
119  0.117815119 -0.98204593
120 -0.334135004  0.81704883
121  0.241944654 -0.93653887
122  0.204415239  0.61832877
123  0.183749445  0.70843794
124  0.257668447 -0.32053063
125 -0.174913948  0.13616918
126 -0.380903139  0.84692212
127  0.255897712 -1.04472476
128 -0.433287290 -0.66907188
129 -0.026502258  0.66108784
130  0.069528777  0.57056303
131  0.016190458  0.78852504
132  0.208937536  0.65705504
133  0.470896779  0.65049098
134  0.218389436 -0.94746461
135  0.472644839 -1.19289963
136 -0.105941493  0.88544566
137 -0.885086938  0.83774274
138  0.459570157 -0.69264359
139 -0.501436306 -0.07703502
140  0.054061358 -0.72040173
141  0.094535456  0.75974485
142 -0.433171151  0.90233947
143  0.317638100  0.84022090
144  0.079840149 -0.94341049
145  0.253140444 -0.83298941
146  0.401489204 -0.22322045
147 -0.205193622  0.07905132
148  0.839164053  0.63941901
149  0.242246525 -0.13605234
150  0.001889929  0.07234130
151  0.365510822 -0.71606351
152  0.160464628 -0.66392514
153 -0.299291854  0.79527107
154 -0.144492140 -0.77801132
155  0.121108495 -0.48359271
156  0.066283506  0.64481577
157  0.390788429 -0.86412135
158 -0.329594336 -0.58851312
159  0.262070681 -0.08427781
160 -0.187591515 -0.68534865
161 -0.549395116  1.00373960
162  0.550359465 -0.86293896
163  0.004697575 -0.08216913
164  0.494369888  0.09870074
165 -0.546425820 -0.18516123
166 -0.018990711  0.88109161
167  0.507291267 -0.60246102
168  0.290465928 -0.86033564
169 -0.196354974  0.62324596
170 -0.020509895  1.00070266
171  0.070334829  1.03837326
172 -0.012444174  0.76817985
173  0.556681812 -0.92915694
174 -0.041338052 -0.92496715
175 -0.388914670  0.77494447
176 -0.438016034  0.09214827
177  0.125994616  0.73881804
178  0.058353017  0.47938868
179 -0.366701737  0.72278296
180  0.311103369 -0.24294613
181  0.235317026 -0.82645920
182  0.068049423 -0.01110138
183  0.047470329  0.70490937
184 -0.217982782  0.86329140
185 -0.163324340  0.71182426
186  0.160331024 -0.97019124
187 -0.003862514  0.43361856
188  0.003266792 -1.03194614
189  0.442159766  0.46100199
190 -0.129084022 -0.73777697
191  0.027257137  0.79383626
192 -0.194279230 -0.91767388
193 -0.054121165  0.57772378
194 -0.542470330 -0.87035258
195  0.525238975  0.63503419
196  0.424671152  0.68945161
197 -0.697247355  1.01907271
198 -0.110020028  0.83048908
199  0.185745257 -0.73492480

The posterior mean of the level 1 covariance matrices is:
              measure.a
measure.a.0   1.1019335
measure.a.1   1.0267517
measure.a.2   0.8710536
measure.a.3   0.9330914
measure.a.4   0.9329331
measure.a.5   1.0083814
measure.a.6   1.0316969
measure.a.7   1.0764109
measure.a.8   0.8582596
measure.a.9   0.9957663
measure.a.10  0.9260680
measure.a.11  1.0760743
measure.a.12  0.9628456
measure.a.13  0.9100902
measure.a.14  0.9958455
measure.a.15  1.1144954
measure.a.16  0.9900764
measure.a.17  0.9297739
measure.a.18  0.9659096
measure.a.19  1.0502472
measure.a.20  0.9134873
measure.a.21  1.0063449
measure.a.22  1.0357398
measure.a.23  1.0312837
measure.a.24  1.0819568
measure.a.25  0.8829935
measure.a.26  1.1341087
measure.a.27  0.9867942
measure.a.28  1.0537068
measure.a.29  0.9802359
measure.a.30  1.0516219
measure.a.31  1.0803906
measure.a.32  1.0911740
measure.a.33  1.1279396
measure.a.34  0.9969538
measure.a.35  1.0582743
measure.a.36  1.0913162
measure.a.37  1.0195765
measure.a.38  1.0224188
measure.a.39  1.0086289
measure.a.40  0.9474520
measure.a.41  1.0720054
measure.a.42  0.9682867
measure.a.43  1.0838001
measure.a.44  1.0843918
measure.a.45  1.0174857
measure.a.46  0.9681687
measure.a.47  1.0204945
measure.a.48  0.9662702
measure.a.49  0.9157369
measure.a.50  0.9309144
measure.a.51  1.1515330
measure.a.52  1.0147330
measure.a.53  0.9647094
measure.a.54  1.0469286
measure.a.55  0.8925376
measure.a.56  1.0999650
measure.a.57  1.1282276
measure.a.58  0.9954181
measure.a.59  1.0772547
measure.a.60  1.0018532
measure.a.61  0.9541124
measure.a.62  1.1594091
measure.a.63  1.0200942
measure.a.64  0.9693574
measure.a.65  1.1274078
measure.a.66  1.0354502
measure.a.67  0.8938045
measure.a.68  1.0303045
measure.a.69  0.9910517
measure.a.70  0.9266007
measure.a.71  1.1182114
measure.a.72  1.1025394
measure.a.73  0.9514661
measure.a.74  0.9910739
measure.a.75  0.9665411
measure.a.76  0.9355280
measure.a.77  1.0919033
measure.a.78  1.0506936
measure.a.79  0.9175283
measure.a.80  1.0988945
measure.a.81  1.0195549
measure.a.82  0.9601333
measure.a.83  1.1175587
measure.a.84  1.0227251
measure.a.85  0.9858948
measure.a.86  0.9975128
measure.a.87  0.8954097
measure.a.88  1.1059687
measure.a.89  0.9484723
measure.a.90  1.1127476
measure.a.91  1.0439631
measure.a.92  0.9543206
measure.a.93  1.1324134
measure.a.94  0.9860082
measure.a.95  0.9933482
measure.a.96  0.9817106
measure.a.97  0.9613730
measure.a.98  1.0624472
measure.a.99  1.0631294
measure.a.100 1.0695523
measure.a.101 1.1095440
measure.a.102 1.0224187
measure.a.103 1.1945078
measure.a.104 1.0503789
measure.a.105 0.9439221
measure.a.106 1.0666476
measure.a.107 0.9664970
measure.a.108 1.0192455
measure.a.109 1.0026856
measure.a.110 1.0878989
measure.a.111 0.9484438
measure.a.112 0.9170624
measure.a.113 1.1281240
measure.a.114 1.0311072
measure.a.115 1.0425653
measure.a.116 1.0951538
measure.a.117 1.0770089
measure.a.118 1.0552811
measure.a.119 0.9682217
measure.a.120 1.0518545
measure.a.121 0.9901919
measure.a.122 0.9839547
measure.a.123 0.9849115
measure.a.124 1.0058697
measure.a.125 1.0109803
measure.a.126 1.0396923
measure.a.127 1.0069947
measure.a.128 0.9546178
measure.a.129 1.0701172
measure.a.130 0.9505369
measure.a.131 0.9027541
measure.a.132 1.0367004
measure.a.133 1.0804456
measure.a.134 1.0011399
measure.a.135 1.0983506
measure.a.136 0.9692427
measure.a.137 1.1165563
measure.a.138 0.8624378
measure.a.139 1.0505062
measure.a.140 0.9874051
measure.a.141 1.1636556
measure.a.142 1.0362079
measure.a.143 1.0374467
measure.a.144 0.9914400
measure.a.145 0.9951602
measure.a.146 0.9819608
measure.a.147 1.1067697
measure.a.148 1.0009734
measure.a.149 1.1292524
measure.a.150 1.0404016
measure.a.151 0.8810029
measure.a.152 1.0429987
measure.a.153 1.0320284
measure.a.154 0.9868970
measure.a.155 1.0666836
measure.a.156 1.0151482
measure.a.157 1.0125548
measure.a.158 1.0836372
measure.a.159 1.0911244
measure.a.160 0.9874527
measure.a.161 1.0085649
measure.a.162 0.9583618
measure.a.163 0.9745581
measure.a.164 1.1034921
measure.a.165 0.9858119
measure.a.166 1.0140578
measure.a.167 0.9729577
measure.a.168 1.1122401
measure.a.169 0.9835131
measure.a.170 1.0272254
measure.a.171 1.0232444
measure.a.172 1.0276214
measure.a.173 1.0413046
measure.a.174 1.0172040
measure.a.175 1.0481754
measure.a.176 0.9588232
measure.a.177 1.1096669
measure.a.178 0.9431745
measure.a.179 1.0328829
measure.a.180 1.1191113
measure.a.181 0.9819706
measure.a.182 0.9870264
measure.a.183 0.9471355
measure.a.184 1.0932107
measure.a.185 1.1049036
measure.a.186 1.0042108
measure.a.187 1.1048450
measure.a.188 0.9665208
measure.a.189 0.9874863
measure.a.190 1.0259281
measure.a.191 0.9635146
measure.a.192 0.9146035
measure.a.193 0.9895350
measure.a.194 1.1426792
measure.a.195 1.0080920
measure.a.196 1.1871507
measure.a.197 1.0114743
measure.a.198 0.9645559
measure.a.199 1.0193003

The posterior mean of the level 2 covariance matrix is:
             measure.a.Z1 big.city.1
measure.a*Z1    0.3448579 -0.1534589
big.city.1     -0.1534589  1.0000000
> 
> #We can check the convergence of the first element of beta:
> 
> plot(c(1:nburn),imp$collectbeta[1,1,1:nburn],type="l")
> 
> #Or similarly we can check the convergence of any element of the level 2 covariance matrix:
> 
> plot(c(1:nburn),imp$collectcovu[1,2,1:nburn],type="l")
> 
> 
> 
> cleanEx()
> nameEx("jomo2hr")
> ### * jomo2hr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jomo2hr
> ### Title: JM Imputation of 2-level data assuming cluster-specific level-1
> ###   covariance matrices across level-2 unit
> ### Aliases: jomo2hr
> 
> ### ** Examples
> 
> 
> Y<-tldata[,c("measure.a"), drop=FALSE]
> Y2<-tldata[,c("big.city"), drop=FALSE]
> clus<-tldata[,c("city")]
> 
> #now we run the imputation function. Note that we would typically use an higher 
> #number of nburn iterations in real applications (at least 1000)
> 
> imp<-jomo2hr(Y.con=Y, Y2.cat=Y2, Y2.numcat=2, clus=clus,nburn=10, nbetween=10, nimp=2)
.First imputation registered. 
.Imputation number  2 registered 
The posterior mean of the fixed effects estimates is:
                X1
measure.a 1.981993

The posterior mean of the level 2 fixed effects estimates is:
                X2.1
big.city.1 0.1009548

The posterior mean of the random effects estimates is:
    measure.a.Z1 big.city.1
0    0.411106239 -0.7910224
1    0.032571972  0.6912507
2    0.620939789 -1.2009963
3    0.087026688 -0.9020590
4   -0.157920505 -0.6381946
5    0.151225153  0.6167572
6    0.237238122  0.8621461
7   -0.134782369 -0.7562627
8   -0.058677296  0.7929780
9    0.156484799 -1.0030091
10   0.123402254  0.9062987
11  -0.049973067  0.5510672
12  -0.232239159 -0.7820419
13   0.114917880 -0.6249950
14  -0.061656405  0.4740327
15   0.413308129 -0.7624841
16  -0.682095706  1.2513911
17   0.146858107  0.4188815
18  -0.741002586  0.8082688
19  -0.295074109  0.6970931
20  -0.506466140  0.7513082
21   0.097246929 -0.8379743
22  -0.149761173 -0.7427899
23   0.497474552  0.7112670
24  -0.425510614  0.7217536
25   0.476732035 -0.6237375
26   0.173219019 -0.7756799
27   0.359860867  0.4811170
28  -0.358239508  1.1086176
29   0.261289032  0.5378156
30  -0.322444086 -0.6809170
31  -0.060020375  0.6474307
32   0.193163413 -0.6828902
33   0.109868853  0.8490562
34   0.214755514 -0.8768949
35   0.419492855  0.5031515
36  -0.528078682 -0.4338100
37   0.126071150  0.8412768
38   0.298837454 -0.9707307
39   0.186755868 -0.8517033
40  -0.271849888 -0.6379117
41  -0.730836107  0.9065897
42   0.228095006 -0.9431917
43  -0.238534741 -0.6107826
44  -0.639138544 -0.4885069
45  -0.361672865  0.7652617
46   0.336726558 -1.0275732
47  -0.045927420 -0.3840309
48  -0.181574745 -0.5679758
49   0.837945228  0.4602503
50   0.058235957  0.4555967
51   0.568241703 -1.0633180
52  -0.157353480  0.5226107
53  -0.527975345  0.9785546
54   0.116871191 -0.8442959
55   0.014371036 -0.9141112
56   0.596311161  0.6043244
57   0.175732306 -0.5974689
58   0.433306841 -1.0589214
59  -0.356406029  1.5093141
60   0.522166257 -0.9488914
61  -0.293723642  0.5583373
62   0.393694192  0.7971837
63   0.013750273 -0.9857422
64  -0.092620350  0.6259284
65   0.305341697 -1.0037247
66   0.166350149  0.3410140
67  -0.137103322  0.7721094
68   0.735573415 -0.9534641
69   0.135090267  0.6178137
70  -0.265060062 -0.7733495
71   0.025478004  0.3322167
72   0.072674956 -1.0682010
73   0.599355145  0.4091769
74   0.093485225 -0.8059655
75  -0.188773402  0.3083688
76  -0.079956276  0.8292614
77  -0.015815189  0.7117807
78  -0.188379519  0.6678043
79   0.497049688  0.6257875
80   0.287866630  0.7171195
81   0.102365712 -0.9808428
82   0.007316109 -0.9214017
83   0.217489771 -1.0886490
84  -0.266244023 -0.5283969
85  -0.129907990  0.5355621
86  -0.220383460  0.4514833
87   0.585059479 -0.9102097
88  -0.159043015  0.8036445
89   0.124330991 -1.0045612
90  -0.335992587 -0.9164257
91   0.782172733 -1.3881587
92   0.232305539 -1.1316397
93   0.069155958 -0.4947400
94   0.004813661 -1.0260369
95  -0.114086273  0.5289089
96  -0.016259504 -0.6877151
97  -0.024914059  0.7789415
98  -0.112566603  0.5174015
99   0.132347731  0.4033028
100 -0.793875058  1.1152479
101  0.097783650  0.3651681
102 -0.446997881  1.0936402
103 -0.294781075  0.7866713
104 -0.145820489  0.8166923
105 -0.128093867  0.7742558
106 -0.270954326 -0.5558392
107 -0.046615181  0.9470017
108 -0.332707124  0.7914447
109  0.292767160 -0.9516811
110  0.110765006 -1.0853996
111 -0.096171103 -0.5078713
112 -0.416313081  1.1831365
113 -0.020244701  0.7623870
114  0.314154492  0.7450280
115  0.107405143  0.7397385
116  0.381499813  0.5030137
117 -0.258076853  0.7371421
118  0.123996832 -0.9047552
119  0.144512781 -0.6216643
120 -0.316302874  0.5714138
121  0.322324740 -0.8793188
122  0.162674602  0.6494724
123  0.223803596  0.3423420
124  0.316295290 -0.7371853
125 -0.121354001  0.6833192
126 -0.408359538  0.9503197
127  0.257736351 -0.8908697
128 -0.384315697 -0.6625616
129  0.010110430  0.6545049
130  0.023780576  0.5404515
131  0.032304388  0.4603839
132  0.184702905  0.7168777
133  0.453128948  0.5313470
134  0.206210881 -0.7540456
135  0.454931716 -1.0044661
136 -0.125931954  0.7471272
137 -0.881513567  1.1712484
138  0.501073150 -0.8210767
139 -0.436079182  0.9613093
140  0.093171101 -0.4618287
141  0.103877813  0.3685394
142 -0.482345202  0.7577564
143  0.330144527  0.4665864
144  0.078820208 -0.6984165
145  0.261668574 -0.9255518
146  0.411580148 -1.1095625
147 -0.230846570  0.4820581
148  0.823073024  0.5320321
149  0.238672993 -0.7894900
150 -0.028055387 -0.8143927
151  0.356049896 -1.0560573
152  0.130367520 -0.7464225
153 -0.272583482  0.8722170
154 -0.069755131 -1.0155576
155  0.121250443  0.3968711
156  0.120548497  0.6668674
157  0.441460837 -1.0310247
158 -0.363056406 -0.7846507
159  0.196975690  0.6914065
160 -0.206734143 -0.5484663
161 -0.528899066  0.7780428
162  0.492381821 -0.8737244
163  0.026491621  0.6069692
164  0.472427107 -1.0487801
165 -0.594424228 -0.8252368
166 -0.008248914  0.5266480
167  0.501842409 -1.0323839
168  0.298090089 -0.8163203
169 -0.181778747  0.6167753
170 -0.044323349  0.7993720
171  0.077467239  0.5375771
172 -0.002284418  0.5496015
173  0.536854003 -0.8576416
174 -0.092794571 -0.8539279
175 -0.395933669  0.8420172
176 -0.457763154  0.6921660
177  0.113982679  0.4634325
178  0.016736954  0.3381603
179 -0.390889063  1.0330448
180  0.347113926  0.6914502
181  0.225127585 -1.0791829
182  0.036607600  0.6889597
183  0.065647407  0.5442920
184 -0.210726009  0.7186412
185 -0.183463024  0.4693984
186  0.191340816 -0.9271124
187  0.029488254  0.5531668
188 -0.008847506 -0.7508208
189  0.405308328  0.4839309
190 -0.079386225 -0.8637236
191  0.002798487  0.7806517
192 -0.227099397 -0.5793743
193 -0.065611559  1.0717582
194 -0.495431695 -0.6412434
195  0.495226850  0.3856206
196  0.414553073  0.6534043
197 -0.718416711  1.2673405
198 -0.149340872  0.8930255
199  0.207736985 -0.6954166

The posterior mean of the level 1 covariance matrices is:
              measure.a
measure.a.0   1.0652909
measure.a.1   1.0304136
measure.a.2   0.9004500
measure.a.3   0.9417438
measure.a.4   0.9214347
measure.a.5   1.0241919
measure.a.6   1.0333047
measure.a.7   1.1210671
measure.a.8   0.8777934
measure.a.9   0.9732327
measure.a.10  0.9454322
measure.a.11  1.1122602
measure.a.12  0.9992097
measure.a.13  0.9422625
measure.a.14  0.9889333
measure.a.15  1.1550130
measure.a.16  0.9682434
measure.a.17  0.9437269
measure.a.18  1.0020522
measure.a.19  1.0742718
measure.a.20  0.9001959
measure.a.21  1.0262920
measure.a.22  1.0422948
measure.a.23  1.0752952
measure.a.24  1.0888859
measure.a.25  0.9243924
measure.a.26  1.1092604
measure.a.27  0.9702652
measure.a.28  1.0286652
measure.a.29  0.9070421
measure.a.30  1.0728367
measure.a.31  1.1200414
measure.a.32  1.0921492
measure.a.33  1.0922276
measure.a.34  0.9861227
measure.a.35  1.0701747
measure.a.36  1.1070728
measure.a.37  1.0207074
measure.a.38  1.0096275
measure.a.39  1.0075592
measure.a.40  1.0069191
measure.a.41  1.0603479
measure.a.42  0.9991146
measure.a.43  1.0968534
measure.a.44  1.0340283
measure.a.45  1.0325852
measure.a.46  0.9891480
measure.a.47  1.0515793
measure.a.48  1.0095358
measure.a.49  0.9683732
measure.a.50  0.9294462
measure.a.51  1.1266167
measure.a.52  1.0053552
measure.a.53  0.9931384
measure.a.54  1.0531451
measure.a.55  0.8476609
measure.a.56  1.0580566
measure.a.57  1.1912901
measure.a.58  1.0043611
measure.a.59  1.0164610
measure.a.60  0.9738127
measure.a.61  0.9319784
measure.a.62  1.2107719
measure.a.63  1.0410655
measure.a.64  0.9424459
measure.a.65  1.1656739
measure.a.66  1.0284143
measure.a.67  0.8832474
measure.a.68  1.0711711
measure.a.69  0.9821739
measure.a.70  0.9627260
measure.a.71  1.1369710
measure.a.72  1.1806521
measure.a.73  1.0043273
measure.a.74  0.9733470
measure.a.75  0.9660313
measure.a.76  0.9455473
measure.a.77  1.1309853
measure.a.78  0.9974952
measure.a.79  0.9347739
measure.a.80  1.0695283
measure.a.81  0.9953441
measure.a.82  0.9160603
measure.a.83  1.1443811
measure.a.84  1.0059517
measure.a.85  0.9707496
measure.a.86  0.9679752
measure.a.87  0.9759824
measure.a.88  1.1036708
measure.a.89  0.9767141
measure.a.90  1.1560757
measure.a.91  1.0408439
measure.a.92  0.9977874
measure.a.93  1.1569861
measure.a.94  0.9721901
measure.a.95  1.0706812
measure.a.96  1.0105832
measure.a.97  0.9776150
measure.a.98  1.0808384
measure.a.99  1.0419751
measure.a.100 1.0912804
measure.a.101 1.1209815
measure.a.102 1.0635777
measure.a.103 1.1857854
measure.a.104 1.0233909
measure.a.105 0.9207310
measure.a.106 1.0863390
measure.a.107 0.9579110
measure.a.108 1.0213899
measure.a.109 1.0156591
measure.a.110 1.1239371
measure.a.111 0.9346239
measure.a.112 0.9668449
measure.a.113 1.1167021
measure.a.114 1.0087655
measure.a.115 1.0470761
measure.a.116 1.1087954
measure.a.117 1.0901794
measure.a.118 1.0978581
measure.a.119 1.0224425
measure.a.120 1.0830514
measure.a.121 0.9927729
measure.a.122 0.9729033
measure.a.123 1.0541386
measure.a.124 1.0589470
measure.a.125 1.0360232
measure.a.126 1.0505891
measure.a.127 0.9890120
measure.a.128 0.9023478
measure.a.129 1.0759222
measure.a.130 0.9647654
measure.a.131 0.9069697
measure.a.132 0.9862700
measure.a.133 1.1028404
measure.a.134 0.9868617
measure.a.135 1.0833175
measure.a.136 0.9011503
measure.a.137 1.0805414
measure.a.138 0.8218832
measure.a.139 1.0318641
measure.a.140 1.0669160
measure.a.141 1.1475848
measure.a.142 1.0810928
measure.a.143 1.0029387
measure.a.144 0.9978614
measure.a.145 1.0249846
measure.a.146 0.9861443
measure.a.147 1.0749660
measure.a.148 0.9627000
measure.a.149 1.0837908
measure.a.150 1.0763845
measure.a.151 0.8863550
measure.a.152 1.0784970
measure.a.153 1.0253355
measure.a.154 0.9882762
measure.a.155 1.1374827
measure.a.156 1.0292803
measure.a.157 1.0207134
measure.a.158 1.0576612
measure.a.159 1.1012513
measure.a.160 1.0030165
measure.a.161 1.0830885
measure.a.162 1.0087207
measure.a.163 1.0100623
measure.a.164 1.1341965
measure.a.165 1.0538024
measure.a.166 1.0477092
measure.a.167 1.0506326
measure.a.168 1.1950532
measure.a.169 1.0419759
measure.a.170 1.0404468
measure.a.171 1.0647988
measure.a.172 1.0377984
measure.a.173 1.0452244
measure.a.174 1.0368869
measure.a.175 0.9982495
measure.a.176 0.8991128
measure.a.177 1.0916147
measure.a.178 0.9470080
measure.a.179 1.0742945
measure.a.180 1.0586279
measure.a.181 1.0542260
measure.a.182 0.9932009
measure.a.183 0.9476391
measure.a.184 1.1108437
measure.a.185 1.0958995
measure.a.186 1.0094666
measure.a.187 1.1627209
measure.a.188 0.9810364
measure.a.189 1.0249530
measure.a.190 0.9784268
measure.a.191 1.0695837
measure.a.192 0.8960699
measure.a.193 0.9958175
measure.a.194 1.1559366
measure.a.195 1.0116997
measure.a.196 1.1431606
measure.a.197 0.9924160
measure.a.198 0.9943407
measure.a.199 1.0133796

The posterior mean of the level 2 covariance matrix is:
             measure.a.Z1 big.city.1
measure.a*Z1    0.2292537 -0.2106153
big.city.1     -0.2106153  1.0000000
> 
>   # Check help page for function jomo to see how to fit the model and 
>   # combine estimates with Rubin's rules
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  19.857 1.076 19.95 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
