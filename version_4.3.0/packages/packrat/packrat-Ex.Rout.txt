
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "packrat"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('packrat')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("appDependencies")
> ### * appDependencies
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: appDependencies
> ### Title: Detect Application Dependencies
> ### Aliases: appDependencies
> ### Keywords: internal
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D # dependencies for the app in the current working dir
> ##D appDependencies()
> ##D 
> ##D # dependencies for an app in another directory
> ##D appDependencies("~/projects/shiny/app1")
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("clean")
> ### * clean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clean
> ### Title: Remove Packages from the Library
> ### Aliases: clean
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # Get unused package records
> ##D unused_packages()
> ##D 
> ##D # Clean all unused packages
> ##D clean()
> ##D 
> ##D # Clean specific packages
> ##D clean("foo")
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("init")
> ### * init
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: init
> ### Title: Initialize Packrat on a new or existing R project
> ### Aliases: init
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D ## initialize a project using a local repository of packages
> ##D packrat::init(options = list(local.repos = "~/projects/R"))
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("lockfile-metadata")
> ### * lockfile-metadata
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lockfile-metadata
> ### Title: Get / Set packrat lockfile metadata
> ### Aliases: lockfile-metadata set_lockfile_metadata get_lockfile_metadata
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # changes repos url
> ##D repos <- old_repos <- get_lockfile_metadata("repos")
> ##D repos
> ##D repos["CRAN"] <- "https://cran.r-project.org/"
> ##D set_lockfile_metadata(repos = repos)
> ##D get_lockfile_metadata("repos")
> ##D # setting back old state
> ##D # set_lockfile_metadata(repos = old_repos)
> ##D 
> ##D # changes R version
> ##D rver <- old_rver <- get_lockfile_metadata("r_version")
> ##D rver
> ##D rver <- "3.4.1"
> ##D set_lockfile_metadata(r_version = rver)
> ##D get_lockfile_metadata("r_version")
> ##D # Setting back old state
> ##D # set_lockfile_metadata(r_version = old_rver)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("packrat-external")
> ### * packrat-external
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: packrat-external
> ### Title: Managing External Libraries
> ### Aliases: packrat-external with_extlib extlib user_lib packrat_lib
> 
> ### ** Examples
> 
> ## Not run: 
> ##D with_extlib("lattice", xyplot(1 ~ 1))
> ##D with_extlib(expr = packageVersion("lattice"))
> ##D # since devtools requires roxygen2 >= 5.0.0 for this step, this
> ##D # should fail unless roxygen2 is available in the packrat lib.loc
> ##D with_extlib("devtools", load_all("path/to/project"))
> ##D # this method will work given roxygen2 is installed in the
> ##D # non-packrat lib.loc with devtools
> ##D with_extlib(expr = devtools::load_all("path/to/project"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("packrat-options")
> ### * packrat-options
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: packrat-options
> ### Title: Get/set packrat project options
> ### Aliases: packrat-options get_opts set_opts opts
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## use 'devtools' and 'knitr' from the user library
> ##D packrat::set_opts(external.packages = c("devtools", "knitr"))
> ##D 
> ##D ## set local repository
> ##D packrat::set_opts(local.repos = c("~/projects/R"))
> ##D 
> ##D ## get the set of 'external packages'
> ##D packrat::opts$external.packages()
> ##D 
> ##D ## set the external packages
> ##D packrat::opts$external.packages(c("devtools", "knitr"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("packrat")
> ### * packrat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: packrat
> ### Title: Packrat: Reproducible dependency management
> ### Aliases: packrat
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Create a new packrat project from an existing directory of \R code
> ##D init()
> ##D 
> ##D # Install a package and take a snapshot of the new state of the library
> ##D install.packages("TTR")
> ##D snapshot()
> ##D 
> ##D # Accidentally remove a package and restore to add it back
> ##D remove.packages("TTR")
> ##D restore()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("snapshot")
> ### * snapshot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: snapshot
> ### Title: Capture and store the packages and versions in use
> ### Aliases: snapshot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Take a snapshot of the current project
> ##D snapshot()
> ##D 
> ##D # See what changes would be included in a snapshot
> ##D snapshot(dry.run = TRUE)
> ##D 
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.103 0.016 0.119 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
