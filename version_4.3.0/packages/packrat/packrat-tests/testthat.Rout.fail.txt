
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(testthat)
> library(packrat)
> 
> test_check("packrat")
Initializing packrat project in directory:
- "/tmp/Rtmp4zLv0o/sated"
[ FAIL 49 | WARN 10 | SKIP 50 | PASS 22 ]

══ Skipped tests ═══════════════════════════════════════════════════════════════
• On CRAN (50)

══ Failed tests ════════════════════════════════════════════════════════════════
── Error ('test-bitbucket.R:16:3'): bitbucketArchiveUrl returns the correct URL ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-bitbucket.R:16:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-bitbucket.R:35:3'): bitbucketDownload calls renvDownload in the expected context ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─mockery::expect_args(renv_download_mock, 1, url, destfile, type = "bitbucket") at test-bitbucket.R:35:3
  2. │ └─testthat::expect_equal(...)
  3. │   └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  4. │     └─testthat:::waldo_compare(...)
  5. └─base::loadNamespace(x)
  6.   ├─base::namespaceImportFrom(...)
  7.   │ └─base::asNamespace(ns)
  8.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  9.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 10.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 11.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 12.           └─base::get(genname, envir = envir)
── Error ('test-bitbucket.R:51:3'): bitbucketDownload calls bitbucketDownloadHttr in the expected context ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─mockery::expect_args(httr_download_mock, 1, url, destfile) at test-bitbucket.R:51:3
  2. │ └─testthat::expect_equal(...)
  3. │   └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  4. │     └─testthat:::waldo_compare(...)
  5. └─base::loadNamespace(x)
  6.   ├─base::namespaceImportFrom(...)
  7.   │ └─base::asNamespace(ns)
  8.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  9.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 10.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 11.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 12.           └─base::get(genname, envir = envir)
── Error ('test-bitbucket.R:69:3'): bitbucketDownload calls downloadWithRetries in the expected contexts ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─mockery::expect_args(download_with_retries_mock, 1, url, destfile) at test-bitbucket.R:69:3
  2. │ └─testthat::expect_equal(...)
  3. │   └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  4. │     └─testthat:::waldo_compare(...)
  5. └─base::loadNamespace(x)
  6.   ├─base::namespaceImportFrom(...)
  7.   │ └─base::asNamespace(ns)
  8.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  9.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 10.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 11.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 12.           └─base::get(genname, envir = envir)
── Error ('test-dependencies.R:170:5'): dependencies beneath project 'data' directory are ignored (renv) ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(deps, c("oatmeal")) at test-dependencies.R:170:5
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-dependencies.R:183:5'): dependencies with 'data' in project path are allowed (renv) ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(deps, c("oatmeal")) at test-dependencies.R:183:5
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-dependencies.R:198:5'): dependencies beneath project 'data' directory are ignored (builtin) ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(deps, c("oatmeal")) at test-dependencies.R:198:5
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-dependencies.R:211:5'): dependencies with 'data' in project path are allowed (builtin) ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(deps, c("oatmeal")) at test-dependencies.R:211:5
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-downloader.R:79:3'): renvDownload calls renv$download, passing in the values it received ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─mockery::expect_args(renv_download_mock, 1, url, destfile, type) at test-downloader.R:79:3
  2. │ └─testthat::expect_equal(...)
  3. │   └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  4. │     └─testthat:::waldo_compare(...)
  5. └─base::loadNamespace(x)
  6.   ├─base::namespaceImportFrom(...)
  7.   │ └─base::asNamespace(ns)
  8.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  9.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 10.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 11.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 12.           └─base::get(genname, envir = envir)
── Error ('test-downloader.R:85:3'): authDownloadAdvice offers sound advice ────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_true(...) at test-downloader.R:85:3
  2. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-env.R:11:3'): TAR environment variable is respected ────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(tar_binary(), "/foo/bar/tar") at test-env.R:11:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-env.R:29:3'): On Unix, use tar on the path if it exists ────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(tar_binary(), "/foo/bar/tar") at test-env.R:29:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-env.R:46:3'): On Unix, use 'internal' as a fallback if no tar is found on the PATH ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_warning(expect_equal(tar_binary(), "internal")) at test-env.R:46:3
  2. │ └─testthat:::expect_condition_matching(...)
  3. │   └─testthat:::quasi_capture(...)
  4. │     ├─testthat (local) .capture(...)
  5. │     │ └─base::withCallingHandlers(...)
  6. │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. ├─testthat::expect_equal(tar_binary(), "internal")
  8. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  9. │   └─testthat:::waldo_compare(...)
 10. └─base::loadNamespace(x)
 11.   ├─base::namespaceImportFrom(...)
 12.   │ └─base::asNamespace(ns)
 13.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 14.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 15.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 16.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 17.           └─base::get(genname, envir = envir)
── Error ('test-env.R:73:3'): On Windows, use the system tar if it exists ──────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(tar_binary(), "C:/foo/tar.exe") at test-env.R:73:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-env.R:100:3'): On Windows, use 'internal' as a fallback if system tar doesn't exist ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_warning(expect_equal(tar_binary(), "internal")) at test-env.R:100:3
  2. │ └─testthat:::expect_condition_matching(...)
  3. │   └─testthat:::quasi_capture(...)
  4. │     ├─testthat (local) .capture(...)
  5. │     │ └─base::withCallingHandlers(...)
  6. │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. ├─testthat::expect_equal(tar_binary(), "internal")
  8. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  9. │   └─testthat:::waldo_compare(...)
 10. └─base::loadNamespace(x)
 11.   ├─base::namespaceImportFrom(...)
 12.   │ └─base::asNamespace(ns)
 13.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 14.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 15.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 16.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 17.           └─base::get(genname, envir = envir)
── Error ('test-github.R:33:3'): githubArchiveUrl returns the correct URL ──────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(githubArchiveUrl(github_pkg_record), "https://api.github.com/repos/breakfaster/muesli/tarball/abcde12345") at test-github.R:33:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-github.R:57:3'): githubDownload calls renvDownload in the expected context ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─mockery::expect_args(renv_download_mock, 1, url, destfile, type = "github") at test-github.R:57:3
  2. │ └─testthat::expect_equal(...)
  3. │   └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  4. │     └─testthat:::waldo_compare(...)
  5. └─base::loadNamespace(x)
  6.   ├─base::namespaceImportFrom(...)
  7.   │ └─base::asNamespace(ns)
  8.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  9.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 10.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 11.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 12.           └─base::get(genname, envir = envir)
── Error ('test-github.R:73:3'): githubDownload calls githubDownloadHttr in the expected context ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─mockery::expect_args(httr_download_mock, 1, url, destfile) at test-github.R:73:3
  2. │ └─testthat::expect_equal(...)
  3. │   └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  4. │     └─testthat:::waldo_compare(...)
  5. └─base::loadNamespace(x)
  6.   ├─base::namespaceImportFrom(...)
  7.   │ └─base::asNamespace(ns)
  8.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  9.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 10.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 11.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 12.           └─base::get(genname, envir = envir)
── Error ('test-github.R:91:3'): githubDownload calls downloadWithRetries in the expected contexts ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─mockery::expect_args(download_with_retries_mock, 1, url, destfile) at test-github.R:91:3
  2. │ └─testthat::expect_equal(...)
  3. │   └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  4. │     └─testthat:::waldo_compare(...)
  5. └─base::loadNamespace(x)
  6.   ├─base::namespaceImportFrom(...)
  7.   │ └─base::asNamespace(ns)
  8.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  9.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 10.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 11.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 12.           └─base::get(genname, envir = envir)
── Error ('test-gitlab.R:29:3'): gitlabArchiveUrl returns the correct URL ──────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(gitlabArchiveUrl(gitlab_pkg_record), "https://gitlab.com/api/v4/projects/breakfaster%2Fmuseli/repository/archive?sha=abcde12345") at test-gitlab.R:29:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-gitlab.R:52:3'): gitlabDownload calls renvDownload in the expected context ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─mockery::expect_args(renv_download_mock, 1, url, destfile, type = "gitlab") at test-gitlab.R:52:3
  2. │ └─testthat::expect_equal(...)
  3. │   └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  4. │     └─testthat:::waldo_compare(...)
  5. └─base::loadNamespace(x)
  6.   ├─base::namespaceImportFrom(...)
  7.   │ └─base::asNamespace(ns)
  8.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  9.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 10.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 11.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 12.           └─base::get(genname, envir = envir)
── Error ('test-gitlab.R:68:3'): gitlabDownload calls gitlabDownloadHttr in the expected context ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─mockery::expect_args(httr_download_mock, 1, url, destfile) at test-gitlab.R:68:3
  2. │ └─testthat::expect_equal(...)
  3. │   └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  4. │     └─testthat:::waldo_compare(...)
  5. └─base::loadNamespace(x)
  6.   ├─base::namespaceImportFrom(...)
  7.   │ └─base::asNamespace(ns)
  8.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  9.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 10.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 11.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 12.           └─base::get(genname, envir = envir)
── Error ('test-gitlab.R:86:3'): gitlabDownload calls downloadWithRetries in the expected contexts ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─mockery::expect_args(download_with_retries_mock, 1, url, destfile) at test-gitlab.R:86:3
  2. │ └─testthat::expect_equal(...)
  3. │   └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  4. │     └─testthat:::waldo_compare(...)
  5. └─base::loadNamespace(x)
  6.   ├─base::namespaceImportFrom(...)
  7.   │ └─base::asNamespace(ns)
  8.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  9.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 10.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 11.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 12.           └─base::get(genname, envir = envir)
── Error ('test-hash.R:47:3'): hash treats some RemoteType values as CRAN ──────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(cranHash, simpleHash) at test-hash.R:47:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-ignores.R:6:3'): updateRBuildIgnore adds the packrat directory to ignore ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(content, c("^packrat/", "^\\.Rprofile$")) at test-ignores.R:6:3
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-ignores.R:16:3'): updateRBuildIgnore preserves content in ignore file ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(...) at test-ignores.R:16:3
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-ignores.R:31:3'): updateGitIgnore works ────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(content, "packrat/lib*/") at test-ignores.R:31:3
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-ignores.R:85:3'): updateIgnoreFile preserves old structure of file ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(updated, c(contents, "packrat/lib*/")) at test-ignores.R:85:3
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-install.R:30:3'): The default list of environment variables is masked correctly ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false(any(found_in_output), info = print(subprocess_output)) at test-install.R:30:3
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-install.R:59:3'): The default list of masked environment variables can be disabled ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_true(all(found_in_output), info = print(subprocess_output)) at test-install.R:59:3
  2. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-install.R:76:3'): Environment variables appear in an R subprocess ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_true(all(found_in_output), info = print(subprocess_output)) at test-install.R:76:3
  2. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-install.R:95:3'): User-specified masked envvars do not appear in an R subprocess ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false(any(found_in_output), info = print(subprocess_output)) at test-install.R:95:3
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-install.R:134:3'): Git and user-specified variables can be masked while other variables still appear ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false(any(not_expected), info = print(subprocess_output)) at test-install.R:134:3
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-local-repositories.R:20:5'): packrat::get_opts can read / write atrocious paths ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─packrat:::with_dir(...) at test-local-repositories.R:20:5
  2. │ └─base::eval(expr, envir = parent.frame())
  3. ├─testthat::expect_identical(path, readPath) at test-local-repositories.R:23:7
  4. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  5. │   └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-lockfile.R:10:3'): Topo sort works ─────────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_true(verifyTopoSort(graph, topoSort(graph))) at test-lockfile.R:10:3
  2. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-lockfile.R:30:3'): Repository is properly split by readLockFile ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-lockfile.R:30:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-options.R:13:5'): an option can be set and retrieved ───────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(get_opts("ignored.packages"), c("emo")) at test-options.R:13:5
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-packrat-mode.R:3:3'): packrat_mode successfully sets the library paths when turned on and off ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─packrat:::with_dir(...) at test-packrat-mode.R:3:3
  2. │ └─base::eval(expr, envir = parent.frame())
  3. ├─testthat::expect_identical(orig_libs, getLibPaths()) at test-packrat-mode.R:16:5
  4. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  5. │   └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-packrat.R:197:5'): fileDependencies.R picks up '::', ':::' dependencies ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(...) at test-packrat.R:197:5
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-packrat.R:329:5'): packrat and remotes annotated descriptions are comparable ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(diffed, expected) at test-packrat.R:329:5
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-remote-info.R:19:3'): remote_info is correctly generated from a GitHub pkgRecord ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(getRemoteInfo(pkgRecordGithub), expected) at test-remote-info.R:19:3
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-remote-info.R:42:3'): remote_info is correctly generated from a GitHub pkgRecord with a subdirectory ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(...) at test-remote-info.R:42:3
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-remote-info.R:66:3'): remote_info is correctly generated from a GitLab pkgRecord ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(getRemoteInfo(pkgRecordGitlab), expected) at test-remote-info.R:66:3
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-remote-info.R:91:3'): remote_info is correctly generated from a GitLab pkgRecord with a subdirectory ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(...) at test-remote-info.R:91:3
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-restore.R:42:3'): appendRemoteInfoToDescription modifies DESCRIPTION file ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_true(success) at test-restore.R:42:3
  2. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-utils.R:19:3'): dir_copy copies directories ────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(list.files("foo"), list.files("bar")) at test-utils.R:19:3
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-utils.R:62:3'): defer evaluates in appropriate environment ─────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(output, expected) at test-utils.R:62:3
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-utils.R:80:3'): defer captures arguments properly ──────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(output, expected) at test-utils.R:80:3
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-utils.R:101:3'): defer works with arbitrary expressions ────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(output, expected) at test-utils.R:101:3
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)

[ FAIL 49 | WARN 10 | SKIP 50 | PASS 22 ]
Error: Test failures
No deferred expressions to run
Execution halted
