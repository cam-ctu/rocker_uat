
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[13:18:32.124] plan(): Setting new future strategy stack:
[13:18:32.125] List of future strategies:
[13:18:32.125] 1. sequential:
[13:18:32.125]    - args: function (..., envir = parent.frame())
[13:18:32.125]    - tweaked: FALSE
[13:18:32.125]    - call: future::plan("sequential")
[13:18:32.135] plan(): nbrOfWorkers() = 1
> 
> message("*** future_replicate() ...")
*** future_replicate() ...
> 
> for (strategy in supportedStrategies()) {
+   message(sprintf("*** strategy = %s ...", sQuote(strategy)))
+   plan(strategy)
+   
+   y0 <- replicate(5L, sample(10L, size = 1L))
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(length(y0) == length(y1))
+   
+   set.seed(0xBEEF)
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   set.seed(0xBEEF)
+   y2 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(all.equal(y2, y1))
+   
+   y3 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   y4 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   stopifnot(all.equal(y4, y3))
+   
+   
+   message("- example(replicate) ...")
+   
+   foo <- function(x = 1, y = 2) c(x, y)
+   bar0 <- function(n, x) replicate(n, foo(x = x))
+   y0 <- bar0(5, x = 3)
+   
+   bar1 <- function(n, x) future_replicate(n, foo(x = x))
+   y1 <- bar1(5, x = 3)
+   stopifnot(all.equal(y1, y0))
+   
+   plan(sequential)
+   message(sprintf("*** strategy = %s ... done", sQuote(strategy)))
+ } ## for (strategy in ...) 
*** strategy = ‘sequential’ ...
[13:18:32.161] plan(): Setting new future strategy stack:
[13:18:32.161] List of future strategies:
[13:18:32.161] 1. sequential:
[13:18:32.161]    - args: function (..., envir = parent.frame())
[13:18:32.161]    - tweaked: FALSE
[13:18:32.161]    - call: plan(strategy)
[13:18:32.172] plan(): nbrOfWorkers() = 1
[13:18:32.173] future_lapply() ...
[13:18:32.177] Generating random seeds ...
[13:18:32.177] Generating random seed streams for 5 elements ...
[13:18:32.178] Generating random seed streams for 5 elements ... DONE
[13:18:32.178] Generating random seeds ... DONE
[13:18:32.178] Will set RNG state on exit: 10403, 10, 1425853836, 1426170575, 1880694405, 2042461500, -2075869166, -1786188019, -1073509305, -1246478802, -221952120, 237163147, 822879337, -717420488, -956432154, 2015381633, 308916243, 1697544130, 314118260, 672982647, -1930168467, 126167044, 2145059626, 1294661781, -1834408145, 2030865974, -1026844064, -1995937629, 2075773889, -71596112, 450605774, -1039986631, -356596149, 594365434, -567478532, 1559206719, 1305777173, -1603662036, -656301054, -1536522531, -831212073, -1787854658, -474402056, 751638747, 1944726329, -1906041208, -437253578, 958579313, -1624409949, -969371150, 1459716420, 412523015, 217851869, -8486700, -990633990, -1459415227, -1012968545, 1104984358, 915818928, -815234477, -1687687823, 1724071072, 1261575230, -2022288567, -115482117, 1842005450, 26774316, -1094704337, -312862235, 1553810588, -1618104078, 648087917, 47408807, -170473266, 1455097384, 1252396587, 806847561, -1039452840, 1821322246, 479415777, 1859778419, -1646406686, -4080812, 576329303, -680235443, -1385119260, -1836770358, -557228491, -222452593, 731057558, 1241149760, 944311299, 60419617, -1562158832, 284645102, -525915495, 1265550123, 1257319962, 968869084, 1691506911, 191739573, -526159796, -1817924446, 317185021, 1983752439, -9933282, 1167106264, 538903611, 703868377, 714333032, 482924182, -1621323759, 1795174851, -1040384558, -802409372, 1452008359, -1908945667, 293415156, -1497301030, 517853989, 305513023, -518182458, 50544208, 1100640883, -1338767727, -1590624576, -1761212258, 242918505, -1130852197, 2135396778, -851531316, -1321483121, -69280571, 1779928188, 2134032594, -1187504051, -1041762041, -1926697746, 2071348680, 1795304139, -12102871, 1802662776, -232134490, 1044067009, -1008516269, -1370763262, -566477516, 885814967, 116263597, -1270166588, 824923114, 583031893, -74268177, -921237002, 1745211168, 1718599907, 719533441, 218797040, -7087474, -884150791, -1061580917, -449115206, 496530108, -946050561, 1793439573, -554905492, -1172503358, 1922264861, 23700887, -1518840578, 1789935288, -459431781, -1543254279, 1520648264, -1117187210, -36534607, 663373539, -2073643598, 2063638020, -259812025, -640249827, -1208191340, 1741667898, -258715515, -1041164961, -2041528858, 2065749104, -1324021869, -796143567, 1006083808, 987977598, -545141239, 2106074683, 2117236746, 1057662956, 63179887, -124591195, 1551565660, -512938190, -787276243, 965039335, 1631376910, 430394344, 2060629483, -803348855, 1135676952, 306840902, 1580528545, -661832141, -4607070, 898975380, -2051128041, -1234468083, -1862913500, -91620854, -1533901963, -1761065265, -336705066, -244144768, 1641291203, -43795615, -1643175472, -1735083730, 410616025, -799679765, 951633754, -992755428, -1442920417, -105081739, 1641229396, -340868120, 689724666, -1331658928, -362645716, 1863105908, -2114322542, 1845042272, -310639220, -2037222560, 729142754, 1514193832, -1470609204, -170716164, 373080498, -51057168, 1843331012, -1945990824, -128778886, -2113755216, 461553084, -50105260, -916449342, -931067872, -269156164, 1406924368, 498169826, 1075599464, 83720268, 2094097660, -1602213902, -1108353792, -1382480524, -1669414904, 821142458, 1798489552, -1574387732, 1476806036, -258932270, 1887263072, -2100978868, -1159487200, 721061762, 1085701864, -1570608916, -1036892100, -1646284942, 369970800, 590801956, -1882300616, 246901914, 1376965328, -1277275972, 304459412, -33673598, -61038400, 1842784060, 1539838096, -2145604062, -122115064, 2071760140, 1661283484, -1381027310, -820120704, 1408325140, 468807208, -2022253254, -1792930352, -1424005012, -1734556364, 1534945938, 535629664, 1107554124, -151107616, 1199995810, 1926257576, 867170700, -399049540, 1895407986, 1586923760, -1729398716, -1218140840, -1640543686, 1282232176, -1443025860, 1976804116, -1507768894, -1463423264, 847801212, -558779696, 845647010, 1842569256, 618264844, 1637665724, 89267506, -806911552, 1393056308, -1696665656, 1896504506, 1334047120, -905231892, -439052716, 2036520082, 1129079584, 1305125324, -98347552, 138266306, -1993881560, 473265836, 1243766972, 1466555890, 1995828528, -595475292, -490677576, -119318182, -1056323184, -1666218116, -1428199148, 1286774594, 397913856, 1421681596, -1875102896, -1201004766, 1818486088, -143315444, -321955748, -1125019438, -1892758016, -2127195820, 1195867624, -704873478, -1469965104, 1098815788, 2105763572, -1562247790, 176316512, 977122572, -1480107296, -691847838, -729029976, -1124259252, -702777988, -910632654, 2077355120, -1861170364, -936263208, 413504634, 1429497392, 1645691580, -1097215148, -641847230, 1206905248, 1477785276, -326648368, 1233476962, -516249624, -28037172, 1536287484, -92621326, 250956928, 1716050164, 932371080, 21842746, 7776080, -158786964, -582829932, 482607442, 1180636896, 281708236, 1971488928, -493992062, -77158680, -46453012, 1212944444, 487270002, 1367127152, 1947421220, 21846072, -517812198, 740976336, 482720828, 582945940, -362248062, 196915136, 24541500, 597431952, -1117224926, -1194051576, 3820684, 1152504860, 794798738, -229379968, 175723540, -1074181848, -942405062, -1439263536, -1512172436, 284425908, 2011629586, -1740273696, 1031082956, -522949152, -961748446, -233505496, 1902646540, -1437036996, -571866894, 909053680, 391892804, 2055544408, -1871578566, 493838064, -2020822852, 1361322516, -1680792382, 1157485664, -754344580, -1353596720, -2050788318, 361287336, -590994548, -1009566276, -194761678, -573257920, -290270028, 59352904, -1561003334, -1918131640, -679775258, -1324851949, -91205003, 997113938, 1211265696, 895451017, 809671611, 681073676, -1671280230, -1305835249, 1943664473, 1023433198, -1558576004, -1014161171, -1744918633, -205684640, -161783234, 385999627, -537224819, -1683627334, -1217795848, 241735329, -219419053, 1832702324, 2134607618, -1032573033, 1346511201, -48191066, 2127915940, 416765525, -367634689, 509721496, -44450634, -481584829, 118608005, 1319266594, 111827472, 1164657081, 889533035, 841313628, -611640182, -472271745, 1796554185, 70039134, -1352846068, 1275441373, 1694694887, -1720310256, -436356306, -2054742053, 789635261, 1130891818, 1479898824, 639857649, -330222237, -708637340, 1122414738, 829171047, -967721167, -341609354, 986566036, 1324751269, -1128549713, -1000770712, 673566534, 1889253107, -2140858283, 161424434, -2036694528, -508726551, 39774555, -1963981908, -255205446, -82486929, 616641273, -583255154, -149207460, -1391651635, 299908151, 534779584, -1361342050, 263105131, 1114534381, 294748250, 1519013656, 1461933185, -1802423757, -1870770092, -1655139230, -198034697, 814654785, -1319689274, 1686585604, -611598155, -1652748385, -950190088, -673713706, -319797149, 1663818789, 699415490, -873606992, -1825489703, 527800907, -1858062148, -1792303382, -162435297, -1337430103, -1806276290, 273526828, -1479524739, 25075911, 519081392, -823719986, 1581956347, -99701923, 1109176458, -722551128, -1205837295, 2142966531, -1099684348, -1384106446, 1616569991, 858483409, 629365846, -509127628, 1956779845, -267600497, 1514073352, 1572310822, 1323315155, -147832523, -1175914350, 867334240, 27151817, 1448396027, -2115130676, -1336996006, 1435146831, -121495783, 1395046702, -1782723780, 1306456237, 860394327, 631158432, -760733698, -1173752117, 556726477, -914433030, -1910683592, 825651681, 636410515, -1126231884, -1043037758, -1857295913, -552610271, 503369190, 1770751204, 1058602005, 662486079, -902949928, 371901942, -506632701, 539427141, 1130866018, -275024176, -1813310983, 1728770347, -6759780, 1610411622
[13:18:32.179] Number of chunks: 1
[13:18:32.179] getGlobalsAndPackagesXApply() ...
[13:18:32.179]  - future.globals: TRUE
[13:18:32.180] getGlobalsAndPackages() ...
[13:18:32.180] Searching for globals...
[13:18:32.182] - globals found: [2] ‘FUN’, ‘sample’
[13:18:32.182] Searching for globals ... DONE
[13:18:32.182] Resolving globals: FALSE
[13:18:32.183] The total size of the 1 globals is 616 bytes (616 bytes)
[13:18:32.184] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:18:32.184] - globals: [1] ‘FUN’
[13:18:32.184] 
[13:18:32.184] getGlobalsAndPackages() ... DONE
[13:18:32.184]  - globals found/used: [n=1] ‘FUN’
[13:18:32.184]  - needed namespaces: [n=0] 
[13:18:32.184] Finding globals ... DONE
[13:18:32.184]  - use_args: TRUE
[13:18:32.185]  - Getting '...' globals ...
[13:18:32.185] resolve() on list ...
[13:18:32.185]  recursive: 0
[13:18:32.186]  length: 1
[13:18:32.186]  elements: ‘...’
[13:18:32.186]  length: 0 (resolved future 1)
[13:18:32.186] resolve() on list ... DONE
[13:18:32.186]    - '...' content: [n=0] 
[13:18:32.186] List of 1
[13:18:32.186]  $ ...: list()
[13:18:32.186]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.186]  - attr(*, "where")=List of 1
[13:18:32.186]   ..$ ...:<environment: 0x55df1e2d6a38> 
[13:18:32.186]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.186]  - attr(*, "resolved")= logi TRUE
[13:18:32.186]  - attr(*, "total_size")= num NA
[13:18:32.193]  - Getting '...' globals ... DONE
[13:18:32.194] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:18:32.194] List of 2
[13:18:32.194]  $ ...future.FUN:function (...)  
[13:18:32.194]  $ ...          : list()
[13:18:32.194]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.194]  - attr(*, "where")=List of 2
[13:18:32.194]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:18:32.194]   ..$ ...          :<environment: 0x55df1e2d6a38> 
[13:18:32.194]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.194]  - attr(*, "resolved")= logi FALSE
[13:18:32.194]  - attr(*, "total_size")= num 616
[13:18:32.196] Packages to be attached in all futures: [n=0] 
[13:18:32.197] getGlobalsAndPackagesXApply() ... DONE
[13:18:32.197] Number of futures (= number of chunks): 1
[13:18:32.197] Launching 1 futures (chunks) ...
[13:18:32.197] Chunk #1 of 1 ...
[13:18:32.197]  - Finding globals in 'X' for chunk #1 ...
[13:18:32.197] getGlobalsAndPackages() ...
[13:18:32.198] Searching for globals...
[13:18:32.198] 
[13:18:32.198] Searching for globals ... DONE
[13:18:32.198] - globals: [0] <none>
[13:18:32.198] getGlobalsAndPackages() ... DONE
[13:18:32.198]    + additional globals found: [n=0] 
[13:18:32.198]    + additional namespaces needed: [n=0] 
[13:18:32.198]  - Finding globals in 'X' for chunk #1 ... DONE
[13:18:32.199]  - Adjusted option 'future.globals.maxSize': 524288000 -> 5 * 524288000 = 2621440000 (bytes)
[13:18:32.199]  - seeds: [5] <seeds>
[13:18:32.199] getGlobalsAndPackages() ...
[13:18:32.199] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.199] Resolving globals: FALSE
[13:18:32.199] Tweak future expression to call with '...' arguments ...
[13:18:32.199] {
[13:18:32.199]     do.call(function(...) {
[13:18:32.199]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.199]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.199]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.199]             on.exit(options(oopts), add = TRUE)
[13:18:32.199]         }
[13:18:32.199]         {
[13:18:32.199]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.199]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.199]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.199]                   envir = globalenv(), inherits = FALSE)
[13:18:32.199]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.199]             })
[13:18:32.199]         }
[13:18:32.199]     }, args = future.call.arguments)
[13:18:32.199] }
[13:18:32.200] Tweak future expression to call with '...' arguments ... DONE
[13:18:32.200] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.200] 
[13:18:32.200] getGlobalsAndPackages() ... DONE
[13:18:32.201] run() for ‘Future’ ...
[13:18:32.201] - state: ‘created’
[13:18:32.201] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:18:32.202] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:18:32.202] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:18:32.202]   - Field: ‘label’
[13:18:32.202]   - Field: ‘local’
[13:18:32.202]   - Field: ‘owner’
[13:18:32.202]   - Field: ‘envir’
[13:18:32.202]   - Field: ‘packages’
[13:18:32.202]   - Field: ‘gc’
[13:18:32.203]   - Field: ‘conditions’
[13:18:32.203]   - Field: ‘expr’
[13:18:32.203]   - Field: ‘uuid’
[13:18:32.203]   - Field: ‘seed’
[13:18:32.203]   - Field: ‘version’
[13:18:32.203]   - Field: ‘result’
[13:18:32.203]   - Field: ‘asynchronous’
[13:18:32.203]   - Field: ‘calls’
[13:18:32.203]   - Field: ‘globals’
[13:18:32.203]   - Field: ‘stdout’
[13:18:32.203]   - Field: ‘earlySignal’
[13:18:32.204]   - Field: ‘lazy’
[13:18:32.204]   - Field: ‘state’
[13:18:32.204] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:18:32.204] - Launch lazy future ...
[13:18:32.204] Packages needed by the future expression (n = 0): <none>
[13:18:32.205] Packages needed by future strategies (n = 0): <none>
[13:18:32.205] {
[13:18:32.205]     {
[13:18:32.205]         {
[13:18:32.205]             ...future.startTime <- base::Sys.time()
[13:18:32.205]             {
[13:18:32.205]                 {
[13:18:32.205]                   {
[13:18:32.205]                     base::local({
[13:18:32.205]                       has_future <- base::requireNamespace("future", 
[13:18:32.205]                         quietly = TRUE)
[13:18:32.205]                       if (has_future) {
[13:18:32.205]                         ns <- base::getNamespace("future")
[13:18:32.205]                         version <- ns[[".package"]][["version"]]
[13:18:32.205]                         if (is.null(version)) 
[13:18:32.205]                           version <- utils::packageVersion("future")
[13:18:32.205]                       }
[13:18:32.205]                       else {
[13:18:32.205]                         version <- NULL
[13:18:32.205]                       }
[13:18:32.205]                       if (!has_future || version < "1.8.0") {
[13:18:32.205]                         info <- base::c(r_version = base::gsub("R version ", 
[13:18:32.205]                           "", base::R.version$version.string), 
[13:18:32.205]                           platform = base::sprintf("%s (%s-bit)", 
[13:18:32.205]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:32.205]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:32.205]                             "release", "version")], collapse = " "), 
[13:18:32.205]                           hostname = base::Sys.info()[["nodename"]])
[13:18:32.205]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:18:32.205]                           info)
[13:18:32.205]                         info <- base::paste(info, collapse = "; ")
[13:18:32.205]                         if (!has_future) {
[13:18:32.205]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:32.205]                             info)
[13:18:32.205]                         }
[13:18:32.205]                         else {
[13:18:32.205]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:32.205]                             info, version)
[13:18:32.205]                         }
[13:18:32.205]                         base::stop(msg)
[13:18:32.205]                       }
[13:18:32.205]                     })
[13:18:32.205]                   }
[13:18:32.205]                   options(future.plan = NULL)
[13:18:32.205]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.205]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:32.205]                 }
[13:18:32.205]                 ...future.workdir <- getwd()
[13:18:32.205]             }
[13:18:32.205]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:32.205]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:32.205]         }
[13:18:32.205]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:32.205]             future.globals.maxSize = 2621440000, future.globals.method = NULL, 
[13:18:32.205]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:32.205]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:32.205]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:32.205]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:32.205]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:32.205]             base::names(...future.oldOptions))
[13:18:32.205]     }
[13:18:32.205]     if (FALSE) {
[13:18:32.205]     }
[13:18:32.205]     else {
[13:18:32.205]         if (TRUE) {
[13:18:32.205]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:32.205]                 open = "w")
[13:18:32.205]         }
[13:18:32.205]         else {
[13:18:32.205]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:32.205]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:32.205]         }
[13:18:32.205]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:32.205]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:32.205]             base::sink(type = "output", split = FALSE)
[13:18:32.205]             base::close(...future.stdout)
[13:18:32.205]         }, add = TRUE)
[13:18:32.205]     }
[13:18:32.205]     ...future.frame <- base::sys.nframe()
[13:18:32.205]     ...future.conditions <- base::list()
[13:18:32.205]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:32.205]     if (FALSE) {
[13:18:32.205]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:32.205]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:32.205]     }
[13:18:32.205]     ...future.result <- base::tryCatch({
[13:18:32.205]         base::withCallingHandlers({
[13:18:32.205]             ...future.value <- base::withVisible(base::local({
[13:18:32.205]                 do.call(function(...) {
[13:18:32.205]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.205]                   if (!identical(...future.globals.maxSize.org, 
[13:18:32.205]                     ...future.globals.maxSize)) {
[13:18:32.205]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.205]                     on.exit(options(oopts), add = TRUE)
[13:18:32.205]                   }
[13:18:32.205]                   {
[13:18:32.205]                     lapply(seq_along(...future.elements_ii), 
[13:18:32.205]                       FUN = function(jj) {
[13:18:32.205]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.205]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.205]                           envir = globalenv(), inherits = FALSE)
[13:18:32.205]                         ...future.FUN(...future.X_jj, ...)
[13:18:32.205]                       })
[13:18:32.205]                   }
[13:18:32.205]                 }, args = future.call.arguments)
[13:18:32.205]             }))
[13:18:32.205]             future::FutureResult(value = ...future.value$value, 
[13:18:32.205]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.205]                   ...future.rng), globalenv = if (FALSE) 
[13:18:32.205]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:32.205]                     ...future.globalenv.names))
[13:18:32.205]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:32.205]         }, condition = base::local({
[13:18:32.205]             c <- base::c
[13:18:32.205]             inherits <- base::inherits
[13:18:32.205]             invokeRestart <- base::invokeRestart
[13:18:32.205]             length <- base::length
[13:18:32.205]             list <- base::list
[13:18:32.205]             seq.int <- base::seq.int
[13:18:32.205]             signalCondition <- base::signalCondition
[13:18:32.205]             sys.calls <- base::sys.calls
[13:18:32.205]             `[[` <- base::`[[`
[13:18:32.205]             `+` <- base::`+`
[13:18:32.205]             `<<-` <- base::`<<-`
[13:18:32.205]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:32.205]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:32.205]                   3L)]
[13:18:32.205]             }
[13:18:32.205]             function(cond) {
[13:18:32.205]                 is_error <- inherits(cond, "error")
[13:18:32.205]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:32.205]                   NULL)
[13:18:32.205]                 if (is_error) {
[13:18:32.205]                   sessionInformation <- function() {
[13:18:32.205]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:32.205]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:32.205]                       search = base::search(), system = base::Sys.info())
[13:18:32.205]                   }
[13:18:32.205]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.205]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:32.205]                     cond$call), session = sessionInformation(), 
[13:18:32.205]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:32.205]                   signalCondition(cond)
[13:18:32.205]                 }
[13:18:32.205]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:32.205]                 "immediateCondition"))) {
[13:18:32.205]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:32.205]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.205]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:32.205]                   if (TRUE && !signal) {
[13:18:32.205]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.205]                     {
[13:18:32.205]                       inherits <- base::inherits
[13:18:32.205]                       invokeRestart <- base::invokeRestart
[13:18:32.205]                       is.null <- base::is.null
[13:18:32.205]                       muffled <- FALSE
[13:18:32.205]                       if (inherits(cond, "message")) {
[13:18:32.205]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.205]                         if (muffled) 
[13:18:32.205]                           invokeRestart("muffleMessage")
[13:18:32.205]                       }
[13:18:32.205]                       else if (inherits(cond, "warning")) {
[13:18:32.205]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.205]                         if (muffled) 
[13:18:32.205]                           invokeRestart("muffleWarning")
[13:18:32.205]                       }
[13:18:32.205]                       else if (inherits(cond, "condition")) {
[13:18:32.205]                         if (!is.null(pattern)) {
[13:18:32.205]                           computeRestarts <- base::computeRestarts
[13:18:32.205]                           grepl <- base::grepl
[13:18:32.205]                           restarts <- computeRestarts(cond)
[13:18:32.205]                           for (restart in restarts) {
[13:18:32.205]                             name <- restart$name
[13:18:32.205]                             if (is.null(name)) 
[13:18:32.205]                               next
[13:18:32.205]                             if (!grepl(pattern, name)) 
[13:18:32.205]                               next
[13:18:32.205]                             invokeRestart(restart)
[13:18:32.205]                             muffled <- TRUE
[13:18:32.205]                             break
[13:18:32.205]                           }
[13:18:32.205]                         }
[13:18:32.205]                       }
[13:18:32.205]                       invisible(muffled)
[13:18:32.205]                     }
[13:18:32.205]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.205]                   }
[13:18:32.205]                 }
[13:18:32.205]                 else {
[13:18:32.205]                   if (TRUE) {
[13:18:32.205]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.205]                     {
[13:18:32.205]                       inherits <- base::inherits
[13:18:32.205]                       invokeRestart <- base::invokeRestart
[13:18:32.205]                       is.null <- base::is.null
[13:18:32.205]                       muffled <- FALSE
[13:18:32.205]                       if (inherits(cond, "message")) {
[13:18:32.205]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.205]                         if (muffled) 
[13:18:32.205]                           invokeRestart("muffleMessage")
[13:18:32.205]                       }
[13:18:32.205]                       else if (inherits(cond, "warning")) {
[13:18:32.205]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.205]                         if (muffled) 
[13:18:32.205]                           invokeRestart("muffleWarning")
[13:18:32.205]                       }
[13:18:32.205]                       else if (inherits(cond, "condition")) {
[13:18:32.205]                         if (!is.null(pattern)) {
[13:18:32.205]                           computeRestarts <- base::computeRestarts
[13:18:32.205]                           grepl <- base::grepl
[13:18:32.205]                           restarts <- computeRestarts(cond)
[13:18:32.205]                           for (restart in restarts) {
[13:18:32.205]                             name <- restart$name
[13:18:32.205]                             if (is.null(name)) 
[13:18:32.205]                               next
[13:18:32.205]                             if (!grepl(pattern, name)) 
[13:18:32.205]                               next
[13:18:32.205]                             invokeRestart(restart)
[13:18:32.205]                             muffled <- TRUE
[13:18:32.205]                             break
[13:18:32.205]                           }
[13:18:32.205]                         }
[13:18:32.205]                       }
[13:18:32.205]                       invisible(muffled)
[13:18:32.205]                     }
[13:18:32.205]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.205]                   }
[13:18:32.205]                 }
[13:18:32.205]             }
[13:18:32.205]         }))
[13:18:32.205]     }, error = function(ex) {
[13:18:32.205]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:32.205]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.205]                 ...future.rng), started = ...future.startTime, 
[13:18:32.205]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:32.205]             version = "1.8"), class = "FutureResult")
[13:18:32.205]     }, finally = {
[13:18:32.205]         if (!identical(...future.workdir, getwd())) 
[13:18:32.205]             setwd(...future.workdir)
[13:18:32.205]         {
[13:18:32.205]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:32.205]                 ...future.oldOptions$nwarnings <- NULL
[13:18:32.205]             }
[13:18:32.205]             base::options(...future.oldOptions)
[13:18:32.205]             if (.Platform$OS.type == "windows") {
[13:18:32.205]                 old_names <- names(...future.oldEnvVars)
[13:18:32.205]                 envs <- base::Sys.getenv()
[13:18:32.205]                 names <- names(envs)
[13:18:32.205]                 common <- intersect(names, old_names)
[13:18:32.205]                 added <- setdiff(names, old_names)
[13:18:32.205]                 removed <- setdiff(old_names, names)
[13:18:32.205]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:32.205]                   envs[common]]
[13:18:32.205]                 NAMES <- toupper(changed)
[13:18:32.205]                 args <- list()
[13:18:32.205]                 for (kk in seq_along(NAMES)) {
[13:18:32.205]                   name <- changed[[kk]]
[13:18:32.205]                   NAME <- NAMES[[kk]]
[13:18:32.205]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.205]                     next
[13:18:32.205]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.205]                 }
[13:18:32.205]                 NAMES <- toupper(added)
[13:18:32.205]                 for (kk in seq_along(NAMES)) {
[13:18:32.205]                   name <- added[[kk]]
[13:18:32.205]                   NAME <- NAMES[[kk]]
[13:18:32.205]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.205]                     next
[13:18:32.205]                   args[[name]] <- ""
[13:18:32.205]                 }
[13:18:32.205]                 NAMES <- toupper(removed)
[13:18:32.205]                 for (kk in seq_along(NAMES)) {
[13:18:32.205]                   name <- removed[[kk]]
[13:18:32.205]                   NAME <- NAMES[[kk]]
[13:18:32.205]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.205]                     next
[13:18:32.205]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.205]                 }
[13:18:32.205]                 if (length(args) > 0) 
[13:18:32.205]                   base::do.call(base::Sys.setenv, args = args)
[13:18:32.205]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:32.205]             }
[13:18:32.205]             else {
[13:18:32.205]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:32.205]             }
[13:18:32.205]             {
[13:18:32.205]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:32.205]                   0L) {
[13:18:32.205]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:32.205]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:32.205]                   base::options(opts)
[13:18:32.205]                 }
[13:18:32.205]                 {
[13:18:32.205]                   {
[13:18:32.205]                     base::assign(".Random.seed", c(10403L, 10L, 
[13:18:32.205]                     1425853836L, 1426170575L, 1880694405L, 2042461500L, 
[13:18:32.205]                     -2075869166L, -1786188019L, -1073509305L, 
[13:18:32.205]                     -1246478802L, -221952120L, 237163147L, 822879337L, 
[13:18:32.205]                     -717420488L, -956432154L, 2015381633L, 308916243L, 
[13:18:32.205]                     1697544130L, 314118260L, 672982647L, -1930168467L, 
[13:18:32.205]                     126167044L, 2145059626L, 1294661781L, -1834408145L, 
[13:18:32.205]                     2030865974L, -1026844064L, -1995937629L, 
[13:18:32.205]                     2075773889L, -71596112L, 450605774L, -1039986631L, 
[13:18:32.205]                     -356596149L, 594365434L, -567478532L, 1559206719L, 
[13:18:32.205]                     1305777173L, -1603662036L, -656301054L, -1536522531L, 
[13:18:32.205]                     -831212073L, -1787854658L, -474402056L, 751638747L, 
[13:18:32.205]                     1944726329L, -1906041208L, -437253578L, 958579313L, 
[13:18:32.205]                     -1624409949L, -969371150L, 1459716420L, 412523015L, 
[13:18:32.205]                     217851869L, -8486700L, -990633990L, -1459415227L, 
[13:18:32.205]                     -1012968545L, 1104984358L, 915818928L, -815234477L, 
[13:18:32.205]                     -1687687823L, 1724071072L, 1261575230L, -2022288567L, 
[13:18:32.205]                     -115482117L, 1842005450L, 26774316L, -1094704337L, 
[13:18:32.205]                     -312862235L, 1553810588L, -1618104078L, 648087917L, 
[13:18:32.205]                     47408807L, -170473266L, 1455097384L, 1252396587L, 
[13:18:32.205]                     806847561L, -1039452840L, 1821322246L, 479415777L, 
[13:18:32.205]                     1859778419L, -1646406686L, -4080812L, 576329303L, 
[13:18:32.205]                     -680235443L, -1385119260L, -1836770358L, 
[13:18:32.205]                     -557228491L, -222452593L, 731057558L, 1241149760L, 
[13:18:32.205]                     944311299L, 60419617L, -1562158832L, 284645102L, 
[13:18:32.205]                     -525915495L, 1265550123L, 1257319962L, 968869084L, 
[13:18:32.205]                     1691506911L, 191739573L, -526159796L, -1817924446L, 
[13:18:32.205]                     317185021L, 1983752439L, -9933282L, 1167106264L, 
[13:18:32.205]                     538903611L, 703868377L, 714333032L, 482924182L, 
[13:18:32.205]                     -1621323759L, 1795174851L, -1040384558L, 
[13:18:32.205]                     -802409372L, 1452008359L, -1908945667L, 293415156L, 
[13:18:32.205]                     -1497301030L, 517853989L, 305513023L, -518182458L, 
[13:18:32.205]                     50544208L, 1100640883L, -1338767727L, -1590624576L, 
[13:18:32.205]                     -1761212258L, 242918505L, -1130852197L, 2135396778L, 
[13:18:32.205]                     -851531316L, -1321483121L, -69280571L, 1779928188L, 
[13:18:32.205]                     2134032594L, -1187504051L, -1041762041L, 
[13:18:32.205]                     -1926697746L, 2071348680L, 1795304139L, -12102871L, 
[13:18:32.205]                     1802662776L, -232134490L, 1044067009L, -1008516269L, 
[13:18:32.205]                     -1370763262L, -566477516L, 885814967L, 116263597L, 
[13:18:32.205]                     -1270166588L, 824923114L, 583031893L, -74268177L, 
[13:18:32.205]                     -921237002L, 1745211168L, 1718599907L, 719533441L, 
[13:18:32.205]                     218797040L, -7087474L, -884150791L, -1061580917L, 
[13:18:32.205]                     -449115206L, 496530108L, -946050561L, 1793439573L, 
[13:18:32.205]                     -554905492L, -1172503358L, 1922264861L, 23700887L, 
[13:18:32.205]                     -1518840578L, 1789935288L, -459431781L, -1543254279L, 
[13:18:32.205]                     1520648264L, -1117187210L, -36534607L, 663373539L, 
[13:18:32.205]                     -2073643598L, 2063638020L, -259812025L, -640249827L, 
[13:18:32.205]                     -1208191340L, 1741667898L, -258715515L, -1041164961L, 
[13:18:32.205]                     -2041528858L, 2065749104L, -1324021869L, 
[13:18:32.205]                     -796143567L, 1006083808L, 987977598L, -545141239L, 
[13:18:32.205]                     2106074683L, 2117236746L, 1057662956L, 63179887L, 
[13:18:32.205]                     -124591195L, 1551565660L, -512938190L, -787276243L, 
[13:18:32.205]                     965039335L, 1631376910L, 430394344L, 2060629483L, 
[13:18:32.205]                     -803348855L, 1135676952L, 306840902L, 1580528545L, 
[13:18:32.205]                     -661832141L, -4607070L, 898975380L, -2051128041L, 
[13:18:32.205]                     -1234468083L, -1862913500L, -91620854L, -1533901963L, 
[13:18:32.205]                     -1761065265L, -336705066L, -244144768L, 1641291203L, 
[13:18:32.205]                     -43795615L, -1643175472L, -1735083730L, 410616025L, 
[13:18:32.205]                     -799679765L, 951633754L, -992755428L, -1442920417L, 
[13:18:32.205]                     -105081739L, 1641229396L, -340868120L, 689724666L, 
[13:18:32.205]                     -1331658928L, -362645716L, 1863105908L, -2114322542L, 
[13:18:32.205]                     1845042272L, -310639220L, -2037222560L, 729142754L, 
[13:18:32.205]                     1514193832L, -1470609204L, -170716164L, 373080498L, 
[13:18:32.205]                     -51057168L, 1843331012L, -1945990824L, -128778886L, 
[13:18:32.205]                     -2113755216L, 461553084L, -50105260L, -916449342L, 
[13:18:32.205]                     -931067872L, -269156164L, 1406924368L, 498169826L, 
[13:18:32.205]                     1075599464L, 83720268L, 2094097660L, -1602213902L, 
[13:18:32.205]                     -1108353792L, -1382480524L, -1669414904L, 
[13:18:32.205]                     821142458L, 1798489552L, -1574387732L, 1476806036L, 
[13:18:32.205]                     -258932270L, 1887263072L, -2100978868L, -1159487200L, 
[13:18:32.205]                     721061762L, 1085701864L, -1570608916L, -1036892100L, 
[13:18:32.205]                     -1646284942L, 369970800L, 590801956L, -1882300616L, 
[13:18:32.205]                     246901914L, 1376965328L, -1277275972L, 304459412L, 
[13:18:32.205]                     -33673598L, -61038400L, 1842784060L, 1539838096L, 
[13:18:32.205]                     -2145604062L, -122115064L, 2071760140L, 1661283484L, 
[13:18:32.205]                     -1381027310L, -820120704L, 1408325140L, 468807208L, 
[13:18:32.205]                     -2022253254L, -1792930352L, -1424005012L, 
[13:18:32.205]                     -1734556364L, 1534945938L, 535629664L, 1107554124L, 
[13:18:32.205]                     -151107616L, 1199995810L, 1926257576L, 867170700L, 
[13:18:32.205]                     -399049540L, 1895407986L, 1586923760L, -1729398716L, 
[13:18:32.205]                     -1218140840L, -1640543686L, 1282232176L, 
[13:18:32.205]                     -1443025860L, 1976804116L, -1507768894L, 
[13:18:32.205]                     -1463423264L, 847801212L, -558779696L, 845647010L, 
[13:18:32.205]                     1842569256L, 618264844L, 1637665724L, 89267506L, 
[13:18:32.205]                     -806911552L, 1393056308L, -1696665656L, 1896504506L, 
[13:18:32.205]                     1334047120L, -905231892L, -439052716L, 2036520082L, 
[13:18:32.205]                     1129079584L, 1305125324L, -98347552L, 138266306L, 
[13:18:32.205]                     -1993881560L, 473265836L, 1243766972L, 1466555890L, 
[13:18:32.205]                     1995828528L, -595475292L, -490677576L, -119318182L, 
[13:18:32.205]                     -1056323184L, -1666218116L, -1428199148L, 
[13:18:32.205]                     1286774594L, 397913856L, 1421681596L, -1875102896L, 
[13:18:32.205]                     -1201004766L, 1818486088L, -143315444L, -321955748L, 
[13:18:32.205]                     -1125019438L, -1892758016L, -2127195820L, 
[13:18:32.205]                     1195867624L, -704873478L, -1469965104L, 1098815788L, 
[13:18:32.205]                     2105763572L, -1562247790L, 176316512L, 977122572L, 
[13:18:32.205]                     -1480107296L, -691847838L, -729029976L, -1124259252L, 
[13:18:32.205]                     -702777988L, -910632654L, 2077355120L, -1861170364L, 
[13:18:32.205]                     -936263208L, 413504634L, 1429497392L, 1645691580L, 
[13:18:32.205]                     -1097215148L, -641847230L, 1206905248L, 1477785276L, 
[13:18:32.205]                     -326648368L, 1233476962L, -516249624L, -28037172L, 
[13:18:32.205]                     1536287484L, -92621326L, 250956928L, 1716050164L, 
[13:18:32.205]                     932371080L, 21842746L, 7776080L, -158786964L, 
[13:18:32.205]                     -582829932L, 482607442L, 1180636896L, 281708236L, 
[13:18:32.205]                     1971488928L, -493992062L, -77158680L, -46453012L, 
[13:18:32.205]                     1212944444L, 487270002L, 1367127152L, 1947421220L, 
[13:18:32.205]                     21846072L, -517812198L, 740976336L, 482720828L, 
[13:18:32.205]                     582945940L, -362248062L, 196915136L, 24541500L, 
[13:18:32.205]                     597431952L, -1117224926L, -1194051576L, 3820684L, 
[13:18:32.205]                     1152504860L, 794798738L, -229379968L, 175723540L, 
[13:18:32.205]                     -1074181848L, -942405062L, -1439263536L, 
[13:18:32.205]                     -1512172436L, 284425908L, 2011629586L, -1740273696L, 
[13:18:32.205]                     1031082956L, -522949152L, -961748446L, -233505496L, 
[13:18:32.205]                     1902646540L, -1437036996L, -571866894L, 909053680L, 
[13:18:32.205]                     391892804L, 2055544408L, -1871578566L, 493838064L, 
[13:18:32.205]                     -2020822852L, 1361322516L, -1680792382L, 
[13:18:32.205]                     1157485664L, -754344580L, -1353596720L, -2050788318L, 
[13:18:32.205]                     361287336L, -590994548L, -1009566276L, -194761678L, 
[13:18:32.205]                     -573257920L, -290270028L, 59352904L, -1561003334L, 
[13:18:32.205]                     -1918131640L, -679775258L, -1324851949L, 
[13:18:32.205]                     -91205003L, 997113938L, 1211265696L, 895451017L, 
[13:18:32.205]                     809671611L, 681073676L, -1671280230L, -1305835249L, 
[13:18:32.205]                     1943664473L, 1023433198L, -1558576004L, -1014161171L, 
[13:18:32.205]                     -1744918633L, -205684640L, -161783234L, 385999627L, 
[13:18:32.205]                     -537224819L, -1683627334L, -1217795848L, 
[13:18:32.205]                     241735329L, -219419053L, 1832702324L, 2134607618L, 
[13:18:32.205]                     -1032573033L, 1346511201L, -48191066L, 2127915940L, 
[13:18:32.205]                     416765525L, -367634689L, 509721496L, -44450634L, 
[13:18:32.205]                     -481584829L, 118608005L, 1319266594L, 111827472L, 
[13:18:32.205]                     1164657081L, 889533035L, 841313628L, -611640182L, 
[13:18:32.205]                     -472271745L, 1796554185L, 70039134L, -1352846068L, 
[13:18:32.205]                     1275441373L, 1694694887L, -1720310256L, -436356306L, 
[13:18:32.205]                     -2054742053L, 789635261L, 1130891818L, 1479898824L, 
[13:18:32.205]                     639857649L, -330222237L, -708637340L, 1122414738L, 
[13:18:32.205]                     829171047L, -967721167L, -341609354L, 986566036L, 
[13:18:32.205]                     1324751269L, -1128549713L, -1000770712L, 
[13:18:32.205]                     673566534L, 1889253107L, -2140858283L, 161424434L, 
[13:18:32.205]                     -2036694528L, -508726551L, 39774555L, -1963981908L, 
[13:18:32.205]                     -255205446L, -82486929L, 616641273L, -583255154L, 
[13:18:32.205]                     -149207460L, -1391651635L, 299908151L, 534779584L, 
[13:18:32.205]                     -1361342050L, 263105131L, 1114534381L, 294748250L, 
[13:18:32.205]                     1519013656L, 1461933185L, -1802423757L, -1870770092L, 
[13:18:32.205]                     -1655139230L, -198034697L, 814654785L, -1319689274L, 
[13:18:32.205]                     1686585604L, -611598155L, -1652748385L, -950190088L, 
[13:18:32.205]                     -673713706L, -319797149L, 1663818789L, 699415490L, 
[13:18:32.205]                     -873606992L, -1825489703L, 527800907L, -1858062148L, 
[13:18:32.205]                     -1792303382L, -162435297L, -1337430103L, 
[13:18:32.205]                     -1806276290L, 273526828L, -1479524739L, 25075911L, 
[13:18:32.205]                     519081392L, -823719986L, 1581956347L, -99701923L, 
[13:18:32.205]                     1109176458L, -722551128L, -1205837295L, 2142966531L, 
[13:18:32.205]                     -1099684348L, -1384106446L, 1616569991L, 
[13:18:32.205]                     858483409L, 629365846L, -509127628L, 1956779845L, 
[13:18:32.205]                     -267600497L, 1514073352L, 1572310822L, 1323315155L, 
[13:18:32.205]                     -147832523L, -1175914350L, 867334240L, 27151817L, 
[13:18:32.205]                     1448396027L, -2115130676L, -1336996006L, 
[13:18:32.205]                     1435146831L, -121495783L, 1395046702L, -1782723780L, 
[13:18:32.205]                     1306456237L, 860394327L, 631158432L, -760733698L, 
[13:18:32.205]                     -1173752117L, 556726477L, -914433030L, -1910683592L, 
[13:18:32.205]                     825651681L, 636410515L, -1126231884L, -1043037758L, 
[13:18:32.205]                     -1857295913L, -552610271L, 503369190L, 1770751204L, 
[13:18:32.205]                     1058602005L, 662486079L, -902949928L, 371901942L, 
[13:18:32.205]                     -506632701L, 539427141L, 1130866018L, -275024176L, 
[13:18:32.205]                     -1813310983L, 1728770347L, -6759780L, 1610411622L
[13:18:32.205]                     ), envir = base::globalenv(), inherits = FALSE)
[13:18:32.205]                     NULL
[13:18:32.205]                   }
[13:18:32.205]                   options(future.plan = NULL)
[13:18:32.205]                   if (is.na(NA_character_)) 
[13:18:32.205]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.205]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:32.205]                   future::plan(list(function (..., envir = parent.frame()) 
[13:18:32.205]                   {
[13:18:32.205]                     future <- SequentialFuture(..., envir = envir)
[13:18:32.205]                     if (!future$lazy) 
[13:18:32.205]                       future <- run(future)
[13:18:32.205]                     invisible(future)
[13:18:32.205]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:32.205]                 }
[13:18:32.205]             }
[13:18:32.205]         }
[13:18:32.205]     })
[13:18:32.205]     if (TRUE) {
[13:18:32.205]         base::sink(type = "output", split = FALSE)
[13:18:32.205]         if (TRUE) {
[13:18:32.205]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:32.205]         }
[13:18:32.205]         else {
[13:18:32.205]             ...future.result["stdout"] <- base::list(NULL)
[13:18:32.205]         }
[13:18:32.205]         base::close(...future.stdout)
[13:18:32.205]         ...future.stdout <- NULL
[13:18:32.205]     }
[13:18:32.205]     ...future.result$conditions <- ...future.conditions
[13:18:32.205]     ...future.result$finished <- base::Sys.time()
[13:18:32.205]     ...future.result
[13:18:32.205] }
[13:18:32.208] assign_globals() ...
[13:18:32.208] List of 5
[13:18:32.208]  $ ...future.FUN            :function (...)  
[13:18:32.208]  $ future.call.arguments    : list()
[13:18:32.208]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.208]  $ ...future.elements_ii    :List of 5
[13:18:32.208]   ..$ : int 0
[13:18:32.208]   ..$ : int 0
[13:18:32.208]   ..$ : int 0
[13:18:32.208]   ..$ : int 0
[13:18:32.208]   ..$ : int 0
[13:18:32.208]  $ ...future.seeds_ii       :List of 5
[13:18:32.208]   ..$ : int [1:7] 10407 582146144 -346342982 -1272740430 -1384026821 -8600429 -1038151669
[13:18:32.208]   ..$ : int [1:7] 10407 219321191 710090036 -175855800 1999499120 -308515074 2111143798
[13:18:32.208]   ..$ : int [1:7] 10407 483887777 99817473 -1161473669 -567938131 1892465613 -1795723239
[13:18:32.208]   ..$ : int [1:7] 10407 531221878 1881483603 1555239310 897866123 305326547 572804973
[13:18:32.208]   ..$ : int [1:7] 10407 1365142130 -83992496 -96224506 1019975989 107189228 -1099125441
[13:18:32.208]  $ ...future.globals.maxSize: NULL
[13:18:32.208]  - attr(*, "resolved")= logi FALSE
[13:18:32.208]  - attr(*, "total_size")= num 616
[13:18:32.208]  - attr(*, "where")=List of 5
[13:18:32.208]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:18:32.208]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:18:32.208]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:18:32.208]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:18:32.208]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:18:32.208]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.208]  - attr(*, "already-done")= logi TRUE
[13:18:32.216] - reassign environment for ‘...future.FUN’
[13:18:32.216] - copied ‘...future.FUN’ to environment
[13:18:32.216] - copied ‘future.call.arguments’ to environment
[13:18:32.216] - copied ‘...future.elements_ii’ to environment
[13:18:32.216] - copied ‘...future.seeds_ii’ to environment
[13:18:32.216] - copied ‘...future.globals.maxSize’ to environment
[13:18:32.216] assign_globals() ... done
[13:18:32.217] plan(): Setting new future strategy stack:
[13:18:32.217] List of future strategies:
[13:18:32.217] 1. sequential:
[13:18:32.217]    - args: function (..., envir = parent.frame())
[13:18:32.217]    - tweaked: FALSE
[13:18:32.217]    - call: NULL
[13:18:32.217] plan(): nbrOfWorkers() = 1
[13:18:32.218] plan(): Setting new future strategy stack:
[13:18:32.218] List of future strategies:
[13:18:32.218] 1. sequential:
[13:18:32.218]    - args: function (..., envir = parent.frame())
[13:18:32.218]    - tweaked: FALSE
[13:18:32.218]    - call: plan(strategy)
[13:18:32.219] plan(): nbrOfWorkers() = 1
[13:18:32.219] SequentialFuture started (and completed)
[13:18:32.219] - Launch lazy future ... done
[13:18:32.219] run() for ‘SequentialFuture’ ... done
[13:18:32.220] Created future:
[13:18:32.220] SequentialFuture:
[13:18:32.220] Label: ‘future_replicate-1’
[13:18:32.220] Expression:
[13:18:32.220] {
[13:18:32.220]     do.call(function(...) {
[13:18:32.220]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.220]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.220]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.220]             on.exit(options(oopts), add = TRUE)
[13:18:32.220]         }
[13:18:32.220]         {
[13:18:32.220]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.220]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.220]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.220]                   envir = globalenv(), inherits = FALSE)
[13:18:32.220]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.220]             })
[13:18:32.220]         }
[13:18:32.220]     }, args = future.call.arguments)
[13:18:32.220] }
[13:18:32.220] Lazy evaluation: FALSE
[13:18:32.220] Asynchronous evaluation: FALSE
[13:18:32.220] Local evaluation: TRUE
[13:18:32.220] Environment: R_GlobalEnv
[13:18:32.220] Capture standard output: TRUE
[13:18:32.220] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:32.220] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:32.220] Packages: <none>
[13:18:32.220] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:32.220] Resolved: TRUE
[13:18:32.220] Value: 280 bytes of class ‘list’
[13:18:32.220] Early signaling: FALSE
[13:18:32.220] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:32.220] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:18:32.223] Chunk #1 of 1 ... DONE
[13:18:32.224] Launching 1 futures (chunks) ... DONE
[13:18:32.224] Resolving 1 futures (chunks) ...
[13:18:32.224] resolve() on list ...
[13:18:32.224]  recursive: 0
[13:18:32.224]  length: 1
[13:18:32.224] 
[13:18:32.224] resolved() for ‘SequentialFuture’ ...
[13:18:32.224] - state: ‘finished’
[13:18:32.224] - run: TRUE
[13:18:32.225] - result: ‘FutureResult’
[13:18:32.225] resolved() for ‘SequentialFuture’ ... done
[13:18:32.225] Future #1
[13:18:32.225] signalConditionsASAP(SequentialFuture, pos=1) ...
[13:18:32.225] - nx: 1
[13:18:32.225] - relay: TRUE
[13:18:32.225] - stdout: TRUE
[13:18:32.226] - signal: TRUE
[13:18:32.226] - resignal: FALSE
[13:18:32.226] - force: TRUE
[13:18:32.226] - relayed: [n=1] FALSE
[13:18:32.226] - queued futures: [n=1] FALSE
[13:18:32.226]  - until=1
[13:18:32.226]  - relaying element #1
[13:18:32.226] - relayed: [n=1] TRUE
[13:18:32.226] - queued futures: [n=1] TRUE
[13:18:32.226] signalConditionsASAP(SequentialFuture, pos=1) ... done
[13:18:32.227]  length: 0 (resolved future 1)
[13:18:32.227] Relaying remaining futures
[13:18:32.227] signalConditionsASAP(NULL, pos=0) ...
[13:18:32.227] - nx: 1
[13:18:32.227] - relay: TRUE
[13:18:32.227] - stdout: TRUE
[13:18:32.227] - signal: TRUE
[13:18:32.227] - resignal: FALSE
[13:18:32.227] - force: TRUE
[13:18:32.227] - relayed: [n=1] TRUE
[13:18:32.228] - queued futures: [n=1] TRUE
 - flush all
[13:18:32.228] - relayed: [n=1] TRUE
[13:18:32.228] - queued futures: [n=1] TRUE
[13:18:32.228] signalConditionsASAP(NULL, pos=0) ... done
[13:18:32.228] resolve() on list ... DONE
[13:18:32.228]  - Number of value chunks collected: 1
[13:18:32.228] Resolving 1 futures (chunks) ... DONE
[13:18:32.228] Reducing values from 1 chunks ...
[13:18:32.228]  - Number of values collected after concatenation: 5
[13:18:32.228]  - Number of values expected: 5
[13:18:32.229] Reducing values from 1 chunks ... DONE
[13:18:32.229] future_lapply() ... DONE
[13:18:32.229] future_lapply() ...
[13:18:32.229] Generating random seeds ...
[13:18:32.229] Generating random seed streams for 5 elements ...
[13:18:32.230] Generating random seed streams for 5 elements ... DONE
[13:18:32.230] Generating random seeds ... DONE
[13:18:32.230] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:18:32.230] Number of chunks: 1
[13:18:32.230] getGlobalsAndPackagesXApply() ...
[13:18:32.231]  - future.globals: TRUE
[13:18:32.231] getGlobalsAndPackages() ...
[13:18:32.231] Searching for globals...
[13:18:32.232] - globals found: [2] ‘FUN’, ‘sample’
[13:18:32.232] Searching for globals ... DONE
[13:18:32.232] Resolving globals: FALSE
[13:18:32.232] The total size of the 1 globals is 616 bytes (616 bytes)
[13:18:32.233] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:18:32.233] - globals: [1] ‘FUN’
[13:18:32.233] 
[13:18:32.233] getGlobalsAndPackages() ... DONE
[13:18:32.233]  - globals found/used: [n=1] ‘FUN’
[13:18:32.233]  - needed namespaces: [n=0] 
[13:18:32.233] Finding globals ... DONE
[13:18:32.233]  - use_args: TRUE
[13:18:32.233]  - Getting '...' globals ...
[13:18:32.234] resolve() on list ...
[13:18:32.234]  recursive: 0
[13:18:32.234]  length: 1
[13:18:32.234]  elements: ‘...’
[13:18:32.234]  length: 0 (resolved future 1)
[13:18:32.234] resolve() on list ... DONE
[13:18:32.234]    - '...' content: [n=0] 
[13:18:32.234] List of 1
[13:18:32.234]  $ ...: list()
[13:18:32.234]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.234]  - attr(*, "where")=List of 1
[13:18:32.234]   ..$ ...:<environment: 0x55df1bfc72d8> 
[13:18:32.234]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.234]  - attr(*, "resolved")= logi TRUE
[13:18:32.234]  - attr(*, "total_size")= num NA
[13:18:32.237]  - Getting '...' globals ... DONE
[13:18:32.237] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:18:32.237] List of 2
[13:18:32.237]  $ ...future.FUN:function (...)  
[13:18:32.237]  $ ...          : list()
[13:18:32.237]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.237]  - attr(*, "where")=List of 2
[13:18:32.237]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:18:32.237]   ..$ ...          :<environment: 0x55df1bfc72d8> 
[13:18:32.237]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.237]  - attr(*, "resolved")= logi FALSE
[13:18:32.237]  - attr(*, "total_size")= num 616
[13:18:32.240] Packages to be attached in all futures: [n=0] 
[13:18:32.240] getGlobalsAndPackagesXApply() ... DONE
[13:18:32.240] Number of futures (= number of chunks): 1
[13:18:32.240] Launching 1 futures (chunks) ...
[13:18:32.240] Chunk #1 of 1 ...
[13:18:32.240]  - Finding globals in 'X' for chunk #1 ...
[13:18:32.240] getGlobalsAndPackages() ...
[13:18:32.240] Searching for globals...
[13:18:32.241] 
[13:18:32.241] Searching for globals ... DONE
[13:18:32.241] - globals: [0] <none>
[13:18:32.241] getGlobalsAndPackages() ... DONE
[13:18:32.241]    + additional globals found: [n=0] 
[13:18:32.241]    + additional namespaces needed: [n=0] 
[13:18:32.241]  - Finding globals in 'X' for chunk #1 ... DONE
[13:18:32.241]  - Adjusted option 'future.globals.maxSize': 524288000 -> 5 * 524288000 = 2621440000 (bytes)
[13:18:32.241]  - seeds: [5] <seeds>
[13:18:32.242] getGlobalsAndPackages() ...
[13:18:32.242] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.242] Resolving globals: FALSE
[13:18:32.242] Tweak future expression to call with '...' arguments ...
[13:18:32.242] {
[13:18:32.242]     do.call(function(...) {
[13:18:32.242]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.242]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.242]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.242]             on.exit(options(oopts), add = TRUE)
[13:18:32.242]         }
[13:18:32.242]         {
[13:18:32.242]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.242]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.242]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.242]                   envir = globalenv(), inherits = FALSE)
[13:18:32.242]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.242]             })
[13:18:32.242]         }
[13:18:32.242]     }, args = future.call.arguments)
[13:18:32.242] }
[13:18:32.242] Tweak future expression to call with '...' arguments ... DONE
[13:18:32.243] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.243] 
[13:18:32.243] getGlobalsAndPackages() ... DONE
[13:18:32.243] run() for ‘Future’ ...
[13:18:32.243] - state: ‘created’
[13:18:32.243] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:18:32.244] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:18:32.244] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:18:32.244]   - Field: ‘label’
[13:18:32.244]   - Field: ‘local’
[13:18:32.244]   - Field: ‘owner’
[13:18:32.244]   - Field: ‘envir’
[13:18:32.244]   - Field: ‘packages’
[13:18:32.244]   - Field: ‘gc’
[13:18:32.244]   - Field: ‘conditions’
[13:18:32.244]   - Field: ‘expr’
[13:18:32.244]   - Field: ‘uuid’
[13:18:32.245]   - Field: ‘seed’
[13:18:32.245]   - Field: ‘version’
[13:18:32.245]   - Field: ‘result’
[13:18:32.245]   - Field: ‘asynchronous’
[13:18:32.245]   - Field: ‘calls’
[13:18:32.245]   - Field: ‘globals’
[13:18:32.245]   - Field: ‘stdout’
[13:18:32.245]   - Field: ‘earlySignal’
[13:18:32.245]   - Field: ‘lazy’
[13:18:32.245]   - Field: ‘state’
[13:18:32.245] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:18:32.246] - Launch lazy future ...
[13:18:32.246] Packages needed by the future expression (n = 0): <none>
[13:18:32.246] Packages needed by future strategies (n = 0): <none>
[13:18:32.248] {
[13:18:32.248]     {
[13:18:32.248]         {
[13:18:32.248]             ...future.startTime <- base::Sys.time()
[13:18:32.248]             {
[13:18:32.248]                 {
[13:18:32.248]                   {
[13:18:32.248]                     base::local({
[13:18:32.248]                       has_future <- base::requireNamespace("future", 
[13:18:32.248]                         quietly = TRUE)
[13:18:32.248]                       if (has_future) {
[13:18:32.248]                         ns <- base::getNamespace("future")
[13:18:32.248]                         version <- ns[[".package"]][["version"]]
[13:18:32.248]                         if (is.null(version)) 
[13:18:32.248]                           version <- utils::packageVersion("future")
[13:18:32.248]                       }
[13:18:32.248]                       else {
[13:18:32.248]                         version <- NULL
[13:18:32.248]                       }
[13:18:32.248]                       if (!has_future || version < "1.8.0") {
[13:18:32.248]                         info <- base::c(r_version = base::gsub("R version ", 
[13:18:32.248]                           "", base::R.version$version.string), 
[13:18:32.248]                           platform = base::sprintf("%s (%s-bit)", 
[13:18:32.248]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:32.248]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:32.248]                             "release", "version")], collapse = " "), 
[13:18:32.248]                           hostname = base::Sys.info()[["nodename"]])
[13:18:32.248]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:18:32.248]                           info)
[13:18:32.248]                         info <- base::paste(info, collapse = "; ")
[13:18:32.248]                         if (!has_future) {
[13:18:32.248]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:32.248]                             info)
[13:18:32.248]                         }
[13:18:32.248]                         else {
[13:18:32.248]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:32.248]                             info, version)
[13:18:32.248]                         }
[13:18:32.248]                         base::stop(msg)
[13:18:32.248]                       }
[13:18:32.248]                     })
[13:18:32.248]                   }
[13:18:32.248]                   options(future.plan = NULL)
[13:18:32.248]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.248]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:32.248]                 }
[13:18:32.248]                 ...future.workdir <- getwd()
[13:18:32.248]             }
[13:18:32.248]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:32.248]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:32.248]         }
[13:18:32.248]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:32.248]             future.globals.maxSize = 2621440000, future.globals.method = NULL, 
[13:18:32.248]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:32.248]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:32.248]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:32.248]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:32.248]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:32.248]             base::names(...future.oldOptions))
[13:18:32.248]     }
[13:18:32.248]     if (FALSE) {
[13:18:32.248]     }
[13:18:32.248]     else {
[13:18:32.248]         if (TRUE) {
[13:18:32.248]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:32.248]                 open = "w")
[13:18:32.248]         }
[13:18:32.248]         else {
[13:18:32.248]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:32.248]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:32.248]         }
[13:18:32.248]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:32.248]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:32.248]             base::sink(type = "output", split = FALSE)
[13:18:32.248]             base::close(...future.stdout)
[13:18:32.248]         }, add = TRUE)
[13:18:32.248]     }
[13:18:32.248]     ...future.frame <- base::sys.nframe()
[13:18:32.248]     ...future.conditions <- base::list()
[13:18:32.248]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:32.248]     if (FALSE) {
[13:18:32.248]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:32.248]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:32.248]     }
[13:18:32.248]     ...future.result <- base::tryCatch({
[13:18:32.248]         base::withCallingHandlers({
[13:18:32.248]             ...future.value <- base::withVisible(base::local({
[13:18:32.248]                 do.call(function(...) {
[13:18:32.248]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.248]                   if (!identical(...future.globals.maxSize.org, 
[13:18:32.248]                     ...future.globals.maxSize)) {
[13:18:32.248]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.248]                     on.exit(options(oopts), add = TRUE)
[13:18:32.248]                   }
[13:18:32.248]                   {
[13:18:32.248]                     lapply(seq_along(...future.elements_ii), 
[13:18:32.248]                       FUN = function(jj) {
[13:18:32.248]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.248]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.248]                           envir = globalenv(), inherits = FALSE)
[13:18:32.248]                         ...future.FUN(...future.X_jj, ...)
[13:18:32.248]                       })
[13:18:32.248]                   }
[13:18:32.248]                 }, args = future.call.arguments)
[13:18:32.248]             }))
[13:18:32.248]             future::FutureResult(value = ...future.value$value, 
[13:18:32.248]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.248]                   ...future.rng), globalenv = if (FALSE) 
[13:18:32.248]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:32.248]                     ...future.globalenv.names))
[13:18:32.248]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:32.248]         }, condition = base::local({
[13:18:32.248]             c <- base::c
[13:18:32.248]             inherits <- base::inherits
[13:18:32.248]             invokeRestart <- base::invokeRestart
[13:18:32.248]             length <- base::length
[13:18:32.248]             list <- base::list
[13:18:32.248]             seq.int <- base::seq.int
[13:18:32.248]             signalCondition <- base::signalCondition
[13:18:32.248]             sys.calls <- base::sys.calls
[13:18:32.248]             `[[` <- base::`[[`
[13:18:32.248]             `+` <- base::`+`
[13:18:32.248]             `<<-` <- base::`<<-`
[13:18:32.248]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:32.248]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:32.248]                   3L)]
[13:18:32.248]             }
[13:18:32.248]             function(cond) {
[13:18:32.248]                 is_error <- inherits(cond, "error")
[13:18:32.248]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:32.248]                   NULL)
[13:18:32.248]                 if (is_error) {
[13:18:32.248]                   sessionInformation <- function() {
[13:18:32.248]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:32.248]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:32.248]                       search = base::search(), system = base::Sys.info())
[13:18:32.248]                   }
[13:18:32.248]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.248]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:32.248]                     cond$call), session = sessionInformation(), 
[13:18:32.248]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:32.248]                   signalCondition(cond)
[13:18:32.248]                 }
[13:18:32.248]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:32.248]                 "immediateCondition"))) {
[13:18:32.248]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:32.248]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.248]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:32.248]                   if (TRUE && !signal) {
[13:18:32.248]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.248]                     {
[13:18:32.248]                       inherits <- base::inherits
[13:18:32.248]                       invokeRestart <- base::invokeRestart
[13:18:32.248]                       is.null <- base::is.null
[13:18:32.248]                       muffled <- FALSE
[13:18:32.248]                       if (inherits(cond, "message")) {
[13:18:32.248]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.248]                         if (muffled) 
[13:18:32.248]                           invokeRestart("muffleMessage")
[13:18:32.248]                       }
[13:18:32.248]                       else if (inherits(cond, "warning")) {
[13:18:32.248]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.248]                         if (muffled) 
[13:18:32.248]                           invokeRestart("muffleWarning")
[13:18:32.248]                       }
[13:18:32.248]                       else if (inherits(cond, "condition")) {
[13:18:32.248]                         if (!is.null(pattern)) {
[13:18:32.248]                           computeRestarts <- base::computeRestarts
[13:18:32.248]                           grepl <- base::grepl
[13:18:32.248]                           restarts <- computeRestarts(cond)
[13:18:32.248]                           for (restart in restarts) {
[13:18:32.248]                             name <- restart$name
[13:18:32.248]                             if (is.null(name)) 
[13:18:32.248]                               next
[13:18:32.248]                             if (!grepl(pattern, name)) 
[13:18:32.248]                               next
[13:18:32.248]                             invokeRestart(restart)
[13:18:32.248]                             muffled <- TRUE
[13:18:32.248]                             break
[13:18:32.248]                           }
[13:18:32.248]                         }
[13:18:32.248]                       }
[13:18:32.248]                       invisible(muffled)
[13:18:32.248]                     }
[13:18:32.248]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.248]                   }
[13:18:32.248]                 }
[13:18:32.248]                 else {
[13:18:32.248]                   if (TRUE) {
[13:18:32.248]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.248]                     {
[13:18:32.248]                       inherits <- base::inherits
[13:18:32.248]                       invokeRestart <- base::invokeRestart
[13:18:32.248]                       is.null <- base::is.null
[13:18:32.248]                       muffled <- FALSE
[13:18:32.248]                       if (inherits(cond, "message")) {
[13:18:32.248]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.248]                         if (muffled) 
[13:18:32.248]                           invokeRestart("muffleMessage")
[13:18:32.248]                       }
[13:18:32.248]                       else if (inherits(cond, "warning")) {
[13:18:32.248]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.248]                         if (muffled) 
[13:18:32.248]                           invokeRestart("muffleWarning")
[13:18:32.248]                       }
[13:18:32.248]                       else if (inherits(cond, "condition")) {
[13:18:32.248]                         if (!is.null(pattern)) {
[13:18:32.248]                           computeRestarts <- base::computeRestarts
[13:18:32.248]                           grepl <- base::grepl
[13:18:32.248]                           restarts <- computeRestarts(cond)
[13:18:32.248]                           for (restart in restarts) {
[13:18:32.248]                             name <- restart$name
[13:18:32.248]                             if (is.null(name)) 
[13:18:32.248]                               next
[13:18:32.248]                             if (!grepl(pattern, name)) 
[13:18:32.248]                               next
[13:18:32.248]                             invokeRestart(restart)
[13:18:32.248]                             muffled <- TRUE
[13:18:32.248]                             break
[13:18:32.248]                           }
[13:18:32.248]                         }
[13:18:32.248]                       }
[13:18:32.248]                       invisible(muffled)
[13:18:32.248]                     }
[13:18:32.248]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.248]                   }
[13:18:32.248]                 }
[13:18:32.248]             }
[13:18:32.248]         }))
[13:18:32.248]     }, error = function(ex) {
[13:18:32.248]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:32.248]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.248]                 ...future.rng), started = ...future.startTime, 
[13:18:32.248]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:32.248]             version = "1.8"), class = "FutureResult")
[13:18:32.248]     }, finally = {
[13:18:32.248]         if (!identical(...future.workdir, getwd())) 
[13:18:32.248]             setwd(...future.workdir)
[13:18:32.248]         {
[13:18:32.248]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:32.248]                 ...future.oldOptions$nwarnings <- NULL
[13:18:32.248]             }
[13:18:32.248]             base::options(...future.oldOptions)
[13:18:32.248]             if (.Platform$OS.type == "windows") {
[13:18:32.248]                 old_names <- names(...future.oldEnvVars)
[13:18:32.248]                 envs <- base::Sys.getenv()
[13:18:32.248]                 names <- names(envs)
[13:18:32.248]                 common <- intersect(names, old_names)
[13:18:32.248]                 added <- setdiff(names, old_names)
[13:18:32.248]                 removed <- setdiff(old_names, names)
[13:18:32.248]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:32.248]                   envs[common]]
[13:18:32.248]                 NAMES <- toupper(changed)
[13:18:32.248]                 args <- list()
[13:18:32.248]                 for (kk in seq_along(NAMES)) {
[13:18:32.248]                   name <- changed[[kk]]
[13:18:32.248]                   NAME <- NAMES[[kk]]
[13:18:32.248]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.248]                     next
[13:18:32.248]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.248]                 }
[13:18:32.248]                 NAMES <- toupper(added)
[13:18:32.248]                 for (kk in seq_along(NAMES)) {
[13:18:32.248]                   name <- added[[kk]]
[13:18:32.248]                   NAME <- NAMES[[kk]]
[13:18:32.248]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.248]                     next
[13:18:32.248]                   args[[name]] <- ""
[13:18:32.248]                 }
[13:18:32.248]                 NAMES <- toupper(removed)
[13:18:32.248]                 for (kk in seq_along(NAMES)) {
[13:18:32.248]                   name <- removed[[kk]]
[13:18:32.248]                   NAME <- NAMES[[kk]]
[13:18:32.248]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.248]                     next
[13:18:32.248]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.248]                 }
[13:18:32.248]                 if (length(args) > 0) 
[13:18:32.248]                   base::do.call(base::Sys.setenv, args = args)
[13:18:32.248]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:32.248]             }
[13:18:32.248]             else {
[13:18:32.248]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:32.248]             }
[13:18:32.248]             {
[13:18:32.248]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:32.248]                   0L) {
[13:18:32.248]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:32.248]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:32.248]                   base::options(opts)
[13:18:32.248]                 }
[13:18:32.248]                 {
[13:18:32.248]                   {
[13:18:32.248]                     base::assign(".Random.seed", c(10403L, 2L, 
[13:18:32.248]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[13:18:32.248]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[13:18:32.248]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[13:18:32.248]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[13:18:32.248]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[13:18:32.248]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[13:18:32.248]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[13:18:32.248]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[13:18:32.248]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[13:18:32.248]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[13:18:32.248]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[13:18:32.248]                     -1512233174L, -1985955764L, -425390065L, 
[13:18:32.248]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[13:18:32.248]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[13:18:32.248]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[13:18:32.248]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[13:18:32.248]                     1818328109L, -1284085436L, -1981489558L, 
[13:18:32.248]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[13:18:32.248]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[13:18:32.248]                     -1718567047L, -793788661L, -1133789126L, 
[13:18:32.248]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[13:18:32.248]                     -1823521982L, -1345991523L, -1672661737L, 
[13:18:32.248]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[13:18:32.248]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[13:18:32.248]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[13:18:32.248]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[13:18:32.248]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[13:18:32.248]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[13:18:32.248]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[13:18:32.248]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[13:18:32.248]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[13:18:32.248]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[13:18:32.248]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[13:18:32.248]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[13:18:32.248]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[13:18:32.248]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[13:18:32.248]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[13:18:32.248]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[13:18:32.248]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[13:18:32.248]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[13:18:32.248]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[13:18:32.248]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[13:18:32.248]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[13:18:32.248]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[13:18:32.248]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[13:18:32.248]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[13:18:32.248]                     -1119334354L, -1521015416L, -2041922421L, 
[13:18:32.248]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[13:18:32.248]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[13:18:32.248]                     1232111981L, -1801753084L, -1608606422L, 
[13:18:32.248]                     -1172096363L, 1420874031L, -1210473418L, 
[13:18:32.248]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[13:18:32.248]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[13:18:32.248]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[13:18:32.248]                     679371266L, -591318819L, -104578089L, -172818754L, 
[13:18:32.248]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[13:18:32.248]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[13:18:32.248]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[13:18:32.248]                     -332493318L, -1978392251L, -1691039632L, 
[13:18:32.248]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[13:18:32.248]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[13:18:32.248]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[13:18:32.248]                     87560756L, -87565624L, 426345146L, -699970416L, 
[13:18:32.248]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[13:18:32.248]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[13:18:32.248]                     -1178330196L, -687617348L, -1701912078L, 
[13:18:32.248]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[13:18:32.248]                     -1345416048L, 1816730492L, -1570431212L, 
[13:18:32.248]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[13:18:32.248]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[13:18:32.248]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[13:18:32.248]                     -1493184262L, -1943836976L, -590788308L, 
[13:18:32.248]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[13:18:32.248]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[13:18:32.248]                     1274857340L, -1205842638L, -1938479504L, 
[13:18:32.248]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[13:18:32.248]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[13:18:32.248]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[13:18:32.248]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[13:18:32.248]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[13:18:32.248]                     -1460751252L, 1201879444L, -1459788718L, 
[13:18:32.248]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[13:18:32.248]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[13:18:32.248]                     -420945808L, -1997735900L, -1838404552L, 
[13:18:32.248]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[13:18:32.248]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[13:18:32.248]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[13:18:32.248]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[13:18:32.248]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[13:18:32.248]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[13:18:32.248]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[13:18:32.248]                     942193650L, 751741680L, 689743428L, -18455976L, 
[13:18:32.248]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[13:18:32.248]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[13:18:32.248]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[13:18:32.248]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[13:18:32.248]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[13:18:32.248]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[13:18:32.248]                     -1357570110L, 1896595240L, -2066952276L, 
[13:18:32.248]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[13:18:32.248]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[13:18:32.248]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[13:18:32.248]                     769655120L, 236357794L, 181393736L, -13334772L, 
[13:18:32.248]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[13:18:32.248]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[13:18:32.248]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[13:18:32.248]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[13:18:32.248]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[13:18:32.248]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[13:18:32.248]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[13:18:32.248]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[13:18:32.248]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[13:18:32.248]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[13:18:32.248]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[13:18:32.248]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[13:18:32.248]                     -1365842884L, -438961294L, -1851472272L, 
[13:18:32.248]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[13:18:32.248]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[13:18:32.248]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[13:18:32.248]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[13:18:32.248]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[13:18:32.248]                     -594809770L, -2146766621L, -2013964635L, 
[13:18:32.248]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[13:18:32.248]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[13:18:32.248]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[13:18:32.248]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[13:18:32.248]                     -1426021878L, -1285634264L, 1507547537L, 
[13:18:32.248]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[13:18:32.248]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[13:18:32.248]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[13:18:32.248]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[13:18:32.248]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[13:18:32.248]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[13:18:32.248]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[13:18:32.248]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[13:18:32.248]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[13:18:32.248]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[13:18:32.248]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[13:18:32.248]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[13:18:32.248]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[13:18:32.248]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[13:18:32.248]                     -1604604761L, 1421229008L, -1268333714L, 
[13:18:32.248]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[13:18:32.248]                     -2070476623L, -2099222749L, 1141171236L, 
[13:18:32.248]                     -146426158L, -1797385433L, -1129376399L, 
[13:18:32.248]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[13:18:32.248]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[13:18:32.248]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[13:18:32.248]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[13:18:32.248]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[13:18:32.248]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[13:18:32.248]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[13:18:32.248]                     -1092079724L, -1765622238L, -1882554057L, 
[13:18:32.248]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[13:18:32.248]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[13:18:32.248]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[13:18:32.248]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[13:18:32.248]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[13:18:32.248]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[13:18:32.248]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[13:18:32.248]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[13:18:32.248]                     865377681L, -1127426242L), envir = base::globalenv(), 
[13:18:32.248]                       inherits = FALSE)
[13:18:32.248]                     NULL
[13:18:32.248]                   }
[13:18:32.248]                   options(future.plan = NULL)
[13:18:32.248]                   if (is.na(NA_character_)) 
[13:18:32.248]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.248]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:32.248]                   future::plan(list(function (..., envir = parent.frame()) 
[13:18:32.248]                   {
[13:18:32.248]                     future <- SequentialFuture(..., envir = envir)
[13:18:32.248]                     if (!future$lazy) 
[13:18:32.248]                       future <- run(future)
[13:18:32.248]                     invisible(future)
[13:18:32.248]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:32.248]                 }
[13:18:32.248]             }
[13:18:32.248]         }
[13:18:32.248]     })
[13:18:32.248]     if (TRUE) {
[13:18:32.248]         base::sink(type = "output", split = FALSE)
[13:18:32.248]         if (TRUE) {
[13:18:32.248]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:32.248]         }
[13:18:32.248]         else {
[13:18:32.248]             ...future.result["stdout"] <- base::list(NULL)
[13:18:32.248]         }
[13:18:32.248]         base::close(...future.stdout)
[13:18:32.248]         ...future.stdout <- NULL
[13:18:32.248]     }
[13:18:32.248]     ...future.result$conditions <- ...future.conditions
[13:18:32.248]     ...future.result$finished <- base::Sys.time()
[13:18:32.248]     ...future.result
[13:18:32.248] }
[13:18:32.251] assign_globals() ...
[13:18:32.251] List of 5
[13:18:32.251]  $ ...future.FUN            :function (...)  
[13:18:32.251]  $ future.call.arguments    : list()
[13:18:32.251]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.251]  $ ...future.elements_ii    :List of 5
[13:18:32.251]   ..$ : int 0
[13:18:32.251]   ..$ : int 0
[13:18:32.251]   ..$ : int 0
[13:18:32.251]   ..$ : int 0
[13:18:32.251]   ..$ : int 0
[13:18:32.251]  $ ...future.seeds_ii       :List of 5
[13:18:32.251]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[13:18:32.251]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[13:18:32.251]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[13:18:32.251]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[13:18:32.251]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[13:18:32.251]  $ ...future.globals.maxSize: NULL
[13:18:32.251]  - attr(*, "resolved")= logi FALSE
[13:18:32.251]  - attr(*, "total_size")= num 616
[13:18:32.251]  - attr(*, "where")=List of 5
[13:18:32.251]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:18:32.251]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:18:32.251]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:18:32.251]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:18:32.251]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:18:32.251]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.251]  - attr(*, "already-done")= logi TRUE
[13:18:32.258] - reassign environment for ‘...future.FUN’
[13:18:32.258] - copied ‘...future.FUN’ to environment
[13:18:32.258] - copied ‘future.call.arguments’ to environment
[13:18:32.258] - copied ‘...future.elements_ii’ to environment
[13:18:32.258] - copied ‘...future.seeds_ii’ to environment
[13:18:32.258] - copied ‘...future.globals.maxSize’ to environment
[13:18:32.258] assign_globals() ... done
[13:18:32.259] plan(): Setting new future strategy stack:
[13:18:32.259] List of future strategies:
[13:18:32.259] 1. sequential:
[13:18:32.259]    - args: function (..., envir = parent.frame())
[13:18:32.259]    - tweaked: FALSE
[13:18:32.259]    - call: NULL
[13:18:32.259] plan(): nbrOfWorkers() = 1
[13:18:32.260] plan(): Setting new future strategy stack:
[13:18:32.260] List of future strategies:
[13:18:32.260] 1. sequential:
[13:18:32.260]    - args: function (..., envir = parent.frame())
[13:18:32.260]    - tweaked: FALSE
[13:18:32.260]    - call: plan(strategy)
[13:18:32.260] plan(): nbrOfWorkers() = 1
[13:18:32.260] SequentialFuture started (and completed)
[13:18:32.260] - Launch lazy future ... done
[13:18:32.261] run() for ‘SequentialFuture’ ... done
[13:18:32.261] Created future:
[13:18:32.261] SequentialFuture:
[13:18:32.261] Label: ‘future_replicate-1’
[13:18:32.261] Expression:
[13:18:32.261] {
[13:18:32.261]     do.call(function(...) {
[13:18:32.261]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.261]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.261]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.261]             on.exit(options(oopts), add = TRUE)
[13:18:32.261]         }
[13:18:32.261]         {
[13:18:32.261]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.261]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.261]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.261]                   envir = globalenv(), inherits = FALSE)
[13:18:32.261]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.261]             })
[13:18:32.261]         }
[13:18:32.261]     }, args = future.call.arguments)
[13:18:32.261] }
[13:18:32.261] Lazy evaluation: FALSE
[13:18:32.261] Asynchronous evaluation: FALSE
[13:18:32.261] Local evaluation: TRUE
[13:18:32.261] Environment: R_GlobalEnv
[13:18:32.261] Capture standard output: TRUE
[13:18:32.261] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:32.261] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:32.261] Packages: <none>
[13:18:32.261] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:32.261] Resolved: TRUE
[13:18:32.261] Value: 280 bytes of class ‘list’
[13:18:32.261] Early signaling: FALSE
[13:18:32.261] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:32.261] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:18:32.262] Chunk #1 of 1 ... DONE
[13:18:32.262] Launching 1 futures (chunks) ... DONE
[13:18:32.262] Resolving 1 futures (chunks) ...
[13:18:32.262] resolve() on list ...
[13:18:32.262]  recursive: 0
[13:18:32.262]  length: 1
[13:18:32.262] 
[13:18:32.262] resolved() for ‘SequentialFuture’ ...
[13:18:32.262] - state: ‘finished’
[13:18:32.263] - run: TRUE
[13:18:32.263] - result: ‘FutureResult’
[13:18:32.263] resolved() for ‘SequentialFuture’ ... done
[13:18:32.263] Future #1
[13:18:32.263] signalConditionsASAP(SequentialFuture, pos=1) ...
[13:18:32.263] - nx: 1
[13:18:32.263] - relay: TRUE
[13:18:32.263] - stdout: TRUE
[13:18:32.263] - signal: TRUE
[13:18:32.263] - resignal: FALSE
[13:18:32.263] - force: TRUE
[13:18:32.264] - relayed: [n=1] FALSE
[13:18:32.264] - queued futures: [n=1] FALSE
[13:18:32.264]  - until=1
[13:18:32.264]  - relaying element #1
[13:18:32.264] - relayed: [n=1] TRUE
[13:18:32.264] - queued futures: [n=1] TRUE
[13:18:32.264] signalConditionsASAP(SequentialFuture, pos=1) ... done
[13:18:32.264]  length: 0 (resolved future 1)
[13:18:32.264] Relaying remaining futures
[13:18:32.264] signalConditionsASAP(NULL, pos=0) ...
[13:18:32.265] - nx: 1
[13:18:32.265] - relay: TRUE
[13:18:32.265] - stdout: TRUE
[13:18:32.265] - signal: TRUE
[13:18:32.265] - resignal: FALSE
[13:18:32.265] - force: TRUE
[13:18:32.265] - relayed: [n=1] TRUE
[13:18:32.265] - queued futures: [n=1] TRUE
 - flush all
[13:18:32.265] - relayed: [n=1] TRUE
[13:18:32.265] - queued futures: [n=1] TRUE
[13:18:32.265] signalConditionsASAP(NULL, pos=0) ... done
[13:18:32.266] resolve() on list ... DONE
[13:18:32.266]  - Number of value chunks collected: 1
[13:18:32.266] Resolving 1 futures (chunks) ... DONE
[13:18:32.266] Reducing values from 1 chunks ...
[13:18:32.266]  - Number of values collected after concatenation: 5
[13:18:32.266]  - Number of values expected: 5
[13:18:32.266] Reducing values from 1 chunks ... DONE
[13:18:32.266] future_lapply() ... DONE
[13:18:32.266] future_lapply() ...
[13:18:32.267] Generating random seeds ...
[13:18:32.267] Generating random seed streams for 5 elements ...
[13:18:32.267] Generating random seed streams for 5 elements ... DONE
[13:18:32.267] Generating random seeds ... DONE
[13:18:32.267] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:18:32.268] Number of chunks: 1
[13:18:32.268] getGlobalsAndPackagesXApply() ...
[13:18:32.268]  - future.globals: TRUE
[13:18:32.268] getGlobalsAndPackages() ...
[13:18:32.268] Searching for globals...
[13:18:32.269] - globals found: [2] ‘FUN’, ‘sample’
[13:18:32.269] Searching for globals ... DONE
[13:18:32.269] Resolving globals: FALSE
[13:18:32.270] The total size of the 1 globals is 616 bytes (616 bytes)
[13:18:32.270] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:18:32.270] - globals: [1] ‘FUN’
[13:18:32.270] 
[13:18:32.270] getGlobalsAndPackages() ... DONE
[13:18:32.270]  - globals found/used: [n=1] ‘FUN’
[13:18:32.270]  - needed namespaces: [n=0] 
[13:18:32.270] Finding globals ... DONE
[13:18:32.271]  - use_args: TRUE
[13:18:32.271]  - Getting '...' globals ...
[13:18:32.271] resolve() on list ...
[13:18:32.271]  recursive: 0
[13:18:32.271]  length: 1
[13:18:32.271]  elements: ‘...’
[13:18:32.271]  length: 0 (resolved future 1)
[13:18:32.271] resolve() on list ... DONE
[13:18:32.271]    - '...' content: [n=0] 
[13:18:32.272] List of 1
[13:18:32.272]  $ ...: list()
[13:18:32.272]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.272]  - attr(*, "where")=List of 1
[13:18:32.272]   ..$ ...:<environment: 0x55df1e1e4bd0> 
[13:18:32.272]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.272]  - attr(*, "resolved")= logi TRUE
[13:18:32.272]  - attr(*, "total_size")= num NA
[13:18:32.276]  - Getting '...' globals ... DONE
[13:18:32.276] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:18:32.276] List of 2
[13:18:32.276]  $ ...future.FUN:function (...)  
[13:18:32.276]  $ ...          : list()
[13:18:32.276]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.276]  - attr(*, "where")=List of 2
[13:18:32.276]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:18:32.276]   ..$ ...          :<environment: 0x55df1e1e4bd0> 
[13:18:32.276]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.276]  - attr(*, "resolved")= logi FALSE
[13:18:32.276]  - attr(*, "total_size")= num 616
[13:18:32.278] Packages to be attached in all futures: [n=0] 
[13:18:32.279] getGlobalsAndPackagesXApply() ... DONE
[13:18:32.279] Number of futures (= number of chunks): 1
[13:18:32.279] Launching 1 futures (chunks) ...
[13:18:32.279] Chunk #1 of 1 ...
[13:18:32.279]  - Finding globals in 'X' for chunk #1 ...
[13:18:32.279] getGlobalsAndPackages() ...
[13:18:32.279] Searching for globals...
[13:18:32.280] 
[13:18:32.280] Searching for globals ... DONE
[13:18:32.280] - globals: [0] <none>
[13:18:32.280] getGlobalsAndPackages() ... DONE
[13:18:32.280]    + additional globals found: [n=0] 
[13:18:32.280]    + additional namespaces needed: [n=0] 
[13:18:32.280]  - Finding globals in 'X' for chunk #1 ... DONE
[13:18:32.280]  - Adjusted option 'future.globals.maxSize': 524288000 -> 5 * 524288000 = 2621440000 (bytes)
[13:18:32.280]  - seeds: [5] <seeds>
[13:18:32.280] getGlobalsAndPackages() ...
[13:18:32.280] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.281] Resolving globals: FALSE
[13:18:32.281] Tweak future expression to call with '...' arguments ...
[13:18:32.281] {
[13:18:32.281]     do.call(function(...) {
[13:18:32.281]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.281]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.281]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.281]             on.exit(options(oopts), add = TRUE)
[13:18:32.281]         }
[13:18:32.281]         {
[13:18:32.281]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.281]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.281]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.281]                   envir = globalenv(), inherits = FALSE)
[13:18:32.281]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.281]             })
[13:18:32.281]         }
[13:18:32.281]     }, args = future.call.arguments)
[13:18:32.281] }
[13:18:32.281] Tweak future expression to call with '...' arguments ... DONE
[13:18:32.281] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.282] 
[13:18:32.282] getGlobalsAndPackages() ... DONE
[13:18:32.282] run() for ‘Future’ ...
[13:18:32.282] - state: ‘created’
[13:18:32.282] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:18:32.282] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:18:32.282] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:18:32.283]   - Field: ‘label’
[13:18:32.283]   - Field: ‘local’
[13:18:32.283]   - Field: ‘owner’
[13:18:32.283]   - Field: ‘envir’
[13:18:32.283]   - Field: ‘packages’
[13:18:32.283]   - Field: ‘gc’
[13:18:32.283]   - Field: ‘conditions’
[13:18:32.283]   - Field: ‘expr’
[13:18:32.283]   - Field: ‘uuid’
[13:18:32.283]   - Field: ‘seed’
[13:18:32.283]   - Field: ‘version’
[13:18:32.284]   - Field: ‘result’
[13:18:32.284]   - Field: ‘asynchronous’
[13:18:32.284]   - Field: ‘calls’
[13:18:32.284]   - Field: ‘globals’
[13:18:32.284]   - Field: ‘stdout’
[13:18:32.284]   - Field: ‘earlySignal’
[13:18:32.284]   - Field: ‘lazy’
[13:18:32.284]   - Field: ‘state’
[13:18:32.284] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:18:32.284] - Launch lazy future ...
[13:18:32.285] Packages needed by the future expression (n = 0): <none>
[13:18:32.285] Packages needed by future strategies (n = 0): <none>
[13:18:32.285] {
[13:18:32.285]     {
[13:18:32.285]         {
[13:18:32.285]             ...future.startTime <- base::Sys.time()
[13:18:32.285]             {
[13:18:32.285]                 {
[13:18:32.285]                   {
[13:18:32.285]                     base::local({
[13:18:32.285]                       has_future <- base::requireNamespace("future", 
[13:18:32.285]                         quietly = TRUE)
[13:18:32.285]                       if (has_future) {
[13:18:32.285]                         ns <- base::getNamespace("future")
[13:18:32.285]                         version <- ns[[".package"]][["version"]]
[13:18:32.285]                         if (is.null(version)) 
[13:18:32.285]                           version <- utils::packageVersion("future")
[13:18:32.285]                       }
[13:18:32.285]                       else {
[13:18:32.285]                         version <- NULL
[13:18:32.285]                       }
[13:18:32.285]                       if (!has_future || version < "1.8.0") {
[13:18:32.285]                         info <- base::c(r_version = base::gsub("R version ", 
[13:18:32.285]                           "", base::R.version$version.string), 
[13:18:32.285]                           platform = base::sprintf("%s (%s-bit)", 
[13:18:32.285]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:32.285]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:32.285]                             "release", "version")], collapse = " "), 
[13:18:32.285]                           hostname = base::Sys.info()[["nodename"]])
[13:18:32.285]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:18:32.285]                           info)
[13:18:32.285]                         info <- base::paste(info, collapse = "; ")
[13:18:32.285]                         if (!has_future) {
[13:18:32.285]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:32.285]                             info)
[13:18:32.285]                         }
[13:18:32.285]                         else {
[13:18:32.285]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:32.285]                             info, version)
[13:18:32.285]                         }
[13:18:32.285]                         base::stop(msg)
[13:18:32.285]                       }
[13:18:32.285]                     })
[13:18:32.285]                   }
[13:18:32.285]                   options(future.plan = NULL)
[13:18:32.285]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.285]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:32.285]                 }
[13:18:32.285]                 ...future.workdir <- getwd()
[13:18:32.285]             }
[13:18:32.285]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:32.285]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:32.285]         }
[13:18:32.285]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:32.285]             future.globals.maxSize = 2621440000, future.globals.method = NULL, 
[13:18:32.285]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:32.285]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:32.285]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:32.285]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:32.285]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:32.285]             base::names(...future.oldOptions))
[13:18:32.285]     }
[13:18:32.285]     if (FALSE) {
[13:18:32.285]     }
[13:18:32.285]     else {
[13:18:32.285]         if (TRUE) {
[13:18:32.285]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:32.285]                 open = "w")
[13:18:32.285]         }
[13:18:32.285]         else {
[13:18:32.285]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:32.285]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:32.285]         }
[13:18:32.285]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:32.285]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:32.285]             base::sink(type = "output", split = FALSE)
[13:18:32.285]             base::close(...future.stdout)
[13:18:32.285]         }, add = TRUE)
[13:18:32.285]     }
[13:18:32.285]     ...future.frame <- base::sys.nframe()
[13:18:32.285]     ...future.conditions <- base::list()
[13:18:32.285]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:32.285]     if (FALSE) {
[13:18:32.285]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:32.285]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:32.285]     }
[13:18:32.285]     ...future.result <- base::tryCatch({
[13:18:32.285]         base::withCallingHandlers({
[13:18:32.285]             ...future.value <- base::withVisible(base::local({
[13:18:32.285]                 do.call(function(...) {
[13:18:32.285]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.285]                   if (!identical(...future.globals.maxSize.org, 
[13:18:32.285]                     ...future.globals.maxSize)) {
[13:18:32.285]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.285]                     on.exit(options(oopts), add = TRUE)
[13:18:32.285]                   }
[13:18:32.285]                   {
[13:18:32.285]                     lapply(seq_along(...future.elements_ii), 
[13:18:32.285]                       FUN = function(jj) {
[13:18:32.285]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.285]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.285]                           envir = globalenv(), inherits = FALSE)
[13:18:32.285]                         ...future.FUN(...future.X_jj, ...)
[13:18:32.285]                       })
[13:18:32.285]                   }
[13:18:32.285]                 }, args = future.call.arguments)
[13:18:32.285]             }))
[13:18:32.285]             future::FutureResult(value = ...future.value$value, 
[13:18:32.285]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.285]                   ...future.rng), globalenv = if (FALSE) 
[13:18:32.285]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:32.285]                     ...future.globalenv.names))
[13:18:32.285]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:32.285]         }, condition = base::local({
[13:18:32.285]             c <- base::c
[13:18:32.285]             inherits <- base::inherits
[13:18:32.285]             invokeRestart <- base::invokeRestart
[13:18:32.285]             length <- base::length
[13:18:32.285]             list <- base::list
[13:18:32.285]             seq.int <- base::seq.int
[13:18:32.285]             signalCondition <- base::signalCondition
[13:18:32.285]             sys.calls <- base::sys.calls
[13:18:32.285]             `[[` <- base::`[[`
[13:18:32.285]             `+` <- base::`+`
[13:18:32.285]             `<<-` <- base::`<<-`
[13:18:32.285]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:32.285]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:32.285]                   3L)]
[13:18:32.285]             }
[13:18:32.285]             function(cond) {
[13:18:32.285]                 is_error <- inherits(cond, "error")
[13:18:32.285]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:32.285]                   NULL)
[13:18:32.285]                 if (is_error) {
[13:18:32.285]                   sessionInformation <- function() {
[13:18:32.285]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:32.285]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:32.285]                       search = base::search(), system = base::Sys.info())
[13:18:32.285]                   }
[13:18:32.285]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.285]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:32.285]                     cond$call), session = sessionInformation(), 
[13:18:32.285]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:32.285]                   signalCondition(cond)
[13:18:32.285]                 }
[13:18:32.285]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:32.285]                 "immediateCondition"))) {
[13:18:32.285]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:32.285]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.285]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:32.285]                   if (TRUE && !signal) {
[13:18:32.285]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.285]                     {
[13:18:32.285]                       inherits <- base::inherits
[13:18:32.285]                       invokeRestart <- base::invokeRestart
[13:18:32.285]                       is.null <- base::is.null
[13:18:32.285]                       muffled <- FALSE
[13:18:32.285]                       if (inherits(cond, "message")) {
[13:18:32.285]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.285]                         if (muffled) 
[13:18:32.285]                           invokeRestart("muffleMessage")
[13:18:32.285]                       }
[13:18:32.285]                       else if (inherits(cond, "warning")) {
[13:18:32.285]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.285]                         if (muffled) 
[13:18:32.285]                           invokeRestart("muffleWarning")
[13:18:32.285]                       }
[13:18:32.285]                       else if (inherits(cond, "condition")) {
[13:18:32.285]                         if (!is.null(pattern)) {
[13:18:32.285]                           computeRestarts <- base::computeRestarts
[13:18:32.285]                           grepl <- base::grepl
[13:18:32.285]                           restarts <- computeRestarts(cond)
[13:18:32.285]                           for (restart in restarts) {
[13:18:32.285]                             name <- restart$name
[13:18:32.285]                             if (is.null(name)) 
[13:18:32.285]                               next
[13:18:32.285]                             if (!grepl(pattern, name)) 
[13:18:32.285]                               next
[13:18:32.285]                             invokeRestart(restart)
[13:18:32.285]                             muffled <- TRUE
[13:18:32.285]                             break
[13:18:32.285]                           }
[13:18:32.285]                         }
[13:18:32.285]                       }
[13:18:32.285]                       invisible(muffled)
[13:18:32.285]                     }
[13:18:32.285]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.285]                   }
[13:18:32.285]                 }
[13:18:32.285]                 else {
[13:18:32.285]                   if (TRUE) {
[13:18:32.285]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.285]                     {
[13:18:32.285]                       inherits <- base::inherits
[13:18:32.285]                       invokeRestart <- base::invokeRestart
[13:18:32.285]                       is.null <- base::is.null
[13:18:32.285]                       muffled <- FALSE
[13:18:32.285]                       if (inherits(cond, "message")) {
[13:18:32.285]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.285]                         if (muffled) 
[13:18:32.285]                           invokeRestart("muffleMessage")
[13:18:32.285]                       }
[13:18:32.285]                       else if (inherits(cond, "warning")) {
[13:18:32.285]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.285]                         if (muffled) 
[13:18:32.285]                           invokeRestart("muffleWarning")
[13:18:32.285]                       }
[13:18:32.285]                       else if (inherits(cond, "condition")) {
[13:18:32.285]                         if (!is.null(pattern)) {
[13:18:32.285]                           computeRestarts <- base::computeRestarts
[13:18:32.285]                           grepl <- base::grepl
[13:18:32.285]                           restarts <- computeRestarts(cond)
[13:18:32.285]                           for (restart in restarts) {
[13:18:32.285]                             name <- restart$name
[13:18:32.285]                             if (is.null(name)) 
[13:18:32.285]                               next
[13:18:32.285]                             if (!grepl(pattern, name)) 
[13:18:32.285]                               next
[13:18:32.285]                             invokeRestart(restart)
[13:18:32.285]                             muffled <- TRUE
[13:18:32.285]                             break
[13:18:32.285]                           }
[13:18:32.285]                         }
[13:18:32.285]                       }
[13:18:32.285]                       invisible(muffled)
[13:18:32.285]                     }
[13:18:32.285]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.285]                   }
[13:18:32.285]                 }
[13:18:32.285]             }
[13:18:32.285]         }))
[13:18:32.285]     }, error = function(ex) {
[13:18:32.285]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:32.285]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.285]                 ...future.rng), started = ...future.startTime, 
[13:18:32.285]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:32.285]             version = "1.8"), class = "FutureResult")
[13:18:32.285]     }, finally = {
[13:18:32.285]         if (!identical(...future.workdir, getwd())) 
[13:18:32.285]             setwd(...future.workdir)
[13:18:32.285]         {
[13:18:32.285]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:32.285]                 ...future.oldOptions$nwarnings <- NULL
[13:18:32.285]             }
[13:18:32.285]             base::options(...future.oldOptions)
[13:18:32.285]             if (.Platform$OS.type == "windows") {
[13:18:32.285]                 old_names <- names(...future.oldEnvVars)
[13:18:32.285]                 envs <- base::Sys.getenv()
[13:18:32.285]                 names <- names(envs)
[13:18:32.285]                 common <- intersect(names, old_names)
[13:18:32.285]                 added <- setdiff(names, old_names)
[13:18:32.285]                 removed <- setdiff(old_names, names)
[13:18:32.285]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:32.285]                   envs[common]]
[13:18:32.285]                 NAMES <- toupper(changed)
[13:18:32.285]                 args <- list()
[13:18:32.285]                 for (kk in seq_along(NAMES)) {
[13:18:32.285]                   name <- changed[[kk]]
[13:18:32.285]                   NAME <- NAMES[[kk]]
[13:18:32.285]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.285]                     next
[13:18:32.285]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.285]                 }
[13:18:32.285]                 NAMES <- toupper(added)
[13:18:32.285]                 for (kk in seq_along(NAMES)) {
[13:18:32.285]                   name <- added[[kk]]
[13:18:32.285]                   NAME <- NAMES[[kk]]
[13:18:32.285]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.285]                     next
[13:18:32.285]                   args[[name]] <- ""
[13:18:32.285]                 }
[13:18:32.285]                 NAMES <- toupper(removed)
[13:18:32.285]                 for (kk in seq_along(NAMES)) {
[13:18:32.285]                   name <- removed[[kk]]
[13:18:32.285]                   NAME <- NAMES[[kk]]
[13:18:32.285]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.285]                     next
[13:18:32.285]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.285]                 }
[13:18:32.285]                 if (length(args) > 0) 
[13:18:32.285]                   base::do.call(base::Sys.setenv, args = args)
[13:18:32.285]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:32.285]             }
[13:18:32.285]             else {
[13:18:32.285]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:32.285]             }
[13:18:32.285]             {
[13:18:32.285]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:32.285]                   0L) {
[13:18:32.285]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:32.285]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:32.285]                   base::options(opts)
[13:18:32.285]                 }
[13:18:32.285]                 {
[13:18:32.285]                   {
[13:18:32.285]                     base::assign(".Random.seed", c(10403L, 2L, 
[13:18:32.285]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[13:18:32.285]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[13:18:32.285]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[13:18:32.285]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[13:18:32.285]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[13:18:32.285]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[13:18:32.285]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[13:18:32.285]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[13:18:32.285]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[13:18:32.285]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[13:18:32.285]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[13:18:32.285]                     -1512233174L, -1985955764L, -425390065L, 
[13:18:32.285]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[13:18:32.285]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[13:18:32.285]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[13:18:32.285]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[13:18:32.285]                     1818328109L, -1284085436L, -1981489558L, 
[13:18:32.285]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[13:18:32.285]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[13:18:32.285]                     -1718567047L, -793788661L, -1133789126L, 
[13:18:32.285]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[13:18:32.285]                     -1823521982L, -1345991523L, -1672661737L, 
[13:18:32.285]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[13:18:32.285]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[13:18:32.285]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[13:18:32.285]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[13:18:32.285]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[13:18:32.285]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[13:18:32.285]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[13:18:32.285]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[13:18:32.285]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[13:18:32.285]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[13:18:32.285]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[13:18:32.285]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[13:18:32.285]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[13:18:32.285]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[13:18:32.285]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[13:18:32.285]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[13:18:32.285]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[13:18:32.285]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[13:18:32.285]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[13:18:32.285]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[13:18:32.285]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[13:18:32.285]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[13:18:32.285]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[13:18:32.285]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[13:18:32.285]                     -1119334354L, -1521015416L, -2041922421L, 
[13:18:32.285]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[13:18:32.285]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[13:18:32.285]                     1232111981L, -1801753084L, -1608606422L, 
[13:18:32.285]                     -1172096363L, 1420874031L, -1210473418L, 
[13:18:32.285]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[13:18:32.285]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[13:18:32.285]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[13:18:32.285]                     679371266L, -591318819L, -104578089L, -172818754L, 
[13:18:32.285]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[13:18:32.285]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[13:18:32.285]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[13:18:32.285]                     -332493318L, -1978392251L, -1691039632L, 
[13:18:32.285]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[13:18:32.285]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[13:18:32.285]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[13:18:32.285]                     87560756L, -87565624L, 426345146L, -699970416L, 
[13:18:32.285]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[13:18:32.285]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[13:18:32.285]                     -1178330196L, -687617348L, -1701912078L, 
[13:18:32.285]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[13:18:32.285]                     -1345416048L, 1816730492L, -1570431212L, 
[13:18:32.285]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[13:18:32.285]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[13:18:32.285]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[13:18:32.285]                     -1493184262L, -1943836976L, -590788308L, 
[13:18:32.285]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[13:18:32.285]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[13:18:32.285]                     1274857340L, -1205842638L, -1938479504L, 
[13:18:32.285]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[13:18:32.285]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[13:18:32.285]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[13:18:32.285]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[13:18:32.285]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[13:18:32.285]                     -1460751252L, 1201879444L, -1459788718L, 
[13:18:32.285]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[13:18:32.285]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[13:18:32.285]                     -420945808L, -1997735900L, -1838404552L, 
[13:18:32.285]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[13:18:32.285]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[13:18:32.285]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[13:18:32.285]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[13:18:32.285]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[13:18:32.285]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[13:18:32.285]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[13:18:32.285]                     942193650L, 751741680L, 689743428L, -18455976L, 
[13:18:32.285]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[13:18:32.285]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[13:18:32.285]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[13:18:32.285]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[13:18:32.285]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[13:18:32.285]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[13:18:32.285]                     -1357570110L, 1896595240L, -2066952276L, 
[13:18:32.285]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[13:18:32.285]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[13:18:32.285]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[13:18:32.285]                     769655120L, 236357794L, 181393736L, -13334772L, 
[13:18:32.285]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[13:18:32.285]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[13:18:32.285]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[13:18:32.285]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[13:18:32.285]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[13:18:32.285]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[13:18:32.285]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[13:18:32.285]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[13:18:32.285]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[13:18:32.285]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[13:18:32.285]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[13:18:32.285]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[13:18:32.285]                     -1365842884L, -438961294L, -1851472272L, 
[13:18:32.285]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[13:18:32.285]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[13:18:32.285]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[13:18:32.285]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[13:18:32.285]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[13:18:32.285]                     -594809770L, -2146766621L, -2013964635L, 
[13:18:32.285]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[13:18:32.285]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[13:18:32.285]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[13:18:32.285]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[13:18:32.285]                     -1426021878L, -1285634264L, 1507547537L, 
[13:18:32.285]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[13:18:32.285]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[13:18:32.285]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[13:18:32.285]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[13:18:32.285]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[13:18:32.285]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[13:18:32.285]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[13:18:32.285]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[13:18:32.285]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[13:18:32.285]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[13:18:32.285]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[13:18:32.285]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[13:18:32.285]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[13:18:32.285]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[13:18:32.285]                     -1604604761L, 1421229008L, -1268333714L, 
[13:18:32.285]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[13:18:32.285]                     -2070476623L, -2099222749L, 1141171236L, 
[13:18:32.285]                     -146426158L, -1797385433L, -1129376399L, 
[13:18:32.285]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[13:18:32.285]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[13:18:32.285]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[13:18:32.285]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[13:18:32.285]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[13:18:32.285]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[13:18:32.285]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[13:18:32.285]                     -1092079724L, -1765622238L, -1882554057L, 
[13:18:32.285]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[13:18:32.285]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[13:18:32.285]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[13:18:32.285]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[13:18:32.285]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[13:18:32.285]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[13:18:32.285]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[13:18:32.285]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[13:18:32.285]                     865377681L, -1127426242L), envir = base::globalenv(), 
[13:18:32.285]                       inherits = FALSE)
[13:18:32.285]                     NULL
[13:18:32.285]                   }
[13:18:32.285]                   options(future.plan = NULL)
[13:18:32.285]                   if (is.na(NA_character_)) 
[13:18:32.285]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.285]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:32.285]                   future::plan(list(function (..., envir = parent.frame()) 
[13:18:32.285]                   {
[13:18:32.285]                     future <- SequentialFuture(..., envir = envir)
[13:18:32.285]                     if (!future$lazy) 
[13:18:32.285]                       future <- run(future)
[13:18:32.285]                     invisible(future)
[13:18:32.285]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:32.285]                 }
[13:18:32.285]             }
[13:18:32.285]         }
[13:18:32.285]     })
[13:18:32.285]     if (TRUE) {
[13:18:32.285]         base::sink(type = "output", split = FALSE)
[13:18:32.285]         if (TRUE) {
[13:18:32.285]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:32.285]         }
[13:18:32.285]         else {
[13:18:32.285]             ...future.result["stdout"] <- base::list(NULL)
[13:18:32.285]         }
[13:18:32.285]         base::close(...future.stdout)
[13:18:32.285]         ...future.stdout <- NULL
[13:18:32.285]     }
[13:18:32.285]     ...future.result$conditions <- ...future.conditions
[13:18:32.285]     ...future.result$finished <- base::Sys.time()
[13:18:32.285]     ...future.result
[13:18:32.285] }
[13:18:32.288] assign_globals() ...
[13:18:32.288] List of 5
[13:18:32.288]  $ ...future.FUN            :function (...)  
[13:18:32.288]  $ future.call.arguments    : list()
[13:18:32.288]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.288]  $ ...future.elements_ii    :List of 5
[13:18:32.288]   ..$ : int 0
[13:18:32.288]   ..$ : int 0
[13:18:32.288]   ..$ : int 0
[13:18:32.288]   ..$ : int 0
[13:18:32.288]   ..$ : int 0
[13:18:32.288]  $ ...future.seeds_ii       :List of 5
[13:18:32.288]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[13:18:32.288]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[13:18:32.288]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[13:18:32.288]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[13:18:32.288]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[13:18:32.288]  $ ...future.globals.maxSize: NULL
[13:18:32.288]  - attr(*, "resolved")= logi FALSE
[13:18:32.288]  - attr(*, "total_size")= num 616
[13:18:32.288]  - attr(*, "where")=List of 5
[13:18:32.288]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:18:32.288]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:18:32.288]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:18:32.288]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:18:32.288]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:18:32.288]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.288]  - attr(*, "already-done")= logi TRUE
[13:18:32.295] - reassign environment for ‘...future.FUN’
[13:18:32.295] - copied ‘...future.FUN’ to environment
[13:18:32.295] - copied ‘future.call.arguments’ to environment
[13:18:32.295] - copied ‘...future.elements_ii’ to environment
[13:18:32.295] - copied ‘...future.seeds_ii’ to environment
[13:18:32.295] - copied ‘...future.globals.maxSize’ to environment
[13:18:32.296] assign_globals() ... done
[13:18:32.296] plan(): Setting new future strategy stack:
[13:18:32.296] List of future strategies:
[13:18:32.296] 1. sequential:
[13:18:32.296]    - args: function (..., envir = parent.frame())
[13:18:32.296]    - tweaked: FALSE
[13:18:32.296]    - call: NULL
[13:18:32.296] plan(): nbrOfWorkers() = 1
[13:18:32.297] plan(): Setting new future strategy stack:
[13:18:32.298] List of future strategies:
[13:18:32.298] 1. sequential:
[13:18:32.298]    - args: function (..., envir = parent.frame())
[13:18:32.298]    - tweaked: FALSE
[13:18:32.298]    - call: plan(strategy)
[13:18:32.298] plan(): nbrOfWorkers() = 1
[13:18:32.298] SequentialFuture started (and completed)
[13:18:32.298] - Launch lazy future ... done
[13:18:32.298] run() for ‘SequentialFuture’ ... done
[13:18:32.299] Created future:
[13:18:32.299] SequentialFuture:
[13:18:32.299] Label: ‘future_replicate-1’
[13:18:32.299] Expression:
[13:18:32.299] {
[13:18:32.299]     do.call(function(...) {
[13:18:32.299]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.299]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.299]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.299]             on.exit(options(oopts), add = TRUE)
[13:18:32.299]         }
[13:18:32.299]         {
[13:18:32.299]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.299]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.299]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.299]                   envir = globalenv(), inherits = FALSE)
[13:18:32.299]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.299]             })
[13:18:32.299]         }
[13:18:32.299]     }, args = future.call.arguments)
[13:18:32.299] }
[13:18:32.299] Lazy evaluation: FALSE
[13:18:32.299] Asynchronous evaluation: FALSE
[13:18:32.299] Local evaluation: TRUE
[13:18:32.299] Environment: R_GlobalEnv
[13:18:32.299] Capture standard output: TRUE
[13:18:32.299] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:32.299] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:32.299] Packages: <none>
[13:18:32.299] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:32.299] Resolved: TRUE
[13:18:32.299] Value: 280 bytes of class ‘list’
[13:18:32.299] Early signaling: FALSE
[13:18:32.299] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:32.299] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:18:32.302] Chunk #1 of 1 ... DONE
[13:18:32.302] Launching 1 futures (chunks) ... DONE
[13:18:32.302] Resolving 1 futures (chunks) ...
[13:18:32.302] resolve() on list ...
[13:18:32.302]  recursive: 0
[13:18:32.302]  length: 1
[13:18:32.302] 
[13:18:32.302] resolved() for ‘SequentialFuture’ ...
[13:18:32.302] - state: ‘finished’
[13:18:32.302] - run: TRUE
[13:18:32.303] - result: ‘FutureResult’
[13:18:32.303] resolved() for ‘SequentialFuture’ ... done
[13:18:32.303] Future #1
[13:18:32.303] signalConditionsASAP(SequentialFuture, pos=1) ...
[13:18:32.303] - nx: 1
[13:18:32.303] - relay: TRUE
[13:18:32.303] - stdout: TRUE
[13:18:32.303] - signal: TRUE
[13:18:32.303] - resignal: FALSE
[13:18:32.303] - force: TRUE
[13:18:32.303] - relayed: [n=1] FALSE
[13:18:32.304] - queued futures: [n=1] FALSE
[13:18:32.304]  - until=1
[13:18:32.304]  - relaying element #1
[13:18:32.304] - relayed: [n=1] TRUE
[13:18:32.304] - queued futures: [n=1] TRUE
[13:18:32.304] signalConditionsASAP(SequentialFuture, pos=1) ... done
[13:18:32.304]  length: 0 (resolved future 1)
[13:18:32.304] Relaying remaining futures
[13:18:32.304] signalConditionsASAP(NULL, pos=0) ...
[13:18:32.304] - nx: 1
[13:18:32.305] - relay: TRUE
[13:18:32.305] - stdout: TRUE
[13:18:32.305] - signal: TRUE
[13:18:32.305] - resignal: FALSE
[13:18:32.305] - force: TRUE
[13:18:32.305] - relayed: [n=1] TRUE
[13:18:32.305] - queued futures: [n=1] TRUE
 - flush all
[13:18:32.305] - relayed: [n=1] TRUE
[13:18:32.305] - queued futures: [n=1] TRUE
[13:18:32.305] signalConditionsASAP(NULL, pos=0) ... done
[13:18:32.305] resolve() on list ... DONE
[13:18:32.306]  - Number of value chunks collected: 1
[13:18:32.306] Resolving 1 futures (chunks) ... DONE
[13:18:32.306] Reducing values from 1 chunks ...
[13:18:32.306]  - Number of values collected after concatenation: 5
[13:18:32.306]  - Number of values expected: 5
[13:18:32.306] Reducing values from 1 chunks ... DONE
[13:18:32.306] future_lapply() ... DONE
[13:18:32.307] future_lapply() ...
[13:18:32.307] Generating random seeds ...
[13:18:32.307] Generating random seed streams for 5 elements ...
[13:18:32.307] Generating random seed streams for 5 elements ... DONE
[13:18:32.307] Generating random seeds ... DONE
[13:18:32.308] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:18:32.308] Number of chunks: 1
[13:18:32.308] getGlobalsAndPackagesXApply() ...
[13:18:32.308]  - future.globals: TRUE
[13:18:32.308] getGlobalsAndPackages() ...
[13:18:32.308] Searching for globals...
[13:18:32.310] - globals found: [2] ‘FUN’, ‘sample’
[13:18:32.310] Searching for globals ... DONE
[13:18:32.310] Resolving globals: FALSE
[13:18:32.310] The total size of the 1 globals is 616 bytes (616 bytes)
[13:18:32.310] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:18:32.310] - globals: [1] ‘FUN’
[13:18:32.311] 
[13:18:32.311] getGlobalsAndPackages() ... DONE
[13:18:32.311]  - globals found/used: [n=1] ‘FUN’
[13:18:32.311]  - needed namespaces: [n=0] 
[13:18:32.311] Finding globals ... DONE
[13:18:32.311]  - use_args: TRUE
[13:18:32.311]  - Getting '...' globals ...
[13:18:32.311] resolve() on list ...
[13:18:32.312]  recursive: 0
[13:18:32.312]  length: 1
[13:18:32.312]  elements: ‘...’
[13:18:32.312]  length: 0 (resolved future 1)
[13:18:32.312] resolve() on list ... DONE
[13:18:32.312]    - '...' content: [n=0] 
[13:18:32.312] List of 1
[13:18:32.312]  $ ...: list()
[13:18:32.312]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.312]  - attr(*, "where")=List of 1
[13:18:32.312]   ..$ ...:<environment: 0x55df1bfa6ae8> 
[13:18:32.312]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.312]  - attr(*, "resolved")= logi TRUE
[13:18:32.312]  - attr(*, "total_size")= num NA
[13:18:32.315]  - Getting '...' globals ... DONE
[13:18:32.315] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:18:32.315] List of 2
[13:18:32.315]  $ ...future.FUN:function (...)  
[13:18:32.315]  $ ...          : list()
[13:18:32.315]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.315]  - attr(*, "where")=List of 2
[13:18:32.315]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:18:32.315]   ..$ ...          :<environment: 0x55df1bfa6ae8> 
[13:18:32.315]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.315]  - attr(*, "resolved")= logi FALSE
[13:18:32.315]  - attr(*, "total_size")= num 616
[13:18:32.317] Packages to be attached in all futures: [n=0] 
[13:18:32.318] getGlobalsAndPackagesXApply() ... DONE
[13:18:32.318] Number of futures (= number of chunks): 1
[13:18:32.318] Launching 1 futures (chunks) ...
[13:18:32.318] Chunk #1 of 1 ...
[13:18:32.318]  - Finding globals in 'X' for chunk #1 ...
[13:18:32.318] getGlobalsAndPackages() ...
[13:18:32.318] Searching for globals...
[13:18:32.318] 
[13:18:32.319] Searching for globals ... DONE
[13:18:32.319] - globals: [0] <none>
[13:18:32.319] getGlobalsAndPackages() ... DONE
[13:18:32.319]    + additional globals found: [n=0] 
[13:18:32.319]    + additional namespaces needed: [n=0] 
[13:18:32.319]  - Finding globals in 'X' for chunk #1 ... DONE
[13:18:32.319]  - Adjusted option 'future.globals.maxSize': 524288000 -> 5 * 524288000 = 2621440000 (bytes)
[13:18:32.319]  - seeds: [5] <seeds>
[13:18:32.319] getGlobalsAndPackages() ...
[13:18:32.319] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.320] Resolving globals: FALSE
[13:18:32.320] Tweak future expression to call with '...' arguments ...
[13:18:32.320] {
[13:18:32.320]     do.call(function(...) {
[13:18:32.320]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.320]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.320]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.320]             on.exit(options(oopts), add = TRUE)
[13:18:32.320]         }
[13:18:32.320]         {
[13:18:32.320]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.320]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.320]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.320]                   envir = globalenv(), inherits = FALSE)
[13:18:32.320]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.320]             })
[13:18:32.320]         }
[13:18:32.320]     }, args = future.call.arguments)
[13:18:32.320] }
[13:18:32.320] Tweak future expression to call with '...' arguments ... DONE
[13:18:32.320] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.320] 
[13:18:32.321] getGlobalsAndPackages() ... DONE
[13:18:32.321] run() for ‘Future’ ...
[13:18:32.321] - state: ‘created’
[13:18:32.321] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:18:32.321] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:18:32.321] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:18:32.322]   - Field: ‘label’
[13:18:32.322]   - Field: ‘local’
[13:18:32.322]   - Field: ‘owner’
[13:18:32.322]   - Field: ‘envir’
[13:18:32.322]   - Field: ‘packages’
[13:18:32.322]   - Field: ‘gc’
[13:18:32.322]   - Field: ‘conditions’
[13:18:32.322]   - Field: ‘expr’
[13:18:32.322]   - Field: ‘uuid’
[13:18:32.322]   - Field: ‘seed’
[13:18:32.323]   - Field: ‘version’
[13:18:32.323]   - Field: ‘result’
[13:18:32.323]   - Field: ‘asynchronous’
[13:18:32.323]   - Field: ‘calls’
[13:18:32.323]   - Field: ‘globals’
[13:18:32.323]   - Field: ‘stdout’
[13:18:32.323]   - Field: ‘earlySignal’
[13:18:32.323]   - Field: ‘lazy’
[13:18:32.323]   - Field: ‘state’
[13:18:32.323] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:18:32.325] - Launch lazy future ...
[13:18:32.325] Packages needed by the future expression (n = 0): <none>
[13:18:32.325] Packages needed by future strategies (n = 0): <none>
[13:18:32.326] {
[13:18:32.326]     {
[13:18:32.326]         {
[13:18:32.326]             ...future.startTime <- base::Sys.time()
[13:18:32.326]             {
[13:18:32.326]                 {
[13:18:32.326]                   {
[13:18:32.326]                     base::local({
[13:18:32.326]                       has_future <- base::requireNamespace("future", 
[13:18:32.326]                         quietly = TRUE)
[13:18:32.326]                       if (has_future) {
[13:18:32.326]                         ns <- base::getNamespace("future")
[13:18:32.326]                         version <- ns[[".package"]][["version"]]
[13:18:32.326]                         if (is.null(version)) 
[13:18:32.326]                           version <- utils::packageVersion("future")
[13:18:32.326]                       }
[13:18:32.326]                       else {
[13:18:32.326]                         version <- NULL
[13:18:32.326]                       }
[13:18:32.326]                       if (!has_future || version < "1.8.0") {
[13:18:32.326]                         info <- base::c(r_version = base::gsub("R version ", 
[13:18:32.326]                           "", base::R.version$version.string), 
[13:18:32.326]                           platform = base::sprintf("%s (%s-bit)", 
[13:18:32.326]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:32.326]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:32.326]                             "release", "version")], collapse = " "), 
[13:18:32.326]                           hostname = base::Sys.info()[["nodename"]])
[13:18:32.326]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:18:32.326]                           info)
[13:18:32.326]                         info <- base::paste(info, collapse = "; ")
[13:18:32.326]                         if (!has_future) {
[13:18:32.326]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:32.326]                             info)
[13:18:32.326]                         }
[13:18:32.326]                         else {
[13:18:32.326]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:32.326]                             info, version)
[13:18:32.326]                         }
[13:18:32.326]                         base::stop(msg)
[13:18:32.326]                       }
[13:18:32.326]                     })
[13:18:32.326]                   }
[13:18:32.326]                   options(future.plan = NULL)
[13:18:32.326]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.326]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:32.326]                 }
[13:18:32.326]                 ...future.workdir <- getwd()
[13:18:32.326]             }
[13:18:32.326]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:32.326]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:32.326]         }
[13:18:32.326]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:32.326]             future.globals.maxSize = 2621440000, future.globals.method = NULL, 
[13:18:32.326]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:32.326]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:32.326]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:32.326]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:32.326]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:32.326]             base::names(...future.oldOptions))
[13:18:32.326]     }
[13:18:32.326]     if (FALSE) {
[13:18:32.326]     }
[13:18:32.326]     else {
[13:18:32.326]         if (TRUE) {
[13:18:32.326]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:32.326]                 open = "w")
[13:18:32.326]         }
[13:18:32.326]         else {
[13:18:32.326]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:32.326]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:32.326]         }
[13:18:32.326]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:32.326]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:32.326]             base::sink(type = "output", split = FALSE)
[13:18:32.326]             base::close(...future.stdout)
[13:18:32.326]         }, add = TRUE)
[13:18:32.326]     }
[13:18:32.326]     ...future.frame <- base::sys.nframe()
[13:18:32.326]     ...future.conditions <- base::list()
[13:18:32.326]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:32.326]     if (FALSE) {
[13:18:32.326]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:32.326]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:32.326]     }
[13:18:32.326]     ...future.result <- base::tryCatch({
[13:18:32.326]         base::withCallingHandlers({
[13:18:32.326]             ...future.value <- base::withVisible(base::local({
[13:18:32.326]                 do.call(function(...) {
[13:18:32.326]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.326]                   if (!identical(...future.globals.maxSize.org, 
[13:18:32.326]                     ...future.globals.maxSize)) {
[13:18:32.326]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.326]                     on.exit(options(oopts), add = TRUE)
[13:18:32.326]                   }
[13:18:32.326]                   {
[13:18:32.326]                     lapply(seq_along(...future.elements_ii), 
[13:18:32.326]                       FUN = function(jj) {
[13:18:32.326]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.326]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.326]                           envir = globalenv(), inherits = FALSE)
[13:18:32.326]                         ...future.FUN(...future.X_jj, ...)
[13:18:32.326]                       })
[13:18:32.326]                   }
[13:18:32.326]                 }, args = future.call.arguments)
[13:18:32.326]             }))
[13:18:32.326]             future::FutureResult(value = ...future.value$value, 
[13:18:32.326]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.326]                   ...future.rng), globalenv = if (FALSE) 
[13:18:32.326]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:32.326]                     ...future.globalenv.names))
[13:18:32.326]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:32.326]         }, condition = base::local({
[13:18:32.326]             c <- base::c
[13:18:32.326]             inherits <- base::inherits
[13:18:32.326]             invokeRestart <- base::invokeRestart
[13:18:32.326]             length <- base::length
[13:18:32.326]             list <- base::list
[13:18:32.326]             seq.int <- base::seq.int
[13:18:32.326]             signalCondition <- base::signalCondition
[13:18:32.326]             sys.calls <- base::sys.calls
[13:18:32.326]             `[[` <- base::`[[`
[13:18:32.326]             `+` <- base::`+`
[13:18:32.326]             `<<-` <- base::`<<-`
[13:18:32.326]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:32.326]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:32.326]                   3L)]
[13:18:32.326]             }
[13:18:32.326]             function(cond) {
[13:18:32.326]                 is_error <- inherits(cond, "error")
[13:18:32.326]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:32.326]                   NULL)
[13:18:32.326]                 if (is_error) {
[13:18:32.326]                   sessionInformation <- function() {
[13:18:32.326]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:32.326]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:32.326]                       search = base::search(), system = base::Sys.info())
[13:18:32.326]                   }
[13:18:32.326]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.326]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:32.326]                     cond$call), session = sessionInformation(), 
[13:18:32.326]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:32.326]                   signalCondition(cond)
[13:18:32.326]                 }
[13:18:32.326]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:32.326]                 "immediateCondition"))) {
[13:18:32.326]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:32.326]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.326]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:32.326]                   if (TRUE && !signal) {
[13:18:32.326]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.326]                     {
[13:18:32.326]                       inherits <- base::inherits
[13:18:32.326]                       invokeRestart <- base::invokeRestart
[13:18:32.326]                       is.null <- base::is.null
[13:18:32.326]                       muffled <- FALSE
[13:18:32.326]                       if (inherits(cond, "message")) {
[13:18:32.326]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.326]                         if (muffled) 
[13:18:32.326]                           invokeRestart("muffleMessage")
[13:18:32.326]                       }
[13:18:32.326]                       else if (inherits(cond, "warning")) {
[13:18:32.326]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.326]                         if (muffled) 
[13:18:32.326]                           invokeRestart("muffleWarning")
[13:18:32.326]                       }
[13:18:32.326]                       else if (inherits(cond, "condition")) {
[13:18:32.326]                         if (!is.null(pattern)) {
[13:18:32.326]                           computeRestarts <- base::computeRestarts
[13:18:32.326]                           grepl <- base::grepl
[13:18:32.326]                           restarts <- computeRestarts(cond)
[13:18:32.326]                           for (restart in restarts) {
[13:18:32.326]                             name <- restart$name
[13:18:32.326]                             if (is.null(name)) 
[13:18:32.326]                               next
[13:18:32.326]                             if (!grepl(pattern, name)) 
[13:18:32.326]                               next
[13:18:32.326]                             invokeRestart(restart)
[13:18:32.326]                             muffled <- TRUE
[13:18:32.326]                             break
[13:18:32.326]                           }
[13:18:32.326]                         }
[13:18:32.326]                       }
[13:18:32.326]                       invisible(muffled)
[13:18:32.326]                     }
[13:18:32.326]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.326]                   }
[13:18:32.326]                 }
[13:18:32.326]                 else {
[13:18:32.326]                   if (TRUE) {
[13:18:32.326]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.326]                     {
[13:18:32.326]                       inherits <- base::inherits
[13:18:32.326]                       invokeRestart <- base::invokeRestart
[13:18:32.326]                       is.null <- base::is.null
[13:18:32.326]                       muffled <- FALSE
[13:18:32.326]                       if (inherits(cond, "message")) {
[13:18:32.326]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.326]                         if (muffled) 
[13:18:32.326]                           invokeRestart("muffleMessage")
[13:18:32.326]                       }
[13:18:32.326]                       else if (inherits(cond, "warning")) {
[13:18:32.326]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.326]                         if (muffled) 
[13:18:32.326]                           invokeRestart("muffleWarning")
[13:18:32.326]                       }
[13:18:32.326]                       else if (inherits(cond, "condition")) {
[13:18:32.326]                         if (!is.null(pattern)) {
[13:18:32.326]                           computeRestarts <- base::computeRestarts
[13:18:32.326]                           grepl <- base::grepl
[13:18:32.326]                           restarts <- computeRestarts(cond)
[13:18:32.326]                           for (restart in restarts) {
[13:18:32.326]                             name <- restart$name
[13:18:32.326]                             if (is.null(name)) 
[13:18:32.326]                               next
[13:18:32.326]                             if (!grepl(pattern, name)) 
[13:18:32.326]                               next
[13:18:32.326]                             invokeRestart(restart)
[13:18:32.326]                             muffled <- TRUE
[13:18:32.326]                             break
[13:18:32.326]                           }
[13:18:32.326]                         }
[13:18:32.326]                       }
[13:18:32.326]                       invisible(muffled)
[13:18:32.326]                     }
[13:18:32.326]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.326]                   }
[13:18:32.326]                 }
[13:18:32.326]             }
[13:18:32.326]         }))
[13:18:32.326]     }, error = function(ex) {
[13:18:32.326]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:32.326]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.326]                 ...future.rng), started = ...future.startTime, 
[13:18:32.326]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:32.326]             version = "1.8"), class = "FutureResult")
[13:18:32.326]     }, finally = {
[13:18:32.326]         if (!identical(...future.workdir, getwd())) 
[13:18:32.326]             setwd(...future.workdir)
[13:18:32.326]         {
[13:18:32.326]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:32.326]                 ...future.oldOptions$nwarnings <- NULL
[13:18:32.326]             }
[13:18:32.326]             base::options(...future.oldOptions)
[13:18:32.326]             if (.Platform$OS.type == "windows") {
[13:18:32.326]                 old_names <- names(...future.oldEnvVars)
[13:18:32.326]                 envs <- base::Sys.getenv()
[13:18:32.326]                 names <- names(envs)
[13:18:32.326]                 common <- intersect(names, old_names)
[13:18:32.326]                 added <- setdiff(names, old_names)
[13:18:32.326]                 removed <- setdiff(old_names, names)
[13:18:32.326]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:32.326]                   envs[common]]
[13:18:32.326]                 NAMES <- toupper(changed)
[13:18:32.326]                 args <- list()
[13:18:32.326]                 for (kk in seq_along(NAMES)) {
[13:18:32.326]                   name <- changed[[kk]]
[13:18:32.326]                   NAME <- NAMES[[kk]]
[13:18:32.326]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.326]                     next
[13:18:32.326]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.326]                 }
[13:18:32.326]                 NAMES <- toupper(added)
[13:18:32.326]                 for (kk in seq_along(NAMES)) {
[13:18:32.326]                   name <- added[[kk]]
[13:18:32.326]                   NAME <- NAMES[[kk]]
[13:18:32.326]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.326]                     next
[13:18:32.326]                   args[[name]] <- ""
[13:18:32.326]                 }
[13:18:32.326]                 NAMES <- toupper(removed)
[13:18:32.326]                 for (kk in seq_along(NAMES)) {
[13:18:32.326]                   name <- removed[[kk]]
[13:18:32.326]                   NAME <- NAMES[[kk]]
[13:18:32.326]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.326]                     next
[13:18:32.326]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.326]                 }
[13:18:32.326]                 if (length(args) > 0) 
[13:18:32.326]                   base::do.call(base::Sys.setenv, args = args)
[13:18:32.326]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:32.326]             }
[13:18:32.326]             else {
[13:18:32.326]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:32.326]             }
[13:18:32.326]             {
[13:18:32.326]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:32.326]                   0L) {
[13:18:32.326]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:32.326]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:32.326]                   base::options(opts)
[13:18:32.326]                 }
[13:18:32.326]                 {
[13:18:32.326]                   {
[13:18:32.326]                     base::assign(".Random.seed", c(10403L, 4L, 
[13:18:32.326]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[13:18:32.326]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[13:18:32.326]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[13:18:32.326]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[13:18:32.326]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[13:18:32.326]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[13:18:32.326]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[13:18:32.326]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[13:18:32.326]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[13:18:32.326]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[13:18:32.326]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[13:18:32.326]                     -1512233174L, -1985955764L, -425390065L, 
[13:18:32.326]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[13:18:32.326]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[13:18:32.326]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[13:18:32.326]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[13:18:32.326]                     1818328109L, -1284085436L, -1981489558L, 
[13:18:32.326]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[13:18:32.326]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[13:18:32.326]                     -1718567047L, -793788661L, -1133789126L, 
[13:18:32.326]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[13:18:32.326]                     -1823521982L, -1345991523L, -1672661737L, 
[13:18:32.326]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[13:18:32.326]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[13:18:32.326]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[13:18:32.326]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[13:18:32.326]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[13:18:32.326]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[13:18:32.326]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[13:18:32.326]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[13:18:32.326]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[13:18:32.326]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[13:18:32.326]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[13:18:32.326]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[13:18:32.326]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[13:18:32.326]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[13:18:32.326]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[13:18:32.326]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[13:18:32.326]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[13:18:32.326]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[13:18:32.326]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[13:18:32.326]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[13:18:32.326]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[13:18:32.326]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[13:18:32.326]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[13:18:32.326]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[13:18:32.326]                     -1119334354L, -1521015416L, -2041922421L, 
[13:18:32.326]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[13:18:32.326]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[13:18:32.326]                     1232111981L, -1801753084L, -1608606422L, 
[13:18:32.326]                     -1172096363L, 1420874031L, -1210473418L, 
[13:18:32.326]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[13:18:32.326]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[13:18:32.326]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[13:18:32.326]                     679371266L, -591318819L, -104578089L, -172818754L, 
[13:18:32.326]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[13:18:32.326]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[13:18:32.326]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[13:18:32.326]                     -332493318L, -1978392251L, -1691039632L, 
[13:18:32.326]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[13:18:32.326]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[13:18:32.326]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[13:18:32.326]                     87560756L, -87565624L, 426345146L, -699970416L, 
[13:18:32.326]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[13:18:32.326]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[13:18:32.326]                     -1178330196L, -687617348L, -1701912078L, 
[13:18:32.326]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[13:18:32.326]                     -1345416048L, 1816730492L, -1570431212L, 
[13:18:32.326]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[13:18:32.326]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[13:18:32.326]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[13:18:32.326]                     -1493184262L, -1943836976L, -590788308L, 
[13:18:32.326]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[13:18:32.326]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[13:18:32.326]                     1274857340L, -1205842638L, -1938479504L, 
[13:18:32.326]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[13:18:32.326]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[13:18:32.326]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[13:18:32.326]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[13:18:32.326]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[13:18:32.326]                     -1460751252L, 1201879444L, -1459788718L, 
[13:18:32.326]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[13:18:32.326]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[13:18:32.326]                     -420945808L, -1997735900L, -1838404552L, 
[13:18:32.326]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[13:18:32.326]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[13:18:32.326]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[13:18:32.326]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[13:18:32.326]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[13:18:32.326]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[13:18:32.326]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[13:18:32.326]                     942193650L, 751741680L, 689743428L, -18455976L, 
[13:18:32.326]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[13:18:32.326]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[13:18:32.326]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[13:18:32.326]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[13:18:32.326]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[13:18:32.326]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[13:18:32.326]                     -1357570110L, 1896595240L, -2066952276L, 
[13:18:32.326]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[13:18:32.326]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[13:18:32.326]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[13:18:32.326]                     769655120L, 236357794L, 181393736L, -13334772L, 
[13:18:32.326]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[13:18:32.326]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[13:18:32.326]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[13:18:32.326]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[13:18:32.326]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[13:18:32.326]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[13:18:32.326]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[13:18:32.326]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[13:18:32.326]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[13:18:32.326]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[13:18:32.326]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[13:18:32.326]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[13:18:32.326]                     -1365842884L, -438961294L, -1851472272L, 
[13:18:32.326]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[13:18:32.326]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[13:18:32.326]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[13:18:32.326]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[13:18:32.326]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[13:18:32.326]                     -594809770L, -2146766621L, -2013964635L, 
[13:18:32.326]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[13:18:32.326]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[13:18:32.326]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[13:18:32.326]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[13:18:32.326]                     -1426021878L, -1285634264L, 1507547537L, 
[13:18:32.326]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[13:18:32.326]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[13:18:32.326]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[13:18:32.326]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[13:18:32.326]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[13:18:32.326]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[13:18:32.326]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[13:18:32.326]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[13:18:32.326]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[13:18:32.326]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[13:18:32.326]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[13:18:32.326]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[13:18:32.326]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[13:18:32.326]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[13:18:32.326]                     -1604604761L, 1421229008L, -1268333714L, 
[13:18:32.326]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[13:18:32.326]                     -2070476623L, -2099222749L, 1141171236L, 
[13:18:32.326]                     -146426158L, -1797385433L, -1129376399L, 
[13:18:32.326]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[13:18:32.326]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[13:18:32.326]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[13:18:32.326]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[13:18:32.326]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[13:18:32.326]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[13:18:32.326]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[13:18:32.326]                     -1092079724L, -1765622238L, -1882554057L, 
[13:18:32.326]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[13:18:32.326]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[13:18:32.326]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[13:18:32.326]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[13:18:32.326]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[13:18:32.326]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[13:18:32.326]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[13:18:32.326]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[13:18:32.326]                     865377681L, -1127426242L), envir = base::globalenv(), 
[13:18:32.326]                       inherits = FALSE)
[13:18:32.326]                     NULL
[13:18:32.326]                   }
[13:18:32.326]                   options(future.plan = NULL)
[13:18:32.326]                   if (is.na(NA_character_)) 
[13:18:32.326]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.326]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:32.326]                   future::plan(list(function (..., envir = parent.frame()) 
[13:18:32.326]                   {
[13:18:32.326]                     future <- SequentialFuture(..., envir = envir)
[13:18:32.326]                     if (!future$lazy) 
[13:18:32.326]                       future <- run(future)
[13:18:32.326]                     invisible(future)
[13:18:32.326]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:32.326]                 }
[13:18:32.326]             }
[13:18:32.326]         }
[13:18:32.326]     })
[13:18:32.326]     if (TRUE) {
[13:18:32.326]         base::sink(type = "output", split = FALSE)
[13:18:32.326]         if (TRUE) {
[13:18:32.326]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:32.326]         }
[13:18:32.326]         else {
[13:18:32.326]             ...future.result["stdout"] <- base::list(NULL)
[13:18:32.326]         }
[13:18:32.326]         base::close(...future.stdout)
[13:18:32.326]         ...future.stdout <- NULL
[13:18:32.326]     }
[13:18:32.326]     ...future.result$conditions <- ...future.conditions
[13:18:32.326]     ...future.result$finished <- base::Sys.time()
[13:18:32.326]     ...future.result
[13:18:32.326] }
[13:18:32.328] assign_globals() ...
[13:18:32.328] List of 5
[13:18:32.328]  $ ...future.FUN            :function (...)  
[13:18:32.328]  $ future.call.arguments    : list()
[13:18:32.328]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.328]  $ ...future.elements_ii    :List of 5
[13:18:32.328]   ..$ : int 0
[13:18:32.328]   ..$ : int 0
[13:18:32.328]   ..$ : int 0
[13:18:32.328]   ..$ : int 0
[13:18:32.328]   ..$ : int 0
[13:18:32.328]  $ ...future.seeds_ii       :List of 5
[13:18:32.328]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[13:18:32.328]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[13:18:32.328]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[13:18:32.328]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[13:18:32.328]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[13:18:32.328]  $ ...future.globals.maxSize: NULL
[13:18:32.328]  - attr(*, "resolved")= logi FALSE
[13:18:32.328]  - attr(*, "total_size")= num 616
[13:18:32.328]  - attr(*, "where")=List of 5
[13:18:32.328]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:18:32.328]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:18:32.328]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:18:32.328]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:18:32.328]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:18:32.328]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.328]  - attr(*, "already-done")= logi TRUE
[13:18:32.335] - reassign environment for ‘...future.FUN’
[13:18:32.336] - copied ‘...future.FUN’ to environment
[13:18:32.336] - copied ‘future.call.arguments’ to environment
[13:18:32.336] - copied ‘...future.elements_ii’ to environment
[13:18:32.336] - copied ‘...future.seeds_ii’ to environment
[13:18:32.336] - copied ‘...future.globals.maxSize’ to environment
[13:18:32.336] assign_globals() ... done
[13:18:32.336] plan(): Setting new future strategy stack:
[13:18:32.336] List of future strategies:
[13:18:32.336] 1. sequential:
[13:18:32.336]    - args: function (..., envir = parent.frame())
[13:18:32.336]    - tweaked: FALSE
[13:18:32.336]    - call: NULL
[13:18:32.337] plan(): nbrOfWorkers() = 1
[13:18:32.337] plan(): Setting new future strategy stack:
[13:18:32.338] List of future strategies:
[13:18:32.338] 1. sequential:
[13:18:32.338]    - args: function (..., envir = parent.frame())
[13:18:32.338]    - tweaked: FALSE
[13:18:32.338]    - call: plan(strategy)
[13:18:32.338] plan(): nbrOfWorkers() = 1
[13:18:32.338] SequentialFuture started (and completed)
[13:18:32.338] - Launch lazy future ... done
[13:18:32.338] run() for ‘SequentialFuture’ ... done
[13:18:32.338] Created future:
[13:18:32.339] SequentialFuture:
[13:18:32.339] Label: ‘future_replicate-1’
[13:18:32.339] Expression:
[13:18:32.339] {
[13:18:32.339]     do.call(function(...) {
[13:18:32.339]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.339]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.339]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.339]             on.exit(options(oopts), add = TRUE)
[13:18:32.339]         }
[13:18:32.339]         {
[13:18:32.339]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.339]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.339]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.339]                   envir = globalenv(), inherits = FALSE)
[13:18:32.339]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.339]             })
[13:18:32.339]         }
[13:18:32.339]     }, args = future.call.arguments)
[13:18:32.339] }
[13:18:32.339] Lazy evaluation: FALSE
[13:18:32.339] Asynchronous evaluation: FALSE
[13:18:32.339] Local evaluation: TRUE
[13:18:32.339] Environment: R_GlobalEnv
[13:18:32.339] Capture standard output: TRUE
[13:18:32.339] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:32.339] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:32.339] Packages: <none>
[13:18:32.339] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:32.339] Resolved: TRUE
[13:18:32.339] Value: 280 bytes of class ‘list’
[13:18:32.339] Early signaling: FALSE
[13:18:32.339] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:32.339] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:18:32.340] Chunk #1 of 1 ... DONE
[13:18:32.340] Launching 1 futures (chunks) ... DONE
[13:18:32.340] Resolving 1 futures (chunks) ...
[13:18:32.340] resolve() on list ...
[13:18:32.340]  recursive: 0
[13:18:32.340]  length: 1
[13:18:32.340] 
[13:18:32.340] resolved() for ‘SequentialFuture’ ...
[13:18:32.340] - state: ‘finished’
[13:18:32.340] - run: TRUE
[13:18:32.340] - result: ‘FutureResult’
[13:18:32.341] resolved() for ‘SequentialFuture’ ... done
[13:18:32.341] Future #1
[13:18:32.341] signalConditionsASAP(SequentialFuture, pos=1) ...
[13:18:32.341] - nx: 1
[13:18:32.341] - relay: TRUE
[13:18:32.341] - stdout: TRUE
[13:18:32.341] - signal: TRUE
[13:18:32.341] - resignal: FALSE
[13:18:32.341] - force: TRUE
[13:18:32.341] - relayed: [n=1] FALSE
[13:18:32.341] - queued futures: [n=1] FALSE
[13:18:32.342]  - until=1
[13:18:32.342]  - relaying element #1
[13:18:32.342] - relayed: [n=1] TRUE
[13:18:32.342] - queued futures: [n=1] TRUE
[13:18:32.342] signalConditionsASAP(SequentialFuture, pos=1) ... done
[13:18:32.342]  length: 0 (resolved future 1)
[13:18:32.342] Relaying remaining futures
[13:18:32.342] signalConditionsASAP(NULL, pos=0) ...
[13:18:32.342] - nx: 1
[13:18:32.342] - relay: TRUE
[13:18:32.343] - stdout: TRUE
[13:18:32.343] - signal: TRUE
[13:18:32.343] - resignal: FALSE
[13:18:32.343] - force: TRUE
[13:18:32.343] - relayed: [n=1] TRUE
[13:18:32.343] - queued futures: [n=1] TRUE
 - flush all
[13:18:32.343] - relayed: [n=1] TRUE
[13:18:32.343] - queued futures: [n=1] TRUE
[13:18:32.343] signalConditionsASAP(NULL, pos=0) ... done
[13:18:32.343] resolve() on list ... DONE
[13:18:32.343]  - Number of value chunks collected: 1
[13:18:32.344] Resolving 1 futures (chunks) ... DONE
[13:18:32.344] Reducing values from 1 chunks ...
[13:18:32.344]  - Number of values collected after concatenation: 5
[13:18:32.344]  - Number of values expected: 5
[13:18:32.344] Reducing values from 1 chunks ... DONE
[13:18:32.344] future_lapply() ... DONE
[13:18:32.344] future_lapply() ...
[13:18:32.345] Generating random seeds ...
[13:18:32.345] Generating random seed streams for 5 elements ...
[13:18:32.345] Generating random seed streams for 5 elements ... DONE
[13:18:32.345] Generating random seeds ... DONE
[13:18:32.345] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:18:32.346] Number of chunks: 1
[13:18:32.346] getGlobalsAndPackagesXApply() ...
[13:18:32.346]  - future.globals: TRUE
[13:18:32.346] getGlobalsAndPackages() ...
[13:18:32.346] Searching for globals...
[13:18:32.347] - globals found: [2] ‘FUN’, ‘sample’
[13:18:32.347] Searching for globals ... DONE
[13:18:32.347] Resolving globals: FALSE
[13:18:32.347] The total size of the 1 globals is 616 bytes (616 bytes)
[13:18:32.348] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:18:32.348] - globals: [1] ‘FUN’
[13:18:32.348] 
[13:18:32.348] getGlobalsAndPackages() ... DONE
[13:18:32.348]  - globals found/used: [n=1] ‘FUN’
[13:18:32.348]  - needed namespaces: [n=0] 
[13:18:32.348] Finding globals ... DONE
[13:18:32.349]  - use_args: TRUE
[13:18:32.349]  - Getting '...' globals ...
[13:18:32.349] resolve() on list ...
[13:18:32.349]  recursive: 0
[13:18:32.349]  length: 1
[13:18:32.351]  elements: ‘...’
[13:18:32.351]  length: 0 (resolved future 1)
[13:18:32.351] resolve() on list ... DONE
[13:18:32.351]    - '...' content: [n=0] 
[13:18:32.351] List of 1
[13:18:32.351]  $ ...: list()
[13:18:32.351]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.351]  - attr(*, "where")=List of 1
[13:18:32.351]   ..$ ...:<environment: 0x55df1e2a92e0> 
[13:18:32.351]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.351]  - attr(*, "resolved")= logi TRUE
[13:18:32.351]  - attr(*, "total_size")= num NA
[13:18:32.354]  - Getting '...' globals ... DONE
[13:18:32.354] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:18:32.354] List of 2
[13:18:32.354]  $ ...future.FUN:function (...)  
[13:18:32.354]  $ ...          : list()
[13:18:32.354]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.354]  - attr(*, "where")=List of 2
[13:18:32.354]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:18:32.354]   ..$ ...          :<environment: 0x55df1e2a92e0> 
[13:18:32.354]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.354]  - attr(*, "resolved")= logi FALSE
[13:18:32.354]  - attr(*, "total_size")= num 616
[13:18:32.357] Packages to be attached in all futures: [n=0] 
[13:18:32.357] getGlobalsAndPackagesXApply() ... DONE
[13:18:32.357] Number of futures (= number of chunks): 1
[13:18:32.357] Launching 1 futures (chunks) ...
[13:18:32.358] Chunk #1 of 1 ...
[13:18:32.358]  - Finding globals in 'X' for chunk #1 ...
[13:18:32.358] getGlobalsAndPackages() ...
[13:18:32.358] Searching for globals...
[13:18:32.358] 
[13:18:32.358] Searching for globals ... DONE
[13:18:32.358] - globals: [0] <none>
[13:18:32.358] getGlobalsAndPackages() ... DONE
[13:18:32.358]    + additional globals found: [n=0] 
[13:18:32.359]    + additional namespaces needed: [n=0] 
[13:18:32.359]  - Finding globals in 'X' for chunk #1 ... DONE
[13:18:32.359]  - Adjusted option 'future.globals.maxSize': 524288000 -> 5 * 524288000 = 2621440000 (bytes)
[13:18:32.359]  - seeds: [5] <seeds>
[13:18:32.359] getGlobalsAndPackages() ...
[13:18:32.359] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.359] Resolving globals: FALSE
[13:18:32.359] Tweak future expression to call with '...' arguments ...
[13:18:32.359] {
[13:18:32.359]     do.call(function(...) {
[13:18:32.359]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.359]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.359]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.359]             on.exit(options(oopts), add = TRUE)
[13:18:32.359]         }
[13:18:32.359]         {
[13:18:32.359]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.359]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.359]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.359]                   envir = globalenv(), inherits = FALSE)
[13:18:32.359]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.359]             })
[13:18:32.359]         }
[13:18:32.359]     }, args = future.call.arguments)
[13:18:32.359] }
[13:18:32.360] Tweak future expression to call with '...' arguments ... DONE
[13:18:32.360] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.360] 
[13:18:32.360] getGlobalsAndPackages() ... DONE
[13:18:32.361] run() for ‘Future’ ...
[13:18:32.361] - state: ‘created’
[13:18:32.361] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:18:32.361] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:18:32.361] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:18:32.361]   - Field: ‘label’
[13:18:32.361]   - Field: ‘local’
[13:18:32.361]   - Field: ‘owner’
[13:18:32.362]   - Field: ‘envir’
[13:18:32.362]   - Field: ‘packages’
[13:18:32.362]   - Field: ‘gc’
[13:18:32.362]   - Field: ‘conditions’
[13:18:32.362]   - Field: ‘expr’
[13:18:32.362]   - Field: ‘uuid’
[13:18:32.362]   - Field: ‘seed’
[13:18:32.362]   - Field: ‘version’
[13:18:32.362]   - Field: ‘result’
[13:18:32.362]   - Field: ‘asynchronous’
[13:18:32.362]   - Field: ‘calls’
[13:18:32.363]   - Field: ‘globals’
[13:18:32.363]   - Field: ‘stdout’
[13:18:32.363]   - Field: ‘earlySignal’
[13:18:32.363]   - Field: ‘lazy’
[13:18:32.363]   - Field: ‘state’
[13:18:32.363] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:18:32.363] - Launch lazy future ...
[13:18:32.363] Packages needed by the future expression (n = 0): <none>
[13:18:32.363] Packages needed by future strategies (n = 0): <none>
[13:18:32.364] {
[13:18:32.364]     {
[13:18:32.364]         {
[13:18:32.364]             ...future.startTime <- base::Sys.time()
[13:18:32.364]             {
[13:18:32.364]                 {
[13:18:32.364]                   {
[13:18:32.364]                     base::local({
[13:18:32.364]                       has_future <- base::requireNamespace("future", 
[13:18:32.364]                         quietly = TRUE)
[13:18:32.364]                       if (has_future) {
[13:18:32.364]                         ns <- base::getNamespace("future")
[13:18:32.364]                         version <- ns[[".package"]][["version"]]
[13:18:32.364]                         if (is.null(version)) 
[13:18:32.364]                           version <- utils::packageVersion("future")
[13:18:32.364]                       }
[13:18:32.364]                       else {
[13:18:32.364]                         version <- NULL
[13:18:32.364]                       }
[13:18:32.364]                       if (!has_future || version < "1.8.0") {
[13:18:32.364]                         info <- base::c(r_version = base::gsub("R version ", 
[13:18:32.364]                           "", base::R.version$version.string), 
[13:18:32.364]                           platform = base::sprintf("%s (%s-bit)", 
[13:18:32.364]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:32.364]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:32.364]                             "release", "version")], collapse = " "), 
[13:18:32.364]                           hostname = base::Sys.info()[["nodename"]])
[13:18:32.364]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:18:32.364]                           info)
[13:18:32.364]                         info <- base::paste(info, collapse = "; ")
[13:18:32.364]                         if (!has_future) {
[13:18:32.364]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:32.364]                             info)
[13:18:32.364]                         }
[13:18:32.364]                         else {
[13:18:32.364]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:32.364]                             info, version)
[13:18:32.364]                         }
[13:18:32.364]                         base::stop(msg)
[13:18:32.364]                       }
[13:18:32.364]                     })
[13:18:32.364]                   }
[13:18:32.364]                   options(future.plan = NULL)
[13:18:32.364]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.364]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:32.364]                 }
[13:18:32.364]                 ...future.workdir <- getwd()
[13:18:32.364]             }
[13:18:32.364]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:32.364]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:32.364]         }
[13:18:32.364]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:32.364]             future.globals.maxSize = 2621440000, future.globals.method = NULL, 
[13:18:32.364]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:32.364]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:32.364]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:32.364]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:32.364]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:32.364]             base::names(...future.oldOptions))
[13:18:32.364]     }
[13:18:32.364]     if (FALSE) {
[13:18:32.364]     }
[13:18:32.364]     else {
[13:18:32.364]         if (TRUE) {
[13:18:32.364]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:32.364]                 open = "w")
[13:18:32.364]         }
[13:18:32.364]         else {
[13:18:32.364]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:32.364]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:32.364]         }
[13:18:32.364]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:32.364]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:32.364]             base::sink(type = "output", split = FALSE)
[13:18:32.364]             base::close(...future.stdout)
[13:18:32.364]         }, add = TRUE)
[13:18:32.364]     }
[13:18:32.364]     ...future.frame <- base::sys.nframe()
[13:18:32.364]     ...future.conditions <- base::list()
[13:18:32.364]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:32.364]     if (FALSE) {
[13:18:32.364]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:32.364]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:32.364]     }
[13:18:32.364]     ...future.result <- base::tryCatch({
[13:18:32.364]         base::withCallingHandlers({
[13:18:32.364]             ...future.value <- base::withVisible(base::local({
[13:18:32.364]                 do.call(function(...) {
[13:18:32.364]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.364]                   if (!identical(...future.globals.maxSize.org, 
[13:18:32.364]                     ...future.globals.maxSize)) {
[13:18:32.364]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.364]                     on.exit(options(oopts), add = TRUE)
[13:18:32.364]                   }
[13:18:32.364]                   {
[13:18:32.364]                     lapply(seq_along(...future.elements_ii), 
[13:18:32.364]                       FUN = function(jj) {
[13:18:32.364]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.364]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.364]                           envir = globalenv(), inherits = FALSE)
[13:18:32.364]                         ...future.FUN(...future.X_jj, ...)
[13:18:32.364]                       })
[13:18:32.364]                   }
[13:18:32.364]                 }, args = future.call.arguments)
[13:18:32.364]             }))
[13:18:32.364]             future::FutureResult(value = ...future.value$value, 
[13:18:32.364]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.364]                   ...future.rng), globalenv = if (FALSE) 
[13:18:32.364]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:32.364]                     ...future.globalenv.names))
[13:18:32.364]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:32.364]         }, condition = base::local({
[13:18:32.364]             c <- base::c
[13:18:32.364]             inherits <- base::inherits
[13:18:32.364]             invokeRestart <- base::invokeRestart
[13:18:32.364]             length <- base::length
[13:18:32.364]             list <- base::list
[13:18:32.364]             seq.int <- base::seq.int
[13:18:32.364]             signalCondition <- base::signalCondition
[13:18:32.364]             sys.calls <- base::sys.calls
[13:18:32.364]             `[[` <- base::`[[`
[13:18:32.364]             `+` <- base::`+`
[13:18:32.364]             `<<-` <- base::`<<-`
[13:18:32.364]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:32.364]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:32.364]                   3L)]
[13:18:32.364]             }
[13:18:32.364]             function(cond) {
[13:18:32.364]                 is_error <- inherits(cond, "error")
[13:18:32.364]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:32.364]                   NULL)
[13:18:32.364]                 if (is_error) {
[13:18:32.364]                   sessionInformation <- function() {
[13:18:32.364]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:32.364]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:32.364]                       search = base::search(), system = base::Sys.info())
[13:18:32.364]                   }
[13:18:32.364]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.364]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:32.364]                     cond$call), session = sessionInformation(), 
[13:18:32.364]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:32.364]                   signalCondition(cond)
[13:18:32.364]                 }
[13:18:32.364]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:32.364]                 "immediateCondition"))) {
[13:18:32.364]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:32.364]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.364]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:32.364]                   if (TRUE && !signal) {
[13:18:32.364]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.364]                     {
[13:18:32.364]                       inherits <- base::inherits
[13:18:32.364]                       invokeRestart <- base::invokeRestart
[13:18:32.364]                       is.null <- base::is.null
[13:18:32.364]                       muffled <- FALSE
[13:18:32.364]                       if (inherits(cond, "message")) {
[13:18:32.364]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.364]                         if (muffled) 
[13:18:32.364]                           invokeRestart("muffleMessage")
[13:18:32.364]                       }
[13:18:32.364]                       else if (inherits(cond, "warning")) {
[13:18:32.364]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.364]                         if (muffled) 
[13:18:32.364]                           invokeRestart("muffleWarning")
[13:18:32.364]                       }
[13:18:32.364]                       else if (inherits(cond, "condition")) {
[13:18:32.364]                         if (!is.null(pattern)) {
[13:18:32.364]                           computeRestarts <- base::computeRestarts
[13:18:32.364]                           grepl <- base::grepl
[13:18:32.364]                           restarts <- computeRestarts(cond)
[13:18:32.364]                           for (restart in restarts) {
[13:18:32.364]                             name <- restart$name
[13:18:32.364]                             if (is.null(name)) 
[13:18:32.364]                               next
[13:18:32.364]                             if (!grepl(pattern, name)) 
[13:18:32.364]                               next
[13:18:32.364]                             invokeRestart(restart)
[13:18:32.364]                             muffled <- TRUE
[13:18:32.364]                             break
[13:18:32.364]                           }
[13:18:32.364]                         }
[13:18:32.364]                       }
[13:18:32.364]                       invisible(muffled)
[13:18:32.364]                     }
[13:18:32.364]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.364]                   }
[13:18:32.364]                 }
[13:18:32.364]                 else {
[13:18:32.364]                   if (TRUE) {
[13:18:32.364]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.364]                     {
[13:18:32.364]                       inherits <- base::inherits
[13:18:32.364]                       invokeRestart <- base::invokeRestart
[13:18:32.364]                       is.null <- base::is.null
[13:18:32.364]                       muffled <- FALSE
[13:18:32.364]                       if (inherits(cond, "message")) {
[13:18:32.364]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.364]                         if (muffled) 
[13:18:32.364]                           invokeRestart("muffleMessage")
[13:18:32.364]                       }
[13:18:32.364]                       else if (inherits(cond, "warning")) {
[13:18:32.364]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.364]                         if (muffled) 
[13:18:32.364]                           invokeRestart("muffleWarning")
[13:18:32.364]                       }
[13:18:32.364]                       else if (inherits(cond, "condition")) {
[13:18:32.364]                         if (!is.null(pattern)) {
[13:18:32.364]                           computeRestarts <- base::computeRestarts
[13:18:32.364]                           grepl <- base::grepl
[13:18:32.364]                           restarts <- computeRestarts(cond)
[13:18:32.364]                           for (restart in restarts) {
[13:18:32.364]                             name <- restart$name
[13:18:32.364]                             if (is.null(name)) 
[13:18:32.364]                               next
[13:18:32.364]                             if (!grepl(pattern, name)) 
[13:18:32.364]                               next
[13:18:32.364]                             invokeRestart(restart)
[13:18:32.364]                             muffled <- TRUE
[13:18:32.364]                             break
[13:18:32.364]                           }
[13:18:32.364]                         }
[13:18:32.364]                       }
[13:18:32.364]                       invisible(muffled)
[13:18:32.364]                     }
[13:18:32.364]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.364]                   }
[13:18:32.364]                 }
[13:18:32.364]             }
[13:18:32.364]         }))
[13:18:32.364]     }, error = function(ex) {
[13:18:32.364]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:32.364]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.364]                 ...future.rng), started = ...future.startTime, 
[13:18:32.364]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:32.364]             version = "1.8"), class = "FutureResult")
[13:18:32.364]     }, finally = {
[13:18:32.364]         if (!identical(...future.workdir, getwd())) 
[13:18:32.364]             setwd(...future.workdir)
[13:18:32.364]         {
[13:18:32.364]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:32.364]                 ...future.oldOptions$nwarnings <- NULL
[13:18:32.364]             }
[13:18:32.364]             base::options(...future.oldOptions)
[13:18:32.364]             if (.Platform$OS.type == "windows") {
[13:18:32.364]                 old_names <- names(...future.oldEnvVars)
[13:18:32.364]                 envs <- base::Sys.getenv()
[13:18:32.364]                 names <- names(envs)
[13:18:32.364]                 common <- intersect(names, old_names)
[13:18:32.364]                 added <- setdiff(names, old_names)
[13:18:32.364]                 removed <- setdiff(old_names, names)
[13:18:32.364]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:32.364]                   envs[common]]
[13:18:32.364]                 NAMES <- toupper(changed)
[13:18:32.364]                 args <- list()
[13:18:32.364]                 for (kk in seq_along(NAMES)) {
[13:18:32.364]                   name <- changed[[kk]]
[13:18:32.364]                   NAME <- NAMES[[kk]]
[13:18:32.364]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.364]                     next
[13:18:32.364]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.364]                 }
[13:18:32.364]                 NAMES <- toupper(added)
[13:18:32.364]                 for (kk in seq_along(NAMES)) {
[13:18:32.364]                   name <- added[[kk]]
[13:18:32.364]                   NAME <- NAMES[[kk]]
[13:18:32.364]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.364]                     next
[13:18:32.364]                   args[[name]] <- ""
[13:18:32.364]                 }
[13:18:32.364]                 NAMES <- toupper(removed)
[13:18:32.364]                 for (kk in seq_along(NAMES)) {
[13:18:32.364]                   name <- removed[[kk]]
[13:18:32.364]                   NAME <- NAMES[[kk]]
[13:18:32.364]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.364]                     next
[13:18:32.364]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.364]                 }
[13:18:32.364]                 if (length(args) > 0) 
[13:18:32.364]                   base::do.call(base::Sys.setenv, args = args)
[13:18:32.364]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:32.364]             }
[13:18:32.364]             else {
[13:18:32.364]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:32.364]             }
[13:18:32.364]             {
[13:18:32.364]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:32.364]                   0L) {
[13:18:32.364]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:32.364]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:32.364]                   base::options(opts)
[13:18:32.364]                 }
[13:18:32.364]                 {
[13:18:32.364]                   {
[13:18:32.364]                     base::assign(".Random.seed", c(10403L, 6L, 
[13:18:32.364]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[13:18:32.364]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[13:18:32.364]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[13:18:32.364]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[13:18:32.364]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[13:18:32.364]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[13:18:32.364]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[13:18:32.364]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[13:18:32.364]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[13:18:32.364]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[13:18:32.364]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[13:18:32.364]                     -1512233174L, -1985955764L, -425390065L, 
[13:18:32.364]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[13:18:32.364]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[13:18:32.364]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[13:18:32.364]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[13:18:32.364]                     1818328109L, -1284085436L, -1981489558L, 
[13:18:32.364]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[13:18:32.364]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[13:18:32.364]                     -1718567047L, -793788661L, -1133789126L, 
[13:18:32.364]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[13:18:32.364]                     -1823521982L, -1345991523L, -1672661737L, 
[13:18:32.364]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[13:18:32.364]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[13:18:32.364]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[13:18:32.364]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[13:18:32.364]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[13:18:32.364]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[13:18:32.364]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[13:18:32.364]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[13:18:32.364]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[13:18:32.364]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[13:18:32.364]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[13:18:32.364]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[13:18:32.364]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[13:18:32.364]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[13:18:32.364]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[13:18:32.364]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[13:18:32.364]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[13:18:32.364]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[13:18:32.364]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[13:18:32.364]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[13:18:32.364]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[13:18:32.364]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[13:18:32.364]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[13:18:32.364]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[13:18:32.364]                     -1119334354L, -1521015416L, -2041922421L, 
[13:18:32.364]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[13:18:32.364]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[13:18:32.364]                     1232111981L, -1801753084L, -1608606422L, 
[13:18:32.364]                     -1172096363L, 1420874031L, -1210473418L, 
[13:18:32.364]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[13:18:32.364]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[13:18:32.364]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[13:18:32.364]                     679371266L, -591318819L, -104578089L, -172818754L, 
[13:18:32.364]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[13:18:32.364]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[13:18:32.364]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[13:18:32.364]                     -332493318L, -1978392251L, -1691039632L, 
[13:18:32.364]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[13:18:32.364]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[13:18:32.364]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[13:18:32.364]                     87560756L, -87565624L, 426345146L, -699970416L, 
[13:18:32.364]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[13:18:32.364]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[13:18:32.364]                     -1178330196L, -687617348L, -1701912078L, 
[13:18:32.364]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[13:18:32.364]                     -1345416048L, 1816730492L, -1570431212L, 
[13:18:32.364]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[13:18:32.364]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[13:18:32.364]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[13:18:32.364]                     -1493184262L, -1943836976L, -590788308L, 
[13:18:32.364]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[13:18:32.364]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[13:18:32.364]                     1274857340L, -1205842638L, -1938479504L, 
[13:18:32.364]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[13:18:32.364]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[13:18:32.364]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[13:18:32.364]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[13:18:32.364]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[13:18:32.364]                     -1460751252L, 1201879444L, -1459788718L, 
[13:18:32.364]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[13:18:32.364]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[13:18:32.364]                     -420945808L, -1997735900L, -1838404552L, 
[13:18:32.364]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[13:18:32.364]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[13:18:32.364]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[13:18:32.364]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[13:18:32.364]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[13:18:32.364]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[13:18:32.364]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[13:18:32.364]                     942193650L, 751741680L, 689743428L, -18455976L, 
[13:18:32.364]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[13:18:32.364]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[13:18:32.364]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[13:18:32.364]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[13:18:32.364]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[13:18:32.364]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[13:18:32.364]                     -1357570110L, 1896595240L, -2066952276L, 
[13:18:32.364]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[13:18:32.364]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[13:18:32.364]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[13:18:32.364]                     769655120L, 236357794L, 181393736L, -13334772L, 
[13:18:32.364]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[13:18:32.364]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[13:18:32.364]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[13:18:32.364]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[13:18:32.364]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[13:18:32.364]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[13:18:32.364]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[13:18:32.364]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[13:18:32.364]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[13:18:32.364]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[13:18:32.364]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[13:18:32.364]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[13:18:32.364]                     -1365842884L, -438961294L, -1851472272L, 
[13:18:32.364]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[13:18:32.364]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[13:18:32.364]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[13:18:32.364]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[13:18:32.364]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[13:18:32.364]                     -594809770L, -2146766621L, -2013964635L, 
[13:18:32.364]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[13:18:32.364]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[13:18:32.364]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[13:18:32.364]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[13:18:32.364]                     -1426021878L, -1285634264L, 1507547537L, 
[13:18:32.364]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[13:18:32.364]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[13:18:32.364]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[13:18:32.364]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[13:18:32.364]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[13:18:32.364]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[13:18:32.364]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[13:18:32.364]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[13:18:32.364]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[13:18:32.364]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[13:18:32.364]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[13:18:32.364]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[13:18:32.364]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[13:18:32.364]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[13:18:32.364]                     -1604604761L, 1421229008L, -1268333714L, 
[13:18:32.364]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[13:18:32.364]                     -2070476623L, -2099222749L, 1141171236L, 
[13:18:32.364]                     -146426158L, -1797385433L, -1129376399L, 
[13:18:32.364]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[13:18:32.364]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[13:18:32.364]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[13:18:32.364]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[13:18:32.364]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[13:18:32.364]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[13:18:32.364]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[13:18:32.364]                     -1092079724L, -1765622238L, -1882554057L, 
[13:18:32.364]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[13:18:32.364]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[13:18:32.364]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[13:18:32.364]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[13:18:32.364]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[13:18:32.364]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[13:18:32.364]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[13:18:32.364]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[13:18:32.364]                     865377681L, -1127426242L), envir = base::globalenv(), 
[13:18:32.364]                       inherits = FALSE)
[13:18:32.364]                     NULL
[13:18:32.364]                   }
[13:18:32.364]                   options(future.plan = NULL)
[13:18:32.364]                   if (is.na(NA_character_)) 
[13:18:32.364]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.364]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:32.364]                   future::plan(list(function (..., envir = parent.frame()) 
[13:18:32.364]                   {
[13:18:32.364]                     future <- SequentialFuture(..., envir = envir)
[13:18:32.364]                     if (!future$lazy) 
[13:18:32.364]                       future <- run(future)
[13:18:32.364]                     invisible(future)
[13:18:32.364]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:32.364]                 }
[13:18:32.364]             }
[13:18:32.364]         }
[13:18:32.364]     })
[13:18:32.364]     if (TRUE) {
[13:18:32.364]         base::sink(type = "output", split = FALSE)
[13:18:32.364]         if (TRUE) {
[13:18:32.364]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:32.364]         }
[13:18:32.364]         else {
[13:18:32.364]             ...future.result["stdout"] <- base::list(NULL)
[13:18:32.364]         }
[13:18:32.364]         base::close(...future.stdout)
[13:18:32.364]         ...future.stdout <- NULL
[13:18:32.364]     }
[13:18:32.364]     ...future.result$conditions <- ...future.conditions
[13:18:32.364]     ...future.result$finished <- base::Sys.time()
[13:18:32.364]     ...future.result
[13:18:32.364] }
[13:18:32.367] assign_globals() ...
[13:18:32.367] List of 5
[13:18:32.367]  $ ...future.FUN            :function (...)  
[13:18:32.367]  $ future.call.arguments    : list()
[13:18:32.367]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.367]  $ ...future.elements_ii    :List of 5
[13:18:32.367]   ..$ : int 0
[13:18:32.367]   ..$ : int 0
[13:18:32.367]   ..$ : int 0
[13:18:32.367]   ..$ : int 0
[13:18:32.367]   ..$ : int 0
[13:18:32.367]  $ ...future.seeds_ii       :List of 5
[13:18:32.367]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[13:18:32.367]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[13:18:32.367]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[13:18:32.367]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[13:18:32.367]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[13:18:32.367]  $ ...future.globals.maxSize: NULL
[13:18:32.367]  - attr(*, "resolved")= logi FALSE
[13:18:32.367]  - attr(*, "total_size")= num 616
[13:18:32.367]  - attr(*, "where")=List of 5
[13:18:32.367]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:18:32.367]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:18:32.367]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:18:32.367]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:18:32.367]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:18:32.367]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.367]  - attr(*, "already-done")= logi TRUE
[13:18:32.374] - reassign environment for ‘...future.FUN’
[13:18:32.374] - copied ‘...future.FUN’ to environment
[13:18:32.374] - copied ‘future.call.arguments’ to environment
[13:18:32.374] - copied ‘...future.elements_ii’ to environment
[13:18:32.374] - copied ‘...future.seeds_ii’ to environment
[13:18:32.375] - copied ‘...future.globals.maxSize’ to environment
[13:18:32.375] assign_globals() ... done
[13:18:32.377] plan(): Setting new future strategy stack:
[13:18:32.377] List of future strategies:
[13:18:32.377] 1. sequential:
[13:18:32.377]    - args: function (..., envir = parent.frame())
[13:18:32.377]    - tweaked: FALSE
[13:18:32.377]    - call: NULL
[13:18:32.377] plan(): nbrOfWorkers() = 1
[13:18:32.378] plan(): Setting new future strategy stack:
[13:18:32.378] List of future strategies:
[13:18:32.378] 1. sequential:
[13:18:32.378]    - args: function (..., envir = parent.frame())
[13:18:32.378]    - tweaked: FALSE
[13:18:32.378]    - call: plan(strategy)
[13:18:32.379] plan(): nbrOfWorkers() = 1
[13:18:32.379] SequentialFuture started (and completed)
[13:18:32.379] - Launch lazy future ... done
[13:18:32.379] run() for ‘SequentialFuture’ ... done
[13:18:32.379] Created future:
[13:18:32.379] SequentialFuture:
[13:18:32.379] Label: ‘future_replicate-1’
[13:18:32.379] Expression:
[13:18:32.379] {
[13:18:32.379]     do.call(function(...) {
[13:18:32.379]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.379]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.379]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.379]             on.exit(options(oopts), add = TRUE)
[13:18:32.379]         }
[13:18:32.379]         {
[13:18:32.379]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.379]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.379]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.379]                   envir = globalenv(), inherits = FALSE)
[13:18:32.379]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.379]             })
[13:18:32.379]         }
[13:18:32.379]     }, args = future.call.arguments)
[13:18:32.379] }
[13:18:32.379] Lazy evaluation: FALSE
[13:18:32.379] Asynchronous evaluation: FALSE
[13:18:32.379] Local evaluation: TRUE
[13:18:32.379] Environment: R_GlobalEnv
[13:18:32.379] Capture standard output: TRUE
[13:18:32.379] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:32.379] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:32.379] Packages: <none>
[13:18:32.379] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:32.379] Resolved: TRUE
[13:18:32.379] Value: 280 bytes of class ‘list’
[13:18:32.379] Early signaling: FALSE
[13:18:32.379] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:32.379] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:18:32.380] Chunk #1 of 1 ... DONE
[13:18:32.380] Launching 1 futures (chunks) ... DONE
[13:18:32.380] Resolving 1 futures (chunks) ...
[13:18:32.381] resolve() on list ...
[13:18:32.381]  recursive: 0
[13:18:32.381]  length: 1
[13:18:32.381] 
[13:18:32.381] resolved() for ‘SequentialFuture’ ...
[13:18:32.381] - state: ‘finished’
[13:18:32.381] - run: TRUE
[13:18:32.381] - result: ‘FutureResult’
[13:18:32.381] resolved() for ‘SequentialFuture’ ... done
[13:18:32.381] Future #1
[13:18:32.382] signalConditionsASAP(SequentialFuture, pos=1) ...
[13:18:32.382] - nx: 1
[13:18:32.382] - relay: TRUE
[13:18:32.382] - stdout: TRUE
[13:18:32.382] - signal: TRUE
[13:18:32.382] - resignal: FALSE
[13:18:32.382] - force: TRUE
[13:18:32.382] - relayed: [n=1] FALSE
[13:18:32.382] - queued futures: [n=1] FALSE
[13:18:32.382]  - until=1
[13:18:32.382]  - relaying element #1
[13:18:32.383] - relayed: [n=1] TRUE
[13:18:32.383] - queued futures: [n=1] TRUE
[13:18:32.383] signalConditionsASAP(SequentialFuture, pos=1) ... done
[13:18:32.383]  length: 0 (resolved future 1)
[13:18:32.383] Relaying remaining futures
[13:18:32.383] signalConditionsASAP(NULL, pos=0) ...
[13:18:32.383] - nx: 1
[13:18:32.383] - relay: TRUE
[13:18:32.383] - stdout: TRUE
[13:18:32.383] - signal: TRUE
[13:18:32.384] - resignal: FALSE
[13:18:32.384] - force: TRUE
[13:18:32.384] - relayed: [n=1] TRUE
[13:18:32.384] - queued futures: [n=1] TRUE
 - flush all
[13:18:32.384] - relayed: [n=1] TRUE
[13:18:32.384] - queued futures: [n=1] TRUE
[13:18:32.384] signalConditionsASAP(NULL, pos=0) ... done
[13:18:32.384] resolve() on list ... DONE
[13:18:32.384]  - Number of value chunks collected: 1
[13:18:32.384] Resolving 1 futures (chunks) ... DONE
[13:18:32.385] Reducing values from 1 chunks ...
[13:18:32.385]  - Number of values collected after concatenation: 5
[13:18:32.385]  - Number of values expected: 5
[13:18:32.385] Reducing values from 1 chunks ... DONE
[13:18:32.385] future_lapply() ... DONE
- example(replicate) ...
[13:18:32.385] future_lapply() ...
[13:18:32.386] Generating random seeds ...
[13:18:32.386] Generating random seed streams for 5 elements ...
[13:18:32.386] Generating random seed streams for 5 elements ... DONE
[13:18:32.386] Generating random seeds ... DONE
[13:18:32.386] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:18:32.387] Number of chunks: 1
[13:18:32.387] getGlobalsAndPackagesXApply() ...
[13:18:32.387]  - future.globals: TRUE
[13:18:32.387] getGlobalsAndPackages() ...
[13:18:32.387] Searching for globals...
[13:18:32.389] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[13:18:32.389] Searching for globals ... DONE
[13:18:32.389] Resolving globals: FALSE
[13:18:32.390] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[13:18:32.390] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[13:18:32.390] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[13:18:32.390] 
[13:18:32.390] getGlobalsAndPackages() ... DONE
[13:18:32.390]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[13:18:32.390]  - needed namespaces: [n=0] 
[13:18:32.391] Finding globals ... DONE
[13:18:32.391]  - use_args: TRUE
[13:18:32.391]  - Getting '...' globals ...
[13:18:32.391] resolve() on list ...
[13:18:32.391]  recursive: 0
[13:18:32.391]  length: 1
[13:18:32.391]  elements: ‘...’
[13:18:32.391]  length: 0 (resolved future 1)
[13:18:32.392] resolve() on list ... DONE
[13:18:32.392]    - '...' content: [n=0] 
[13:18:32.392] List of 1
[13:18:32.392]  $ ...: list()
[13:18:32.392]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.392]  - attr(*, "where")=List of 1
[13:18:32.392]   ..$ ...:<environment: 0x55df1c4815b8> 
[13:18:32.392]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.392]  - attr(*, "resolved")= logi TRUE
[13:18:32.392]  - attr(*, "total_size")= num NA
[13:18:32.394]  - Getting '...' globals ... DONE
[13:18:32.394] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[13:18:32.395] List of 4
[13:18:32.395]  $ ...future.FUN:function (...)  
[13:18:32.395]  $ foo          :function (x = 1, y = 2)  
[13:18:32.395]  $ x            : num 3
[13:18:32.395]  $ ...          : list()
[13:18:32.395]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.395]  - attr(*, "where")=List of 4
[13:18:32.395]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:18:32.395]   ..$ foo          :<environment: R_EmptyEnv> 
[13:18:32.395]   ..$ x            :<environment: R_EmptyEnv> 
[13:18:32.395]   ..$ ...          :<environment: 0x55df1c4815b8> 
[13:18:32.395]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.395]  - attr(*, "resolved")= logi FALSE
[13:18:32.395]  - attr(*, "total_size")= num 2200
[13:18:32.398] Packages to be attached in all futures: [n=0] 
[13:18:32.398] getGlobalsAndPackagesXApply() ... DONE
[13:18:32.398] Number of futures (= number of chunks): 1
[13:18:32.399] Launching 1 futures (chunks) ...
[13:18:32.399] Chunk #1 of 1 ...
[13:18:32.399]  - Finding globals in 'X' for chunk #1 ...
[13:18:32.399] getGlobalsAndPackages() ...
[13:18:32.399] Searching for globals...
[13:18:32.399] 
[13:18:32.399] Searching for globals ... DONE
[13:18:32.399] - globals: [0] <none>
[13:18:32.401] getGlobalsAndPackages() ... DONE
[13:18:32.401]    + additional globals found: [n=0] 
[13:18:32.402]    + additional namespaces needed: [n=0] 
[13:18:32.402]  - Finding globals in 'X' for chunk #1 ... DONE
[13:18:32.402]  - Adjusted option 'future.globals.maxSize': 524288000 -> 5 * 524288000 = 2621440000 (bytes)
[13:18:32.402]  - seeds: [5] <seeds>
[13:18:32.402] getGlobalsAndPackages() ...
[13:18:32.402] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.402] Resolving globals: FALSE
[13:18:32.402] Tweak future expression to call with '...' arguments ...
[13:18:32.402] {
[13:18:32.402]     do.call(function(...) {
[13:18:32.402]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.402]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.402]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.402]             on.exit(options(oopts), add = TRUE)
[13:18:32.402]         }
[13:18:32.402]         {
[13:18:32.402]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.402]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.402]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.402]                   envir = globalenv(), inherits = FALSE)
[13:18:32.402]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.402]             })
[13:18:32.402]         }
[13:18:32.402]     }, args = future.call.arguments)
[13:18:32.402] }
[13:18:32.403] Tweak future expression to call with '...' arguments ... DONE
[13:18:32.403] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.403] 
[13:18:32.403] getGlobalsAndPackages() ... DONE
[13:18:32.404] run() for ‘Future’ ...
[13:18:32.404] - state: ‘created’
[13:18:32.404] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:18:32.404] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:18:32.404] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:18:32.404]   - Field: ‘label’
[13:18:32.404]   - Field: ‘local’
[13:18:32.405]   - Field: ‘owner’
[13:18:32.405]   - Field: ‘envir’
[13:18:32.405]   - Field: ‘packages’
[13:18:32.405]   - Field: ‘gc’
[13:18:32.405]   - Field: ‘conditions’
[13:18:32.405]   - Field: ‘expr’
[13:18:32.405]   - Field: ‘uuid’
[13:18:32.405]   - Field: ‘seed’
[13:18:32.405]   - Field: ‘version’
[13:18:32.405]   - Field: ‘result’
[13:18:32.406]   - Field: ‘asynchronous’
[13:18:32.406]   - Field: ‘calls’
[13:18:32.406]   - Field: ‘globals’
[13:18:32.406]   - Field: ‘stdout’
[13:18:32.406]   - Field: ‘earlySignal’
[13:18:32.406]   - Field: ‘lazy’
[13:18:32.406]   - Field: ‘state’
[13:18:32.406] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:18:32.406] - Launch lazy future ...
[13:18:32.406] Packages needed by the future expression (n = 0): <none>
[13:18:32.407] Packages needed by future strategies (n = 0): <none>
[13:18:32.407] {
[13:18:32.407]     {
[13:18:32.407]         {
[13:18:32.407]             ...future.startTime <- base::Sys.time()
[13:18:32.407]             {
[13:18:32.407]                 {
[13:18:32.407]                   {
[13:18:32.407]                     base::local({
[13:18:32.407]                       has_future <- base::requireNamespace("future", 
[13:18:32.407]                         quietly = TRUE)
[13:18:32.407]                       if (has_future) {
[13:18:32.407]                         ns <- base::getNamespace("future")
[13:18:32.407]                         version <- ns[[".package"]][["version"]]
[13:18:32.407]                         if (is.null(version)) 
[13:18:32.407]                           version <- utils::packageVersion("future")
[13:18:32.407]                       }
[13:18:32.407]                       else {
[13:18:32.407]                         version <- NULL
[13:18:32.407]                       }
[13:18:32.407]                       if (!has_future || version < "1.8.0") {
[13:18:32.407]                         info <- base::c(r_version = base::gsub("R version ", 
[13:18:32.407]                           "", base::R.version$version.string), 
[13:18:32.407]                           platform = base::sprintf("%s (%s-bit)", 
[13:18:32.407]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:32.407]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:32.407]                             "release", "version")], collapse = " "), 
[13:18:32.407]                           hostname = base::Sys.info()[["nodename"]])
[13:18:32.407]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:18:32.407]                           info)
[13:18:32.407]                         info <- base::paste(info, collapse = "; ")
[13:18:32.407]                         if (!has_future) {
[13:18:32.407]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:32.407]                             info)
[13:18:32.407]                         }
[13:18:32.407]                         else {
[13:18:32.407]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:32.407]                             info, version)
[13:18:32.407]                         }
[13:18:32.407]                         base::stop(msg)
[13:18:32.407]                       }
[13:18:32.407]                     })
[13:18:32.407]                   }
[13:18:32.407]                   options(future.plan = NULL)
[13:18:32.407]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.407]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:32.407]                 }
[13:18:32.407]                 ...future.workdir <- getwd()
[13:18:32.407]             }
[13:18:32.407]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:32.407]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:32.407]         }
[13:18:32.407]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:32.407]             future.globals.maxSize = 2621440000, future.globals.method = NULL, 
[13:18:32.407]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:32.407]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:32.407]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:32.407]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:32.407]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:32.407]             base::names(...future.oldOptions))
[13:18:32.407]     }
[13:18:32.407]     if (FALSE) {
[13:18:32.407]     }
[13:18:32.407]     else {
[13:18:32.407]         if (TRUE) {
[13:18:32.407]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:32.407]                 open = "w")
[13:18:32.407]         }
[13:18:32.407]         else {
[13:18:32.407]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:32.407]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:32.407]         }
[13:18:32.407]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:32.407]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:32.407]             base::sink(type = "output", split = FALSE)
[13:18:32.407]             base::close(...future.stdout)
[13:18:32.407]         }, add = TRUE)
[13:18:32.407]     }
[13:18:32.407]     ...future.frame <- base::sys.nframe()
[13:18:32.407]     ...future.conditions <- base::list()
[13:18:32.407]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:32.407]     if (FALSE) {
[13:18:32.407]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:32.407]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:32.407]     }
[13:18:32.407]     ...future.result <- base::tryCatch({
[13:18:32.407]         base::withCallingHandlers({
[13:18:32.407]             ...future.value <- base::withVisible(base::local({
[13:18:32.407]                 do.call(function(...) {
[13:18:32.407]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.407]                   if (!identical(...future.globals.maxSize.org, 
[13:18:32.407]                     ...future.globals.maxSize)) {
[13:18:32.407]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.407]                     on.exit(options(oopts), add = TRUE)
[13:18:32.407]                   }
[13:18:32.407]                   {
[13:18:32.407]                     lapply(seq_along(...future.elements_ii), 
[13:18:32.407]                       FUN = function(jj) {
[13:18:32.407]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.407]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.407]                           envir = globalenv(), inherits = FALSE)
[13:18:32.407]                         ...future.FUN(...future.X_jj, ...)
[13:18:32.407]                       })
[13:18:32.407]                   }
[13:18:32.407]                 }, args = future.call.arguments)
[13:18:32.407]             }))
[13:18:32.407]             future::FutureResult(value = ...future.value$value, 
[13:18:32.407]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.407]                   ...future.rng), globalenv = if (FALSE) 
[13:18:32.407]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:32.407]                     ...future.globalenv.names))
[13:18:32.407]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:32.407]         }, condition = base::local({
[13:18:32.407]             c <- base::c
[13:18:32.407]             inherits <- base::inherits
[13:18:32.407]             invokeRestart <- base::invokeRestart
[13:18:32.407]             length <- base::length
[13:18:32.407]             list <- base::list
[13:18:32.407]             seq.int <- base::seq.int
[13:18:32.407]             signalCondition <- base::signalCondition
[13:18:32.407]             sys.calls <- base::sys.calls
[13:18:32.407]             `[[` <- base::`[[`
[13:18:32.407]             `+` <- base::`+`
[13:18:32.407]             `<<-` <- base::`<<-`
[13:18:32.407]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:32.407]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:32.407]                   3L)]
[13:18:32.407]             }
[13:18:32.407]             function(cond) {
[13:18:32.407]                 is_error <- inherits(cond, "error")
[13:18:32.407]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:32.407]                   NULL)
[13:18:32.407]                 if (is_error) {
[13:18:32.407]                   sessionInformation <- function() {
[13:18:32.407]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:32.407]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:32.407]                       search = base::search(), system = base::Sys.info())
[13:18:32.407]                   }
[13:18:32.407]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.407]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:32.407]                     cond$call), session = sessionInformation(), 
[13:18:32.407]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:32.407]                   signalCondition(cond)
[13:18:32.407]                 }
[13:18:32.407]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:32.407]                 "immediateCondition"))) {
[13:18:32.407]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:32.407]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.407]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:32.407]                   if (TRUE && !signal) {
[13:18:32.407]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.407]                     {
[13:18:32.407]                       inherits <- base::inherits
[13:18:32.407]                       invokeRestart <- base::invokeRestart
[13:18:32.407]                       is.null <- base::is.null
[13:18:32.407]                       muffled <- FALSE
[13:18:32.407]                       if (inherits(cond, "message")) {
[13:18:32.407]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.407]                         if (muffled) 
[13:18:32.407]                           invokeRestart("muffleMessage")
[13:18:32.407]                       }
[13:18:32.407]                       else if (inherits(cond, "warning")) {
[13:18:32.407]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.407]                         if (muffled) 
[13:18:32.407]                           invokeRestart("muffleWarning")
[13:18:32.407]                       }
[13:18:32.407]                       else if (inherits(cond, "condition")) {
[13:18:32.407]                         if (!is.null(pattern)) {
[13:18:32.407]                           computeRestarts <- base::computeRestarts
[13:18:32.407]                           grepl <- base::grepl
[13:18:32.407]                           restarts <- computeRestarts(cond)
[13:18:32.407]                           for (restart in restarts) {
[13:18:32.407]                             name <- restart$name
[13:18:32.407]                             if (is.null(name)) 
[13:18:32.407]                               next
[13:18:32.407]                             if (!grepl(pattern, name)) 
[13:18:32.407]                               next
[13:18:32.407]                             invokeRestart(restart)
[13:18:32.407]                             muffled <- TRUE
[13:18:32.407]                             break
[13:18:32.407]                           }
[13:18:32.407]                         }
[13:18:32.407]                       }
[13:18:32.407]                       invisible(muffled)
[13:18:32.407]                     }
[13:18:32.407]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.407]                   }
[13:18:32.407]                 }
[13:18:32.407]                 else {
[13:18:32.407]                   if (TRUE) {
[13:18:32.407]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.407]                     {
[13:18:32.407]                       inherits <- base::inherits
[13:18:32.407]                       invokeRestart <- base::invokeRestart
[13:18:32.407]                       is.null <- base::is.null
[13:18:32.407]                       muffled <- FALSE
[13:18:32.407]                       if (inherits(cond, "message")) {
[13:18:32.407]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.407]                         if (muffled) 
[13:18:32.407]                           invokeRestart("muffleMessage")
[13:18:32.407]                       }
[13:18:32.407]                       else if (inherits(cond, "warning")) {
[13:18:32.407]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.407]                         if (muffled) 
[13:18:32.407]                           invokeRestart("muffleWarning")
[13:18:32.407]                       }
[13:18:32.407]                       else if (inherits(cond, "condition")) {
[13:18:32.407]                         if (!is.null(pattern)) {
[13:18:32.407]                           computeRestarts <- base::computeRestarts
[13:18:32.407]                           grepl <- base::grepl
[13:18:32.407]                           restarts <- computeRestarts(cond)
[13:18:32.407]                           for (restart in restarts) {
[13:18:32.407]                             name <- restart$name
[13:18:32.407]                             if (is.null(name)) 
[13:18:32.407]                               next
[13:18:32.407]                             if (!grepl(pattern, name)) 
[13:18:32.407]                               next
[13:18:32.407]                             invokeRestart(restart)
[13:18:32.407]                             muffled <- TRUE
[13:18:32.407]                             break
[13:18:32.407]                           }
[13:18:32.407]                         }
[13:18:32.407]                       }
[13:18:32.407]                       invisible(muffled)
[13:18:32.407]                     }
[13:18:32.407]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.407]                   }
[13:18:32.407]                 }
[13:18:32.407]             }
[13:18:32.407]         }))
[13:18:32.407]     }, error = function(ex) {
[13:18:32.407]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:32.407]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.407]                 ...future.rng), started = ...future.startTime, 
[13:18:32.407]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:32.407]             version = "1.8"), class = "FutureResult")
[13:18:32.407]     }, finally = {
[13:18:32.407]         if (!identical(...future.workdir, getwd())) 
[13:18:32.407]             setwd(...future.workdir)
[13:18:32.407]         {
[13:18:32.407]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:32.407]                 ...future.oldOptions$nwarnings <- NULL
[13:18:32.407]             }
[13:18:32.407]             base::options(...future.oldOptions)
[13:18:32.407]             if (.Platform$OS.type == "windows") {
[13:18:32.407]                 old_names <- names(...future.oldEnvVars)
[13:18:32.407]                 envs <- base::Sys.getenv()
[13:18:32.407]                 names <- names(envs)
[13:18:32.407]                 common <- intersect(names, old_names)
[13:18:32.407]                 added <- setdiff(names, old_names)
[13:18:32.407]                 removed <- setdiff(old_names, names)
[13:18:32.407]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:32.407]                   envs[common]]
[13:18:32.407]                 NAMES <- toupper(changed)
[13:18:32.407]                 args <- list()
[13:18:32.407]                 for (kk in seq_along(NAMES)) {
[13:18:32.407]                   name <- changed[[kk]]
[13:18:32.407]                   NAME <- NAMES[[kk]]
[13:18:32.407]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.407]                     next
[13:18:32.407]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.407]                 }
[13:18:32.407]                 NAMES <- toupper(added)
[13:18:32.407]                 for (kk in seq_along(NAMES)) {
[13:18:32.407]                   name <- added[[kk]]
[13:18:32.407]                   NAME <- NAMES[[kk]]
[13:18:32.407]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.407]                     next
[13:18:32.407]                   args[[name]] <- ""
[13:18:32.407]                 }
[13:18:32.407]                 NAMES <- toupper(removed)
[13:18:32.407]                 for (kk in seq_along(NAMES)) {
[13:18:32.407]                   name <- removed[[kk]]
[13:18:32.407]                   NAME <- NAMES[[kk]]
[13:18:32.407]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.407]                     next
[13:18:32.407]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.407]                 }
[13:18:32.407]                 if (length(args) > 0) 
[13:18:32.407]                   base::do.call(base::Sys.setenv, args = args)
[13:18:32.407]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:32.407]             }
[13:18:32.407]             else {
[13:18:32.407]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:32.407]             }
[13:18:32.407]             {
[13:18:32.407]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:32.407]                   0L) {
[13:18:32.407]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:32.407]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:32.407]                   base::options(opts)
[13:18:32.407]                 }
[13:18:32.407]                 {
[13:18:32.407]                   {
[13:18:32.407]                     base::assign(".Random.seed", c(10403L, 8L, 
[13:18:32.407]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[13:18:32.407]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[13:18:32.407]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[13:18:32.407]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[13:18:32.407]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[13:18:32.407]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[13:18:32.407]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[13:18:32.407]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[13:18:32.407]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[13:18:32.407]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[13:18:32.407]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[13:18:32.407]                     -1512233174L, -1985955764L, -425390065L, 
[13:18:32.407]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[13:18:32.407]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[13:18:32.407]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[13:18:32.407]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[13:18:32.407]                     1818328109L, -1284085436L, -1981489558L, 
[13:18:32.407]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[13:18:32.407]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[13:18:32.407]                     -1718567047L, -793788661L, -1133789126L, 
[13:18:32.407]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[13:18:32.407]                     -1823521982L, -1345991523L, -1672661737L, 
[13:18:32.407]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[13:18:32.407]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[13:18:32.407]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[13:18:32.407]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[13:18:32.407]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[13:18:32.407]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[13:18:32.407]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[13:18:32.407]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[13:18:32.407]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[13:18:32.407]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[13:18:32.407]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[13:18:32.407]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[13:18:32.407]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[13:18:32.407]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[13:18:32.407]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[13:18:32.407]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[13:18:32.407]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[13:18:32.407]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[13:18:32.407]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[13:18:32.407]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[13:18:32.407]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[13:18:32.407]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[13:18:32.407]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[13:18:32.407]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[13:18:32.407]                     -1119334354L, -1521015416L, -2041922421L, 
[13:18:32.407]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[13:18:32.407]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[13:18:32.407]                     1232111981L, -1801753084L, -1608606422L, 
[13:18:32.407]                     -1172096363L, 1420874031L, -1210473418L, 
[13:18:32.407]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[13:18:32.407]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[13:18:32.407]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[13:18:32.407]                     679371266L, -591318819L, -104578089L, -172818754L, 
[13:18:32.407]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[13:18:32.407]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[13:18:32.407]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[13:18:32.407]                     -332493318L, -1978392251L, -1691039632L, 
[13:18:32.407]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[13:18:32.407]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[13:18:32.407]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[13:18:32.407]                     87560756L, -87565624L, 426345146L, -699970416L, 
[13:18:32.407]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[13:18:32.407]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[13:18:32.407]                     -1178330196L, -687617348L, -1701912078L, 
[13:18:32.407]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[13:18:32.407]                     -1345416048L, 1816730492L, -1570431212L, 
[13:18:32.407]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[13:18:32.407]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[13:18:32.407]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[13:18:32.407]                     -1493184262L, -1943836976L, -590788308L, 
[13:18:32.407]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[13:18:32.407]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[13:18:32.407]                     1274857340L, -1205842638L, -1938479504L, 
[13:18:32.407]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[13:18:32.407]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[13:18:32.407]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[13:18:32.407]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[13:18:32.407]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[13:18:32.407]                     -1460751252L, 1201879444L, -1459788718L, 
[13:18:32.407]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[13:18:32.407]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[13:18:32.407]                     -420945808L, -1997735900L, -1838404552L, 
[13:18:32.407]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[13:18:32.407]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[13:18:32.407]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[13:18:32.407]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[13:18:32.407]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[13:18:32.407]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[13:18:32.407]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[13:18:32.407]                     942193650L, 751741680L, 689743428L, -18455976L, 
[13:18:32.407]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[13:18:32.407]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[13:18:32.407]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[13:18:32.407]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[13:18:32.407]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[13:18:32.407]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[13:18:32.407]                     -1357570110L, 1896595240L, -2066952276L, 
[13:18:32.407]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[13:18:32.407]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[13:18:32.407]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[13:18:32.407]                     769655120L, 236357794L, 181393736L, -13334772L, 
[13:18:32.407]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[13:18:32.407]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[13:18:32.407]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[13:18:32.407]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[13:18:32.407]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[13:18:32.407]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[13:18:32.407]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[13:18:32.407]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[13:18:32.407]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[13:18:32.407]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[13:18:32.407]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[13:18:32.407]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[13:18:32.407]                     -1365842884L, -438961294L, -1851472272L, 
[13:18:32.407]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[13:18:32.407]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[13:18:32.407]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[13:18:32.407]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[13:18:32.407]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[13:18:32.407]                     -594809770L, -2146766621L, -2013964635L, 
[13:18:32.407]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[13:18:32.407]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[13:18:32.407]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[13:18:32.407]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[13:18:32.407]                     -1426021878L, -1285634264L, 1507547537L, 
[13:18:32.407]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[13:18:32.407]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[13:18:32.407]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[13:18:32.407]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[13:18:32.407]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[13:18:32.407]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[13:18:32.407]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[13:18:32.407]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[13:18:32.407]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[13:18:32.407]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[13:18:32.407]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[13:18:32.407]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[13:18:32.407]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[13:18:32.407]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[13:18:32.407]                     -1604604761L, 1421229008L, -1268333714L, 
[13:18:32.407]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[13:18:32.407]                     -2070476623L, -2099222749L, 1141171236L, 
[13:18:32.407]                     -146426158L, -1797385433L, -1129376399L, 
[13:18:32.407]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[13:18:32.407]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[13:18:32.407]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[13:18:32.407]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[13:18:32.407]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[13:18:32.407]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[13:18:32.407]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[13:18:32.407]                     -1092079724L, -1765622238L, -1882554057L, 
[13:18:32.407]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[13:18:32.407]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[13:18:32.407]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[13:18:32.407]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[13:18:32.407]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[13:18:32.407]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[13:18:32.407]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[13:18:32.407]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[13:18:32.407]                     865377681L, -1127426242L), envir = base::globalenv(), 
[13:18:32.407]                       inherits = FALSE)
[13:18:32.407]                     NULL
[13:18:32.407]                   }
[13:18:32.407]                   options(future.plan = NULL)
[13:18:32.407]                   if (is.na(NA_character_)) 
[13:18:32.407]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.407]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:32.407]                   future::plan(list(function (..., envir = parent.frame()) 
[13:18:32.407]                   {
[13:18:32.407]                     future <- SequentialFuture(..., envir = envir)
[13:18:32.407]                     if (!future$lazy) 
[13:18:32.407]                       future <- run(future)
[13:18:32.407]                     invisible(future)
[13:18:32.407]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:32.407]                 }
[13:18:32.407]             }
[13:18:32.407]         }
[13:18:32.407]     })
[13:18:32.407]     if (TRUE) {
[13:18:32.407]         base::sink(type = "output", split = FALSE)
[13:18:32.407]         if (TRUE) {
[13:18:32.407]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:32.407]         }
[13:18:32.407]         else {
[13:18:32.407]             ...future.result["stdout"] <- base::list(NULL)
[13:18:32.407]         }
[13:18:32.407]         base::close(...future.stdout)
[13:18:32.407]         ...future.stdout <- NULL
[13:18:32.407]     }
[13:18:32.407]     ...future.result$conditions <- ...future.conditions
[13:18:32.407]     ...future.result$finished <- base::Sys.time()
[13:18:32.407]     ...future.result
[13:18:32.407] }
[13:18:32.410] assign_globals() ...
[13:18:32.410] List of 7
[13:18:32.410]  $ ...future.FUN            :function (...)  
[13:18:32.410]  $ foo                      :function (x = 1, y = 2)  
[13:18:32.410]  $ x                        : num 3
[13:18:32.410]  $ future.call.arguments    : list()
[13:18:32.410]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.410]  $ ...future.elements_ii    :List of 5
[13:18:32.410]   ..$ : int 0
[13:18:32.410]   ..$ : int 0
[13:18:32.410]   ..$ : int 0
[13:18:32.410]   ..$ : int 0
[13:18:32.410]   ..$ : int 0
[13:18:32.410]  $ ...future.seeds_ii       :List of 5
[13:18:32.410]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[13:18:32.410]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[13:18:32.410]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[13:18:32.410]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[13:18:32.410]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[13:18:32.410]  $ ...future.globals.maxSize: NULL
[13:18:32.410]  - attr(*, "resolved")= logi FALSE
[13:18:32.410]  - attr(*, "total_size")= num 2200
[13:18:32.410]  - attr(*, "where")=List of 7
[13:18:32.410]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:18:32.410]   ..$ foo                      :<environment: R_EmptyEnv> 
[13:18:32.410]   ..$ x                        :<environment: R_EmptyEnv> 
[13:18:32.410]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:18:32.410]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:18:32.410]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:18:32.410]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:18:32.410]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.410]  - attr(*, "already-done")= logi TRUE
[13:18:32.418] - reassign environment for ‘...future.FUN’
[13:18:32.418] - copied ‘...future.FUN’ to environment
[13:18:32.418] - reassign environment for ‘foo’
[13:18:32.418] - copied ‘foo’ to environment
[13:18:32.418] - copied ‘x’ to environment
[13:18:32.418] - copied ‘future.call.arguments’ to environment
[13:18:32.418] - copied ‘...future.elements_ii’ to environment
[13:18:32.418] - copied ‘...future.seeds_ii’ to environment
[13:18:32.419] - copied ‘...future.globals.maxSize’ to environment
[13:18:32.419] assign_globals() ... done
[13:18:32.419] plan(): Setting new future strategy stack:
[13:18:32.419] List of future strategies:
[13:18:32.419] 1. sequential:
[13:18:32.419]    - args: function (..., envir = parent.frame())
[13:18:32.419]    - tweaked: FALSE
[13:18:32.419]    - call: NULL
[13:18:32.419] plan(): nbrOfWorkers() = 1
[13:18:32.420] plan(): Setting new future strategy stack:
[13:18:32.420] List of future strategies:
[13:18:32.420] 1. sequential:
[13:18:32.420]    - args: function (..., envir = parent.frame())
[13:18:32.420]    - tweaked: FALSE
[13:18:32.420]    - call: plan(strategy)
[13:18:32.421] plan(): nbrOfWorkers() = 1
[13:18:32.421] SequentialFuture started (and completed)
[13:18:32.421] - Launch lazy future ... done
[13:18:32.421] run() for ‘SequentialFuture’ ... done
[13:18:32.421] Created future:
[13:18:32.421] SequentialFuture:
[13:18:32.421] Label: ‘future_replicate-1’
[13:18:32.421] Expression:
[13:18:32.421] {
[13:18:32.421]     do.call(function(...) {
[13:18:32.421]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.421]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.421]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.421]             on.exit(options(oopts), add = TRUE)
[13:18:32.421]         }
[13:18:32.421]         {
[13:18:32.421]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.421]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.421]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.421]                   envir = globalenv(), inherits = FALSE)
[13:18:32.421]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.421]             })
[13:18:32.421]         }
[13:18:32.421]     }, args = future.call.arguments)
[13:18:32.421] }
[13:18:32.421] Lazy evaluation: FALSE
[13:18:32.421] Asynchronous evaluation: FALSE
[13:18:32.421] Local evaluation: TRUE
[13:18:32.421] Environment: 0x55df1c482d58
[13:18:32.421] Capture standard output: TRUE
[13:18:32.421] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:32.421] Globals: 7 objects totaling 2.81 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, ...)
[13:18:32.421] Packages: <none>
[13:18:32.421] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:32.421] Resolved: TRUE
[13:18:32.421] Value: 320 bytes of class ‘list’
[13:18:32.421] Early signaling: FALSE
[13:18:32.421] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:32.421] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:18:32.422] Chunk #1 of 1 ... DONE
[13:18:32.423] Launching 1 futures (chunks) ... DONE
[13:18:32.423] Resolving 1 futures (chunks) ...
[13:18:32.423] resolve() on list ...
[13:18:32.423]  recursive: 0
[13:18:32.423]  length: 1
[13:18:32.423] 
[13:18:32.423] resolved() for ‘SequentialFuture’ ...
[13:18:32.423] - state: ‘finished’
[13:18:32.423] - run: TRUE
[13:18:32.423] - result: ‘FutureResult’
[13:18:32.423] resolved() for ‘SequentialFuture’ ... done
[13:18:32.424] Future #1
[13:18:32.424] signalConditionsASAP(SequentialFuture, pos=1) ...
[13:18:32.424] - nx: 1
[13:18:32.424] - relay: TRUE
[13:18:32.424] - stdout: TRUE
[13:18:32.424] - signal: TRUE
[13:18:32.424] - resignal: FALSE
[13:18:32.424] - force: TRUE
[13:18:32.424] - relayed: [n=1] FALSE
[13:18:32.424] - queued futures: [n=1] FALSE
[13:18:32.424]  - until=1
[13:18:32.425]  - relaying element #1
[13:18:32.425] - relayed: [n=1] TRUE
[13:18:32.425] - queued futures: [n=1] TRUE
[13:18:32.425] signalConditionsASAP(SequentialFuture, pos=1) ... done
[13:18:32.425]  length: 0 (resolved future 1)
[13:18:32.427] Relaying remaining futures
[13:18:32.427] signalConditionsASAP(NULL, pos=0) ...
[13:18:32.427] - nx: 1
[13:18:32.427] - relay: TRUE
[13:18:32.427] - stdout: TRUE
[13:18:32.427] - signal: TRUE
[13:18:32.428] - resignal: FALSE
[13:18:32.428] - force: TRUE
[13:18:32.428] - relayed: [n=1] TRUE
[13:18:32.428] - queued futures: [n=1] TRUE
 - flush all
[13:18:32.428] - relayed: [n=1] TRUE
[13:18:32.428] - queued futures: [n=1] TRUE
[13:18:32.428] signalConditionsASAP(NULL, pos=0) ... done
[13:18:32.428] resolve() on list ... DONE
[13:18:32.428]  - Number of value chunks collected: 1
[13:18:32.428] Resolving 1 futures (chunks) ... DONE
[13:18:32.429] Reducing values from 1 chunks ...
[13:18:32.429]  - Number of values collected after concatenation: 5
[13:18:32.429]  - Number of values expected: 5
[13:18:32.429] Reducing values from 1 chunks ... DONE
[13:18:32.429] future_lapply() ... DONE
[13:18:32.430] plan(): Setting new future strategy stack:
[13:18:32.430] List of future strategies:
[13:18:32.430] 1. sequential:
[13:18:32.430]    - args: function (..., envir = parent.frame())
[13:18:32.430]    - tweaked: FALSE
[13:18:32.430]    - call: plan(sequential)
[13:18:32.430] plan(): nbrOfWorkers() = 1
*** strategy = ‘sequential’ ... done
*** strategy = ‘multicore’ ...
[13:18:32.430] plan(): Setting new future strategy stack:
[13:18:32.430] List of future strategies:
[13:18:32.430] 1. multicore:
[13:18:32.430]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:18:32.430]    - tweaked: FALSE
[13:18:32.430]    - call: plan(strategy)
[13:18:32.434] plan(): nbrOfWorkers() = 2
[13:18:32.435] future_lapply() ...
[13:18:32.435] Generating random seeds ...
[13:18:32.435] Generating random seed streams for 5 elements ...
[13:18:32.435] Generating random seed streams for 5 elements ... DONE
[13:18:32.435] Generating random seeds ... DONE
[13:18:32.436] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:18:32.441] Number of chunks: 2
[13:18:32.441] getGlobalsAndPackagesXApply() ...
[13:18:32.441]  - future.globals: TRUE
[13:18:32.441] getGlobalsAndPackages() ...
[13:18:32.441] Searching for globals...
[13:18:32.442] - globals found: [2] ‘FUN’, ‘sample’
[13:18:32.442] Searching for globals ... DONE
[13:18:32.443] Resolving globals: FALSE
[13:18:32.443] The total size of the 1 globals is 616 bytes (616 bytes)
[13:18:32.443] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:18:32.443] - globals: [1] ‘FUN’
[13:18:32.443] 
[13:18:32.444] getGlobalsAndPackages() ... DONE
[13:18:32.444]  - globals found/used: [n=1] ‘FUN’
[13:18:32.444]  - needed namespaces: [n=0] 
[13:18:32.444] Finding globals ... DONE
[13:18:32.444]  - use_args: TRUE
[13:18:32.444]  - Getting '...' globals ...
[13:18:32.444] resolve() on list ...
[13:18:32.444]  recursive: 0
[13:18:32.444]  length: 1
[13:18:32.445]  elements: ‘...’
[13:18:32.445]  length: 0 (resolved future 1)
[13:18:32.445] resolve() on list ... DONE
[13:18:32.445]    - '...' content: [n=0] 
[13:18:32.445] List of 1
[13:18:32.445]  $ ...: list()
[13:18:32.445]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.445]  - attr(*, "where")=List of 1
[13:18:32.445]   ..$ ...:<environment: 0x55df1c1d3680> 
[13:18:32.445]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.445]  - attr(*, "resolved")= logi TRUE
[13:18:32.445]  - attr(*, "total_size")= num NA
[13:18:32.447]  - Getting '...' globals ... DONE
[13:18:32.448] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:18:32.448] List of 2
[13:18:32.448]  $ ...future.FUN:function (...)  
[13:18:32.448]  $ ...          : list()
[13:18:32.448]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.448]  - attr(*, "where")=List of 2
[13:18:32.448]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:18:32.448]   ..$ ...          :<environment: 0x55df1c1d3680> 
[13:18:32.448]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.448]  - attr(*, "resolved")= logi FALSE
[13:18:32.448]  - attr(*, "total_size")= num 616
[13:18:32.450] Packages to be attached in all futures: [n=0] 
[13:18:32.450] getGlobalsAndPackagesXApply() ... DONE
[13:18:32.451] Number of futures (= number of chunks): 2
[13:18:32.451] Launching 2 futures (chunks) ...
[13:18:32.451] Chunk #1 of 2 ...
[13:18:32.451]  - Finding globals in 'X' for chunk #1 ...
[13:18:32.451] getGlobalsAndPackages() ...
[13:18:32.451] Searching for globals...
[13:18:32.451] 
[13:18:32.451] Searching for globals ... DONE
[13:18:32.452] - globals: [0] <none>
[13:18:32.452] getGlobalsAndPackages() ... DONE
[13:18:32.452]    + additional globals found: [n=0] 
[13:18:32.452]    + additional namespaces needed: [n=0] 
[13:18:32.452]  - Finding globals in 'X' for chunk #1 ... DONE
[13:18:32.452]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:18:32.452]  - seeds: [2] <seeds>
[13:18:32.452] getGlobalsAndPackages() ...
[13:18:32.452] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.452] Resolving globals: FALSE
[13:18:32.453] Tweak future expression to call with '...' arguments ...
[13:18:32.453] {
[13:18:32.453]     do.call(function(...) {
[13:18:32.453]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.453]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.453]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.453]             on.exit(options(oopts), add = TRUE)
[13:18:32.453]         }
[13:18:32.453]         {
[13:18:32.453]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.453]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.453]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.453]                   envir = globalenv(), inherits = FALSE)
[13:18:32.453]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.453]             })
[13:18:32.453]         }
[13:18:32.453]     }, args = future.call.arguments)
[13:18:32.453] }
[13:18:32.453] Tweak future expression to call with '...' arguments ... DONE
[13:18:32.453] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.453] 
[13:18:32.454] getGlobalsAndPackages() ... DONE
[13:18:32.454] run() for ‘Future’ ...
[13:18:32.454] - state: ‘created’
[13:18:32.454] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:18:32.460] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:32.460] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:18:32.460]   - Field: ‘label’
[13:18:32.460]   - Field: ‘local’
[13:18:32.460]   - Field: ‘owner’
[13:18:32.460]   - Field: ‘envir’
[13:18:32.460]   - Field: ‘workers’
[13:18:32.461]   - Field: ‘packages’
[13:18:32.461]   - Field: ‘gc’
[13:18:32.461]   - Field: ‘job’
[13:18:32.461]   - Field: ‘conditions’
[13:18:32.461]   - Field: ‘expr’
[13:18:32.461]   - Field: ‘uuid’
[13:18:32.461]   - Field: ‘seed’
[13:18:32.461]   - Field: ‘version’
[13:18:32.461]   - Field: ‘result’
[13:18:32.461]   - Field: ‘asynchronous’
[13:18:32.462]   - Field: ‘calls’
[13:18:32.462]   - Field: ‘globals’
[13:18:32.462]   - Field: ‘stdout’
[13:18:32.462]   - Field: ‘earlySignal’
[13:18:32.462]   - Field: ‘lazy’
[13:18:32.462]   - Field: ‘state’
[13:18:32.462] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:18:32.462] - Launch lazy future ...
[13:18:32.463] Packages needed by the future expression (n = 0): <none>
[13:18:32.463] Packages needed by future strategies (n = 0): <none>
[13:18:32.464] {
[13:18:32.464]     {
[13:18:32.464]         {
[13:18:32.464]             ...future.startTime <- base::Sys.time()
[13:18:32.464]             {
[13:18:32.464]                 {
[13:18:32.464]                   {
[13:18:32.464]                     {
[13:18:32.464]                       base::local({
[13:18:32.464]                         has_future <- base::requireNamespace("future", 
[13:18:32.464]                           quietly = TRUE)
[13:18:32.464]                         if (has_future) {
[13:18:32.464]                           ns <- base::getNamespace("future")
[13:18:32.464]                           version <- ns[[".package"]][["version"]]
[13:18:32.464]                           if (is.null(version)) 
[13:18:32.464]                             version <- utils::packageVersion("future")
[13:18:32.464]                         }
[13:18:32.464]                         else {
[13:18:32.464]                           version <- NULL
[13:18:32.464]                         }
[13:18:32.464]                         if (!has_future || version < "1.8.0") {
[13:18:32.464]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:32.464]                             "", base::R.version$version.string), 
[13:18:32.464]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:32.464]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:32.464]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:32.464]                               "release", "version")], collapse = " "), 
[13:18:32.464]                             hostname = base::Sys.info()[["nodename"]])
[13:18:32.464]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:32.464]                             info)
[13:18:32.464]                           info <- base::paste(info, collapse = "; ")
[13:18:32.464]                           if (!has_future) {
[13:18:32.464]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:32.464]                               info)
[13:18:32.464]                           }
[13:18:32.464]                           else {
[13:18:32.464]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:32.464]                               info, version)
[13:18:32.464]                           }
[13:18:32.464]                           base::stop(msg)
[13:18:32.464]                         }
[13:18:32.464]                       })
[13:18:32.464]                     }
[13:18:32.464]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:32.464]                     base::options(mc.cores = 1L)
[13:18:32.464]                   }
[13:18:32.464]                   options(future.plan = NULL)
[13:18:32.464]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.464]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:32.464]                 }
[13:18:32.464]                 ...future.workdir <- getwd()
[13:18:32.464]             }
[13:18:32.464]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:32.464]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:32.464]         }
[13:18:32.464]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:32.464]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:18:32.464]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:32.464]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:32.464]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:32.464]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:32.464]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:32.464]             base::names(...future.oldOptions))
[13:18:32.464]     }
[13:18:32.464]     if (FALSE) {
[13:18:32.464]     }
[13:18:32.464]     else {
[13:18:32.464]         if (TRUE) {
[13:18:32.464]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:32.464]                 open = "w")
[13:18:32.464]         }
[13:18:32.464]         else {
[13:18:32.464]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:32.464]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:32.464]         }
[13:18:32.464]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:32.464]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:32.464]             base::sink(type = "output", split = FALSE)
[13:18:32.464]             base::close(...future.stdout)
[13:18:32.464]         }, add = TRUE)
[13:18:32.464]     }
[13:18:32.464]     ...future.frame <- base::sys.nframe()
[13:18:32.464]     ...future.conditions <- base::list()
[13:18:32.464]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:32.464]     if (FALSE) {
[13:18:32.464]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:32.464]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:32.464]     }
[13:18:32.464]     ...future.result <- base::tryCatch({
[13:18:32.464]         base::withCallingHandlers({
[13:18:32.464]             ...future.value <- base::withVisible(base::local({
[13:18:32.464]                 withCallingHandlers({
[13:18:32.464]                   {
[13:18:32.464]                     do.call(function(...) {
[13:18:32.464]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.464]                       if (!identical(...future.globals.maxSize.org, 
[13:18:32.464]                         ...future.globals.maxSize)) {
[13:18:32.464]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.464]                         on.exit(options(oopts), add = TRUE)
[13:18:32.464]                       }
[13:18:32.464]                       {
[13:18:32.464]                         lapply(seq_along(...future.elements_ii), 
[13:18:32.464]                           FUN = function(jj) {
[13:18:32.464]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.464]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.464]                               envir = globalenv(), inherits = FALSE)
[13:18:32.464]                             ...future.FUN(...future.X_jj, ...)
[13:18:32.464]                           })
[13:18:32.464]                       }
[13:18:32.464]                     }, args = future.call.arguments)
[13:18:32.464]                   }
[13:18:32.464]                 }, immediateCondition = function(cond) {
[13:18:32.464]                   save_rds <- function (object, pathname, ...) 
[13:18:32.464]                   {
[13:18:32.464]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:18:32.464]                     if (file_test("-f", pathname_tmp)) {
[13:18:32.464]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.464]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:18:32.464]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.464]                         fi_tmp[["mtime"]])
[13:18:32.464]                     }
[13:18:32.464]                     tryCatch({
[13:18:32.464]                       saveRDS(object, file = pathname_tmp, ...)
[13:18:32.464]                     }, error = function(ex) {
[13:18:32.464]                       msg <- conditionMessage(ex)
[13:18:32.464]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.464]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:18:32.464]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.464]                         fi_tmp[["mtime"]], msg)
[13:18:32.464]                       ex$message <- msg
[13:18:32.464]                       stop(ex)
[13:18:32.464]                     })
[13:18:32.464]                     stopifnot(file_test("-f", pathname_tmp))
[13:18:32.464]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:18:32.464]                     if (!res || file_test("-f", pathname_tmp)) {
[13:18:32.464]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.464]                       fi <- file.info(pathname)
[13:18:32.464]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:18:32.464]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.464]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:18:32.464]                         fi[["size"]], fi[["mtime"]])
[13:18:32.464]                       stop(msg)
[13:18:32.464]                     }
[13:18:32.464]                     invisible(pathname)
[13:18:32.464]                   }
[13:18:32.464]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:18:32.464]                     rootPath = tempdir()) 
[13:18:32.464]                   {
[13:18:32.464]                     obj <- list(time = Sys.time(), condition = cond)
[13:18:32.464]                     file <- tempfile(pattern = class(cond)[1], 
[13:18:32.464]                       tmpdir = path, fileext = ".rds")
[13:18:32.464]                     save_rds(obj, file)
[13:18:32.464]                   }
[13:18:32.464]                   saveImmediateCondition(cond, path = "/tmp/RtmpPPCpJF/.future/immediateConditions")
[13:18:32.464]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.464]                   {
[13:18:32.464]                     inherits <- base::inherits
[13:18:32.464]                     invokeRestart <- base::invokeRestart
[13:18:32.464]                     is.null <- base::is.null
[13:18:32.464]                     muffled <- FALSE
[13:18:32.464]                     if (inherits(cond, "message")) {
[13:18:32.464]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:32.464]                       if (muffled) 
[13:18:32.464]                         invokeRestart("muffleMessage")
[13:18:32.464]                     }
[13:18:32.464]                     else if (inherits(cond, "warning")) {
[13:18:32.464]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:32.464]                       if (muffled) 
[13:18:32.464]                         invokeRestart("muffleWarning")
[13:18:32.464]                     }
[13:18:32.464]                     else if (inherits(cond, "condition")) {
[13:18:32.464]                       if (!is.null(pattern)) {
[13:18:32.464]                         computeRestarts <- base::computeRestarts
[13:18:32.464]                         grepl <- base::grepl
[13:18:32.464]                         restarts <- computeRestarts(cond)
[13:18:32.464]                         for (restart in restarts) {
[13:18:32.464]                           name <- restart$name
[13:18:32.464]                           if (is.null(name)) 
[13:18:32.464]                             next
[13:18:32.464]                           if (!grepl(pattern, name)) 
[13:18:32.464]                             next
[13:18:32.464]                           invokeRestart(restart)
[13:18:32.464]                           muffled <- TRUE
[13:18:32.464]                           break
[13:18:32.464]                         }
[13:18:32.464]                       }
[13:18:32.464]                     }
[13:18:32.464]                     invisible(muffled)
[13:18:32.464]                   }
[13:18:32.464]                   muffleCondition(cond)
[13:18:32.464]                 })
[13:18:32.464]             }))
[13:18:32.464]             future::FutureResult(value = ...future.value$value, 
[13:18:32.464]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.464]                   ...future.rng), globalenv = if (FALSE) 
[13:18:32.464]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:32.464]                     ...future.globalenv.names))
[13:18:32.464]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:32.464]         }, condition = base::local({
[13:18:32.464]             c <- base::c
[13:18:32.464]             inherits <- base::inherits
[13:18:32.464]             invokeRestart <- base::invokeRestart
[13:18:32.464]             length <- base::length
[13:18:32.464]             list <- base::list
[13:18:32.464]             seq.int <- base::seq.int
[13:18:32.464]             signalCondition <- base::signalCondition
[13:18:32.464]             sys.calls <- base::sys.calls
[13:18:32.464]             `[[` <- base::`[[`
[13:18:32.464]             `+` <- base::`+`
[13:18:32.464]             `<<-` <- base::`<<-`
[13:18:32.464]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:32.464]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:32.464]                   3L)]
[13:18:32.464]             }
[13:18:32.464]             function(cond) {
[13:18:32.464]                 is_error <- inherits(cond, "error")
[13:18:32.464]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:32.464]                   NULL)
[13:18:32.464]                 if (is_error) {
[13:18:32.464]                   sessionInformation <- function() {
[13:18:32.464]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:32.464]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:32.464]                       search = base::search(), system = base::Sys.info())
[13:18:32.464]                   }
[13:18:32.464]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.464]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:32.464]                     cond$call), session = sessionInformation(), 
[13:18:32.464]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:32.464]                   signalCondition(cond)
[13:18:32.464]                 }
[13:18:32.464]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:32.464]                 "immediateCondition"))) {
[13:18:32.464]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:32.464]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.464]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:32.464]                   if (TRUE && !signal) {
[13:18:32.464]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.464]                     {
[13:18:32.464]                       inherits <- base::inherits
[13:18:32.464]                       invokeRestart <- base::invokeRestart
[13:18:32.464]                       is.null <- base::is.null
[13:18:32.464]                       muffled <- FALSE
[13:18:32.464]                       if (inherits(cond, "message")) {
[13:18:32.464]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.464]                         if (muffled) 
[13:18:32.464]                           invokeRestart("muffleMessage")
[13:18:32.464]                       }
[13:18:32.464]                       else if (inherits(cond, "warning")) {
[13:18:32.464]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.464]                         if (muffled) 
[13:18:32.464]                           invokeRestart("muffleWarning")
[13:18:32.464]                       }
[13:18:32.464]                       else if (inherits(cond, "condition")) {
[13:18:32.464]                         if (!is.null(pattern)) {
[13:18:32.464]                           computeRestarts <- base::computeRestarts
[13:18:32.464]                           grepl <- base::grepl
[13:18:32.464]                           restarts <- computeRestarts(cond)
[13:18:32.464]                           for (restart in restarts) {
[13:18:32.464]                             name <- restart$name
[13:18:32.464]                             if (is.null(name)) 
[13:18:32.464]                               next
[13:18:32.464]                             if (!grepl(pattern, name)) 
[13:18:32.464]                               next
[13:18:32.464]                             invokeRestart(restart)
[13:18:32.464]                             muffled <- TRUE
[13:18:32.464]                             break
[13:18:32.464]                           }
[13:18:32.464]                         }
[13:18:32.464]                       }
[13:18:32.464]                       invisible(muffled)
[13:18:32.464]                     }
[13:18:32.464]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.464]                   }
[13:18:32.464]                 }
[13:18:32.464]                 else {
[13:18:32.464]                   if (TRUE) {
[13:18:32.464]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.464]                     {
[13:18:32.464]                       inherits <- base::inherits
[13:18:32.464]                       invokeRestart <- base::invokeRestart
[13:18:32.464]                       is.null <- base::is.null
[13:18:32.464]                       muffled <- FALSE
[13:18:32.464]                       if (inherits(cond, "message")) {
[13:18:32.464]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.464]                         if (muffled) 
[13:18:32.464]                           invokeRestart("muffleMessage")
[13:18:32.464]                       }
[13:18:32.464]                       else if (inherits(cond, "warning")) {
[13:18:32.464]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.464]                         if (muffled) 
[13:18:32.464]                           invokeRestart("muffleWarning")
[13:18:32.464]                       }
[13:18:32.464]                       else if (inherits(cond, "condition")) {
[13:18:32.464]                         if (!is.null(pattern)) {
[13:18:32.464]                           computeRestarts <- base::computeRestarts
[13:18:32.464]                           grepl <- base::grepl
[13:18:32.464]                           restarts <- computeRestarts(cond)
[13:18:32.464]                           for (restart in restarts) {
[13:18:32.464]                             name <- restart$name
[13:18:32.464]                             if (is.null(name)) 
[13:18:32.464]                               next
[13:18:32.464]                             if (!grepl(pattern, name)) 
[13:18:32.464]                               next
[13:18:32.464]                             invokeRestart(restart)
[13:18:32.464]                             muffled <- TRUE
[13:18:32.464]                             break
[13:18:32.464]                           }
[13:18:32.464]                         }
[13:18:32.464]                       }
[13:18:32.464]                       invisible(muffled)
[13:18:32.464]                     }
[13:18:32.464]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.464]                   }
[13:18:32.464]                 }
[13:18:32.464]             }
[13:18:32.464]         }))
[13:18:32.464]     }, error = function(ex) {
[13:18:32.464]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:32.464]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.464]                 ...future.rng), started = ...future.startTime, 
[13:18:32.464]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:32.464]             version = "1.8"), class = "FutureResult")
[13:18:32.464]     }, finally = {
[13:18:32.464]         if (!identical(...future.workdir, getwd())) 
[13:18:32.464]             setwd(...future.workdir)
[13:18:32.464]         {
[13:18:32.464]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:32.464]                 ...future.oldOptions$nwarnings <- NULL
[13:18:32.464]             }
[13:18:32.464]             base::options(...future.oldOptions)
[13:18:32.464]             if (.Platform$OS.type == "windows") {
[13:18:32.464]                 old_names <- names(...future.oldEnvVars)
[13:18:32.464]                 envs <- base::Sys.getenv()
[13:18:32.464]                 names <- names(envs)
[13:18:32.464]                 common <- intersect(names, old_names)
[13:18:32.464]                 added <- setdiff(names, old_names)
[13:18:32.464]                 removed <- setdiff(old_names, names)
[13:18:32.464]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:32.464]                   envs[common]]
[13:18:32.464]                 NAMES <- toupper(changed)
[13:18:32.464]                 args <- list()
[13:18:32.464]                 for (kk in seq_along(NAMES)) {
[13:18:32.464]                   name <- changed[[kk]]
[13:18:32.464]                   NAME <- NAMES[[kk]]
[13:18:32.464]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.464]                     next
[13:18:32.464]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.464]                 }
[13:18:32.464]                 NAMES <- toupper(added)
[13:18:32.464]                 for (kk in seq_along(NAMES)) {
[13:18:32.464]                   name <- added[[kk]]
[13:18:32.464]                   NAME <- NAMES[[kk]]
[13:18:32.464]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.464]                     next
[13:18:32.464]                   args[[name]] <- ""
[13:18:32.464]                 }
[13:18:32.464]                 NAMES <- toupper(removed)
[13:18:32.464]                 for (kk in seq_along(NAMES)) {
[13:18:32.464]                   name <- removed[[kk]]
[13:18:32.464]                   NAME <- NAMES[[kk]]
[13:18:32.464]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.464]                     next
[13:18:32.464]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.464]                 }
[13:18:32.464]                 if (length(args) > 0) 
[13:18:32.464]                   base::do.call(base::Sys.setenv, args = args)
[13:18:32.464]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:32.464]             }
[13:18:32.464]             else {
[13:18:32.464]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:32.464]             }
[13:18:32.464]             {
[13:18:32.464]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:32.464]                   0L) {
[13:18:32.464]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:32.464]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:32.464]                   base::options(opts)
[13:18:32.464]                 }
[13:18:32.464]                 {
[13:18:32.464]                   {
[13:18:32.464]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:32.464]                     NULL
[13:18:32.464]                   }
[13:18:32.464]                   options(future.plan = NULL)
[13:18:32.464]                   if (is.na(NA_character_)) 
[13:18:32.464]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.464]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:32.464]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:18:32.464]                     envir = parent.frame()) 
[13:18:32.464]                   {
[13:18:32.464]                     default_workers <- missing(workers)
[13:18:32.464]                     if (is.function(workers)) 
[13:18:32.464]                       workers <- workers()
[13:18:32.464]                     workers <- structure(as.integer(workers), 
[13:18:32.464]                       class = class(workers))
[13:18:32.464]                     stop_if_not(is.finite(workers), workers >= 
[13:18:32.464]                       1L)
[13:18:32.464]                     if ((workers == 1L && !inherits(workers, 
[13:18:32.464]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:18:32.464]                       if (default_workers) 
[13:18:32.464]                         supportsMulticore(warn = TRUE)
[13:18:32.464]                       return(sequential(..., envir = envir))
[13:18:32.464]                     }
[13:18:32.464]                     oopts <- options(mc.cores = workers)
[13:18:32.464]                     on.exit(options(oopts))
[13:18:32.464]                     future <- MulticoreFuture(..., workers = workers, 
[13:18:32.464]                       envir = envir)
[13:18:32.464]                     if (!future$lazy) 
[13:18:32.464]                       future <- run(future)
[13:18:32.464]                     invisible(future)
[13:18:32.464]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:32.464]                 }
[13:18:32.464]             }
[13:18:32.464]         }
[13:18:32.464]     })
[13:18:32.464]     if (TRUE) {
[13:18:32.464]         base::sink(type = "output", split = FALSE)
[13:18:32.464]         if (TRUE) {
[13:18:32.464]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:32.464]         }
[13:18:32.464]         else {
[13:18:32.464]             ...future.result["stdout"] <- base::list(NULL)
[13:18:32.464]         }
[13:18:32.464]         base::close(...future.stdout)
[13:18:32.464]         ...future.stdout <- NULL
[13:18:32.464]     }
[13:18:32.464]     ...future.result$conditions <- ...future.conditions
[13:18:32.464]     ...future.result$finished <- base::Sys.time()
[13:18:32.464]     ...future.result
[13:18:32.464] }
[13:18:32.466] assign_globals() ...
[13:18:32.466] List of 5
[13:18:32.466]  $ ...future.FUN            :function (...)  
[13:18:32.466]  $ future.call.arguments    : list()
[13:18:32.466]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.466]  $ ...future.elements_ii    :List of 2
[13:18:32.466]   ..$ : int 0
[13:18:32.466]   ..$ : int 0
[13:18:32.466]  $ ...future.seeds_ii       :List of 2
[13:18:32.466]   ..$ : int [1:7] 10407 800596211 191202253 -1245543361 -1911991084 -470201595 630973807
[13:18:32.466]   ..$ : int [1:7] 10407 336362669 -1847432762 -712550016 1068830663 1731026700 1489470838
[13:18:32.466]  $ ...future.globals.maxSize: NULL
[13:18:32.466]  - attr(*, "resolved")= logi FALSE
[13:18:32.466]  - attr(*, "total_size")= num 616
[13:18:32.466]  - attr(*, "where")=List of 5
[13:18:32.466]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:18:32.466]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:18:32.466]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:18:32.466]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:18:32.466]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:18:32.466]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.466]  - attr(*, "already-done")= logi TRUE
[13:18:32.472] - reassign environment for ‘...future.FUN’
[13:18:32.472] - copied ‘...future.FUN’ to environment
[13:18:32.472] - copied ‘future.call.arguments’ to environment
[13:18:32.472] - copied ‘...future.elements_ii’ to environment
[13:18:32.472] - copied ‘...future.seeds_ii’ to environment
[13:18:32.472] - copied ‘...future.globals.maxSize’ to environment
[13:18:32.473] assign_globals() ... done
[13:18:32.473] requestCore(): workers = 2
[13:18:32.476] MulticoreFuture started
[13:18:32.476] - Launch lazy future ... done
[13:18:32.477] run() for ‘MulticoreFuture’ ... done
[13:18:32.477] plan(): Setting new future strategy stack:
[13:18:32.477] Created future:
[13:18:32.477] List of future strategies:
[13:18:32.477] 1. sequential:
[13:18:32.477]    - args: function (..., envir = parent.frame())
[13:18:32.477]    - tweaked: FALSE
[13:18:32.477]    - call: NULL
[13:18:32.478] plan(): nbrOfWorkers() = 1
[13:18:32.480] plan(): Setting new future strategy stack:
[13:18:32.480] List of future strategies:
[13:18:32.480] 1. multicore:
[13:18:32.480]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:18:32.480]    - tweaked: FALSE
[13:18:32.480]    - call: plan(strategy)
[13:18:32.485] plan(): nbrOfWorkers() = 2
[13:18:32.477] MulticoreFuture:
[13:18:32.477] Label: ‘future_replicate-1’
[13:18:32.477] Expression:
[13:18:32.477] {
[13:18:32.477]     do.call(function(...) {
[13:18:32.477]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.477]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.477]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.477]             on.exit(options(oopts), add = TRUE)
[13:18:32.477]         }
[13:18:32.477]         {
[13:18:32.477]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.477]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.477]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.477]                   envir = globalenv(), inherits = FALSE)
[13:18:32.477]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.477]             })
[13:18:32.477]         }
[13:18:32.477]     }, args = future.call.arguments)
[13:18:32.477] }
[13:18:32.477] Lazy evaluation: FALSE
[13:18:32.477] Asynchronous evaluation: TRUE
[13:18:32.477] Local evaluation: TRUE
[13:18:32.477] Environment: R_GlobalEnv
[13:18:32.477] Capture standard output: TRUE
[13:18:32.477] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:32.477] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:32.477] Packages: <none>
[13:18:32.477] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:32.477] Resolved: TRUE
[13:18:32.477] Value: <not collected>
[13:18:32.477] Conditions captured: <none>
[13:18:32.477] Early signaling: FALSE
[13:18:32.477] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:32.477] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:32.486] Chunk #1 of 2 ... DONE
[13:18:32.486] Chunk #2 of 2 ...
[13:18:32.487]  - Finding globals in 'X' for chunk #2 ...
[13:18:32.487] getGlobalsAndPackages() ...
[13:18:32.487] Searching for globals...
[13:18:32.487] 
[13:18:32.488] Searching for globals ... DONE
[13:18:32.488] - globals: [0] <none>
[13:18:32.488] getGlobalsAndPackages() ... DONE
[13:18:32.488]    + additional globals found: [n=0] 
[13:18:32.488]    + additional namespaces needed: [n=0] 
[13:18:32.488]  - Finding globals in 'X' for chunk #2 ... DONE
[13:18:32.488]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[13:18:32.489]  - seeds: [3] <seeds>
[13:18:32.489] getGlobalsAndPackages() ...
[13:18:32.489] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.489] Resolving globals: FALSE
[13:18:32.489] Tweak future expression to call with '...' arguments ...
[13:18:32.489] {
[13:18:32.489]     do.call(function(...) {
[13:18:32.489]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.489]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.489]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.489]             on.exit(options(oopts), add = TRUE)
[13:18:32.489]         }
[13:18:32.489]         {
[13:18:32.489]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.489]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.489]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.489]                   envir = globalenv(), inherits = FALSE)
[13:18:32.489]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.489]             })
[13:18:32.489]         }
[13:18:32.489]     }, args = future.call.arguments)
[13:18:32.489] }
[13:18:32.490] Tweak future expression to call with '...' arguments ... DONE
[13:18:32.491] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.491] 
[13:18:32.491] getGlobalsAndPackages() ... DONE
[13:18:32.491] run() for ‘Future’ ...
[13:18:32.492] - state: ‘created’
[13:18:32.492] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:18:32.496] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:32.496] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:18:32.497]   - Field: ‘label’
[13:18:32.497]   - Field: ‘local’
[13:18:32.497]   - Field: ‘owner’
[13:18:32.497]   - Field: ‘envir’
[13:18:32.497]   - Field: ‘workers’
[13:18:32.497]   - Field: ‘packages’
[13:18:32.497]   - Field: ‘gc’
[13:18:32.498]   - Field: ‘job’
[13:18:32.498]   - Field: ‘conditions’
[13:18:32.498]   - Field: ‘expr’
[13:18:32.498]   - Field: ‘uuid’
[13:18:32.498]   - Field: ‘seed’
[13:18:32.498]   - Field: ‘version’
[13:18:32.498]   - Field: ‘result’
[13:18:32.499]   - Field: ‘asynchronous’
[13:18:32.499]   - Field: ‘calls’
[13:18:32.499]   - Field: ‘globals’
[13:18:32.499]   - Field: ‘stdout’
[13:18:32.499]   - Field: ‘earlySignal’
[13:18:32.499]   - Field: ‘lazy’
[13:18:32.499]   - Field: ‘state’
[13:18:32.499] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:18:32.500] - Launch lazy future ...
[13:18:32.500] Packages needed by the future expression (n = 0): <none>
[13:18:32.500] Packages needed by future strategies (n = 0): <none>
[13:18:32.505] {
[13:18:32.505]     {
[13:18:32.505]         {
[13:18:32.505]             ...future.startTime <- base::Sys.time()
[13:18:32.505]             {
[13:18:32.505]                 {
[13:18:32.505]                   {
[13:18:32.505]                     {
[13:18:32.505]                       base::local({
[13:18:32.505]                         has_future <- base::requireNamespace("future", 
[13:18:32.505]                           quietly = TRUE)
[13:18:32.505]                         if (has_future) {
[13:18:32.505]                           ns <- base::getNamespace("future")
[13:18:32.505]                           version <- ns[[".package"]][["version"]]
[13:18:32.505]                           if (is.null(version)) 
[13:18:32.505]                             version <- utils::packageVersion("future")
[13:18:32.505]                         }
[13:18:32.505]                         else {
[13:18:32.505]                           version <- NULL
[13:18:32.505]                         }
[13:18:32.505]                         if (!has_future || version < "1.8.0") {
[13:18:32.505]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:32.505]                             "", base::R.version$version.string), 
[13:18:32.505]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:32.505]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:32.505]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:32.505]                               "release", "version")], collapse = " "), 
[13:18:32.505]                             hostname = base::Sys.info()[["nodename"]])
[13:18:32.505]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:32.505]                             info)
[13:18:32.505]                           info <- base::paste(info, collapse = "; ")
[13:18:32.505]                           if (!has_future) {
[13:18:32.505]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:32.505]                               info)
[13:18:32.505]                           }
[13:18:32.505]                           else {
[13:18:32.505]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:32.505]                               info, version)
[13:18:32.505]                           }
[13:18:32.505]                           base::stop(msg)
[13:18:32.505]                         }
[13:18:32.505]                       })
[13:18:32.505]                     }
[13:18:32.505]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:32.505]                     base::options(mc.cores = 1L)
[13:18:32.505]                   }
[13:18:32.505]                   options(future.plan = NULL)
[13:18:32.505]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.505]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:32.505]                 }
[13:18:32.505]                 ...future.workdir <- getwd()
[13:18:32.505]             }
[13:18:32.505]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:32.505]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:32.505]         }
[13:18:32.505]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:32.505]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[13:18:32.505]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:32.505]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:32.505]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:32.505]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:32.505]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:32.505]             base::names(...future.oldOptions))
[13:18:32.505]     }
[13:18:32.505]     if (FALSE) {
[13:18:32.505]     }
[13:18:32.505]     else {
[13:18:32.505]         if (TRUE) {
[13:18:32.505]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:32.505]                 open = "w")
[13:18:32.505]         }
[13:18:32.505]         else {
[13:18:32.505]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:32.505]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:32.505]         }
[13:18:32.505]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:32.505]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:32.505]             base::sink(type = "output", split = FALSE)
[13:18:32.505]             base::close(...future.stdout)
[13:18:32.505]         }, add = TRUE)
[13:18:32.505]     }
[13:18:32.505]     ...future.frame <- base::sys.nframe()
[13:18:32.505]     ...future.conditions <- base::list()
[13:18:32.505]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:32.505]     if (FALSE) {
[13:18:32.505]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:32.505]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:32.505]     }
[13:18:32.505]     ...future.result <- base::tryCatch({
[13:18:32.505]         base::withCallingHandlers({
[13:18:32.505]             ...future.value <- base::withVisible(base::local({
[13:18:32.505]                 withCallingHandlers({
[13:18:32.505]                   {
[13:18:32.505]                     do.call(function(...) {
[13:18:32.505]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.505]                       if (!identical(...future.globals.maxSize.org, 
[13:18:32.505]                         ...future.globals.maxSize)) {
[13:18:32.505]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.505]                         on.exit(options(oopts), add = TRUE)
[13:18:32.505]                       }
[13:18:32.505]                       {
[13:18:32.505]                         lapply(seq_along(...future.elements_ii), 
[13:18:32.505]                           FUN = function(jj) {
[13:18:32.505]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.505]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.505]                               envir = globalenv(), inherits = FALSE)
[13:18:32.505]                             ...future.FUN(...future.X_jj, ...)
[13:18:32.505]                           })
[13:18:32.505]                       }
[13:18:32.505]                     }, args = future.call.arguments)
[13:18:32.505]                   }
[13:18:32.505]                 }, immediateCondition = function(cond) {
[13:18:32.505]                   save_rds <- function (object, pathname, ...) 
[13:18:32.505]                   {
[13:18:32.505]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:18:32.505]                     if (file_test("-f", pathname_tmp)) {
[13:18:32.505]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.505]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:18:32.505]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.505]                         fi_tmp[["mtime"]])
[13:18:32.505]                     }
[13:18:32.505]                     tryCatch({
[13:18:32.505]                       saveRDS(object, file = pathname_tmp, ...)
[13:18:32.505]                     }, error = function(ex) {
[13:18:32.505]                       msg <- conditionMessage(ex)
[13:18:32.505]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.505]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:18:32.505]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.505]                         fi_tmp[["mtime"]], msg)
[13:18:32.505]                       ex$message <- msg
[13:18:32.505]                       stop(ex)
[13:18:32.505]                     })
[13:18:32.505]                     stopifnot(file_test("-f", pathname_tmp))
[13:18:32.505]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:18:32.505]                     if (!res || file_test("-f", pathname_tmp)) {
[13:18:32.505]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.505]                       fi <- file.info(pathname)
[13:18:32.505]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:18:32.505]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.505]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:18:32.505]                         fi[["size"]], fi[["mtime"]])
[13:18:32.505]                       stop(msg)
[13:18:32.505]                     }
[13:18:32.505]                     invisible(pathname)
[13:18:32.505]                   }
[13:18:32.505]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:18:32.505]                     rootPath = tempdir()) 
[13:18:32.505]                   {
[13:18:32.505]                     obj <- list(time = Sys.time(), condition = cond)
[13:18:32.505]                     file <- tempfile(pattern = class(cond)[1], 
[13:18:32.505]                       tmpdir = path, fileext = ".rds")
[13:18:32.505]                     save_rds(obj, file)
[13:18:32.505]                   }
[13:18:32.505]                   saveImmediateCondition(cond, path = "/tmp/RtmpPPCpJF/.future/immediateConditions")
[13:18:32.505]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.505]                   {
[13:18:32.505]                     inherits <- base::inherits
[13:18:32.505]                     invokeRestart <- base::invokeRestart
[13:18:32.505]                     is.null <- base::is.null
[13:18:32.505]                     muffled <- FALSE
[13:18:32.505]                     if (inherits(cond, "message")) {
[13:18:32.505]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:32.505]                       if (muffled) 
[13:18:32.505]                         invokeRestart("muffleMessage")
[13:18:32.505]                     }
[13:18:32.505]                     else if (inherits(cond, "warning")) {
[13:18:32.505]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:32.505]                       if (muffled) 
[13:18:32.505]                         invokeRestart("muffleWarning")
[13:18:32.505]                     }
[13:18:32.505]                     else if (inherits(cond, "condition")) {
[13:18:32.505]                       if (!is.null(pattern)) {
[13:18:32.505]                         computeRestarts <- base::computeRestarts
[13:18:32.505]                         grepl <- base::grepl
[13:18:32.505]                         restarts <- computeRestarts(cond)
[13:18:32.505]                         for (restart in restarts) {
[13:18:32.505]                           name <- restart$name
[13:18:32.505]                           if (is.null(name)) 
[13:18:32.505]                             next
[13:18:32.505]                           if (!grepl(pattern, name)) 
[13:18:32.505]                             next
[13:18:32.505]                           invokeRestart(restart)
[13:18:32.505]                           muffled <- TRUE
[13:18:32.505]                           break
[13:18:32.505]                         }
[13:18:32.505]                       }
[13:18:32.505]                     }
[13:18:32.505]                     invisible(muffled)
[13:18:32.505]                   }
[13:18:32.505]                   muffleCondition(cond)
[13:18:32.505]                 })
[13:18:32.505]             }))
[13:18:32.505]             future::FutureResult(value = ...future.value$value, 
[13:18:32.505]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.505]                   ...future.rng), globalenv = if (FALSE) 
[13:18:32.505]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:32.505]                     ...future.globalenv.names))
[13:18:32.505]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:32.505]         }, condition = base::local({
[13:18:32.505]             c <- base::c
[13:18:32.505]             inherits <- base::inherits
[13:18:32.505]             invokeRestart <- base::invokeRestart
[13:18:32.505]             length <- base::length
[13:18:32.505]             list <- base::list
[13:18:32.505]             seq.int <- base::seq.int
[13:18:32.505]             signalCondition <- base::signalCondition
[13:18:32.505]             sys.calls <- base::sys.calls
[13:18:32.505]             `[[` <- base::`[[`
[13:18:32.505]             `+` <- base::`+`
[13:18:32.505]             `<<-` <- base::`<<-`
[13:18:32.505]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:32.505]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:32.505]                   3L)]
[13:18:32.505]             }
[13:18:32.505]             function(cond) {
[13:18:32.505]                 is_error <- inherits(cond, "error")
[13:18:32.505]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:32.505]                   NULL)
[13:18:32.505]                 if (is_error) {
[13:18:32.505]                   sessionInformation <- function() {
[13:18:32.505]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:32.505]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:32.505]                       search = base::search(), system = base::Sys.info())
[13:18:32.505]                   }
[13:18:32.505]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.505]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:32.505]                     cond$call), session = sessionInformation(), 
[13:18:32.505]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:32.505]                   signalCondition(cond)
[13:18:32.505]                 }
[13:18:32.505]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:32.505]                 "immediateCondition"))) {
[13:18:32.505]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:32.505]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.505]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:32.505]                   if (TRUE && !signal) {
[13:18:32.505]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.505]                     {
[13:18:32.505]                       inherits <- base::inherits
[13:18:32.505]                       invokeRestart <- base::invokeRestart
[13:18:32.505]                       is.null <- base::is.null
[13:18:32.505]                       muffled <- FALSE
[13:18:32.505]                       if (inherits(cond, "message")) {
[13:18:32.505]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.505]                         if (muffled) 
[13:18:32.505]                           invokeRestart("muffleMessage")
[13:18:32.505]                       }
[13:18:32.505]                       else if (inherits(cond, "warning")) {
[13:18:32.505]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.505]                         if (muffled) 
[13:18:32.505]                           invokeRestart("muffleWarning")
[13:18:32.505]                       }
[13:18:32.505]                       else if (inherits(cond, "condition")) {
[13:18:32.505]                         if (!is.null(pattern)) {
[13:18:32.505]                           computeRestarts <- base::computeRestarts
[13:18:32.505]                           grepl <- base::grepl
[13:18:32.505]                           restarts <- computeRestarts(cond)
[13:18:32.505]                           for (restart in restarts) {
[13:18:32.505]                             name <- restart$name
[13:18:32.505]                             if (is.null(name)) 
[13:18:32.505]                               next
[13:18:32.505]                             if (!grepl(pattern, name)) 
[13:18:32.505]                               next
[13:18:32.505]                             invokeRestart(restart)
[13:18:32.505]                             muffled <- TRUE
[13:18:32.505]                             break
[13:18:32.505]                           }
[13:18:32.505]                         }
[13:18:32.505]                       }
[13:18:32.505]                       invisible(muffled)
[13:18:32.505]                     }
[13:18:32.505]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.505]                   }
[13:18:32.505]                 }
[13:18:32.505]                 else {
[13:18:32.505]                   if (TRUE) {
[13:18:32.505]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.505]                     {
[13:18:32.505]                       inherits <- base::inherits
[13:18:32.505]                       invokeRestart <- base::invokeRestart
[13:18:32.505]                       is.null <- base::is.null
[13:18:32.505]                       muffled <- FALSE
[13:18:32.505]                       if (inherits(cond, "message")) {
[13:18:32.505]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.505]                         if (muffled) 
[13:18:32.505]                           invokeRestart("muffleMessage")
[13:18:32.505]                       }
[13:18:32.505]                       else if (inherits(cond, "warning")) {
[13:18:32.505]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.505]                         if (muffled) 
[13:18:32.505]                           invokeRestart("muffleWarning")
[13:18:32.505]                       }
[13:18:32.505]                       else if (inherits(cond, "condition")) {
[13:18:32.505]                         if (!is.null(pattern)) {
[13:18:32.505]                           computeRestarts <- base::computeRestarts
[13:18:32.505]                           grepl <- base::grepl
[13:18:32.505]                           restarts <- computeRestarts(cond)
[13:18:32.505]                           for (restart in restarts) {
[13:18:32.505]                             name <- restart$name
[13:18:32.505]                             if (is.null(name)) 
[13:18:32.505]                               next
[13:18:32.505]                             if (!grepl(pattern, name)) 
[13:18:32.505]                               next
[13:18:32.505]                             invokeRestart(restart)
[13:18:32.505]                             muffled <- TRUE
[13:18:32.505]                             break
[13:18:32.505]                           }
[13:18:32.505]                         }
[13:18:32.505]                       }
[13:18:32.505]                       invisible(muffled)
[13:18:32.505]                     }
[13:18:32.505]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.505]                   }
[13:18:32.505]                 }
[13:18:32.505]             }
[13:18:32.505]         }))
[13:18:32.505]     }, error = function(ex) {
[13:18:32.505]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:32.505]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.505]                 ...future.rng), started = ...future.startTime, 
[13:18:32.505]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:32.505]             version = "1.8"), class = "FutureResult")
[13:18:32.505]     }, finally = {
[13:18:32.505]         if (!identical(...future.workdir, getwd())) 
[13:18:32.505]             setwd(...future.workdir)
[13:18:32.505]         {
[13:18:32.505]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:32.505]                 ...future.oldOptions$nwarnings <- NULL
[13:18:32.505]             }
[13:18:32.505]             base::options(...future.oldOptions)
[13:18:32.505]             if (.Platform$OS.type == "windows") {
[13:18:32.505]                 old_names <- names(...future.oldEnvVars)
[13:18:32.505]                 envs <- base::Sys.getenv()
[13:18:32.505]                 names <- names(envs)
[13:18:32.505]                 common <- intersect(names, old_names)
[13:18:32.505]                 added <- setdiff(names, old_names)
[13:18:32.505]                 removed <- setdiff(old_names, names)
[13:18:32.505]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:32.505]                   envs[common]]
[13:18:32.505]                 NAMES <- toupper(changed)
[13:18:32.505]                 args <- list()
[13:18:32.505]                 for (kk in seq_along(NAMES)) {
[13:18:32.505]                   name <- changed[[kk]]
[13:18:32.505]                   NAME <- NAMES[[kk]]
[13:18:32.505]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.505]                     next
[13:18:32.505]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.505]                 }
[13:18:32.505]                 NAMES <- toupper(added)
[13:18:32.505]                 for (kk in seq_along(NAMES)) {
[13:18:32.505]                   name <- added[[kk]]
[13:18:32.505]                   NAME <- NAMES[[kk]]
[13:18:32.505]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.505]                     next
[13:18:32.505]                   args[[name]] <- ""
[13:18:32.505]                 }
[13:18:32.505]                 NAMES <- toupper(removed)
[13:18:32.505]                 for (kk in seq_along(NAMES)) {
[13:18:32.505]                   name <- removed[[kk]]
[13:18:32.505]                   NAME <- NAMES[[kk]]
[13:18:32.505]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.505]                     next
[13:18:32.505]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.505]                 }
[13:18:32.505]                 if (length(args) > 0) 
[13:18:32.505]                   base::do.call(base::Sys.setenv, args = args)
[13:18:32.505]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:32.505]             }
[13:18:32.505]             else {
[13:18:32.505]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:32.505]             }
[13:18:32.505]             {
[13:18:32.505]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:32.505]                   0L) {
[13:18:32.505]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:32.505]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:32.505]                   base::options(opts)
[13:18:32.505]                 }
[13:18:32.505]                 {
[13:18:32.505]                   {
[13:18:32.505]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:32.505]                     NULL
[13:18:32.505]                   }
[13:18:32.505]                   options(future.plan = NULL)
[13:18:32.505]                   if (is.na(NA_character_)) 
[13:18:32.505]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.505]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:32.505]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:18:32.505]                     envir = parent.frame()) 
[13:18:32.505]                   {
[13:18:32.505]                     default_workers <- missing(workers)
[13:18:32.505]                     if (is.function(workers)) 
[13:18:32.505]                       workers <- workers()
[13:18:32.505]                     workers <- structure(as.integer(workers), 
[13:18:32.505]                       class = class(workers))
[13:18:32.505]                     stop_if_not(is.finite(workers), workers >= 
[13:18:32.505]                       1L)
[13:18:32.505]                     if ((workers == 1L && !inherits(workers, 
[13:18:32.505]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:18:32.505]                       if (default_workers) 
[13:18:32.505]                         supportsMulticore(warn = TRUE)
[13:18:32.505]                       return(sequential(..., envir = envir))
[13:18:32.505]                     }
[13:18:32.505]                     oopts <- options(mc.cores = workers)
[13:18:32.505]                     on.exit(options(oopts))
[13:18:32.505]                     future <- MulticoreFuture(..., workers = workers, 
[13:18:32.505]                       envir = envir)
[13:18:32.505]                     if (!future$lazy) 
[13:18:32.505]                       future <- run(future)
[13:18:32.505]                     invisible(future)
[13:18:32.505]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:32.505]                 }
[13:18:32.505]             }
[13:18:32.505]         }
[13:18:32.505]     })
[13:18:32.505]     if (TRUE) {
[13:18:32.505]         base::sink(type = "output", split = FALSE)
[13:18:32.505]         if (TRUE) {
[13:18:32.505]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:32.505]         }
[13:18:32.505]         else {
[13:18:32.505]             ...future.result["stdout"] <- base::list(NULL)
[13:18:32.505]         }
[13:18:32.505]         base::close(...future.stdout)
[13:18:32.505]         ...future.stdout <- NULL
[13:18:32.505]     }
[13:18:32.505]     ...future.result$conditions <- ...future.conditions
[13:18:32.505]     ...future.result$finished <- base::Sys.time()
[13:18:32.505]     ...future.result
[13:18:32.505] }
[13:18:32.508] assign_globals() ...
[13:18:32.508] List of 5
[13:18:32.508]  $ ...future.FUN            :function (...)  
[13:18:32.508]  $ future.call.arguments    : list()
[13:18:32.508]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.508]  $ ...future.elements_ii    :List of 3
[13:18:32.508]   ..$ : int 0
[13:18:32.508]   ..$ : int 0
[13:18:32.508]   ..$ : int 0
[13:18:32.508]  $ ...future.seeds_ii       :List of 3
[13:18:32.508]   ..$ : int [1:7] 10407 2000585943 1277356830 -2089408352 -860958827 226502925 99834792
[13:18:32.508]   ..$ : int [1:7] 10407 -1366366742 -1587533199 -987670999 1146693195 -372746989 -1779846945
[13:18:32.508]   ..$ : int [1:7] 10407 -1326244930 -121340665 862160877 1069041468 -111293265 1245428870
[13:18:32.508]  $ ...future.globals.maxSize: NULL
[13:18:32.508]  - attr(*, "resolved")= logi FALSE
[13:18:32.508]  - attr(*, "total_size")= num 616
[13:18:32.508]  - attr(*, "where")=List of 5
[13:18:32.508]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:18:32.508]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:18:32.508]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:18:32.508]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:18:32.508]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:18:32.508]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.508]  - attr(*, "already-done")= logi TRUE
[13:18:32.519] - reassign environment for ‘...future.FUN’
[13:18:32.519] - copied ‘...future.FUN’ to environment
[13:18:32.519] - copied ‘future.call.arguments’ to environment
[13:18:32.519] - copied ‘...future.elements_ii’ to environment
[13:18:32.519] - copied ‘...future.seeds_ii’ to environment
[13:18:32.519] - copied ‘...future.globals.maxSize’ to environment
[13:18:32.519] assign_globals() ... done
[13:18:32.520] requestCore(): workers = 2
[13:18:32.525] MulticoreFuture started
[13:18:32.526] - Launch lazy future ... done
[13:18:32.526] run() for ‘MulticoreFuture’ ... done
[13:18:32.526] Created future:
[13:18:32.527] plan(): Setting new future strategy stack:
[13:18:32.527] List of future strategies:
[13:18:32.527] 1. sequential:
[13:18:32.527]    - args: function (..., envir = parent.frame())
[13:18:32.527]    - tweaked: FALSE
[13:18:32.527]    - call: NULL
[13:18:32.528] plan(): nbrOfWorkers() = 1
[13:18:32.530] plan(): Setting new future strategy stack:
[13:18:32.530] List of future strategies:
[13:18:32.530] 1. multicore:
[13:18:32.530]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:18:32.530]    - tweaked: FALSE
[13:18:32.530]    - call: plan(strategy)
[13:18:32.535] plan(): nbrOfWorkers() = 2
[13:18:32.526] MulticoreFuture:
[13:18:32.526] Label: ‘future_replicate-2’
[13:18:32.526] Expression:
[13:18:32.526] {
[13:18:32.526]     do.call(function(...) {
[13:18:32.526]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.526]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.526]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.526]             on.exit(options(oopts), add = TRUE)
[13:18:32.526]         }
[13:18:32.526]         {
[13:18:32.526]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.526]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.526]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.526]                   envir = globalenv(), inherits = FALSE)
[13:18:32.526]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.526]             })
[13:18:32.526]         }
[13:18:32.526]     }, args = future.call.arguments)
[13:18:32.526] }
[13:18:32.526] Lazy evaluation: FALSE
[13:18:32.526] Asynchronous evaluation: TRUE
[13:18:32.526] Local evaluation: TRUE
[13:18:32.526] Environment: R_GlobalEnv
[13:18:32.526] Capture standard output: TRUE
[13:18:32.526] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:32.526] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:32.526] Packages: <none>
[13:18:32.526] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:32.526] Resolved: TRUE
[13:18:32.526] Value: <not collected>
[13:18:32.526] Conditions captured: <none>
[13:18:32.526] Early signaling: FALSE
[13:18:32.526] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:32.526] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:32.536] Chunk #2 of 2 ... DONE
[13:18:32.536] Launching 2 futures (chunks) ... DONE
[13:18:32.536] Resolving 2 futures (chunks) ...
[13:18:32.537] resolve() on list ...
[13:18:32.537]  recursive: 0
[13:18:32.537]  length: 2
[13:18:32.537] 
[13:18:32.537] Future #1
[13:18:32.540] signalConditionsASAP(MulticoreFuture, pos=1) ...
[13:18:32.540] - nx: 2
[13:18:32.540] - relay: TRUE
[13:18:32.540] - stdout: TRUE
[13:18:32.540] - signal: TRUE
[13:18:32.540] - resignal: FALSE
[13:18:32.541] - force: TRUE
[13:18:32.541] - relayed: [n=2] FALSE, FALSE
[13:18:32.541] - queued futures: [n=2] FALSE, FALSE
[13:18:32.541]  - until=1
[13:18:32.541]  - relaying element #1
[13:18:32.542] - relayed: [n=2] TRUE, FALSE
[13:18:32.542] - queued futures: [n=2] TRUE, FALSE
[13:18:32.542] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[13:18:32.542]  length: 1 (resolved future 1)
[13:18:32.543] Future #2
[13:18:32.544] signalConditionsASAP(MulticoreFuture, pos=2) ...
[13:18:32.544] - nx: 2
[13:18:32.544] - relay: TRUE
[13:18:32.544] - stdout: TRUE
[13:18:32.544] - signal: TRUE
[13:18:32.544] - resignal: FALSE
[13:18:32.544] - force: TRUE
[13:18:32.545] - relayed: [n=2] TRUE, FALSE
[13:18:32.545] - queued futures: [n=2] TRUE, FALSE
[13:18:32.545]  - until=2
[13:18:32.545]  - relaying element #2
[13:18:32.545] - relayed: [n=2] TRUE, TRUE
[13:18:32.545] - queued futures: [n=2] TRUE, TRUE
[13:18:32.546] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[13:18:32.546]  length: 0 (resolved future 2)
[13:18:32.546] Relaying remaining futures
[13:18:32.546] signalConditionsASAP(NULL, pos=0) ...
[13:18:32.546] - nx: 2
[13:18:32.546] - relay: TRUE
[13:18:32.546] - stdout: TRUE
[13:18:32.546] - signal: TRUE
[13:18:32.546] - resignal: FALSE
[13:18:32.547] - force: TRUE
[13:18:32.547] - relayed: [n=2] TRUE, TRUE
[13:18:32.547] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:18:32.547] - relayed: [n=2] TRUE, TRUE
[13:18:32.547] - queued futures: [n=2] TRUE, TRUE
[13:18:32.547] signalConditionsASAP(NULL, pos=0) ... done
[13:18:32.547] resolve() on list ... DONE
[13:18:32.547]  - Number of value chunks collected: 2
[13:18:32.548] Resolving 2 futures (chunks) ... DONE
[13:18:32.548] Reducing values from 2 chunks ...
[13:18:32.548]  - Number of values collected after concatenation: 5
[13:18:32.548]  - Number of values expected: 5
[13:18:32.548] Reducing values from 2 chunks ... DONE
[13:18:32.548] future_lapply() ... DONE
[13:18:32.548] future_lapply() ...
[13:18:32.549] Generating random seeds ...
[13:18:32.549] Generating random seed streams for 5 elements ...
[13:18:32.552] Generating random seed streams for 5 elements ... DONE
[13:18:32.552] Generating random seeds ... DONE
[13:18:32.552] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:18:32.557] Number of chunks: 2
[13:18:32.557] getGlobalsAndPackagesXApply() ...
[13:18:32.557]  - future.globals: TRUE
[13:18:32.557] getGlobalsAndPackages() ...
[13:18:32.557] Searching for globals...
[13:18:32.559] - globals found: [2] ‘FUN’, ‘sample’
[13:18:32.559] Searching for globals ... DONE
[13:18:32.559] Resolving globals: FALSE
[13:18:32.560] The total size of the 1 globals is 616 bytes (616 bytes)
[13:18:32.560] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:18:32.560] - globals: [1] ‘FUN’
[13:18:32.560] 
[13:18:32.560] getGlobalsAndPackages() ... DONE
[13:18:32.560]  - globals found/used: [n=1] ‘FUN’
[13:18:32.561]  - needed namespaces: [n=0] 
[13:18:32.561] Finding globals ... DONE
[13:18:32.561]  - use_args: TRUE
[13:18:32.561]  - Getting '...' globals ...
[13:18:32.561] resolve() on list ...
[13:18:32.561]  recursive: 0
[13:18:32.562]  length: 1
[13:18:32.562]  elements: ‘...’
[13:18:32.562]  length: 0 (resolved future 1)
[13:18:32.562] resolve() on list ... DONE
[13:18:32.562]    - '...' content: [n=0] 
[13:18:32.562] List of 1
[13:18:32.562]  $ ...: list()
[13:18:32.562]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.562]  - attr(*, "where")=List of 1
[13:18:32.562]   ..$ ...:<environment: 0x55df1e5e6d98> 
[13:18:32.562]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.562]  - attr(*, "resolved")= logi TRUE
[13:18:32.562]  - attr(*, "total_size")= num NA
[13:18:32.566]  - Getting '...' globals ... DONE
[13:18:32.566] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:18:32.566] List of 2
[13:18:32.566]  $ ...future.FUN:function (...)  
[13:18:32.566]  $ ...          : list()
[13:18:32.566]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.566]  - attr(*, "where")=List of 2
[13:18:32.566]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:18:32.566]   ..$ ...          :<environment: 0x55df1e5e6d98> 
[13:18:32.566]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.566]  - attr(*, "resolved")= logi FALSE
[13:18:32.566]  - attr(*, "total_size")= num 616
[13:18:32.569] Packages to be attached in all futures: [n=0] 
[13:18:32.569] getGlobalsAndPackagesXApply() ... DONE
[13:18:32.569] Number of futures (= number of chunks): 2
[13:18:32.569] Launching 2 futures (chunks) ...
[13:18:32.569] Chunk #1 of 2 ...
[13:18:32.570]  - Finding globals in 'X' for chunk #1 ...
[13:18:32.570] getGlobalsAndPackages() ...
[13:18:32.570] Searching for globals...
[13:18:32.570] 
[13:18:32.570] Searching for globals ... DONE
[13:18:32.570] - globals: [0] <none>
[13:18:32.570] getGlobalsAndPackages() ... DONE
[13:18:32.570]    + additional globals found: [n=0] 
[13:18:32.571]    + additional namespaces needed: [n=0] 
[13:18:32.571]  - Finding globals in 'X' for chunk #1 ... DONE
[13:18:32.571]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:18:32.571]  - seeds: [2] <seeds>
[13:18:32.571] getGlobalsAndPackages() ...
[13:18:32.571] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.571] Resolving globals: FALSE
[13:18:32.571] Tweak future expression to call with '...' arguments ...
[13:18:32.571] {
[13:18:32.571]     do.call(function(...) {
[13:18:32.571]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.571]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.571]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.571]             on.exit(options(oopts), add = TRUE)
[13:18:32.571]         }
[13:18:32.571]         {
[13:18:32.571]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.571]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.571]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.571]                   envir = globalenv(), inherits = FALSE)
[13:18:32.571]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.571]             })
[13:18:32.571]         }
[13:18:32.571]     }, args = future.call.arguments)
[13:18:32.571] }
[13:18:32.572] Tweak future expression to call with '...' arguments ... DONE
[13:18:32.572] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.572] 
[13:18:32.572] getGlobalsAndPackages() ... DONE
[13:18:32.573] run() for ‘Future’ ...
[13:18:32.573] - state: ‘created’
[13:18:32.573] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:18:32.577] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:32.577] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:18:32.577]   - Field: ‘label’
[13:18:32.577]   - Field: ‘local’
[13:18:32.577]   - Field: ‘owner’
[13:18:32.577]   - Field: ‘envir’
[13:18:32.578]   - Field: ‘workers’
[13:18:32.578]   - Field: ‘packages’
[13:18:32.578]   - Field: ‘gc’
[13:18:32.578]   - Field: ‘job’
[13:18:32.578]   - Field: ‘conditions’
[13:18:32.578]   - Field: ‘expr’
[13:18:32.578]   - Field: ‘uuid’
[13:18:32.578]   - Field: ‘seed’
[13:18:32.578]   - Field: ‘version’
[13:18:32.579]   - Field: ‘result’
[13:18:32.579]   - Field: ‘asynchronous’
[13:18:32.579]   - Field: ‘calls’
[13:18:32.579]   - Field: ‘globals’
[13:18:32.579]   - Field: ‘stdout’
[13:18:32.579]   - Field: ‘earlySignal’
[13:18:32.579]   - Field: ‘lazy’
[13:18:32.579]   - Field: ‘state’
[13:18:32.579] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:18:32.579] - Launch lazy future ...
[13:18:32.580] Packages needed by the future expression (n = 0): <none>
[13:18:32.580] Packages needed by future strategies (n = 0): <none>
[13:18:32.580] {
[13:18:32.580]     {
[13:18:32.580]         {
[13:18:32.580]             ...future.startTime <- base::Sys.time()
[13:18:32.580]             {
[13:18:32.580]                 {
[13:18:32.580]                   {
[13:18:32.580]                     {
[13:18:32.580]                       base::local({
[13:18:32.580]                         has_future <- base::requireNamespace("future", 
[13:18:32.580]                           quietly = TRUE)
[13:18:32.580]                         if (has_future) {
[13:18:32.580]                           ns <- base::getNamespace("future")
[13:18:32.580]                           version <- ns[[".package"]][["version"]]
[13:18:32.580]                           if (is.null(version)) 
[13:18:32.580]                             version <- utils::packageVersion("future")
[13:18:32.580]                         }
[13:18:32.580]                         else {
[13:18:32.580]                           version <- NULL
[13:18:32.580]                         }
[13:18:32.580]                         if (!has_future || version < "1.8.0") {
[13:18:32.580]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:32.580]                             "", base::R.version$version.string), 
[13:18:32.580]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:32.580]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:32.580]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:32.580]                               "release", "version")], collapse = " "), 
[13:18:32.580]                             hostname = base::Sys.info()[["nodename"]])
[13:18:32.580]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:32.580]                             info)
[13:18:32.580]                           info <- base::paste(info, collapse = "; ")
[13:18:32.580]                           if (!has_future) {
[13:18:32.580]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:32.580]                               info)
[13:18:32.580]                           }
[13:18:32.580]                           else {
[13:18:32.580]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:32.580]                               info, version)
[13:18:32.580]                           }
[13:18:32.580]                           base::stop(msg)
[13:18:32.580]                         }
[13:18:32.580]                       })
[13:18:32.580]                     }
[13:18:32.580]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:32.580]                     base::options(mc.cores = 1L)
[13:18:32.580]                   }
[13:18:32.580]                   options(future.plan = NULL)
[13:18:32.580]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.580]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:32.580]                 }
[13:18:32.580]                 ...future.workdir <- getwd()
[13:18:32.580]             }
[13:18:32.580]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:32.580]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:32.580]         }
[13:18:32.580]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:32.580]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:18:32.580]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:32.580]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:32.580]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:32.580]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:32.580]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:32.580]             base::names(...future.oldOptions))
[13:18:32.580]     }
[13:18:32.580]     if (FALSE) {
[13:18:32.580]     }
[13:18:32.580]     else {
[13:18:32.580]         if (TRUE) {
[13:18:32.580]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:32.580]                 open = "w")
[13:18:32.580]         }
[13:18:32.580]         else {
[13:18:32.580]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:32.580]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:32.580]         }
[13:18:32.580]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:32.580]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:32.580]             base::sink(type = "output", split = FALSE)
[13:18:32.580]             base::close(...future.stdout)
[13:18:32.580]         }, add = TRUE)
[13:18:32.580]     }
[13:18:32.580]     ...future.frame <- base::sys.nframe()
[13:18:32.580]     ...future.conditions <- base::list()
[13:18:32.580]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:32.580]     if (FALSE) {
[13:18:32.580]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:32.580]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:32.580]     }
[13:18:32.580]     ...future.result <- base::tryCatch({
[13:18:32.580]         base::withCallingHandlers({
[13:18:32.580]             ...future.value <- base::withVisible(base::local({
[13:18:32.580]                 withCallingHandlers({
[13:18:32.580]                   {
[13:18:32.580]                     do.call(function(...) {
[13:18:32.580]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.580]                       if (!identical(...future.globals.maxSize.org, 
[13:18:32.580]                         ...future.globals.maxSize)) {
[13:18:32.580]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.580]                         on.exit(options(oopts), add = TRUE)
[13:18:32.580]                       }
[13:18:32.580]                       {
[13:18:32.580]                         lapply(seq_along(...future.elements_ii), 
[13:18:32.580]                           FUN = function(jj) {
[13:18:32.580]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.580]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.580]                               envir = globalenv(), inherits = FALSE)
[13:18:32.580]                             ...future.FUN(...future.X_jj, ...)
[13:18:32.580]                           })
[13:18:32.580]                       }
[13:18:32.580]                     }, args = future.call.arguments)
[13:18:32.580]                   }
[13:18:32.580]                 }, immediateCondition = function(cond) {
[13:18:32.580]                   save_rds <- function (object, pathname, ...) 
[13:18:32.580]                   {
[13:18:32.580]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:18:32.580]                     if (file_test("-f", pathname_tmp)) {
[13:18:32.580]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.580]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:18:32.580]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.580]                         fi_tmp[["mtime"]])
[13:18:32.580]                     }
[13:18:32.580]                     tryCatch({
[13:18:32.580]                       saveRDS(object, file = pathname_tmp, ...)
[13:18:32.580]                     }, error = function(ex) {
[13:18:32.580]                       msg <- conditionMessage(ex)
[13:18:32.580]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.580]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:18:32.580]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.580]                         fi_tmp[["mtime"]], msg)
[13:18:32.580]                       ex$message <- msg
[13:18:32.580]                       stop(ex)
[13:18:32.580]                     })
[13:18:32.580]                     stopifnot(file_test("-f", pathname_tmp))
[13:18:32.580]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:18:32.580]                     if (!res || file_test("-f", pathname_tmp)) {
[13:18:32.580]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.580]                       fi <- file.info(pathname)
[13:18:32.580]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:18:32.580]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.580]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:18:32.580]                         fi[["size"]], fi[["mtime"]])
[13:18:32.580]                       stop(msg)
[13:18:32.580]                     }
[13:18:32.580]                     invisible(pathname)
[13:18:32.580]                   }
[13:18:32.580]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:18:32.580]                     rootPath = tempdir()) 
[13:18:32.580]                   {
[13:18:32.580]                     obj <- list(time = Sys.time(), condition = cond)
[13:18:32.580]                     file <- tempfile(pattern = class(cond)[1], 
[13:18:32.580]                       tmpdir = path, fileext = ".rds")
[13:18:32.580]                     save_rds(obj, file)
[13:18:32.580]                   }
[13:18:32.580]                   saveImmediateCondition(cond, path = "/tmp/RtmpPPCpJF/.future/immediateConditions")
[13:18:32.580]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.580]                   {
[13:18:32.580]                     inherits <- base::inherits
[13:18:32.580]                     invokeRestart <- base::invokeRestart
[13:18:32.580]                     is.null <- base::is.null
[13:18:32.580]                     muffled <- FALSE
[13:18:32.580]                     if (inherits(cond, "message")) {
[13:18:32.580]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:32.580]                       if (muffled) 
[13:18:32.580]                         invokeRestart("muffleMessage")
[13:18:32.580]                     }
[13:18:32.580]                     else if (inherits(cond, "warning")) {
[13:18:32.580]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:32.580]                       if (muffled) 
[13:18:32.580]                         invokeRestart("muffleWarning")
[13:18:32.580]                     }
[13:18:32.580]                     else if (inherits(cond, "condition")) {
[13:18:32.580]                       if (!is.null(pattern)) {
[13:18:32.580]                         computeRestarts <- base::computeRestarts
[13:18:32.580]                         grepl <- base::grepl
[13:18:32.580]                         restarts <- computeRestarts(cond)
[13:18:32.580]                         for (restart in restarts) {
[13:18:32.580]                           name <- restart$name
[13:18:32.580]                           if (is.null(name)) 
[13:18:32.580]                             next
[13:18:32.580]                           if (!grepl(pattern, name)) 
[13:18:32.580]                             next
[13:18:32.580]                           invokeRestart(restart)
[13:18:32.580]                           muffled <- TRUE
[13:18:32.580]                           break
[13:18:32.580]                         }
[13:18:32.580]                       }
[13:18:32.580]                     }
[13:18:32.580]                     invisible(muffled)
[13:18:32.580]                   }
[13:18:32.580]                   muffleCondition(cond)
[13:18:32.580]                 })
[13:18:32.580]             }))
[13:18:32.580]             future::FutureResult(value = ...future.value$value, 
[13:18:32.580]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.580]                   ...future.rng), globalenv = if (FALSE) 
[13:18:32.580]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:32.580]                     ...future.globalenv.names))
[13:18:32.580]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:32.580]         }, condition = base::local({
[13:18:32.580]             c <- base::c
[13:18:32.580]             inherits <- base::inherits
[13:18:32.580]             invokeRestart <- base::invokeRestart
[13:18:32.580]             length <- base::length
[13:18:32.580]             list <- base::list
[13:18:32.580]             seq.int <- base::seq.int
[13:18:32.580]             signalCondition <- base::signalCondition
[13:18:32.580]             sys.calls <- base::sys.calls
[13:18:32.580]             `[[` <- base::`[[`
[13:18:32.580]             `+` <- base::`+`
[13:18:32.580]             `<<-` <- base::`<<-`
[13:18:32.580]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:32.580]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:32.580]                   3L)]
[13:18:32.580]             }
[13:18:32.580]             function(cond) {
[13:18:32.580]                 is_error <- inherits(cond, "error")
[13:18:32.580]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:32.580]                   NULL)
[13:18:32.580]                 if (is_error) {
[13:18:32.580]                   sessionInformation <- function() {
[13:18:32.580]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:32.580]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:32.580]                       search = base::search(), system = base::Sys.info())
[13:18:32.580]                   }
[13:18:32.580]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.580]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:32.580]                     cond$call), session = sessionInformation(), 
[13:18:32.580]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:32.580]                   signalCondition(cond)
[13:18:32.580]                 }
[13:18:32.580]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:32.580]                 "immediateCondition"))) {
[13:18:32.580]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:32.580]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.580]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:32.580]                   if (TRUE && !signal) {
[13:18:32.580]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.580]                     {
[13:18:32.580]                       inherits <- base::inherits
[13:18:32.580]                       invokeRestart <- base::invokeRestart
[13:18:32.580]                       is.null <- base::is.null
[13:18:32.580]                       muffled <- FALSE
[13:18:32.580]                       if (inherits(cond, "message")) {
[13:18:32.580]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.580]                         if (muffled) 
[13:18:32.580]                           invokeRestart("muffleMessage")
[13:18:32.580]                       }
[13:18:32.580]                       else if (inherits(cond, "warning")) {
[13:18:32.580]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.580]                         if (muffled) 
[13:18:32.580]                           invokeRestart("muffleWarning")
[13:18:32.580]                       }
[13:18:32.580]                       else if (inherits(cond, "condition")) {
[13:18:32.580]                         if (!is.null(pattern)) {
[13:18:32.580]                           computeRestarts <- base::computeRestarts
[13:18:32.580]                           grepl <- base::grepl
[13:18:32.580]                           restarts <- computeRestarts(cond)
[13:18:32.580]                           for (restart in restarts) {
[13:18:32.580]                             name <- restart$name
[13:18:32.580]                             if (is.null(name)) 
[13:18:32.580]                               next
[13:18:32.580]                             if (!grepl(pattern, name)) 
[13:18:32.580]                               next
[13:18:32.580]                             invokeRestart(restart)
[13:18:32.580]                             muffled <- TRUE
[13:18:32.580]                             break
[13:18:32.580]                           }
[13:18:32.580]                         }
[13:18:32.580]                       }
[13:18:32.580]                       invisible(muffled)
[13:18:32.580]                     }
[13:18:32.580]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.580]                   }
[13:18:32.580]                 }
[13:18:32.580]                 else {
[13:18:32.580]                   if (TRUE) {
[13:18:32.580]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.580]                     {
[13:18:32.580]                       inherits <- base::inherits
[13:18:32.580]                       invokeRestart <- base::invokeRestart
[13:18:32.580]                       is.null <- base::is.null
[13:18:32.580]                       muffled <- FALSE
[13:18:32.580]                       if (inherits(cond, "message")) {
[13:18:32.580]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.580]                         if (muffled) 
[13:18:32.580]                           invokeRestart("muffleMessage")
[13:18:32.580]                       }
[13:18:32.580]                       else if (inherits(cond, "warning")) {
[13:18:32.580]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.580]                         if (muffled) 
[13:18:32.580]                           invokeRestart("muffleWarning")
[13:18:32.580]                       }
[13:18:32.580]                       else if (inherits(cond, "condition")) {
[13:18:32.580]                         if (!is.null(pattern)) {
[13:18:32.580]                           computeRestarts <- base::computeRestarts
[13:18:32.580]                           grepl <- base::grepl
[13:18:32.580]                           restarts <- computeRestarts(cond)
[13:18:32.580]                           for (restart in restarts) {
[13:18:32.580]                             name <- restart$name
[13:18:32.580]                             if (is.null(name)) 
[13:18:32.580]                               next
[13:18:32.580]                             if (!grepl(pattern, name)) 
[13:18:32.580]                               next
[13:18:32.580]                             invokeRestart(restart)
[13:18:32.580]                             muffled <- TRUE
[13:18:32.580]                             break
[13:18:32.580]                           }
[13:18:32.580]                         }
[13:18:32.580]                       }
[13:18:32.580]                       invisible(muffled)
[13:18:32.580]                     }
[13:18:32.580]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.580]                   }
[13:18:32.580]                 }
[13:18:32.580]             }
[13:18:32.580]         }))
[13:18:32.580]     }, error = function(ex) {
[13:18:32.580]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:32.580]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.580]                 ...future.rng), started = ...future.startTime, 
[13:18:32.580]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:32.580]             version = "1.8"), class = "FutureResult")
[13:18:32.580]     }, finally = {
[13:18:32.580]         if (!identical(...future.workdir, getwd())) 
[13:18:32.580]             setwd(...future.workdir)
[13:18:32.580]         {
[13:18:32.580]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:32.580]                 ...future.oldOptions$nwarnings <- NULL
[13:18:32.580]             }
[13:18:32.580]             base::options(...future.oldOptions)
[13:18:32.580]             if (.Platform$OS.type == "windows") {
[13:18:32.580]                 old_names <- names(...future.oldEnvVars)
[13:18:32.580]                 envs <- base::Sys.getenv()
[13:18:32.580]                 names <- names(envs)
[13:18:32.580]                 common <- intersect(names, old_names)
[13:18:32.580]                 added <- setdiff(names, old_names)
[13:18:32.580]                 removed <- setdiff(old_names, names)
[13:18:32.580]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:32.580]                   envs[common]]
[13:18:32.580]                 NAMES <- toupper(changed)
[13:18:32.580]                 args <- list()
[13:18:32.580]                 for (kk in seq_along(NAMES)) {
[13:18:32.580]                   name <- changed[[kk]]
[13:18:32.580]                   NAME <- NAMES[[kk]]
[13:18:32.580]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.580]                     next
[13:18:32.580]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.580]                 }
[13:18:32.580]                 NAMES <- toupper(added)
[13:18:32.580]                 for (kk in seq_along(NAMES)) {
[13:18:32.580]                   name <- added[[kk]]
[13:18:32.580]                   NAME <- NAMES[[kk]]
[13:18:32.580]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.580]                     next
[13:18:32.580]                   args[[name]] <- ""
[13:18:32.580]                 }
[13:18:32.580]                 NAMES <- toupper(removed)
[13:18:32.580]                 for (kk in seq_along(NAMES)) {
[13:18:32.580]                   name <- removed[[kk]]
[13:18:32.580]                   NAME <- NAMES[[kk]]
[13:18:32.580]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.580]                     next
[13:18:32.580]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.580]                 }
[13:18:32.580]                 if (length(args) > 0) 
[13:18:32.580]                   base::do.call(base::Sys.setenv, args = args)
[13:18:32.580]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:32.580]             }
[13:18:32.580]             else {
[13:18:32.580]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:32.580]             }
[13:18:32.580]             {
[13:18:32.580]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:32.580]                   0L) {
[13:18:32.580]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:32.580]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:32.580]                   base::options(opts)
[13:18:32.580]                 }
[13:18:32.580]                 {
[13:18:32.580]                   {
[13:18:32.580]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:32.580]                     NULL
[13:18:32.580]                   }
[13:18:32.580]                   options(future.plan = NULL)
[13:18:32.580]                   if (is.na(NA_character_)) 
[13:18:32.580]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.580]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:32.580]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:18:32.580]                     envir = parent.frame()) 
[13:18:32.580]                   {
[13:18:32.580]                     default_workers <- missing(workers)
[13:18:32.580]                     if (is.function(workers)) 
[13:18:32.580]                       workers <- workers()
[13:18:32.580]                     workers <- structure(as.integer(workers), 
[13:18:32.580]                       class = class(workers))
[13:18:32.580]                     stop_if_not(is.finite(workers), workers >= 
[13:18:32.580]                       1L)
[13:18:32.580]                     if ((workers == 1L && !inherits(workers, 
[13:18:32.580]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:18:32.580]                       if (default_workers) 
[13:18:32.580]                         supportsMulticore(warn = TRUE)
[13:18:32.580]                       return(sequential(..., envir = envir))
[13:18:32.580]                     }
[13:18:32.580]                     oopts <- options(mc.cores = workers)
[13:18:32.580]                     on.exit(options(oopts))
[13:18:32.580]                     future <- MulticoreFuture(..., workers = workers, 
[13:18:32.580]                       envir = envir)
[13:18:32.580]                     if (!future$lazy) 
[13:18:32.580]                       future <- run(future)
[13:18:32.580]                     invisible(future)
[13:18:32.580]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:32.580]                 }
[13:18:32.580]             }
[13:18:32.580]         }
[13:18:32.580]     })
[13:18:32.580]     if (TRUE) {
[13:18:32.580]         base::sink(type = "output", split = FALSE)
[13:18:32.580]         if (TRUE) {
[13:18:32.580]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:32.580]         }
[13:18:32.580]         else {
[13:18:32.580]             ...future.result["stdout"] <- base::list(NULL)
[13:18:32.580]         }
[13:18:32.580]         base::close(...future.stdout)
[13:18:32.580]         ...future.stdout <- NULL
[13:18:32.580]     }
[13:18:32.580]     ...future.result$conditions <- ...future.conditions
[13:18:32.580]     ...future.result$finished <- base::Sys.time()
[13:18:32.580]     ...future.result
[13:18:32.580] }
[13:18:32.583] assign_globals() ...
[13:18:32.583] List of 5
[13:18:32.583]  $ ...future.FUN            :function (...)  
[13:18:32.583]  $ future.call.arguments    : list()
[13:18:32.583]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.583]  $ ...future.elements_ii    :List of 2
[13:18:32.583]   ..$ : int 0
[13:18:32.583]   ..$ : int 0
[13:18:32.583]  $ ...future.seeds_ii       :List of 2
[13:18:32.583]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[13:18:32.583]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[13:18:32.583]  $ ...future.globals.maxSize: NULL
[13:18:32.583]  - attr(*, "resolved")= logi FALSE
[13:18:32.583]  - attr(*, "total_size")= num 616
[13:18:32.583]  - attr(*, "where")=List of 5
[13:18:32.583]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:18:32.583]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:18:32.583]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:18:32.583]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:18:32.583]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:18:32.583]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.583]  - attr(*, "already-done")= logi TRUE
[13:18:32.591] - reassign environment for ‘...future.FUN’
[13:18:32.591] - copied ‘...future.FUN’ to environment
[13:18:32.591] - copied ‘future.call.arguments’ to environment
[13:18:32.591] - copied ‘...future.elements_ii’ to environment
[13:18:32.591] - copied ‘...future.seeds_ii’ to environment
[13:18:32.591] - copied ‘...future.globals.maxSize’ to environment
[13:18:32.591] assign_globals() ... done
[13:18:32.591] requestCore(): workers = 2
[13:18:32.594] MulticoreFuture started
[13:18:32.594] - Launch lazy future ... done
[13:18:32.594] run() for ‘MulticoreFuture’ ... done
[13:18:32.595] Created future:
[13:18:32.595] plan(): Setting new future strategy stack:
[13:18:32.595] List of future strategies:
[13:18:32.595] 1. sequential:
[13:18:32.595]    - args: function (..., envir = parent.frame())
[13:18:32.595]    - tweaked: FALSE
[13:18:32.595]    - call: NULL
[13:18:32.596] plan(): nbrOfWorkers() = 1
[13:18:32.598] plan(): Setting new future strategy stack:
[13:18:32.598] List of future strategies:
[13:18:32.598] 1. multicore:
[13:18:32.598]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:18:32.598]    - tweaked: FALSE
[13:18:32.598]    - call: plan(strategy)
[13:18:32.604] plan(): nbrOfWorkers() = 2
[13:18:32.595] MulticoreFuture:
[13:18:32.595] Label: ‘future_replicate-1’
[13:18:32.595] Expression:
[13:18:32.595] {
[13:18:32.595]     do.call(function(...) {
[13:18:32.595]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.595]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.595]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.595]             on.exit(options(oopts), add = TRUE)
[13:18:32.595]         }
[13:18:32.595]         {
[13:18:32.595]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.595]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.595]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.595]                   envir = globalenv(), inherits = FALSE)
[13:18:32.595]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.595]             })
[13:18:32.595]         }
[13:18:32.595]     }, args = future.call.arguments)
[13:18:32.595] }
[13:18:32.595] Lazy evaluation: FALSE
[13:18:32.595] Asynchronous evaluation: TRUE
[13:18:32.595] Local evaluation: TRUE
[13:18:32.595] Environment: R_GlobalEnv
[13:18:32.595] Capture standard output: TRUE
[13:18:32.595] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:32.595] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:32.595] Packages: <none>
[13:18:32.595] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:32.595] Resolved: TRUE
[13:18:32.595] Value: <not collected>
[13:18:32.595] Conditions captured: <none>
[13:18:32.595] Early signaling: FALSE
[13:18:32.595] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:32.595] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:32.605] Chunk #1 of 2 ... DONE
[13:18:32.605] Chunk #2 of 2 ...
[13:18:32.605]  - Finding globals in 'X' for chunk #2 ...
[13:18:32.605] getGlobalsAndPackages() ...
[13:18:32.605] Searching for globals...
[13:18:32.606] 
[13:18:32.606] Searching for globals ... DONE
[13:18:32.606] - globals: [0] <none>
[13:18:32.606] getGlobalsAndPackages() ... DONE
[13:18:32.606]    + additional globals found: [n=0] 
[13:18:32.606]    + additional namespaces needed: [n=0] 
[13:18:32.607]  - Finding globals in 'X' for chunk #2 ... DONE
[13:18:32.607]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[13:18:32.607]  - seeds: [3] <seeds>
[13:18:32.607] getGlobalsAndPackages() ...
[13:18:32.607] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.608] Resolving globals: FALSE
[13:18:32.608] Tweak future expression to call with '...' arguments ...
[13:18:32.608] {
[13:18:32.608]     do.call(function(...) {
[13:18:32.608]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.608]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.608]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.608]             on.exit(options(oopts), add = TRUE)
[13:18:32.608]         }
[13:18:32.608]         {
[13:18:32.608]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.608]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.608]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.608]                   envir = globalenv(), inherits = FALSE)
[13:18:32.608]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.608]             })
[13:18:32.608]         }
[13:18:32.608]     }, args = future.call.arguments)
[13:18:32.608] }
[13:18:32.608] Tweak future expression to call with '...' arguments ... DONE
[13:18:32.609] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.609] 
[13:18:32.609] getGlobalsAndPackages() ... DONE
[13:18:32.610] run() for ‘Future’ ...
[13:18:32.610] - state: ‘created’
[13:18:32.610] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:18:32.615] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:32.615] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:18:32.615]   - Field: ‘label’
[13:18:32.615]   - Field: ‘local’
[13:18:32.615]   - Field: ‘owner’
[13:18:32.615]   - Field: ‘envir’
[13:18:32.616]   - Field: ‘workers’
[13:18:32.616]   - Field: ‘packages’
[13:18:32.616]   - Field: ‘gc’
[13:18:32.616]   - Field: ‘job’
[13:18:32.616]   - Field: ‘conditions’
[13:18:32.616]   - Field: ‘expr’
[13:18:32.616]   - Field: ‘uuid’
[13:18:32.617]   - Field: ‘seed’
[13:18:32.617]   - Field: ‘version’
[13:18:32.617]   - Field: ‘result’
[13:18:32.617]   - Field: ‘asynchronous’
[13:18:32.617]   - Field: ‘calls’
[13:18:32.617]   - Field: ‘globals’
[13:18:32.617]   - Field: ‘stdout’
[13:18:32.618]   - Field: ‘earlySignal’
[13:18:32.618]   - Field: ‘lazy’
[13:18:32.618]   - Field: ‘state’
[13:18:32.618] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:18:32.618] - Launch lazy future ...
[13:18:32.619] Packages needed by the future expression (n = 0): <none>
[13:18:32.619] Packages needed by future strategies (n = 0): <none>
[13:18:32.619] {
[13:18:32.619]     {
[13:18:32.619]         {
[13:18:32.619]             ...future.startTime <- base::Sys.time()
[13:18:32.619]             {
[13:18:32.619]                 {
[13:18:32.619]                   {
[13:18:32.619]                     {
[13:18:32.619]                       base::local({
[13:18:32.619]                         has_future <- base::requireNamespace("future", 
[13:18:32.619]                           quietly = TRUE)
[13:18:32.619]                         if (has_future) {
[13:18:32.619]                           ns <- base::getNamespace("future")
[13:18:32.619]                           version <- ns[[".package"]][["version"]]
[13:18:32.619]                           if (is.null(version)) 
[13:18:32.619]                             version <- utils::packageVersion("future")
[13:18:32.619]                         }
[13:18:32.619]                         else {
[13:18:32.619]                           version <- NULL
[13:18:32.619]                         }
[13:18:32.619]                         if (!has_future || version < "1.8.0") {
[13:18:32.619]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:32.619]                             "", base::R.version$version.string), 
[13:18:32.619]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:32.619]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:32.619]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:32.619]                               "release", "version")], collapse = " "), 
[13:18:32.619]                             hostname = base::Sys.info()[["nodename"]])
[13:18:32.619]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:32.619]                             info)
[13:18:32.619]                           info <- base::paste(info, collapse = "; ")
[13:18:32.619]                           if (!has_future) {
[13:18:32.619]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:32.619]                               info)
[13:18:32.619]                           }
[13:18:32.619]                           else {
[13:18:32.619]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:32.619]                               info, version)
[13:18:32.619]                           }
[13:18:32.619]                           base::stop(msg)
[13:18:32.619]                         }
[13:18:32.619]                       })
[13:18:32.619]                     }
[13:18:32.619]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:32.619]                     base::options(mc.cores = 1L)
[13:18:32.619]                   }
[13:18:32.619]                   options(future.plan = NULL)
[13:18:32.619]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.619]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:32.619]                 }
[13:18:32.619]                 ...future.workdir <- getwd()
[13:18:32.619]             }
[13:18:32.619]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:32.619]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:32.619]         }
[13:18:32.619]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:32.619]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[13:18:32.619]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:32.619]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:32.619]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:32.619]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:32.619]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:32.619]             base::names(...future.oldOptions))
[13:18:32.619]     }
[13:18:32.619]     if (FALSE) {
[13:18:32.619]     }
[13:18:32.619]     else {
[13:18:32.619]         if (TRUE) {
[13:18:32.619]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:32.619]                 open = "w")
[13:18:32.619]         }
[13:18:32.619]         else {
[13:18:32.619]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:32.619]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:32.619]         }
[13:18:32.619]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:32.619]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:32.619]             base::sink(type = "output", split = FALSE)
[13:18:32.619]             base::close(...future.stdout)
[13:18:32.619]         }, add = TRUE)
[13:18:32.619]     }
[13:18:32.619]     ...future.frame <- base::sys.nframe()
[13:18:32.619]     ...future.conditions <- base::list()
[13:18:32.619]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:32.619]     if (FALSE) {
[13:18:32.619]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:32.619]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:32.619]     }
[13:18:32.619]     ...future.result <- base::tryCatch({
[13:18:32.619]         base::withCallingHandlers({
[13:18:32.619]             ...future.value <- base::withVisible(base::local({
[13:18:32.619]                 withCallingHandlers({
[13:18:32.619]                   {
[13:18:32.619]                     do.call(function(...) {
[13:18:32.619]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.619]                       if (!identical(...future.globals.maxSize.org, 
[13:18:32.619]                         ...future.globals.maxSize)) {
[13:18:32.619]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.619]                         on.exit(options(oopts), add = TRUE)
[13:18:32.619]                       }
[13:18:32.619]                       {
[13:18:32.619]                         lapply(seq_along(...future.elements_ii), 
[13:18:32.619]                           FUN = function(jj) {
[13:18:32.619]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.619]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.619]                               envir = globalenv(), inherits = FALSE)
[13:18:32.619]                             ...future.FUN(...future.X_jj, ...)
[13:18:32.619]                           })
[13:18:32.619]                       }
[13:18:32.619]                     }, args = future.call.arguments)
[13:18:32.619]                   }
[13:18:32.619]                 }, immediateCondition = function(cond) {
[13:18:32.619]                   save_rds <- function (object, pathname, ...) 
[13:18:32.619]                   {
[13:18:32.619]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:18:32.619]                     if (file_test("-f", pathname_tmp)) {
[13:18:32.619]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.619]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:18:32.619]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.619]                         fi_tmp[["mtime"]])
[13:18:32.619]                     }
[13:18:32.619]                     tryCatch({
[13:18:32.619]                       saveRDS(object, file = pathname_tmp, ...)
[13:18:32.619]                     }, error = function(ex) {
[13:18:32.619]                       msg <- conditionMessage(ex)
[13:18:32.619]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.619]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:18:32.619]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.619]                         fi_tmp[["mtime"]], msg)
[13:18:32.619]                       ex$message <- msg
[13:18:32.619]                       stop(ex)
[13:18:32.619]                     })
[13:18:32.619]                     stopifnot(file_test("-f", pathname_tmp))
[13:18:32.619]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:18:32.619]                     if (!res || file_test("-f", pathname_tmp)) {
[13:18:32.619]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.619]                       fi <- file.info(pathname)
[13:18:32.619]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:18:32.619]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.619]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:18:32.619]                         fi[["size"]], fi[["mtime"]])
[13:18:32.619]                       stop(msg)
[13:18:32.619]                     }
[13:18:32.619]                     invisible(pathname)
[13:18:32.619]                   }
[13:18:32.619]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:18:32.619]                     rootPath = tempdir()) 
[13:18:32.619]                   {
[13:18:32.619]                     obj <- list(time = Sys.time(), condition = cond)
[13:18:32.619]                     file <- tempfile(pattern = class(cond)[1], 
[13:18:32.619]                       tmpdir = path, fileext = ".rds")
[13:18:32.619]                     save_rds(obj, file)
[13:18:32.619]                   }
[13:18:32.619]                   saveImmediateCondition(cond, path = "/tmp/RtmpPPCpJF/.future/immediateConditions")
[13:18:32.619]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.619]                   {
[13:18:32.619]                     inherits <- base::inherits
[13:18:32.619]                     invokeRestart <- base::invokeRestart
[13:18:32.619]                     is.null <- base::is.null
[13:18:32.619]                     muffled <- FALSE
[13:18:32.619]                     if (inherits(cond, "message")) {
[13:18:32.619]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:32.619]                       if (muffled) 
[13:18:32.619]                         invokeRestart("muffleMessage")
[13:18:32.619]                     }
[13:18:32.619]                     else if (inherits(cond, "warning")) {
[13:18:32.619]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:32.619]                       if (muffled) 
[13:18:32.619]                         invokeRestart("muffleWarning")
[13:18:32.619]                     }
[13:18:32.619]                     else if (inherits(cond, "condition")) {
[13:18:32.619]                       if (!is.null(pattern)) {
[13:18:32.619]                         computeRestarts <- base::computeRestarts
[13:18:32.619]                         grepl <- base::grepl
[13:18:32.619]                         restarts <- computeRestarts(cond)
[13:18:32.619]                         for (restart in restarts) {
[13:18:32.619]                           name <- restart$name
[13:18:32.619]                           if (is.null(name)) 
[13:18:32.619]                             next
[13:18:32.619]                           if (!grepl(pattern, name)) 
[13:18:32.619]                             next
[13:18:32.619]                           invokeRestart(restart)
[13:18:32.619]                           muffled <- TRUE
[13:18:32.619]                           break
[13:18:32.619]                         }
[13:18:32.619]                       }
[13:18:32.619]                     }
[13:18:32.619]                     invisible(muffled)
[13:18:32.619]                   }
[13:18:32.619]                   muffleCondition(cond)
[13:18:32.619]                 })
[13:18:32.619]             }))
[13:18:32.619]             future::FutureResult(value = ...future.value$value, 
[13:18:32.619]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.619]                   ...future.rng), globalenv = if (FALSE) 
[13:18:32.619]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:32.619]                     ...future.globalenv.names))
[13:18:32.619]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:32.619]         }, condition = base::local({
[13:18:32.619]             c <- base::c
[13:18:32.619]             inherits <- base::inherits
[13:18:32.619]             invokeRestart <- base::invokeRestart
[13:18:32.619]             length <- base::length
[13:18:32.619]             list <- base::list
[13:18:32.619]             seq.int <- base::seq.int
[13:18:32.619]             signalCondition <- base::signalCondition
[13:18:32.619]             sys.calls <- base::sys.calls
[13:18:32.619]             `[[` <- base::`[[`
[13:18:32.619]             `+` <- base::`+`
[13:18:32.619]             `<<-` <- base::`<<-`
[13:18:32.619]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:32.619]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:32.619]                   3L)]
[13:18:32.619]             }
[13:18:32.619]             function(cond) {
[13:18:32.619]                 is_error <- inherits(cond, "error")
[13:18:32.619]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:32.619]                   NULL)
[13:18:32.619]                 if (is_error) {
[13:18:32.619]                   sessionInformation <- function() {
[13:18:32.619]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:32.619]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:32.619]                       search = base::search(), system = base::Sys.info())
[13:18:32.619]                   }
[13:18:32.619]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.619]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:32.619]                     cond$call), session = sessionInformation(), 
[13:18:32.619]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:32.619]                   signalCondition(cond)
[13:18:32.619]                 }
[13:18:32.619]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:32.619]                 "immediateCondition"))) {
[13:18:32.619]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:32.619]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.619]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:32.619]                   if (TRUE && !signal) {
[13:18:32.619]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.619]                     {
[13:18:32.619]                       inherits <- base::inherits
[13:18:32.619]                       invokeRestart <- base::invokeRestart
[13:18:32.619]                       is.null <- base::is.null
[13:18:32.619]                       muffled <- FALSE
[13:18:32.619]                       if (inherits(cond, "message")) {
[13:18:32.619]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.619]                         if (muffled) 
[13:18:32.619]                           invokeRestart("muffleMessage")
[13:18:32.619]                       }
[13:18:32.619]                       else if (inherits(cond, "warning")) {
[13:18:32.619]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.619]                         if (muffled) 
[13:18:32.619]                           invokeRestart("muffleWarning")
[13:18:32.619]                       }
[13:18:32.619]                       else if (inherits(cond, "condition")) {
[13:18:32.619]                         if (!is.null(pattern)) {
[13:18:32.619]                           computeRestarts <- base::computeRestarts
[13:18:32.619]                           grepl <- base::grepl
[13:18:32.619]                           restarts <- computeRestarts(cond)
[13:18:32.619]                           for (restart in restarts) {
[13:18:32.619]                             name <- restart$name
[13:18:32.619]                             if (is.null(name)) 
[13:18:32.619]                               next
[13:18:32.619]                             if (!grepl(pattern, name)) 
[13:18:32.619]                               next
[13:18:32.619]                             invokeRestart(restart)
[13:18:32.619]                             muffled <- TRUE
[13:18:32.619]                             break
[13:18:32.619]                           }
[13:18:32.619]                         }
[13:18:32.619]                       }
[13:18:32.619]                       invisible(muffled)
[13:18:32.619]                     }
[13:18:32.619]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.619]                   }
[13:18:32.619]                 }
[13:18:32.619]                 else {
[13:18:32.619]                   if (TRUE) {
[13:18:32.619]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.619]                     {
[13:18:32.619]                       inherits <- base::inherits
[13:18:32.619]                       invokeRestart <- base::invokeRestart
[13:18:32.619]                       is.null <- base::is.null
[13:18:32.619]                       muffled <- FALSE
[13:18:32.619]                       if (inherits(cond, "message")) {
[13:18:32.619]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.619]                         if (muffled) 
[13:18:32.619]                           invokeRestart("muffleMessage")
[13:18:32.619]                       }
[13:18:32.619]                       else if (inherits(cond, "warning")) {
[13:18:32.619]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.619]                         if (muffled) 
[13:18:32.619]                           invokeRestart("muffleWarning")
[13:18:32.619]                       }
[13:18:32.619]                       else if (inherits(cond, "condition")) {
[13:18:32.619]                         if (!is.null(pattern)) {
[13:18:32.619]                           computeRestarts <- base::computeRestarts
[13:18:32.619]                           grepl <- base::grepl
[13:18:32.619]                           restarts <- computeRestarts(cond)
[13:18:32.619]                           for (restart in restarts) {
[13:18:32.619]                             name <- restart$name
[13:18:32.619]                             if (is.null(name)) 
[13:18:32.619]                               next
[13:18:32.619]                             if (!grepl(pattern, name)) 
[13:18:32.619]                               next
[13:18:32.619]                             invokeRestart(restart)
[13:18:32.619]                             muffled <- TRUE
[13:18:32.619]                             break
[13:18:32.619]                           }
[13:18:32.619]                         }
[13:18:32.619]                       }
[13:18:32.619]                       invisible(muffled)
[13:18:32.619]                     }
[13:18:32.619]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.619]                   }
[13:18:32.619]                 }
[13:18:32.619]             }
[13:18:32.619]         }))
[13:18:32.619]     }, error = function(ex) {
[13:18:32.619]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:32.619]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.619]                 ...future.rng), started = ...future.startTime, 
[13:18:32.619]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:32.619]             version = "1.8"), class = "FutureResult")
[13:18:32.619]     }, finally = {
[13:18:32.619]         if (!identical(...future.workdir, getwd())) 
[13:18:32.619]             setwd(...future.workdir)
[13:18:32.619]         {
[13:18:32.619]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:32.619]                 ...future.oldOptions$nwarnings <- NULL
[13:18:32.619]             }
[13:18:32.619]             base::options(...future.oldOptions)
[13:18:32.619]             if (.Platform$OS.type == "windows") {
[13:18:32.619]                 old_names <- names(...future.oldEnvVars)
[13:18:32.619]                 envs <- base::Sys.getenv()
[13:18:32.619]                 names <- names(envs)
[13:18:32.619]                 common <- intersect(names, old_names)
[13:18:32.619]                 added <- setdiff(names, old_names)
[13:18:32.619]                 removed <- setdiff(old_names, names)
[13:18:32.619]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:32.619]                   envs[common]]
[13:18:32.619]                 NAMES <- toupper(changed)
[13:18:32.619]                 args <- list()
[13:18:32.619]                 for (kk in seq_along(NAMES)) {
[13:18:32.619]                   name <- changed[[kk]]
[13:18:32.619]                   NAME <- NAMES[[kk]]
[13:18:32.619]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.619]                     next
[13:18:32.619]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.619]                 }
[13:18:32.619]                 NAMES <- toupper(added)
[13:18:32.619]                 for (kk in seq_along(NAMES)) {
[13:18:32.619]                   name <- added[[kk]]
[13:18:32.619]                   NAME <- NAMES[[kk]]
[13:18:32.619]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.619]                     next
[13:18:32.619]                   args[[name]] <- ""
[13:18:32.619]                 }
[13:18:32.619]                 NAMES <- toupper(removed)
[13:18:32.619]                 for (kk in seq_along(NAMES)) {
[13:18:32.619]                   name <- removed[[kk]]
[13:18:32.619]                   NAME <- NAMES[[kk]]
[13:18:32.619]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.619]                     next
[13:18:32.619]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.619]                 }
[13:18:32.619]                 if (length(args) > 0) 
[13:18:32.619]                   base::do.call(base::Sys.setenv, args = args)
[13:18:32.619]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:32.619]             }
[13:18:32.619]             else {
[13:18:32.619]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:32.619]             }
[13:18:32.619]             {
[13:18:32.619]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:32.619]                   0L) {
[13:18:32.619]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:32.619]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:32.619]                   base::options(opts)
[13:18:32.619]                 }
[13:18:32.619]                 {
[13:18:32.619]                   {
[13:18:32.619]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:32.619]                     NULL
[13:18:32.619]                   }
[13:18:32.619]                   options(future.plan = NULL)
[13:18:32.619]                   if (is.na(NA_character_)) 
[13:18:32.619]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.619]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:32.619]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:18:32.619]                     envir = parent.frame()) 
[13:18:32.619]                   {
[13:18:32.619]                     default_workers <- missing(workers)
[13:18:32.619]                     if (is.function(workers)) 
[13:18:32.619]                       workers <- workers()
[13:18:32.619]                     workers <- structure(as.integer(workers), 
[13:18:32.619]                       class = class(workers))
[13:18:32.619]                     stop_if_not(is.finite(workers), workers >= 
[13:18:32.619]                       1L)
[13:18:32.619]                     if ((workers == 1L && !inherits(workers, 
[13:18:32.619]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:18:32.619]                       if (default_workers) 
[13:18:32.619]                         supportsMulticore(warn = TRUE)
[13:18:32.619]                       return(sequential(..., envir = envir))
[13:18:32.619]                     }
[13:18:32.619]                     oopts <- options(mc.cores = workers)
[13:18:32.619]                     on.exit(options(oopts))
[13:18:32.619]                     future <- MulticoreFuture(..., workers = workers, 
[13:18:32.619]                       envir = envir)
[13:18:32.619]                     if (!future$lazy) 
[13:18:32.619]                       future <- run(future)
[13:18:32.619]                     invisible(future)
[13:18:32.619]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:32.619]                 }
[13:18:32.619]             }
[13:18:32.619]         }
[13:18:32.619]     })
[13:18:32.619]     if (TRUE) {
[13:18:32.619]         base::sink(type = "output", split = FALSE)
[13:18:32.619]         if (TRUE) {
[13:18:32.619]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:32.619]         }
[13:18:32.619]         else {
[13:18:32.619]             ...future.result["stdout"] <- base::list(NULL)
[13:18:32.619]         }
[13:18:32.619]         base::close(...future.stdout)
[13:18:32.619]         ...future.stdout <- NULL
[13:18:32.619]     }
[13:18:32.619]     ...future.result$conditions <- ...future.conditions
[13:18:32.619]     ...future.result$finished <- base::Sys.time()
[13:18:32.619]     ...future.result
[13:18:32.619] }
[13:18:32.623] assign_globals() ...
[13:18:32.623] List of 5
[13:18:32.623]  $ ...future.FUN            :function (...)  
[13:18:32.623]  $ future.call.arguments    : list()
[13:18:32.623]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.623]  $ ...future.elements_ii    :List of 3
[13:18:32.623]   ..$ : int 0
[13:18:32.623]   ..$ : int 0
[13:18:32.623]   ..$ : int 0
[13:18:32.623]  $ ...future.seeds_ii       :List of 3
[13:18:32.623]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[13:18:32.623]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[13:18:32.623]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[13:18:32.623]  $ ...future.globals.maxSize: NULL
[13:18:32.623]  - attr(*, "resolved")= logi FALSE
[13:18:32.623]  - attr(*, "total_size")= num 616
[13:18:32.623]  - attr(*, "where")=List of 5
[13:18:32.623]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:18:32.623]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:18:32.623]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:18:32.623]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:18:32.623]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:18:32.623]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.623]  - attr(*, "already-done")= logi TRUE
[13:18:32.636] - reassign environment for ‘...future.FUN’
[13:18:32.636] - copied ‘...future.FUN’ to environment
[13:18:32.636] - copied ‘future.call.arguments’ to environment
[13:18:32.637] - copied ‘...future.elements_ii’ to environment
[13:18:32.637] - copied ‘...future.seeds_ii’ to environment
[13:18:32.637] - copied ‘...future.globals.maxSize’ to environment
[13:18:32.637] assign_globals() ... done
[13:18:32.637] requestCore(): workers = 2
[13:18:32.639] MulticoreFuture started
[13:18:32.640] - Launch lazy future ... done
[13:18:32.640] run() for ‘MulticoreFuture’ ... done
[13:18:32.640] Created future:
[13:18:32.641] plan(): Setting new future strategy stack:
[13:18:32.641] List of future strategies:
[13:18:32.641] 1. sequential:
[13:18:32.641]    - args: function (..., envir = parent.frame())
[13:18:32.641]    - tweaked: FALSE
[13:18:32.641]    - call: NULL
[13:18:32.642] plan(): nbrOfWorkers() = 1
[13:18:32.644] plan(): Setting new future strategy stack:
[13:18:32.644] List of future strategies:
[13:18:32.644] 1. multicore:
[13:18:32.644]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:18:32.644]    - tweaked: FALSE
[13:18:32.644]    - call: plan(strategy)
[13:18:32.650] plan(): nbrOfWorkers() = 2
[13:18:32.640] MulticoreFuture:
[13:18:32.640] Label: ‘future_replicate-2’
[13:18:32.640] Expression:
[13:18:32.640] {
[13:18:32.640]     do.call(function(...) {
[13:18:32.640]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.640]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.640]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.640]             on.exit(options(oopts), add = TRUE)
[13:18:32.640]         }
[13:18:32.640]         {
[13:18:32.640]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.640]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.640]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.640]                   envir = globalenv(), inherits = FALSE)
[13:18:32.640]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.640]             })
[13:18:32.640]         }
[13:18:32.640]     }, args = future.call.arguments)
[13:18:32.640] }
[13:18:32.640] Lazy evaluation: FALSE
[13:18:32.640] Asynchronous evaluation: TRUE
[13:18:32.640] Local evaluation: TRUE
[13:18:32.640] Environment: R_GlobalEnv
[13:18:32.640] Capture standard output: TRUE
[13:18:32.640] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:32.640] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:32.640] Packages: <none>
[13:18:32.640] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:32.640] Resolved: TRUE
[13:18:32.640] Value: <not collected>
[13:18:32.640] Conditions captured: <none>
[13:18:32.640] Early signaling: FALSE
[13:18:32.640] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:32.640] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:32.651] Chunk #2 of 2 ... DONE
[13:18:32.651] Launching 2 futures (chunks) ... DONE
[13:18:32.651] Resolving 2 futures (chunks) ...
[13:18:32.651] resolve() on list ...
[13:18:32.652]  recursive: 0
[13:18:32.652]  length: 2
[13:18:32.652] 
[13:18:32.652] Future #1
[13:18:32.653] signalConditionsASAP(MulticoreFuture, pos=1) ...
[13:18:32.654] - nx: 2
[13:18:32.654] - relay: TRUE
[13:18:32.654] - stdout: TRUE
[13:18:32.654] - signal: TRUE
[13:18:32.654] - resignal: FALSE
[13:18:32.654] - force: TRUE
[13:18:32.654] - relayed: [n=2] FALSE, FALSE
[13:18:32.655] - queued futures: [n=2] FALSE, FALSE
[13:18:32.655]  - until=1
[13:18:32.655]  - relaying element #1
[13:18:32.655] - relayed: [n=2] TRUE, FALSE
[13:18:32.655] - queued futures: [n=2] TRUE, FALSE
[13:18:32.655] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[13:18:32.656]  length: 1 (resolved future 1)
[13:18:32.656] Future #2
[13:18:32.657] signalConditionsASAP(MulticoreFuture, pos=2) ...
[13:18:32.657] - nx: 2
[13:18:32.657] - relay: TRUE
[13:18:32.657] - stdout: TRUE
[13:18:32.657] - signal: TRUE
[13:18:32.657] - resignal: FALSE
[13:18:32.658] - force: TRUE
[13:18:32.658] - relayed: [n=2] TRUE, FALSE
[13:18:32.658] - queued futures: [n=2] TRUE, FALSE
[13:18:32.658]  - until=2
[13:18:32.658]  - relaying element #2
[13:18:32.658] - relayed: [n=2] TRUE, TRUE
[13:18:32.659] - queued futures: [n=2] TRUE, TRUE
[13:18:32.659] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[13:18:32.659]  length: 0 (resolved future 2)
[13:18:32.659] Relaying remaining futures
[13:18:32.659] signalConditionsASAP(NULL, pos=0) ...
[13:18:32.659] - nx: 2
[13:18:32.659] - relay: TRUE
[13:18:32.659] - stdout: TRUE
[13:18:32.659] - signal: TRUE
[13:18:32.660] - resignal: FALSE
[13:18:32.660] - force: TRUE
[13:18:32.660] - relayed: [n=2] TRUE, TRUE
[13:18:32.660] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:18:32.660] - relayed: [n=2] TRUE, TRUE
[13:18:32.660] - queued futures: [n=2] TRUE, TRUE
[13:18:32.660] signalConditionsASAP(NULL, pos=0) ... done
[13:18:32.660] resolve() on list ... DONE
[13:18:32.661]  - Number of value chunks collected: 2
[13:18:32.661] Resolving 2 futures (chunks) ... DONE
[13:18:32.661] Reducing values from 2 chunks ...
[13:18:32.661]  - Number of values collected after concatenation: 5
[13:18:32.661]  - Number of values expected: 5
[13:18:32.661] Reducing values from 2 chunks ... DONE
[13:18:32.661] future_lapply() ... DONE
[13:18:32.661] future_lapply() ...
[13:18:32.662] Generating random seeds ...
[13:18:32.662] Generating random seed streams for 5 elements ...
[13:18:32.662] Generating random seed streams for 5 elements ... DONE
[13:18:32.663] Generating random seeds ... DONE
[13:18:32.663] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:18:32.667] Number of chunks: 2
[13:18:32.667] getGlobalsAndPackagesXApply() ...
[13:18:32.667]  - future.globals: TRUE
[13:18:32.668] getGlobalsAndPackages() ...
[13:18:32.668] Searching for globals...
[13:18:32.669] - globals found: [2] ‘FUN’, ‘sample’
[13:18:32.669] Searching for globals ... DONE
[13:18:32.669] Resolving globals: FALSE
[13:18:32.670] The total size of the 1 globals is 616 bytes (616 bytes)
[13:18:32.670] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:18:32.670] - globals: [1] ‘FUN’
[13:18:32.670] 
[13:18:32.671] getGlobalsAndPackages() ... DONE
[13:18:32.671]  - globals found/used: [n=1] ‘FUN’
[13:18:32.671]  - needed namespaces: [n=0] 
[13:18:32.671] Finding globals ... DONE
[13:18:32.671]  - use_args: TRUE
[13:18:32.671]  - Getting '...' globals ...
[13:18:32.671] resolve() on list ...
[13:18:32.672]  recursive: 0
[13:18:32.672]  length: 1
[13:18:32.672]  elements: ‘...’
[13:18:32.672]  length: 0 (resolved future 1)
[13:18:32.672] resolve() on list ... DONE
[13:18:32.672]    - '...' content: [n=0] 
[13:18:32.672] List of 1
[13:18:32.672]  $ ...: list()
[13:18:32.672]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.672]  - attr(*, "where")=List of 1
[13:18:32.672]   ..$ ...:<environment: 0x55df1e036cd8> 
[13:18:32.672]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.672]  - attr(*, "resolved")= logi TRUE
[13:18:32.672]  - attr(*, "total_size")= num NA
[13:18:32.678]  - Getting '...' globals ... DONE
[13:18:32.678] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:18:32.678] List of 2
[13:18:32.678]  $ ...future.FUN:function (...)  
[13:18:32.678]  $ ...          : list()
[13:18:32.678]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.678]  - attr(*, "where")=List of 2
[13:18:32.678]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:18:32.678]   ..$ ...          :<environment: 0x55df1e036cd8> 
[13:18:32.678]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.678]  - attr(*, "resolved")= logi FALSE
[13:18:32.678]  - attr(*, "total_size")= num 616
[13:18:32.682] Packages to be attached in all futures: [n=0] 
[13:18:32.682] getGlobalsAndPackagesXApply() ... DONE
[13:18:32.682] Number of futures (= number of chunks): 2
[13:18:32.682] Launching 2 futures (chunks) ...
[13:18:32.682] Chunk #1 of 2 ...
[13:18:32.682]  - Finding globals in 'X' for chunk #1 ...
[13:18:32.682] getGlobalsAndPackages() ...
[13:18:32.682] Searching for globals...
[13:18:32.683] 
[13:18:32.683] Searching for globals ... DONE
[13:18:32.683] - globals: [0] <none>
[13:18:32.683] getGlobalsAndPackages() ... DONE
[13:18:32.683]    + additional globals found: [n=0] 
[13:18:32.683]    + additional namespaces needed: [n=0] 
[13:18:32.683]  - Finding globals in 'X' for chunk #1 ... DONE
[13:18:32.683]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:18:32.684]  - seeds: [2] <seeds>
[13:18:32.684] getGlobalsAndPackages() ...
[13:18:32.684] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.684] Resolving globals: FALSE
[13:18:32.684] Tweak future expression to call with '...' arguments ...
[13:18:32.684] {
[13:18:32.684]     do.call(function(...) {
[13:18:32.684]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.684]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.684]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.684]             on.exit(options(oopts), add = TRUE)
[13:18:32.684]         }
[13:18:32.684]         {
[13:18:32.684]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.684]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.684]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.684]                   envir = globalenv(), inherits = FALSE)
[13:18:32.684]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.684]             })
[13:18:32.684]         }
[13:18:32.684]     }, args = future.call.arguments)
[13:18:32.684] }
[13:18:32.684] Tweak future expression to call with '...' arguments ... DONE
[13:18:32.685] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.685] 
[13:18:32.685] getGlobalsAndPackages() ... DONE
[13:18:32.685] run() for ‘Future’ ...
[13:18:32.685] - state: ‘created’
[13:18:32.686] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:18:32.690] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:32.690] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:18:32.690]   - Field: ‘label’
[13:18:32.690]   - Field: ‘local’
[13:18:32.690]   - Field: ‘owner’
[13:18:32.690]   - Field: ‘envir’
[13:18:32.690]   - Field: ‘workers’
[13:18:32.691]   - Field: ‘packages’
[13:18:32.691]   - Field: ‘gc’
[13:18:32.691]   - Field: ‘job’
[13:18:32.691]   - Field: ‘conditions’
[13:18:32.691]   - Field: ‘expr’
[13:18:32.691]   - Field: ‘uuid’
[13:18:32.691]   - Field: ‘seed’
[13:18:32.691]   - Field: ‘version’
[13:18:32.691]   - Field: ‘result’
[13:18:32.691]   - Field: ‘asynchronous’
[13:18:32.691]   - Field: ‘calls’
[13:18:32.692]   - Field: ‘globals’
[13:18:32.692]   - Field: ‘stdout’
[13:18:32.692]   - Field: ‘earlySignal’
[13:18:32.692]   - Field: ‘lazy’
[13:18:32.692]   - Field: ‘state’
[13:18:32.692] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:18:32.692] - Launch lazy future ...
[13:18:32.692] Packages needed by the future expression (n = 0): <none>
[13:18:32.692] Packages needed by future strategies (n = 0): <none>
[13:18:32.693] {
[13:18:32.693]     {
[13:18:32.693]         {
[13:18:32.693]             ...future.startTime <- base::Sys.time()
[13:18:32.693]             {
[13:18:32.693]                 {
[13:18:32.693]                   {
[13:18:32.693]                     {
[13:18:32.693]                       base::local({
[13:18:32.693]                         has_future <- base::requireNamespace("future", 
[13:18:32.693]                           quietly = TRUE)
[13:18:32.693]                         if (has_future) {
[13:18:32.693]                           ns <- base::getNamespace("future")
[13:18:32.693]                           version <- ns[[".package"]][["version"]]
[13:18:32.693]                           if (is.null(version)) 
[13:18:32.693]                             version <- utils::packageVersion("future")
[13:18:32.693]                         }
[13:18:32.693]                         else {
[13:18:32.693]                           version <- NULL
[13:18:32.693]                         }
[13:18:32.693]                         if (!has_future || version < "1.8.0") {
[13:18:32.693]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:32.693]                             "", base::R.version$version.string), 
[13:18:32.693]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:32.693]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:32.693]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:32.693]                               "release", "version")], collapse = " "), 
[13:18:32.693]                             hostname = base::Sys.info()[["nodename"]])
[13:18:32.693]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:32.693]                             info)
[13:18:32.693]                           info <- base::paste(info, collapse = "; ")
[13:18:32.693]                           if (!has_future) {
[13:18:32.693]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:32.693]                               info)
[13:18:32.693]                           }
[13:18:32.693]                           else {
[13:18:32.693]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:32.693]                               info, version)
[13:18:32.693]                           }
[13:18:32.693]                           base::stop(msg)
[13:18:32.693]                         }
[13:18:32.693]                       })
[13:18:32.693]                     }
[13:18:32.693]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:32.693]                     base::options(mc.cores = 1L)
[13:18:32.693]                   }
[13:18:32.693]                   options(future.plan = NULL)
[13:18:32.693]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.693]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:32.693]                 }
[13:18:32.693]                 ...future.workdir <- getwd()
[13:18:32.693]             }
[13:18:32.693]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:32.693]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:32.693]         }
[13:18:32.693]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:32.693]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:18:32.693]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:32.693]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:32.693]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:32.693]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:32.693]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:32.693]             base::names(...future.oldOptions))
[13:18:32.693]     }
[13:18:32.693]     if (FALSE) {
[13:18:32.693]     }
[13:18:32.693]     else {
[13:18:32.693]         if (TRUE) {
[13:18:32.693]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:32.693]                 open = "w")
[13:18:32.693]         }
[13:18:32.693]         else {
[13:18:32.693]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:32.693]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:32.693]         }
[13:18:32.693]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:32.693]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:32.693]             base::sink(type = "output", split = FALSE)
[13:18:32.693]             base::close(...future.stdout)
[13:18:32.693]         }, add = TRUE)
[13:18:32.693]     }
[13:18:32.693]     ...future.frame <- base::sys.nframe()
[13:18:32.693]     ...future.conditions <- base::list()
[13:18:32.693]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:32.693]     if (FALSE) {
[13:18:32.693]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:32.693]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:32.693]     }
[13:18:32.693]     ...future.result <- base::tryCatch({
[13:18:32.693]         base::withCallingHandlers({
[13:18:32.693]             ...future.value <- base::withVisible(base::local({
[13:18:32.693]                 withCallingHandlers({
[13:18:32.693]                   {
[13:18:32.693]                     do.call(function(...) {
[13:18:32.693]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.693]                       if (!identical(...future.globals.maxSize.org, 
[13:18:32.693]                         ...future.globals.maxSize)) {
[13:18:32.693]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.693]                         on.exit(options(oopts), add = TRUE)
[13:18:32.693]                       }
[13:18:32.693]                       {
[13:18:32.693]                         lapply(seq_along(...future.elements_ii), 
[13:18:32.693]                           FUN = function(jj) {
[13:18:32.693]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.693]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.693]                               envir = globalenv(), inherits = FALSE)
[13:18:32.693]                             ...future.FUN(...future.X_jj, ...)
[13:18:32.693]                           })
[13:18:32.693]                       }
[13:18:32.693]                     }, args = future.call.arguments)
[13:18:32.693]                   }
[13:18:32.693]                 }, immediateCondition = function(cond) {
[13:18:32.693]                   save_rds <- function (object, pathname, ...) 
[13:18:32.693]                   {
[13:18:32.693]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:18:32.693]                     if (file_test("-f", pathname_tmp)) {
[13:18:32.693]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.693]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:18:32.693]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.693]                         fi_tmp[["mtime"]])
[13:18:32.693]                     }
[13:18:32.693]                     tryCatch({
[13:18:32.693]                       saveRDS(object, file = pathname_tmp, ...)
[13:18:32.693]                     }, error = function(ex) {
[13:18:32.693]                       msg <- conditionMessage(ex)
[13:18:32.693]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.693]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:18:32.693]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.693]                         fi_tmp[["mtime"]], msg)
[13:18:32.693]                       ex$message <- msg
[13:18:32.693]                       stop(ex)
[13:18:32.693]                     })
[13:18:32.693]                     stopifnot(file_test("-f", pathname_tmp))
[13:18:32.693]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:18:32.693]                     if (!res || file_test("-f", pathname_tmp)) {
[13:18:32.693]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.693]                       fi <- file.info(pathname)
[13:18:32.693]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:18:32.693]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.693]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:18:32.693]                         fi[["size"]], fi[["mtime"]])
[13:18:32.693]                       stop(msg)
[13:18:32.693]                     }
[13:18:32.693]                     invisible(pathname)
[13:18:32.693]                   }
[13:18:32.693]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:18:32.693]                     rootPath = tempdir()) 
[13:18:32.693]                   {
[13:18:32.693]                     obj <- list(time = Sys.time(), condition = cond)
[13:18:32.693]                     file <- tempfile(pattern = class(cond)[1], 
[13:18:32.693]                       tmpdir = path, fileext = ".rds")
[13:18:32.693]                     save_rds(obj, file)
[13:18:32.693]                   }
[13:18:32.693]                   saveImmediateCondition(cond, path = "/tmp/RtmpPPCpJF/.future/immediateConditions")
[13:18:32.693]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.693]                   {
[13:18:32.693]                     inherits <- base::inherits
[13:18:32.693]                     invokeRestart <- base::invokeRestart
[13:18:32.693]                     is.null <- base::is.null
[13:18:32.693]                     muffled <- FALSE
[13:18:32.693]                     if (inherits(cond, "message")) {
[13:18:32.693]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:32.693]                       if (muffled) 
[13:18:32.693]                         invokeRestart("muffleMessage")
[13:18:32.693]                     }
[13:18:32.693]                     else if (inherits(cond, "warning")) {
[13:18:32.693]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:32.693]                       if (muffled) 
[13:18:32.693]                         invokeRestart("muffleWarning")
[13:18:32.693]                     }
[13:18:32.693]                     else if (inherits(cond, "condition")) {
[13:18:32.693]                       if (!is.null(pattern)) {
[13:18:32.693]                         computeRestarts <- base::computeRestarts
[13:18:32.693]                         grepl <- base::grepl
[13:18:32.693]                         restarts <- computeRestarts(cond)
[13:18:32.693]                         for (restart in restarts) {
[13:18:32.693]                           name <- restart$name
[13:18:32.693]                           if (is.null(name)) 
[13:18:32.693]                             next
[13:18:32.693]                           if (!grepl(pattern, name)) 
[13:18:32.693]                             next
[13:18:32.693]                           invokeRestart(restart)
[13:18:32.693]                           muffled <- TRUE
[13:18:32.693]                           break
[13:18:32.693]                         }
[13:18:32.693]                       }
[13:18:32.693]                     }
[13:18:32.693]                     invisible(muffled)
[13:18:32.693]                   }
[13:18:32.693]                   muffleCondition(cond)
[13:18:32.693]                 })
[13:18:32.693]             }))
[13:18:32.693]             future::FutureResult(value = ...future.value$value, 
[13:18:32.693]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.693]                   ...future.rng), globalenv = if (FALSE) 
[13:18:32.693]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:32.693]                     ...future.globalenv.names))
[13:18:32.693]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:32.693]         }, condition = base::local({
[13:18:32.693]             c <- base::c
[13:18:32.693]             inherits <- base::inherits
[13:18:32.693]             invokeRestart <- base::invokeRestart
[13:18:32.693]             length <- base::length
[13:18:32.693]             list <- base::list
[13:18:32.693]             seq.int <- base::seq.int
[13:18:32.693]             signalCondition <- base::signalCondition
[13:18:32.693]             sys.calls <- base::sys.calls
[13:18:32.693]             `[[` <- base::`[[`
[13:18:32.693]             `+` <- base::`+`
[13:18:32.693]             `<<-` <- base::`<<-`
[13:18:32.693]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:32.693]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:32.693]                   3L)]
[13:18:32.693]             }
[13:18:32.693]             function(cond) {
[13:18:32.693]                 is_error <- inherits(cond, "error")
[13:18:32.693]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:32.693]                   NULL)
[13:18:32.693]                 if (is_error) {
[13:18:32.693]                   sessionInformation <- function() {
[13:18:32.693]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:32.693]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:32.693]                       search = base::search(), system = base::Sys.info())
[13:18:32.693]                   }
[13:18:32.693]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.693]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:32.693]                     cond$call), session = sessionInformation(), 
[13:18:32.693]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:32.693]                   signalCondition(cond)
[13:18:32.693]                 }
[13:18:32.693]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:32.693]                 "immediateCondition"))) {
[13:18:32.693]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:32.693]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.693]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:32.693]                   if (TRUE && !signal) {
[13:18:32.693]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.693]                     {
[13:18:32.693]                       inherits <- base::inherits
[13:18:32.693]                       invokeRestart <- base::invokeRestart
[13:18:32.693]                       is.null <- base::is.null
[13:18:32.693]                       muffled <- FALSE
[13:18:32.693]                       if (inherits(cond, "message")) {
[13:18:32.693]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.693]                         if (muffled) 
[13:18:32.693]                           invokeRestart("muffleMessage")
[13:18:32.693]                       }
[13:18:32.693]                       else if (inherits(cond, "warning")) {
[13:18:32.693]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.693]                         if (muffled) 
[13:18:32.693]                           invokeRestart("muffleWarning")
[13:18:32.693]                       }
[13:18:32.693]                       else if (inherits(cond, "condition")) {
[13:18:32.693]                         if (!is.null(pattern)) {
[13:18:32.693]                           computeRestarts <- base::computeRestarts
[13:18:32.693]                           grepl <- base::grepl
[13:18:32.693]                           restarts <- computeRestarts(cond)
[13:18:32.693]                           for (restart in restarts) {
[13:18:32.693]                             name <- restart$name
[13:18:32.693]                             if (is.null(name)) 
[13:18:32.693]                               next
[13:18:32.693]                             if (!grepl(pattern, name)) 
[13:18:32.693]                               next
[13:18:32.693]                             invokeRestart(restart)
[13:18:32.693]                             muffled <- TRUE
[13:18:32.693]                             break
[13:18:32.693]                           }
[13:18:32.693]                         }
[13:18:32.693]                       }
[13:18:32.693]                       invisible(muffled)
[13:18:32.693]                     }
[13:18:32.693]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.693]                   }
[13:18:32.693]                 }
[13:18:32.693]                 else {
[13:18:32.693]                   if (TRUE) {
[13:18:32.693]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.693]                     {
[13:18:32.693]                       inherits <- base::inherits
[13:18:32.693]                       invokeRestart <- base::invokeRestart
[13:18:32.693]                       is.null <- base::is.null
[13:18:32.693]                       muffled <- FALSE
[13:18:32.693]                       if (inherits(cond, "message")) {
[13:18:32.693]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.693]                         if (muffled) 
[13:18:32.693]                           invokeRestart("muffleMessage")
[13:18:32.693]                       }
[13:18:32.693]                       else if (inherits(cond, "warning")) {
[13:18:32.693]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.693]                         if (muffled) 
[13:18:32.693]                           invokeRestart("muffleWarning")
[13:18:32.693]                       }
[13:18:32.693]                       else if (inherits(cond, "condition")) {
[13:18:32.693]                         if (!is.null(pattern)) {
[13:18:32.693]                           computeRestarts <- base::computeRestarts
[13:18:32.693]                           grepl <- base::grepl
[13:18:32.693]                           restarts <- computeRestarts(cond)
[13:18:32.693]                           for (restart in restarts) {
[13:18:32.693]                             name <- restart$name
[13:18:32.693]                             if (is.null(name)) 
[13:18:32.693]                               next
[13:18:32.693]                             if (!grepl(pattern, name)) 
[13:18:32.693]                               next
[13:18:32.693]                             invokeRestart(restart)
[13:18:32.693]                             muffled <- TRUE
[13:18:32.693]                             break
[13:18:32.693]                           }
[13:18:32.693]                         }
[13:18:32.693]                       }
[13:18:32.693]                       invisible(muffled)
[13:18:32.693]                     }
[13:18:32.693]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.693]                   }
[13:18:32.693]                 }
[13:18:32.693]             }
[13:18:32.693]         }))
[13:18:32.693]     }, error = function(ex) {
[13:18:32.693]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:32.693]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.693]                 ...future.rng), started = ...future.startTime, 
[13:18:32.693]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:32.693]             version = "1.8"), class = "FutureResult")
[13:18:32.693]     }, finally = {
[13:18:32.693]         if (!identical(...future.workdir, getwd())) 
[13:18:32.693]             setwd(...future.workdir)
[13:18:32.693]         {
[13:18:32.693]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:32.693]                 ...future.oldOptions$nwarnings <- NULL
[13:18:32.693]             }
[13:18:32.693]             base::options(...future.oldOptions)
[13:18:32.693]             if (.Platform$OS.type == "windows") {
[13:18:32.693]                 old_names <- names(...future.oldEnvVars)
[13:18:32.693]                 envs <- base::Sys.getenv()
[13:18:32.693]                 names <- names(envs)
[13:18:32.693]                 common <- intersect(names, old_names)
[13:18:32.693]                 added <- setdiff(names, old_names)
[13:18:32.693]                 removed <- setdiff(old_names, names)
[13:18:32.693]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:32.693]                   envs[common]]
[13:18:32.693]                 NAMES <- toupper(changed)
[13:18:32.693]                 args <- list()
[13:18:32.693]                 for (kk in seq_along(NAMES)) {
[13:18:32.693]                   name <- changed[[kk]]
[13:18:32.693]                   NAME <- NAMES[[kk]]
[13:18:32.693]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.693]                     next
[13:18:32.693]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.693]                 }
[13:18:32.693]                 NAMES <- toupper(added)
[13:18:32.693]                 for (kk in seq_along(NAMES)) {
[13:18:32.693]                   name <- added[[kk]]
[13:18:32.693]                   NAME <- NAMES[[kk]]
[13:18:32.693]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.693]                     next
[13:18:32.693]                   args[[name]] <- ""
[13:18:32.693]                 }
[13:18:32.693]                 NAMES <- toupper(removed)
[13:18:32.693]                 for (kk in seq_along(NAMES)) {
[13:18:32.693]                   name <- removed[[kk]]
[13:18:32.693]                   NAME <- NAMES[[kk]]
[13:18:32.693]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.693]                     next
[13:18:32.693]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.693]                 }
[13:18:32.693]                 if (length(args) > 0) 
[13:18:32.693]                   base::do.call(base::Sys.setenv, args = args)
[13:18:32.693]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:32.693]             }
[13:18:32.693]             else {
[13:18:32.693]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:32.693]             }
[13:18:32.693]             {
[13:18:32.693]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:32.693]                   0L) {
[13:18:32.693]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:32.693]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:32.693]                   base::options(opts)
[13:18:32.693]                 }
[13:18:32.693]                 {
[13:18:32.693]                   {
[13:18:32.693]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:32.693]                     NULL
[13:18:32.693]                   }
[13:18:32.693]                   options(future.plan = NULL)
[13:18:32.693]                   if (is.na(NA_character_)) 
[13:18:32.693]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.693]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:32.693]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:18:32.693]                     envir = parent.frame()) 
[13:18:32.693]                   {
[13:18:32.693]                     default_workers <- missing(workers)
[13:18:32.693]                     if (is.function(workers)) 
[13:18:32.693]                       workers <- workers()
[13:18:32.693]                     workers <- structure(as.integer(workers), 
[13:18:32.693]                       class = class(workers))
[13:18:32.693]                     stop_if_not(is.finite(workers), workers >= 
[13:18:32.693]                       1L)
[13:18:32.693]                     if ((workers == 1L && !inherits(workers, 
[13:18:32.693]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:18:32.693]                       if (default_workers) 
[13:18:32.693]                         supportsMulticore(warn = TRUE)
[13:18:32.693]                       return(sequential(..., envir = envir))
[13:18:32.693]                     }
[13:18:32.693]                     oopts <- options(mc.cores = workers)
[13:18:32.693]                     on.exit(options(oopts))
[13:18:32.693]                     future <- MulticoreFuture(..., workers = workers, 
[13:18:32.693]                       envir = envir)
[13:18:32.693]                     if (!future$lazy) 
[13:18:32.693]                       future <- run(future)
[13:18:32.693]                     invisible(future)
[13:18:32.693]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:32.693]                 }
[13:18:32.693]             }
[13:18:32.693]         }
[13:18:32.693]     })
[13:18:32.693]     if (TRUE) {
[13:18:32.693]         base::sink(type = "output", split = FALSE)
[13:18:32.693]         if (TRUE) {
[13:18:32.693]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:32.693]         }
[13:18:32.693]         else {
[13:18:32.693]             ...future.result["stdout"] <- base::list(NULL)
[13:18:32.693]         }
[13:18:32.693]         base::close(...future.stdout)
[13:18:32.693]         ...future.stdout <- NULL
[13:18:32.693]     }
[13:18:32.693]     ...future.result$conditions <- ...future.conditions
[13:18:32.693]     ...future.result$finished <- base::Sys.time()
[13:18:32.693]     ...future.result
[13:18:32.693] }
[13:18:32.696] assign_globals() ...
[13:18:32.696] List of 5
[13:18:32.696]  $ ...future.FUN            :function (...)  
[13:18:32.696]  $ future.call.arguments    : list()
[13:18:32.696]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.696]  $ ...future.elements_ii    :List of 2
[13:18:32.696]   ..$ : int 0
[13:18:32.696]   ..$ : int 0
[13:18:32.696]  $ ...future.seeds_ii       :List of 2
[13:18:32.696]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[13:18:32.696]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[13:18:32.696]  $ ...future.globals.maxSize: NULL
[13:18:32.696]  - attr(*, "resolved")= logi FALSE
[13:18:32.696]  - attr(*, "total_size")= num 616
[13:18:32.696]  - attr(*, "where")=List of 5
[13:18:32.696]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:18:32.696]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:18:32.696]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:18:32.696]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:18:32.696]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:18:32.696]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.696]  - attr(*, "already-done")= logi TRUE
[13:18:32.704] - reassign environment for ‘...future.FUN’
[13:18:32.704] - copied ‘...future.FUN’ to environment
[13:18:32.704] - copied ‘future.call.arguments’ to environment
[13:18:32.704] - copied ‘...future.elements_ii’ to environment
[13:18:32.704] - copied ‘...future.seeds_ii’ to environment
[13:18:32.704] - copied ‘...future.globals.maxSize’ to environment
[13:18:32.704] assign_globals() ... done
[13:18:32.704] requestCore(): workers = 2
[13:18:32.707] MulticoreFuture started
[13:18:32.707] - Launch lazy future ... done
[13:18:32.707] run() for ‘MulticoreFuture’ ... done
[13:18:32.708] Created future:
[13:18:32.708] plan(): Setting new future strategy stack:
[13:18:32.708] List of future strategies:
[13:18:32.708] 1. sequential:
[13:18:32.708]    - args: function (..., envir = parent.frame())
[13:18:32.708]    - tweaked: FALSE
[13:18:32.708]    - call: NULL
[13:18:32.709] plan(): nbrOfWorkers() = 1
[13:18:32.711] plan(): Setting new future strategy stack:
[13:18:32.712] List of future strategies:
[13:18:32.712] 1. multicore:
[13:18:32.712]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:18:32.712]    - tweaked: FALSE
[13:18:32.712]    - call: plan(strategy)
[13:18:32.717] plan(): nbrOfWorkers() = 2
[13:18:32.708] MulticoreFuture:
[13:18:32.708] Label: ‘future_replicate-1’
[13:18:32.708] Expression:
[13:18:32.708] {
[13:18:32.708]     do.call(function(...) {
[13:18:32.708]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.708]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.708]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.708]             on.exit(options(oopts), add = TRUE)
[13:18:32.708]         }
[13:18:32.708]         {
[13:18:32.708]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.708]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.708]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.708]                   envir = globalenv(), inherits = FALSE)
[13:18:32.708]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.708]             })
[13:18:32.708]         }
[13:18:32.708]     }, args = future.call.arguments)
[13:18:32.708] }
[13:18:32.708] Lazy evaluation: FALSE
[13:18:32.708] Asynchronous evaluation: TRUE
[13:18:32.708] Local evaluation: TRUE
[13:18:32.708] Environment: R_GlobalEnv
[13:18:32.708] Capture standard output: TRUE
[13:18:32.708] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:32.708] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:32.708] Packages: <none>
[13:18:32.708] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:32.708] Resolved: TRUE
[13:18:32.708] Value: <not collected>
[13:18:32.708] Conditions captured: <none>
[13:18:32.708] Early signaling: FALSE
[13:18:32.708] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:32.708] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:32.718] Chunk #1 of 2 ... DONE
[13:18:32.718] Chunk #2 of 2 ...
[13:18:32.719]  - Finding globals in 'X' for chunk #2 ...
[13:18:32.719] getGlobalsAndPackages() ...
[13:18:32.719] Searching for globals...
[13:18:32.719] 
[13:18:32.720] Searching for globals ... DONE
[13:18:32.720] - globals: [0] <none>
[13:18:32.720] getGlobalsAndPackages() ... DONE
[13:18:32.720]    + additional globals found: [n=0] 
[13:18:32.720]    + additional namespaces needed: [n=0] 
[13:18:32.720]  - Finding globals in 'X' for chunk #2 ... DONE
[13:18:32.721]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[13:18:32.721]  - seeds: [3] <seeds>
[13:18:32.721] getGlobalsAndPackages() ...
[13:18:32.721] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.721] Resolving globals: FALSE
[13:18:32.722] Tweak future expression to call with '...' arguments ...
[13:18:32.722] {
[13:18:32.722]     do.call(function(...) {
[13:18:32.722]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.722]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.722]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.722]             on.exit(options(oopts), add = TRUE)
[13:18:32.722]         }
[13:18:32.722]         {
[13:18:32.722]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.722]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.722]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.722]                   envir = globalenv(), inherits = FALSE)
[13:18:32.722]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.722]             })
[13:18:32.722]         }
[13:18:32.722]     }, args = future.call.arguments)
[13:18:32.722] }
[13:18:32.722] Tweak future expression to call with '...' arguments ... DONE
[13:18:32.723] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.723] 
[13:18:32.723] getGlobalsAndPackages() ... DONE
[13:18:32.724] run() for ‘Future’ ...
[13:18:32.724] - state: ‘created’
[13:18:32.724] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:18:32.729] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:32.729] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:18:32.729]   - Field: ‘label’
[13:18:32.730]   - Field: ‘local’
[13:18:32.730]   - Field: ‘owner’
[13:18:32.730]   - Field: ‘envir’
[13:18:32.730]   - Field: ‘workers’
[13:18:32.730]   - Field: ‘packages’
[13:18:32.730]   - Field: ‘gc’
[13:18:32.730]   - Field: ‘job’
[13:18:32.731]   - Field: ‘conditions’
[13:18:32.731]   - Field: ‘expr’
[13:18:32.731]   - Field: ‘uuid’
[13:18:32.731]   - Field: ‘seed’
[13:18:32.731]   - Field: ‘version’
[13:18:32.731]   - Field: ‘result’
[13:18:32.731]   - Field: ‘asynchronous’
[13:18:32.732]   - Field: ‘calls’
[13:18:32.732]   - Field: ‘globals’
[13:18:32.732]   - Field: ‘stdout’
[13:18:32.732]   - Field: ‘earlySignal’
[13:18:32.732]   - Field: ‘lazy’
[13:18:32.732]   - Field: ‘state’
[13:18:32.732] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:18:32.733] - Launch lazy future ...
[13:18:32.733] Packages needed by the future expression (n = 0): <none>
[13:18:32.733] Packages needed by future strategies (n = 0): <none>
[13:18:32.734] {
[13:18:32.734]     {
[13:18:32.734]         {
[13:18:32.734]             ...future.startTime <- base::Sys.time()
[13:18:32.734]             {
[13:18:32.734]                 {
[13:18:32.734]                   {
[13:18:32.734]                     {
[13:18:32.734]                       base::local({
[13:18:32.734]                         has_future <- base::requireNamespace("future", 
[13:18:32.734]                           quietly = TRUE)
[13:18:32.734]                         if (has_future) {
[13:18:32.734]                           ns <- base::getNamespace("future")
[13:18:32.734]                           version <- ns[[".package"]][["version"]]
[13:18:32.734]                           if (is.null(version)) 
[13:18:32.734]                             version <- utils::packageVersion("future")
[13:18:32.734]                         }
[13:18:32.734]                         else {
[13:18:32.734]                           version <- NULL
[13:18:32.734]                         }
[13:18:32.734]                         if (!has_future || version < "1.8.0") {
[13:18:32.734]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:32.734]                             "", base::R.version$version.string), 
[13:18:32.734]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:32.734]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:32.734]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:32.734]                               "release", "version")], collapse = " "), 
[13:18:32.734]                             hostname = base::Sys.info()[["nodename"]])
[13:18:32.734]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:32.734]                             info)
[13:18:32.734]                           info <- base::paste(info, collapse = "; ")
[13:18:32.734]                           if (!has_future) {
[13:18:32.734]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:32.734]                               info)
[13:18:32.734]                           }
[13:18:32.734]                           else {
[13:18:32.734]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:32.734]                               info, version)
[13:18:32.734]                           }
[13:18:32.734]                           base::stop(msg)
[13:18:32.734]                         }
[13:18:32.734]                       })
[13:18:32.734]                     }
[13:18:32.734]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:32.734]                     base::options(mc.cores = 1L)
[13:18:32.734]                   }
[13:18:32.734]                   options(future.plan = NULL)
[13:18:32.734]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.734]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:32.734]                 }
[13:18:32.734]                 ...future.workdir <- getwd()
[13:18:32.734]             }
[13:18:32.734]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:32.734]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:32.734]         }
[13:18:32.734]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:32.734]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[13:18:32.734]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:32.734]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:32.734]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:32.734]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:32.734]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:32.734]             base::names(...future.oldOptions))
[13:18:32.734]     }
[13:18:32.734]     if (FALSE) {
[13:18:32.734]     }
[13:18:32.734]     else {
[13:18:32.734]         if (TRUE) {
[13:18:32.734]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:32.734]                 open = "w")
[13:18:32.734]         }
[13:18:32.734]         else {
[13:18:32.734]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:32.734]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:32.734]         }
[13:18:32.734]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:32.734]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:32.734]             base::sink(type = "output", split = FALSE)
[13:18:32.734]             base::close(...future.stdout)
[13:18:32.734]         }, add = TRUE)
[13:18:32.734]     }
[13:18:32.734]     ...future.frame <- base::sys.nframe()
[13:18:32.734]     ...future.conditions <- base::list()
[13:18:32.734]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:32.734]     if (FALSE) {
[13:18:32.734]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:32.734]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:32.734]     }
[13:18:32.734]     ...future.result <- base::tryCatch({
[13:18:32.734]         base::withCallingHandlers({
[13:18:32.734]             ...future.value <- base::withVisible(base::local({
[13:18:32.734]                 withCallingHandlers({
[13:18:32.734]                   {
[13:18:32.734]                     do.call(function(...) {
[13:18:32.734]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.734]                       if (!identical(...future.globals.maxSize.org, 
[13:18:32.734]                         ...future.globals.maxSize)) {
[13:18:32.734]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.734]                         on.exit(options(oopts), add = TRUE)
[13:18:32.734]                       }
[13:18:32.734]                       {
[13:18:32.734]                         lapply(seq_along(...future.elements_ii), 
[13:18:32.734]                           FUN = function(jj) {
[13:18:32.734]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.734]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.734]                               envir = globalenv(), inherits = FALSE)
[13:18:32.734]                             ...future.FUN(...future.X_jj, ...)
[13:18:32.734]                           })
[13:18:32.734]                       }
[13:18:32.734]                     }, args = future.call.arguments)
[13:18:32.734]                   }
[13:18:32.734]                 }, immediateCondition = function(cond) {
[13:18:32.734]                   save_rds <- function (object, pathname, ...) 
[13:18:32.734]                   {
[13:18:32.734]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:18:32.734]                     if (file_test("-f", pathname_tmp)) {
[13:18:32.734]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.734]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:18:32.734]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.734]                         fi_tmp[["mtime"]])
[13:18:32.734]                     }
[13:18:32.734]                     tryCatch({
[13:18:32.734]                       saveRDS(object, file = pathname_tmp, ...)
[13:18:32.734]                     }, error = function(ex) {
[13:18:32.734]                       msg <- conditionMessage(ex)
[13:18:32.734]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.734]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:18:32.734]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.734]                         fi_tmp[["mtime"]], msg)
[13:18:32.734]                       ex$message <- msg
[13:18:32.734]                       stop(ex)
[13:18:32.734]                     })
[13:18:32.734]                     stopifnot(file_test("-f", pathname_tmp))
[13:18:32.734]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:18:32.734]                     if (!res || file_test("-f", pathname_tmp)) {
[13:18:32.734]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.734]                       fi <- file.info(pathname)
[13:18:32.734]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:18:32.734]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.734]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:18:32.734]                         fi[["size"]], fi[["mtime"]])
[13:18:32.734]                       stop(msg)
[13:18:32.734]                     }
[13:18:32.734]                     invisible(pathname)
[13:18:32.734]                   }
[13:18:32.734]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:18:32.734]                     rootPath = tempdir()) 
[13:18:32.734]                   {
[13:18:32.734]                     obj <- list(time = Sys.time(), condition = cond)
[13:18:32.734]                     file <- tempfile(pattern = class(cond)[1], 
[13:18:32.734]                       tmpdir = path, fileext = ".rds")
[13:18:32.734]                     save_rds(obj, file)
[13:18:32.734]                   }
[13:18:32.734]                   saveImmediateCondition(cond, path = "/tmp/RtmpPPCpJF/.future/immediateConditions")
[13:18:32.734]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.734]                   {
[13:18:32.734]                     inherits <- base::inherits
[13:18:32.734]                     invokeRestart <- base::invokeRestart
[13:18:32.734]                     is.null <- base::is.null
[13:18:32.734]                     muffled <- FALSE
[13:18:32.734]                     if (inherits(cond, "message")) {
[13:18:32.734]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:32.734]                       if (muffled) 
[13:18:32.734]                         invokeRestart("muffleMessage")
[13:18:32.734]                     }
[13:18:32.734]                     else if (inherits(cond, "warning")) {
[13:18:32.734]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:32.734]                       if (muffled) 
[13:18:32.734]                         invokeRestart("muffleWarning")
[13:18:32.734]                     }
[13:18:32.734]                     else if (inherits(cond, "condition")) {
[13:18:32.734]                       if (!is.null(pattern)) {
[13:18:32.734]                         computeRestarts <- base::computeRestarts
[13:18:32.734]                         grepl <- base::grepl
[13:18:32.734]                         restarts <- computeRestarts(cond)
[13:18:32.734]                         for (restart in restarts) {
[13:18:32.734]                           name <- restart$name
[13:18:32.734]                           if (is.null(name)) 
[13:18:32.734]                             next
[13:18:32.734]                           if (!grepl(pattern, name)) 
[13:18:32.734]                             next
[13:18:32.734]                           invokeRestart(restart)
[13:18:32.734]                           muffled <- TRUE
[13:18:32.734]                           break
[13:18:32.734]                         }
[13:18:32.734]                       }
[13:18:32.734]                     }
[13:18:32.734]                     invisible(muffled)
[13:18:32.734]                   }
[13:18:32.734]                   muffleCondition(cond)
[13:18:32.734]                 })
[13:18:32.734]             }))
[13:18:32.734]             future::FutureResult(value = ...future.value$value, 
[13:18:32.734]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.734]                   ...future.rng), globalenv = if (FALSE) 
[13:18:32.734]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:32.734]                     ...future.globalenv.names))
[13:18:32.734]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:32.734]         }, condition = base::local({
[13:18:32.734]             c <- base::c
[13:18:32.734]             inherits <- base::inherits
[13:18:32.734]             invokeRestart <- base::invokeRestart
[13:18:32.734]             length <- base::length
[13:18:32.734]             list <- base::list
[13:18:32.734]             seq.int <- base::seq.int
[13:18:32.734]             signalCondition <- base::signalCondition
[13:18:32.734]             sys.calls <- base::sys.calls
[13:18:32.734]             `[[` <- base::`[[`
[13:18:32.734]             `+` <- base::`+`
[13:18:32.734]             `<<-` <- base::`<<-`
[13:18:32.734]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:32.734]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:32.734]                   3L)]
[13:18:32.734]             }
[13:18:32.734]             function(cond) {
[13:18:32.734]                 is_error <- inherits(cond, "error")
[13:18:32.734]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:32.734]                   NULL)
[13:18:32.734]                 if (is_error) {
[13:18:32.734]                   sessionInformation <- function() {
[13:18:32.734]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:32.734]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:32.734]                       search = base::search(), system = base::Sys.info())
[13:18:32.734]                   }
[13:18:32.734]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.734]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:32.734]                     cond$call), session = sessionInformation(), 
[13:18:32.734]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:32.734]                   signalCondition(cond)
[13:18:32.734]                 }
[13:18:32.734]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:32.734]                 "immediateCondition"))) {
[13:18:32.734]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:32.734]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.734]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:32.734]                   if (TRUE && !signal) {
[13:18:32.734]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.734]                     {
[13:18:32.734]                       inherits <- base::inherits
[13:18:32.734]                       invokeRestart <- base::invokeRestart
[13:18:32.734]                       is.null <- base::is.null
[13:18:32.734]                       muffled <- FALSE
[13:18:32.734]                       if (inherits(cond, "message")) {
[13:18:32.734]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.734]                         if (muffled) 
[13:18:32.734]                           invokeRestart("muffleMessage")
[13:18:32.734]                       }
[13:18:32.734]                       else if (inherits(cond, "warning")) {
[13:18:32.734]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.734]                         if (muffled) 
[13:18:32.734]                           invokeRestart("muffleWarning")
[13:18:32.734]                       }
[13:18:32.734]                       else if (inherits(cond, "condition")) {
[13:18:32.734]                         if (!is.null(pattern)) {
[13:18:32.734]                           computeRestarts <- base::computeRestarts
[13:18:32.734]                           grepl <- base::grepl
[13:18:32.734]                           restarts <- computeRestarts(cond)
[13:18:32.734]                           for (restart in restarts) {
[13:18:32.734]                             name <- restart$name
[13:18:32.734]                             if (is.null(name)) 
[13:18:32.734]                               next
[13:18:32.734]                             if (!grepl(pattern, name)) 
[13:18:32.734]                               next
[13:18:32.734]                             invokeRestart(restart)
[13:18:32.734]                             muffled <- TRUE
[13:18:32.734]                             break
[13:18:32.734]                           }
[13:18:32.734]                         }
[13:18:32.734]                       }
[13:18:32.734]                       invisible(muffled)
[13:18:32.734]                     }
[13:18:32.734]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.734]                   }
[13:18:32.734]                 }
[13:18:32.734]                 else {
[13:18:32.734]                   if (TRUE) {
[13:18:32.734]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.734]                     {
[13:18:32.734]                       inherits <- base::inherits
[13:18:32.734]                       invokeRestart <- base::invokeRestart
[13:18:32.734]                       is.null <- base::is.null
[13:18:32.734]                       muffled <- FALSE
[13:18:32.734]                       if (inherits(cond, "message")) {
[13:18:32.734]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.734]                         if (muffled) 
[13:18:32.734]                           invokeRestart("muffleMessage")
[13:18:32.734]                       }
[13:18:32.734]                       else if (inherits(cond, "warning")) {
[13:18:32.734]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.734]                         if (muffled) 
[13:18:32.734]                           invokeRestart("muffleWarning")
[13:18:32.734]                       }
[13:18:32.734]                       else if (inherits(cond, "condition")) {
[13:18:32.734]                         if (!is.null(pattern)) {
[13:18:32.734]                           computeRestarts <- base::computeRestarts
[13:18:32.734]                           grepl <- base::grepl
[13:18:32.734]                           restarts <- computeRestarts(cond)
[13:18:32.734]                           for (restart in restarts) {
[13:18:32.734]                             name <- restart$name
[13:18:32.734]                             if (is.null(name)) 
[13:18:32.734]                               next
[13:18:32.734]                             if (!grepl(pattern, name)) 
[13:18:32.734]                               next
[13:18:32.734]                             invokeRestart(restart)
[13:18:32.734]                             muffled <- TRUE
[13:18:32.734]                             break
[13:18:32.734]                           }
[13:18:32.734]                         }
[13:18:32.734]                       }
[13:18:32.734]                       invisible(muffled)
[13:18:32.734]                     }
[13:18:32.734]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.734]                   }
[13:18:32.734]                 }
[13:18:32.734]             }
[13:18:32.734]         }))
[13:18:32.734]     }, error = function(ex) {
[13:18:32.734]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:32.734]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.734]                 ...future.rng), started = ...future.startTime, 
[13:18:32.734]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:32.734]             version = "1.8"), class = "FutureResult")
[13:18:32.734]     }, finally = {
[13:18:32.734]         if (!identical(...future.workdir, getwd())) 
[13:18:32.734]             setwd(...future.workdir)
[13:18:32.734]         {
[13:18:32.734]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:32.734]                 ...future.oldOptions$nwarnings <- NULL
[13:18:32.734]             }
[13:18:32.734]             base::options(...future.oldOptions)
[13:18:32.734]             if (.Platform$OS.type == "windows") {
[13:18:32.734]                 old_names <- names(...future.oldEnvVars)
[13:18:32.734]                 envs <- base::Sys.getenv()
[13:18:32.734]                 names <- names(envs)
[13:18:32.734]                 common <- intersect(names, old_names)
[13:18:32.734]                 added <- setdiff(names, old_names)
[13:18:32.734]                 removed <- setdiff(old_names, names)
[13:18:32.734]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:32.734]                   envs[common]]
[13:18:32.734]                 NAMES <- toupper(changed)
[13:18:32.734]                 args <- list()
[13:18:32.734]                 for (kk in seq_along(NAMES)) {
[13:18:32.734]                   name <- changed[[kk]]
[13:18:32.734]                   NAME <- NAMES[[kk]]
[13:18:32.734]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.734]                     next
[13:18:32.734]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.734]                 }
[13:18:32.734]                 NAMES <- toupper(added)
[13:18:32.734]                 for (kk in seq_along(NAMES)) {
[13:18:32.734]                   name <- added[[kk]]
[13:18:32.734]                   NAME <- NAMES[[kk]]
[13:18:32.734]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.734]                     next
[13:18:32.734]                   args[[name]] <- ""
[13:18:32.734]                 }
[13:18:32.734]                 NAMES <- toupper(removed)
[13:18:32.734]                 for (kk in seq_along(NAMES)) {
[13:18:32.734]                   name <- removed[[kk]]
[13:18:32.734]                   NAME <- NAMES[[kk]]
[13:18:32.734]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.734]                     next
[13:18:32.734]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.734]                 }
[13:18:32.734]                 if (length(args) > 0) 
[13:18:32.734]                   base::do.call(base::Sys.setenv, args = args)
[13:18:32.734]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:32.734]             }
[13:18:32.734]             else {
[13:18:32.734]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:32.734]             }
[13:18:32.734]             {
[13:18:32.734]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:32.734]                   0L) {
[13:18:32.734]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:32.734]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:32.734]                   base::options(opts)
[13:18:32.734]                 }
[13:18:32.734]                 {
[13:18:32.734]                   {
[13:18:32.734]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:32.734]                     NULL
[13:18:32.734]                   }
[13:18:32.734]                   options(future.plan = NULL)
[13:18:32.734]                   if (is.na(NA_character_)) 
[13:18:32.734]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.734]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:32.734]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:18:32.734]                     envir = parent.frame()) 
[13:18:32.734]                   {
[13:18:32.734]                     default_workers <- missing(workers)
[13:18:32.734]                     if (is.function(workers)) 
[13:18:32.734]                       workers <- workers()
[13:18:32.734]                     workers <- structure(as.integer(workers), 
[13:18:32.734]                       class = class(workers))
[13:18:32.734]                     stop_if_not(is.finite(workers), workers >= 
[13:18:32.734]                       1L)
[13:18:32.734]                     if ((workers == 1L && !inherits(workers, 
[13:18:32.734]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:18:32.734]                       if (default_workers) 
[13:18:32.734]                         supportsMulticore(warn = TRUE)
[13:18:32.734]                       return(sequential(..., envir = envir))
[13:18:32.734]                     }
[13:18:32.734]                     oopts <- options(mc.cores = workers)
[13:18:32.734]                     on.exit(options(oopts))
[13:18:32.734]                     future <- MulticoreFuture(..., workers = workers, 
[13:18:32.734]                       envir = envir)
[13:18:32.734]                     if (!future$lazy) 
[13:18:32.734]                       future <- run(future)
[13:18:32.734]                     invisible(future)
[13:18:32.734]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:32.734]                 }
[13:18:32.734]             }
[13:18:32.734]         }
[13:18:32.734]     })
[13:18:32.734]     if (TRUE) {
[13:18:32.734]         base::sink(type = "output", split = FALSE)
[13:18:32.734]         if (TRUE) {
[13:18:32.734]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:32.734]         }
[13:18:32.734]         else {
[13:18:32.734]             ...future.result["stdout"] <- base::list(NULL)
[13:18:32.734]         }
[13:18:32.734]         base::close(...future.stdout)
[13:18:32.734]         ...future.stdout <- NULL
[13:18:32.734]     }
[13:18:32.734]     ...future.result$conditions <- ...future.conditions
[13:18:32.734]     ...future.result$finished <- base::Sys.time()
[13:18:32.734]     ...future.result
[13:18:32.734] }
[13:18:32.738] assign_globals() ...
[13:18:32.738] List of 5
[13:18:32.738]  $ ...future.FUN            :function (...)  
[13:18:32.738]  $ future.call.arguments    : list()
[13:18:32.738]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.738]  $ ...future.elements_ii    :List of 3
[13:18:32.738]   ..$ : int 0
[13:18:32.738]   ..$ : int 0
[13:18:32.738]   ..$ : int 0
[13:18:32.738]  $ ...future.seeds_ii       :List of 3
[13:18:32.738]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[13:18:32.738]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[13:18:32.738]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[13:18:32.738]  $ ...future.globals.maxSize: NULL
[13:18:32.738]  - attr(*, "resolved")= logi FALSE
[13:18:32.738]  - attr(*, "total_size")= num 616
[13:18:32.738]  - attr(*, "where")=List of 5
[13:18:32.738]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:18:32.738]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:18:32.738]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:18:32.738]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:18:32.738]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:18:32.738]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.738]  - attr(*, "already-done")= logi TRUE
[13:18:32.747] - reassign environment for ‘...future.FUN’
[13:18:32.748] - copied ‘...future.FUN’ to environment
[13:18:32.748] - copied ‘future.call.arguments’ to environment
[13:18:32.748] - copied ‘...future.elements_ii’ to environment
[13:18:32.748] - copied ‘...future.seeds_ii’ to environment
[13:18:32.748] - copied ‘...future.globals.maxSize’ to environment
[13:18:32.748] assign_globals() ... done
[13:18:32.748] requestCore(): workers = 2
[13:18:32.751] MulticoreFuture started
[13:18:32.751] - Launch lazy future ... done
[13:18:32.751] run() for ‘MulticoreFuture’ ... done
[13:18:32.752] Created future:
[13:18:32.752] plan(): Setting new future strategy stack:
[13:18:32.752] List of future strategies:
[13:18:32.752] 1. sequential:
[13:18:32.752]    - args: function (..., envir = parent.frame())
[13:18:32.752]    - tweaked: FALSE
[13:18:32.752]    - call: NULL
[13:18:32.799] plan(): nbrOfWorkers() = 1
[13:18:32.801] plan(): Setting new future strategy stack:
[13:18:32.801] List of future strategies:
[13:18:32.801] 1. multicore:
[13:18:32.801]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:18:32.801]    - tweaked: FALSE
[13:18:32.801]    - call: plan(strategy)
[13:18:32.805] plan(): nbrOfWorkers() = 2
[13:18:32.799] MulticoreFuture:
[13:18:32.799] Label: ‘future_replicate-2’
[13:18:32.799] Expression:
[13:18:32.799] {
[13:18:32.799]     do.call(function(...) {
[13:18:32.799]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.799]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.799]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.799]             on.exit(options(oopts), add = TRUE)
[13:18:32.799]         }
[13:18:32.799]         {
[13:18:32.799]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.799]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.799]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.799]                   envir = globalenv(), inherits = FALSE)
[13:18:32.799]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.799]             })
[13:18:32.799]         }
[13:18:32.799]     }, args = future.call.arguments)
[13:18:32.799] }
[13:18:32.799] Lazy evaluation: FALSE
[13:18:32.799] Asynchronous evaluation: TRUE
[13:18:32.799] Local evaluation: TRUE
[13:18:32.799] Environment: R_GlobalEnv
[13:18:32.799] Capture standard output: TRUE
[13:18:32.799] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:32.799] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:32.799] Packages: <none>
[13:18:32.799] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:32.799] Resolved: TRUE
[13:18:32.799] Value: <not collected>
[13:18:32.799] Conditions captured: <none>
[13:18:32.799] Early signaling: FALSE
[13:18:32.799] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:32.799] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:32.806] Chunk #2 of 2 ... DONE
[13:18:32.806] Launching 2 futures (chunks) ... DONE
[13:18:32.806] Resolving 2 futures (chunks) ...
[13:18:32.806] resolve() on list ...
[13:18:32.806]  recursive: 0
[13:18:32.806]  length: 2
[13:18:32.806] 
[13:18:32.807] Future #1
[13:18:32.807] signalConditionsASAP(MulticoreFuture, pos=1) ...
[13:18:32.807] - nx: 2
[13:18:32.807] - relay: TRUE
[13:18:32.808] - stdout: TRUE
[13:18:32.808] - signal: TRUE
[13:18:32.808] - resignal: FALSE
[13:18:32.808] - force: TRUE
[13:18:32.808] - relayed: [n=2] FALSE, FALSE
[13:18:32.808] - queued futures: [n=2] FALSE, FALSE
[13:18:32.808]  - until=1
[13:18:32.808]  - relaying element #1
[13:18:32.808] - relayed: [n=2] TRUE, FALSE
[13:18:32.809] - queued futures: [n=2] TRUE, FALSE
[13:18:32.809] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[13:18:32.809]  length: 1 (resolved future 1)
[13:18:32.809] Future #2
[13:18:32.810] signalConditionsASAP(MulticoreFuture, pos=2) ...
[13:18:32.810] - nx: 2
[13:18:32.810] - relay: TRUE
[13:18:32.810] - stdout: TRUE
[13:18:32.810] - signal: TRUE
[13:18:32.810] - resignal: FALSE
[13:18:32.810] - force: TRUE
[13:18:32.810] - relayed: [n=2] TRUE, FALSE
[13:18:32.810] - queued futures: [n=2] TRUE, FALSE
[13:18:32.810]  - until=2
[13:18:32.810]  - relaying element #2
[13:18:32.811] - relayed: [n=2] TRUE, TRUE
[13:18:32.811] - queued futures: [n=2] TRUE, TRUE
[13:18:32.811] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[13:18:32.811]  length: 0 (resolved future 2)
[13:18:32.811] Relaying remaining futures
[13:18:32.811] signalConditionsASAP(NULL, pos=0) ...
[13:18:32.811] - nx: 2
[13:18:32.811] - relay: TRUE
[13:18:32.811] - stdout: TRUE
[13:18:32.811] - signal: TRUE
[13:18:32.812] - resignal: FALSE
[13:18:32.812] - force: TRUE
[13:18:32.812] - relayed: [n=2] TRUE, TRUE
[13:18:32.812] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:18:32.812] - relayed: [n=2] TRUE, TRUE
[13:18:32.812] - queued futures: [n=2] TRUE, TRUE
[13:18:32.812] signalConditionsASAP(NULL, pos=0) ... done
[13:18:32.812] resolve() on list ... DONE
[13:18:32.812]  - Number of value chunks collected: 2
[13:18:32.813] Resolving 2 futures (chunks) ... DONE
[13:18:32.813] Reducing values from 2 chunks ...
[13:18:32.813]  - Number of values collected after concatenation: 5
[13:18:32.813]  - Number of values expected: 5
[13:18:32.813] Reducing values from 2 chunks ... DONE
[13:18:32.813] future_lapply() ... DONE
[13:18:32.813] future_lapply() ...
[13:18:32.814] Generating random seeds ...
[13:18:32.814] Generating random seed streams for 5 elements ...
[13:18:32.814] Generating random seed streams for 5 elements ... DONE
[13:18:32.814] Generating random seeds ... DONE
[13:18:32.814] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:18:32.819] Number of chunks: 2
[13:18:32.819] getGlobalsAndPackagesXApply() ...
[13:18:32.819]  - future.globals: TRUE
[13:18:32.819] getGlobalsAndPackages() ...
[13:18:32.819] Searching for globals...
[13:18:32.820] - globals found: [2] ‘FUN’, ‘sample’
[13:18:32.820] Searching for globals ... DONE
[13:18:32.820] Resolving globals: FALSE
[13:18:32.821] The total size of the 1 globals is 616 bytes (616 bytes)
[13:18:32.821] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:18:32.821] - globals: [1] ‘FUN’
[13:18:32.821] 
[13:18:32.821] getGlobalsAndPackages() ... DONE
[13:18:32.822]  - globals found/used: [n=1] ‘FUN’
[13:18:32.822]  - needed namespaces: [n=0] 
[13:18:32.822] Finding globals ... DONE
[13:18:32.822]  - use_args: TRUE
[13:18:32.822]  - Getting '...' globals ...
[13:18:32.822] resolve() on list ...
[13:18:32.822]  recursive: 0
[13:18:32.822]  length: 1
[13:18:32.823]  elements: ‘...’
[13:18:32.823]  length: 0 (resolved future 1)
[13:18:32.823] resolve() on list ... DONE
[13:18:32.823]    - '...' content: [n=0] 
[13:18:32.823] List of 1
[13:18:32.823]  $ ...: list()
[13:18:32.823]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.823]  - attr(*, "where")=List of 1
[13:18:32.823]   ..$ ...:<environment: 0x55df1cda6a80> 
[13:18:32.823]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.823]  - attr(*, "resolved")= logi TRUE
[13:18:32.823]  - attr(*, "total_size")= num NA
[13:18:32.826]  - Getting '...' globals ... DONE
[13:18:32.826] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:18:32.826] List of 2
[13:18:32.826]  $ ...future.FUN:function (...)  
[13:18:32.826]  $ ...          : list()
[13:18:32.826]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.826]  - attr(*, "where")=List of 2
[13:18:32.826]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:18:32.826]   ..$ ...          :<environment: 0x55df1cda6a80> 
[13:18:32.826]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.826]  - attr(*, "resolved")= logi FALSE
[13:18:32.826]  - attr(*, "total_size")= num 616
[13:18:32.829] Packages to be attached in all futures: [n=0] 
[13:18:32.829] getGlobalsAndPackagesXApply() ... DONE
[13:18:32.829] Number of futures (= number of chunks): 2
[13:18:32.829] Launching 2 futures (chunks) ...
[13:18:32.829] Chunk #1 of 2 ...
[13:18:32.829]  - Finding globals in 'X' for chunk #1 ...
[13:18:32.830] getGlobalsAndPackages() ...
[13:18:32.830] Searching for globals...
[13:18:32.830] 
[13:18:32.830] Searching for globals ... DONE
[13:18:32.830] - globals: [0] <none>
[13:18:32.830] getGlobalsAndPackages() ... DONE
[13:18:32.830]    + additional globals found: [n=0] 
[13:18:32.830]    + additional namespaces needed: [n=0] 
[13:18:32.830]  - Finding globals in 'X' for chunk #1 ... DONE
[13:18:32.831]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:18:32.831]  - seeds: [2] <seeds>
[13:18:32.831] getGlobalsAndPackages() ...
[13:18:32.831] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.831] Resolving globals: FALSE
[13:18:32.831] Tweak future expression to call with '...' arguments ...
[13:18:32.831] {
[13:18:32.831]     do.call(function(...) {
[13:18:32.831]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.831]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.831]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.831]             on.exit(options(oopts), add = TRUE)
[13:18:32.831]         }
[13:18:32.831]         {
[13:18:32.831]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.831]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.831]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.831]                   envir = globalenv(), inherits = FALSE)
[13:18:32.831]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.831]             })
[13:18:32.831]         }
[13:18:32.831]     }, args = future.call.arguments)
[13:18:32.831] }
[13:18:32.832] Tweak future expression to call with '...' arguments ... DONE
[13:18:32.833] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.834] 
[13:18:32.834] getGlobalsAndPackages() ... DONE
[13:18:32.834] run() for ‘Future’ ...
[13:18:32.834] - state: ‘created’
[13:18:32.834] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:18:32.838] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:32.838] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:18:32.838]   - Field: ‘label’
[13:18:32.839]   - Field: ‘local’
[13:18:32.839]   - Field: ‘owner’
[13:18:32.839]   - Field: ‘envir’
[13:18:32.839]   - Field: ‘workers’
[13:18:32.839]   - Field: ‘packages’
[13:18:32.839]   - Field: ‘gc’
[13:18:32.839]   - Field: ‘job’
[13:18:32.839]   - Field: ‘conditions’
[13:18:32.839]   - Field: ‘expr’
[13:18:32.839]   - Field: ‘uuid’
[13:18:32.840]   - Field: ‘seed’
[13:18:32.840]   - Field: ‘version’
[13:18:32.840]   - Field: ‘result’
[13:18:32.840]   - Field: ‘asynchronous’
[13:18:32.840]   - Field: ‘calls’
[13:18:32.840]   - Field: ‘globals’
[13:18:32.840]   - Field: ‘stdout’
[13:18:32.840]   - Field: ‘earlySignal’
[13:18:32.840]   - Field: ‘lazy’
[13:18:32.840]   - Field: ‘state’
[13:18:32.841] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:18:32.841] - Launch lazy future ...
[13:18:32.841] Packages needed by the future expression (n = 0): <none>
[13:18:32.841] Packages needed by future strategies (n = 0): <none>
[13:18:32.841] {
[13:18:32.841]     {
[13:18:32.841]         {
[13:18:32.841]             ...future.startTime <- base::Sys.time()
[13:18:32.841]             {
[13:18:32.841]                 {
[13:18:32.841]                   {
[13:18:32.841]                     {
[13:18:32.841]                       base::local({
[13:18:32.841]                         has_future <- base::requireNamespace("future", 
[13:18:32.841]                           quietly = TRUE)
[13:18:32.841]                         if (has_future) {
[13:18:32.841]                           ns <- base::getNamespace("future")
[13:18:32.841]                           version <- ns[[".package"]][["version"]]
[13:18:32.841]                           if (is.null(version)) 
[13:18:32.841]                             version <- utils::packageVersion("future")
[13:18:32.841]                         }
[13:18:32.841]                         else {
[13:18:32.841]                           version <- NULL
[13:18:32.841]                         }
[13:18:32.841]                         if (!has_future || version < "1.8.0") {
[13:18:32.841]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:32.841]                             "", base::R.version$version.string), 
[13:18:32.841]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:32.841]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:32.841]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:32.841]                               "release", "version")], collapse = " "), 
[13:18:32.841]                             hostname = base::Sys.info()[["nodename"]])
[13:18:32.841]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:32.841]                             info)
[13:18:32.841]                           info <- base::paste(info, collapse = "; ")
[13:18:32.841]                           if (!has_future) {
[13:18:32.841]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:32.841]                               info)
[13:18:32.841]                           }
[13:18:32.841]                           else {
[13:18:32.841]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:32.841]                               info, version)
[13:18:32.841]                           }
[13:18:32.841]                           base::stop(msg)
[13:18:32.841]                         }
[13:18:32.841]                       })
[13:18:32.841]                     }
[13:18:32.841]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:32.841]                     base::options(mc.cores = 1L)
[13:18:32.841]                   }
[13:18:32.841]                   options(future.plan = NULL)
[13:18:32.841]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.841]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:32.841]                 }
[13:18:32.841]                 ...future.workdir <- getwd()
[13:18:32.841]             }
[13:18:32.841]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:32.841]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:32.841]         }
[13:18:32.841]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:32.841]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:18:32.841]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:32.841]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:32.841]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:32.841]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:32.841]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:32.841]             base::names(...future.oldOptions))
[13:18:32.841]     }
[13:18:32.841]     if (FALSE) {
[13:18:32.841]     }
[13:18:32.841]     else {
[13:18:32.841]         if (TRUE) {
[13:18:32.841]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:32.841]                 open = "w")
[13:18:32.841]         }
[13:18:32.841]         else {
[13:18:32.841]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:32.841]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:32.841]         }
[13:18:32.841]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:32.841]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:32.841]             base::sink(type = "output", split = FALSE)
[13:18:32.841]             base::close(...future.stdout)
[13:18:32.841]         }, add = TRUE)
[13:18:32.841]     }
[13:18:32.841]     ...future.frame <- base::sys.nframe()
[13:18:32.841]     ...future.conditions <- base::list()
[13:18:32.841]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:32.841]     if (FALSE) {
[13:18:32.841]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:32.841]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:32.841]     }
[13:18:32.841]     ...future.result <- base::tryCatch({
[13:18:32.841]         base::withCallingHandlers({
[13:18:32.841]             ...future.value <- base::withVisible(base::local({
[13:18:32.841]                 withCallingHandlers({
[13:18:32.841]                   {
[13:18:32.841]                     do.call(function(...) {
[13:18:32.841]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.841]                       if (!identical(...future.globals.maxSize.org, 
[13:18:32.841]                         ...future.globals.maxSize)) {
[13:18:32.841]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.841]                         on.exit(options(oopts), add = TRUE)
[13:18:32.841]                       }
[13:18:32.841]                       {
[13:18:32.841]                         lapply(seq_along(...future.elements_ii), 
[13:18:32.841]                           FUN = function(jj) {
[13:18:32.841]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.841]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.841]                               envir = globalenv(), inherits = FALSE)
[13:18:32.841]                             ...future.FUN(...future.X_jj, ...)
[13:18:32.841]                           })
[13:18:32.841]                       }
[13:18:32.841]                     }, args = future.call.arguments)
[13:18:32.841]                   }
[13:18:32.841]                 }, immediateCondition = function(cond) {
[13:18:32.841]                   save_rds <- function (object, pathname, ...) 
[13:18:32.841]                   {
[13:18:32.841]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:18:32.841]                     if (file_test("-f", pathname_tmp)) {
[13:18:32.841]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.841]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:18:32.841]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.841]                         fi_tmp[["mtime"]])
[13:18:32.841]                     }
[13:18:32.841]                     tryCatch({
[13:18:32.841]                       saveRDS(object, file = pathname_tmp, ...)
[13:18:32.841]                     }, error = function(ex) {
[13:18:32.841]                       msg <- conditionMessage(ex)
[13:18:32.841]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.841]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:18:32.841]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.841]                         fi_tmp[["mtime"]], msg)
[13:18:32.841]                       ex$message <- msg
[13:18:32.841]                       stop(ex)
[13:18:32.841]                     })
[13:18:32.841]                     stopifnot(file_test("-f", pathname_tmp))
[13:18:32.841]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:18:32.841]                     if (!res || file_test("-f", pathname_tmp)) {
[13:18:32.841]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.841]                       fi <- file.info(pathname)
[13:18:32.841]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:18:32.841]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.841]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:18:32.841]                         fi[["size"]], fi[["mtime"]])
[13:18:32.841]                       stop(msg)
[13:18:32.841]                     }
[13:18:32.841]                     invisible(pathname)
[13:18:32.841]                   }
[13:18:32.841]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:18:32.841]                     rootPath = tempdir()) 
[13:18:32.841]                   {
[13:18:32.841]                     obj <- list(time = Sys.time(), condition = cond)
[13:18:32.841]                     file <- tempfile(pattern = class(cond)[1], 
[13:18:32.841]                       tmpdir = path, fileext = ".rds")
[13:18:32.841]                     save_rds(obj, file)
[13:18:32.841]                   }
[13:18:32.841]                   saveImmediateCondition(cond, path = "/tmp/RtmpPPCpJF/.future/immediateConditions")
[13:18:32.841]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.841]                   {
[13:18:32.841]                     inherits <- base::inherits
[13:18:32.841]                     invokeRestart <- base::invokeRestart
[13:18:32.841]                     is.null <- base::is.null
[13:18:32.841]                     muffled <- FALSE
[13:18:32.841]                     if (inherits(cond, "message")) {
[13:18:32.841]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:32.841]                       if (muffled) 
[13:18:32.841]                         invokeRestart("muffleMessage")
[13:18:32.841]                     }
[13:18:32.841]                     else if (inherits(cond, "warning")) {
[13:18:32.841]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:32.841]                       if (muffled) 
[13:18:32.841]                         invokeRestart("muffleWarning")
[13:18:32.841]                     }
[13:18:32.841]                     else if (inherits(cond, "condition")) {
[13:18:32.841]                       if (!is.null(pattern)) {
[13:18:32.841]                         computeRestarts <- base::computeRestarts
[13:18:32.841]                         grepl <- base::grepl
[13:18:32.841]                         restarts <- computeRestarts(cond)
[13:18:32.841]                         for (restart in restarts) {
[13:18:32.841]                           name <- restart$name
[13:18:32.841]                           if (is.null(name)) 
[13:18:32.841]                             next
[13:18:32.841]                           if (!grepl(pattern, name)) 
[13:18:32.841]                             next
[13:18:32.841]                           invokeRestart(restart)
[13:18:32.841]                           muffled <- TRUE
[13:18:32.841]                           break
[13:18:32.841]                         }
[13:18:32.841]                       }
[13:18:32.841]                     }
[13:18:32.841]                     invisible(muffled)
[13:18:32.841]                   }
[13:18:32.841]                   muffleCondition(cond)
[13:18:32.841]                 })
[13:18:32.841]             }))
[13:18:32.841]             future::FutureResult(value = ...future.value$value, 
[13:18:32.841]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.841]                   ...future.rng), globalenv = if (FALSE) 
[13:18:32.841]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:32.841]                     ...future.globalenv.names))
[13:18:32.841]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:32.841]         }, condition = base::local({
[13:18:32.841]             c <- base::c
[13:18:32.841]             inherits <- base::inherits
[13:18:32.841]             invokeRestart <- base::invokeRestart
[13:18:32.841]             length <- base::length
[13:18:32.841]             list <- base::list
[13:18:32.841]             seq.int <- base::seq.int
[13:18:32.841]             signalCondition <- base::signalCondition
[13:18:32.841]             sys.calls <- base::sys.calls
[13:18:32.841]             `[[` <- base::`[[`
[13:18:32.841]             `+` <- base::`+`
[13:18:32.841]             `<<-` <- base::`<<-`
[13:18:32.841]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:32.841]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:32.841]                   3L)]
[13:18:32.841]             }
[13:18:32.841]             function(cond) {
[13:18:32.841]                 is_error <- inherits(cond, "error")
[13:18:32.841]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:32.841]                   NULL)
[13:18:32.841]                 if (is_error) {
[13:18:32.841]                   sessionInformation <- function() {
[13:18:32.841]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:32.841]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:32.841]                       search = base::search(), system = base::Sys.info())
[13:18:32.841]                   }
[13:18:32.841]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.841]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:32.841]                     cond$call), session = sessionInformation(), 
[13:18:32.841]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:32.841]                   signalCondition(cond)
[13:18:32.841]                 }
[13:18:32.841]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:32.841]                 "immediateCondition"))) {
[13:18:32.841]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:32.841]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.841]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:32.841]                   if (TRUE && !signal) {
[13:18:32.841]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.841]                     {
[13:18:32.841]                       inherits <- base::inherits
[13:18:32.841]                       invokeRestart <- base::invokeRestart
[13:18:32.841]                       is.null <- base::is.null
[13:18:32.841]                       muffled <- FALSE
[13:18:32.841]                       if (inherits(cond, "message")) {
[13:18:32.841]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.841]                         if (muffled) 
[13:18:32.841]                           invokeRestart("muffleMessage")
[13:18:32.841]                       }
[13:18:32.841]                       else if (inherits(cond, "warning")) {
[13:18:32.841]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.841]                         if (muffled) 
[13:18:32.841]                           invokeRestart("muffleWarning")
[13:18:32.841]                       }
[13:18:32.841]                       else if (inherits(cond, "condition")) {
[13:18:32.841]                         if (!is.null(pattern)) {
[13:18:32.841]                           computeRestarts <- base::computeRestarts
[13:18:32.841]                           grepl <- base::grepl
[13:18:32.841]                           restarts <- computeRestarts(cond)
[13:18:32.841]                           for (restart in restarts) {
[13:18:32.841]                             name <- restart$name
[13:18:32.841]                             if (is.null(name)) 
[13:18:32.841]                               next
[13:18:32.841]                             if (!grepl(pattern, name)) 
[13:18:32.841]                               next
[13:18:32.841]                             invokeRestart(restart)
[13:18:32.841]                             muffled <- TRUE
[13:18:32.841]                             break
[13:18:32.841]                           }
[13:18:32.841]                         }
[13:18:32.841]                       }
[13:18:32.841]                       invisible(muffled)
[13:18:32.841]                     }
[13:18:32.841]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.841]                   }
[13:18:32.841]                 }
[13:18:32.841]                 else {
[13:18:32.841]                   if (TRUE) {
[13:18:32.841]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.841]                     {
[13:18:32.841]                       inherits <- base::inherits
[13:18:32.841]                       invokeRestart <- base::invokeRestart
[13:18:32.841]                       is.null <- base::is.null
[13:18:32.841]                       muffled <- FALSE
[13:18:32.841]                       if (inherits(cond, "message")) {
[13:18:32.841]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.841]                         if (muffled) 
[13:18:32.841]                           invokeRestart("muffleMessage")
[13:18:32.841]                       }
[13:18:32.841]                       else if (inherits(cond, "warning")) {
[13:18:32.841]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.841]                         if (muffled) 
[13:18:32.841]                           invokeRestart("muffleWarning")
[13:18:32.841]                       }
[13:18:32.841]                       else if (inherits(cond, "condition")) {
[13:18:32.841]                         if (!is.null(pattern)) {
[13:18:32.841]                           computeRestarts <- base::computeRestarts
[13:18:32.841]                           grepl <- base::grepl
[13:18:32.841]                           restarts <- computeRestarts(cond)
[13:18:32.841]                           for (restart in restarts) {
[13:18:32.841]                             name <- restart$name
[13:18:32.841]                             if (is.null(name)) 
[13:18:32.841]                               next
[13:18:32.841]                             if (!grepl(pattern, name)) 
[13:18:32.841]                               next
[13:18:32.841]                             invokeRestart(restart)
[13:18:32.841]                             muffled <- TRUE
[13:18:32.841]                             break
[13:18:32.841]                           }
[13:18:32.841]                         }
[13:18:32.841]                       }
[13:18:32.841]                       invisible(muffled)
[13:18:32.841]                     }
[13:18:32.841]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.841]                   }
[13:18:32.841]                 }
[13:18:32.841]             }
[13:18:32.841]         }))
[13:18:32.841]     }, error = function(ex) {
[13:18:32.841]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:32.841]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.841]                 ...future.rng), started = ...future.startTime, 
[13:18:32.841]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:32.841]             version = "1.8"), class = "FutureResult")
[13:18:32.841]     }, finally = {
[13:18:32.841]         if (!identical(...future.workdir, getwd())) 
[13:18:32.841]             setwd(...future.workdir)
[13:18:32.841]         {
[13:18:32.841]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:32.841]                 ...future.oldOptions$nwarnings <- NULL
[13:18:32.841]             }
[13:18:32.841]             base::options(...future.oldOptions)
[13:18:32.841]             if (.Platform$OS.type == "windows") {
[13:18:32.841]                 old_names <- names(...future.oldEnvVars)
[13:18:32.841]                 envs <- base::Sys.getenv()
[13:18:32.841]                 names <- names(envs)
[13:18:32.841]                 common <- intersect(names, old_names)
[13:18:32.841]                 added <- setdiff(names, old_names)
[13:18:32.841]                 removed <- setdiff(old_names, names)
[13:18:32.841]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:32.841]                   envs[common]]
[13:18:32.841]                 NAMES <- toupper(changed)
[13:18:32.841]                 args <- list()
[13:18:32.841]                 for (kk in seq_along(NAMES)) {
[13:18:32.841]                   name <- changed[[kk]]
[13:18:32.841]                   NAME <- NAMES[[kk]]
[13:18:32.841]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.841]                     next
[13:18:32.841]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.841]                 }
[13:18:32.841]                 NAMES <- toupper(added)
[13:18:32.841]                 for (kk in seq_along(NAMES)) {
[13:18:32.841]                   name <- added[[kk]]
[13:18:32.841]                   NAME <- NAMES[[kk]]
[13:18:32.841]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.841]                     next
[13:18:32.841]                   args[[name]] <- ""
[13:18:32.841]                 }
[13:18:32.841]                 NAMES <- toupper(removed)
[13:18:32.841]                 for (kk in seq_along(NAMES)) {
[13:18:32.841]                   name <- removed[[kk]]
[13:18:32.841]                   NAME <- NAMES[[kk]]
[13:18:32.841]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.841]                     next
[13:18:32.841]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.841]                 }
[13:18:32.841]                 if (length(args) > 0) 
[13:18:32.841]                   base::do.call(base::Sys.setenv, args = args)
[13:18:32.841]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:32.841]             }
[13:18:32.841]             else {
[13:18:32.841]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:32.841]             }
[13:18:32.841]             {
[13:18:32.841]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:32.841]                   0L) {
[13:18:32.841]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:32.841]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:32.841]                   base::options(opts)
[13:18:32.841]                 }
[13:18:32.841]                 {
[13:18:32.841]                   {
[13:18:32.841]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:32.841]                     NULL
[13:18:32.841]                   }
[13:18:32.841]                   options(future.plan = NULL)
[13:18:32.841]                   if (is.na(NA_character_)) 
[13:18:32.841]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.841]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:32.841]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:18:32.841]                     envir = parent.frame()) 
[13:18:32.841]                   {
[13:18:32.841]                     default_workers <- missing(workers)
[13:18:32.841]                     if (is.function(workers)) 
[13:18:32.841]                       workers <- workers()
[13:18:32.841]                     workers <- structure(as.integer(workers), 
[13:18:32.841]                       class = class(workers))
[13:18:32.841]                     stop_if_not(is.finite(workers), workers >= 
[13:18:32.841]                       1L)
[13:18:32.841]                     if ((workers == 1L && !inherits(workers, 
[13:18:32.841]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:18:32.841]                       if (default_workers) 
[13:18:32.841]                         supportsMulticore(warn = TRUE)
[13:18:32.841]                       return(sequential(..., envir = envir))
[13:18:32.841]                     }
[13:18:32.841]                     oopts <- options(mc.cores = workers)
[13:18:32.841]                     on.exit(options(oopts))
[13:18:32.841]                     future <- MulticoreFuture(..., workers = workers, 
[13:18:32.841]                       envir = envir)
[13:18:32.841]                     if (!future$lazy) 
[13:18:32.841]                       future <- run(future)
[13:18:32.841]                     invisible(future)
[13:18:32.841]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:32.841]                 }
[13:18:32.841]             }
[13:18:32.841]         }
[13:18:32.841]     })
[13:18:32.841]     if (TRUE) {
[13:18:32.841]         base::sink(type = "output", split = FALSE)
[13:18:32.841]         if (TRUE) {
[13:18:32.841]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:32.841]         }
[13:18:32.841]         else {
[13:18:32.841]             ...future.result["stdout"] <- base::list(NULL)
[13:18:32.841]         }
[13:18:32.841]         base::close(...future.stdout)
[13:18:32.841]         ...future.stdout <- NULL
[13:18:32.841]     }
[13:18:32.841]     ...future.result$conditions <- ...future.conditions
[13:18:32.841]     ...future.result$finished <- base::Sys.time()
[13:18:32.841]     ...future.result
[13:18:32.841] }
[13:18:32.844] assign_globals() ...
[13:18:32.844] List of 5
[13:18:32.844]  $ ...future.FUN            :function (...)  
[13:18:32.844]  $ future.call.arguments    : list()
[13:18:32.844]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.844]  $ ...future.elements_ii    :List of 2
[13:18:32.844]   ..$ : int 0
[13:18:32.844]   ..$ : int 0
[13:18:32.844]  $ ...future.seeds_ii       :List of 2
[13:18:32.844]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[13:18:32.844]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[13:18:32.844]  $ ...future.globals.maxSize: NULL
[13:18:32.844]  - attr(*, "resolved")= logi FALSE
[13:18:32.844]  - attr(*, "total_size")= num 616
[13:18:32.844]  - attr(*, "where")=List of 5
[13:18:32.844]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:18:32.844]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:18:32.844]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:18:32.844]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:18:32.844]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:18:32.844]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.844]  - attr(*, "already-done")= logi TRUE
[13:18:32.850] - reassign environment for ‘...future.FUN’
[13:18:32.850] - copied ‘...future.FUN’ to environment
[13:18:32.850] - copied ‘future.call.arguments’ to environment
[13:18:32.850] - copied ‘...future.elements_ii’ to environment
[13:18:32.850] - copied ‘...future.seeds_ii’ to environment
[13:18:32.850] - copied ‘...future.globals.maxSize’ to environment
[13:18:32.850] assign_globals() ... done
[13:18:32.850] requestCore(): workers = 2
[13:18:32.852] MulticoreFuture started
[13:18:32.853] - Launch lazy future ... done
[13:18:32.853] run() for ‘MulticoreFuture’ ... done
[13:18:32.853] Created future:
[13:18:32.854] plan(): Setting new future strategy stack:
[13:18:32.854] List of future strategies:
[13:18:32.854] 1. sequential:
[13:18:32.854]    - args: function (..., envir = parent.frame())
[13:18:32.854]    - tweaked: FALSE
[13:18:32.854]    - call: NULL
[13:18:32.855] plan(): nbrOfWorkers() = 1
[13:18:32.857] plan(): Setting new future strategy stack:
[13:18:32.857] List of future strategies:
[13:18:32.857] 1. multicore:
[13:18:32.857]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:18:32.857]    - tweaked: FALSE
[13:18:32.857]    - call: plan(strategy)
[13:18:32.863] plan(): nbrOfWorkers() = 2
[13:18:32.854] MulticoreFuture:
[13:18:32.854] Label: ‘future_replicate-1’
[13:18:32.854] Expression:
[13:18:32.854] {
[13:18:32.854]     do.call(function(...) {
[13:18:32.854]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.854]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.854]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.854]             on.exit(options(oopts), add = TRUE)
[13:18:32.854]         }
[13:18:32.854]         {
[13:18:32.854]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.854]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.854]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.854]                   envir = globalenv(), inherits = FALSE)
[13:18:32.854]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.854]             })
[13:18:32.854]         }
[13:18:32.854]     }, args = future.call.arguments)
[13:18:32.854] }
[13:18:32.854] Lazy evaluation: FALSE
[13:18:32.854] Asynchronous evaluation: TRUE
[13:18:32.854] Local evaluation: TRUE
[13:18:32.854] Environment: R_GlobalEnv
[13:18:32.854] Capture standard output: TRUE
[13:18:32.854] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:32.854] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:32.854] Packages: <none>
[13:18:32.854] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:32.854] Resolved: TRUE
[13:18:32.854] Value: <not collected>
[13:18:32.854] Conditions captured: <none>
[13:18:32.854] Early signaling: FALSE
[13:18:32.854] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:32.854] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:32.864] Chunk #1 of 2 ... DONE
[13:18:32.864] Chunk #2 of 2 ...
[13:18:32.864]  - Finding globals in 'X' for chunk #2 ...
[13:18:32.864] getGlobalsAndPackages() ...
[13:18:32.864] Searching for globals...
[13:18:32.865] 
[13:18:32.865] Searching for globals ... DONE
[13:18:32.865] - globals: [0] <none>
[13:18:32.865] getGlobalsAndPackages() ... DONE
[13:18:32.866]    + additional globals found: [n=0] 
[13:18:32.866]    + additional namespaces needed: [n=0] 
[13:18:32.866]  - Finding globals in 'X' for chunk #2 ... DONE
[13:18:32.866]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[13:18:32.866]  - seeds: [3] <seeds>
[13:18:32.866] getGlobalsAndPackages() ...
[13:18:32.867] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.867] Resolving globals: FALSE
[13:18:32.867] Tweak future expression to call with '...' arguments ...
[13:18:32.867] {
[13:18:32.867]     do.call(function(...) {
[13:18:32.867]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.867]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.867]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.867]             on.exit(options(oopts), add = TRUE)
[13:18:32.867]         }
[13:18:32.867]         {
[13:18:32.867]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.867]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.867]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.867]                   envir = globalenv(), inherits = FALSE)
[13:18:32.867]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.867]             })
[13:18:32.867]         }
[13:18:32.867]     }, args = future.call.arguments)
[13:18:32.867] }
[13:18:32.867] Tweak future expression to call with '...' arguments ... DONE
[13:18:32.868] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.868] 
[13:18:32.868] getGlobalsAndPackages() ... DONE
[13:18:32.869] run() for ‘Future’ ...
[13:18:32.869] - state: ‘created’
[13:18:32.869] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:18:32.874] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:32.874] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:18:32.874]   - Field: ‘label’
[13:18:32.875]   - Field: ‘local’
[13:18:32.875]   - Field: ‘owner’
[13:18:32.875]   - Field: ‘envir’
[13:18:32.875]   - Field: ‘workers’
[13:18:32.875]   - Field: ‘packages’
[13:18:32.875]   - Field: ‘gc’
[13:18:32.876]   - Field: ‘job’
[13:18:32.876]   - Field: ‘conditions’
[13:18:32.876]   - Field: ‘expr’
[13:18:32.876]   - Field: ‘uuid’
[13:18:32.876]   - Field: ‘seed’
[13:18:32.876]   - Field: ‘version’
[13:18:32.876]   - Field: ‘result’
[13:18:32.877]   - Field: ‘asynchronous’
[13:18:32.877]   - Field: ‘calls’
[13:18:32.877]   - Field: ‘globals’
[13:18:32.877]   - Field: ‘stdout’
[13:18:32.877]   - Field: ‘earlySignal’
[13:18:32.877]   - Field: ‘lazy’
[13:18:32.878]   - Field: ‘state’
[13:18:32.878] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:18:32.878] - Launch lazy future ...
[13:18:32.878] Packages needed by the future expression (n = 0): <none>
[13:18:32.878] Packages needed by future strategies (n = 0): <none>
[13:18:32.879] {
[13:18:32.879]     {
[13:18:32.879]         {
[13:18:32.879]             ...future.startTime <- base::Sys.time()
[13:18:32.879]             {
[13:18:32.879]                 {
[13:18:32.879]                   {
[13:18:32.879]                     {
[13:18:32.879]                       base::local({
[13:18:32.879]                         has_future <- base::requireNamespace("future", 
[13:18:32.879]                           quietly = TRUE)
[13:18:32.879]                         if (has_future) {
[13:18:32.879]                           ns <- base::getNamespace("future")
[13:18:32.879]                           version <- ns[[".package"]][["version"]]
[13:18:32.879]                           if (is.null(version)) 
[13:18:32.879]                             version <- utils::packageVersion("future")
[13:18:32.879]                         }
[13:18:32.879]                         else {
[13:18:32.879]                           version <- NULL
[13:18:32.879]                         }
[13:18:32.879]                         if (!has_future || version < "1.8.0") {
[13:18:32.879]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:32.879]                             "", base::R.version$version.string), 
[13:18:32.879]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:32.879]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:32.879]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:32.879]                               "release", "version")], collapse = " "), 
[13:18:32.879]                             hostname = base::Sys.info()[["nodename"]])
[13:18:32.879]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:32.879]                             info)
[13:18:32.879]                           info <- base::paste(info, collapse = "; ")
[13:18:32.879]                           if (!has_future) {
[13:18:32.879]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:32.879]                               info)
[13:18:32.879]                           }
[13:18:32.879]                           else {
[13:18:32.879]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:32.879]                               info, version)
[13:18:32.879]                           }
[13:18:32.879]                           base::stop(msg)
[13:18:32.879]                         }
[13:18:32.879]                       })
[13:18:32.879]                     }
[13:18:32.879]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:32.879]                     base::options(mc.cores = 1L)
[13:18:32.879]                   }
[13:18:32.879]                   options(future.plan = NULL)
[13:18:32.879]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.879]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:32.879]                 }
[13:18:32.879]                 ...future.workdir <- getwd()
[13:18:32.879]             }
[13:18:32.879]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:32.879]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:32.879]         }
[13:18:32.879]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:32.879]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[13:18:32.879]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:32.879]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:32.879]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:32.879]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:32.879]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:32.879]             base::names(...future.oldOptions))
[13:18:32.879]     }
[13:18:32.879]     if (FALSE) {
[13:18:32.879]     }
[13:18:32.879]     else {
[13:18:32.879]         if (TRUE) {
[13:18:32.879]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:32.879]                 open = "w")
[13:18:32.879]         }
[13:18:32.879]         else {
[13:18:32.879]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:32.879]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:32.879]         }
[13:18:32.879]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:32.879]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:32.879]             base::sink(type = "output", split = FALSE)
[13:18:32.879]             base::close(...future.stdout)
[13:18:32.879]         }, add = TRUE)
[13:18:32.879]     }
[13:18:32.879]     ...future.frame <- base::sys.nframe()
[13:18:32.879]     ...future.conditions <- base::list()
[13:18:32.879]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:32.879]     if (FALSE) {
[13:18:32.879]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:32.879]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:32.879]     }
[13:18:32.879]     ...future.result <- base::tryCatch({
[13:18:32.879]         base::withCallingHandlers({
[13:18:32.879]             ...future.value <- base::withVisible(base::local({
[13:18:32.879]                 withCallingHandlers({
[13:18:32.879]                   {
[13:18:32.879]                     do.call(function(...) {
[13:18:32.879]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.879]                       if (!identical(...future.globals.maxSize.org, 
[13:18:32.879]                         ...future.globals.maxSize)) {
[13:18:32.879]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.879]                         on.exit(options(oopts), add = TRUE)
[13:18:32.879]                       }
[13:18:32.879]                       {
[13:18:32.879]                         lapply(seq_along(...future.elements_ii), 
[13:18:32.879]                           FUN = function(jj) {
[13:18:32.879]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.879]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.879]                               envir = globalenv(), inherits = FALSE)
[13:18:32.879]                             ...future.FUN(...future.X_jj, ...)
[13:18:32.879]                           })
[13:18:32.879]                       }
[13:18:32.879]                     }, args = future.call.arguments)
[13:18:32.879]                   }
[13:18:32.879]                 }, immediateCondition = function(cond) {
[13:18:32.879]                   save_rds <- function (object, pathname, ...) 
[13:18:32.879]                   {
[13:18:32.879]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:18:32.879]                     if (file_test("-f", pathname_tmp)) {
[13:18:32.879]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.879]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:18:32.879]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.879]                         fi_tmp[["mtime"]])
[13:18:32.879]                     }
[13:18:32.879]                     tryCatch({
[13:18:32.879]                       saveRDS(object, file = pathname_tmp, ...)
[13:18:32.879]                     }, error = function(ex) {
[13:18:32.879]                       msg <- conditionMessage(ex)
[13:18:32.879]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.879]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:18:32.879]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.879]                         fi_tmp[["mtime"]], msg)
[13:18:32.879]                       ex$message <- msg
[13:18:32.879]                       stop(ex)
[13:18:32.879]                     })
[13:18:32.879]                     stopifnot(file_test("-f", pathname_tmp))
[13:18:32.879]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:18:32.879]                     if (!res || file_test("-f", pathname_tmp)) {
[13:18:32.879]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.879]                       fi <- file.info(pathname)
[13:18:32.879]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:18:32.879]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.879]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:18:32.879]                         fi[["size"]], fi[["mtime"]])
[13:18:32.879]                       stop(msg)
[13:18:32.879]                     }
[13:18:32.879]                     invisible(pathname)
[13:18:32.879]                   }
[13:18:32.879]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:18:32.879]                     rootPath = tempdir()) 
[13:18:32.879]                   {
[13:18:32.879]                     obj <- list(time = Sys.time(), condition = cond)
[13:18:32.879]                     file <- tempfile(pattern = class(cond)[1], 
[13:18:32.879]                       tmpdir = path, fileext = ".rds")
[13:18:32.879]                     save_rds(obj, file)
[13:18:32.879]                   }
[13:18:32.879]                   saveImmediateCondition(cond, path = "/tmp/RtmpPPCpJF/.future/immediateConditions")
[13:18:32.879]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.879]                   {
[13:18:32.879]                     inherits <- base::inherits
[13:18:32.879]                     invokeRestart <- base::invokeRestart
[13:18:32.879]                     is.null <- base::is.null
[13:18:32.879]                     muffled <- FALSE
[13:18:32.879]                     if (inherits(cond, "message")) {
[13:18:32.879]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:32.879]                       if (muffled) 
[13:18:32.879]                         invokeRestart("muffleMessage")
[13:18:32.879]                     }
[13:18:32.879]                     else if (inherits(cond, "warning")) {
[13:18:32.879]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:32.879]                       if (muffled) 
[13:18:32.879]                         invokeRestart("muffleWarning")
[13:18:32.879]                     }
[13:18:32.879]                     else if (inherits(cond, "condition")) {
[13:18:32.879]                       if (!is.null(pattern)) {
[13:18:32.879]                         computeRestarts <- base::computeRestarts
[13:18:32.879]                         grepl <- base::grepl
[13:18:32.879]                         restarts <- computeRestarts(cond)
[13:18:32.879]                         for (restart in restarts) {
[13:18:32.879]                           name <- restart$name
[13:18:32.879]                           if (is.null(name)) 
[13:18:32.879]                             next
[13:18:32.879]                           if (!grepl(pattern, name)) 
[13:18:32.879]                             next
[13:18:32.879]                           invokeRestart(restart)
[13:18:32.879]                           muffled <- TRUE
[13:18:32.879]                           break
[13:18:32.879]                         }
[13:18:32.879]                       }
[13:18:32.879]                     }
[13:18:32.879]                     invisible(muffled)
[13:18:32.879]                   }
[13:18:32.879]                   muffleCondition(cond)
[13:18:32.879]                 })
[13:18:32.879]             }))
[13:18:32.879]             future::FutureResult(value = ...future.value$value, 
[13:18:32.879]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.879]                   ...future.rng), globalenv = if (FALSE) 
[13:18:32.879]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:32.879]                     ...future.globalenv.names))
[13:18:32.879]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:32.879]         }, condition = base::local({
[13:18:32.879]             c <- base::c
[13:18:32.879]             inherits <- base::inherits
[13:18:32.879]             invokeRestart <- base::invokeRestart
[13:18:32.879]             length <- base::length
[13:18:32.879]             list <- base::list
[13:18:32.879]             seq.int <- base::seq.int
[13:18:32.879]             signalCondition <- base::signalCondition
[13:18:32.879]             sys.calls <- base::sys.calls
[13:18:32.879]             `[[` <- base::`[[`
[13:18:32.879]             `+` <- base::`+`
[13:18:32.879]             `<<-` <- base::`<<-`
[13:18:32.879]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:32.879]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:32.879]                   3L)]
[13:18:32.879]             }
[13:18:32.879]             function(cond) {
[13:18:32.879]                 is_error <- inherits(cond, "error")
[13:18:32.879]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:32.879]                   NULL)
[13:18:32.879]                 if (is_error) {
[13:18:32.879]                   sessionInformation <- function() {
[13:18:32.879]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:32.879]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:32.879]                       search = base::search(), system = base::Sys.info())
[13:18:32.879]                   }
[13:18:32.879]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.879]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:32.879]                     cond$call), session = sessionInformation(), 
[13:18:32.879]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:32.879]                   signalCondition(cond)
[13:18:32.879]                 }
[13:18:32.879]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:32.879]                 "immediateCondition"))) {
[13:18:32.879]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:32.879]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.879]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:32.879]                   if (TRUE && !signal) {
[13:18:32.879]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.879]                     {
[13:18:32.879]                       inherits <- base::inherits
[13:18:32.879]                       invokeRestart <- base::invokeRestart
[13:18:32.879]                       is.null <- base::is.null
[13:18:32.879]                       muffled <- FALSE
[13:18:32.879]                       if (inherits(cond, "message")) {
[13:18:32.879]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.879]                         if (muffled) 
[13:18:32.879]                           invokeRestart("muffleMessage")
[13:18:32.879]                       }
[13:18:32.879]                       else if (inherits(cond, "warning")) {
[13:18:32.879]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.879]                         if (muffled) 
[13:18:32.879]                           invokeRestart("muffleWarning")
[13:18:32.879]                       }
[13:18:32.879]                       else if (inherits(cond, "condition")) {
[13:18:32.879]                         if (!is.null(pattern)) {
[13:18:32.879]                           computeRestarts <- base::computeRestarts
[13:18:32.879]                           grepl <- base::grepl
[13:18:32.879]                           restarts <- computeRestarts(cond)
[13:18:32.879]                           for (restart in restarts) {
[13:18:32.879]                             name <- restart$name
[13:18:32.879]                             if (is.null(name)) 
[13:18:32.879]                               next
[13:18:32.879]                             if (!grepl(pattern, name)) 
[13:18:32.879]                               next
[13:18:32.879]                             invokeRestart(restart)
[13:18:32.879]                             muffled <- TRUE
[13:18:32.879]                             break
[13:18:32.879]                           }
[13:18:32.879]                         }
[13:18:32.879]                       }
[13:18:32.879]                       invisible(muffled)
[13:18:32.879]                     }
[13:18:32.879]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.879]                   }
[13:18:32.879]                 }
[13:18:32.879]                 else {
[13:18:32.879]                   if (TRUE) {
[13:18:32.879]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.879]                     {
[13:18:32.879]                       inherits <- base::inherits
[13:18:32.879]                       invokeRestart <- base::invokeRestart
[13:18:32.879]                       is.null <- base::is.null
[13:18:32.879]                       muffled <- FALSE
[13:18:32.879]                       if (inherits(cond, "message")) {
[13:18:32.879]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.879]                         if (muffled) 
[13:18:32.879]                           invokeRestart("muffleMessage")
[13:18:32.879]                       }
[13:18:32.879]                       else if (inherits(cond, "warning")) {
[13:18:32.879]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.879]                         if (muffled) 
[13:18:32.879]                           invokeRestart("muffleWarning")
[13:18:32.879]                       }
[13:18:32.879]                       else if (inherits(cond, "condition")) {
[13:18:32.879]                         if (!is.null(pattern)) {
[13:18:32.879]                           computeRestarts <- base::computeRestarts
[13:18:32.879]                           grepl <- base::grepl
[13:18:32.879]                           restarts <- computeRestarts(cond)
[13:18:32.879]                           for (restart in restarts) {
[13:18:32.879]                             name <- restart$name
[13:18:32.879]                             if (is.null(name)) 
[13:18:32.879]                               next
[13:18:32.879]                             if (!grepl(pattern, name)) 
[13:18:32.879]                               next
[13:18:32.879]                             invokeRestart(restart)
[13:18:32.879]                             muffled <- TRUE
[13:18:32.879]                             break
[13:18:32.879]                           }
[13:18:32.879]                         }
[13:18:32.879]                       }
[13:18:32.879]                       invisible(muffled)
[13:18:32.879]                     }
[13:18:32.879]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.879]                   }
[13:18:32.879]                 }
[13:18:32.879]             }
[13:18:32.879]         }))
[13:18:32.879]     }, error = function(ex) {
[13:18:32.879]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:32.879]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.879]                 ...future.rng), started = ...future.startTime, 
[13:18:32.879]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:32.879]             version = "1.8"), class = "FutureResult")
[13:18:32.879]     }, finally = {
[13:18:32.879]         if (!identical(...future.workdir, getwd())) 
[13:18:32.879]             setwd(...future.workdir)
[13:18:32.879]         {
[13:18:32.879]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:32.879]                 ...future.oldOptions$nwarnings <- NULL
[13:18:32.879]             }
[13:18:32.879]             base::options(...future.oldOptions)
[13:18:32.879]             if (.Platform$OS.type == "windows") {
[13:18:32.879]                 old_names <- names(...future.oldEnvVars)
[13:18:32.879]                 envs <- base::Sys.getenv()
[13:18:32.879]                 names <- names(envs)
[13:18:32.879]                 common <- intersect(names, old_names)
[13:18:32.879]                 added <- setdiff(names, old_names)
[13:18:32.879]                 removed <- setdiff(old_names, names)
[13:18:32.879]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:32.879]                   envs[common]]
[13:18:32.879]                 NAMES <- toupper(changed)
[13:18:32.879]                 args <- list()
[13:18:32.879]                 for (kk in seq_along(NAMES)) {
[13:18:32.879]                   name <- changed[[kk]]
[13:18:32.879]                   NAME <- NAMES[[kk]]
[13:18:32.879]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.879]                     next
[13:18:32.879]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.879]                 }
[13:18:32.879]                 NAMES <- toupper(added)
[13:18:32.879]                 for (kk in seq_along(NAMES)) {
[13:18:32.879]                   name <- added[[kk]]
[13:18:32.879]                   NAME <- NAMES[[kk]]
[13:18:32.879]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.879]                     next
[13:18:32.879]                   args[[name]] <- ""
[13:18:32.879]                 }
[13:18:32.879]                 NAMES <- toupper(removed)
[13:18:32.879]                 for (kk in seq_along(NAMES)) {
[13:18:32.879]                   name <- removed[[kk]]
[13:18:32.879]                   NAME <- NAMES[[kk]]
[13:18:32.879]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.879]                     next
[13:18:32.879]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.879]                 }
[13:18:32.879]                 if (length(args) > 0) 
[13:18:32.879]                   base::do.call(base::Sys.setenv, args = args)
[13:18:32.879]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:32.879]             }
[13:18:32.879]             else {
[13:18:32.879]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:32.879]             }
[13:18:32.879]             {
[13:18:32.879]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:32.879]                   0L) {
[13:18:32.879]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:32.879]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:32.879]                   base::options(opts)
[13:18:32.879]                 }
[13:18:32.879]                 {
[13:18:32.879]                   {
[13:18:32.879]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:32.879]                     NULL
[13:18:32.879]                   }
[13:18:32.879]                   options(future.plan = NULL)
[13:18:32.879]                   if (is.na(NA_character_)) 
[13:18:32.879]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.879]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:32.879]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:18:32.879]                     envir = parent.frame()) 
[13:18:32.879]                   {
[13:18:32.879]                     default_workers <- missing(workers)
[13:18:32.879]                     if (is.function(workers)) 
[13:18:32.879]                       workers <- workers()
[13:18:32.879]                     workers <- structure(as.integer(workers), 
[13:18:32.879]                       class = class(workers))
[13:18:32.879]                     stop_if_not(is.finite(workers), workers >= 
[13:18:32.879]                       1L)
[13:18:32.879]                     if ((workers == 1L && !inherits(workers, 
[13:18:32.879]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:18:32.879]                       if (default_workers) 
[13:18:32.879]                         supportsMulticore(warn = TRUE)
[13:18:32.879]                       return(sequential(..., envir = envir))
[13:18:32.879]                     }
[13:18:32.879]                     oopts <- options(mc.cores = workers)
[13:18:32.879]                     on.exit(options(oopts))
[13:18:32.879]                     future <- MulticoreFuture(..., workers = workers, 
[13:18:32.879]                       envir = envir)
[13:18:32.879]                     if (!future$lazy) 
[13:18:32.879]                       future <- run(future)
[13:18:32.879]                     invisible(future)
[13:18:32.879]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:32.879]                 }
[13:18:32.879]             }
[13:18:32.879]         }
[13:18:32.879]     })
[13:18:32.879]     if (TRUE) {
[13:18:32.879]         base::sink(type = "output", split = FALSE)
[13:18:32.879]         if (TRUE) {
[13:18:32.879]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:32.879]         }
[13:18:32.879]         else {
[13:18:32.879]             ...future.result["stdout"] <- base::list(NULL)
[13:18:32.879]         }
[13:18:32.879]         base::close(...future.stdout)
[13:18:32.879]         ...future.stdout <- NULL
[13:18:32.879]     }
[13:18:32.879]     ...future.result$conditions <- ...future.conditions
[13:18:32.879]     ...future.result$finished <- base::Sys.time()
[13:18:32.879]     ...future.result
[13:18:32.879] }
[13:18:32.883] assign_globals() ...
[13:18:32.883] List of 5
[13:18:32.883]  $ ...future.FUN            :function (...)  
[13:18:32.883]  $ future.call.arguments    : list()
[13:18:32.883]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.883]  $ ...future.elements_ii    :List of 3
[13:18:32.883]   ..$ : int 0
[13:18:32.883]   ..$ : int 0
[13:18:32.883]   ..$ : int 0
[13:18:32.883]  $ ...future.seeds_ii       :List of 3
[13:18:32.883]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[13:18:32.883]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[13:18:32.883]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[13:18:32.883]  $ ...future.globals.maxSize: NULL
[13:18:32.883]  - attr(*, "resolved")= logi FALSE
[13:18:32.883]  - attr(*, "total_size")= num 616
[13:18:32.883]  - attr(*, "where")=List of 5
[13:18:32.883]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:18:32.883]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:18:32.883]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:18:32.883]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:18:32.883]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:18:32.883]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.883]  - attr(*, "already-done")= logi TRUE
[13:18:32.897] - reassign environment for ‘...future.FUN’
[13:18:32.897] - copied ‘...future.FUN’ to environment
[13:18:32.897] - copied ‘future.call.arguments’ to environment
[13:18:32.897] - copied ‘...future.elements_ii’ to environment
[13:18:32.898] - copied ‘...future.seeds_ii’ to environment
[13:18:32.898] - copied ‘...future.globals.maxSize’ to environment
[13:18:32.898] assign_globals() ... done
[13:18:32.898] requestCore(): workers = 2
[13:18:32.900] MulticoreFuture started
[13:18:32.901] - Launch lazy future ... done
[13:18:32.901] run() for ‘MulticoreFuture’ ... done
[13:18:32.901] Created future:
[13:18:32.902] plan(): Setting new future strategy stack:
[13:18:32.902] List of future strategies:
[13:18:32.902] 1. sequential:
[13:18:32.902]    - args: function (..., envir = parent.frame())
[13:18:32.902]    - tweaked: FALSE
[13:18:32.902]    - call: NULL
[13:18:32.903] plan(): nbrOfWorkers() = 1
[13:18:32.905] plan(): Setting new future strategy stack:
[13:18:32.905] List of future strategies:
[13:18:32.905] 1. multicore:
[13:18:32.905]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:18:32.905]    - tweaked: FALSE
[13:18:32.905]    - call: plan(strategy)
[13:18:32.911] plan(): nbrOfWorkers() = 2
[13:18:32.902] MulticoreFuture:
[13:18:32.902] Label: ‘future_replicate-2’
[13:18:32.902] Expression:
[13:18:32.902] {
[13:18:32.902]     do.call(function(...) {
[13:18:32.902]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.902]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.902]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.902]             on.exit(options(oopts), add = TRUE)
[13:18:32.902]         }
[13:18:32.902]         {
[13:18:32.902]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.902]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.902]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.902]                   envir = globalenv(), inherits = FALSE)
[13:18:32.902]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.902]             })
[13:18:32.902]         }
[13:18:32.902]     }, args = future.call.arguments)
[13:18:32.902] }
[13:18:32.902] Lazy evaluation: FALSE
[13:18:32.902] Asynchronous evaluation: TRUE
[13:18:32.902] Local evaluation: TRUE
[13:18:32.902] Environment: R_GlobalEnv
[13:18:32.902] Capture standard output: TRUE
[13:18:32.902] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:32.902] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:32.902] Packages: <none>
[13:18:32.902] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:32.902] Resolved: TRUE
[13:18:32.902] Value: <not collected>
[13:18:32.902] Conditions captured: <none>
[13:18:32.902] Early signaling: FALSE
[13:18:32.902] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:32.902] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:32.912] Chunk #2 of 2 ... DONE
[13:18:32.912] Launching 2 futures (chunks) ... DONE
[13:18:32.913] Resolving 2 futures (chunks) ...
[13:18:32.913] resolve() on list ...
[13:18:32.913]  recursive: 0
[13:18:32.913]  length: 2
[13:18:32.913] 
[13:18:32.914] Future #1
[13:18:32.915] signalConditionsASAP(MulticoreFuture, pos=1) ...
[13:18:32.915] - nx: 2
[13:18:32.915] - relay: TRUE
[13:18:32.915] - stdout: TRUE
[13:18:32.915] - signal: TRUE
[13:18:32.915] - resignal: FALSE
[13:18:32.915] - force: TRUE
[13:18:32.916] - relayed: [n=2] FALSE, FALSE
[13:18:32.916] - queued futures: [n=2] FALSE, FALSE
[13:18:32.916]  - until=1
[13:18:32.916]  - relaying element #1
[13:18:32.916] - relayed: [n=2] TRUE, FALSE
[13:18:32.916] - queued futures: [n=2] TRUE, FALSE
[13:18:32.917] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[13:18:32.917]  length: 1 (resolved future 1)
[13:18:32.917] Future #2
[13:18:32.918] signalConditionsASAP(MulticoreFuture, pos=2) ...
[13:18:32.918] - nx: 2
[13:18:32.918] - relay: TRUE
[13:18:32.918] - stdout: TRUE
[13:18:32.919] - signal: TRUE
[13:18:32.919] - resignal: FALSE
[13:18:32.919] - force: TRUE
[13:18:32.919] - relayed: [n=2] TRUE, FALSE
[13:18:32.919] - queued futures: [n=2] TRUE, FALSE
[13:18:32.919]  - until=2
[13:18:32.919]  - relaying element #2
[13:18:32.920] - relayed: [n=2] TRUE, TRUE
[13:18:32.920] - queued futures: [n=2] TRUE, TRUE
[13:18:32.920] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[13:18:32.920]  length: 0 (resolved future 2)
[13:18:32.920] Relaying remaining futures
[13:18:32.920] signalConditionsASAP(NULL, pos=0) ...
[13:18:32.920] - nx: 2
[13:18:32.920] - relay: TRUE
[13:18:32.920] - stdout: TRUE
[13:18:32.921] - signal: TRUE
[13:18:32.921] - resignal: FALSE
[13:18:32.921] - force: TRUE
[13:18:32.921] - relayed: [n=2] TRUE, TRUE
[13:18:32.922] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:18:32.922] - relayed: [n=2] TRUE, TRUE
[13:18:32.922] - queued futures: [n=2] TRUE, TRUE
[13:18:32.922] signalConditionsASAP(NULL, pos=0) ... done
[13:18:32.922] resolve() on list ... DONE
[13:18:32.922]  - Number of value chunks collected: 2
[13:18:32.922] Resolving 2 futures (chunks) ... DONE
[13:18:32.923] Reducing values from 2 chunks ...
[13:18:32.923]  - Number of values collected after concatenation: 5
[13:18:32.923]  - Number of values expected: 5
[13:18:32.923] Reducing values from 2 chunks ... DONE
[13:18:32.923] future_lapply() ... DONE
[13:18:32.923] future_lapply() ...
[13:18:32.924] Generating random seeds ...
[13:18:32.924] Generating random seed streams for 5 elements ...
[13:18:32.924] Generating random seed streams for 5 elements ... DONE
[13:18:32.924] Generating random seeds ... DONE
[13:18:32.924] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:18:32.929] Number of chunks: 2
[13:18:32.929] getGlobalsAndPackagesXApply() ...
[13:18:32.929]  - future.globals: TRUE
[13:18:32.929] getGlobalsAndPackages() ...
[13:18:32.930] Searching for globals...
[13:18:32.931] - globals found: [2] ‘FUN’, ‘sample’
[13:18:32.931] Searching for globals ... DONE
[13:18:32.931] Resolving globals: FALSE
[13:18:32.932] The total size of the 1 globals is 616 bytes (616 bytes)
[13:18:32.932] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:18:32.932] - globals: [1] ‘FUN’
[13:18:32.932] 
[13:18:32.932] getGlobalsAndPackages() ... DONE
[13:18:32.932]  - globals found/used: [n=1] ‘FUN’
[13:18:32.933]  - needed namespaces: [n=0] 
[13:18:32.933] Finding globals ... DONE
[13:18:32.933]  - use_args: TRUE
[13:18:32.933]  - Getting '...' globals ...
[13:18:32.933] resolve() on list ...
[13:18:32.933]  recursive: 0
[13:18:32.934]  length: 1
[13:18:32.934]  elements: ‘...’
[13:18:32.934]  length: 0 (resolved future 1)
[13:18:32.934] resolve() on list ... DONE
[13:18:32.934]    - '...' content: [n=0] 
[13:18:32.934] List of 1
[13:18:32.934]  $ ...: list()
[13:18:32.934]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.934]  - attr(*, "where")=List of 1
[13:18:32.934]   ..$ ...:<environment: 0x55df1e12ae80> 
[13:18:32.934]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.934]  - attr(*, "resolved")= logi TRUE
[13:18:32.934]  - attr(*, "total_size")= num NA
[13:18:32.940]  - Getting '...' globals ... DONE
[13:18:32.940] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:18:32.940] List of 2
[13:18:32.940]  $ ...future.FUN:function (...)  
[13:18:32.940]  $ ...          : list()
[13:18:32.940]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.940]  - attr(*, "where")=List of 2
[13:18:32.940]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:18:32.940]   ..$ ...          :<environment: 0x55df1e12ae80> 
[13:18:32.940]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.940]  - attr(*, "resolved")= logi FALSE
[13:18:32.940]  - attr(*, "total_size")= num 616
[13:18:32.944] Packages to be attached in all futures: [n=0] 
[13:18:32.944] getGlobalsAndPackagesXApply() ... DONE
[13:18:32.944] Number of futures (= number of chunks): 2
[13:18:32.944] Launching 2 futures (chunks) ...
[13:18:32.944] Chunk #1 of 2 ...
[13:18:32.945]  - Finding globals in 'X' for chunk #1 ...
[13:18:32.945] getGlobalsAndPackages() ...
[13:18:32.945] Searching for globals...
[13:18:32.945] 
[13:18:32.945] Searching for globals ... DONE
[13:18:32.945] - globals: [0] <none>
[13:18:32.945] getGlobalsAndPackages() ... DONE
[13:18:32.946]    + additional globals found: [n=0] 
[13:18:32.946]    + additional namespaces needed: [n=0] 
[13:18:32.946]  - Finding globals in 'X' for chunk #1 ... DONE
[13:18:32.946]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:18:32.946]  - seeds: [2] <seeds>
[13:18:32.946] getGlobalsAndPackages() ...
[13:18:32.946] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.946] Resolving globals: FALSE
[13:18:32.946] Tweak future expression to call with '...' arguments ...
[13:18:32.947] {
[13:18:32.947]     do.call(function(...) {
[13:18:32.947]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.947]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.947]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.947]             on.exit(options(oopts), add = TRUE)
[13:18:32.947]         }
[13:18:32.947]         {
[13:18:32.947]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.947]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.947]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.947]                   envir = globalenv(), inherits = FALSE)
[13:18:32.947]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.947]             })
[13:18:32.947]         }
[13:18:32.947]     }, args = future.call.arguments)
[13:18:32.947] }
[13:18:32.947] Tweak future expression to call with '...' arguments ... DONE
[13:18:32.947] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.947] 
[13:18:32.947] getGlobalsAndPackages() ... DONE
[13:18:32.948] run() for ‘Future’ ...
[13:18:32.948] - state: ‘created’
[13:18:32.948] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:18:32.952] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:32.952] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:18:32.952]   - Field: ‘label’
[13:18:32.952]   - Field: ‘local’
[13:18:32.952]   - Field: ‘owner’
[13:18:32.952]   - Field: ‘envir’
[13:18:32.952]   - Field: ‘workers’
[13:18:32.953]   - Field: ‘packages’
[13:18:32.953]   - Field: ‘gc’
[13:18:32.953]   - Field: ‘job’
[13:18:32.953]   - Field: ‘conditions’
[13:18:32.953]   - Field: ‘expr’
[13:18:32.953]   - Field: ‘uuid’
[13:18:32.953]   - Field: ‘seed’
[13:18:32.953]   - Field: ‘version’
[13:18:32.953]   - Field: ‘result’
[13:18:32.953]   - Field: ‘asynchronous’
[13:18:32.954]   - Field: ‘calls’
[13:18:32.954]   - Field: ‘globals’
[13:18:32.954]   - Field: ‘stdout’
[13:18:32.954]   - Field: ‘earlySignal’
[13:18:32.954]   - Field: ‘lazy’
[13:18:32.954]   - Field: ‘state’
[13:18:32.954] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:18:32.954] - Launch lazy future ...
[13:18:32.955] Packages needed by the future expression (n = 0): <none>
[13:18:32.955] Packages needed by future strategies (n = 0): <none>
[13:18:32.955] {
[13:18:32.955]     {
[13:18:32.955]         {
[13:18:32.955]             ...future.startTime <- base::Sys.time()
[13:18:32.955]             {
[13:18:32.955]                 {
[13:18:32.955]                   {
[13:18:32.955]                     {
[13:18:32.955]                       base::local({
[13:18:32.955]                         has_future <- base::requireNamespace("future", 
[13:18:32.955]                           quietly = TRUE)
[13:18:32.955]                         if (has_future) {
[13:18:32.955]                           ns <- base::getNamespace("future")
[13:18:32.955]                           version <- ns[[".package"]][["version"]]
[13:18:32.955]                           if (is.null(version)) 
[13:18:32.955]                             version <- utils::packageVersion("future")
[13:18:32.955]                         }
[13:18:32.955]                         else {
[13:18:32.955]                           version <- NULL
[13:18:32.955]                         }
[13:18:32.955]                         if (!has_future || version < "1.8.0") {
[13:18:32.955]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:32.955]                             "", base::R.version$version.string), 
[13:18:32.955]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:32.955]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:32.955]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:32.955]                               "release", "version")], collapse = " "), 
[13:18:32.955]                             hostname = base::Sys.info()[["nodename"]])
[13:18:32.955]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:32.955]                             info)
[13:18:32.955]                           info <- base::paste(info, collapse = "; ")
[13:18:32.955]                           if (!has_future) {
[13:18:32.955]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:32.955]                               info)
[13:18:32.955]                           }
[13:18:32.955]                           else {
[13:18:32.955]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:32.955]                               info, version)
[13:18:32.955]                           }
[13:18:32.955]                           base::stop(msg)
[13:18:32.955]                         }
[13:18:32.955]                       })
[13:18:32.955]                     }
[13:18:32.955]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:32.955]                     base::options(mc.cores = 1L)
[13:18:32.955]                   }
[13:18:32.955]                   options(future.plan = NULL)
[13:18:32.955]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.955]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:32.955]                 }
[13:18:32.955]                 ...future.workdir <- getwd()
[13:18:32.955]             }
[13:18:32.955]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:32.955]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:32.955]         }
[13:18:32.955]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:32.955]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:18:32.955]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:32.955]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:32.955]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:32.955]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:32.955]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:32.955]             base::names(...future.oldOptions))
[13:18:32.955]     }
[13:18:32.955]     if (FALSE) {
[13:18:32.955]     }
[13:18:32.955]     else {
[13:18:32.955]         if (TRUE) {
[13:18:32.955]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:32.955]                 open = "w")
[13:18:32.955]         }
[13:18:32.955]         else {
[13:18:32.955]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:32.955]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:32.955]         }
[13:18:32.955]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:32.955]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:32.955]             base::sink(type = "output", split = FALSE)
[13:18:32.955]             base::close(...future.stdout)
[13:18:32.955]         }, add = TRUE)
[13:18:32.955]     }
[13:18:32.955]     ...future.frame <- base::sys.nframe()
[13:18:32.955]     ...future.conditions <- base::list()
[13:18:32.955]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:32.955]     if (FALSE) {
[13:18:32.955]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:32.955]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:32.955]     }
[13:18:32.955]     ...future.result <- base::tryCatch({
[13:18:32.955]         base::withCallingHandlers({
[13:18:32.955]             ...future.value <- base::withVisible(base::local({
[13:18:32.955]                 withCallingHandlers({
[13:18:32.955]                   {
[13:18:32.955]                     do.call(function(...) {
[13:18:32.955]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.955]                       if (!identical(...future.globals.maxSize.org, 
[13:18:32.955]                         ...future.globals.maxSize)) {
[13:18:32.955]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.955]                         on.exit(options(oopts), add = TRUE)
[13:18:32.955]                       }
[13:18:32.955]                       {
[13:18:32.955]                         lapply(seq_along(...future.elements_ii), 
[13:18:32.955]                           FUN = function(jj) {
[13:18:32.955]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.955]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.955]                               envir = globalenv(), inherits = FALSE)
[13:18:32.955]                             ...future.FUN(...future.X_jj, ...)
[13:18:32.955]                           })
[13:18:32.955]                       }
[13:18:32.955]                     }, args = future.call.arguments)
[13:18:32.955]                   }
[13:18:32.955]                 }, immediateCondition = function(cond) {
[13:18:32.955]                   save_rds <- function (object, pathname, ...) 
[13:18:32.955]                   {
[13:18:32.955]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:18:32.955]                     if (file_test("-f", pathname_tmp)) {
[13:18:32.955]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.955]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:18:32.955]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.955]                         fi_tmp[["mtime"]])
[13:18:32.955]                     }
[13:18:32.955]                     tryCatch({
[13:18:32.955]                       saveRDS(object, file = pathname_tmp, ...)
[13:18:32.955]                     }, error = function(ex) {
[13:18:32.955]                       msg <- conditionMessage(ex)
[13:18:32.955]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.955]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:18:32.955]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.955]                         fi_tmp[["mtime"]], msg)
[13:18:32.955]                       ex$message <- msg
[13:18:32.955]                       stop(ex)
[13:18:32.955]                     })
[13:18:32.955]                     stopifnot(file_test("-f", pathname_tmp))
[13:18:32.955]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:18:32.955]                     if (!res || file_test("-f", pathname_tmp)) {
[13:18:32.955]                       fi_tmp <- file.info(pathname_tmp)
[13:18:32.955]                       fi <- file.info(pathname)
[13:18:32.955]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:18:32.955]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:32.955]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:18:32.955]                         fi[["size"]], fi[["mtime"]])
[13:18:32.955]                       stop(msg)
[13:18:32.955]                     }
[13:18:32.955]                     invisible(pathname)
[13:18:32.955]                   }
[13:18:32.955]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:18:32.955]                     rootPath = tempdir()) 
[13:18:32.955]                   {
[13:18:32.955]                     obj <- list(time = Sys.time(), condition = cond)
[13:18:32.955]                     file <- tempfile(pattern = class(cond)[1], 
[13:18:32.955]                       tmpdir = path, fileext = ".rds")
[13:18:32.955]                     save_rds(obj, file)
[13:18:32.955]                   }
[13:18:32.955]                   saveImmediateCondition(cond, path = "/tmp/RtmpPPCpJF/.future/immediateConditions")
[13:18:32.955]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.955]                   {
[13:18:32.955]                     inherits <- base::inherits
[13:18:32.955]                     invokeRestart <- base::invokeRestart
[13:18:32.955]                     is.null <- base::is.null
[13:18:32.955]                     muffled <- FALSE
[13:18:32.955]                     if (inherits(cond, "message")) {
[13:18:32.955]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:32.955]                       if (muffled) 
[13:18:32.955]                         invokeRestart("muffleMessage")
[13:18:32.955]                     }
[13:18:32.955]                     else if (inherits(cond, "warning")) {
[13:18:32.955]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:32.955]                       if (muffled) 
[13:18:32.955]                         invokeRestart("muffleWarning")
[13:18:32.955]                     }
[13:18:32.955]                     else if (inherits(cond, "condition")) {
[13:18:32.955]                       if (!is.null(pattern)) {
[13:18:32.955]                         computeRestarts <- base::computeRestarts
[13:18:32.955]                         grepl <- base::grepl
[13:18:32.955]                         restarts <- computeRestarts(cond)
[13:18:32.955]                         for (restart in restarts) {
[13:18:32.955]                           name <- restart$name
[13:18:32.955]                           if (is.null(name)) 
[13:18:32.955]                             next
[13:18:32.955]                           if (!grepl(pattern, name)) 
[13:18:32.955]                             next
[13:18:32.955]                           invokeRestart(restart)
[13:18:32.955]                           muffled <- TRUE
[13:18:32.955]                           break
[13:18:32.955]                         }
[13:18:32.955]                       }
[13:18:32.955]                     }
[13:18:32.955]                     invisible(muffled)
[13:18:32.955]                   }
[13:18:32.955]                   muffleCondition(cond)
[13:18:32.955]                 })
[13:18:32.955]             }))
[13:18:32.955]             future::FutureResult(value = ...future.value$value, 
[13:18:32.955]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.955]                   ...future.rng), globalenv = if (FALSE) 
[13:18:32.955]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:32.955]                     ...future.globalenv.names))
[13:18:32.955]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:32.955]         }, condition = base::local({
[13:18:32.955]             c <- base::c
[13:18:32.955]             inherits <- base::inherits
[13:18:32.955]             invokeRestart <- base::invokeRestart
[13:18:32.955]             length <- base::length
[13:18:32.955]             list <- base::list
[13:18:32.955]             seq.int <- base::seq.int
[13:18:32.955]             signalCondition <- base::signalCondition
[13:18:32.955]             sys.calls <- base::sys.calls
[13:18:32.955]             `[[` <- base::`[[`
[13:18:32.955]             `+` <- base::`+`
[13:18:32.955]             `<<-` <- base::`<<-`
[13:18:32.955]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:32.955]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:32.955]                   3L)]
[13:18:32.955]             }
[13:18:32.955]             function(cond) {
[13:18:32.955]                 is_error <- inherits(cond, "error")
[13:18:32.955]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:32.955]                   NULL)
[13:18:32.955]                 if (is_error) {
[13:18:32.955]                   sessionInformation <- function() {
[13:18:32.955]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:32.955]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:32.955]                       search = base::search(), system = base::Sys.info())
[13:18:32.955]                   }
[13:18:32.955]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.955]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:32.955]                     cond$call), session = sessionInformation(), 
[13:18:32.955]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:32.955]                   signalCondition(cond)
[13:18:32.955]                 }
[13:18:32.955]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:32.955]                 "immediateCondition"))) {
[13:18:32.955]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:32.955]                   ...future.conditions[[length(...future.conditions) + 
[13:18:32.955]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:32.955]                   if (TRUE && !signal) {
[13:18:32.955]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.955]                     {
[13:18:32.955]                       inherits <- base::inherits
[13:18:32.955]                       invokeRestart <- base::invokeRestart
[13:18:32.955]                       is.null <- base::is.null
[13:18:32.955]                       muffled <- FALSE
[13:18:32.955]                       if (inherits(cond, "message")) {
[13:18:32.955]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.955]                         if (muffled) 
[13:18:32.955]                           invokeRestart("muffleMessage")
[13:18:32.955]                       }
[13:18:32.955]                       else if (inherits(cond, "warning")) {
[13:18:32.955]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.955]                         if (muffled) 
[13:18:32.955]                           invokeRestart("muffleWarning")
[13:18:32.955]                       }
[13:18:32.955]                       else if (inherits(cond, "condition")) {
[13:18:32.955]                         if (!is.null(pattern)) {
[13:18:32.955]                           computeRestarts <- base::computeRestarts
[13:18:32.955]                           grepl <- base::grepl
[13:18:32.955]                           restarts <- computeRestarts(cond)
[13:18:32.955]                           for (restart in restarts) {
[13:18:32.955]                             name <- restart$name
[13:18:32.955]                             if (is.null(name)) 
[13:18:32.955]                               next
[13:18:32.955]                             if (!grepl(pattern, name)) 
[13:18:32.955]                               next
[13:18:32.955]                             invokeRestart(restart)
[13:18:32.955]                             muffled <- TRUE
[13:18:32.955]                             break
[13:18:32.955]                           }
[13:18:32.955]                         }
[13:18:32.955]                       }
[13:18:32.955]                       invisible(muffled)
[13:18:32.955]                     }
[13:18:32.955]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.955]                   }
[13:18:32.955]                 }
[13:18:32.955]                 else {
[13:18:32.955]                   if (TRUE) {
[13:18:32.955]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:32.955]                     {
[13:18:32.955]                       inherits <- base::inherits
[13:18:32.955]                       invokeRestart <- base::invokeRestart
[13:18:32.955]                       is.null <- base::is.null
[13:18:32.955]                       muffled <- FALSE
[13:18:32.955]                       if (inherits(cond, "message")) {
[13:18:32.955]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:32.955]                         if (muffled) 
[13:18:32.955]                           invokeRestart("muffleMessage")
[13:18:32.955]                       }
[13:18:32.955]                       else if (inherits(cond, "warning")) {
[13:18:32.955]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:32.955]                         if (muffled) 
[13:18:32.955]                           invokeRestart("muffleWarning")
[13:18:32.955]                       }
[13:18:32.955]                       else if (inherits(cond, "condition")) {
[13:18:32.955]                         if (!is.null(pattern)) {
[13:18:32.955]                           computeRestarts <- base::computeRestarts
[13:18:32.955]                           grepl <- base::grepl
[13:18:32.955]                           restarts <- computeRestarts(cond)
[13:18:32.955]                           for (restart in restarts) {
[13:18:32.955]                             name <- restart$name
[13:18:32.955]                             if (is.null(name)) 
[13:18:32.955]                               next
[13:18:32.955]                             if (!grepl(pattern, name)) 
[13:18:32.955]                               next
[13:18:32.955]                             invokeRestart(restart)
[13:18:32.955]                             muffled <- TRUE
[13:18:32.955]                             break
[13:18:32.955]                           }
[13:18:32.955]                         }
[13:18:32.955]                       }
[13:18:32.955]                       invisible(muffled)
[13:18:32.955]                     }
[13:18:32.955]                     muffleCondition(cond, pattern = "^muffle")
[13:18:32.955]                   }
[13:18:32.955]                 }
[13:18:32.955]             }
[13:18:32.955]         }))
[13:18:32.955]     }, error = function(ex) {
[13:18:32.955]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:32.955]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:32.955]                 ...future.rng), started = ...future.startTime, 
[13:18:32.955]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:32.955]             version = "1.8"), class = "FutureResult")
[13:18:32.955]     }, finally = {
[13:18:32.955]         if (!identical(...future.workdir, getwd())) 
[13:18:32.955]             setwd(...future.workdir)
[13:18:32.955]         {
[13:18:32.955]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:32.955]                 ...future.oldOptions$nwarnings <- NULL
[13:18:32.955]             }
[13:18:32.955]             base::options(...future.oldOptions)
[13:18:32.955]             if (.Platform$OS.type == "windows") {
[13:18:32.955]                 old_names <- names(...future.oldEnvVars)
[13:18:32.955]                 envs <- base::Sys.getenv()
[13:18:32.955]                 names <- names(envs)
[13:18:32.955]                 common <- intersect(names, old_names)
[13:18:32.955]                 added <- setdiff(names, old_names)
[13:18:32.955]                 removed <- setdiff(old_names, names)
[13:18:32.955]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:32.955]                   envs[common]]
[13:18:32.955]                 NAMES <- toupper(changed)
[13:18:32.955]                 args <- list()
[13:18:32.955]                 for (kk in seq_along(NAMES)) {
[13:18:32.955]                   name <- changed[[kk]]
[13:18:32.955]                   NAME <- NAMES[[kk]]
[13:18:32.955]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.955]                     next
[13:18:32.955]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.955]                 }
[13:18:32.955]                 NAMES <- toupper(added)
[13:18:32.955]                 for (kk in seq_along(NAMES)) {
[13:18:32.955]                   name <- added[[kk]]
[13:18:32.955]                   NAME <- NAMES[[kk]]
[13:18:32.955]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.955]                     next
[13:18:32.955]                   args[[name]] <- ""
[13:18:32.955]                 }
[13:18:32.955]                 NAMES <- toupper(removed)
[13:18:32.955]                 for (kk in seq_along(NAMES)) {
[13:18:32.955]                   name <- removed[[kk]]
[13:18:32.955]                   NAME <- NAMES[[kk]]
[13:18:32.955]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:32.955]                     next
[13:18:32.955]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:32.955]                 }
[13:18:32.955]                 if (length(args) > 0) 
[13:18:32.955]                   base::do.call(base::Sys.setenv, args = args)
[13:18:32.955]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:32.955]             }
[13:18:32.955]             else {
[13:18:32.955]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:32.955]             }
[13:18:32.955]             {
[13:18:32.955]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:32.955]                   0L) {
[13:18:32.955]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:32.955]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:32.955]                   base::options(opts)
[13:18:32.955]                 }
[13:18:32.955]                 {
[13:18:32.955]                   {
[13:18:32.955]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:32.955]                     NULL
[13:18:32.955]                   }
[13:18:32.955]                   options(future.plan = NULL)
[13:18:32.955]                   if (is.na(NA_character_)) 
[13:18:32.955]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:32.955]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:32.955]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:18:32.955]                     envir = parent.frame()) 
[13:18:32.955]                   {
[13:18:32.955]                     default_workers <- missing(workers)
[13:18:32.955]                     if (is.function(workers)) 
[13:18:32.955]                       workers <- workers()
[13:18:32.955]                     workers <- structure(as.integer(workers), 
[13:18:32.955]                       class = class(workers))
[13:18:32.955]                     stop_if_not(is.finite(workers), workers >= 
[13:18:32.955]                       1L)
[13:18:32.955]                     if ((workers == 1L && !inherits(workers, 
[13:18:32.955]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:18:32.955]                       if (default_workers) 
[13:18:32.955]                         supportsMulticore(warn = TRUE)
[13:18:32.955]                       return(sequential(..., envir = envir))
[13:18:32.955]                     }
[13:18:32.955]                     oopts <- options(mc.cores = workers)
[13:18:32.955]                     on.exit(options(oopts))
[13:18:32.955]                     future <- MulticoreFuture(..., workers = workers, 
[13:18:32.955]                       envir = envir)
[13:18:32.955]                     if (!future$lazy) 
[13:18:32.955]                       future <- run(future)
[13:18:32.955]                     invisible(future)
[13:18:32.955]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:32.955]                 }
[13:18:32.955]             }
[13:18:32.955]         }
[13:18:32.955]     })
[13:18:32.955]     if (TRUE) {
[13:18:32.955]         base::sink(type = "output", split = FALSE)
[13:18:32.955]         if (TRUE) {
[13:18:32.955]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:32.955]         }
[13:18:32.955]         else {
[13:18:32.955]             ...future.result["stdout"] <- base::list(NULL)
[13:18:32.955]         }
[13:18:32.955]         base::close(...future.stdout)
[13:18:32.955]         ...future.stdout <- NULL
[13:18:32.955]     }
[13:18:32.955]     ...future.result$conditions <- ...future.conditions
[13:18:32.955]     ...future.result$finished <- base::Sys.time()
[13:18:32.955]     ...future.result
[13:18:32.955] }
[13:18:32.958] assign_globals() ...
[13:18:32.958] List of 5
[13:18:32.958]  $ ...future.FUN            :function (...)  
[13:18:32.958]  $ future.call.arguments    : list()
[13:18:32.958]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:32.958]  $ ...future.elements_ii    :List of 2
[13:18:32.958]   ..$ : int 0
[13:18:32.958]   ..$ : int 0
[13:18:32.958]  $ ...future.seeds_ii       :List of 2
[13:18:32.958]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[13:18:32.958]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[13:18:32.958]  $ ...future.globals.maxSize: NULL
[13:18:32.958]  - attr(*, "resolved")= logi FALSE
[13:18:32.958]  - attr(*, "total_size")= num 616
[13:18:32.958]  - attr(*, "where")=List of 5
[13:18:32.958]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:18:32.958]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:18:32.958]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:18:32.958]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:18:32.958]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:18:32.958]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:32.958]  - attr(*, "already-done")= logi TRUE
[13:18:32.964] - reassign environment for ‘...future.FUN’
[13:18:32.964] - copied ‘...future.FUN’ to environment
[13:18:32.964] - copied ‘future.call.arguments’ to environment
[13:18:32.964] - copied ‘...future.elements_ii’ to environment
[13:18:32.964] - copied ‘...future.seeds_ii’ to environment
[13:18:32.964] - copied ‘...future.globals.maxSize’ to environment
[13:18:32.964] assign_globals() ... done
[13:18:32.964] requestCore(): workers = 2
[13:18:32.967] MulticoreFuture started
[13:18:32.967] - Launch lazy future ... done
[13:18:32.967] run() for ‘MulticoreFuture’ ... done
[13:18:32.968] Created future:
[13:18:32.968] plan(): Setting new future strategy stack:
[13:18:32.968] List of future strategies:
[13:18:32.968] 1. sequential:
[13:18:32.968]    - args: function (..., envir = parent.frame())
[13:18:32.968]    - tweaked: FALSE
[13:18:32.968]    - call: NULL
[13:18:32.969] plan(): nbrOfWorkers() = 1
[13:18:32.975] plan(): Setting new future strategy stack:
[13:18:32.975] List of future strategies:
[13:18:32.975] 1. multicore:
[13:18:32.975]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:18:32.975]    - tweaked: FALSE
[13:18:32.975]    - call: plan(strategy)
[13:18:32.982] plan(): nbrOfWorkers() = 2
[13:18:32.968] MulticoreFuture:
[13:18:32.968] Label: ‘future_replicate-1’
[13:18:32.968] Expression:
[13:18:32.968] {
[13:18:32.968]     do.call(function(...) {
[13:18:32.968]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.968]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.968]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.968]             on.exit(options(oopts), add = TRUE)
[13:18:32.968]         }
[13:18:32.968]         {
[13:18:32.968]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.968]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.968]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.968]                   envir = globalenv(), inherits = FALSE)
[13:18:32.968]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.968]             })
[13:18:32.968]         }
[13:18:32.968]     }, args = future.call.arguments)
[13:18:32.968] }
[13:18:32.968] Lazy evaluation: FALSE
[13:18:32.968] Asynchronous evaluation: TRUE
[13:18:32.968] Local evaluation: TRUE
[13:18:32.968] Environment: R_GlobalEnv
[13:18:32.968] Capture standard output: TRUE
[13:18:32.968] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:32.968] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:32.968] Packages: <none>
[13:18:32.968] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:32.968] Resolved: TRUE
[13:18:32.968] Value: <not collected>
[13:18:32.968] Conditions captured: <none>
[13:18:32.968] Early signaling: FALSE
[13:18:32.968] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:32.968] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:32.983] Chunk #1 of 2 ... DONE
[13:18:32.984] Chunk #2 of 2 ...
[13:18:32.984]  - Finding globals in 'X' for chunk #2 ...
[13:18:32.984] getGlobalsAndPackages() ...
[13:18:32.984] Searching for globals...
[13:18:32.985] 
[13:18:32.985] Searching for globals ... DONE
[13:18:32.985] - globals: [0] <none>
[13:18:32.986] getGlobalsAndPackages() ... DONE
[13:18:32.986]    + additional globals found: [n=0] 
[13:18:32.986]    + additional namespaces needed: [n=0] 
[13:18:32.986]  - Finding globals in 'X' for chunk #2 ... DONE
[13:18:32.986]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[13:18:32.987]  - seeds: [3] <seeds>
[13:18:32.987] getGlobalsAndPackages() ...
[13:18:32.987] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.987] Resolving globals: FALSE
[13:18:32.988] Tweak future expression to call with '...' arguments ...
[13:18:32.988] {
[13:18:32.988]     do.call(function(...) {
[13:18:32.988]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:32.988]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:32.988]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:32.988]             on.exit(options(oopts), add = TRUE)
[13:18:32.988]         }
[13:18:32.988]         {
[13:18:32.988]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:32.988]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:32.988]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:32.988]                   envir = globalenv(), inherits = FALSE)
[13:18:32.988]                 ...future.FUN(...future.X_jj, ...)
[13:18:32.988]             })
[13:18:32.988]         }
[13:18:32.988]     }, args = future.call.arguments)
[13:18:32.988] }
[13:18:32.988] Tweak future expression to call with '...' arguments ... DONE
[13:18:32.989] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:32.989] 
[13:18:32.989] getGlobalsAndPackages() ... DONE
[13:18:32.990] run() for ‘Future’ ...
[13:18:32.990] - state: ‘created’
[13:18:32.990] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:18:32.995] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:32.996] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:18:32.996]   - Field: ‘label’
[13:18:32.996]   - Field: ‘local’
[13:18:32.996]   - Field: ‘owner’
[13:18:32.996]   - Field: ‘envir’
[13:18:32.997]   - Field: ‘workers’
[13:18:32.997]   - Field: ‘packages’
[13:18:32.997]   - Field: ‘gc’
[13:18:32.997]   - Field: ‘job’
[13:18:32.998]   - Field: ‘conditions’
[13:18:32.998]   - Field: ‘expr’
[13:18:32.998]   - Field: ‘uuid’
[13:18:32.998]   - Field: ‘seed’
[13:18:32.998]   - Field: ‘version’
[13:18:32.999]   - Field: ‘result’
[13:18:32.999]   - Field: ‘asynchronous’
[13:18:32.999]   - Field: ‘calls’
[13:18:32.999]   - Field: ‘globals’
[13:18:32.999]   - Field: ‘stdout’
[13:18:32.999]   - Field: ‘earlySignal’
[13:18:33.000]   - Field: ‘lazy’
[13:18:33.000]   - Field: ‘state’
[13:18:33.000] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:18:33.000] - Launch lazy future ...
[13:18:33.001] Packages needed by the future expression (n = 0): <none>
[13:18:33.001] Packages needed by future strategies (n = 0): <none>
[13:18:33.002] {
[13:18:33.002]     {
[13:18:33.002]         {
[13:18:33.002]             ...future.startTime <- base::Sys.time()
[13:18:33.002]             {
[13:18:33.002]                 {
[13:18:33.002]                   {
[13:18:33.002]                     {
[13:18:33.002]                       base::local({
[13:18:33.002]                         has_future <- base::requireNamespace("future", 
[13:18:33.002]                           quietly = TRUE)
[13:18:33.002]                         if (has_future) {
[13:18:33.002]                           ns <- base::getNamespace("future")
[13:18:33.002]                           version <- ns[[".package"]][["version"]]
[13:18:33.002]                           if (is.null(version)) 
[13:18:33.002]                             version <- utils::packageVersion("future")
[13:18:33.002]                         }
[13:18:33.002]                         else {
[13:18:33.002]                           version <- NULL
[13:18:33.002]                         }
[13:18:33.002]                         if (!has_future || version < "1.8.0") {
[13:18:33.002]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:33.002]                             "", base::R.version$version.string), 
[13:18:33.002]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:33.002]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:33.002]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:33.002]                               "release", "version")], collapse = " "), 
[13:18:33.002]                             hostname = base::Sys.info()[["nodename"]])
[13:18:33.002]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:33.002]                             info)
[13:18:33.002]                           info <- base::paste(info, collapse = "; ")
[13:18:33.002]                           if (!has_future) {
[13:18:33.002]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:33.002]                               info)
[13:18:33.002]                           }
[13:18:33.002]                           else {
[13:18:33.002]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:33.002]                               info, version)
[13:18:33.002]                           }
[13:18:33.002]                           base::stop(msg)
[13:18:33.002]                         }
[13:18:33.002]                       })
[13:18:33.002]                     }
[13:18:33.002]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:33.002]                     base::options(mc.cores = 1L)
[13:18:33.002]                   }
[13:18:33.002]                   options(future.plan = NULL)
[13:18:33.002]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:33.002]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:33.002]                 }
[13:18:33.002]                 ...future.workdir <- getwd()
[13:18:33.002]             }
[13:18:33.002]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:33.002]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:33.002]         }
[13:18:33.002]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:33.002]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[13:18:33.002]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:33.002]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:33.002]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:33.002]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:33.002]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:33.002]             base::names(...future.oldOptions))
[13:18:33.002]     }
[13:18:33.002]     if (FALSE) {
[13:18:33.002]     }
[13:18:33.002]     else {
[13:18:33.002]         if (TRUE) {
[13:18:33.002]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:33.002]                 open = "w")
[13:18:33.002]         }
[13:18:33.002]         else {
[13:18:33.002]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:33.002]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:33.002]         }
[13:18:33.002]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:33.002]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:33.002]             base::sink(type = "output", split = FALSE)
[13:18:33.002]             base::close(...future.stdout)
[13:18:33.002]         }, add = TRUE)
[13:18:33.002]     }
[13:18:33.002]     ...future.frame <- base::sys.nframe()
[13:18:33.002]     ...future.conditions <- base::list()
[13:18:33.002]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:33.002]     if (FALSE) {
[13:18:33.002]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:33.002]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:33.002]     }
[13:18:33.002]     ...future.result <- base::tryCatch({
[13:18:33.002]         base::withCallingHandlers({
[13:18:33.002]             ...future.value <- base::withVisible(base::local({
[13:18:33.002]                 withCallingHandlers({
[13:18:33.002]                   {
[13:18:33.002]                     do.call(function(...) {
[13:18:33.002]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:33.002]                       if (!identical(...future.globals.maxSize.org, 
[13:18:33.002]                         ...future.globals.maxSize)) {
[13:18:33.002]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:33.002]                         on.exit(options(oopts), add = TRUE)
[13:18:33.002]                       }
[13:18:33.002]                       {
[13:18:33.002]                         lapply(seq_along(...future.elements_ii), 
[13:18:33.002]                           FUN = function(jj) {
[13:18:33.002]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:33.002]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:33.002]                               envir = globalenv(), inherits = FALSE)
[13:18:33.002]                             ...future.FUN(...future.X_jj, ...)
[13:18:33.002]                           })
[13:18:33.002]                       }
[13:18:33.002]                     }, args = future.call.arguments)
[13:18:33.002]                   }
[13:18:33.002]                 }, immediateCondition = function(cond) {
[13:18:33.002]                   save_rds <- function (object, pathname, ...) 
[13:18:33.002]                   {
[13:18:33.002]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:18:33.002]                     if (file_test("-f", pathname_tmp)) {
[13:18:33.002]                       fi_tmp <- file.info(pathname_tmp)
[13:18:33.002]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:18:33.002]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:33.002]                         fi_tmp[["mtime"]])
[13:18:33.002]                     }
[13:18:33.002]                     tryCatch({
[13:18:33.002]                       saveRDS(object, file = pathname_tmp, ...)
[13:18:33.002]                     }, error = function(ex) {
[13:18:33.002]                       msg <- conditionMessage(ex)
[13:18:33.002]                       fi_tmp <- file.info(pathname_tmp)
[13:18:33.002]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:18:33.002]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:33.002]                         fi_tmp[["mtime"]], msg)
[13:18:33.002]                       ex$message <- msg
[13:18:33.002]                       stop(ex)
[13:18:33.002]                     })
[13:18:33.002]                     stopifnot(file_test("-f", pathname_tmp))
[13:18:33.002]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:18:33.002]                     if (!res || file_test("-f", pathname_tmp)) {
[13:18:33.002]                       fi_tmp <- file.info(pathname_tmp)
[13:18:33.002]                       fi <- file.info(pathname)
[13:18:33.002]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:18:33.002]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:33.002]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:18:33.002]                         fi[["size"]], fi[["mtime"]])
[13:18:33.002]                       stop(msg)
[13:18:33.002]                     }
[13:18:33.002]                     invisible(pathname)
[13:18:33.002]                   }
[13:18:33.002]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:18:33.002]                     rootPath = tempdir()) 
[13:18:33.002]                   {
[13:18:33.002]                     obj <- list(time = Sys.time(), condition = cond)
[13:18:33.002]                     file <- tempfile(pattern = class(cond)[1], 
[13:18:33.002]                       tmpdir = path, fileext = ".rds")
[13:18:33.002]                     save_rds(obj, file)
[13:18:33.002]                   }
[13:18:33.002]                   saveImmediateCondition(cond, path = "/tmp/RtmpPPCpJF/.future/immediateConditions")
[13:18:33.002]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:33.002]                   {
[13:18:33.002]                     inherits <- base::inherits
[13:18:33.002]                     invokeRestart <- base::invokeRestart
[13:18:33.002]                     is.null <- base::is.null
[13:18:33.002]                     muffled <- FALSE
[13:18:33.002]                     if (inherits(cond, "message")) {
[13:18:33.002]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:33.002]                       if (muffled) 
[13:18:33.002]                         invokeRestart("muffleMessage")
[13:18:33.002]                     }
[13:18:33.002]                     else if (inherits(cond, "warning")) {
[13:18:33.002]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:33.002]                       if (muffled) 
[13:18:33.002]                         invokeRestart("muffleWarning")
[13:18:33.002]                     }
[13:18:33.002]                     else if (inherits(cond, "condition")) {
[13:18:33.002]                       if (!is.null(pattern)) {
[13:18:33.002]                         computeRestarts <- base::computeRestarts
[13:18:33.002]                         grepl <- base::grepl
[13:18:33.002]                         restarts <- computeRestarts(cond)
[13:18:33.002]                         for (restart in restarts) {
[13:18:33.002]                           name <- restart$name
[13:18:33.002]                           if (is.null(name)) 
[13:18:33.002]                             next
[13:18:33.002]                           if (!grepl(pattern, name)) 
[13:18:33.002]                             next
[13:18:33.002]                           invokeRestart(restart)
[13:18:33.002]                           muffled <- TRUE
[13:18:33.002]                           break
[13:18:33.002]                         }
[13:18:33.002]                       }
[13:18:33.002]                     }
[13:18:33.002]                     invisible(muffled)
[13:18:33.002]                   }
[13:18:33.002]                   muffleCondition(cond)
[13:18:33.002]                 })
[13:18:33.002]             }))
[13:18:33.002]             future::FutureResult(value = ...future.value$value, 
[13:18:33.002]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:33.002]                   ...future.rng), globalenv = if (FALSE) 
[13:18:33.002]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:33.002]                     ...future.globalenv.names))
[13:18:33.002]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:33.002]         }, condition = base::local({
[13:18:33.002]             c <- base::c
[13:18:33.002]             inherits <- base::inherits
[13:18:33.002]             invokeRestart <- base::invokeRestart
[13:18:33.002]             length <- base::length
[13:18:33.002]             list <- base::list
[13:18:33.002]             seq.int <- base::seq.int
[13:18:33.002]             signalCondition <- base::signalCondition
[13:18:33.002]             sys.calls <- base::sys.calls
[13:18:33.002]             `[[` <- base::`[[`
[13:18:33.002]             `+` <- base::`+`
[13:18:33.002]             `<<-` <- base::`<<-`
[13:18:33.002]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:33.002]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:33.002]                   3L)]
[13:18:33.002]             }
[13:18:33.002]             function(cond) {
[13:18:33.002]                 is_error <- inherits(cond, "error")
[13:18:33.002]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:33.002]                   NULL)
[13:18:33.002]                 if (is_error) {
[13:18:33.002]                   sessionInformation <- function() {
[13:18:33.002]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:33.002]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:33.002]                       search = base::search(), system = base::Sys.info())
[13:18:33.002]                   }
[13:18:33.002]                   ...future.conditions[[length(...future.conditions) + 
[13:18:33.002]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:33.002]                     cond$call), session = sessionInformation(), 
[13:18:33.002]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:33.002]                   signalCondition(cond)
[13:18:33.002]                 }
[13:18:33.002]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:33.002]                 "immediateCondition"))) {
[13:18:33.002]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:33.002]                   ...future.conditions[[length(...future.conditions) + 
[13:18:33.002]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:33.002]                   if (TRUE && !signal) {
[13:18:33.002]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:33.002]                     {
[13:18:33.002]                       inherits <- base::inherits
[13:18:33.002]                       invokeRestart <- base::invokeRestart
[13:18:33.002]                       is.null <- base::is.null
[13:18:33.002]                       muffled <- FALSE
[13:18:33.002]                       if (inherits(cond, "message")) {
[13:18:33.002]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:33.002]                         if (muffled) 
[13:18:33.002]                           invokeRestart("muffleMessage")
[13:18:33.002]                       }
[13:18:33.002]                       else if (inherits(cond, "warning")) {
[13:18:33.002]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:33.002]                         if (muffled) 
[13:18:33.002]                           invokeRestart("muffleWarning")
[13:18:33.002]                       }
[13:18:33.002]                       else if (inherits(cond, "condition")) {
[13:18:33.002]                         if (!is.null(pattern)) {
[13:18:33.002]                           computeRestarts <- base::computeRestarts
[13:18:33.002]                           grepl <- base::grepl
[13:18:33.002]                           restarts <- computeRestarts(cond)
[13:18:33.002]                           for (restart in restarts) {
[13:18:33.002]                             name <- restart$name
[13:18:33.002]                             if (is.null(name)) 
[13:18:33.002]                               next
[13:18:33.002]                             if (!grepl(pattern, name)) 
[13:18:33.002]                               next
[13:18:33.002]                             invokeRestart(restart)
[13:18:33.002]                             muffled <- TRUE
[13:18:33.002]                             break
[13:18:33.002]                           }
[13:18:33.002]                         }
[13:18:33.002]                       }
[13:18:33.002]                       invisible(muffled)
[13:18:33.002]                     }
[13:18:33.002]                     muffleCondition(cond, pattern = "^muffle")
[13:18:33.002]                   }
[13:18:33.002]                 }
[13:18:33.002]                 else {
[13:18:33.002]                   if (TRUE) {
[13:18:33.002]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:33.002]                     {
[13:18:33.002]                       inherits <- base::inherits
[13:18:33.002]                       invokeRestart <- base::invokeRestart
[13:18:33.002]                       is.null <- base::is.null
[13:18:33.002]                       muffled <- FALSE
[13:18:33.002]                       if (inherits(cond, "message")) {
[13:18:33.002]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:33.002]                         if (muffled) 
[13:18:33.002]                           invokeRestart("muffleMessage")
[13:18:33.002]                       }
[13:18:33.002]                       else if (inherits(cond, "warning")) {
[13:18:33.002]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:33.002]                         if (muffled) 
[13:18:33.002]                           invokeRestart("muffleWarning")
[13:18:33.002]                       }
[13:18:33.002]                       else if (inherits(cond, "condition")) {
[13:18:33.002]                         if (!is.null(pattern)) {
[13:18:33.002]                           computeRestarts <- base::computeRestarts
[13:18:33.002]                           grepl <- base::grepl
[13:18:33.002]                           restarts <- computeRestarts(cond)
[13:18:33.002]                           for (restart in restarts) {
[13:18:33.002]                             name <- restart$name
[13:18:33.002]                             if (is.null(name)) 
[13:18:33.002]                               next
[13:18:33.002]                             if (!grepl(pattern, name)) 
[13:18:33.002]                               next
[13:18:33.002]                             invokeRestart(restart)
[13:18:33.002]                             muffled <- TRUE
[13:18:33.002]                             break
[13:18:33.002]                           }
[13:18:33.002]                         }
[13:18:33.002]                       }
[13:18:33.002]                       invisible(muffled)
[13:18:33.002]                     }
[13:18:33.002]                     muffleCondition(cond, pattern = "^muffle")
[13:18:33.002]                   }
[13:18:33.002]                 }
[13:18:33.002]             }
[13:18:33.002]         }))
[13:18:33.002]     }, error = function(ex) {
[13:18:33.002]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:33.002]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:33.002]                 ...future.rng), started = ...future.startTime, 
[13:18:33.002]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:33.002]             version = "1.8"), class = "FutureResult")
[13:18:33.002]     }, finally = {
[13:18:33.002]         if (!identical(...future.workdir, getwd())) 
[13:18:33.002]             setwd(...future.workdir)
[13:18:33.002]         {
[13:18:33.002]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:33.002]                 ...future.oldOptions$nwarnings <- NULL
[13:18:33.002]             }
[13:18:33.002]             base::options(...future.oldOptions)
[13:18:33.002]             if (.Platform$OS.type == "windows") {
[13:18:33.002]                 old_names <- names(...future.oldEnvVars)
[13:18:33.002]                 envs <- base::Sys.getenv()
[13:18:33.002]                 names <- names(envs)
[13:18:33.002]                 common <- intersect(names, old_names)
[13:18:33.002]                 added <- setdiff(names, old_names)
[13:18:33.002]                 removed <- setdiff(old_names, names)
[13:18:33.002]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:33.002]                   envs[common]]
[13:18:33.002]                 NAMES <- toupper(changed)
[13:18:33.002]                 args <- list()
[13:18:33.002]                 for (kk in seq_along(NAMES)) {
[13:18:33.002]                   name <- changed[[kk]]
[13:18:33.002]                   NAME <- NAMES[[kk]]
[13:18:33.002]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:33.002]                     next
[13:18:33.002]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:33.002]                 }
[13:18:33.002]                 NAMES <- toupper(added)
[13:18:33.002]                 for (kk in seq_along(NAMES)) {
[13:18:33.002]                   name <- added[[kk]]
[13:18:33.002]                   NAME <- NAMES[[kk]]
[13:18:33.002]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:33.002]                     next
[13:18:33.002]                   args[[name]] <- ""
[13:18:33.002]                 }
[13:18:33.002]                 NAMES <- toupper(removed)
[13:18:33.002]                 for (kk in seq_along(NAMES)) {
[13:18:33.002]                   name <- removed[[kk]]
[13:18:33.002]                   NAME <- NAMES[[kk]]
[13:18:33.002]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:33.002]                     next
[13:18:33.002]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:33.002]                 }
[13:18:33.002]                 if (length(args) > 0) 
[13:18:33.002]                   base::do.call(base::Sys.setenv, args = args)
[13:18:33.002]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:33.002]             }
[13:18:33.002]             else {
[13:18:33.002]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:33.002]             }
[13:18:33.002]             {
[13:18:33.002]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:33.002]                   0L) {
[13:18:33.002]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:33.002]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:33.002]                   base::options(opts)
[13:18:33.002]                 }
[13:18:33.002]                 {
[13:18:33.002]                   {
[13:18:33.002]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:33.002]                     NULL
[13:18:33.002]                   }
[13:18:33.002]                   options(future.plan = NULL)
[13:18:33.002]                   if (is.na(NA_character_)) 
[13:18:33.002]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:33.002]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:33.002]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:18:33.002]                     envir = parent.frame()) 
[13:18:33.002]                   {
[13:18:33.002]                     default_workers <- missing(workers)
[13:18:33.002]                     if (is.function(workers)) 
[13:18:33.002]                       workers <- workers()
[13:18:33.002]                     workers <- structure(as.integer(workers), 
[13:18:33.002]                       class = class(workers))
[13:18:33.002]                     stop_if_not(is.finite(workers), workers >= 
[13:18:33.002]                       1L)
[13:18:33.002]                     if ((workers == 1L && !inherits(workers, 
[13:18:33.002]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:18:33.002]                       if (default_workers) 
[13:18:33.002]                         supportsMulticore(warn = TRUE)
[13:18:33.002]                       return(sequential(..., envir = envir))
[13:18:33.002]                     }
[13:18:33.002]                     oopts <- options(mc.cores = workers)
[13:18:33.002]                     on.exit(options(oopts))
[13:18:33.002]                     future <- MulticoreFuture(..., workers = workers, 
[13:18:33.002]                       envir = envir)
[13:18:33.002]                     if (!future$lazy) 
[13:18:33.002]                       future <- run(future)
[13:18:33.002]                     invisible(future)
[13:18:33.002]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:33.002]                 }
[13:18:33.002]             }
[13:18:33.002]         }
[13:18:33.002]     })
[13:18:33.002]     if (TRUE) {
[13:18:33.002]         base::sink(type = "output", split = FALSE)
[13:18:33.002]         if (TRUE) {
[13:18:33.002]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:33.002]         }
[13:18:33.002]         else {
[13:18:33.002]             ...future.result["stdout"] <- base::list(NULL)
[13:18:33.002]         }
[13:18:33.002]         base::close(...future.stdout)
[13:18:33.002]         ...future.stdout <- NULL
[13:18:33.002]     }
[13:18:33.002]     ...future.result$conditions <- ...future.conditions
[13:18:33.002]     ...future.result$finished <- base::Sys.time()
[13:18:33.002]     ...future.result
[13:18:33.002] }
[13:18:33.005] assign_globals() ...
[13:18:33.005] List of 5
[13:18:33.005]  $ ...future.FUN            :function (...)  
[13:18:33.005]  $ future.call.arguments    : list()
[13:18:33.005]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:33.005]  $ ...future.elements_ii    :List of 3
[13:18:33.005]   ..$ : int 0
[13:18:33.005]   ..$ : int 0
[13:18:33.005]   ..$ : int 0
[13:18:33.005]  $ ...future.seeds_ii       :List of 3
[13:18:33.005]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[13:18:33.005]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[13:18:33.005]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[13:18:33.005]  $ ...future.globals.maxSize: NULL
[13:18:33.005]  - attr(*, "resolved")= logi FALSE
[13:18:33.005]  - attr(*, "total_size")= num 616
[13:18:33.005]  - attr(*, "where")=List of 5
[13:18:33.005]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:18:33.005]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:18:33.005]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:18:33.005]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:18:33.005]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:18:33.005]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:33.005]  - attr(*, "already-done")= logi TRUE
[13:18:33.015] - reassign environment for ‘...future.FUN’
[13:18:33.015] - copied ‘...future.FUN’ to environment
[13:18:33.015] - copied ‘future.call.arguments’ to environment
[13:18:33.015] - copied ‘...future.elements_ii’ to environment
[13:18:33.015] - copied ‘...future.seeds_ii’ to environment
[13:18:33.015] - copied ‘...future.globals.maxSize’ to environment
[13:18:33.015] assign_globals() ... done
[13:18:33.016] requestCore(): workers = 2
[13:18:33.018] MulticoreFuture started
[13:18:33.018] - Launch lazy future ... done
[13:18:33.019] run() for ‘MulticoreFuture’ ... done
[13:18:33.019] Created future:
[13:18:33.019] plan(): Setting new future strategy stack:
[13:18:33.019] List of future strategies:
[13:18:33.019] 1. sequential:
[13:18:33.019]    - args: function (..., envir = parent.frame())
[13:18:33.019]    - tweaked: FALSE
[13:18:33.019]    - call: NULL
[13:18:33.020] plan(): nbrOfWorkers() = 1
[13:18:33.023] plan(): Setting new future strategy stack:
[13:18:33.023] List of future strategies:
[13:18:33.023] 1. multicore:
[13:18:33.023]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:18:33.023]    - tweaked: FALSE
[13:18:33.023]    - call: plan(strategy)
[13:18:33.028] plan(): nbrOfWorkers() = 2
[13:18:33.019] MulticoreFuture:
[13:18:33.019] Label: ‘future_replicate-2’
[13:18:33.019] Expression:
[13:18:33.019] {
[13:18:33.019]     do.call(function(...) {
[13:18:33.019]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:33.019]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:33.019]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:33.019]             on.exit(options(oopts), add = TRUE)
[13:18:33.019]         }
[13:18:33.019]         {
[13:18:33.019]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:33.019]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:33.019]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:33.019]                   envir = globalenv(), inherits = FALSE)
[13:18:33.019]                 ...future.FUN(...future.X_jj, ...)
[13:18:33.019]             })
[13:18:33.019]         }
[13:18:33.019]     }, args = future.call.arguments)
[13:18:33.019] }
[13:18:33.019] Lazy evaluation: FALSE
[13:18:33.019] Asynchronous evaluation: TRUE
[13:18:33.019] Local evaluation: TRUE
[13:18:33.019] Environment: R_GlobalEnv
[13:18:33.019] Capture standard output: TRUE
[13:18:33.019] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:33.019] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:33.019] Packages: <none>
[13:18:33.019] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:33.019] Resolved: TRUE
[13:18:33.019] Value: <not collected>
[13:18:33.019] Conditions captured: <none>
[13:18:33.019] Early signaling: FALSE
[13:18:33.019] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:33.019] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:33.029] Chunk #2 of 2 ... DONE
[13:18:33.030] Launching 2 futures (chunks) ... DONE
[13:18:33.030] Resolving 2 futures (chunks) ...
[13:18:33.030] resolve() on list ...
[13:18:33.030]  recursive: 0
[13:18:33.030]  length: 2
[13:18:33.030] 
[13:18:33.031] Future #1
[13:18:33.032] signalConditionsASAP(MulticoreFuture, pos=1) ...
[13:18:33.032] - nx: 2
[13:18:33.032] - relay: TRUE
[13:18:33.032] - stdout: TRUE
[13:18:33.032] - signal: TRUE
[13:18:33.033] - resignal: FALSE
[13:18:33.033] - force: TRUE
[13:18:33.033] - relayed: [n=2] FALSE, FALSE
[13:18:33.033] - queued futures: [n=2] FALSE, FALSE
[13:18:33.033]  - until=1
[13:18:33.033]  - relaying element #1
[13:18:33.034] - relayed: [n=2] TRUE, FALSE
[13:18:33.034] - queued futures: [n=2] TRUE, FALSE
[13:18:33.034] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[13:18:33.034]  length: 1 (resolved future 1)
[13:18:33.034] Future #2
[13:18:33.035] signalConditionsASAP(MulticoreFuture, pos=2) ...
[13:18:33.035] - nx: 2
[13:18:33.036] - relay: TRUE
[13:18:33.036] - stdout: TRUE
[13:18:33.036] - signal: TRUE
[13:18:33.036] - resignal: FALSE
[13:18:33.036] - force: TRUE
[13:18:33.036] - relayed: [n=2] TRUE, FALSE
[13:18:33.036] - queued futures: [n=2] TRUE, FALSE
[13:18:33.036]  - until=2
[13:18:33.037]  - relaying element #2
[13:18:33.037] - relayed: [n=2] TRUE, TRUE
[13:18:33.039] - queued futures: [n=2] TRUE, TRUE
[13:18:33.040] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[13:18:33.040]  length: 0 (resolved future 2)
[13:18:33.040] Relaying remaining futures
[13:18:33.040] signalConditionsASAP(NULL, pos=0) ...
[13:18:33.040] - nx: 2
[13:18:33.040] - relay: TRUE
[13:18:33.041] - stdout: TRUE
[13:18:33.041] - signal: TRUE
[13:18:33.041] - resignal: FALSE
[13:18:33.041] - force: TRUE
[13:18:33.041] - relayed: [n=2] TRUE, TRUE
[13:18:33.041] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:18:33.042] - relayed: [n=2] TRUE, TRUE
[13:18:33.042] - queued futures: [n=2] TRUE, TRUE
[13:18:33.042] signalConditionsASAP(NULL, pos=0) ... done
[13:18:33.042] resolve() on list ... DONE
[13:18:33.042]  - Number of value chunks collected: 2
[13:18:33.042] Resolving 2 futures (chunks) ... DONE
[13:18:33.043] Reducing values from 2 chunks ...
[13:18:33.043]  - Number of values collected after concatenation: 5
[13:18:33.043]  - Number of values expected: 5
[13:18:33.043] Reducing values from 2 chunks ... DONE
[13:18:33.043] future_lapply() ... DONE
- example(replicate) ...
[13:18:33.043] future_lapply() ...
[13:18:33.044] Generating random seeds ...
[13:18:33.044] Generating random seed streams for 5 elements ...
[13:18:33.045] Generating random seed streams for 5 elements ... DONE
[13:18:33.045] Generating random seeds ... DONE
[13:18:33.045] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:18:33.050] Number of chunks: 2
[13:18:33.050] getGlobalsAndPackagesXApply() ...
[13:18:33.050]  - future.globals: TRUE
[13:18:33.051] getGlobalsAndPackages() ...
[13:18:33.051] Searching for globals...
[13:18:33.053] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[13:18:33.053] Searching for globals ... DONE
[13:18:33.053] Resolving globals: FALSE
[13:18:33.054] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[13:18:33.054] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[13:18:33.054] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[13:18:33.054] 
[13:18:33.055] getGlobalsAndPackages() ... DONE
[13:18:33.055]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[13:18:33.055]  - needed namespaces: [n=0] 
[13:18:33.055] Finding globals ... DONE
[13:18:33.055]  - use_args: TRUE
[13:18:33.055]  - Getting '...' globals ...
[13:18:33.055] resolve() on list ...
[13:18:33.056]  recursive: 0
[13:18:33.056]  length: 1
[13:18:33.056]  elements: ‘...’
[13:18:33.056]  length: 0 (resolved future 1)
[13:18:33.056] resolve() on list ... DONE
[13:18:33.056]    - '...' content: [n=0] 
[13:18:33.056] List of 1
[13:18:33.056]  $ ...: list()
[13:18:33.056]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:33.056]  - attr(*, "where")=List of 1
[13:18:33.056]   ..$ ...:<environment: 0x55df1d643e68> 
[13:18:33.056]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:33.056]  - attr(*, "resolved")= logi TRUE
[13:18:33.056]  - attr(*, "total_size")= num NA
[13:18:33.059]  - Getting '...' globals ... DONE
[13:18:33.059] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[13:18:33.060] List of 4
[13:18:33.060]  $ ...future.FUN:function (...)  
[13:18:33.060]  $ foo          :function (x = 1, y = 2)  
[13:18:33.060]  $ x            : num 3
[13:18:33.060]  $ ...          : list()
[13:18:33.060]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:33.060]  - attr(*, "where")=List of 4
[13:18:33.060]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:18:33.060]   ..$ foo          :<environment: R_EmptyEnv> 
[13:18:33.060]   ..$ x            :<environment: R_EmptyEnv> 
[13:18:33.060]   ..$ ...          :<environment: 0x55df1d643e68> 
[13:18:33.060]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:33.060]  - attr(*, "resolved")= logi FALSE
[13:18:33.060]  - attr(*, "total_size")= num 2200
[13:18:33.063] Packages to be attached in all futures: [n=0] 
[13:18:33.064] getGlobalsAndPackagesXApply() ... DONE
[13:18:33.064] Number of futures (= number of chunks): 2
[13:18:33.064] Launching 2 futures (chunks) ...
[13:18:33.064] Chunk #1 of 2 ...
[13:18:33.064]  - Finding globals in 'X' for chunk #1 ...
[13:18:33.064] getGlobalsAndPackages() ...
[13:18:33.064] Searching for globals...
[13:18:33.065] 
[13:18:33.065] Searching for globals ... DONE
[13:18:33.065] - globals: [0] <none>
[13:18:33.065] getGlobalsAndPackages() ... DONE
[13:18:33.065]    + additional globals found: [n=0] 
[13:18:33.065]    + additional namespaces needed: [n=0] 
[13:18:33.065]  - Finding globals in 'X' for chunk #1 ... DONE
[13:18:33.065]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:18:33.065]  - seeds: [2] <seeds>
[13:18:33.066] getGlobalsAndPackages() ...
[13:18:33.066] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:33.066] Resolving globals: FALSE
[13:18:33.066] Tweak future expression to call with '...' arguments ...
[13:18:33.066] {
[13:18:33.066]     do.call(function(...) {
[13:18:33.066]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:33.066]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:33.066]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:33.066]             on.exit(options(oopts), add = TRUE)
[13:18:33.066]         }
[13:18:33.066]         {
[13:18:33.066]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:33.066]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:33.066]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:33.066]                   envir = globalenv(), inherits = FALSE)
[13:18:33.066]                 ...future.FUN(...future.X_jj, ...)
[13:18:33.066]             })
[13:18:33.066]         }
[13:18:33.066]     }, args = future.call.arguments)
[13:18:33.066] }
[13:18:33.066] Tweak future expression to call with '...' arguments ... DONE
[13:18:33.067] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:33.067] 
[13:18:33.067] getGlobalsAndPackages() ... DONE
[13:18:33.067] run() for ‘Future’ ...
[13:18:33.067] - state: ‘created’
[13:18:33.067] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:18:33.071] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:33.071] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:18:33.073]   - Field: ‘label’
[13:18:33.073]   - Field: ‘local’
[13:18:33.073]   - Field: ‘owner’
[13:18:33.073]   - Field: ‘envir’
[13:18:33.073]   - Field: ‘workers’
[13:18:33.074]   - Field: ‘packages’
[13:18:33.074]   - Field: ‘gc’
[13:18:33.074]   - Field: ‘job’
[13:18:33.074]   - Field: ‘conditions’
[13:18:33.074]   - Field: ‘expr’
[13:18:33.074]   - Field: ‘uuid’
[13:18:33.074]   - Field: ‘seed’
[13:18:33.074]   - Field: ‘version’
[13:18:33.074]   - Field: ‘result’
[13:18:33.075]   - Field: ‘asynchronous’
[13:18:33.075]   - Field: ‘calls’
[13:18:33.075]   - Field: ‘globals’
[13:18:33.075]   - Field: ‘stdout’
[13:18:33.075]   - Field: ‘earlySignal’
[13:18:33.075]   - Field: ‘lazy’
[13:18:33.075]   - Field: ‘state’
[13:18:33.075] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:18:33.075] - Launch lazy future ...
[13:18:33.076] Packages needed by the future expression (n = 0): <none>
[13:18:33.076] Packages needed by future strategies (n = 0): <none>
[13:18:33.076] {
[13:18:33.076]     {
[13:18:33.076]         {
[13:18:33.076]             ...future.startTime <- base::Sys.time()
[13:18:33.076]             {
[13:18:33.076]                 {
[13:18:33.076]                   {
[13:18:33.076]                     {
[13:18:33.076]                       base::local({
[13:18:33.076]                         has_future <- base::requireNamespace("future", 
[13:18:33.076]                           quietly = TRUE)
[13:18:33.076]                         if (has_future) {
[13:18:33.076]                           ns <- base::getNamespace("future")
[13:18:33.076]                           version <- ns[[".package"]][["version"]]
[13:18:33.076]                           if (is.null(version)) 
[13:18:33.076]                             version <- utils::packageVersion("future")
[13:18:33.076]                         }
[13:18:33.076]                         else {
[13:18:33.076]                           version <- NULL
[13:18:33.076]                         }
[13:18:33.076]                         if (!has_future || version < "1.8.0") {
[13:18:33.076]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:33.076]                             "", base::R.version$version.string), 
[13:18:33.076]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:33.076]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:33.076]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:33.076]                               "release", "version")], collapse = " "), 
[13:18:33.076]                             hostname = base::Sys.info()[["nodename"]])
[13:18:33.076]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:33.076]                             info)
[13:18:33.076]                           info <- base::paste(info, collapse = "; ")
[13:18:33.076]                           if (!has_future) {
[13:18:33.076]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:33.076]                               info)
[13:18:33.076]                           }
[13:18:33.076]                           else {
[13:18:33.076]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:33.076]                               info, version)
[13:18:33.076]                           }
[13:18:33.076]                           base::stop(msg)
[13:18:33.076]                         }
[13:18:33.076]                       })
[13:18:33.076]                     }
[13:18:33.076]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:33.076]                     base::options(mc.cores = 1L)
[13:18:33.076]                   }
[13:18:33.076]                   options(future.plan = NULL)
[13:18:33.076]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:33.076]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:33.076]                 }
[13:18:33.076]                 ...future.workdir <- getwd()
[13:18:33.076]             }
[13:18:33.076]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:33.076]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:33.076]         }
[13:18:33.076]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:33.076]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:18:33.076]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:33.076]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:33.076]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:33.076]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:33.076]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:33.076]             base::names(...future.oldOptions))
[13:18:33.076]     }
[13:18:33.076]     if (FALSE) {
[13:18:33.076]     }
[13:18:33.076]     else {
[13:18:33.076]         if (TRUE) {
[13:18:33.076]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:33.076]                 open = "w")
[13:18:33.076]         }
[13:18:33.076]         else {
[13:18:33.076]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:33.076]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:33.076]         }
[13:18:33.076]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:33.076]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:33.076]             base::sink(type = "output", split = FALSE)
[13:18:33.076]             base::close(...future.stdout)
[13:18:33.076]         }, add = TRUE)
[13:18:33.076]     }
[13:18:33.076]     ...future.frame <- base::sys.nframe()
[13:18:33.076]     ...future.conditions <- base::list()
[13:18:33.076]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:33.076]     if (FALSE) {
[13:18:33.076]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:33.076]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:33.076]     }
[13:18:33.076]     ...future.result <- base::tryCatch({
[13:18:33.076]         base::withCallingHandlers({
[13:18:33.076]             ...future.value <- base::withVisible(base::local({
[13:18:33.076]                 withCallingHandlers({
[13:18:33.076]                   {
[13:18:33.076]                     do.call(function(...) {
[13:18:33.076]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:33.076]                       if (!identical(...future.globals.maxSize.org, 
[13:18:33.076]                         ...future.globals.maxSize)) {
[13:18:33.076]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:33.076]                         on.exit(options(oopts), add = TRUE)
[13:18:33.076]                       }
[13:18:33.076]                       {
[13:18:33.076]                         lapply(seq_along(...future.elements_ii), 
[13:18:33.076]                           FUN = function(jj) {
[13:18:33.076]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:33.076]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:33.076]                               envir = globalenv(), inherits = FALSE)
[13:18:33.076]                             ...future.FUN(...future.X_jj, ...)
[13:18:33.076]                           })
[13:18:33.076]                       }
[13:18:33.076]                     }, args = future.call.arguments)
[13:18:33.076]                   }
[13:18:33.076]                 }, immediateCondition = function(cond) {
[13:18:33.076]                   save_rds <- function (object, pathname, ...) 
[13:18:33.076]                   {
[13:18:33.076]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:18:33.076]                     if (file_test("-f", pathname_tmp)) {
[13:18:33.076]                       fi_tmp <- file.info(pathname_tmp)
[13:18:33.076]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:18:33.076]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:33.076]                         fi_tmp[["mtime"]])
[13:18:33.076]                     }
[13:18:33.076]                     tryCatch({
[13:18:33.076]                       saveRDS(object, file = pathname_tmp, ...)
[13:18:33.076]                     }, error = function(ex) {
[13:18:33.076]                       msg <- conditionMessage(ex)
[13:18:33.076]                       fi_tmp <- file.info(pathname_tmp)
[13:18:33.076]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:18:33.076]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:33.076]                         fi_tmp[["mtime"]], msg)
[13:18:33.076]                       ex$message <- msg
[13:18:33.076]                       stop(ex)
[13:18:33.076]                     })
[13:18:33.076]                     stopifnot(file_test("-f", pathname_tmp))
[13:18:33.076]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:18:33.076]                     if (!res || file_test("-f", pathname_tmp)) {
[13:18:33.076]                       fi_tmp <- file.info(pathname_tmp)
[13:18:33.076]                       fi <- file.info(pathname)
[13:18:33.076]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:18:33.076]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:33.076]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:18:33.076]                         fi[["size"]], fi[["mtime"]])
[13:18:33.076]                       stop(msg)
[13:18:33.076]                     }
[13:18:33.076]                     invisible(pathname)
[13:18:33.076]                   }
[13:18:33.076]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:18:33.076]                     rootPath = tempdir()) 
[13:18:33.076]                   {
[13:18:33.076]                     obj <- list(time = Sys.time(), condition = cond)
[13:18:33.076]                     file <- tempfile(pattern = class(cond)[1], 
[13:18:33.076]                       tmpdir = path, fileext = ".rds")
[13:18:33.076]                     save_rds(obj, file)
[13:18:33.076]                   }
[13:18:33.076]                   saveImmediateCondition(cond, path = "/tmp/RtmpPPCpJF/.future/immediateConditions")
[13:18:33.076]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:33.076]                   {
[13:18:33.076]                     inherits <- base::inherits
[13:18:33.076]                     invokeRestart <- base::invokeRestart
[13:18:33.076]                     is.null <- base::is.null
[13:18:33.076]                     muffled <- FALSE
[13:18:33.076]                     if (inherits(cond, "message")) {
[13:18:33.076]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:33.076]                       if (muffled) 
[13:18:33.076]                         invokeRestart("muffleMessage")
[13:18:33.076]                     }
[13:18:33.076]                     else if (inherits(cond, "warning")) {
[13:18:33.076]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:33.076]                       if (muffled) 
[13:18:33.076]                         invokeRestart("muffleWarning")
[13:18:33.076]                     }
[13:18:33.076]                     else if (inherits(cond, "condition")) {
[13:18:33.076]                       if (!is.null(pattern)) {
[13:18:33.076]                         computeRestarts <- base::computeRestarts
[13:18:33.076]                         grepl <- base::grepl
[13:18:33.076]                         restarts <- computeRestarts(cond)
[13:18:33.076]                         for (restart in restarts) {
[13:18:33.076]                           name <- restart$name
[13:18:33.076]                           if (is.null(name)) 
[13:18:33.076]                             next
[13:18:33.076]                           if (!grepl(pattern, name)) 
[13:18:33.076]                             next
[13:18:33.076]                           invokeRestart(restart)
[13:18:33.076]                           muffled <- TRUE
[13:18:33.076]                           break
[13:18:33.076]                         }
[13:18:33.076]                       }
[13:18:33.076]                     }
[13:18:33.076]                     invisible(muffled)
[13:18:33.076]                   }
[13:18:33.076]                   muffleCondition(cond)
[13:18:33.076]                 })
[13:18:33.076]             }))
[13:18:33.076]             future::FutureResult(value = ...future.value$value, 
[13:18:33.076]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:33.076]                   ...future.rng), globalenv = if (FALSE) 
[13:18:33.076]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:33.076]                     ...future.globalenv.names))
[13:18:33.076]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:33.076]         }, condition = base::local({
[13:18:33.076]             c <- base::c
[13:18:33.076]             inherits <- base::inherits
[13:18:33.076]             invokeRestart <- base::invokeRestart
[13:18:33.076]             length <- base::length
[13:18:33.076]             list <- base::list
[13:18:33.076]             seq.int <- base::seq.int
[13:18:33.076]             signalCondition <- base::signalCondition
[13:18:33.076]             sys.calls <- base::sys.calls
[13:18:33.076]             `[[` <- base::`[[`
[13:18:33.076]             `+` <- base::`+`
[13:18:33.076]             `<<-` <- base::`<<-`
[13:18:33.076]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:33.076]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:33.076]                   3L)]
[13:18:33.076]             }
[13:18:33.076]             function(cond) {
[13:18:33.076]                 is_error <- inherits(cond, "error")
[13:18:33.076]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:33.076]                   NULL)
[13:18:33.076]                 if (is_error) {
[13:18:33.076]                   sessionInformation <- function() {
[13:18:33.076]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:33.076]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:33.076]                       search = base::search(), system = base::Sys.info())
[13:18:33.076]                   }
[13:18:33.076]                   ...future.conditions[[length(...future.conditions) + 
[13:18:33.076]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:33.076]                     cond$call), session = sessionInformation(), 
[13:18:33.076]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:33.076]                   signalCondition(cond)
[13:18:33.076]                 }
[13:18:33.076]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:33.076]                 "immediateCondition"))) {
[13:18:33.076]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:33.076]                   ...future.conditions[[length(...future.conditions) + 
[13:18:33.076]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:33.076]                   if (TRUE && !signal) {
[13:18:33.076]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:33.076]                     {
[13:18:33.076]                       inherits <- base::inherits
[13:18:33.076]                       invokeRestart <- base::invokeRestart
[13:18:33.076]                       is.null <- base::is.null
[13:18:33.076]                       muffled <- FALSE
[13:18:33.076]                       if (inherits(cond, "message")) {
[13:18:33.076]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:33.076]                         if (muffled) 
[13:18:33.076]                           invokeRestart("muffleMessage")
[13:18:33.076]                       }
[13:18:33.076]                       else if (inherits(cond, "warning")) {
[13:18:33.076]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:33.076]                         if (muffled) 
[13:18:33.076]                           invokeRestart("muffleWarning")
[13:18:33.076]                       }
[13:18:33.076]                       else if (inherits(cond, "condition")) {
[13:18:33.076]                         if (!is.null(pattern)) {
[13:18:33.076]                           computeRestarts <- base::computeRestarts
[13:18:33.076]                           grepl <- base::grepl
[13:18:33.076]                           restarts <- computeRestarts(cond)
[13:18:33.076]                           for (restart in restarts) {
[13:18:33.076]                             name <- restart$name
[13:18:33.076]                             if (is.null(name)) 
[13:18:33.076]                               next
[13:18:33.076]                             if (!grepl(pattern, name)) 
[13:18:33.076]                               next
[13:18:33.076]                             invokeRestart(restart)
[13:18:33.076]                             muffled <- TRUE
[13:18:33.076]                             break
[13:18:33.076]                           }
[13:18:33.076]                         }
[13:18:33.076]                       }
[13:18:33.076]                       invisible(muffled)
[13:18:33.076]                     }
[13:18:33.076]                     muffleCondition(cond, pattern = "^muffle")
[13:18:33.076]                   }
[13:18:33.076]                 }
[13:18:33.076]                 else {
[13:18:33.076]                   if (TRUE) {
[13:18:33.076]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:33.076]                     {
[13:18:33.076]                       inherits <- base::inherits
[13:18:33.076]                       invokeRestart <- base::invokeRestart
[13:18:33.076]                       is.null <- base::is.null
[13:18:33.076]                       muffled <- FALSE
[13:18:33.076]                       if (inherits(cond, "message")) {
[13:18:33.076]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:33.076]                         if (muffled) 
[13:18:33.076]                           invokeRestart("muffleMessage")
[13:18:33.076]                       }
[13:18:33.076]                       else if (inherits(cond, "warning")) {
[13:18:33.076]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:33.076]                         if (muffled) 
[13:18:33.076]                           invokeRestart("muffleWarning")
[13:18:33.076]                       }
[13:18:33.076]                       else if (inherits(cond, "condition")) {
[13:18:33.076]                         if (!is.null(pattern)) {
[13:18:33.076]                           computeRestarts <- base::computeRestarts
[13:18:33.076]                           grepl <- base::grepl
[13:18:33.076]                           restarts <- computeRestarts(cond)
[13:18:33.076]                           for (restart in restarts) {
[13:18:33.076]                             name <- restart$name
[13:18:33.076]                             if (is.null(name)) 
[13:18:33.076]                               next
[13:18:33.076]                             if (!grepl(pattern, name)) 
[13:18:33.076]                               next
[13:18:33.076]                             invokeRestart(restart)
[13:18:33.076]                             muffled <- TRUE
[13:18:33.076]                             break
[13:18:33.076]                           }
[13:18:33.076]                         }
[13:18:33.076]                       }
[13:18:33.076]                       invisible(muffled)
[13:18:33.076]                     }
[13:18:33.076]                     muffleCondition(cond, pattern = "^muffle")
[13:18:33.076]                   }
[13:18:33.076]                 }
[13:18:33.076]             }
[13:18:33.076]         }))
[13:18:33.076]     }, error = function(ex) {
[13:18:33.076]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:33.076]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:33.076]                 ...future.rng), started = ...future.startTime, 
[13:18:33.076]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:33.076]             version = "1.8"), class = "FutureResult")
[13:18:33.076]     }, finally = {
[13:18:33.076]         if (!identical(...future.workdir, getwd())) 
[13:18:33.076]             setwd(...future.workdir)
[13:18:33.076]         {
[13:18:33.076]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:33.076]                 ...future.oldOptions$nwarnings <- NULL
[13:18:33.076]             }
[13:18:33.076]             base::options(...future.oldOptions)
[13:18:33.076]             if (.Platform$OS.type == "windows") {
[13:18:33.076]                 old_names <- names(...future.oldEnvVars)
[13:18:33.076]                 envs <- base::Sys.getenv()
[13:18:33.076]                 names <- names(envs)
[13:18:33.076]                 common <- intersect(names, old_names)
[13:18:33.076]                 added <- setdiff(names, old_names)
[13:18:33.076]                 removed <- setdiff(old_names, names)
[13:18:33.076]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:33.076]                   envs[common]]
[13:18:33.076]                 NAMES <- toupper(changed)
[13:18:33.076]                 args <- list()
[13:18:33.076]                 for (kk in seq_along(NAMES)) {
[13:18:33.076]                   name <- changed[[kk]]
[13:18:33.076]                   NAME <- NAMES[[kk]]
[13:18:33.076]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:33.076]                     next
[13:18:33.076]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:33.076]                 }
[13:18:33.076]                 NAMES <- toupper(added)
[13:18:33.076]                 for (kk in seq_along(NAMES)) {
[13:18:33.076]                   name <- added[[kk]]
[13:18:33.076]                   NAME <- NAMES[[kk]]
[13:18:33.076]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:33.076]                     next
[13:18:33.076]                   args[[name]] <- ""
[13:18:33.076]                 }
[13:18:33.076]                 NAMES <- toupper(removed)
[13:18:33.076]                 for (kk in seq_along(NAMES)) {
[13:18:33.076]                   name <- removed[[kk]]
[13:18:33.076]                   NAME <- NAMES[[kk]]
[13:18:33.076]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:33.076]                     next
[13:18:33.076]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:33.076]                 }
[13:18:33.076]                 if (length(args) > 0) 
[13:18:33.076]                   base::do.call(base::Sys.setenv, args = args)
[13:18:33.076]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:33.076]             }
[13:18:33.076]             else {
[13:18:33.076]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:33.076]             }
[13:18:33.076]             {
[13:18:33.076]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:33.076]                   0L) {
[13:18:33.076]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:33.076]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:33.076]                   base::options(opts)
[13:18:33.076]                 }
[13:18:33.076]                 {
[13:18:33.076]                   {
[13:18:33.076]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:33.076]                     NULL
[13:18:33.076]                   }
[13:18:33.076]                   options(future.plan = NULL)
[13:18:33.076]                   if (is.na(NA_character_)) 
[13:18:33.076]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:33.076]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:33.076]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:18:33.076]                     envir = parent.frame()) 
[13:18:33.076]                   {
[13:18:33.076]                     default_workers <- missing(workers)
[13:18:33.076]                     if (is.function(workers)) 
[13:18:33.076]                       workers <- workers()
[13:18:33.076]                     workers <- structure(as.integer(workers), 
[13:18:33.076]                       class = class(workers))
[13:18:33.076]                     stop_if_not(is.finite(workers), workers >= 
[13:18:33.076]                       1L)
[13:18:33.076]                     if ((workers == 1L && !inherits(workers, 
[13:18:33.076]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:18:33.076]                       if (default_workers) 
[13:18:33.076]                         supportsMulticore(warn = TRUE)
[13:18:33.076]                       return(sequential(..., envir = envir))
[13:18:33.076]                     }
[13:18:33.076]                     oopts <- options(mc.cores = workers)
[13:18:33.076]                     on.exit(options(oopts))
[13:18:33.076]                     future <- MulticoreFuture(..., workers = workers, 
[13:18:33.076]                       envir = envir)
[13:18:33.076]                     if (!future$lazy) 
[13:18:33.076]                       future <- run(future)
[13:18:33.076]                     invisible(future)
[13:18:33.076]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:33.076]                 }
[13:18:33.076]             }
[13:18:33.076]         }
[13:18:33.076]     })
[13:18:33.076]     if (TRUE) {
[13:18:33.076]         base::sink(type = "output", split = FALSE)
[13:18:33.076]         if (TRUE) {
[13:18:33.076]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:33.076]         }
[13:18:33.076]         else {
[13:18:33.076]             ...future.result["stdout"] <- base::list(NULL)
[13:18:33.076]         }
[13:18:33.076]         base::close(...future.stdout)
[13:18:33.076]         ...future.stdout <- NULL
[13:18:33.076]     }
[13:18:33.076]     ...future.result$conditions <- ...future.conditions
[13:18:33.076]     ...future.result$finished <- base::Sys.time()
[13:18:33.076]     ...future.result
[13:18:33.076] }
[13:18:33.079] assign_globals() ...
[13:18:33.079] List of 7
[13:18:33.079]  $ ...future.FUN            :function (...)  
[13:18:33.079]  $ foo                      :function (x = 1, y = 2)  
[13:18:33.079]  $ x                        : num 3
[13:18:33.079]  $ future.call.arguments    : list()
[13:18:33.079]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:33.079]  $ ...future.elements_ii    :List of 2
[13:18:33.079]   ..$ : int 0
[13:18:33.079]   ..$ : int 0
[13:18:33.079]  $ ...future.seeds_ii       :List of 2
[13:18:33.079]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[13:18:33.079]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[13:18:33.079]  $ ...future.globals.maxSize: NULL
[13:18:33.079]  - attr(*, "resolved")= logi FALSE
[13:18:33.079]  - attr(*, "total_size")= num 2200
[13:18:33.079]  - attr(*, "where")=List of 7
[13:18:33.079]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:18:33.079]   ..$ foo                      :<environment: R_EmptyEnv> 
[13:18:33.079]   ..$ x                        :<environment: R_EmptyEnv> 
[13:18:33.079]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:18:33.079]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:18:33.079]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:18:33.079]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:18:33.079]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:33.079]  - attr(*, "already-done")= logi TRUE
[13:18:33.085] - reassign environment for ‘...future.FUN’
[13:18:33.085] - copied ‘...future.FUN’ to environment
[13:18:33.086] - reassign environment for ‘foo’
[13:18:33.086] - copied ‘foo’ to environment
[13:18:33.086] - copied ‘x’ to environment
[13:18:33.086] - copied ‘future.call.arguments’ to environment
[13:18:33.086] - copied ‘...future.elements_ii’ to environment
[13:18:33.086] - copied ‘...future.seeds_ii’ to environment
[13:18:33.086] - copied ‘...future.globals.maxSize’ to environment
[13:18:33.086] assign_globals() ... done
[13:18:33.086] requestCore(): workers = 2
[13:18:33.089] MulticoreFuture started
[13:18:33.089] - Launch lazy future ... done
[13:18:33.089] run() for ‘MulticoreFuture’ ... done
[13:18:33.090] Created future:
[13:18:33.090] plan(): Setting new future strategy stack:
[13:18:33.090] List of future strategies:
[13:18:33.090] 1. sequential:
[13:18:33.090]    - args: function (..., envir = parent.frame())
[13:18:33.090]    - tweaked: FALSE
[13:18:33.090]    - call: NULL
[13:18:33.091] plan(): nbrOfWorkers() = 1
[13:18:33.093] plan(): Setting new future strategy stack:
[13:18:33.093] List of future strategies:
[13:18:33.093] 1. multicore:
[13:18:33.093]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:18:33.093]    - tweaked: FALSE
[13:18:33.093]    - call: plan(strategy)
[13:18:33.099] plan(): nbrOfWorkers() = 2
[13:18:33.090] MulticoreFuture:
[13:18:33.090] Label: ‘future_replicate-1’
[13:18:33.090] Expression:
[13:18:33.090] {
[13:18:33.090]     do.call(function(...) {
[13:18:33.090]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:33.090]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:33.090]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:33.090]             on.exit(options(oopts), add = TRUE)
[13:18:33.090]         }
[13:18:33.090]         {
[13:18:33.090]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:33.090]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:33.090]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:33.090]                   envir = globalenv(), inherits = FALSE)
[13:18:33.090]                 ...future.FUN(...future.X_jj, ...)
[13:18:33.090]             })
[13:18:33.090]         }
[13:18:33.090]     }, args = future.call.arguments)
[13:18:33.090] }
[13:18:33.090] Lazy evaluation: FALSE
[13:18:33.090] Asynchronous evaluation: TRUE
[13:18:33.090] Local evaluation: TRUE
[13:18:33.090] Environment: 0x55df1d66e088
[13:18:33.090] Capture standard output: TRUE
[13:18:33.090] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:33.090] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[13:18:33.090] Packages: <none>
[13:18:33.090] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:33.090] Resolved: TRUE
[13:18:33.090] Value: <not collected>
[13:18:33.090] Conditions captured: <none>
[13:18:33.090] Early signaling: FALSE
[13:18:33.090] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:33.090] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:33.100] Chunk #1 of 2 ... DONE
[13:18:33.100] Chunk #2 of 2 ...
[13:18:33.100]  - Finding globals in 'X' for chunk #2 ...
[13:18:33.101] getGlobalsAndPackages() ...
[13:18:33.101] Searching for globals...
[13:18:33.101] 
[13:18:33.101] Searching for globals ... DONE
[13:18:33.101] - globals: [0] <none>
[13:18:33.102] getGlobalsAndPackages() ... DONE
[13:18:33.102]    + additional globals found: [n=0] 
[13:18:33.102]    + additional namespaces needed: [n=0] 
[13:18:33.102]  - Finding globals in 'X' for chunk #2 ... DONE
[13:18:33.102]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[13:18:33.102]  - seeds: [3] <seeds>
[13:18:33.103] getGlobalsAndPackages() ...
[13:18:33.103] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:33.103] Resolving globals: FALSE
[13:18:33.103] Tweak future expression to call with '...' arguments ...
[13:18:33.103] {
[13:18:33.103]     do.call(function(...) {
[13:18:33.103]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:33.103]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:33.103]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:33.103]             on.exit(options(oopts), add = TRUE)
[13:18:33.103]         }
[13:18:33.103]         {
[13:18:33.103]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:33.103]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:33.103]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:33.103]                   envir = globalenv(), inherits = FALSE)
[13:18:33.103]                 ...future.FUN(...future.X_jj, ...)
[13:18:33.103]             })
[13:18:33.103]         }
[13:18:33.103]     }, args = future.call.arguments)
[13:18:33.103] }
[13:18:33.104] Tweak future expression to call with '...' arguments ... DONE
[13:18:33.104] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:33.105] 
[13:18:33.105] getGlobalsAndPackages() ... DONE
[13:18:33.105] run() for ‘Future’ ...
[13:18:33.105] - state: ‘created’
[13:18:33.106] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:18:33.110] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:33.110] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:18:33.111]   - Field: ‘label’
[13:18:33.111]   - Field: ‘local’
[13:18:33.111]   - Field: ‘owner’
[13:18:33.111]   - Field: ‘envir’
[13:18:33.111]   - Field: ‘workers’
[13:18:33.112]   - Field: ‘packages’
[13:18:33.112]   - Field: ‘gc’
[13:18:33.112]   - Field: ‘job’
[13:18:33.112]   - Field: ‘conditions’
[13:18:33.112]   - Field: ‘expr’
[13:18:33.112]   - Field: ‘uuid’
[13:18:33.112]   - Field: ‘seed’
[13:18:33.113]   - Field: ‘version’
[13:18:33.113]   - Field: ‘result’
[13:18:33.113]   - Field: ‘asynchronous’
[13:18:33.113]   - Field: ‘calls’
[13:18:33.113]   - Field: ‘globals’
[13:18:33.113]   - Field: ‘stdout’
[13:18:33.113]   - Field: ‘earlySignal’
[13:18:33.114]   - Field: ‘lazy’
[13:18:33.114]   - Field: ‘state’
[13:18:33.114] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:18:33.114] - Launch lazy future ...
[13:18:33.114] Packages needed by the future expression (n = 0): <none>
[13:18:33.115] Packages needed by future strategies (n = 0): <none>
[13:18:33.115] {
[13:18:33.115]     {
[13:18:33.115]         {
[13:18:33.115]             ...future.startTime <- base::Sys.time()
[13:18:33.115]             {
[13:18:33.115]                 {
[13:18:33.115]                   {
[13:18:33.115]                     {
[13:18:33.115]                       base::local({
[13:18:33.115]                         has_future <- base::requireNamespace("future", 
[13:18:33.115]                           quietly = TRUE)
[13:18:33.115]                         if (has_future) {
[13:18:33.115]                           ns <- base::getNamespace("future")
[13:18:33.115]                           version <- ns[[".package"]][["version"]]
[13:18:33.115]                           if (is.null(version)) 
[13:18:33.115]                             version <- utils::packageVersion("future")
[13:18:33.115]                         }
[13:18:33.115]                         else {
[13:18:33.115]                           version <- NULL
[13:18:33.115]                         }
[13:18:33.115]                         if (!has_future || version < "1.8.0") {
[13:18:33.115]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:33.115]                             "", base::R.version$version.string), 
[13:18:33.115]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:33.115]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:33.115]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:33.115]                               "release", "version")], collapse = " "), 
[13:18:33.115]                             hostname = base::Sys.info()[["nodename"]])
[13:18:33.115]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:33.115]                             info)
[13:18:33.115]                           info <- base::paste(info, collapse = "; ")
[13:18:33.115]                           if (!has_future) {
[13:18:33.115]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:33.115]                               info)
[13:18:33.115]                           }
[13:18:33.115]                           else {
[13:18:33.115]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:33.115]                               info, version)
[13:18:33.115]                           }
[13:18:33.115]                           base::stop(msg)
[13:18:33.115]                         }
[13:18:33.115]                       })
[13:18:33.115]                     }
[13:18:33.115]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:33.115]                     base::options(mc.cores = 1L)
[13:18:33.115]                   }
[13:18:33.115]                   options(future.plan = NULL)
[13:18:33.115]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:33.115]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:33.115]                 }
[13:18:33.115]                 ...future.workdir <- getwd()
[13:18:33.115]             }
[13:18:33.115]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:33.115]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:33.115]         }
[13:18:33.115]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:33.115]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[13:18:33.115]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:33.115]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:33.115]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:33.115]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:33.115]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:33.115]             base::names(...future.oldOptions))
[13:18:33.115]     }
[13:18:33.115]     if (FALSE) {
[13:18:33.115]     }
[13:18:33.115]     else {
[13:18:33.115]         if (TRUE) {
[13:18:33.115]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:33.115]                 open = "w")
[13:18:33.115]         }
[13:18:33.115]         else {
[13:18:33.115]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:33.115]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:33.115]         }
[13:18:33.115]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:33.115]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:33.115]             base::sink(type = "output", split = FALSE)
[13:18:33.115]             base::close(...future.stdout)
[13:18:33.115]         }, add = TRUE)
[13:18:33.115]     }
[13:18:33.115]     ...future.frame <- base::sys.nframe()
[13:18:33.115]     ...future.conditions <- base::list()
[13:18:33.115]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:33.115]     if (FALSE) {
[13:18:33.115]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:33.115]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:33.115]     }
[13:18:33.115]     ...future.result <- base::tryCatch({
[13:18:33.115]         base::withCallingHandlers({
[13:18:33.115]             ...future.value <- base::withVisible(base::local({
[13:18:33.115]                 withCallingHandlers({
[13:18:33.115]                   {
[13:18:33.115]                     do.call(function(...) {
[13:18:33.115]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:33.115]                       if (!identical(...future.globals.maxSize.org, 
[13:18:33.115]                         ...future.globals.maxSize)) {
[13:18:33.115]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:33.115]                         on.exit(options(oopts), add = TRUE)
[13:18:33.115]                       }
[13:18:33.115]                       {
[13:18:33.115]                         lapply(seq_along(...future.elements_ii), 
[13:18:33.115]                           FUN = function(jj) {
[13:18:33.115]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:33.115]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:33.115]                               envir = globalenv(), inherits = FALSE)
[13:18:33.115]                             ...future.FUN(...future.X_jj, ...)
[13:18:33.115]                           })
[13:18:33.115]                       }
[13:18:33.115]                     }, args = future.call.arguments)
[13:18:33.115]                   }
[13:18:33.115]                 }, immediateCondition = function(cond) {
[13:18:33.115]                   save_rds <- function (object, pathname, ...) 
[13:18:33.115]                   {
[13:18:33.115]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:18:33.115]                     if (file_test("-f", pathname_tmp)) {
[13:18:33.115]                       fi_tmp <- file.info(pathname_tmp)
[13:18:33.115]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:18:33.115]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:33.115]                         fi_tmp[["mtime"]])
[13:18:33.115]                     }
[13:18:33.115]                     tryCatch({
[13:18:33.115]                       saveRDS(object, file = pathname_tmp, ...)
[13:18:33.115]                     }, error = function(ex) {
[13:18:33.115]                       msg <- conditionMessage(ex)
[13:18:33.115]                       fi_tmp <- file.info(pathname_tmp)
[13:18:33.115]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:18:33.115]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:33.115]                         fi_tmp[["mtime"]], msg)
[13:18:33.115]                       ex$message <- msg
[13:18:33.115]                       stop(ex)
[13:18:33.115]                     })
[13:18:33.115]                     stopifnot(file_test("-f", pathname_tmp))
[13:18:33.115]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:18:33.115]                     if (!res || file_test("-f", pathname_tmp)) {
[13:18:33.115]                       fi_tmp <- file.info(pathname_tmp)
[13:18:33.115]                       fi <- file.info(pathname)
[13:18:33.115]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:18:33.115]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:18:33.115]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:18:33.115]                         fi[["size"]], fi[["mtime"]])
[13:18:33.115]                       stop(msg)
[13:18:33.115]                     }
[13:18:33.115]                     invisible(pathname)
[13:18:33.115]                   }
[13:18:33.115]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:18:33.115]                     rootPath = tempdir()) 
[13:18:33.115]                   {
[13:18:33.115]                     obj <- list(time = Sys.time(), condition = cond)
[13:18:33.115]                     file <- tempfile(pattern = class(cond)[1], 
[13:18:33.115]                       tmpdir = path, fileext = ".rds")
[13:18:33.115]                     save_rds(obj, file)
[13:18:33.115]                   }
[13:18:33.115]                   saveImmediateCondition(cond, path = "/tmp/RtmpPPCpJF/.future/immediateConditions")
[13:18:33.115]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:33.115]                   {
[13:18:33.115]                     inherits <- base::inherits
[13:18:33.115]                     invokeRestart <- base::invokeRestart
[13:18:33.115]                     is.null <- base::is.null
[13:18:33.115]                     muffled <- FALSE
[13:18:33.115]                     if (inherits(cond, "message")) {
[13:18:33.115]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:33.115]                       if (muffled) 
[13:18:33.115]                         invokeRestart("muffleMessage")
[13:18:33.115]                     }
[13:18:33.115]                     else if (inherits(cond, "warning")) {
[13:18:33.115]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:33.115]                       if (muffled) 
[13:18:33.115]                         invokeRestart("muffleWarning")
[13:18:33.115]                     }
[13:18:33.115]                     else if (inherits(cond, "condition")) {
[13:18:33.115]                       if (!is.null(pattern)) {
[13:18:33.115]                         computeRestarts <- base::computeRestarts
[13:18:33.115]                         grepl <- base::grepl
[13:18:33.115]                         restarts <- computeRestarts(cond)
[13:18:33.115]                         for (restart in restarts) {
[13:18:33.115]                           name <- restart$name
[13:18:33.115]                           if (is.null(name)) 
[13:18:33.115]                             next
[13:18:33.115]                           if (!grepl(pattern, name)) 
[13:18:33.115]                             next
[13:18:33.115]                           invokeRestart(restart)
[13:18:33.115]                           muffled <- TRUE
[13:18:33.115]                           break
[13:18:33.115]                         }
[13:18:33.115]                       }
[13:18:33.115]                     }
[13:18:33.115]                     invisible(muffled)
[13:18:33.115]                   }
[13:18:33.115]                   muffleCondition(cond)
[13:18:33.115]                 })
[13:18:33.115]             }))
[13:18:33.115]             future::FutureResult(value = ...future.value$value, 
[13:18:33.115]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:33.115]                   ...future.rng), globalenv = if (FALSE) 
[13:18:33.115]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:33.115]                     ...future.globalenv.names))
[13:18:33.115]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:33.115]         }, condition = base::local({
[13:18:33.115]             c <- base::c
[13:18:33.115]             inherits <- base::inherits
[13:18:33.115]             invokeRestart <- base::invokeRestart
[13:18:33.115]             length <- base::length
[13:18:33.115]             list <- base::list
[13:18:33.115]             seq.int <- base::seq.int
[13:18:33.115]             signalCondition <- base::signalCondition
[13:18:33.115]             sys.calls <- base::sys.calls
[13:18:33.115]             `[[` <- base::`[[`
[13:18:33.115]             `+` <- base::`+`
[13:18:33.115]             `<<-` <- base::`<<-`
[13:18:33.115]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:33.115]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:33.115]                   3L)]
[13:18:33.115]             }
[13:18:33.115]             function(cond) {
[13:18:33.115]                 is_error <- inherits(cond, "error")
[13:18:33.115]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:33.115]                   NULL)
[13:18:33.115]                 if (is_error) {
[13:18:33.115]                   sessionInformation <- function() {
[13:18:33.115]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:33.115]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:33.115]                       search = base::search(), system = base::Sys.info())
[13:18:33.115]                   }
[13:18:33.115]                   ...future.conditions[[length(...future.conditions) + 
[13:18:33.115]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:33.115]                     cond$call), session = sessionInformation(), 
[13:18:33.115]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:33.115]                   signalCondition(cond)
[13:18:33.115]                 }
[13:18:33.115]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:33.115]                 "immediateCondition"))) {
[13:18:33.115]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:33.115]                   ...future.conditions[[length(...future.conditions) + 
[13:18:33.115]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:33.115]                   if (TRUE && !signal) {
[13:18:33.115]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:33.115]                     {
[13:18:33.115]                       inherits <- base::inherits
[13:18:33.115]                       invokeRestart <- base::invokeRestart
[13:18:33.115]                       is.null <- base::is.null
[13:18:33.115]                       muffled <- FALSE
[13:18:33.115]                       if (inherits(cond, "message")) {
[13:18:33.115]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:33.115]                         if (muffled) 
[13:18:33.115]                           invokeRestart("muffleMessage")
[13:18:33.115]                       }
[13:18:33.115]                       else if (inherits(cond, "warning")) {
[13:18:33.115]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:33.115]                         if (muffled) 
[13:18:33.115]                           invokeRestart("muffleWarning")
[13:18:33.115]                       }
[13:18:33.115]                       else if (inherits(cond, "condition")) {
[13:18:33.115]                         if (!is.null(pattern)) {
[13:18:33.115]                           computeRestarts <- base::computeRestarts
[13:18:33.115]                           grepl <- base::grepl
[13:18:33.115]                           restarts <- computeRestarts(cond)
[13:18:33.115]                           for (restart in restarts) {
[13:18:33.115]                             name <- restart$name
[13:18:33.115]                             if (is.null(name)) 
[13:18:33.115]                               next
[13:18:33.115]                             if (!grepl(pattern, name)) 
[13:18:33.115]                               next
[13:18:33.115]                             invokeRestart(restart)
[13:18:33.115]                             muffled <- TRUE
[13:18:33.115]                             break
[13:18:33.115]                           }
[13:18:33.115]                         }
[13:18:33.115]                       }
[13:18:33.115]                       invisible(muffled)
[13:18:33.115]                     }
[13:18:33.115]                     muffleCondition(cond, pattern = "^muffle")
[13:18:33.115]                   }
[13:18:33.115]                 }
[13:18:33.115]                 else {
[13:18:33.115]                   if (TRUE) {
[13:18:33.115]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:33.115]                     {
[13:18:33.115]                       inherits <- base::inherits
[13:18:33.115]                       invokeRestart <- base::invokeRestart
[13:18:33.115]                       is.null <- base::is.null
[13:18:33.115]                       muffled <- FALSE
[13:18:33.115]                       if (inherits(cond, "message")) {
[13:18:33.115]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:33.115]                         if (muffled) 
[13:18:33.115]                           invokeRestart("muffleMessage")
[13:18:33.115]                       }
[13:18:33.115]                       else if (inherits(cond, "warning")) {
[13:18:33.115]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:33.115]                         if (muffled) 
[13:18:33.115]                           invokeRestart("muffleWarning")
[13:18:33.115]                       }
[13:18:33.115]                       else if (inherits(cond, "condition")) {
[13:18:33.115]                         if (!is.null(pattern)) {
[13:18:33.115]                           computeRestarts <- base::computeRestarts
[13:18:33.115]                           grepl <- base::grepl
[13:18:33.115]                           restarts <- computeRestarts(cond)
[13:18:33.115]                           for (restart in restarts) {
[13:18:33.115]                             name <- restart$name
[13:18:33.115]                             if (is.null(name)) 
[13:18:33.115]                               next
[13:18:33.115]                             if (!grepl(pattern, name)) 
[13:18:33.115]                               next
[13:18:33.115]                             invokeRestart(restart)
[13:18:33.115]                             muffled <- TRUE
[13:18:33.115]                             break
[13:18:33.115]                           }
[13:18:33.115]                         }
[13:18:33.115]                       }
[13:18:33.115]                       invisible(muffled)
[13:18:33.115]                     }
[13:18:33.115]                     muffleCondition(cond, pattern = "^muffle")
[13:18:33.115]                   }
[13:18:33.115]                 }
[13:18:33.115]             }
[13:18:33.115]         }))
[13:18:33.115]     }, error = function(ex) {
[13:18:33.115]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:33.115]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:33.115]                 ...future.rng), started = ...future.startTime, 
[13:18:33.115]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:33.115]             version = "1.8"), class = "FutureResult")
[13:18:33.115]     }, finally = {
[13:18:33.115]         if (!identical(...future.workdir, getwd())) 
[13:18:33.115]             setwd(...future.workdir)
[13:18:33.115]         {
[13:18:33.115]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:33.115]                 ...future.oldOptions$nwarnings <- NULL
[13:18:33.115]             }
[13:18:33.115]             base::options(...future.oldOptions)
[13:18:33.115]             if (.Platform$OS.type == "windows") {
[13:18:33.115]                 old_names <- names(...future.oldEnvVars)
[13:18:33.115]                 envs <- base::Sys.getenv()
[13:18:33.115]                 names <- names(envs)
[13:18:33.115]                 common <- intersect(names, old_names)
[13:18:33.115]                 added <- setdiff(names, old_names)
[13:18:33.115]                 removed <- setdiff(old_names, names)
[13:18:33.115]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:33.115]                   envs[common]]
[13:18:33.115]                 NAMES <- toupper(changed)
[13:18:33.115]                 args <- list()
[13:18:33.115]                 for (kk in seq_along(NAMES)) {
[13:18:33.115]                   name <- changed[[kk]]
[13:18:33.115]                   NAME <- NAMES[[kk]]
[13:18:33.115]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:33.115]                     next
[13:18:33.115]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:33.115]                 }
[13:18:33.115]                 NAMES <- toupper(added)
[13:18:33.115]                 for (kk in seq_along(NAMES)) {
[13:18:33.115]                   name <- added[[kk]]
[13:18:33.115]                   NAME <- NAMES[[kk]]
[13:18:33.115]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:33.115]                     next
[13:18:33.115]                   args[[name]] <- ""
[13:18:33.115]                 }
[13:18:33.115]                 NAMES <- toupper(removed)
[13:18:33.115]                 for (kk in seq_along(NAMES)) {
[13:18:33.115]                   name <- removed[[kk]]
[13:18:33.115]                   NAME <- NAMES[[kk]]
[13:18:33.115]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:33.115]                     next
[13:18:33.115]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:33.115]                 }
[13:18:33.115]                 if (length(args) > 0) 
[13:18:33.115]                   base::do.call(base::Sys.setenv, args = args)
[13:18:33.115]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:33.115]             }
[13:18:33.115]             else {
[13:18:33.115]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:33.115]             }
[13:18:33.115]             {
[13:18:33.115]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:33.115]                   0L) {
[13:18:33.115]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:33.115]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:33.115]                   base::options(opts)
[13:18:33.115]                 }
[13:18:33.115]                 {
[13:18:33.115]                   {
[13:18:33.115]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:33.115]                     NULL
[13:18:33.115]                   }
[13:18:33.115]                   options(future.plan = NULL)
[13:18:33.115]                   if (is.na(NA_character_)) 
[13:18:33.115]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:33.115]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:33.115]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:18:33.115]                     envir = parent.frame()) 
[13:18:33.115]                   {
[13:18:33.115]                     default_workers <- missing(workers)
[13:18:33.115]                     if (is.function(workers)) 
[13:18:33.115]                       workers <- workers()
[13:18:33.115]                     workers <- structure(as.integer(workers), 
[13:18:33.115]                       class = class(workers))
[13:18:33.115]                     stop_if_not(is.finite(workers), workers >= 
[13:18:33.115]                       1L)
[13:18:33.115]                     if ((workers == 1L && !inherits(workers, 
[13:18:33.115]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:18:33.115]                       if (default_workers) 
[13:18:33.115]                         supportsMulticore(warn = TRUE)
[13:18:33.115]                       return(sequential(..., envir = envir))
[13:18:33.115]                     }
[13:18:33.115]                     oopts <- options(mc.cores = workers)
[13:18:33.115]                     on.exit(options(oopts))
[13:18:33.115]                     future <- MulticoreFuture(..., workers = workers, 
[13:18:33.115]                       envir = envir)
[13:18:33.115]                     if (!future$lazy) 
[13:18:33.115]                       future <- run(future)
[13:18:33.115]                     invisible(future)
[13:18:33.115]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:33.115]                 }
[13:18:33.115]             }
[13:18:33.115]         }
[13:18:33.115]     })
[13:18:33.115]     if (TRUE) {
[13:18:33.115]         base::sink(type = "output", split = FALSE)
[13:18:33.115]         if (TRUE) {
[13:18:33.115]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:33.115]         }
[13:18:33.115]         else {
[13:18:33.115]             ...future.result["stdout"] <- base::list(NULL)
[13:18:33.115]         }
[13:18:33.115]         base::close(...future.stdout)
[13:18:33.115]         ...future.stdout <- NULL
[13:18:33.115]     }
[13:18:33.115]     ...future.result$conditions <- ...future.conditions
[13:18:33.115]     ...future.result$finished <- base::Sys.time()
[13:18:33.115]     ...future.result
[13:18:33.115] }
[13:18:33.119] assign_globals() ...
[13:18:33.119] List of 7
[13:18:33.119]  $ ...future.FUN            :function (...)  
[13:18:33.119]  $ foo                      :function (x = 1, y = 2)  
[13:18:33.119]  $ x                        : num 3
[13:18:33.119]  $ future.call.arguments    : list()
[13:18:33.119]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:33.119]  $ ...future.elements_ii    :List of 3
[13:18:33.119]   ..$ : int 0
[13:18:33.119]   ..$ : int 0
[13:18:33.119]   ..$ : int 0
[13:18:33.119]  $ ...future.seeds_ii       :List of 3
[13:18:33.119]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[13:18:33.119]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[13:18:33.119]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[13:18:33.119]  $ ...future.globals.maxSize: NULL
[13:18:33.119]  - attr(*, "resolved")= logi FALSE
[13:18:33.119]  - attr(*, "total_size")= num 2200
[13:18:33.119]  - attr(*, "where")=List of 7
[13:18:33.119]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:18:33.119]   ..$ foo                      :<environment: R_EmptyEnv> 
[13:18:33.119]   ..$ x                        :<environment: R_EmptyEnv> 
[13:18:33.119]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:18:33.119]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:18:33.119]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:18:33.119]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:18:33.119]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:33.119]  - attr(*, "already-done")= logi TRUE
[13:18:33.135] - reassign environment for ‘...future.FUN’
[13:18:33.135] - copied ‘...future.FUN’ to environment
[13:18:33.135] - reassign environment for ‘foo’
[13:18:33.136] - copied ‘foo’ to environment
[13:18:33.136] - copied ‘x’ to environment
[13:18:33.136] - copied ‘future.call.arguments’ to environment
[13:18:33.136] - copied ‘...future.elements_ii’ to environment
[13:18:33.136] - copied ‘...future.seeds_ii’ to environment
[13:18:33.136] - copied ‘...future.globals.maxSize’ to environment
[13:18:33.136] assign_globals() ... done
[13:18:33.137] requestCore(): workers = 2
[13:18:33.139] MulticoreFuture started
[13:18:33.139] - Launch lazy future ... done
[13:18:33.139] run() for ‘MulticoreFuture’ ... done
[13:18:33.140] Created future:
[13:18:33.140] plan(): Setting new future strategy stack:
[13:18:33.140] List of future strategies:
[13:18:33.140] 1. sequential:
[13:18:33.140]    - args: function (..., envir = parent.frame())
[13:18:33.140]    - tweaked: FALSE
[13:18:33.140]    - call: NULL
[13:18:33.141] plan(): nbrOfWorkers() = 1
[13:18:33.143] plan(): Setting new future strategy stack:
[13:18:33.144] List of future strategies:
[13:18:33.144] 1. multicore:
[13:18:33.144]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:18:33.144]    - tweaked: FALSE
[13:18:33.144]    - call: plan(strategy)
[13:18:33.149] plan(): nbrOfWorkers() = 2
[13:18:33.140] MulticoreFuture:
[13:18:33.140] Label: ‘future_replicate-2’
[13:18:33.140] Expression:
[13:18:33.140] {
[13:18:33.140]     do.call(function(...) {
[13:18:33.140]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:33.140]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:33.140]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:33.140]             on.exit(options(oopts), add = TRUE)
[13:18:33.140]         }
[13:18:33.140]         {
[13:18:33.140]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:33.140]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:33.140]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:33.140]                   envir = globalenv(), inherits = FALSE)
[13:18:33.140]                 ...future.FUN(...future.X_jj, ...)
[13:18:33.140]             })
[13:18:33.140]         }
[13:18:33.140]     }, args = future.call.arguments)
[13:18:33.140] }
[13:18:33.140] Lazy evaluation: FALSE
[13:18:33.140] Asynchronous evaluation: TRUE
[13:18:33.140] Local evaluation: TRUE
[13:18:33.140] Environment: 0x55df1d66e088
[13:18:33.140] Capture standard output: TRUE
[13:18:33.140] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:33.140] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[13:18:33.140] Packages: <none>
[13:18:33.140] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:33.140] Resolved: TRUE
[13:18:33.140] Value: <not collected>
[13:18:33.140] Conditions captured: <none>
[13:18:33.140] Early signaling: FALSE
[13:18:33.140] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:33.140] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:33.150] Chunk #2 of 2 ... DONE
[13:18:33.150] Launching 2 futures (chunks) ... DONE
[13:18:33.150] Resolving 2 futures (chunks) ...
[13:18:33.150] resolve() on list ...
[13:18:33.150]  recursive: 0
[13:18:33.151]  length: 2
[13:18:33.151] 
[13:18:33.151] Future #1
[13:18:33.152] signalConditionsASAP(MulticoreFuture, pos=1) ...
[13:18:33.152] - nx: 2
[13:18:33.152] - relay: TRUE
[13:18:33.153] - stdout: TRUE
[13:18:33.153] - signal: TRUE
[13:18:33.153] - resignal: FALSE
[13:18:33.153] - force: TRUE
[13:18:33.153] - relayed: [n=2] FALSE, FALSE
[13:18:33.153] - queued futures: [n=2] FALSE, FALSE
[13:18:33.154]  - until=1
[13:18:33.154]  - relaying element #1
[13:18:33.154] - relayed: [n=2] TRUE, FALSE
[13:18:33.154] - queued futures: [n=2] TRUE, FALSE
[13:18:33.154] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[13:18:33.155]  length: 1 (resolved future 1)
[13:18:33.155] Future #2
[13:18:33.156] signalConditionsASAP(MulticoreFuture, pos=2) ...
[13:18:33.156] - nx: 2
[13:18:33.156] - relay: TRUE
[13:18:33.156] - stdout: TRUE
[13:18:33.156] - signal: TRUE
[13:18:33.156] - resignal: FALSE
[13:18:33.156] - force: TRUE
[13:18:33.157] - relayed: [n=2] TRUE, FALSE
[13:18:33.157] - queued futures: [n=2] TRUE, FALSE
[13:18:33.157]  - until=2
[13:18:33.157]  - relaying element #2
[13:18:33.157] - relayed: [n=2] TRUE, TRUE
[13:18:33.157] - queued futures: [n=2] TRUE, TRUE
[13:18:33.157] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[13:18:33.158]  length: 0 (resolved future 2)
[13:18:33.158] Relaying remaining futures
[13:18:33.158] signalConditionsASAP(NULL, pos=0) ...
[13:18:33.158] - nx: 2
[13:18:33.158] - relay: TRUE
[13:18:33.158] - stdout: TRUE
[13:18:33.158] - signal: TRUE
[13:18:33.158] - resignal: FALSE
[13:18:33.158] - force: TRUE
[13:18:33.159] - relayed: [n=2] TRUE, TRUE
[13:18:33.159] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:18:33.159] - relayed: [n=2] TRUE, TRUE
[13:18:33.159] - queued futures: [n=2] TRUE, TRUE
[13:18:33.159] signalConditionsASAP(NULL, pos=0) ... done
[13:18:33.159] resolve() on list ... DONE
[13:18:33.160]  - Number of value chunks collected: 2
[13:18:33.160] Resolving 2 futures (chunks) ... DONE
[13:18:33.160] Reducing values from 2 chunks ...
[13:18:33.160]  - Number of values collected after concatenation: 5
[13:18:33.160]  - Number of values expected: 5
[13:18:33.160] Reducing values from 2 chunks ... DONE
[13:18:33.160] future_lapply() ... DONE
[13:18:33.161] plan(): Setting new future strategy stack:
[13:18:33.161] List of future strategies:
[13:18:33.161] 1. sequential:
[13:18:33.161]    - args: function (..., envir = parent.frame())
[13:18:33.161]    - tweaked: FALSE
[13:18:33.161]    - call: plan(sequential)
[13:18:33.161] plan(): nbrOfWorkers() = 1
*** strategy = ‘multicore’ ... done
*** strategy = ‘multisession’ ...
[13:18:33.162] plan(): Setting new future strategy stack:
[13:18:33.162] List of future strategies:
[13:18:33.162] 1. multisession:
[13:18:33.162]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:18:33.162]    - tweaked: FALSE
[13:18:33.162]    - call: plan(strategy)
[13:18:33.163] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:18:33.163] multisession:
[13:18:33.163] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:18:33.163] - tweaked: FALSE
[13:18:33.163] - call: plan(strategy)
[13:18:33.172] getGlobalsAndPackages() ...
[13:18:33.172] Not searching for globals
[13:18:33.172] - globals: [0] <none>
[13:18:33.172] getGlobalsAndPackages() ... DONE
[13:18:33.173] [local output] makeClusterPSOCK() ...
[13:18:33.211] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:18:33.217] [local output] Base port: 11157
[13:18:33.217] [local output] Getting setup options for 2 cluster nodes ...
[13:18:33.217] [local output]  - Node 1 of 2 ...
[13:18:33.217] [local output] localMachine=TRUE => revtunnel=FALSE

[13:18:33.218] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpPPCpJF/worker.rank=1.parallelly.parent=77350.12e2673ea9b0a.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpPPCpJF/worker.rank=1.parallelly.parent=77350.12e2673ea9b0a.pid")'’
[13:18:33.410] - Possible to infer worker's PID: TRUE
[13:18:33.410] [local output] Rscript port: 11157

[13:18:33.410] [local output]  - Node 2 of 2 ...
[13:18:33.411] [local output] localMachine=TRUE => revtunnel=FALSE

[13:18:33.411] [local output] Rscript port: 11157

[13:18:33.412] [local output] Getting setup options for 2 cluster nodes ... done
[13:18:33.412] [local output]  - Parallel setup requested for some PSOCK nodes
[13:18:33.412] [local output] Setting up PSOCK nodes in parallel
[13:18:33.413] List of 36
[13:18:33.413]  $ worker          : chr "localhost"
[13:18:33.413]   ..- attr(*, "localhost")= logi TRUE
[13:18:33.413]  $ master          : chr "localhost"
[13:18:33.413]  $ port            : int 11157
[13:18:33.413]  $ connectTimeout  : num 120
[13:18:33.413]  $ timeout         : num 2592000
[13:18:33.413]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:18:33.413]  $ homogeneous     : logi TRUE
[13:18:33.413]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:18:33.413]  $ rscript_envs    : NULL
[13:18:33.413]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:18:33.413]  $ rscript_startup : NULL
[13:18:33.413]  $ rscript_sh      : chr "sh"
[13:18:33.413]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:18:33.413]  $ methods         : logi TRUE
[13:18:33.413]  $ socketOptions   : chr "no-delay"
[13:18:33.413]  $ useXDR          : logi FALSE
[13:18:33.413]  $ outfile         : chr "/dev/null"
[13:18:33.413]  $ renice          : int NA
[13:18:33.413]  $ rshcmd          : NULL
[13:18:33.413]  $ user            : chr(0) 
[13:18:33.413]  $ revtunnel       : logi FALSE
[13:18:33.413]  $ rshlogfile      : NULL
[13:18:33.413]  $ rshopts         : chr(0) 
[13:18:33.413]  $ rank            : int 1
[13:18:33.413]  $ manual          : logi FALSE
[13:18:33.413]  $ dryrun          : logi FALSE
[13:18:33.413]  $ quiet           : logi FALSE
[13:18:33.413]  $ setup_strategy  : chr "parallel"
[13:18:33.413]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:18:33.413]  $ pidfile         : chr "/tmp/RtmpPPCpJF/worker.rank=1.parallelly.parent=77350.12e2673ea9b0a.pid"
[13:18:33.413]  $ rshcmd_label    : NULL
[13:18:33.413]  $ rsh_call        : NULL
[13:18:33.413]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:18:33.413]  $ localMachine    : logi TRUE
[13:18:33.413]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:18:33.413]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:18:33.413]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:18:33.413]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:18:33.413]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:18:33.413]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:18:33.413]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:18:33.413]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:18:33.413]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:18:33.413]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:18:33.413]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:18:33.413]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:18:33.413]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:18:33.413]  $ arguments       :List of 28
[13:18:33.413]   ..$ worker          : chr "localhost"
[13:18:33.413]   ..$ master          : NULL
[13:18:33.413]   ..$ port            : int 11157
[13:18:33.413]   ..$ connectTimeout  : num 120
[13:18:33.413]   ..$ timeout         : num 2592000
[13:18:33.413]   ..$ rscript         : NULL
[13:18:33.413]   ..$ homogeneous     : NULL
[13:18:33.413]   ..$ rscript_args    : NULL
[13:18:33.413]   ..$ rscript_envs    : NULL
[13:18:33.413]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:18:33.413]   ..$ rscript_startup : NULL
[13:18:33.413]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:18:33.413]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:18:33.413]   ..$ methods         : logi TRUE
[13:18:33.413]   ..$ socketOptions   : chr "no-delay"
[13:18:33.413]   ..$ useXDR          : logi FALSE
[13:18:33.413]   ..$ outfile         : chr "/dev/null"
[13:18:33.413]   ..$ renice          : int NA
[13:18:33.413]   ..$ rshcmd          : NULL
[13:18:33.413]   ..$ user            : NULL
[13:18:33.413]   ..$ revtunnel       : logi NA
[13:18:33.413]   ..$ rshlogfile      : NULL
[13:18:33.413]   ..$ rshopts         : NULL
[13:18:33.413]   ..$ rank            : int 1
[13:18:33.413]   ..$ manual          : logi FALSE
[13:18:33.413]   ..$ dryrun          : logi FALSE
[13:18:33.413]   ..$ quiet           : logi FALSE
[13:18:33.413]   ..$ setup_strategy  : chr "parallel"
[13:18:33.413]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:18:33.430] [local output] System call to launch all workers:
[13:18:33.430] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpPPCpJF/worker.rank=1.parallelly.parent=77350.12e2673ea9b0a.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11157 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:18:33.430] [local output] Starting PSOCK main server
[13:18:33.431] [local output] Workers launched
[13:18:33.432] [local output] Waiting for workers to connect back
[13:18:33.432]  - [local output] 0 workers out of 2 ready
[13:18:33.679]  - [local output] 0 workers out of 2 ready
[13:18:33.680]  - [local output] 1 workers out of 2 ready
[13:18:33.680]  - [local output] 2 workers out of 2 ready
[13:18:33.680] [local output] Launching of workers completed
[13:18:33.680] [local output] Collecting session information from workers
[13:18:33.681] [local output]  - Worker #1 of 2
[13:18:33.682] [local output]  - Worker #2 of 2
[13:18:33.682] [local output] makeClusterPSOCK() ... done
[13:18:33.694] Packages needed by the future expression (n = 0): <none>
[13:18:33.694] Packages needed by future strategies (n = 0): <none>
[13:18:33.695] {
[13:18:33.695]     {
[13:18:33.695]         {
[13:18:33.695]             ...future.startTime <- base::Sys.time()
[13:18:33.695]             {
[13:18:33.695]                 {
[13:18:33.695]                   {
[13:18:33.695]                     {
[13:18:33.695]                       base::local({
[13:18:33.695]                         has_future <- base::requireNamespace("future", 
[13:18:33.695]                           quietly = TRUE)
[13:18:33.695]                         if (has_future) {
[13:18:33.695]                           ns <- base::getNamespace("future")
[13:18:33.695]                           version <- ns[[".package"]][["version"]]
[13:18:33.695]                           if (is.null(version)) 
[13:18:33.695]                             version <- utils::packageVersion("future")
[13:18:33.695]                         }
[13:18:33.695]                         else {
[13:18:33.695]                           version <- NULL
[13:18:33.695]                         }
[13:18:33.695]                         if (!has_future || version < "1.8.0") {
[13:18:33.695]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:33.695]                             "", base::R.version$version.string), 
[13:18:33.695]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:33.695]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:33.695]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:33.695]                               "release", "version")], collapse = " "), 
[13:18:33.695]                             hostname = base::Sys.info()[["nodename"]])
[13:18:33.695]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:33.695]                             info)
[13:18:33.695]                           info <- base::paste(info, collapse = "; ")
[13:18:33.695]                           if (!has_future) {
[13:18:33.695]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:33.695]                               info)
[13:18:33.695]                           }
[13:18:33.695]                           else {
[13:18:33.695]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:33.695]                               info, version)
[13:18:33.695]                           }
[13:18:33.695]                           base::stop(msg)
[13:18:33.695]                         }
[13:18:33.695]                       })
[13:18:33.695]                     }
[13:18:33.695]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:33.695]                     base::options(mc.cores = 1L)
[13:18:33.695]                   }
[13:18:33.695]                   options(future.plan = NULL)
[13:18:33.695]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:33.695]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:33.695]                 }
[13:18:33.695]                 ...future.workdir <- getwd()
[13:18:33.695]             }
[13:18:33.695]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:33.695]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:33.695]         }
[13:18:33.695]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:33.695]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:18:33.695]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:33.695]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:33.695]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:33.695]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:33.695]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:33.695]             base::names(...future.oldOptions))
[13:18:33.695]     }
[13:18:33.695]     if (FALSE) {
[13:18:33.695]     }
[13:18:33.695]     else {
[13:18:33.695]         if (TRUE) {
[13:18:33.695]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:33.695]                 open = "w")
[13:18:33.695]         }
[13:18:33.695]         else {
[13:18:33.695]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:33.695]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:33.695]         }
[13:18:33.695]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:33.695]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:33.695]             base::sink(type = "output", split = FALSE)
[13:18:33.695]             base::close(...future.stdout)
[13:18:33.695]         }, add = TRUE)
[13:18:33.695]     }
[13:18:33.695]     ...future.frame <- base::sys.nframe()
[13:18:33.695]     ...future.conditions <- base::list()
[13:18:33.695]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:33.695]     if (FALSE) {
[13:18:33.695]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:33.695]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:33.695]     }
[13:18:33.695]     ...future.result <- base::tryCatch({
[13:18:33.695]         base::withCallingHandlers({
[13:18:33.695]             ...future.value <- base::withVisible(base::local({
[13:18:33.695]                 ...future.makeSendCondition <- local({
[13:18:33.695]                   sendCondition <- NULL
[13:18:33.695]                   function(frame = 1L) {
[13:18:33.695]                     if (is.function(sendCondition)) 
[13:18:33.695]                       return(sendCondition)
[13:18:33.695]                     ns <- getNamespace("parallel")
[13:18:33.695]                     if (exists("sendData", mode = "function", 
[13:18:33.695]                       envir = ns)) {
[13:18:33.695]                       parallel_sendData <- get("sendData", mode = "function", 
[13:18:33.695]                         envir = ns)
[13:18:33.695]                       envir <- sys.frame(frame)
[13:18:33.695]                       master <- NULL
[13:18:33.695]                       while (!identical(envir, .GlobalEnv) && 
[13:18:33.695]                         !identical(envir, emptyenv())) {
[13:18:33.695]                         if (exists("master", mode = "list", envir = envir, 
[13:18:33.695]                           inherits = FALSE)) {
[13:18:33.695]                           master <- get("master", mode = "list", 
[13:18:33.695]                             envir = envir, inherits = FALSE)
[13:18:33.695]                           if (inherits(master, c("SOCKnode", 
[13:18:33.695]                             "SOCK0node"))) {
[13:18:33.695]                             sendCondition <<- function(cond) {
[13:18:33.695]                               data <- list(type = "VALUE", value = cond, 
[13:18:33.695]                                 success = TRUE)
[13:18:33.695]                               parallel_sendData(master, data)
[13:18:33.695]                             }
[13:18:33.695]                             return(sendCondition)
[13:18:33.695]                           }
[13:18:33.695]                         }
[13:18:33.695]                         frame <- frame + 1L
[13:18:33.695]                         envir <- sys.frame(frame)
[13:18:33.695]                       }
[13:18:33.695]                     }
[13:18:33.695]                     sendCondition <<- function(cond) NULL
[13:18:33.695]                   }
[13:18:33.695]                 })
[13:18:33.695]                 withCallingHandlers({
[13:18:33.695]                   NA
[13:18:33.695]                 }, immediateCondition = function(cond) {
[13:18:33.695]                   sendCondition <- ...future.makeSendCondition()
[13:18:33.695]                   sendCondition(cond)
[13:18:33.695]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:33.695]                   {
[13:18:33.695]                     inherits <- base::inherits
[13:18:33.695]                     invokeRestart <- base::invokeRestart
[13:18:33.695]                     is.null <- base::is.null
[13:18:33.695]                     muffled <- FALSE
[13:18:33.695]                     if (inherits(cond, "message")) {
[13:18:33.695]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:33.695]                       if (muffled) 
[13:18:33.695]                         invokeRestart("muffleMessage")
[13:18:33.695]                     }
[13:18:33.695]                     else if (inherits(cond, "warning")) {
[13:18:33.695]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:33.695]                       if (muffled) 
[13:18:33.695]                         invokeRestart("muffleWarning")
[13:18:33.695]                     }
[13:18:33.695]                     else if (inherits(cond, "condition")) {
[13:18:33.695]                       if (!is.null(pattern)) {
[13:18:33.695]                         computeRestarts <- base::computeRestarts
[13:18:33.695]                         grepl <- base::grepl
[13:18:33.695]                         restarts <- computeRestarts(cond)
[13:18:33.695]                         for (restart in restarts) {
[13:18:33.695]                           name <- restart$name
[13:18:33.695]                           if (is.null(name)) 
[13:18:33.695]                             next
[13:18:33.695]                           if (!grepl(pattern, name)) 
[13:18:33.695]                             next
[13:18:33.695]                           invokeRestart(restart)
[13:18:33.695]                           muffled <- TRUE
[13:18:33.695]                           break
[13:18:33.695]                         }
[13:18:33.695]                       }
[13:18:33.695]                     }
[13:18:33.695]                     invisible(muffled)
[13:18:33.695]                   }
[13:18:33.695]                   muffleCondition(cond)
[13:18:33.695]                 })
[13:18:33.695]             }))
[13:18:33.695]             future::FutureResult(value = ...future.value$value, 
[13:18:33.695]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:33.695]                   ...future.rng), globalenv = if (FALSE) 
[13:18:33.695]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:33.695]                     ...future.globalenv.names))
[13:18:33.695]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:33.695]         }, condition = base::local({
[13:18:33.695]             c <- base::c
[13:18:33.695]             inherits <- base::inherits
[13:18:33.695]             invokeRestart <- base::invokeRestart
[13:18:33.695]             length <- base::length
[13:18:33.695]             list <- base::list
[13:18:33.695]             seq.int <- base::seq.int
[13:18:33.695]             signalCondition <- base::signalCondition
[13:18:33.695]             sys.calls <- base::sys.calls
[13:18:33.695]             `[[` <- base::`[[`
[13:18:33.695]             `+` <- base::`+`
[13:18:33.695]             `<<-` <- base::`<<-`
[13:18:33.695]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:33.695]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:33.695]                   3L)]
[13:18:33.695]             }
[13:18:33.695]             function(cond) {
[13:18:33.695]                 is_error <- inherits(cond, "error")
[13:18:33.695]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:33.695]                   NULL)
[13:18:33.695]                 if (is_error) {
[13:18:33.695]                   sessionInformation <- function() {
[13:18:33.695]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:33.695]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:33.695]                       search = base::search(), system = base::Sys.info())
[13:18:33.695]                   }
[13:18:33.695]                   ...future.conditions[[length(...future.conditions) + 
[13:18:33.695]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:33.695]                     cond$call), session = sessionInformation(), 
[13:18:33.695]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:33.695]                   signalCondition(cond)
[13:18:33.695]                 }
[13:18:33.695]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:33.695]                 "immediateCondition"))) {
[13:18:33.695]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:33.695]                   ...future.conditions[[length(...future.conditions) + 
[13:18:33.695]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:33.695]                   if (TRUE && !signal) {
[13:18:33.695]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:33.695]                     {
[13:18:33.695]                       inherits <- base::inherits
[13:18:33.695]                       invokeRestart <- base::invokeRestart
[13:18:33.695]                       is.null <- base::is.null
[13:18:33.695]                       muffled <- FALSE
[13:18:33.695]                       if (inherits(cond, "message")) {
[13:18:33.695]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:33.695]                         if (muffled) 
[13:18:33.695]                           invokeRestart("muffleMessage")
[13:18:33.695]                       }
[13:18:33.695]                       else if (inherits(cond, "warning")) {
[13:18:33.695]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:33.695]                         if (muffled) 
[13:18:33.695]                           invokeRestart("muffleWarning")
[13:18:33.695]                       }
[13:18:33.695]                       else if (inherits(cond, "condition")) {
[13:18:33.695]                         if (!is.null(pattern)) {
[13:18:33.695]                           computeRestarts <- base::computeRestarts
[13:18:33.695]                           grepl <- base::grepl
[13:18:33.695]                           restarts <- computeRestarts(cond)
[13:18:33.695]                           for (restart in restarts) {
[13:18:33.695]                             name <- restart$name
[13:18:33.695]                             if (is.null(name)) 
[13:18:33.695]                               next
[13:18:33.695]                             if (!grepl(pattern, name)) 
[13:18:33.695]                               next
[13:18:33.695]                             invokeRestart(restart)
[13:18:33.695]                             muffled <- TRUE
[13:18:33.695]                             break
[13:18:33.695]                           }
[13:18:33.695]                         }
[13:18:33.695]                       }
[13:18:33.695]                       invisible(muffled)
[13:18:33.695]                     }
[13:18:33.695]                     muffleCondition(cond, pattern = "^muffle")
[13:18:33.695]                   }
[13:18:33.695]                 }
[13:18:33.695]                 else {
[13:18:33.695]                   if (TRUE) {
[13:18:33.695]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:33.695]                     {
[13:18:33.695]                       inherits <- base::inherits
[13:18:33.695]                       invokeRestart <- base::invokeRestart
[13:18:33.695]                       is.null <- base::is.null
[13:18:33.695]                       muffled <- FALSE
[13:18:33.695]                       if (inherits(cond, "message")) {
[13:18:33.695]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:33.695]                         if (muffled) 
[13:18:33.695]                           invokeRestart("muffleMessage")
[13:18:33.695]                       }
[13:18:33.695]                       else if (inherits(cond, "warning")) {
[13:18:33.695]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:33.695]                         if (muffled) 
[13:18:33.695]                           invokeRestart("muffleWarning")
[13:18:33.695]                       }
[13:18:33.695]                       else if (inherits(cond, "condition")) {
[13:18:33.695]                         if (!is.null(pattern)) {
[13:18:33.695]                           computeRestarts <- base::computeRestarts
[13:18:33.695]                           grepl <- base::grepl
[13:18:33.695]                           restarts <- computeRestarts(cond)
[13:18:33.695]                           for (restart in restarts) {
[13:18:33.695]                             name <- restart$name
[13:18:33.695]                             if (is.null(name)) 
[13:18:33.695]                               next
[13:18:33.695]                             if (!grepl(pattern, name)) 
[13:18:33.695]                               next
[13:18:33.695]                             invokeRestart(restart)
[13:18:33.695]                             muffled <- TRUE
[13:18:33.695]                             break
[13:18:33.695]                           }
[13:18:33.695]                         }
[13:18:33.695]                       }
[13:18:33.695]                       invisible(muffled)
[13:18:33.695]                     }
[13:18:33.695]                     muffleCondition(cond, pattern = "^muffle")
[13:18:33.695]                   }
[13:18:33.695]                 }
[13:18:33.695]             }
[13:18:33.695]         }))
[13:18:33.695]     }, error = function(ex) {
[13:18:33.695]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:33.695]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:33.695]                 ...future.rng), started = ...future.startTime, 
[13:18:33.695]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:33.695]             version = "1.8"), class = "FutureResult")
[13:18:33.695]     }, finally = {
[13:18:33.695]         if (!identical(...future.workdir, getwd())) 
[13:18:33.695]             setwd(...future.workdir)
[13:18:33.695]         {
[13:18:33.695]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:33.695]                 ...future.oldOptions$nwarnings <- NULL
[13:18:33.695]             }
[13:18:33.695]             base::options(...future.oldOptions)
[13:18:33.695]             if (.Platform$OS.type == "windows") {
[13:18:33.695]                 old_names <- names(...future.oldEnvVars)
[13:18:33.695]                 envs <- base::Sys.getenv()
[13:18:33.695]                 names <- names(envs)
[13:18:33.695]                 common <- intersect(names, old_names)
[13:18:33.695]                 added <- setdiff(names, old_names)
[13:18:33.695]                 removed <- setdiff(old_names, names)
[13:18:33.695]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:33.695]                   envs[common]]
[13:18:33.695]                 NAMES <- toupper(changed)
[13:18:33.695]                 args <- list()
[13:18:33.695]                 for (kk in seq_along(NAMES)) {
[13:18:33.695]                   name <- changed[[kk]]
[13:18:33.695]                   NAME <- NAMES[[kk]]
[13:18:33.695]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:33.695]                     next
[13:18:33.695]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:33.695]                 }
[13:18:33.695]                 NAMES <- toupper(added)
[13:18:33.695]                 for (kk in seq_along(NAMES)) {
[13:18:33.695]                   name <- added[[kk]]
[13:18:33.695]                   NAME <- NAMES[[kk]]
[13:18:33.695]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:33.695]                     next
[13:18:33.695]                   args[[name]] <- ""
[13:18:33.695]                 }
[13:18:33.695]                 NAMES <- toupper(removed)
[13:18:33.695]                 for (kk in seq_along(NAMES)) {
[13:18:33.695]                   name <- removed[[kk]]
[13:18:33.695]                   NAME <- NAMES[[kk]]
[13:18:33.695]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:33.695]                     next
[13:18:33.695]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:33.695]                 }
[13:18:33.695]                 if (length(args) > 0) 
[13:18:33.695]                   base::do.call(base::Sys.setenv, args = args)
[13:18:33.695]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:33.695]             }
[13:18:33.695]             else {
[13:18:33.695]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:33.695]             }
[13:18:33.695]             {
[13:18:33.695]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:33.695]                   0L) {
[13:18:33.695]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:33.695]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:33.695]                   base::options(opts)
[13:18:33.695]                 }
[13:18:33.695]                 {
[13:18:33.695]                   {
[13:18:33.695]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:33.695]                     NULL
[13:18:33.695]                   }
[13:18:33.695]                   options(future.plan = NULL)
[13:18:33.695]                   if (is.na(NA_character_)) 
[13:18:33.695]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:33.695]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:33.695]                   future::plan(list(function (..., workers = availableCores(), 
[13:18:33.695]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:18:33.695]                     envir = parent.frame()) 
[13:18:33.695]                   {
[13:18:33.695]                     if (is.function(workers)) 
[13:18:33.695]                       workers <- workers()
[13:18:33.695]                     workers <- structure(as.integer(workers), 
[13:18:33.695]                       class = class(workers))
[13:18:33.695]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:18:33.695]                       workers >= 1)
[13:18:33.695]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:18:33.695]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:18:33.695]                     }
[13:18:33.695]                     future <- MultisessionFuture(..., workers = workers, 
[13:18:33.695]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:18:33.695]                       envir = envir)
[13:18:33.695]                     if (!future$lazy) 
[13:18:33.695]                       future <- run(future)
[13:18:33.695]                     invisible(future)
[13:18:33.695]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:33.695]                 }
[13:18:33.695]             }
[13:18:33.695]         }
[13:18:33.695]     })
[13:18:33.695]     if (TRUE) {
[13:18:33.695]         base::sink(type = "output", split = FALSE)
[13:18:33.695]         if (TRUE) {
[13:18:33.695]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:33.695]         }
[13:18:33.695]         else {
[13:18:33.695]             ...future.result["stdout"] <- base::list(NULL)
[13:18:33.695]         }
[13:18:33.695]         base::close(...future.stdout)
[13:18:33.695]         ...future.stdout <- NULL
[13:18:33.695]     }
[13:18:33.695]     ...future.result$conditions <- ...future.conditions
[13:18:33.695]     ...future.result$finished <- base::Sys.time()
[13:18:33.695]     ...future.result
[13:18:33.695] }
[13:18:33.767] MultisessionFuture started
[13:18:33.768] result() for ClusterFuture ...
[13:18:33.769] receiveMessageFromWorker() for ClusterFuture ...
[13:18:33.769] - Validating connection of MultisessionFuture
[13:18:33.801] - received message: FutureResult
[13:18:33.801] - Received FutureResult
[13:18:33.801] - Erased future from FutureRegistry
[13:18:33.801] result() for ClusterFuture ...
[13:18:33.801] - result already collected: FutureResult
[13:18:33.801] result() for ClusterFuture ... done
[13:18:33.802] receiveMessageFromWorker() for ClusterFuture ... done
[13:18:33.802] result() for ClusterFuture ... done
[13:18:33.802] result() for ClusterFuture ...
[13:18:33.802] - result already collected: FutureResult
[13:18:33.802] result() for ClusterFuture ... done
[13:18:33.802] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:18:33.806] plan(): nbrOfWorkers() = 2
[13:18:33.806] future_lapply() ...
[13:18:33.807] Generating random seeds ...
[13:18:33.807] Generating random seed streams for 5 elements ...
[13:18:33.807] Generating random seed streams for 5 elements ... DONE
[13:18:33.807] Generating random seeds ... DONE
[13:18:33.807] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:18:33.812] Number of chunks: 2
[13:18:33.812] getGlobalsAndPackagesXApply() ...
[13:18:33.812]  - future.globals: TRUE
[13:18:33.812] getGlobalsAndPackages() ...
[13:18:33.812] Searching for globals...
[13:18:33.813] - globals found: [2] ‘FUN’, ‘sample’
[13:18:33.814] Searching for globals ... DONE
[13:18:33.814] Resolving globals: FALSE
[13:18:33.814] The total size of the 1 globals is 616 bytes (616 bytes)
[13:18:33.815] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:18:33.815] - globals: [1] ‘FUN’
[13:18:33.815] 
[13:18:33.815] getGlobalsAndPackages() ... DONE
[13:18:33.815]  - globals found/used: [n=1] ‘FUN’
[13:18:33.815]  - needed namespaces: [n=0] 
[13:18:33.815] Finding globals ... DONE
[13:18:33.815]  - use_args: TRUE
[13:18:33.816]  - Getting '...' globals ...
[13:18:33.816] resolve() on list ...
[13:18:33.816]  recursive: 0
[13:18:33.816]  length: 1
[13:18:33.816]  elements: ‘...’
[13:18:33.816]  length: 0 (resolved future 1)
[13:18:33.817] resolve() on list ... DONE
[13:18:33.817]    - '...' content: [n=0] 
[13:18:33.817] List of 1
[13:18:33.817]  $ ...: list()
[13:18:33.817]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:33.817]  - attr(*, "where")=List of 1
[13:18:33.817]   ..$ ...:<environment: 0x55df1f2b6bf0> 
[13:18:33.817]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:33.817]  - attr(*, "resolved")= logi TRUE
[13:18:33.817]  - attr(*, "total_size")= num NA
[13:18:33.820]  - Getting '...' globals ... DONE
[13:18:33.820] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:18:33.820] List of 2
[13:18:33.820]  $ ...future.FUN:function (...)  
[13:18:33.820]  $ ...          : list()
[13:18:33.820]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:33.820]  - attr(*, "where")=List of 2
[13:18:33.820]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:18:33.820]   ..$ ...          :<environment: 0x55df1f2b6bf0> 
[13:18:33.820]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:33.820]  - attr(*, "resolved")= logi FALSE
[13:18:33.820]  - attr(*, "total_size")= num 616
[13:18:33.824] Packages to be attached in all futures: [n=0] 
[13:18:33.824] getGlobalsAndPackagesXApply() ... DONE
[13:18:33.824] Number of futures (= number of chunks): 2
[13:18:33.824] Launching 2 futures (chunks) ...
[13:18:33.824] Chunk #1 of 2 ...
[13:18:33.824]  - Finding globals in 'X' for chunk #1 ...
[13:18:33.825] getGlobalsAndPackages() ...
[13:18:33.825] Searching for globals...
[13:18:33.825] 
[13:18:33.825] Searching for globals ... DONE
[13:18:33.825] - globals: [0] <none>
[13:18:33.825] getGlobalsAndPackages() ... DONE
[13:18:33.825]    + additional globals found: [n=0] 
[13:18:33.826]    + additional namespaces needed: [n=0] 
[13:18:33.826]  - Finding globals in 'X' for chunk #1 ... DONE
[13:18:33.826]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:18:33.826]  - seeds: [2] <seeds>
[13:18:33.826] getGlobalsAndPackages() ...
[13:18:33.826] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:33.826] Resolving globals: FALSE
[13:18:33.826] Tweak future expression to call with '...' arguments ...
[13:18:33.827] {
[13:18:33.827]     do.call(function(...) {
[13:18:33.827]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:33.827]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:33.827]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:33.827]             on.exit(options(oopts), add = TRUE)
[13:18:33.827]         }
[13:18:33.827]         {
[13:18:33.827]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:33.827]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:33.827]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:33.827]                   envir = globalenv(), inherits = FALSE)
[13:18:33.827]                 ...future.FUN(...future.X_jj, ...)
[13:18:33.827]             })
[13:18:33.827]         }
[13:18:33.827]     }, args = future.call.arguments)
[13:18:33.827] }
[13:18:33.827] Tweak future expression to call with '...' arguments ... DONE
[13:18:33.827] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:33.828] 
[13:18:33.828] getGlobalsAndPackages() ... DONE
[13:18:33.828] run() for ‘Future’ ...
[13:18:33.828] - state: ‘created’
[13:18:33.828] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:18:33.844] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:33.844] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:18:33.844]   - Field: ‘node’
[13:18:33.844]   - Field: ‘label’
[13:18:33.844]   - Field: ‘local’
[13:18:33.844]   - Field: ‘owner’
[13:18:33.844]   - Field: ‘envir’
[13:18:33.844]   - Field: ‘workers’
[13:18:33.845]   - Field: ‘packages’
[13:18:33.845]   - Field: ‘gc’
[13:18:33.845]   - Field: ‘conditions’
[13:18:33.845]   - Field: ‘persistent’
[13:18:33.845]   - Field: ‘expr’
[13:18:33.845]   - Field: ‘uuid’
[13:18:33.845]   - Field: ‘seed’
[13:18:33.845]   - Field: ‘version’
[13:18:33.845]   - Field: ‘result’
[13:18:33.846]   - Field: ‘asynchronous’
[13:18:33.846]   - Field: ‘calls’
[13:18:33.846]   - Field: ‘globals’
[13:18:33.846]   - Field: ‘stdout’
[13:18:33.846]   - Field: ‘earlySignal’
[13:18:33.846]   - Field: ‘lazy’
[13:18:33.846]   - Field: ‘state’
[13:18:33.846] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:18:33.847] - Launch lazy future ...
[13:18:33.847] Packages needed by the future expression (n = 0): <none>
[13:18:33.847] Packages needed by future strategies (n = 0): <none>
[13:18:33.848] {
[13:18:33.848]     {
[13:18:33.848]         {
[13:18:33.848]             ...future.startTime <- base::Sys.time()
[13:18:33.848]             {
[13:18:33.848]                 {
[13:18:33.848]                   {
[13:18:33.848]                     {
[13:18:33.848]                       base::local({
[13:18:33.848]                         has_future <- base::requireNamespace("future", 
[13:18:33.848]                           quietly = TRUE)
[13:18:33.848]                         if (has_future) {
[13:18:33.848]                           ns <- base::getNamespace("future")
[13:18:33.848]                           version <- ns[[".package"]][["version"]]
[13:18:33.848]                           if (is.null(version)) 
[13:18:33.848]                             version <- utils::packageVersion("future")
[13:18:33.848]                         }
[13:18:33.848]                         else {
[13:18:33.848]                           version <- NULL
[13:18:33.848]                         }
[13:18:33.848]                         if (!has_future || version < "1.8.0") {
[13:18:33.848]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:33.848]                             "", base::R.version$version.string), 
[13:18:33.848]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:33.848]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:33.848]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:33.848]                               "release", "version")], collapse = " "), 
[13:18:33.848]                             hostname = base::Sys.info()[["nodename"]])
[13:18:33.848]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:33.848]                             info)
[13:18:33.848]                           info <- base::paste(info, collapse = "; ")
[13:18:33.848]                           if (!has_future) {
[13:18:33.848]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:33.848]                               info)
[13:18:33.848]                           }
[13:18:33.848]                           else {
[13:18:33.848]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:33.848]                               info, version)
[13:18:33.848]                           }
[13:18:33.848]                           base::stop(msg)
[13:18:33.848]                         }
[13:18:33.848]                       })
[13:18:33.848]                     }
[13:18:33.848]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:33.848]                     base::options(mc.cores = 1L)
[13:18:33.848]                   }
[13:18:33.848]                   options(future.plan = NULL)
[13:18:33.848]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:33.848]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:33.848]                 }
[13:18:33.848]                 ...future.workdir <- getwd()
[13:18:33.848]             }
[13:18:33.848]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:33.848]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:33.848]         }
[13:18:33.848]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:33.848]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:18:33.848]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:33.848]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:33.848]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:33.848]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:33.848]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:33.848]             base::names(...future.oldOptions))
[13:18:33.848]     }
[13:18:33.848]     if (FALSE) {
[13:18:33.848]     }
[13:18:33.848]     else {
[13:18:33.848]         if (TRUE) {
[13:18:33.848]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:33.848]                 open = "w")
[13:18:33.848]         }
[13:18:33.848]         else {
[13:18:33.848]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:33.848]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:33.848]         }
[13:18:33.848]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:33.848]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:33.848]             base::sink(type = "output", split = FALSE)
[13:18:33.848]             base::close(...future.stdout)
[13:18:33.848]         }, add = TRUE)
[13:18:33.848]     }
[13:18:33.848]     ...future.frame <- base::sys.nframe()
[13:18:33.848]     ...future.conditions <- base::list()
[13:18:33.848]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:33.848]     if (FALSE) {
[13:18:33.848]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:33.848]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:33.848]     }
[13:18:33.848]     ...future.result <- base::tryCatch({
[13:18:33.848]         base::withCallingHandlers({
[13:18:33.848]             ...future.value <- base::withVisible(base::local({
[13:18:33.848]                 ...future.makeSendCondition <- local({
[13:18:33.848]                   sendCondition <- NULL
[13:18:33.848]                   function(frame = 1L) {
[13:18:33.848]                     if (is.function(sendCondition)) 
[13:18:33.848]                       return(sendCondition)
[13:18:33.848]                     ns <- getNamespace("parallel")
[13:18:33.848]                     if (exists("sendData", mode = "function", 
[13:18:33.848]                       envir = ns)) {
[13:18:33.848]                       parallel_sendData <- get("sendData", mode = "function", 
[13:18:33.848]                         envir = ns)
[13:18:33.848]                       envir <- sys.frame(frame)
[13:18:33.848]                       master <- NULL
[13:18:33.848]                       while (!identical(envir, .GlobalEnv) && 
[13:18:33.848]                         !identical(envir, emptyenv())) {
[13:18:33.848]                         if (exists("master", mode = "list", envir = envir, 
[13:18:33.848]                           inherits = FALSE)) {
[13:18:33.848]                           master <- get("master", mode = "list", 
[13:18:33.848]                             envir = envir, inherits = FALSE)
[13:18:33.848]                           if (inherits(master, c("SOCKnode", 
[13:18:33.848]                             "SOCK0node"))) {
[13:18:33.848]                             sendCondition <<- function(cond) {
[13:18:33.848]                               data <- list(type = "VALUE", value = cond, 
[13:18:33.848]                                 success = TRUE)
[13:18:33.848]                               parallel_sendData(master, data)
[13:18:33.848]                             }
[13:18:33.848]                             return(sendCondition)
[13:18:33.848]                           }
[13:18:33.848]                         }
[13:18:33.848]                         frame <- frame + 1L
[13:18:33.848]                         envir <- sys.frame(frame)
[13:18:33.848]                       }
[13:18:33.848]                     }
[13:18:33.848]                     sendCondition <<- function(cond) NULL
[13:18:33.848]                   }
[13:18:33.848]                 })
[13:18:33.848]                 withCallingHandlers({
[13:18:33.848]                   {
[13:18:33.848]                     do.call(function(...) {
[13:18:33.848]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:33.848]                       if (!identical(...future.globals.maxSize.org, 
[13:18:33.848]                         ...future.globals.maxSize)) {
[13:18:33.848]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:33.848]                         on.exit(options(oopts), add = TRUE)
[13:18:33.848]                       }
[13:18:33.848]                       {
[13:18:33.848]                         lapply(seq_along(...future.elements_ii), 
[13:18:33.848]                           FUN = function(jj) {
[13:18:33.848]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:33.848]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:33.848]                               envir = globalenv(), inherits = FALSE)
[13:18:33.848]                             ...future.FUN(...future.X_jj, ...)
[13:18:33.848]                           })
[13:18:33.848]                       }
[13:18:33.848]                     }, args = future.call.arguments)
[13:18:33.848]                   }
[13:18:33.848]                 }, immediateCondition = function(cond) {
[13:18:33.848]                   sendCondition <- ...future.makeSendCondition()
[13:18:33.848]                   sendCondition(cond)
[13:18:33.848]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:33.848]                   {
[13:18:33.848]                     inherits <- base::inherits
[13:18:33.848]                     invokeRestart <- base::invokeRestart
[13:18:33.848]                     is.null <- base::is.null
[13:18:33.848]                     muffled <- FALSE
[13:18:33.848]                     if (inherits(cond, "message")) {
[13:18:33.848]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:33.848]                       if (muffled) 
[13:18:33.848]                         invokeRestart("muffleMessage")
[13:18:33.848]                     }
[13:18:33.848]                     else if (inherits(cond, "warning")) {
[13:18:33.848]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:33.848]                       if (muffled) 
[13:18:33.848]                         invokeRestart("muffleWarning")
[13:18:33.848]                     }
[13:18:33.848]                     else if (inherits(cond, "condition")) {
[13:18:33.848]                       if (!is.null(pattern)) {
[13:18:33.848]                         computeRestarts <- base::computeRestarts
[13:18:33.848]                         grepl <- base::grepl
[13:18:33.848]                         restarts <- computeRestarts(cond)
[13:18:33.848]                         for (restart in restarts) {
[13:18:33.848]                           name <- restart$name
[13:18:33.848]                           if (is.null(name)) 
[13:18:33.848]                             next
[13:18:33.848]                           if (!grepl(pattern, name)) 
[13:18:33.848]                             next
[13:18:33.848]                           invokeRestart(restart)
[13:18:33.848]                           muffled <- TRUE
[13:18:33.848]                           break
[13:18:33.848]                         }
[13:18:33.848]                       }
[13:18:33.848]                     }
[13:18:33.848]                     invisible(muffled)
[13:18:33.848]                   }
[13:18:33.848]                   muffleCondition(cond)
[13:18:33.848]                 })
[13:18:33.848]             }))
[13:18:33.848]             future::FutureResult(value = ...future.value$value, 
[13:18:33.848]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:33.848]                   ...future.rng), globalenv = if (FALSE) 
[13:18:33.848]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:33.848]                     ...future.globalenv.names))
[13:18:33.848]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:33.848]         }, condition = base::local({
[13:18:33.848]             c <- base::c
[13:18:33.848]             inherits <- base::inherits
[13:18:33.848]             invokeRestart <- base::invokeRestart
[13:18:33.848]             length <- base::length
[13:18:33.848]             list <- base::list
[13:18:33.848]             seq.int <- base::seq.int
[13:18:33.848]             signalCondition <- base::signalCondition
[13:18:33.848]             sys.calls <- base::sys.calls
[13:18:33.848]             `[[` <- base::`[[`
[13:18:33.848]             `+` <- base::`+`
[13:18:33.848]             `<<-` <- base::`<<-`
[13:18:33.848]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:33.848]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:33.848]                   3L)]
[13:18:33.848]             }
[13:18:33.848]             function(cond) {
[13:18:33.848]                 is_error <- inherits(cond, "error")
[13:18:33.848]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:33.848]                   NULL)
[13:18:33.848]                 if (is_error) {
[13:18:33.848]                   sessionInformation <- function() {
[13:18:33.848]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:33.848]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:33.848]                       search = base::search(), system = base::Sys.info())
[13:18:33.848]                   }
[13:18:33.848]                   ...future.conditions[[length(...future.conditions) + 
[13:18:33.848]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:33.848]                     cond$call), session = sessionInformation(), 
[13:18:33.848]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:33.848]                   signalCondition(cond)
[13:18:33.848]                 }
[13:18:33.848]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:33.848]                 "immediateCondition"))) {
[13:18:33.848]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:33.848]                   ...future.conditions[[length(...future.conditions) + 
[13:18:33.848]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:33.848]                   if (TRUE && !signal) {
[13:18:33.848]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:33.848]                     {
[13:18:33.848]                       inherits <- base::inherits
[13:18:33.848]                       invokeRestart <- base::invokeRestart
[13:18:33.848]                       is.null <- base::is.null
[13:18:33.848]                       muffled <- FALSE
[13:18:33.848]                       if (inherits(cond, "message")) {
[13:18:33.848]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:33.848]                         if (muffled) 
[13:18:33.848]                           invokeRestart("muffleMessage")
[13:18:33.848]                       }
[13:18:33.848]                       else if (inherits(cond, "warning")) {
[13:18:33.848]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:33.848]                         if (muffled) 
[13:18:33.848]                           invokeRestart("muffleWarning")
[13:18:33.848]                       }
[13:18:33.848]                       else if (inherits(cond, "condition")) {
[13:18:33.848]                         if (!is.null(pattern)) {
[13:18:33.848]                           computeRestarts <- base::computeRestarts
[13:18:33.848]                           grepl <- base::grepl
[13:18:33.848]                           restarts <- computeRestarts(cond)
[13:18:33.848]                           for (restart in restarts) {
[13:18:33.848]                             name <- restart$name
[13:18:33.848]                             if (is.null(name)) 
[13:18:33.848]                               next
[13:18:33.848]                             if (!grepl(pattern, name)) 
[13:18:33.848]                               next
[13:18:33.848]                             invokeRestart(restart)
[13:18:33.848]                             muffled <- TRUE
[13:18:33.848]                             break
[13:18:33.848]                           }
[13:18:33.848]                         }
[13:18:33.848]                       }
[13:18:33.848]                       invisible(muffled)
[13:18:33.848]                     }
[13:18:33.848]                     muffleCondition(cond, pattern = "^muffle")
[13:18:33.848]                   }
[13:18:33.848]                 }
[13:18:33.848]                 else {
[13:18:33.848]                   if (TRUE) {
[13:18:33.848]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:33.848]                     {
[13:18:33.848]                       inherits <- base::inherits
[13:18:33.848]                       invokeRestart <- base::invokeRestart
[13:18:33.848]                       is.null <- base::is.null
[13:18:33.848]                       muffled <- FALSE
[13:18:33.848]                       if (inherits(cond, "message")) {
[13:18:33.848]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:33.848]                         if (muffled) 
[13:18:33.848]                           invokeRestart("muffleMessage")
[13:18:33.848]                       }
[13:18:33.848]                       else if (inherits(cond, "warning")) {
[13:18:33.848]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:33.848]                         if (muffled) 
[13:18:33.848]                           invokeRestart("muffleWarning")
[13:18:33.848]                       }
[13:18:33.848]                       else if (inherits(cond, "condition")) {
[13:18:33.848]                         if (!is.null(pattern)) {
[13:18:33.848]                           computeRestarts <- base::computeRestarts
[13:18:33.848]                           grepl <- base::grepl
[13:18:33.848]                           restarts <- computeRestarts(cond)
[13:18:33.848]                           for (restart in restarts) {
[13:18:33.848]                             name <- restart$name
[13:18:33.848]                             if (is.null(name)) 
[13:18:33.848]                               next
[13:18:33.848]                             if (!grepl(pattern, name)) 
[13:18:33.848]                               next
[13:18:33.848]                             invokeRestart(restart)
[13:18:33.848]                             muffled <- TRUE
[13:18:33.848]                             break
[13:18:33.848]                           }
[13:18:33.848]                         }
[13:18:33.848]                       }
[13:18:33.848]                       invisible(muffled)
[13:18:33.848]                     }
[13:18:33.848]                     muffleCondition(cond, pattern = "^muffle")
[13:18:33.848]                   }
[13:18:33.848]                 }
[13:18:33.848]             }
[13:18:33.848]         }))
[13:18:33.848]     }, error = function(ex) {
[13:18:33.848]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:33.848]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:33.848]                 ...future.rng), started = ...future.startTime, 
[13:18:33.848]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:33.848]             version = "1.8"), class = "FutureResult")
[13:18:33.848]     }, finally = {
[13:18:33.848]         if (!identical(...future.workdir, getwd())) 
[13:18:33.848]             setwd(...future.workdir)
[13:18:33.848]         {
[13:18:33.848]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:33.848]                 ...future.oldOptions$nwarnings <- NULL
[13:18:33.848]             }
[13:18:33.848]             base::options(...future.oldOptions)
[13:18:33.848]             if (.Platform$OS.type == "windows") {
[13:18:33.848]                 old_names <- names(...future.oldEnvVars)
[13:18:33.848]                 envs <- base::Sys.getenv()
[13:18:33.848]                 names <- names(envs)
[13:18:33.848]                 common <- intersect(names, old_names)
[13:18:33.848]                 added <- setdiff(names, old_names)
[13:18:33.848]                 removed <- setdiff(old_names, names)
[13:18:33.848]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:33.848]                   envs[common]]
[13:18:33.848]                 NAMES <- toupper(changed)
[13:18:33.848]                 args <- list()
[13:18:33.848]                 for (kk in seq_along(NAMES)) {
[13:18:33.848]                   name <- changed[[kk]]
[13:18:33.848]                   NAME <- NAMES[[kk]]
[13:18:33.848]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:33.848]                     next
[13:18:33.848]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:33.848]                 }
[13:18:33.848]                 NAMES <- toupper(added)
[13:18:33.848]                 for (kk in seq_along(NAMES)) {
[13:18:33.848]                   name <- added[[kk]]
[13:18:33.848]                   NAME <- NAMES[[kk]]
[13:18:33.848]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:33.848]                     next
[13:18:33.848]                   args[[name]] <- ""
[13:18:33.848]                 }
[13:18:33.848]                 NAMES <- toupper(removed)
[13:18:33.848]                 for (kk in seq_along(NAMES)) {
[13:18:33.848]                   name <- removed[[kk]]
[13:18:33.848]                   NAME <- NAMES[[kk]]
[13:18:33.848]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:33.848]                     next
[13:18:33.848]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:33.848]                 }
[13:18:33.848]                 if (length(args) > 0) 
[13:18:33.848]                   base::do.call(base::Sys.setenv, args = args)
[13:18:33.848]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:33.848]             }
[13:18:33.848]             else {
[13:18:33.848]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:33.848]             }
[13:18:33.848]             {
[13:18:33.848]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:33.848]                   0L) {
[13:18:33.848]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:33.848]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:33.848]                   base::options(opts)
[13:18:33.848]                 }
[13:18:33.848]                 {
[13:18:33.848]                   {
[13:18:33.848]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:33.848]                     NULL
[13:18:33.848]                   }
[13:18:33.848]                   options(future.plan = NULL)
[13:18:33.848]                   if (is.na(NA_character_)) 
[13:18:33.848]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:33.848]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:33.848]                   future::plan(list(function (..., workers = availableCores(), 
[13:18:33.848]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:18:33.848]                     envir = parent.frame()) 
[13:18:33.848]                   {
[13:18:33.848]                     if (is.function(workers)) 
[13:18:33.848]                       workers <- workers()
[13:18:33.848]                     workers <- structure(as.integer(workers), 
[13:18:33.848]                       class = class(workers))
[13:18:33.848]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:18:33.848]                       workers >= 1)
[13:18:33.848]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:18:33.848]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:18:33.848]                     }
[13:18:33.848]                     future <- MultisessionFuture(..., workers = workers, 
[13:18:33.848]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:18:33.848]                       envir = envir)
[13:18:33.848]                     if (!future$lazy) 
[13:18:33.848]                       future <- run(future)
[13:18:33.848]                     invisible(future)
[13:18:33.848]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:33.848]                 }
[13:18:33.848]             }
[13:18:33.848]         }
[13:18:33.848]     })
[13:18:33.848]     if (TRUE) {
[13:18:33.848]         base::sink(type = "output", split = FALSE)
[13:18:33.848]         if (TRUE) {
[13:18:33.848]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:33.848]         }
[13:18:33.848]         else {
[13:18:33.848]             ...future.result["stdout"] <- base::list(NULL)
[13:18:33.848]         }
[13:18:33.848]         base::close(...future.stdout)
[13:18:33.848]         ...future.stdout <- NULL
[13:18:33.848]     }
[13:18:33.848]     ...future.result$conditions <- ...future.conditions
[13:18:33.848]     ...future.result$finished <- base::Sys.time()
[13:18:33.848]     ...future.result
[13:18:33.848] }
[13:18:33.851] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[13:18:33.851] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[13:18:33.851] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[13:18:33.852] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[13:18:33.852] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[13:18:33.852] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[13:18:33.853] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[13:18:33.853] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[13:18:33.853] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[13:18:33.853] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[13:18:33.854] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[13:18:33.854] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[13:18:33.854] MultisessionFuture started
[13:18:33.855] - Launch lazy future ... done
[13:18:33.855] run() for ‘MultisessionFuture’ ... done
[13:18:33.855] Created future:
[13:18:33.855] MultisessionFuture:
[13:18:33.855] Label: ‘future_replicate-1’
[13:18:33.855] Expression:
[13:18:33.855] {
[13:18:33.855]     do.call(function(...) {
[13:18:33.855]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:33.855]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:33.855]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:33.855]             on.exit(options(oopts), add = TRUE)
[13:18:33.855]         }
[13:18:33.855]         {
[13:18:33.855]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:33.855]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:33.855]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:33.855]                   envir = globalenv(), inherits = FALSE)
[13:18:33.855]                 ...future.FUN(...future.X_jj, ...)
[13:18:33.855]             })
[13:18:33.855]         }
[13:18:33.855]     }, args = future.call.arguments)
[13:18:33.855] }
[13:18:33.855] Lazy evaluation: FALSE
[13:18:33.855] Asynchronous evaluation: TRUE
[13:18:33.855] Local evaluation: TRUE
[13:18:33.855] Environment: R_GlobalEnv
[13:18:33.855] Capture standard output: TRUE
[13:18:33.855] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:33.855] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:33.855] Packages: <none>
[13:18:33.855] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:33.855] Resolved: FALSE
[13:18:33.855] Value: <not collected>
[13:18:33.855] Conditions captured: <none>
[13:18:33.855] Early signaling: FALSE
[13:18:33.855] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:33.855] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:33.867] Chunk #1 of 2 ... DONE
[13:18:33.867] Chunk #2 of 2 ...
[13:18:33.867]  - Finding globals in 'X' for chunk #2 ...
[13:18:33.867] getGlobalsAndPackages() ...
[13:18:33.868] Searching for globals...
[13:18:33.868] 
[13:18:33.868] Searching for globals ... DONE
[13:18:33.868] - globals: [0] <none>
[13:18:33.868] getGlobalsAndPackages() ... DONE
[13:18:33.868]    + additional globals found: [n=0] 
[13:18:33.869]    + additional namespaces needed: [n=0] 
[13:18:33.869]  - Finding globals in 'X' for chunk #2 ... DONE
[13:18:33.869]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[13:18:33.869]  - seeds: [3] <seeds>
[13:18:33.869] getGlobalsAndPackages() ...
[13:18:33.869] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:33.869] Resolving globals: FALSE
[13:18:33.870] Tweak future expression to call with '...' arguments ...
[13:18:33.870] {
[13:18:33.870]     do.call(function(...) {
[13:18:33.870]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:33.870]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:33.870]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:33.870]             on.exit(options(oopts), add = TRUE)
[13:18:33.870]         }
[13:18:33.870]         {
[13:18:33.870]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:33.870]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:33.870]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:33.870]                   envir = globalenv(), inherits = FALSE)
[13:18:33.870]                 ...future.FUN(...future.X_jj, ...)
[13:18:33.870]             })
[13:18:33.870]         }
[13:18:33.870]     }, args = future.call.arguments)
[13:18:33.870] }
[13:18:33.870] Tweak future expression to call with '...' arguments ... DONE
[13:18:33.870] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:33.871] 
[13:18:33.871] getGlobalsAndPackages() ... DONE
[13:18:33.871] run() for ‘Future’ ...
[13:18:33.871] - state: ‘created’
[13:18:33.871] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:18:33.886] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:33.887] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:18:33.887]   - Field: ‘node’
[13:18:33.887]   - Field: ‘label’
[13:18:33.887]   - Field: ‘local’
[13:18:33.887]   - Field: ‘owner’
[13:18:33.887]   - Field: ‘envir’
[13:18:33.887]   - Field: ‘workers’
[13:18:33.887]   - Field: ‘packages’
[13:18:33.887]   - Field: ‘gc’
[13:18:33.888]   - Field: ‘conditions’
[13:18:33.888]   - Field: ‘persistent’
[13:18:33.888]   - Field: ‘expr’
[13:18:33.888]   - Field: ‘uuid’
[13:18:33.888]   - Field: ‘seed’
[13:18:33.888]   - Field: ‘version’
[13:18:33.888]   - Field: ‘result’
[13:18:33.888]   - Field: ‘asynchronous’
[13:18:33.888]   - Field: ‘calls’
[13:18:33.889]   - Field: ‘globals’
[13:18:33.889]   - Field: ‘stdout’
[13:18:33.889]   - Field: ‘earlySignal’
[13:18:33.889]   - Field: ‘lazy’
[13:18:33.889]   - Field: ‘state’
[13:18:33.889] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:18:33.889] - Launch lazy future ...
[13:18:33.890] Packages needed by the future expression (n = 0): <none>
[13:18:33.890] Packages needed by future strategies (n = 0): <none>
[13:18:33.890] {
[13:18:33.890]     {
[13:18:33.890]         {
[13:18:33.890]             ...future.startTime <- base::Sys.time()
[13:18:33.890]             {
[13:18:33.890]                 {
[13:18:33.890]                   {
[13:18:33.890]                     {
[13:18:33.890]                       base::local({
[13:18:33.890]                         has_future <- base::requireNamespace("future", 
[13:18:33.890]                           quietly = TRUE)
[13:18:33.890]                         if (has_future) {
[13:18:33.890]                           ns <- base::getNamespace("future")
[13:18:33.890]                           version <- ns[[".package"]][["version"]]
[13:18:33.890]                           if (is.null(version)) 
[13:18:33.890]                             version <- utils::packageVersion("future")
[13:18:33.890]                         }
[13:18:33.890]                         else {
[13:18:33.890]                           version <- NULL
[13:18:33.890]                         }
[13:18:33.890]                         if (!has_future || version < "1.8.0") {
[13:18:33.890]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:33.890]                             "", base::R.version$version.string), 
[13:18:33.890]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:33.890]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:33.890]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:33.890]                               "release", "version")], collapse = " "), 
[13:18:33.890]                             hostname = base::Sys.info()[["nodename"]])
[13:18:33.890]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:33.890]                             info)
[13:18:33.890]                           info <- base::paste(info, collapse = "; ")
[13:18:33.890]                           if (!has_future) {
[13:18:33.890]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:33.890]                               info)
[13:18:33.890]                           }
[13:18:33.890]                           else {
[13:18:33.890]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:33.890]                               info, version)
[13:18:33.890]                           }
[13:18:33.890]                           base::stop(msg)
[13:18:33.890]                         }
[13:18:33.890]                       })
[13:18:33.890]                     }
[13:18:33.890]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:33.890]                     base::options(mc.cores = 1L)
[13:18:33.890]                   }
[13:18:33.890]                   options(future.plan = NULL)
[13:18:33.890]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:33.890]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:33.890]                 }
[13:18:33.890]                 ...future.workdir <- getwd()
[13:18:33.890]             }
[13:18:33.890]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:33.890]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:33.890]         }
[13:18:33.890]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:33.890]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[13:18:33.890]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:33.890]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:33.890]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:33.890]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:33.890]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:33.890]             base::names(...future.oldOptions))
[13:18:33.890]     }
[13:18:33.890]     if (FALSE) {
[13:18:33.890]     }
[13:18:33.890]     else {
[13:18:33.890]         if (TRUE) {
[13:18:33.890]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:33.890]                 open = "w")
[13:18:33.890]         }
[13:18:33.890]         else {
[13:18:33.890]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:33.890]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:33.890]         }
[13:18:33.890]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:33.890]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:33.890]             base::sink(type = "output", split = FALSE)
[13:18:33.890]             base::close(...future.stdout)
[13:18:33.890]         }, add = TRUE)
[13:18:33.890]     }
[13:18:33.890]     ...future.frame <- base::sys.nframe()
[13:18:33.890]     ...future.conditions <- base::list()
[13:18:33.890]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:33.890]     if (FALSE) {
[13:18:33.890]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:33.890]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:33.890]     }
[13:18:33.890]     ...future.result <- base::tryCatch({
[13:18:33.890]         base::withCallingHandlers({
[13:18:33.890]             ...future.value <- base::withVisible(base::local({
[13:18:33.890]                 ...future.makeSendCondition <- local({
[13:18:33.890]                   sendCondition <- NULL
[13:18:33.890]                   function(frame = 1L) {
[13:18:33.890]                     if (is.function(sendCondition)) 
[13:18:33.890]                       return(sendCondition)
[13:18:33.890]                     ns <- getNamespace("parallel")
[13:18:33.890]                     if (exists("sendData", mode = "function", 
[13:18:33.890]                       envir = ns)) {
[13:18:33.890]                       parallel_sendData <- get("sendData", mode = "function", 
[13:18:33.890]                         envir = ns)
[13:18:33.890]                       envir <- sys.frame(frame)
[13:18:33.890]                       master <- NULL
[13:18:33.890]                       while (!identical(envir, .GlobalEnv) && 
[13:18:33.890]                         !identical(envir, emptyenv())) {
[13:18:33.890]                         if (exists("master", mode = "list", envir = envir, 
[13:18:33.890]                           inherits = FALSE)) {
[13:18:33.890]                           master <- get("master", mode = "list", 
[13:18:33.890]                             envir = envir, inherits = FALSE)
[13:18:33.890]                           if (inherits(master, c("SOCKnode", 
[13:18:33.890]                             "SOCK0node"))) {
[13:18:33.890]                             sendCondition <<- function(cond) {
[13:18:33.890]                               data <- list(type = "VALUE", value = cond, 
[13:18:33.890]                                 success = TRUE)
[13:18:33.890]                               parallel_sendData(master, data)
[13:18:33.890]                             }
[13:18:33.890]                             return(sendCondition)
[13:18:33.890]                           }
[13:18:33.890]                         }
[13:18:33.890]                         frame <- frame + 1L
[13:18:33.890]                         envir <- sys.frame(frame)
[13:18:33.890]                       }
[13:18:33.890]                     }
[13:18:33.890]                     sendCondition <<- function(cond) NULL
[13:18:33.890]                   }
[13:18:33.890]                 })
[13:18:33.890]                 withCallingHandlers({
[13:18:33.890]                   {
[13:18:33.890]                     do.call(function(...) {
[13:18:33.890]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:33.890]                       if (!identical(...future.globals.maxSize.org, 
[13:18:33.890]                         ...future.globals.maxSize)) {
[13:18:33.890]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:33.890]                         on.exit(options(oopts), add = TRUE)
[13:18:33.890]                       }
[13:18:33.890]                       {
[13:18:33.890]                         lapply(seq_along(...future.elements_ii), 
[13:18:33.890]                           FUN = function(jj) {
[13:18:33.890]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:33.890]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:33.890]                               envir = globalenv(), inherits = FALSE)
[13:18:33.890]                             ...future.FUN(...future.X_jj, ...)
[13:18:33.890]                           })
[13:18:33.890]                       }
[13:18:33.890]                     }, args = future.call.arguments)
[13:18:33.890]                   }
[13:18:33.890]                 }, immediateCondition = function(cond) {
[13:18:33.890]                   sendCondition <- ...future.makeSendCondition()
[13:18:33.890]                   sendCondition(cond)
[13:18:33.890]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:33.890]                   {
[13:18:33.890]                     inherits <- base::inherits
[13:18:33.890]                     invokeRestart <- base::invokeRestart
[13:18:33.890]                     is.null <- base::is.null
[13:18:33.890]                     muffled <- FALSE
[13:18:33.890]                     if (inherits(cond, "message")) {
[13:18:33.890]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:33.890]                       if (muffled) 
[13:18:33.890]                         invokeRestart("muffleMessage")
[13:18:33.890]                     }
[13:18:33.890]                     else if (inherits(cond, "warning")) {
[13:18:33.890]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:33.890]                       if (muffled) 
[13:18:33.890]                         invokeRestart("muffleWarning")
[13:18:33.890]                     }
[13:18:33.890]                     else if (inherits(cond, "condition")) {
[13:18:33.890]                       if (!is.null(pattern)) {
[13:18:33.890]                         computeRestarts <- base::computeRestarts
[13:18:33.890]                         grepl <- base::grepl
[13:18:33.890]                         restarts <- computeRestarts(cond)
[13:18:33.890]                         for (restart in restarts) {
[13:18:33.890]                           name <- restart$name
[13:18:33.890]                           if (is.null(name)) 
[13:18:33.890]                             next
[13:18:33.890]                           if (!grepl(pattern, name)) 
[13:18:33.890]                             next
[13:18:33.890]                           invokeRestart(restart)
[13:18:33.890]                           muffled <- TRUE
[13:18:33.890]                           break
[13:18:33.890]                         }
[13:18:33.890]                       }
[13:18:33.890]                     }
[13:18:33.890]                     invisible(muffled)
[13:18:33.890]                   }
[13:18:33.890]                   muffleCondition(cond)
[13:18:33.890]                 })
[13:18:33.890]             }))
[13:18:33.890]             future::FutureResult(value = ...future.value$value, 
[13:18:33.890]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:33.890]                   ...future.rng), globalenv = if (FALSE) 
[13:18:33.890]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:33.890]                     ...future.globalenv.names))
[13:18:33.890]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:33.890]         }, condition = base::local({
[13:18:33.890]             c <- base::c
[13:18:33.890]             inherits <- base::inherits
[13:18:33.890]             invokeRestart <- base::invokeRestart
[13:18:33.890]             length <- base::length
[13:18:33.890]             list <- base::list
[13:18:33.890]             seq.int <- base::seq.int
[13:18:33.890]             signalCondition <- base::signalCondition
[13:18:33.890]             sys.calls <- base::sys.calls
[13:18:33.890]             `[[` <- base::`[[`
[13:18:33.890]             `+` <- base::`+`
[13:18:33.890]             `<<-` <- base::`<<-`
[13:18:33.890]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:33.890]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:33.890]                   3L)]
[13:18:33.890]             }
[13:18:33.890]             function(cond) {
[13:18:33.890]                 is_error <- inherits(cond, "error")
[13:18:33.890]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:33.890]                   NULL)
[13:18:33.890]                 if (is_error) {
[13:18:33.890]                   sessionInformation <- function() {
[13:18:33.890]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:33.890]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:33.890]                       search = base::search(), system = base::Sys.info())
[13:18:33.890]                   }
[13:18:33.890]                   ...future.conditions[[length(...future.conditions) + 
[13:18:33.890]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:33.890]                     cond$call), session = sessionInformation(), 
[13:18:33.890]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:33.890]                   signalCondition(cond)
[13:18:33.890]                 }
[13:18:33.890]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:33.890]                 "immediateCondition"))) {
[13:18:33.890]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:33.890]                   ...future.conditions[[length(...future.conditions) + 
[13:18:33.890]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:33.890]                   if (TRUE && !signal) {
[13:18:33.890]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:33.890]                     {
[13:18:33.890]                       inherits <- base::inherits
[13:18:33.890]                       invokeRestart <- base::invokeRestart
[13:18:33.890]                       is.null <- base::is.null
[13:18:33.890]                       muffled <- FALSE
[13:18:33.890]                       if (inherits(cond, "message")) {
[13:18:33.890]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:33.890]                         if (muffled) 
[13:18:33.890]                           invokeRestart("muffleMessage")
[13:18:33.890]                       }
[13:18:33.890]                       else if (inherits(cond, "warning")) {
[13:18:33.890]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:33.890]                         if (muffled) 
[13:18:33.890]                           invokeRestart("muffleWarning")
[13:18:33.890]                       }
[13:18:33.890]                       else if (inherits(cond, "condition")) {
[13:18:33.890]                         if (!is.null(pattern)) {
[13:18:33.890]                           computeRestarts <- base::computeRestarts
[13:18:33.890]                           grepl <- base::grepl
[13:18:33.890]                           restarts <- computeRestarts(cond)
[13:18:33.890]                           for (restart in restarts) {
[13:18:33.890]                             name <- restart$name
[13:18:33.890]                             if (is.null(name)) 
[13:18:33.890]                               next
[13:18:33.890]                             if (!grepl(pattern, name)) 
[13:18:33.890]                               next
[13:18:33.890]                             invokeRestart(restart)
[13:18:33.890]                             muffled <- TRUE
[13:18:33.890]                             break
[13:18:33.890]                           }
[13:18:33.890]                         }
[13:18:33.890]                       }
[13:18:33.890]                       invisible(muffled)
[13:18:33.890]                     }
[13:18:33.890]                     muffleCondition(cond, pattern = "^muffle")
[13:18:33.890]                   }
[13:18:33.890]                 }
[13:18:33.890]                 else {
[13:18:33.890]                   if (TRUE) {
[13:18:33.890]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:33.890]                     {
[13:18:33.890]                       inherits <- base::inherits
[13:18:33.890]                       invokeRestart <- base::invokeRestart
[13:18:33.890]                       is.null <- base::is.null
[13:18:33.890]                       muffled <- FALSE
[13:18:33.890]                       if (inherits(cond, "message")) {
[13:18:33.890]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:33.890]                         if (muffled) 
[13:18:33.890]                           invokeRestart("muffleMessage")
[13:18:33.890]                       }
[13:18:33.890]                       else if (inherits(cond, "warning")) {
[13:18:33.890]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:33.890]                         if (muffled) 
[13:18:33.890]                           invokeRestart("muffleWarning")
[13:18:33.890]                       }
[13:18:33.890]                       else if (inherits(cond, "condition")) {
[13:18:33.890]                         if (!is.null(pattern)) {
[13:18:33.890]                           computeRestarts <- base::computeRestarts
[13:18:33.890]                           grepl <- base::grepl
[13:18:33.890]                           restarts <- computeRestarts(cond)
[13:18:33.890]                           for (restart in restarts) {
[13:18:33.890]                             name <- restart$name
[13:18:33.890]                             if (is.null(name)) 
[13:18:33.890]                               next
[13:18:33.890]                             if (!grepl(pattern, name)) 
[13:18:33.890]                               next
[13:18:33.890]                             invokeRestart(restart)
[13:18:33.890]                             muffled <- TRUE
[13:18:33.890]                             break
[13:18:33.890]                           }
[13:18:33.890]                         }
[13:18:33.890]                       }
[13:18:33.890]                       invisible(muffled)
[13:18:33.890]                     }
[13:18:33.890]                     muffleCondition(cond, pattern = "^muffle")
[13:18:33.890]                   }
[13:18:33.890]                 }
[13:18:33.890]             }
[13:18:33.890]         }))
[13:18:33.890]     }, error = function(ex) {
[13:18:33.890]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:33.890]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:33.890]                 ...future.rng), started = ...future.startTime, 
[13:18:33.890]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:33.890]             version = "1.8"), class = "FutureResult")
[13:18:33.890]     }, finally = {
[13:18:33.890]         if (!identical(...future.workdir, getwd())) 
[13:18:33.890]             setwd(...future.workdir)
[13:18:33.890]         {
[13:18:33.890]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:33.890]                 ...future.oldOptions$nwarnings <- NULL
[13:18:33.890]             }
[13:18:33.890]             base::options(...future.oldOptions)
[13:18:33.890]             if (.Platform$OS.type == "windows") {
[13:18:33.890]                 old_names <- names(...future.oldEnvVars)
[13:18:33.890]                 envs <- base::Sys.getenv()
[13:18:33.890]                 names <- names(envs)
[13:18:33.890]                 common <- intersect(names, old_names)
[13:18:33.890]                 added <- setdiff(names, old_names)
[13:18:33.890]                 removed <- setdiff(old_names, names)
[13:18:33.890]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:33.890]                   envs[common]]
[13:18:33.890]                 NAMES <- toupper(changed)
[13:18:33.890]                 args <- list()
[13:18:33.890]                 for (kk in seq_along(NAMES)) {
[13:18:33.890]                   name <- changed[[kk]]
[13:18:33.890]                   NAME <- NAMES[[kk]]
[13:18:33.890]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:33.890]                     next
[13:18:33.890]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:33.890]                 }
[13:18:33.890]                 NAMES <- toupper(added)
[13:18:33.890]                 for (kk in seq_along(NAMES)) {
[13:18:33.890]                   name <- added[[kk]]
[13:18:33.890]                   NAME <- NAMES[[kk]]
[13:18:33.890]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:33.890]                     next
[13:18:33.890]                   args[[name]] <- ""
[13:18:33.890]                 }
[13:18:33.890]                 NAMES <- toupper(removed)
[13:18:33.890]                 for (kk in seq_along(NAMES)) {
[13:18:33.890]                   name <- removed[[kk]]
[13:18:33.890]                   NAME <- NAMES[[kk]]
[13:18:33.890]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:33.890]                     next
[13:18:33.890]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:33.890]                 }
[13:18:33.890]                 if (length(args) > 0) 
[13:18:33.890]                   base::do.call(base::Sys.setenv, args = args)
[13:18:33.890]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:33.890]             }
[13:18:33.890]             else {
[13:18:33.890]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:33.890]             }
[13:18:33.890]             {
[13:18:33.890]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:33.890]                   0L) {
[13:18:33.890]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:33.890]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:33.890]                   base::options(opts)
[13:18:33.890]                 }
[13:18:33.890]                 {
[13:18:33.890]                   {
[13:18:33.890]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:33.890]                     NULL
[13:18:33.890]                   }
[13:18:33.890]                   options(future.plan = NULL)
[13:18:33.890]                   if (is.na(NA_character_)) 
[13:18:33.890]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:33.890]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:33.890]                   future::plan(list(function (..., workers = availableCores(), 
[13:18:33.890]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:18:33.890]                     envir = parent.frame()) 
[13:18:33.890]                   {
[13:18:33.890]                     if (is.function(workers)) 
[13:18:33.890]                       workers <- workers()
[13:18:33.890]                     workers <- structure(as.integer(workers), 
[13:18:33.890]                       class = class(workers))
[13:18:33.890]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:18:33.890]                       workers >= 1)
[13:18:33.890]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:18:33.890]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:18:33.890]                     }
[13:18:33.890]                     future <- MultisessionFuture(..., workers = workers, 
[13:18:33.890]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:18:33.890]                       envir = envir)
[13:18:33.890]                     if (!future$lazy) 
[13:18:33.890]                       future <- run(future)
[13:18:33.890]                     invisible(future)
[13:18:33.890]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:33.890]                 }
[13:18:33.890]             }
[13:18:33.890]         }
[13:18:33.890]     })
[13:18:33.890]     if (TRUE) {
[13:18:33.890]         base::sink(type = "output", split = FALSE)
[13:18:33.890]         if (TRUE) {
[13:18:33.890]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:33.890]         }
[13:18:33.890]         else {
[13:18:33.890]             ...future.result["stdout"] <- base::list(NULL)
[13:18:33.890]         }
[13:18:33.890]         base::close(...future.stdout)
[13:18:33.890]         ...future.stdout <- NULL
[13:18:33.890]     }
[13:18:33.890]     ...future.result$conditions <- ...future.conditions
[13:18:33.890]     ...future.result$finished <- base::Sys.time()
[13:18:33.890]     ...future.result
[13:18:33.890] }
[13:18:33.962] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[13:18:33.962] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[13:18:33.962] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[13:18:33.963] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[13:18:33.963] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[13:18:33.963] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[13:18:33.964] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[13:18:33.964] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[13:18:33.964] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[13:18:33.965] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[13:18:33.965] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[13:18:33.965] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[13:18:33.966] MultisessionFuture started
[13:18:33.966] - Launch lazy future ... done
[13:18:33.966] run() for ‘MultisessionFuture’ ... done
[13:18:33.966] Created future:
[13:18:33.967] MultisessionFuture:
[13:18:33.967] Label: ‘future_replicate-2’
[13:18:33.967] Expression:
[13:18:33.967] {
[13:18:33.967]     do.call(function(...) {
[13:18:33.967]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:33.967]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:33.967]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:33.967]             on.exit(options(oopts), add = TRUE)
[13:18:33.967]         }
[13:18:33.967]         {
[13:18:33.967]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:33.967]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:33.967]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:33.967]                   envir = globalenv(), inherits = FALSE)
[13:18:33.967]                 ...future.FUN(...future.X_jj, ...)
[13:18:33.967]             })
[13:18:33.967]         }
[13:18:33.967]     }, args = future.call.arguments)
[13:18:33.967] }
[13:18:33.967] Lazy evaluation: FALSE
[13:18:33.967] Asynchronous evaluation: TRUE
[13:18:33.967] Local evaluation: TRUE
[13:18:33.967] Environment: R_GlobalEnv
[13:18:33.967] Capture standard output: TRUE
[13:18:33.967] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:33.967] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:33.967] Packages: <none>
[13:18:33.967] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:33.967] Resolved: FALSE
[13:18:33.967] Value: <not collected>
[13:18:33.967] Conditions captured: <none>
[13:18:33.967] Early signaling: FALSE
[13:18:33.967] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:33.967] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:33.978] Chunk #2 of 2 ... DONE
[13:18:33.979] Launching 2 futures (chunks) ... DONE
[13:18:33.979] Resolving 2 futures (chunks) ...
[13:18:33.979] resolve() on list ...
[13:18:33.979]  recursive: 0
[13:18:33.979]  length: 2
[13:18:33.979] 
[13:18:33.980] receiveMessageFromWorker() for ClusterFuture ...
[13:18:33.980] - Validating connection of MultisessionFuture
[13:18:33.980] - received message: FutureResult
[13:18:33.983] - Received FutureResult
[13:18:33.983] - Erased future from FutureRegistry
[13:18:33.983] result() for ClusterFuture ...
[13:18:33.983] - result already collected: FutureResult
[13:18:33.983] result() for ClusterFuture ... done
[13:18:33.983] receiveMessageFromWorker() for ClusterFuture ... done
[13:18:33.983] Future #1
[13:18:33.983] result() for ClusterFuture ...
[13:18:33.983] - result already collected: FutureResult
[13:18:33.983] result() for ClusterFuture ... done
[13:18:33.983] result() for ClusterFuture ...
[13:18:33.984] - result already collected: FutureResult
[13:18:33.984] result() for ClusterFuture ... done
[13:18:33.984] signalConditionsASAP(MultisessionFuture, pos=1) ...
[13:18:33.984] - nx: 2
[13:18:33.984] - relay: TRUE
[13:18:33.984] - stdout: TRUE
[13:18:33.984] - signal: TRUE
[13:18:33.984] - resignal: FALSE
[13:18:33.984] - force: TRUE
[13:18:33.984] - relayed: [n=2] FALSE, FALSE
[13:18:33.984] - queued futures: [n=2] FALSE, FALSE
[13:18:33.984]  - until=1
[13:18:33.985]  - relaying element #1
[13:18:33.985] result() for ClusterFuture ...
[13:18:33.985] - result already collected: FutureResult
[13:18:33.985] result() for ClusterFuture ... done
[13:18:33.985] result() for ClusterFuture ...
[13:18:33.985] - result already collected: FutureResult
[13:18:33.985] result() for ClusterFuture ... done
[13:18:33.985] result() for ClusterFuture ...
[13:18:33.985] - result already collected: FutureResult
[13:18:33.985] result() for ClusterFuture ... done
[13:18:33.985] result() for ClusterFuture ...
[13:18:33.986] - result already collected: FutureResult
[13:18:33.986] result() for ClusterFuture ... done
[13:18:33.986] - relayed: [n=2] TRUE, FALSE
[13:18:33.986] - queued futures: [n=2] TRUE, FALSE
[13:18:33.986] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[13:18:33.986]  length: 1 (resolved future 1)
[13:18:34.049] receiveMessageFromWorker() for ClusterFuture ...
[13:18:34.049] - Validating connection of MultisessionFuture
[13:18:34.049] - received message: FutureResult
[13:18:34.049] - Received FutureResult
[13:18:34.049] - Erased future from FutureRegistry
[13:18:34.049] result() for ClusterFuture ...
[13:18:34.050] - result already collected: FutureResult
[13:18:34.050] result() for ClusterFuture ... done
[13:18:34.050] receiveMessageFromWorker() for ClusterFuture ... done
[13:18:34.050] Future #2
[13:18:34.050] result() for ClusterFuture ...
[13:18:34.050] - result already collected: FutureResult
[13:18:34.050] result() for ClusterFuture ... done
[13:18:34.050] result() for ClusterFuture ...
[13:18:34.050] - result already collected: FutureResult
[13:18:34.050] result() for ClusterFuture ... done
[13:18:34.051] signalConditionsASAP(MultisessionFuture, pos=2) ...
[13:18:34.051] - nx: 2
[13:18:34.051] - relay: TRUE
[13:18:34.051] - stdout: TRUE
[13:18:34.051] - signal: TRUE
[13:18:34.051] - resignal: FALSE
[13:18:34.051] - force: TRUE
[13:18:34.051] - relayed: [n=2] TRUE, FALSE
[13:18:34.051] - queued futures: [n=2] TRUE, FALSE
[13:18:34.051]  - until=2
[13:18:34.051]  - relaying element #2
[13:18:34.051] result() for ClusterFuture ...
[13:18:34.052] - result already collected: FutureResult
[13:18:34.052] result() for ClusterFuture ... done
[13:18:34.052] result() for ClusterFuture ...
[13:18:34.052] - result already collected: FutureResult
[13:18:34.052] result() for ClusterFuture ... done
[13:18:34.052] result() for ClusterFuture ...
[13:18:34.052] - result already collected: FutureResult
[13:18:34.052] result() for ClusterFuture ... done
[13:18:34.052] result() for ClusterFuture ...
[13:18:34.052] - result already collected: FutureResult
[13:18:34.052] result() for ClusterFuture ... done
[13:18:34.052] - relayed: [n=2] TRUE, TRUE
[13:18:34.053] - queued futures: [n=2] TRUE, TRUE
[13:18:34.053] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[13:18:34.053]  length: 0 (resolved future 2)
[13:18:34.053] Relaying remaining futures
[13:18:34.053] signalConditionsASAP(NULL, pos=0) ...
[13:18:34.053] - nx: 2
[13:18:34.053] - relay: TRUE
[13:18:34.053] - stdout: TRUE
[13:18:34.053] - signal: TRUE
[13:18:34.053] - resignal: FALSE
[13:18:34.053] - force: TRUE
[13:18:34.054] - relayed: [n=2] TRUE, TRUE
[13:18:34.054] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:18:34.054] - relayed: [n=2] TRUE, TRUE
[13:18:34.054] - queued futures: [n=2] TRUE, TRUE
[13:18:34.054] signalConditionsASAP(NULL, pos=0) ... done
[13:18:34.054] resolve() on list ... DONE
[13:18:34.054] result() for ClusterFuture ...
[13:18:34.054] - result already collected: FutureResult
[13:18:34.054] result() for ClusterFuture ... done
[13:18:34.054] result() for ClusterFuture ...
[13:18:34.054] - result already collected: FutureResult
[13:18:34.055] result() for ClusterFuture ... done
[13:18:34.055] result() for ClusterFuture ...
[13:18:34.055] - result already collected: FutureResult
[13:18:34.055] result() for ClusterFuture ... done
[13:18:34.055] result() for ClusterFuture ...
[13:18:34.055] - result already collected: FutureResult
[13:18:34.055] result() for ClusterFuture ... done
[13:18:34.055]  - Number of value chunks collected: 2
[13:18:34.055] Resolving 2 futures (chunks) ... DONE
[13:18:34.055] Reducing values from 2 chunks ...
[13:18:34.055]  - Number of values collected after concatenation: 5
[13:18:34.056]  - Number of values expected: 5
[13:18:34.056] Reducing values from 2 chunks ... DONE
[13:18:34.056] future_lapply() ... DONE
[13:18:34.056] future_lapply() ...
[13:18:34.056] Generating random seeds ...
[13:18:34.056] Generating random seed streams for 5 elements ...
[13:18:34.057] Generating random seed streams for 5 elements ... DONE
[13:18:34.057] Generating random seeds ... DONE
[13:18:34.057] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:18:34.061] Number of chunks: 2
[13:18:34.061] getGlobalsAndPackagesXApply() ...
[13:18:34.061]  - future.globals: TRUE
[13:18:34.061] getGlobalsAndPackages() ...
[13:18:34.061] Searching for globals...
[13:18:34.062] - globals found: [2] ‘FUN’, ‘sample’
[13:18:34.063] Searching for globals ... DONE
[13:18:34.063] Resolving globals: FALSE
[13:18:34.063] The total size of the 1 globals is 616 bytes (616 bytes)
[13:18:34.063] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:18:34.063] - globals: [1] ‘FUN’
[13:18:34.064] 
[13:18:34.064] getGlobalsAndPackages() ... DONE
[13:18:34.064]  - globals found/used: [n=1] ‘FUN’
[13:18:34.064]  - needed namespaces: [n=0] 
[13:18:34.064] Finding globals ... DONE
[13:18:34.064]  - use_args: TRUE
[13:18:34.064]  - Getting '...' globals ...
[13:18:34.064] resolve() on list ...
[13:18:34.064]  recursive: 0
[13:18:34.065]  length: 1
[13:18:34.065]  elements: ‘...’
[13:18:34.065]  length: 0 (resolved future 1)
[13:18:34.065] resolve() on list ... DONE
[13:18:34.065]    - '...' content: [n=0] 
[13:18:34.065] List of 1
[13:18:34.065]  $ ...: list()
[13:18:34.065]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:34.065]  - attr(*, "where")=List of 1
[13:18:34.065]   ..$ ...:<environment: 0x55df1e040d48> 
[13:18:34.065]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:34.065]  - attr(*, "resolved")= logi TRUE
[13:18:34.065]  - attr(*, "total_size")= num NA
[13:18:34.068]  - Getting '...' globals ... DONE
[13:18:34.068] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:18:34.068] List of 2
[13:18:34.068]  $ ...future.FUN:function (...)  
[13:18:34.068]  $ ...          : list()
[13:18:34.068]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:34.068]  - attr(*, "where")=List of 2
[13:18:34.068]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:18:34.068]   ..$ ...          :<environment: 0x55df1e040d48> 
[13:18:34.068]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:34.068]  - attr(*, "resolved")= logi FALSE
[13:18:34.068]  - attr(*, "total_size")= num 616
[13:18:34.071] Packages to be attached in all futures: [n=0] 
[13:18:34.071] getGlobalsAndPackagesXApply() ... DONE
[13:18:34.071] Number of futures (= number of chunks): 2
[13:18:34.071] Launching 2 futures (chunks) ...
[13:18:34.071] Chunk #1 of 2 ...
[13:18:34.071]  - Finding globals in 'X' for chunk #1 ...
[13:18:34.071] getGlobalsAndPackages() ...
[13:18:34.071] Searching for globals...
[13:18:34.072] 
[13:18:34.072] Searching for globals ... DONE
[13:18:34.072] - globals: [0] <none>
[13:18:34.072] getGlobalsAndPackages() ... DONE
[13:18:34.072]    + additional globals found: [n=0] 
[13:18:34.072]    + additional namespaces needed: [n=0] 
[13:18:34.072]  - Finding globals in 'X' for chunk #1 ... DONE
[13:18:34.072]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:18:34.072]  - seeds: [2] <seeds>
[13:18:34.072] getGlobalsAndPackages() ...
[13:18:34.073] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:34.073] Resolving globals: FALSE
[13:18:34.073] Tweak future expression to call with '...' arguments ...
[13:18:34.073] {
[13:18:34.073]     do.call(function(...) {
[13:18:34.073]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.073]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:34.073]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.073]             on.exit(options(oopts), add = TRUE)
[13:18:34.073]         }
[13:18:34.073]         {
[13:18:34.073]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:34.073]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.073]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.073]                   envir = globalenv(), inherits = FALSE)
[13:18:34.073]                 ...future.FUN(...future.X_jj, ...)
[13:18:34.073]             })
[13:18:34.073]         }
[13:18:34.073]     }, args = future.call.arguments)
[13:18:34.073] }
[13:18:34.073] Tweak future expression to call with '...' arguments ... DONE
[13:18:34.074] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:34.074] 
[13:18:34.074] getGlobalsAndPackages() ... DONE
[13:18:34.074] run() for ‘Future’ ...
[13:18:34.074] - state: ‘created’
[13:18:34.074] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:18:34.089] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:34.089] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:18:34.089]   - Field: ‘node’
[13:18:34.089]   - Field: ‘label’
[13:18:34.089]   - Field: ‘local’
[13:18:34.089]   - Field: ‘owner’
[13:18:34.089]   - Field: ‘envir’
[13:18:34.090]   - Field: ‘workers’
[13:18:34.090]   - Field: ‘packages’
[13:18:34.090]   - Field: ‘gc’
[13:18:34.090]   - Field: ‘conditions’
[13:18:34.090]   - Field: ‘persistent’
[13:18:34.090]   - Field: ‘expr’
[13:18:34.090]   - Field: ‘uuid’
[13:18:34.090]   - Field: ‘seed’
[13:18:34.090]   - Field: ‘version’
[13:18:34.090]   - Field: ‘result’
[13:18:34.090]   - Field: ‘asynchronous’
[13:18:34.091]   - Field: ‘calls’
[13:18:34.091]   - Field: ‘globals’
[13:18:34.091]   - Field: ‘stdout’
[13:18:34.091]   - Field: ‘earlySignal’
[13:18:34.091]   - Field: ‘lazy’
[13:18:34.091]   - Field: ‘state’
[13:18:34.091] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:18:34.091] - Launch lazy future ...
[13:18:34.092] Packages needed by the future expression (n = 0): <none>
[13:18:34.092] Packages needed by future strategies (n = 0): <none>
[13:18:34.092] {
[13:18:34.092]     {
[13:18:34.092]         {
[13:18:34.092]             ...future.startTime <- base::Sys.time()
[13:18:34.092]             {
[13:18:34.092]                 {
[13:18:34.092]                   {
[13:18:34.092]                     {
[13:18:34.092]                       base::local({
[13:18:34.092]                         has_future <- base::requireNamespace("future", 
[13:18:34.092]                           quietly = TRUE)
[13:18:34.092]                         if (has_future) {
[13:18:34.092]                           ns <- base::getNamespace("future")
[13:18:34.092]                           version <- ns[[".package"]][["version"]]
[13:18:34.092]                           if (is.null(version)) 
[13:18:34.092]                             version <- utils::packageVersion("future")
[13:18:34.092]                         }
[13:18:34.092]                         else {
[13:18:34.092]                           version <- NULL
[13:18:34.092]                         }
[13:18:34.092]                         if (!has_future || version < "1.8.0") {
[13:18:34.092]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:34.092]                             "", base::R.version$version.string), 
[13:18:34.092]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:34.092]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:34.092]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:34.092]                               "release", "version")], collapse = " "), 
[13:18:34.092]                             hostname = base::Sys.info()[["nodename"]])
[13:18:34.092]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:34.092]                             info)
[13:18:34.092]                           info <- base::paste(info, collapse = "; ")
[13:18:34.092]                           if (!has_future) {
[13:18:34.092]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:34.092]                               info)
[13:18:34.092]                           }
[13:18:34.092]                           else {
[13:18:34.092]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:34.092]                               info, version)
[13:18:34.092]                           }
[13:18:34.092]                           base::stop(msg)
[13:18:34.092]                         }
[13:18:34.092]                       })
[13:18:34.092]                     }
[13:18:34.092]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:34.092]                     base::options(mc.cores = 1L)
[13:18:34.092]                   }
[13:18:34.092]                   options(future.plan = NULL)
[13:18:34.092]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:34.092]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:34.092]                 }
[13:18:34.092]                 ...future.workdir <- getwd()
[13:18:34.092]             }
[13:18:34.092]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:34.092]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:34.092]         }
[13:18:34.092]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:34.092]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:18:34.092]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:34.092]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:34.092]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:34.092]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:34.092]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:34.092]             base::names(...future.oldOptions))
[13:18:34.092]     }
[13:18:34.092]     if (FALSE) {
[13:18:34.092]     }
[13:18:34.092]     else {
[13:18:34.092]         if (TRUE) {
[13:18:34.092]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:34.092]                 open = "w")
[13:18:34.092]         }
[13:18:34.092]         else {
[13:18:34.092]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:34.092]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:34.092]         }
[13:18:34.092]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:34.092]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:34.092]             base::sink(type = "output", split = FALSE)
[13:18:34.092]             base::close(...future.stdout)
[13:18:34.092]         }, add = TRUE)
[13:18:34.092]     }
[13:18:34.092]     ...future.frame <- base::sys.nframe()
[13:18:34.092]     ...future.conditions <- base::list()
[13:18:34.092]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:34.092]     if (FALSE) {
[13:18:34.092]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:34.092]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:34.092]     }
[13:18:34.092]     ...future.result <- base::tryCatch({
[13:18:34.092]         base::withCallingHandlers({
[13:18:34.092]             ...future.value <- base::withVisible(base::local({
[13:18:34.092]                 ...future.makeSendCondition <- local({
[13:18:34.092]                   sendCondition <- NULL
[13:18:34.092]                   function(frame = 1L) {
[13:18:34.092]                     if (is.function(sendCondition)) 
[13:18:34.092]                       return(sendCondition)
[13:18:34.092]                     ns <- getNamespace("parallel")
[13:18:34.092]                     if (exists("sendData", mode = "function", 
[13:18:34.092]                       envir = ns)) {
[13:18:34.092]                       parallel_sendData <- get("sendData", mode = "function", 
[13:18:34.092]                         envir = ns)
[13:18:34.092]                       envir <- sys.frame(frame)
[13:18:34.092]                       master <- NULL
[13:18:34.092]                       while (!identical(envir, .GlobalEnv) && 
[13:18:34.092]                         !identical(envir, emptyenv())) {
[13:18:34.092]                         if (exists("master", mode = "list", envir = envir, 
[13:18:34.092]                           inherits = FALSE)) {
[13:18:34.092]                           master <- get("master", mode = "list", 
[13:18:34.092]                             envir = envir, inherits = FALSE)
[13:18:34.092]                           if (inherits(master, c("SOCKnode", 
[13:18:34.092]                             "SOCK0node"))) {
[13:18:34.092]                             sendCondition <<- function(cond) {
[13:18:34.092]                               data <- list(type = "VALUE", value = cond, 
[13:18:34.092]                                 success = TRUE)
[13:18:34.092]                               parallel_sendData(master, data)
[13:18:34.092]                             }
[13:18:34.092]                             return(sendCondition)
[13:18:34.092]                           }
[13:18:34.092]                         }
[13:18:34.092]                         frame <- frame + 1L
[13:18:34.092]                         envir <- sys.frame(frame)
[13:18:34.092]                       }
[13:18:34.092]                     }
[13:18:34.092]                     sendCondition <<- function(cond) NULL
[13:18:34.092]                   }
[13:18:34.092]                 })
[13:18:34.092]                 withCallingHandlers({
[13:18:34.092]                   {
[13:18:34.092]                     do.call(function(...) {
[13:18:34.092]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.092]                       if (!identical(...future.globals.maxSize.org, 
[13:18:34.092]                         ...future.globals.maxSize)) {
[13:18:34.092]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.092]                         on.exit(options(oopts), add = TRUE)
[13:18:34.092]                       }
[13:18:34.092]                       {
[13:18:34.092]                         lapply(seq_along(...future.elements_ii), 
[13:18:34.092]                           FUN = function(jj) {
[13:18:34.092]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.092]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.092]                               envir = globalenv(), inherits = FALSE)
[13:18:34.092]                             ...future.FUN(...future.X_jj, ...)
[13:18:34.092]                           })
[13:18:34.092]                       }
[13:18:34.092]                     }, args = future.call.arguments)
[13:18:34.092]                   }
[13:18:34.092]                 }, immediateCondition = function(cond) {
[13:18:34.092]                   sendCondition <- ...future.makeSendCondition()
[13:18:34.092]                   sendCondition(cond)
[13:18:34.092]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.092]                   {
[13:18:34.092]                     inherits <- base::inherits
[13:18:34.092]                     invokeRestart <- base::invokeRestart
[13:18:34.092]                     is.null <- base::is.null
[13:18:34.092]                     muffled <- FALSE
[13:18:34.092]                     if (inherits(cond, "message")) {
[13:18:34.092]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:34.092]                       if (muffled) 
[13:18:34.092]                         invokeRestart("muffleMessage")
[13:18:34.092]                     }
[13:18:34.092]                     else if (inherits(cond, "warning")) {
[13:18:34.092]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:34.092]                       if (muffled) 
[13:18:34.092]                         invokeRestart("muffleWarning")
[13:18:34.092]                     }
[13:18:34.092]                     else if (inherits(cond, "condition")) {
[13:18:34.092]                       if (!is.null(pattern)) {
[13:18:34.092]                         computeRestarts <- base::computeRestarts
[13:18:34.092]                         grepl <- base::grepl
[13:18:34.092]                         restarts <- computeRestarts(cond)
[13:18:34.092]                         for (restart in restarts) {
[13:18:34.092]                           name <- restart$name
[13:18:34.092]                           if (is.null(name)) 
[13:18:34.092]                             next
[13:18:34.092]                           if (!grepl(pattern, name)) 
[13:18:34.092]                             next
[13:18:34.092]                           invokeRestart(restart)
[13:18:34.092]                           muffled <- TRUE
[13:18:34.092]                           break
[13:18:34.092]                         }
[13:18:34.092]                       }
[13:18:34.092]                     }
[13:18:34.092]                     invisible(muffled)
[13:18:34.092]                   }
[13:18:34.092]                   muffleCondition(cond)
[13:18:34.092]                 })
[13:18:34.092]             }))
[13:18:34.092]             future::FutureResult(value = ...future.value$value, 
[13:18:34.092]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:34.092]                   ...future.rng), globalenv = if (FALSE) 
[13:18:34.092]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:34.092]                     ...future.globalenv.names))
[13:18:34.092]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:34.092]         }, condition = base::local({
[13:18:34.092]             c <- base::c
[13:18:34.092]             inherits <- base::inherits
[13:18:34.092]             invokeRestart <- base::invokeRestart
[13:18:34.092]             length <- base::length
[13:18:34.092]             list <- base::list
[13:18:34.092]             seq.int <- base::seq.int
[13:18:34.092]             signalCondition <- base::signalCondition
[13:18:34.092]             sys.calls <- base::sys.calls
[13:18:34.092]             `[[` <- base::`[[`
[13:18:34.092]             `+` <- base::`+`
[13:18:34.092]             `<<-` <- base::`<<-`
[13:18:34.092]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:34.092]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:34.092]                   3L)]
[13:18:34.092]             }
[13:18:34.092]             function(cond) {
[13:18:34.092]                 is_error <- inherits(cond, "error")
[13:18:34.092]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:34.092]                   NULL)
[13:18:34.092]                 if (is_error) {
[13:18:34.092]                   sessionInformation <- function() {
[13:18:34.092]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:34.092]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:34.092]                       search = base::search(), system = base::Sys.info())
[13:18:34.092]                   }
[13:18:34.092]                   ...future.conditions[[length(...future.conditions) + 
[13:18:34.092]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:34.092]                     cond$call), session = sessionInformation(), 
[13:18:34.092]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:34.092]                   signalCondition(cond)
[13:18:34.092]                 }
[13:18:34.092]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:34.092]                 "immediateCondition"))) {
[13:18:34.092]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:34.092]                   ...future.conditions[[length(...future.conditions) + 
[13:18:34.092]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:34.092]                   if (TRUE && !signal) {
[13:18:34.092]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.092]                     {
[13:18:34.092]                       inherits <- base::inherits
[13:18:34.092]                       invokeRestart <- base::invokeRestart
[13:18:34.092]                       is.null <- base::is.null
[13:18:34.092]                       muffled <- FALSE
[13:18:34.092]                       if (inherits(cond, "message")) {
[13:18:34.092]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:34.092]                         if (muffled) 
[13:18:34.092]                           invokeRestart("muffleMessage")
[13:18:34.092]                       }
[13:18:34.092]                       else if (inherits(cond, "warning")) {
[13:18:34.092]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:34.092]                         if (muffled) 
[13:18:34.092]                           invokeRestart("muffleWarning")
[13:18:34.092]                       }
[13:18:34.092]                       else if (inherits(cond, "condition")) {
[13:18:34.092]                         if (!is.null(pattern)) {
[13:18:34.092]                           computeRestarts <- base::computeRestarts
[13:18:34.092]                           grepl <- base::grepl
[13:18:34.092]                           restarts <- computeRestarts(cond)
[13:18:34.092]                           for (restart in restarts) {
[13:18:34.092]                             name <- restart$name
[13:18:34.092]                             if (is.null(name)) 
[13:18:34.092]                               next
[13:18:34.092]                             if (!grepl(pattern, name)) 
[13:18:34.092]                               next
[13:18:34.092]                             invokeRestart(restart)
[13:18:34.092]                             muffled <- TRUE
[13:18:34.092]                             break
[13:18:34.092]                           }
[13:18:34.092]                         }
[13:18:34.092]                       }
[13:18:34.092]                       invisible(muffled)
[13:18:34.092]                     }
[13:18:34.092]                     muffleCondition(cond, pattern = "^muffle")
[13:18:34.092]                   }
[13:18:34.092]                 }
[13:18:34.092]                 else {
[13:18:34.092]                   if (TRUE) {
[13:18:34.092]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.092]                     {
[13:18:34.092]                       inherits <- base::inherits
[13:18:34.092]                       invokeRestart <- base::invokeRestart
[13:18:34.092]                       is.null <- base::is.null
[13:18:34.092]                       muffled <- FALSE
[13:18:34.092]                       if (inherits(cond, "message")) {
[13:18:34.092]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:34.092]                         if (muffled) 
[13:18:34.092]                           invokeRestart("muffleMessage")
[13:18:34.092]                       }
[13:18:34.092]                       else if (inherits(cond, "warning")) {
[13:18:34.092]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:34.092]                         if (muffled) 
[13:18:34.092]                           invokeRestart("muffleWarning")
[13:18:34.092]                       }
[13:18:34.092]                       else if (inherits(cond, "condition")) {
[13:18:34.092]                         if (!is.null(pattern)) {
[13:18:34.092]                           computeRestarts <- base::computeRestarts
[13:18:34.092]                           grepl <- base::grepl
[13:18:34.092]                           restarts <- computeRestarts(cond)
[13:18:34.092]                           for (restart in restarts) {
[13:18:34.092]                             name <- restart$name
[13:18:34.092]                             if (is.null(name)) 
[13:18:34.092]                               next
[13:18:34.092]                             if (!grepl(pattern, name)) 
[13:18:34.092]                               next
[13:18:34.092]                             invokeRestart(restart)
[13:18:34.092]                             muffled <- TRUE
[13:18:34.092]                             break
[13:18:34.092]                           }
[13:18:34.092]                         }
[13:18:34.092]                       }
[13:18:34.092]                       invisible(muffled)
[13:18:34.092]                     }
[13:18:34.092]                     muffleCondition(cond, pattern = "^muffle")
[13:18:34.092]                   }
[13:18:34.092]                 }
[13:18:34.092]             }
[13:18:34.092]         }))
[13:18:34.092]     }, error = function(ex) {
[13:18:34.092]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:34.092]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:34.092]                 ...future.rng), started = ...future.startTime, 
[13:18:34.092]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:34.092]             version = "1.8"), class = "FutureResult")
[13:18:34.092]     }, finally = {
[13:18:34.092]         if (!identical(...future.workdir, getwd())) 
[13:18:34.092]             setwd(...future.workdir)
[13:18:34.092]         {
[13:18:34.092]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:34.092]                 ...future.oldOptions$nwarnings <- NULL
[13:18:34.092]             }
[13:18:34.092]             base::options(...future.oldOptions)
[13:18:34.092]             if (.Platform$OS.type == "windows") {
[13:18:34.092]                 old_names <- names(...future.oldEnvVars)
[13:18:34.092]                 envs <- base::Sys.getenv()
[13:18:34.092]                 names <- names(envs)
[13:18:34.092]                 common <- intersect(names, old_names)
[13:18:34.092]                 added <- setdiff(names, old_names)
[13:18:34.092]                 removed <- setdiff(old_names, names)
[13:18:34.092]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:34.092]                   envs[common]]
[13:18:34.092]                 NAMES <- toupper(changed)
[13:18:34.092]                 args <- list()
[13:18:34.092]                 for (kk in seq_along(NAMES)) {
[13:18:34.092]                   name <- changed[[kk]]
[13:18:34.092]                   NAME <- NAMES[[kk]]
[13:18:34.092]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.092]                     next
[13:18:34.092]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:34.092]                 }
[13:18:34.092]                 NAMES <- toupper(added)
[13:18:34.092]                 for (kk in seq_along(NAMES)) {
[13:18:34.092]                   name <- added[[kk]]
[13:18:34.092]                   NAME <- NAMES[[kk]]
[13:18:34.092]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.092]                     next
[13:18:34.092]                   args[[name]] <- ""
[13:18:34.092]                 }
[13:18:34.092]                 NAMES <- toupper(removed)
[13:18:34.092]                 for (kk in seq_along(NAMES)) {
[13:18:34.092]                   name <- removed[[kk]]
[13:18:34.092]                   NAME <- NAMES[[kk]]
[13:18:34.092]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.092]                     next
[13:18:34.092]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:34.092]                 }
[13:18:34.092]                 if (length(args) > 0) 
[13:18:34.092]                   base::do.call(base::Sys.setenv, args = args)
[13:18:34.092]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:34.092]             }
[13:18:34.092]             else {
[13:18:34.092]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:34.092]             }
[13:18:34.092]             {
[13:18:34.092]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:34.092]                   0L) {
[13:18:34.092]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:34.092]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:34.092]                   base::options(opts)
[13:18:34.092]                 }
[13:18:34.092]                 {
[13:18:34.092]                   {
[13:18:34.092]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:34.092]                     NULL
[13:18:34.092]                   }
[13:18:34.092]                   options(future.plan = NULL)
[13:18:34.092]                   if (is.na(NA_character_)) 
[13:18:34.092]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:34.092]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:34.092]                   future::plan(list(function (..., workers = availableCores(), 
[13:18:34.092]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:18:34.092]                     envir = parent.frame()) 
[13:18:34.092]                   {
[13:18:34.092]                     if (is.function(workers)) 
[13:18:34.092]                       workers <- workers()
[13:18:34.092]                     workers <- structure(as.integer(workers), 
[13:18:34.092]                       class = class(workers))
[13:18:34.092]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:18:34.092]                       workers >= 1)
[13:18:34.092]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:18:34.092]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:18:34.092]                     }
[13:18:34.092]                     future <- MultisessionFuture(..., workers = workers, 
[13:18:34.092]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:18:34.092]                       envir = envir)
[13:18:34.092]                     if (!future$lazy) 
[13:18:34.092]                       future <- run(future)
[13:18:34.092]                     invisible(future)
[13:18:34.092]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:34.092]                 }
[13:18:34.092]             }
[13:18:34.092]         }
[13:18:34.092]     })
[13:18:34.092]     if (TRUE) {
[13:18:34.092]         base::sink(type = "output", split = FALSE)
[13:18:34.092]         if (TRUE) {
[13:18:34.092]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:34.092]         }
[13:18:34.092]         else {
[13:18:34.092]             ...future.result["stdout"] <- base::list(NULL)
[13:18:34.092]         }
[13:18:34.092]         base::close(...future.stdout)
[13:18:34.092]         ...future.stdout <- NULL
[13:18:34.092]     }
[13:18:34.092]     ...future.result$conditions <- ...future.conditions
[13:18:34.092]     ...future.result$finished <- base::Sys.time()
[13:18:34.092]     ...future.result
[13:18:34.092] }
[13:18:34.095] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[13:18:34.095] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[13:18:34.095] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[13:18:34.096] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[13:18:34.096] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[13:18:34.096] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[13:18:34.096] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[13:18:34.097] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[13:18:34.097] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[13:18:34.097] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[13:18:34.097] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[13:18:34.097] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[13:18:34.098] MultisessionFuture started
[13:18:34.098] - Launch lazy future ... done
[13:18:34.098] run() for ‘MultisessionFuture’ ... done
[13:18:34.098] Created future:
[13:18:34.098] MultisessionFuture:
[13:18:34.098] Label: ‘future_replicate-1’
[13:18:34.098] Expression:
[13:18:34.098] {
[13:18:34.098]     do.call(function(...) {
[13:18:34.098]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.098]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:34.098]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.098]             on.exit(options(oopts), add = TRUE)
[13:18:34.098]         }
[13:18:34.098]         {
[13:18:34.098]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:34.098]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.098]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.098]                   envir = globalenv(), inherits = FALSE)
[13:18:34.098]                 ...future.FUN(...future.X_jj, ...)
[13:18:34.098]             })
[13:18:34.098]         }
[13:18:34.098]     }, args = future.call.arguments)
[13:18:34.098] }
[13:18:34.098] Lazy evaluation: FALSE
[13:18:34.098] Asynchronous evaluation: TRUE
[13:18:34.098] Local evaluation: TRUE
[13:18:34.098] Environment: R_GlobalEnv
[13:18:34.098] Capture standard output: TRUE
[13:18:34.098] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:34.098] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:34.098] Packages: <none>
[13:18:34.098] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:34.098] Resolved: FALSE
[13:18:34.098] Value: <not collected>
[13:18:34.098] Conditions captured: <none>
[13:18:34.098] Early signaling: FALSE
[13:18:34.098] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:34.098] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:34.110] Chunk #1 of 2 ... DONE
[13:18:34.110] Chunk #2 of 2 ...
[13:18:34.110]  - Finding globals in 'X' for chunk #2 ...
[13:18:34.110] getGlobalsAndPackages() ...
[13:18:34.110] Searching for globals...
[13:18:34.111] 
[13:18:34.111] Searching for globals ... DONE
[13:18:34.111] - globals: [0] <none>
[13:18:34.111] getGlobalsAndPackages() ... DONE
[13:18:34.111]    + additional globals found: [n=0] 
[13:18:34.111]    + additional namespaces needed: [n=0] 
[13:18:34.111]  - Finding globals in 'X' for chunk #2 ... DONE
[13:18:34.111]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[13:18:34.111]  - seeds: [3] <seeds>
[13:18:34.111] getGlobalsAndPackages() ...
[13:18:34.112] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:34.112] Resolving globals: FALSE
[13:18:34.112] Tweak future expression to call with '...' arguments ...
[13:18:34.112] {
[13:18:34.112]     do.call(function(...) {
[13:18:34.112]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.112]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:34.112]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.112]             on.exit(options(oopts), add = TRUE)
[13:18:34.112]         }
[13:18:34.112]         {
[13:18:34.112]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:34.112]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.112]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.112]                   envir = globalenv(), inherits = FALSE)
[13:18:34.112]                 ...future.FUN(...future.X_jj, ...)
[13:18:34.112]             })
[13:18:34.112]         }
[13:18:34.112]     }, args = future.call.arguments)
[13:18:34.112] }
[13:18:34.112] Tweak future expression to call with '...' arguments ... DONE
[13:18:34.113] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:34.113] 
[13:18:34.113] getGlobalsAndPackages() ... DONE
[13:18:34.113] run() for ‘Future’ ...
[13:18:34.113] - state: ‘created’
[13:18:34.113] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:18:34.128] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:34.128] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:18:34.128]   - Field: ‘node’
[13:18:34.128]   - Field: ‘label’
[13:18:34.128]   - Field: ‘local’
[13:18:34.128]   - Field: ‘owner’
[13:18:34.128]   - Field: ‘envir’
[13:18:34.129]   - Field: ‘workers’
[13:18:34.129]   - Field: ‘packages’
[13:18:34.129]   - Field: ‘gc’
[13:18:34.129]   - Field: ‘conditions’
[13:18:34.129]   - Field: ‘persistent’
[13:18:34.129]   - Field: ‘expr’
[13:18:34.129]   - Field: ‘uuid’
[13:18:34.129]   - Field: ‘seed’
[13:18:34.129]   - Field: ‘version’
[13:18:34.129]   - Field: ‘result’
[13:18:34.130]   - Field: ‘asynchronous’
[13:18:34.130]   - Field: ‘calls’
[13:18:34.130]   - Field: ‘globals’
[13:18:34.130]   - Field: ‘stdout’
[13:18:34.130]   - Field: ‘earlySignal’
[13:18:34.130]   - Field: ‘lazy’
[13:18:34.130]   - Field: ‘state’
[13:18:34.130] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:18:34.130] - Launch lazy future ...
[13:18:34.131] Packages needed by the future expression (n = 0): <none>
[13:18:34.131] Packages needed by future strategies (n = 0): <none>
[13:18:34.131] {
[13:18:34.131]     {
[13:18:34.131]         {
[13:18:34.131]             ...future.startTime <- base::Sys.time()
[13:18:34.131]             {
[13:18:34.131]                 {
[13:18:34.131]                   {
[13:18:34.131]                     {
[13:18:34.131]                       base::local({
[13:18:34.131]                         has_future <- base::requireNamespace("future", 
[13:18:34.131]                           quietly = TRUE)
[13:18:34.131]                         if (has_future) {
[13:18:34.131]                           ns <- base::getNamespace("future")
[13:18:34.131]                           version <- ns[[".package"]][["version"]]
[13:18:34.131]                           if (is.null(version)) 
[13:18:34.131]                             version <- utils::packageVersion("future")
[13:18:34.131]                         }
[13:18:34.131]                         else {
[13:18:34.131]                           version <- NULL
[13:18:34.131]                         }
[13:18:34.131]                         if (!has_future || version < "1.8.0") {
[13:18:34.131]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:34.131]                             "", base::R.version$version.string), 
[13:18:34.131]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:34.131]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:34.131]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:34.131]                               "release", "version")], collapse = " "), 
[13:18:34.131]                             hostname = base::Sys.info()[["nodename"]])
[13:18:34.131]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:34.131]                             info)
[13:18:34.131]                           info <- base::paste(info, collapse = "; ")
[13:18:34.131]                           if (!has_future) {
[13:18:34.131]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:34.131]                               info)
[13:18:34.131]                           }
[13:18:34.131]                           else {
[13:18:34.131]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:34.131]                               info, version)
[13:18:34.131]                           }
[13:18:34.131]                           base::stop(msg)
[13:18:34.131]                         }
[13:18:34.131]                       })
[13:18:34.131]                     }
[13:18:34.131]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:34.131]                     base::options(mc.cores = 1L)
[13:18:34.131]                   }
[13:18:34.131]                   options(future.plan = NULL)
[13:18:34.131]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:34.131]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:34.131]                 }
[13:18:34.131]                 ...future.workdir <- getwd()
[13:18:34.131]             }
[13:18:34.131]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:34.131]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:34.131]         }
[13:18:34.131]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:34.131]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[13:18:34.131]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:34.131]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:34.131]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:34.131]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:34.131]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:34.131]             base::names(...future.oldOptions))
[13:18:34.131]     }
[13:18:34.131]     if (FALSE) {
[13:18:34.131]     }
[13:18:34.131]     else {
[13:18:34.131]         if (TRUE) {
[13:18:34.131]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:34.131]                 open = "w")
[13:18:34.131]         }
[13:18:34.131]         else {
[13:18:34.131]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:34.131]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:34.131]         }
[13:18:34.131]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:34.131]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:34.131]             base::sink(type = "output", split = FALSE)
[13:18:34.131]             base::close(...future.stdout)
[13:18:34.131]         }, add = TRUE)
[13:18:34.131]     }
[13:18:34.131]     ...future.frame <- base::sys.nframe()
[13:18:34.131]     ...future.conditions <- base::list()
[13:18:34.131]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:34.131]     if (FALSE) {
[13:18:34.131]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:34.131]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:34.131]     }
[13:18:34.131]     ...future.result <- base::tryCatch({
[13:18:34.131]         base::withCallingHandlers({
[13:18:34.131]             ...future.value <- base::withVisible(base::local({
[13:18:34.131]                 ...future.makeSendCondition <- local({
[13:18:34.131]                   sendCondition <- NULL
[13:18:34.131]                   function(frame = 1L) {
[13:18:34.131]                     if (is.function(sendCondition)) 
[13:18:34.131]                       return(sendCondition)
[13:18:34.131]                     ns <- getNamespace("parallel")
[13:18:34.131]                     if (exists("sendData", mode = "function", 
[13:18:34.131]                       envir = ns)) {
[13:18:34.131]                       parallel_sendData <- get("sendData", mode = "function", 
[13:18:34.131]                         envir = ns)
[13:18:34.131]                       envir <- sys.frame(frame)
[13:18:34.131]                       master <- NULL
[13:18:34.131]                       while (!identical(envir, .GlobalEnv) && 
[13:18:34.131]                         !identical(envir, emptyenv())) {
[13:18:34.131]                         if (exists("master", mode = "list", envir = envir, 
[13:18:34.131]                           inherits = FALSE)) {
[13:18:34.131]                           master <- get("master", mode = "list", 
[13:18:34.131]                             envir = envir, inherits = FALSE)
[13:18:34.131]                           if (inherits(master, c("SOCKnode", 
[13:18:34.131]                             "SOCK0node"))) {
[13:18:34.131]                             sendCondition <<- function(cond) {
[13:18:34.131]                               data <- list(type = "VALUE", value = cond, 
[13:18:34.131]                                 success = TRUE)
[13:18:34.131]                               parallel_sendData(master, data)
[13:18:34.131]                             }
[13:18:34.131]                             return(sendCondition)
[13:18:34.131]                           }
[13:18:34.131]                         }
[13:18:34.131]                         frame <- frame + 1L
[13:18:34.131]                         envir <- sys.frame(frame)
[13:18:34.131]                       }
[13:18:34.131]                     }
[13:18:34.131]                     sendCondition <<- function(cond) NULL
[13:18:34.131]                   }
[13:18:34.131]                 })
[13:18:34.131]                 withCallingHandlers({
[13:18:34.131]                   {
[13:18:34.131]                     do.call(function(...) {
[13:18:34.131]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.131]                       if (!identical(...future.globals.maxSize.org, 
[13:18:34.131]                         ...future.globals.maxSize)) {
[13:18:34.131]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.131]                         on.exit(options(oopts), add = TRUE)
[13:18:34.131]                       }
[13:18:34.131]                       {
[13:18:34.131]                         lapply(seq_along(...future.elements_ii), 
[13:18:34.131]                           FUN = function(jj) {
[13:18:34.131]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.131]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.131]                               envir = globalenv(), inherits = FALSE)
[13:18:34.131]                             ...future.FUN(...future.X_jj, ...)
[13:18:34.131]                           })
[13:18:34.131]                       }
[13:18:34.131]                     }, args = future.call.arguments)
[13:18:34.131]                   }
[13:18:34.131]                 }, immediateCondition = function(cond) {
[13:18:34.131]                   sendCondition <- ...future.makeSendCondition()
[13:18:34.131]                   sendCondition(cond)
[13:18:34.131]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.131]                   {
[13:18:34.131]                     inherits <- base::inherits
[13:18:34.131]                     invokeRestart <- base::invokeRestart
[13:18:34.131]                     is.null <- base::is.null
[13:18:34.131]                     muffled <- FALSE
[13:18:34.131]                     if (inherits(cond, "message")) {
[13:18:34.131]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:34.131]                       if (muffled) 
[13:18:34.131]                         invokeRestart("muffleMessage")
[13:18:34.131]                     }
[13:18:34.131]                     else if (inherits(cond, "warning")) {
[13:18:34.131]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:34.131]                       if (muffled) 
[13:18:34.131]                         invokeRestart("muffleWarning")
[13:18:34.131]                     }
[13:18:34.131]                     else if (inherits(cond, "condition")) {
[13:18:34.131]                       if (!is.null(pattern)) {
[13:18:34.131]                         computeRestarts <- base::computeRestarts
[13:18:34.131]                         grepl <- base::grepl
[13:18:34.131]                         restarts <- computeRestarts(cond)
[13:18:34.131]                         for (restart in restarts) {
[13:18:34.131]                           name <- restart$name
[13:18:34.131]                           if (is.null(name)) 
[13:18:34.131]                             next
[13:18:34.131]                           if (!grepl(pattern, name)) 
[13:18:34.131]                             next
[13:18:34.131]                           invokeRestart(restart)
[13:18:34.131]                           muffled <- TRUE
[13:18:34.131]                           break
[13:18:34.131]                         }
[13:18:34.131]                       }
[13:18:34.131]                     }
[13:18:34.131]                     invisible(muffled)
[13:18:34.131]                   }
[13:18:34.131]                   muffleCondition(cond)
[13:18:34.131]                 })
[13:18:34.131]             }))
[13:18:34.131]             future::FutureResult(value = ...future.value$value, 
[13:18:34.131]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:34.131]                   ...future.rng), globalenv = if (FALSE) 
[13:18:34.131]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:34.131]                     ...future.globalenv.names))
[13:18:34.131]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:34.131]         }, condition = base::local({
[13:18:34.131]             c <- base::c
[13:18:34.131]             inherits <- base::inherits
[13:18:34.131]             invokeRestart <- base::invokeRestart
[13:18:34.131]             length <- base::length
[13:18:34.131]             list <- base::list
[13:18:34.131]             seq.int <- base::seq.int
[13:18:34.131]             signalCondition <- base::signalCondition
[13:18:34.131]             sys.calls <- base::sys.calls
[13:18:34.131]             `[[` <- base::`[[`
[13:18:34.131]             `+` <- base::`+`
[13:18:34.131]             `<<-` <- base::`<<-`
[13:18:34.131]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:34.131]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:34.131]                   3L)]
[13:18:34.131]             }
[13:18:34.131]             function(cond) {
[13:18:34.131]                 is_error <- inherits(cond, "error")
[13:18:34.131]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:34.131]                   NULL)
[13:18:34.131]                 if (is_error) {
[13:18:34.131]                   sessionInformation <- function() {
[13:18:34.131]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:34.131]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:34.131]                       search = base::search(), system = base::Sys.info())
[13:18:34.131]                   }
[13:18:34.131]                   ...future.conditions[[length(...future.conditions) + 
[13:18:34.131]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:34.131]                     cond$call), session = sessionInformation(), 
[13:18:34.131]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:34.131]                   signalCondition(cond)
[13:18:34.131]                 }
[13:18:34.131]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:34.131]                 "immediateCondition"))) {
[13:18:34.131]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:34.131]                   ...future.conditions[[length(...future.conditions) + 
[13:18:34.131]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:34.131]                   if (TRUE && !signal) {
[13:18:34.131]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.131]                     {
[13:18:34.131]                       inherits <- base::inherits
[13:18:34.131]                       invokeRestart <- base::invokeRestart
[13:18:34.131]                       is.null <- base::is.null
[13:18:34.131]                       muffled <- FALSE
[13:18:34.131]                       if (inherits(cond, "message")) {
[13:18:34.131]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:34.131]                         if (muffled) 
[13:18:34.131]                           invokeRestart("muffleMessage")
[13:18:34.131]                       }
[13:18:34.131]                       else if (inherits(cond, "warning")) {
[13:18:34.131]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:34.131]                         if (muffled) 
[13:18:34.131]                           invokeRestart("muffleWarning")
[13:18:34.131]                       }
[13:18:34.131]                       else if (inherits(cond, "condition")) {
[13:18:34.131]                         if (!is.null(pattern)) {
[13:18:34.131]                           computeRestarts <- base::computeRestarts
[13:18:34.131]                           grepl <- base::grepl
[13:18:34.131]                           restarts <- computeRestarts(cond)
[13:18:34.131]                           for (restart in restarts) {
[13:18:34.131]                             name <- restart$name
[13:18:34.131]                             if (is.null(name)) 
[13:18:34.131]                               next
[13:18:34.131]                             if (!grepl(pattern, name)) 
[13:18:34.131]                               next
[13:18:34.131]                             invokeRestart(restart)
[13:18:34.131]                             muffled <- TRUE
[13:18:34.131]                             break
[13:18:34.131]                           }
[13:18:34.131]                         }
[13:18:34.131]                       }
[13:18:34.131]                       invisible(muffled)
[13:18:34.131]                     }
[13:18:34.131]                     muffleCondition(cond, pattern = "^muffle")
[13:18:34.131]                   }
[13:18:34.131]                 }
[13:18:34.131]                 else {
[13:18:34.131]                   if (TRUE) {
[13:18:34.131]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.131]                     {
[13:18:34.131]                       inherits <- base::inherits
[13:18:34.131]                       invokeRestart <- base::invokeRestart
[13:18:34.131]                       is.null <- base::is.null
[13:18:34.131]                       muffled <- FALSE
[13:18:34.131]                       if (inherits(cond, "message")) {
[13:18:34.131]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:34.131]                         if (muffled) 
[13:18:34.131]                           invokeRestart("muffleMessage")
[13:18:34.131]                       }
[13:18:34.131]                       else if (inherits(cond, "warning")) {
[13:18:34.131]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:34.131]                         if (muffled) 
[13:18:34.131]                           invokeRestart("muffleWarning")
[13:18:34.131]                       }
[13:18:34.131]                       else if (inherits(cond, "condition")) {
[13:18:34.131]                         if (!is.null(pattern)) {
[13:18:34.131]                           computeRestarts <- base::computeRestarts
[13:18:34.131]                           grepl <- base::grepl
[13:18:34.131]                           restarts <- computeRestarts(cond)
[13:18:34.131]                           for (restart in restarts) {
[13:18:34.131]                             name <- restart$name
[13:18:34.131]                             if (is.null(name)) 
[13:18:34.131]                               next
[13:18:34.131]                             if (!grepl(pattern, name)) 
[13:18:34.131]                               next
[13:18:34.131]                             invokeRestart(restart)
[13:18:34.131]                             muffled <- TRUE
[13:18:34.131]                             break
[13:18:34.131]                           }
[13:18:34.131]                         }
[13:18:34.131]                       }
[13:18:34.131]                       invisible(muffled)
[13:18:34.131]                     }
[13:18:34.131]                     muffleCondition(cond, pattern = "^muffle")
[13:18:34.131]                   }
[13:18:34.131]                 }
[13:18:34.131]             }
[13:18:34.131]         }))
[13:18:34.131]     }, error = function(ex) {
[13:18:34.131]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:34.131]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:34.131]                 ...future.rng), started = ...future.startTime, 
[13:18:34.131]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:34.131]             version = "1.8"), class = "FutureResult")
[13:18:34.131]     }, finally = {
[13:18:34.131]         if (!identical(...future.workdir, getwd())) 
[13:18:34.131]             setwd(...future.workdir)
[13:18:34.131]         {
[13:18:34.131]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:34.131]                 ...future.oldOptions$nwarnings <- NULL
[13:18:34.131]             }
[13:18:34.131]             base::options(...future.oldOptions)
[13:18:34.131]             if (.Platform$OS.type == "windows") {
[13:18:34.131]                 old_names <- names(...future.oldEnvVars)
[13:18:34.131]                 envs <- base::Sys.getenv()
[13:18:34.131]                 names <- names(envs)
[13:18:34.131]                 common <- intersect(names, old_names)
[13:18:34.131]                 added <- setdiff(names, old_names)
[13:18:34.131]                 removed <- setdiff(old_names, names)
[13:18:34.131]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:34.131]                   envs[common]]
[13:18:34.131]                 NAMES <- toupper(changed)
[13:18:34.131]                 args <- list()
[13:18:34.131]                 for (kk in seq_along(NAMES)) {
[13:18:34.131]                   name <- changed[[kk]]
[13:18:34.131]                   NAME <- NAMES[[kk]]
[13:18:34.131]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.131]                     next
[13:18:34.131]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:34.131]                 }
[13:18:34.131]                 NAMES <- toupper(added)
[13:18:34.131]                 for (kk in seq_along(NAMES)) {
[13:18:34.131]                   name <- added[[kk]]
[13:18:34.131]                   NAME <- NAMES[[kk]]
[13:18:34.131]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.131]                     next
[13:18:34.131]                   args[[name]] <- ""
[13:18:34.131]                 }
[13:18:34.131]                 NAMES <- toupper(removed)
[13:18:34.131]                 for (kk in seq_along(NAMES)) {
[13:18:34.131]                   name <- removed[[kk]]
[13:18:34.131]                   NAME <- NAMES[[kk]]
[13:18:34.131]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.131]                     next
[13:18:34.131]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:34.131]                 }
[13:18:34.131]                 if (length(args) > 0) 
[13:18:34.131]                   base::do.call(base::Sys.setenv, args = args)
[13:18:34.131]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:34.131]             }
[13:18:34.131]             else {
[13:18:34.131]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:34.131]             }
[13:18:34.131]             {
[13:18:34.131]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:34.131]                   0L) {
[13:18:34.131]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:34.131]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:34.131]                   base::options(opts)
[13:18:34.131]                 }
[13:18:34.131]                 {
[13:18:34.131]                   {
[13:18:34.131]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:34.131]                     NULL
[13:18:34.131]                   }
[13:18:34.131]                   options(future.plan = NULL)
[13:18:34.131]                   if (is.na(NA_character_)) 
[13:18:34.131]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:34.131]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:34.131]                   future::plan(list(function (..., workers = availableCores(), 
[13:18:34.131]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:18:34.131]                     envir = parent.frame()) 
[13:18:34.131]                   {
[13:18:34.131]                     if (is.function(workers)) 
[13:18:34.131]                       workers <- workers()
[13:18:34.131]                     workers <- structure(as.integer(workers), 
[13:18:34.131]                       class = class(workers))
[13:18:34.131]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:18:34.131]                       workers >= 1)
[13:18:34.131]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:18:34.131]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:18:34.131]                     }
[13:18:34.131]                     future <- MultisessionFuture(..., workers = workers, 
[13:18:34.131]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:18:34.131]                       envir = envir)
[13:18:34.131]                     if (!future$lazy) 
[13:18:34.131]                       future <- run(future)
[13:18:34.131]                     invisible(future)
[13:18:34.131]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:34.131]                 }
[13:18:34.131]             }
[13:18:34.131]         }
[13:18:34.131]     })
[13:18:34.131]     if (TRUE) {
[13:18:34.131]         base::sink(type = "output", split = FALSE)
[13:18:34.131]         if (TRUE) {
[13:18:34.131]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:34.131]         }
[13:18:34.131]         else {
[13:18:34.131]             ...future.result["stdout"] <- base::list(NULL)
[13:18:34.131]         }
[13:18:34.131]         base::close(...future.stdout)
[13:18:34.131]         ...future.stdout <- NULL
[13:18:34.131]     }
[13:18:34.131]     ...future.result$conditions <- ...future.conditions
[13:18:34.131]     ...future.result$finished <- base::Sys.time()
[13:18:34.131]     ...future.result
[13:18:34.131] }
[13:18:34.134] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[13:18:34.134] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[13:18:34.135] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[13:18:34.135] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[13:18:34.135] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[13:18:34.135] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[13:18:34.136] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[13:18:34.136] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[13:18:34.136] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[13:18:34.137] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[13:18:34.137] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[13:18:34.137] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[13:18:34.138] MultisessionFuture started
[13:18:34.138] - Launch lazy future ... done
[13:18:34.138] run() for ‘MultisessionFuture’ ... done
[13:18:34.138] Created future:
[13:18:34.138] MultisessionFuture:
[13:18:34.138] Label: ‘future_replicate-2’
[13:18:34.138] Expression:
[13:18:34.138] {
[13:18:34.138]     do.call(function(...) {
[13:18:34.138]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.138]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:34.138]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.138]             on.exit(options(oopts), add = TRUE)
[13:18:34.138]         }
[13:18:34.138]         {
[13:18:34.138]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:34.138]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.138]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.138]                   envir = globalenv(), inherits = FALSE)
[13:18:34.138]                 ...future.FUN(...future.X_jj, ...)
[13:18:34.138]             })
[13:18:34.138]         }
[13:18:34.138]     }, args = future.call.arguments)
[13:18:34.138] }
[13:18:34.138] Lazy evaluation: FALSE
[13:18:34.138] Asynchronous evaluation: TRUE
[13:18:34.138] Local evaluation: TRUE
[13:18:34.138] Environment: R_GlobalEnv
[13:18:34.138] Capture standard output: TRUE
[13:18:34.138] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:34.138] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:34.138] Packages: <none>
[13:18:34.138] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:34.138] Resolved: FALSE
[13:18:34.138] Value: <not collected>
[13:18:34.138] Conditions captured: <none>
[13:18:34.138] Early signaling: FALSE
[13:18:34.138] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:34.138] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:34.150] Chunk #2 of 2 ... DONE
[13:18:34.150] Launching 2 futures (chunks) ... DONE
[13:18:34.150] Resolving 2 futures (chunks) ...
[13:18:34.150] resolve() on list ...
[13:18:34.150]  recursive: 0
[13:18:34.150]  length: 2
[13:18:34.150] 
[13:18:34.151] receiveMessageFromWorker() for ClusterFuture ...
[13:18:34.151] - Validating connection of MultisessionFuture
[13:18:34.151] - received message: FutureResult
[13:18:34.151] - Received FutureResult
[13:18:34.151] - Erased future from FutureRegistry
[13:18:34.152] result() for ClusterFuture ...
[13:18:34.152] - result already collected: FutureResult
[13:18:34.152] result() for ClusterFuture ... done
[13:18:34.152] receiveMessageFromWorker() for ClusterFuture ... done
[13:18:34.152] Future #1
[13:18:34.152] result() for ClusterFuture ...
[13:18:34.152] - result already collected: FutureResult
[13:18:34.152] result() for ClusterFuture ... done
[13:18:34.152] result() for ClusterFuture ...
[13:18:34.152] - result already collected: FutureResult
[13:18:34.152] result() for ClusterFuture ... done
[13:18:34.153] signalConditionsASAP(MultisessionFuture, pos=1) ...
[13:18:34.153] - nx: 2
[13:18:34.153] - relay: TRUE
[13:18:34.153] - stdout: TRUE
[13:18:34.153] - signal: TRUE
[13:18:34.153] - resignal: FALSE
[13:18:34.153] - force: TRUE
[13:18:34.153] - relayed: [n=2] FALSE, FALSE
[13:18:34.153] - queued futures: [n=2] FALSE, FALSE
[13:18:34.153]  - until=1
[13:18:34.153]  - relaying element #1
[13:18:34.154] result() for ClusterFuture ...
[13:18:34.154] - result already collected: FutureResult
[13:18:34.154] result() for ClusterFuture ... done
[13:18:34.154] result() for ClusterFuture ...
[13:18:34.154] - result already collected: FutureResult
[13:18:34.154] result() for ClusterFuture ... done
[13:18:34.154] result() for ClusterFuture ...
[13:18:34.154] - result already collected: FutureResult
[13:18:34.154] result() for ClusterFuture ... done
[13:18:34.154] result() for ClusterFuture ...
[13:18:34.154] - result already collected: FutureResult
[13:18:34.155] result() for ClusterFuture ... done
[13:18:34.155] - relayed: [n=2] TRUE, FALSE
[13:18:34.155] - queued futures: [n=2] TRUE, FALSE
[13:18:34.155] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[13:18:34.155]  length: 1 (resolved future 1)
[13:18:34.197] receiveMessageFromWorker() for ClusterFuture ...
[13:18:34.197] - Validating connection of MultisessionFuture
[13:18:34.197] - received message: FutureResult
[13:18:34.197] - Received FutureResult
[13:18:34.197] - Erased future from FutureRegistry
[13:18:34.198] result() for ClusterFuture ...
[13:18:34.198] - result already collected: FutureResult
[13:18:34.198] result() for ClusterFuture ... done
[13:18:34.198] receiveMessageFromWorker() for ClusterFuture ... done
[13:18:34.198] Future #2
[13:18:34.198] result() for ClusterFuture ...
[13:18:34.198] - result already collected: FutureResult
[13:18:34.198] result() for ClusterFuture ... done
[13:18:34.198] result() for ClusterFuture ...
[13:18:34.198] - result already collected: FutureResult
[13:18:34.199] result() for ClusterFuture ... done
[13:18:34.199] signalConditionsASAP(MultisessionFuture, pos=2) ...
[13:18:34.199] - nx: 2
[13:18:34.199] - relay: TRUE
[13:18:34.199] - stdout: TRUE
[13:18:34.199] - signal: TRUE
[13:18:34.199] - resignal: FALSE
[13:18:34.199] - force: TRUE
[13:18:34.199] - relayed: [n=2] TRUE, FALSE
[13:18:34.199] - queued futures: [n=2] TRUE, FALSE
[13:18:34.199]  - until=2
[13:18:34.200]  - relaying element #2
[13:18:34.200] result() for ClusterFuture ...
[13:18:34.200] - result already collected: FutureResult
[13:18:34.200] result() for ClusterFuture ... done
[13:18:34.200] result() for ClusterFuture ...
[13:18:34.200] - result already collected: FutureResult
[13:18:34.200] result() for ClusterFuture ... done
[13:18:34.200] result() for ClusterFuture ...
[13:18:34.200] - result already collected: FutureResult
[13:18:34.200] result() for ClusterFuture ... done
[13:18:34.201] result() for ClusterFuture ...
[13:18:34.201] - result already collected: FutureResult
[13:18:34.201] result() for ClusterFuture ... done
[13:18:34.201] - relayed: [n=2] TRUE, TRUE
[13:18:34.201] - queued futures: [n=2] TRUE, TRUE
[13:18:34.201] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[13:18:34.201]  length: 0 (resolved future 2)
[13:18:34.201] Relaying remaining futures
[13:18:34.201] signalConditionsASAP(NULL, pos=0) ...
[13:18:34.201] - nx: 2
[13:18:34.201] - relay: TRUE
[13:18:34.201] - stdout: TRUE
[13:18:34.202] - signal: TRUE
[13:18:34.202] - resignal: FALSE
[13:18:34.202] - force: TRUE
[13:18:34.202] - relayed: [n=2] TRUE, TRUE
[13:18:34.202] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:18:34.202] - relayed: [n=2] TRUE, TRUE
[13:18:34.202] - queued futures: [n=2] TRUE, TRUE
[13:18:34.202] signalConditionsASAP(NULL, pos=0) ... done
[13:18:34.202] resolve() on list ... DONE
[13:18:34.202] result() for ClusterFuture ...
[13:18:34.202] - result already collected: FutureResult
[13:18:34.203] result() for ClusterFuture ... done
[13:18:34.203] result() for ClusterFuture ...
[13:18:34.203] - result already collected: FutureResult
[13:18:34.203] result() for ClusterFuture ... done
[13:18:34.203] result() for ClusterFuture ...
[13:18:34.203] - result already collected: FutureResult
[13:18:34.203] result() for ClusterFuture ... done
[13:18:34.203] result() for ClusterFuture ...
[13:18:34.203] - result already collected: FutureResult
[13:18:34.203] result() for ClusterFuture ... done
[13:18:34.203]  - Number of value chunks collected: 2
[13:18:34.204] Resolving 2 futures (chunks) ... DONE
[13:18:34.204] Reducing values from 2 chunks ...
[13:18:34.204]  - Number of values collected after concatenation: 5
[13:18:34.204]  - Number of values expected: 5
[13:18:34.204] Reducing values from 2 chunks ... DONE
[13:18:34.204] future_lapply() ... DONE
[13:18:34.204] future_lapply() ...
[13:18:34.205] Generating random seeds ...
[13:18:34.205] Generating random seed streams for 5 elements ...
[13:18:34.205] Generating random seed streams for 5 elements ... DONE
[13:18:34.205] Generating random seeds ... DONE
[13:18:34.205] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:18:34.209] Number of chunks: 2
[13:18:34.209] getGlobalsAndPackagesXApply() ...
[13:18:34.210]  - future.globals: TRUE
[13:18:34.210] getGlobalsAndPackages() ...
[13:18:34.210] Searching for globals...
[13:18:34.211] - globals found: [2] ‘FUN’, ‘sample’
[13:18:34.211] Searching for globals ... DONE
[13:18:34.211] Resolving globals: FALSE
[13:18:34.211] The total size of the 1 globals is 616 bytes (616 bytes)
[13:18:34.212] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:18:34.212] - globals: [1] ‘FUN’
[13:18:34.212] 
[13:18:34.212] getGlobalsAndPackages() ... DONE
[13:18:34.212]  - globals found/used: [n=1] ‘FUN’
[13:18:34.212]  - needed namespaces: [n=0] 
[13:18:34.212] Finding globals ... DONE
[13:18:34.212]  - use_args: TRUE
[13:18:34.213]  - Getting '...' globals ...
[13:18:34.213] resolve() on list ...
[13:18:34.213]  recursive: 0
[13:18:34.213]  length: 1
[13:18:34.213]  elements: ‘...’
[13:18:34.213]  length: 0 (resolved future 1)
[13:18:34.213] resolve() on list ... DONE
[13:18:34.213]    - '...' content: [n=0] 
[13:18:34.214] List of 1
[13:18:34.214]  $ ...: list()
[13:18:34.214]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:34.214]  - attr(*, "where")=List of 1
[13:18:34.214]   ..$ ...:<environment: 0x55df201b09c8> 
[13:18:34.214]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:34.214]  - attr(*, "resolved")= logi TRUE
[13:18:34.214]  - attr(*, "total_size")= num NA
[13:18:34.218]  - Getting '...' globals ... DONE
[13:18:34.218] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:18:34.219] List of 2
[13:18:34.219]  $ ...future.FUN:function (...)  
[13:18:34.219]  $ ...          : list()
[13:18:34.219]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:34.219]  - attr(*, "where")=List of 2
[13:18:34.219]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:18:34.219]   ..$ ...          :<environment: 0x55df201b09c8> 
[13:18:34.219]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:34.219]  - attr(*, "resolved")= logi FALSE
[13:18:34.219]  - attr(*, "total_size")= num 616
[13:18:34.221] Packages to be attached in all futures: [n=0] 
[13:18:34.221] getGlobalsAndPackagesXApply() ... DONE
[13:18:34.222] Number of futures (= number of chunks): 2
[13:18:34.222] Launching 2 futures (chunks) ...
[13:18:34.222] Chunk #1 of 2 ...
[13:18:34.222]  - Finding globals in 'X' for chunk #1 ...
[13:18:34.222] getGlobalsAndPackages() ...
[13:18:34.222] Searching for globals...
[13:18:34.222] 
[13:18:34.222] Searching for globals ... DONE
[13:18:34.222] - globals: [0] <none>
[13:18:34.223] getGlobalsAndPackages() ... DONE
[13:18:34.223]    + additional globals found: [n=0] 
[13:18:34.223]    + additional namespaces needed: [n=0] 
[13:18:34.223]  - Finding globals in 'X' for chunk #1 ... DONE
[13:18:34.223]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:18:34.223]  - seeds: [2] <seeds>
[13:18:34.223] getGlobalsAndPackages() ...
[13:18:34.223] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:34.223] Resolving globals: FALSE
[13:18:34.223] Tweak future expression to call with '...' arguments ...
[13:18:34.224] {
[13:18:34.224]     do.call(function(...) {
[13:18:34.224]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.224]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:34.224]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.224]             on.exit(options(oopts), add = TRUE)
[13:18:34.224]         }
[13:18:34.224]         {
[13:18:34.224]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:34.224]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.224]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.224]                   envir = globalenv(), inherits = FALSE)
[13:18:34.224]                 ...future.FUN(...future.X_jj, ...)
[13:18:34.224]             })
[13:18:34.224]         }
[13:18:34.224]     }, args = future.call.arguments)
[13:18:34.224] }
[13:18:34.224] Tweak future expression to call with '...' arguments ... DONE
[13:18:34.224] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:34.224] 
[13:18:34.224] getGlobalsAndPackages() ... DONE
[13:18:34.225] run() for ‘Future’ ...
[13:18:34.225] - state: ‘created’
[13:18:34.225] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:18:34.240] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:34.240] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:18:34.240]   - Field: ‘node’
[13:18:34.240]   - Field: ‘label’
[13:18:34.240]   - Field: ‘local’
[13:18:34.241]   - Field: ‘owner’
[13:18:34.241]   - Field: ‘envir’
[13:18:34.241]   - Field: ‘workers’
[13:18:34.241]   - Field: ‘packages’
[13:18:34.241]   - Field: ‘gc’
[13:18:34.241]   - Field: ‘conditions’
[13:18:34.241]   - Field: ‘persistent’
[13:18:34.241]   - Field: ‘expr’
[13:18:34.241]   - Field: ‘uuid’
[13:18:34.241]   - Field: ‘seed’
[13:18:34.242]   - Field: ‘version’
[13:18:34.242]   - Field: ‘result’
[13:18:34.242]   - Field: ‘asynchronous’
[13:18:34.242]   - Field: ‘calls’
[13:18:34.242]   - Field: ‘globals’
[13:18:34.242]   - Field: ‘stdout’
[13:18:34.242]   - Field: ‘earlySignal’
[13:18:34.242]   - Field: ‘lazy’
[13:18:34.242]   - Field: ‘state’
[13:18:34.242] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:18:34.242] - Launch lazy future ...
[13:18:34.243] Packages needed by the future expression (n = 0): <none>
[13:18:34.243] Packages needed by future strategies (n = 0): <none>
[13:18:34.243] {
[13:18:34.243]     {
[13:18:34.243]         {
[13:18:34.243]             ...future.startTime <- base::Sys.time()
[13:18:34.243]             {
[13:18:34.243]                 {
[13:18:34.243]                   {
[13:18:34.243]                     {
[13:18:34.243]                       base::local({
[13:18:34.243]                         has_future <- base::requireNamespace("future", 
[13:18:34.243]                           quietly = TRUE)
[13:18:34.243]                         if (has_future) {
[13:18:34.243]                           ns <- base::getNamespace("future")
[13:18:34.243]                           version <- ns[[".package"]][["version"]]
[13:18:34.243]                           if (is.null(version)) 
[13:18:34.243]                             version <- utils::packageVersion("future")
[13:18:34.243]                         }
[13:18:34.243]                         else {
[13:18:34.243]                           version <- NULL
[13:18:34.243]                         }
[13:18:34.243]                         if (!has_future || version < "1.8.0") {
[13:18:34.243]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:34.243]                             "", base::R.version$version.string), 
[13:18:34.243]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:34.243]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:34.243]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:34.243]                               "release", "version")], collapse = " "), 
[13:18:34.243]                             hostname = base::Sys.info()[["nodename"]])
[13:18:34.243]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:34.243]                             info)
[13:18:34.243]                           info <- base::paste(info, collapse = "; ")
[13:18:34.243]                           if (!has_future) {
[13:18:34.243]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:34.243]                               info)
[13:18:34.243]                           }
[13:18:34.243]                           else {
[13:18:34.243]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:34.243]                               info, version)
[13:18:34.243]                           }
[13:18:34.243]                           base::stop(msg)
[13:18:34.243]                         }
[13:18:34.243]                       })
[13:18:34.243]                     }
[13:18:34.243]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:34.243]                     base::options(mc.cores = 1L)
[13:18:34.243]                   }
[13:18:34.243]                   options(future.plan = NULL)
[13:18:34.243]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:34.243]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:34.243]                 }
[13:18:34.243]                 ...future.workdir <- getwd()
[13:18:34.243]             }
[13:18:34.243]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:34.243]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:34.243]         }
[13:18:34.243]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:34.243]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:18:34.243]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:34.243]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:34.243]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:34.243]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:34.243]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:34.243]             base::names(...future.oldOptions))
[13:18:34.243]     }
[13:18:34.243]     if (FALSE) {
[13:18:34.243]     }
[13:18:34.243]     else {
[13:18:34.243]         if (TRUE) {
[13:18:34.243]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:34.243]                 open = "w")
[13:18:34.243]         }
[13:18:34.243]         else {
[13:18:34.243]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:34.243]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:34.243]         }
[13:18:34.243]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:34.243]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:34.243]             base::sink(type = "output", split = FALSE)
[13:18:34.243]             base::close(...future.stdout)
[13:18:34.243]         }, add = TRUE)
[13:18:34.243]     }
[13:18:34.243]     ...future.frame <- base::sys.nframe()
[13:18:34.243]     ...future.conditions <- base::list()
[13:18:34.243]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:34.243]     if (FALSE) {
[13:18:34.243]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:34.243]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:34.243]     }
[13:18:34.243]     ...future.result <- base::tryCatch({
[13:18:34.243]         base::withCallingHandlers({
[13:18:34.243]             ...future.value <- base::withVisible(base::local({
[13:18:34.243]                 ...future.makeSendCondition <- local({
[13:18:34.243]                   sendCondition <- NULL
[13:18:34.243]                   function(frame = 1L) {
[13:18:34.243]                     if (is.function(sendCondition)) 
[13:18:34.243]                       return(sendCondition)
[13:18:34.243]                     ns <- getNamespace("parallel")
[13:18:34.243]                     if (exists("sendData", mode = "function", 
[13:18:34.243]                       envir = ns)) {
[13:18:34.243]                       parallel_sendData <- get("sendData", mode = "function", 
[13:18:34.243]                         envir = ns)
[13:18:34.243]                       envir <- sys.frame(frame)
[13:18:34.243]                       master <- NULL
[13:18:34.243]                       while (!identical(envir, .GlobalEnv) && 
[13:18:34.243]                         !identical(envir, emptyenv())) {
[13:18:34.243]                         if (exists("master", mode = "list", envir = envir, 
[13:18:34.243]                           inherits = FALSE)) {
[13:18:34.243]                           master <- get("master", mode = "list", 
[13:18:34.243]                             envir = envir, inherits = FALSE)
[13:18:34.243]                           if (inherits(master, c("SOCKnode", 
[13:18:34.243]                             "SOCK0node"))) {
[13:18:34.243]                             sendCondition <<- function(cond) {
[13:18:34.243]                               data <- list(type = "VALUE", value = cond, 
[13:18:34.243]                                 success = TRUE)
[13:18:34.243]                               parallel_sendData(master, data)
[13:18:34.243]                             }
[13:18:34.243]                             return(sendCondition)
[13:18:34.243]                           }
[13:18:34.243]                         }
[13:18:34.243]                         frame <- frame + 1L
[13:18:34.243]                         envir <- sys.frame(frame)
[13:18:34.243]                       }
[13:18:34.243]                     }
[13:18:34.243]                     sendCondition <<- function(cond) NULL
[13:18:34.243]                   }
[13:18:34.243]                 })
[13:18:34.243]                 withCallingHandlers({
[13:18:34.243]                   {
[13:18:34.243]                     do.call(function(...) {
[13:18:34.243]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.243]                       if (!identical(...future.globals.maxSize.org, 
[13:18:34.243]                         ...future.globals.maxSize)) {
[13:18:34.243]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.243]                         on.exit(options(oopts), add = TRUE)
[13:18:34.243]                       }
[13:18:34.243]                       {
[13:18:34.243]                         lapply(seq_along(...future.elements_ii), 
[13:18:34.243]                           FUN = function(jj) {
[13:18:34.243]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.243]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.243]                               envir = globalenv(), inherits = FALSE)
[13:18:34.243]                             ...future.FUN(...future.X_jj, ...)
[13:18:34.243]                           })
[13:18:34.243]                       }
[13:18:34.243]                     }, args = future.call.arguments)
[13:18:34.243]                   }
[13:18:34.243]                 }, immediateCondition = function(cond) {
[13:18:34.243]                   sendCondition <- ...future.makeSendCondition()
[13:18:34.243]                   sendCondition(cond)
[13:18:34.243]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.243]                   {
[13:18:34.243]                     inherits <- base::inherits
[13:18:34.243]                     invokeRestart <- base::invokeRestart
[13:18:34.243]                     is.null <- base::is.null
[13:18:34.243]                     muffled <- FALSE
[13:18:34.243]                     if (inherits(cond, "message")) {
[13:18:34.243]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:34.243]                       if (muffled) 
[13:18:34.243]                         invokeRestart("muffleMessage")
[13:18:34.243]                     }
[13:18:34.243]                     else if (inherits(cond, "warning")) {
[13:18:34.243]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:34.243]                       if (muffled) 
[13:18:34.243]                         invokeRestart("muffleWarning")
[13:18:34.243]                     }
[13:18:34.243]                     else if (inherits(cond, "condition")) {
[13:18:34.243]                       if (!is.null(pattern)) {
[13:18:34.243]                         computeRestarts <- base::computeRestarts
[13:18:34.243]                         grepl <- base::grepl
[13:18:34.243]                         restarts <- computeRestarts(cond)
[13:18:34.243]                         for (restart in restarts) {
[13:18:34.243]                           name <- restart$name
[13:18:34.243]                           if (is.null(name)) 
[13:18:34.243]                             next
[13:18:34.243]                           if (!grepl(pattern, name)) 
[13:18:34.243]                             next
[13:18:34.243]                           invokeRestart(restart)
[13:18:34.243]                           muffled <- TRUE
[13:18:34.243]                           break
[13:18:34.243]                         }
[13:18:34.243]                       }
[13:18:34.243]                     }
[13:18:34.243]                     invisible(muffled)
[13:18:34.243]                   }
[13:18:34.243]                   muffleCondition(cond)
[13:18:34.243]                 })
[13:18:34.243]             }))
[13:18:34.243]             future::FutureResult(value = ...future.value$value, 
[13:18:34.243]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:34.243]                   ...future.rng), globalenv = if (FALSE) 
[13:18:34.243]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:34.243]                     ...future.globalenv.names))
[13:18:34.243]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:34.243]         }, condition = base::local({
[13:18:34.243]             c <- base::c
[13:18:34.243]             inherits <- base::inherits
[13:18:34.243]             invokeRestart <- base::invokeRestart
[13:18:34.243]             length <- base::length
[13:18:34.243]             list <- base::list
[13:18:34.243]             seq.int <- base::seq.int
[13:18:34.243]             signalCondition <- base::signalCondition
[13:18:34.243]             sys.calls <- base::sys.calls
[13:18:34.243]             `[[` <- base::`[[`
[13:18:34.243]             `+` <- base::`+`
[13:18:34.243]             `<<-` <- base::`<<-`
[13:18:34.243]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:34.243]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:34.243]                   3L)]
[13:18:34.243]             }
[13:18:34.243]             function(cond) {
[13:18:34.243]                 is_error <- inherits(cond, "error")
[13:18:34.243]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:34.243]                   NULL)
[13:18:34.243]                 if (is_error) {
[13:18:34.243]                   sessionInformation <- function() {
[13:18:34.243]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:34.243]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:34.243]                       search = base::search(), system = base::Sys.info())
[13:18:34.243]                   }
[13:18:34.243]                   ...future.conditions[[length(...future.conditions) + 
[13:18:34.243]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:34.243]                     cond$call), session = sessionInformation(), 
[13:18:34.243]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:34.243]                   signalCondition(cond)
[13:18:34.243]                 }
[13:18:34.243]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:34.243]                 "immediateCondition"))) {
[13:18:34.243]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:34.243]                   ...future.conditions[[length(...future.conditions) + 
[13:18:34.243]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:34.243]                   if (TRUE && !signal) {
[13:18:34.243]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.243]                     {
[13:18:34.243]                       inherits <- base::inherits
[13:18:34.243]                       invokeRestart <- base::invokeRestart
[13:18:34.243]                       is.null <- base::is.null
[13:18:34.243]                       muffled <- FALSE
[13:18:34.243]                       if (inherits(cond, "message")) {
[13:18:34.243]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:34.243]                         if (muffled) 
[13:18:34.243]                           invokeRestart("muffleMessage")
[13:18:34.243]                       }
[13:18:34.243]                       else if (inherits(cond, "warning")) {
[13:18:34.243]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:34.243]                         if (muffled) 
[13:18:34.243]                           invokeRestart("muffleWarning")
[13:18:34.243]                       }
[13:18:34.243]                       else if (inherits(cond, "condition")) {
[13:18:34.243]                         if (!is.null(pattern)) {
[13:18:34.243]                           computeRestarts <- base::computeRestarts
[13:18:34.243]                           grepl <- base::grepl
[13:18:34.243]                           restarts <- computeRestarts(cond)
[13:18:34.243]                           for (restart in restarts) {
[13:18:34.243]                             name <- restart$name
[13:18:34.243]                             if (is.null(name)) 
[13:18:34.243]                               next
[13:18:34.243]                             if (!grepl(pattern, name)) 
[13:18:34.243]                               next
[13:18:34.243]                             invokeRestart(restart)
[13:18:34.243]                             muffled <- TRUE
[13:18:34.243]                             break
[13:18:34.243]                           }
[13:18:34.243]                         }
[13:18:34.243]                       }
[13:18:34.243]                       invisible(muffled)
[13:18:34.243]                     }
[13:18:34.243]                     muffleCondition(cond, pattern = "^muffle")
[13:18:34.243]                   }
[13:18:34.243]                 }
[13:18:34.243]                 else {
[13:18:34.243]                   if (TRUE) {
[13:18:34.243]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.243]                     {
[13:18:34.243]                       inherits <- base::inherits
[13:18:34.243]                       invokeRestart <- base::invokeRestart
[13:18:34.243]                       is.null <- base::is.null
[13:18:34.243]                       muffled <- FALSE
[13:18:34.243]                       if (inherits(cond, "message")) {
[13:18:34.243]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:34.243]                         if (muffled) 
[13:18:34.243]                           invokeRestart("muffleMessage")
[13:18:34.243]                       }
[13:18:34.243]                       else if (inherits(cond, "warning")) {
[13:18:34.243]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:34.243]                         if (muffled) 
[13:18:34.243]                           invokeRestart("muffleWarning")
[13:18:34.243]                       }
[13:18:34.243]                       else if (inherits(cond, "condition")) {
[13:18:34.243]                         if (!is.null(pattern)) {
[13:18:34.243]                           computeRestarts <- base::computeRestarts
[13:18:34.243]                           grepl <- base::grepl
[13:18:34.243]                           restarts <- computeRestarts(cond)
[13:18:34.243]                           for (restart in restarts) {
[13:18:34.243]                             name <- restart$name
[13:18:34.243]                             if (is.null(name)) 
[13:18:34.243]                               next
[13:18:34.243]                             if (!grepl(pattern, name)) 
[13:18:34.243]                               next
[13:18:34.243]                             invokeRestart(restart)
[13:18:34.243]                             muffled <- TRUE
[13:18:34.243]                             break
[13:18:34.243]                           }
[13:18:34.243]                         }
[13:18:34.243]                       }
[13:18:34.243]                       invisible(muffled)
[13:18:34.243]                     }
[13:18:34.243]                     muffleCondition(cond, pattern = "^muffle")
[13:18:34.243]                   }
[13:18:34.243]                 }
[13:18:34.243]             }
[13:18:34.243]         }))
[13:18:34.243]     }, error = function(ex) {
[13:18:34.243]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:34.243]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:34.243]                 ...future.rng), started = ...future.startTime, 
[13:18:34.243]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:34.243]             version = "1.8"), class = "FutureResult")
[13:18:34.243]     }, finally = {
[13:18:34.243]         if (!identical(...future.workdir, getwd())) 
[13:18:34.243]             setwd(...future.workdir)
[13:18:34.243]         {
[13:18:34.243]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:34.243]                 ...future.oldOptions$nwarnings <- NULL
[13:18:34.243]             }
[13:18:34.243]             base::options(...future.oldOptions)
[13:18:34.243]             if (.Platform$OS.type == "windows") {
[13:18:34.243]                 old_names <- names(...future.oldEnvVars)
[13:18:34.243]                 envs <- base::Sys.getenv()
[13:18:34.243]                 names <- names(envs)
[13:18:34.243]                 common <- intersect(names, old_names)
[13:18:34.243]                 added <- setdiff(names, old_names)
[13:18:34.243]                 removed <- setdiff(old_names, names)
[13:18:34.243]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:34.243]                   envs[common]]
[13:18:34.243]                 NAMES <- toupper(changed)
[13:18:34.243]                 args <- list()
[13:18:34.243]                 for (kk in seq_along(NAMES)) {
[13:18:34.243]                   name <- changed[[kk]]
[13:18:34.243]                   NAME <- NAMES[[kk]]
[13:18:34.243]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.243]                     next
[13:18:34.243]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:34.243]                 }
[13:18:34.243]                 NAMES <- toupper(added)
[13:18:34.243]                 for (kk in seq_along(NAMES)) {
[13:18:34.243]                   name <- added[[kk]]
[13:18:34.243]                   NAME <- NAMES[[kk]]
[13:18:34.243]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.243]                     next
[13:18:34.243]                   args[[name]] <- ""
[13:18:34.243]                 }
[13:18:34.243]                 NAMES <- toupper(removed)
[13:18:34.243]                 for (kk in seq_along(NAMES)) {
[13:18:34.243]                   name <- removed[[kk]]
[13:18:34.243]                   NAME <- NAMES[[kk]]
[13:18:34.243]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.243]                     next
[13:18:34.243]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:34.243]                 }
[13:18:34.243]                 if (length(args) > 0) 
[13:18:34.243]                   base::do.call(base::Sys.setenv, args = args)
[13:18:34.243]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:34.243]             }
[13:18:34.243]             else {
[13:18:34.243]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:34.243]             }
[13:18:34.243]             {
[13:18:34.243]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:34.243]                   0L) {
[13:18:34.243]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:34.243]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:34.243]                   base::options(opts)
[13:18:34.243]                 }
[13:18:34.243]                 {
[13:18:34.243]                   {
[13:18:34.243]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:34.243]                     NULL
[13:18:34.243]                   }
[13:18:34.243]                   options(future.plan = NULL)
[13:18:34.243]                   if (is.na(NA_character_)) 
[13:18:34.243]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:34.243]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:34.243]                   future::plan(list(function (..., workers = availableCores(), 
[13:18:34.243]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:18:34.243]                     envir = parent.frame()) 
[13:18:34.243]                   {
[13:18:34.243]                     if (is.function(workers)) 
[13:18:34.243]                       workers <- workers()
[13:18:34.243]                     workers <- structure(as.integer(workers), 
[13:18:34.243]                       class = class(workers))
[13:18:34.243]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:18:34.243]                       workers >= 1)
[13:18:34.243]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:18:34.243]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:18:34.243]                     }
[13:18:34.243]                     future <- MultisessionFuture(..., workers = workers, 
[13:18:34.243]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:18:34.243]                       envir = envir)
[13:18:34.243]                     if (!future$lazy) 
[13:18:34.243]                       future <- run(future)
[13:18:34.243]                     invisible(future)
[13:18:34.243]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:34.243]                 }
[13:18:34.243]             }
[13:18:34.243]         }
[13:18:34.243]     })
[13:18:34.243]     if (TRUE) {
[13:18:34.243]         base::sink(type = "output", split = FALSE)
[13:18:34.243]         if (TRUE) {
[13:18:34.243]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:34.243]         }
[13:18:34.243]         else {
[13:18:34.243]             ...future.result["stdout"] <- base::list(NULL)
[13:18:34.243]         }
[13:18:34.243]         base::close(...future.stdout)
[13:18:34.243]         ...future.stdout <- NULL
[13:18:34.243]     }
[13:18:34.243]     ...future.result$conditions <- ...future.conditions
[13:18:34.243]     ...future.result$finished <- base::Sys.time()
[13:18:34.243]     ...future.result
[13:18:34.243] }
[13:18:34.246] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[13:18:34.246] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[13:18:34.247] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[13:18:34.247] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[13:18:34.247] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[13:18:34.247] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[13:18:34.248] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[13:18:34.248] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[13:18:34.248] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[13:18:34.248] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[13:18:34.249] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[13:18:34.249] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[13:18:34.249] MultisessionFuture started
[13:18:34.249] - Launch lazy future ... done
[13:18:34.249] run() for ‘MultisessionFuture’ ... done
[13:18:34.250] Created future:
[13:18:34.250] MultisessionFuture:
[13:18:34.250] Label: ‘future_replicate-1’
[13:18:34.250] Expression:
[13:18:34.250] {
[13:18:34.250]     do.call(function(...) {
[13:18:34.250]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.250]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:34.250]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.250]             on.exit(options(oopts), add = TRUE)
[13:18:34.250]         }
[13:18:34.250]         {
[13:18:34.250]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:34.250]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.250]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.250]                   envir = globalenv(), inherits = FALSE)
[13:18:34.250]                 ...future.FUN(...future.X_jj, ...)
[13:18:34.250]             })
[13:18:34.250]         }
[13:18:34.250]     }, args = future.call.arguments)
[13:18:34.250] }
[13:18:34.250] Lazy evaluation: FALSE
[13:18:34.250] Asynchronous evaluation: TRUE
[13:18:34.250] Local evaluation: TRUE
[13:18:34.250] Environment: R_GlobalEnv
[13:18:34.250] Capture standard output: TRUE
[13:18:34.250] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:34.250] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:34.250] Packages: <none>
[13:18:34.250] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:34.250] Resolved: FALSE
[13:18:34.250] Value: <not collected>
[13:18:34.250] Conditions captured: <none>
[13:18:34.250] Early signaling: FALSE
[13:18:34.250] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:34.250] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:34.261] Chunk #1 of 2 ... DONE
[13:18:34.261] Chunk #2 of 2 ...
[13:18:34.262]  - Finding globals in 'X' for chunk #2 ...
[13:18:34.262] getGlobalsAndPackages() ...
[13:18:34.262] Searching for globals...
[13:18:34.262] 
[13:18:34.262] Searching for globals ... DONE
[13:18:34.262] - globals: [0] <none>
[13:18:34.262] getGlobalsAndPackages() ... DONE
[13:18:34.262]    + additional globals found: [n=0] 
[13:18:34.262]    + additional namespaces needed: [n=0] 
[13:18:34.263]  - Finding globals in 'X' for chunk #2 ... DONE
[13:18:34.263]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[13:18:34.263]  - seeds: [3] <seeds>
[13:18:34.263] getGlobalsAndPackages() ...
[13:18:34.263] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:34.263] Resolving globals: FALSE
[13:18:34.263] Tweak future expression to call with '...' arguments ...
[13:18:34.263] {
[13:18:34.263]     do.call(function(...) {
[13:18:34.263]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.263]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:34.263]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.263]             on.exit(options(oopts), add = TRUE)
[13:18:34.263]         }
[13:18:34.263]         {
[13:18:34.263]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:34.263]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.263]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.263]                   envir = globalenv(), inherits = FALSE)
[13:18:34.263]                 ...future.FUN(...future.X_jj, ...)
[13:18:34.263]             })
[13:18:34.263]         }
[13:18:34.263]     }, args = future.call.arguments)
[13:18:34.263] }
[13:18:34.264] Tweak future expression to call with '...' arguments ... DONE
[13:18:34.264] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:34.264] 
[13:18:34.264] getGlobalsAndPackages() ... DONE
[13:18:34.264] run() for ‘Future’ ...
[13:18:34.265] - state: ‘created’
[13:18:34.265] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:18:34.280] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:34.280] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:18:34.281]   - Field: ‘node’
[13:18:34.281]   - Field: ‘label’
[13:18:34.281]   - Field: ‘local’
[13:18:34.281]   - Field: ‘owner’
[13:18:34.281]   - Field: ‘envir’
[13:18:34.281]   - Field: ‘workers’
[13:18:34.281]   - Field: ‘packages’
[13:18:34.281]   - Field: ‘gc’
[13:18:34.281]   - Field: ‘conditions’
[13:18:34.282]   - Field: ‘persistent’
[13:18:34.282]   - Field: ‘expr’
[13:18:34.282]   - Field: ‘uuid’
[13:18:34.282]   - Field: ‘seed’
[13:18:34.282]   - Field: ‘version’
[13:18:34.282]   - Field: ‘result’
[13:18:34.282]   - Field: ‘asynchronous’
[13:18:34.282]   - Field: ‘calls’
[13:18:34.282]   - Field: ‘globals’
[13:18:34.282]   - Field: ‘stdout’
[13:18:34.282]   - Field: ‘earlySignal’
[13:18:34.283]   - Field: ‘lazy’
[13:18:34.283]   - Field: ‘state’
[13:18:34.283] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:18:34.283] - Launch lazy future ...
[13:18:34.283] Packages needed by the future expression (n = 0): <none>
[13:18:34.283] Packages needed by future strategies (n = 0): <none>
[13:18:34.284] {
[13:18:34.284]     {
[13:18:34.284]         {
[13:18:34.284]             ...future.startTime <- base::Sys.time()
[13:18:34.284]             {
[13:18:34.284]                 {
[13:18:34.284]                   {
[13:18:34.284]                     {
[13:18:34.284]                       base::local({
[13:18:34.284]                         has_future <- base::requireNamespace("future", 
[13:18:34.284]                           quietly = TRUE)
[13:18:34.284]                         if (has_future) {
[13:18:34.284]                           ns <- base::getNamespace("future")
[13:18:34.284]                           version <- ns[[".package"]][["version"]]
[13:18:34.284]                           if (is.null(version)) 
[13:18:34.284]                             version <- utils::packageVersion("future")
[13:18:34.284]                         }
[13:18:34.284]                         else {
[13:18:34.284]                           version <- NULL
[13:18:34.284]                         }
[13:18:34.284]                         if (!has_future || version < "1.8.0") {
[13:18:34.284]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:34.284]                             "", base::R.version$version.string), 
[13:18:34.284]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:34.284]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:34.284]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:34.284]                               "release", "version")], collapse = " "), 
[13:18:34.284]                             hostname = base::Sys.info()[["nodename"]])
[13:18:34.284]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:34.284]                             info)
[13:18:34.284]                           info <- base::paste(info, collapse = "; ")
[13:18:34.284]                           if (!has_future) {
[13:18:34.284]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:34.284]                               info)
[13:18:34.284]                           }
[13:18:34.284]                           else {
[13:18:34.284]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:34.284]                               info, version)
[13:18:34.284]                           }
[13:18:34.284]                           base::stop(msg)
[13:18:34.284]                         }
[13:18:34.284]                       })
[13:18:34.284]                     }
[13:18:34.284]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:34.284]                     base::options(mc.cores = 1L)
[13:18:34.284]                   }
[13:18:34.284]                   options(future.plan = NULL)
[13:18:34.284]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:34.284]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:34.284]                 }
[13:18:34.284]                 ...future.workdir <- getwd()
[13:18:34.284]             }
[13:18:34.284]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:34.284]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:34.284]         }
[13:18:34.284]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:34.284]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[13:18:34.284]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:34.284]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:34.284]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:34.284]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:34.284]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:34.284]             base::names(...future.oldOptions))
[13:18:34.284]     }
[13:18:34.284]     if (FALSE) {
[13:18:34.284]     }
[13:18:34.284]     else {
[13:18:34.284]         if (TRUE) {
[13:18:34.284]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:34.284]                 open = "w")
[13:18:34.284]         }
[13:18:34.284]         else {
[13:18:34.284]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:34.284]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:34.284]         }
[13:18:34.284]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:34.284]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:34.284]             base::sink(type = "output", split = FALSE)
[13:18:34.284]             base::close(...future.stdout)
[13:18:34.284]         }, add = TRUE)
[13:18:34.284]     }
[13:18:34.284]     ...future.frame <- base::sys.nframe()
[13:18:34.284]     ...future.conditions <- base::list()
[13:18:34.284]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:34.284]     if (FALSE) {
[13:18:34.284]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:34.284]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:34.284]     }
[13:18:34.284]     ...future.result <- base::tryCatch({
[13:18:34.284]         base::withCallingHandlers({
[13:18:34.284]             ...future.value <- base::withVisible(base::local({
[13:18:34.284]                 ...future.makeSendCondition <- local({
[13:18:34.284]                   sendCondition <- NULL
[13:18:34.284]                   function(frame = 1L) {
[13:18:34.284]                     if (is.function(sendCondition)) 
[13:18:34.284]                       return(sendCondition)
[13:18:34.284]                     ns <- getNamespace("parallel")
[13:18:34.284]                     if (exists("sendData", mode = "function", 
[13:18:34.284]                       envir = ns)) {
[13:18:34.284]                       parallel_sendData <- get("sendData", mode = "function", 
[13:18:34.284]                         envir = ns)
[13:18:34.284]                       envir <- sys.frame(frame)
[13:18:34.284]                       master <- NULL
[13:18:34.284]                       while (!identical(envir, .GlobalEnv) && 
[13:18:34.284]                         !identical(envir, emptyenv())) {
[13:18:34.284]                         if (exists("master", mode = "list", envir = envir, 
[13:18:34.284]                           inherits = FALSE)) {
[13:18:34.284]                           master <- get("master", mode = "list", 
[13:18:34.284]                             envir = envir, inherits = FALSE)
[13:18:34.284]                           if (inherits(master, c("SOCKnode", 
[13:18:34.284]                             "SOCK0node"))) {
[13:18:34.284]                             sendCondition <<- function(cond) {
[13:18:34.284]                               data <- list(type = "VALUE", value = cond, 
[13:18:34.284]                                 success = TRUE)
[13:18:34.284]                               parallel_sendData(master, data)
[13:18:34.284]                             }
[13:18:34.284]                             return(sendCondition)
[13:18:34.284]                           }
[13:18:34.284]                         }
[13:18:34.284]                         frame <- frame + 1L
[13:18:34.284]                         envir <- sys.frame(frame)
[13:18:34.284]                       }
[13:18:34.284]                     }
[13:18:34.284]                     sendCondition <<- function(cond) NULL
[13:18:34.284]                   }
[13:18:34.284]                 })
[13:18:34.284]                 withCallingHandlers({
[13:18:34.284]                   {
[13:18:34.284]                     do.call(function(...) {
[13:18:34.284]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.284]                       if (!identical(...future.globals.maxSize.org, 
[13:18:34.284]                         ...future.globals.maxSize)) {
[13:18:34.284]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.284]                         on.exit(options(oopts), add = TRUE)
[13:18:34.284]                       }
[13:18:34.284]                       {
[13:18:34.284]                         lapply(seq_along(...future.elements_ii), 
[13:18:34.284]                           FUN = function(jj) {
[13:18:34.284]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.284]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.284]                               envir = globalenv(), inherits = FALSE)
[13:18:34.284]                             ...future.FUN(...future.X_jj, ...)
[13:18:34.284]                           })
[13:18:34.284]                       }
[13:18:34.284]                     }, args = future.call.arguments)
[13:18:34.284]                   }
[13:18:34.284]                 }, immediateCondition = function(cond) {
[13:18:34.284]                   sendCondition <- ...future.makeSendCondition()
[13:18:34.284]                   sendCondition(cond)
[13:18:34.284]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.284]                   {
[13:18:34.284]                     inherits <- base::inherits
[13:18:34.284]                     invokeRestart <- base::invokeRestart
[13:18:34.284]                     is.null <- base::is.null
[13:18:34.284]                     muffled <- FALSE
[13:18:34.284]                     if (inherits(cond, "message")) {
[13:18:34.284]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:34.284]                       if (muffled) 
[13:18:34.284]                         invokeRestart("muffleMessage")
[13:18:34.284]                     }
[13:18:34.284]                     else if (inherits(cond, "warning")) {
[13:18:34.284]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:34.284]                       if (muffled) 
[13:18:34.284]                         invokeRestart("muffleWarning")
[13:18:34.284]                     }
[13:18:34.284]                     else if (inherits(cond, "condition")) {
[13:18:34.284]                       if (!is.null(pattern)) {
[13:18:34.284]                         computeRestarts <- base::computeRestarts
[13:18:34.284]                         grepl <- base::grepl
[13:18:34.284]                         restarts <- computeRestarts(cond)
[13:18:34.284]                         for (restart in restarts) {
[13:18:34.284]                           name <- restart$name
[13:18:34.284]                           if (is.null(name)) 
[13:18:34.284]                             next
[13:18:34.284]                           if (!grepl(pattern, name)) 
[13:18:34.284]                             next
[13:18:34.284]                           invokeRestart(restart)
[13:18:34.284]                           muffled <- TRUE
[13:18:34.284]                           break
[13:18:34.284]                         }
[13:18:34.284]                       }
[13:18:34.284]                     }
[13:18:34.284]                     invisible(muffled)
[13:18:34.284]                   }
[13:18:34.284]                   muffleCondition(cond)
[13:18:34.284]                 })
[13:18:34.284]             }))
[13:18:34.284]             future::FutureResult(value = ...future.value$value, 
[13:18:34.284]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:34.284]                   ...future.rng), globalenv = if (FALSE) 
[13:18:34.284]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:34.284]                     ...future.globalenv.names))
[13:18:34.284]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:34.284]         }, condition = base::local({
[13:18:34.284]             c <- base::c
[13:18:34.284]             inherits <- base::inherits
[13:18:34.284]             invokeRestart <- base::invokeRestart
[13:18:34.284]             length <- base::length
[13:18:34.284]             list <- base::list
[13:18:34.284]             seq.int <- base::seq.int
[13:18:34.284]             signalCondition <- base::signalCondition
[13:18:34.284]             sys.calls <- base::sys.calls
[13:18:34.284]             `[[` <- base::`[[`
[13:18:34.284]             `+` <- base::`+`
[13:18:34.284]             `<<-` <- base::`<<-`
[13:18:34.284]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:34.284]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:34.284]                   3L)]
[13:18:34.284]             }
[13:18:34.284]             function(cond) {
[13:18:34.284]                 is_error <- inherits(cond, "error")
[13:18:34.284]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:34.284]                   NULL)
[13:18:34.284]                 if (is_error) {
[13:18:34.284]                   sessionInformation <- function() {
[13:18:34.284]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:34.284]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:34.284]                       search = base::search(), system = base::Sys.info())
[13:18:34.284]                   }
[13:18:34.284]                   ...future.conditions[[length(...future.conditions) + 
[13:18:34.284]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:34.284]                     cond$call), session = sessionInformation(), 
[13:18:34.284]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:34.284]                   signalCondition(cond)
[13:18:34.284]                 }
[13:18:34.284]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:34.284]                 "immediateCondition"))) {
[13:18:34.284]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:34.284]                   ...future.conditions[[length(...future.conditions) + 
[13:18:34.284]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:34.284]                   if (TRUE && !signal) {
[13:18:34.284]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.284]                     {
[13:18:34.284]                       inherits <- base::inherits
[13:18:34.284]                       invokeRestart <- base::invokeRestart
[13:18:34.284]                       is.null <- base::is.null
[13:18:34.284]                       muffled <- FALSE
[13:18:34.284]                       if (inherits(cond, "message")) {
[13:18:34.284]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:34.284]                         if (muffled) 
[13:18:34.284]                           invokeRestart("muffleMessage")
[13:18:34.284]                       }
[13:18:34.284]                       else if (inherits(cond, "warning")) {
[13:18:34.284]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:34.284]                         if (muffled) 
[13:18:34.284]                           invokeRestart("muffleWarning")
[13:18:34.284]                       }
[13:18:34.284]                       else if (inherits(cond, "condition")) {
[13:18:34.284]                         if (!is.null(pattern)) {
[13:18:34.284]                           computeRestarts <- base::computeRestarts
[13:18:34.284]                           grepl <- base::grepl
[13:18:34.284]                           restarts <- computeRestarts(cond)
[13:18:34.284]                           for (restart in restarts) {
[13:18:34.284]                             name <- restart$name
[13:18:34.284]                             if (is.null(name)) 
[13:18:34.284]                               next
[13:18:34.284]                             if (!grepl(pattern, name)) 
[13:18:34.284]                               next
[13:18:34.284]                             invokeRestart(restart)
[13:18:34.284]                             muffled <- TRUE
[13:18:34.284]                             break
[13:18:34.284]                           }
[13:18:34.284]                         }
[13:18:34.284]                       }
[13:18:34.284]                       invisible(muffled)
[13:18:34.284]                     }
[13:18:34.284]                     muffleCondition(cond, pattern = "^muffle")
[13:18:34.284]                   }
[13:18:34.284]                 }
[13:18:34.284]                 else {
[13:18:34.284]                   if (TRUE) {
[13:18:34.284]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.284]                     {
[13:18:34.284]                       inherits <- base::inherits
[13:18:34.284]                       invokeRestart <- base::invokeRestart
[13:18:34.284]                       is.null <- base::is.null
[13:18:34.284]                       muffled <- FALSE
[13:18:34.284]                       if (inherits(cond, "message")) {
[13:18:34.284]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:34.284]                         if (muffled) 
[13:18:34.284]                           invokeRestart("muffleMessage")
[13:18:34.284]                       }
[13:18:34.284]                       else if (inherits(cond, "warning")) {
[13:18:34.284]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:34.284]                         if (muffled) 
[13:18:34.284]                           invokeRestart("muffleWarning")
[13:18:34.284]                       }
[13:18:34.284]                       else if (inherits(cond, "condition")) {
[13:18:34.284]                         if (!is.null(pattern)) {
[13:18:34.284]                           computeRestarts <- base::computeRestarts
[13:18:34.284]                           grepl <- base::grepl
[13:18:34.284]                           restarts <- computeRestarts(cond)
[13:18:34.284]                           for (restart in restarts) {
[13:18:34.284]                             name <- restart$name
[13:18:34.284]                             if (is.null(name)) 
[13:18:34.284]                               next
[13:18:34.284]                             if (!grepl(pattern, name)) 
[13:18:34.284]                               next
[13:18:34.284]                             invokeRestart(restart)
[13:18:34.284]                             muffled <- TRUE
[13:18:34.284]                             break
[13:18:34.284]                           }
[13:18:34.284]                         }
[13:18:34.284]                       }
[13:18:34.284]                       invisible(muffled)
[13:18:34.284]                     }
[13:18:34.284]                     muffleCondition(cond, pattern = "^muffle")
[13:18:34.284]                   }
[13:18:34.284]                 }
[13:18:34.284]             }
[13:18:34.284]         }))
[13:18:34.284]     }, error = function(ex) {
[13:18:34.284]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:34.284]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:34.284]                 ...future.rng), started = ...future.startTime, 
[13:18:34.284]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:34.284]             version = "1.8"), class = "FutureResult")
[13:18:34.284]     }, finally = {
[13:18:34.284]         if (!identical(...future.workdir, getwd())) 
[13:18:34.284]             setwd(...future.workdir)
[13:18:34.284]         {
[13:18:34.284]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:34.284]                 ...future.oldOptions$nwarnings <- NULL
[13:18:34.284]             }
[13:18:34.284]             base::options(...future.oldOptions)
[13:18:34.284]             if (.Platform$OS.type == "windows") {
[13:18:34.284]                 old_names <- names(...future.oldEnvVars)
[13:18:34.284]                 envs <- base::Sys.getenv()
[13:18:34.284]                 names <- names(envs)
[13:18:34.284]                 common <- intersect(names, old_names)
[13:18:34.284]                 added <- setdiff(names, old_names)
[13:18:34.284]                 removed <- setdiff(old_names, names)
[13:18:34.284]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:34.284]                   envs[common]]
[13:18:34.284]                 NAMES <- toupper(changed)
[13:18:34.284]                 args <- list()
[13:18:34.284]                 for (kk in seq_along(NAMES)) {
[13:18:34.284]                   name <- changed[[kk]]
[13:18:34.284]                   NAME <- NAMES[[kk]]
[13:18:34.284]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.284]                     next
[13:18:34.284]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:34.284]                 }
[13:18:34.284]                 NAMES <- toupper(added)
[13:18:34.284]                 for (kk in seq_along(NAMES)) {
[13:18:34.284]                   name <- added[[kk]]
[13:18:34.284]                   NAME <- NAMES[[kk]]
[13:18:34.284]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.284]                     next
[13:18:34.284]                   args[[name]] <- ""
[13:18:34.284]                 }
[13:18:34.284]                 NAMES <- toupper(removed)
[13:18:34.284]                 for (kk in seq_along(NAMES)) {
[13:18:34.284]                   name <- removed[[kk]]
[13:18:34.284]                   NAME <- NAMES[[kk]]
[13:18:34.284]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.284]                     next
[13:18:34.284]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:34.284]                 }
[13:18:34.284]                 if (length(args) > 0) 
[13:18:34.284]                   base::do.call(base::Sys.setenv, args = args)
[13:18:34.284]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:34.284]             }
[13:18:34.284]             else {
[13:18:34.284]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:34.284]             }
[13:18:34.284]             {
[13:18:34.284]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:34.284]                   0L) {
[13:18:34.284]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:34.284]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:34.284]                   base::options(opts)
[13:18:34.284]                 }
[13:18:34.284]                 {
[13:18:34.284]                   {
[13:18:34.284]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:34.284]                     NULL
[13:18:34.284]                   }
[13:18:34.284]                   options(future.plan = NULL)
[13:18:34.284]                   if (is.na(NA_character_)) 
[13:18:34.284]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:34.284]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:34.284]                   future::plan(list(function (..., workers = availableCores(), 
[13:18:34.284]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:18:34.284]                     envir = parent.frame()) 
[13:18:34.284]                   {
[13:18:34.284]                     if (is.function(workers)) 
[13:18:34.284]                       workers <- workers()
[13:18:34.284]                     workers <- structure(as.integer(workers), 
[13:18:34.284]                       class = class(workers))
[13:18:34.284]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:18:34.284]                       workers >= 1)
[13:18:34.284]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:18:34.284]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:18:34.284]                     }
[13:18:34.284]                     future <- MultisessionFuture(..., workers = workers, 
[13:18:34.284]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:18:34.284]                       envir = envir)
[13:18:34.284]                     if (!future$lazy) 
[13:18:34.284]                       future <- run(future)
[13:18:34.284]                     invisible(future)
[13:18:34.284]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:34.284]                 }
[13:18:34.284]             }
[13:18:34.284]         }
[13:18:34.284]     })
[13:18:34.284]     if (TRUE) {
[13:18:34.284]         base::sink(type = "output", split = FALSE)
[13:18:34.284]         if (TRUE) {
[13:18:34.284]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:34.284]         }
[13:18:34.284]         else {
[13:18:34.284]             ...future.result["stdout"] <- base::list(NULL)
[13:18:34.284]         }
[13:18:34.284]         base::close(...future.stdout)
[13:18:34.284]         ...future.stdout <- NULL
[13:18:34.284]     }
[13:18:34.284]     ...future.result$conditions <- ...future.conditions
[13:18:34.284]     ...future.result$finished <- base::Sys.time()
[13:18:34.284]     ...future.result
[13:18:34.284] }
[13:18:34.287] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[13:18:34.287] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[13:18:34.287] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[13:18:34.287] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[13:18:34.288] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[13:18:34.288] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[13:18:34.288] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[13:18:34.288] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[13:18:34.289] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[13:18:34.289] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[13:18:34.289] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[13:18:34.289] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[13:18:34.290] MultisessionFuture started
[13:18:34.290] - Launch lazy future ... done
[13:18:34.290] run() for ‘MultisessionFuture’ ... done
[13:18:34.290] Created future:
[13:18:34.290] MultisessionFuture:
[13:18:34.290] Label: ‘future_replicate-2’
[13:18:34.290] Expression:
[13:18:34.290] {
[13:18:34.290]     do.call(function(...) {
[13:18:34.290]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.290]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:34.290]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.290]             on.exit(options(oopts), add = TRUE)
[13:18:34.290]         }
[13:18:34.290]         {
[13:18:34.290]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:34.290]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.290]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.290]                   envir = globalenv(), inherits = FALSE)
[13:18:34.290]                 ...future.FUN(...future.X_jj, ...)
[13:18:34.290]             })
[13:18:34.290]         }
[13:18:34.290]     }, args = future.call.arguments)
[13:18:34.290] }
[13:18:34.290] Lazy evaluation: FALSE
[13:18:34.290] Asynchronous evaluation: TRUE
[13:18:34.290] Local evaluation: TRUE
[13:18:34.290] Environment: R_GlobalEnv
[13:18:34.290] Capture standard output: TRUE
[13:18:34.290] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:34.290] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:34.290] Packages: <none>
[13:18:34.290] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:34.290] Resolved: FALSE
[13:18:34.290] Value: <not collected>
[13:18:34.290] Conditions captured: <none>
[13:18:34.290] Early signaling: FALSE
[13:18:34.290] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:34.290] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:34.302] Chunk #2 of 2 ... DONE
[13:18:34.302] Launching 2 futures (chunks) ... DONE
[13:18:34.302] Resolving 2 futures (chunks) ...
[13:18:34.302] resolve() on list ...
[13:18:34.302]  recursive: 0
[13:18:34.302]  length: 2
[13:18:34.302] 
[13:18:34.303] receiveMessageFromWorker() for ClusterFuture ...
[13:18:34.303] - Validating connection of MultisessionFuture
[13:18:34.303] - received message: FutureResult
[13:18:34.303] - Received FutureResult
[13:18:34.303] - Erased future from FutureRegistry
[13:18:34.303] result() for ClusterFuture ...
[13:18:34.304] - result already collected: FutureResult
[13:18:34.304] result() for ClusterFuture ... done
[13:18:34.304] receiveMessageFromWorker() for ClusterFuture ... done
[13:18:34.304] Future #1
[13:18:34.304] result() for ClusterFuture ...
[13:18:34.304] - result already collected: FutureResult
[13:18:34.304] result() for ClusterFuture ... done
[13:18:34.304] result() for ClusterFuture ...
[13:18:34.304] - result already collected: FutureResult
[13:18:34.304] result() for ClusterFuture ... done
[13:18:34.304] signalConditionsASAP(MultisessionFuture, pos=1) ...
[13:18:34.305] - nx: 2
[13:18:34.305] - relay: TRUE
[13:18:34.305] - stdout: TRUE
[13:18:34.305] - signal: TRUE
[13:18:34.305] - resignal: FALSE
[13:18:34.305] - force: TRUE
[13:18:34.305] - relayed: [n=2] FALSE, FALSE
[13:18:34.305] - queued futures: [n=2] FALSE, FALSE
[13:18:34.305]  - until=1
[13:18:34.305]  - relaying element #1
[13:18:34.305] result() for ClusterFuture ...
[13:18:34.306] - result already collected: FutureResult
[13:18:34.306] result() for ClusterFuture ... done
[13:18:34.306] result() for ClusterFuture ...
[13:18:34.306] - result already collected: FutureResult
[13:18:34.306] result() for ClusterFuture ... done
[13:18:34.306] result() for ClusterFuture ...
[13:18:34.306] - result already collected: FutureResult
[13:18:34.306] result() for ClusterFuture ... done
[13:18:34.306] result() for ClusterFuture ...
[13:18:34.306] - result already collected: FutureResult
[13:18:34.306] result() for ClusterFuture ... done
[13:18:34.307] - relayed: [n=2] TRUE, FALSE
[13:18:34.307] - queued futures: [n=2] TRUE, FALSE
[13:18:34.307] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[13:18:34.307]  length: 1 (resolved future 1)
[13:18:34.338] receiveMessageFromWorker() for ClusterFuture ...
[13:18:34.338] - Validating connection of MultisessionFuture
[13:18:34.338] - received message: FutureResult
[13:18:34.338] - Received FutureResult
[13:18:34.338] - Erased future from FutureRegistry
[13:18:34.338] result() for ClusterFuture ...
[13:18:34.339] - result already collected: FutureResult
[13:18:34.339] result() for ClusterFuture ... done
[13:18:34.339] receiveMessageFromWorker() for ClusterFuture ... done
[13:18:34.339] Future #2
[13:18:34.339] result() for ClusterFuture ...
[13:18:34.339] - result already collected: FutureResult
[13:18:34.339] result() for ClusterFuture ... done
[13:18:34.339] result() for ClusterFuture ...
[13:18:34.339] - result already collected: FutureResult
[13:18:34.339] result() for ClusterFuture ... done
[13:18:34.340] signalConditionsASAP(MultisessionFuture, pos=2) ...
[13:18:34.340] - nx: 2
[13:18:34.340] - relay: TRUE
[13:18:34.340] - stdout: TRUE
[13:18:34.340] - signal: TRUE
[13:18:34.340] - resignal: FALSE
[13:18:34.340] - force: TRUE
[13:18:34.340] - relayed: [n=2] TRUE, FALSE
[13:18:34.340] - queued futures: [n=2] TRUE, FALSE
[13:18:34.340]  - until=2
[13:18:34.340]  - relaying element #2
[13:18:34.340] result() for ClusterFuture ...
[13:18:34.341] - result already collected: FutureResult
[13:18:34.341] result() for ClusterFuture ... done
[13:18:34.341] result() for ClusterFuture ...
[13:18:34.341] - result already collected: FutureResult
[13:18:34.341] result() for ClusterFuture ... done
[13:18:34.341] result() for ClusterFuture ...
[13:18:34.341] - result already collected: FutureResult
[13:18:34.341] result() for ClusterFuture ... done
[13:18:34.341] result() for ClusterFuture ...
[13:18:34.341] - result already collected: FutureResult
[13:18:34.341] result() for ClusterFuture ... done
[13:18:34.342] - relayed: [n=2] TRUE, TRUE
[13:18:34.342] - queued futures: [n=2] TRUE, TRUE
[13:18:34.342] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[13:18:34.342]  length: 0 (resolved future 2)
[13:18:34.342] Relaying remaining futures
[13:18:34.342] signalConditionsASAP(NULL, pos=0) ...
[13:18:34.342] - nx: 2
[13:18:34.342] - relay: TRUE
[13:18:34.342] - stdout: TRUE
[13:18:34.342] - signal: TRUE
[13:18:34.342] - resignal: FALSE
[13:18:34.343] - force: TRUE
[13:18:34.343] - relayed: [n=2] TRUE, TRUE
[13:18:34.343] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:18:34.343] - relayed: [n=2] TRUE, TRUE
[13:18:34.343] - queued futures: [n=2] TRUE, TRUE
[13:18:34.343] signalConditionsASAP(NULL, pos=0) ... done
[13:18:34.343] resolve() on list ... DONE
[13:18:34.343] result() for ClusterFuture ...
[13:18:34.343] - result already collected: FutureResult
[13:18:34.343] result() for ClusterFuture ... done
[13:18:34.343] result() for ClusterFuture ...
[13:18:34.344] - result already collected: FutureResult
[13:18:34.344] result() for ClusterFuture ... done
[13:18:34.344] result() for ClusterFuture ...
[13:18:34.344] - result already collected: FutureResult
[13:18:34.344] result() for ClusterFuture ... done
[13:18:34.344] result() for ClusterFuture ...
[13:18:34.344] - result already collected: FutureResult
[13:18:34.344] result() for ClusterFuture ... done
[13:18:34.344]  - Number of value chunks collected: 2
[13:18:34.344] Resolving 2 futures (chunks) ... DONE
[13:18:34.344] Reducing values from 2 chunks ...
[13:18:34.345]  - Number of values collected after concatenation: 5
[13:18:34.345]  - Number of values expected: 5
[13:18:34.345] Reducing values from 2 chunks ... DONE
[13:18:34.345] future_lapply() ... DONE
[13:18:34.345] future_lapply() ...
[13:18:34.346] Generating random seeds ...
[13:18:34.346] Generating random seed streams for 5 elements ...
[13:18:34.346] Generating random seed streams for 5 elements ... DONE
[13:18:34.346] Generating random seeds ... DONE
[13:18:34.346] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:18:34.350] Number of chunks: 2
[13:18:34.350] getGlobalsAndPackagesXApply() ...
[13:18:34.350]  - future.globals: TRUE
[13:18:34.350] getGlobalsAndPackages() ...
[13:18:34.350] Searching for globals...
[13:18:34.352] - globals found: [2] ‘FUN’, ‘sample’
[13:18:34.352] Searching for globals ... DONE
[13:18:34.352] Resolving globals: FALSE
[13:18:34.352] The total size of the 1 globals is 616 bytes (616 bytes)
[13:18:34.352] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:18:34.353] - globals: [1] ‘FUN’
[13:18:34.353] 
[13:18:34.353] getGlobalsAndPackages() ... DONE
[13:18:34.353]  - globals found/used: [n=1] ‘FUN’
[13:18:34.353]  - needed namespaces: [n=0] 
[13:18:34.353] Finding globals ... DONE
[13:18:34.353]  - use_args: TRUE
[13:18:34.353]  - Getting '...' globals ...
[13:18:34.354] resolve() on list ...
[13:18:34.354]  recursive: 0
[13:18:34.354]  length: 1
[13:18:34.354]  elements: ‘...’
[13:18:34.354]  length: 0 (resolved future 1)
[13:18:34.354] resolve() on list ... DONE
[13:18:34.354]    - '...' content: [n=0] 
[13:18:34.354] List of 1
[13:18:34.354]  $ ...: list()
[13:18:34.354]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:34.354]  - attr(*, "where")=List of 1
[13:18:34.354]   ..$ ...:<environment: 0x55df1f6f53c0> 
[13:18:34.354]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:34.354]  - attr(*, "resolved")= logi TRUE
[13:18:34.354]  - attr(*, "total_size")= num NA
[13:18:34.357]  - Getting '...' globals ... DONE
[13:18:34.357] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:18:34.357] List of 2
[13:18:34.357]  $ ...future.FUN:function (...)  
[13:18:34.357]  $ ...          : list()
[13:18:34.357]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:34.357]  - attr(*, "where")=List of 2
[13:18:34.357]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:18:34.357]   ..$ ...          :<environment: 0x55df1f6f53c0> 
[13:18:34.357]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:34.357]  - attr(*, "resolved")= logi FALSE
[13:18:34.357]  - attr(*, "total_size")= num 616
[13:18:34.360] Packages to be attached in all futures: [n=0] 
[13:18:34.360] getGlobalsAndPackagesXApply() ... DONE
[13:18:34.360] Number of futures (= number of chunks): 2
[13:18:34.360] Launching 2 futures (chunks) ...
[13:18:34.360] Chunk #1 of 2 ...
[13:18:34.360]  - Finding globals in 'X' for chunk #1 ...
[13:18:34.361] getGlobalsAndPackages() ...
[13:18:34.361] Searching for globals...
[13:18:34.361] 
[13:18:34.361] Searching for globals ... DONE
[13:18:34.361] - globals: [0] <none>
[13:18:34.361] getGlobalsAndPackages() ... DONE
[13:18:34.361]    + additional globals found: [n=0] 
[13:18:34.361]    + additional namespaces needed: [n=0] 
[13:18:34.361]  - Finding globals in 'X' for chunk #1 ... DONE
[13:18:34.362]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:18:34.362]  - seeds: [2] <seeds>
[13:18:34.362] getGlobalsAndPackages() ...
[13:18:34.362] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:34.362] Resolving globals: FALSE
[13:18:34.362] Tweak future expression to call with '...' arguments ...
[13:18:34.362] {
[13:18:34.362]     do.call(function(...) {
[13:18:34.362]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.362]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:34.362]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.362]             on.exit(options(oopts), add = TRUE)
[13:18:34.362]         }
[13:18:34.362]         {
[13:18:34.362]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:34.362]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.362]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.362]                   envir = globalenv(), inherits = FALSE)
[13:18:34.362]                 ...future.FUN(...future.X_jj, ...)
[13:18:34.362]             })
[13:18:34.362]         }
[13:18:34.362]     }, args = future.call.arguments)
[13:18:34.362] }
[13:18:34.362] Tweak future expression to call with '...' arguments ... DONE
[13:18:34.363] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:34.363] 
[13:18:34.363] getGlobalsAndPackages() ... DONE
[13:18:34.363] run() for ‘Future’ ...
[13:18:34.363] - state: ‘created’
[13:18:34.364] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:18:34.378] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:34.378] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:18:34.378]   - Field: ‘node’
[13:18:34.378]   - Field: ‘label’
[13:18:34.378]   - Field: ‘local’
[13:18:34.379]   - Field: ‘owner’
[13:18:34.379]   - Field: ‘envir’
[13:18:34.379]   - Field: ‘workers’
[13:18:34.379]   - Field: ‘packages’
[13:18:34.379]   - Field: ‘gc’
[13:18:34.379]   - Field: ‘conditions’
[13:18:34.379]   - Field: ‘persistent’
[13:18:34.379]   - Field: ‘expr’
[13:18:34.379]   - Field: ‘uuid’
[13:18:34.379]   - Field: ‘seed’
[13:18:34.379]   - Field: ‘version’
[13:18:34.380]   - Field: ‘result’
[13:18:34.380]   - Field: ‘asynchronous’
[13:18:34.380]   - Field: ‘calls’
[13:18:34.380]   - Field: ‘globals’
[13:18:34.380]   - Field: ‘stdout’
[13:18:34.380]   - Field: ‘earlySignal’
[13:18:34.380]   - Field: ‘lazy’
[13:18:34.380]   - Field: ‘state’
[13:18:34.380] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:18:34.380] - Launch lazy future ...
[13:18:34.381] Packages needed by the future expression (n = 0): <none>
[13:18:34.381] Packages needed by future strategies (n = 0): <none>
[13:18:34.381] {
[13:18:34.381]     {
[13:18:34.381]         {
[13:18:34.381]             ...future.startTime <- base::Sys.time()
[13:18:34.381]             {
[13:18:34.381]                 {
[13:18:34.381]                   {
[13:18:34.381]                     {
[13:18:34.381]                       base::local({
[13:18:34.381]                         has_future <- base::requireNamespace("future", 
[13:18:34.381]                           quietly = TRUE)
[13:18:34.381]                         if (has_future) {
[13:18:34.381]                           ns <- base::getNamespace("future")
[13:18:34.381]                           version <- ns[[".package"]][["version"]]
[13:18:34.381]                           if (is.null(version)) 
[13:18:34.381]                             version <- utils::packageVersion("future")
[13:18:34.381]                         }
[13:18:34.381]                         else {
[13:18:34.381]                           version <- NULL
[13:18:34.381]                         }
[13:18:34.381]                         if (!has_future || version < "1.8.0") {
[13:18:34.381]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:34.381]                             "", base::R.version$version.string), 
[13:18:34.381]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:34.381]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:34.381]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:34.381]                               "release", "version")], collapse = " "), 
[13:18:34.381]                             hostname = base::Sys.info()[["nodename"]])
[13:18:34.381]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:34.381]                             info)
[13:18:34.381]                           info <- base::paste(info, collapse = "; ")
[13:18:34.381]                           if (!has_future) {
[13:18:34.381]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:34.381]                               info)
[13:18:34.381]                           }
[13:18:34.381]                           else {
[13:18:34.381]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:34.381]                               info, version)
[13:18:34.381]                           }
[13:18:34.381]                           base::stop(msg)
[13:18:34.381]                         }
[13:18:34.381]                       })
[13:18:34.381]                     }
[13:18:34.381]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:34.381]                     base::options(mc.cores = 1L)
[13:18:34.381]                   }
[13:18:34.381]                   options(future.plan = NULL)
[13:18:34.381]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:34.381]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:34.381]                 }
[13:18:34.381]                 ...future.workdir <- getwd()
[13:18:34.381]             }
[13:18:34.381]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:34.381]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:34.381]         }
[13:18:34.381]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:34.381]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:18:34.381]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:34.381]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:34.381]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:34.381]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:34.381]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:34.381]             base::names(...future.oldOptions))
[13:18:34.381]     }
[13:18:34.381]     if (FALSE) {
[13:18:34.381]     }
[13:18:34.381]     else {
[13:18:34.381]         if (TRUE) {
[13:18:34.381]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:34.381]                 open = "w")
[13:18:34.381]         }
[13:18:34.381]         else {
[13:18:34.381]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:34.381]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:34.381]         }
[13:18:34.381]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:34.381]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:34.381]             base::sink(type = "output", split = FALSE)
[13:18:34.381]             base::close(...future.stdout)
[13:18:34.381]         }, add = TRUE)
[13:18:34.381]     }
[13:18:34.381]     ...future.frame <- base::sys.nframe()
[13:18:34.381]     ...future.conditions <- base::list()
[13:18:34.381]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:34.381]     if (FALSE) {
[13:18:34.381]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:34.381]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:34.381]     }
[13:18:34.381]     ...future.result <- base::tryCatch({
[13:18:34.381]         base::withCallingHandlers({
[13:18:34.381]             ...future.value <- base::withVisible(base::local({
[13:18:34.381]                 ...future.makeSendCondition <- local({
[13:18:34.381]                   sendCondition <- NULL
[13:18:34.381]                   function(frame = 1L) {
[13:18:34.381]                     if (is.function(sendCondition)) 
[13:18:34.381]                       return(sendCondition)
[13:18:34.381]                     ns <- getNamespace("parallel")
[13:18:34.381]                     if (exists("sendData", mode = "function", 
[13:18:34.381]                       envir = ns)) {
[13:18:34.381]                       parallel_sendData <- get("sendData", mode = "function", 
[13:18:34.381]                         envir = ns)
[13:18:34.381]                       envir <- sys.frame(frame)
[13:18:34.381]                       master <- NULL
[13:18:34.381]                       while (!identical(envir, .GlobalEnv) && 
[13:18:34.381]                         !identical(envir, emptyenv())) {
[13:18:34.381]                         if (exists("master", mode = "list", envir = envir, 
[13:18:34.381]                           inherits = FALSE)) {
[13:18:34.381]                           master <- get("master", mode = "list", 
[13:18:34.381]                             envir = envir, inherits = FALSE)
[13:18:34.381]                           if (inherits(master, c("SOCKnode", 
[13:18:34.381]                             "SOCK0node"))) {
[13:18:34.381]                             sendCondition <<- function(cond) {
[13:18:34.381]                               data <- list(type = "VALUE", value = cond, 
[13:18:34.381]                                 success = TRUE)
[13:18:34.381]                               parallel_sendData(master, data)
[13:18:34.381]                             }
[13:18:34.381]                             return(sendCondition)
[13:18:34.381]                           }
[13:18:34.381]                         }
[13:18:34.381]                         frame <- frame + 1L
[13:18:34.381]                         envir <- sys.frame(frame)
[13:18:34.381]                       }
[13:18:34.381]                     }
[13:18:34.381]                     sendCondition <<- function(cond) NULL
[13:18:34.381]                   }
[13:18:34.381]                 })
[13:18:34.381]                 withCallingHandlers({
[13:18:34.381]                   {
[13:18:34.381]                     do.call(function(...) {
[13:18:34.381]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.381]                       if (!identical(...future.globals.maxSize.org, 
[13:18:34.381]                         ...future.globals.maxSize)) {
[13:18:34.381]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.381]                         on.exit(options(oopts), add = TRUE)
[13:18:34.381]                       }
[13:18:34.381]                       {
[13:18:34.381]                         lapply(seq_along(...future.elements_ii), 
[13:18:34.381]                           FUN = function(jj) {
[13:18:34.381]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.381]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.381]                               envir = globalenv(), inherits = FALSE)
[13:18:34.381]                             ...future.FUN(...future.X_jj, ...)
[13:18:34.381]                           })
[13:18:34.381]                       }
[13:18:34.381]                     }, args = future.call.arguments)
[13:18:34.381]                   }
[13:18:34.381]                 }, immediateCondition = function(cond) {
[13:18:34.381]                   sendCondition <- ...future.makeSendCondition()
[13:18:34.381]                   sendCondition(cond)
[13:18:34.381]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.381]                   {
[13:18:34.381]                     inherits <- base::inherits
[13:18:34.381]                     invokeRestart <- base::invokeRestart
[13:18:34.381]                     is.null <- base::is.null
[13:18:34.381]                     muffled <- FALSE
[13:18:34.381]                     if (inherits(cond, "message")) {
[13:18:34.381]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:34.381]                       if (muffled) 
[13:18:34.381]                         invokeRestart("muffleMessage")
[13:18:34.381]                     }
[13:18:34.381]                     else if (inherits(cond, "warning")) {
[13:18:34.381]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:34.381]                       if (muffled) 
[13:18:34.381]                         invokeRestart("muffleWarning")
[13:18:34.381]                     }
[13:18:34.381]                     else if (inherits(cond, "condition")) {
[13:18:34.381]                       if (!is.null(pattern)) {
[13:18:34.381]                         computeRestarts <- base::computeRestarts
[13:18:34.381]                         grepl <- base::grepl
[13:18:34.381]                         restarts <- computeRestarts(cond)
[13:18:34.381]                         for (restart in restarts) {
[13:18:34.381]                           name <- restart$name
[13:18:34.381]                           if (is.null(name)) 
[13:18:34.381]                             next
[13:18:34.381]                           if (!grepl(pattern, name)) 
[13:18:34.381]                             next
[13:18:34.381]                           invokeRestart(restart)
[13:18:34.381]                           muffled <- TRUE
[13:18:34.381]                           break
[13:18:34.381]                         }
[13:18:34.381]                       }
[13:18:34.381]                     }
[13:18:34.381]                     invisible(muffled)
[13:18:34.381]                   }
[13:18:34.381]                   muffleCondition(cond)
[13:18:34.381]                 })
[13:18:34.381]             }))
[13:18:34.381]             future::FutureResult(value = ...future.value$value, 
[13:18:34.381]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:34.381]                   ...future.rng), globalenv = if (FALSE) 
[13:18:34.381]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:34.381]                     ...future.globalenv.names))
[13:18:34.381]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:34.381]         }, condition = base::local({
[13:18:34.381]             c <- base::c
[13:18:34.381]             inherits <- base::inherits
[13:18:34.381]             invokeRestart <- base::invokeRestart
[13:18:34.381]             length <- base::length
[13:18:34.381]             list <- base::list
[13:18:34.381]             seq.int <- base::seq.int
[13:18:34.381]             signalCondition <- base::signalCondition
[13:18:34.381]             sys.calls <- base::sys.calls
[13:18:34.381]             `[[` <- base::`[[`
[13:18:34.381]             `+` <- base::`+`
[13:18:34.381]             `<<-` <- base::`<<-`
[13:18:34.381]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:34.381]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:34.381]                   3L)]
[13:18:34.381]             }
[13:18:34.381]             function(cond) {
[13:18:34.381]                 is_error <- inherits(cond, "error")
[13:18:34.381]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:34.381]                   NULL)
[13:18:34.381]                 if (is_error) {
[13:18:34.381]                   sessionInformation <- function() {
[13:18:34.381]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:34.381]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:34.381]                       search = base::search(), system = base::Sys.info())
[13:18:34.381]                   }
[13:18:34.381]                   ...future.conditions[[length(...future.conditions) + 
[13:18:34.381]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:34.381]                     cond$call), session = sessionInformation(), 
[13:18:34.381]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:34.381]                   signalCondition(cond)
[13:18:34.381]                 }
[13:18:34.381]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:34.381]                 "immediateCondition"))) {
[13:18:34.381]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:34.381]                   ...future.conditions[[length(...future.conditions) + 
[13:18:34.381]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:34.381]                   if (TRUE && !signal) {
[13:18:34.381]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.381]                     {
[13:18:34.381]                       inherits <- base::inherits
[13:18:34.381]                       invokeRestart <- base::invokeRestart
[13:18:34.381]                       is.null <- base::is.null
[13:18:34.381]                       muffled <- FALSE
[13:18:34.381]                       if (inherits(cond, "message")) {
[13:18:34.381]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:34.381]                         if (muffled) 
[13:18:34.381]                           invokeRestart("muffleMessage")
[13:18:34.381]                       }
[13:18:34.381]                       else if (inherits(cond, "warning")) {
[13:18:34.381]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:34.381]                         if (muffled) 
[13:18:34.381]                           invokeRestart("muffleWarning")
[13:18:34.381]                       }
[13:18:34.381]                       else if (inherits(cond, "condition")) {
[13:18:34.381]                         if (!is.null(pattern)) {
[13:18:34.381]                           computeRestarts <- base::computeRestarts
[13:18:34.381]                           grepl <- base::grepl
[13:18:34.381]                           restarts <- computeRestarts(cond)
[13:18:34.381]                           for (restart in restarts) {
[13:18:34.381]                             name <- restart$name
[13:18:34.381]                             if (is.null(name)) 
[13:18:34.381]                               next
[13:18:34.381]                             if (!grepl(pattern, name)) 
[13:18:34.381]                               next
[13:18:34.381]                             invokeRestart(restart)
[13:18:34.381]                             muffled <- TRUE
[13:18:34.381]                             break
[13:18:34.381]                           }
[13:18:34.381]                         }
[13:18:34.381]                       }
[13:18:34.381]                       invisible(muffled)
[13:18:34.381]                     }
[13:18:34.381]                     muffleCondition(cond, pattern = "^muffle")
[13:18:34.381]                   }
[13:18:34.381]                 }
[13:18:34.381]                 else {
[13:18:34.381]                   if (TRUE) {
[13:18:34.381]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.381]                     {
[13:18:34.381]                       inherits <- base::inherits
[13:18:34.381]                       invokeRestart <- base::invokeRestart
[13:18:34.381]                       is.null <- base::is.null
[13:18:34.381]                       muffled <- FALSE
[13:18:34.381]                       if (inherits(cond, "message")) {
[13:18:34.381]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:34.381]                         if (muffled) 
[13:18:34.381]                           invokeRestart("muffleMessage")
[13:18:34.381]                       }
[13:18:34.381]                       else if (inherits(cond, "warning")) {
[13:18:34.381]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:34.381]                         if (muffled) 
[13:18:34.381]                           invokeRestart("muffleWarning")
[13:18:34.381]                       }
[13:18:34.381]                       else if (inherits(cond, "condition")) {
[13:18:34.381]                         if (!is.null(pattern)) {
[13:18:34.381]                           computeRestarts <- base::computeRestarts
[13:18:34.381]                           grepl <- base::grepl
[13:18:34.381]                           restarts <- computeRestarts(cond)
[13:18:34.381]                           for (restart in restarts) {
[13:18:34.381]                             name <- restart$name
[13:18:34.381]                             if (is.null(name)) 
[13:18:34.381]                               next
[13:18:34.381]                             if (!grepl(pattern, name)) 
[13:18:34.381]                               next
[13:18:34.381]                             invokeRestart(restart)
[13:18:34.381]                             muffled <- TRUE
[13:18:34.381]                             break
[13:18:34.381]                           }
[13:18:34.381]                         }
[13:18:34.381]                       }
[13:18:34.381]                       invisible(muffled)
[13:18:34.381]                     }
[13:18:34.381]                     muffleCondition(cond, pattern = "^muffle")
[13:18:34.381]                   }
[13:18:34.381]                 }
[13:18:34.381]             }
[13:18:34.381]         }))
[13:18:34.381]     }, error = function(ex) {
[13:18:34.381]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:34.381]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:34.381]                 ...future.rng), started = ...future.startTime, 
[13:18:34.381]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:34.381]             version = "1.8"), class = "FutureResult")
[13:18:34.381]     }, finally = {
[13:18:34.381]         if (!identical(...future.workdir, getwd())) 
[13:18:34.381]             setwd(...future.workdir)
[13:18:34.381]         {
[13:18:34.381]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:34.381]                 ...future.oldOptions$nwarnings <- NULL
[13:18:34.381]             }
[13:18:34.381]             base::options(...future.oldOptions)
[13:18:34.381]             if (.Platform$OS.type == "windows") {
[13:18:34.381]                 old_names <- names(...future.oldEnvVars)
[13:18:34.381]                 envs <- base::Sys.getenv()
[13:18:34.381]                 names <- names(envs)
[13:18:34.381]                 common <- intersect(names, old_names)
[13:18:34.381]                 added <- setdiff(names, old_names)
[13:18:34.381]                 removed <- setdiff(old_names, names)
[13:18:34.381]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:34.381]                   envs[common]]
[13:18:34.381]                 NAMES <- toupper(changed)
[13:18:34.381]                 args <- list()
[13:18:34.381]                 for (kk in seq_along(NAMES)) {
[13:18:34.381]                   name <- changed[[kk]]
[13:18:34.381]                   NAME <- NAMES[[kk]]
[13:18:34.381]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.381]                     next
[13:18:34.381]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:34.381]                 }
[13:18:34.381]                 NAMES <- toupper(added)
[13:18:34.381]                 for (kk in seq_along(NAMES)) {
[13:18:34.381]                   name <- added[[kk]]
[13:18:34.381]                   NAME <- NAMES[[kk]]
[13:18:34.381]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.381]                     next
[13:18:34.381]                   args[[name]] <- ""
[13:18:34.381]                 }
[13:18:34.381]                 NAMES <- toupper(removed)
[13:18:34.381]                 for (kk in seq_along(NAMES)) {
[13:18:34.381]                   name <- removed[[kk]]
[13:18:34.381]                   NAME <- NAMES[[kk]]
[13:18:34.381]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.381]                     next
[13:18:34.381]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:34.381]                 }
[13:18:34.381]                 if (length(args) > 0) 
[13:18:34.381]                   base::do.call(base::Sys.setenv, args = args)
[13:18:34.381]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:34.381]             }
[13:18:34.381]             else {
[13:18:34.381]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:34.381]             }
[13:18:34.381]             {
[13:18:34.381]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:34.381]                   0L) {
[13:18:34.381]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:34.381]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:34.381]                   base::options(opts)
[13:18:34.381]                 }
[13:18:34.381]                 {
[13:18:34.381]                   {
[13:18:34.381]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:34.381]                     NULL
[13:18:34.381]                   }
[13:18:34.381]                   options(future.plan = NULL)
[13:18:34.381]                   if (is.na(NA_character_)) 
[13:18:34.381]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:34.381]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:34.381]                   future::plan(list(function (..., workers = availableCores(), 
[13:18:34.381]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:18:34.381]                     envir = parent.frame()) 
[13:18:34.381]                   {
[13:18:34.381]                     if (is.function(workers)) 
[13:18:34.381]                       workers <- workers()
[13:18:34.381]                     workers <- structure(as.integer(workers), 
[13:18:34.381]                       class = class(workers))
[13:18:34.381]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:18:34.381]                       workers >= 1)
[13:18:34.381]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:18:34.381]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:18:34.381]                     }
[13:18:34.381]                     future <- MultisessionFuture(..., workers = workers, 
[13:18:34.381]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:18:34.381]                       envir = envir)
[13:18:34.381]                     if (!future$lazy) 
[13:18:34.381]                       future <- run(future)
[13:18:34.381]                     invisible(future)
[13:18:34.381]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:34.381]                 }
[13:18:34.381]             }
[13:18:34.381]         }
[13:18:34.381]     })
[13:18:34.381]     if (TRUE) {
[13:18:34.381]         base::sink(type = "output", split = FALSE)
[13:18:34.381]         if (TRUE) {
[13:18:34.381]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:34.381]         }
[13:18:34.381]         else {
[13:18:34.381]             ...future.result["stdout"] <- base::list(NULL)
[13:18:34.381]         }
[13:18:34.381]         base::close(...future.stdout)
[13:18:34.381]         ...future.stdout <- NULL
[13:18:34.381]     }
[13:18:34.381]     ...future.result$conditions <- ...future.conditions
[13:18:34.381]     ...future.result$finished <- base::Sys.time()
[13:18:34.381]     ...future.result
[13:18:34.381] }
[13:18:34.384] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[13:18:34.384] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[13:18:34.385] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[13:18:34.385] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[13:18:34.385] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[13:18:34.386] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[13:18:34.386] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[13:18:34.386] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[13:18:34.386] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[13:18:34.386] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[13:18:34.387] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[13:18:34.387] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[13:18:34.387] MultisessionFuture started
[13:18:34.388] - Launch lazy future ... done
[13:18:34.388] run() for ‘MultisessionFuture’ ... done
[13:18:34.388] Created future:
[13:18:34.388] MultisessionFuture:
[13:18:34.388] Label: ‘future_replicate-1’
[13:18:34.388] Expression:
[13:18:34.388] {
[13:18:34.388]     do.call(function(...) {
[13:18:34.388]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.388]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:34.388]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.388]             on.exit(options(oopts), add = TRUE)
[13:18:34.388]         }
[13:18:34.388]         {
[13:18:34.388]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:34.388]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.388]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.388]                   envir = globalenv(), inherits = FALSE)
[13:18:34.388]                 ...future.FUN(...future.X_jj, ...)
[13:18:34.388]             })
[13:18:34.388]         }
[13:18:34.388]     }, args = future.call.arguments)
[13:18:34.388] }
[13:18:34.388] Lazy evaluation: FALSE
[13:18:34.388] Asynchronous evaluation: TRUE
[13:18:34.388] Local evaluation: TRUE
[13:18:34.388] Environment: R_GlobalEnv
[13:18:34.388] Capture standard output: TRUE
[13:18:34.388] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:34.388] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:34.388] Packages: <none>
[13:18:34.388] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:34.388] Resolved: FALSE
[13:18:34.388] Value: <not collected>
[13:18:34.388] Conditions captured: <none>
[13:18:34.388] Early signaling: FALSE
[13:18:34.388] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:34.388] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:34.399] Chunk #1 of 2 ... DONE
[13:18:34.400] Chunk #2 of 2 ...
[13:18:34.400]  - Finding globals in 'X' for chunk #2 ...
[13:18:34.400] getGlobalsAndPackages() ...
[13:18:34.400] Searching for globals...
[13:18:34.400] 
[13:18:34.400] Searching for globals ... DONE
[13:18:34.400] - globals: [0] <none>
[13:18:34.400] getGlobalsAndPackages() ... DONE
[13:18:34.400]    + additional globals found: [n=0] 
[13:18:34.401]    + additional namespaces needed: [n=0] 
[13:18:34.401]  - Finding globals in 'X' for chunk #2 ... DONE
[13:18:34.401]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[13:18:34.401]  - seeds: [3] <seeds>
[13:18:34.401] getGlobalsAndPackages() ...
[13:18:34.401] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:34.401] Resolving globals: FALSE
[13:18:34.401] Tweak future expression to call with '...' arguments ...
[13:18:34.401] {
[13:18:34.401]     do.call(function(...) {
[13:18:34.401]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.401]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:34.401]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.401]             on.exit(options(oopts), add = TRUE)
[13:18:34.401]         }
[13:18:34.401]         {
[13:18:34.401]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:34.401]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.401]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.401]                   envir = globalenv(), inherits = FALSE)
[13:18:34.401]                 ...future.FUN(...future.X_jj, ...)
[13:18:34.401]             })
[13:18:34.401]         }
[13:18:34.401]     }, args = future.call.arguments)
[13:18:34.401] }
[13:18:34.402] Tweak future expression to call with '...' arguments ... DONE
[13:18:34.402] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:34.402] 
[13:18:34.405] getGlobalsAndPackages() ... DONE
[13:18:34.405] run() for ‘Future’ ...
[13:18:34.405] - state: ‘created’
[13:18:34.405] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:18:34.419] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:34.420] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:18:34.420]   - Field: ‘node’
[13:18:34.420]   - Field: ‘label’
[13:18:34.420]   - Field: ‘local’
[13:18:34.420]   - Field: ‘owner’
[13:18:34.420]   - Field: ‘envir’
[13:18:34.420]   - Field: ‘workers’
[13:18:34.420]   - Field: ‘packages’
[13:18:34.420]   - Field: ‘gc’
[13:18:34.420]   - Field: ‘conditions’
[13:18:34.421]   - Field: ‘persistent’
[13:18:34.421]   - Field: ‘expr’
[13:18:34.421]   - Field: ‘uuid’
[13:18:34.421]   - Field: ‘seed’
[13:18:34.421]   - Field: ‘version’
[13:18:34.421]   - Field: ‘result’
[13:18:34.421]   - Field: ‘asynchronous’
[13:18:34.421]   - Field: ‘calls’
[13:18:34.421]   - Field: ‘globals’
[13:18:34.421]   - Field: ‘stdout’
[13:18:34.421]   - Field: ‘earlySignal’
[13:18:34.422]   - Field: ‘lazy’
[13:18:34.422]   - Field: ‘state’
[13:18:34.422] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:18:34.422] - Launch lazy future ...
[13:18:34.422] Packages needed by the future expression (n = 0): <none>
[13:18:34.422] Packages needed by future strategies (n = 0): <none>
[13:18:34.423] {
[13:18:34.423]     {
[13:18:34.423]         {
[13:18:34.423]             ...future.startTime <- base::Sys.time()
[13:18:34.423]             {
[13:18:34.423]                 {
[13:18:34.423]                   {
[13:18:34.423]                     {
[13:18:34.423]                       base::local({
[13:18:34.423]                         has_future <- base::requireNamespace("future", 
[13:18:34.423]                           quietly = TRUE)
[13:18:34.423]                         if (has_future) {
[13:18:34.423]                           ns <- base::getNamespace("future")
[13:18:34.423]                           version <- ns[[".package"]][["version"]]
[13:18:34.423]                           if (is.null(version)) 
[13:18:34.423]                             version <- utils::packageVersion("future")
[13:18:34.423]                         }
[13:18:34.423]                         else {
[13:18:34.423]                           version <- NULL
[13:18:34.423]                         }
[13:18:34.423]                         if (!has_future || version < "1.8.0") {
[13:18:34.423]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:34.423]                             "", base::R.version$version.string), 
[13:18:34.423]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:34.423]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:34.423]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:34.423]                               "release", "version")], collapse = " "), 
[13:18:34.423]                             hostname = base::Sys.info()[["nodename"]])
[13:18:34.423]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:34.423]                             info)
[13:18:34.423]                           info <- base::paste(info, collapse = "; ")
[13:18:34.423]                           if (!has_future) {
[13:18:34.423]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:34.423]                               info)
[13:18:34.423]                           }
[13:18:34.423]                           else {
[13:18:34.423]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:34.423]                               info, version)
[13:18:34.423]                           }
[13:18:34.423]                           base::stop(msg)
[13:18:34.423]                         }
[13:18:34.423]                       })
[13:18:34.423]                     }
[13:18:34.423]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:34.423]                     base::options(mc.cores = 1L)
[13:18:34.423]                   }
[13:18:34.423]                   options(future.plan = NULL)
[13:18:34.423]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:34.423]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:34.423]                 }
[13:18:34.423]                 ...future.workdir <- getwd()
[13:18:34.423]             }
[13:18:34.423]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:34.423]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:34.423]         }
[13:18:34.423]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:34.423]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[13:18:34.423]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:34.423]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:34.423]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:34.423]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:34.423]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:34.423]             base::names(...future.oldOptions))
[13:18:34.423]     }
[13:18:34.423]     if (FALSE) {
[13:18:34.423]     }
[13:18:34.423]     else {
[13:18:34.423]         if (TRUE) {
[13:18:34.423]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:34.423]                 open = "w")
[13:18:34.423]         }
[13:18:34.423]         else {
[13:18:34.423]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:34.423]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:34.423]         }
[13:18:34.423]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:34.423]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:34.423]             base::sink(type = "output", split = FALSE)
[13:18:34.423]             base::close(...future.stdout)
[13:18:34.423]         }, add = TRUE)
[13:18:34.423]     }
[13:18:34.423]     ...future.frame <- base::sys.nframe()
[13:18:34.423]     ...future.conditions <- base::list()
[13:18:34.423]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:34.423]     if (FALSE) {
[13:18:34.423]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:34.423]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:34.423]     }
[13:18:34.423]     ...future.result <- base::tryCatch({
[13:18:34.423]         base::withCallingHandlers({
[13:18:34.423]             ...future.value <- base::withVisible(base::local({
[13:18:34.423]                 ...future.makeSendCondition <- local({
[13:18:34.423]                   sendCondition <- NULL
[13:18:34.423]                   function(frame = 1L) {
[13:18:34.423]                     if (is.function(sendCondition)) 
[13:18:34.423]                       return(sendCondition)
[13:18:34.423]                     ns <- getNamespace("parallel")
[13:18:34.423]                     if (exists("sendData", mode = "function", 
[13:18:34.423]                       envir = ns)) {
[13:18:34.423]                       parallel_sendData <- get("sendData", mode = "function", 
[13:18:34.423]                         envir = ns)
[13:18:34.423]                       envir <- sys.frame(frame)
[13:18:34.423]                       master <- NULL
[13:18:34.423]                       while (!identical(envir, .GlobalEnv) && 
[13:18:34.423]                         !identical(envir, emptyenv())) {
[13:18:34.423]                         if (exists("master", mode = "list", envir = envir, 
[13:18:34.423]                           inherits = FALSE)) {
[13:18:34.423]                           master <- get("master", mode = "list", 
[13:18:34.423]                             envir = envir, inherits = FALSE)
[13:18:34.423]                           if (inherits(master, c("SOCKnode", 
[13:18:34.423]                             "SOCK0node"))) {
[13:18:34.423]                             sendCondition <<- function(cond) {
[13:18:34.423]                               data <- list(type = "VALUE", value = cond, 
[13:18:34.423]                                 success = TRUE)
[13:18:34.423]                               parallel_sendData(master, data)
[13:18:34.423]                             }
[13:18:34.423]                             return(sendCondition)
[13:18:34.423]                           }
[13:18:34.423]                         }
[13:18:34.423]                         frame <- frame + 1L
[13:18:34.423]                         envir <- sys.frame(frame)
[13:18:34.423]                       }
[13:18:34.423]                     }
[13:18:34.423]                     sendCondition <<- function(cond) NULL
[13:18:34.423]                   }
[13:18:34.423]                 })
[13:18:34.423]                 withCallingHandlers({
[13:18:34.423]                   {
[13:18:34.423]                     do.call(function(...) {
[13:18:34.423]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.423]                       if (!identical(...future.globals.maxSize.org, 
[13:18:34.423]                         ...future.globals.maxSize)) {
[13:18:34.423]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.423]                         on.exit(options(oopts), add = TRUE)
[13:18:34.423]                       }
[13:18:34.423]                       {
[13:18:34.423]                         lapply(seq_along(...future.elements_ii), 
[13:18:34.423]                           FUN = function(jj) {
[13:18:34.423]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.423]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.423]                               envir = globalenv(), inherits = FALSE)
[13:18:34.423]                             ...future.FUN(...future.X_jj, ...)
[13:18:34.423]                           })
[13:18:34.423]                       }
[13:18:34.423]                     }, args = future.call.arguments)
[13:18:34.423]                   }
[13:18:34.423]                 }, immediateCondition = function(cond) {
[13:18:34.423]                   sendCondition <- ...future.makeSendCondition()
[13:18:34.423]                   sendCondition(cond)
[13:18:34.423]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.423]                   {
[13:18:34.423]                     inherits <- base::inherits
[13:18:34.423]                     invokeRestart <- base::invokeRestart
[13:18:34.423]                     is.null <- base::is.null
[13:18:34.423]                     muffled <- FALSE
[13:18:34.423]                     if (inherits(cond, "message")) {
[13:18:34.423]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:34.423]                       if (muffled) 
[13:18:34.423]                         invokeRestart("muffleMessage")
[13:18:34.423]                     }
[13:18:34.423]                     else if (inherits(cond, "warning")) {
[13:18:34.423]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:34.423]                       if (muffled) 
[13:18:34.423]                         invokeRestart("muffleWarning")
[13:18:34.423]                     }
[13:18:34.423]                     else if (inherits(cond, "condition")) {
[13:18:34.423]                       if (!is.null(pattern)) {
[13:18:34.423]                         computeRestarts <- base::computeRestarts
[13:18:34.423]                         grepl <- base::grepl
[13:18:34.423]                         restarts <- computeRestarts(cond)
[13:18:34.423]                         for (restart in restarts) {
[13:18:34.423]                           name <- restart$name
[13:18:34.423]                           if (is.null(name)) 
[13:18:34.423]                             next
[13:18:34.423]                           if (!grepl(pattern, name)) 
[13:18:34.423]                             next
[13:18:34.423]                           invokeRestart(restart)
[13:18:34.423]                           muffled <- TRUE
[13:18:34.423]                           break
[13:18:34.423]                         }
[13:18:34.423]                       }
[13:18:34.423]                     }
[13:18:34.423]                     invisible(muffled)
[13:18:34.423]                   }
[13:18:34.423]                   muffleCondition(cond)
[13:18:34.423]                 })
[13:18:34.423]             }))
[13:18:34.423]             future::FutureResult(value = ...future.value$value, 
[13:18:34.423]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:34.423]                   ...future.rng), globalenv = if (FALSE) 
[13:18:34.423]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:34.423]                     ...future.globalenv.names))
[13:18:34.423]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:34.423]         }, condition = base::local({
[13:18:34.423]             c <- base::c
[13:18:34.423]             inherits <- base::inherits
[13:18:34.423]             invokeRestart <- base::invokeRestart
[13:18:34.423]             length <- base::length
[13:18:34.423]             list <- base::list
[13:18:34.423]             seq.int <- base::seq.int
[13:18:34.423]             signalCondition <- base::signalCondition
[13:18:34.423]             sys.calls <- base::sys.calls
[13:18:34.423]             `[[` <- base::`[[`
[13:18:34.423]             `+` <- base::`+`
[13:18:34.423]             `<<-` <- base::`<<-`
[13:18:34.423]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:34.423]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:34.423]                   3L)]
[13:18:34.423]             }
[13:18:34.423]             function(cond) {
[13:18:34.423]                 is_error <- inherits(cond, "error")
[13:18:34.423]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:34.423]                   NULL)
[13:18:34.423]                 if (is_error) {
[13:18:34.423]                   sessionInformation <- function() {
[13:18:34.423]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:34.423]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:34.423]                       search = base::search(), system = base::Sys.info())
[13:18:34.423]                   }
[13:18:34.423]                   ...future.conditions[[length(...future.conditions) + 
[13:18:34.423]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:34.423]                     cond$call), session = sessionInformation(), 
[13:18:34.423]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:34.423]                   signalCondition(cond)
[13:18:34.423]                 }
[13:18:34.423]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:34.423]                 "immediateCondition"))) {
[13:18:34.423]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:34.423]                   ...future.conditions[[length(...future.conditions) + 
[13:18:34.423]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:34.423]                   if (TRUE && !signal) {
[13:18:34.423]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.423]                     {
[13:18:34.423]                       inherits <- base::inherits
[13:18:34.423]                       invokeRestart <- base::invokeRestart
[13:18:34.423]                       is.null <- base::is.null
[13:18:34.423]                       muffled <- FALSE
[13:18:34.423]                       if (inherits(cond, "message")) {
[13:18:34.423]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:34.423]                         if (muffled) 
[13:18:34.423]                           invokeRestart("muffleMessage")
[13:18:34.423]                       }
[13:18:34.423]                       else if (inherits(cond, "warning")) {
[13:18:34.423]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:34.423]                         if (muffled) 
[13:18:34.423]                           invokeRestart("muffleWarning")
[13:18:34.423]                       }
[13:18:34.423]                       else if (inherits(cond, "condition")) {
[13:18:34.423]                         if (!is.null(pattern)) {
[13:18:34.423]                           computeRestarts <- base::computeRestarts
[13:18:34.423]                           grepl <- base::grepl
[13:18:34.423]                           restarts <- computeRestarts(cond)
[13:18:34.423]                           for (restart in restarts) {
[13:18:34.423]                             name <- restart$name
[13:18:34.423]                             if (is.null(name)) 
[13:18:34.423]                               next
[13:18:34.423]                             if (!grepl(pattern, name)) 
[13:18:34.423]                               next
[13:18:34.423]                             invokeRestart(restart)
[13:18:34.423]                             muffled <- TRUE
[13:18:34.423]                             break
[13:18:34.423]                           }
[13:18:34.423]                         }
[13:18:34.423]                       }
[13:18:34.423]                       invisible(muffled)
[13:18:34.423]                     }
[13:18:34.423]                     muffleCondition(cond, pattern = "^muffle")
[13:18:34.423]                   }
[13:18:34.423]                 }
[13:18:34.423]                 else {
[13:18:34.423]                   if (TRUE) {
[13:18:34.423]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.423]                     {
[13:18:34.423]                       inherits <- base::inherits
[13:18:34.423]                       invokeRestart <- base::invokeRestart
[13:18:34.423]                       is.null <- base::is.null
[13:18:34.423]                       muffled <- FALSE
[13:18:34.423]                       if (inherits(cond, "message")) {
[13:18:34.423]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:34.423]                         if (muffled) 
[13:18:34.423]                           invokeRestart("muffleMessage")
[13:18:34.423]                       }
[13:18:34.423]                       else if (inherits(cond, "warning")) {
[13:18:34.423]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:34.423]                         if (muffled) 
[13:18:34.423]                           invokeRestart("muffleWarning")
[13:18:34.423]                       }
[13:18:34.423]                       else if (inherits(cond, "condition")) {
[13:18:34.423]                         if (!is.null(pattern)) {
[13:18:34.423]                           computeRestarts <- base::computeRestarts
[13:18:34.423]                           grepl <- base::grepl
[13:18:34.423]                           restarts <- computeRestarts(cond)
[13:18:34.423]                           for (restart in restarts) {
[13:18:34.423]                             name <- restart$name
[13:18:34.423]                             if (is.null(name)) 
[13:18:34.423]                               next
[13:18:34.423]                             if (!grepl(pattern, name)) 
[13:18:34.423]                               next
[13:18:34.423]                             invokeRestart(restart)
[13:18:34.423]                             muffled <- TRUE
[13:18:34.423]                             break
[13:18:34.423]                           }
[13:18:34.423]                         }
[13:18:34.423]                       }
[13:18:34.423]                       invisible(muffled)
[13:18:34.423]                     }
[13:18:34.423]                     muffleCondition(cond, pattern = "^muffle")
[13:18:34.423]                   }
[13:18:34.423]                 }
[13:18:34.423]             }
[13:18:34.423]         }))
[13:18:34.423]     }, error = function(ex) {
[13:18:34.423]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:34.423]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:34.423]                 ...future.rng), started = ...future.startTime, 
[13:18:34.423]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:34.423]             version = "1.8"), class = "FutureResult")
[13:18:34.423]     }, finally = {
[13:18:34.423]         if (!identical(...future.workdir, getwd())) 
[13:18:34.423]             setwd(...future.workdir)
[13:18:34.423]         {
[13:18:34.423]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:34.423]                 ...future.oldOptions$nwarnings <- NULL
[13:18:34.423]             }
[13:18:34.423]             base::options(...future.oldOptions)
[13:18:34.423]             if (.Platform$OS.type == "windows") {
[13:18:34.423]                 old_names <- names(...future.oldEnvVars)
[13:18:34.423]                 envs <- base::Sys.getenv()
[13:18:34.423]                 names <- names(envs)
[13:18:34.423]                 common <- intersect(names, old_names)
[13:18:34.423]                 added <- setdiff(names, old_names)
[13:18:34.423]                 removed <- setdiff(old_names, names)
[13:18:34.423]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:34.423]                   envs[common]]
[13:18:34.423]                 NAMES <- toupper(changed)
[13:18:34.423]                 args <- list()
[13:18:34.423]                 for (kk in seq_along(NAMES)) {
[13:18:34.423]                   name <- changed[[kk]]
[13:18:34.423]                   NAME <- NAMES[[kk]]
[13:18:34.423]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.423]                     next
[13:18:34.423]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:34.423]                 }
[13:18:34.423]                 NAMES <- toupper(added)
[13:18:34.423]                 for (kk in seq_along(NAMES)) {
[13:18:34.423]                   name <- added[[kk]]
[13:18:34.423]                   NAME <- NAMES[[kk]]
[13:18:34.423]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.423]                     next
[13:18:34.423]                   args[[name]] <- ""
[13:18:34.423]                 }
[13:18:34.423]                 NAMES <- toupper(removed)
[13:18:34.423]                 for (kk in seq_along(NAMES)) {
[13:18:34.423]                   name <- removed[[kk]]
[13:18:34.423]                   NAME <- NAMES[[kk]]
[13:18:34.423]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.423]                     next
[13:18:34.423]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:34.423]                 }
[13:18:34.423]                 if (length(args) > 0) 
[13:18:34.423]                   base::do.call(base::Sys.setenv, args = args)
[13:18:34.423]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:34.423]             }
[13:18:34.423]             else {
[13:18:34.423]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:34.423]             }
[13:18:34.423]             {
[13:18:34.423]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:34.423]                   0L) {
[13:18:34.423]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:34.423]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:34.423]                   base::options(opts)
[13:18:34.423]                 }
[13:18:34.423]                 {
[13:18:34.423]                   {
[13:18:34.423]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:34.423]                     NULL
[13:18:34.423]                   }
[13:18:34.423]                   options(future.plan = NULL)
[13:18:34.423]                   if (is.na(NA_character_)) 
[13:18:34.423]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:34.423]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:34.423]                   future::plan(list(function (..., workers = availableCores(), 
[13:18:34.423]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:18:34.423]                     envir = parent.frame()) 
[13:18:34.423]                   {
[13:18:34.423]                     if (is.function(workers)) 
[13:18:34.423]                       workers <- workers()
[13:18:34.423]                     workers <- structure(as.integer(workers), 
[13:18:34.423]                       class = class(workers))
[13:18:34.423]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:18:34.423]                       workers >= 1)
[13:18:34.423]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:18:34.423]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:18:34.423]                     }
[13:18:34.423]                     future <- MultisessionFuture(..., workers = workers, 
[13:18:34.423]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:18:34.423]                       envir = envir)
[13:18:34.423]                     if (!future$lazy) 
[13:18:34.423]                       future <- run(future)
[13:18:34.423]                     invisible(future)
[13:18:34.423]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:34.423]                 }
[13:18:34.423]             }
[13:18:34.423]         }
[13:18:34.423]     })
[13:18:34.423]     if (TRUE) {
[13:18:34.423]         base::sink(type = "output", split = FALSE)
[13:18:34.423]         if (TRUE) {
[13:18:34.423]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:34.423]         }
[13:18:34.423]         else {
[13:18:34.423]             ...future.result["stdout"] <- base::list(NULL)
[13:18:34.423]         }
[13:18:34.423]         base::close(...future.stdout)
[13:18:34.423]         ...future.stdout <- NULL
[13:18:34.423]     }
[13:18:34.423]     ...future.result$conditions <- ...future.conditions
[13:18:34.423]     ...future.result$finished <- base::Sys.time()
[13:18:34.423]     ...future.result
[13:18:34.423] }
[13:18:34.426] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[13:18:34.426] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[13:18:34.426] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[13:18:34.426] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[13:18:34.427] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[13:18:34.427] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[13:18:34.427] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[13:18:34.427] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[13:18:34.427] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[13:18:34.428] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[13:18:34.428] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[13:18:34.428] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[13:18:34.429] MultisessionFuture started
[13:18:34.429] - Launch lazy future ... done
[13:18:34.429] run() for ‘MultisessionFuture’ ... done
[13:18:34.429] Created future:
[13:18:34.429] MultisessionFuture:
[13:18:34.429] Label: ‘future_replicate-2’
[13:18:34.429] Expression:
[13:18:34.429] {
[13:18:34.429]     do.call(function(...) {
[13:18:34.429]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.429]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:34.429]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.429]             on.exit(options(oopts), add = TRUE)
[13:18:34.429]         }
[13:18:34.429]         {
[13:18:34.429]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:34.429]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.429]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.429]                   envir = globalenv(), inherits = FALSE)
[13:18:34.429]                 ...future.FUN(...future.X_jj, ...)
[13:18:34.429]             })
[13:18:34.429]         }
[13:18:34.429]     }, args = future.call.arguments)
[13:18:34.429] }
[13:18:34.429] Lazy evaluation: FALSE
[13:18:34.429] Asynchronous evaluation: TRUE
[13:18:34.429] Local evaluation: TRUE
[13:18:34.429] Environment: R_GlobalEnv
[13:18:34.429] Capture standard output: TRUE
[13:18:34.429] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:34.429] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:34.429] Packages: <none>
[13:18:34.429] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:34.429] Resolved: FALSE
[13:18:34.429] Value: <not collected>
[13:18:34.429] Conditions captured: <none>
[13:18:34.429] Early signaling: FALSE
[13:18:34.429] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:34.429] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:34.441] Chunk #2 of 2 ... DONE
[13:18:34.441] Launching 2 futures (chunks) ... DONE
[13:18:34.441] Resolving 2 futures (chunks) ...
[13:18:34.442] resolve() on list ...
[13:18:34.442]  recursive: 0
[13:18:34.442]  length: 2
[13:18:34.442] 
[13:18:34.442] receiveMessageFromWorker() for ClusterFuture ...
[13:18:34.442] - Validating connection of MultisessionFuture
[13:18:34.443] - received message: FutureResult
[13:18:34.443] - Received FutureResult
[13:18:34.443] - Erased future from FutureRegistry
[13:18:34.443] result() for ClusterFuture ...
[13:18:34.443] - result already collected: FutureResult
[13:18:34.443] result() for ClusterFuture ... done
[13:18:34.443] receiveMessageFromWorker() for ClusterFuture ... done
[13:18:34.443] Future #1
[13:18:34.443] result() for ClusterFuture ...
[13:18:34.443] - result already collected: FutureResult
[13:18:34.444] result() for ClusterFuture ... done
[13:18:34.444] result() for ClusterFuture ...
[13:18:34.444] - result already collected: FutureResult
[13:18:34.444] result() for ClusterFuture ... done
[13:18:34.444] signalConditionsASAP(MultisessionFuture, pos=1) ...
[13:18:34.444] - nx: 2
[13:18:34.444] - relay: TRUE
[13:18:34.444] - stdout: TRUE
[13:18:34.444] - signal: TRUE
[13:18:34.444] - resignal: FALSE
[13:18:34.444] - force: TRUE
[13:18:34.444] - relayed: [n=2] FALSE, FALSE
[13:18:34.445] - queued futures: [n=2] FALSE, FALSE
[13:18:34.445]  - until=1
[13:18:34.445]  - relaying element #1
[13:18:34.445] result() for ClusterFuture ...
[13:18:34.445] - result already collected: FutureResult
[13:18:34.445] result() for ClusterFuture ... done
[13:18:34.445] result() for ClusterFuture ...
[13:18:34.445] - result already collected: FutureResult
[13:18:34.445] result() for ClusterFuture ... done
[13:18:34.445] result() for ClusterFuture ...
[13:18:34.446] - result already collected: FutureResult
[13:18:34.446] result() for ClusterFuture ... done
[13:18:34.446] result() for ClusterFuture ...
[13:18:34.446] - result already collected: FutureResult
[13:18:34.446] result() for ClusterFuture ... done
[13:18:34.446] - relayed: [n=2] TRUE, FALSE
[13:18:34.446] - queued futures: [n=2] TRUE, FALSE
[13:18:34.446] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[13:18:34.446]  length: 1 (resolved future 1)
[13:18:34.474] receiveMessageFromWorker() for ClusterFuture ...
[13:18:34.474] - Validating connection of MultisessionFuture
[13:18:34.474] - received message: FutureResult
[13:18:34.474] - Received FutureResult
[13:18:34.474] - Erased future from FutureRegistry
[13:18:34.474] result() for ClusterFuture ...
[13:18:34.475] - result already collected: FutureResult
[13:18:34.475] result() for ClusterFuture ... done
[13:18:34.475] receiveMessageFromWorker() for ClusterFuture ... done
[13:18:34.475] Future #2
[13:18:34.475] result() for ClusterFuture ...
[13:18:34.475] - result already collected: FutureResult
[13:18:34.475] result() for ClusterFuture ... done
[13:18:34.475] result() for ClusterFuture ...
[13:18:34.475] - result already collected: FutureResult
[13:18:34.475] result() for ClusterFuture ... done
[13:18:34.476] signalConditionsASAP(MultisessionFuture, pos=2) ...
[13:18:34.476] - nx: 2
[13:18:34.476] - relay: TRUE
[13:18:34.476] - stdout: TRUE
[13:18:34.476] - signal: TRUE
[13:18:34.476] - resignal: FALSE
[13:18:34.476] - force: TRUE
[13:18:34.476] - relayed: [n=2] TRUE, FALSE
[13:18:34.476] - queued futures: [n=2] TRUE, FALSE
[13:18:34.476]  - until=2
[13:18:34.476]  - relaying element #2
[13:18:34.476] result() for ClusterFuture ...
[13:18:34.477] - result already collected: FutureResult
[13:18:34.477] result() for ClusterFuture ... done
[13:18:34.477] result() for ClusterFuture ...
[13:18:34.477] - result already collected: FutureResult
[13:18:34.477] result() for ClusterFuture ... done
[13:18:34.477] result() for ClusterFuture ...
[13:18:34.477] - result already collected: FutureResult
[13:18:34.477] result() for ClusterFuture ... done
[13:18:34.477] result() for ClusterFuture ...
[13:18:34.477] - result already collected: FutureResult
[13:18:34.477] result() for ClusterFuture ... done
[13:18:34.478] - relayed: [n=2] TRUE, TRUE
[13:18:34.478] - queued futures: [n=2] TRUE, TRUE
[13:18:34.478] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[13:18:34.478]  length: 0 (resolved future 2)
[13:18:34.478] Relaying remaining futures
[13:18:34.478] signalConditionsASAP(NULL, pos=0) ...
[13:18:34.478] - nx: 2
[13:18:34.478] - relay: TRUE
[13:18:34.478] - stdout: TRUE
[13:18:34.478] - signal: TRUE
[13:18:34.478] - resignal: FALSE
[13:18:34.479] - force: TRUE
[13:18:34.479] - relayed: [n=2] TRUE, TRUE
[13:18:34.479] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:18:34.479] - relayed: [n=2] TRUE, TRUE
[13:18:34.479] - queued futures: [n=2] TRUE, TRUE
[13:18:34.479] signalConditionsASAP(NULL, pos=0) ... done
[13:18:34.479] resolve() on list ... DONE
[13:18:34.479] result() for ClusterFuture ...
[13:18:34.479] - result already collected: FutureResult
[13:18:34.479] result() for ClusterFuture ... done
[13:18:34.479] result() for ClusterFuture ...
[13:18:34.480] - result already collected: FutureResult
[13:18:34.480] result() for ClusterFuture ... done
[13:18:34.480] result() for ClusterFuture ...
[13:18:34.480] - result already collected: FutureResult
[13:18:34.480] result() for ClusterFuture ... done
[13:18:34.480] result() for ClusterFuture ...
[13:18:34.480] - result already collected: FutureResult
[13:18:34.480] result() for ClusterFuture ... done
[13:18:34.480]  - Number of value chunks collected: 2
[13:18:34.480] Resolving 2 futures (chunks) ... DONE
[13:18:34.480] Reducing values from 2 chunks ...
[13:18:34.481]  - Number of values collected after concatenation: 5
[13:18:34.481]  - Number of values expected: 5
[13:18:34.481] Reducing values from 2 chunks ... DONE
[13:18:34.481] future_lapply() ... DONE
[13:18:34.481] future_lapply() ...
[13:18:34.482] Generating random seeds ...
[13:18:34.482] Generating random seed streams for 5 elements ...
[13:18:34.482] Generating random seed streams for 5 elements ... DONE
[13:18:34.482] Generating random seeds ... DONE
[13:18:34.482] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:18:34.486] Number of chunks: 2
[13:18:34.486] getGlobalsAndPackagesXApply() ...
[13:18:34.486]  - future.globals: TRUE
[13:18:34.486] getGlobalsAndPackages() ...
[13:18:34.486] Searching for globals...
[13:18:34.488] - globals found: [2] ‘FUN’, ‘sample’
[13:18:34.488] Searching for globals ... DONE
[13:18:34.488] Resolving globals: FALSE
[13:18:34.488] The total size of the 1 globals is 616 bytes (616 bytes)
[13:18:34.489] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:18:34.489] - globals: [1] ‘FUN’
[13:18:34.489] 
[13:18:34.489] getGlobalsAndPackages() ... DONE
[13:18:34.489]  - globals found/used: [n=1] ‘FUN’
[13:18:34.489]  - needed namespaces: [n=0] 
[13:18:34.489] Finding globals ... DONE
[13:18:34.489]  - use_args: TRUE
[13:18:34.489]  - Getting '...' globals ...
[13:18:34.490] resolve() on list ...
[13:18:34.490]  recursive: 0
[13:18:34.490]  length: 1
[13:18:34.490]  elements: ‘...’
[13:18:34.490]  length: 0 (resolved future 1)
[13:18:34.490] resolve() on list ... DONE
[13:18:34.490]    - '...' content: [n=0] 
[13:18:34.490] List of 1
[13:18:34.490]  $ ...: list()
[13:18:34.490]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:34.490]  - attr(*, "where")=List of 1
[13:18:34.490]   ..$ ...:<environment: 0x55df1c8136d8> 
[13:18:34.490]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:34.490]  - attr(*, "resolved")= logi TRUE
[13:18:34.490]  - attr(*, "total_size")= num NA
[13:18:34.493]  - Getting '...' globals ... DONE
[13:18:34.493] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:18:34.493] List of 2
[13:18:34.493]  $ ...future.FUN:function (...)  
[13:18:34.493]  $ ...          : list()
[13:18:34.493]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:34.493]  - attr(*, "where")=List of 2
[13:18:34.493]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:18:34.493]   ..$ ...          :<environment: 0x55df1c8136d8> 
[13:18:34.493]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:34.493]  - attr(*, "resolved")= logi FALSE
[13:18:34.493]  - attr(*, "total_size")= num 616
[13:18:34.496] Packages to be attached in all futures: [n=0] 
[13:18:34.496] getGlobalsAndPackagesXApply() ... DONE
[13:18:34.496] Number of futures (= number of chunks): 2
[13:18:34.496] Launching 2 futures (chunks) ...
[13:18:34.496] Chunk #1 of 2 ...
[13:18:34.497]  - Finding globals in 'X' for chunk #1 ...
[13:18:34.497] getGlobalsAndPackages() ...
[13:18:34.497] Searching for globals...
[13:18:34.497] 
[13:18:34.497] Searching for globals ... DONE
[13:18:34.497] - globals: [0] <none>
[13:18:34.497] getGlobalsAndPackages() ... DONE
[13:18:34.497]    + additional globals found: [n=0] 
[13:18:34.498]    + additional namespaces needed: [n=0] 
[13:18:34.498]  - Finding globals in 'X' for chunk #1 ... DONE
[13:18:34.498]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:18:34.498]  - seeds: [2] <seeds>
[13:18:34.498] getGlobalsAndPackages() ...
[13:18:34.498] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:34.498] Resolving globals: FALSE
[13:18:34.498] Tweak future expression to call with '...' arguments ...
[13:18:34.498] {
[13:18:34.498]     do.call(function(...) {
[13:18:34.498]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.498]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:34.498]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.498]             on.exit(options(oopts), add = TRUE)
[13:18:34.498]         }
[13:18:34.498]         {
[13:18:34.498]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:34.498]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.498]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.498]                   envir = globalenv(), inherits = FALSE)
[13:18:34.498]                 ...future.FUN(...future.X_jj, ...)
[13:18:34.498]             })
[13:18:34.498]         }
[13:18:34.498]     }, args = future.call.arguments)
[13:18:34.498] }
[13:18:34.499] Tweak future expression to call with '...' arguments ... DONE
[13:18:34.499] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:34.499] 
[13:18:34.499] getGlobalsAndPackages() ... DONE
[13:18:34.500] run() for ‘Future’ ...
[13:18:34.500] - state: ‘created’
[13:18:34.500] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:18:34.514] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:34.515] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:18:34.515]   - Field: ‘node’
[13:18:34.515]   - Field: ‘label’
[13:18:34.515]   - Field: ‘local’
[13:18:34.515]   - Field: ‘owner’
[13:18:34.515]   - Field: ‘envir’
[13:18:34.515]   - Field: ‘workers’
[13:18:34.515]   - Field: ‘packages’
[13:18:34.515]   - Field: ‘gc’
[13:18:34.515]   - Field: ‘conditions’
[13:18:34.516]   - Field: ‘persistent’
[13:18:34.516]   - Field: ‘expr’
[13:18:34.516]   - Field: ‘uuid’
[13:18:34.516]   - Field: ‘seed’
[13:18:34.516]   - Field: ‘version’
[13:18:34.516]   - Field: ‘result’
[13:18:34.516]   - Field: ‘asynchronous’
[13:18:34.516]   - Field: ‘calls’
[13:18:34.516]   - Field: ‘globals’
[13:18:34.516]   - Field: ‘stdout’
[13:18:34.517]   - Field: ‘earlySignal’
[13:18:34.517]   - Field: ‘lazy’
[13:18:34.517]   - Field: ‘state’
[13:18:34.517] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:18:34.517] - Launch lazy future ...
[13:18:34.517] Packages needed by the future expression (n = 0): <none>
[13:18:34.517] Packages needed by future strategies (n = 0): <none>
[13:18:34.518] {
[13:18:34.518]     {
[13:18:34.518]         {
[13:18:34.518]             ...future.startTime <- base::Sys.time()
[13:18:34.518]             {
[13:18:34.518]                 {
[13:18:34.518]                   {
[13:18:34.518]                     {
[13:18:34.518]                       base::local({
[13:18:34.518]                         has_future <- base::requireNamespace("future", 
[13:18:34.518]                           quietly = TRUE)
[13:18:34.518]                         if (has_future) {
[13:18:34.518]                           ns <- base::getNamespace("future")
[13:18:34.518]                           version <- ns[[".package"]][["version"]]
[13:18:34.518]                           if (is.null(version)) 
[13:18:34.518]                             version <- utils::packageVersion("future")
[13:18:34.518]                         }
[13:18:34.518]                         else {
[13:18:34.518]                           version <- NULL
[13:18:34.518]                         }
[13:18:34.518]                         if (!has_future || version < "1.8.0") {
[13:18:34.518]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:34.518]                             "", base::R.version$version.string), 
[13:18:34.518]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:34.518]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:34.518]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:34.518]                               "release", "version")], collapse = " "), 
[13:18:34.518]                             hostname = base::Sys.info()[["nodename"]])
[13:18:34.518]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:34.518]                             info)
[13:18:34.518]                           info <- base::paste(info, collapse = "; ")
[13:18:34.518]                           if (!has_future) {
[13:18:34.518]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:34.518]                               info)
[13:18:34.518]                           }
[13:18:34.518]                           else {
[13:18:34.518]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:34.518]                               info, version)
[13:18:34.518]                           }
[13:18:34.518]                           base::stop(msg)
[13:18:34.518]                         }
[13:18:34.518]                       })
[13:18:34.518]                     }
[13:18:34.518]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:34.518]                     base::options(mc.cores = 1L)
[13:18:34.518]                   }
[13:18:34.518]                   options(future.plan = NULL)
[13:18:34.518]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:34.518]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:34.518]                 }
[13:18:34.518]                 ...future.workdir <- getwd()
[13:18:34.518]             }
[13:18:34.518]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:34.518]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:34.518]         }
[13:18:34.518]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:34.518]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:18:34.518]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:34.518]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:34.518]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:34.518]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:34.518]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:34.518]             base::names(...future.oldOptions))
[13:18:34.518]     }
[13:18:34.518]     if (FALSE) {
[13:18:34.518]     }
[13:18:34.518]     else {
[13:18:34.518]         if (TRUE) {
[13:18:34.518]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:34.518]                 open = "w")
[13:18:34.518]         }
[13:18:34.518]         else {
[13:18:34.518]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:34.518]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:34.518]         }
[13:18:34.518]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:34.518]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:34.518]             base::sink(type = "output", split = FALSE)
[13:18:34.518]             base::close(...future.stdout)
[13:18:34.518]         }, add = TRUE)
[13:18:34.518]     }
[13:18:34.518]     ...future.frame <- base::sys.nframe()
[13:18:34.518]     ...future.conditions <- base::list()
[13:18:34.518]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:34.518]     if (FALSE) {
[13:18:34.518]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:34.518]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:34.518]     }
[13:18:34.518]     ...future.result <- base::tryCatch({
[13:18:34.518]         base::withCallingHandlers({
[13:18:34.518]             ...future.value <- base::withVisible(base::local({
[13:18:34.518]                 ...future.makeSendCondition <- local({
[13:18:34.518]                   sendCondition <- NULL
[13:18:34.518]                   function(frame = 1L) {
[13:18:34.518]                     if (is.function(sendCondition)) 
[13:18:34.518]                       return(sendCondition)
[13:18:34.518]                     ns <- getNamespace("parallel")
[13:18:34.518]                     if (exists("sendData", mode = "function", 
[13:18:34.518]                       envir = ns)) {
[13:18:34.518]                       parallel_sendData <- get("sendData", mode = "function", 
[13:18:34.518]                         envir = ns)
[13:18:34.518]                       envir <- sys.frame(frame)
[13:18:34.518]                       master <- NULL
[13:18:34.518]                       while (!identical(envir, .GlobalEnv) && 
[13:18:34.518]                         !identical(envir, emptyenv())) {
[13:18:34.518]                         if (exists("master", mode = "list", envir = envir, 
[13:18:34.518]                           inherits = FALSE)) {
[13:18:34.518]                           master <- get("master", mode = "list", 
[13:18:34.518]                             envir = envir, inherits = FALSE)
[13:18:34.518]                           if (inherits(master, c("SOCKnode", 
[13:18:34.518]                             "SOCK0node"))) {
[13:18:34.518]                             sendCondition <<- function(cond) {
[13:18:34.518]                               data <- list(type = "VALUE", value = cond, 
[13:18:34.518]                                 success = TRUE)
[13:18:34.518]                               parallel_sendData(master, data)
[13:18:34.518]                             }
[13:18:34.518]                             return(sendCondition)
[13:18:34.518]                           }
[13:18:34.518]                         }
[13:18:34.518]                         frame <- frame + 1L
[13:18:34.518]                         envir <- sys.frame(frame)
[13:18:34.518]                       }
[13:18:34.518]                     }
[13:18:34.518]                     sendCondition <<- function(cond) NULL
[13:18:34.518]                   }
[13:18:34.518]                 })
[13:18:34.518]                 withCallingHandlers({
[13:18:34.518]                   {
[13:18:34.518]                     do.call(function(...) {
[13:18:34.518]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.518]                       if (!identical(...future.globals.maxSize.org, 
[13:18:34.518]                         ...future.globals.maxSize)) {
[13:18:34.518]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.518]                         on.exit(options(oopts), add = TRUE)
[13:18:34.518]                       }
[13:18:34.518]                       {
[13:18:34.518]                         lapply(seq_along(...future.elements_ii), 
[13:18:34.518]                           FUN = function(jj) {
[13:18:34.518]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.518]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.518]                               envir = globalenv(), inherits = FALSE)
[13:18:34.518]                             ...future.FUN(...future.X_jj, ...)
[13:18:34.518]                           })
[13:18:34.518]                       }
[13:18:34.518]                     }, args = future.call.arguments)
[13:18:34.518]                   }
[13:18:34.518]                 }, immediateCondition = function(cond) {
[13:18:34.518]                   sendCondition <- ...future.makeSendCondition()
[13:18:34.518]                   sendCondition(cond)
[13:18:34.518]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.518]                   {
[13:18:34.518]                     inherits <- base::inherits
[13:18:34.518]                     invokeRestart <- base::invokeRestart
[13:18:34.518]                     is.null <- base::is.null
[13:18:34.518]                     muffled <- FALSE
[13:18:34.518]                     if (inherits(cond, "message")) {
[13:18:34.518]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:34.518]                       if (muffled) 
[13:18:34.518]                         invokeRestart("muffleMessage")
[13:18:34.518]                     }
[13:18:34.518]                     else if (inherits(cond, "warning")) {
[13:18:34.518]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:34.518]                       if (muffled) 
[13:18:34.518]                         invokeRestart("muffleWarning")
[13:18:34.518]                     }
[13:18:34.518]                     else if (inherits(cond, "condition")) {
[13:18:34.518]                       if (!is.null(pattern)) {
[13:18:34.518]                         computeRestarts <- base::computeRestarts
[13:18:34.518]                         grepl <- base::grepl
[13:18:34.518]                         restarts <- computeRestarts(cond)
[13:18:34.518]                         for (restart in restarts) {
[13:18:34.518]                           name <- restart$name
[13:18:34.518]                           if (is.null(name)) 
[13:18:34.518]                             next
[13:18:34.518]                           if (!grepl(pattern, name)) 
[13:18:34.518]                             next
[13:18:34.518]                           invokeRestart(restart)
[13:18:34.518]                           muffled <- TRUE
[13:18:34.518]                           break
[13:18:34.518]                         }
[13:18:34.518]                       }
[13:18:34.518]                     }
[13:18:34.518]                     invisible(muffled)
[13:18:34.518]                   }
[13:18:34.518]                   muffleCondition(cond)
[13:18:34.518]                 })
[13:18:34.518]             }))
[13:18:34.518]             future::FutureResult(value = ...future.value$value, 
[13:18:34.518]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:34.518]                   ...future.rng), globalenv = if (FALSE) 
[13:18:34.518]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:34.518]                     ...future.globalenv.names))
[13:18:34.518]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:34.518]         }, condition = base::local({
[13:18:34.518]             c <- base::c
[13:18:34.518]             inherits <- base::inherits
[13:18:34.518]             invokeRestart <- base::invokeRestart
[13:18:34.518]             length <- base::length
[13:18:34.518]             list <- base::list
[13:18:34.518]             seq.int <- base::seq.int
[13:18:34.518]             signalCondition <- base::signalCondition
[13:18:34.518]             sys.calls <- base::sys.calls
[13:18:34.518]             `[[` <- base::`[[`
[13:18:34.518]             `+` <- base::`+`
[13:18:34.518]             `<<-` <- base::`<<-`
[13:18:34.518]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:34.518]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:34.518]                   3L)]
[13:18:34.518]             }
[13:18:34.518]             function(cond) {
[13:18:34.518]                 is_error <- inherits(cond, "error")
[13:18:34.518]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:34.518]                   NULL)
[13:18:34.518]                 if (is_error) {
[13:18:34.518]                   sessionInformation <- function() {
[13:18:34.518]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:34.518]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:34.518]                       search = base::search(), system = base::Sys.info())
[13:18:34.518]                   }
[13:18:34.518]                   ...future.conditions[[length(...future.conditions) + 
[13:18:34.518]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:34.518]                     cond$call), session = sessionInformation(), 
[13:18:34.518]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:34.518]                   signalCondition(cond)
[13:18:34.518]                 }
[13:18:34.518]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:34.518]                 "immediateCondition"))) {
[13:18:34.518]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:34.518]                   ...future.conditions[[length(...future.conditions) + 
[13:18:34.518]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:34.518]                   if (TRUE && !signal) {
[13:18:34.518]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.518]                     {
[13:18:34.518]                       inherits <- base::inherits
[13:18:34.518]                       invokeRestart <- base::invokeRestart
[13:18:34.518]                       is.null <- base::is.null
[13:18:34.518]                       muffled <- FALSE
[13:18:34.518]                       if (inherits(cond, "message")) {
[13:18:34.518]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:34.518]                         if (muffled) 
[13:18:34.518]                           invokeRestart("muffleMessage")
[13:18:34.518]                       }
[13:18:34.518]                       else if (inherits(cond, "warning")) {
[13:18:34.518]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:34.518]                         if (muffled) 
[13:18:34.518]                           invokeRestart("muffleWarning")
[13:18:34.518]                       }
[13:18:34.518]                       else if (inherits(cond, "condition")) {
[13:18:34.518]                         if (!is.null(pattern)) {
[13:18:34.518]                           computeRestarts <- base::computeRestarts
[13:18:34.518]                           grepl <- base::grepl
[13:18:34.518]                           restarts <- computeRestarts(cond)
[13:18:34.518]                           for (restart in restarts) {
[13:18:34.518]                             name <- restart$name
[13:18:34.518]                             if (is.null(name)) 
[13:18:34.518]                               next
[13:18:34.518]                             if (!grepl(pattern, name)) 
[13:18:34.518]                               next
[13:18:34.518]                             invokeRestart(restart)
[13:18:34.518]                             muffled <- TRUE
[13:18:34.518]                             break
[13:18:34.518]                           }
[13:18:34.518]                         }
[13:18:34.518]                       }
[13:18:34.518]                       invisible(muffled)
[13:18:34.518]                     }
[13:18:34.518]                     muffleCondition(cond, pattern = "^muffle")
[13:18:34.518]                   }
[13:18:34.518]                 }
[13:18:34.518]                 else {
[13:18:34.518]                   if (TRUE) {
[13:18:34.518]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.518]                     {
[13:18:34.518]                       inherits <- base::inherits
[13:18:34.518]                       invokeRestart <- base::invokeRestart
[13:18:34.518]                       is.null <- base::is.null
[13:18:34.518]                       muffled <- FALSE
[13:18:34.518]                       if (inherits(cond, "message")) {
[13:18:34.518]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:34.518]                         if (muffled) 
[13:18:34.518]                           invokeRestart("muffleMessage")
[13:18:34.518]                       }
[13:18:34.518]                       else if (inherits(cond, "warning")) {
[13:18:34.518]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:34.518]                         if (muffled) 
[13:18:34.518]                           invokeRestart("muffleWarning")
[13:18:34.518]                       }
[13:18:34.518]                       else if (inherits(cond, "condition")) {
[13:18:34.518]                         if (!is.null(pattern)) {
[13:18:34.518]                           computeRestarts <- base::computeRestarts
[13:18:34.518]                           grepl <- base::grepl
[13:18:34.518]                           restarts <- computeRestarts(cond)
[13:18:34.518]                           for (restart in restarts) {
[13:18:34.518]                             name <- restart$name
[13:18:34.518]                             if (is.null(name)) 
[13:18:34.518]                               next
[13:18:34.518]                             if (!grepl(pattern, name)) 
[13:18:34.518]                               next
[13:18:34.518]                             invokeRestart(restart)
[13:18:34.518]                             muffled <- TRUE
[13:18:34.518]                             break
[13:18:34.518]                           }
[13:18:34.518]                         }
[13:18:34.518]                       }
[13:18:34.518]                       invisible(muffled)
[13:18:34.518]                     }
[13:18:34.518]                     muffleCondition(cond, pattern = "^muffle")
[13:18:34.518]                   }
[13:18:34.518]                 }
[13:18:34.518]             }
[13:18:34.518]         }))
[13:18:34.518]     }, error = function(ex) {
[13:18:34.518]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:34.518]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:34.518]                 ...future.rng), started = ...future.startTime, 
[13:18:34.518]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:34.518]             version = "1.8"), class = "FutureResult")
[13:18:34.518]     }, finally = {
[13:18:34.518]         if (!identical(...future.workdir, getwd())) 
[13:18:34.518]             setwd(...future.workdir)
[13:18:34.518]         {
[13:18:34.518]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:34.518]                 ...future.oldOptions$nwarnings <- NULL
[13:18:34.518]             }
[13:18:34.518]             base::options(...future.oldOptions)
[13:18:34.518]             if (.Platform$OS.type == "windows") {
[13:18:34.518]                 old_names <- names(...future.oldEnvVars)
[13:18:34.518]                 envs <- base::Sys.getenv()
[13:18:34.518]                 names <- names(envs)
[13:18:34.518]                 common <- intersect(names, old_names)
[13:18:34.518]                 added <- setdiff(names, old_names)
[13:18:34.518]                 removed <- setdiff(old_names, names)
[13:18:34.518]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:34.518]                   envs[common]]
[13:18:34.518]                 NAMES <- toupper(changed)
[13:18:34.518]                 args <- list()
[13:18:34.518]                 for (kk in seq_along(NAMES)) {
[13:18:34.518]                   name <- changed[[kk]]
[13:18:34.518]                   NAME <- NAMES[[kk]]
[13:18:34.518]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.518]                     next
[13:18:34.518]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:34.518]                 }
[13:18:34.518]                 NAMES <- toupper(added)
[13:18:34.518]                 for (kk in seq_along(NAMES)) {
[13:18:34.518]                   name <- added[[kk]]
[13:18:34.518]                   NAME <- NAMES[[kk]]
[13:18:34.518]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.518]                     next
[13:18:34.518]                   args[[name]] <- ""
[13:18:34.518]                 }
[13:18:34.518]                 NAMES <- toupper(removed)
[13:18:34.518]                 for (kk in seq_along(NAMES)) {
[13:18:34.518]                   name <- removed[[kk]]
[13:18:34.518]                   NAME <- NAMES[[kk]]
[13:18:34.518]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.518]                     next
[13:18:34.518]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:34.518]                 }
[13:18:34.518]                 if (length(args) > 0) 
[13:18:34.518]                   base::do.call(base::Sys.setenv, args = args)
[13:18:34.518]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:34.518]             }
[13:18:34.518]             else {
[13:18:34.518]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:34.518]             }
[13:18:34.518]             {
[13:18:34.518]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:34.518]                   0L) {
[13:18:34.518]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:34.518]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:34.518]                   base::options(opts)
[13:18:34.518]                 }
[13:18:34.518]                 {
[13:18:34.518]                   {
[13:18:34.518]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:34.518]                     NULL
[13:18:34.518]                   }
[13:18:34.518]                   options(future.plan = NULL)
[13:18:34.518]                   if (is.na(NA_character_)) 
[13:18:34.518]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:34.518]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:34.518]                   future::plan(list(function (..., workers = availableCores(), 
[13:18:34.518]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:18:34.518]                     envir = parent.frame()) 
[13:18:34.518]                   {
[13:18:34.518]                     if (is.function(workers)) 
[13:18:34.518]                       workers <- workers()
[13:18:34.518]                     workers <- structure(as.integer(workers), 
[13:18:34.518]                       class = class(workers))
[13:18:34.518]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:18:34.518]                       workers >= 1)
[13:18:34.518]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:18:34.518]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:18:34.518]                     }
[13:18:34.518]                     future <- MultisessionFuture(..., workers = workers, 
[13:18:34.518]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:18:34.518]                       envir = envir)
[13:18:34.518]                     if (!future$lazy) 
[13:18:34.518]                       future <- run(future)
[13:18:34.518]                     invisible(future)
[13:18:34.518]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:34.518]                 }
[13:18:34.518]             }
[13:18:34.518]         }
[13:18:34.518]     })
[13:18:34.518]     if (TRUE) {
[13:18:34.518]         base::sink(type = "output", split = FALSE)
[13:18:34.518]         if (TRUE) {
[13:18:34.518]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:34.518]         }
[13:18:34.518]         else {
[13:18:34.518]             ...future.result["stdout"] <- base::list(NULL)
[13:18:34.518]         }
[13:18:34.518]         base::close(...future.stdout)
[13:18:34.518]         ...future.stdout <- NULL
[13:18:34.518]     }
[13:18:34.518]     ...future.result$conditions <- ...future.conditions
[13:18:34.518]     ...future.result$finished <- base::Sys.time()
[13:18:34.518]     ...future.result
[13:18:34.518] }
[13:18:34.521] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[13:18:34.521] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[13:18:34.521] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[13:18:34.522] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[13:18:34.522] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[13:18:34.522] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[13:18:34.522] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[13:18:34.522] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[13:18:34.523] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[13:18:34.523] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[13:18:34.523] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[13:18:34.523] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[13:18:34.524] MultisessionFuture started
[13:18:34.524] - Launch lazy future ... done
[13:18:34.524] run() for ‘MultisessionFuture’ ... done
[13:18:34.524] Created future:
[13:18:34.524] MultisessionFuture:
[13:18:34.524] Label: ‘future_replicate-1’
[13:18:34.524] Expression:
[13:18:34.524] {
[13:18:34.524]     do.call(function(...) {
[13:18:34.524]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.524]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:34.524]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.524]             on.exit(options(oopts), add = TRUE)
[13:18:34.524]         }
[13:18:34.524]         {
[13:18:34.524]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:34.524]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.524]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.524]                   envir = globalenv(), inherits = FALSE)
[13:18:34.524]                 ...future.FUN(...future.X_jj, ...)
[13:18:34.524]             })
[13:18:34.524]         }
[13:18:34.524]     }, args = future.call.arguments)
[13:18:34.524] }
[13:18:34.524] Lazy evaluation: FALSE
[13:18:34.524] Asynchronous evaluation: TRUE
[13:18:34.524] Local evaluation: TRUE
[13:18:34.524] Environment: R_GlobalEnv
[13:18:34.524] Capture standard output: TRUE
[13:18:34.524] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:34.524] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:34.524] Packages: <none>
[13:18:34.524] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:34.524] Resolved: FALSE
[13:18:34.524] Value: <not collected>
[13:18:34.524] Conditions captured: <none>
[13:18:34.524] Early signaling: FALSE
[13:18:34.524] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:34.524] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:34.536] Chunk #1 of 2 ... DONE
[13:18:34.536] Chunk #2 of 2 ...
[13:18:34.536]  - Finding globals in 'X' for chunk #2 ...
[13:18:34.536] getGlobalsAndPackages() ...
[13:18:34.536] Searching for globals...
[13:18:34.537] 
[13:18:34.537] Searching for globals ... DONE
[13:18:34.537] - globals: [0] <none>
[13:18:34.537] getGlobalsAndPackages() ... DONE
[13:18:34.537]    + additional globals found: [n=0] 
[13:18:34.537]    + additional namespaces needed: [n=0] 
[13:18:34.537]  - Finding globals in 'X' for chunk #2 ... DONE
[13:18:34.537]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[13:18:34.537]  - seeds: [3] <seeds>
[13:18:34.537] getGlobalsAndPackages() ...
[13:18:34.538] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:34.538] Resolving globals: FALSE
[13:18:34.538] Tweak future expression to call with '...' arguments ...
[13:18:34.538] {
[13:18:34.538]     do.call(function(...) {
[13:18:34.538]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.538]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:34.538]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.538]             on.exit(options(oopts), add = TRUE)
[13:18:34.538]         }
[13:18:34.538]         {
[13:18:34.538]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:34.538]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.538]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.538]                   envir = globalenv(), inherits = FALSE)
[13:18:34.538]                 ...future.FUN(...future.X_jj, ...)
[13:18:34.538]             })
[13:18:34.538]         }
[13:18:34.538]     }, args = future.call.arguments)
[13:18:34.538] }
[13:18:34.538] Tweak future expression to call with '...' arguments ... DONE
[13:18:34.539] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:34.539] 
[13:18:34.539] getGlobalsAndPackages() ... DONE
[13:18:34.539] run() for ‘Future’ ...
[13:18:34.539] - state: ‘created’
[13:18:34.539] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:18:34.554] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:34.554] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:18:34.554]   - Field: ‘node’
[13:18:34.554]   - Field: ‘label’
[13:18:34.554]   - Field: ‘local’
[13:18:34.554]   - Field: ‘owner’
[13:18:34.554]   - Field: ‘envir’
[13:18:34.554]   - Field: ‘workers’
[13:18:34.555]   - Field: ‘packages’
[13:18:34.555]   - Field: ‘gc’
[13:18:34.555]   - Field: ‘conditions’
[13:18:34.555]   - Field: ‘persistent’
[13:18:34.555]   - Field: ‘expr’
[13:18:34.555]   - Field: ‘uuid’
[13:18:34.555]   - Field: ‘seed’
[13:18:34.555]   - Field: ‘version’
[13:18:34.555]   - Field: ‘result’
[13:18:34.555]   - Field: ‘asynchronous’
[13:18:34.556]   - Field: ‘calls’
[13:18:34.556]   - Field: ‘globals’
[13:18:34.556]   - Field: ‘stdout’
[13:18:34.556]   - Field: ‘earlySignal’
[13:18:34.556]   - Field: ‘lazy’
[13:18:34.556]   - Field: ‘state’
[13:18:34.556] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:18:34.556] - Launch lazy future ...
[13:18:34.556] Packages needed by the future expression (n = 0): <none>
[13:18:34.557] Packages needed by future strategies (n = 0): <none>
[13:18:34.557] {
[13:18:34.557]     {
[13:18:34.557]         {
[13:18:34.557]             ...future.startTime <- base::Sys.time()
[13:18:34.557]             {
[13:18:34.557]                 {
[13:18:34.557]                   {
[13:18:34.557]                     {
[13:18:34.557]                       base::local({
[13:18:34.557]                         has_future <- base::requireNamespace("future", 
[13:18:34.557]                           quietly = TRUE)
[13:18:34.557]                         if (has_future) {
[13:18:34.557]                           ns <- base::getNamespace("future")
[13:18:34.557]                           version <- ns[[".package"]][["version"]]
[13:18:34.557]                           if (is.null(version)) 
[13:18:34.557]                             version <- utils::packageVersion("future")
[13:18:34.557]                         }
[13:18:34.557]                         else {
[13:18:34.557]                           version <- NULL
[13:18:34.557]                         }
[13:18:34.557]                         if (!has_future || version < "1.8.0") {
[13:18:34.557]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:34.557]                             "", base::R.version$version.string), 
[13:18:34.557]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:34.557]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:34.557]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:34.557]                               "release", "version")], collapse = " "), 
[13:18:34.557]                             hostname = base::Sys.info()[["nodename"]])
[13:18:34.557]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:34.557]                             info)
[13:18:34.557]                           info <- base::paste(info, collapse = "; ")
[13:18:34.557]                           if (!has_future) {
[13:18:34.557]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:34.557]                               info)
[13:18:34.557]                           }
[13:18:34.557]                           else {
[13:18:34.557]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:34.557]                               info, version)
[13:18:34.557]                           }
[13:18:34.557]                           base::stop(msg)
[13:18:34.557]                         }
[13:18:34.557]                       })
[13:18:34.557]                     }
[13:18:34.557]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:34.557]                     base::options(mc.cores = 1L)
[13:18:34.557]                   }
[13:18:34.557]                   options(future.plan = NULL)
[13:18:34.557]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:34.557]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:34.557]                 }
[13:18:34.557]                 ...future.workdir <- getwd()
[13:18:34.557]             }
[13:18:34.557]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:34.557]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:34.557]         }
[13:18:34.557]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:34.557]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[13:18:34.557]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:34.557]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:34.557]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:34.557]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:34.557]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:34.557]             base::names(...future.oldOptions))
[13:18:34.557]     }
[13:18:34.557]     if (FALSE) {
[13:18:34.557]     }
[13:18:34.557]     else {
[13:18:34.557]         if (TRUE) {
[13:18:34.557]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:34.557]                 open = "w")
[13:18:34.557]         }
[13:18:34.557]         else {
[13:18:34.557]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:34.557]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:34.557]         }
[13:18:34.557]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:34.557]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:34.557]             base::sink(type = "output", split = FALSE)
[13:18:34.557]             base::close(...future.stdout)
[13:18:34.557]         }, add = TRUE)
[13:18:34.557]     }
[13:18:34.557]     ...future.frame <- base::sys.nframe()
[13:18:34.557]     ...future.conditions <- base::list()
[13:18:34.557]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:34.557]     if (FALSE) {
[13:18:34.557]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:34.557]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:34.557]     }
[13:18:34.557]     ...future.result <- base::tryCatch({
[13:18:34.557]         base::withCallingHandlers({
[13:18:34.557]             ...future.value <- base::withVisible(base::local({
[13:18:34.557]                 ...future.makeSendCondition <- local({
[13:18:34.557]                   sendCondition <- NULL
[13:18:34.557]                   function(frame = 1L) {
[13:18:34.557]                     if (is.function(sendCondition)) 
[13:18:34.557]                       return(sendCondition)
[13:18:34.557]                     ns <- getNamespace("parallel")
[13:18:34.557]                     if (exists("sendData", mode = "function", 
[13:18:34.557]                       envir = ns)) {
[13:18:34.557]                       parallel_sendData <- get("sendData", mode = "function", 
[13:18:34.557]                         envir = ns)
[13:18:34.557]                       envir <- sys.frame(frame)
[13:18:34.557]                       master <- NULL
[13:18:34.557]                       while (!identical(envir, .GlobalEnv) && 
[13:18:34.557]                         !identical(envir, emptyenv())) {
[13:18:34.557]                         if (exists("master", mode = "list", envir = envir, 
[13:18:34.557]                           inherits = FALSE)) {
[13:18:34.557]                           master <- get("master", mode = "list", 
[13:18:34.557]                             envir = envir, inherits = FALSE)
[13:18:34.557]                           if (inherits(master, c("SOCKnode", 
[13:18:34.557]                             "SOCK0node"))) {
[13:18:34.557]                             sendCondition <<- function(cond) {
[13:18:34.557]                               data <- list(type = "VALUE", value = cond, 
[13:18:34.557]                                 success = TRUE)
[13:18:34.557]                               parallel_sendData(master, data)
[13:18:34.557]                             }
[13:18:34.557]                             return(sendCondition)
[13:18:34.557]                           }
[13:18:34.557]                         }
[13:18:34.557]                         frame <- frame + 1L
[13:18:34.557]                         envir <- sys.frame(frame)
[13:18:34.557]                       }
[13:18:34.557]                     }
[13:18:34.557]                     sendCondition <<- function(cond) NULL
[13:18:34.557]                   }
[13:18:34.557]                 })
[13:18:34.557]                 withCallingHandlers({
[13:18:34.557]                   {
[13:18:34.557]                     do.call(function(...) {
[13:18:34.557]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.557]                       if (!identical(...future.globals.maxSize.org, 
[13:18:34.557]                         ...future.globals.maxSize)) {
[13:18:34.557]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.557]                         on.exit(options(oopts), add = TRUE)
[13:18:34.557]                       }
[13:18:34.557]                       {
[13:18:34.557]                         lapply(seq_along(...future.elements_ii), 
[13:18:34.557]                           FUN = function(jj) {
[13:18:34.557]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.557]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.557]                               envir = globalenv(), inherits = FALSE)
[13:18:34.557]                             ...future.FUN(...future.X_jj, ...)
[13:18:34.557]                           })
[13:18:34.557]                       }
[13:18:34.557]                     }, args = future.call.arguments)
[13:18:34.557]                   }
[13:18:34.557]                 }, immediateCondition = function(cond) {
[13:18:34.557]                   sendCondition <- ...future.makeSendCondition()
[13:18:34.557]                   sendCondition(cond)
[13:18:34.557]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.557]                   {
[13:18:34.557]                     inherits <- base::inherits
[13:18:34.557]                     invokeRestart <- base::invokeRestart
[13:18:34.557]                     is.null <- base::is.null
[13:18:34.557]                     muffled <- FALSE
[13:18:34.557]                     if (inherits(cond, "message")) {
[13:18:34.557]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:34.557]                       if (muffled) 
[13:18:34.557]                         invokeRestart("muffleMessage")
[13:18:34.557]                     }
[13:18:34.557]                     else if (inherits(cond, "warning")) {
[13:18:34.557]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:34.557]                       if (muffled) 
[13:18:34.557]                         invokeRestart("muffleWarning")
[13:18:34.557]                     }
[13:18:34.557]                     else if (inherits(cond, "condition")) {
[13:18:34.557]                       if (!is.null(pattern)) {
[13:18:34.557]                         computeRestarts <- base::computeRestarts
[13:18:34.557]                         grepl <- base::grepl
[13:18:34.557]                         restarts <- computeRestarts(cond)
[13:18:34.557]                         for (restart in restarts) {
[13:18:34.557]                           name <- restart$name
[13:18:34.557]                           if (is.null(name)) 
[13:18:34.557]                             next
[13:18:34.557]                           if (!grepl(pattern, name)) 
[13:18:34.557]                             next
[13:18:34.557]                           invokeRestart(restart)
[13:18:34.557]                           muffled <- TRUE
[13:18:34.557]                           break
[13:18:34.557]                         }
[13:18:34.557]                       }
[13:18:34.557]                     }
[13:18:34.557]                     invisible(muffled)
[13:18:34.557]                   }
[13:18:34.557]                   muffleCondition(cond)
[13:18:34.557]                 })
[13:18:34.557]             }))
[13:18:34.557]             future::FutureResult(value = ...future.value$value, 
[13:18:34.557]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:34.557]                   ...future.rng), globalenv = if (FALSE) 
[13:18:34.557]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:34.557]                     ...future.globalenv.names))
[13:18:34.557]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:34.557]         }, condition = base::local({
[13:18:34.557]             c <- base::c
[13:18:34.557]             inherits <- base::inherits
[13:18:34.557]             invokeRestart <- base::invokeRestart
[13:18:34.557]             length <- base::length
[13:18:34.557]             list <- base::list
[13:18:34.557]             seq.int <- base::seq.int
[13:18:34.557]             signalCondition <- base::signalCondition
[13:18:34.557]             sys.calls <- base::sys.calls
[13:18:34.557]             `[[` <- base::`[[`
[13:18:34.557]             `+` <- base::`+`
[13:18:34.557]             `<<-` <- base::`<<-`
[13:18:34.557]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:34.557]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:34.557]                   3L)]
[13:18:34.557]             }
[13:18:34.557]             function(cond) {
[13:18:34.557]                 is_error <- inherits(cond, "error")
[13:18:34.557]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:34.557]                   NULL)
[13:18:34.557]                 if (is_error) {
[13:18:34.557]                   sessionInformation <- function() {
[13:18:34.557]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:34.557]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:34.557]                       search = base::search(), system = base::Sys.info())
[13:18:34.557]                   }
[13:18:34.557]                   ...future.conditions[[length(...future.conditions) + 
[13:18:34.557]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:34.557]                     cond$call), session = sessionInformation(), 
[13:18:34.557]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:34.557]                   signalCondition(cond)
[13:18:34.557]                 }
[13:18:34.557]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:34.557]                 "immediateCondition"))) {
[13:18:34.557]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:34.557]                   ...future.conditions[[length(...future.conditions) + 
[13:18:34.557]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:34.557]                   if (TRUE && !signal) {
[13:18:34.557]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.557]                     {
[13:18:34.557]                       inherits <- base::inherits
[13:18:34.557]                       invokeRestart <- base::invokeRestart
[13:18:34.557]                       is.null <- base::is.null
[13:18:34.557]                       muffled <- FALSE
[13:18:34.557]                       if (inherits(cond, "message")) {
[13:18:34.557]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:34.557]                         if (muffled) 
[13:18:34.557]                           invokeRestart("muffleMessage")
[13:18:34.557]                       }
[13:18:34.557]                       else if (inherits(cond, "warning")) {
[13:18:34.557]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:34.557]                         if (muffled) 
[13:18:34.557]                           invokeRestart("muffleWarning")
[13:18:34.557]                       }
[13:18:34.557]                       else if (inherits(cond, "condition")) {
[13:18:34.557]                         if (!is.null(pattern)) {
[13:18:34.557]                           computeRestarts <- base::computeRestarts
[13:18:34.557]                           grepl <- base::grepl
[13:18:34.557]                           restarts <- computeRestarts(cond)
[13:18:34.557]                           for (restart in restarts) {
[13:18:34.557]                             name <- restart$name
[13:18:34.557]                             if (is.null(name)) 
[13:18:34.557]                               next
[13:18:34.557]                             if (!grepl(pattern, name)) 
[13:18:34.557]                               next
[13:18:34.557]                             invokeRestart(restart)
[13:18:34.557]                             muffled <- TRUE
[13:18:34.557]                             break
[13:18:34.557]                           }
[13:18:34.557]                         }
[13:18:34.557]                       }
[13:18:34.557]                       invisible(muffled)
[13:18:34.557]                     }
[13:18:34.557]                     muffleCondition(cond, pattern = "^muffle")
[13:18:34.557]                   }
[13:18:34.557]                 }
[13:18:34.557]                 else {
[13:18:34.557]                   if (TRUE) {
[13:18:34.557]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.557]                     {
[13:18:34.557]                       inherits <- base::inherits
[13:18:34.557]                       invokeRestart <- base::invokeRestart
[13:18:34.557]                       is.null <- base::is.null
[13:18:34.557]                       muffled <- FALSE
[13:18:34.557]                       if (inherits(cond, "message")) {
[13:18:34.557]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:34.557]                         if (muffled) 
[13:18:34.557]                           invokeRestart("muffleMessage")
[13:18:34.557]                       }
[13:18:34.557]                       else if (inherits(cond, "warning")) {
[13:18:34.557]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:34.557]                         if (muffled) 
[13:18:34.557]                           invokeRestart("muffleWarning")
[13:18:34.557]                       }
[13:18:34.557]                       else if (inherits(cond, "condition")) {
[13:18:34.557]                         if (!is.null(pattern)) {
[13:18:34.557]                           computeRestarts <- base::computeRestarts
[13:18:34.557]                           grepl <- base::grepl
[13:18:34.557]                           restarts <- computeRestarts(cond)
[13:18:34.557]                           for (restart in restarts) {
[13:18:34.557]                             name <- restart$name
[13:18:34.557]                             if (is.null(name)) 
[13:18:34.557]                               next
[13:18:34.557]                             if (!grepl(pattern, name)) 
[13:18:34.557]                               next
[13:18:34.557]                             invokeRestart(restart)
[13:18:34.557]                             muffled <- TRUE
[13:18:34.557]                             break
[13:18:34.557]                           }
[13:18:34.557]                         }
[13:18:34.557]                       }
[13:18:34.557]                       invisible(muffled)
[13:18:34.557]                     }
[13:18:34.557]                     muffleCondition(cond, pattern = "^muffle")
[13:18:34.557]                   }
[13:18:34.557]                 }
[13:18:34.557]             }
[13:18:34.557]         }))
[13:18:34.557]     }, error = function(ex) {
[13:18:34.557]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:34.557]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:34.557]                 ...future.rng), started = ...future.startTime, 
[13:18:34.557]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:34.557]             version = "1.8"), class = "FutureResult")
[13:18:34.557]     }, finally = {
[13:18:34.557]         if (!identical(...future.workdir, getwd())) 
[13:18:34.557]             setwd(...future.workdir)
[13:18:34.557]         {
[13:18:34.557]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:34.557]                 ...future.oldOptions$nwarnings <- NULL
[13:18:34.557]             }
[13:18:34.557]             base::options(...future.oldOptions)
[13:18:34.557]             if (.Platform$OS.type == "windows") {
[13:18:34.557]                 old_names <- names(...future.oldEnvVars)
[13:18:34.557]                 envs <- base::Sys.getenv()
[13:18:34.557]                 names <- names(envs)
[13:18:34.557]                 common <- intersect(names, old_names)
[13:18:34.557]                 added <- setdiff(names, old_names)
[13:18:34.557]                 removed <- setdiff(old_names, names)
[13:18:34.557]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:34.557]                   envs[common]]
[13:18:34.557]                 NAMES <- toupper(changed)
[13:18:34.557]                 args <- list()
[13:18:34.557]                 for (kk in seq_along(NAMES)) {
[13:18:34.557]                   name <- changed[[kk]]
[13:18:34.557]                   NAME <- NAMES[[kk]]
[13:18:34.557]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.557]                     next
[13:18:34.557]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:34.557]                 }
[13:18:34.557]                 NAMES <- toupper(added)
[13:18:34.557]                 for (kk in seq_along(NAMES)) {
[13:18:34.557]                   name <- added[[kk]]
[13:18:34.557]                   NAME <- NAMES[[kk]]
[13:18:34.557]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.557]                     next
[13:18:34.557]                   args[[name]] <- ""
[13:18:34.557]                 }
[13:18:34.557]                 NAMES <- toupper(removed)
[13:18:34.557]                 for (kk in seq_along(NAMES)) {
[13:18:34.557]                   name <- removed[[kk]]
[13:18:34.557]                   NAME <- NAMES[[kk]]
[13:18:34.557]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.557]                     next
[13:18:34.557]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:34.557]                 }
[13:18:34.557]                 if (length(args) > 0) 
[13:18:34.557]                   base::do.call(base::Sys.setenv, args = args)
[13:18:34.557]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:34.557]             }
[13:18:34.557]             else {
[13:18:34.557]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:34.557]             }
[13:18:34.557]             {
[13:18:34.557]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:34.557]                   0L) {
[13:18:34.557]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:34.557]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:34.557]                   base::options(opts)
[13:18:34.557]                 }
[13:18:34.557]                 {
[13:18:34.557]                   {
[13:18:34.557]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:34.557]                     NULL
[13:18:34.557]                   }
[13:18:34.557]                   options(future.plan = NULL)
[13:18:34.557]                   if (is.na(NA_character_)) 
[13:18:34.557]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:34.557]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:34.557]                   future::plan(list(function (..., workers = availableCores(), 
[13:18:34.557]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:18:34.557]                     envir = parent.frame()) 
[13:18:34.557]                   {
[13:18:34.557]                     if (is.function(workers)) 
[13:18:34.557]                       workers <- workers()
[13:18:34.557]                     workers <- structure(as.integer(workers), 
[13:18:34.557]                       class = class(workers))
[13:18:34.557]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:18:34.557]                       workers >= 1)
[13:18:34.557]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:18:34.557]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:18:34.557]                     }
[13:18:34.557]                     future <- MultisessionFuture(..., workers = workers, 
[13:18:34.557]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:18:34.557]                       envir = envir)
[13:18:34.557]                     if (!future$lazy) 
[13:18:34.557]                       future <- run(future)
[13:18:34.557]                     invisible(future)
[13:18:34.557]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:34.557]                 }
[13:18:34.557]             }
[13:18:34.557]         }
[13:18:34.557]     })
[13:18:34.557]     if (TRUE) {
[13:18:34.557]         base::sink(type = "output", split = FALSE)
[13:18:34.557]         if (TRUE) {
[13:18:34.557]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:34.557]         }
[13:18:34.557]         else {
[13:18:34.557]             ...future.result["stdout"] <- base::list(NULL)
[13:18:34.557]         }
[13:18:34.557]         base::close(...future.stdout)
[13:18:34.557]         ...future.stdout <- NULL
[13:18:34.557]     }
[13:18:34.557]     ...future.result$conditions <- ...future.conditions
[13:18:34.557]     ...future.result$finished <- base::Sys.time()
[13:18:34.557]     ...future.result
[13:18:34.557] }
[13:18:34.560] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[13:18:34.560] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[13:18:34.560] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[13:18:34.560] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[13:18:34.561] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[13:18:34.561] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[13:18:34.561] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[13:18:34.562] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[13:18:34.562] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[13:18:34.562] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[13:18:34.562] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[13:18:34.562] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[13:18:34.563] MultisessionFuture started
[13:18:34.563] - Launch lazy future ... done
[13:18:34.563] run() for ‘MultisessionFuture’ ... done
[13:18:34.563] Created future:
[13:18:34.563] MultisessionFuture:
[13:18:34.563] Label: ‘future_replicate-2’
[13:18:34.563] Expression:
[13:18:34.563] {
[13:18:34.563]     do.call(function(...) {
[13:18:34.563]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.563]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:34.563]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.563]             on.exit(options(oopts), add = TRUE)
[13:18:34.563]         }
[13:18:34.563]         {
[13:18:34.563]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:34.563]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.563]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.563]                   envir = globalenv(), inherits = FALSE)
[13:18:34.563]                 ...future.FUN(...future.X_jj, ...)
[13:18:34.563]             })
[13:18:34.563]         }
[13:18:34.563]     }, args = future.call.arguments)
[13:18:34.563] }
[13:18:34.563] Lazy evaluation: FALSE
[13:18:34.563] Asynchronous evaluation: TRUE
[13:18:34.563] Local evaluation: TRUE
[13:18:34.563] Environment: R_GlobalEnv
[13:18:34.563] Capture standard output: TRUE
[13:18:34.563] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:34.563] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:18:34.563] Packages: <none>
[13:18:34.563] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:34.563] Resolved: FALSE
[13:18:34.563] Value: <not collected>
[13:18:34.563] Conditions captured: <none>
[13:18:34.563] Early signaling: FALSE
[13:18:34.563] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:34.563] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:34.575] Chunk #2 of 2 ... DONE
[13:18:34.575] Launching 2 futures (chunks) ... DONE
[13:18:34.575] Resolving 2 futures (chunks) ...
[13:18:34.575] resolve() on list ...
[13:18:34.575]  recursive: 0
[13:18:34.576]  length: 2
[13:18:34.576] 
[13:18:34.576] receiveMessageFromWorker() for ClusterFuture ...
[13:18:34.576] - Validating connection of MultisessionFuture
[13:18:34.576] - received message: FutureResult
[13:18:34.577] - Received FutureResult
[13:18:34.577] - Erased future from FutureRegistry
[13:18:34.577] result() for ClusterFuture ...
[13:18:34.577] - result already collected: FutureResult
[13:18:34.577] result() for ClusterFuture ... done
[13:18:34.577] receiveMessageFromWorker() for ClusterFuture ... done
[13:18:34.577] Future #1
[13:18:34.577] result() for ClusterFuture ...
[13:18:34.577] - result already collected: FutureResult
[13:18:34.577] result() for ClusterFuture ... done
[13:18:34.578] result() for ClusterFuture ...
[13:18:34.578] - result already collected: FutureResult
[13:18:34.578] result() for ClusterFuture ... done
[13:18:34.578] signalConditionsASAP(MultisessionFuture, pos=1) ...
[13:18:34.578] - nx: 2
[13:18:34.578] - relay: TRUE
[13:18:34.578] - stdout: TRUE
[13:18:34.578] - signal: TRUE
[13:18:34.578] - resignal: FALSE
[13:18:34.578] - force: TRUE
[13:18:34.578] - relayed: [n=2] FALSE, FALSE
[13:18:34.578] - queued futures: [n=2] FALSE, FALSE
[13:18:34.579]  - until=1
[13:18:34.579]  - relaying element #1
[13:18:34.579] result() for ClusterFuture ...
[13:18:34.579] - result already collected: FutureResult
[13:18:34.579] result() for ClusterFuture ... done
[13:18:34.579] result() for ClusterFuture ...
[13:18:34.579] - result already collected: FutureResult
[13:18:34.579] result() for ClusterFuture ... done
[13:18:34.579] result() for ClusterFuture ...
[13:18:34.579] - result already collected: FutureResult
[13:18:34.579] result() for ClusterFuture ... done
[13:18:34.580] result() for ClusterFuture ...
[13:18:34.580] - result already collected: FutureResult
[13:18:34.580] result() for ClusterFuture ... done
[13:18:34.580] - relayed: [n=2] TRUE, FALSE
[13:18:34.580] - queued futures: [n=2] TRUE, FALSE
[13:18:34.580] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[13:18:34.580]  length: 1 (resolved future 1)
[13:18:34.610] receiveMessageFromWorker() for ClusterFuture ...
[13:18:34.610] - Validating connection of MultisessionFuture
[13:18:34.610] - received message: FutureResult
[13:18:34.610] - Received FutureResult
[13:18:34.610] - Erased future from FutureRegistry
[13:18:34.610] result() for ClusterFuture ...
[13:18:34.610] - result already collected: FutureResult
[13:18:34.611] result() for ClusterFuture ... done
[13:18:34.611] receiveMessageFromWorker() for ClusterFuture ... done
[13:18:34.611] Future #2
[13:18:34.611] result() for ClusterFuture ...
[13:18:34.611] - result already collected: FutureResult
[13:18:34.611] result() for ClusterFuture ... done
[13:18:34.611] result() for ClusterFuture ...
[13:18:34.611] - result already collected: FutureResult
[13:18:34.611] result() for ClusterFuture ... done
[13:18:34.611] signalConditionsASAP(MultisessionFuture, pos=2) ...
[13:18:34.611] - nx: 2
[13:18:34.612] - relay: TRUE
[13:18:34.612] - stdout: TRUE
[13:18:34.612] - signal: TRUE
[13:18:34.612] - resignal: FALSE
[13:18:34.612] - force: TRUE
[13:18:34.612] - relayed: [n=2] TRUE, FALSE
[13:18:34.612] - queued futures: [n=2] TRUE, FALSE
[13:18:34.612]  - until=2
[13:18:34.612]  - relaying element #2
[13:18:34.612] result() for ClusterFuture ...
[13:18:34.612] - result already collected: FutureResult
[13:18:34.613] result() for ClusterFuture ... done
[13:18:34.613] result() for ClusterFuture ...
[13:18:34.613] - result already collected: FutureResult
[13:18:34.613] result() for ClusterFuture ... done
[13:18:34.613] result() for ClusterFuture ...
[13:18:34.613] - result already collected: FutureResult
[13:18:34.613] result() for ClusterFuture ... done
[13:18:34.613] result() for ClusterFuture ...
[13:18:34.613] - result already collected: FutureResult
[13:18:34.613] result() for ClusterFuture ... done
[13:18:34.616] - relayed: [n=2] TRUE, TRUE
[13:18:34.616] - queued futures: [n=2] TRUE, TRUE
[13:18:34.616] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[13:18:34.616]  length: 0 (resolved future 2)
[13:18:34.616] Relaying remaining futures
[13:18:34.616] signalConditionsASAP(NULL, pos=0) ...
[13:18:34.616] - nx: 2
[13:18:34.617] - relay: TRUE
[13:18:34.617] - stdout: TRUE
[13:18:34.617] - signal: TRUE
[13:18:34.617] - resignal: FALSE
[13:18:34.617] - force: TRUE
[13:18:34.617] - relayed: [n=2] TRUE, TRUE
[13:18:34.617] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:18:34.617] - relayed: [n=2] TRUE, TRUE
[13:18:34.617] - queued futures: [n=2] TRUE, TRUE
[13:18:34.617] signalConditionsASAP(NULL, pos=0) ... done
[13:18:34.617] resolve() on list ... DONE
[13:18:34.618] result() for ClusterFuture ...
[13:18:34.618] - result already collected: FutureResult
[13:18:34.618] result() for ClusterFuture ... done
[13:18:34.618] result() for ClusterFuture ...
[13:18:34.618] - result already collected: FutureResult
[13:18:34.618] result() for ClusterFuture ... done
[13:18:34.618] result() for ClusterFuture ...
[13:18:34.618] - result already collected: FutureResult
[13:18:34.618] result() for ClusterFuture ... done
[13:18:34.618] result() for ClusterFuture ...
[13:18:34.618] - result already collected: FutureResult
[13:18:34.618] result() for ClusterFuture ... done
[13:18:34.619]  - Number of value chunks collected: 2
[13:18:34.619] Resolving 2 futures (chunks) ... DONE
[13:18:34.619] Reducing values from 2 chunks ...
[13:18:34.619]  - Number of values collected after concatenation: 5
[13:18:34.619]  - Number of values expected: 5
[13:18:34.619] Reducing values from 2 chunks ... DONE
[13:18:34.619] future_lapply() ... DONE
- example(replicate) ...
[13:18:34.619] future_lapply() ...
[13:18:34.620] Generating random seeds ...
[13:18:34.620] Generating random seed streams for 5 elements ...
[13:18:34.620] Generating random seed streams for 5 elements ... DONE
[13:18:34.620] Generating random seeds ... DONE
[13:18:34.620] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:18:34.624] Number of chunks: 2
[13:18:34.625] getGlobalsAndPackagesXApply() ...
[13:18:34.625]  - future.globals: TRUE
[13:18:34.625] getGlobalsAndPackages() ...
[13:18:34.625] Searching for globals...
[13:18:34.627] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[13:18:34.627] Searching for globals ... DONE
[13:18:34.627] Resolving globals: FALSE
[13:18:34.627] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[13:18:34.628] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[13:18:34.628] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[13:18:34.628] 
[13:18:34.628] getGlobalsAndPackages() ... DONE
[13:18:34.628]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[13:18:34.628]  - needed namespaces: [n=0] 
[13:18:34.628] Finding globals ... DONE
[13:18:34.628]  - use_args: TRUE
[13:18:34.628]  - Getting '...' globals ...
[13:18:34.629] resolve() on list ...
[13:18:34.629]  recursive: 0
[13:18:34.629]  length: 1
[13:18:34.629]  elements: ‘...’
[13:18:34.629]  length: 0 (resolved future 1)
[13:18:34.629] resolve() on list ... DONE
[13:18:34.629]    - '...' content: [n=0] 
[13:18:34.629] List of 1
[13:18:34.629]  $ ...: list()
[13:18:34.629]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:34.629]  - attr(*, "where")=List of 1
[13:18:34.629]   ..$ ...:<environment: 0x55df1e88ab70> 
[13:18:34.629]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:34.629]  - attr(*, "resolved")= logi TRUE
[13:18:34.629]  - attr(*, "total_size")= num NA
[13:18:34.632]  - Getting '...' globals ... DONE
[13:18:34.632] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[13:18:34.632] List of 4
[13:18:34.632]  $ ...future.FUN:function (...)  
[13:18:34.632]  $ foo          :function (x = 1, y = 2)  
[13:18:34.632]  $ x            : num 3
[13:18:34.632]  $ ...          : list()
[13:18:34.632]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:18:34.632]  - attr(*, "where")=List of 4
[13:18:34.632]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:18:34.632]   ..$ foo          :<environment: R_EmptyEnv> 
[13:18:34.632]   ..$ x            :<environment: R_EmptyEnv> 
[13:18:34.632]   ..$ ...          :<environment: 0x55df1e88ab70> 
[13:18:34.632]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:18:34.632]  - attr(*, "resolved")= logi FALSE
[13:18:34.632]  - attr(*, "total_size")= num 2200
[13:18:34.636] Packages to be attached in all futures: [n=0] 
[13:18:34.636] getGlobalsAndPackagesXApply() ... DONE
[13:18:34.636] Number of futures (= number of chunks): 2
[13:18:34.636] Launching 2 futures (chunks) ...
[13:18:34.636] Chunk #1 of 2 ...
[13:18:34.637]  - Finding globals in 'X' for chunk #1 ...
[13:18:34.637] getGlobalsAndPackages() ...
[13:18:34.637] Searching for globals...
[13:18:34.637] 
[13:18:34.637] Searching for globals ... DONE
[13:18:34.637] - globals: [0] <none>
[13:18:34.637] getGlobalsAndPackages() ... DONE
[13:18:34.637]    + additional globals found: [n=0] 
[13:18:34.637]    + additional namespaces needed: [n=0] 
[13:18:34.638]  - Finding globals in 'X' for chunk #1 ... DONE
[13:18:34.638]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:18:34.638]  - seeds: [2] <seeds>
[13:18:34.638] getGlobalsAndPackages() ...
[13:18:34.638] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:34.638] Resolving globals: FALSE
[13:18:34.638] Tweak future expression to call with '...' arguments ...
[13:18:34.638] {
[13:18:34.638]     do.call(function(...) {
[13:18:34.638]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.638]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:34.638]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.638]             on.exit(options(oopts), add = TRUE)
[13:18:34.638]         }
[13:18:34.638]         {
[13:18:34.638]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:34.638]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.638]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.638]                   envir = globalenv(), inherits = FALSE)
[13:18:34.638]                 ...future.FUN(...future.X_jj, ...)
[13:18:34.638]             })
[13:18:34.638]         }
[13:18:34.638]     }, args = future.call.arguments)
[13:18:34.638] }
[13:18:34.639] Tweak future expression to call with '...' arguments ... DONE
[13:18:34.639] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:34.639] 
[13:18:34.639] getGlobalsAndPackages() ... DONE
[13:18:34.639] run() for ‘Future’ ...
[13:18:34.640] - state: ‘created’
[13:18:34.640] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:18:34.656] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:34.656] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:18:34.657]   - Field: ‘node’
[13:18:34.657]   - Field: ‘label’
[13:18:34.657]   - Field: ‘local’
[13:18:34.657]   - Field: ‘owner’
[13:18:34.657]   - Field: ‘envir’
[13:18:34.657]   - Field: ‘workers’
[13:18:34.657]   - Field: ‘packages’
[13:18:34.657]   - Field: ‘gc’
[13:18:34.657]   - Field: ‘conditions’
[13:18:34.657]   - Field: ‘persistent’
[13:18:34.658]   - Field: ‘expr’
[13:18:34.658]   - Field: ‘uuid’
[13:18:34.658]   - Field: ‘seed’
[13:18:34.658]   - Field: ‘version’
[13:18:34.658]   - Field: ‘result’
[13:18:34.658]   - Field: ‘asynchronous’
[13:18:34.658]   - Field: ‘calls’
[13:18:34.658]   - Field: ‘globals’
[13:18:34.658]   - Field: ‘stdout’
[13:18:34.658]   - Field: ‘earlySignal’
[13:18:34.658]   - Field: ‘lazy’
[13:18:34.659]   - Field: ‘state’
[13:18:34.659] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:18:34.659] - Launch lazy future ...
[13:18:34.659] Packages needed by the future expression (n = 0): <none>
[13:18:34.659] Packages needed by future strategies (n = 0): <none>
[13:18:34.660] {
[13:18:34.660]     {
[13:18:34.660]         {
[13:18:34.660]             ...future.startTime <- base::Sys.time()
[13:18:34.660]             {
[13:18:34.660]                 {
[13:18:34.660]                   {
[13:18:34.660]                     {
[13:18:34.660]                       base::local({
[13:18:34.660]                         has_future <- base::requireNamespace("future", 
[13:18:34.660]                           quietly = TRUE)
[13:18:34.660]                         if (has_future) {
[13:18:34.660]                           ns <- base::getNamespace("future")
[13:18:34.660]                           version <- ns[[".package"]][["version"]]
[13:18:34.660]                           if (is.null(version)) 
[13:18:34.660]                             version <- utils::packageVersion("future")
[13:18:34.660]                         }
[13:18:34.660]                         else {
[13:18:34.660]                           version <- NULL
[13:18:34.660]                         }
[13:18:34.660]                         if (!has_future || version < "1.8.0") {
[13:18:34.660]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:34.660]                             "", base::R.version$version.string), 
[13:18:34.660]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:34.660]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:34.660]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:34.660]                               "release", "version")], collapse = " "), 
[13:18:34.660]                             hostname = base::Sys.info()[["nodename"]])
[13:18:34.660]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:34.660]                             info)
[13:18:34.660]                           info <- base::paste(info, collapse = "; ")
[13:18:34.660]                           if (!has_future) {
[13:18:34.660]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:34.660]                               info)
[13:18:34.660]                           }
[13:18:34.660]                           else {
[13:18:34.660]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:34.660]                               info, version)
[13:18:34.660]                           }
[13:18:34.660]                           base::stop(msg)
[13:18:34.660]                         }
[13:18:34.660]                       })
[13:18:34.660]                     }
[13:18:34.660]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:34.660]                     base::options(mc.cores = 1L)
[13:18:34.660]                   }
[13:18:34.660]                   options(future.plan = NULL)
[13:18:34.660]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:34.660]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:34.660]                 }
[13:18:34.660]                 ...future.workdir <- getwd()
[13:18:34.660]             }
[13:18:34.660]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:34.660]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:34.660]         }
[13:18:34.660]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:34.660]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:18:34.660]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:34.660]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:34.660]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:34.660]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:34.660]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:34.660]             base::names(...future.oldOptions))
[13:18:34.660]     }
[13:18:34.660]     if (FALSE) {
[13:18:34.660]     }
[13:18:34.660]     else {
[13:18:34.660]         if (TRUE) {
[13:18:34.660]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:34.660]                 open = "w")
[13:18:34.660]         }
[13:18:34.660]         else {
[13:18:34.660]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:34.660]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:34.660]         }
[13:18:34.660]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:34.660]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:34.660]             base::sink(type = "output", split = FALSE)
[13:18:34.660]             base::close(...future.stdout)
[13:18:34.660]         }, add = TRUE)
[13:18:34.660]     }
[13:18:34.660]     ...future.frame <- base::sys.nframe()
[13:18:34.660]     ...future.conditions <- base::list()
[13:18:34.660]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:34.660]     if (FALSE) {
[13:18:34.660]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:34.660]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:34.660]     }
[13:18:34.660]     ...future.result <- base::tryCatch({
[13:18:34.660]         base::withCallingHandlers({
[13:18:34.660]             ...future.value <- base::withVisible(base::local({
[13:18:34.660]                 ...future.makeSendCondition <- local({
[13:18:34.660]                   sendCondition <- NULL
[13:18:34.660]                   function(frame = 1L) {
[13:18:34.660]                     if (is.function(sendCondition)) 
[13:18:34.660]                       return(sendCondition)
[13:18:34.660]                     ns <- getNamespace("parallel")
[13:18:34.660]                     if (exists("sendData", mode = "function", 
[13:18:34.660]                       envir = ns)) {
[13:18:34.660]                       parallel_sendData <- get("sendData", mode = "function", 
[13:18:34.660]                         envir = ns)
[13:18:34.660]                       envir <- sys.frame(frame)
[13:18:34.660]                       master <- NULL
[13:18:34.660]                       while (!identical(envir, .GlobalEnv) && 
[13:18:34.660]                         !identical(envir, emptyenv())) {
[13:18:34.660]                         if (exists("master", mode = "list", envir = envir, 
[13:18:34.660]                           inherits = FALSE)) {
[13:18:34.660]                           master <- get("master", mode = "list", 
[13:18:34.660]                             envir = envir, inherits = FALSE)
[13:18:34.660]                           if (inherits(master, c("SOCKnode", 
[13:18:34.660]                             "SOCK0node"))) {
[13:18:34.660]                             sendCondition <<- function(cond) {
[13:18:34.660]                               data <- list(type = "VALUE", value = cond, 
[13:18:34.660]                                 success = TRUE)
[13:18:34.660]                               parallel_sendData(master, data)
[13:18:34.660]                             }
[13:18:34.660]                             return(sendCondition)
[13:18:34.660]                           }
[13:18:34.660]                         }
[13:18:34.660]                         frame <- frame + 1L
[13:18:34.660]                         envir <- sys.frame(frame)
[13:18:34.660]                       }
[13:18:34.660]                     }
[13:18:34.660]                     sendCondition <<- function(cond) NULL
[13:18:34.660]                   }
[13:18:34.660]                 })
[13:18:34.660]                 withCallingHandlers({
[13:18:34.660]                   {
[13:18:34.660]                     do.call(function(...) {
[13:18:34.660]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.660]                       if (!identical(...future.globals.maxSize.org, 
[13:18:34.660]                         ...future.globals.maxSize)) {
[13:18:34.660]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.660]                         on.exit(options(oopts), add = TRUE)
[13:18:34.660]                       }
[13:18:34.660]                       {
[13:18:34.660]                         lapply(seq_along(...future.elements_ii), 
[13:18:34.660]                           FUN = function(jj) {
[13:18:34.660]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.660]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.660]                               envir = globalenv(), inherits = FALSE)
[13:18:34.660]                             ...future.FUN(...future.X_jj, ...)
[13:18:34.660]                           })
[13:18:34.660]                       }
[13:18:34.660]                     }, args = future.call.arguments)
[13:18:34.660]                   }
[13:18:34.660]                 }, immediateCondition = function(cond) {
[13:18:34.660]                   sendCondition <- ...future.makeSendCondition()
[13:18:34.660]                   sendCondition(cond)
[13:18:34.660]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.660]                   {
[13:18:34.660]                     inherits <- base::inherits
[13:18:34.660]                     invokeRestart <- base::invokeRestart
[13:18:34.660]                     is.null <- base::is.null
[13:18:34.660]                     muffled <- FALSE
[13:18:34.660]                     if (inherits(cond, "message")) {
[13:18:34.660]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:34.660]                       if (muffled) 
[13:18:34.660]                         invokeRestart("muffleMessage")
[13:18:34.660]                     }
[13:18:34.660]                     else if (inherits(cond, "warning")) {
[13:18:34.660]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:34.660]                       if (muffled) 
[13:18:34.660]                         invokeRestart("muffleWarning")
[13:18:34.660]                     }
[13:18:34.660]                     else if (inherits(cond, "condition")) {
[13:18:34.660]                       if (!is.null(pattern)) {
[13:18:34.660]                         computeRestarts <- base::computeRestarts
[13:18:34.660]                         grepl <- base::grepl
[13:18:34.660]                         restarts <- computeRestarts(cond)
[13:18:34.660]                         for (restart in restarts) {
[13:18:34.660]                           name <- restart$name
[13:18:34.660]                           if (is.null(name)) 
[13:18:34.660]                             next
[13:18:34.660]                           if (!grepl(pattern, name)) 
[13:18:34.660]                             next
[13:18:34.660]                           invokeRestart(restart)
[13:18:34.660]                           muffled <- TRUE
[13:18:34.660]                           break
[13:18:34.660]                         }
[13:18:34.660]                       }
[13:18:34.660]                     }
[13:18:34.660]                     invisible(muffled)
[13:18:34.660]                   }
[13:18:34.660]                   muffleCondition(cond)
[13:18:34.660]                 })
[13:18:34.660]             }))
[13:18:34.660]             future::FutureResult(value = ...future.value$value, 
[13:18:34.660]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:34.660]                   ...future.rng), globalenv = if (FALSE) 
[13:18:34.660]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:34.660]                     ...future.globalenv.names))
[13:18:34.660]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:34.660]         }, condition = base::local({
[13:18:34.660]             c <- base::c
[13:18:34.660]             inherits <- base::inherits
[13:18:34.660]             invokeRestart <- base::invokeRestart
[13:18:34.660]             length <- base::length
[13:18:34.660]             list <- base::list
[13:18:34.660]             seq.int <- base::seq.int
[13:18:34.660]             signalCondition <- base::signalCondition
[13:18:34.660]             sys.calls <- base::sys.calls
[13:18:34.660]             `[[` <- base::`[[`
[13:18:34.660]             `+` <- base::`+`
[13:18:34.660]             `<<-` <- base::`<<-`
[13:18:34.660]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:34.660]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:34.660]                   3L)]
[13:18:34.660]             }
[13:18:34.660]             function(cond) {
[13:18:34.660]                 is_error <- inherits(cond, "error")
[13:18:34.660]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:34.660]                   NULL)
[13:18:34.660]                 if (is_error) {
[13:18:34.660]                   sessionInformation <- function() {
[13:18:34.660]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:34.660]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:34.660]                       search = base::search(), system = base::Sys.info())
[13:18:34.660]                   }
[13:18:34.660]                   ...future.conditions[[length(...future.conditions) + 
[13:18:34.660]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:34.660]                     cond$call), session = sessionInformation(), 
[13:18:34.660]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:34.660]                   signalCondition(cond)
[13:18:34.660]                 }
[13:18:34.660]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:34.660]                 "immediateCondition"))) {
[13:18:34.660]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:34.660]                   ...future.conditions[[length(...future.conditions) + 
[13:18:34.660]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:34.660]                   if (TRUE && !signal) {
[13:18:34.660]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.660]                     {
[13:18:34.660]                       inherits <- base::inherits
[13:18:34.660]                       invokeRestart <- base::invokeRestart
[13:18:34.660]                       is.null <- base::is.null
[13:18:34.660]                       muffled <- FALSE
[13:18:34.660]                       if (inherits(cond, "message")) {
[13:18:34.660]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:34.660]                         if (muffled) 
[13:18:34.660]                           invokeRestart("muffleMessage")
[13:18:34.660]                       }
[13:18:34.660]                       else if (inherits(cond, "warning")) {
[13:18:34.660]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:34.660]                         if (muffled) 
[13:18:34.660]                           invokeRestart("muffleWarning")
[13:18:34.660]                       }
[13:18:34.660]                       else if (inherits(cond, "condition")) {
[13:18:34.660]                         if (!is.null(pattern)) {
[13:18:34.660]                           computeRestarts <- base::computeRestarts
[13:18:34.660]                           grepl <- base::grepl
[13:18:34.660]                           restarts <- computeRestarts(cond)
[13:18:34.660]                           for (restart in restarts) {
[13:18:34.660]                             name <- restart$name
[13:18:34.660]                             if (is.null(name)) 
[13:18:34.660]                               next
[13:18:34.660]                             if (!grepl(pattern, name)) 
[13:18:34.660]                               next
[13:18:34.660]                             invokeRestart(restart)
[13:18:34.660]                             muffled <- TRUE
[13:18:34.660]                             break
[13:18:34.660]                           }
[13:18:34.660]                         }
[13:18:34.660]                       }
[13:18:34.660]                       invisible(muffled)
[13:18:34.660]                     }
[13:18:34.660]                     muffleCondition(cond, pattern = "^muffle")
[13:18:34.660]                   }
[13:18:34.660]                 }
[13:18:34.660]                 else {
[13:18:34.660]                   if (TRUE) {
[13:18:34.660]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.660]                     {
[13:18:34.660]                       inherits <- base::inherits
[13:18:34.660]                       invokeRestart <- base::invokeRestart
[13:18:34.660]                       is.null <- base::is.null
[13:18:34.660]                       muffled <- FALSE
[13:18:34.660]                       if (inherits(cond, "message")) {
[13:18:34.660]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:34.660]                         if (muffled) 
[13:18:34.660]                           invokeRestart("muffleMessage")
[13:18:34.660]                       }
[13:18:34.660]                       else if (inherits(cond, "warning")) {
[13:18:34.660]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:34.660]                         if (muffled) 
[13:18:34.660]                           invokeRestart("muffleWarning")
[13:18:34.660]                       }
[13:18:34.660]                       else if (inherits(cond, "condition")) {
[13:18:34.660]                         if (!is.null(pattern)) {
[13:18:34.660]                           computeRestarts <- base::computeRestarts
[13:18:34.660]                           grepl <- base::grepl
[13:18:34.660]                           restarts <- computeRestarts(cond)
[13:18:34.660]                           for (restart in restarts) {
[13:18:34.660]                             name <- restart$name
[13:18:34.660]                             if (is.null(name)) 
[13:18:34.660]                               next
[13:18:34.660]                             if (!grepl(pattern, name)) 
[13:18:34.660]                               next
[13:18:34.660]                             invokeRestart(restart)
[13:18:34.660]                             muffled <- TRUE
[13:18:34.660]                             break
[13:18:34.660]                           }
[13:18:34.660]                         }
[13:18:34.660]                       }
[13:18:34.660]                       invisible(muffled)
[13:18:34.660]                     }
[13:18:34.660]                     muffleCondition(cond, pattern = "^muffle")
[13:18:34.660]                   }
[13:18:34.660]                 }
[13:18:34.660]             }
[13:18:34.660]         }))
[13:18:34.660]     }, error = function(ex) {
[13:18:34.660]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:34.660]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:34.660]                 ...future.rng), started = ...future.startTime, 
[13:18:34.660]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:34.660]             version = "1.8"), class = "FutureResult")
[13:18:34.660]     }, finally = {
[13:18:34.660]         if (!identical(...future.workdir, getwd())) 
[13:18:34.660]             setwd(...future.workdir)
[13:18:34.660]         {
[13:18:34.660]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:34.660]                 ...future.oldOptions$nwarnings <- NULL
[13:18:34.660]             }
[13:18:34.660]             base::options(...future.oldOptions)
[13:18:34.660]             if (.Platform$OS.type == "windows") {
[13:18:34.660]                 old_names <- names(...future.oldEnvVars)
[13:18:34.660]                 envs <- base::Sys.getenv()
[13:18:34.660]                 names <- names(envs)
[13:18:34.660]                 common <- intersect(names, old_names)
[13:18:34.660]                 added <- setdiff(names, old_names)
[13:18:34.660]                 removed <- setdiff(old_names, names)
[13:18:34.660]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:34.660]                   envs[common]]
[13:18:34.660]                 NAMES <- toupper(changed)
[13:18:34.660]                 args <- list()
[13:18:34.660]                 for (kk in seq_along(NAMES)) {
[13:18:34.660]                   name <- changed[[kk]]
[13:18:34.660]                   NAME <- NAMES[[kk]]
[13:18:34.660]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.660]                     next
[13:18:34.660]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:34.660]                 }
[13:18:34.660]                 NAMES <- toupper(added)
[13:18:34.660]                 for (kk in seq_along(NAMES)) {
[13:18:34.660]                   name <- added[[kk]]
[13:18:34.660]                   NAME <- NAMES[[kk]]
[13:18:34.660]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.660]                     next
[13:18:34.660]                   args[[name]] <- ""
[13:18:34.660]                 }
[13:18:34.660]                 NAMES <- toupper(removed)
[13:18:34.660]                 for (kk in seq_along(NAMES)) {
[13:18:34.660]                   name <- removed[[kk]]
[13:18:34.660]                   NAME <- NAMES[[kk]]
[13:18:34.660]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.660]                     next
[13:18:34.660]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:34.660]                 }
[13:18:34.660]                 if (length(args) > 0) 
[13:18:34.660]                   base::do.call(base::Sys.setenv, args = args)
[13:18:34.660]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:34.660]             }
[13:18:34.660]             else {
[13:18:34.660]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:34.660]             }
[13:18:34.660]             {
[13:18:34.660]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:34.660]                   0L) {
[13:18:34.660]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:34.660]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:34.660]                   base::options(opts)
[13:18:34.660]                 }
[13:18:34.660]                 {
[13:18:34.660]                   {
[13:18:34.660]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:34.660]                     NULL
[13:18:34.660]                   }
[13:18:34.660]                   options(future.plan = NULL)
[13:18:34.660]                   if (is.na(NA_character_)) 
[13:18:34.660]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:34.660]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:34.660]                   future::plan(list(function (..., workers = availableCores(), 
[13:18:34.660]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:18:34.660]                     envir = parent.frame()) 
[13:18:34.660]                   {
[13:18:34.660]                     if (is.function(workers)) 
[13:18:34.660]                       workers <- workers()
[13:18:34.660]                     workers <- structure(as.integer(workers), 
[13:18:34.660]                       class = class(workers))
[13:18:34.660]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:18:34.660]                       workers >= 1)
[13:18:34.660]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:18:34.660]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:18:34.660]                     }
[13:18:34.660]                     future <- MultisessionFuture(..., workers = workers, 
[13:18:34.660]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:18:34.660]                       envir = envir)
[13:18:34.660]                     if (!future$lazy) 
[13:18:34.660]                       future <- run(future)
[13:18:34.660]                     invisible(future)
[13:18:34.660]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:34.660]                 }
[13:18:34.660]             }
[13:18:34.660]         }
[13:18:34.660]     })
[13:18:34.660]     if (TRUE) {
[13:18:34.660]         base::sink(type = "output", split = FALSE)
[13:18:34.660]         if (TRUE) {
[13:18:34.660]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:34.660]         }
[13:18:34.660]         else {
[13:18:34.660]             ...future.result["stdout"] <- base::list(NULL)
[13:18:34.660]         }
[13:18:34.660]         base::close(...future.stdout)
[13:18:34.660]         ...future.stdout <- NULL
[13:18:34.660]     }
[13:18:34.660]     ...future.result$conditions <- ...future.conditions
[13:18:34.660]     ...future.result$finished <- base::Sys.time()
[13:18:34.660]     ...future.result
[13:18:34.660] }
[13:18:34.662] Exporting 7 global objects (2.15 KiB) to cluster node #1 ...
[13:18:34.663] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ...
[13:18:34.663] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ... DONE
[13:18:34.663] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ...
[13:18:34.663] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ... DONE
[13:18:34.664] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[13:18:34.664] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[13:18:34.664] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[13:18:34.664] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[13:18:34.665] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[13:18:34.665] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[13:18:34.665] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[13:18:34.665] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[13:18:34.665] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[13:18:34.666] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[13:18:34.666] Exporting 7 global objects (2.15 KiB) to cluster node #1 ... DONE
[13:18:34.666] MultisessionFuture started
[13:18:34.666] - Launch lazy future ... done
[13:18:34.667] run() for ‘MultisessionFuture’ ... done
[13:18:34.667] Created future:
[13:18:34.667] MultisessionFuture:
[13:18:34.667] Label: ‘future_replicate-1’
[13:18:34.667] Expression:
[13:18:34.667] {
[13:18:34.667]     do.call(function(...) {
[13:18:34.667]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.667]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:34.667]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.667]             on.exit(options(oopts), add = TRUE)
[13:18:34.667]         }
[13:18:34.667]         {
[13:18:34.667]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:34.667]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.667]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.667]                   envir = globalenv(), inherits = FALSE)
[13:18:34.667]                 ...future.FUN(...future.X_jj, ...)
[13:18:34.667]             })
[13:18:34.667]         }
[13:18:34.667]     }, args = future.call.arguments)
[13:18:34.667] }
[13:18:34.667] Lazy evaluation: FALSE
[13:18:34.667] Asynchronous evaluation: TRUE
[13:18:34.667] Local evaluation: TRUE
[13:18:34.667] Environment: 0x55df1e88cfd0
[13:18:34.667] Capture standard output: TRUE
[13:18:34.667] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:34.667] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[13:18:34.667] Packages: <none>
[13:18:34.667] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:34.667] Resolved: FALSE
[13:18:34.667] Value: <not collected>
[13:18:34.667] Conditions captured: <none>
[13:18:34.667] Early signaling: FALSE
[13:18:34.667] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:34.667] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:34.678] Chunk #1 of 2 ... DONE
[13:18:34.679] Chunk #2 of 2 ...
[13:18:34.679]  - Finding globals in 'X' for chunk #2 ...
[13:18:34.679] getGlobalsAndPackages() ...
[13:18:34.679] Searching for globals...
[13:18:34.679] 
[13:18:34.679] Searching for globals ... DONE
[13:18:34.679] - globals: [0] <none>
[13:18:34.680] getGlobalsAndPackages() ... DONE
[13:18:34.680]    + additional globals found: [n=0] 
[13:18:34.680]    + additional namespaces needed: [n=0] 
[13:18:34.680]  - Finding globals in 'X' for chunk #2 ... DONE
[13:18:34.680]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[13:18:34.680]  - seeds: [3] <seeds>
[13:18:34.680] getGlobalsAndPackages() ...
[13:18:34.680] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:34.680] Resolving globals: FALSE
[13:18:34.680] Tweak future expression to call with '...' arguments ...
[13:18:34.681] {
[13:18:34.681]     do.call(function(...) {
[13:18:34.681]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.681]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:34.681]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.681]             on.exit(options(oopts), add = TRUE)
[13:18:34.681]         }
[13:18:34.681]         {
[13:18:34.681]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:34.681]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.681]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.681]                   envir = globalenv(), inherits = FALSE)
[13:18:34.681]                 ...future.FUN(...future.X_jj, ...)
[13:18:34.681]             })
[13:18:34.681]         }
[13:18:34.681]     }, args = future.call.arguments)
[13:18:34.681] }
[13:18:34.681] Tweak future expression to call with '...' arguments ... DONE
[13:18:34.681] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:18:34.681] 
[13:18:34.681] getGlobalsAndPackages() ... DONE
[13:18:34.682] run() for ‘Future’ ...
[13:18:34.682] - state: ‘created’
[13:18:34.682] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:18:34.696] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:34.696] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:18:34.697]   - Field: ‘node’
[13:18:34.697]   - Field: ‘label’
[13:18:34.697]   - Field: ‘local’
[13:18:34.697]   - Field: ‘owner’
[13:18:34.697]   - Field: ‘envir’
[13:18:34.697]   - Field: ‘workers’
[13:18:34.697]   - Field: ‘packages’
[13:18:34.697]   - Field: ‘gc’
[13:18:34.697]   - Field: ‘conditions’
[13:18:34.697]   - Field: ‘persistent’
[13:18:34.698]   - Field: ‘expr’
[13:18:34.698]   - Field: ‘uuid’
[13:18:34.698]   - Field: ‘seed’
[13:18:34.698]   - Field: ‘version’
[13:18:34.698]   - Field: ‘result’
[13:18:34.698]   - Field: ‘asynchronous’
[13:18:34.698]   - Field: ‘calls’
[13:18:34.698]   - Field: ‘globals’
[13:18:34.698]   - Field: ‘stdout’
[13:18:34.698]   - Field: ‘earlySignal’
[13:18:34.699]   - Field: ‘lazy’
[13:18:34.699]   - Field: ‘state’
[13:18:34.699] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:18:34.699] - Launch lazy future ...
[13:18:34.699] Packages needed by the future expression (n = 0): <none>
[13:18:34.699] Packages needed by future strategies (n = 0): <none>
[13:18:34.700] {
[13:18:34.700]     {
[13:18:34.700]         {
[13:18:34.700]             ...future.startTime <- base::Sys.time()
[13:18:34.700]             {
[13:18:34.700]                 {
[13:18:34.700]                   {
[13:18:34.700]                     {
[13:18:34.700]                       base::local({
[13:18:34.700]                         has_future <- base::requireNamespace("future", 
[13:18:34.700]                           quietly = TRUE)
[13:18:34.700]                         if (has_future) {
[13:18:34.700]                           ns <- base::getNamespace("future")
[13:18:34.700]                           version <- ns[[".package"]][["version"]]
[13:18:34.700]                           if (is.null(version)) 
[13:18:34.700]                             version <- utils::packageVersion("future")
[13:18:34.700]                         }
[13:18:34.700]                         else {
[13:18:34.700]                           version <- NULL
[13:18:34.700]                         }
[13:18:34.700]                         if (!has_future || version < "1.8.0") {
[13:18:34.700]                           info <- base::c(r_version = base::gsub("R version ", 
[13:18:34.700]                             "", base::R.version$version.string), 
[13:18:34.700]                             platform = base::sprintf("%s (%s-bit)", 
[13:18:34.700]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:18:34.700]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:18:34.700]                               "release", "version")], collapse = " "), 
[13:18:34.700]                             hostname = base::Sys.info()[["nodename"]])
[13:18:34.700]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:18:34.700]                             info)
[13:18:34.700]                           info <- base::paste(info, collapse = "; ")
[13:18:34.700]                           if (!has_future) {
[13:18:34.700]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:18:34.700]                               info)
[13:18:34.700]                           }
[13:18:34.700]                           else {
[13:18:34.700]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:18:34.700]                               info, version)
[13:18:34.700]                           }
[13:18:34.700]                           base::stop(msg)
[13:18:34.700]                         }
[13:18:34.700]                       })
[13:18:34.700]                     }
[13:18:34.700]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:18:34.700]                     base::options(mc.cores = 1L)
[13:18:34.700]                   }
[13:18:34.700]                   options(future.plan = NULL)
[13:18:34.700]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:18:34.700]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:18:34.700]                 }
[13:18:34.700]                 ...future.workdir <- getwd()
[13:18:34.700]             }
[13:18:34.700]             ...future.oldOptions <- base::as.list(base::.Options)
[13:18:34.700]             ...future.oldEnvVars <- base::Sys.getenv()
[13:18:34.700]         }
[13:18:34.700]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:18:34.700]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[13:18:34.700]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:18:34.700]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:18:34.700]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:18:34.700]             future.stdout.windows.reencode = NULL, width = 80L)
[13:18:34.700]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:18:34.700]             base::names(...future.oldOptions))
[13:18:34.700]     }
[13:18:34.700]     if (FALSE) {
[13:18:34.700]     }
[13:18:34.700]     else {
[13:18:34.700]         if (TRUE) {
[13:18:34.700]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:18:34.700]                 open = "w")
[13:18:34.700]         }
[13:18:34.700]         else {
[13:18:34.700]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:18:34.700]                 windows = "NUL", "/dev/null"), open = "w")
[13:18:34.700]         }
[13:18:34.700]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:18:34.700]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:18:34.700]             base::sink(type = "output", split = FALSE)
[13:18:34.700]             base::close(...future.stdout)
[13:18:34.700]         }, add = TRUE)
[13:18:34.700]     }
[13:18:34.700]     ...future.frame <- base::sys.nframe()
[13:18:34.700]     ...future.conditions <- base::list()
[13:18:34.700]     ...future.rng <- base::globalenv()$.Random.seed
[13:18:34.700]     if (FALSE) {
[13:18:34.700]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:18:34.700]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:18:34.700]     }
[13:18:34.700]     ...future.result <- base::tryCatch({
[13:18:34.700]         base::withCallingHandlers({
[13:18:34.700]             ...future.value <- base::withVisible(base::local({
[13:18:34.700]                 ...future.makeSendCondition <- local({
[13:18:34.700]                   sendCondition <- NULL
[13:18:34.700]                   function(frame = 1L) {
[13:18:34.700]                     if (is.function(sendCondition)) 
[13:18:34.700]                       return(sendCondition)
[13:18:34.700]                     ns <- getNamespace("parallel")
[13:18:34.700]                     if (exists("sendData", mode = "function", 
[13:18:34.700]                       envir = ns)) {
[13:18:34.700]                       parallel_sendData <- get("sendData", mode = "function", 
[13:18:34.700]                         envir = ns)
[13:18:34.700]                       envir <- sys.frame(frame)
[13:18:34.700]                       master <- NULL
[13:18:34.700]                       while (!identical(envir, .GlobalEnv) && 
[13:18:34.700]                         !identical(envir, emptyenv())) {
[13:18:34.700]                         if (exists("master", mode = "list", envir = envir, 
[13:18:34.700]                           inherits = FALSE)) {
[13:18:34.700]                           master <- get("master", mode = "list", 
[13:18:34.700]                             envir = envir, inherits = FALSE)
[13:18:34.700]                           if (inherits(master, c("SOCKnode", 
[13:18:34.700]                             "SOCK0node"))) {
[13:18:34.700]                             sendCondition <<- function(cond) {
[13:18:34.700]                               data <- list(type = "VALUE", value = cond, 
[13:18:34.700]                                 success = TRUE)
[13:18:34.700]                               parallel_sendData(master, data)
[13:18:34.700]                             }
[13:18:34.700]                             return(sendCondition)
[13:18:34.700]                           }
[13:18:34.700]                         }
[13:18:34.700]                         frame <- frame + 1L
[13:18:34.700]                         envir <- sys.frame(frame)
[13:18:34.700]                       }
[13:18:34.700]                     }
[13:18:34.700]                     sendCondition <<- function(cond) NULL
[13:18:34.700]                   }
[13:18:34.700]                 })
[13:18:34.700]                 withCallingHandlers({
[13:18:34.700]                   {
[13:18:34.700]                     do.call(function(...) {
[13:18:34.700]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.700]                       if (!identical(...future.globals.maxSize.org, 
[13:18:34.700]                         ...future.globals.maxSize)) {
[13:18:34.700]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.700]                         on.exit(options(oopts), add = TRUE)
[13:18:34.700]                       }
[13:18:34.700]                       {
[13:18:34.700]                         lapply(seq_along(...future.elements_ii), 
[13:18:34.700]                           FUN = function(jj) {
[13:18:34.700]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.700]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.700]                               envir = globalenv(), inherits = FALSE)
[13:18:34.700]                             ...future.FUN(...future.X_jj, ...)
[13:18:34.700]                           })
[13:18:34.700]                       }
[13:18:34.700]                     }, args = future.call.arguments)
[13:18:34.700]                   }
[13:18:34.700]                 }, immediateCondition = function(cond) {
[13:18:34.700]                   sendCondition <- ...future.makeSendCondition()
[13:18:34.700]                   sendCondition(cond)
[13:18:34.700]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.700]                   {
[13:18:34.700]                     inherits <- base::inherits
[13:18:34.700]                     invokeRestart <- base::invokeRestart
[13:18:34.700]                     is.null <- base::is.null
[13:18:34.700]                     muffled <- FALSE
[13:18:34.700]                     if (inherits(cond, "message")) {
[13:18:34.700]                       muffled <- grepl(pattern, "muffleMessage")
[13:18:34.700]                       if (muffled) 
[13:18:34.700]                         invokeRestart("muffleMessage")
[13:18:34.700]                     }
[13:18:34.700]                     else if (inherits(cond, "warning")) {
[13:18:34.700]                       muffled <- grepl(pattern, "muffleWarning")
[13:18:34.700]                       if (muffled) 
[13:18:34.700]                         invokeRestart("muffleWarning")
[13:18:34.700]                     }
[13:18:34.700]                     else if (inherits(cond, "condition")) {
[13:18:34.700]                       if (!is.null(pattern)) {
[13:18:34.700]                         computeRestarts <- base::computeRestarts
[13:18:34.700]                         grepl <- base::grepl
[13:18:34.700]                         restarts <- computeRestarts(cond)
[13:18:34.700]                         for (restart in restarts) {
[13:18:34.700]                           name <- restart$name
[13:18:34.700]                           if (is.null(name)) 
[13:18:34.700]                             next
[13:18:34.700]                           if (!grepl(pattern, name)) 
[13:18:34.700]                             next
[13:18:34.700]                           invokeRestart(restart)
[13:18:34.700]                           muffled <- TRUE
[13:18:34.700]                           break
[13:18:34.700]                         }
[13:18:34.700]                       }
[13:18:34.700]                     }
[13:18:34.700]                     invisible(muffled)
[13:18:34.700]                   }
[13:18:34.700]                   muffleCondition(cond)
[13:18:34.700]                 })
[13:18:34.700]             }))
[13:18:34.700]             future::FutureResult(value = ...future.value$value, 
[13:18:34.700]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:34.700]                   ...future.rng), globalenv = if (FALSE) 
[13:18:34.700]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:18:34.700]                     ...future.globalenv.names))
[13:18:34.700]                 else NULL, started = ...future.startTime, version = "1.8")
[13:18:34.700]         }, condition = base::local({
[13:18:34.700]             c <- base::c
[13:18:34.700]             inherits <- base::inherits
[13:18:34.700]             invokeRestart <- base::invokeRestart
[13:18:34.700]             length <- base::length
[13:18:34.700]             list <- base::list
[13:18:34.700]             seq.int <- base::seq.int
[13:18:34.700]             signalCondition <- base::signalCondition
[13:18:34.700]             sys.calls <- base::sys.calls
[13:18:34.700]             `[[` <- base::`[[`
[13:18:34.700]             `+` <- base::`+`
[13:18:34.700]             `<<-` <- base::`<<-`
[13:18:34.700]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:18:34.700]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:18:34.700]                   3L)]
[13:18:34.700]             }
[13:18:34.700]             function(cond) {
[13:18:34.700]                 is_error <- inherits(cond, "error")
[13:18:34.700]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:18:34.700]                   NULL)
[13:18:34.700]                 if (is_error) {
[13:18:34.700]                   sessionInformation <- function() {
[13:18:34.700]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:18:34.700]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:18:34.700]                       search = base::search(), system = base::Sys.info())
[13:18:34.700]                   }
[13:18:34.700]                   ...future.conditions[[length(...future.conditions) + 
[13:18:34.700]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:18:34.700]                     cond$call), session = sessionInformation(), 
[13:18:34.700]                     timestamp = base::Sys.time(), signaled = 0L)
[13:18:34.700]                   signalCondition(cond)
[13:18:34.700]                 }
[13:18:34.700]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:18:34.700]                 "immediateCondition"))) {
[13:18:34.700]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:18:34.700]                   ...future.conditions[[length(...future.conditions) + 
[13:18:34.700]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:18:34.700]                   if (TRUE && !signal) {
[13:18:34.700]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.700]                     {
[13:18:34.700]                       inherits <- base::inherits
[13:18:34.700]                       invokeRestart <- base::invokeRestart
[13:18:34.700]                       is.null <- base::is.null
[13:18:34.700]                       muffled <- FALSE
[13:18:34.700]                       if (inherits(cond, "message")) {
[13:18:34.700]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:34.700]                         if (muffled) 
[13:18:34.700]                           invokeRestart("muffleMessage")
[13:18:34.700]                       }
[13:18:34.700]                       else if (inherits(cond, "warning")) {
[13:18:34.700]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:34.700]                         if (muffled) 
[13:18:34.700]                           invokeRestart("muffleWarning")
[13:18:34.700]                       }
[13:18:34.700]                       else if (inherits(cond, "condition")) {
[13:18:34.700]                         if (!is.null(pattern)) {
[13:18:34.700]                           computeRestarts <- base::computeRestarts
[13:18:34.700]                           grepl <- base::grepl
[13:18:34.700]                           restarts <- computeRestarts(cond)
[13:18:34.700]                           for (restart in restarts) {
[13:18:34.700]                             name <- restart$name
[13:18:34.700]                             if (is.null(name)) 
[13:18:34.700]                               next
[13:18:34.700]                             if (!grepl(pattern, name)) 
[13:18:34.700]                               next
[13:18:34.700]                             invokeRestart(restart)
[13:18:34.700]                             muffled <- TRUE
[13:18:34.700]                             break
[13:18:34.700]                           }
[13:18:34.700]                         }
[13:18:34.700]                       }
[13:18:34.700]                       invisible(muffled)
[13:18:34.700]                     }
[13:18:34.700]                     muffleCondition(cond, pattern = "^muffle")
[13:18:34.700]                   }
[13:18:34.700]                 }
[13:18:34.700]                 else {
[13:18:34.700]                   if (TRUE) {
[13:18:34.700]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:18:34.700]                     {
[13:18:34.700]                       inherits <- base::inherits
[13:18:34.700]                       invokeRestart <- base::invokeRestart
[13:18:34.700]                       is.null <- base::is.null
[13:18:34.700]                       muffled <- FALSE
[13:18:34.700]                       if (inherits(cond, "message")) {
[13:18:34.700]                         muffled <- grepl(pattern, "muffleMessage")
[13:18:34.700]                         if (muffled) 
[13:18:34.700]                           invokeRestart("muffleMessage")
[13:18:34.700]                       }
[13:18:34.700]                       else if (inherits(cond, "warning")) {
[13:18:34.700]                         muffled <- grepl(pattern, "muffleWarning")
[13:18:34.700]                         if (muffled) 
[13:18:34.700]                           invokeRestart("muffleWarning")
[13:18:34.700]                       }
[13:18:34.700]                       else if (inherits(cond, "condition")) {
[13:18:34.700]                         if (!is.null(pattern)) {
[13:18:34.700]                           computeRestarts <- base::computeRestarts
[13:18:34.700]                           grepl <- base::grepl
[13:18:34.700]                           restarts <- computeRestarts(cond)
[13:18:34.700]                           for (restart in restarts) {
[13:18:34.700]                             name <- restart$name
[13:18:34.700]                             if (is.null(name)) 
[13:18:34.700]                               next
[13:18:34.700]                             if (!grepl(pattern, name)) 
[13:18:34.700]                               next
[13:18:34.700]                             invokeRestart(restart)
[13:18:34.700]                             muffled <- TRUE
[13:18:34.700]                             break
[13:18:34.700]                           }
[13:18:34.700]                         }
[13:18:34.700]                       }
[13:18:34.700]                       invisible(muffled)
[13:18:34.700]                     }
[13:18:34.700]                     muffleCondition(cond, pattern = "^muffle")
[13:18:34.700]                   }
[13:18:34.700]                 }
[13:18:34.700]             }
[13:18:34.700]         }))
[13:18:34.700]     }, error = function(ex) {
[13:18:34.700]         base::structure(base::list(value = NULL, visible = NULL, 
[13:18:34.700]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:18:34.700]                 ...future.rng), started = ...future.startTime, 
[13:18:34.700]             finished = Sys.time(), session_uuid = NA_character_, 
[13:18:34.700]             version = "1.8"), class = "FutureResult")
[13:18:34.700]     }, finally = {
[13:18:34.700]         if (!identical(...future.workdir, getwd())) 
[13:18:34.700]             setwd(...future.workdir)
[13:18:34.700]         {
[13:18:34.700]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:18:34.700]                 ...future.oldOptions$nwarnings <- NULL
[13:18:34.700]             }
[13:18:34.700]             base::options(...future.oldOptions)
[13:18:34.700]             if (.Platform$OS.type == "windows") {
[13:18:34.700]                 old_names <- names(...future.oldEnvVars)
[13:18:34.700]                 envs <- base::Sys.getenv()
[13:18:34.700]                 names <- names(envs)
[13:18:34.700]                 common <- intersect(names, old_names)
[13:18:34.700]                 added <- setdiff(names, old_names)
[13:18:34.700]                 removed <- setdiff(old_names, names)
[13:18:34.700]                 changed <- common[...future.oldEnvVars[common] != 
[13:18:34.700]                   envs[common]]
[13:18:34.700]                 NAMES <- toupper(changed)
[13:18:34.700]                 args <- list()
[13:18:34.700]                 for (kk in seq_along(NAMES)) {
[13:18:34.700]                   name <- changed[[kk]]
[13:18:34.700]                   NAME <- NAMES[[kk]]
[13:18:34.700]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.700]                     next
[13:18:34.700]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:34.700]                 }
[13:18:34.700]                 NAMES <- toupper(added)
[13:18:34.700]                 for (kk in seq_along(NAMES)) {
[13:18:34.700]                   name <- added[[kk]]
[13:18:34.700]                   NAME <- NAMES[[kk]]
[13:18:34.700]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.700]                     next
[13:18:34.700]                   args[[name]] <- ""
[13:18:34.700]                 }
[13:18:34.700]                 NAMES <- toupper(removed)
[13:18:34.700]                 for (kk in seq_along(NAMES)) {
[13:18:34.700]                   name <- removed[[kk]]
[13:18:34.700]                   NAME <- NAMES[[kk]]
[13:18:34.700]                   if (name != NAME && is.element(NAME, old_names)) 
[13:18:34.700]                     next
[13:18:34.700]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:18:34.700]                 }
[13:18:34.700]                 if (length(args) > 0) 
[13:18:34.700]                   base::do.call(base::Sys.setenv, args = args)
[13:18:34.700]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:18:34.700]             }
[13:18:34.700]             else {
[13:18:34.700]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:18:34.700]             }
[13:18:34.700]             {
[13:18:34.700]                 if (base::length(...future.futureOptionsAdded) > 
[13:18:34.700]                   0L) {
[13:18:34.700]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:18:34.700]                   base::names(opts) <- ...future.futureOptionsAdded
[13:18:34.700]                   base::options(opts)
[13:18:34.700]                 }
[13:18:34.700]                 {
[13:18:34.700]                   {
[13:18:34.700]                     base::options(mc.cores = ...future.mc.cores.old)
[13:18:34.700]                     NULL
[13:18:34.700]                   }
[13:18:34.700]                   options(future.plan = NULL)
[13:18:34.700]                   if (is.na(NA_character_)) 
[13:18:34.700]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:18:34.700]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:18:34.700]                   future::plan(list(function (..., workers = availableCores(), 
[13:18:34.700]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:18:34.700]                     envir = parent.frame()) 
[13:18:34.700]                   {
[13:18:34.700]                     if (is.function(workers)) 
[13:18:34.700]                       workers <- workers()
[13:18:34.700]                     workers <- structure(as.integer(workers), 
[13:18:34.700]                       class = class(workers))
[13:18:34.700]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:18:34.700]                       workers >= 1)
[13:18:34.700]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:18:34.700]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:18:34.700]                     }
[13:18:34.700]                     future <- MultisessionFuture(..., workers = workers, 
[13:18:34.700]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:18:34.700]                       envir = envir)
[13:18:34.700]                     if (!future$lazy) 
[13:18:34.700]                       future <- run(future)
[13:18:34.700]                     invisible(future)
[13:18:34.700]                   }), .cleanup = FALSE, .init = FALSE)
[13:18:34.700]                 }
[13:18:34.700]             }
[13:18:34.700]         }
[13:18:34.700]     })
[13:18:34.700]     if (TRUE) {
[13:18:34.700]         base::sink(type = "output", split = FALSE)
[13:18:34.700]         if (TRUE) {
[13:18:34.700]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:18:34.700]         }
[13:18:34.700]         else {
[13:18:34.700]             ...future.result["stdout"] <- base::list(NULL)
[13:18:34.700]         }
[13:18:34.700]         base::close(...future.stdout)
[13:18:34.700]         ...future.stdout <- NULL
[13:18:34.700]     }
[13:18:34.700]     ...future.result$conditions <- ...future.conditions
[13:18:34.700]     ...future.result$finished <- base::Sys.time()
[13:18:34.700]     ...future.result
[13:18:34.700] }
[13:18:34.702] Exporting 7 global objects (2.15 KiB) to cluster node #2 ...
[13:18:34.703] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ...
[13:18:34.703] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ... DONE
[13:18:34.703] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ...
[13:18:34.703] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ... DONE
[13:18:34.704] Exporting ‘x’ (56 bytes) to cluster node #2 ...
[13:18:34.704] Exporting ‘x’ (56 bytes) to cluster node #2 ... DONE
[13:18:34.704] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[13:18:34.705] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[13:18:34.705] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[13:18:34.705] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[13:18:34.705] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[13:18:34.705] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[13:18:34.706] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[13:18:34.706] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[13:18:34.706] Exporting 7 global objects (2.15 KiB) to cluster node #2 ... DONE
[13:18:34.707] MultisessionFuture started
[13:18:34.707] - Launch lazy future ... done
[13:18:34.707] run() for ‘MultisessionFuture’ ... done
[13:18:34.707] Created future:
[13:18:34.707] MultisessionFuture:
[13:18:34.707] Label: ‘future_replicate-2’
[13:18:34.707] Expression:
[13:18:34.707] {
[13:18:34.707]     do.call(function(...) {
[13:18:34.707]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:18:34.707]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:18:34.707]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:18:34.707]             on.exit(options(oopts), add = TRUE)
[13:18:34.707]         }
[13:18:34.707]         {
[13:18:34.707]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:18:34.707]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:18:34.707]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:18:34.707]                   envir = globalenv(), inherits = FALSE)
[13:18:34.707]                 ...future.FUN(...future.X_jj, ...)
[13:18:34.707]             })
[13:18:34.707]         }
[13:18:34.707]     }, args = future.call.arguments)
[13:18:34.707] }
[13:18:34.707] Lazy evaluation: FALSE
[13:18:34.707] Asynchronous evaluation: TRUE
[13:18:34.707] Local evaluation: TRUE
[13:18:34.707] Environment: 0x55df1e88cfd0
[13:18:34.707] Capture standard output: TRUE
[13:18:34.707] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:18:34.707] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[13:18:34.707] Packages: <none>
[13:18:34.707] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:18:34.707] Resolved: FALSE
[13:18:34.707] Value: <not collected>
[13:18:34.707] Conditions captured: <none>
[13:18:34.707] Early signaling: FALSE
[13:18:34.707] Owner process: 06b56f28-5861-882e-fef6-846c112f166c
[13:18:34.707] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:18:34.719] Chunk #2 of 2 ... DONE
[13:18:34.719] Launching 2 futures (chunks) ... DONE
[13:18:34.719] Resolving 2 futures (chunks) ...
[13:18:34.719] resolve() on list ...
[13:18:34.719]  recursive: 0
[13:18:34.719]  length: 2
[13:18:34.720] 
[13:18:34.720] receiveMessageFromWorker() for ClusterFuture ...
[13:18:34.720] - Validating connection of MultisessionFuture
[13:18:34.720] - received message: FutureResult
[13:18:34.720] - Received FutureResult
[13:18:34.721] - Erased future from FutureRegistry
[13:18:34.721] result() for ClusterFuture ...
[13:18:34.721] - result already collected: FutureResult
[13:18:34.721] result() for ClusterFuture ... done
[13:18:34.721] receiveMessageFromWorker() for ClusterFuture ... done
[13:18:34.721] Future #1
[13:18:34.721] result() for ClusterFuture ...
[13:18:34.721] - result already collected: FutureResult
[13:18:34.721] result() for ClusterFuture ... done
[13:18:34.721] result() for ClusterFuture ...
[13:18:34.722] - result already collected: FutureResult
[13:18:34.722] result() for ClusterFuture ... done
[13:18:34.722] signalConditionsASAP(MultisessionFuture, pos=1) ...
[13:18:34.722] - nx: 2
[13:18:34.722] - relay: TRUE
[13:18:34.722] - stdout: TRUE
[13:18:34.722] - signal: TRUE
[13:18:34.722] - resignal: FALSE
[13:18:34.722] - force: TRUE
[13:18:34.722] - relayed: [n=2] FALSE, FALSE
[13:18:34.722] - queued futures: [n=2] FALSE, FALSE
[13:18:34.723]  - until=1
[13:18:34.723]  - relaying element #1
[13:18:34.723] result() for ClusterFuture ...
[13:18:34.723] - result already collected: FutureResult
[13:18:34.723] result() for ClusterFuture ... done
[13:18:34.723] result() for ClusterFuture ...
[13:18:34.723] - result already collected: FutureResult
[13:18:34.723] result() for ClusterFuture ... done
[13:18:34.723] result() for ClusterFuture ...
[13:18:34.723] - result already collected: FutureResult
[13:18:34.723] result() for ClusterFuture ... done
[13:18:34.724] result() for ClusterFuture ...
[13:18:34.724] - result already collected: FutureResult
[13:18:34.724] result() for ClusterFuture ... done
[13:18:34.724] - relayed: [n=2] TRUE, FALSE
[13:18:34.724] - queued futures: [n=2] TRUE, FALSE
[13:18:34.724] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[13:18:34.724]  length: 1 (resolved future 1)
[13:18:34.766] receiveMessageFromWorker() for ClusterFuture ...
[13:18:34.766] - Validating connection of MultisessionFuture
[13:18:34.766] - received message: FutureResult
[13:18:34.767] - Received FutureResult
[13:18:34.767] - Erased future from FutureRegistry
[13:18:34.767] result() for ClusterFuture ...
[13:18:34.767] - result already collected: FutureResult
[13:18:34.767] result() for ClusterFuture ... done
[13:18:34.767] receiveMessageFromWorker() for ClusterFuture ... done
[13:18:34.767] Future #2
[13:18:34.767] result() for ClusterFuture ...
[13:18:34.767] - result already collected: FutureResult
[13:18:34.767] result() for ClusterFuture ... done
[13:18:34.768] result() for ClusterFuture ...
[13:18:34.768] - result already collected: FutureResult
[13:18:34.768] result() for ClusterFuture ... done
[13:18:34.768] signalConditionsASAP(MultisessionFuture, pos=2) ...
[13:18:34.768] - nx: 2
[13:18:34.768] - relay: TRUE
[13:18:34.768] - stdout: TRUE
[13:18:34.768] - signal: TRUE
[13:18:34.768] - resignal: FALSE
[13:18:34.768] - force: TRUE
[13:18:34.768] - relayed: [n=2] TRUE, FALSE
[13:18:34.768] - queued futures: [n=2] TRUE, FALSE
[13:18:34.769]  - until=2
[13:18:34.769]  - relaying element #2
[13:18:34.769] result() for ClusterFuture ...
[13:18:34.769] - result already collected: FutureResult
[13:18:34.769] result() for ClusterFuture ... done
[13:18:34.769] result() for ClusterFuture ...
[13:18:34.769] - result already collected: FutureResult
[13:18:34.769] result() for ClusterFuture ... done
[13:18:34.769] result() for ClusterFuture ...
[13:18:34.770] - result already collected: FutureResult
[13:18:34.770] result() for ClusterFuture ... done
[13:18:34.770] result() for ClusterFuture ...
[13:18:34.770] - result already collected: FutureResult
[13:18:34.770] result() for ClusterFuture ... done
[13:18:34.770] - relayed: [n=2] TRUE, TRUE
[13:18:34.770] - queued futures: [n=2] TRUE, TRUE
[13:18:34.770] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[13:18:34.770]  length: 0 (resolved future 2)
[13:18:34.770] Relaying remaining futures
[13:18:34.770] signalConditionsASAP(NULL, pos=0) ...
[13:18:34.771] - nx: 2
[13:18:34.771] - relay: TRUE
[13:18:34.771] - stdout: TRUE
[13:18:34.771] - signal: TRUE
[13:18:34.771] - resignal: FALSE
[13:18:34.771] - force: TRUE
[13:18:34.771] - relayed: [n=2] TRUE, TRUE
[13:18:34.771] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:18:34.771] - relayed: [n=2] TRUE, TRUE
[13:18:34.771] - queued futures: [n=2] TRUE, TRUE
[13:18:34.771] signalConditionsASAP(NULL, pos=0) ... done
[13:18:34.772] resolve() on list ... DONE
[13:18:34.772] result() for ClusterFuture ...
[13:18:34.772] - result already collected: FutureResult
[13:18:34.772] result() for ClusterFuture ... done
[13:18:34.772] result() for ClusterFuture ...
[13:18:34.772] - result already collected: FutureResult
[13:18:34.772] result() for ClusterFuture ... done
[13:18:34.772] result() for ClusterFuture ...
[13:18:34.772] - result already collected: FutureResult
[13:18:34.772] result() for ClusterFuture ... done
[13:18:34.772] result() for ClusterFuture ...
[13:18:34.773] - result already collected: FutureResult
[13:18:34.773] result() for ClusterFuture ... done
[13:18:34.773]  - Number of value chunks collected: 2
[13:18:34.773] Resolving 2 futures (chunks) ... DONE
[13:18:34.773] Reducing values from 2 chunks ...
[13:18:34.773]  - Number of values collected after concatenation: 5
[13:18:34.773]  - Number of values expected: 5
[13:18:34.773] Reducing values from 2 chunks ... DONE
[13:18:34.773] future_lapply() ... DONE
[13:18:34.774] plan(): Setting new future strategy stack:
[13:18:34.774] List of future strategies:
[13:18:34.774] 1. sequential:
[13:18:34.774]    - args: function (..., envir = parent.frame())
[13:18:34.774]    - tweaked: FALSE
[13:18:34.774]    - call: plan(sequential)
[13:18:34.775] plan(): nbrOfWorkers() = 1
*** strategy = ‘multisession’ ... done
> 
> message("*** future_replicate() ... DONE")
*** future_replicate() ... DONE
> 
> source("incl/end.R")
[13:18:34.776] plan(): Setting new future strategy stack:
[13:18:34.776] List of future strategies:
[13:18:34.776] 1. FutureStrategy:
[13:18:34.776]    - args: function (..., envir = parent.frame())
[13:18:34.776]    - tweaked: FALSE
[13:18:34.776]    - call: future::plan(oplan)
[13:18:34.776] plan(): nbrOfWorkers() = 1
> 
