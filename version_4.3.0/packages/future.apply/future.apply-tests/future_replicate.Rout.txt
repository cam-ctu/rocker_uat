
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[16:10:34.558] plan(): Setting new future strategy stack:
[16:10:34.559] List of future strategies:
[16:10:34.559] 1. sequential:
[16:10:34.559]    - args: function (..., envir = parent.frame())
[16:10:34.559]    - tweaked: FALSE
[16:10:34.559]    - call: future::plan("sequential")
[16:10:34.569] plan(): nbrOfWorkers() = 1
> 
> message("*** future_replicate() ...")
*** future_replicate() ...
> 
> for (strategy in supportedStrategies()) {
+   message(sprintf("*** strategy = %s ...", sQuote(strategy)))
+   plan(strategy)
+   
+   y0 <- replicate(5L, sample(10L, size = 1L))
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(length(y0) == length(y1))
+   
+   set.seed(0xBEEF)
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   set.seed(0xBEEF)
+   y2 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(all.equal(y2, y1))
+   
+   y3 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   y4 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   stopifnot(all.equal(y4, y3))
+   
+   
+   message("- example(replicate) ...")
+   
+   foo <- function(x = 1, y = 2) c(x, y)
+   bar0 <- function(n, x) replicate(n, foo(x = x))
+   y0 <- bar0(5, x = 3)
+   
+   bar1 <- function(n, x) future_replicate(n, foo(x = x))
+   y1 <- bar1(5, x = 3)
+   stopifnot(all.equal(y1, y0))
+   
+   plan(sequential)
+   message(sprintf("*** strategy = %s ... done", sQuote(strategy)))
+ } ## for (strategy in ...) 
*** strategy = ‘sequential’ ...
[16:10:34.594] plan(): Setting new future strategy stack:
[16:10:34.595] List of future strategies:
[16:10:34.595] 1. sequential:
[16:10:34.595]    - args: function (..., envir = parent.frame())
[16:10:34.595]    - tweaked: FALSE
[16:10:34.595]    - call: plan(strategy)
[16:10:34.605] plan(): nbrOfWorkers() = 1
[16:10:34.606] future_lapply() ...
[16:10:34.610] Generating random seeds ...
[16:10:34.610] Generating random seed streams for 5 elements ...
[16:10:34.610] Generating random seed streams for 5 elements ... DONE
[16:10:34.611] Generating random seeds ... DONE
[16:10:34.611] Will set RNG state on exit: 10403, 12, -170024685, -459850046, 163101044, -1711201929, 466547309, 2076212484, 1412618282, -868174443, -1672013265, 300640054, 2033014624, -997638749, 75364033, 1691782832, -683972146, 144538937, 1504899403, 1467683578, 1872921596, -1730550721, 533667093, -2131786196, 1568647938, -574195747, 2025382615, -216236610, -890161160, -1279282213, -697233863, -2125604984, -317446346, 1723864433, -891301981, -1522010382, 1022213700, -2051940089, -560523043, 937905620, 1188086010, -1334355899, 1680613535, -2085402074, -347373904, -856399021, 444993137, -181816416, -1003121858, -403965367, 18616059, 1796280010, -156610516, 1153050671, -1105979163, -1956712036, -1799611406, 1752573549, -323275865, 1591635406, 1084074792, -1218453205, -1051976887, 1193992280, 124474630, 1547501793, 757004403, 1227511010, 1245193300, 965052759, 390981965, -1304228636, 1525854410, -1026187979, 1045214095, -1104303978, 1256503360, -1785601789, -1369191135, -479896048, -1194152466, 1098523033, 1645473323, 736671514, 1578012124, 649589727, -1889078347, -2022240948, -969839710, 302695165, -2116609033, 1595491614, -1686067240, 1753200955, 1267601113, -1410915736, -1946549354, -370825455, -1430617917, -1249435438, -772209308, -1300514649, -697528835, 961261556, -1789404966, 405477925, 1389164351, -313183034, -293508784, -1280419469, -1907629167, 1863349696, -473452642, 494342505, -1400282725, 1624167594, -293252404, 977214351, 2133188549, 1764721532, 1014070226, 1194081101, -719091193, -1202759186, -1272499000, -1771037749, -1400517079, 157680760, -236338778, 9315265, 1413369939, 1953421058, 1569169972, 1172346807, 1890830253, 1197143236, -818972438, 62988117, -1689227025, -662915338, 2013962784, 20686819, -1918808959, -498890000, 1312047502, 1027518201, -557491061, -700398406, 1443848124, -2055856897, 1238200405, 869868396, 902699970, -1586869219, -1561252713, -88307202, 1708804536, 385893787, -2080642055, -159419576, -487498122, 1627838385, 1255221731, 1299480242, -1177111804, -818696121, 599349021, 258583956, 326193466, 426225029, -214129057, -993160986, 569955184, -1791888237, 2144039217, 1215879136, 806902910, -314716407, 390828347, 1484715274, 976415980, -1594074769, 889839269, 1925328988, -897734606, 309616429, 2115972583, 1734504718, -142043416, 1097447659, 1434302857, -34977512, -513876922, 1432183969, -684782797, -777653598, -1118287468, -679978985, -2077147123, 1861190948, 1053802762, 523991157, 503043023, -1433639722, -1074596736, 2065435331, 672486497, -163113776, 575555118, 2080946137, 460773355, 421826138, 657229852, -1334143713, -968092299, 1143219212, -31824414, -1693395267, -410521289, -2106108450, -702182632, 1336574587, 36352025, -1529321304, -140490154, 2008299217, 821343875, 1808362770, -192350044, -357877838, 866272752, 528246212, 1417689432, 1678642554, -77611600, 190260156, 458166356, -1333006398, -1816584160, 1192915132, 445422160, 581478370, -2100429208, -1801204148, -1730907908, 619427826, -507665152, 719102836, 805281800, 1295872442, 833871312, 443233260, 352209812, 1109547986, 675587936, -1824964276, 552939808, -1815900286, 973473512, -792766228, -395979204, -225856654, 36099696, 1540842532, 489615160, -1534928742, -258314544, 1985334460, 1091537556, 489415298, 143986880, -1327200964, 1120032912, 264525346, 281997832, -1460962036, 1345061532, 196326930, -2045093504, -1210918380, -881779160, -783261382, 1605544912, -1099903380, -218070220, -684809582, -1483791008, 1921424716, 1504113632, -1300082782, -1789476952, 210970508, -478475588, 169378674, -1621989136, 724341828, -635636392, 1303769146, 1613091696, 1754514492, 1680608020, 609818050, 70257888, 1953701756, 917743312, -677627230, 325071912, -1748033268, -1614685252, 1917824306, -1098709056, 1816282676, -964865080, -1553142598, 952246160, -1893137940, -1153211308, -915498350, -1349367008, -1248695860, -689110048, 1500434114, 892970536, -802570580, 1988718268, -660073998, 2011255088, -1991812956, 864082616, -1176991910, -1038279280, -1687097988, -907622124, 584996162, 1744106240, -27573316, 1466479440, -577647326, -556680888, -1027134452, -204053412, -1687976750, -1547619328, -1444694188, -275695128, 380273658, -1684266288, 710028588, -1030683404, -1875836014, 724456544, -2034497268, 1766834912, -131068574, -2085779800, -553607604, -752082052, 1916333874, -1478079888, 86262084, -1378748456, 1529238650, -848164304, -869452100, -807356588, -1168456126, 1996232608, 1248404668, -166223408, -1975668382, 1949691880, 1627886540, -1537693956, -1373453326, 54832256, 809339124, 1586733192, 669860154, -1452758192, 1775730796, 1366654100, -1151498926, 1578355424, 1065012428, -1328728928, -756894334, 920659176, -32242452, -606914500, 1606298738, -2034492304, -1729629660, 1139066424, 1146216986, -303018800, 896527932, -717793132, -365607806, 764003264, 417818940, 1494437520, 534713378, -1879474168, 1820009612, 1972067356, 1737875602, -1627792256, 271469588, 937793320, 1392590906, -1470195504, -1319464852, -1612839244, 1267518482, -172973088, -2138688564, -501212704, 279586850, 357739816, -1305644788, -1393733060, -1879545614, 820112624, -712360124, 420568152, -1480053190, -1872086800, 476530364, -776134124, 401077442, 504838752, -1895288452, -1731269424, 1712926754, 705238184, 594882956, -598474308, 1747815474, -544755904, 1136446132, 1962790216, -438782278, -1291109616, -1755166484, 2123082836, -363609326, 1357049248, -1728833588, -922260640, 345435330, 532193832, -505406036, -2092653764, 1044344690, -123088, -277119964, 2006457837, 1991375511, -694463136, 1833668926, -183518709, -1760412019, -1096375366, 1085258232, 213042593, -68560045, -16518540, 1458263042, -112429417, -81289119, 1758968998, -1003631452, -486060715, -1095899649, -946082664, 482859446, -2011962813, 751454085, -1561828318, 1244342032, -389778759, 1708615531, 707634780, 503475082, 1553138559, 568225481, 2013390686, -177882100, 1130920925, 346390247, -582254832, 1603980846, 1284043995, -852256323, -1790585046, 1890774984, -603421455, 591084131, 1420385892, 1079387538, -1903177113, 484018737, 704440182, 15273108, -281959771, -1327681617, 1513319528, -236650426, 1154295283, 2049093973, 658146098, -385444096, 1950270441, -1113153957, -425082708, 618809018, 689845359, -2117127, -2041576306, -417452708, -587760179, -1765326537, -612586560, -258931554, -301274773, 1645760749, -552261286, 72413720, -1466650751, 2128608563, -29035692, 1222518114, 1602287095, 604937793, 577329862, -1398805500, -1984304203, -779795297, -914083592, -238401322, 2138792291, 1440853285, 1048574658, -1844643920, 591801305, -36174517, 1434313660, -2143720470, -116413409, 1582328489, 649944638, 1443156780, 1162621, 41227207, 576242352, 117817550, 1270094331, -972473763, 864949642, -2048021080, -1506815215, 2031526403, 755561732, 670454066, 1736785799, -1851109935, 2106081110, -572039884, 1960211525, -774267761, 1983265288, -1755556314, -1788883245, -623099851, -618442862, -1458770080, 389651145, 1525624315, 2063792588, 236826714, 2125196623, -1767168999, 1229744686, -1496709060, -269304403, -1339376041, -1216311392, -736858882, -1519726645, -565450291, 1825172730, -1045160136, 1301687521, 1890410387, -1533676620, -373081918, 824409303, 436123937, -301297434, -990726684, 1768681749, 319686975, -1832561448, 1016118518, -7616765, -577077179, -303128478, 615016400, 367033593, 71890475, -545095268, -1868045878, 2082947775, 353088521, 767804702, -452376372, -1691468643, -1791549145, 874236752, 715109870, -1379208549, -397740803, -1502897174, -1569481592, 1998553649, -1905286250
[16:10:34.611] Number of chunks: 1
[16:10:34.612] getGlobalsAndPackagesXApply() ...
[16:10:34.612]  - future.globals: TRUE
[16:10:34.612] getGlobalsAndPackages() ...
[16:10:34.613] Searching for globals...
[16:10:34.615] - globals found: [2] ‘FUN’, ‘sample’
[16:10:34.615] Searching for globals ... DONE
[16:10:34.615] Resolving globals: FALSE
[16:10:34.616] The total size of the 1 globals is 616 bytes (616 bytes)
[16:10:34.616] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:10:34.616] - globals: [1] ‘FUN’
[16:10:34.617] 
[16:10:34.617] getGlobalsAndPackages() ... DONE
[16:10:34.617]  - globals found/used: [n=1] ‘FUN’
[16:10:34.617]  - needed namespaces: [n=0] 
[16:10:34.617] Finding globals ... DONE
[16:10:34.617]  - use_args: TRUE
[16:10:34.617]  - Getting '...' globals ...
[16:10:34.618] resolve() on list ...
[16:10:34.618]  recursive: 0
[16:10:34.618]  length: 1
[16:10:34.618]  elements: ‘...’
[16:10:34.619]  length: 0 (resolved future 1)
[16:10:34.619] resolve() on list ... DONE
[16:10:34.619]    - '...' content: [n=0] 
[16:10:34.619] List of 1
[16:10:34.619]  $ ...: list()
[16:10:34.619]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.619]  - attr(*, "where")=List of 1
[16:10:34.619]   ..$ ...:<environment: 0x55cf8eaefa38> 
[16:10:34.619]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.619]  - attr(*, "resolved")= logi TRUE
[16:10:34.619]  - attr(*, "total_size")= num NA
[16:10:34.625]  - Getting '...' globals ... DONE
[16:10:34.626] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:10:34.626] List of 2
[16:10:34.626]  $ ...future.FUN:function (...)  
[16:10:34.626]  $ ...          : list()
[16:10:34.626]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.626]  - attr(*, "where")=List of 2
[16:10:34.626]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:10:34.626]   ..$ ...          :<environment: 0x55cf8eaefa38> 
[16:10:34.626]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.626]  - attr(*, "resolved")= logi FALSE
[16:10:34.626]  - attr(*, "total_size")= num 616
[16:10:34.628] Packages to be attached in all futures: [n=0] 
[16:10:34.628] getGlobalsAndPackagesXApply() ... DONE
[16:10:34.629] Number of futures (= number of chunks): 1
[16:10:34.629] Launching 1 futures (chunks) ...
[16:10:34.629] Chunk #1 of 1 ...
[16:10:34.629]  - Finding globals in 'X' for chunk #1 ...
[16:10:34.629] getGlobalsAndPackages() ...
[16:10:34.629] Searching for globals...
[16:10:34.630] 
[16:10:34.630] Searching for globals ... DONE
[16:10:34.630] - globals: [0] <none>
[16:10:34.630] getGlobalsAndPackages() ... DONE
[16:10:34.630]    + additional globals found: [n=0] 
[16:10:34.630]    + additional namespaces needed: [n=0] 
[16:10:34.630]  - Finding globals in 'X' for chunk #1 ... DONE
[16:10:34.630]  - Adjusted option 'future.globals.maxSize': 524288000 -> 5 * 524288000 = 2621440000 (bytes)
[16:10:34.630]  - seeds: [5] <seeds>
[16:10:34.631] getGlobalsAndPackages() ...
[16:10:34.631] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:34.631] Resolving globals: FALSE
[16:10:34.631] Tweak future expression to call with '...' arguments ...
[16:10:34.631] {
[16:10:34.631]     do.call(function(...) {
[16:10:34.631]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.631]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:34.631]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.631]             on.exit(options(oopts), add = TRUE)
[16:10:34.631]         }
[16:10:34.631]         {
[16:10:34.631]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:34.631]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.631]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.631]                   envir = globalenv(), inherits = FALSE)
[16:10:34.631]                 ...future.FUN(...future.X_jj, ...)
[16:10:34.631]             })
[16:10:34.631]         }
[16:10:34.631]     }, args = future.call.arguments)
[16:10:34.631] }
[16:10:34.631] Tweak future expression to call with '...' arguments ... DONE
[16:10:34.632] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:34.632] 
[16:10:34.632] getGlobalsAndPackages() ... DONE
[16:10:34.633] run() for ‘Future’ ...
[16:10:34.633] - state: ‘created’
[16:10:34.633] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:10:34.633] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:10:34.633] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:10:34.634]   - Field: ‘label’
[16:10:34.634]   - Field: ‘local’
[16:10:34.634]   - Field: ‘owner’
[16:10:34.634]   - Field: ‘envir’
[16:10:34.634]   - Field: ‘packages’
[16:10:34.634]   - Field: ‘gc’
[16:10:34.634]   - Field: ‘conditions’
[16:10:34.634]   - Field: ‘expr’
[16:10:34.634]   - Field: ‘uuid’
[16:10:34.634]   - Field: ‘seed’
[16:10:34.634]   - Field: ‘version’
[16:10:34.635]   - Field: ‘result’
[16:10:34.635]   - Field: ‘asynchronous’
[16:10:34.635]   - Field: ‘calls’
[16:10:34.635]   - Field: ‘globals’
[16:10:34.635]   - Field: ‘stdout’
[16:10:34.635]   - Field: ‘earlySignal’
[16:10:34.635]   - Field: ‘lazy’
[16:10:34.635]   - Field: ‘state’
[16:10:34.635] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:10:34.635] - Launch lazy future ...
[16:10:34.636] Packages needed by the future expression (n = 0): <none>
[16:10:34.636] Packages needed by future strategies (n = 0): <none>
[16:10:34.637] {
[16:10:34.637]     {
[16:10:34.637]         {
[16:10:34.637]             ...future.startTime <- base::Sys.time()
[16:10:34.637]             {
[16:10:34.637]                 {
[16:10:34.637]                   {
[16:10:34.637]                     base::local({
[16:10:34.637]                       has_future <- base::requireNamespace("future", 
[16:10:34.637]                         quietly = TRUE)
[16:10:34.637]                       if (has_future) {
[16:10:34.637]                         ns <- base::getNamespace("future")
[16:10:34.637]                         version <- ns[[".package"]][["version"]]
[16:10:34.637]                         if (is.null(version)) 
[16:10:34.637]                           version <- utils::packageVersion("future")
[16:10:34.637]                       }
[16:10:34.637]                       else {
[16:10:34.637]                         version <- NULL
[16:10:34.637]                       }
[16:10:34.637]                       if (!has_future || version < "1.8.0") {
[16:10:34.637]                         info <- base::c(r_version = base::gsub("R version ", 
[16:10:34.637]                           "", base::R.version$version.string), 
[16:10:34.637]                           platform = base::sprintf("%s (%s-bit)", 
[16:10:34.637]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:34.637]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:34.637]                             "release", "version")], collapse = " "), 
[16:10:34.637]                           hostname = base::Sys.info()[["nodename"]])
[16:10:34.637]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:10:34.637]                           info)
[16:10:34.637]                         info <- base::paste(info, collapse = "; ")
[16:10:34.637]                         if (!has_future) {
[16:10:34.637]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:34.637]                             info)
[16:10:34.637]                         }
[16:10:34.637]                         else {
[16:10:34.637]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:34.637]                             info, version)
[16:10:34.637]                         }
[16:10:34.637]                         base::stop(msg)
[16:10:34.637]                       }
[16:10:34.637]                     })
[16:10:34.637]                   }
[16:10:34.637]                   options(future.plan = NULL)
[16:10:34.637]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:34.637]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:34.637]                 }
[16:10:34.637]                 ...future.workdir <- getwd()
[16:10:34.637]             }
[16:10:34.637]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:34.637]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:34.637]         }
[16:10:34.637]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:34.637]             future.globals.maxSize = 2621440000, future.globals.method = NULL, 
[16:10:34.637]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:34.637]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:34.637]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:34.637]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:34.637]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:34.637]             base::names(...future.oldOptions))
[16:10:34.637]     }
[16:10:34.637]     if (FALSE) {
[16:10:34.637]     }
[16:10:34.637]     else {
[16:10:34.637]         if (TRUE) {
[16:10:34.637]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:34.637]                 open = "w")
[16:10:34.637]         }
[16:10:34.637]         else {
[16:10:34.637]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:34.637]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:34.637]         }
[16:10:34.637]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:34.637]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:34.637]             base::sink(type = "output", split = FALSE)
[16:10:34.637]             base::close(...future.stdout)
[16:10:34.637]         }, add = TRUE)
[16:10:34.637]     }
[16:10:34.637]     ...future.frame <- base::sys.nframe()
[16:10:34.637]     ...future.conditions <- base::list()
[16:10:34.637]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:34.637]     if (FALSE) {
[16:10:34.637]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:34.637]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:34.637]     }
[16:10:34.637]     ...future.result <- base::tryCatch({
[16:10:34.637]         base::withCallingHandlers({
[16:10:34.637]             ...future.value <- base::withVisible(base::local({
[16:10:34.637]                 do.call(function(...) {
[16:10:34.637]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.637]                   if (!identical(...future.globals.maxSize.org, 
[16:10:34.637]                     ...future.globals.maxSize)) {
[16:10:34.637]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.637]                     on.exit(options(oopts), add = TRUE)
[16:10:34.637]                   }
[16:10:34.637]                   {
[16:10:34.637]                     lapply(seq_along(...future.elements_ii), 
[16:10:34.637]                       FUN = function(jj) {
[16:10:34.637]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.637]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.637]                           envir = globalenv(), inherits = FALSE)
[16:10:34.637]                         ...future.FUN(...future.X_jj, ...)
[16:10:34.637]                       })
[16:10:34.637]                   }
[16:10:34.637]                 }, args = future.call.arguments)
[16:10:34.637]             }))
[16:10:34.637]             future::FutureResult(value = ...future.value$value, 
[16:10:34.637]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:34.637]                   ...future.rng), globalenv = if (FALSE) 
[16:10:34.637]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:34.637]                     ...future.globalenv.names))
[16:10:34.637]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:34.637]         }, condition = base::local({
[16:10:34.637]             c <- base::c
[16:10:34.637]             inherits <- base::inherits
[16:10:34.637]             invokeRestart <- base::invokeRestart
[16:10:34.637]             length <- base::length
[16:10:34.637]             list <- base::list
[16:10:34.637]             seq.int <- base::seq.int
[16:10:34.637]             signalCondition <- base::signalCondition
[16:10:34.637]             sys.calls <- base::sys.calls
[16:10:34.637]             `[[` <- base::`[[`
[16:10:34.637]             `+` <- base::`+`
[16:10:34.637]             `<<-` <- base::`<<-`
[16:10:34.637]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:34.637]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:34.637]                   3L)]
[16:10:34.637]             }
[16:10:34.637]             function(cond) {
[16:10:34.637]                 is_error <- inherits(cond, "error")
[16:10:34.637]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:34.637]                   NULL)
[16:10:34.637]                 if (is_error) {
[16:10:34.637]                   sessionInformation <- function() {
[16:10:34.637]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:34.637]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:34.637]                       search = base::search(), system = base::Sys.info())
[16:10:34.637]                   }
[16:10:34.637]                   ...future.conditions[[length(...future.conditions) + 
[16:10:34.637]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:34.637]                     cond$call), session = sessionInformation(), 
[16:10:34.637]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:34.637]                   signalCondition(cond)
[16:10:34.637]                 }
[16:10:34.637]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:34.637]                 "immediateCondition"))) {
[16:10:34.637]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:34.637]                   ...future.conditions[[length(...future.conditions) + 
[16:10:34.637]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:34.637]                   if (TRUE && !signal) {
[16:10:34.637]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:34.637]                     {
[16:10:34.637]                       inherits <- base::inherits
[16:10:34.637]                       invokeRestart <- base::invokeRestart
[16:10:34.637]                       is.null <- base::is.null
[16:10:34.637]                       muffled <- FALSE
[16:10:34.637]                       if (inherits(cond, "message")) {
[16:10:34.637]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:34.637]                         if (muffled) 
[16:10:34.637]                           invokeRestart("muffleMessage")
[16:10:34.637]                       }
[16:10:34.637]                       else if (inherits(cond, "warning")) {
[16:10:34.637]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:34.637]                         if (muffled) 
[16:10:34.637]                           invokeRestart("muffleWarning")
[16:10:34.637]                       }
[16:10:34.637]                       else if (inherits(cond, "condition")) {
[16:10:34.637]                         if (!is.null(pattern)) {
[16:10:34.637]                           computeRestarts <- base::computeRestarts
[16:10:34.637]                           grepl <- base::grepl
[16:10:34.637]                           restarts <- computeRestarts(cond)
[16:10:34.637]                           for (restart in restarts) {
[16:10:34.637]                             name <- restart$name
[16:10:34.637]                             if (is.null(name)) 
[16:10:34.637]                               next
[16:10:34.637]                             if (!grepl(pattern, name)) 
[16:10:34.637]                               next
[16:10:34.637]                             invokeRestart(restart)
[16:10:34.637]                             muffled <- TRUE
[16:10:34.637]                             break
[16:10:34.637]                           }
[16:10:34.637]                         }
[16:10:34.637]                       }
[16:10:34.637]                       invisible(muffled)
[16:10:34.637]                     }
[16:10:34.637]                     muffleCondition(cond, pattern = "^muffle")
[16:10:34.637]                   }
[16:10:34.637]                 }
[16:10:34.637]                 else {
[16:10:34.637]                   if (TRUE) {
[16:10:34.637]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:34.637]                     {
[16:10:34.637]                       inherits <- base::inherits
[16:10:34.637]                       invokeRestart <- base::invokeRestart
[16:10:34.637]                       is.null <- base::is.null
[16:10:34.637]                       muffled <- FALSE
[16:10:34.637]                       if (inherits(cond, "message")) {
[16:10:34.637]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:34.637]                         if (muffled) 
[16:10:34.637]                           invokeRestart("muffleMessage")
[16:10:34.637]                       }
[16:10:34.637]                       else if (inherits(cond, "warning")) {
[16:10:34.637]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:34.637]                         if (muffled) 
[16:10:34.637]                           invokeRestart("muffleWarning")
[16:10:34.637]                       }
[16:10:34.637]                       else if (inherits(cond, "condition")) {
[16:10:34.637]                         if (!is.null(pattern)) {
[16:10:34.637]                           computeRestarts <- base::computeRestarts
[16:10:34.637]                           grepl <- base::grepl
[16:10:34.637]                           restarts <- computeRestarts(cond)
[16:10:34.637]                           for (restart in restarts) {
[16:10:34.637]                             name <- restart$name
[16:10:34.637]                             if (is.null(name)) 
[16:10:34.637]                               next
[16:10:34.637]                             if (!grepl(pattern, name)) 
[16:10:34.637]                               next
[16:10:34.637]                             invokeRestart(restart)
[16:10:34.637]                             muffled <- TRUE
[16:10:34.637]                             break
[16:10:34.637]                           }
[16:10:34.637]                         }
[16:10:34.637]                       }
[16:10:34.637]                       invisible(muffled)
[16:10:34.637]                     }
[16:10:34.637]                     muffleCondition(cond, pattern = "^muffle")
[16:10:34.637]                   }
[16:10:34.637]                 }
[16:10:34.637]             }
[16:10:34.637]         }))
[16:10:34.637]     }, error = function(ex) {
[16:10:34.637]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:34.637]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:34.637]                 ...future.rng), started = ...future.startTime, 
[16:10:34.637]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:34.637]             version = "1.8"), class = "FutureResult")
[16:10:34.637]     }, finally = {
[16:10:34.637]         if (!identical(...future.workdir, getwd())) 
[16:10:34.637]             setwd(...future.workdir)
[16:10:34.637]         {
[16:10:34.637]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:34.637]                 ...future.oldOptions$nwarnings <- NULL
[16:10:34.637]             }
[16:10:34.637]             base::options(...future.oldOptions)
[16:10:34.637]             if (.Platform$OS.type == "windows") {
[16:10:34.637]                 old_names <- names(...future.oldEnvVars)
[16:10:34.637]                 envs <- base::Sys.getenv()
[16:10:34.637]                 names <- names(envs)
[16:10:34.637]                 common <- intersect(names, old_names)
[16:10:34.637]                 added <- setdiff(names, old_names)
[16:10:34.637]                 removed <- setdiff(old_names, names)
[16:10:34.637]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:34.637]                   envs[common]]
[16:10:34.637]                 NAMES <- toupper(changed)
[16:10:34.637]                 args <- list()
[16:10:34.637]                 for (kk in seq_along(NAMES)) {
[16:10:34.637]                   name <- changed[[kk]]
[16:10:34.637]                   NAME <- NAMES[[kk]]
[16:10:34.637]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.637]                     next
[16:10:34.637]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:34.637]                 }
[16:10:34.637]                 NAMES <- toupper(added)
[16:10:34.637]                 for (kk in seq_along(NAMES)) {
[16:10:34.637]                   name <- added[[kk]]
[16:10:34.637]                   NAME <- NAMES[[kk]]
[16:10:34.637]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.637]                     next
[16:10:34.637]                   args[[name]] <- ""
[16:10:34.637]                 }
[16:10:34.637]                 NAMES <- toupper(removed)
[16:10:34.637]                 for (kk in seq_along(NAMES)) {
[16:10:34.637]                   name <- removed[[kk]]
[16:10:34.637]                   NAME <- NAMES[[kk]]
[16:10:34.637]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.637]                     next
[16:10:34.637]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:34.637]                 }
[16:10:34.637]                 if (length(args) > 0) 
[16:10:34.637]                   base::do.call(base::Sys.setenv, args = args)
[16:10:34.637]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:34.637]             }
[16:10:34.637]             else {
[16:10:34.637]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:34.637]             }
[16:10:34.637]             {
[16:10:34.637]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:34.637]                   0L) {
[16:10:34.637]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:34.637]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:34.637]                   base::options(opts)
[16:10:34.637]                 }
[16:10:34.637]                 {
[16:10:34.637]                   {
[16:10:34.637]                     base::assign(".Random.seed", c(10403L, 12L, 
[16:10:34.637]                     -170024685L, -459850046L, 163101044L, -1711201929L, 
[16:10:34.637]                     466547309L, 2076212484L, 1412618282L, -868174443L, 
[16:10:34.637]                     -1672013265L, 300640054L, 2033014624L, -997638749L, 
[16:10:34.637]                     75364033L, 1691782832L, -683972146L, 144538937L, 
[16:10:34.637]                     1504899403L, 1467683578L, 1872921596L, -1730550721L, 
[16:10:34.637]                     533667093L, -2131786196L, 1568647938L, -574195747L, 
[16:10:34.637]                     2025382615L, -216236610L, -890161160L, -1279282213L, 
[16:10:34.637]                     -697233863L, -2125604984L, -317446346L, 1723864433L, 
[16:10:34.637]                     -891301981L, -1522010382L, 1022213700L, -2051940089L, 
[16:10:34.637]                     -560523043L, 937905620L, 1188086010L, -1334355899L, 
[16:10:34.637]                     1680613535L, -2085402074L, -347373904L, -856399021L, 
[16:10:34.637]                     444993137L, -181816416L, -1003121858L, -403965367L, 
[16:10:34.637]                     18616059L, 1796280010L, -156610516L, 1153050671L, 
[16:10:34.637]                     -1105979163L, -1956712036L, -1799611406L, 
[16:10:34.637]                     1752573549L, -323275865L, 1591635406L, 1084074792L, 
[16:10:34.637]                     -1218453205L, -1051976887L, 1193992280L, 
[16:10:34.637]                     124474630L, 1547501793L, 757004403L, 1227511010L, 
[16:10:34.637]                     1245193300L, 965052759L, 390981965L, -1304228636L, 
[16:10:34.637]                     1525854410L, -1026187979L, 1045214095L, -1104303978L, 
[16:10:34.637]                     1256503360L, -1785601789L, -1369191135L, 
[16:10:34.637]                     -479896048L, -1194152466L, 1098523033L, 1645473323L, 
[16:10:34.637]                     736671514L, 1578012124L, 649589727L, -1889078347L, 
[16:10:34.637]                     -2022240948L, -969839710L, 302695165L, -2116609033L, 
[16:10:34.637]                     1595491614L, -1686067240L, 1753200955L, 1267601113L, 
[16:10:34.637]                     -1410915736L, -1946549354L, -370825455L, 
[16:10:34.637]                     -1430617917L, -1249435438L, -772209308L, 
[16:10:34.637]                     -1300514649L, -697528835L, 961261556L, -1789404966L, 
[16:10:34.637]                     405477925L, 1389164351L, -313183034L, -293508784L, 
[16:10:34.637]                     -1280419469L, -1907629167L, 1863349696L, 
[16:10:34.637]                     -473452642L, 494342505L, -1400282725L, 1624167594L, 
[16:10:34.637]                     -293252404L, 977214351L, 2133188549L, 1764721532L, 
[16:10:34.637]                     1014070226L, 1194081101L, -719091193L, -1202759186L, 
[16:10:34.637]                     -1272499000L, -1771037749L, -1400517079L, 
[16:10:34.637]                     157680760L, -236338778L, 9315265L, 1413369939L, 
[16:10:34.637]                     1953421058L, 1569169972L, 1172346807L, 1890830253L, 
[16:10:34.637]                     1197143236L, -818972438L, 62988117L, -1689227025L, 
[16:10:34.637]                     -662915338L, 2013962784L, 20686819L, -1918808959L, 
[16:10:34.637]                     -498890000L, 1312047502L, 1027518201L, -557491061L, 
[16:10:34.637]                     -700398406L, 1443848124L, -2055856897L, 1238200405L, 
[16:10:34.637]                     869868396L, 902699970L, -1586869219L, -1561252713L, 
[16:10:34.637]                     -88307202L, 1708804536L, 385893787L, -2080642055L, 
[16:10:34.637]                     -159419576L, -487498122L, 1627838385L, 1255221731L, 
[16:10:34.637]                     1299480242L, -1177111804L, -818696121L, 599349021L, 
[16:10:34.637]                     258583956L, 326193466L, 426225029L, -214129057L, 
[16:10:34.637]                     -993160986L, 569955184L, -1791888237L, 2144039217L, 
[16:10:34.637]                     1215879136L, 806902910L, -314716407L, 390828347L, 
[16:10:34.637]                     1484715274L, 976415980L, -1594074769L, 889839269L, 
[16:10:34.637]                     1925328988L, -897734606L, 309616429L, 2115972583L, 
[16:10:34.637]                     1734504718L, -142043416L, 1097447659L, 1434302857L, 
[16:10:34.637]                     -34977512L, -513876922L, 1432183969L, -684782797L, 
[16:10:34.637]                     -777653598L, -1118287468L, -679978985L, -2077147123L, 
[16:10:34.637]                     1861190948L, 1053802762L, 523991157L, 503043023L, 
[16:10:34.637]                     -1433639722L, -1074596736L, 2065435331L, 
[16:10:34.637]                     672486497L, -163113776L, 575555118L, 2080946137L, 
[16:10:34.637]                     460773355L, 421826138L, 657229852L, -1334143713L, 
[16:10:34.637]                     -968092299L, 1143219212L, -31824414L, -1693395267L, 
[16:10:34.637]                     -410521289L, -2106108450L, -702182632L, 1336574587L, 
[16:10:34.637]                     36352025L, -1529321304L, -140490154L, 2008299217L, 
[16:10:34.637]                     821343875L, 1808362770L, -192350044L, -357877838L, 
[16:10:34.637]                     866272752L, 528246212L, 1417689432L, 1678642554L, 
[16:10:34.637]                     -77611600L, 190260156L, 458166356L, -1333006398L, 
[16:10:34.637]                     -1816584160L, 1192915132L, 445422160L, 581478370L, 
[16:10:34.637]                     -2100429208L, -1801204148L, -1730907908L, 
[16:10:34.637]                     619427826L, -507665152L, 719102836L, 805281800L, 
[16:10:34.637]                     1295872442L, 833871312L, 443233260L, 352209812L, 
[16:10:34.637]                     1109547986L, 675587936L, -1824964276L, 552939808L, 
[16:10:34.637]                     -1815900286L, 973473512L, -792766228L, -395979204L, 
[16:10:34.637]                     -225856654L, 36099696L, 1540842532L, 489615160L, 
[16:10:34.637]                     -1534928742L, -258314544L, 1985334460L, 1091537556L, 
[16:10:34.637]                     489415298L, 143986880L, -1327200964L, 1120032912L, 
[16:10:34.637]                     264525346L, 281997832L, -1460962036L, 1345061532L, 
[16:10:34.637]                     196326930L, -2045093504L, -1210918380L, -881779160L, 
[16:10:34.637]                     -783261382L, 1605544912L, -1099903380L, -218070220L, 
[16:10:34.637]                     -684809582L, -1483791008L, 1921424716L, 1504113632L, 
[16:10:34.637]                     -1300082782L, -1789476952L, 210970508L, -478475588L, 
[16:10:34.637]                     169378674L, -1621989136L, 724341828L, -635636392L, 
[16:10:34.637]                     1303769146L, 1613091696L, 1754514492L, 1680608020L, 
[16:10:34.637]                     609818050L, 70257888L, 1953701756L, 917743312L, 
[16:10:34.637]                     -677627230L, 325071912L, -1748033268L, -1614685252L, 
[16:10:34.637]                     1917824306L, -1098709056L, 1816282676L, -964865080L, 
[16:10:34.637]                     -1553142598L, 952246160L, -1893137940L, -1153211308L, 
[16:10:34.637]                     -915498350L, -1349367008L, -1248695860L, 
[16:10:34.637]                     -689110048L, 1500434114L, 892970536L, -802570580L, 
[16:10:34.637]                     1988718268L, -660073998L, 2011255088L, -1991812956L, 
[16:10:34.637]                     864082616L, -1176991910L, -1038279280L, -1687097988L, 
[16:10:34.637]                     -907622124L, 584996162L, 1744106240L, -27573316L, 
[16:10:34.637]                     1466479440L, -577647326L, -556680888L, -1027134452L, 
[16:10:34.637]                     -204053412L, -1687976750L, -1547619328L, 
[16:10:34.637]                     -1444694188L, -275695128L, 380273658L, -1684266288L, 
[16:10:34.637]                     710028588L, -1030683404L, -1875836014L, 724456544L, 
[16:10:34.637]                     -2034497268L, 1766834912L, -131068574L, -2085779800L, 
[16:10:34.637]                     -553607604L, -752082052L, 1916333874L, -1478079888L, 
[16:10:34.637]                     86262084L, -1378748456L, 1529238650L, -848164304L, 
[16:10:34.637]                     -869452100L, -807356588L, -1168456126L, 1996232608L, 
[16:10:34.637]                     1248404668L, -166223408L, -1975668382L, 1949691880L, 
[16:10:34.637]                     1627886540L, -1537693956L, -1373453326L, 
[16:10:34.637]                     54832256L, 809339124L, 1586733192L, 669860154L, 
[16:10:34.637]                     -1452758192L, 1775730796L, 1366654100L, -1151498926L, 
[16:10:34.637]                     1578355424L, 1065012428L, -1328728928L, -756894334L, 
[16:10:34.637]                     920659176L, -32242452L, -606914500L, 1606298738L, 
[16:10:34.637]                     -2034492304L, -1729629660L, 1139066424L, 
[16:10:34.637]                     1146216986L, -303018800L, 896527932L, -717793132L, 
[16:10:34.637]                     -365607806L, 764003264L, 417818940L, 1494437520L, 
[16:10:34.637]                     534713378L, -1879474168L, 1820009612L, 1972067356L, 
[16:10:34.637]                     1737875602L, -1627792256L, 271469588L, 937793320L, 
[16:10:34.637]                     1392590906L, -1470195504L, -1319464852L, 
[16:10:34.637]                     -1612839244L, 1267518482L, -172973088L, -2138688564L, 
[16:10:34.637]                     -501212704L, 279586850L, 357739816L, -1305644788L, 
[16:10:34.637]                     -1393733060L, -1879545614L, 820112624L, -712360124L, 
[16:10:34.637]                     420568152L, -1480053190L, -1872086800L, 476530364L, 
[16:10:34.637]                     -776134124L, 401077442L, 504838752L, -1895288452L, 
[16:10:34.637]                     -1731269424L, 1712926754L, 705238184L, 594882956L, 
[16:10:34.637]                     -598474308L, 1747815474L, -544755904L, 1136446132L, 
[16:10:34.637]                     1962790216L, -438782278L, -1291109616L, -1755166484L, 
[16:10:34.637]                     2123082836L, -363609326L, 1357049248L, -1728833588L, 
[16:10:34.637]                     -922260640L, 345435330L, 532193832L, -505406036L, 
[16:10:34.637]                     -2092653764L, 1044344690L, -123088L, -277119964L, 
[16:10:34.637]                     2006457837L, 1991375511L, -694463136L, 1833668926L, 
[16:10:34.637]                     -183518709L, -1760412019L, -1096375366L, 
[16:10:34.637]                     1085258232L, 213042593L, -68560045L, -16518540L, 
[16:10:34.637]                     1458263042L, -112429417L, -81289119L, 1758968998L, 
[16:10:34.637]                     -1003631452L, -486060715L, -1095899649L, 
[16:10:34.637]                     -946082664L, 482859446L, -2011962813L, 751454085L, 
[16:10:34.637]                     -1561828318L, 1244342032L, -389778759L, 1708615531L, 
[16:10:34.637]                     707634780L, 503475082L, 1553138559L, 568225481L, 
[16:10:34.637]                     2013390686L, -177882100L, 1130920925L, 346390247L, 
[16:10:34.637]                     -582254832L, 1603980846L, 1284043995L, -852256323L, 
[16:10:34.637]                     -1790585046L, 1890774984L, -603421455L, 591084131L, 
[16:10:34.637]                     1420385892L, 1079387538L, -1903177113L, 484018737L, 
[16:10:34.637]                     704440182L, 15273108L, -281959771L, -1327681617L, 
[16:10:34.637]                     1513319528L, -236650426L, 1154295283L, 2049093973L, 
[16:10:34.637]                     658146098L, -385444096L, 1950270441L, -1113153957L, 
[16:10:34.637]                     -425082708L, 618809018L, 689845359L, -2117127L, 
[16:10:34.637]                     -2041576306L, -417452708L, -587760179L, -1765326537L, 
[16:10:34.637]                     -612586560L, -258931554L, -301274773L, 1645760749L, 
[16:10:34.637]                     -552261286L, 72413720L, -1466650751L, 2128608563L, 
[16:10:34.637]                     -29035692L, 1222518114L, 1602287095L, 604937793L, 
[16:10:34.637]                     577329862L, -1398805500L, -1984304203L, -779795297L, 
[16:10:34.637]                     -914083592L, -238401322L, 2138792291L, 1440853285L, 
[16:10:34.637]                     1048574658L, -1844643920L, 591801305L, -36174517L, 
[16:10:34.637]                     1434313660L, -2143720470L, -116413409L, 1582328489L, 
[16:10:34.637]                     649944638L, 1443156780L, 1162621L, 41227207L, 
[16:10:34.637]                     576242352L, 117817550L, 1270094331L, -972473763L, 
[16:10:34.637]                     864949642L, -2048021080L, -1506815215L, 2031526403L, 
[16:10:34.637]                     755561732L, 670454066L, 1736785799L, -1851109935L, 
[16:10:34.637]                     2106081110L, -572039884L, 1960211525L, -774267761L, 
[16:10:34.637]                     1983265288L, -1755556314L, -1788883245L, 
[16:10:34.637]                     -623099851L, -618442862L, -1458770080L, 389651145L, 
[16:10:34.637]                     1525624315L, 2063792588L, 236826714L, 2125196623L, 
[16:10:34.637]                     -1767168999L, 1229744686L, -1496709060L, 
[16:10:34.637]                     -269304403L, -1339376041L, -1216311392L, 
[16:10:34.637]                     -736858882L, -1519726645L, -565450291L, 1825172730L, 
[16:10:34.637]                     -1045160136L, 1301687521L, 1890410387L, -1533676620L, 
[16:10:34.637]                     -373081918L, 824409303L, 436123937L, -301297434L, 
[16:10:34.637]                     -990726684L, 1768681749L, 319686975L, -1832561448L, 
[16:10:34.637]                     1016118518L, -7616765L, -577077179L, -303128478L, 
[16:10:34.637]                     615016400L, 367033593L, 71890475L, -545095268L, 
[16:10:34.637]                     -1868045878L, 2082947775L, 353088521L, 767804702L, 
[16:10:34.637]                     -452376372L, -1691468643L, -1791549145L, 
[16:10:34.637]                     874236752L, 715109870L, -1379208549L, -397740803L, 
[16:10:34.637]                     -1502897174L, -1569481592L, 1998553649L, 
[16:10:34.637]                     -1905286250L), envir = base::globalenv(), 
[16:10:34.637]                       inherits = FALSE)
[16:10:34.637]                     NULL
[16:10:34.637]                   }
[16:10:34.637]                   options(future.plan = NULL)
[16:10:34.637]                   if (is.na(NA_character_)) 
[16:10:34.637]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:34.637]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:34.637]                   future::plan(list(function (..., envir = parent.frame()) 
[16:10:34.637]                   {
[16:10:34.637]                     future <- SequentialFuture(..., envir = envir)
[16:10:34.637]                     if (!future$lazy) 
[16:10:34.637]                       future <- run(future)
[16:10:34.637]                     invisible(future)
[16:10:34.637]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:34.637]                 }
[16:10:34.637]             }
[16:10:34.637]         }
[16:10:34.637]     })
[16:10:34.637]     if (TRUE) {
[16:10:34.637]         base::sink(type = "output", split = FALSE)
[16:10:34.637]         if (TRUE) {
[16:10:34.637]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:34.637]         }
[16:10:34.637]         else {
[16:10:34.637]             ...future.result["stdout"] <- base::list(NULL)
[16:10:34.637]         }
[16:10:34.637]         base::close(...future.stdout)
[16:10:34.637]         ...future.stdout <- NULL
[16:10:34.637]     }
[16:10:34.637]     ...future.result$conditions <- ...future.conditions
[16:10:34.637]     ...future.result$finished <- base::Sys.time()
[16:10:34.637]     ...future.result
[16:10:34.637] }
[16:10:34.640] assign_globals() ...
[16:10:34.640] List of 5
[16:10:34.640]  $ ...future.FUN            :function (...)  
[16:10:34.640]  $ future.call.arguments    : list()
[16:10:34.640]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.640]  $ ...future.elements_ii    :List of 5
[16:10:34.640]   ..$ : int 0
[16:10:34.640]   ..$ : int 0
[16:10:34.640]   ..$ : int 0
[16:10:34.640]   ..$ : int 0
[16:10:34.640]   ..$ : int 0
[16:10:34.640]  $ ...future.seeds_ii       :List of 5
[16:10:34.640]   ..$ : int [1:7] 10407 1157644197 1025734756 -719949349 1582671241 1180232240 1138023147
[16:10:34.640]   ..$ : int [1:7] 10407 1949123093 1133516810 -1636828783 -1631577075 162611507 -2118342441
[16:10:34.640]   ..$ : int [1:7] 10407 2053742952 118987707 2097481497 1518795834 1025425104 -767439627
[16:10:34.640]   ..$ : int [1:7] 10407 90733088 959119075 -967781527 627804051 -1382080829 1753235023
[16:10:34.640]   ..$ : int [1:7] 10407 -2110720554 786485069 460446003 1303981814 1605239280 -249135687
[16:10:34.640]  $ ...future.globals.maxSize: NULL
[16:10:34.640]  - attr(*, "resolved")= logi FALSE
[16:10:34.640]  - attr(*, "total_size")= num 616
[16:10:34.640]  - attr(*, "where")=List of 5
[16:10:34.640]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:10:34.640]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:10:34.640]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:10:34.640]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:10:34.640]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:10:34.640]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.640]  - attr(*, "already-done")= logi TRUE
[16:10:34.647] - reassign environment for ‘...future.FUN’
[16:10:34.647] - copied ‘...future.FUN’ to environment
[16:10:34.647] - copied ‘future.call.arguments’ to environment
[16:10:34.647] - copied ‘...future.elements_ii’ to environment
[16:10:34.647] - copied ‘...future.seeds_ii’ to environment
[16:10:34.647] - copied ‘...future.globals.maxSize’ to environment
[16:10:34.647] assign_globals() ... done
[16:10:34.648] plan(): Setting new future strategy stack:
[16:10:34.648] List of future strategies:
[16:10:34.648] 1. sequential:
[16:10:34.648]    - args: function (..., envir = parent.frame())
[16:10:34.648]    - tweaked: FALSE
[16:10:34.648]    - call: NULL
[16:10:34.648] plan(): nbrOfWorkers() = 1
[16:10:34.649] plan(): Setting new future strategy stack:
[16:10:34.649] List of future strategies:
[16:10:34.649] 1. sequential:
[16:10:34.649]    - args: function (..., envir = parent.frame())
[16:10:34.649]    - tweaked: FALSE
[16:10:34.649]    - call: plan(strategy)
[16:10:34.650] plan(): nbrOfWorkers() = 1
[16:10:34.650] SequentialFuture started (and completed)
[16:10:34.650] - Launch lazy future ... done
[16:10:34.650] run() for ‘SequentialFuture’ ... done
[16:10:34.650] Created future:
[16:10:34.651] SequentialFuture:
[16:10:34.651] Label: ‘future_replicate-1’
[16:10:34.651] Expression:
[16:10:34.651] {
[16:10:34.651]     do.call(function(...) {
[16:10:34.651]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.651]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:34.651]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.651]             on.exit(options(oopts), add = TRUE)
[16:10:34.651]         }
[16:10:34.651]         {
[16:10:34.651]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:34.651]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.651]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.651]                   envir = globalenv(), inherits = FALSE)
[16:10:34.651]                 ...future.FUN(...future.X_jj, ...)
[16:10:34.651]             })
[16:10:34.651]         }
[16:10:34.651]     }, args = future.call.arguments)
[16:10:34.651] }
[16:10:34.651] Lazy evaluation: FALSE
[16:10:34.651] Asynchronous evaluation: FALSE
[16:10:34.651] Local evaluation: TRUE
[16:10:34.651] Environment: R_GlobalEnv
[16:10:34.651] Capture standard output: TRUE
[16:10:34.651] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:34.651] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:34.651] Packages: <none>
[16:10:34.651] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:34.651] Resolved: TRUE
[16:10:34.651] Value: 280 bytes of class ‘list’
[16:10:34.651] Early signaling: FALSE
[16:10:34.651] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:34.651] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:10:34.653] Chunk #1 of 1 ... DONE
[16:10:34.653] Launching 1 futures (chunks) ... DONE
[16:10:34.653] Resolving 1 futures (chunks) ...
[16:10:34.654] resolve() on list ...
[16:10:34.654]  recursive: 0
[16:10:34.654]  length: 1
[16:10:34.654] 
[16:10:34.654] resolved() for ‘SequentialFuture’ ...
[16:10:34.654] - state: ‘finished’
[16:10:34.654] - run: TRUE
[16:10:34.654] - result: ‘FutureResult’
[16:10:34.654] resolved() for ‘SequentialFuture’ ... done
[16:10:34.655] Future #1
[16:10:34.655] signalConditionsASAP(SequentialFuture, pos=1) ...
[16:10:34.655] - nx: 1
[16:10:34.655] - relay: TRUE
[16:10:34.655] - stdout: TRUE
[16:10:34.655] - signal: TRUE
[16:10:34.655] - resignal: FALSE
[16:10:34.656] - force: TRUE
[16:10:34.656] - relayed: [n=1] FALSE
[16:10:34.656] - queued futures: [n=1] FALSE
[16:10:34.656]  - until=1
[16:10:34.656]  - relaying element #1
[16:10:34.656] - relayed: [n=1] TRUE
[16:10:34.656] - queued futures: [n=1] TRUE
[16:10:34.656] signalConditionsASAP(SequentialFuture, pos=1) ... done
[16:10:34.656]  length: 0 (resolved future 1)
[16:10:34.657] Relaying remaining futures
[16:10:34.657] signalConditionsASAP(NULL, pos=0) ...
[16:10:34.657] - nx: 1
[16:10:34.657] - relay: TRUE
[16:10:34.657] - stdout: TRUE
[16:10:34.657] - signal: TRUE
[16:10:34.657] - resignal: FALSE
[16:10:34.657] - force: TRUE
[16:10:34.657] - relayed: [n=1] TRUE
[16:10:34.657] - queued futures: [n=1] TRUE
 - flush all
[16:10:34.657] - relayed: [n=1] TRUE
[16:10:34.657] - queued futures: [n=1] TRUE
[16:10:34.658] signalConditionsASAP(NULL, pos=0) ... done
[16:10:34.658] resolve() on list ... DONE
[16:10:34.658]  - Number of value chunks collected: 1
[16:10:34.658] Resolving 1 futures (chunks) ... DONE
[16:10:34.658] Reducing values from 1 chunks ...
[16:10:34.658]  - Number of values collected after concatenation: 5
[16:10:34.658]  - Number of values expected: 5
[16:10:34.658] Reducing values from 1 chunks ... DONE
[16:10:34.658] future_lapply() ... DONE
[16:10:34.659] future_lapply() ...
[16:10:34.659] Generating random seeds ...
[16:10:34.659] Generating random seed streams for 5 elements ...
[16:10:34.659] Generating random seed streams for 5 elements ... DONE
[16:10:34.659] Generating random seeds ... DONE
[16:10:34.659] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:10:34.660] Number of chunks: 1
[16:10:34.660] getGlobalsAndPackagesXApply() ...
[16:10:34.660]  - future.globals: TRUE
[16:10:34.660] getGlobalsAndPackages() ...
[16:10:34.660] Searching for globals...
[16:10:34.661] - globals found: [2] ‘FUN’, ‘sample’
[16:10:34.661] Searching for globals ... DONE
[16:10:34.661] Resolving globals: FALSE
[16:10:34.662] The total size of the 1 globals is 616 bytes (616 bytes)
[16:10:34.662] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:10:34.662] - globals: [1] ‘FUN’
[16:10:34.662] 
[16:10:34.662] getGlobalsAndPackages() ... DONE
[16:10:34.662]  - globals found/used: [n=1] ‘FUN’
[16:10:34.662]  - needed namespaces: [n=0] 
[16:10:34.663] Finding globals ... DONE
[16:10:34.663]  - use_args: TRUE
[16:10:34.663]  - Getting '...' globals ...
[16:10:34.663] resolve() on list ...
[16:10:34.663]  recursive: 0
[16:10:34.663]  length: 1
[16:10:34.663]  elements: ‘...’
[16:10:34.663]  length: 0 (resolved future 1)
[16:10:34.663] resolve() on list ... DONE
[16:10:34.664]    - '...' content: [n=0] 
[16:10:34.664] List of 1
[16:10:34.664]  $ ...: list()
[16:10:34.664]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.664]  - attr(*, "where")=List of 1
[16:10:34.664]   ..$ ...:<environment: 0x55cf8c7e0380> 
[16:10:34.664]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.664]  - attr(*, "resolved")= logi TRUE
[16:10:34.664]  - attr(*, "total_size")= num NA
[16:10:34.666]  - Getting '...' globals ... DONE
[16:10:34.666] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:10:34.666] List of 2
[16:10:34.666]  $ ...future.FUN:function (...)  
[16:10:34.666]  $ ...          : list()
[16:10:34.666]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.666]  - attr(*, "where")=List of 2
[16:10:34.666]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:10:34.666]   ..$ ...          :<environment: 0x55cf8c7e0380> 
[16:10:34.666]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.666]  - attr(*, "resolved")= logi FALSE
[16:10:34.666]  - attr(*, "total_size")= num 616
[16:10:34.669] Packages to be attached in all futures: [n=0] 
[16:10:34.669] getGlobalsAndPackagesXApply() ... DONE
[16:10:34.669] Number of futures (= number of chunks): 1
[16:10:34.669] Launching 1 futures (chunks) ...
[16:10:34.669] Chunk #1 of 1 ...
[16:10:34.669]  - Finding globals in 'X' for chunk #1 ...
[16:10:34.669] getGlobalsAndPackages() ...
[16:10:34.669] Searching for globals...
[16:10:34.670] 
[16:10:34.670] Searching for globals ... DONE
[16:10:34.670] - globals: [0] <none>
[16:10:34.670] getGlobalsAndPackages() ... DONE
[16:10:34.670]    + additional globals found: [n=0] 
[16:10:34.670]    + additional namespaces needed: [n=0] 
[16:10:34.670]  - Finding globals in 'X' for chunk #1 ... DONE
[16:10:34.670]  - Adjusted option 'future.globals.maxSize': 524288000 -> 5 * 524288000 = 2621440000 (bytes)
[16:10:34.670]  - seeds: [5] <seeds>
[16:10:34.670] getGlobalsAndPackages() ...
[16:10:34.671] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:34.671] Resolving globals: FALSE
[16:10:34.671] Tweak future expression to call with '...' arguments ...
[16:10:34.671] {
[16:10:34.671]     do.call(function(...) {
[16:10:34.671]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.671]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:34.671]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.671]             on.exit(options(oopts), add = TRUE)
[16:10:34.671]         }
[16:10:34.671]         {
[16:10:34.671]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:34.671]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.671]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.671]                   envir = globalenv(), inherits = FALSE)
[16:10:34.671]                 ...future.FUN(...future.X_jj, ...)
[16:10:34.671]             })
[16:10:34.671]         }
[16:10:34.671]     }, args = future.call.arguments)
[16:10:34.671] }
[16:10:34.671] Tweak future expression to call with '...' arguments ... DONE
[16:10:34.671] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:34.672] 
[16:10:34.672] getGlobalsAndPackages() ... DONE
[16:10:34.672] run() for ‘Future’ ...
[16:10:34.672] - state: ‘created’
[16:10:34.672] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:10:34.672] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:10:34.672] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:10:34.673]   - Field: ‘label’
[16:10:34.673]   - Field: ‘local’
[16:10:34.673]   - Field: ‘owner’
[16:10:34.673]   - Field: ‘envir’
[16:10:34.673]   - Field: ‘packages’
[16:10:34.673]   - Field: ‘gc’
[16:10:34.673]   - Field: ‘conditions’
[16:10:34.673]   - Field: ‘expr’
[16:10:34.673]   - Field: ‘uuid’
[16:10:34.673]   - Field: ‘seed’
[16:10:34.673]   - Field: ‘version’
[16:10:34.674]   - Field: ‘result’
[16:10:34.674]   - Field: ‘asynchronous’
[16:10:34.674]   - Field: ‘calls’
[16:10:34.674]   - Field: ‘globals’
[16:10:34.674]   - Field: ‘stdout’
[16:10:34.674]   - Field: ‘earlySignal’
[16:10:34.674]   - Field: ‘lazy’
[16:10:34.674]   - Field: ‘state’
[16:10:34.674] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:10:34.674] - Launch lazy future ...
[16:10:34.674] Packages needed by the future expression (n = 0): <none>
[16:10:34.675] Packages needed by future strategies (n = 0): <none>
[16:10:34.676] {
[16:10:34.676]     {
[16:10:34.676]         {
[16:10:34.676]             ...future.startTime <- base::Sys.time()
[16:10:34.676]             {
[16:10:34.676]                 {
[16:10:34.676]                   {
[16:10:34.676]                     base::local({
[16:10:34.676]                       has_future <- base::requireNamespace("future", 
[16:10:34.676]                         quietly = TRUE)
[16:10:34.676]                       if (has_future) {
[16:10:34.676]                         ns <- base::getNamespace("future")
[16:10:34.676]                         version <- ns[[".package"]][["version"]]
[16:10:34.676]                         if (is.null(version)) 
[16:10:34.676]                           version <- utils::packageVersion("future")
[16:10:34.676]                       }
[16:10:34.676]                       else {
[16:10:34.676]                         version <- NULL
[16:10:34.676]                       }
[16:10:34.676]                       if (!has_future || version < "1.8.0") {
[16:10:34.676]                         info <- base::c(r_version = base::gsub("R version ", 
[16:10:34.676]                           "", base::R.version$version.string), 
[16:10:34.676]                           platform = base::sprintf("%s (%s-bit)", 
[16:10:34.676]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:34.676]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:34.676]                             "release", "version")], collapse = " "), 
[16:10:34.676]                           hostname = base::Sys.info()[["nodename"]])
[16:10:34.676]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:10:34.676]                           info)
[16:10:34.676]                         info <- base::paste(info, collapse = "; ")
[16:10:34.676]                         if (!has_future) {
[16:10:34.676]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:34.676]                             info)
[16:10:34.676]                         }
[16:10:34.676]                         else {
[16:10:34.676]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:34.676]                             info, version)
[16:10:34.676]                         }
[16:10:34.676]                         base::stop(msg)
[16:10:34.676]                       }
[16:10:34.676]                     })
[16:10:34.676]                   }
[16:10:34.676]                   options(future.plan = NULL)
[16:10:34.676]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:34.676]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:34.676]                 }
[16:10:34.676]                 ...future.workdir <- getwd()
[16:10:34.676]             }
[16:10:34.676]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:34.676]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:34.676]         }
[16:10:34.676]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:34.676]             future.globals.maxSize = 2621440000, future.globals.method = NULL, 
[16:10:34.676]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:34.676]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:34.676]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:34.676]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:34.676]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:34.676]             base::names(...future.oldOptions))
[16:10:34.676]     }
[16:10:34.676]     if (FALSE) {
[16:10:34.676]     }
[16:10:34.676]     else {
[16:10:34.676]         if (TRUE) {
[16:10:34.676]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:34.676]                 open = "w")
[16:10:34.676]         }
[16:10:34.676]         else {
[16:10:34.676]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:34.676]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:34.676]         }
[16:10:34.676]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:34.676]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:34.676]             base::sink(type = "output", split = FALSE)
[16:10:34.676]             base::close(...future.stdout)
[16:10:34.676]         }, add = TRUE)
[16:10:34.676]     }
[16:10:34.676]     ...future.frame <- base::sys.nframe()
[16:10:34.676]     ...future.conditions <- base::list()
[16:10:34.676]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:34.676]     if (FALSE) {
[16:10:34.676]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:34.676]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:34.676]     }
[16:10:34.676]     ...future.result <- base::tryCatch({
[16:10:34.676]         base::withCallingHandlers({
[16:10:34.676]             ...future.value <- base::withVisible(base::local({
[16:10:34.676]                 do.call(function(...) {
[16:10:34.676]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.676]                   if (!identical(...future.globals.maxSize.org, 
[16:10:34.676]                     ...future.globals.maxSize)) {
[16:10:34.676]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.676]                     on.exit(options(oopts), add = TRUE)
[16:10:34.676]                   }
[16:10:34.676]                   {
[16:10:34.676]                     lapply(seq_along(...future.elements_ii), 
[16:10:34.676]                       FUN = function(jj) {
[16:10:34.676]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.676]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.676]                           envir = globalenv(), inherits = FALSE)
[16:10:34.676]                         ...future.FUN(...future.X_jj, ...)
[16:10:34.676]                       })
[16:10:34.676]                   }
[16:10:34.676]                 }, args = future.call.arguments)
[16:10:34.676]             }))
[16:10:34.676]             future::FutureResult(value = ...future.value$value, 
[16:10:34.676]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:34.676]                   ...future.rng), globalenv = if (FALSE) 
[16:10:34.676]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:34.676]                     ...future.globalenv.names))
[16:10:34.676]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:34.676]         }, condition = base::local({
[16:10:34.676]             c <- base::c
[16:10:34.676]             inherits <- base::inherits
[16:10:34.676]             invokeRestart <- base::invokeRestart
[16:10:34.676]             length <- base::length
[16:10:34.676]             list <- base::list
[16:10:34.676]             seq.int <- base::seq.int
[16:10:34.676]             signalCondition <- base::signalCondition
[16:10:34.676]             sys.calls <- base::sys.calls
[16:10:34.676]             `[[` <- base::`[[`
[16:10:34.676]             `+` <- base::`+`
[16:10:34.676]             `<<-` <- base::`<<-`
[16:10:34.676]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:34.676]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:34.676]                   3L)]
[16:10:34.676]             }
[16:10:34.676]             function(cond) {
[16:10:34.676]                 is_error <- inherits(cond, "error")
[16:10:34.676]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:34.676]                   NULL)
[16:10:34.676]                 if (is_error) {
[16:10:34.676]                   sessionInformation <- function() {
[16:10:34.676]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:34.676]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:34.676]                       search = base::search(), system = base::Sys.info())
[16:10:34.676]                   }
[16:10:34.676]                   ...future.conditions[[length(...future.conditions) + 
[16:10:34.676]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:34.676]                     cond$call), session = sessionInformation(), 
[16:10:34.676]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:34.676]                   signalCondition(cond)
[16:10:34.676]                 }
[16:10:34.676]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:34.676]                 "immediateCondition"))) {
[16:10:34.676]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:34.676]                   ...future.conditions[[length(...future.conditions) + 
[16:10:34.676]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:34.676]                   if (TRUE && !signal) {
[16:10:34.676]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:34.676]                     {
[16:10:34.676]                       inherits <- base::inherits
[16:10:34.676]                       invokeRestart <- base::invokeRestart
[16:10:34.676]                       is.null <- base::is.null
[16:10:34.676]                       muffled <- FALSE
[16:10:34.676]                       if (inherits(cond, "message")) {
[16:10:34.676]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:34.676]                         if (muffled) 
[16:10:34.676]                           invokeRestart("muffleMessage")
[16:10:34.676]                       }
[16:10:34.676]                       else if (inherits(cond, "warning")) {
[16:10:34.676]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:34.676]                         if (muffled) 
[16:10:34.676]                           invokeRestart("muffleWarning")
[16:10:34.676]                       }
[16:10:34.676]                       else if (inherits(cond, "condition")) {
[16:10:34.676]                         if (!is.null(pattern)) {
[16:10:34.676]                           computeRestarts <- base::computeRestarts
[16:10:34.676]                           grepl <- base::grepl
[16:10:34.676]                           restarts <- computeRestarts(cond)
[16:10:34.676]                           for (restart in restarts) {
[16:10:34.676]                             name <- restart$name
[16:10:34.676]                             if (is.null(name)) 
[16:10:34.676]                               next
[16:10:34.676]                             if (!grepl(pattern, name)) 
[16:10:34.676]                               next
[16:10:34.676]                             invokeRestart(restart)
[16:10:34.676]                             muffled <- TRUE
[16:10:34.676]                             break
[16:10:34.676]                           }
[16:10:34.676]                         }
[16:10:34.676]                       }
[16:10:34.676]                       invisible(muffled)
[16:10:34.676]                     }
[16:10:34.676]                     muffleCondition(cond, pattern = "^muffle")
[16:10:34.676]                   }
[16:10:34.676]                 }
[16:10:34.676]                 else {
[16:10:34.676]                   if (TRUE) {
[16:10:34.676]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:34.676]                     {
[16:10:34.676]                       inherits <- base::inherits
[16:10:34.676]                       invokeRestart <- base::invokeRestart
[16:10:34.676]                       is.null <- base::is.null
[16:10:34.676]                       muffled <- FALSE
[16:10:34.676]                       if (inherits(cond, "message")) {
[16:10:34.676]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:34.676]                         if (muffled) 
[16:10:34.676]                           invokeRestart("muffleMessage")
[16:10:34.676]                       }
[16:10:34.676]                       else if (inherits(cond, "warning")) {
[16:10:34.676]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:34.676]                         if (muffled) 
[16:10:34.676]                           invokeRestart("muffleWarning")
[16:10:34.676]                       }
[16:10:34.676]                       else if (inherits(cond, "condition")) {
[16:10:34.676]                         if (!is.null(pattern)) {
[16:10:34.676]                           computeRestarts <- base::computeRestarts
[16:10:34.676]                           grepl <- base::grepl
[16:10:34.676]                           restarts <- computeRestarts(cond)
[16:10:34.676]                           for (restart in restarts) {
[16:10:34.676]                             name <- restart$name
[16:10:34.676]                             if (is.null(name)) 
[16:10:34.676]                               next
[16:10:34.676]                             if (!grepl(pattern, name)) 
[16:10:34.676]                               next
[16:10:34.676]                             invokeRestart(restart)
[16:10:34.676]                             muffled <- TRUE
[16:10:34.676]                             break
[16:10:34.676]                           }
[16:10:34.676]                         }
[16:10:34.676]                       }
[16:10:34.676]                       invisible(muffled)
[16:10:34.676]                     }
[16:10:34.676]                     muffleCondition(cond, pattern = "^muffle")
[16:10:34.676]                   }
[16:10:34.676]                 }
[16:10:34.676]             }
[16:10:34.676]         }))
[16:10:34.676]     }, error = function(ex) {
[16:10:34.676]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:34.676]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:34.676]                 ...future.rng), started = ...future.startTime, 
[16:10:34.676]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:34.676]             version = "1.8"), class = "FutureResult")
[16:10:34.676]     }, finally = {
[16:10:34.676]         if (!identical(...future.workdir, getwd())) 
[16:10:34.676]             setwd(...future.workdir)
[16:10:34.676]         {
[16:10:34.676]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:34.676]                 ...future.oldOptions$nwarnings <- NULL
[16:10:34.676]             }
[16:10:34.676]             base::options(...future.oldOptions)
[16:10:34.676]             if (.Platform$OS.type == "windows") {
[16:10:34.676]                 old_names <- names(...future.oldEnvVars)
[16:10:34.676]                 envs <- base::Sys.getenv()
[16:10:34.676]                 names <- names(envs)
[16:10:34.676]                 common <- intersect(names, old_names)
[16:10:34.676]                 added <- setdiff(names, old_names)
[16:10:34.676]                 removed <- setdiff(old_names, names)
[16:10:34.676]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:34.676]                   envs[common]]
[16:10:34.676]                 NAMES <- toupper(changed)
[16:10:34.676]                 args <- list()
[16:10:34.676]                 for (kk in seq_along(NAMES)) {
[16:10:34.676]                   name <- changed[[kk]]
[16:10:34.676]                   NAME <- NAMES[[kk]]
[16:10:34.676]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.676]                     next
[16:10:34.676]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:34.676]                 }
[16:10:34.676]                 NAMES <- toupper(added)
[16:10:34.676]                 for (kk in seq_along(NAMES)) {
[16:10:34.676]                   name <- added[[kk]]
[16:10:34.676]                   NAME <- NAMES[[kk]]
[16:10:34.676]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.676]                     next
[16:10:34.676]                   args[[name]] <- ""
[16:10:34.676]                 }
[16:10:34.676]                 NAMES <- toupper(removed)
[16:10:34.676]                 for (kk in seq_along(NAMES)) {
[16:10:34.676]                   name <- removed[[kk]]
[16:10:34.676]                   NAME <- NAMES[[kk]]
[16:10:34.676]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.676]                     next
[16:10:34.676]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:34.676]                 }
[16:10:34.676]                 if (length(args) > 0) 
[16:10:34.676]                   base::do.call(base::Sys.setenv, args = args)
[16:10:34.676]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:34.676]             }
[16:10:34.676]             else {
[16:10:34.676]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:34.676]             }
[16:10:34.676]             {
[16:10:34.676]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:34.676]                   0L) {
[16:10:34.676]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:34.676]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:34.676]                   base::options(opts)
[16:10:34.676]                 }
[16:10:34.676]                 {
[16:10:34.676]                   {
[16:10:34.676]                     base::assign(".Random.seed", c(10403L, 2L, 
[16:10:34.676]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[16:10:34.676]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[16:10:34.676]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[16:10:34.676]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[16:10:34.676]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[16:10:34.676]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[16:10:34.676]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[16:10:34.676]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[16:10:34.676]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[16:10:34.676]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[16:10:34.676]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[16:10:34.676]                     -1512233174L, -1985955764L, -425390065L, 
[16:10:34.676]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[16:10:34.676]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[16:10:34.676]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[16:10:34.676]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[16:10:34.676]                     1818328109L, -1284085436L, -1981489558L, 
[16:10:34.676]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[16:10:34.676]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[16:10:34.676]                     -1718567047L, -793788661L, -1133789126L, 
[16:10:34.676]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[16:10:34.676]                     -1823521982L, -1345991523L, -1672661737L, 
[16:10:34.676]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[16:10:34.676]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[16:10:34.676]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[16:10:34.676]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[16:10:34.676]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[16:10:34.676]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[16:10:34.676]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[16:10:34.676]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[16:10:34.676]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[16:10:34.676]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[16:10:34.676]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[16:10:34.676]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[16:10:34.676]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[16:10:34.676]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[16:10:34.676]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[16:10:34.676]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[16:10:34.676]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[16:10:34.676]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[16:10:34.676]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[16:10:34.676]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[16:10:34.676]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[16:10:34.676]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[16:10:34.676]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[16:10:34.676]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[16:10:34.676]                     -1119334354L, -1521015416L, -2041922421L, 
[16:10:34.676]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[16:10:34.676]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[16:10:34.676]                     1232111981L, -1801753084L, -1608606422L, 
[16:10:34.676]                     -1172096363L, 1420874031L, -1210473418L, 
[16:10:34.676]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[16:10:34.676]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[16:10:34.676]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[16:10:34.676]                     679371266L, -591318819L, -104578089L, -172818754L, 
[16:10:34.676]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[16:10:34.676]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[16:10:34.676]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[16:10:34.676]                     -332493318L, -1978392251L, -1691039632L, 
[16:10:34.676]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[16:10:34.676]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[16:10:34.676]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[16:10:34.676]                     87560756L, -87565624L, 426345146L, -699970416L, 
[16:10:34.676]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[16:10:34.676]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[16:10:34.676]                     -1178330196L, -687617348L, -1701912078L, 
[16:10:34.676]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[16:10:34.676]                     -1345416048L, 1816730492L, -1570431212L, 
[16:10:34.676]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[16:10:34.676]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[16:10:34.676]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[16:10:34.676]                     -1493184262L, -1943836976L, -590788308L, 
[16:10:34.676]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[16:10:34.676]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[16:10:34.676]                     1274857340L, -1205842638L, -1938479504L, 
[16:10:34.676]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[16:10:34.676]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[16:10:34.676]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[16:10:34.676]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[16:10:34.676]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[16:10:34.676]                     -1460751252L, 1201879444L, -1459788718L, 
[16:10:34.676]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[16:10:34.676]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[16:10:34.676]                     -420945808L, -1997735900L, -1838404552L, 
[16:10:34.676]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[16:10:34.676]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[16:10:34.676]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[16:10:34.676]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[16:10:34.676]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[16:10:34.676]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[16:10:34.676]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[16:10:34.676]                     942193650L, 751741680L, 689743428L, -18455976L, 
[16:10:34.676]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[16:10:34.676]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[16:10:34.676]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[16:10:34.676]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[16:10:34.676]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[16:10:34.676]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[16:10:34.676]                     -1357570110L, 1896595240L, -2066952276L, 
[16:10:34.676]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[16:10:34.676]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[16:10:34.676]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[16:10:34.676]                     769655120L, 236357794L, 181393736L, -13334772L, 
[16:10:34.676]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[16:10:34.676]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[16:10:34.676]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[16:10:34.676]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[16:10:34.676]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[16:10:34.676]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[16:10:34.676]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[16:10:34.676]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[16:10:34.676]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[16:10:34.676]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[16:10:34.676]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[16:10:34.676]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[16:10:34.676]                     -1365842884L, -438961294L, -1851472272L, 
[16:10:34.676]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[16:10:34.676]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[16:10:34.676]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[16:10:34.676]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[16:10:34.676]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[16:10:34.676]                     -594809770L, -2146766621L, -2013964635L, 
[16:10:34.676]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[16:10:34.676]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[16:10:34.676]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[16:10:34.676]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[16:10:34.676]                     -1426021878L, -1285634264L, 1507547537L, 
[16:10:34.676]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[16:10:34.676]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[16:10:34.676]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[16:10:34.676]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[16:10:34.676]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[16:10:34.676]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[16:10:34.676]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[16:10:34.676]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[16:10:34.676]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[16:10:34.676]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[16:10:34.676]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[16:10:34.676]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[16:10:34.676]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[16:10:34.676]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[16:10:34.676]                     -1604604761L, 1421229008L, -1268333714L, 
[16:10:34.676]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[16:10:34.676]                     -2070476623L, -2099222749L, 1141171236L, 
[16:10:34.676]                     -146426158L, -1797385433L, -1129376399L, 
[16:10:34.676]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[16:10:34.676]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[16:10:34.676]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[16:10:34.676]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[16:10:34.676]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[16:10:34.676]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[16:10:34.676]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[16:10:34.676]                     -1092079724L, -1765622238L, -1882554057L, 
[16:10:34.676]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[16:10:34.676]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[16:10:34.676]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[16:10:34.676]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[16:10:34.676]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[16:10:34.676]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[16:10:34.676]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[16:10:34.676]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[16:10:34.676]                     865377681L, -1127426242L), envir = base::globalenv(), 
[16:10:34.676]                       inherits = FALSE)
[16:10:34.676]                     NULL
[16:10:34.676]                   }
[16:10:34.676]                   options(future.plan = NULL)
[16:10:34.676]                   if (is.na(NA_character_)) 
[16:10:34.676]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:34.676]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:34.676]                   future::plan(list(function (..., envir = parent.frame()) 
[16:10:34.676]                   {
[16:10:34.676]                     future <- SequentialFuture(..., envir = envir)
[16:10:34.676]                     if (!future$lazy) 
[16:10:34.676]                       future <- run(future)
[16:10:34.676]                     invisible(future)
[16:10:34.676]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:34.676]                 }
[16:10:34.676]             }
[16:10:34.676]         }
[16:10:34.676]     })
[16:10:34.676]     if (TRUE) {
[16:10:34.676]         base::sink(type = "output", split = FALSE)
[16:10:34.676]         if (TRUE) {
[16:10:34.676]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:34.676]         }
[16:10:34.676]         else {
[16:10:34.676]             ...future.result["stdout"] <- base::list(NULL)
[16:10:34.676]         }
[16:10:34.676]         base::close(...future.stdout)
[16:10:34.676]         ...future.stdout <- NULL
[16:10:34.676]     }
[16:10:34.676]     ...future.result$conditions <- ...future.conditions
[16:10:34.676]     ...future.result$finished <- base::Sys.time()
[16:10:34.676]     ...future.result
[16:10:34.676] }
[16:10:34.679] assign_globals() ...
[16:10:34.679] List of 5
[16:10:34.679]  $ ...future.FUN            :function (...)  
[16:10:34.679]  $ future.call.arguments    : list()
[16:10:34.679]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.679]  $ ...future.elements_ii    :List of 5
[16:10:34.679]   ..$ : int 0
[16:10:34.679]   ..$ : int 0
[16:10:34.679]   ..$ : int 0
[16:10:34.679]   ..$ : int 0
[16:10:34.679]   ..$ : int 0
[16:10:34.679]  $ ...future.seeds_ii       :List of 5
[16:10:34.679]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[16:10:34.679]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[16:10:34.679]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[16:10:34.679]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[16:10:34.679]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[16:10:34.679]  $ ...future.globals.maxSize: NULL
[16:10:34.679]  - attr(*, "resolved")= logi FALSE
[16:10:34.679]  - attr(*, "total_size")= num 616
[16:10:34.679]  - attr(*, "where")=List of 5
[16:10:34.679]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:10:34.679]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:10:34.679]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:10:34.679]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:10:34.679]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:10:34.679]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.679]  - attr(*, "already-done")= logi TRUE
[16:10:34.686] - reassign environment for ‘...future.FUN’
[16:10:34.686] - copied ‘...future.FUN’ to environment
[16:10:34.686] - copied ‘future.call.arguments’ to environment
[16:10:34.686] - copied ‘...future.elements_ii’ to environment
[16:10:34.686] - copied ‘...future.seeds_ii’ to environment
[16:10:34.686] - copied ‘...future.globals.maxSize’ to environment
[16:10:34.686] assign_globals() ... done
[16:10:34.686] plan(): Setting new future strategy stack:
[16:10:34.687] List of future strategies:
[16:10:34.687] 1. sequential:
[16:10:34.687]    - args: function (..., envir = parent.frame())
[16:10:34.687]    - tweaked: FALSE
[16:10:34.687]    - call: NULL
[16:10:34.687] plan(): nbrOfWorkers() = 1
[16:10:34.688] plan(): Setting new future strategy stack:
[16:10:34.688] List of future strategies:
[16:10:34.688] 1. sequential:
[16:10:34.688]    - args: function (..., envir = parent.frame())
[16:10:34.688]    - tweaked: FALSE
[16:10:34.688]    - call: plan(strategy)
[16:10:34.688] plan(): nbrOfWorkers() = 1
[16:10:34.688] SequentialFuture started (and completed)
[16:10:34.688] - Launch lazy future ... done
[16:10:34.689] run() for ‘SequentialFuture’ ... done
[16:10:34.689] Created future:
[16:10:34.689] SequentialFuture:
[16:10:34.689] Label: ‘future_replicate-1’
[16:10:34.689] Expression:
[16:10:34.689] {
[16:10:34.689]     do.call(function(...) {
[16:10:34.689]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.689]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:34.689]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.689]             on.exit(options(oopts), add = TRUE)
[16:10:34.689]         }
[16:10:34.689]         {
[16:10:34.689]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:34.689]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.689]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.689]                   envir = globalenv(), inherits = FALSE)
[16:10:34.689]                 ...future.FUN(...future.X_jj, ...)
[16:10:34.689]             })
[16:10:34.689]         }
[16:10:34.689]     }, args = future.call.arguments)
[16:10:34.689] }
[16:10:34.689] Lazy evaluation: FALSE
[16:10:34.689] Asynchronous evaluation: FALSE
[16:10:34.689] Local evaluation: TRUE
[16:10:34.689] Environment: R_GlobalEnv
[16:10:34.689] Capture standard output: TRUE
[16:10:34.689] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:34.689] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:34.689] Packages: <none>
[16:10:34.689] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:34.689] Resolved: TRUE
[16:10:34.689] Value: 280 bytes of class ‘list’
[16:10:34.689] Early signaling: FALSE
[16:10:34.689] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:34.689] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:10:34.690] Chunk #1 of 1 ... DONE
[16:10:34.690] Launching 1 futures (chunks) ... DONE
[16:10:34.690] Resolving 1 futures (chunks) ...
[16:10:34.690] resolve() on list ...
[16:10:34.690]  recursive: 0
[16:10:34.690]  length: 1
[16:10:34.690] 
[16:10:34.691] resolved() for ‘SequentialFuture’ ...
[16:10:34.691] - state: ‘finished’
[16:10:34.691] - run: TRUE
[16:10:34.691] - result: ‘FutureResult’
[16:10:34.691] resolved() for ‘SequentialFuture’ ... done
[16:10:34.691] Future #1
[16:10:34.691] signalConditionsASAP(SequentialFuture, pos=1) ...
[16:10:34.691] - nx: 1
[16:10:34.691] - relay: TRUE
[16:10:34.691] - stdout: TRUE
[16:10:34.691] - signal: TRUE
[16:10:34.692] - resignal: FALSE
[16:10:34.692] - force: TRUE
[16:10:34.692] - relayed: [n=1] FALSE
[16:10:34.692] - queued futures: [n=1] FALSE
[16:10:34.692]  - until=1
[16:10:34.692]  - relaying element #1
[16:10:34.692] - relayed: [n=1] TRUE
[16:10:34.692] - queued futures: [n=1] TRUE
[16:10:34.692] signalConditionsASAP(SequentialFuture, pos=1) ... done
[16:10:34.693]  length: 0 (resolved future 1)
[16:10:34.693] Relaying remaining futures
[16:10:34.693] signalConditionsASAP(NULL, pos=0) ...
[16:10:34.693] - nx: 1
[16:10:34.693] - relay: TRUE
[16:10:34.693] - stdout: TRUE
[16:10:34.693] - signal: TRUE
[16:10:34.693] - resignal: FALSE
[16:10:34.693] - force: TRUE
[16:10:34.693] - relayed: [n=1] TRUE
[16:10:34.693] - queued futures: [n=1] TRUE
 - flush all
[16:10:34.694] - relayed: [n=1] TRUE
[16:10:34.694] - queued futures: [n=1] TRUE
[16:10:34.694] signalConditionsASAP(NULL, pos=0) ... done
[16:10:34.694] resolve() on list ... DONE
[16:10:34.694]  - Number of value chunks collected: 1
[16:10:34.694] Resolving 1 futures (chunks) ... DONE
[16:10:34.694] Reducing values from 1 chunks ...
[16:10:34.694]  - Number of values collected after concatenation: 5
[16:10:34.694]  - Number of values expected: 5
[16:10:34.694] Reducing values from 1 chunks ... DONE
[16:10:34.695] future_lapply() ... DONE
[16:10:34.695] future_lapply() ...
[16:10:34.695] Generating random seeds ...
[16:10:34.695] Generating random seed streams for 5 elements ...
[16:10:34.695] Generating random seed streams for 5 elements ... DONE
[16:10:34.695] Generating random seeds ... DONE
[16:10:34.696] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:10:34.696] Number of chunks: 1
[16:10:34.696] getGlobalsAndPackagesXApply() ...
[16:10:34.696]  - future.globals: TRUE
[16:10:34.696] getGlobalsAndPackages() ...
[16:10:34.697] Searching for globals...
[16:10:34.698] - globals found: [2] ‘FUN’, ‘sample’
[16:10:34.698] Searching for globals ... DONE
[16:10:34.698] Resolving globals: FALSE
[16:10:34.698] The total size of the 1 globals is 616 bytes (616 bytes)
[16:10:34.699] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:10:34.699] - globals: [1] ‘FUN’
[16:10:34.699] 
[16:10:34.699] getGlobalsAndPackages() ... DONE
[16:10:34.699]  - globals found/used: [n=1] ‘FUN’
[16:10:34.699]  - needed namespaces: [n=0] 
[16:10:34.699] Finding globals ... DONE
[16:10:34.699]  - use_args: TRUE
[16:10:34.699]  - Getting '...' globals ...
[16:10:34.700] resolve() on list ...
[16:10:34.700]  recursive: 0
[16:10:34.700]  length: 1
[16:10:34.700]  elements: ‘...’
[16:10:34.700]  length: 0 (resolved future 1)
[16:10:34.700] resolve() on list ... DONE
[16:10:34.700]    - '...' content: [n=0] 
[16:10:34.700] List of 1
[16:10:34.700]  $ ...: list()
[16:10:34.700]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.700]  - attr(*, "where")=List of 1
[16:10:34.700]   ..$ ...:<environment: 0x55cf8e9fdb28> 
[16:10:34.700]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.700]  - attr(*, "resolved")= logi TRUE
[16:10:34.700]  - attr(*, "total_size")= num NA
[16:10:34.705]  - Getting '...' globals ... DONE
[16:10:34.705] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:10:34.705] List of 2
[16:10:34.705]  $ ...future.FUN:function (...)  
[16:10:34.705]  $ ...          : list()
[16:10:34.705]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.705]  - attr(*, "where")=List of 2
[16:10:34.705]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:10:34.705]   ..$ ...          :<environment: 0x55cf8e9fdb28> 
[16:10:34.705]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.705]  - attr(*, "resolved")= logi FALSE
[16:10:34.705]  - attr(*, "total_size")= num 616
[16:10:34.708] Packages to be attached in all futures: [n=0] 
[16:10:34.708] getGlobalsAndPackagesXApply() ... DONE
[16:10:34.708] Number of futures (= number of chunks): 1
[16:10:34.708] Launching 1 futures (chunks) ...
[16:10:34.708] Chunk #1 of 1 ...
[16:10:34.708]  - Finding globals in 'X' for chunk #1 ...
[16:10:34.708] getGlobalsAndPackages() ...
[16:10:34.709] Searching for globals...
[16:10:34.709] 
[16:10:34.709] Searching for globals ... DONE
[16:10:34.709] - globals: [0] <none>
[16:10:34.709] getGlobalsAndPackages() ... DONE
[16:10:34.709]    + additional globals found: [n=0] 
[16:10:34.709]    + additional namespaces needed: [n=0] 
[16:10:34.709]  - Finding globals in 'X' for chunk #1 ... DONE
[16:10:34.709]  - Adjusted option 'future.globals.maxSize': 524288000 -> 5 * 524288000 = 2621440000 (bytes)
[16:10:34.710]  - seeds: [5] <seeds>
[16:10:34.710] getGlobalsAndPackages() ...
[16:10:34.710] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:34.710] Resolving globals: FALSE
[16:10:34.710] Tweak future expression to call with '...' arguments ...
[16:10:34.710] {
[16:10:34.710]     do.call(function(...) {
[16:10:34.710]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.710]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:34.710]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.710]             on.exit(options(oopts), add = TRUE)
[16:10:34.710]         }
[16:10:34.710]         {
[16:10:34.710]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:34.710]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.710]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.710]                   envir = globalenv(), inherits = FALSE)
[16:10:34.710]                 ...future.FUN(...future.X_jj, ...)
[16:10:34.710]             })
[16:10:34.710]         }
[16:10:34.710]     }, args = future.call.arguments)
[16:10:34.710] }
[16:10:34.710] Tweak future expression to call with '...' arguments ... DONE
[16:10:34.711] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:34.711] 
[16:10:34.711] getGlobalsAndPackages() ... DONE
[16:10:34.711] run() for ‘Future’ ...
[16:10:34.711] - state: ‘created’
[16:10:34.711] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:10:34.712] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:10:34.712] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:10:34.712]   - Field: ‘label’
[16:10:34.712]   - Field: ‘local’
[16:10:34.712]   - Field: ‘owner’
[16:10:34.712]   - Field: ‘envir’
[16:10:34.712]   - Field: ‘packages’
[16:10:34.712]   - Field: ‘gc’
[16:10:34.712]   - Field: ‘conditions’
[16:10:34.713]   - Field: ‘expr’
[16:10:34.713]   - Field: ‘uuid’
[16:10:34.713]   - Field: ‘seed’
[16:10:34.713]   - Field: ‘version’
[16:10:34.713]   - Field: ‘result’
[16:10:34.713]   - Field: ‘asynchronous’
[16:10:34.713]   - Field: ‘calls’
[16:10:34.713]   - Field: ‘globals’
[16:10:34.713]   - Field: ‘stdout’
[16:10:34.713]   - Field: ‘earlySignal’
[16:10:34.713]   - Field: ‘lazy’
[16:10:34.714]   - Field: ‘state’
[16:10:34.714] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:10:34.714] - Launch lazy future ...
[16:10:34.714] Packages needed by the future expression (n = 0): <none>
[16:10:34.714] Packages needed by future strategies (n = 0): <none>
[16:10:34.714] {
[16:10:34.714]     {
[16:10:34.714]         {
[16:10:34.714]             ...future.startTime <- base::Sys.time()
[16:10:34.714]             {
[16:10:34.714]                 {
[16:10:34.714]                   {
[16:10:34.714]                     base::local({
[16:10:34.714]                       has_future <- base::requireNamespace("future", 
[16:10:34.714]                         quietly = TRUE)
[16:10:34.714]                       if (has_future) {
[16:10:34.714]                         ns <- base::getNamespace("future")
[16:10:34.714]                         version <- ns[[".package"]][["version"]]
[16:10:34.714]                         if (is.null(version)) 
[16:10:34.714]                           version <- utils::packageVersion("future")
[16:10:34.714]                       }
[16:10:34.714]                       else {
[16:10:34.714]                         version <- NULL
[16:10:34.714]                       }
[16:10:34.714]                       if (!has_future || version < "1.8.0") {
[16:10:34.714]                         info <- base::c(r_version = base::gsub("R version ", 
[16:10:34.714]                           "", base::R.version$version.string), 
[16:10:34.714]                           platform = base::sprintf("%s (%s-bit)", 
[16:10:34.714]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:34.714]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:34.714]                             "release", "version")], collapse = " "), 
[16:10:34.714]                           hostname = base::Sys.info()[["nodename"]])
[16:10:34.714]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:10:34.714]                           info)
[16:10:34.714]                         info <- base::paste(info, collapse = "; ")
[16:10:34.714]                         if (!has_future) {
[16:10:34.714]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:34.714]                             info)
[16:10:34.714]                         }
[16:10:34.714]                         else {
[16:10:34.714]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:34.714]                             info, version)
[16:10:34.714]                         }
[16:10:34.714]                         base::stop(msg)
[16:10:34.714]                       }
[16:10:34.714]                     })
[16:10:34.714]                   }
[16:10:34.714]                   options(future.plan = NULL)
[16:10:34.714]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:34.714]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:34.714]                 }
[16:10:34.714]                 ...future.workdir <- getwd()
[16:10:34.714]             }
[16:10:34.714]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:34.714]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:34.714]         }
[16:10:34.714]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:34.714]             future.globals.maxSize = 2621440000, future.globals.method = NULL, 
[16:10:34.714]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:34.714]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:34.714]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:34.714]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:34.714]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:34.714]             base::names(...future.oldOptions))
[16:10:34.714]     }
[16:10:34.714]     if (FALSE) {
[16:10:34.714]     }
[16:10:34.714]     else {
[16:10:34.714]         if (TRUE) {
[16:10:34.714]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:34.714]                 open = "w")
[16:10:34.714]         }
[16:10:34.714]         else {
[16:10:34.714]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:34.714]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:34.714]         }
[16:10:34.714]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:34.714]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:34.714]             base::sink(type = "output", split = FALSE)
[16:10:34.714]             base::close(...future.stdout)
[16:10:34.714]         }, add = TRUE)
[16:10:34.714]     }
[16:10:34.714]     ...future.frame <- base::sys.nframe()
[16:10:34.714]     ...future.conditions <- base::list()
[16:10:34.714]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:34.714]     if (FALSE) {
[16:10:34.714]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:34.714]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:34.714]     }
[16:10:34.714]     ...future.result <- base::tryCatch({
[16:10:34.714]         base::withCallingHandlers({
[16:10:34.714]             ...future.value <- base::withVisible(base::local({
[16:10:34.714]                 do.call(function(...) {
[16:10:34.714]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.714]                   if (!identical(...future.globals.maxSize.org, 
[16:10:34.714]                     ...future.globals.maxSize)) {
[16:10:34.714]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.714]                     on.exit(options(oopts), add = TRUE)
[16:10:34.714]                   }
[16:10:34.714]                   {
[16:10:34.714]                     lapply(seq_along(...future.elements_ii), 
[16:10:34.714]                       FUN = function(jj) {
[16:10:34.714]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.714]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.714]                           envir = globalenv(), inherits = FALSE)
[16:10:34.714]                         ...future.FUN(...future.X_jj, ...)
[16:10:34.714]                       })
[16:10:34.714]                   }
[16:10:34.714]                 }, args = future.call.arguments)
[16:10:34.714]             }))
[16:10:34.714]             future::FutureResult(value = ...future.value$value, 
[16:10:34.714]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:34.714]                   ...future.rng), globalenv = if (FALSE) 
[16:10:34.714]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:34.714]                     ...future.globalenv.names))
[16:10:34.714]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:34.714]         }, condition = base::local({
[16:10:34.714]             c <- base::c
[16:10:34.714]             inherits <- base::inherits
[16:10:34.714]             invokeRestart <- base::invokeRestart
[16:10:34.714]             length <- base::length
[16:10:34.714]             list <- base::list
[16:10:34.714]             seq.int <- base::seq.int
[16:10:34.714]             signalCondition <- base::signalCondition
[16:10:34.714]             sys.calls <- base::sys.calls
[16:10:34.714]             `[[` <- base::`[[`
[16:10:34.714]             `+` <- base::`+`
[16:10:34.714]             `<<-` <- base::`<<-`
[16:10:34.714]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:34.714]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:34.714]                   3L)]
[16:10:34.714]             }
[16:10:34.714]             function(cond) {
[16:10:34.714]                 is_error <- inherits(cond, "error")
[16:10:34.714]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:34.714]                   NULL)
[16:10:34.714]                 if (is_error) {
[16:10:34.714]                   sessionInformation <- function() {
[16:10:34.714]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:34.714]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:34.714]                       search = base::search(), system = base::Sys.info())
[16:10:34.714]                   }
[16:10:34.714]                   ...future.conditions[[length(...future.conditions) + 
[16:10:34.714]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:34.714]                     cond$call), session = sessionInformation(), 
[16:10:34.714]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:34.714]                   signalCondition(cond)
[16:10:34.714]                 }
[16:10:34.714]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:34.714]                 "immediateCondition"))) {
[16:10:34.714]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:34.714]                   ...future.conditions[[length(...future.conditions) + 
[16:10:34.714]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:34.714]                   if (TRUE && !signal) {
[16:10:34.714]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:34.714]                     {
[16:10:34.714]                       inherits <- base::inherits
[16:10:34.714]                       invokeRestart <- base::invokeRestart
[16:10:34.714]                       is.null <- base::is.null
[16:10:34.714]                       muffled <- FALSE
[16:10:34.714]                       if (inherits(cond, "message")) {
[16:10:34.714]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:34.714]                         if (muffled) 
[16:10:34.714]                           invokeRestart("muffleMessage")
[16:10:34.714]                       }
[16:10:34.714]                       else if (inherits(cond, "warning")) {
[16:10:34.714]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:34.714]                         if (muffled) 
[16:10:34.714]                           invokeRestart("muffleWarning")
[16:10:34.714]                       }
[16:10:34.714]                       else if (inherits(cond, "condition")) {
[16:10:34.714]                         if (!is.null(pattern)) {
[16:10:34.714]                           computeRestarts <- base::computeRestarts
[16:10:34.714]                           grepl <- base::grepl
[16:10:34.714]                           restarts <- computeRestarts(cond)
[16:10:34.714]                           for (restart in restarts) {
[16:10:34.714]                             name <- restart$name
[16:10:34.714]                             if (is.null(name)) 
[16:10:34.714]                               next
[16:10:34.714]                             if (!grepl(pattern, name)) 
[16:10:34.714]                               next
[16:10:34.714]                             invokeRestart(restart)
[16:10:34.714]                             muffled <- TRUE
[16:10:34.714]                             break
[16:10:34.714]                           }
[16:10:34.714]                         }
[16:10:34.714]                       }
[16:10:34.714]                       invisible(muffled)
[16:10:34.714]                     }
[16:10:34.714]                     muffleCondition(cond, pattern = "^muffle")
[16:10:34.714]                   }
[16:10:34.714]                 }
[16:10:34.714]                 else {
[16:10:34.714]                   if (TRUE) {
[16:10:34.714]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:34.714]                     {
[16:10:34.714]                       inherits <- base::inherits
[16:10:34.714]                       invokeRestart <- base::invokeRestart
[16:10:34.714]                       is.null <- base::is.null
[16:10:34.714]                       muffled <- FALSE
[16:10:34.714]                       if (inherits(cond, "message")) {
[16:10:34.714]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:34.714]                         if (muffled) 
[16:10:34.714]                           invokeRestart("muffleMessage")
[16:10:34.714]                       }
[16:10:34.714]                       else if (inherits(cond, "warning")) {
[16:10:34.714]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:34.714]                         if (muffled) 
[16:10:34.714]                           invokeRestart("muffleWarning")
[16:10:34.714]                       }
[16:10:34.714]                       else if (inherits(cond, "condition")) {
[16:10:34.714]                         if (!is.null(pattern)) {
[16:10:34.714]                           computeRestarts <- base::computeRestarts
[16:10:34.714]                           grepl <- base::grepl
[16:10:34.714]                           restarts <- computeRestarts(cond)
[16:10:34.714]                           for (restart in restarts) {
[16:10:34.714]                             name <- restart$name
[16:10:34.714]                             if (is.null(name)) 
[16:10:34.714]                               next
[16:10:34.714]                             if (!grepl(pattern, name)) 
[16:10:34.714]                               next
[16:10:34.714]                             invokeRestart(restart)
[16:10:34.714]                             muffled <- TRUE
[16:10:34.714]                             break
[16:10:34.714]                           }
[16:10:34.714]                         }
[16:10:34.714]                       }
[16:10:34.714]                       invisible(muffled)
[16:10:34.714]                     }
[16:10:34.714]                     muffleCondition(cond, pattern = "^muffle")
[16:10:34.714]                   }
[16:10:34.714]                 }
[16:10:34.714]             }
[16:10:34.714]         }))
[16:10:34.714]     }, error = function(ex) {
[16:10:34.714]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:34.714]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:34.714]                 ...future.rng), started = ...future.startTime, 
[16:10:34.714]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:34.714]             version = "1.8"), class = "FutureResult")
[16:10:34.714]     }, finally = {
[16:10:34.714]         if (!identical(...future.workdir, getwd())) 
[16:10:34.714]             setwd(...future.workdir)
[16:10:34.714]         {
[16:10:34.714]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:34.714]                 ...future.oldOptions$nwarnings <- NULL
[16:10:34.714]             }
[16:10:34.714]             base::options(...future.oldOptions)
[16:10:34.714]             if (.Platform$OS.type == "windows") {
[16:10:34.714]                 old_names <- names(...future.oldEnvVars)
[16:10:34.714]                 envs <- base::Sys.getenv()
[16:10:34.714]                 names <- names(envs)
[16:10:34.714]                 common <- intersect(names, old_names)
[16:10:34.714]                 added <- setdiff(names, old_names)
[16:10:34.714]                 removed <- setdiff(old_names, names)
[16:10:34.714]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:34.714]                   envs[common]]
[16:10:34.714]                 NAMES <- toupper(changed)
[16:10:34.714]                 args <- list()
[16:10:34.714]                 for (kk in seq_along(NAMES)) {
[16:10:34.714]                   name <- changed[[kk]]
[16:10:34.714]                   NAME <- NAMES[[kk]]
[16:10:34.714]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.714]                     next
[16:10:34.714]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:34.714]                 }
[16:10:34.714]                 NAMES <- toupper(added)
[16:10:34.714]                 for (kk in seq_along(NAMES)) {
[16:10:34.714]                   name <- added[[kk]]
[16:10:34.714]                   NAME <- NAMES[[kk]]
[16:10:34.714]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.714]                     next
[16:10:34.714]                   args[[name]] <- ""
[16:10:34.714]                 }
[16:10:34.714]                 NAMES <- toupper(removed)
[16:10:34.714]                 for (kk in seq_along(NAMES)) {
[16:10:34.714]                   name <- removed[[kk]]
[16:10:34.714]                   NAME <- NAMES[[kk]]
[16:10:34.714]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.714]                     next
[16:10:34.714]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:34.714]                 }
[16:10:34.714]                 if (length(args) > 0) 
[16:10:34.714]                   base::do.call(base::Sys.setenv, args = args)
[16:10:34.714]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:34.714]             }
[16:10:34.714]             else {
[16:10:34.714]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:34.714]             }
[16:10:34.714]             {
[16:10:34.714]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:34.714]                   0L) {
[16:10:34.714]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:34.714]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:34.714]                   base::options(opts)
[16:10:34.714]                 }
[16:10:34.714]                 {
[16:10:34.714]                   {
[16:10:34.714]                     base::assign(".Random.seed", c(10403L, 2L, 
[16:10:34.714]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[16:10:34.714]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[16:10:34.714]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[16:10:34.714]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[16:10:34.714]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[16:10:34.714]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[16:10:34.714]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[16:10:34.714]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[16:10:34.714]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[16:10:34.714]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[16:10:34.714]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[16:10:34.714]                     -1512233174L, -1985955764L, -425390065L, 
[16:10:34.714]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[16:10:34.714]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[16:10:34.714]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[16:10:34.714]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[16:10:34.714]                     1818328109L, -1284085436L, -1981489558L, 
[16:10:34.714]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[16:10:34.714]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[16:10:34.714]                     -1718567047L, -793788661L, -1133789126L, 
[16:10:34.714]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[16:10:34.714]                     -1823521982L, -1345991523L, -1672661737L, 
[16:10:34.714]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[16:10:34.714]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[16:10:34.714]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[16:10:34.714]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[16:10:34.714]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[16:10:34.714]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[16:10:34.714]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[16:10:34.714]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[16:10:34.714]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[16:10:34.714]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[16:10:34.714]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[16:10:34.714]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[16:10:34.714]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[16:10:34.714]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[16:10:34.714]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[16:10:34.714]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[16:10:34.714]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[16:10:34.714]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[16:10:34.714]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[16:10:34.714]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[16:10:34.714]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[16:10:34.714]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[16:10:34.714]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[16:10:34.714]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[16:10:34.714]                     -1119334354L, -1521015416L, -2041922421L, 
[16:10:34.714]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[16:10:34.714]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[16:10:34.714]                     1232111981L, -1801753084L, -1608606422L, 
[16:10:34.714]                     -1172096363L, 1420874031L, -1210473418L, 
[16:10:34.714]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[16:10:34.714]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[16:10:34.714]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[16:10:34.714]                     679371266L, -591318819L, -104578089L, -172818754L, 
[16:10:34.714]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[16:10:34.714]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[16:10:34.714]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[16:10:34.714]                     -332493318L, -1978392251L, -1691039632L, 
[16:10:34.714]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[16:10:34.714]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[16:10:34.714]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[16:10:34.714]                     87560756L, -87565624L, 426345146L, -699970416L, 
[16:10:34.714]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[16:10:34.714]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[16:10:34.714]                     -1178330196L, -687617348L, -1701912078L, 
[16:10:34.714]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[16:10:34.714]                     -1345416048L, 1816730492L, -1570431212L, 
[16:10:34.714]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[16:10:34.714]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[16:10:34.714]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[16:10:34.714]                     -1493184262L, -1943836976L, -590788308L, 
[16:10:34.714]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[16:10:34.714]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[16:10:34.714]                     1274857340L, -1205842638L, -1938479504L, 
[16:10:34.714]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[16:10:34.714]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[16:10:34.714]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[16:10:34.714]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[16:10:34.714]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[16:10:34.714]                     -1460751252L, 1201879444L, -1459788718L, 
[16:10:34.714]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[16:10:34.714]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[16:10:34.714]                     -420945808L, -1997735900L, -1838404552L, 
[16:10:34.714]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[16:10:34.714]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[16:10:34.714]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[16:10:34.714]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[16:10:34.714]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[16:10:34.714]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[16:10:34.714]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[16:10:34.714]                     942193650L, 751741680L, 689743428L, -18455976L, 
[16:10:34.714]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[16:10:34.714]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[16:10:34.714]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[16:10:34.714]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[16:10:34.714]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[16:10:34.714]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[16:10:34.714]                     -1357570110L, 1896595240L, -2066952276L, 
[16:10:34.714]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[16:10:34.714]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[16:10:34.714]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[16:10:34.714]                     769655120L, 236357794L, 181393736L, -13334772L, 
[16:10:34.714]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[16:10:34.714]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[16:10:34.714]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[16:10:34.714]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[16:10:34.714]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[16:10:34.714]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[16:10:34.714]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[16:10:34.714]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[16:10:34.714]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[16:10:34.714]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[16:10:34.714]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[16:10:34.714]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[16:10:34.714]                     -1365842884L, -438961294L, -1851472272L, 
[16:10:34.714]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[16:10:34.714]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[16:10:34.714]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[16:10:34.714]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[16:10:34.714]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[16:10:34.714]                     -594809770L, -2146766621L, -2013964635L, 
[16:10:34.714]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[16:10:34.714]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[16:10:34.714]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[16:10:34.714]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[16:10:34.714]                     -1426021878L, -1285634264L, 1507547537L, 
[16:10:34.714]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[16:10:34.714]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[16:10:34.714]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[16:10:34.714]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[16:10:34.714]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[16:10:34.714]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[16:10:34.714]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[16:10:34.714]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[16:10:34.714]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[16:10:34.714]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[16:10:34.714]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[16:10:34.714]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[16:10:34.714]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[16:10:34.714]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[16:10:34.714]                     -1604604761L, 1421229008L, -1268333714L, 
[16:10:34.714]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[16:10:34.714]                     -2070476623L, -2099222749L, 1141171236L, 
[16:10:34.714]                     -146426158L, -1797385433L, -1129376399L, 
[16:10:34.714]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[16:10:34.714]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[16:10:34.714]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[16:10:34.714]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[16:10:34.714]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[16:10:34.714]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[16:10:34.714]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[16:10:34.714]                     -1092079724L, -1765622238L, -1882554057L, 
[16:10:34.714]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[16:10:34.714]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[16:10:34.714]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[16:10:34.714]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[16:10:34.714]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[16:10:34.714]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[16:10:34.714]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[16:10:34.714]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[16:10:34.714]                     865377681L, -1127426242L), envir = base::globalenv(), 
[16:10:34.714]                       inherits = FALSE)
[16:10:34.714]                     NULL
[16:10:34.714]                   }
[16:10:34.714]                   options(future.plan = NULL)
[16:10:34.714]                   if (is.na(NA_character_)) 
[16:10:34.714]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:34.714]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:34.714]                   future::plan(list(function (..., envir = parent.frame()) 
[16:10:34.714]                   {
[16:10:34.714]                     future <- SequentialFuture(..., envir = envir)
[16:10:34.714]                     if (!future$lazy) 
[16:10:34.714]                       future <- run(future)
[16:10:34.714]                     invisible(future)
[16:10:34.714]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:34.714]                 }
[16:10:34.714]             }
[16:10:34.714]         }
[16:10:34.714]     })
[16:10:34.714]     if (TRUE) {
[16:10:34.714]         base::sink(type = "output", split = FALSE)
[16:10:34.714]         if (TRUE) {
[16:10:34.714]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:34.714]         }
[16:10:34.714]         else {
[16:10:34.714]             ...future.result["stdout"] <- base::list(NULL)
[16:10:34.714]         }
[16:10:34.714]         base::close(...future.stdout)
[16:10:34.714]         ...future.stdout <- NULL
[16:10:34.714]     }
[16:10:34.714]     ...future.result$conditions <- ...future.conditions
[16:10:34.714]     ...future.result$finished <- base::Sys.time()
[16:10:34.714]     ...future.result
[16:10:34.714] }
[16:10:34.717] assign_globals() ...
[16:10:34.717] List of 5
[16:10:34.717]  $ ...future.FUN            :function (...)  
[16:10:34.717]  $ future.call.arguments    : list()
[16:10:34.717]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.717]  $ ...future.elements_ii    :List of 5
[16:10:34.717]   ..$ : int 0
[16:10:34.717]   ..$ : int 0
[16:10:34.717]   ..$ : int 0
[16:10:34.717]   ..$ : int 0
[16:10:34.717]   ..$ : int 0
[16:10:34.717]  $ ...future.seeds_ii       :List of 5
[16:10:34.717]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[16:10:34.717]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[16:10:34.717]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[16:10:34.717]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[16:10:34.717]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[16:10:34.717]  $ ...future.globals.maxSize: NULL
[16:10:34.717]  - attr(*, "resolved")= logi FALSE
[16:10:34.717]  - attr(*, "total_size")= num 616
[16:10:34.717]  - attr(*, "where")=List of 5
[16:10:34.717]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:10:34.717]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:10:34.717]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:10:34.717]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:10:34.717]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:10:34.717]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.717]  - attr(*, "already-done")= logi TRUE
[16:10:34.724] - reassign environment for ‘...future.FUN’
[16:10:34.724] - copied ‘...future.FUN’ to environment
[16:10:34.725] - copied ‘future.call.arguments’ to environment
[16:10:34.725] - copied ‘...future.elements_ii’ to environment
[16:10:34.725] - copied ‘...future.seeds_ii’ to environment
[16:10:34.725] - copied ‘...future.globals.maxSize’ to environment
[16:10:34.725] assign_globals() ... done
[16:10:34.725] plan(): Setting new future strategy stack:
[16:10:34.725] List of future strategies:
[16:10:34.725] 1. sequential:
[16:10:34.725]    - args: function (..., envir = parent.frame())
[16:10:34.725]    - tweaked: FALSE
[16:10:34.725]    - call: NULL
[16:10:34.726] plan(): nbrOfWorkers() = 1
[16:10:34.726] plan(): Setting new future strategy stack:
[16:10:34.727] List of future strategies:
[16:10:34.727] 1. sequential:
[16:10:34.727]    - args: function (..., envir = parent.frame())
[16:10:34.727]    - tweaked: FALSE
[16:10:34.727]    - call: plan(strategy)
[16:10:34.727] plan(): nbrOfWorkers() = 1
[16:10:34.727] SequentialFuture started (and completed)
[16:10:34.727] - Launch lazy future ... done
[16:10:34.727] run() for ‘SequentialFuture’ ... done
[16:10:34.727] Created future:
[16:10:34.728] SequentialFuture:
[16:10:34.728] Label: ‘future_replicate-1’
[16:10:34.728] Expression:
[16:10:34.728] {
[16:10:34.728]     do.call(function(...) {
[16:10:34.728]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.728]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:34.728]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.728]             on.exit(options(oopts), add = TRUE)
[16:10:34.728]         }
[16:10:34.728]         {
[16:10:34.728]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:34.728]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.728]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.728]                   envir = globalenv(), inherits = FALSE)
[16:10:34.728]                 ...future.FUN(...future.X_jj, ...)
[16:10:34.728]             })
[16:10:34.728]         }
[16:10:34.728]     }, args = future.call.arguments)
[16:10:34.728] }
[16:10:34.728] Lazy evaluation: FALSE
[16:10:34.728] Asynchronous evaluation: FALSE
[16:10:34.728] Local evaluation: TRUE
[16:10:34.728] Environment: R_GlobalEnv
[16:10:34.728] Capture standard output: TRUE
[16:10:34.728] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:34.728] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:34.728] Packages: <none>
[16:10:34.728] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:34.728] Resolved: TRUE
[16:10:34.728] Value: 280 bytes of class ‘list’
[16:10:34.728] Early signaling: FALSE
[16:10:34.728] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:34.728] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:10:34.730] Chunk #1 of 1 ... DONE
[16:10:34.731] Launching 1 futures (chunks) ... DONE
[16:10:34.731] Resolving 1 futures (chunks) ...
[16:10:34.731] resolve() on list ...
[16:10:34.731]  recursive: 0
[16:10:34.731]  length: 1
[16:10:34.731] 
[16:10:34.731] resolved() for ‘SequentialFuture’ ...
[16:10:34.731] - state: ‘finished’
[16:10:34.731] - run: TRUE
[16:10:34.731] - result: ‘FutureResult’
[16:10:34.731] resolved() for ‘SequentialFuture’ ... done
[16:10:34.732] Future #1
[16:10:34.732] signalConditionsASAP(SequentialFuture, pos=1) ...
[16:10:34.732] - nx: 1
[16:10:34.732] - relay: TRUE
[16:10:34.732] - stdout: TRUE
[16:10:34.732] - signal: TRUE
[16:10:34.732] - resignal: FALSE
[16:10:34.732] - force: TRUE
[16:10:34.732] - relayed: [n=1] FALSE
[16:10:34.732] - queued futures: [n=1] FALSE
[16:10:34.733]  - until=1
[16:10:34.733]  - relaying element #1
[16:10:34.733] - relayed: [n=1] TRUE
[16:10:34.733] - queued futures: [n=1] TRUE
[16:10:34.733] signalConditionsASAP(SequentialFuture, pos=1) ... done
[16:10:34.733]  length: 0 (resolved future 1)
[16:10:34.733] Relaying remaining futures
[16:10:34.733] signalConditionsASAP(NULL, pos=0) ...
[16:10:34.733] - nx: 1
[16:10:34.733] - relay: TRUE
[16:10:34.734] - stdout: TRUE
[16:10:34.734] - signal: TRUE
[16:10:34.734] - resignal: FALSE
[16:10:34.734] - force: TRUE
[16:10:34.734] - relayed: [n=1] TRUE
[16:10:34.734] - queued futures: [n=1] TRUE
 - flush all
[16:10:34.734] - relayed: [n=1] TRUE
[16:10:34.734] - queued futures: [n=1] TRUE
[16:10:34.734] signalConditionsASAP(NULL, pos=0) ... done
[16:10:34.734] resolve() on list ... DONE
[16:10:34.734]  - Number of value chunks collected: 1
[16:10:34.735] Resolving 1 futures (chunks) ... DONE
[16:10:34.735] Reducing values from 1 chunks ...
[16:10:34.735]  - Number of values collected after concatenation: 5
[16:10:34.735]  - Number of values expected: 5
[16:10:34.735] Reducing values from 1 chunks ... DONE
[16:10:34.735] future_lapply() ... DONE
[16:10:34.736] future_lapply() ...
[16:10:34.736] Generating random seeds ...
[16:10:34.736] Generating random seed streams for 5 elements ...
[16:10:34.736] Generating random seed streams for 5 elements ... DONE
[16:10:34.736] Generating random seeds ... DONE
[16:10:34.736] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:10:34.737] Number of chunks: 1
[16:10:34.737] getGlobalsAndPackagesXApply() ...
[16:10:34.737]  - future.globals: TRUE
[16:10:34.737] getGlobalsAndPackages() ...
[16:10:34.737] Searching for globals...
[16:10:34.738] - globals found: [2] ‘FUN’, ‘sample’
[16:10:34.738] Searching for globals ... DONE
[16:10:34.739] Resolving globals: FALSE
[16:10:34.739] The total size of the 1 globals is 616 bytes (616 bytes)
[16:10:34.739] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:10:34.739] - globals: [1] ‘FUN’
[16:10:34.739] 
[16:10:34.740] getGlobalsAndPackages() ... DONE
[16:10:34.740]  - globals found/used: [n=1] ‘FUN’
[16:10:34.740]  - needed namespaces: [n=0] 
[16:10:34.740] Finding globals ... DONE
[16:10:34.740]  - use_args: TRUE
[16:10:34.740]  - Getting '...' globals ...
[16:10:34.740] resolve() on list ...
[16:10:34.740]  recursive: 0
[16:10:34.741]  length: 1
[16:10:34.741]  elements: ‘...’
[16:10:34.741]  length: 0 (resolved future 1)
[16:10:34.741] resolve() on list ... DONE
[16:10:34.741]    - '...' content: [n=0] 
[16:10:34.741] List of 1
[16:10:34.741]  $ ...: list()
[16:10:34.741]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.741]  - attr(*, "where")=List of 1
[16:10:34.741]   ..$ ...:<environment: 0x55cf8c7bffb8> 
[16:10:34.741]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.741]  - attr(*, "resolved")= logi TRUE
[16:10:34.741]  - attr(*, "total_size")= num NA
[16:10:34.743]  - Getting '...' globals ... DONE
[16:10:34.744] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:10:34.744] List of 2
[16:10:34.744]  $ ...future.FUN:function (...)  
[16:10:34.744]  $ ...          : list()
[16:10:34.744]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.744]  - attr(*, "where")=List of 2
[16:10:34.744]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:10:34.744]   ..$ ...          :<environment: 0x55cf8c7bffb8> 
[16:10:34.744]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.744]  - attr(*, "resolved")= logi FALSE
[16:10:34.744]  - attr(*, "total_size")= num 616
[16:10:34.746] Packages to be attached in all futures: [n=0] 
[16:10:34.746] getGlobalsAndPackagesXApply() ... DONE
[16:10:34.747] Number of futures (= number of chunks): 1
[16:10:34.747] Launching 1 futures (chunks) ...
[16:10:34.747] Chunk #1 of 1 ...
[16:10:34.747]  - Finding globals in 'X' for chunk #1 ...
[16:10:34.747] getGlobalsAndPackages() ...
[16:10:34.747] Searching for globals...
[16:10:34.747] 
[16:10:34.747] Searching for globals ... DONE
[16:10:34.748] - globals: [0] <none>
[16:10:34.748] getGlobalsAndPackages() ... DONE
[16:10:34.748]    + additional globals found: [n=0] 
[16:10:34.748]    + additional namespaces needed: [n=0] 
[16:10:34.748]  - Finding globals in 'X' for chunk #1 ... DONE
[16:10:34.748]  - Adjusted option 'future.globals.maxSize': 524288000 -> 5 * 524288000 = 2621440000 (bytes)
[16:10:34.748]  - seeds: [5] <seeds>
[16:10:34.748] getGlobalsAndPackages() ...
[16:10:34.748] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:34.748] Resolving globals: FALSE
[16:10:34.749] Tweak future expression to call with '...' arguments ...
[16:10:34.749] {
[16:10:34.749]     do.call(function(...) {
[16:10:34.749]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.749]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:34.749]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.749]             on.exit(options(oopts), add = TRUE)
[16:10:34.749]         }
[16:10:34.749]         {
[16:10:34.749]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:34.749]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.749]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.749]                   envir = globalenv(), inherits = FALSE)
[16:10:34.749]                 ...future.FUN(...future.X_jj, ...)
[16:10:34.749]             })
[16:10:34.749]         }
[16:10:34.749]     }, args = future.call.arguments)
[16:10:34.749] }
[16:10:34.749] Tweak future expression to call with '...' arguments ... DONE
[16:10:34.749] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:34.749] 
[16:10:34.749] getGlobalsAndPackages() ... DONE
[16:10:34.750] run() for ‘Future’ ...
[16:10:34.750] - state: ‘created’
[16:10:34.750] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:10:34.750] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:10:34.750] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:10:34.750]   - Field: ‘label’
[16:10:34.751]   - Field: ‘local’
[16:10:34.751]   - Field: ‘owner’
[16:10:34.751]   - Field: ‘envir’
[16:10:34.751]   - Field: ‘packages’
[16:10:34.751]   - Field: ‘gc’
[16:10:34.751]   - Field: ‘conditions’
[16:10:34.751]   - Field: ‘expr’
[16:10:34.751]   - Field: ‘uuid’
[16:10:34.751]   - Field: ‘seed’
[16:10:34.751]   - Field: ‘version’
[16:10:34.751]   - Field: ‘result’
[16:10:34.752]   - Field: ‘asynchronous’
[16:10:34.752]   - Field: ‘calls’
[16:10:34.752]   - Field: ‘globals’
[16:10:34.752]   - Field: ‘stdout’
[16:10:34.752]   - Field: ‘earlySignal’
[16:10:34.752]   - Field: ‘lazy’
[16:10:34.752]   - Field: ‘state’
[16:10:34.752] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:10:34.754] - Launch lazy future ...
[16:10:34.754] Packages needed by the future expression (n = 0): <none>
[16:10:34.754] Packages needed by future strategies (n = 0): <none>
[16:10:34.754] {
[16:10:34.754]     {
[16:10:34.754]         {
[16:10:34.754]             ...future.startTime <- base::Sys.time()
[16:10:34.754]             {
[16:10:34.754]                 {
[16:10:34.754]                   {
[16:10:34.754]                     base::local({
[16:10:34.754]                       has_future <- base::requireNamespace("future", 
[16:10:34.754]                         quietly = TRUE)
[16:10:34.754]                       if (has_future) {
[16:10:34.754]                         ns <- base::getNamespace("future")
[16:10:34.754]                         version <- ns[[".package"]][["version"]]
[16:10:34.754]                         if (is.null(version)) 
[16:10:34.754]                           version <- utils::packageVersion("future")
[16:10:34.754]                       }
[16:10:34.754]                       else {
[16:10:34.754]                         version <- NULL
[16:10:34.754]                       }
[16:10:34.754]                       if (!has_future || version < "1.8.0") {
[16:10:34.754]                         info <- base::c(r_version = base::gsub("R version ", 
[16:10:34.754]                           "", base::R.version$version.string), 
[16:10:34.754]                           platform = base::sprintf("%s (%s-bit)", 
[16:10:34.754]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:34.754]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:34.754]                             "release", "version")], collapse = " "), 
[16:10:34.754]                           hostname = base::Sys.info()[["nodename"]])
[16:10:34.754]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:10:34.754]                           info)
[16:10:34.754]                         info <- base::paste(info, collapse = "; ")
[16:10:34.754]                         if (!has_future) {
[16:10:34.754]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:34.754]                             info)
[16:10:34.754]                         }
[16:10:34.754]                         else {
[16:10:34.754]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:34.754]                             info, version)
[16:10:34.754]                         }
[16:10:34.754]                         base::stop(msg)
[16:10:34.754]                       }
[16:10:34.754]                     })
[16:10:34.754]                   }
[16:10:34.754]                   options(future.plan = NULL)
[16:10:34.754]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:34.754]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:34.754]                 }
[16:10:34.754]                 ...future.workdir <- getwd()
[16:10:34.754]             }
[16:10:34.754]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:34.754]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:34.754]         }
[16:10:34.754]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:34.754]             future.globals.maxSize = 2621440000, future.globals.method = NULL, 
[16:10:34.754]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:34.754]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:34.754]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:34.754]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:34.754]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:34.754]             base::names(...future.oldOptions))
[16:10:34.754]     }
[16:10:34.754]     if (FALSE) {
[16:10:34.754]     }
[16:10:34.754]     else {
[16:10:34.754]         if (TRUE) {
[16:10:34.754]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:34.754]                 open = "w")
[16:10:34.754]         }
[16:10:34.754]         else {
[16:10:34.754]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:34.754]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:34.754]         }
[16:10:34.754]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:34.754]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:34.754]             base::sink(type = "output", split = FALSE)
[16:10:34.754]             base::close(...future.stdout)
[16:10:34.754]         }, add = TRUE)
[16:10:34.754]     }
[16:10:34.754]     ...future.frame <- base::sys.nframe()
[16:10:34.754]     ...future.conditions <- base::list()
[16:10:34.754]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:34.754]     if (FALSE) {
[16:10:34.754]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:34.754]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:34.754]     }
[16:10:34.754]     ...future.result <- base::tryCatch({
[16:10:34.754]         base::withCallingHandlers({
[16:10:34.754]             ...future.value <- base::withVisible(base::local({
[16:10:34.754]                 do.call(function(...) {
[16:10:34.754]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.754]                   if (!identical(...future.globals.maxSize.org, 
[16:10:34.754]                     ...future.globals.maxSize)) {
[16:10:34.754]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.754]                     on.exit(options(oopts), add = TRUE)
[16:10:34.754]                   }
[16:10:34.754]                   {
[16:10:34.754]                     lapply(seq_along(...future.elements_ii), 
[16:10:34.754]                       FUN = function(jj) {
[16:10:34.754]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.754]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.754]                           envir = globalenv(), inherits = FALSE)
[16:10:34.754]                         ...future.FUN(...future.X_jj, ...)
[16:10:34.754]                       })
[16:10:34.754]                   }
[16:10:34.754]                 }, args = future.call.arguments)
[16:10:34.754]             }))
[16:10:34.754]             future::FutureResult(value = ...future.value$value, 
[16:10:34.754]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:34.754]                   ...future.rng), globalenv = if (FALSE) 
[16:10:34.754]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:34.754]                     ...future.globalenv.names))
[16:10:34.754]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:34.754]         }, condition = base::local({
[16:10:34.754]             c <- base::c
[16:10:34.754]             inherits <- base::inherits
[16:10:34.754]             invokeRestart <- base::invokeRestart
[16:10:34.754]             length <- base::length
[16:10:34.754]             list <- base::list
[16:10:34.754]             seq.int <- base::seq.int
[16:10:34.754]             signalCondition <- base::signalCondition
[16:10:34.754]             sys.calls <- base::sys.calls
[16:10:34.754]             `[[` <- base::`[[`
[16:10:34.754]             `+` <- base::`+`
[16:10:34.754]             `<<-` <- base::`<<-`
[16:10:34.754]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:34.754]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:34.754]                   3L)]
[16:10:34.754]             }
[16:10:34.754]             function(cond) {
[16:10:34.754]                 is_error <- inherits(cond, "error")
[16:10:34.754]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:34.754]                   NULL)
[16:10:34.754]                 if (is_error) {
[16:10:34.754]                   sessionInformation <- function() {
[16:10:34.754]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:34.754]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:34.754]                       search = base::search(), system = base::Sys.info())
[16:10:34.754]                   }
[16:10:34.754]                   ...future.conditions[[length(...future.conditions) + 
[16:10:34.754]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:34.754]                     cond$call), session = sessionInformation(), 
[16:10:34.754]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:34.754]                   signalCondition(cond)
[16:10:34.754]                 }
[16:10:34.754]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:34.754]                 "immediateCondition"))) {
[16:10:34.754]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:34.754]                   ...future.conditions[[length(...future.conditions) + 
[16:10:34.754]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:34.754]                   if (TRUE && !signal) {
[16:10:34.754]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:34.754]                     {
[16:10:34.754]                       inherits <- base::inherits
[16:10:34.754]                       invokeRestart <- base::invokeRestart
[16:10:34.754]                       is.null <- base::is.null
[16:10:34.754]                       muffled <- FALSE
[16:10:34.754]                       if (inherits(cond, "message")) {
[16:10:34.754]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:34.754]                         if (muffled) 
[16:10:34.754]                           invokeRestart("muffleMessage")
[16:10:34.754]                       }
[16:10:34.754]                       else if (inherits(cond, "warning")) {
[16:10:34.754]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:34.754]                         if (muffled) 
[16:10:34.754]                           invokeRestart("muffleWarning")
[16:10:34.754]                       }
[16:10:34.754]                       else if (inherits(cond, "condition")) {
[16:10:34.754]                         if (!is.null(pattern)) {
[16:10:34.754]                           computeRestarts <- base::computeRestarts
[16:10:34.754]                           grepl <- base::grepl
[16:10:34.754]                           restarts <- computeRestarts(cond)
[16:10:34.754]                           for (restart in restarts) {
[16:10:34.754]                             name <- restart$name
[16:10:34.754]                             if (is.null(name)) 
[16:10:34.754]                               next
[16:10:34.754]                             if (!grepl(pattern, name)) 
[16:10:34.754]                               next
[16:10:34.754]                             invokeRestart(restart)
[16:10:34.754]                             muffled <- TRUE
[16:10:34.754]                             break
[16:10:34.754]                           }
[16:10:34.754]                         }
[16:10:34.754]                       }
[16:10:34.754]                       invisible(muffled)
[16:10:34.754]                     }
[16:10:34.754]                     muffleCondition(cond, pattern = "^muffle")
[16:10:34.754]                   }
[16:10:34.754]                 }
[16:10:34.754]                 else {
[16:10:34.754]                   if (TRUE) {
[16:10:34.754]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:34.754]                     {
[16:10:34.754]                       inherits <- base::inherits
[16:10:34.754]                       invokeRestart <- base::invokeRestart
[16:10:34.754]                       is.null <- base::is.null
[16:10:34.754]                       muffled <- FALSE
[16:10:34.754]                       if (inherits(cond, "message")) {
[16:10:34.754]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:34.754]                         if (muffled) 
[16:10:34.754]                           invokeRestart("muffleMessage")
[16:10:34.754]                       }
[16:10:34.754]                       else if (inherits(cond, "warning")) {
[16:10:34.754]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:34.754]                         if (muffled) 
[16:10:34.754]                           invokeRestart("muffleWarning")
[16:10:34.754]                       }
[16:10:34.754]                       else if (inherits(cond, "condition")) {
[16:10:34.754]                         if (!is.null(pattern)) {
[16:10:34.754]                           computeRestarts <- base::computeRestarts
[16:10:34.754]                           grepl <- base::grepl
[16:10:34.754]                           restarts <- computeRestarts(cond)
[16:10:34.754]                           for (restart in restarts) {
[16:10:34.754]                             name <- restart$name
[16:10:34.754]                             if (is.null(name)) 
[16:10:34.754]                               next
[16:10:34.754]                             if (!grepl(pattern, name)) 
[16:10:34.754]                               next
[16:10:34.754]                             invokeRestart(restart)
[16:10:34.754]                             muffled <- TRUE
[16:10:34.754]                             break
[16:10:34.754]                           }
[16:10:34.754]                         }
[16:10:34.754]                       }
[16:10:34.754]                       invisible(muffled)
[16:10:34.754]                     }
[16:10:34.754]                     muffleCondition(cond, pattern = "^muffle")
[16:10:34.754]                   }
[16:10:34.754]                 }
[16:10:34.754]             }
[16:10:34.754]         }))
[16:10:34.754]     }, error = function(ex) {
[16:10:34.754]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:34.754]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:34.754]                 ...future.rng), started = ...future.startTime, 
[16:10:34.754]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:34.754]             version = "1.8"), class = "FutureResult")
[16:10:34.754]     }, finally = {
[16:10:34.754]         if (!identical(...future.workdir, getwd())) 
[16:10:34.754]             setwd(...future.workdir)
[16:10:34.754]         {
[16:10:34.754]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:34.754]                 ...future.oldOptions$nwarnings <- NULL
[16:10:34.754]             }
[16:10:34.754]             base::options(...future.oldOptions)
[16:10:34.754]             if (.Platform$OS.type == "windows") {
[16:10:34.754]                 old_names <- names(...future.oldEnvVars)
[16:10:34.754]                 envs <- base::Sys.getenv()
[16:10:34.754]                 names <- names(envs)
[16:10:34.754]                 common <- intersect(names, old_names)
[16:10:34.754]                 added <- setdiff(names, old_names)
[16:10:34.754]                 removed <- setdiff(old_names, names)
[16:10:34.754]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:34.754]                   envs[common]]
[16:10:34.754]                 NAMES <- toupper(changed)
[16:10:34.754]                 args <- list()
[16:10:34.754]                 for (kk in seq_along(NAMES)) {
[16:10:34.754]                   name <- changed[[kk]]
[16:10:34.754]                   NAME <- NAMES[[kk]]
[16:10:34.754]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.754]                     next
[16:10:34.754]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:34.754]                 }
[16:10:34.754]                 NAMES <- toupper(added)
[16:10:34.754]                 for (kk in seq_along(NAMES)) {
[16:10:34.754]                   name <- added[[kk]]
[16:10:34.754]                   NAME <- NAMES[[kk]]
[16:10:34.754]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.754]                     next
[16:10:34.754]                   args[[name]] <- ""
[16:10:34.754]                 }
[16:10:34.754]                 NAMES <- toupper(removed)
[16:10:34.754]                 for (kk in seq_along(NAMES)) {
[16:10:34.754]                   name <- removed[[kk]]
[16:10:34.754]                   NAME <- NAMES[[kk]]
[16:10:34.754]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.754]                     next
[16:10:34.754]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:34.754]                 }
[16:10:34.754]                 if (length(args) > 0) 
[16:10:34.754]                   base::do.call(base::Sys.setenv, args = args)
[16:10:34.754]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:34.754]             }
[16:10:34.754]             else {
[16:10:34.754]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:34.754]             }
[16:10:34.754]             {
[16:10:34.754]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:34.754]                   0L) {
[16:10:34.754]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:34.754]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:34.754]                   base::options(opts)
[16:10:34.754]                 }
[16:10:34.754]                 {
[16:10:34.754]                   {
[16:10:34.754]                     base::assign(".Random.seed", c(10403L, 4L, 
[16:10:34.754]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[16:10:34.754]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[16:10:34.754]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[16:10:34.754]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[16:10:34.754]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[16:10:34.754]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[16:10:34.754]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[16:10:34.754]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[16:10:34.754]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[16:10:34.754]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[16:10:34.754]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[16:10:34.754]                     -1512233174L, -1985955764L, -425390065L, 
[16:10:34.754]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[16:10:34.754]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[16:10:34.754]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[16:10:34.754]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[16:10:34.754]                     1818328109L, -1284085436L, -1981489558L, 
[16:10:34.754]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[16:10:34.754]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[16:10:34.754]                     -1718567047L, -793788661L, -1133789126L, 
[16:10:34.754]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[16:10:34.754]                     -1823521982L, -1345991523L, -1672661737L, 
[16:10:34.754]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[16:10:34.754]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[16:10:34.754]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[16:10:34.754]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[16:10:34.754]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[16:10:34.754]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[16:10:34.754]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[16:10:34.754]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[16:10:34.754]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[16:10:34.754]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[16:10:34.754]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[16:10:34.754]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[16:10:34.754]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[16:10:34.754]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[16:10:34.754]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[16:10:34.754]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[16:10:34.754]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[16:10:34.754]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[16:10:34.754]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[16:10:34.754]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[16:10:34.754]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[16:10:34.754]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[16:10:34.754]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[16:10:34.754]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[16:10:34.754]                     -1119334354L, -1521015416L, -2041922421L, 
[16:10:34.754]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[16:10:34.754]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[16:10:34.754]                     1232111981L, -1801753084L, -1608606422L, 
[16:10:34.754]                     -1172096363L, 1420874031L, -1210473418L, 
[16:10:34.754]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[16:10:34.754]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[16:10:34.754]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[16:10:34.754]                     679371266L, -591318819L, -104578089L, -172818754L, 
[16:10:34.754]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[16:10:34.754]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[16:10:34.754]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[16:10:34.754]                     -332493318L, -1978392251L, -1691039632L, 
[16:10:34.754]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[16:10:34.754]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[16:10:34.754]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[16:10:34.754]                     87560756L, -87565624L, 426345146L, -699970416L, 
[16:10:34.754]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[16:10:34.754]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[16:10:34.754]                     -1178330196L, -687617348L, -1701912078L, 
[16:10:34.754]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[16:10:34.754]                     -1345416048L, 1816730492L, -1570431212L, 
[16:10:34.754]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[16:10:34.754]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[16:10:34.754]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[16:10:34.754]                     -1493184262L, -1943836976L, -590788308L, 
[16:10:34.754]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[16:10:34.754]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[16:10:34.754]                     1274857340L, -1205842638L, -1938479504L, 
[16:10:34.754]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[16:10:34.754]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[16:10:34.754]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[16:10:34.754]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[16:10:34.754]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[16:10:34.754]                     -1460751252L, 1201879444L, -1459788718L, 
[16:10:34.754]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[16:10:34.754]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[16:10:34.754]                     -420945808L, -1997735900L, -1838404552L, 
[16:10:34.754]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[16:10:34.754]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[16:10:34.754]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[16:10:34.754]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[16:10:34.754]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[16:10:34.754]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[16:10:34.754]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[16:10:34.754]                     942193650L, 751741680L, 689743428L, -18455976L, 
[16:10:34.754]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[16:10:34.754]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[16:10:34.754]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[16:10:34.754]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[16:10:34.754]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[16:10:34.754]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[16:10:34.754]                     -1357570110L, 1896595240L, -2066952276L, 
[16:10:34.754]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[16:10:34.754]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[16:10:34.754]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[16:10:34.754]                     769655120L, 236357794L, 181393736L, -13334772L, 
[16:10:34.754]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[16:10:34.754]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[16:10:34.754]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[16:10:34.754]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[16:10:34.754]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[16:10:34.754]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[16:10:34.754]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[16:10:34.754]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[16:10:34.754]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[16:10:34.754]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[16:10:34.754]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[16:10:34.754]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[16:10:34.754]                     -1365842884L, -438961294L, -1851472272L, 
[16:10:34.754]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[16:10:34.754]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[16:10:34.754]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[16:10:34.754]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[16:10:34.754]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[16:10:34.754]                     -594809770L, -2146766621L, -2013964635L, 
[16:10:34.754]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[16:10:34.754]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[16:10:34.754]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[16:10:34.754]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[16:10:34.754]                     -1426021878L, -1285634264L, 1507547537L, 
[16:10:34.754]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[16:10:34.754]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[16:10:34.754]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[16:10:34.754]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[16:10:34.754]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[16:10:34.754]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[16:10:34.754]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[16:10:34.754]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[16:10:34.754]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[16:10:34.754]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[16:10:34.754]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[16:10:34.754]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[16:10:34.754]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[16:10:34.754]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[16:10:34.754]                     -1604604761L, 1421229008L, -1268333714L, 
[16:10:34.754]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[16:10:34.754]                     -2070476623L, -2099222749L, 1141171236L, 
[16:10:34.754]                     -146426158L, -1797385433L, -1129376399L, 
[16:10:34.754]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[16:10:34.754]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[16:10:34.754]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[16:10:34.754]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[16:10:34.754]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[16:10:34.754]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[16:10:34.754]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[16:10:34.754]                     -1092079724L, -1765622238L, -1882554057L, 
[16:10:34.754]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[16:10:34.754]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[16:10:34.754]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[16:10:34.754]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[16:10:34.754]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[16:10:34.754]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[16:10:34.754]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[16:10:34.754]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[16:10:34.754]                     865377681L, -1127426242L), envir = base::globalenv(), 
[16:10:34.754]                       inherits = FALSE)
[16:10:34.754]                     NULL
[16:10:34.754]                   }
[16:10:34.754]                   options(future.plan = NULL)
[16:10:34.754]                   if (is.na(NA_character_)) 
[16:10:34.754]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:34.754]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:34.754]                   future::plan(list(function (..., envir = parent.frame()) 
[16:10:34.754]                   {
[16:10:34.754]                     future <- SequentialFuture(..., envir = envir)
[16:10:34.754]                     if (!future$lazy) 
[16:10:34.754]                       future <- run(future)
[16:10:34.754]                     invisible(future)
[16:10:34.754]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:34.754]                 }
[16:10:34.754]             }
[16:10:34.754]         }
[16:10:34.754]     })
[16:10:34.754]     if (TRUE) {
[16:10:34.754]         base::sink(type = "output", split = FALSE)
[16:10:34.754]         if (TRUE) {
[16:10:34.754]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:34.754]         }
[16:10:34.754]         else {
[16:10:34.754]             ...future.result["stdout"] <- base::list(NULL)
[16:10:34.754]         }
[16:10:34.754]         base::close(...future.stdout)
[16:10:34.754]         ...future.stdout <- NULL
[16:10:34.754]     }
[16:10:34.754]     ...future.result$conditions <- ...future.conditions
[16:10:34.754]     ...future.result$finished <- base::Sys.time()
[16:10:34.754]     ...future.result
[16:10:34.754] }
[16:10:34.757] assign_globals() ...
[16:10:34.757] List of 5
[16:10:34.757]  $ ...future.FUN            :function (...)  
[16:10:34.757]  $ future.call.arguments    : list()
[16:10:34.757]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.757]  $ ...future.elements_ii    :List of 5
[16:10:34.757]   ..$ : int 0
[16:10:34.757]   ..$ : int 0
[16:10:34.757]   ..$ : int 0
[16:10:34.757]   ..$ : int 0
[16:10:34.757]   ..$ : int 0
[16:10:34.757]  $ ...future.seeds_ii       :List of 5
[16:10:34.757]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[16:10:34.757]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[16:10:34.757]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[16:10:34.757]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[16:10:34.757]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[16:10:34.757]  $ ...future.globals.maxSize: NULL
[16:10:34.757]  - attr(*, "resolved")= logi FALSE
[16:10:34.757]  - attr(*, "total_size")= num 616
[16:10:34.757]  - attr(*, "where")=List of 5
[16:10:34.757]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:10:34.757]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:10:34.757]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:10:34.757]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:10:34.757]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:10:34.757]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.757]  - attr(*, "already-done")= logi TRUE
[16:10:34.764] - reassign environment for ‘...future.FUN’
[16:10:34.764] - copied ‘...future.FUN’ to environment
[16:10:34.764] - copied ‘future.call.arguments’ to environment
[16:10:34.764] - copied ‘...future.elements_ii’ to environment
[16:10:34.765] - copied ‘...future.seeds_ii’ to environment
[16:10:34.765] - copied ‘...future.globals.maxSize’ to environment
[16:10:34.765] assign_globals() ... done
[16:10:34.765] plan(): Setting new future strategy stack:
[16:10:34.765] List of future strategies:
[16:10:34.765] 1. sequential:
[16:10:34.765]    - args: function (..., envir = parent.frame())
[16:10:34.765]    - tweaked: FALSE
[16:10:34.765]    - call: NULL
[16:10:34.765] plan(): nbrOfWorkers() = 1
[16:10:34.766] plan(): Setting new future strategy stack:
[16:10:34.766] List of future strategies:
[16:10:34.766] 1. sequential:
[16:10:34.766]    - args: function (..., envir = parent.frame())
[16:10:34.766]    - tweaked: FALSE
[16:10:34.766]    - call: plan(strategy)
[16:10:34.767] plan(): nbrOfWorkers() = 1
[16:10:34.767] SequentialFuture started (and completed)
[16:10:34.767] - Launch lazy future ... done
[16:10:34.767] run() for ‘SequentialFuture’ ... done
[16:10:34.767] Created future:
[16:10:34.767] SequentialFuture:
[16:10:34.767] Label: ‘future_replicate-1’
[16:10:34.767] Expression:
[16:10:34.767] {
[16:10:34.767]     do.call(function(...) {
[16:10:34.767]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.767]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:34.767]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.767]             on.exit(options(oopts), add = TRUE)
[16:10:34.767]         }
[16:10:34.767]         {
[16:10:34.767]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:34.767]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.767]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.767]                   envir = globalenv(), inherits = FALSE)
[16:10:34.767]                 ...future.FUN(...future.X_jj, ...)
[16:10:34.767]             })
[16:10:34.767]         }
[16:10:34.767]     }, args = future.call.arguments)
[16:10:34.767] }
[16:10:34.767] Lazy evaluation: FALSE
[16:10:34.767] Asynchronous evaluation: FALSE
[16:10:34.767] Local evaluation: TRUE
[16:10:34.767] Environment: R_GlobalEnv
[16:10:34.767] Capture standard output: TRUE
[16:10:34.767] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:34.767] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:34.767] Packages: <none>
[16:10:34.767] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:34.767] Resolved: TRUE
[16:10:34.767] Value: 280 bytes of class ‘list’
[16:10:34.767] Early signaling: FALSE
[16:10:34.767] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:34.767] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:10:34.768] Chunk #1 of 1 ... DONE
[16:10:34.768] Launching 1 futures (chunks) ... DONE
[16:10:34.768] Resolving 1 futures (chunks) ...
[16:10:34.768] resolve() on list ...
[16:10:34.769]  recursive: 0
[16:10:34.769]  length: 1
[16:10:34.769] 
[16:10:34.769] resolved() for ‘SequentialFuture’ ...
[16:10:34.769] - state: ‘finished’
[16:10:34.769] - run: TRUE
[16:10:34.769] - result: ‘FutureResult’
[16:10:34.769] resolved() for ‘SequentialFuture’ ... done
[16:10:34.769] Future #1
[16:10:34.769] signalConditionsASAP(SequentialFuture, pos=1) ...
[16:10:34.769] - nx: 1
[16:10:34.770] - relay: TRUE
[16:10:34.770] - stdout: TRUE
[16:10:34.770] - signal: TRUE
[16:10:34.770] - resignal: FALSE
[16:10:34.770] - force: TRUE
[16:10:34.770] - relayed: [n=1] FALSE
[16:10:34.770] - queued futures: [n=1] FALSE
[16:10:34.770]  - until=1
[16:10:34.770]  - relaying element #1
[16:10:34.770] - relayed: [n=1] TRUE
[16:10:34.770] - queued futures: [n=1] TRUE
[16:10:34.771] signalConditionsASAP(SequentialFuture, pos=1) ... done
[16:10:34.771]  length: 0 (resolved future 1)
[16:10:34.771] Relaying remaining futures
[16:10:34.771] signalConditionsASAP(NULL, pos=0) ...
[16:10:34.771] - nx: 1
[16:10:34.771] - relay: TRUE
[16:10:34.771] - stdout: TRUE
[16:10:34.771] - signal: TRUE
[16:10:34.771] - resignal: FALSE
[16:10:34.771] - force: TRUE
[16:10:34.771] - relayed: [n=1] TRUE
[16:10:34.771] - queued futures: [n=1] TRUE
 - flush all
[16:10:34.772] - relayed: [n=1] TRUE
[16:10:34.772] - queued futures: [n=1] TRUE
[16:10:34.772] signalConditionsASAP(NULL, pos=0) ... done
[16:10:34.772] resolve() on list ... DONE
[16:10:34.772]  - Number of value chunks collected: 1
[16:10:34.772] Resolving 1 futures (chunks) ... DONE
[16:10:34.772] Reducing values from 1 chunks ...
[16:10:34.772]  - Number of values collected after concatenation: 5
[16:10:34.772]  - Number of values expected: 5
[16:10:34.772] Reducing values from 1 chunks ... DONE
[16:10:34.773] future_lapply() ... DONE
[16:10:34.773] future_lapply() ...
[16:10:34.773] Generating random seeds ...
[16:10:34.773] Generating random seed streams for 5 elements ...
[16:10:34.773] Generating random seed streams for 5 elements ... DONE
[16:10:34.773] Generating random seeds ... DONE
[16:10:34.773] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:10:34.774] Number of chunks: 1
[16:10:34.774] getGlobalsAndPackagesXApply() ...
[16:10:34.774]  - future.globals: TRUE
[16:10:34.774] getGlobalsAndPackages() ...
[16:10:34.774] Searching for globals...
[16:10:34.775] - globals found: [2] ‘FUN’, ‘sample’
[16:10:34.775] Searching for globals ... DONE
[16:10:34.775] Resolving globals: FALSE
[16:10:34.776] The total size of the 1 globals is 616 bytes (616 bytes)
[16:10:34.776] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:10:34.776] - globals: [1] ‘FUN’
[16:10:34.776] 
[16:10:34.776] getGlobalsAndPackages() ... DONE
[16:10:34.776]  - globals found/used: [n=1] ‘FUN’
[16:10:34.777]  - needed namespaces: [n=0] 
[16:10:34.777] Finding globals ... DONE
[16:10:34.777]  - use_args: TRUE
[16:10:34.777]  - Getting '...' globals ...
[16:10:34.777] resolve() on list ...
[16:10:34.777]  recursive: 0
[16:10:34.777]  length: 1
[16:10:34.779]  elements: ‘...’
[16:10:34.779]  length: 0 (resolved future 1)
[16:10:34.779] resolve() on list ... DONE
[16:10:34.779]    - '...' content: [n=0] 
[16:10:34.779] List of 1
[16:10:34.779]  $ ...: list()
[16:10:34.779]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.779]  - attr(*, "where")=List of 1
[16:10:34.779]   ..$ ...:<environment: 0x55cf8eac1e80> 
[16:10:34.779]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.779]  - attr(*, "resolved")= logi TRUE
[16:10:34.779]  - attr(*, "total_size")= num NA
[16:10:34.782]  - Getting '...' globals ... DONE
[16:10:34.782] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:10:34.782] List of 2
[16:10:34.782]  $ ...future.FUN:function (...)  
[16:10:34.782]  $ ...          : list()
[16:10:34.782]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.782]  - attr(*, "where")=List of 2
[16:10:34.782]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:10:34.782]   ..$ ...          :<environment: 0x55cf8eac1e80> 
[16:10:34.782]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.782]  - attr(*, "resolved")= logi FALSE
[16:10:34.782]  - attr(*, "total_size")= num 616
[16:10:34.784] Packages to be attached in all futures: [n=0] 
[16:10:34.784] getGlobalsAndPackagesXApply() ... DONE
[16:10:34.785] Number of futures (= number of chunks): 1
[16:10:34.785] Launching 1 futures (chunks) ...
[16:10:34.785] Chunk #1 of 1 ...
[16:10:34.785]  - Finding globals in 'X' for chunk #1 ...
[16:10:34.785] getGlobalsAndPackages() ...
[16:10:34.785] Searching for globals...
[16:10:34.785] 
[16:10:34.785] Searching for globals ... DONE
[16:10:34.786] - globals: [0] <none>
[16:10:34.786] getGlobalsAndPackages() ... DONE
[16:10:34.786]    + additional globals found: [n=0] 
[16:10:34.786]    + additional namespaces needed: [n=0] 
[16:10:34.786]  - Finding globals in 'X' for chunk #1 ... DONE
[16:10:34.786]  - Adjusted option 'future.globals.maxSize': 524288000 -> 5 * 524288000 = 2621440000 (bytes)
[16:10:34.786]  - seeds: [5] <seeds>
[16:10:34.786] getGlobalsAndPackages() ...
[16:10:34.786] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:34.786] Resolving globals: FALSE
[16:10:34.787] Tweak future expression to call with '...' arguments ...
[16:10:34.787] {
[16:10:34.787]     do.call(function(...) {
[16:10:34.787]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.787]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:34.787]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.787]             on.exit(options(oopts), add = TRUE)
[16:10:34.787]         }
[16:10:34.787]         {
[16:10:34.787]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:34.787]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.787]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.787]                   envir = globalenv(), inherits = FALSE)
[16:10:34.787]                 ...future.FUN(...future.X_jj, ...)
[16:10:34.787]             })
[16:10:34.787]         }
[16:10:34.787]     }, args = future.call.arguments)
[16:10:34.787] }
[16:10:34.787] Tweak future expression to call with '...' arguments ... DONE
[16:10:34.787] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:34.787] 
[16:10:34.787] getGlobalsAndPackages() ... DONE
[16:10:34.788] run() for ‘Future’ ...
[16:10:34.788] - state: ‘created’
[16:10:34.788] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:10:34.788] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:10:34.788] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:10:34.788]   - Field: ‘label’
[16:10:34.788]   - Field: ‘local’
[16:10:34.789]   - Field: ‘owner’
[16:10:34.789]   - Field: ‘envir’
[16:10:34.789]   - Field: ‘packages’
[16:10:34.789]   - Field: ‘gc’
[16:10:34.789]   - Field: ‘conditions’
[16:10:34.789]   - Field: ‘expr’
[16:10:34.789]   - Field: ‘uuid’
[16:10:34.789]   - Field: ‘seed’
[16:10:34.789]   - Field: ‘version’
[16:10:34.789]   - Field: ‘result’
[16:10:34.789]   - Field: ‘asynchronous’
[16:10:34.790]   - Field: ‘calls’
[16:10:34.790]   - Field: ‘globals’
[16:10:34.790]   - Field: ‘stdout’
[16:10:34.790]   - Field: ‘earlySignal’
[16:10:34.790]   - Field: ‘lazy’
[16:10:34.790]   - Field: ‘state’
[16:10:34.790] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:10:34.790] - Launch lazy future ...
[16:10:34.790] Packages needed by the future expression (n = 0): <none>
[16:10:34.790] Packages needed by future strategies (n = 0): <none>
[16:10:34.791] {
[16:10:34.791]     {
[16:10:34.791]         {
[16:10:34.791]             ...future.startTime <- base::Sys.time()
[16:10:34.791]             {
[16:10:34.791]                 {
[16:10:34.791]                   {
[16:10:34.791]                     base::local({
[16:10:34.791]                       has_future <- base::requireNamespace("future", 
[16:10:34.791]                         quietly = TRUE)
[16:10:34.791]                       if (has_future) {
[16:10:34.791]                         ns <- base::getNamespace("future")
[16:10:34.791]                         version <- ns[[".package"]][["version"]]
[16:10:34.791]                         if (is.null(version)) 
[16:10:34.791]                           version <- utils::packageVersion("future")
[16:10:34.791]                       }
[16:10:34.791]                       else {
[16:10:34.791]                         version <- NULL
[16:10:34.791]                       }
[16:10:34.791]                       if (!has_future || version < "1.8.0") {
[16:10:34.791]                         info <- base::c(r_version = base::gsub("R version ", 
[16:10:34.791]                           "", base::R.version$version.string), 
[16:10:34.791]                           platform = base::sprintf("%s (%s-bit)", 
[16:10:34.791]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:34.791]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:34.791]                             "release", "version")], collapse = " "), 
[16:10:34.791]                           hostname = base::Sys.info()[["nodename"]])
[16:10:34.791]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:10:34.791]                           info)
[16:10:34.791]                         info <- base::paste(info, collapse = "; ")
[16:10:34.791]                         if (!has_future) {
[16:10:34.791]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:34.791]                             info)
[16:10:34.791]                         }
[16:10:34.791]                         else {
[16:10:34.791]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:34.791]                             info, version)
[16:10:34.791]                         }
[16:10:34.791]                         base::stop(msg)
[16:10:34.791]                       }
[16:10:34.791]                     })
[16:10:34.791]                   }
[16:10:34.791]                   options(future.plan = NULL)
[16:10:34.791]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:34.791]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:34.791]                 }
[16:10:34.791]                 ...future.workdir <- getwd()
[16:10:34.791]             }
[16:10:34.791]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:34.791]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:34.791]         }
[16:10:34.791]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:34.791]             future.globals.maxSize = 2621440000, future.globals.method = NULL, 
[16:10:34.791]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:34.791]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:34.791]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:34.791]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:34.791]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:34.791]             base::names(...future.oldOptions))
[16:10:34.791]     }
[16:10:34.791]     if (FALSE) {
[16:10:34.791]     }
[16:10:34.791]     else {
[16:10:34.791]         if (TRUE) {
[16:10:34.791]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:34.791]                 open = "w")
[16:10:34.791]         }
[16:10:34.791]         else {
[16:10:34.791]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:34.791]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:34.791]         }
[16:10:34.791]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:34.791]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:34.791]             base::sink(type = "output", split = FALSE)
[16:10:34.791]             base::close(...future.stdout)
[16:10:34.791]         }, add = TRUE)
[16:10:34.791]     }
[16:10:34.791]     ...future.frame <- base::sys.nframe()
[16:10:34.791]     ...future.conditions <- base::list()
[16:10:34.791]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:34.791]     if (FALSE) {
[16:10:34.791]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:34.791]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:34.791]     }
[16:10:34.791]     ...future.result <- base::tryCatch({
[16:10:34.791]         base::withCallingHandlers({
[16:10:34.791]             ...future.value <- base::withVisible(base::local({
[16:10:34.791]                 do.call(function(...) {
[16:10:34.791]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.791]                   if (!identical(...future.globals.maxSize.org, 
[16:10:34.791]                     ...future.globals.maxSize)) {
[16:10:34.791]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.791]                     on.exit(options(oopts), add = TRUE)
[16:10:34.791]                   }
[16:10:34.791]                   {
[16:10:34.791]                     lapply(seq_along(...future.elements_ii), 
[16:10:34.791]                       FUN = function(jj) {
[16:10:34.791]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.791]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.791]                           envir = globalenv(), inherits = FALSE)
[16:10:34.791]                         ...future.FUN(...future.X_jj, ...)
[16:10:34.791]                       })
[16:10:34.791]                   }
[16:10:34.791]                 }, args = future.call.arguments)
[16:10:34.791]             }))
[16:10:34.791]             future::FutureResult(value = ...future.value$value, 
[16:10:34.791]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:34.791]                   ...future.rng), globalenv = if (FALSE) 
[16:10:34.791]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:34.791]                     ...future.globalenv.names))
[16:10:34.791]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:34.791]         }, condition = base::local({
[16:10:34.791]             c <- base::c
[16:10:34.791]             inherits <- base::inherits
[16:10:34.791]             invokeRestart <- base::invokeRestart
[16:10:34.791]             length <- base::length
[16:10:34.791]             list <- base::list
[16:10:34.791]             seq.int <- base::seq.int
[16:10:34.791]             signalCondition <- base::signalCondition
[16:10:34.791]             sys.calls <- base::sys.calls
[16:10:34.791]             `[[` <- base::`[[`
[16:10:34.791]             `+` <- base::`+`
[16:10:34.791]             `<<-` <- base::`<<-`
[16:10:34.791]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:34.791]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:34.791]                   3L)]
[16:10:34.791]             }
[16:10:34.791]             function(cond) {
[16:10:34.791]                 is_error <- inherits(cond, "error")
[16:10:34.791]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:34.791]                   NULL)
[16:10:34.791]                 if (is_error) {
[16:10:34.791]                   sessionInformation <- function() {
[16:10:34.791]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:34.791]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:34.791]                       search = base::search(), system = base::Sys.info())
[16:10:34.791]                   }
[16:10:34.791]                   ...future.conditions[[length(...future.conditions) + 
[16:10:34.791]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:34.791]                     cond$call), session = sessionInformation(), 
[16:10:34.791]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:34.791]                   signalCondition(cond)
[16:10:34.791]                 }
[16:10:34.791]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:34.791]                 "immediateCondition"))) {
[16:10:34.791]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:34.791]                   ...future.conditions[[length(...future.conditions) + 
[16:10:34.791]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:34.791]                   if (TRUE && !signal) {
[16:10:34.791]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:34.791]                     {
[16:10:34.791]                       inherits <- base::inherits
[16:10:34.791]                       invokeRestart <- base::invokeRestart
[16:10:34.791]                       is.null <- base::is.null
[16:10:34.791]                       muffled <- FALSE
[16:10:34.791]                       if (inherits(cond, "message")) {
[16:10:34.791]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:34.791]                         if (muffled) 
[16:10:34.791]                           invokeRestart("muffleMessage")
[16:10:34.791]                       }
[16:10:34.791]                       else if (inherits(cond, "warning")) {
[16:10:34.791]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:34.791]                         if (muffled) 
[16:10:34.791]                           invokeRestart("muffleWarning")
[16:10:34.791]                       }
[16:10:34.791]                       else if (inherits(cond, "condition")) {
[16:10:34.791]                         if (!is.null(pattern)) {
[16:10:34.791]                           computeRestarts <- base::computeRestarts
[16:10:34.791]                           grepl <- base::grepl
[16:10:34.791]                           restarts <- computeRestarts(cond)
[16:10:34.791]                           for (restart in restarts) {
[16:10:34.791]                             name <- restart$name
[16:10:34.791]                             if (is.null(name)) 
[16:10:34.791]                               next
[16:10:34.791]                             if (!grepl(pattern, name)) 
[16:10:34.791]                               next
[16:10:34.791]                             invokeRestart(restart)
[16:10:34.791]                             muffled <- TRUE
[16:10:34.791]                             break
[16:10:34.791]                           }
[16:10:34.791]                         }
[16:10:34.791]                       }
[16:10:34.791]                       invisible(muffled)
[16:10:34.791]                     }
[16:10:34.791]                     muffleCondition(cond, pattern = "^muffle")
[16:10:34.791]                   }
[16:10:34.791]                 }
[16:10:34.791]                 else {
[16:10:34.791]                   if (TRUE) {
[16:10:34.791]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:34.791]                     {
[16:10:34.791]                       inherits <- base::inherits
[16:10:34.791]                       invokeRestart <- base::invokeRestart
[16:10:34.791]                       is.null <- base::is.null
[16:10:34.791]                       muffled <- FALSE
[16:10:34.791]                       if (inherits(cond, "message")) {
[16:10:34.791]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:34.791]                         if (muffled) 
[16:10:34.791]                           invokeRestart("muffleMessage")
[16:10:34.791]                       }
[16:10:34.791]                       else if (inherits(cond, "warning")) {
[16:10:34.791]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:34.791]                         if (muffled) 
[16:10:34.791]                           invokeRestart("muffleWarning")
[16:10:34.791]                       }
[16:10:34.791]                       else if (inherits(cond, "condition")) {
[16:10:34.791]                         if (!is.null(pattern)) {
[16:10:34.791]                           computeRestarts <- base::computeRestarts
[16:10:34.791]                           grepl <- base::grepl
[16:10:34.791]                           restarts <- computeRestarts(cond)
[16:10:34.791]                           for (restart in restarts) {
[16:10:34.791]                             name <- restart$name
[16:10:34.791]                             if (is.null(name)) 
[16:10:34.791]                               next
[16:10:34.791]                             if (!grepl(pattern, name)) 
[16:10:34.791]                               next
[16:10:34.791]                             invokeRestart(restart)
[16:10:34.791]                             muffled <- TRUE
[16:10:34.791]                             break
[16:10:34.791]                           }
[16:10:34.791]                         }
[16:10:34.791]                       }
[16:10:34.791]                       invisible(muffled)
[16:10:34.791]                     }
[16:10:34.791]                     muffleCondition(cond, pattern = "^muffle")
[16:10:34.791]                   }
[16:10:34.791]                 }
[16:10:34.791]             }
[16:10:34.791]         }))
[16:10:34.791]     }, error = function(ex) {
[16:10:34.791]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:34.791]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:34.791]                 ...future.rng), started = ...future.startTime, 
[16:10:34.791]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:34.791]             version = "1.8"), class = "FutureResult")
[16:10:34.791]     }, finally = {
[16:10:34.791]         if (!identical(...future.workdir, getwd())) 
[16:10:34.791]             setwd(...future.workdir)
[16:10:34.791]         {
[16:10:34.791]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:34.791]                 ...future.oldOptions$nwarnings <- NULL
[16:10:34.791]             }
[16:10:34.791]             base::options(...future.oldOptions)
[16:10:34.791]             if (.Platform$OS.type == "windows") {
[16:10:34.791]                 old_names <- names(...future.oldEnvVars)
[16:10:34.791]                 envs <- base::Sys.getenv()
[16:10:34.791]                 names <- names(envs)
[16:10:34.791]                 common <- intersect(names, old_names)
[16:10:34.791]                 added <- setdiff(names, old_names)
[16:10:34.791]                 removed <- setdiff(old_names, names)
[16:10:34.791]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:34.791]                   envs[common]]
[16:10:34.791]                 NAMES <- toupper(changed)
[16:10:34.791]                 args <- list()
[16:10:34.791]                 for (kk in seq_along(NAMES)) {
[16:10:34.791]                   name <- changed[[kk]]
[16:10:34.791]                   NAME <- NAMES[[kk]]
[16:10:34.791]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.791]                     next
[16:10:34.791]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:34.791]                 }
[16:10:34.791]                 NAMES <- toupper(added)
[16:10:34.791]                 for (kk in seq_along(NAMES)) {
[16:10:34.791]                   name <- added[[kk]]
[16:10:34.791]                   NAME <- NAMES[[kk]]
[16:10:34.791]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.791]                     next
[16:10:34.791]                   args[[name]] <- ""
[16:10:34.791]                 }
[16:10:34.791]                 NAMES <- toupper(removed)
[16:10:34.791]                 for (kk in seq_along(NAMES)) {
[16:10:34.791]                   name <- removed[[kk]]
[16:10:34.791]                   NAME <- NAMES[[kk]]
[16:10:34.791]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.791]                     next
[16:10:34.791]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:34.791]                 }
[16:10:34.791]                 if (length(args) > 0) 
[16:10:34.791]                   base::do.call(base::Sys.setenv, args = args)
[16:10:34.791]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:34.791]             }
[16:10:34.791]             else {
[16:10:34.791]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:34.791]             }
[16:10:34.791]             {
[16:10:34.791]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:34.791]                   0L) {
[16:10:34.791]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:34.791]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:34.791]                   base::options(opts)
[16:10:34.791]                 }
[16:10:34.791]                 {
[16:10:34.791]                   {
[16:10:34.791]                     base::assign(".Random.seed", c(10403L, 6L, 
[16:10:34.791]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[16:10:34.791]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[16:10:34.791]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[16:10:34.791]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[16:10:34.791]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[16:10:34.791]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[16:10:34.791]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[16:10:34.791]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[16:10:34.791]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[16:10:34.791]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[16:10:34.791]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[16:10:34.791]                     -1512233174L, -1985955764L, -425390065L, 
[16:10:34.791]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[16:10:34.791]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[16:10:34.791]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[16:10:34.791]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[16:10:34.791]                     1818328109L, -1284085436L, -1981489558L, 
[16:10:34.791]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[16:10:34.791]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[16:10:34.791]                     -1718567047L, -793788661L, -1133789126L, 
[16:10:34.791]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[16:10:34.791]                     -1823521982L, -1345991523L, -1672661737L, 
[16:10:34.791]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[16:10:34.791]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[16:10:34.791]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[16:10:34.791]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[16:10:34.791]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[16:10:34.791]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[16:10:34.791]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[16:10:34.791]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[16:10:34.791]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[16:10:34.791]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[16:10:34.791]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[16:10:34.791]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[16:10:34.791]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[16:10:34.791]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[16:10:34.791]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[16:10:34.791]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[16:10:34.791]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[16:10:34.791]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[16:10:34.791]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[16:10:34.791]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[16:10:34.791]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[16:10:34.791]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[16:10:34.791]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[16:10:34.791]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[16:10:34.791]                     -1119334354L, -1521015416L, -2041922421L, 
[16:10:34.791]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[16:10:34.791]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[16:10:34.791]                     1232111981L, -1801753084L, -1608606422L, 
[16:10:34.791]                     -1172096363L, 1420874031L, -1210473418L, 
[16:10:34.791]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[16:10:34.791]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[16:10:34.791]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[16:10:34.791]                     679371266L, -591318819L, -104578089L, -172818754L, 
[16:10:34.791]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[16:10:34.791]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[16:10:34.791]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[16:10:34.791]                     -332493318L, -1978392251L, -1691039632L, 
[16:10:34.791]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[16:10:34.791]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[16:10:34.791]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[16:10:34.791]                     87560756L, -87565624L, 426345146L, -699970416L, 
[16:10:34.791]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[16:10:34.791]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[16:10:34.791]                     -1178330196L, -687617348L, -1701912078L, 
[16:10:34.791]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[16:10:34.791]                     -1345416048L, 1816730492L, -1570431212L, 
[16:10:34.791]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[16:10:34.791]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[16:10:34.791]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[16:10:34.791]                     -1493184262L, -1943836976L, -590788308L, 
[16:10:34.791]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[16:10:34.791]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[16:10:34.791]                     1274857340L, -1205842638L, -1938479504L, 
[16:10:34.791]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[16:10:34.791]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[16:10:34.791]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[16:10:34.791]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[16:10:34.791]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[16:10:34.791]                     -1460751252L, 1201879444L, -1459788718L, 
[16:10:34.791]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[16:10:34.791]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[16:10:34.791]                     -420945808L, -1997735900L, -1838404552L, 
[16:10:34.791]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[16:10:34.791]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[16:10:34.791]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[16:10:34.791]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[16:10:34.791]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[16:10:34.791]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[16:10:34.791]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[16:10:34.791]                     942193650L, 751741680L, 689743428L, -18455976L, 
[16:10:34.791]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[16:10:34.791]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[16:10:34.791]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[16:10:34.791]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[16:10:34.791]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[16:10:34.791]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[16:10:34.791]                     -1357570110L, 1896595240L, -2066952276L, 
[16:10:34.791]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[16:10:34.791]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[16:10:34.791]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[16:10:34.791]                     769655120L, 236357794L, 181393736L, -13334772L, 
[16:10:34.791]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[16:10:34.791]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[16:10:34.791]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[16:10:34.791]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[16:10:34.791]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[16:10:34.791]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[16:10:34.791]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[16:10:34.791]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[16:10:34.791]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[16:10:34.791]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[16:10:34.791]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[16:10:34.791]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[16:10:34.791]                     -1365842884L, -438961294L, -1851472272L, 
[16:10:34.791]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[16:10:34.791]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[16:10:34.791]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[16:10:34.791]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[16:10:34.791]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[16:10:34.791]                     -594809770L, -2146766621L, -2013964635L, 
[16:10:34.791]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[16:10:34.791]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[16:10:34.791]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[16:10:34.791]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[16:10:34.791]                     -1426021878L, -1285634264L, 1507547537L, 
[16:10:34.791]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[16:10:34.791]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[16:10:34.791]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[16:10:34.791]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[16:10:34.791]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[16:10:34.791]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[16:10:34.791]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[16:10:34.791]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[16:10:34.791]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[16:10:34.791]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[16:10:34.791]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[16:10:34.791]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[16:10:34.791]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[16:10:34.791]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[16:10:34.791]                     -1604604761L, 1421229008L, -1268333714L, 
[16:10:34.791]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[16:10:34.791]                     -2070476623L, -2099222749L, 1141171236L, 
[16:10:34.791]                     -146426158L, -1797385433L, -1129376399L, 
[16:10:34.791]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[16:10:34.791]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[16:10:34.791]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[16:10:34.791]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[16:10:34.791]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[16:10:34.791]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[16:10:34.791]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[16:10:34.791]                     -1092079724L, -1765622238L, -1882554057L, 
[16:10:34.791]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[16:10:34.791]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[16:10:34.791]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[16:10:34.791]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[16:10:34.791]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[16:10:34.791]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[16:10:34.791]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[16:10:34.791]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[16:10:34.791]                     865377681L, -1127426242L), envir = base::globalenv(), 
[16:10:34.791]                       inherits = FALSE)
[16:10:34.791]                     NULL
[16:10:34.791]                   }
[16:10:34.791]                   options(future.plan = NULL)
[16:10:34.791]                   if (is.na(NA_character_)) 
[16:10:34.791]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:34.791]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:34.791]                   future::plan(list(function (..., envir = parent.frame()) 
[16:10:34.791]                   {
[16:10:34.791]                     future <- SequentialFuture(..., envir = envir)
[16:10:34.791]                     if (!future$lazy) 
[16:10:34.791]                       future <- run(future)
[16:10:34.791]                     invisible(future)
[16:10:34.791]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:34.791]                 }
[16:10:34.791]             }
[16:10:34.791]         }
[16:10:34.791]     })
[16:10:34.791]     if (TRUE) {
[16:10:34.791]         base::sink(type = "output", split = FALSE)
[16:10:34.791]         if (TRUE) {
[16:10:34.791]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:34.791]         }
[16:10:34.791]         else {
[16:10:34.791]             ...future.result["stdout"] <- base::list(NULL)
[16:10:34.791]         }
[16:10:34.791]         base::close(...future.stdout)
[16:10:34.791]         ...future.stdout <- NULL
[16:10:34.791]     }
[16:10:34.791]     ...future.result$conditions <- ...future.conditions
[16:10:34.791]     ...future.result$finished <- base::Sys.time()
[16:10:34.791]     ...future.result
[16:10:34.791] }
[16:10:34.793] assign_globals() ...
[16:10:34.793] List of 5
[16:10:34.793]  $ ...future.FUN            :function (...)  
[16:10:34.793]  $ future.call.arguments    : list()
[16:10:34.793]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.793]  $ ...future.elements_ii    :List of 5
[16:10:34.793]   ..$ : int 0
[16:10:34.793]   ..$ : int 0
[16:10:34.793]   ..$ : int 0
[16:10:34.793]   ..$ : int 0
[16:10:34.793]   ..$ : int 0
[16:10:34.793]  $ ...future.seeds_ii       :List of 5
[16:10:34.793]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[16:10:34.793]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[16:10:34.793]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[16:10:34.793]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[16:10:34.793]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[16:10:34.793]  $ ...future.globals.maxSize: NULL
[16:10:34.793]  - attr(*, "resolved")= logi FALSE
[16:10:34.793]  - attr(*, "total_size")= num 616
[16:10:34.793]  - attr(*, "where")=List of 5
[16:10:34.793]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:10:34.793]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:10:34.793]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:10:34.793]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:10:34.793]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:10:34.793]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.793]  - attr(*, "already-done")= logi TRUE
[16:10:34.800] - reassign environment for ‘...future.FUN’
[16:10:34.800] - copied ‘...future.FUN’ to environment
[16:10:34.800] - copied ‘future.call.arguments’ to environment
[16:10:34.801] - copied ‘...future.elements_ii’ to environment
[16:10:34.801] - copied ‘...future.seeds_ii’ to environment
[16:10:34.801] - copied ‘...future.globals.maxSize’ to environment
[16:10:34.801] assign_globals() ... done
[16:10:34.802] plan(): Setting new future strategy stack:
[16:10:34.802] List of future strategies:
[16:10:34.802] 1. sequential:
[16:10:34.802]    - args: function (..., envir = parent.frame())
[16:10:34.802]    - tweaked: FALSE
[16:10:34.802]    - call: NULL
[16:10:34.803] plan(): nbrOfWorkers() = 1
[16:10:34.804] plan(): Setting new future strategy stack:
[16:10:34.804] List of future strategies:
[16:10:34.804] 1. sequential:
[16:10:34.804]    - args: function (..., envir = parent.frame())
[16:10:34.804]    - tweaked: FALSE
[16:10:34.804]    - call: plan(strategy)
[16:10:34.804] plan(): nbrOfWorkers() = 1
[16:10:34.804] SequentialFuture started (and completed)
[16:10:34.804] - Launch lazy future ... done
[16:10:34.805] run() for ‘SequentialFuture’ ... done
[16:10:34.805] Created future:
[16:10:34.805] SequentialFuture:
[16:10:34.805] Label: ‘future_replicate-1’
[16:10:34.805] Expression:
[16:10:34.805] {
[16:10:34.805]     do.call(function(...) {
[16:10:34.805]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.805]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:34.805]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.805]             on.exit(options(oopts), add = TRUE)
[16:10:34.805]         }
[16:10:34.805]         {
[16:10:34.805]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:34.805]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.805]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.805]                   envir = globalenv(), inherits = FALSE)
[16:10:34.805]                 ...future.FUN(...future.X_jj, ...)
[16:10:34.805]             })
[16:10:34.805]         }
[16:10:34.805]     }, args = future.call.arguments)
[16:10:34.805] }
[16:10:34.805] Lazy evaluation: FALSE
[16:10:34.805] Asynchronous evaluation: FALSE
[16:10:34.805] Local evaluation: TRUE
[16:10:34.805] Environment: R_GlobalEnv
[16:10:34.805] Capture standard output: TRUE
[16:10:34.805] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:34.805] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:34.805] Packages: <none>
[16:10:34.805] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:34.805] Resolved: TRUE
[16:10:34.805] Value: 280 bytes of class ‘list’
[16:10:34.805] Early signaling: FALSE
[16:10:34.805] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:34.805] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:10:34.806] Chunk #1 of 1 ... DONE
[16:10:34.806] Launching 1 futures (chunks) ... DONE
[16:10:34.806] Resolving 1 futures (chunks) ...
[16:10:34.806] resolve() on list ...
[16:10:34.806]  recursive: 0
[16:10:34.806]  length: 1
[16:10:34.806] 
[16:10:34.806] resolved() for ‘SequentialFuture’ ...
[16:10:34.806] - state: ‘finished’
[16:10:34.807] - run: TRUE
[16:10:34.807] - result: ‘FutureResult’
[16:10:34.807] resolved() for ‘SequentialFuture’ ... done
[16:10:34.807] Future #1
[16:10:34.807] signalConditionsASAP(SequentialFuture, pos=1) ...
[16:10:34.807] - nx: 1
[16:10:34.807] - relay: TRUE
[16:10:34.807] - stdout: TRUE
[16:10:34.807] - signal: TRUE
[16:10:34.807] - resignal: FALSE
[16:10:34.807] - force: TRUE
[16:10:34.808] - relayed: [n=1] FALSE
[16:10:34.808] - queued futures: [n=1] FALSE
[16:10:34.808]  - until=1
[16:10:34.808]  - relaying element #1
[16:10:34.808] - relayed: [n=1] TRUE
[16:10:34.808] - queued futures: [n=1] TRUE
[16:10:34.808] signalConditionsASAP(SequentialFuture, pos=1) ... done
[16:10:34.808]  length: 0 (resolved future 1)
[16:10:34.808] Relaying remaining futures
[16:10:34.808] signalConditionsASAP(NULL, pos=0) ...
[16:10:34.808] - nx: 1
[16:10:34.809] - relay: TRUE
[16:10:34.809] - stdout: TRUE
[16:10:34.809] - signal: TRUE
[16:10:34.809] - resignal: FALSE
[16:10:34.809] - force: TRUE
[16:10:34.809] - relayed: [n=1] TRUE
[16:10:34.809] - queued futures: [n=1] TRUE
 - flush all
[16:10:34.809] - relayed: [n=1] TRUE
[16:10:34.809] - queued futures: [n=1] TRUE
[16:10:34.809] signalConditionsASAP(NULL, pos=0) ... done
[16:10:34.809] resolve() on list ... DONE
[16:10:34.810]  - Number of value chunks collected: 1
[16:10:34.810] Resolving 1 futures (chunks) ... DONE
[16:10:34.810] Reducing values from 1 chunks ...
[16:10:34.810]  - Number of values collected after concatenation: 5
[16:10:34.810]  - Number of values expected: 5
[16:10:34.810] Reducing values from 1 chunks ... DONE
[16:10:34.810] future_lapply() ... DONE
- example(replicate) ...
[16:10:34.810] future_lapply() ...
[16:10:34.811] Generating random seeds ...
[16:10:34.811] Generating random seed streams for 5 elements ...
[16:10:34.811] Generating random seed streams for 5 elements ... DONE
[16:10:34.811] Generating random seeds ... DONE
[16:10:34.811] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:10:34.812] Number of chunks: 1
[16:10:34.812] getGlobalsAndPackagesXApply() ...
[16:10:34.812]  - future.globals: TRUE
[16:10:34.812] getGlobalsAndPackages() ...
[16:10:34.812] Searching for globals...
[16:10:34.814] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[16:10:34.814] Searching for globals ... DONE
[16:10:34.814] Resolving globals: FALSE
[16:10:34.814] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[16:10:34.815] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[16:10:34.815] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[16:10:34.815] 
[16:10:34.815] getGlobalsAndPackages() ... DONE
[16:10:34.815]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[16:10:34.815]  - needed namespaces: [n=0] 
[16:10:34.815] Finding globals ... DONE
[16:10:34.815]  - use_args: TRUE
[16:10:34.815]  - Getting '...' globals ...
[16:10:34.816] resolve() on list ...
[16:10:34.816]  recursive: 0
[16:10:34.816]  length: 1
[16:10:34.816]  elements: ‘...’
[16:10:34.816]  length: 0 (resolved future 1)
[16:10:34.816] resolve() on list ... DONE
[16:10:34.816]    - '...' content: [n=0] 
[16:10:34.816] List of 1
[16:10:34.816]  $ ...: list()
[16:10:34.816]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.816]  - attr(*, "where")=List of 1
[16:10:34.816]   ..$ ...:<environment: 0x55cf8cc9a548> 
[16:10:34.816]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.816]  - attr(*, "resolved")= logi TRUE
[16:10:34.816]  - attr(*, "total_size")= num NA
[16:10:34.819]  - Getting '...' globals ... DONE
[16:10:34.819] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[16:10:34.819] List of 4
[16:10:34.819]  $ ...future.FUN:function (...)  
[16:10:34.819]  $ foo          :function (x = 1, y = 2)  
[16:10:34.819]  $ x            : num 3
[16:10:34.819]  $ ...          : list()
[16:10:34.819]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.819]  - attr(*, "where")=List of 4
[16:10:34.819]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:10:34.819]   ..$ foo          :<environment: R_EmptyEnv> 
[16:10:34.819]   ..$ x            :<environment: R_EmptyEnv> 
[16:10:34.819]   ..$ ...          :<environment: 0x55cf8cc9a548> 
[16:10:34.819]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.819]  - attr(*, "resolved")= logi FALSE
[16:10:34.819]  - attr(*, "total_size")= num 2200
[16:10:34.822] Packages to be attached in all futures: [n=0] 
[16:10:34.822] getGlobalsAndPackagesXApply() ... DONE
[16:10:34.823] Number of futures (= number of chunks): 1
[16:10:34.823] Launching 1 futures (chunks) ...
[16:10:34.823] Chunk #1 of 1 ...
[16:10:34.823]  - Finding globals in 'X' for chunk #1 ...
[16:10:34.823] getGlobalsAndPackages() ...
[16:10:34.823] Searching for globals...
[16:10:34.823] 
[16:10:34.823] Searching for globals ... DONE
[16:10:34.824] - globals: [0] <none>
[16:10:34.825] getGlobalsAndPackages() ... DONE
[16:10:34.825]    + additional globals found: [n=0] 
[16:10:34.825]    + additional namespaces needed: [n=0] 
[16:10:34.825]  - Finding globals in 'X' for chunk #1 ... DONE
[16:10:34.825]  - Adjusted option 'future.globals.maxSize': 524288000 -> 5 * 524288000 = 2621440000 (bytes)
[16:10:34.825]  - seeds: [5] <seeds>
[16:10:34.826] getGlobalsAndPackages() ...
[16:10:34.826] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:34.826] Resolving globals: FALSE
[16:10:34.826] Tweak future expression to call with '...' arguments ...
[16:10:34.826] {
[16:10:34.826]     do.call(function(...) {
[16:10:34.826]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.826]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:34.826]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.826]             on.exit(options(oopts), add = TRUE)
[16:10:34.826]         }
[16:10:34.826]         {
[16:10:34.826]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:34.826]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.826]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.826]                   envir = globalenv(), inherits = FALSE)
[16:10:34.826]                 ...future.FUN(...future.X_jj, ...)
[16:10:34.826]             })
[16:10:34.826]         }
[16:10:34.826]     }, args = future.call.arguments)
[16:10:34.826] }
[16:10:34.826] Tweak future expression to call with '...' arguments ... DONE
[16:10:34.827] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:34.827] 
[16:10:34.827] getGlobalsAndPackages() ... DONE
[16:10:34.827] run() for ‘Future’ ...
[16:10:34.827] - state: ‘created’
[16:10:34.827] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:10:34.828] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:10:34.828] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:10:34.828]   - Field: ‘label’
[16:10:34.828]   - Field: ‘local’
[16:10:34.828]   - Field: ‘owner’
[16:10:34.828]   - Field: ‘envir’
[16:10:34.828]   - Field: ‘packages’
[16:10:34.828]   - Field: ‘gc’
[16:10:34.828]   - Field: ‘conditions’
[16:10:34.828]   - Field: ‘expr’
[16:10:34.829]   - Field: ‘uuid’
[16:10:34.829]   - Field: ‘seed’
[16:10:34.829]   - Field: ‘version’
[16:10:34.829]   - Field: ‘result’
[16:10:34.829]   - Field: ‘asynchronous’
[16:10:34.829]   - Field: ‘calls’
[16:10:34.829]   - Field: ‘globals’
[16:10:34.829]   - Field: ‘stdout’
[16:10:34.829]   - Field: ‘earlySignal’
[16:10:34.829]   - Field: ‘lazy’
[16:10:34.829]   - Field: ‘state’
[16:10:34.830] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:10:34.830] - Launch lazy future ...
[16:10:34.830] Packages needed by the future expression (n = 0): <none>
[16:10:34.830] Packages needed by future strategies (n = 0): <none>
[16:10:34.830] {
[16:10:34.830]     {
[16:10:34.830]         {
[16:10:34.830]             ...future.startTime <- base::Sys.time()
[16:10:34.830]             {
[16:10:34.830]                 {
[16:10:34.830]                   {
[16:10:34.830]                     base::local({
[16:10:34.830]                       has_future <- base::requireNamespace("future", 
[16:10:34.830]                         quietly = TRUE)
[16:10:34.830]                       if (has_future) {
[16:10:34.830]                         ns <- base::getNamespace("future")
[16:10:34.830]                         version <- ns[[".package"]][["version"]]
[16:10:34.830]                         if (is.null(version)) 
[16:10:34.830]                           version <- utils::packageVersion("future")
[16:10:34.830]                       }
[16:10:34.830]                       else {
[16:10:34.830]                         version <- NULL
[16:10:34.830]                       }
[16:10:34.830]                       if (!has_future || version < "1.8.0") {
[16:10:34.830]                         info <- base::c(r_version = base::gsub("R version ", 
[16:10:34.830]                           "", base::R.version$version.string), 
[16:10:34.830]                           platform = base::sprintf("%s (%s-bit)", 
[16:10:34.830]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:34.830]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:34.830]                             "release", "version")], collapse = " "), 
[16:10:34.830]                           hostname = base::Sys.info()[["nodename"]])
[16:10:34.830]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:10:34.830]                           info)
[16:10:34.830]                         info <- base::paste(info, collapse = "; ")
[16:10:34.830]                         if (!has_future) {
[16:10:34.830]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:34.830]                             info)
[16:10:34.830]                         }
[16:10:34.830]                         else {
[16:10:34.830]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:34.830]                             info, version)
[16:10:34.830]                         }
[16:10:34.830]                         base::stop(msg)
[16:10:34.830]                       }
[16:10:34.830]                     })
[16:10:34.830]                   }
[16:10:34.830]                   options(future.plan = NULL)
[16:10:34.830]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:34.830]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:34.830]                 }
[16:10:34.830]                 ...future.workdir <- getwd()
[16:10:34.830]             }
[16:10:34.830]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:34.830]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:34.830]         }
[16:10:34.830]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:34.830]             future.globals.maxSize = 2621440000, future.globals.method = NULL, 
[16:10:34.830]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:34.830]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:34.830]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:34.830]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:34.830]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:34.830]             base::names(...future.oldOptions))
[16:10:34.830]     }
[16:10:34.830]     if (FALSE) {
[16:10:34.830]     }
[16:10:34.830]     else {
[16:10:34.830]         if (TRUE) {
[16:10:34.830]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:34.830]                 open = "w")
[16:10:34.830]         }
[16:10:34.830]         else {
[16:10:34.830]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:34.830]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:34.830]         }
[16:10:34.830]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:34.830]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:34.830]             base::sink(type = "output", split = FALSE)
[16:10:34.830]             base::close(...future.stdout)
[16:10:34.830]         }, add = TRUE)
[16:10:34.830]     }
[16:10:34.830]     ...future.frame <- base::sys.nframe()
[16:10:34.830]     ...future.conditions <- base::list()
[16:10:34.830]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:34.830]     if (FALSE) {
[16:10:34.830]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:34.830]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:34.830]     }
[16:10:34.830]     ...future.result <- base::tryCatch({
[16:10:34.830]         base::withCallingHandlers({
[16:10:34.830]             ...future.value <- base::withVisible(base::local({
[16:10:34.830]                 do.call(function(...) {
[16:10:34.830]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.830]                   if (!identical(...future.globals.maxSize.org, 
[16:10:34.830]                     ...future.globals.maxSize)) {
[16:10:34.830]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.830]                     on.exit(options(oopts), add = TRUE)
[16:10:34.830]                   }
[16:10:34.830]                   {
[16:10:34.830]                     lapply(seq_along(...future.elements_ii), 
[16:10:34.830]                       FUN = function(jj) {
[16:10:34.830]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.830]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.830]                           envir = globalenv(), inherits = FALSE)
[16:10:34.830]                         ...future.FUN(...future.X_jj, ...)
[16:10:34.830]                       })
[16:10:34.830]                   }
[16:10:34.830]                 }, args = future.call.arguments)
[16:10:34.830]             }))
[16:10:34.830]             future::FutureResult(value = ...future.value$value, 
[16:10:34.830]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:34.830]                   ...future.rng), globalenv = if (FALSE) 
[16:10:34.830]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:34.830]                     ...future.globalenv.names))
[16:10:34.830]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:34.830]         }, condition = base::local({
[16:10:34.830]             c <- base::c
[16:10:34.830]             inherits <- base::inherits
[16:10:34.830]             invokeRestart <- base::invokeRestart
[16:10:34.830]             length <- base::length
[16:10:34.830]             list <- base::list
[16:10:34.830]             seq.int <- base::seq.int
[16:10:34.830]             signalCondition <- base::signalCondition
[16:10:34.830]             sys.calls <- base::sys.calls
[16:10:34.830]             `[[` <- base::`[[`
[16:10:34.830]             `+` <- base::`+`
[16:10:34.830]             `<<-` <- base::`<<-`
[16:10:34.830]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:34.830]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:34.830]                   3L)]
[16:10:34.830]             }
[16:10:34.830]             function(cond) {
[16:10:34.830]                 is_error <- inherits(cond, "error")
[16:10:34.830]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:34.830]                   NULL)
[16:10:34.830]                 if (is_error) {
[16:10:34.830]                   sessionInformation <- function() {
[16:10:34.830]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:34.830]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:34.830]                       search = base::search(), system = base::Sys.info())
[16:10:34.830]                   }
[16:10:34.830]                   ...future.conditions[[length(...future.conditions) + 
[16:10:34.830]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:34.830]                     cond$call), session = sessionInformation(), 
[16:10:34.830]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:34.830]                   signalCondition(cond)
[16:10:34.830]                 }
[16:10:34.830]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:34.830]                 "immediateCondition"))) {
[16:10:34.830]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:34.830]                   ...future.conditions[[length(...future.conditions) + 
[16:10:34.830]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:34.830]                   if (TRUE && !signal) {
[16:10:34.830]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:34.830]                     {
[16:10:34.830]                       inherits <- base::inherits
[16:10:34.830]                       invokeRestart <- base::invokeRestart
[16:10:34.830]                       is.null <- base::is.null
[16:10:34.830]                       muffled <- FALSE
[16:10:34.830]                       if (inherits(cond, "message")) {
[16:10:34.830]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:34.830]                         if (muffled) 
[16:10:34.830]                           invokeRestart("muffleMessage")
[16:10:34.830]                       }
[16:10:34.830]                       else if (inherits(cond, "warning")) {
[16:10:34.830]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:34.830]                         if (muffled) 
[16:10:34.830]                           invokeRestart("muffleWarning")
[16:10:34.830]                       }
[16:10:34.830]                       else if (inherits(cond, "condition")) {
[16:10:34.830]                         if (!is.null(pattern)) {
[16:10:34.830]                           computeRestarts <- base::computeRestarts
[16:10:34.830]                           grepl <- base::grepl
[16:10:34.830]                           restarts <- computeRestarts(cond)
[16:10:34.830]                           for (restart in restarts) {
[16:10:34.830]                             name <- restart$name
[16:10:34.830]                             if (is.null(name)) 
[16:10:34.830]                               next
[16:10:34.830]                             if (!grepl(pattern, name)) 
[16:10:34.830]                               next
[16:10:34.830]                             invokeRestart(restart)
[16:10:34.830]                             muffled <- TRUE
[16:10:34.830]                             break
[16:10:34.830]                           }
[16:10:34.830]                         }
[16:10:34.830]                       }
[16:10:34.830]                       invisible(muffled)
[16:10:34.830]                     }
[16:10:34.830]                     muffleCondition(cond, pattern = "^muffle")
[16:10:34.830]                   }
[16:10:34.830]                 }
[16:10:34.830]                 else {
[16:10:34.830]                   if (TRUE) {
[16:10:34.830]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:34.830]                     {
[16:10:34.830]                       inherits <- base::inherits
[16:10:34.830]                       invokeRestart <- base::invokeRestart
[16:10:34.830]                       is.null <- base::is.null
[16:10:34.830]                       muffled <- FALSE
[16:10:34.830]                       if (inherits(cond, "message")) {
[16:10:34.830]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:34.830]                         if (muffled) 
[16:10:34.830]                           invokeRestart("muffleMessage")
[16:10:34.830]                       }
[16:10:34.830]                       else if (inherits(cond, "warning")) {
[16:10:34.830]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:34.830]                         if (muffled) 
[16:10:34.830]                           invokeRestart("muffleWarning")
[16:10:34.830]                       }
[16:10:34.830]                       else if (inherits(cond, "condition")) {
[16:10:34.830]                         if (!is.null(pattern)) {
[16:10:34.830]                           computeRestarts <- base::computeRestarts
[16:10:34.830]                           grepl <- base::grepl
[16:10:34.830]                           restarts <- computeRestarts(cond)
[16:10:34.830]                           for (restart in restarts) {
[16:10:34.830]                             name <- restart$name
[16:10:34.830]                             if (is.null(name)) 
[16:10:34.830]                               next
[16:10:34.830]                             if (!grepl(pattern, name)) 
[16:10:34.830]                               next
[16:10:34.830]                             invokeRestart(restart)
[16:10:34.830]                             muffled <- TRUE
[16:10:34.830]                             break
[16:10:34.830]                           }
[16:10:34.830]                         }
[16:10:34.830]                       }
[16:10:34.830]                       invisible(muffled)
[16:10:34.830]                     }
[16:10:34.830]                     muffleCondition(cond, pattern = "^muffle")
[16:10:34.830]                   }
[16:10:34.830]                 }
[16:10:34.830]             }
[16:10:34.830]         }))
[16:10:34.830]     }, error = function(ex) {
[16:10:34.830]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:34.830]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:34.830]                 ...future.rng), started = ...future.startTime, 
[16:10:34.830]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:34.830]             version = "1.8"), class = "FutureResult")
[16:10:34.830]     }, finally = {
[16:10:34.830]         if (!identical(...future.workdir, getwd())) 
[16:10:34.830]             setwd(...future.workdir)
[16:10:34.830]         {
[16:10:34.830]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:34.830]                 ...future.oldOptions$nwarnings <- NULL
[16:10:34.830]             }
[16:10:34.830]             base::options(...future.oldOptions)
[16:10:34.830]             if (.Platform$OS.type == "windows") {
[16:10:34.830]                 old_names <- names(...future.oldEnvVars)
[16:10:34.830]                 envs <- base::Sys.getenv()
[16:10:34.830]                 names <- names(envs)
[16:10:34.830]                 common <- intersect(names, old_names)
[16:10:34.830]                 added <- setdiff(names, old_names)
[16:10:34.830]                 removed <- setdiff(old_names, names)
[16:10:34.830]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:34.830]                   envs[common]]
[16:10:34.830]                 NAMES <- toupper(changed)
[16:10:34.830]                 args <- list()
[16:10:34.830]                 for (kk in seq_along(NAMES)) {
[16:10:34.830]                   name <- changed[[kk]]
[16:10:34.830]                   NAME <- NAMES[[kk]]
[16:10:34.830]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.830]                     next
[16:10:34.830]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:34.830]                 }
[16:10:34.830]                 NAMES <- toupper(added)
[16:10:34.830]                 for (kk in seq_along(NAMES)) {
[16:10:34.830]                   name <- added[[kk]]
[16:10:34.830]                   NAME <- NAMES[[kk]]
[16:10:34.830]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.830]                     next
[16:10:34.830]                   args[[name]] <- ""
[16:10:34.830]                 }
[16:10:34.830]                 NAMES <- toupper(removed)
[16:10:34.830]                 for (kk in seq_along(NAMES)) {
[16:10:34.830]                   name <- removed[[kk]]
[16:10:34.830]                   NAME <- NAMES[[kk]]
[16:10:34.830]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.830]                     next
[16:10:34.830]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:34.830]                 }
[16:10:34.830]                 if (length(args) > 0) 
[16:10:34.830]                   base::do.call(base::Sys.setenv, args = args)
[16:10:34.830]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:34.830]             }
[16:10:34.830]             else {
[16:10:34.830]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:34.830]             }
[16:10:34.830]             {
[16:10:34.830]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:34.830]                   0L) {
[16:10:34.830]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:34.830]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:34.830]                   base::options(opts)
[16:10:34.830]                 }
[16:10:34.830]                 {
[16:10:34.830]                   {
[16:10:34.830]                     base::assign(".Random.seed", c(10403L, 8L, 
[16:10:34.830]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[16:10:34.830]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[16:10:34.830]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[16:10:34.830]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[16:10:34.830]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[16:10:34.830]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[16:10:34.830]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[16:10:34.830]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[16:10:34.830]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[16:10:34.830]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[16:10:34.830]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[16:10:34.830]                     -1512233174L, -1985955764L, -425390065L, 
[16:10:34.830]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[16:10:34.830]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[16:10:34.830]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[16:10:34.830]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[16:10:34.830]                     1818328109L, -1284085436L, -1981489558L, 
[16:10:34.830]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[16:10:34.830]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[16:10:34.830]                     -1718567047L, -793788661L, -1133789126L, 
[16:10:34.830]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[16:10:34.830]                     -1823521982L, -1345991523L, -1672661737L, 
[16:10:34.830]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[16:10:34.830]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[16:10:34.830]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[16:10:34.830]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[16:10:34.830]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[16:10:34.830]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[16:10:34.830]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[16:10:34.830]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[16:10:34.830]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[16:10:34.830]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[16:10:34.830]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[16:10:34.830]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[16:10:34.830]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[16:10:34.830]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[16:10:34.830]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[16:10:34.830]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[16:10:34.830]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[16:10:34.830]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[16:10:34.830]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[16:10:34.830]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[16:10:34.830]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[16:10:34.830]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[16:10:34.830]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[16:10:34.830]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[16:10:34.830]                     -1119334354L, -1521015416L, -2041922421L, 
[16:10:34.830]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[16:10:34.830]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[16:10:34.830]                     1232111981L, -1801753084L, -1608606422L, 
[16:10:34.830]                     -1172096363L, 1420874031L, -1210473418L, 
[16:10:34.830]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[16:10:34.830]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[16:10:34.830]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[16:10:34.830]                     679371266L, -591318819L, -104578089L, -172818754L, 
[16:10:34.830]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[16:10:34.830]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[16:10:34.830]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[16:10:34.830]                     -332493318L, -1978392251L, -1691039632L, 
[16:10:34.830]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[16:10:34.830]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[16:10:34.830]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[16:10:34.830]                     87560756L, -87565624L, 426345146L, -699970416L, 
[16:10:34.830]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[16:10:34.830]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[16:10:34.830]                     -1178330196L, -687617348L, -1701912078L, 
[16:10:34.830]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[16:10:34.830]                     -1345416048L, 1816730492L, -1570431212L, 
[16:10:34.830]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[16:10:34.830]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[16:10:34.830]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[16:10:34.830]                     -1493184262L, -1943836976L, -590788308L, 
[16:10:34.830]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[16:10:34.830]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[16:10:34.830]                     1274857340L, -1205842638L, -1938479504L, 
[16:10:34.830]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[16:10:34.830]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[16:10:34.830]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[16:10:34.830]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[16:10:34.830]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[16:10:34.830]                     -1460751252L, 1201879444L, -1459788718L, 
[16:10:34.830]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[16:10:34.830]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[16:10:34.830]                     -420945808L, -1997735900L, -1838404552L, 
[16:10:34.830]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[16:10:34.830]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[16:10:34.830]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[16:10:34.830]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[16:10:34.830]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[16:10:34.830]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[16:10:34.830]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[16:10:34.830]                     942193650L, 751741680L, 689743428L, -18455976L, 
[16:10:34.830]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[16:10:34.830]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[16:10:34.830]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[16:10:34.830]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[16:10:34.830]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[16:10:34.830]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[16:10:34.830]                     -1357570110L, 1896595240L, -2066952276L, 
[16:10:34.830]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[16:10:34.830]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[16:10:34.830]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[16:10:34.830]                     769655120L, 236357794L, 181393736L, -13334772L, 
[16:10:34.830]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[16:10:34.830]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[16:10:34.830]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[16:10:34.830]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[16:10:34.830]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[16:10:34.830]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[16:10:34.830]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[16:10:34.830]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[16:10:34.830]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[16:10:34.830]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[16:10:34.830]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[16:10:34.830]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[16:10:34.830]                     -1365842884L, -438961294L, -1851472272L, 
[16:10:34.830]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[16:10:34.830]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[16:10:34.830]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[16:10:34.830]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[16:10:34.830]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[16:10:34.830]                     -594809770L, -2146766621L, -2013964635L, 
[16:10:34.830]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[16:10:34.830]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[16:10:34.830]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[16:10:34.830]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[16:10:34.830]                     -1426021878L, -1285634264L, 1507547537L, 
[16:10:34.830]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[16:10:34.830]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[16:10:34.830]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[16:10:34.830]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[16:10:34.830]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[16:10:34.830]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[16:10:34.830]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[16:10:34.830]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[16:10:34.830]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[16:10:34.830]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[16:10:34.830]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[16:10:34.830]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[16:10:34.830]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[16:10:34.830]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[16:10:34.830]                     -1604604761L, 1421229008L, -1268333714L, 
[16:10:34.830]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[16:10:34.830]                     -2070476623L, -2099222749L, 1141171236L, 
[16:10:34.830]                     -146426158L, -1797385433L, -1129376399L, 
[16:10:34.830]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[16:10:34.830]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[16:10:34.830]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[16:10:34.830]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[16:10:34.830]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[16:10:34.830]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[16:10:34.830]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[16:10:34.830]                     -1092079724L, -1765622238L, -1882554057L, 
[16:10:34.830]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[16:10:34.830]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[16:10:34.830]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[16:10:34.830]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[16:10:34.830]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[16:10:34.830]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[16:10:34.830]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[16:10:34.830]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[16:10:34.830]                     865377681L, -1127426242L), envir = base::globalenv(), 
[16:10:34.830]                       inherits = FALSE)
[16:10:34.830]                     NULL
[16:10:34.830]                   }
[16:10:34.830]                   options(future.plan = NULL)
[16:10:34.830]                   if (is.na(NA_character_)) 
[16:10:34.830]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:34.830]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:34.830]                   future::plan(list(function (..., envir = parent.frame()) 
[16:10:34.830]                   {
[16:10:34.830]                     future <- SequentialFuture(..., envir = envir)
[16:10:34.830]                     if (!future$lazy) 
[16:10:34.830]                       future <- run(future)
[16:10:34.830]                     invisible(future)
[16:10:34.830]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:34.830]                 }
[16:10:34.830]             }
[16:10:34.830]         }
[16:10:34.830]     })
[16:10:34.830]     if (TRUE) {
[16:10:34.830]         base::sink(type = "output", split = FALSE)
[16:10:34.830]         if (TRUE) {
[16:10:34.830]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:34.830]         }
[16:10:34.830]         else {
[16:10:34.830]             ...future.result["stdout"] <- base::list(NULL)
[16:10:34.830]         }
[16:10:34.830]         base::close(...future.stdout)
[16:10:34.830]         ...future.stdout <- NULL
[16:10:34.830]     }
[16:10:34.830]     ...future.result$conditions <- ...future.conditions
[16:10:34.830]     ...future.result$finished <- base::Sys.time()
[16:10:34.830]     ...future.result
[16:10:34.830] }
[16:10:34.833] assign_globals() ...
[16:10:34.833] List of 7
[16:10:34.833]  $ ...future.FUN            :function (...)  
[16:10:34.833]  $ foo                      :function (x = 1, y = 2)  
[16:10:34.833]  $ x                        : num 3
[16:10:34.833]  $ future.call.arguments    : list()
[16:10:34.833]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.833]  $ ...future.elements_ii    :List of 5
[16:10:34.833]   ..$ : int 0
[16:10:34.833]   ..$ : int 0
[16:10:34.833]   ..$ : int 0
[16:10:34.833]   ..$ : int 0
[16:10:34.833]   ..$ : int 0
[16:10:34.833]  $ ...future.seeds_ii       :List of 5
[16:10:34.833]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[16:10:34.833]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[16:10:34.833]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[16:10:34.833]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[16:10:34.833]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[16:10:34.833]  $ ...future.globals.maxSize: NULL
[16:10:34.833]  - attr(*, "resolved")= logi FALSE
[16:10:34.833]  - attr(*, "total_size")= num 2200
[16:10:34.833]  - attr(*, "where")=List of 7
[16:10:34.833]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:10:34.833]   ..$ foo                      :<environment: R_EmptyEnv> 
[16:10:34.833]   ..$ x                        :<environment: R_EmptyEnv> 
[16:10:34.833]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:10:34.833]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:10:34.833]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:10:34.833]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:10:34.833]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.833]  - attr(*, "already-done")= logi TRUE
[16:10:34.841] - reassign environment for ‘...future.FUN’
[16:10:34.841] - copied ‘...future.FUN’ to environment
[16:10:34.841] - reassign environment for ‘foo’
[16:10:34.841] - copied ‘foo’ to environment
[16:10:34.841] - copied ‘x’ to environment
[16:10:34.841] - copied ‘future.call.arguments’ to environment
[16:10:34.841] - copied ‘...future.elements_ii’ to environment
[16:10:34.841] - copied ‘...future.seeds_ii’ to environment
[16:10:34.841] - copied ‘...future.globals.maxSize’ to environment
[16:10:34.841] assign_globals() ... done
[16:10:34.842] plan(): Setting new future strategy stack:
[16:10:34.842] List of future strategies:
[16:10:34.842] 1. sequential:
[16:10:34.842]    - args: function (..., envir = parent.frame())
[16:10:34.842]    - tweaked: FALSE
[16:10:34.842]    - call: NULL
[16:10:34.842] plan(): nbrOfWorkers() = 1
[16:10:34.843] plan(): Setting new future strategy stack:
[16:10:34.843] List of future strategies:
[16:10:34.843] 1. sequential:
[16:10:34.843]    - args: function (..., envir = parent.frame())
[16:10:34.843]    - tweaked: FALSE
[16:10:34.843]    - call: plan(strategy)
[16:10:34.843] plan(): nbrOfWorkers() = 1
[16:10:34.843] SequentialFuture started (and completed)
[16:10:34.844] - Launch lazy future ... done
[16:10:34.844] run() for ‘SequentialFuture’ ... done
[16:10:34.844] Created future:
[16:10:34.844] SequentialFuture:
[16:10:34.844] Label: ‘future_replicate-1’
[16:10:34.844] Expression:
[16:10:34.844] {
[16:10:34.844]     do.call(function(...) {
[16:10:34.844]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.844]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:34.844]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.844]             on.exit(options(oopts), add = TRUE)
[16:10:34.844]         }
[16:10:34.844]         {
[16:10:34.844]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:34.844]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.844]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.844]                   envir = globalenv(), inherits = FALSE)
[16:10:34.844]                 ...future.FUN(...future.X_jj, ...)
[16:10:34.844]             })
[16:10:34.844]         }
[16:10:34.844]     }, args = future.call.arguments)
[16:10:34.844] }
[16:10:34.844] Lazy evaluation: FALSE
[16:10:34.844] Asynchronous evaluation: FALSE
[16:10:34.844] Local evaluation: TRUE
[16:10:34.844] Environment: 0x55cf8cc9bce8
[16:10:34.844] Capture standard output: TRUE
[16:10:34.844] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:34.844] Globals: 7 objects totaling 2.81 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, ...)
[16:10:34.844] Packages: <none>
[16:10:34.844] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:34.844] Resolved: TRUE
[16:10:34.844] Value: 320 bytes of class ‘list’
[16:10:34.844] Early signaling: FALSE
[16:10:34.844] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:34.844] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:10:34.845] Chunk #1 of 1 ... DONE
[16:10:34.845] Launching 1 futures (chunks) ... DONE
[16:10:34.845] Resolving 1 futures (chunks) ...
[16:10:34.845] resolve() on list ...
[16:10:34.845]  recursive: 0
[16:10:34.845]  length: 1
[16:10:34.845] 
[16:10:34.846] resolved() for ‘SequentialFuture’ ...
[16:10:34.846] - state: ‘finished’
[16:10:34.846] - run: TRUE
[16:10:34.846] - result: ‘FutureResult’
[16:10:34.846] resolved() for ‘SequentialFuture’ ... done
[16:10:34.846] Future #1
[16:10:34.846] signalConditionsASAP(SequentialFuture, pos=1) ...
[16:10:34.846] - nx: 1
[16:10:34.846] - relay: TRUE
[16:10:34.846] - stdout: TRUE
[16:10:34.846] - signal: TRUE
[16:10:34.847] - resignal: FALSE
[16:10:34.847] - force: TRUE
[16:10:34.847] - relayed: [n=1] FALSE
[16:10:34.847] - queued futures: [n=1] FALSE
[16:10:34.847]  - until=1
[16:10:34.847]  - relaying element #1
[16:10:34.847] - relayed: [n=1] TRUE
[16:10:34.847] - queued futures: [n=1] TRUE
[16:10:34.847] signalConditionsASAP(SequentialFuture, pos=1) ... done
[16:10:34.847]  length: 0 (resolved future 1)
[16:10:34.849] Relaying remaining futures
[16:10:34.849] signalConditionsASAP(NULL, pos=0) ...
[16:10:34.849] - nx: 1
[16:10:34.849] - relay: TRUE
[16:10:34.849] - stdout: TRUE
[16:10:34.849] - signal: TRUE
[16:10:34.849] - resignal: FALSE
[16:10:34.849] - force: TRUE
[16:10:34.849] - relayed: [n=1] TRUE
[16:10:34.849] - queued futures: [n=1] TRUE
 - flush all
[16:10:34.850] - relayed: [n=1] TRUE
[16:10:34.850] - queued futures: [n=1] TRUE
[16:10:34.850] signalConditionsASAP(NULL, pos=0) ... done
[16:10:34.850] resolve() on list ... DONE
[16:10:34.850]  - Number of value chunks collected: 1
[16:10:34.850] Resolving 1 futures (chunks) ... DONE
[16:10:34.850] Reducing values from 1 chunks ...
[16:10:34.850]  - Number of values collected after concatenation: 5
[16:10:34.850]  - Number of values expected: 5
[16:10:34.850] Reducing values from 1 chunks ... DONE
[16:10:34.851] future_lapply() ... DONE
[16:10:34.851] plan(): Setting new future strategy stack:
[16:10:34.851] List of future strategies:
[16:10:34.851] 1. sequential:
[16:10:34.851]    - args: function (..., envir = parent.frame())
[16:10:34.851]    - tweaked: FALSE
[16:10:34.851]    - call: plan(sequential)
[16:10:34.852] plan(): nbrOfWorkers() = 1
*** strategy = ‘sequential’ ... done
*** strategy = ‘multicore’ ...
[16:10:34.852] plan(): Setting new future strategy stack:
[16:10:34.852] List of future strategies:
[16:10:34.852] 1. multicore:
[16:10:34.852]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:10:34.852]    - tweaked: FALSE
[16:10:34.852]    - call: plan(strategy)
[16:10:34.856] plan(): nbrOfWorkers() = 2
[16:10:34.856] future_lapply() ...
[16:10:34.857] Generating random seeds ...
[16:10:34.857] Generating random seed streams for 5 elements ...
[16:10:34.857] Generating random seed streams for 5 elements ... DONE
[16:10:34.857] Generating random seeds ... DONE
[16:10:34.857] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:10:34.862] Number of chunks: 2
[16:10:34.862] getGlobalsAndPackagesXApply() ...
[16:10:34.863]  - future.globals: TRUE
[16:10:34.863] getGlobalsAndPackages() ...
[16:10:34.863] Searching for globals...
[16:10:34.864] - globals found: [2] ‘FUN’, ‘sample’
[16:10:34.864] Searching for globals ... DONE
[16:10:34.864] Resolving globals: FALSE
[16:10:34.864] The total size of the 1 globals is 616 bytes (616 bytes)
[16:10:34.865] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:10:34.865] - globals: [1] ‘FUN’
[16:10:34.865] 
[16:10:34.865] getGlobalsAndPackages() ... DONE
[16:10:34.865]  - globals found/used: [n=1] ‘FUN’
[16:10:34.865]  - needed namespaces: [n=0] 
[16:10:34.865] Finding globals ... DONE
[16:10:34.865]  - use_args: TRUE
[16:10:34.865]  - Getting '...' globals ...
[16:10:34.866] resolve() on list ...
[16:10:34.866]  recursive: 0
[16:10:34.866]  length: 1
[16:10:34.866]  elements: ‘...’
[16:10:34.866]  length: 0 (resolved future 1)
[16:10:34.866] resolve() on list ... DONE
[16:10:34.866]    - '...' content: [n=0] 
[16:10:34.866] List of 1
[16:10:34.866]  $ ...: list()
[16:10:34.866]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.866]  - attr(*, "where")=List of 1
[16:10:34.866]   ..$ ...:<environment: 0x55cf8c9eb068> 
[16:10:34.866]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.866]  - attr(*, "resolved")= logi TRUE
[16:10:34.866]  - attr(*, "total_size")= num NA
[16:10:34.869]  - Getting '...' globals ... DONE
[16:10:34.869] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:10:34.869] List of 2
[16:10:34.869]  $ ...future.FUN:function (...)  
[16:10:34.869]  $ ...          : list()
[16:10:34.869]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.869]  - attr(*, "where")=List of 2
[16:10:34.869]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:10:34.869]   ..$ ...          :<environment: 0x55cf8c9eb068> 
[16:10:34.869]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.869]  - attr(*, "resolved")= logi FALSE
[16:10:34.869]  - attr(*, "total_size")= num 616
[16:10:34.872] Packages to be attached in all futures: [n=0] 
[16:10:34.872] getGlobalsAndPackagesXApply() ... DONE
[16:10:34.872] Number of futures (= number of chunks): 2
[16:10:34.872] Launching 2 futures (chunks) ...
[16:10:34.872] Chunk #1 of 2 ...
[16:10:34.872]  - Finding globals in 'X' for chunk #1 ...
[16:10:34.873] getGlobalsAndPackages() ...
[16:10:34.873] Searching for globals...
[16:10:34.873] 
[16:10:34.873] Searching for globals ... DONE
[16:10:34.873] - globals: [0] <none>
[16:10:34.873] getGlobalsAndPackages() ... DONE
[16:10:34.873]    + additional globals found: [n=0] 
[16:10:34.873]    + additional namespaces needed: [n=0] 
[16:10:34.873]  - Finding globals in 'X' for chunk #1 ... DONE
[16:10:34.874]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:10:34.874]  - seeds: [2] <seeds>
[16:10:34.874] getGlobalsAndPackages() ...
[16:10:34.874] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:34.874] Resolving globals: FALSE
[16:10:34.874] Tweak future expression to call with '...' arguments ...
[16:10:34.874] {
[16:10:34.874]     do.call(function(...) {
[16:10:34.874]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.874]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:34.874]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.874]             on.exit(options(oopts), add = TRUE)
[16:10:34.874]         }
[16:10:34.874]         {
[16:10:34.874]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:34.874]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.874]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.874]                   envir = globalenv(), inherits = FALSE)
[16:10:34.874]                 ...future.FUN(...future.X_jj, ...)
[16:10:34.874]             })
[16:10:34.874]         }
[16:10:34.874]     }, args = future.call.arguments)
[16:10:34.874] }
[16:10:34.874] Tweak future expression to call with '...' arguments ... DONE
[16:10:34.875] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:34.875] 
[16:10:34.875] getGlobalsAndPackages() ... DONE
[16:10:34.875] run() for ‘Future’ ...
[16:10:34.875] - state: ‘created’
[16:10:34.875] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:10:34.881] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:34.881] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:10:34.881]   - Field: ‘label’
[16:10:34.881]   - Field: ‘local’
[16:10:34.882]   - Field: ‘owner’
[16:10:34.882]   - Field: ‘envir’
[16:10:34.882]   - Field: ‘workers’
[16:10:34.882]   - Field: ‘packages’
[16:10:34.882]   - Field: ‘gc’
[16:10:34.882]   - Field: ‘job’
[16:10:34.882]   - Field: ‘conditions’
[16:10:34.882]   - Field: ‘expr’
[16:10:34.882]   - Field: ‘uuid’
[16:10:34.882]   - Field: ‘seed’
[16:10:34.883]   - Field: ‘version’
[16:10:34.883]   - Field: ‘result’
[16:10:34.883]   - Field: ‘asynchronous’
[16:10:34.883]   - Field: ‘calls’
[16:10:34.883]   - Field: ‘globals’
[16:10:34.883]   - Field: ‘stdout’
[16:10:34.883]   - Field: ‘earlySignal’
[16:10:34.883]   - Field: ‘lazy’
[16:10:34.883]   - Field: ‘state’
[16:10:34.883] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:10:34.883] - Launch lazy future ...
[16:10:34.885] Packages needed by the future expression (n = 0): <none>
[16:10:34.885] Packages needed by future strategies (n = 0): <none>
[16:10:34.885] {
[16:10:34.885]     {
[16:10:34.885]         {
[16:10:34.885]             ...future.startTime <- base::Sys.time()
[16:10:34.885]             {
[16:10:34.885]                 {
[16:10:34.885]                   {
[16:10:34.885]                     {
[16:10:34.885]                       base::local({
[16:10:34.885]                         has_future <- base::requireNamespace("future", 
[16:10:34.885]                           quietly = TRUE)
[16:10:34.885]                         if (has_future) {
[16:10:34.885]                           ns <- base::getNamespace("future")
[16:10:34.885]                           version <- ns[[".package"]][["version"]]
[16:10:34.885]                           if (is.null(version)) 
[16:10:34.885]                             version <- utils::packageVersion("future")
[16:10:34.885]                         }
[16:10:34.885]                         else {
[16:10:34.885]                           version <- NULL
[16:10:34.885]                         }
[16:10:34.885]                         if (!has_future || version < "1.8.0") {
[16:10:34.885]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:34.885]                             "", base::R.version$version.string), 
[16:10:34.885]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:34.885]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:34.885]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:34.885]                               "release", "version")], collapse = " "), 
[16:10:34.885]                             hostname = base::Sys.info()[["nodename"]])
[16:10:34.885]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:34.885]                             info)
[16:10:34.885]                           info <- base::paste(info, collapse = "; ")
[16:10:34.885]                           if (!has_future) {
[16:10:34.885]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:34.885]                               info)
[16:10:34.885]                           }
[16:10:34.885]                           else {
[16:10:34.885]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:34.885]                               info, version)
[16:10:34.885]                           }
[16:10:34.885]                           base::stop(msg)
[16:10:34.885]                         }
[16:10:34.885]                       })
[16:10:34.885]                     }
[16:10:34.885]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:34.885]                     base::options(mc.cores = 1L)
[16:10:34.885]                   }
[16:10:34.885]                   options(future.plan = NULL)
[16:10:34.885]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:34.885]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:34.885]                 }
[16:10:34.885]                 ...future.workdir <- getwd()
[16:10:34.885]             }
[16:10:34.885]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:34.885]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:34.885]         }
[16:10:34.885]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:34.885]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:10:34.885]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:34.885]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:34.885]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:34.885]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:34.885]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:34.885]             base::names(...future.oldOptions))
[16:10:34.885]     }
[16:10:34.885]     if (FALSE) {
[16:10:34.885]     }
[16:10:34.885]     else {
[16:10:34.885]         if (TRUE) {
[16:10:34.885]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:34.885]                 open = "w")
[16:10:34.885]         }
[16:10:34.885]         else {
[16:10:34.885]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:34.885]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:34.885]         }
[16:10:34.885]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:34.885]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:34.885]             base::sink(type = "output", split = FALSE)
[16:10:34.885]             base::close(...future.stdout)
[16:10:34.885]         }, add = TRUE)
[16:10:34.885]     }
[16:10:34.885]     ...future.frame <- base::sys.nframe()
[16:10:34.885]     ...future.conditions <- base::list()
[16:10:34.885]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:34.885]     if (FALSE) {
[16:10:34.885]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:34.885]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:34.885]     }
[16:10:34.885]     ...future.result <- base::tryCatch({
[16:10:34.885]         base::withCallingHandlers({
[16:10:34.885]             ...future.value <- base::withVisible(base::local({
[16:10:34.885]                 withCallingHandlers({
[16:10:34.885]                   {
[16:10:34.885]                     do.call(function(...) {
[16:10:34.885]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.885]                       if (!identical(...future.globals.maxSize.org, 
[16:10:34.885]                         ...future.globals.maxSize)) {
[16:10:34.885]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.885]                         on.exit(options(oopts), add = TRUE)
[16:10:34.885]                       }
[16:10:34.885]                       {
[16:10:34.885]                         lapply(seq_along(...future.elements_ii), 
[16:10:34.885]                           FUN = function(jj) {
[16:10:34.885]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.885]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.885]                               envir = globalenv(), inherits = FALSE)
[16:10:34.885]                             ...future.FUN(...future.X_jj, ...)
[16:10:34.885]                           })
[16:10:34.885]                       }
[16:10:34.885]                     }, args = future.call.arguments)
[16:10:34.885]                   }
[16:10:34.885]                 }, immediateCondition = function(cond) {
[16:10:34.885]                   save_rds <- function (object, pathname, ...) 
[16:10:34.885]                   {
[16:10:34.885]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:10:34.885]                     if (file_test("-f", pathname_tmp)) {
[16:10:34.885]                       fi_tmp <- file.info(pathname_tmp)
[16:10:34.885]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:10:34.885]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:34.885]                         fi_tmp[["mtime"]])
[16:10:34.885]                     }
[16:10:34.885]                     tryCatch({
[16:10:34.885]                       saveRDS(object, file = pathname_tmp, ...)
[16:10:34.885]                     }, error = function(ex) {
[16:10:34.885]                       msg <- conditionMessage(ex)
[16:10:34.885]                       fi_tmp <- file.info(pathname_tmp)
[16:10:34.885]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:10:34.885]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:34.885]                         fi_tmp[["mtime"]], msg)
[16:10:34.885]                       ex$message <- msg
[16:10:34.885]                       stop(ex)
[16:10:34.885]                     })
[16:10:34.885]                     stopifnot(file_test("-f", pathname_tmp))
[16:10:34.885]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:10:34.885]                     if (!res || file_test("-f", pathname_tmp)) {
[16:10:34.885]                       fi_tmp <- file.info(pathname_tmp)
[16:10:34.885]                       fi <- file.info(pathname)
[16:10:34.885]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:10:34.885]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:34.885]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:10:34.885]                         fi[["size"]], fi[["mtime"]])
[16:10:34.885]                       stop(msg)
[16:10:34.885]                     }
[16:10:34.885]                     invisible(pathname)
[16:10:34.885]                   }
[16:10:34.885]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:10:34.885]                     rootPath = tempdir()) 
[16:10:34.885]                   {
[16:10:34.885]                     obj <- list(time = Sys.time(), condition = cond)
[16:10:34.885]                     file <- tempfile(pattern = class(cond)[1], 
[16:10:34.885]                       tmpdir = path, fileext = ".rds")
[16:10:34.885]                     save_rds(obj, file)
[16:10:34.885]                   }
[16:10:34.885]                   saveImmediateCondition(cond, path = "/tmp/RtmpLZUJI0/.future/immediateConditions")
[16:10:34.885]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:34.885]                   {
[16:10:34.885]                     inherits <- base::inherits
[16:10:34.885]                     invokeRestart <- base::invokeRestart
[16:10:34.885]                     is.null <- base::is.null
[16:10:34.885]                     muffled <- FALSE
[16:10:34.885]                     if (inherits(cond, "message")) {
[16:10:34.885]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:34.885]                       if (muffled) 
[16:10:34.885]                         invokeRestart("muffleMessage")
[16:10:34.885]                     }
[16:10:34.885]                     else if (inherits(cond, "warning")) {
[16:10:34.885]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:34.885]                       if (muffled) 
[16:10:34.885]                         invokeRestart("muffleWarning")
[16:10:34.885]                     }
[16:10:34.885]                     else if (inherits(cond, "condition")) {
[16:10:34.885]                       if (!is.null(pattern)) {
[16:10:34.885]                         computeRestarts <- base::computeRestarts
[16:10:34.885]                         grepl <- base::grepl
[16:10:34.885]                         restarts <- computeRestarts(cond)
[16:10:34.885]                         for (restart in restarts) {
[16:10:34.885]                           name <- restart$name
[16:10:34.885]                           if (is.null(name)) 
[16:10:34.885]                             next
[16:10:34.885]                           if (!grepl(pattern, name)) 
[16:10:34.885]                             next
[16:10:34.885]                           invokeRestart(restart)
[16:10:34.885]                           muffled <- TRUE
[16:10:34.885]                           break
[16:10:34.885]                         }
[16:10:34.885]                       }
[16:10:34.885]                     }
[16:10:34.885]                     invisible(muffled)
[16:10:34.885]                   }
[16:10:34.885]                   muffleCondition(cond)
[16:10:34.885]                 })
[16:10:34.885]             }))
[16:10:34.885]             future::FutureResult(value = ...future.value$value, 
[16:10:34.885]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:34.885]                   ...future.rng), globalenv = if (FALSE) 
[16:10:34.885]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:34.885]                     ...future.globalenv.names))
[16:10:34.885]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:34.885]         }, condition = base::local({
[16:10:34.885]             c <- base::c
[16:10:34.885]             inherits <- base::inherits
[16:10:34.885]             invokeRestart <- base::invokeRestart
[16:10:34.885]             length <- base::length
[16:10:34.885]             list <- base::list
[16:10:34.885]             seq.int <- base::seq.int
[16:10:34.885]             signalCondition <- base::signalCondition
[16:10:34.885]             sys.calls <- base::sys.calls
[16:10:34.885]             `[[` <- base::`[[`
[16:10:34.885]             `+` <- base::`+`
[16:10:34.885]             `<<-` <- base::`<<-`
[16:10:34.885]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:34.885]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:34.885]                   3L)]
[16:10:34.885]             }
[16:10:34.885]             function(cond) {
[16:10:34.885]                 is_error <- inherits(cond, "error")
[16:10:34.885]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:34.885]                   NULL)
[16:10:34.885]                 if (is_error) {
[16:10:34.885]                   sessionInformation <- function() {
[16:10:34.885]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:34.885]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:34.885]                       search = base::search(), system = base::Sys.info())
[16:10:34.885]                   }
[16:10:34.885]                   ...future.conditions[[length(...future.conditions) + 
[16:10:34.885]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:34.885]                     cond$call), session = sessionInformation(), 
[16:10:34.885]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:34.885]                   signalCondition(cond)
[16:10:34.885]                 }
[16:10:34.885]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:34.885]                 "immediateCondition"))) {
[16:10:34.885]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:34.885]                   ...future.conditions[[length(...future.conditions) + 
[16:10:34.885]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:34.885]                   if (TRUE && !signal) {
[16:10:34.885]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:34.885]                     {
[16:10:34.885]                       inherits <- base::inherits
[16:10:34.885]                       invokeRestart <- base::invokeRestart
[16:10:34.885]                       is.null <- base::is.null
[16:10:34.885]                       muffled <- FALSE
[16:10:34.885]                       if (inherits(cond, "message")) {
[16:10:34.885]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:34.885]                         if (muffled) 
[16:10:34.885]                           invokeRestart("muffleMessage")
[16:10:34.885]                       }
[16:10:34.885]                       else if (inherits(cond, "warning")) {
[16:10:34.885]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:34.885]                         if (muffled) 
[16:10:34.885]                           invokeRestart("muffleWarning")
[16:10:34.885]                       }
[16:10:34.885]                       else if (inherits(cond, "condition")) {
[16:10:34.885]                         if (!is.null(pattern)) {
[16:10:34.885]                           computeRestarts <- base::computeRestarts
[16:10:34.885]                           grepl <- base::grepl
[16:10:34.885]                           restarts <- computeRestarts(cond)
[16:10:34.885]                           for (restart in restarts) {
[16:10:34.885]                             name <- restart$name
[16:10:34.885]                             if (is.null(name)) 
[16:10:34.885]                               next
[16:10:34.885]                             if (!grepl(pattern, name)) 
[16:10:34.885]                               next
[16:10:34.885]                             invokeRestart(restart)
[16:10:34.885]                             muffled <- TRUE
[16:10:34.885]                             break
[16:10:34.885]                           }
[16:10:34.885]                         }
[16:10:34.885]                       }
[16:10:34.885]                       invisible(muffled)
[16:10:34.885]                     }
[16:10:34.885]                     muffleCondition(cond, pattern = "^muffle")
[16:10:34.885]                   }
[16:10:34.885]                 }
[16:10:34.885]                 else {
[16:10:34.885]                   if (TRUE) {
[16:10:34.885]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:34.885]                     {
[16:10:34.885]                       inherits <- base::inherits
[16:10:34.885]                       invokeRestart <- base::invokeRestart
[16:10:34.885]                       is.null <- base::is.null
[16:10:34.885]                       muffled <- FALSE
[16:10:34.885]                       if (inherits(cond, "message")) {
[16:10:34.885]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:34.885]                         if (muffled) 
[16:10:34.885]                           invokeRestart("muffleMessage")
[16:10:34.885]                       }
[16:10:34.885]                       else if (inherits(cond, "warning")) {
[16:10:34.885]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:34.885]                         if (muffled) 
[16:10:34.885]                           invokeRestart("muffleWarning")
[16:10:34.885]                       }
[16:10:34.885]                       else if (inherits(cond, "condition")) {
[16:10:34.885]                         if (!is.null(pattern)) {
[16:10:34.885]                           computeRestarts <- base::computeRestarts
[16:10:34.885]                           grepl <- base::grepl
[16:10:34.885]                           restarts <- computeRestarts(cond)
[16:10:34.885]                           for (restart in restarts) {
[16:10:34.885]                             name <- restart$name
[16:10:34.885]                             if (is.null(name)) 
[16:10:34.885]                               next
[16:10:34.885]                             if (!grepl(pattern, name)) 
[16:10:34.885]                               next
[16:10:34.885]                             invokeRestart(restart)
[16:10:34.885]                             muffled <- TRUE
[16:10:34.885]                             break
[16:10:34.885]                           }
[16:10:34.885]                         }
[16:10:34.885]                       }
[16:10:34.885]                       invisible(muffled)
[16:10:34.885]                     }
[16:10:34.885]                     muffleCondition(cond, pattern = "^muffle")
[16:10:34.885]                   }
[16:10:34.885]                 }
[16:10:34.885]             }
[16:10:34.885]         }))
[16:10:34.885]     }, error = function(ex) {
[16:10:34.885]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:34.885]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:34.885]                 ...future.rng), started = ...future.startTime, 
[16:10:34.885]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:34.885]             version = "1.8"), class = "FutureResult")
[16:10:34.885]     }, finally = {
[16:10:34.885]         if (!identical(...future.workdir, getwd())) 
[16:10:34.885]             setwd(...future.workdir)
[16:10:34.885]         {
[16:10:34.885]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:34.885]                 ...future.oldOptions$nwarnings <- NULL
[16:10:34.885]             }
[16:10:34.885]             base::options(...future.oldOptions)
[16:10:34.885]             if (.Platform$OS.type == "windows") {
[16:10:34.885]                 old_names <- names(...future.oldEnvVars)
[16:10:34.885]                 envs <- base::Sys.getenv()
[16:10:34.885]                 names <- names(envs)
[16:10:34.885]                 common <- intersect(names, old_names)
[16:10:34.885]                 added <- setdiff(names, old_names)
[16:10:34.885]                 removed <- setdiff(old_names, names)
[16:10:34.885]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:34.885]                   envs[common]]
[16:10:34.885]                 NAMES <- toupper(changed)
[16:10:34.885]                 args <- list()
[16:10:34.885]                 for (kk in seq_along(NAMES)) {
[16:10:34.885]                   name <- changed[[kk]]
[16:10:34.885]                   NAME <- NAMES[[kk]]
[16:10:34.885]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.885]                     next
[16:10:34.885]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:34.885]                 }
[16:10:34.885]                 NAMES <- toupper(added)
[16:10:34.885]                 for (kk in seq_along(NAMES)) {
[16:10:34.885]                   name <- added[[kk]]
[16:10:34.885]                   NAME <- NAMES[[kk]]
[16:10:34.885]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.885]                     next
[16:10:34.885]                   args[[name]] <- ""
[16:10:34.885]                 }
[16:10:34.885]                 NAMES <- toupper(removed)
[16:10:34.885]                 for (kk in seq_along(NAMES)) {
[16:10:34.885]                   name <- removed[[kk]]
[16:10:34.885]                   NAME <- NAMES[[kk]]
[16:10:34.885]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.885]                     next
[16:10:34.885]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:34.885]                 }
[16:10:34.885]                 if (length(args) > 0) 
[16:10:34.885]                   base::do.call(base::Sys.setenv, args = args)
[16:10:34.885]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:34.885]             }
[16:10:34.885]             else {
[16:10:34.885]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:34.885]             }
[16:10:34.885]             {
[16:10:34.885]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:34.885]                   0L) {
[16:10:34.885]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:34.885]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:34.885]                   base::options(opts)
[16:10:34.885]                 }
[16:10:34.885]                 {
[16:10:34.885]                   {
[16:10:34.885]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:34.885]                     NULL
[16:10:34.885]                   }
[16:10:34.885]                   options(future.plan = NULL)
[16:10:34.885]                   if (is.na(NA_character_)) 
[16:10:34.885]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:34.885]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:34.885]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:10:34.885]                     envir = parent.frame()) 
[16:10:34.885]                   {
[16:10:34.885]                     default_workers <- missing(workers)
[16:10:34.885]                     if (is.function(workers)) 
[16:10:34.885]                       workers <- workers()
[16:10:34.885]                     workers <- structure(as.integer(workers), 
[16:10:34.885]                       class = class(workers))
[16:10:34.885]                     stop_if_not(is.finite(workers), workers >= 
[16:10:34.885]                       1L)
[16:10:34.885]                     if ((workers == 1L && !inherits(workers, 
[16:10:34.885]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:10:34.885]                       if (default_workers) 
[16:10:34.885]                         supportsMulticore(warn = TRUE)
[16:10:34.885]                       return(sequential(..., envir = envir))
[16:10:34.885]                     }
[16:10:34.885]                     oopts <- options(mc.cores = workers)
[16:10:34.885]                     on.exit(options(oopts))
[16:10:34.885]                     future <- MulticoreFuture(..., workers = workers, 
[16:10:34.885]                       envir = envir)
[16:10:34.885]                     if (!future$lazy) 
[16:10:34.885]                       future <- run(future)
[16:10:34.885]                     invisible(future)
[16:10:34.885]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:34.885]                 }
[16:10:34.885]             }
[16:10:34.885]         }
[16:10:34.885]     })
[16:10:34.885]     if (TRUE) {
[16:10:34.885]         base::sink(type = "output", split = FALSE)
[16:10:34.885]         if (TRUE) {
[16:10:34.885]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:34.885]         }
[16:10:34.885]         else {
[16:10:34.885]             ...future.result["stdout"] <- base::list(NULL)
[16:10:34.885]         }
[16:10:34.885]         base::close(...future.stdout)
[16:10:34.885]         ...future.stdout <- NULL
[16:10:34.885]     }
[16:10:34.885]     ...future.result$conditions <- ...future.conditions
[16:10:34.885]     ...future.result$finished <- base::Sys.time()
[16:10:34.885]     ...future.result
[16:10:34.885] }
[16:10:34.888] assign_globals() ...
[16:10:34.888] List of 5
[16:10:34.888]  $ ...future.FUN            :function (...)  
[16:10:34.888]  $ future.call.arguments    : list()
[16:10:34.888]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.888]  $ ...future.elements_ii    :List of 2
[16:10:34.888]   ..$ : int 0
[16:10:34.888]   ..$ : int 0
[16:10:34.888]  $ ...future.seeds_ii       :List of 2
[16:10:34.888]   ..$ : int [1:7] 10407 800596211 191202253 -1245543361 -1911991084 -470201595 630973807
[16:10:34.888]   ..$ : int [1:7] 10407 336362669 -1847432762 -712550016 1068830663 1731026700 1489470838
[16:10:34.888]  $ ...future.globals.maxSize: NULL
[16:10:34.888]  - attr(*, "resolved")= logi FALSE
[16:10:34.888]  - attr(*, "total_size")= num 616
[16:10:34.888]  - attr(*, "where")=List of 5
[16:10:34.888]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:10:34.888]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:10:34.888]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:10:34.888]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:10:34.888]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:10:34.888]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.888]  - attr(*, "already-done")= logi TRUE
[16:10:34.893] - reassign environment for ‘...future.FUN’
[16:10:34.893] - copied ‘...future.FUN’ to environment
[16:10:34.893] - copied ‘future.call.arguments’ to environment
[16:10:34.893] - copied ‘...future.elements_ii’ to environment
[16:10:34.894] - copied ‘...future.seeds_ii’ to environment
[16:10:34.894] - copied ‘...future.globals.maxSize’ to environment
[16:10:34.894] assign_globals() ... done
[16:10:34.894] requestCore(): workers = 2
[16:10:34.897] MulticoreFuture started
[16:10:34.897] - Launch lazy future ... done
[16:10:34.898] run() for ‘MulticoreFuture’ ... done
[16:10:34.898] plan(): Setting new future strategy stack:
[16:10:34.898] Created future:
[16:10:34.898] List of future strategies:
[16:10:34.898] 1. sequential:
[16:10:34.898]    - args: function (..., envir = parent.frame())
[16:10:34.898]    - tweaked: FALSE
[16:10:34.898]    - call: NULL
[16:10:34.899] plan(): nbrOfWorkers() = 1
[16:10:34.901] plan(): Setting new future strategy stack:
[16:10:34.901] List of future strategies:
[16:10:34.901] 1. multicore:
[16:10:34.901]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:10:34.901]    - tweaked: FALSE
[16:10:34.901]    - call: plan(strategy)
[16:10:34.906] plan(): nbrOfWorkers() = 2
[16:10:34.898] MulticoreFuture:
[16:10:34.898] Label: ‘future_replicate-1’
[16:10:34.898] Expression:
[16:10:34.898] {
[16:10:34.898]     do.call(function(...) {
[16:10:34.898]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.898]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:34.898]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.898]             on.exit(options(oopts), add = TRUE)
[16:10:34.898]         }
[16:10:34.898]         {
[16:10:34.898]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:34.898]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.898]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.898]                   envir = globalenv(), inherits = FALSE)
[16:10:34.898]                 ...future.FUN(...future.X_jj, ...)
[16:10:34.898]             })
[16:10:34.898]         }
[16:10:34.898]     }, args = future.call.arguments)
[16:10:34.898] }
[16:10:34.898] Lazy evaluation: FALSE
[16:10:34.898] Asynchronous evaluation: TRUE
[16:10:34.898] Local evaluation: TRUE
[16:10:34.898] Environment: R_GlobalEnv
[16:10:34.898] Capture standard output: TRUE
[16:10:34.898] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:34.898] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:34.898] Packages: <none>
[16:10:34.898] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:34.898] Resolved: TRUE
[16:10:34.898] Value: <not collected>
[16:10:34.898] Conditions captured: <none>
[16:10:34.898] Early signaling: FALSE
[16:10:34.898] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:34.898] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:34.907] Chunk #1 of 2 ... DONE
[16:10:34.907] Chunk #2 of 2 ...
[16:10:34.907]  - Finding globals in 'X' for chunk #2 ...
[16:10:34.908] getGlobalsAndPackages() ...
[16:10:34.908] Searching for globals...
[16:10:34.908] 
[16:10:34.908] Searching for globals ... DONE
[16:10:34.908] - globals: [0] <none>
[16:10:34.909] getGlobalsAndPackages() ... DONE
[16:10:34.909]    + additional globals found: [n=0] 
[16:10:34.909]    + additional namespaces needed: [n=0] 
[16:10:34.909]  - Finding globals in 'X' for chunk #2 ... DONE
[16:10:34.909]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[16:10:34.909]  - seeds: [3] <seeds>
[16:10:34.910] getGlobalsAndPackages() ...
[16:10:34.910] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:34.910] Resolving globals: FALSE
[16:10:34.910] Tweak future expression to call with '...' arguments ...
[16:10:34.910] {
[16:10:34.910]     do.call(function(...) {
[16:10:34.910]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.910]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:34.910]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.910]             on.exit(options(oopts), add = TRUE)
[16:10:34.910]         }
[16:10:34.910]         {
[16:10:34.910]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:34.910]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.910]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.910]                   envir = globalenv(), inherits = FALSE)
[16:10:34.910]                 ...future.FUN(...future.X_jj, ...)
[16:10:34.910]             })
[16:10:34.910]         }
[16:10:34.910]     }, args = future.call.arguments)
[16:10:34.910] }
[16:10:34.911] Tweak future expression to call with '...' arguments ... DONE
[16:10:34.911] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:34.911] 
[16:10:34.911] getGlobalsAndPackages() ... DONE
[16:10:34.912] run() for ‘Future’ ...
[16:10:34.912] - state: ‘created’
[16:10:34.912] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:10:34.917] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:34.917] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:10:34.917]   - Field: ‘label’
[16:10:34.917]   - Field: ‘local’
[16:10:34.918]   - Field: ‘owner’
[16:10:34.918]   - Field: ‘envir’
[16:10:34.918]   - Field: ‘workers’
[16:10:34.918]   - Field: ‘packages’
[16:10:34.918]   - Field: ‘gc’
[16:10:34.918]   - Field: ‘job’
[16:10:34.918]   - Field: ‘conditions’
[16:10:34.918]   - Field: ‘expr’
[16:10:34.919]   - Field: ‘uuid’
[16:10:34.919]   - Field: ‘seed’
[16:10:34.919]   - Field: ‘version’
[16:10:34.919]   - Field: ‘result’
[16:10:34.919]   - Field: ‘asynchronous’
[16:10:34.919]   - Field: ‘calls’
[16:10:34.919]   - Field: ‘globals’
[16:10:34.920]   - Field: ‘stdout’
[16:10:34.920]   - Field: ‘earlySignal’
[16:10:34.920]   - Field: ‘lazy’
[16:10:34.920]   - Field: ‘state’
[16:10:34.920] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:10:34.920] - Launch lazy future ...
[16:10:34.921] Packages needed by the future expression (n = 0): <none>
[16:10:34.921] Packages needed by future strategies (n = 0): <none>
[16:10:34.925] {
[16:10:34.925]     {
[16:10:34.925]         {
[16:10:34.925]             ...future.startTime <- base::Sys.time()
[16:10:34.925]             {
[16:10:34.925]                 {
[16:10:34.925]                   {
[16:10:34.925]                     {
[16:10:34.925]                       base::local({
[16:10:34.925]                         has_future <- base::requireNamespace("future", 
[16:10:34.925]                           quietly = TRUE)
[16:10:34.925]                         if (has_future) {
[16:10:34.925]                           ns <- base::getNamespace("future")
[16:10:34.925]                           version <- ns[[".package"]][["version"]]
[16:10:34.925]                           if (is.null(version)) 
[16:10:34.925]                             version <- utils::packageVersion("future")
[16:10:34.925]                         }
[16:10:34.925]                         else {
[16:10:34.925]                           version <- NULL
[16:10:34.925]                         }
[16:10:34.925]                         if (!has_future || version < "1.8.0") {
[16:10:34.925]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:34.925]                             "", base::R.version$version.string), 
[16:10:34.925]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:34.925]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:34.925]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:34.925]                               "release", "version")], collapse = " "), 
[16:10:34.925]                             hostname = base::Sys.info()[["nodename"]])
[16:10:34.925]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:34.925]                             info)
[16:10:34.925]                           info <- base::paste(info, collapse = "; ")
[16:10:34.925]                           if (!has_future) {
[16:10:34.925]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:34.925]                               info)
[16:10:34.925]                           }
[16:10:34.925]                           else {
[16:10:34.925]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:34.925]                               info, version)
[16:10:34.925]                           }
[16:10:34.925]                           base::stop(msg)
[16:10:34.925]                         }
[16:10:34.925]                       })
[16:10:34.925]                     }
[16:10:34.925]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:34.925]                     base::options(mc.cores = 1L)
[16:10:34.925]                   }
[16:10:34.925]                   options(future.plan = NULL)
[16:10:34.925]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:34.925]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:34.925]                 }
[16:10:34.925]                 ...future.workdir <- getwd()
[16:10:34.925]             }
[16:10:34.925]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:34.925]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:34.925]         }
[16:10:34.925]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:34.925]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[16:10:34.925]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:34.925]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:34.925]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:34.925]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:34.925]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:34.925]             base::names(...future.oldOptions))
[16:10:34.925]     }
[16:10:34.925]     if (FALSE) {
[16:10:34.925]     }
[16:10:34.925]     else {
[16:10:34.925]         if (TRUE) {
[16:10:34.925]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:34.925]                 open = "w")
[16:10:34.925]         }
[16:10:34.925]         else {
[16:10:34.925]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:34.925]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:34.925]         }
[16:10:34.925]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:34.925]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:34.925]             base::sink(type = "output", split = FALSE)
[16:10:34.925]             base::close(...future.stdout)
[16:10:34.925]         }, add = TRUE)
[16:10:34.925]     }
[16:10:34.925]     ...future.frame <- base::sys.nframe()
[16:10:34.925]     ...future.conditions <- base::list()
[16:10:34.925]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:34.925]     if (FALSE) {
[16:10:34.925]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:34.925]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:34.925]     }
[16:10:34.925]     ...future.result <- base::tryCatch({
[16:10:34.925]         base::withCallingHandlers({
[16:10:34.925]             ...future.value <- base::withVisible(base::local({
[16:10:34.925]                 withCallingHandlers({
[16:10:34.925]                   {
[16:10:34.925]                     do.call(function(...) {
[16:10:34.925]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.925]                       if (!identical(...future.globals.maxSize.org, 
[16:10:34.925]                         ...future.globals.maxSize)) {
[16:10:34.925]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.925]                         on.exit(options(oopts), add = TRUE)
[16:10:34.925]                       }
[16:10:34.925]                       {
[16:10:34.925]                         lapply(seq_along(...future.elements_ii), 
[16:10:34.925]                           FUN = function(jj) {
[16:10:34.925]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.925]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.925]                               envir = globalenv(), inherits = FALSE)
[16:10:34.925]                             ...future.FUN(...future.X_jj, ...)
[16:10:34.925]                           })
[16:10:34.925]                       }
[16:10:34.925]                     }, args = future.call.arguments)
[16:10:34.925]                   }
[16:10:34.925]                 }, immediateCondition = function(cond) {
[16:10:34.925]                   save_rds <- function (object, pathname, ...) 
[16:10:34.925]                   {
[16:10:34.925]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:10:34.925]                     if (file_test("-f", pathname_tmp)) {
[16:10:34.925]                       fi_tmp <- file.info(pathname_tmp)
[16:10:34.925]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:10:34.925]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:34.925]                         fi_tmp[["mtime"]])
[16:10:34.925]                     }
[16:10:34.925]                     tryCatch({
[16:10:34.925]                       saveRDS(object, file = pathname_tmp, ...)
[16:10:34.925]                     }, error = function(ex) {
[16:10:34.925]                       msg <- conditionMessage(ex)
[16:10:34.925]                       fi_tmp <- file.info(pathname_tmp)
[16:10:34.925]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:10:34.925]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:34.925]                         fi_tmp[["mtime"]], msg)
[16:10:34.925]                       ex$message <- msg
[16:10:34.925]                       stop(ex)
[16:10:34.925]                     })
[16:10:34.925]                     stopifnot(file_test("-f", pathname_tmp))
[16:10:34.925]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:10:34.925]                     if (!res || file_test("-f", pathname_tmp)) {
[16:10:34.925]                       fi_tmp <- file.info(pathname_tmp)
[16:10:34.925]                       fi <- file.info(pathname)
[16:10:34.925]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:10:34.925]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:34.925]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:10:34.925]                         fi[["size"]], fi[["mtime"]])
[16:10:34.925]                       stop(msg)
[16:10:34.925]                     }
[16:10:34.925]                     invisible(pathname)
[16:10:34.925]                   }
[16:10:34.925]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:10:34.925]                     rootPath = tempdir()) 
[16:10:34.925]                   {
[16:10:34.925]                     obj <- list(time = Sys.time(), condition = cond)
[16:10:34.925]                     file <- tempfile(pattern = class(cond)[1], 
[16:10:34.925]                       tmpdir = path, fileext = ".rds")
[16:10:34.925]                     save_rds(obj, file)
[16:10:34.925]                   }
[16:10:34.925]                   saveImmediateCondition(cond, path = "/tmp/RtmpLZUJI0/.future/immediateConditions")
[16:10:34.925]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:34.925]                   {
[16:10:34.925]                     inherits <- base::inherits
[16:10:34.925]                     invokeRestart <- base::invokeRestart
[16:10:34.925]                     is.null <- base::is.null
[16:10:34.925]                     muffled <- FALSE
[16:10:34.925]                     if (inherits(cond, "message")) {
[16:10:34.925]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:34.925]                       if (muffled) 
[16:10:34.925]                         invokeRestart("muffleMessage")
[16:10:34.925]                     }
[16:10:34.925]                     else if (inherits(cond, "warning")) {
[16:10:34.925]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:34.925]                       if (muffled) 
[16:10:34.925]                         invokeRestart("muffleWarning")
[16:10:34.925]                     }
[16:10:34.925]                     else if (inherits(cond, "condition")) {
[16:10:34.925]                       if (!is.null(pattern)) {
[16:10:34.925]                         computeRestarts <- base::computeRestarts
[16:10:34.925]                         grepl <- base::grepl
[16:10:34.925]                         restarts <- computeRestarts(cond)
[16:10:34.925]                         for (restart in restarts) {
[16:10:34.925]                           name <- restart$name
[16:10:34.925]                           if (is.null(name)) 
[16:10:34.925]                             next
[16:10:34.925]                           if (!grepl(pattern, name)) 
[16:10:34.925]                             next
[16:10:34.925]                           invokeRestart(restart)
[16:10:34.925]                           muffled <- TRUE
[16:10:34.925]                           break
[16:10:34.925]                         }
[16:10:34.925]                       }
[16:10:34.925]                     }
[16:10:34.925]                     invisible(muffled)
[16:10:34.925]                   }
[16:10:34.925]                   muffleCondition(cond)
[16:10:34.925]                 })
[16:10:34.925]             }))
[16:10:34.925]             future::FutureResult(value = ...future.value$value, 
[16:10:34.925]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:34.925]                   ...future.rng), globalenv = if (FALSE) 
[16:10:34.925]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:34.925]                     ...future.globalenv.names))
[16:10:34.925]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:34.925]         }, condition = base::local({
[16:10:34.925]             c <- base::c
[16:10:34.925]             inherits <- base::inherits
[16:10:34.925]             invokeRestart <- base::invokeRestart
[16:10:34.925]             length <- base::length
[16:10:34.925]             list <- base::list
[16:10:34.925]             seq.int <- base::seq.int
[16:10:34.925]             signalCondition <- base::signalCondition
[16:10:34.925]             sys.calls <- base::sys.calls
[16:10:34.925]             `[[` <- base::`[[`
[16:10:34.925]             `+` <- base::`+`
[16:10:34.925]             `<<-` <- base::`<<-`
[16:10:34.925]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:34.925]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:34.925]                   3L)]
[16:10:34.925]             }
[16:10:34.925]             function(cond) {
[16:10:34.925]                 is_error <- inherits(cond, "error")
[16:10:34.925]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:34.925]                   NULL)
[16:10:34.925]                 if (is_error) {
[16:10:34.925]                   sessionInformation <- function() {
[16:10:34.925]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:34.925]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:34.925]                       search = base::search(), system = base::Sys.info())
[16:10:34.925]                   }
[16:10:34.925]                   ...future.conditions[[length(...future.conditions) + 
[16:10:34.925]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:34.925]                     cond$call), session = sessionInformation(), 
[16:10:34.925]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:34.925]                   signalCondition(cond)
[16:10:34.925]                 }
[16:10:34.925]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:34.925]                 "immediateCondition"))) {
[16:10:34.925]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:34.925]                   ...future.conditions[[length(...future.conditions) + 
[16:10:34.925]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:34.925]                   if (TRUE && !signal) {
[16:10:34.925]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:34.925]                     {
[16:10:34.925]                       inherits <- base::inherits
[16:10:34.925]                       invokeRestart <- base::invokeRestart
[16:10:34.925]                       is.null <- base::is.null
[16:10:34.925]                       muffled <- FALSE
[16:10:34.925]                       if (inherits(cond, "message")) {
[16:10:34.925]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:34.925]                         if (muffled) 
[16:10:34.925]                           invokeRestart("muffleMessage")
[16:10:34.925]                       }
[16:10:34.925]                       else if (inherits(cond, "warning")) {
[16:10:34.925]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:34.925]                         if (muffled) 
[16:10:34.925]                           invokeRestart("muffleWarning")
[16:10:34.925]                       }
[16:10:34.925]                       else if (inherits(cond, "condition")) {
[16:10:34.925]                         if (!is.null(pattern)) {
[16:10:34.925]                           computeRestarts <- base::computeRestarts
[16:10:34.925]                           grepl <- base::grepl
[16:10:34.925]                           restarts <- computeRestarts(cond)
[16:10:34.925]                           for (restart in restarts) {
[16:10:34.925]                             name <- restart$name
[16:10:34.925]                             if (is.null(name)) 
[16:10:34.925]                               next
[16:10:34.925]                             if (!grepl(pattern, name)) 
[16:10:34.925]                               next
[16:10:34.925]                             invokeRestart(restart)
[16:10:34.925]                             muffled <- TRUE
[16:10:34.925]                             break
[16:10:34.925]                           }
[16:10:34.925]                         }
[16:10:34.925]                       }
[16:10:34.925]                       invisible(muffled)
[16:10:34.925]                     }
[16:10:34.925]                     muffleCondition(cond, pattern = "^muffle")
[16:10:34.925]                   }
[16:10:34.925]                 }
[16:10:34.925]                 else {
[16:10:34.925]                   if (TRUE) {
[16:10:34.925]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:34.925]                     {
[16:10:34.925]                       inherits <- base::inherits
[16:10:34.925]                       invokeRestart <- base::invokeRestart
[16:10:34.925]                       is.null <- base::is.null
[16:10:34.925]                       muffled <- FALSE
[16:10:34.925]                       if (inherits(cond, "message")) {
[16:10:34.925]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:34.925]                         if (muffled) 
[16:10:34.925]                           invokeRestart("muffleMessage")
[16:10:34.925]                       }
[16:10:34.925]                       else if (inherits(cond, "warning")) {
[16:10:34.925]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:34.925]                         if (muffled) 
[16:10:34.925]                           invokeRestart("muffleWarning")
[16:10:34.925]                       }
[16:10:34.925]                       else if (inherits(cond, "condition")) {
[16:10:34.925]                         if (!is.null(pattern)) {
[16:10:34.925]                           computeRestarts <- base::computeRestarts
[16:10:34.925]                           grepl <- base::grepl
[16:10:34.925]                           restarts <- computeRestarts(cond)
[16:10:34.925]                           for (restart in restarts) {
[16:10:34.925]                             name <- restart$name
[16:10:34.925]                             if (is.null(name)) 
[16:10:34.925]                               next
[16:10:34.925]                             if (!grepl(pattern, name)) 
[16:10:34.925]                               next
[16:10:34.925]                             invokeRestart(restart)
[16:10:34.925]                             muffled <- TRUE
[16:10:34.925]                             break
[16:10:34.925]                           }
[16:10:34.925]                         }
[16:10:34.925]                       }
[16:10:34.925]                       invisible(muffled)
[16:10:34.925]                     }
[16:10:34.925]                     muffleCondition(cond, pattern = "^muffle")
[16:10:34.925]                   }
[16:10:34.925]                 }
[16:10:34.925]             }
[16:10:34.925]         }))
[16:10:34.925]     }, error = function(ex) {
[16:10:34.925]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:34.925]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:34.925]                 ...future.rng), started = ...future.startTime, 
[16:10:34.925]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:34.925]             version = "1.8"), class = "FutureResult")
[16:10:34.925]     }, finally = {
[16:10:34.925]         if (!identical(...future.workdir, getwd())) 
[16:10:34.925]             setwd(...future.workdir)
[16:10:34.925]         {
[16:10:34.925]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:34.925]                 ...future.oldOptions$nwarnings <- NULL
[16:10:34.925]             }
[16:10:34.925]             base::options(...future.oldOptions)
[16:10:34.925]             if (.Platform$OS.type == "windows") {
[16:10:34.925]                 old_names <- names(...future.oldEnvVars)
[16:10:34.925]                 envs <- base::Sys.getenv()
[16:10:34.925]                 names <- names(envs)
[16:10:34.925]                 common <- intersect(names, old_names)
[16:10:34.925]                 added <- setdiff(names, old_names)
[16:10:34.925]                 removed <- setdiff(old_names, names)
[16:10:34.925]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:34.925]                   envs[common]]
[16:10:34.925]                 NAMES <- toupper(changed)
[16:10:34.925]                 args <- list()
[16:10:34.925]                 for (kk in seq_along(NAMES)) {
[16:10:34.925]                   name <- changed[[kk]]
[16:10:34.925]                   NAME <- NAMES[[kk]]
[16:10:34.925]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.925]                     next
[16:10:34.925]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:34.925]                 }
[16:10:34.925]                 NAMES <- toupper(added)
[16:10:34.925]                 for (kk in seq_along(NAMES)) {
[16:10:34.925]                   name <- added[[kk]]
[16:10:34.925]                   NAME <- NAMES[[kk]]
[16:10:34.925]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.925]                     next
[16:10:34.925]                   args[[name]] <- ""
[16:10:34.925]                 }
[16:10:34.925]                 NAMES <- toupper(removed)
[16:10:34.925]                 for (kk in seq_along(NAMES)) {
[16:10:34.925]                   name <- removed[[kk]]
[16:10:34.925]                   NAME <- NAMES[[kk]]
[16:10:34.925]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.925]                     next
[16:10:34.925]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:34.925]                 }
[16:10:34.925]                 if (length(args) > 0) 
[16:10:34.925]                   base::do.call(base::Sys.setenv, args = args)
[16:10:34.925]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:34.925]             }
[16:10:34.925]             else {
[16:10:34.925]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:34.925]             }
[16:10:34.925]             {
[16:10:34.925]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:34.925]                   0L) {
[16:10:34.925]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:34.925]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:34.925]                   base::options(opts)
[16:10:34.925]                 }
[16:10:34.925]                 {
[16:10:34.925]                   {
[16:10:34.925]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:34.925]                     NULL
[16:10:34.925]                   }
[16:10:34.925]                   options(future.plan = NULL)
[16:10:34.925]                   if (is.na(NA_character_)) 
[16:10:34.925]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:34.925]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:34.925]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:10:34.925]                     envir = parent.frame()) 
[16:10:34.925]                   {
[16:10:34.925]                     default_workers <- missing(workers)
[16:10:34.925]                     if (is.function(workers)) 
[16:10:34.925]                       workers <- workers()
[16:10:34.925]                     workers <- structure(as.integer(workers), 
[16:10:34.925]                       class = class(workers))
[16:10:34.925]                     stop_if_not(is.finite(workers), workers >= 
[16:10:34.925]                       1L)
[16:10:34.925]                     if ((workers == 1L && !inherits(workers, 
[16:10:34.925]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:10:34.925]                       if (default_workers) 
[16:10:34.925]                         supportsMulticore(warn = TRUE)
[16:10:34.925]                       return(sequential(..., envir = envir))
[16:10:34.925]                     }
[16:10:34.925]                     oopts <- options(mc.cores = workers)
[16:10:34.925]                     on.exit(options(oopts))
[16:10:34.925]                     future <- MulticoreFuture(..., workers = workers, 
[16:10:34.925]                       envir = envir)
[16:10:34.925]                     if (!future$lazy) 
[16:10:34.925]                       future <- run(future)
[16:10:34.925]                     invisible(future)
[16:10:34.925]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:34.925]                 }
[16:10:34.925]             }
[16:10:34.925]         }
[16:10:34.925]     })
[16:10:34.925]     if (TRUE) {
[16:10:34.925]         base::sink(type = "output", split = FALSE)
[16:10:34.925]         if (TRUE) {
[16:10:34.925]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:34.925]         }
[16:10:34.925]         else {
[16:10:34.925]             ...future.result["stdout"] <- base::list(NULL)
[16:10:34.925]         }
[16:10:34.925]         base::close(...future.stdout)
[16:10:34.925]         ...future.stdout <- NULL
[16:10:34.925]     }
[16:10:34.925]     ...future.result$conditions <- ...future.conditions
[16:10:34.925]     ...future.result$finished <- base::Sys.time()
[16:10:34.925]     ...future.result
[16:10:34.925] }
[16:10:34.927] assign_globals() ...
[16:10:34.928] List of 5
[16:10:34.928]  $ ...future.FUN            :function (...)  
[16:10:34.928]  $ future.call.arguments    : list()
[16:10:34.928]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.928]  $ ...future.elements_ii    :List of 3
[16:10:34.928]   ..$ : int 0
[16:10:34.928]   ..$ : int 0
[16:10:34.928]   ..$ : int 0
[16:10:34.928]  $ ...future.seeds_ii       :List of 3
[16:10:34.928]   ..$ : int [1:7] 10407 2000585943 1277356830 -2089408352 -860958827 226502925 99834792
[16:10:34.928]   ..$ : int [1:7] 10407 -1366366742 -1587533199 -987670999 1146693195 -372746989 -1779846945
[16:10:34.928]   ..$ : int [1:7] 10407 -1326244930 -121340665 862160877 1069041468 -111293265 1245428870
[16:10:34.928]  $ ...future.globals.maxSize: NULL
[16:10:34.928]  - attr(*, "resolved")= logi FALSE
[16:10:34.928]  - attr(*, "total_size")= num 616
[16:10:34.928]  - attr(*, "where")=List of 5
[16:10:34.928]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:10:34.928]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:10:34.928]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:10:34.928]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:10:34.928]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:10:34.928]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.928]  - attr(*, "already-done")= logi TRUE
[16:10:34.938] - reassign environment for ‘...future.FUN’
[16:10:34.938] - copied ‘...future.FUN’ to environment
[16:10:34.938] - copied ‘future.call.arguments’ to environment
[16:10:34.939] - copied ‘...future.elements_ii’ to environment
[16:10:34.939] - copied ‘...future.seeds_ii’ to environment
[16:10:34.939] - copied ‘...future.globals.maxSize’ to environment
[16:10:34.939] assign_globals() ... done
[16:10:34.939] requestCore(): workers = 2
[16:10:34.945] MulticoreFuture started
[16:10:34.945] - Launch lazy future ... done
[16:10:34.945] run() for ‘MulticoreFuture’ ... done
[16:10:34.945] Created future:
[16:10:34.946] plan(): Setting new future strategy stack:
[16:10:34.946] List of future strategies:
[16:10:34.946] 1. sequential:
[16:10:34.946]    - args: function (..., envir = parent.frame())
[16:10:34.946]    - tweaked: FALSE
[16:10:34.946]    - call: NULL
[16:10:34.947] plan(): nbrOfWorkers() = 1
[16:10:34.949] plan(): Setting new future strategy stack:
[16:10:34.949] List of future strategies:
[16:10:34.949] 1. multicore:
[16:10:34.949]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:10:34.949]    - tweaked: FALSE
[16:10:34.949]    - call: plan(strategy)
[16:10:34.954] plan(): nbrOfWorkers() = 2
[16:10:34.946] MulticoreFuture:
[16:10:34.946] Label: ‘future_replicate-2’
[16:10:34.946] Expression:
[16:10:34.946] {
[16:10:34.946]     do.call(function(...) {
[16:10:34.946]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.946]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:34.946]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.946]             on.exit(options(oopts), add = TRUE)
[16:10:34.946]         }
[16:10:34.946]         {
[16:10:34.946]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:34.946]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.946]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.946]                   envir = globalenv(), inherits = FALSE)
[16:10:34.946]                 ...future.FUN(...future.X_jj, ...)
[16:10:34.946]             })
[16:10:34.946]         }
[16:10:34.946]     }, args = future.call.arguments)
[16:10:34.946] }
[16:10:34.946] Lazy evaluation: FALSE
[16:10:34.946] Asynchronous evaluation: TRUE
[16:10:34.946] Local evaluation: TRUE
[16:10:34.946] Environment: R_GlobalEnv
[16:10:34.946] Capture standard output: TRUE
[16:10:34.946] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:34.946] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:34.946] Packages: <none>
[16:10:34.946] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:34.946] Resolved: TRUE
[16:10:34.946] Value: <not collected>
[16:10:34.946] Conditions captured: <none>
[16:10:34.946] Early signaling: FALSE
[16:10:34.946] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:34.946] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:34.955] Chunk #2 of 2 ... DONE
[16:10:34.955] Launching 2 futures (chunks) ... DONE
[16:10:34.955] Resolving 2 futures (chunks) ...
[16:10:34.955] resolve() on list ...
[16:10:34.955]  recursive: 0
[16:10:34.956]  length: 2
[16:10:34.956] 
[16:10:34.956] Future #1
[16:10:34.958] signalConditionsASAP(MulticoreFuture, pos=1) ...
[16:10:34.958] - nx: 2
[16:10:34.959] - relay: TRUE
[16:10:34.959] - stdout: TRUE
[16:10:34.959] - signal: TRUE
[16:10:34.959] - resignal: FALSE
[16:10:34.959] - force: TRUE
[16:10:34.959] - relayed: [n=2] FALSE, FALSE
[16:10:34.960] - queued futures: [n=2] FALSE, FALSE
[16:10:34.960]  - until=1
[16:10:34.960]  - relaying element #1
[16:10:34.960] - relayed: [n=2] TRUE, FALSE
[16:10:34.961] - queued futures: [n=2] TRUE, FALSE
[16:10:34.961] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[16:10:34.961]  length: 1 (resolved future 1)
[16:10:34.961] Future #2
[16:10:34.962] signalConditionsASAP(MulticoreFuture, pos=2) ...
[16:10:34.962] - nx: 2
[16:10:34.962] - relay: TRUE
[16:10:34.963] - stdout: TRUE
[16:10:34.963] - signal: TRUE
[16:10:34.963] - resignal: FALSE
[16:10:34.963] - force: TRUE
[16:10:34.963] - relayed: [n=2] TRUE, FALSE
[16:10:34.963] - queued futures: [n=2] TRUE, FALSE
[16:10:34.963]  - until=2
[16:10:34.963]  - relaying element #2
[16:10:34.964] - relayed: [n=2] TRUE, TRUE
[16:10:34.964] - queued futures: [n=2] TRUE, TRUE
[16:10:34.964] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[16:10:34.964]  length: 0 (resolved future 2)
[16:10:34.964] Relaying remaining futures
[16:10:34.964] signalConditionsASAP(NULL, pos=0) ...
[16:10:34.964] - nx: 2
[16:10:34.965] - relay: TRUE
[16:10:34.965] - stdout: TRUE
[16:10:34.965] - signal: TRUE
[16:10:34.965] - resignal: FALSE
[16:10:34.965] - force: TRUE
[16:10:34.965] - relayed: [n=2] TRUE, TRUE
[16:10:34.965] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:10:34.965] - relayed: [n=2] TRUE, TRUE
[16:10:34.965] - queued futures: [n=2] TRUE, TRUE
[16:10:34.966] signalConditionsASAP(NULL, pos=0) ... done
[16:10:34.966] resolve() on list ... DONE
[16:10:34.966]  - Number of value chunks collected: 2
[16:10:34.966] Resolving 2 futures (chunks) ... DONE
[16:10:34.966] Reducing values from 2 chunks ...
[16:10:34.966]  - Number of values collected after concatenation: 5
[16:10:34.966]  - Number of values expected: 5
[16:10:34.966] Reducing values from 2 chunks ... DONE
[16:10:34.967] future_lapply() ... DONE
[16:10:34.967] future_lapply() ...
[16:10:34.967] Generating random seeds ...
[16:10:34.967] Generating random seed streams for 5 elements ...
[16:10:34.968] Generating random seed streams for 5 elements ... DONE
[16:10:34.970] Generating random seeds ... DONE
[16:10:34.970] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:10:34.975] Number of chunks: 2
[16:10:34.975] getGlobalsAndPackagesXApply() ...
[16:10:34.975]  - future.globals: TRUE
[16:10:34.975] getGlobalsAndPackages() ...
[16:10:34.975] Searching for globals...
[16:10:34.977] - globals found: [2] ‘FUN’, ‘sample’
[16:10:34.977] Searching for globals ... DONE
[16:10:34.977] Resolving globals: FALSE
[16:10:34.977] The total size of the 1 globals is 616 bytes (616 bytes)
[16:10:34.978] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:10:34.978] - globals: [1] ‘FUN’
[16:10:34.978] 
[16:10:34.978] getGlobalsAndPackages() ... DONE
[16:10:34.978]  - globals found/used: [n=1] ‘FUN’
[16:10:34.979]  - needed namespaces: [n=0] 
[16:10:34.979] Finding globals ... DONE
[16:10:34.979]  - use_args: TRUE
[16:10:34.979]  - Getting '...' globals ...
[16:10:34.979] resolve() on list ...
[16:10:34.979]  recursive: 0
[16:10:34.979]  length: 1
[16:10:34.980]  elements: ‘...’
[16:10:34.980]  length: 0 (resolved future 1)
[16:10:34.980] resolve() on list ... DONE
[16:10:34.980]    - '...' content: [n=0] 
[16:10:34.980] List of 1
[16:10:34.980]  $ ...: list()
[16:10:34.980]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.980]  - attr(*, "where")=List of 1
[16:10:34.980]   ..$ ...:<environment: 0x55cf8edfd370> 
[16:10:34.980]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.980]  - attr(*, "resolved")= logi TRUE
[16:10:34.980]  - attr(*, "total_size")= num NA
[16:10:34.983]  - Getting '...' globals ... DONE
[16:10:34.983] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:10:34.984] List of 2
[16:10:34.984]  $ ...future.FUN:function (...)  
[16:10:34.984]  $ ...          : list()
[16:10:34.984]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.984]  - attr(*, "where")=List of 2
[16:10:34.984]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:10:34.984]   ..$ ...          :<environment: 0x55cf8edfd370> 
[16:10:34.984]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.984]  - attr(*, "resolved")= logi FALSE
[16:10:34.984]  - attr(*, "total_size")= num 616
[16:10:34.987] Packages to be attached in all futures: [n=0] 
[16:10:34.987] getGlobalsAndPackagesXApply() ... DONE
[16:10:34.987] Number of futures (= number of chunks): 2
[16:10:34.987] Launching 2 futures (chunks) ...
[16:10:34.987] Chunk #1 of 2 ...
[16:10:34.987]  - Finding globals in 'X' for chunk #1 ...
[16:10:34.987] getGlobalsAndPackages() ...
[16:10:34.987] Searching for globals...
[16:10:34.988] 
[16:10:34.988] Searching for globals ... DONE
[16:10:34.988] - globals: [0] <none>
[16:10:34.988] getGlobalsAndPackages() ... DONE
[16:10:34.988]    + additional globals found: [n=0] 
[16:10:34.988]    + additional namespaces needed: [n=0] 
[16:10:34.988]  - Finding globals in 'X' for chunk #1 ... DONE
[16:10:34.988]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:10:34.988]  - seeds: [2] <seeds>
[16:10:34.989] getGlobalsAndPackages() ...
[16:10:34.989] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:34.989] Resolving globals: FALSE
[16:10:34.989] Tweak future expression to call with '...' arguments ...
[16:10:34.989] {
[16:10:34.989]     do.call(function(...) {
[16:10:34.989]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.989]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:34.989]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.989]             on.exit(options(oopts), add = TRUE)
[16:10:34.989]         }
[16:10:34.989]         {
[16:10:34.989]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:34.989]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.989]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.989]                   envir = globalenv(), inherits = FALSE)
[16:10:34.989]                 ...future.FUN(...future.X_jj, ...)
[16:10:34.989]             })
[16:10:34.989]         }
[16:10:34.989]     }, args = future.call.arguments)
[16:10:34.989] }
[16:10:34.989] Tweak future expression to call with '...' arguments ... DONE
[16:10:34.990] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:34.990] 
[16:10:34.990] getGlobalsAndPackages() ... DONE
[16:10:34.990] run() for ‘Future’ ...
[16:10:34.990] - state: ‘created’
[16:10:34.990] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:10:34.994] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:34.994] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:10:34.994]   - Field: ‘label’
[16:10:34.994]   - Field: ‘local’
[16:10:34.994]   - Field: ‘owner’
[16:10:34.994]   - Field: ‘envir’
[16:10:34.994]   - Field: ‘workers’
[16:10:34.994]   - Field: ‘packages’
[16:10:34.995]   - Field: ‘gc’
[16:10:34.995]   - Field: ‘job’
[16:10:34.995]   - Field: ‘conditions’
[16:10:34.995]   - Field: ‘expr’
[16:10:34.995]   - Field: ‘uuid’
[16:10:34.995]   - Field: ‘seed’
[16:10:34.995]   - Field: ‘version’
[16:10:34.995]   - Field: ‘result’
[16:10:34.995]   - Field: ‘asynchronous’
[16:10:34.995]   - Field: ‘calls’
[16:10:34.995]   - Field: ‘globals’
[16:10:34.996]   - Field: ‘stdout’
[16:10:34.996]   - Field: ‘earlySignal’
[16:10:34.996]   - Field: ‘lazy’
[16:10:34.996]   - Field: ‘state’
[16:10:34.996] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:10:34.996] - Launch lazy future ...
[16:10:34.996] Packages needed by the future expression (n = 0): <none>
[16:10:34.996] Packages needed by future strategies (n = 0): <none>
[16:10:34.997] {
[16:10:34.997]     {
[16:10:34.997]         {
[16:10:34.997]             ...future.startTime <- base::Sys.time()
[16:10:34.997]             {
[16:10:34.997]                 {
[16:10:34.997]                   {
[16:10:34.997]                     {
[16:10:34.997]                       base::local({
[16:10:34.997]                         has_future <- base::requireNamespace("future", 
[16:10:34.997]                           quietly = TRUE)
[16:10:34.997]                         if (has_future) {
[16:10:34.997]                           ns <- base::getNamespace("future")
[16:10:34.997]                           version <- ns[[".package"]][["version"]]
[16:10:34.997]                           if (is.null(version)) 
[16:10:34.997]                             version <- utils::packageVersion("future")
[16:10:34.997]                         }
[16:10:34.997]                         else {
[16:10:34.997]                           version <- NULL
[16:10:34.997]                         }
[16:10:34.997]                         if (!has_future || version < "1.8.0") {
[16:10:34.997]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:34.997]                             "", base::R.version$version.string), 
[16:10:34.997]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:34.997]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:34.997]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:34.997]                               "release", "version")], collapse = " "), 
[16:10:34.997]                             hostname = base::Sys.info()[["nodename"]])
[16:10:34.997]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:34.997]                             info)
[16:10:34.997]                           info <- base::paste(info, collapse = "; ")
[16:10:34.997]                           if (!has_future) {
[16:10:34.997]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:34.997]                               info)
[16:10:34.997]                           }
[16:10:34.997]                           else {
[16:10:34.997]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:34.997]                               info, version)
[16:10:34.997]                           }
[16:10:34.997]                           base::stop(msg)
[16:10:34.997]                         }
[16:10:34.997]                       })
[16:10:34.997]                     }
[16:10:34.997]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:34.997]                     base::options(mc.cores = 1L)
[16:10:34.997]                   }
[16:10:34.997]                   options(future.plan = NULL)
[16:10:34.997]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:34.997]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:34.997]                 }
[16:10:34.997]                 ...future.workdir <- getwd()
[16:10:34.997]             }
[16:10:34.997]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:34.997]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:34.997]         }
[16:10:34.997]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:34.997]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:10:34.997]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:34.997]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:34.997]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:34.997]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:34.997]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:34.997]             base::names(...future.oldOptions))
[16:10:34.997]     }
[16:10:34.997]     if (FALSE) {
[16:10:34.997]     }
[16:10:34.997]     else {
[16:10:34.997]         if (TRUE) {
[16:10:34.997]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:34.997]                 open = "w")
[16:10:34.997]         }
[16:10:34.997]         else {
[16:10:34.997]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:34.997]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:34.997]         }
[16:10:34.997]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:34.997]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:34.997]             base::sink(type = "output", split = FALSE)
[16:10:34.997]             base::close(...future.stdout)
[16:10:34.997]         }, add = TRUE)
[16:10:34.997]     }
[16:10:34.997]     ...future.frame <- base::sys.nframe()
[16:10:34.997]     ...future.conditions <- base::list()
[16:10:34.997]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:34.997]     if (FALSE) {
[16:10:34.997]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:34.997]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:34.997]     }
[16:10:34.997]     ...future.result <- base::tryCatch({
[16:10:34.997]         base::withCallingHandlers({
[16:10:34.997]             ...future.value <- base::withVisible(base::local({
[16:10:34.997]                 withCallingHandlers({
[16:10:34.997]                   {
[16:10:34.997]                     do.call(function(...) {
[16:10:34.997]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:34.997]                       if (!identical(...future.globals.maxSize.org, 
[16:10:34.997]                         ...future.globals.maxSize)) {
[16:10:34.997]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:34.997]                         on.exit(options(oopts), add = TRUE)
[16:10:34.997]                       }
[16:10:34.997]                       {
[16:10:34.997]                         lapply(seq_along(...future.elements_ii), 
[16:10:34.997]                           FUN = function(jj) {
[16:10:34.997]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:34.997]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:34.997]                               envir = globalenv(), inherits = FALSE)
[16:10:34.997]                             ...future.FUN(...future.X_jj, ...)
[16:10:34.997]                           })
[16:10:34.997]                       }
[16:10:34.997]                     }, args = future.call.arguments)
[16:10:34.997]                   }
[16:10:34.997]                 }, immediateCondition = function(cond) {
[16:10:34.997]                   save_rds <- function (object, pathname, ...) 
[16:10:34.997]                   {
[16:10:34.997]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:10:34.997]                     if (file_test("-f", pathname_tmp)) {
[16:10:34.997]                       fi_tmp <- file.info(pathname_tmp)
[16:10:34.997]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:10:34.997]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:34.997]                         fi_tmp[["mtime"]])
[16:10:34.997]                     }
[16:10:34.997]                     tryCatch({
[16:10:34.997]                       saveRDS(object, file = pathname_tmp, ...)
[16:10:34.997]                     }, error = function(ex) {
[16:10:34.997]                       msg <- conditionMessage(ex)
[16:10:34.997]                       fi_tmp <- file.info(pathname_tmp)
[16:10:34.997]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:10:34.997]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:34.997]                         fi_tmp[["mtime"]], msg)
[16:10:34.997]                       ex$message <- msg
[16:10:34.997]                       stop(ex)
[16:10:34.997]                     })
[16:10:34.997]                     stopifnot(file_test("-f", pathname_tmp))
[16:10:34.997]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:10:34.997]                     if (!res || file_test("-f", pathname_tmp)) {
[16:10:34.997]                       fi_tmp <- file.info(pathname_tmp)
[16:10:34.997]                       fi <- file.info(pathname)
[16:10:34.997]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:10:34.997]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:34.997]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:10:34.997]                         fi[["size"]], fi[["mtime"]])
[16:10:34.997]                       stop(msg)
[16:10:34.997]                     }
[16:10:34.997]                     invisible(pathname)
[16:10:34.997]                   }
[16:10:34.997]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:10:34.997]                     rootPath = tempdir()) 
[16:10:34.997]                   {
[16:10:34.997]                     obj <- list(time = Sys.time(), condition = cond)
[16:10:34.997]                     file <- tempfile(pattern = class(cond)[1], 
[16:10:34.997]                       tmpdir = path, fileext = ".rds")
[16:10:34.997]                     save_rds(obj, file)
[16:10:34.997]                   }
[16:10:34.997]                   saveImmediateCondition(cond, path = "/tmp/RtmpLZUJI0/.future/immediateConditions")
[16:10:34.997]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:34.997]                   {
[16:10:34.997]                     inherits <- base::inherits
[16:10:34.997]                     invokeRestart <- base::invokeRestart
[16:10:34.997]                     is.null <- base::is.null
[16:10:34.997]                     muffled <- FALSE
[16:10:34.997]                     if (inherits(cond, "message")) {
[16:10:34.997]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:34.997]                       if (muffled) 
[16:10:34.997]                         invokeRestart("muffleMessage")
[16:10:34.997]                     }
[16:10:34.997]                     else if (inherits(cond, "warning")) {
[16:10:34.997]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:34.997]                       if (muffled) 
[16:10:34.997]                         invokeRestart("muffleWarning")
[16:10:34.997]                     }
[16:10:34.997]                     else if (inherits(cond, "condition")) {
[16:10:34.997]                       if (!is.null(pattern)) {
[16:10:34.997]                         computeRestarts <- base::computeRestarts
[16:10:34.997]                         grepl <- base::grepl
[16:10:34.997]                         restarts <- computeRestarts(cond)
[16:10:34.997]                         for (restart in restarts) {
[16:10:34.997]                           name <- restart$name
[16:10:34.997]                           if (is.null(name)) 
[16:10:34.997]                             next
[16:10:34.997]                           if (!grepl(pattern, name)) 
[16:10:34.997]                             next
[16:10:34.997]                           invokeRestart(restart)
[16:10:34.997]                           muffled <- TRUE
[16:10:34.997]                           break
[16:10:34.997]                         }
[16:10:34.997]                       }
[16:10:34.997]                     }
[16:10:34.997]                     invisible(muffled)
[16:10:34.997]                   }
[16:10:34.997]                   muffleCondition(cond)
[16:10:34.997]                 })
[16:10:34.997]             }))
[16:10:34.997]             future::FutureResult(value = ...future.value$value, 
[16:10:34.997]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:34.997]                   ...future.rng), globalenv = if (FALSE) 
[16:10:34.997]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:34.997]                     ...future.globalenv.names))
[16:10:34.997]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:34.997]         }, condition = base::local({
[16:10:34.997]             c <- base::c
[16:10:34.997]             inherits <- base::inherits
[16:10:34.997]             invokeRestart <- base::invokeRestart
[16:10:34.997]             length <- base::length
[16:10:34.997]             list <- base::list
[16:10:34.997]             seq.int <- base::seq.int
[16:10:34.997]             signalCondition <- base::signalCondition
[16:10:34.997]             sys.calls <- base::sys.calls
[16:10:34.997]             `[[` <- base::`[[`
[16:10:34.997]             `+` <- base::`+`
[16:10:34.997]             `<<-` <- base::`<<-`
[16:10:34.997]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:34.997]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:34.997]                   3L)]
[16:10:34.997]             }
[16:10:34.997]             function(cond) {
[16:10:34.997]                 is_error <- inherits(cond, "error")
[16:10:34.997]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:34.997]                   NULL)
[16:10:34.997]                 if (is_error) {
[16:10:34.997]                   sessionInformation <- function() {
[16:10:34.997]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:34.997]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:34.997]                       search = base::search(), system = base::Sys.info())
[16:10:34.997]                   }
[16:10:34.997]                   ...future.conditions[[length(...future.conditions) + 
[16:10:34.997]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:34.997]                     cond$call), session = sessionInformation(), 
[16:10:34.997]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:34.997]                   signalCondition(cond)
[16:10:34.997]                 }
[16:10:34.997]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:34.997]                 "immediateCondition"))) {
[16:10:34.997]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:34.997]                   ...future.conditions[[length(...future.conditions) + 
[16:10:34.997]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:34.997]                   if (TRUE && !signal) {
[16:10:34.997]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:34.997]                     {
[16:10:34.997]                       inherits <- base::inherits
[16:10:34.997]                       invokeRestart <- base::invokeRestart
[16:10:34.997]                       is.null <- base::is.null
[16:10:34.997]                       muffled <- FALSE
[16:10:34.997]                       if (inherits(cond, "message")) {
[16:10:34.997]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:34.997]                         if (muffled) 
[16:10:34.997]                           invokeRestart("muffleMessage")
[16:10:34.997]                       }
[16:10:34.997]                       else if (inherits(cond, "warning")) {
[16:10:34.997]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:34.997]                         if (muffled) 
[16:10:34.997]                           invokeRestart("muffleWarning")
[16:10:34.997]                       }
[16:10:34.997]                       else if (inherits(cond, "condition")) {
[16:10:34.997]                         if (!is.null(pattern)) {
[16:10:34.997]                           computeRestarts <- base::computeRestarts
[16:10:34.997]                           grepl <- base::grepl
[16:10:34.997]                           restarts <- computeRestarts(cond)
[16:10:34.997]                           for (restart in restarts) {
[16:10:34.997]                             name <- restart$name
[16:10:34.997]                             if (is.null(name)) 
[16:10:34.997]                               next
[16:10:34.997]                             if (!grepl(pattern, name)) 
[16:10:34.997]                               next
[16:10:34.997]                             invokeRestart(restart)
[16:10:34.997]                             muffled <- TRUE
[16:10:34.997]                             break
[16:10:34.997]                           }
[16:10:34.997]                         }
[16:10:34.997]                       }
[16:10:34.997]                       invisible(muffled)
[16:10:34.997]                     }
[16:10:34.997]                     muffleCondition(cond, pattern = "^muffle")
[16:10:34.997]                   }
[16:10:34.997]                 }
[16:10:34.997]                 else {
[16:10:34.997]                   if (TRUE) {
[16:10:34.997]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:34.997]                     {
[16:10:34.997]                       inherits <- base::inherits
[16:10:34.997]                       invokeRestart <- base::invokeRestart
[16:10:34.997]                       is.null <- base::is.null
[16:10:34.997]                       muffled <- FALSE
[16:10:34.997]                       if (inherits(cond, "message")) {
[16:10:34.997]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:34.997]                         if (muffled) 
[16:10:34.997]                           invokeRestart("muffleMessage")
[16:10:34.997]                       }
[16:10:34.997]                       else if (inherits(cond, "warning")) {
[16:10:34.997]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:34.997]                         if (muffled) 
[16:10:34.997]                           invokeRestart("muffleWarning")
[16:10:34.997]                       }
[16:10:34.997]                       else if (inherits(cond, "condition")) {
[16:10:34.997]                         if (!is.null(pattern)) {
[16:10:34.997]                           computeRestarts <- base::computeRestarts
[16:10:34.997]                           grepl <- base::grepl
[16:10:34.997]                           restarts <- computeRestarts(cond)
[16:10:34.997]                           for (restart in restarts) {
[16:10:34.997]                             name <- restart$name
[16:10:34.997]                             if (is.null(name)) 
[16:10:34.997]                               next
[16:10:34.997]                             if (!grepl(pattern, name)) 
[16:10:34.997]                               next
[16:10:34.997]                             invokeRestart(restart)
[16:10:34.997]                             muffled <- TRUE
[16:10:34.997]                             break
[16:10:34.997]                           }
[16:10:34.997]                         }
[16:10:34.997]                       }
[16:10:34.997]                       invisible(muffled)
[16:10:34.997]                     }
[16:10:34.997]                     muffleCondition(cond, pattern = "^muffle")
[16:10:34.997]                   }
[16:10:34.997]                 }
[16:10:34.997]             }
[16:10:34.997]         }))
[16:10:34.997]     }, error = function(ex) {
[16:10:34.997]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:34.997]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:34.997]                 ...future.rng), started = ...future.startTime, 
[16:10:34.997]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:34.997]             version = "1.8"), class = "FutureResult")
[16:10:34.997]     }, finally = {
[16:10:34.997]         if (!identical(...future.workdir, getwd())) 
[16:10:34.997]             setwd(...future.workdir)
[16:10:34.997]         {
[16:10:34.997]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:34.997]                 ...future.oldOptions$nwarnings <- NULL
[16:10:34.997]             }
[16:10:34.997]             base::options(...future.oldOptions)
[16:10:34.997]             if (.Platform$OS.type == "windows") {
[16:10:34.997]                 old_names <- names(...future.oldEnvVars)
[16:10:34.997]                 envs <- base::Sys.getenv()
[16:10:34.997]                 names <- names(envs)
[16:10:34.997]                 common <- intersect(names, old_names)
[16:10:34.997]                 added <- setdiff(names, old_names)
[16:10:34.997]                 removed <- setdiff(old_names, names)
[16:10:34.997]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:34.997]                   envs[common]]
[16:10:34.997]                 NAMES <- toupper(changed)
[16:10:34.997]                 args <- list()
[16:10:34.997]                 for (kk in seq_along(NAMES)) {
[16:10:34.997]                   name <- changed[[kk]]
[16:10:34.997]                   NAME <- NAMES[[kk]]
[16:10:34.997]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.997]                     next
[16:10:34.997]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:34.997]                 }
[16:10:34.997]                 NAMES <- toupper(added)
[16:10:34.997]                 for (kk in seq_along(NAMES)) {
[16:10:34.997]                   name <- added[[kk]]
[16:10:34.997]                   NAME <- NAMES[[kk]]
[16:10:34.997]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.997]                     next
[16:10:34.997]                   args[[name]] <- ""
[16:10:34.997]                 }
[16:10:34.997]                 NAMES <- toupper(removed)
[16:10:34.997]                 for (kk in seq_along(NAMES)) {
[16:10:34.997]                   name <- removed[[kk]]
[16:10:34.997]                   NAME <- NAMES[[kk]]
[16:10:34.997]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:34.997]                     next
[16:10:34.997]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:34.997]                 }
[16:10:34.997]                 if (length(args) > 0) 
[16:10:34.997]                   base::do.call(base::Sys.setenv, args = args)
[16:10:34.997]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:34.997]             }
[16:10:34.997]             else {
[16:10:34.997]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:34.997]             }
[16:10:34.997]             {
[16:10:34.997]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:34.997]                   0L) {
[16:10:34.997]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:34.997]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:34.997]                   base::options(opts)
[16:10:34.997]                 }
[16:10:34.997]                 {
[16:10:34.997]                   {
[16:10:34.997]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:34.997]                     NULL
[16:10:34.997]                   }
[16:10:34.997]                   options(future.plan = NULL)
[16:10:34.997]                   if (is.na(NA_character_)) 
[16:10:34.997]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:34.997]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:34.997]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:10:34.997]                     envir = parent.frame()) 
[16:10:34.997]                   {
[16:10:34.997]                     default_workers <- missing(workers)
[16:10:34.997]                     if (is.function(workers)) 
[16:10:34.997]                       workers <- workers()
[16:10:34.997]                     workers <- structure(as.integer(workers), 
[16:10:34.997]                       class = class(workers))
[16:10:34.997]                     stop_if_not(is.finite(workers), workers >= 
[16:10:34.997]                       1L)
[16:10:34.997]                     if ((workers == 1L && !inherits(workers, 
[16:10:34.997]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:10:34.997]                       if (default_workers) 
[16:10:34.997]                         supportsMulticore(warn = TRUE)
[16:10:34.997]                       return(sequential(..., envir = envir))
[16:10:34.997]                     }
[16:10:34.997]                     oopts <- options(mc.cores = workers)
[16:10:34.997]                     on.exit(options(oopts))
[16:10:34.997]                     future <- MulticoreFuture(..., workers = workers, 
[16:10:34.997]                       envir = envir)
[16:10:34.997]                     if (!future$lazy) 
[16:10:34.997]                       future <- run(future)
[16:10:34.997]                     invisible(future)
[16:10:34.997]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:34.997]                 }
[16:10:34.997]             }
[16:10:34.997]         }
[16:10:34.997]     })
[16:10:34.997]     if (TRUE) {
[16:10:34.997]         base::sink(type = "output", split = FALSE)
[16:10:34.997]         if (TRUE) {
[16:10:34.997]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:34.997]         }
[16:10:34.997]         else {
[16:10:34.997]             ...future.result["stdout"] <- base::list(NULL)
[16:10:34.997]         }
[16:10:34.997]         base::close(...future.stdout)
[16:10:34.997]         ...future.stdout <- NULL
[16:10:34.997]     }
[16:10:34.997]     ...future.result$conditions <- ...future.conditions
[16:10:34.997]     ...future.result$finished <- base::Sys.time()
[16:10:34.997]     ...future.result
[16:10:34.997] }
[16:10:34.999] assign_globals() ...
[16:10:34.999] List of 5
[16:10:34.999]  $ ...future.FUN            :function (...)  
[16:10:34.999]  $ future.call.arguments    : list()
[16:10:34.999]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:34.999]  $ ...future.elements_ii    :List of 2
[16:10:34.999]   ..$ : int 0
[16:10:34.999]   ..$ : int 0
[16:10:34.999]  $ ...future.seeds_ii       :List of 2
[16:10:34.999]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[16:10:34.999]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[16:10:34.999]  $ ...future.globals.maxSize: NULL
[16:10:34.999]  - attr(*, "resolved")= logi FALSE
[16:10:34.999]  - attr(*, "total_size")= num 616
[16:10:34.999]  - attr(*, "where")=List of 5
[16:10:34.999]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:10:34.999]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:10:34.999]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:10:34.999]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:10:34.999]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:10:34.999]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:34.999]  - attr(*, "already-done")= logi TRUE
[16:10:35.006] - reassign environment for ‘...future.FUN’
[16:10:35.006] - copied ‘...future.FUN’ to environment
[16:10:35.007] - copied ‘future.call.arguments’ to environment
[16:10:35.007] - copied ‘...future.elements_ii’ to environment
[16:10:35.007] - copied ‘...future.seeds_ii’ to environment
[16:10:35.007] - copied ‘...future.globals.maxSize’ to environment
[16:10:35.007] assign_globals() ... done
[16:10:35.007] requestCore(): workers = 2
[16:10:35.009] MulticoreFuture started
[16:10:35.009] - Launch lazy future ... done
[16:10:35.009] run() for ‘MulticoreFuture’ ... done
[16:10:35.010] Created future:
[16:10:35.010] plan(): Setting new future strategy stack:
[16:10:35.010] List of future strategies:
[16:10:35.010] 1. sequential:
[16:10:35.010]    - args: function (..., envir = parent.frame())
[16:10:35.010]    - tweaked: FALSE
[16:10:35.010]    - call: NULL
[16:10:35.011] plan(): nbrOfWorkers() = 1
[16:10:35.013] plan(): Setting new future strategy stack:
[16:10:35.013] List of future strategies:
[16:10:35.013] 1. multicore:
[16:10:35.013]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:10:35.013]    - tweaked: FALSE
[16:10:35.013]    - call: plan(strategy)
[16:10:35.018] plan(): nbrOfWorkers() = 2
[16:10:35.010] MulticoreFuture:
[16:10:35.010] Label: ‘future_replicate-1’
[16:10:35.010] Expression:
[16:10:35.010] {
[16:10:35.010]     do.call(function(...) {
[16:10:35.010]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.010]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:35.010]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.010]             on.exit(options(oopts), add = TRUE)
[16:10:35.010]         }
[16:10:35.010]         {
[16:10:35.010]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:35.010]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.010]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.010]                   envir = globalenv(), inherits = FALSE)
[16:10:35.010]                 ...future.FUN(...future.X_jj, ...)
[16:10:35.010]             })
[16:10:35.010]         }
[16:10:35.010]     }, args = future.call.arguments)
[16:10:35.010] }
[16:10:35.010] Lazy evaluation: FALSE
[16:10:35.010] Asynchronous evaluation: TRUE
[16:10:35.010] Local evaluation: TRUE
[16:10:35.010] Environment: R_GlobalEnv
[16:10:35.010] Capture standard output: TRUE
[16:10:35.010] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:35.010] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:35.010] Packages: <none>
[16:10:35.010] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:35.010] Resolved: TRUE
[16:10:35.010] Value: <not collected>
[16:10:35.010] Conditions captured: <none>
[16:10:35.010] Early signaling: FALSE
[16:10:35.010] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:35.010] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:35.019] Chunk #1 of 2 ... DONE
[16:10:35.019] Chunk #2 of 2 ...
[16:10:35.020]  - Finding globals in 'X' for chunk #2 ...
[16:10:35.020] getGlobalsAndPackages() ...
[16:10:35.020] Searching for globals...
[16:10:35.020] 
[16:10:35.020] Searching for globals ... DONE
[16:10:35.021] - globals: [0] <none>
[16:10:35.021] getGlobalsAndPackages() ... DONE
[16:10:35.021]    + additional globals found: [n=0] 
[16:10:35.021]    + additional namespaces needed: [n=0] 
[16:10:35.021]  - Finding globals in 'X' for chunk #2 ... DONE
[16:10:35.021]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[16:10:35.021]  - seeds: [3] <seeds>
[16:10:35.022] getGlobalsAndPackages() ...
[16:10:35.022] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:35.022] Resolving globals: FALSE
[16:10:35.022] Tweak future expression to call with '...' arguments ...
[16:10:35.022] {
[16:10:35.022]     do.call(function(...) {
[16:10:35.022]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.022]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:35.022]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.022]             on.exit(options(oopts), add = TRUE)
[16:10:35.022]         }
[16:10:35.022]         {
[16:10:35.022]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:35.022]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.022]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.022]                   envir = globalenv(), inherits = FALSE)
[16:10:35.022]                 ...future.FUN(...future.X_jj, ...)
[16:10:35.022]             })
[16:10:35.022]         }
[16:10:35.022]     }, args = future.call.arguments)
[16:10:35.022] }
[16:10:35.023] Tweak future expression to call with '...' arguments ... DONE
[16:10:35.023] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:35.024] 
[16:10:35.024] getGlobalsAndPackages() ... DONE
[16:10:35.024] run() for ‘Future’ ...
[16:10:35.024] - state: ‘created’
[16:10:35.025] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:10:35.029] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:35.029] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:10:35.029]   - Field: ‘label’
[16:10:35.029]   - Field: ‘local’
[16:10:35.030]   - Field: ‘owner’
[16:10:35.030]   - Field: ‘envir’
[16:10:35.030]   - Field: ‘workers’
[16:10:35.030]   - Field: ‘packages’
[16:10:35.030]   - Field: ‘gc’
[16:10:35.030]   - Field: ‘job’
[16:10:35.030]   - Field: ‘conditions’
[16:10:35.031]   - Field: ‘expr’
[16:10:35.031]   - Field: ‘uuid’
[16:10:35.031]   - Field: ‘seed’
[16:10:35.031]   - Field: ‘version’
[16:10:35.031]   - Field: ‘result’
[16:10:35.031]   - Field: ‘asynchronous’
[16:10:35.031]   - Field: ‘calls’
[16:10:35.032]   - Field: ‘globals’
[16:10:35.032]   - Field: ‘stdout’
[16:10:35.032]   - Field: ‘earlySignal’
[16:10:35.032]   - Field: ‘lazy’
[16:10:35.032]   - Field: ‘state’
[16:10:35.032] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:10:35.032] - Launch lazy future ...
[16:10:35.033] Packages needed by the future expression (n = 0): <none>
[16:10:35.033] Packages needed by future strategies (n = 0): <none>
[16:10:35.034] {
[16:10:35.034]     {
[16:10:35.034]         {
[16:10:35.034]             ...future.startTime <- base::Sys.time()
[16:10:35.034]             {
[16:10:35.034]                 {
[16:10:35.034]                   {
[16:10:35.034]                     {
[16:10:35.034]                       base::local({
[16:10:35.034]                         has_future <- base::requireNamespace("future", 
[16:10:35.034]                           quietly = TRUE)
[16:10:35.034]                         if (has_future) {
[16:10:35.034]                           ns <- base::getNamespace("future")
[16:10:35.034]                           version <- ns[[".package"]][["version"]]
[16:10:35.034]                           if (is.null(version)) 
[16:10:35.034]                             version <- utils::packageVersion("future")
[16:10:35.034]                         }
[16:10:35.034]                         else {
[16:10:35.034]                           version <- NULL
[16:10:35.034]                         }
[16:10:35.034]                         if (!has_future || version < "1.8.0") {
[16:10:35.034]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:35.034]                             "", base::R.version$version.string), 
[16:10:35.034]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:35.034]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:35.034]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:35.034]                               "release", "version")], collapse = " "), 
[16:10:35.034]                             hostname = base::Sys.info()[["nodename"]])
[16:10:35.034]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:35.034]                             info)
[16:10:35.034]                           info <- base::paste(info, collapse = "; ")
[16:10:35.034]                           if (!has_future) {
[16:10:35.034]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:35.034]                               info)
[16:10:35.034]                           }
[16:10:35.034]                           else {
[16:10:35.034]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:35.034]                               info, version)
[16:10:35.034]                           }
[16:10:35.034]                           base::stop(msg)
[16:10:35.034]                         }
[16:10:35.034]                       })
[16:10:35.034]                     }
[16:10:35.034]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:35.034]                     base::options(mc.cores = 1L)
[16:10:35.034]                   }
[16:10:35.034]                   options(future.plan = NULL)
[16:10:35.034]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:35.034]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:35.034]                 }
[16:10:35.034]                 ...future.workdir <- getwd()
[16:10:35.034]             }
[16:10:35.034]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:35.034]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:35.034]         }
[16:10:35.034]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:35.034]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[16:10:35.034]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:35.034]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:35.034]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:35.034]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:35.034]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:35.034]             base::names(...future.oldOptions))
[16:10:35.034]     }
[16:10:35.034]     if (FALSE) {
[16:10:35.034]     }
[16:10:35.034]     else {
[16:10:35.034]         if (TRUE) {
[16:10:35.034]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:35.034]                 open = "w")
[16:10:35.034]         }
[16:10:35.034]         else {
[16:10:35.034]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:35.034]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:35.034]         }
[16:10:35.034]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:35.034]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:35.034]             base::sink(type = "output", split = FALSE)
[16:10:35.034]             base::close(...future.stdout)
[16:10:35.034]         }, add = TRUE)
[16:10:35.034]     }
[16:10:35.034]     ...future.frame <- base::sys.nframe()
[16:10:35.034]     ...future.conditions <- base::list()
[16:10:35.034]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:35.034]     if (FALSE) {
[16:10:35.034]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:35.034]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:35.034]     }
[16:10:35.034]     ...future.result <- base::tryCatch({
[16:10:35.034]         base::withCallingHandlers({
[16:10:35.034]             ...future.value <- base::withVisible(base::local({
[16:10:35.034]                 withCallingHandlers({
[16:10:35.034]                   {
[16:10:35.034]                     do.call(function(...) {
[16:10:35.034]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.034]                       if (!identical(...future.globals.maxSize.org, 
[16:10:35.034]                         ...future.globals.maxSize)) {
[16:10:35.034]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.034]                         on.exit(options(oopts), add = TRUE)
[16:10:35.034]                       }
[16:10:35.034]                       {
[16:10:35.034]                         lapply(seq_along(...future.elements_ii), 
[16:10:35.034]                           FUN = function(jj) {
[16:10:35.034]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.034]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.034]                               envir = globalenv(), inherits = FALSE)
[16:10:35.034]                             ...future.FUN(...future.X_jj, ...)
[16:10:35.034]                           })
[16:10:35.034]                       }
[16:10:35.034]                     }, args = future.call.arguments)
[16:10:35.034]                   }
[16:10:35.034]                 }, immediateCondition = function(cond) {
[16:10:35.034]                   save_rds <- function (object, pathname, ...) 
[16:10:35.034]                   {
[16:10:35.034]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:10:35.034]                     if (file_test("-f", pathname_tmp)) {
[16:10:35.034]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.034]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:10:35.034]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.034]                         fi_tmp[["mtime"]])
[16:10:35.034]                     }
[16:10:35.034]                     tryCatch({
[16:10:35.034]                       saveRDS(object, file = pathname_tmp, ...)
[16:10:35.034]                     }, error = function(ex) {
[16:10:35.034]                       msg <- conditionMessage(ex)
[16:10:35.034]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.034]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:10:35.034]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.034]                         fi_tmp[["mtime"]], msg)
[16:10:35.034]                       ex$message <- msg
[16:10:35.034]                       stop(ex)
[16:10:35.034]                     })
[16:10:35.034]                     stopifnot(file_test("-f", pathname_tmp))
[16:10:35.034]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:10:35.034]                     if (!res || file_test("-f", pathname_tmp)) {
[16:10:35.034]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.034]                       fi <- file.info(pathname)
[16:10:35.034]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:10:35.034]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.034]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:10:35.034]                         fi[["size"]], fi[["mtime"]])
[16:10:35.034]                       stop(msg)
[16:10:35.034]                     }
[16:10:35.034]                     invisible(pathname)
[16:10:35.034]                   }
[16:10:35.034]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:10:35.034]                     rootPath = tempdir()) 
[16:10:35.034]                   {
[16:10:35.034]                     obj <- list(time = Sys.time(), condition = cond)
[16:10:35.034]                     file <- tempfile(pattern = class(cond)[1], 
[16:10:35.034]                       tmpdir = path, fileext = ".rds")
[16:10:35.034]                     save_rds(obj, file)
[16:10:35.034]                   }
[16:10:35.034]                   saveImmediateCondition(cond, path = "/tmp/RtmpLZUJI0/.future/immediateConditions")
[16:10:35.034]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.034]                   {
[16:10:35.034]                     inherits <- base::inherits
[16:10:35.034]                     invokeRestart <- base::invokeRestart
[16:10:35.034]                     is.null <- base::is.null
[16:10:35.034]                     muffled <- FALSE
[16:10:35.034]                     if (inherits(cond, "message")) {
[16:10:35.034]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:35.034]                       if (muffled) 
[16:10:35.034]                         invokeRestart("muffleMessage")
[16:10:35.034]                     }
[16:10:35.034]                     else if (inherits(cond, "warning")) {
[16:10:35.034]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:35.034]                       if (muffled) 
[16:10:35.034]                         invokeRestart("muffleWarning")
[16:10:35.034]                     }
[16:10:35.034]                     else if (inherits(cond, "condition")) {
[16:10:35.034]                       if (!is.null(pattern)) {
[16:10:35.034]                         computeRestarts <- base::computeRestarts
[16:10:35.034]                         grepl <- base::grepl
[16:10:35.034]                         restarts <- computeRestarts(cond)
[16:10:35.034]                         for (restart in restarts) {
[16:10:35.034]                           name <- restart$name
[16:10:35.034]                           if (is.null(name)) 
[16:10:35.034]                             next
[16:10:35.034]                           if (!grepl(pattern, name)) 
[16:10:35.034]                             next
[16:10:35.034]                           invokeRestart(restart)
[16:10:35.034]                           muffled <- TRUE
[16:10:35.034]                           break
[16:10:35.034]                         }
[16:10:35.034]                       }
[16:10:35.034]                     }
[16:10:35.034]                     invisible(muffled)
[16:10:35.034]                   }
[16:10:35.034]                   muffleCondition(cond)
[16:10:35.034]                 })
[16:10:35.034]             }))
[16:10:35.034]             future::FutureResult(value = ...future.value$value, 
[16:10:35.034]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:35.034]                   ...future.rng), globalenv = if (FALSE) 
[16:10:35.034]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:35.034]                     ...future.globalenv.names))
[16:10:35.034]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:35.034]         }, condition = base::local({
[16:10:35.034]             c <- base::c
[16:10:35.034]             inherits <- base::inherits
[16:10:35.034]             invokeRestart <- base::invokeRestart
[16:10:35.034]             length <- base::length
[16:10:35.034]             list <- base::list
[16:10:35.034]             seq.int <- base::seq.int
[16:10:35.034]             signalCondition <- base::signalCondition
[16:10:35.034]             sys.calls <- base::sys.calls
[16:10:35.034]             `[[` <- base::`[[`
[16:10:35.034]             `+` <- base::`+`
[16:10:35.034]             `<<-` <- base::`<<-`
[16:10:35.034]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:35.034]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:35.034]                   3L)]
[16:10:35.034]             }
[16:10:35.034]             function(cond) {
[16:10:35.034]                 is_error <- inherits(cond, "error")
[16:10:35.034]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:35.034]                   NULL)
[16:10:35.034]                 if (is_error) {
[16:10:35.034]                   sessionInformation <- function() {
[16:10:35.034]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:35.034]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:35.034]                       search = base::search(), system = base::Sys.info())
[16:10:35.034]                   }
[16:10:35.034]                   ...future.conditions[[length(...future.conditions) + 
[16:10:35.034]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:35.034]                     cond$call), session = sessionInformation(), 
[16:10:35.034]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:35.034]                   signalCondition(cond)
[16:10:35.034]                 }
[16:10:35.034]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:35.034]                 "immediateCondition"))) {
[16:10:35.034]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:35.034]                   ...future.conditions[[length(...future.conditions) + 
[16:10:35.034]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:35.034]                   if (TRUE && !signal) {
[16:10:35.034]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.034]                     {
[16:10:35.034]                       inherits <- base::inherits
[16:10:35.034]                       invokeRestart <- base::invokeRestart
[16:10:35.034]                       is.null <- base::is.null
[16:10:35.034]                       muffled <- FALSE
[16:10:35.034]                       if (inherits(cond, "message")) {
[16:10:35.034]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:35.034]                         if (muffled) 
[16:10:35.034]                           invokeRestart("muffleMessage")
[16:10:35.034]                       }
[16:10:35.034]                       else if (inherits(cond, "warning")) {
[16:10:35.034]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:35.034]                         if (muffled) 
[16:10:35.034]                           invokeRestart("muffleWarning")
[16:10:35.034]                       }
[16:10:35.034]                       else if (inherits(cond, "condition")) {
[16:10:35.034]                         if (!is.null(pattern)) {
[16:10:35.034]                           computeRestarts <- base::computeRestarts
[16:10:35.034]                           grepl <- base::grepl
[16:10:35.034]                           restarts <- computeRestarts(cond)
[16:10:35.034]                           for (restart in restarts) {
[16:10:35.034]                             name <- restart$name
[16:10:35.034]                             if (is.null(name)) 
[16:10:35.034]                               next
[16:10:35.034]                             if (!grepl(pattern, name)) 
[16:10:35.034]                               next
[16:10:35.034]                             invokeRestart(restart)
[16:10:35.034]                             muffled <- TRUE
[16:10:35.034]                             break
[16:10:35.034]                           }
[16:10:35.034]                         }
[16:10:35.034]                       }
[16:10:35.034]                       invisible(muffled)
[16:10:35.034]                     }
[16:10:35.034]                     muffleCondition(cond, pattern = "^muffle")
[16:10:35.034]                   }
[16:10:35.034]                 }
[16:10:35.034]                 else {
[16:10:35.034]                   if (TRUE) {
[16:10:35.034]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.034]                     {
[16:10:35.034]                       inherits <- base::inherits
[16:10:35.034]                       invokeRestart <- base::invokeRestart
[16:10:35.034]                       is.null <- base::is.null
[16:10:35.034]                       muffled <- FALSE
[16:10:35.034]                       if (inherits(cond, "message")) {
[16:10:35.034]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:35.034]                         if (muffled) 
[16:10:35.034]                           invokeRestart("muffleMessage")
[16:10:35.034]                       }
[16:10:35.034]                       else if (inherits(cond, "warning")) {
[16:10:35.034]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:35.034]                         if (muffled) 
[16:10:35.034]                           invokeRestart("muffleWarning")
[16:10:35.034]                       }
[16:10:35.034]                       else if (inherits(cond, "condition")) {
[16:10:35.034]                         if (!is.null(pattern)) {
[16:10:35.034]                           computeRestarts <- base::computeRestarts
[16:10:35.034]                           grepl <- base::grepl
[16:10:35.034]                           restarts <- computeRestarts(cond)
[16:10:35.034]                           for (restart in restarts) {
[16:10:35.034]                             name <- restart$name
[16:10:35.034]                             if (is.null(name)) 
[16:10:35.034]                               next
[16:10:35.034]                             if (!grepl(pattern, name)) 
[16:10:35.034]                               next
[16:10:35.034]                             invokeRestart(restart)
[16:10:35.034]                             muffled <- TRUE
[16:10:35.034]                             break
[16:10:35.034]                           }
[16:10:35.034]                         }
[16:10:35.034]                       }
[16:10:35.034]                       invisible(muffled)
[16:10:35.034]                     }
[16:10:35.034]                     muffleCondition(cond, pattern = "^muffle")
[16:10:35.034]                   }
[16:10:35.034]                 }
[16:10:35.034]             }
[16:10:35.034]         }))
[16:10:35.034]     }, error = function(ex) {
[16:10:35.034]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:35.034]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:35.034]                 ...future.rng), started = ...future.startTime, 
[16:10:35.034]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:35.034]             version = "1.8"), class = "FutureResult")
[16:10:35.034]     }, finally = {
[16:10:35.034]         if (!identical(...future.workdir, getwd())) 
[16:10:35.034]             setwd(...future.workdir)
[16:10:35.034]         {
[16:10:35.034]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:35.034]                 ...future.oldOptions$nwarnings <- NULL
[16:10:35.034]             }
[16:10:35.034]             base::options(...future.oldOptions)
[16:10:35.034]             if (.Platform$OS.type == "windows") {
[16:10:35.034]                 old_names <- names(...future.oldEnvVars)
[16:10:35.034]                 envs <- base::Sys.getenv()
[16:10:35.034]                 names <- names(envs)
[16:10:35.034]                 common <- intersect(names, old_names)
[16:10:35.034]                 added <- setdiff(names, old_names)
[16:10:35.034]                 removed <- setdiff(old_names, names)
[16:10:35.034]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:35.034]                   envs[common]]
[16:10:35.034]                 NAMES <- toupper(changed)
[16:10:35.034]                 args <- list()
[16:10:35.034]                 for (kk in seq_along(NAMES)) {
[16:10:35.034]                   name <- changed[[kk]]
[16:10:35.034]                   NAME <- NAMES[[kk]]
[16:10:35.034]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.034]                     next
[16:10:35.034]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:35.034]                 }
[16:10:35.034]                 NAMES <- toupper(added)
[16:10:35.034]                 for (kk in seq_along(NAMES)) {
[16:10:35.034]                   name <- added[[kk]]
[16:10:35.034]                   NAME <- NAMES[[kk]]
[16:10:35.034]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.034]                     next
[16:10:35.034]                   args[[name]] <- ""
[16:10:35.034]                 }
[16:10:35.034]                 NAMES <- toupper(removed)
[16:10:35.034]                 for (kk in seq_along(NAMES)) {
[16:10:35.034]                   name <- removed[[kk]]
[16:10:35.034]                   NAME <- NAMES[[kk]]
[16:10:35.034]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.034]                     next
[16:10:35.034]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:35.034]                 }
[16:10:35.034]                 if (length(args) > 0) 
[16:10:35.034]                   base::do.call(base::Sys.setenv, args = args)
[16:10:35.034]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:35.034]             }
[16:10:35.034]             else {
[16:10:35.034]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:35.034]             }
[16:10:35.034]             {
[16:10:35.034]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:35.034]                   0L) {
[16:10:35.034]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:35.034]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:35.034]                   base::options(opts)
[16:10:35.034]                 }
[16:10:35.034]                 {
[16:10:35.034]                   {
[16:10:35.034]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:35.034]                     NULL
[16:10:35.034]                   }
[16:10:35.034]                   options(future.plan = NULL)
[16:10:35.034]                   if (is.na(NA_character_)) 
[16:10:35.034]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:35.034]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:35.034]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:10:35.034]                     envir = parent.frame()) 
[16:10:35.034]                   {
[16:10:35.034]                     default_workers <- missing(workers)
[16:10:35.034]                     if (is.function(workers)) 
[16:10:35.034]                       workers <- workers()
[16:10:35.034]                     workers <- structure(as.integer(workers), 
[16:10:35.034]                       class = class(workers))
[16:10:35.034]                     stop_if_not(is.finite(workers), workers >= 
[16:10:35.034]                       1L)
[16:10:35.034]                     if ((workers == 1L && !inherits(workers, 
[16:10:35.034]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:10:35.034]                       if (default_workers) 
[16:10:35.034]                         supportsMulticore(warn = TRUE)
[16:10:35.034]                       return(sequential(..., envir = envir))
[16:10:35.034]                     }
[16:10:35.034]                     oopts <- options(mc.cores = workers)
[16:10:35.034]                     on.exit(options(oopts))
[16:10:35.034]                     future <- MulticoreFuture(..., workers = workers, 
[16:10:35.034]                       envir = envir)
[16:10:35.034]                     if (!future$lazy) 
[16:10:35.034]                       future <- run(future)
[16:10:35.034]                     invisible(future)
[16:10:35.034]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:35.034]                 }
[16:10:35.034]             }
[16:10:35.034]         }
[16:10:35.034]     })
[16:10:35.034]     if (TRUE) {
[16:10:35.034]         base::sink(type = "output", split = FALSE)
[16:10:35.034]         if (TRUE) {
[16:10:35.034]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:35.034]         }
[16:10:35.034]         else {
[16:10:35.034]             ...future.result["stdout"] <- base::list(NULL)
[16:10:35.034]         }
[16:10:35.034]         base::close(...future.stdout)
[16:10:35.034]         ...future.stdout <- NULL
[16:10:35.034]     }
[16:10:35.034]     ...future.result$conditions <- ...future.conditions
[16:10:35.034]     ...future.result$finished <- base::Sys.time()
[16:10:35.034]     ...future.result
[16:10:35.034] }
[16:10:35.037] assign_globals() ...
[16:10:35.037] List of 5
[16:10:35.037]  $ ...future.FUN            :function (...)  
[16:10:35.037]  $ future.call.arguments    : list()
[16:10:35.037]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:35.037]  $ ...future.elements_ii    :List of 3
[16:10:35.037]   ..$ : int 0
[16:10:35.037]   ..$ : int 0
[16:10:35.037]   ..$ : int 0
[16:10:35.037]  $ ...future.seeds_ii       :List of 3
[16:10:35.037]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[16:10:35.037]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[16:10:35.037]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[16:10:35.037]  $ ...future.globals.maxSize: NULL
[16:10:35.037]  - attr(*, "resolved")= logi FALSE
[16:10:35.037]  - attr(*, "total_size")= num 616
[16:10:35.037]  - attr(*, "where")=List of 5
[16:10:35.037]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:10:35.037]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:10:35.037]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:10:35.037]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:10:35.037]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:10:35.037]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:35.037]  - attr(*, "already-done")= logi TRUE
[16:10:35.050] - reassign environment for ‘...future.FUN’
[16:10:35.050] - copied ‘...future.FUN’ to environment
[16:10:35.050] - copied ‘future.call.arguments’ to environment
[16:10:35.050] - copied ‘...future.elements_ii’ to environment
[16:10:35.051] - copied ‘...future.seeds_ii’ to environment
[16:10:35.051] - copied ‘...future.globals.maxSize’ to environment
[16:10:35.051] assign_globals() ... done
[16:10:35.051] requestCore(): workers = 2
[16:10:35.053] MulticoreFuture started
[16:10:35.054] - Launch lazy future ... done
[16:10:35.054] run() for ‘MulticoreFuture’ ... done
[16:10:35.054] Created future:
[16:10:35.054] plan(): Setting new future strategy stack:
[16:10:35.055] List of future strategies:
[16:10:35.055] 1. sequential:
[16:10:35.055]    - args: function (..., envir = parent.frame())
[16:10:35.055]    - tweaked: FALSE
[16:10:35.055]    - call: NULL
[16:10:35.055] plan(): nbrOfWorkers() = 1
[16:10:35.058] plan(): Setting new future strategy stack:
[16:10:35.058] List of future strategies:
[16:10:35.058] 1. multicore:
[16:10:35.058]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:10:35.058]    - tweaked: FALSE
[16:10:35.058]    - call: plan(strategy)
[16:10:35.063] plan(): nbrOfWorkers() = 2
[16:10:35.054] MulticoreFuture:
[16:10:35.054] Label: ‘future_replicate-2’
[16:10:35.054] Expression:
[16:10:35.054] {
[16:10:35.054]     do.call(function(...) {
[16:10:35.054]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.054]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:35.054]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.054]             on.exit(options(oopts), add = TRUE)
[16:10:35.054]         }
[16:10:35.054]         {
[16:10:35.054]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:35.054]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.054]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.054]                   envir = globalenv(), inherits = FALSE)
[16:10:35.054]                 ...future.FUN(...future.X_jj, ...)
[16:10:35.054]             })
[16:10:35.054]         }
[16:10:35.054]     }, args = future.call.arguments)
[16:10:35.054] }
[16:10:35.054] Lazy evaluation: FALSE
[16:10:35.054] Asynchronous evaluation: TRUE
[16:10:35.054] Local evaluation: TRUE
[16:10:35.054] Environment: R_GlobalEnv
[16:10:35.054] Capture standard output: TRUE
[16:10:35.054] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:35.054] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:35.054] Packages: <none>
[16:10:35.054] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:35.054] Resolved: TRUE
[16:10:35.054] Value: <not collected>
[16:10:35.054] Conditions captured: <none>
[16:10:35.054] Early signaling: FALSE
[16:10:35.054] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:35.054] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:35.064] Chunk #2 of 2 ... DONE
[16:10:35.064] Launching 2 futures (chunks) ... DONE
[16:10:35.064] Resolving 2 futures (chunks) ...
[16:10:35.065] resolve() on list ...
[16:10:35.065]  recursive: 0
[16:10:35.065]  length: 2
[16:10:35.065] 
[16:10:35.065] Future #1
[16:10:35.066] signalConditionsASAP(MulticoreFuture, pos=1) ...
[16:10:35.067] - nx: 2
[16:10:35.067] - relay: TRUE
[16:10:35.067] - stdout: TRUE
[16:10:35.067] - signal: TRUE
[16:10:35.067] - resignal: FALSE
[16:10:35.067] - force: TRUE
[16:10:35.067] - relayed: [n=2] FALSE, FALSE
[16:10:35.068] - queued futures: [n=2] FALSE, FALSE
[16:10:35.068]  - until=1
[16:10:35.068]  - relaying element #1
[16:10:35.068] - relayed: [n=2] TRUE, FALSE
[16:10:35.068] - queued futures: [n=2] TRUE, FALSE
[16:10:35.068] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[16:10:35.069]  length: 1 (resolved future 1)
[16:10:35.069] Future #2
[16:10:35.070] signalConditionsASAP(MulticoreFuture, pos=2) ...
[16:10:35.070] - nx: 2
[16:10:35.070] - relay: TRUE
[16:10:35.070] - stdout: TRUE
[16:10:35.070] - signal: TRUE
[16:10:35.070] - resignal: FALSE
[16:10:35.071] - force: TRUE
[16:10:35.071] - relayed: [n=2] TRUE, FALSE
[16:10:35.071] - queued futures: [n=2] TRUE, FALSE
[16:10:35.071]  - until=2
[16:10:35.071]  - relaying element #2
[16:10:35.071] - relayed: [n=2] TRUE, TRUE
[16:10:35.071] - queued futures: [n=2] TRUE, TRUE
[16:10:35.071] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[16:10:35.072]  length: 0 (resolved future 2)
[16:10:35.072] Relaying remaining futures
[16:10:35.072] signalConditionsASAP(NULL, pos=0) ...
[16:10:35.072] - nx: 2
[16:10:35.072] - relay: TRUE
[16:10:35.072] - stdout: TRUE
[16:10:35.072] - signal: TRUE
[16:10:35.072] - resignal: FALSE
[16:10:35.072] - force: TRUE
[16:10:35.073] - relayed: [n=2] TRUE, TRUE
[16:10:35.073] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:10:35.073] - relayed: [n=2] TRUE, TRUE
[16:10:35.073] - queued futures: [n=2] TRUE, TRUE
[16:10:35.073] signalConditionsASAP(NULL, pos=0) ... done
[16:10:35.073] resolve() on list ... DONE
[16:10:35.073]  - Number of value chunks collected: 2
[16:10:35.074] Resolving 2 futures (chunks) ... DONE
[16:10:35.074] Reducing values from 2 chunks ...
[16:10:35.074]  - Number of values collected after concatenation: 5
[16:10:35.074]  - Number of values expected: 5
[16:10:35.074] Reducing values from 2 chunks ... DONE
[16:10:35.074] future_lapply() ... DONE
[16:10:35.074] future_lapply() ...
[16:10:35.075] Generating random seeds ...
[16:10:35.075] Generating random seed streams for 5 elements ...
[16:10:35.075] Generating random seed streams for 5 elements ... DONE
[16:10:35.075] Generating random seeds ... DONE
[16:10:35.075] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:10:35.080] Number of chunks: 2
[16:10:35.080] getGlobalsAndPackagesXApply() ...
[16:10:35.080]  - future.globals: TRUE
[16:10:35.080] getGlobalsAndPackages() ...
[16:10:35.080] Searching for globals...
[16:10:35.082] - globals found: [2] ‘FUN’, ‘sample’
[16:10:35.082] Searching for globals ... DONE
[16:10:35.082] Resolving globals: FALSE
[16:10:35.082] The total size of the 1 globals is 616 bytes (616 bytes)
[16:10:35.083] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:10:35.083] - globals: [1] ‘FUN’
[16:10:35.083] 
[16:10:35.083] getGlobalsAndPackages() ... DONE
[16:10:35.083]  - globals found/used: [n=1] ‘FUN’
[16:10:35.083]  - needed namespaces: [n=0] 
[16:10:35.083] Finding globals ... DONE
[16:10:35.084]  - use_args: TRUE
[16:10:35.084]  - Getting '...' globals ...
[16:10:35.084] resolve() on list ...
[16:10:35.084]  recursive: 0
[16:10:35.084]  length: 1
[16:10:35.084]  elements: ‘...’
[16:10:35.085]  length: 0 (resolved future 1)
[16:10:35.085] resolve() on list ... DONE
[16:10:35.085]    - '...' content: [n=0] 
[16:10:35.085] List of 1
[16:10:35.085]  $ ...: list()
[16:10:35.085]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:35.085]  - attr(*, "where")=List of 1
[16:10:35.085]   ..$ ...:<environment: 0x55cf8e842ab0> 
[16:10:35.085]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:35.085]  - attr(*, "resolved")= logi TRUE
[16:10:35.085]  - attr(*, "total_size")= num NA
[16:10:35.090]  - Getting '...' globals ... DONE
[16:10:35.090] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:10:35.091] List of 2
[16:10:35.091]  $ ...future.FUN:function (...)  
[16:10:35.091]  $ ...          : list()
[16:10:35.091]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:35.091]  - attr(*, "where")=List of 2
[16:10:35.091]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:10:35.091]   ..$ ...          :<environment: 0x55cf8e842ab0> 
[16:10:35.091]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:35.091]  - attr(*, "resolved")= logi FALSE
[16:10:35.091]  - attr(*, "total_size")= num 616
[16:10:35.094] Packages to be attached in all futures: [n=0] 
[16:10:35.094] getGlobalsAndPackagesXApply() ... DONE
[16:10:35.094] Number of futures (= number of chunks): 2
[16:10:35.094] Launching 2 futures (chunks) ...
[16:10:35.094] Chunk #1 of 2 ...
[16:10:35.094]  - Finding globals in 'X' for chunk #1 ...
[16:10:35.095] getGlobalsAndPackages() ...
[16:10:35.095] Searching for globals...
[16:10:35.095] 
[16:10:35.095] Searching for globals ... DONE
[16:10:35.095] - globals: [0] <none>
[16:10:35.095] getGlobalsAndPackages() ... DONE
[16:10:35.095]    + additional globals found: [n=0] 
[16:10:35.095]    + additional namespaces needed: [n=0] 
[16:10:35.095]  - Finding globals in 'X' for chunk #1 ... DONE
[16:10:35.096]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:10:35.096]  - seeds: [2] <seeds>
[16:10:35.096] getGlobalsAndPackages() ...
[16:10:35.096] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:35.096] Resolving globals: FALSE
[16:10:35.096] Tweak future expression to call with '...' arguments ...
[16:10:35.096] {
[16:10:35.096]     do.call(function(...) {
[16:10:35.096]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.096]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:35.096]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.096]             on.exit(options(oopts), add = TRUE)
[16:10:35.096]         }
[16:10:35.096]         {
[16:10:35.096]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:35.096]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.096]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.096]                   envir = globalenv(), inherits = FALSE)
[16:10:35.096]                 ...future.FUN(...future.X_jj, ...)
[16:10:35.096]             })
[16:10:35.096]         }
[16:10:35.096]     }, args = future.call.arguments)
[16:10:35.096] }
[16:10:35.097] Tweak future expression to call with '...' arguments ... DONE
[16:10:35.097] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:35.097] 
[16:10:35.097] getGlobalsAndPackages() ... DONE
[16:10:35.097] run() for ‘Future’ ...
[16:10:35.097] - state: ‘created’
[16:10:35.098] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:10:35.101] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:35.101] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:10:35.101]   - Field: ‘label’
[16:10:35.102]   - Field: ‘local’
[16:10:35.102]   - Field: ‘owner’
[16:10:35.102]   - Field: ‘envir’
[16:10:35.102]   - Field: ‘workers’
[16:10:35.102]   - Field: ‘packages’
[16:10:35.102]   - Field: ‘gc’
[16:10:35.102]   - Field: ‘job’
[16:10:35.102]   - Field: ‘conditions’
[16:10:35.102]   - Field: ‘expr’
[16:10:35.102]   - Field: ‘uuid’
[16:10:35.102]   - Field: ‘seed’
[16:10:35.103]   - Field: ‘version’
[16:10:35.103]   - Field: ‘result’
[16:10:35.103]   - Field: ‘asynchronous’
[16:10:35.103]   - Field: ‘calls’
[16:10:35.103]   - Field: ‘globals’
[16:10:35.103]   - Field: ‘stdout’
[16:10:35.103]   - Field: ‘earlySignal’
[16:10:35.103]   - Field: ‘lazy’
[16:10:35.103]   - Field: ‘state’
[16:10:35.103] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:10:35.103] - Launch lazy future ...
[16:10:35.104] Packages needed by the future expression (n = 0): <none>
[16:10:35.104] Packages needed by future strategies (n = 0): <none>
[16:10:35.104] {
[16:10:35.104]     {
[16:10:35.104]         {
[16:10:35.104]             ...future.startTime <- base::Sys.time()
[16:10:35.104]             {
[16:10:35.104]                 {
[16:10:35.104]                   {
[16:10:35.104]                     {
[16:10:35.104]                       base::local({
[16:10:35.104]                         has_future <- base::requireNamespace("future", 
[16:10:35.104]                           quietly = TRUE)
[16:10:35.104]                         if (has_future) {
[16:10:35.104]                           ns <- base::getNamespace("future")
[16:10:35.104]                           version <- ns[[".package"]][["version"]]
[16:10:35.104]                           if (is.null(version)) 
[16:10:35.104]                             version <- utils::packageVersion("future")
[16:10:35.104]                         }
[16:10:35.104]                         else {
[16:10:35.104]                           version <- NULL
[16:10:35.104]                         }
[16:10:35.104]                         if (!has_future || version < "1.8.0") {
[16:10:35.104]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:35.104]                             "", base::R.version$version.string), 
[16:10:35.104]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:35.104]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:35.104]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:35.104]                               "release", "version")], collapse = " "), 
[16:10:35.104]                             hostname = base::Sys.info()[["nodename"]])
[16:10:35.104]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:35.104]                             info)
[16:10:35.104]                           info <- base::paste(info, collapse = "; ")
[16:10:35.104]                           if (!has_future) {
[16:10:35.104]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:35.104]                               info)
[16:10:35.104]                           }
[16:10:35.104]                           else {
[16:10:35.104]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:35.104]                               info, version)
[16:10:35.104]                           }
[16:10:35.104]                           base::stop(msg)
[16:10:35.104]                         }
[16:10:35.104]                       })
[16:10:35.104]                     }
[16:10:35.104]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:35.104]                     base::options(mc.cores = 1L)
[16:10:35.104]                   }
[16:10:35.104]                   options(future.plan = NULL)
[16:10:35.104]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:35.104]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:35.104]                 }
[16:10:35.104]                 ...future.workdir <- getwd()
[16:10:35.104]             }
[16:10:35.104]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:35.104]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:35.104]         }
[16:10:35.104]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:35.104]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:10:35.104]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:35.104]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:35.104]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:35.104]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:35.104]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:35.104]             base::names(...future.oldOptions))
[16:10:35.104]     }
[16:10:35.104]     if (FALSE) {
[16:10:35.104]     }
[16:10:35.104]     else {
[16:10:35.104]         if (TRUE) {
[16:10:35.104]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:35.104]                 open = "w")
[16:10:35.104]         }
[16:10:35.104]         else {
[16:10:35.104]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:35.104]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:35.104]         }
[16:10:35.104]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:35.104]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:35.104]             base::sink(type = "output", split = FALSE)
[16:10:35.104]             base::close(...future.stdout)
[16:10:35.104]         }, add = TRUE)
[16:10:35.104]     }
[16:10:35.104]     ...future.frame <- base::sys.nframe()
[16:10:35.104]     ...future.conditions <- base::list()
[16:10:35.104]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:35.104]     if (FALSE) {
[16:10:35.104]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:35.104]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:35.104]     }
[16:10:35.104]     ...future.result <- base::tryCatch({
[16:10:35.104]         base::withCallingHandlers({
[16:10:35.104]             ...future.value <- base::withVisible(base::local({
[16:10:35.104]                 withCallingHandlers({
[16:10:35.104]                   {
[16:10:35.104]                     do.call(function(...) {
[16:10:35.104]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.104]                       if (!identical(...future.globals.maxSize.org, 
[16:10:35.104]                         ...future.globals.maxSize)) {
[16:10:35.104]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.104]                         on.exit(options(oopts), add = TRUE)
[16:10:35.104]                       }
[16:10:35.104]                       {
[16:10:35.104]                         lapply(seq_along(...future.elements_ii), 
[16:10:35.104]                           FUN = function(jj) {
[16:10:35.104]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.104]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.104]                               envir = globalenv(), inherits = FALSE)
[16:10:35.104]                             ...future.FUN(...future.X_jj, ...)
[16:10:35.104]                           })
[16:10:35.104]                       }
[16:10:35.104]                     }, args = future.call.arguments)
[16:10:35.104]                   }
[16:10:35.104]                 }, immediateCondition = function(cond) {
[16:10:35.104]                   save_rds <- function (object, pathname, ...) 
[16:10:35.104]                   {
[16:10:35.104]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:10:35.104]                     if (file_test("-f", pathname_tmp)) {
[16:10:35.104]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.104]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:10:35.104]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.104]                         fi_tmp[["mtime"]])
[16:10:35.104]                     }
[16:10:35.104]                     tryCatch({
[16:10:35.104]                       saveRDS(object, file = pathname_tmp, ...)
[16:10:35.104]                     }, error = function(ex) {
[16:10:35.104]                       msg <- conditionMessage(ex)
[16:10:35.104]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.104]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:10:35.104]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.104]                         fi_tmp[["mtime"]], msg)
[16:10:35.104]                       ex$message <- msg
[16:10:35.104]                       stop(ex)
[16:10:35.104]                     })
[16:10:35.104]                     stopifnot(file_test("-f", pathname_tmp))
[16:10:35.104]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:10:35.104]                     if (!res || file_test("-f", pathname_tmp)) {
[16:10:35.104]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.104]                       fi <- file.info(pathname)
[16:10:35.104]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:10:35.104]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.104]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:10:35.104]                         fi[["size"]], fi[["mtime"]])
[16:10:35.104]                       stop(msg)
[16:10:35.104]                     }
[16:10:35.104]                     invisible(pathname)
[16:10:35.104]                   }
[16:10:35.104]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:10:35.104]                     rootPath = tempdir()) 
[16:10:35.104]                   {
[16:10:35.104]                     obj <- list(time = Sys.time(), condition = cond)
[16:10:35.104]                     file <- tempfile(pattern = class(cond)[1], 
[16:10:35.104]                       tmpdir = path, fileext = ".rds")
[16:10:35.104]                     save_rds(obj, file)
[16:10:35.104]                   }
[16:10:35.104]                   saveImmediateCondition(cond, path = "/tmp/RtmpLZUJI0/.future/immediateConditions")
[16:10:35.104]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.104]                   {
[16:10:35.104]                     inherits <- base::inherits
[16:10:35.104]                     invokeRestart <- base::invokeRestart
[16:10:35.104]                     is.null <- base::is.null
[16:10:35.104]                     muffled <- FALSE
[16:10:35.104]                     if (inherits(cond, "message")) {
[16:10:35.104]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:35.104]                       if (muffled) 
[16:10:35.104]                         invokeRestart("muffleMessage")
[16:10:35.104]                     }
[16:10:35.104]                     else if (inherits(cond, "warning")) {
[16:10:35.104]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:35.104]                       if (muffled) 
[16:10:35.104]                         invokeRestart("muffleWarning")
[16:10:35.104]                     }
[16:10:35.104]                     else if (inherits(cond, "condition")) {
[16:10:35.104]                       if (!is.null(pattern)) {
[16:10:35.104]                         computeRestarts <- base::computeRestarts
[16:10:35.104]                         grepl <- base::grepl
[16:10:35.104]                         restarts <- computeRestarts(cond)
[16:10:35.104]                         for (restart in restarts) {
[16:10:35.104]                           name <- restart$name
[16:10:35.104]                           if (is.null(name)) 
[16:10:35.104]                             next
[16:10:35.104]                           if (!grepl(pattern, name)) 
[16:10:35.104]                             next
[16:10:35.104]                           invokeRestart(restart)
[16:10:35.104]                           muffled <- TRUE
[16:10:35.104]                           break
[16:10:35.104]                         }
[16:10:35.104]                       }
[16:10:35.104]                     }
[16:10:35.104]                     invisible(muffled)
[16:10:35.104]                   }
[16:10:35.104]                   muffleCondition(cond)
[16:10:35.104]                 })
[16:10:35.104]             }))
[16:10:35.104]             future::FutureResult(value = ...future.value$value, 
[16:10:35.104]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:35.104]                   ...future.rng), globalenv = if (FALSE) 
[16:10:35.104]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:35.104]                     ...future.globalenv.names))
[16:10:35.104]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:35.104]         }, condition = base::local({
[16:10:35.104]             c <- base::c
[16:10:35.104]             inherits <- base::inherits
[16:10:35.104]             invokeRestart <- base::invokeRestart
[16:10:35.104]             length <- base::length
[16:10:35.104]             list <- base::list
[16:10:35.104]             seq.int <- base::seq.int
[16:10:35.104]             signalCondition <- base::signalCondition
[16:10:35.104]             sys.calls <- base::sys.calls
[16:10:35.104]             `[[` <- base::`[[`
[16:10:35.104]             `+` <- base::`+`
[16:10:35.104]             `<<-` <- base::`<<-`
[16:10:35.104]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:35.104]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:35.104]                   3L)]
[16:10:35.104]             }
[16:10:35.104]             function(cond) {
[16:10:35.104]                 is_error <- inherits(cond, "error")
[16:10:35.104]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:35.104]                   NULL)
[16:10:35.104]                 if (is_error) {
[16:10:35.104]                   sessionInformation <- function() {
[16:10:35.104]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:35.104]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:35.104]                       search = base::search(), system = base::Sys.info())
[16:10:35.104]                   }
[16:10:35.104]                   ...future.conditions[[length(...future.conditions) + 
[16:10:35.104]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:35.104]                     cond$call), session = sessionInformation(), 
[16:10:35.104]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:35.104]                   signalCondition(cond)
[16:10:35.104]                 }
[16:10:35.104]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:35.104]                 "immediateCondition"))) {
[16:10:35.104]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:35.104]                   ...future.conditions[[length(...future.conditions) + 
[16:10:35.104]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:35.104]                   if (TRUE && !signal) {
[16:10:35.104]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.104]                     {
[16:10:35.104]                       inherits <- base::inherits
[16:10:35.104]                       invokeRestart <- base::invokeRestart
[16:10:35.104]                       is.null <- base::is.null
[16:10:35.104]                       muffled <- FALSE
[16:10:35.104]                       if (inherits(cond, "message")) {
[16:10:35.104]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:35.104]                         if (muffled) 
[16:10:35.104]                           invokeRestart("muffleMessage")
[16:10:35.104]                       }
[16:10:35.104]                       else if (inherits(cond, "warning")) {
[16:10:35.104]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:35.104]                         if (muffled) 
[16:10:35.104]                           invokeRestart("muffleWarning")
[16:10:35.104]                       }
[16:10:35.104]                       else if (inherits(cond, "condition")) {
[16:10:35.104]                         if (!is.null(pattern)) {
[16:10:35.104]                           computeRestarts <- base::computeRestarts
[16:10:35.104]                           grepl <- base::grepl
[16:10:35.104]                           restarts <- computeRestarts(cond)
[16:10:35.104]                           for (restart in restarts) {
[16:10:35.104]                             name <- restart$name
[16:10:35.104]                             if (is.null(name)) 
[16:10:35.104]                               next
[16:10:35.104]                             if (!grepl(pattern, name)) 
[16:10:35.104]                               next
[16:10:35.104]                             invokeRestart(restart)
[16:10:35.104]                             muffled <- TRUE
[16:10:35.104]                             break
[16:10:35.104]                           }
[16:10:35.104]                         }
[16:10:35.104]                       }
[16:10:35.104]                       invisible(muffled)
[16:10:35.104]                     }
[16:10:35.104]                     muffleCondition(cond, pattern = "^muffle")
[16:10:35.104]                   }
[16:10:35.104]                 }
[16:10:35.104]                 else {
[16:10:35.104]                   if (TRUE) {
[16:10:35.104]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.104]                     {
[16:10:35.104]                       inherits <- base::inherits
[16:10:35.104]                       invokeRestart <- base::invokeRestart
[16:10:35.104]                       is.null <- base::is.null
[16:10:35.104]                       muffled <- FALSE
[16:10:35.104]                       if (inherits(cond, "message")) {
[16:10:35.104]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:35.104]                         if (muffled) 
[16:10:35.104]                           invokeRestart("muffleMessage")
[16:10:35.104]                       }
[16:10:35.104]                       else if (inherits(cond, "warning")) {
[16:10:35.104]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:35.104]                         if (muffled) 
[16:10:35.104]                           invokeRestart("muffleWarning")
[16:10:35.104]                       }
[16:10:35.104]                       else if (inherits(cond, "condition")) {
[16:10:35.104]                         if (!is.null(pattern)) {
[16:10:35.104]                           computeRestarts <- base::computeRestarts
[16:10:35.104]                           grepl <- base::grepl
[16:10:35.104]                           restarts <- computeRestarts(cond)
[16:10:35.104]                           for (restart in restarts) {
[16:10:35.104]                             name <- restart$name
[16:10:35.104]                             if (is.null(name)) 
[16:10:35.104]                               next
[16:10:35.104]                             if (!grepl(pattern, name)) 
[16:10:35.104]                               next
[16:10:35.104]                             invokeRestart(restart)
[16:10:35.104]                             muffled <- TRUE
[16:10:35.104]                             break
[16:10:35.104]                           }
[16:10:35.104]                         }
[16:10:35.104]                       }
[16:10:35.104]                       invisible(muffled)
[16:10:35.104]                     }
[16:10:35.104]                     muffleCondition(cond, pattern = "^muffle")
[16:10:35.104]                   }
[16:10:35.104]                 }
[16:10:35.104]             }
[16:10:35.104]         }))
[16:10:35.104]     }, error = function(ex) {
[16:10:35.104]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:35.104]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:35.104]                 ...future.rng), started = ...future.startTime, 
[16:10:35.104]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:35.104]             version = "1.8"), class = "FutureResult")
[16:10:35.104]     }, finally = {
[16:10:35.104]         if (!identical(...future.workdir, getwd())) 
[16:10:35.104]             setwd(...future.workdir)
[16:10:35.104]         {
[16:10:35.104]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:35.104]                 ...future.oldOptions$nwarnings <- NULL
[16:10:35.104]             }
[16:10:35.104]             base::options(...future.oldOptions)
[16:10:35.104]             if (.Platform$OS.type == "windows") {
[16:10:35.104]                 old_names <- names(...future.oldEnvVars)
[16:10:35.104]                 envs <- base::Sys.getenv()
[16:10:35.104]                 names <- names(envs)
[16:10:35.104]                 common <- intersect(names, old_names)
[16:10:35.104]                 added <- setdiff(names, old_names)
[16:10:35.104]                 removed <- setdiff(old_names, names)
[16:10:35.104]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:35.104]                   envs[common]]
[16:10:35.104]                 NAMES <- toupper(changed)
[16:10:35.104]                 args <- list()
[16:10:35.104]                 for (kk in seq_along(NAMES)) {
[16:10:35.104]                   name <- changed[[kk]]
[16:10:35.104]                   NAME <- NAMES[[kk]]
[16:10:35.104]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.104]                     next
[16:10:35.104]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:35.104]                 }
[16:10:35.104]                 NAMES <- toupper(added)
[16:10:35.104]                 for (kk in seq_along(NAMES)) {
[16:10:35.104]                   name <- added[[kk]]
[16:10:35.104]                   NAME <- NAMES[[kk]]
[16:10:35.104]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.104]                     next
[16:10:35.104]                   args[[name]] <- ""
[16:10:35.104]                 }
[16:10:35.104]                 NAMES <- toupper(removed)
[16:10:35.104]                 for (kk in seq_along(NAMES)) {
[16:10:35.104]                   name <- removed[[kk]]
[16:10:35.104]                   NAME <- NAMES[[kk]]
[16:10:35.104]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.104]                     next
[16:10:35.104]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:35.104]                 }
[16:10:35.104]                 if (length(args) > 0) 
[16:10:35.104]                   base::do.call(base::Sys.setenv, args = args)
[16:10:35.104]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:35.104]             }
[16:10:35.104]             else {
[16:10:35.104]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:35.104]             }
[16:10:35.104]             {
[16:10:35.104]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:35.104]                   0L) {
[16:10:35.104]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:35.104]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:35.104]                   base::options(opts)
[16:10:35.104]                 }
[16:10:35.104]                 {
[16:10:35.104]                   {
[16:10:35.104]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:35.104]                     NULL
[16:10:35.104]                   }
[16:10:35.104]                   options(future.plan = NULL)
[16:10:35.104]                   if (is.na(NA_character_)) 
[16:10:35.104]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:35.104]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:35.104]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:10:35.104]                     envir = parent.frame()) 
[16:10:35.104]                   {
[16:10:35.104]                     default_workers <- missing(workers)
[16:10:35.104]                     if (is.function(workers)) 
[16:10:35.104]                       workers <- workers()
[16:10:35.104]                     workers <- structure(as.integer(workers), 
[16:10:35.104]                       class = class(workers))
[16:10:35.104]                     stop_if_not(is.finite(workers), workers >= 
[16:10:35.104]                       1L)
[16:10:35.104]                     if ((workers == 1L && !inherits(workers, 
[16:10:35.104]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:10:35.104]                       if (default_workers) 
[16:10:35.104]                         supportsMulticore(warn = TRUE)
[16:10:35.104]                       return(sequential(..., envir = envir))
[16:10:35.104]                     }
[16:10:35.104]                     oopts <- options(mc.cores = workers)
[16:10:35.104]                     on.exit(options(oopts))
[16:10:35.104]                     future <- MulticoreFuture(..., workers = workers, 
[16:10:35.104]                       envir = envir)
[16:10:35.104]                     if (!future$lazy) 
[16:10:35.104]                       future <- run(future)
[16:10:35.104]                     invisible(future)
[16:10:35.104]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:35.104]                 }
[16:10:35.104]             }
[16:10:35.104]         }
[16:10:35.104]     })
[16:10:35.104]     if (TRUE) {
[16:10:35.104]         base::sink(type = "output", split = FALSE)
[16:10:35.104]         if (TRUE) {
[16:10:35.104]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:35.104]         }
[16:10:35.104]         else {
[16:10:35.104]             ...future.result["stdout"] <- base::list(NULL)
[16:10:35.104]         }
[16:10:35.104]         base::close(...future.stdout)
[16:10:35.104]         ...future.stdout <- NULL
[16:10:35.104]     }
[16:10:35.104]     ...future.result$conditions <- ...future.conditions
[16:10:35.104]     ...future.result$finished <- base::Sys.time()
[16:10:35.104]     ...future.result
[16:10:35.104] }
[16:10:35.107] assign_globals() ...
[16:10:35.107] List of 5
[16:10:35.107]  $ ...future.FUN            :function (...)  
[16:10:35.107]  $ future.call.arguments    : list()
[16:10:35.107]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:35.107]  $ ...future.elements_ii    :List of 2
[16:10:35.107]   ..$ : int 0
[16:10:35.107]   ..$ : int 0
[16:10:35.107]  $ ...future.seeds_ii       :List of 2
[16:10:35.107]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[16:10:35.107]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[16:10:35.107]  $ ...future.globals.maxSize: NULL
[16:10:35.107]  - attr(*, "resolved")= logi FALSE
[16:10:35.107]  - attr(*, "total_size")= num 616
[16:10:35.107]  - attr(*, "where")=List of 5
[16:10:35.107]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:10:35.107]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:10:35.107]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:10:35.107]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:10:35.107]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:10:35.107]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:35.107]  - attr(*, "already-done")= logi TRUE
[16:10:35.114] - reassign environment for ‘...future.FUN’
[16:10:35.114] - copied ‘...future.FUN’ to environment
[16:10:35.114] - copied ‘future.call.arguments’ to environment
[16:10:35.114] - copied ‘...future.elements_ii’ to environment
[16:10:35.114] - copied ‘...future.seeds_ii’ to environment
[16:10:35.114] - copied ‘...future.globals.maxSize’ to environment
[16:10:35.115] assign_globals() ... done
[16:10:35.115] requestCore(): workers = 2
[16:10:35.117] MulticoreFuture started
[16:10:35.117] - Launch lazy future ... done
[16:10:35.117] run() for ‘MulticoreFuture’ ... done
[16:10:35.118] Created future:
[16:10:35.118] plan(): Setting new future strategy stack:
[16:10:35.118] List of future strategies:
[16:10:35.118] 1. sequential:
[16:10:35.118]    - args: function (..., envir = parent.frame())
[16:10:35.118]    - tweaked: FALSE
[16:10:35.118]    - call: NULL
[16:10:35.119] plan(): nbrOfWorkers() = 1
[16:10:35.121] plan(): Setting new future strategy stack:
[16:10:35.121] List of future strategies:
[16:10:35.121] 1. multicore:
[16:10:35.121]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:10:35.121]    - tweaked: FALSE
[16:10:35.121]    - call: plan(strategy)
[16:10:35.127] plan(): nbrOfWorkers() = 2
[16:10:35.118] MulticoreFuture:
[16:10:35.118] Label: ‘future_replicate-1’
[16:10:35.118] Expression:
[16:10:35.118] {
[16:10:35.118]     do.call(function(...) {
[16:10:35.118]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.118]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:35.118]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.118]             on.exit(options(oopts), add = TRUE)
[16:10:35.118]         }
[16:10:35.118]         {
[16:10:35.118]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:35.118]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.118]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.118]                   envir = globalenv(), inherits = FALSE)
[16:10:35.118]                 ...future.FUN(...future.X_jj, ...)
[16:10:35.118]             })
[16:10:35.118]         }
[16:10:35.118]     }, args = future.call.arguments)
[16:10:35.118] }
[16:10:35.118] Lazy evaluation: FALSE
[16:10:35.118] Asynchronous evaluation: TRUE
[16:10:35.118] Local evaluation: TRUE
[16:10:35.118] Environment: R_GlobalEnv
[16:10:35.118] Capture standard output: TRUE
[16:10:35.118] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:35.118] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:35.118] Packages: <none>
[16:10:35.118] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:35.118] Resolved: TRUE
[16:10:35.118] Value: <not collected>
[16:10:35.118] Conditions captured: <none>
[16:10:35.118] Early signaling: FALSE
[16:10:35.118] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:35.118] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:35.128] Chunk #1 of 2 ... DONE
[16:10:35.128] Chunk #2 of 2 ...
[16:10:35.128]  - Finding globals in 'X' for chunk #2 ...
[16:10:35.128] getGlobalsAndPackages() ...
[16:10:35.128] Searching for globals...
[16:10:35.129] 
[16:10:35.129] Searching for globals ... DONE
[16:10:35.129] - globals: [0] <none>
[16:10:35.129] getGlobalsAndPackages() ... DONE
[16:10:35.129]    + additional globals found: [n=0] 
[16:10:35.130]    + additional namespaces needed: [n=0] 
[16:10:35.130]  - Finding globals in 'X' for chunk #2 ... DONE
[16:10:35.130]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[16:10:35.130]  - seeds: [3] <seeds>
[16:10:35.130] getGlobalsAndPackages() ...
[16:10:35.130] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:35.131] Resolving globals: FALSE
[16:10:35.131] Tweak future expression to call with '...' arguments ...
[16:10:35.131] {
[16:10:35.131]     do.call(function(...) {
[16:10:35.131]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.131]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:35.131]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.131]             on.exit(options(oopts), add = TRUE)
[16:10:35.131]         }
[16:10:35.131]         {
[16:10:35.131]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:35.131]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.131]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.131]                   envir = globalenv(), inherits = FALSE)
[16:10:35.131]                 ...future.FUN(...future.X_jj, ...)
[16:10:35.131]             })
[16:10:35.131]         }
[16:10:35.131]     }, args = future.call.arguments)
[16:10:35.131] }
[16:10:35.131] Tweak future expression to call with '...' arguments ... DONE
[16:10:35.132] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:35.132] 
[16:10:35.132] getGlobalsAndPackages() ... DONE
[16:10:35.133] run() for ‘Future’ ...
[16:10:35.133] - state: ‘created’
[16:10:35.133] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:10:35.138] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:35.138] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:10:35.138]   - Field: ‘label’
[16:10:35.138]   - Field: ‘local’
[16:10:35.138]   - Field: ‘owner’
[16:10:35.139]   - Field: ‘envir’
[16:10:35.139]   - Field: ‘workers’
[16:10:35.139]   - Field: ‘packages’
[16:10:35.139]   - Field: ‘gc’
[16:10:35.139]   - Field: ‘job’
[16:10:35.139]   - Field: ‘conditions’
[16:10:35.139]   - Field: ‘expr’
[16:10:35.140]   - Field: ‘uuid’
[16:10:35.140]   - Field: ‘seed’
[16:10:35.140]   - Field: ‘version’
[16:10:35.140]   - Field: ‘result’
[16:10:35.140]   - Field: ‘asynchronous’
[16:10:35.140]   - Field: ‘calls’
[16:10:35.140]   - Field: ‘globals’
[16:10:35.141]   - Field: ‘stdout’
[16:10:35.141]   - Field: ‘earlySignal’
[16:10:35.141]   - Field: ‘lazy’
[16:10:35.141]   - Field: ‘state’
[16:10:35.141] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:10:35.141] - Launch lazy future ...
[16:10:35.142] Packages needed by the future expression (n = 0): <none>
[16:10:35.142] Packages needed by future strategies (n = 0): <none>
[16:10:35.142] {
[16:10:35.142]     {
[16:10:35.142]         {
[16:10:35.142]             ...future.startTime <- base::Sys.time()
[16:10:35.142]             {
[16:10:35.142]                 {
[16:10:35.142]                   {
[16:10:35.142]                     {
[16:10:35.142]                       base::local({
[16:10:35.142]                         has_future <- base::requireNamespace("future", 
[16:10:35.142]                           quietly = TRUE)
[16:10:35.142]                         if (has_future) {
[16:10:35.142]                           ns <- base::getNamespace("future")
[16:10:35.142]                           version <- ns[[".package"]][["version"]]
[16:10:35.142]                           if (is.null(version)) 
[16:10:35.142]                             version <- utils::packageVersion("future")
[16:10:35.142]                         }
[16:10:35.142]                         else {
[16:10:35.142]                           version <- NULL
[16:10:35.142]                         }
[16:10:35.142]                         if (!has_future || version < "1.8.0") {
[16:10:35.142]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:35.142]                             "", base::R.version$version.string), 
[16:10:35.142]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:35.142]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:35.142]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:35.142]                               "release", "version")], collapse = " "), 
[16:10:35.142]                             hostname = base::Sys.info()[["nodename"]])
[16:10:35.142]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:35.142]                             info)
[16:10:35.142]                           info <- base::paste(info, collapse = "; ")
[16:10:35.142]                           if (!has_future) {
[16:10:35.142]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:35.142]                               info)
[16:10:35.142]                           }
[16:10:35.142]                           else {
[16:10:35.142]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:35.142]                               info, version)
[16:10:35.142]                           }
[16:10:35.142]                           base::stop(msg)
[16:10:35.142]                         }
[16:10:35.142]                       })
[16:10:35.142]                     }
[16:10:35.142]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:35.142]                     base::options(mc.cores = 1L)
[16:10:35.142]                   }
[16:10:35.142]                   options(future.plan = NULL)
[16:10:35.142]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:35.142]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:35.142]                 }
[16:10:35.142]                 ...future.workdir <- getwd()
[16:10:35.142]             }
[16:10:35.142]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:35.142]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:35.142]         }
[16:10:35.142]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:35.142]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[16:10:35.142]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:35.142]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:35.142]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:35.142]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:35.142]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:35.142]             base::names(...future.oldOptions))
[16:10:35.142]     }
[16:10:35.142]     if (FALSE) {
[16:10:35.142]     }
[16:10:35.142]     else {
[16:10:35.142]         if (TRUE) {
[16:10:35.142]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:35.142]                 open = "w")
[16:10:35.142]         }
[16:10:35.142]         else {
[16:10:35.142]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:35.142]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:35.142]         }
[16:10:35.142]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:35.142]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:35.142]             base::sink(type = "output", split = FALSE)
[16:10:35.142]             base::close(...future.stdout)
[16:10:35.142]         }, add = TRUE)
[16:10:35.142]     }
[16:10:35.142]     ...future.frame <- base::sys.nframe()
[16:10:35.142]     ...future.conditions <- base::list()
[16:10:35.142]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:35.142]     if (FALSE) {
[16:10:35.142]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:35.142]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:35.142]     }
[16:10:35.142]     ...future.result <- base::tryCatch({
[16:10:35.142]         base::withCallingHandlers({
[16:10:35.142]             ...future.value <- base::withVisible(base::local({
[16:10:35.142]                 withCallingHandlers({
[16:10:35.142]                   {
[16:10:35.142]                     do.call(function(...) {
[16:10:35.142]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.142]                       if (!identical(...future.globals.maxSize.org, 
[16:10:35.142]                         ...future.globals.maxSize)) {
[16:10:35.142]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.142]                         on.exit(options(oopts), add = TRUE)
[16:10:35.142]                       }
[16:10:35.142]                       {
[16:10:35.142]                         lapply(seq_along(...future.elements_ii), 
[16:10:35.142]                           FUN = function(jj) {
[16:10:35.142]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.142]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.142]                               envir = globalenv(), inherits = FALSE)
[16:10:35.142]                             ...future.FUN(...future.X_jj, ...)
[16:10:35.142]                           })
[16:10:35.142]                       }
[16:10:35.142]                     }, args = future.call.arguments)
[16:10:35.142]                   }
[16:10:35.142]                 }, immediateCondition = function(cond) {
[16:10:35.142]                   save_rds <- function (object, pathname, ...) 
[16:10:35.142]                   {
[16:10:35.142]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:10:35.142]                     if (file_test("-f", pathname_tmp)) {
[16:10:35.142]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.142]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:10:35.142]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.142]                         fi_tmp[["mtime"]])
[16:10:35.142]                     }
[16:10:35.142]                     tryCatch({
[16:10:35.142]                       saveRDS(object, file = pathname_tmp, ...)
[16:10:35.142]                     }, error = function(ex) {
[16:10:35.142]                       msg <- conditionMessage(ex)
[16:10:35.142]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.142]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:10:35.142]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.142]                         fi_tmp[["mtime"]], msg)
[16:10:35.142]                       ex$message <- msg
[16:10:35.142]                       stop(ex)
[16:10:35.142]                     })
[16:10:35.142]                     stopifnot(file_test("-f", pathname_tmp))
[16:10:35.142]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:10:35.142]                     if (!res || file_test("-f", pathname_tmp)) {
[16:10:35.142]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.142]                       fi <- file.info(pathname)
[16:10:35.142]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:10:35.142]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.142]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:10:35.142]                         fi[["size"]], fi[["mtime"]])
[16:10:35.142]                       stop(msg)
[16:10:35.142]                     }
[16:10:35.142]                     invisible(pathname)
[16:10:35.142]                   }
[16:10:35.142]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:10:35.142]                     rootPath = tempdir()) 
[16:10:35.142]                   {
[16:10:35.142]                     obj <- list(time = Sys.time(), condition = cond)
[16:10:35.142]                     file <- tempfile(pattern = class(cond)[1], 
[16:10:35.142]                       tmpdir = path, fileext = ".rds")
[16:10:35.142]                     save_rds(obj, file)
[16:10:35.142]                   }
[16:10:35.142]                   saveImmediateCondition(cond, path = "/tmp/RtmpLZUJI0/.future/immediateConditions")
[16:10:35.142]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.142]                   {
[16:10:35.142]                     inherits <- base::inherits
[16:10:35.142]                     invokeRestart <- base::invokeRestart
[16:10:35.142]                     is.null <- base::is.null
[16:10:35.142]                     muffled <- FALSE
[16:10:35.142]                     if (inherits(cond, "message")) {
[16:10:35.142]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:35.142]                       if (muffled) 
[16:10:35.142]                         invokeRestart("muffleMessage")
[16:10:35.142]                     }
[16:10:35.142]                     else if (inherits(cond, "warning")) {
[16:10:35.142]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:35.142]                       if (muffled) 
[16:10:35.142]                         invokeRestart("muffleWarning")
[16:10:35.142]                     }
[16:10:35.142]                     else if (inherits(cond, "condition")) {
[16:10:35.142]                       if (!is.null(pattern)) {
[16:10:35.142]                         computeRestarts <- base::computeRestarts
[16:10:35.142]                         grepl <- base::grepl
[16:10:35.142]                         restarts <- computeRestarts(cond)
[16:10:35.142]                         for (restart in restarts) {
[16:10:35.142]                           name <- restart$name
[16:10:35.142]                           if (is.null(name)) 
[16:10:35.142]                             next
[16:10:35.142]                           if (!grepl(pattern, name)) 
[16:10:35.142]                             next
[16:10:35.142]                           invokeRestart(restart)
[16:10:35.142]                           muffled <- TRUE
[16:10:35.142]                           break
[16:10:35.142]                         }
[16:10:35.142]                       }
[16:10:35.142]                     }
[16:10:35.142]                     invisible(muffled)
[16:10:35.142]                   }
[16:10:35.142]                   muffleCondition(cond)
[16:10:35.142]                 })
[16:10:35.142]             }))
[16:10:35.142]             future::FutureResult(value = ...future.value$value, 
[16:10:35.142]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:35.142]                   ...future.rng), globalenv = if (FALSE) 
[16:10:35.142]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:35.142]                     ...future.globalenv.names))
[16:10:35.142]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:35.142]         }, condition = base::local({
[16:10:35.142]             c <- base::c
[16:10:35.142]             inherits <- base::inherits
[16:10:35.142]             invokeRestart <- base::invokeRestart
[16:10:35.142]             length <- base::length
[16:10:35.142]             list <- base::list
[16:10:35.142]             seq.int <- base::seq.int
[16:10:35.142]             signalCondition <- base::signalCondition
[16:10:35.142]             sys.calls <- base::sys.calls
[16:10:35.142]             `[[` <- base::`[[`
[16:10:35.142]             `+` <- base::`+`
[16:10:35.142]             `<<-` <- base::`<<-`
[16:10:35.142]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:35.142]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:35.142]                   3L)]
[16:10:35.142]             }
[16:10:35.142]             function(cond) {
[16:10:35.142]                 is_error <- inherits(cond, "error")
[16:10:35.142]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:35.142]                   NULL)
[16:10:35.142]                 if (is_error) {
[16:10:35.142]                   sessionInformation <- function() {
[16:10:35.142]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:35.142]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:35.142]                       search = base::search(), system = base::Sys.info())
[16:10:35.142]                   }
[16:10:35.142]                   ...future.conditions[[length(...future.conditions) + 
[16:10:35.142]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:35.142]                     cond$call), session = sessionInformation(), 
[16:10:35.142]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:35.142]                   signalCondition(cond)
[16:10:35.142]                 }
[16:10:35.142]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:35.142]                 "immediateCondition"))) {
[16:10:35.142]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:35.142]                   ...future.conditions[[length(...future.conditions) + 
[16:10:35.142]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:35.142]                   if (TRUE && !signal) {
[16:10:35.142]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.142]                     {
[16:10:35.142]                       inherits <- base::inherits
[16:10:35.142]                       invokeRestart <- base::invokeRestart
[16:10:35.142]                       is.null <- base::is.null
[16:10:35.142]                       muffled <- FALSE
[16:10:35.142]                       if (inherits(cond, "message")) {
[16:10:35.142]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:35.142]                         if (muffled) 
[16:10:35.142]                           invokeRestart("muffleMessage")
[16:10:35.142]                       }
[16:10:35.142]                       else if (inherits(cond, "warning")) {
[16:10:35.142]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:35.142]                         if (muffled) 
[16:10:35.142]                           invokeRestart("muffleWarning")
[16:10:35.142]                       }
[16:10:35.142]                       else if (inherits(cond, "condition")) {
[16:10:35.142]                         if (!is.null(pattern)) {
[16:10:35.142]                           computeRestarts <- base::computeRestarts
[16:10:35.142]                           grepl <- base::grepl
[16:10:35.142]                           restarts <- computeRestarts(cond)
[16:10:35.142]                           for (restart in restarts) {
[16:10:35.142]                             name <- restart$name
[16:10:35.142]                             if (is.null(name)) 
[16:10:35.142]                               next
[16:10:35.142]                             if (!grepl(pattern, name)) 
[16:10:35.142]                               next
[16:10:35.142]                             invokeRestart(restart)
[16:10:35.142]                             muffled <- TRUE
[16:10:35.142]                             break
[16:10:35.142]                           }
[16:10:35.142]                         }
[16:10:35.142]                       }
[16:10:35.142]                       invisible(muffled)
[16:10:35.142]                     }
[16:10:35.142]                     muffleCondition(cond, pattern = "^muffle")
[16:10:35.142]                   }
[16:10:35.142]                 }
[16:10:35.142]                 else {
[16:10:35.142]                   if (TRUE) {
[16:10:35.142]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.142]                     {
[16:10:35.142]                       inherits <- base::inherits
[16:10:35.142]                       invokeRestart <- base::invokeRestart
[16:10:35.142]                       is.null <- base::is.null
[16:10:35.142]                       muffled <- FALSE
[16:10:35.142]                       if (inherits(cond, "message")) {
[16:10:35.142]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:35.142]                         if (muffled) 
[16:10:35.142]                           invokeRestart("muffleMessage")
[16:10:35.142]                       }
[16:10:35.142]                       else if (inherits(cond, "warning")) {
[16:10:35.142]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:35.142]                         if (muffled) 
[16:10:35.142]                           invokeRestart("muffleWarning")
[16:10:35.142]                       }
[16:10:35.142]                       else if (inherits(cond, "condition")) {
[16:10:35.142]                         if (!is.null(pattern)) {
[16:10:35.142]                           computeRestarts <- base::computeRestarts
[16:10:35.142]                           grepl <- base::grepl
[16:10:35.142]                           restarts <- computeRestarts(cond)
[16:10:35.142]                           for (restart in restarts) {
[16:10:35.142]                             name <- restart$name
[16:10:35.142]                             if (is.null(name)) 
[16:10:35.142]                               next
[16:10:35.142]                             if (!grepl(pattern, name)) 
[16:10:35.142]                               next
[16:10:35.142]                             invokeRestart(restart)
[16:10:35.142]                             muffled <- TRUE
[16:10:35.142]                             break
[16:10:35.142]                           }
[16:10:35.142]                         }
[16:10:35.142]                       }
[16:10:35.142]                       invisible(muffled)
[16:10:35.142]                     }
[16:10:35.142]                     muffleCondition(cond, pattern = "^muffle")
[16:10:35.142]                   }
[16:10:35.142]                 }
[16:10:35.142]             }
[16:10:35.142]         }))
[16:10:35.142]     }, error = function(ex) {
[16:10:35.142]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:35.142]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:35.142]                 ...future.rng), started = ...future.startTime, 
[16:10:35.142]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:35.142]             version = "1.8"), class = "FutureResult")
[16:10:35.142]     }, finally = {
[16:10:35.142]         if (!identical(...future.workdir, getwd())) 
[16:10:35.142]             setwd(...future.workdir)
[16:10:35.142]         {
[16:10:35.142]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:35.142]                 ...future.oldOptions$nwarnings <- NULL
[16:10:35.142]             }
[16:10:35.142]             base::options(...future.oldOptions)
[16:10:35.142]             if (.Platform$OS.type == "windows") {
[16:10:35.142]                 old_names <- names(...future.oldEnvVars)
[16:10:35.142]                 envs <- base::Sys.getenv()
[16:10:35.142]                 names <- names(envs)
[16:10:35.142]                 common <- intersect(names, old_names)
[16:10:35.142]                 added <- setdiff(names, old_names)
[16:10:35.142]                 removed <- setdiff(old_names, names)
[16:10:35.142]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:35.142]                   envs[common]]
[16:10:35.142]                 NAMES <- toupper(changed)
[16:10:35.142]                 args <- list()
[16:10:35.142]                 for (kk in seq_along(NAMES)) {
[16:10:35.142]                   name <- changed[[kk]]
[16:10:35.142]                   NAME <- NAMES[[kk]]
[16:10:35.142]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.142]                     next
[16:10:35.142]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:35.142]                 }
[16:10:35.142]                 NAMES <- toupper(added)
[16:10:35.142]                 for (kk in seq_along(NAMES)) {
[16:10:35.142]                   name <- added[[kk]]
[16:10:35.142]                   NAME <- NAMES[[kk]]
[16:10:35.142]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.142]                     next
[16:10:35.142]                   args[[name]] <- ""
[16:10:35.142]                 }
[16:10:35.142]                 NAMES <- toupper(removed)
[16:10:35.142]                 for (kk in seq_along(NAMES)) {
[16:10:35.142]                   name <- removed[[kk]]
[16:10:35.142]                   NAME <- NAMES[[kk]]
[16:10:35.142]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.142]                     next
[16:10:35.142]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:35.142]                 }
[16:10:35.142]                 if (length(args) > 0) 
[16:10:35.142]                   base::do.call(base::Sys.setenv, args = args)
[16:10:35.142]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:35.142]             }
[16:10:35.142]             else {
[16:10:35.142]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:35.142]             }
[16:10:35.142]             {
[16:10:35.142]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:35.142]                   0L) {
[16:10:35.142]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:35.142]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:35.142]                   base::options(opts)
[16:10:35.142]                 }
[16:10:35.142]                 {
[16:10:35.142]                   {
[16:10:35.142]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:35.142]                     NULL
[16:10:35.142]                   }
[16:10:35.142]                   options(future.plan = NULL)
[16:10:35.142]                   if (is.na(NA_character_)) 
[16:10:35.142]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:35.142]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:35.142]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:10:35.142]                     envir = parent.frame()) 
[16:10:35.142]                   {
[16:10:35.142]                     default_workers <- missing(workers)
[16:10:35.142]                     if (is.function(workers)) 
[16:10:35.142]                       workers <- workers()
[16:10:35.142]                     workers <- structure(as.integer(workers), 
[16:10:35.142]                       class = class(workers))
[16:10:35.142]                     stop_if_not(is.finite(workers), workers >= 
[16:10:35.142]                       1L)
[16:10:35.142]                     if ((workers == 1L && !inherits(workers, 
[16:10:35.142]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:10:35.142]                       if (default_workers) 
[16:10:35.142]                         supportsMulticore(warn = TRUE)
[16:10:35.142]                       return(sequential(..., envir = envir))
[16:10:35.142]                     }
[16:10:35.142]                     oopts <- options(mc.cores = workers)
[16:10:35.142]                     on.exit(options(oopts))
[16:10:35.142]                     future <- MulticoreFuture(..., workers = workers, 
[16:10:35.142]                       envir = envir)
[16:10:35.142]                     if (!future$lazy) 
[16:10:35.142]                       future <- run(future)
[16:10:35.142]                     invisible(future)
[16:10:35.142]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:35.142]                 }
[16:10:35.142]             }
[16:10:35.142]         }
[16:10:35.142]     })
[16:10:35.142]     if (TRUE) {
[16:10:35.142]         base::sink(type = "output", split = FALSE)
[16:10:35.142]         if (TRUE) {
[16:10:35.142]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:35.142]         }
[16:10:35.142]         else {
[16:10:35.142]             ...future.result["stdout"] <- base::list(NULL)
[16:10:35.142]         }
[16:10:35.142]         base::close(...future.stdout)
[16:10:35.142]         ...future.stdout <- NULL
[16:10:35.142]     }
[16:10:35.142]     ...future.result$conditions <- ...future.conditions
[16:10:35.142]     ...future.result$finished <- base::Sys.time()
[16:10:35.142]     ...future.result
[16:10:35.142] }
[16:10:35.146] assign_globals() ...
[16:10:35.146] List of 5
[16:10:35.146]  $ ...future.FUN            :function (...)  
[16:10:35.146]  $ future.call.arguments    : list()
[16:10:35.146]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:35.146]  $ ...future.elements_ii    :List of 3
[16:10:35.146]   ..$ : int 0
[16:10:35.146]   ..$ : int 0
[16:10:35.146]   ..$ : int 0
[16:10:35.146]  $ ...future.seeds_ii       :List of 3
[16:10:35.146]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[16:10:35.146]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[16:10:35.146]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[16:10:35.146]  $ ...future.globals.maxSize: NULL
[16:10:35.146]  - attr(*, "resolved")= logi FALSE
[16:10:35.146]  - attr(*, "total_size")= num 616
[16:10:35.146]  - attr(*, "where")=List of 5
[16:10:35.146]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:10:35.146]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:10:35.146]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:10:35.146]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:10:35.146]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:10:35.146]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:35.146]  - attr(*, "already-done")= logi TRUE
[16:10:35.155] - reassign environment for ‘...future.FUN’
[16:10:35.155] - copied ‘...future.FUN’ to environment
[16:10:35.155] - copied ‘future.call.arguments’ to environment
[16:10:35.156] - copied ‘...future.elements_ii’ to environment
[16:10:35.156] - copied ‘...future.seeds_ii’ to environment
[16:10:35.156] - copied ‘...future.globals.maxSize’ to environment
[16:10:35.156] assign_globals() ... done
[16:10:35.156] requestCore(): workers = 2
[16:10:35.158] MulticoreFuture started
[16:10:35.158] - Launch lazy future ... done
[16:10:35.159] run() for ‘MulticoreFuture’ ... done
[16:10:35.159] Created future:
[16:10:35.159] plan(): Setting new future strategy stack:
[16:10:35.160] List of future strategies:
[16:10:35.160] 1. sequential:
[16:10:35.160]    - args: function (..., envir = parent.frame())
[16:10:35.160]    - tweaked: FALSE
[16:10:35.160]    - call: NULL
[16:10:35.204] plan(): nbrOfWorkers() = 1
[16:10:35.206] plan(): Setting new future strategy stack:
[16:10:35.206] List of future strategies:
[16:10:35.206] 1. multicore:
[16:10:35.206]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:10:35.206]    - tweaked: FALSE
[16:10:35.206]    - call: plan(strategy)
[16:10:35.210] plan(): nbrOfWorkers() = 2
[16:10:35.159] MulticoreFuture:
[16:10:35.159] Label: ‘future_replicate-2’
[16:10:35.159] Expression:
[16:10:35.159] {
[16:10:35.159]     do.call(function(...) {
[16:10:35.159]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.159]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:35.159]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.159]             on.exit(options(oopts), add = TRUE)
[16:10:35.159]         }
[16:10:35.159]         {
[16:10:35.159]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:35.159]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.159]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.159]                   envir = globalenv(), inherits = FALSE)
[16:10:35.159]                 ...future.FUN(...future.X_jj, ...)
[16:10:35.159]             })
[16:10:35.159]         }
[16:10:35.159]     }, args = future.call.arguments)
[16:10:35.159] }
[16:10:35.159] Lazy evaluation: FALSE
[16:10:35.159] Asynchronous evaluation: TRUE
[16:10:35.159] Local evaluation: TRUE
[16:10:35.159] Environment: R_GlobalEnv
[16:10:35.159] Capture standard output: TRUE
[16:10:35.159] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:35.159] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:35.159] Packages: <none>
[16:10:35.159] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:35.159] Resolved: TRUE
[16:10:35.159] Value: <not collected>
[16:10:35.159] Conditions captured: <none>
[16:10:35.159] Early signaling: FALSE
[16:10:35.159] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:35.159] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:35.210] Chunk #2 of 2 ... DONE
[16:10:35.210] Launching 2 futures (chunks) ... DONE
[16:10:35.211] Resolving 2 futures (chunks) ...
[16:10:35.211] resolve() on list ...
[16:10:35.211]  recursive: 0
[16:10:35.211]  length: 2
[16:10:35.211] 
[16:10:35.211] Future #1
[16:10:35.212] signalConditionsASAP(MulticoreFuture, pos=1) ...
[16:10:35.212] - nx: 2
[16:10:35.212] - relay: TRUE
[16:10:35.213] - stdout: TRUE
[16:10:35.213] - signal: TRUE
[16:10:35.213] - resignal: FALSE
[16:10:35.213] - force: TRUE
[16:10:35.213] - relayed: [n=2] FALSE, FALSE
[16:10:35.213] - queued futures: [n=2] FALSE, FALSE
[16:10:35.213]  - until=1
[16:10:35.213]  - relaying element #1
[16:10:35.214] - relayed: [n=2] TRUE, FALSE
[16:10:35.214] - queued futures: [n=2] TRUE, FALSE
[16:10:35.214] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[16:10:35.214]  length: 1 (resolved future 1)
[16:10:35.214] Future #2
[16:10:35.215] signalConditionsASAP(MulticoreFuture, pos=2) ...
[16:10:35.215] - nx: 2
[16:10:35.215] - relay: TRUE
[16:10:35.216] - stdout: TRUE
[16:10:35.216] - signal: TRUE
[16:10:35.216] - resignal: FALSE
[16:10:35.216] - force: TRUE
[16:10:35.216] - relayed: [n=2] TRUE, FALSE
[16:10:35.216] - queued futures: [n=2] TRUE, FALSE
[16:10:35.216]  - until=2
[16:10:35.216]  - relaying element #2
[16:10:35.217] - relayed: [n=2] TRUE, TRUE
[16:10:35.217] - queued futures: [n=2] TRUE, TRUE
[16:10:35.217] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[16:10:35.217]  length: 0 (resolved future 2)
[16:10:35.217] Relaying remaining futures
[16:10:35.217] signalConditionsASAP(NULL, pos=0) ...
[16:10:35.218] - nx: 2
[16:10:35.218] - relay: TRUE
[16:10:35.218] - stdout: TRUE
[16:10:35.218] - signal: TRUE
[16:10:35.218] - resignal: FALSE
[16:10:35.218] - force: TRUE
[16:10:35.218] - relayed: [n=2] TRUE, TRUE
[16:10:35.218] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:10:35.218] - relayed: [n=2] TRUE, TRUE
[16:10:35.219] - queued futures: [n=2] TRUE, TRUE
[16:10:35.219] signalConditionsASAP(NULL, pos=0) ... done
[16:10:35.219] resolve() on list ... DONE
[16:10:35.219]  - Number of value chunks collected: 2
[16:10:35.219] Resolving 2 futures (chunks) ... DONE
[16:10:35.219] Reducing values from 2 chunks ...
[16:10:35.219]  - Number of values collected after concatenation: 5
[16:10:35.219]  - Number of values expected: 5
[16:10:35.219] Reducing values from 2 chunks ... DONE
[16:10:35.219] future_lapply() ... DONE
[16:10:35.220] future_lapply() ...
[16:10:35.220] Generating random seeds ...
[16:10:35.220] Generating random seed streams for 5 elements ...
[16:10:35.220] Generating random seed streams for 5 elements ... DONE
[16:10:35.221] Generating random seeds ... DONE
[16:10:35.221] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:10:35.225] Number of chunks: 2
[16:10:35.225] getGlobalsAndPackagesXApply() ...
[16:10:35.225]  - future.globals: TRUE
[16:10:35.225] getGlobalsAndPackages() ...
[16:10:35.225] Searching for globals...
[16:10:35.226] - globals found: [2] ‘FUN’, ‘sample’
[16:10:35.226] Searching for globals ... DONE
[16:10:35.226] Resolving globals: FALSE
[16:10:35.227] The total size of the 1 globals is 616 bytes (616 bytes)
[16:10:35.227] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:10:35.227] - globals: [1] ‘FUN’
[16:10:35.227] 
[16:10:35.227] getGlobalsAndPackages() ... DONE
[16:10:35.228]  - globals found/used: [n=1] ‘FUN’
[16:10:35.228]  - needed namespaces: [n=0] 
[16:10:35.228] Finding globals ... DONE
[16:10:35.228]  - use_args: TRUE
[16:10:35.228]  - Getting '...' globals ...
[16:10:35.228] resolve() on list ...
[16:10:35.228]  recursive: 0
[16:10:35.229]  length: 1
[16:10:35.229]  elements: ‘...’
[16:10:35.229]  length: 0 (resolved future 1)
[16:10:35.229] resolve() on list ... DONE
[16:10:35.229]    - '...' content: [n=0] 
[16:10:35.229] List of 1
[16:10:35.229]  $ ...: list()
[16:10:35.229]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:35.229]  - attr(*, "where")=List of 1
[16:10:35.229]   ..$ ...:<environment: 0x55cf8cd3ed90> 
[16:10:35.229]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:35.229]  - attr(*, "resolved")= logi TRUE
[16:10:35.229]  - attr(*, "total_size")= num NA
[16:10:35.232]  - Getting '...' globals ... DONE
[16:10:35.232] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:10:35.232] List of 2
[16:10:35.232]  $ ...future.FUN:function (...)  
[16:10:35.232]  $ ...          : list()
[16:10:35.232]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:35.232]  - attr(*, "where")=List of 2
[16:10:35.232]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:10:35.232]   ..$ ...          :<environment: 0x55cf8cd3ed90> 
[16:10:35.232]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:35.232]  - attr(*, "resolved")= logi FALSE
[16:10:35.232]  - attr(*, "total_size")= num 616
[16:10:35.235] Packages to be attached in all futures: [n=0] 
[16:10:35.235] getGlobalsAndPackagesXApply() ... DONE
[16:10:35.235] Number of futures (= number of chunks): 2
[16:10:35.235] Launching 2 futures (chunks) ...
[16:10:35.235] Chunk #1 of 2 ...
[16:10:35.235]  - Finding globals in 'X' for chunk #1 ...
[16:10:35.236] getGlobalsAndPackages() ...
[16:10:35.236] Searching for globals...
[16:10:35.236] 
[16:10:35.236] Searching for globals ... DONE
[16:10:35.236] - globals: [0] <none>
[16:10:35.236] getGlobalsAndPackages() ... DONE
[16:10:35.236]    + additional globals found: [n=0] 
[16:10:35.236]    + additional namespaces needed: [n=0] 
[16:10:35.236]  - Finding globals in 'X' for chunk #1 ... DONE
[16:10:35.237]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:10:35.237]  - seeds: [2] <seeds>
[16:10:35.237] getGlobalsAndPackages() ...
[16:10:35.237] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:35.237] Resolving globals: FALSE
[16:10:35.237] Tweak future expression to call with '...' arguments ...
[16:10:35.237] {
[16:10:35.237]     do.call(function(...) {
[16:10:35.237]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.237]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:35.237]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.237]             on.exit(options(oopts), add = TRUE)
[16:10:35.237]         }
[16:10:35.237]         {
[16:10:35.237]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:35.237]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.237]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.237]                   envir = globalenv(), inherits = FALSE)
[16:10:35.237]                 ...future.FUN(...future.X_jj, ...)
[16:10:35.237]             })
[16:10:35.237]         }
[16:10:35.237]     }, args = future.call.arguments)
[16:10:35.237] }
[16:10:35.238] Tweak future expression to call with '...' arguments ... DONE
[16:10:35.239] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:35.239] 
[16:10:35.239] getGlobalsAndPackages() ... DONE
[16:10:35.240] run() for ‘Future’ ...
[16:10:35.240] - state: ‘created’
[16:10:35.240] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:10:35.244] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:35.244] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:10:35.244]   - Field: ‘label’
[16:10:35.244]   - Field: ‘local’
[16:10:35.244]   - Field: ‘owner’
[16:10:35.244]   - Field: ‘envir’
[16:10:35.244]   - Field: ‘workers’
[16:10:35.244]   - Field: ‘packages’
[16:10:35.245]   - Field: ‘gc’
[16:10:35.245]   - Field: ‘job’
[16:10:35.245]   - Field: ‘conditions’
[16:10:35.245]   - Field: ‘expr’
[16:10:35.245]   - Field: ‘uuid’
[16:10:35.245]   - Field: ‘seed’
[16:10:35.245]   - Field: ‘version’
[16:10:35.245]   - Field: ‘result’
[16:10:35.245]   - Field: ‘asynchronous’
[16:10:35.245]   - Field: ‘calls’
[16:10:35.245]   - Field: ‘globals’
[16:10:35.246]   - Field: ‘stdout’
[16:10:35.246]   - Field: ‘earlySignal’
[16:10:35.246]   - Field: ‘lazy’
[16:10:35.246]   - Field: ‘state’
[16:10:35.246] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:10:35.246] - Launch lazy future ...
[16:10:35.246] Packages needed by the future expression (n = 0): <none>
[16:10:35.246] Packages needed by future strategies (n = 0): <none>
[16:10:35.247] {
[16:10:35.247]     {
[16:10:35.247]         {
[16:10:35.247]             ...future.startTime <- base::Sys.time()
[16:10:35.247]             {
[16:10:35.247]                 {
[16:10:35.247]                   {
[16:10:35.247]                     {
[16:10:35.247]                       base::local({
[16:10:35.247]                         has_future <- base::requireNamespace("future", 
[16:10:35.247]                           quietly = TRUE)
[16:10:35.247]                         if (has_future) {
[16:10:35.247]                           ns <- base::getNamespace("future")
[16:10:35.247]                           version <- ns[[".package"]][["version"]]
[16:10:35.247]                           if (is.null(version)) 
[16:10:35.247]                             version <- utils::packageVersion("future")
[16:10:35.247]                         }
[16:10:35.247]                         else {
[16:10:35.247]                           version <- NULL
[16:10:35.247]                         }
[16:10:35.247]                         if (!has_future || version < "1.8.0") {
[16:10:35.247]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:35.247]                             "", base::R.version$version.string), 
[16:10:35.247]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:35.247]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:35.247]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:35.247]                               "release", "version")], collapse = " "), 
[16:10:35.247]                             hostname = base::Sys.info()[["nodename"]])
[16:10:35.247]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:35.247]                             info)
[16:10:35.247]                           info <- base::paste(info, collapse = "; ")
[16:10:35.247]                           if (!has_future) {
[16:10:35.247]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:35.247]                               info)
[16:10:35.247]                           }
[16:10:35.247]                           else {
[16:10:35.247]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:35.247]                               info, version)
[16:10:35.247]                           }
[16:10:35.247]                           base::stop(msg)
[16:10:35.247]                         }
[16:10:35.247]                       })
[16:10:35.247]                     }
[16:10:35.247]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:35.247]                     base::options(mc.cores = 1L)
[16:10:35.247]                   }
[16:10:35.247]                   options(future.plan = NULL)
[16:10:35.247]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:35.247]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:35.247]                 }
[16:10:35.247]                 ...future.workdir <- getwd()
[16:10:35.247]             }
[16:10:35.247]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:35.247]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:35.247]         }
[16:10:35.247]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:35.247]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:10:35.247]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:35.247]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:35.247]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:35.247]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:35.247]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:35.247]             base::names(...future.oldOptions))
[16:10:35.247]     }
[16:10:35.247]     if (FALSE) {
[16:10:35.247]     }
[16:10:35.247]     else {
[16:10:35.247]         if (TRUE) {
[16:10:35.247]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:35.247]                 open = "w")
[16:10:35.247]         }
[16:10:35.247]         else {
[16:10:35.247]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:35.247]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:35.247]         }
[16:10:35.247]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:35.247]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:35.247]             base::sink(type = "output", split = FALSE)
[16:10:35.247]             base::close(...future.stdout)
[16:10:35.247]         }, add = TRUE)
[16:10:35.247]     }
[16:10:35.247]     ...future.frame <- base::sys.nframe()
[16:10:35.247]     ...future.conditions <- base::list()
[16:10:35.247]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:35.247]     if (FALSE) {
[16:10:35.247]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:35.247]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:35.247]     }
[16:10:35.247]     ...future.result <- base::tryCatch({
[16:10:35.247]         base::withCallingHandlers({
[16:10:35.247]             ...future.value <- base::withVisible(base::local({
[16:10:35.247]                 withCallingHandlers({
[16:10:35.247]                   {
[16:10:35.247]                     do.call(function(...) {
[16:10:35.247]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.247]                       if (!identical(...future.globals.maxSize.org, 
[16:10:35.247]                         ...future.globals.maxSize)) {
[16:10:35.247]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.247]                         on.exit(options(oopts), add = TRUE)
[16:10:35.247]                       }
[16:10:35.247]                       {
[16:10:35.247]                         lapply(seq_along(...future.elements_ii), 
[16:10:35.247]                           FUN = function(jj) {
[16:10:35.247]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.247]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.247]                               envir = globalenv(), inherits = FALSE)
[16:10:35.247]                             ...future.FUN(...future.X_jj, ...)
[16:10:35.247]                           })
[16:10:35.247]                       }
[16:10:35.247]                     }, args = future.call.arguments)
[16:10:35.247]                   }
[16:10:35.247]                 }, immediateCondition = function(cond) {
[16:10:35.247]                   save_rds <- function (object, pathname, ...) 
[16:10:35.247]                   {
[16:10:35.247]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:10:35.247]                     if (file_test("-f", pathname_tmp)) {
[16:10:35.247]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.247]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:10:35.247]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.247]                         fi_tmp[["mtime"]])
[16:10:35.247]                     }
[16:10:35.247]                     tryCatch({
[16:10:35.247]                       saveRDS(object, file = pathname_tmp, ...)
[16:10:35.247]                     }, error = function(ex) {
[16:10:35.247]                       msg <- conditionMessage(ex)
[16:10:35.247]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.247]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:10:35.247]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.247]                         fi_tmp[["mtime"]], msg)
[16:10:35.247]                       ex$message <- msg
[16:10:35.247]                       stop(ex)
[16:10:35.247]                     })
[16:10:35.247]                     stopifnot(file_test("-f", pathname_tmp))
[16:10:35.247]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:10:35.247]                     if (!res || file_test("-f", pathname_tmp)) {
[16:10:35.247]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.247]                       fi <- file.info(pathname)
[16:10:35.247]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:10:35.247]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.247]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:10:35.247]                         fi[["size"]], fi[["mtime"]])
[16:10:35.247]                       stop(msg)
[16:10:35.247]                     }
[16:10:35.247]                     invisible(pathname)
[16:10:35.247]                   }
[16:10:35.247]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:10:35.247]                     rootPath = tempdir()) 
[16:10:35.247]                   {
[16:10:35.247]                     obj <- list(time = Sys.time(), condition = cond)
[16:10:35.247]                     file <- tempfile(pattern = class(cond)[1], 
[16:10:35.247]                       tmpdir = path, fileext = ".rds")
[16:10:35.247]                     save_rds(obj, file)
[16:10:35.247]                   }
[16:10:35.247]                   saveImmediateCondition(cond, path = "/tmp/RtmpLZUJI0/.future/immediateConditions")
[16:10:35.247]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.247]                   {
[16:10:35.247]                     inherits <- base::inherits
[16:10:35.247]                     invokeRestart <- base::invokeRestart
[16:10:35.247]                     is.null <- base::is.null
[16:10:35.247]                     muffled <- FALSE
[16:10:35.247]                     if (inherits(cond, "message")) {
[16:10:35.247]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:35.247]                       if (muffled) 
[16:10:35.247]                         invokeRestart("muffleMessage")
[16:10:35.247]                     }
[16:10:35.247]                     else if (inherits(cond, "warning")) {
[16:10:35.247]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:35.247]                       if (muffled) 
[16:10:35.247]                         invokeRestart("muffleWarning")
[16:10:35.247]                     }
[16:10:35.247]                     else if (inherits(cond, "condition")) {
[16:10:35.247]                       if (!is.null(pattern)) {
[16:10:35.247]                         computeRestarts <- base::computeRestarts
[16:10:35.247]                         grepl <- base::grepl
[16:10:35.247]                         restarts <- computeRestarts(cond)
[16:10:35.247]                         for (restart in restarts) {
[16:10:35.247]                           name <- restart$name
[16:10:35.247]                           if (is.null(name)) 
[16:10:35.247]                             next
[16:10:35.247]                           if (!grepl(pattern, name)) 
[16:10:35.247]                             next
[16:10:35.247]                           invokeRestart(restart)
[16:10:35.247]                           muffled <- TRUE
[16:10:35.247]                           break
[16:10:35.247]                         }
[16:10:35.247]                       }
[16:10:35.247]                     }
[16:10:35.247]                     invisible(muffled)
[16:10:35.247]                   }
[16:10:35.247]                   muffleCondition(cond)
[16:10:35.247]                 })
[16:10:35.247]             }))
[16:10:35.247]             future::FutureResult(value = ...future.value$value, 
[16:10:35.247]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:35.247]                   ...future.rng), globalenv = if (FALSE) 
[16:10:35.247]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:35.247]                     ...future.globalenv.names))
[16:10:35.247]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:35.247]         }, condition = base::local({
[16:10:35.247]             c <- base::c
[16:10:35.247]             inherits <- base::inherits
[16:10:35.247]             invokeRestart <- base::invokeRestart
[16:10:35.247]             length <- base::length
[16:10:35.247]             list <- base::list
[16:10:35.247]             seq.int <- base::seq.int
[16:10:35.247]             signalCondition <- base::signalCondition
[16:10:35.247]             sys.calls <- base::sys.calls
[16:10:35.247]             `[[` <- base::`[[`
[16:10:35.247]             `+` <- base::`+`
[16:10:35.247]             `<<-` <- base::`<<-`
[16:10:35.247]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:35.247]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:35.247]                   3L)]
[16:10:35.247]             }
[16:10:35.247]             function(cond) {
[16:10:35.247]                 is_error <- inherits(cond, "error")
[16:10:35.247]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:35.247]                   NULL)
[16:10:35.247]                 if (is_error) {
[16:10:35.247]                   sessionInformation <- function() {
[16:10:35.247]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:35.247]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:35.247]                       search = base::search(), system = base::Sys.info())
[16:10:35.247]                   }
[16:10:35.247]                   ...future.conditions[[length(...future.conditions) + 
[16:10:35.247]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:35.247]                     cond$call), session = sessionInformation(), 
[16:10:35.247]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:35.247]                   signalCondition(cond)
[16:10:35.247]                 }
[16:10:35.247]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:35.247]                 "immediateCondition"))) {
[16:10:35.247]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:35.247]                   ...future.conditions[[length(...future.conditions) + 
[16:10:35.247]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:35.247]                   if (TRUE && !signal) {
[16:10:35.247]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.247]                     {
[16:10:35.247]                       inherits <- base::inherits
[16:10:35.247]                       invokeRestart <- base::invokeRestart
[16:10:35.247]                       is.null <- base::is.null
[16:10:35.247]                       muffled <- FALSE
[16:10:35.247]                       if (inherits(cond, "message")) {
[16:10:35.247]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:35.247]                         if (muffled) 
[16:10:35.247]                           invokeRestart("muffleMessage")
[16:10:35.247]                       }
[16:10:35.247]                       else if (inherits(cond, "warning")) {
[16:10:35.247]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:35.247]                         if (muffled) 
[16:10:35.247]                           invokeRestart("muffleWarning")
[16:10:35.247]                       }
[16:10:35.247]                       else if (inherits(cond, "condition")) {
[16:10:35.247]                         if (!is.null(pattern)) {
[16:10:35.247]                           computeRestarts <- base::computeRestarts
[16:10:35.247]                           grepl <- base::grepl
[16:10:35.247]                           restarts <- computeRestarts(cond)
[16:10:35.247]                           for (restart in restarts) {
[16:10:35.247]                             name <- restart$name
[16:10:35.247]                             if (is.null(name)) 
[16:10:35.247]                               next
[16:10:35.247]                             if (!grepl(pattern, name)) 
[16:10:35.247]                               next
[16:10:35.247]                             invokeRestart(restart)
[16:10:35.247]                             muffled <- TRUE
[16:10:35.247]                             break
[16:10:35.247]                           }
[16:10:35.247]                         }
[16:10:35.247]                       }
[16:10:35.247]                       invisible(muffled)
[16:10:35.247]                     }
[16:10:35.247]                     muffleCondition(cond, pattern = "^muffle")
[16:10:35.247]                   }
[16:10:35.247]                 }
[16:10:35.247]                 else {
[16:10:35.247]                   if (TRUE) {
[16:10:35.247]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.247]                     {
[16:10:35.247]                       inherits <- base::inherits
[16:10:35.247]                       invokeRestart <- base::invokeRestart
[16:10:35.247]                       is.null <- base::is.null
[16:10:35.247]                       muffled <- FALSE
[16:10:35.247]                       if (inherits(cond, "message")) {
[16:10:35.247]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:35.247]                         if (muffled) 
[16:10:35.247]                           invokeRestart("muffleMessage")
[16:10:35.247]                       }
[16:10:35.247]                       else if (inherits(cond, "warning")) {
[16:10:35.247]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:35.247]                         if (muffled) 
[16:10:35.247]                           invokeRestart("muffleWarning")
[16:10:35.247]                       }
[16:10:35.247]                       else if (inherits(cond, "condition")) {
[16:10:35.247]                         if (!is.null(pattern)) {
[16:10:35.247]                           computeRestarts <- base::computeRestarts
[16:10:35.247]                           grepl <- base::grepl
[16:10:35.247]                           restarts <- computeRestarts(cond)
[16:10:35.247]                           for (restart in restarts) {
[16:10:35.247]                             name <- restart$name
[16:10:35.247]                             if (is.null(name)) 
[16:10:35.247]                               next
[16:10:35.247]                             if (!grepl(pattern, name)) 
[16:10:35.247]                               next
[16:10:35.247]                             invokeRestart(restart)
[16:10:35.247]                             muffled <- TRUE
[16:10:35.247]                             break
[16:10:35.247]                           }
[16:10:35.247]                         }
[16:10:35.247]                       }
[16:10:35.247]                       invisible(muffled)
[16:10:35.247]                     }
[16:10:35.247]                     muffleCondition(cond, pattern = "^muffle")
[16:10:35.247]                   }
[16:10:35.247]                 }
[16:10:35.247]             }
[16:10:35.247]         }))
[16:10:35.247]     }, error = function(ex) {
[16:10:35.247]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:35.247]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:35.247]                 ...future.rng), started = ...future.startTime, 
[16:10:35.247]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:35.247]             version = "1.8"), class = "FutureResult")
[16:10:35.247]     }, finally = {
[16:10:35.247]         if (!identical(...future.workdir, getwd())) 
[16:10:35.247]             setwd(...future.workdir)
[16:10:35.247]         {
[16:10:35.247]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:35.247]                 ...future.oldOptions$nwarnings <- NULL
[16:10:35.247]             }
[16:10:35.247]             base::options(...future.oldOptions)
[16:10:35.247]             if (.Platform$OS.type == "windows") {
[16:10:35.247]                 old_names <- names(...future.oldEnvVars)
[16:10:35.247]                 envs <- base::Sys.getenv()
[16:10:35.247]                 names <- names(envs)
[16:10:35.247]                 common <- intersect(names, old_names)
[16:10:35.247]                 added <- setdiff(names, old_names)
[16:10:35.247]                 removed <- setdiff(old_names, names)
[16:10:35.247]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:35.247]                   envs[common]]
[16:10:35.247]                 NAMES <- toupper(changed)
[16:10:35.247]                 args <- list()
[16:10:35.247]                 for (kk in seq_along(NAMES)) {
[16:10:35.247]                   name <- changed[[kk]]
[16:10:35.247]                   NAME <- NAMES[[kk]]
[16:10:35.247]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.247]                     next
[16:10:35.247]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:35.247]                 }
[16:10:35.247]                 NAMES <- toupper(added)
[16:10:35.247]                 for (kk in seq_along(NAMES)) {
[16:10:35.247]                   name <- added[[kk]]
[16:10:35.247]                   NAME <- NAMES[[kk]]
[16:10:35.247]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.247]                     next
[16:10:35.247]                   args[[name]] <- ""
[16:10:35.247]                 }
[16:10:35.247]                 NAMES <- toupper(removed)
[16:10:35.247]                 for (kk in seq_along(NAMES)) {
[16:10:35.247]                   name <- removed[[kk]]
[16:10:35.247]                   NAME <- NAMES[[kk]]
[16:10:35.247]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.247]                     next
[16:10:35.247]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:35.247]                 }
[16:10:35.247]                 if (length(args) > 0) 
[16:10:35.247]                   base::do.call(base::Sys.setenv, args = args)
[16:10:35.247]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:35.247]             }
[16:10:35.247]             else {
[16:10:35.247]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:35.247]             }
[16:10:35.247]             {
[16:10:35.247]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:35.247]                   0L) {
[16:10:35.247]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:35.247]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:35.247]                   base::options(opts)
[16:10:35.247]                 }
[16:10:35.247]                 {
[16:10:35.247]                   {
[16:10:35.247]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:35.247]                     NULL
[16:10:35.247]                   }
[16:10:35.247]                   options(future.plan = NULL)
[16:10:35.247]                   if (is.na(NA_character_)) 
[16:10:35.247]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:35.247]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:35.247]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:10:35.247]                     envir = parent.frame()) 
[16:10:35.247]                   {
[16:10:35.247]                     default_workers <- missing(workers)
[16:10:35.247]                     if (is.function(workers)) 
[16:10:35.247]                       workers <- workers()
[16:10:35.247]                     workers <- structure(as.integer(workers), 
[16:10:35.247]                       class = class(workers))
[16:10:35.247]                     stop_if_not(is.finite(workers), workers >= 
[16:10:35.247]                       1L)
[16:10:35.247]                     if ((workers == 1L && !inherits(workers, 
[16:10:35.247]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:10:35.247]                       if (default_workers) 
[16:10:35.247]                         supportsMulticore(warn = TRUE)
[16:10:35.247]                       return(sequential(..., envir = envir))
[16:10:35.247]                     }
[16:10:35.247]                     oopts <- options(mc.cores = workers)
[16:10:35.247]                     on.exit(options(oopts))
[16:10:35.247]                     future <- MulticoreFuture(..., workers = workers, 
[16:10:35.247]                       envir = envir)
[16:10:35.247]                     if (!future$lazy) 
[16:10:35.247]                       future <- run(future)
[16:10:35.247]                     invisible(future)
[16:10:35.247]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:35.247]                 }
[16:10:35.247]             }
[16:10:35.247]         }
[16:10:35.247]     })
[16:10:35.247]     if (TRUE) {
[16:10:35.247]         base::sink(type = "output", split = FALSE)
[16:10:35.247]         if (TRUE) {
[16:10:35.247]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:35.247]         }
[16:10:35.247]         else {
[16:10:35.247]             ...future.result["stdout"] <- base::list(NULL)
[16:10:35.247]         }
[16:10:35.247]         base::close(...future.stdout)
[16:10:35.247]         ...future.stdout <- NULL
[16:10:35.247]     }
[16:10:35.247]     ...future.result$conditions <- ...future.conditions
[16:10:35.247]     ...future.result$finished <- base::Sys.time()
[16:10:35.247]     ...future.result
[16:10:35.247] }
[16:10:35.249] assign_globals() ...
[16:10:35.249] List of 5
[16:10:35.249]  $ ...future.FUN            :function (...)  
[16:10:35.249]  $ future.call.arguments    : list()
[16:10:35.249]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:35.249]  $ ...future.elements_ii    :List of 2
[16:10:35.249]   ..$ : int 0
[16:10:35.249]   ..$ : int 0
[16:10:35.249]  $ ...future.seeds_ii       :List of 2
[16:10:35.249]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[16:10:35.249]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[16:10:35.249]  $ ...future.globals.maxSize: NULL
[16:10:35.249]  - attr(*, "resolved")= logi FALSE
[16:10:35.249]  - attr(*, "total_size")= num 616
[16:10:35.249]  - attr(*, "where")=List of 5
[16:10:35.249]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:10:35.249]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:10:35.249]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:10:35.249]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:10:35.249]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:10:35.249]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:35.249]  - attr(*, "already-done")= logi TRUE
[16:10:35.255] - reassign environment for ‘...future.FUN’
[16:10:35.255] - copied ‘...future.FUN’ to environment
[16:10:35.255] - copied ‘future.call.arguments’ to environment
[16:10:35.255] - copied ‘...future.elements_ii’ to environment
[16:10:35.255] - copied ‘...future.seeds_ii’ to environment
[16:10:35.255] - copied ‘...future.globals.maxSize’ to environment
[16:10:35.255] assign_globals() ... done
[16:10:35.255] requestCore(): workers = 2
[16:10:35.257] MulticoreFuture started
[16:10:35.258] - Launch lazy future ... done
[16:10:35.258] run() for ‘MulticoreFuture’ ... done
[16:10:35.258] Created future:
[16:10:35.258] plan(): Setting new future strategy stack:
[16:10:35.259] List of future strategies:
[16:10:35.259] 1. sequential:
[16:10:35.259]    - args: function (..., envir = parent.frame())
[16:10:35.259]    - tweaked: FALSE
[16:10:35.259]    - call: NULL
[16:10:35.260] plan(): nbrOfWorkers() = 1
[16:10:35.262] plan(): Setting new future strategy stack:
[16:10:35.262] List of future strategies:
[16:10:35.262] 1. multicore:
[16:10:35.262]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:10:35.262]    - tweaked: FALSE
[16:10:35.262]    - call: plan(strategy)
[16:10:35.267] plan(): nbrOfWorkers() = 2
[16:10:35.258] MulticoreFuture:
[16:10:35.258] Label: ‘future_replicate-1’
[16:10:35.258] Expression:
[16:10:35.258] {
[16:10:35.258]     do.call(function(...) {
[16:10:35.258]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.258]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:35.258]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.258]             on.exit(options(oopts), add = TRUE)
[16:10:35.258]         }
[16:10:35.258]         {
[16:10:35.258]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:35.258]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.258]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.258]                   envir = globalenv(), inherits = FALSE)
[16:10:35.258]                 ...future.FUN(...future.X_jj, ...)
[16:10:35.258]             })
[16:10:35.258]         }
[16:10:35.258]     }, args = future.call.arguments)
[16:10:35.258] }
[16:10:35.258] Lazy evaluation: FALSE
[16:10:35.258] Asynchronous evaluation: TRUE
[16:10:35.258] Local evaluation: TRUE
[16:10:35.258] Environment: R_GlobalEnv
[16:10:35.258] Capture standard output: TRUE
[16:10:35.258] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:35.258] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:35.258] Packages: <none>
[16:10:35.258] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:35.258] Resolved: TRUE
[16:10:35.258] Value: <not collected>
[16:10:35.258] Conditions captured: <none>
[16:10:35.258] Early signaling: FALSE
[16:10:35.258] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:35.258] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:35.268] Chunk #1 of 2 ... DONE
[16:10:35.268] Chunk #2 of 2 ...
[16:10:35.268]  - Finding globals in 'X' for chunk #2 ...
[16:10:35.268] getGlobalsAndPackages() ...
[16:10:35.269] Searching for globals...
[16:10:35.269] 
[16:10:35.269] Searching for globals ... DONE
[16:10:35.269] - globals: [0] <none>
[16:10:35.269] getGlobalsAndPackages() ... DONE
[16:10:35.270]    + additional globals found: [n=0] 
[16:10:35.270]    + additional namespaces needed: [n=0] 
[16:10:35.270]  - Finding globals in 'X' for chunk #2 ... DONE
[16:10:35.270]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[16:10:35.270]  - seeds: [3] <seeds>
[16:10:35.270] getGlobalsAndPackages() ...
[16:10:35.271] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:35.271] Resolving globals: FALSE
[16:10:35.271] Tweak future expression to call with '...' arguments ...
[16:10:35.271] {
[16:10:35.271]     do.call(function(...) {
[16:10:35.271]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.271]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:35.271]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.271]             on.exit(options(oopts), add = TRUE)
[16:10:35.271]         }
[16:10:35.271]         {
[16:10:35.271]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:35.271]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.271]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.271]                   envir = globalenv(), inherits = FALSE)
[16:10:35.271]                 ...future.FUN(...future.X_jj, ...)
[16:10:35.271]             })
[16:10:35.271]         }
[16:10:35.271]     }, args = future.call.arguments)
[16:10:35.271] }
[16:10:35.271] Tweak future expression to call with '...' arguments ... DONE
[16:10:35.272] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:35.272] 
[16:10:35.272] getGlobalsAndPackages() ... DONE
[16:10:35.273] run() for ‘Future’ ...
[16:10:35.273] - state: ‘created’
[16:10:35.273] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:10:35.278] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:35.278] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:10:35.278]   - Field: ‘label’
[16:10:35.279]   - Field: ‘local’
[16:10:35.279]   - Field: ‘owner’
[16:10:35.279]   - Field: ‘envir’
[16:10:35.279]   - Field: ‘workers’
[16:10:35.279]   - Field: ‘packages’
[16:10:35.279]   - Field: ‘gc’
[16:10:35.279]   - Field: ‘job’
[16:10:35.280]   - Field: ‘conditions’
[16:10:35.280]   - Field: ‘expr’
[16:10:35.280]   - Field: ‘uuid’
[16:10:35.280]   - Field: ‘seed’
[16:10:35.280]   - Field: ‘version’
[16:10:35.280]   - Field: ‘result’
[16:10:35.281]   - Field: ‘asynchronous’
[16:10:35.281]   - Field: ‘calls’
[16:10:35.281]   - Field: ‘globals’
[16:10:35.281]   - Field: ‘stdout’
[16:10:35.281]   - Field: ‘earlySignal’
[16:10:35.281]   - Field: ‘lazy’
[16:10:35.281]   - Field: ‘state’
[16:10:35.281] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:10:35.282] - Launch lazy future ...
[16:10:35.282] Packages needed by the future expression (n = 0): <none>
[16:10:35.282] Packages needed by future strategies (n = 0): <none>
[16:10:35.283] {
[16:10:35.283]     {
[16:10:35.283]         {
[16:10:35.283]             ...future.startTime <- base::Sys.time()
[16:10:35.283]             {
[16:10:35.283]                 {
[16:10:35.283]                   {
[16:10:35.283]                     {
[16:10:35.283]                       base::local({
[16:10:35.283]                         has_future <- base::requireNamespace("future", 
[16:10:35.283]                           quietly = TRUE)
[16:10:35.283]                         if (has_future) {
[16:10:35.283]                           ns <- base::getNamespace("future")
[16:10:35.283]                           version <- ns[[".package"]][["version"]]
[16:10:35.283]                           if (is.null(version)) 
[16:10:35.283]                             version <- utils::packageVersion("future")
[16:10:35.283]                         }
[16:10:35.283]                         else {
[16:10:35.283]                           version <- NULL
[16:10:35.283]                         }
[16:10:35.283]                         if (!has_future || version < "1.8.0") {
[16:10:35.283]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:35.283]                             "", base::R.version$version.string), 
[16:10:35.283]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:35.283]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:35.283]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:35.283]                               "release", "version")], collapse = " "), 
[16:10:35.283]                             hostname = base::Sys.info()[["nodename"]])
[16:10:35.283]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:35.283]                             info)
[16:10:35.283]                           info <- base::paste(info, collapse = "; ")
[16:10:35.283]                           if (!has_future) {
[16:10:35.283]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:35.283]                               info)
[16:10:35.283]                           }
[16:10:35.283]                           else {
[16:10:35.283]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:35.283]                               info, version)
[16:10:35.283]                           }
[16:10:35.283]                           base::stop(msg)
[16:10:35.283]                         }
[16:10:35.283]                       })
[16:10:35.283]                     }
[16:10:35.283]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:35.283]                     base::options(mc.cores = 1L)
[16:10:35.283]                   }
[16:10:35.283]                   options(future.plan = NULL)
[16:10:35.283]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:35.283]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:35.283]                 }
[16:10:35.283]                 ...future.workdir <- getwd()
[16:10:35.283]             }
[16:10:35.283]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:35.283]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:35.283]         }
[16:10:35.283]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:35.283]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[16:10:35.283]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:35.283]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:35.283]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:35.283]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:35.283]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:35.283]             base::names(...future.oldOptions))
[16:10:35.283]     }
[16:10:35.283]     if (FALSE) {
[16:10:35.283]     }
[16:10:35.283]     else {
[16:10:35.283]         if (TRUE) {
[16:10:35.283]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:35.283]                 open = "w")
[16:10:35.283]         }
[16:10:35.283]         else {
[16:10:35.283]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:35.283]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:35.283]         }
[16:10:35.283]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:35.283]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:35.283]             base::sink(type = "output", split = FALSE)
[16:10:35.283]             base::close(...future.stdout)
[16:10:35.283]         }, add = TRUE)
[16:10:35.283]     }
[16:10:35.283]     ...future.frame <- base::sys.nframe()
[16:10:35.283]     ...future.conditions <- base::list()
[16:10:35.283]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:35.283]     if (FALSE) {
[16:10:35.283]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:35.283]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:35.283]     }
[16:10:35.283]     ...future.result <- base::tryCatch({
[16:10:35.283]         base::withCallingHandlers({
[16:10:35.283]             ...future.value <- base::withVisible(base::local({
[16:10:35.283]                 withCallingHandlers({
[16:10:35.283]                   {
[16:10:35.283]                     do.call(function(...) {
[16:10:35.283]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.283]                       if (!identical(...future.globals.maxSize.org, 
[16:10:35.283]                         ...future.globals.maxSize)) {
[16:10:35.283]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.283]                         on.exit(options(oopts), add = TRUE)
[16:10:35.283]                       }
[16:10:35.283]                       {
[16:10:35.283]                         lapply(seq_along(...future.elements_ii), 
[16:10:35.283]                           FUN = function(jj) {
[16:10:35.283]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.283]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.283]                               envir = globalenv(), inherits = FALSE)
[16:10:35.283]                             ...future.FUN(...future.X_jj, ...)
[16:10:35.283]                           })
[16:10:35.283]                       }
[16:10:35.283]                     }, args = future.call.arguments)
[16:10:35.283]                   }
[16:10:35.283]                 }, immediateCondition = function(cond) {
[16:10:35.283]                   save_rds <- function (object, pathname, ...) 
[16:10:35.283]                   {
[16:10:35.283]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:10:35.283]                     if (file_test("-f", pathname_tmp)) {
[16:10:35.283]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.283]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:10:35.283]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.283]                         fi_tmp[["mtime"]])
[16:10:35.283]                     }
[16:10:35.283]                     tryCatch({
[16:10:35.283]                       saveRDS(object, file = pathname_tmp, ...)
[16:10:35.283]                     }, error = function(ex) {
[16:10:35.283]                       msg <- conditionMessage(ex)
[16:10:35.283]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.283]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:10:35.283]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.283]                         fi_tmp[["mtime"]], msg)
[16:10:35.283]                       ex$message <- msg
[16:10:35.283]                       stop(ex)
[16:10:35.283]                     })
[16:10:35.283]                     stopifnot(file_test("-f", pathname_tmp))
[16:10:35.283]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:10:35.283]                     if (!res || file_test("-f", pathname_tmp)) {
[16:10:35.283]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.283]                       fi <- file.info(pathname)
[16:10:35.283]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:10:35.283]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.283]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:10:35.283]                         fi[["size"]], fi[["mtime"]])
[16:10:35.283]                       stop(msg)
[16:10:35.283]                     }
[16:10:35.283]                     invisible(pathname)
[16:10:35.283]                   }
[16:10:35.283]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:10:35.283]                     rootPath = tempdir()) 
[16:10:35.283]                   {
[16:10:35.283]                     obj <- list(time = Sys.time(), condition = cond)
[16:10:35.283]                     file <- tempfile(pattern = class(cond)[1], 
[16:10:35.283]                       tmpdir = path, fileext = ".rds")
[16:10:35.283]                     save_rds(obj, file)
[16:10:35.283]                   }
[16:10:35.283]                   saveImmediateCondition(cond, path = "/tmp/RtmpLZUJI0/.future/immediateConditions")
[16:10:35.283]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.283]                   {
[16:10:35.283]                     inherits <- base::inherits
[16:10:35.283]                     invokeRestart <- base::invokeRestart
[16:10:35.283]                     is.null <- base::is.null
[16:10:35.283]                     muffled <- FALSE
[16:10:35.283]                     if (inherits(cond, "message")) {
[16:10:35.283]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:35.283]                       if (muffled) 
[16:10:35.283]                         invokeRestart("muffleMessage")
[16:10:35.283]                     }
[16:10:35.283]                     else if (inherits(cond, "warning")) {
[16:10:35.283]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:35.283]                       if (muffled) 
[16:10:35.283]                         invokeRestart("muffleWarning")
[16:10:35.283]                     }
[16:10:35.283]                     else if (inherits(cond, "condition")) {
[16:10:35.283]                       if (!is.null(pattern)) {
[16:10:35.283]                         computeRestarts <- base::computeRestarts
[16:10:35.283]                         grepl <- base::grepl
[16:10:35.283]                         restarts <- computeRestarts(cond)
[16:10:35.283]                         for (restart in restarts) {
[16:10:35.283]                           name <- restart$name
[16:10:35.283]                           if (is.null(name)) 
[16:10:35.283]                             next
[16:10:35.283]                           if (!grepl(pattern, name)) 
[16:10:35.283]                             next
[16:10:35.283]                           invokeRestart(restart)
[16:10:35.283]                           muffled <- TRUE
[16:10:35.283]                           break
[16:10:35.283]                         }
[16:10:35.283]                       }
[16:10:35.283]                     }
[16:10:35.283]                     invisible(muffled)
[16:10:35.283]                   }
[16:10:35.283]                   muffleCondition(cond)
[16:10:35.283]                 })
[16:10:35.283]             }))
[16:10:35.283]             future::FutureResult(value = ...future.value$value, 
[16:10:35.283]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:35.283]                   ...future.rng), globalenv = if (FALSE) 
[16:10:35.283]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:35.283]                     ...future.globalenv.names))
[16:10:35.283]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:35.283]         }, condition = base::local({
[16:10:35.283]             c <- base::c
[16:10:35.283]             inherits <- base::inherits
[16:10:35.283]             invokeRestart <- base::invokeRestart
[16:10:35.283]             length <- base::length
[16:10:35.283]             list <- base::list
[16:10:35.283]             seq.int <- base::seq.int
[16:10:35.283]             signalCondition <- base::signalCondition
[16:10:35.283]             sys.calls <- base::sys.calls
[16:10:35.283]             `[[` <- base::`[[`
[16:10:35.283]             `+` <- base::`+`
[16:10:35.283]             `<<-` <- base::`<<-`
[16:10:35.283]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:35.283]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:35.283]                   3L)]
[16:10:35.283]             }
[16:10:35.283]             function(cond) {
[16:10:35.283]                 is_error <- inherits(cond, "error")
[16:10:35.283]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:35.283]                   NULL)
[16:10:35.283]                 if (is_error) {
[16:10:35.283]                   sessionInformation <- function() {
[16:10:35.283]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:35.283]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:35.283]                       search = base::search(), system = base::Sys.info())
[16:10:35.283]                   }
[16:10:35.283]                   ...future.conditions[[length(...future.conditions) + 
[16:10:35.283]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:35.283]                     cond$call), session = sessionInformation(), 
[16:10:35.283]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:35.283]                   signalCondition(cond)
[16:10:35.283]                 }
[16:10:35.283]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:35.283]                 "immediateCondition"))) {
[16:10:35.283]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:35.283]                   ...future.conditions[[length(...future.conditions) + 
[16:10:35.283]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:35.283]                   if (TRUE && !signal) {
[16:10:35.283]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.283]                     {
[16:10:35.283]                       inherits <- base::inherits
[16:10:35.283]                       invokeRestart <- base::invokeRestart
[16:10:35.283]                       is.null <- base::is.null
[16:10:35.283]                       muffled <- FALSE
[16:10:35.283]                       if (inherits(cond, "message")) {
[16:10:35.283]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:35.283]                         if (muffled) 
[16:10:35.283]                           invokeRestart("muffleMessage")
[16:10:35.283]                       }
[16:10:35.283]                       else if (inherits(cond, "warning")) {
[16:10:35.283]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:35.283]                         if (muffled) 
[16:10:35.283]                           invokeRestart("muffleWarning")
[16:10:35.283]                       }
[16:10:35.283]                       else if (inherits(cond, "condition")) {
[16:10:35.283]                         if (!is.null(pattern)) {
[16:10:35.283]                           computeRestarts <- base::computeRestarts
[16:10:35.283]                           grepl <- base::grepl
[16:10:35.283]                           restarts <- computeRestarts(cond)
[16:10:35.283]                           for (restart in restarts) {
[16:10:35.283]                             name <- restart$name
[16:10:35.283]                             if (is.null(name)) 
[16:10:35.283]                               next
[16:10:35.283]                             if (!grepl(pattern, name)) 
[16:10:35.283]                               next
[16:10:35.283]                             invokeRestart(restart)
[16:10:35.283]                             muffled <- TRUE
[16:10:35.283]                             break
[16:10:35.283]                           }
[16:10:35.283]                         }
[16:10:35.283]                       }
[16:10:35.283]                       invisible(muffled)
[16:10:35.283]                     }
[16:10:35.283]                     muffleCondition(cond, pattern = "^muffle")
[16:10:35.283]                   }
[16:10:35.283]                 }
[16:10:35.283]                 else {
[16:10:35.283]                   if (TRUE) {
[16:10:35.283]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.283]                     {
[16:10:35.283]                       inherits <- base::inherits
[16:10:35.283]                       invokeRestart <- base::invokeRestart
[16:10:35.283]                       is.null <- base::is.null
[16:10:35.283]                       muffled <- FALSE
[16:10:35.283]                       if (inherits(cond, "message")) {
[16:10:35.283]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:35.283]                         if (muffled) 
[16:10:35.283]                           invokeRestart("muffleMessage")
[16:10:35.283]                       }
[16:10:35.283]                       else if (inherits(cond, "warning")) {
[16:10:35.283]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:35.283]                         if (muffled) 
[16:10:35.283]                           invokeRestart("muffleWarning")
[16:10:35.283]                       }
[16:10:35.283]                       else if (inherits(cond, "condition")) {
[16:10:35.283]                         if (!is.null(pattern)) {
[16:10:35.283]                           computeRestarts <- base::computeRestarts
[16:10:35.283]                           grepl <- base::grepl
[16:10:35.283]                           restarts <- computeRestarts(cond)
[16:10:35.283]                           for (restart in restarts) {
[16:10:35.283]                             name <- restart$name
[16:10:35.283]                             if (is.null(name)) 
[16:10:35.283]                               next
[16:10:35.283]                             if (!grepl(pattern, name)) 
[16:10:35.283]                               next
[16:10:35.283]                             invokeRestart(restart)
[16:10:35.283]                             muffled <- TRUE
[16:10:35.283]                             break
[16:10:35.283]                           }
[16:10:35.283]                         }
[16:10:35.283]                       }
[16:10:35.283]                       invisible(muffled)
[16:10:35.283]                     }
[16:10:35.283]                     muffleCondition(cond, pattern = "^muffle")
[16:10:35.283]                   }
[16:10:35.283]                 }
[16:10:35.283]             }
[16:10:35.283]         }))
[16:10:35.283]     }, error = function(ex) {
[16:10:35.283]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:35.283]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:35.283]                 ...future.rng), started = ...future.startTime, 
[16:10:35.283]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:35.283]             version = "1.8"), class = "FutureResult")
[16:10:35.283]     }, finally = {
[16:10:35.283]         if (!identical(...future.workdir, getwd())) 
[16:10:35.283]             setwd(...future.workdir)
[16:10:35.283]         {
[16:10:35.283]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:35.283]                 ...future.oldOptions$nwarnings <- NULL
[16:10:35.283]             }
[16:10:35.283]             base::options(...future.oldOptions)
[16:10:35.283]             if (.Platform$OS.type == "windows") {
[16:10:35.283]                 old_names <- names(...future.oldEnvVars)
[16:10:35.283]                 envs <- base::Sys.getenv()
[16:10:35.283]                 names <- names(envs)
[16:10:35.283]                 common <- intersect(names, old_names)
[16:10:35.283]                 added <- setdiff(names, old_names)
[16:10:35.283]                 removed <- setdiff(old_names, names)
[16:10:35.283]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:35.283]                   envs[common]]
[16:10:35.283]                 NAMES <- toupper(changed)
[16:10:35.283]                 args <- list()
[16:10:35.283]                 for (kk in seq_along(NAMES)) {
[16:10:35.283]                   name <- changed[[kk]]
[16:10:35.283]                   NAME <- NAMES[[kk]]
[16:10:35.283]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.283]                     next
[16:10:35.283]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:35.283]                 }
[16:10:35.283]                 NAMES <- toupper(added)
[16:10:35.283]                 for (kk in seq_along(NAMES)) {
[16:10:35.283]                   name <- added[[kk]]
[16:10:35.283]                   NAME <- NAMES[[kk]]
[16:10:35.283]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.283]                     next
[16:10:35.283]                   args[[name]] <- ""
[16:10:35.283]                 }
[16:10:35.283]                 NAMES <- toupper(removed)
[16:10:35.283]                 for (kk in seq_along(NAMES)) {
[16:10:35.283]                   name <- removed[[kk]]
[16:10:35.283]                   NAME <- NAMES[[kk]]
[16:10:35.283]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.283]                     next
[16:10:35.283]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:35.283]                 }
[16:10:35.283]                 if (length(args) > 0) 
[16:10:35.283]                   base::do.call(base::Sys.setenv, args = args)
[16:10:35.283]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:35.283]             }
[16:10:35.283]             else {
[16:10:35.283]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:35.283]             }
[16:10:35.283]             {
[16:10:35.283]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:35.283]                   0L) {
[16:10:35.283]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:35.283]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:35.283]                   base::options(opts)
[16:10:35.283]                 }
[16:10:35.283]                 {
[16:10:35.283]                   {
[16:10:35.283]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:35.283]                     NULL
[16:10:35.283]                   }
[16:10:35.283]                   options(future.plan = NULL)
[16:10:35.283]                   if (is.na(NA_character_)) 
[16:10:35.283]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:35.283]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:35.283]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:10:35.283]                     envir = parent.frame()) 
[16:10:35.283]                   {
[16:10:35.283]                     default_workers <- missing(workers)
[16:10:35.283]                     if (is.function(workers)) 
[16:10:35.283]                       workers <- workers()
[16:10:35.283]                     workers <- structure(as.integer(workers), 
[16:10:35.283]                       class = class(workers))
[16:10:35.283]                     stop_if_not(is.finite(workers), workers >= 
[16:10:35.283]                       1L)
[16:10:35.283]                     if ((workers == 1L && !inherits(workers, 
[16:10:35.283]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:10:35.283]                       if (default_workers) 
[16:10:35.283]                         supportsMulticore(warn = TRUE)
[16:10:35.283]                       return(sequential(..., envir = envir))
[16:10:35.283]                     }
[16:10:35.283]                     oopts <- options(mc.cores = workers)
[16:10:35.283]                     on.exit(options(oopts))
[16:10:35.283]                     future <- MulticoreFuture(..., workers = workers, 
[16:10:35.283]                       envir = envir)
[16:10:35.283]                     if (!future$lazy) 
[16:10:35.283]                       future <- run(future)
[16:10:35.283]                     invisible(future)
[16:10:35.283]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:35.283]                 }
[16:10:35.283]             }
[16:10:35.283]         }
[16:10:35.283]     })
[16:10:35.283]     if (TRUE) {
[16:10:35.283]         base::sink(type = "output", split = FALSE)
[16:10:35.283]         if (TRUE) {
[16:10:35.283]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:35.283]         }
[16:10:35.283]         else {
[16:10:35.283]             ...future.result["stdout"] <- base::list(NULL)
[16:10:35.283]         }
[16:10:35.283]         base::close(...future.stdout)
[16:10:35.283]         ...future.stdout <- NULL
[16:10:35.283]     }
[16:10:35.283]     ...future.result$conditions <- ...future.conditions
[16:10:35.283]     ...future.result$finished <- base::Sys.time()
[16:10:35.283]     ...future.result
[16:10:35.283] }
[16:10:35.286] assign_globals() ...
[16:10:35.286] List of 5
[16:10:35.286]  $ ...future.FUN            :function (...)  
[16:10:35.286]  $ future.call.arguments    : list()
[16:10:35.286]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:35.286]  $ ...future.elements_ii    :List of 3
[16:10:35.286]   ..$ : int 0
[16:10:35.286]   ..$ : int 0
[16:10:35.286]   ..$ : int 0
[16:10:35.286]  $ ...future.seeds_ii       :List of 3
[16:10:35.286]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[16:10:35.286]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[16:10:35.286]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[16:10:35.286]  $ ...future.globals.maxSize: NULL
[16:10:35.286]  - attr(*, "resolved")= logi FALSE
[16:10:35.286]  - attr(*, "total_size")= num 616
[16:10:35.286]  - attr(*, "where")=List of 5
[16:10:35.286]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:10:35.286]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:10:35.286]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:10:35.286]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:10:35.286]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:10:35.286]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:35.286]  - attr(*, "already-done")= logi TRUE
[16:10:35.300] - reassign environment for ‘...future.FUN’
[16:10:35.300] - copied ‘...future.FUN’ to environment
[16:10:35.300] - copied ‘future.call.arguments’ to environment
[16:10:35.301] - copied ‘...future.elements_ii’ to environment
[16:10:35.301] - copied ‘...future.seeds_ii’ to environment
[16:10:35.301] - copied ‘...future.globals.maxSize’ to environment
[16:10:35.301] assign_globals() ... done
[16:10:35.301] requestCore(): workers = 2
[16:10:35.303] MulticoreFuture started
[16:10:35.304] - Launch lazy future ... done
[16:10:35.304] run() for ‘MulticoreFuture’ ... done
[16:10:35.304] Created future:
[16:10:35.305] plan(): Setting new future strategy stack:
[16:10:35.305] List of future strategies:
[16:10:35.305] 1. sequential:
[16:10:35.305]    - args: function (..., envir = parent.frame())
[16:10:35.305]    - tweaked: FALSE
[16:10:35.305]    - call: NULL
[16:10:35.306] plan(): nbrOfWorkers() = 1
[16:10:35.308] plan(): Setting new future strategy stack:
[16:10:35.308] List of future strategies:
[16:10:35.308] 1. multicore:
[16:10:35.308]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:10:35.308]    - tweaked: FALSE
[16:10:35.308]    - call: plan(strategy)
[16:10:35.313] plan(): nbrOfWorkers() = 2
[16:10:35.304] MulticoreFuture:
[16:10:35.304] Label: ‘future_replicate-2’
[16:10:35.304] Expression:
[16:10:35.304] {
[16:10:35.304]     do.call(function(...) {
[16:10:35.304]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.304]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:35.304]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.304]             on.exit(options(oopts), add = TRUE)
[16:10:35.304]         }
[16:10:35.304]         {
[16:10:35.304]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:35.304]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.304]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.304]                   envir = globalenv(), inherits = FALSE)
[16:10:35.304]                 ...future.FUN(...future.X_jj, ...)
[16:10:35.304]             })
[16:10:35.304]         }
[16:10:35.304]     }, args = future.call.arguments)
[16:10:35.304] }
[16:10:35.304] Lazy evaluation: FALSE
[16:10:35.304] Asynchronous evaluation: TRUE
[16:10:35.304] Local evaluation: TRUE
[16:10:35.304] Environment: R_GlobalEnv
[16:10:35.304] Capture standard output: TRUE
[16:10:35.304] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:35.304] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:35.304] Packages: <none>
[16:10:35.304] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:35.304] Resolved: TRUE
[16:10:35.304] Value: <not collected>
[16:10:35.304] Conditions captured: <none>
[16:10:35.304] Early signaling: FALSE
[16:10:35.304] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:35.304] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:35.314] Chunk #2 of 2 ... DONE
[16:10:35.314] Launching 2 futures (chunks) ... DONE
[16:10:35.315] Resolving 2 futures (chunks) ...
[16:10:35.315] resolve() on list ...
[16:10:35.315]  recursive: 0
[16:10:35.315]  length: 2
[16:10:35.315] 
[16:10:35.316] Future #1
[16:10:35.317] signalConditionsASAP(MulticoreFuture, pos=1) ...
[16:10:35.317] - nx: 2
[16:10:35.317] - relay: TRUE
[16:10:35.317] - stdout: TRUE
[16:10:35.317] - signal: TRUE
[16:10:35.317] - resignal: FALSE
[16:10:35.318] - force: TRUE
[16:10:35.318] - relayed: [n=2] FALSE, FALSE
[16:10:35.318] - queued futures: [n=2] FALSE, FALSE
[16:10:35.318]  - until=1
[16:10:35.318]  - relaying element #1
[16:10:35.318] - relayed: [n=2] TRUE, FALSE
[16:10:35.319] - queued futures: [n=2] TRUE, FALSE
[16:10:35.319] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[16:10:35.319]  length: 1 (resolved future 1)
[16:10:35.319] Future #2
[16:10:35.320] signalConditionsASAP(MulticoreFuture, pos=2) ...
[16:10:35.320] - nx: 2
[16:10:35.320] - relay: TRUE
[16:10:35.320] - stdout: TRUE
[16:10:35.321] - signal: TRUE
[16:10:35.321] - resignal: FALSE
[16:10:35.321] - force: TRUE
[16:10:35.321] - relayed: [n=2] TRUE, FALSE
[16:10:35.321] - queued futures: [n=2] TRUE, FALSE
[16:10:35.321]  - until=2
[16:10:35.321]  - relaying element #2
[16:10:35.322] - relayed: [n=2] TRUE, TRUE
[16:10:35.322] - queued futures: [n=2] TRUE, TRUE
[16:10:35.322] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[16:10:35.322]  length: 0 (resolved future 2)
[16:10:35.322] Relaying remaining futures
[16:10:35.322] signalConditionsASAP(NULL, pos=0) ...
[16:10:35.322] - nx: 2
[16:10:35.322] - relay: TRUE
[16:10:35.322] - stdout: TRUE
[16:10:35.323] - signal: TRUE
[16:10:35.323] - resignal: FALSE
[16:10:35.323] - force: TRUE
[16:10:35.323] - relayed: [n=2] TRUE, TRUE
[16:10:35.323] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:10:35.323] - relayed: [n=2] TRUE, TRUE
[16:10:35.323] - queued futures: [n=2] TRUE, TRUE
[16:10:35.323] signalConditionsASAP(NULL, pos=0) ... done
[16:10:35.323] resolve() on list ... DONE
[16:10:35.324]  - Number of value chunks collected: 2
[16:10:35.324] Resolving 2 futures (chunks) ... DONE
[16:10:35.324] Reducing values from 2 chunks ...
[16:10:35.324]  - Number of values collected after concatenation: 5
[16:10:35.324]  - Number of values expected: 5
[16:10:35.324] Reducing values from 2 chunks ... DONE
[16:10:35.324] future_lapply() ... DONE
[16:10:35.325] future_lapply() ...
[16:10:35.325] Generating random seeds ...
[16:10:35.325] Generating random seed streams for 5 elements ...
[16:10:35.326] Generating random seed streams for 5 elements ... DONE
[16:10:35.326] Generating random seeds ... DONE
[16:10:35.326] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:10:35.331] Number of chunks: 2
[16:10:35.331] getGlobalsAndPackagesXApply() ...
[16:10:35.331]  - future.globals: TRUE
[16:10:35.331] getGlobalsAndPackages() ...
[16:10:35.331] Searching for globals...
[16:10:35.333] - globals found: [2] ‘FUN’, ‘sample’
[16:10:35.333] Searching for globals ... DONE
[16:10:35.333] Resolving globals: FALSE
[16:10:35.334] The total size of the 1 globals is 616 bytes (616 bytes)
[16:10:35.334] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:10:35.335] - globals: [1] ‘FUN’
[16:10:35.335] 
[16:10:35.335] getGlobalsAndPackages() ... DONE
[16:10:35.335]  - globals found/used: [n=1] ‘FUN’
[16:10:35.335]  - needed namespaces: [n=0] 
[16:10:35.336] Finding globals ... DONE
[16:10:35.336]  - use_args: TRUE
[16:10:35.336]  - Getting '...' globals ...
[16:10:35.336] resolve() on list ...
[16:10:35.336]  recursive: 0
[16:10:35.337]  length: 1
[16:10:35.337]  elements: ‘...’
[16:10:35.337]  length: 0 (resolved future 1)
[16:10:35.337] resolve() on list ... DONE
[16:10:35.337]    - '...' content: [n=0] 
[16:10:35.337] List of 1
[16:10:35.337]  $ ...: list()
[16:10:35.337]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:35.337]  - attr(*, "where")=List of 1
[16:10:35.337]   ..$ ...:<environment: 0x55cf8e942970> 
[16:10:35.337]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:35.337]  - attr(*, "resolved")= logi TRUE
[16:10:35.337]  - attr(*, "total_size")= num NA
[16:10:35.343]  - Getting '...' globals ... DONE
[16:10:35.343] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:10:35.343] List of 2
[16:10:35.343]  $ ...future.FUN:function (...)  
[16:10:35.343]  $ ...          : list()
[16:10:35.343]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:35.343]  - attr(*, "where")=List of 2
[16:10:35.343]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:10:35.343]   ..$ ...          :<environment: 0x55cf8e942970> 
[16:10:35.343]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:35.343]  - attr(*, "resolved")= logi FALSE
[16:10:35.343]  - attr(*, "total_size")= num 616
[16:10:35.346] Packages to be attached in all futures: [n=0] 
[16:10:35.347] getGlobalsAndPackagesXApply() ... DONE
[16:10:35.347] Number of futures (= number of chunks): 2
[16:10:35.347] Launching 2 futures (chunks) ...
[16:10:35.347] Chunk #1 of 2 ...
[16:10:35.347]  - Finding globals in 'X' for chunk #1 ...
[16:10:35.347] getGlobalsAndPackages() ...
[16:10:35.347] Searching for globals...
[16:10:35.348] 
[16:10:35.348] Searching for globals ... DONE
[16:10:35.348] - globals: [0] <none>
[16:10:35.348] getGlobalsAndPackages() ... DONE
[16:10:35.348]    + additional globals found: [n=0] 
[16:10:35.348]    + additional namespaces needed: [n=0] 
[16:10:35.348]  - Finding globals in 'X' for chunk #1 ... DONE
[16:10:35.348]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:10:35.349]  - seeds: [2] <seeds>
[16:10:35.349] getGlobalsAndPackages() ...
[16:10:35.349] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:35.349] Resolving globals: FALSE
[16:10:35.349] Tweak future expression to call with '...' arguments ...
[16:10:35.349] {
[16:10:35.349]     do.call(function(...) {
[16:10:35.349]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.349]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:35.349]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.349]             on.exit(options(oopts), add = TRUE)
[16:10:35.349]         }
[16:10:35.349]         {
[16:10:35.349]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:35.349]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.349]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.349]                   envir = globalenv(), inherits = FALSE)
[16:10:35.349]                 ...future.FUN(...future.X_jj, ...)
[16:10:35.349]             })
[16:10:35.349]         }
[16:10:35.349]     }, args = future.call.arguments)
[16:10:35.349] }
[16:10:35.349] Tweak future expression to call with '...' arguments ... DONE
[16:10:35.350] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:35.350] 
[16:10:35.350] getGlobalsAndPackages() ... DONE
[16:10:35.350] run() for ‘Future’ ...
[16:10:35.350] - state: ‘created’
[16:10:35.351] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:10:35.354] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:35.354] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:10:35.354]   - Field: ‘label’
[16:10:35.354]   - Field: ‘local’
[16:10:35.355]   - Field: ‘owner’
[16:10:35.355]   - Field: ‘envir’
[16:10:35.355]   - Field: ‘workers’
[16:10:35.355]   - Field: ‘packages’
[16:10:35.355]   - Field: ‘gc’
[16:10:35.355]   - Field: ‘job’
[16:10:35.355]   - Field: ‘conditions’
[16:10:35.355]   - Field: ‘expr’
[16:10:35.355]   - Field: ‘uuid’
[16:10:35.355]   - Field: ‘seed’
[16:10:35.356]   - Field: ‘version’
[16:10:35.356]   - Field: ‘result’
[16:10:35.356]   - Field: ‘asynchronous’
[16:10:35.356]   - Field: ‘calls’
[16:10:35.356]   - Field: ‘globals’
[16:10:35.356]   - Field: ‘stdout’
[16:10:35.356]   - Field: ‘earlySignal’
[16:10:35.356]   - Field: ‘lazy’
[16:10:35.356]   - Field: ‘state’
[16:10:35.356] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:10:35.357] - Launch lazy future ...
[16:10:35.357] Packages needed by the future expression (n = 0): <none>
[16:10:35.357] Packages needed by future strategies (n = 0): <none>
[16:10:35.357] {
[16:10:35.357]     {
[16:10:35.357]         {
[16:10:35.357]             ...future.startTime <- base::Sys.time()
[16:10:35.357]             {
[16:10:35.357]                 {
[16:10:35.357]                   {
[16:10:35.357]                     {
[16:10:35.357]                       base::local({
[16:10:35.357]                         has_future <- base::requireNamespace("future", 
[16:10:35.357]                           quietly = TRUE)
[16:10:35.357]                         if (has_future) {
[16:10:35.357]                           ns <- base::getNamespace("future")
[16:10:35.357]                           version <- ns[[".package"]][["version"]]
[16:10:35.357]                           if (is.null(version)) 
[16:10:35.357]                             version <- utils::packageVersion("future")
[16:10:35.357]                         }
[16:10:35.357]                         else {
[16:10:35.357]                           version <- NULL
[16:10:35.357]                         }
[16:10:35.357]                         if (!has_future || version < "1.8.0") {
[16:10:35.357]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:35.357]                             "", base::R.version$version.string), 
[16:10:35.357]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:35.357]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:35.357]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:35.357]                               "release", "version")], collapse = " "), 
[16:10:35.357]                             hostname = base::Sys.info()[["nodename"]])
[16:10:35.357]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:35.357]                             info)
[16:10:35.357]                           info <- base::paste(info, collapse = "; ")
[16:10:35.357]                           if (!has_future) {
[16:10:35.357]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:35.357]                               info)
[16:10:35.357]                           }
[16:10:35.357]                           else {
[16:10:35.357]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:35.357]                               info, version)
[16:10:35.357]                           }
[16:10:35.357]                           base::stop(msg)
[16:10:35.357]                         }
[16:10:35.357]                       })
[16:10:35.357]                     }
[16:10:35.357]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:35.357]                     base::options(mc.cores = 1L)
[16:10:35.357]                   }
[16:10:35.357]                   options(future.plan = NULL)
[16:10:35.357]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:35.357]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:35.357]                 }
[16:10:35.357]                 ...future.workdir <- getwd()
[16:10:35.357]             }
[16:10:35.357]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:35.357]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:35.357]         }
[16:10:35.357]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:35.357]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:10:35.357]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:35.357]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:35.357]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:35.357]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:35.357]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:35.357]             base::names(...future.oldOptions))
[16:10:35.357]     }
[16:10:35.357]     if (FALSE) {
[16:10:35.357]     }
[16:10:35.357]     else {
[16:10:35.357]         if (TRUE) {
[16:10:35.357]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:35.357]                 open = "w")
[16:10:35.357]         }
[16:10:35.357]         else {
[16:10:35.357]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:35.357]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:35.357]         }
[16:10:35.357]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:35.357]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:35.357]             base::sink(type = "output", split = FALSE)
[16:10:35.357]             base::close(...future.stdout)
[16:10:35.357]         }, add = TRUE)
[16:10:35.357]     }
[16:10:35.357]     ...future.frame <- base::sys.nframe()
[16:10:35.357]     ...future.conditions <- base::list()
[16:10:35.357]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:35.357]     if (FALSE) {
[16:10:35.357]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:35.357]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:35.357]     }
[16:10:35.357]     ...future.result <- base::tryCatch({
[16:10:35.357]         base::withCallingHandlers({
[16:10:35.357]             ...future.value <- base::withVisible(base::local({
[16:10:35.357]                 withCallingHandlers({
[16:10:35.357]                   {
[16:10:35.357]                     do.call(function(...) {
[16:10:35.357]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.357]                       if (!identical(...future.globals.maxSize.org, 
[16:10:35.357]                         ...future.globals.maxSize)) {
[16:10:35.357]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.357]                         on.exit(options(oopts), add = TRUE)
[16:10:35.357]                       }
[16:10:35.357]                       {
[16:10:35.357]                         lapply(seq_along(...future.elements_ii), 
[16:10:35.357]                           FUN = function(jj) {
[16:10:35.357]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.357]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.357]                               envir = globalenv(), inherits = FALSE)
[16:10:35.357]                             ...future.FUN(...future.X_jj, ...)
[16:10:35.357]                           })
[16:10:35.357]                       }
[16:10:35.357]                     }, args = future.call.arguments)
[16:10:35.357]                   }
[16:10:35.357]                 }, immediateCondition = function(cond) {
[16:10:35.357]                   save_rds <- function (object, pathname, ...) 
[16:10:35.357]                   {
[16:10:35.357]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:10:35.357]                     if (file_test("-f", pathname_tmp)) {
[16:10:35.357]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.357]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:10:35.357]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.357]                         fi_tmp[["mtime"]])
[16:10:35.357]                     }
[16:10:35.357]                     tryCatch({
[16:10:35.357]                       saveRDS(object, file = pathname_tmp, ...)
[16:10:35.357]                     }, error = function(ex) {
[16:10:35.357]                       msg <- conditionMessage(ex)
[16:10:35.357]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.357]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:10:35.357]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.357]                         fi_tmp[["mtime"]], msg)
[16:10:35.357]                       ex$message <- msg
[16:10:35.357]                       stop(ex)
[16:10:35.357]                     })
[16:10:35.357]                     stopifnot(file_test("-f", pathname_tmp))
[16:10:35.357]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:10:35.357]                     if (!res || file_test("-f", pathname_tmp)) {
[16:10:35.357]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.357]                       fi <- file.info(pathname)
[16:10:35.357]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:10:35.357]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.357]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:10:35.357]                         fi[["size"]], fi[["mtime"]])
[16:10:35.357]                       stop(msg)
[16:10:35.357]                     }
[16:10:35.357]                     invisible(pathname)
[16:10:35.357]                   }
[16:10:35.357]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:10:35.357]                     rootPath = tempdir()) 
[16:10:35.357]                   {
[16:10:35.357]                     obj <- list(time = Sys.time(), condition = cond)
[16:10:35.357]                     file <- tempfile(pattern = class(cond)[1], 
[16:10:35.357]                       tmpdir = path, fileext = ".rds")
[16:10:35.357]                     save_rds(obj, file)
[16:10:35.357]                   }
[16:10:35.357]                   saveImmediateCondition(cond, path = "/tmp/RtmpLZUJI0/.future/immediateConditions")
[16:10:35.357]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.357]                   {
[16:10:35.357]                     inherits <- base::inherits
[16:10:35.357]                     invokeRestart <- base::invokeRestart
[16:10:35.357]                     is.null <- base::is.null
[16:10:35.357]                     muffled <- FALSE
[16:10:35.357]                     if (inherits(cond, "message")) {
[16:10:35.357]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:35.357]                       if (muffled) 
[16:10:35.357]                         invokeRestart("muffleMessage")
[16:10:35.357]                     }
[16:10:35.357]                     else if (inherits(cond, "warning")) {
[16:10:35.357]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:35.357]                       if (muffled) 
[16:10:35.357]                         invokeRestart("muffleWarning")
[16:10:35.357]                     }
[16:10:35.357]                     else if (inherits(cond, "condition")) {
[16:10:35.357]                       if (!is.null(pattern)) {
[16:10:35.357]                         computeRestarts <- base::computeRestarts
[16:10:35.357]                         grepl <- base::grepl
[16:10:35.357]                         restarts <- computeRestarts(cond)
[16:10:35.357]                         for (restart in restarts) {
[16:10:35.357]                           name <- restart$name
[16:10:35.357]                           if (is.null(name)) 
[16:10:35.357]                             next
[16:10:35.357]                           if (!grepl(pattern, name)) 
[16:10:35.357]                             next
[16:10:35.357]                           invokeRestart(restart)
[16:10:35.357]                           muffled <- TRUE
[16:10:35.357]                           break
[16:10:35.357]                         }
[16:10:35.357]                       }
[16:10:35.357]                     }
[16:10:35.357]                     invisible(muffled)
[16:10:35.357]                   }
[16:10:35.357]                   muffleCondition(cond)
[16:10:35.357]                 })
[16:10:35.357]             }))
[16:10:35.357]             future::FutureResult(value = ...future.value$value, 
[16:10:35.357]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:35.357]                   ...future.rng), globalenv = if (FALSE) 
[16:10:35.357]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:35.357]                     ...future.globalenv.names))
[16:10:35.357]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:35.357]         }, condition = base::local({
[16:10:35.357]             c <- base::c
[16:10:35.357]             inherits <- base::inherits
[16:10:35.357]             invokeRestart <- base::invokeRestart
[16:10:35.357]             length <- base::length
[16:10:35.357]             list <- base::list
[16:10:35.357]             seq.int <- base::seq.int
[16:10:35.357]             signalCondition <- base::signalCondition
[16:10:35.357]             sys.calls <- base::sys.calls
[16:10:35.357]             `[[` <- base::`[[`
[16:10:35.357]             `+` <- base::`+`
[16:10:35.357]             `<<-` <- base::`<<-`
[16:10:35.357]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:35.357]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:35.357]                   3L)]
[16:10:35.357]             }
[16:10:35.357]             function(cond) {
[16:10:35.357]                 is_error <- inherits(cond, "error")
[16:10:35.357]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:35.357]                   NULL)
[16:10:35.357]                 if (is_error) {
[16:10:35.357]                   sessionInformation <- function() {
[16:10:35.357]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:35.357]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:35.357]                       search = base::search(), system = base::Sys.info())
[16:10:35.357]                   }
[16:10:35.357]                   ...future.conditions[[length(...future.conditions) + 
[16:10:35.357]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:35.357]                     cond$call), session = sessionInformation(), 
[16:10:35.357]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:35.357]                   signalCondition(cond)
[16:10:35.357]                 }
[16:10:35.357]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:35.357]                 "immediateCondition"))) {
[16:10:35.357]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:35.357]                   ...future.conditions[[length(...future.conditions) + 
[16:10:35.357]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:35.357]                   if (TRUE && !signal) {
[16:10:35.357]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.357]                     {
[16:10:35.357]                       inherits <- base::inherits
[16:10:35.357]                       invokeRestart <- base::invokeRestart
[16:10:35.357]                       is.null <- base::is.null
[16:10:35.357]                       muffled <- FALSE
[16:10:35.357]                       if (inherits(cond, "message")) {
[16:10:35.357]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:35.357]                         if (muffled) 
[16:10:35.357]                           invokeRestart("muffleMessage")
[16:10:35.357]                       }
[16:10:35.357]                       else if (inherits(cond, "warning")) {
[16:10:35.357]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:35.357]                         if (muffled) 
[16:10:35.357]                           invokeRestart("muffleWarning")
[16:10:35.357]                       }
[16:10:35.357]                       else if (inherits(cond, "condition")) {
[16:10:35.357]                         if (!is.null(pattern)) {
[16:10:35.357]                           computeRestarts <- base::computeRestarts
[16:10:35.357]                           grepl <- base::grepl
[16:10:35.357]                           restarts <- computeRestarts(cond)
[16:10:35.357]                           for (restart in restarts) {
[16:10:35.357]                             name <- restart$name
[16:10:35.357]                             if (is.null(name)) 
[16:10:35.357]                               next
[16:10:35.357]                             if (!grepl(pattern, name)) 
[16:10:35.357]                               next
[16:10:35.357]                             invokeRestart(restart)
[16:10:35.357]                             muffled <- TRUE
[16:10:35.357]                             break
[16:10:35.357]                           }
[16:10:35.357]                         }
[16:10:35.357]                       }
[16:10:35.357]                       invisible(muffled)
[16:10:35.357]                     }
[16:10:35.357]                     muffleCondition(cond, pattern = "^muffle")
[16:10:35.357]                   }
[16:10:35.357]                 }
[16:10:35.357]                 else {
[16:10:35.357]                   if (TRUE) {
[16:10:35.357]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.357]                     {
[16:10:35.357]                       inherits <- base::inherits
[16:10:35.357]                       invokeRestart <- base::invokeRestart
[16:10:35.357]                       is.null <- base::is.null
[16:10:35.357]                       muffled <- FALSE
[16:10:35.357]                       if (inherits(cond, "message")) {
[16:10:35.357]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:35.357]                         if (muffled) 
[16:10:35.357]                           invokeRestart("muffleMessage")
[16:10:35.357]                       }
[16:10:35.357]                       else if (inherits(cond, "warning")) {
[16:10:35.357]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:35.357]                         if (muffled) 
[16:10:35.357]                           invokeRestart("muffleWarning")
[16:10:35.357]                       }
[16:10:35.357]                       else if (inherits(cond, "condition")) {
[16:10:35.357]                         if (!is.null(pattern)) {
[16:10:35.357]                           computeRestarts <- base::computeRestarts
[16:10:35.357]                           grepl <- base::grepl
[16:10:35.357]                           restarts <- computeRestarts(cond)
[16:10:35.357]                           for (restart in restarts) {
[16:10:35.357]                             name <- restart$name
[16:10:35.357]                             if (is.null(name)) 
[16:10:35.357]                               next
[16:10:35.357]                             if (!grepl(pattern, name)) 
[16:10:35.357]                               next
[16:10:35.357]                             invokeRestart(restart)
[16:10:35.357]                             muffled <- TRUE
[16:10:35.357]                             break
[16:10:35.357]                           }
[16:10:35.357]                         }
[16:10:35.357]                       }
[16:10:35.357]                       invisible(muffled)
[16:10:35.357]                     }
[16:10:35.357]                     muffleCondition(cond, pattern = "^muffle")
[16:10:35.357]                   }
[16:10:35.357]                 }
[16:10:35.357]             }
[16:10:35.357]         }))
[16:10:35.357]     }, error = function(ex) {
[16:10:35.357]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:35.357]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:35.357]                 ...future.rng), started = ...future.startTime, 
[16:10:35.357]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:35.357]             version = "1.8"), class = "FutureResult")
[16:10:35.357]     }, finally = {
[16:10:35.357]         if (!identical(...future.workdir, getwd())) 
[16:10:35.357]             setwd(...future.workdir)
[16:10:35.357]         {
[16:10:35.357]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:35.357]                 ...future.oldOptions$nwarnings <- NULL
[16:10:35.357]             }
[16:10:35.357]             base::options(...future.oldOptions)
[16:10:35.357]             if (.Platform$OS.type == "windows") {
[16:10:35.357]                 old_names <- names(...future.oldEnvVars)
[16:10:35.357]                 envs <- base::Sys.getenv()
[16:10:35.357]                 names <- names(envs)
[16:10:35.357]                 common <- intersect(names, old_names)
[16:10:35.357]                 added <- setdiff(names, old_names)
[16:10:35.357]                 removed <- setdiff(old_names, names)
[16:10:35.357]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:35.357]                   envs[common]]
[16:10:35.357]                 NAMES <- toupper(changed)
[16:10:35.357]                 args <- list()
[16:10:35.357]                 for (kk in seq_along(NAMES)) {
[16:10:35.357]                   name <- changed[[kk]]
[16:10:35.357]                   NAME <- NAMES[[kk]]
[16:10:35.357]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.357]                     next
[16:10:35.357]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:35.357]                 }
[16:10:35.357]                 NAMES <- toupper(added)
[16:10:35.357]                 for (kk in seq_along(NAMES)) {
[16:10:35.357]                   name <- added[[kk]]
[16:10:35.357]                   NAME <- NAMES[[kk]]
[16:10:35.357]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.357]                     next
[16:10:35.357]                   args[[name]] <- ""
[16:10:35.357]                 }
[16:10:35.357]                 NAMES <- toupper(removed)
[16:10:35.357]                 for (kk in seq_along(NAMES)) {
[16:10:35.357]                   name <- removed[[kk]]
[16:10:35.357]                   NAME <- NAMES[[kk]]
[16:10:35.357]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.357]                     next
[16:10:35.357]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:35.357]                 }
[16:10:35.357]                 if (length(args) > 0) 
[16:10:35.357]                   base::do.call(base::Sys.setenv, args = args)
[16:10:35.357]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:35.357]             }
[16:10:35.357]             else {
[16:10:35.357]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:35.357]             }
[16:10:35.357]             {
[16:10:35.357]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:35.357]                   0L) {
[16:10:35.357]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:35.357]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:35.357]                   base::options(opts)
[16:10:35.357]                 }
[16:10:35.357]                 {
[16:10:35.357]                   {
[16:10:35.357]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:35.357]                     NULL
[16:10:35.357]                   }
[16:10:35.357]                   options(future.plan = NULL)
[16:10:35.357]                   if (is.na(NA_character_)) 
[16:10:35.357]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:35.357]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:35.357]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:10:35.357]                     envir = parent.frame()) 
[16:10:35.357]                   {
[16:10:35.357]                     default_workers <- missing(workers)
[16:10:35.357]                     if (is.function(workers)) 
[16:10:35.357]                       workers <- workers()
[16:10:35.357]                     workers <- structure(as.integer(workers), 
[16:10:35.357]                       class = class(workers))
[16:10:35.357]                     stop_if_not(is.finite(workers), workers >= 
[16:10:35.357]                       1L)
[16:10:35.357]                     if ((workers == 1L && !inherits(workers, 
[16:10:35.357]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:10:35.357]                       if (default_workers) 
[16:10:35.357]                         supportsMulticore(warn = TRUE)
[16:10:35.357]                       return(sequential(..., envir = envir))
[16:10:35.357]                     }
[16:10:35.357]                     oopts <- options(mc.cores = workers)
[16:10:35.357]                     on.exit(options(oopts))
[16:10:35.357]                     future <- MulticoreFuture(..., workers = workers, 
[16:10:35.357]                       envir = envir)
[16:10:35.357]                     if (!future$lazy) 
[16:10:35.357]                       future <- run(future)
[16:10:35.357]                     invisible(future)
[16:10:35.357]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:35.357]                 }
[16:10:35.357]             }
[16:10:35.357]         }
[16:10:35.357]     })
[16:10:35.357]     if (TRUE) {
[16:10:35.357]         base::sink(type = "output", split = FALSE)
[16:10:35.357]         if (TRUE) {
[16:10:35.357]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:35.357]         }
[16:10:35.357]         else {
[16:10:35.357]             ...future.result["stdout"] <- base::list(NULL)
[16:10:35.357]         }
[16:10:35.357]         base::close(...future.stdout)
[16:10:35.357]         ...future.stdout <- NULL
[16:10:35.357]     }
[16:10:35.357]     ...future.result$conditions <- ...future.conditions
[16:10:35.357]     ...future.result$finished <- base::Sys.time()
[16:10:35.357]     ...future.result
[16:10:35.357] }
[16:10:35.360] assign_globals() ...
[16:10:35.360] List of 5
[16:10:35.360]  $ ...future.FUN            :function (...)  
[16:10:35.360]  $ future.call.arguments    : list()
[16:10:35.360]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:35.360]  $ ...future.elements_ii    :List of 2
[16:10:35.360]   ..$ : int 0
[16:10:35.360]   ..$ : int 0
[16:10:35.360]  $ ...future.seeds_ii       :List of 2
[16:10:35.360]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[16:10:35.360]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[16:10:35.360]  $ ...future.globals.maxSize: NULL
[16:10:35.360]  - attr(*, "resolved")= logi FALSE
[16:10:35.360]  - attr(*, "total_size")= num 616
[16:10:35.360]  - attr(*, "where")=List of 5
[16:10:35.360]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:10:35.360]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:10:35.360]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:10:35.360]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:10:35.360]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:10:35.360]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:35.360]  - attr(*, "already-done")= logi TRUE
[16:10:35.366] - reassign environment for ‘...future.FUN’
[16:10:35.366] - copied ‘...future.FUN’ to environment
[16:10:35.366] - copied ‘future.call.arguments’ to environment
[16:10:35.366] - copied ‘...future.elements_ii’ to environment
[16:10:35.366] - copied ‘...future.seeds_ii’ to environment
[16:10:35.366] - copied ‘...future.globals.maxSize’ to environment
[16:10:35.366] assign_globals() ... done
[16:10:35.366] requestCore(): workers = 2
[16:10:35.368] MulticoreFuture started
[16:10:35.369] - Launch lazy future ... done
[16:10:35.369] run() for ‘MulticoreFuture’ ... done
[16:10:35.369] Created future:
[16:10:35.370] plan(): Setting new future strategy stack:
[16:10:35.370] List of future strategies:
[16:10:35.370] 1. sequential:
[16:10:35.370]    - args: function (..., envir = parent.frame())
[16:10:35.370]    - tweaked: FALSE
[16:10:35.370]    - call: NULL
[16:10:35.371] plan(): nbrOfWorkers() = 1
[16:10:35.376] plan(): Setting new future strategy stack:
[16:10:35.376] List of future strategies:
[16:10:35.376] 1. multicore:
[16:10:35.376]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:10:35.376]    - tweaked: FALSE
[16:10:35.376]    - call: plan(strategy)
[16:10:35.383] plan(): nbrOfWorkers() = 2
[16:10:35.369] MulticoreFuture:
[16:10:35.369] Label: ‘future_replicate-1’
[16:10:35.369] Expression:
[16:10:35.369] {
[16:10:35.369]     do.call(function(...) {
[16:10:35.369]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.369]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:35.369]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.369]             on.exit(options(oopts), add = TRUE)
[16:10:35.369]         }
[16:10:35.369]         {
[16:10:35.369]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:35.369]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.369]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.369]                   envir = globalenv(), inherits = FALSE)
[16:10:35.369]                 ...future.FUN(...future.X_jj, ...)
[16:10:35.369]             })
[16:10:35.369]         }
[16:10:35.369]     }, args = future.call.arguments)
[16:10:35.369] }
[16:10:35.369] Lazy evaluation: FALSE
[16:10:35.369] Asynchronous evaluation: TRUE
[16:10:35.369] Local evaluation: TRUE
[16:10:35.369] Environment: R_GlobalEnv
[16:10:35.369] Capture standard output: TRUE
[16:10:35.369] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:35.369] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:35.369] Packages: <none>
[16:10:35.369] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:35.369] Resolved: TRUE
[16:10:35.369] Value: <not collected>
[16:10:35.369] Conditions captured: <none>
[16:10:35.369] Early signaling: FALSE
[16:10:35.369] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:35.369] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:35.384] Chunk #1 of 2 ... DONE
[16:10:35.384] Chunk #2 of 2 ...
[16:10:35.385]  - Finding globals in 'X' for chunk #2 ...
[16:10:35.385] getGlobalsAndPackages() ...
[16:10:35.385] Searching for globals...
[16:10:35.386] 
[16:10:35.386] Searching for globals ... DONE
[16:10:35.386] - globals: [0] <none>
[16:10:35.386] getGlobalsAndPackages() ... DONE
[16:10:35.386]    + additional globals found: [n=0] 
[16:10:35.386]    + additional namespaces needed: [n=0] 
[16:10:35.387]  - Finding globals in 'X' for chunk #2 ... DONE
[16:10:35.387]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[16:10:35.387]  - seeds: [3] <seeds>
[16:10:35.387] getGlobalsAndPackages() ...
[16:10:35.388] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:35.388] Resolving globals: FALSE
[16:10:35.388] Tweak future expression to call with '...' arguments ...
[16:10:35.388] {
[16:10:35.388]     do.call(function(...) {
[16:10:35.388]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.388]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:35.388]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.388]             on.exit(options(oopts), add = TRUE)
[16:10:35.388]         }
[16:10:35.388]         {
[16:10:35.388]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:35.388]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.388]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.388]                   envir = globalenv(), inherits = FALSE)
[16:10:35.388]                 ...future.FUN(...future.X_jj, ...)
[16:10:35.388]             })
[16:10:35.388]         }
[16:10:35.388]     }, args = future.call.arguments)
[16:10:35.388] }
[16:10:35.389] Tweak future expression to call with '...' arguments ... DONE
[16:10:35.389] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:35.389] 
[16:10:35.390] getGlobalsAndPackages() ... DONE
[16:10:35.390] run() for ‘Future’ ...
[16:10:35.391] - state: ‘created’
[16:10:35.391] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:10:35.395] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:35.395] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:10:35.395]   - Field: ‘label’
[16:10:35.396]   - Field: ‘local’
[16:10:35.396]   - Field: ‘owner’
[16:10:35.396]   - Field: ‘envir’
[16:10:35.396]   - Field: ‘workers’
[16:10:35.396]   - Field: ‘packages’
[16:10:35.396]   - Field: ‘gc’
[16:10:35.397]   - Field: ‘job’
[16:10:35.397]   - Field: ‘conditions’
[16:10:35.397]   - Field: ‘expr’
[16:10:35.397]   - Field: ‘uuid’
[16:10:35.397]   - Field: ‘seed’
[16:10:35.397]   - Field: ‘version’
[16:10:35.397]   - Field: ‘result’
[16:10:35.398]   - Field: ‘asynchronous’
[16:10:35.398]   - Field: ‘calls’
[16:10:35.398]   - Field: ‘globals’
[16:10:35.398]   - Field: ‘stdout’
[16:10:35.398]   - Field: ‘earlySignal’
[16:10:35.398]   - Field: ‘lazy’
[16:10:35.398]   - Field: ‘state’
[16:10:35.399] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:10:35.399] - Launch lazy future ...
[16:10:35.399] Packages needed by the future expression (n = 0): <none>
[16:10:35.399] Packages needed by future strategies (n = 0): <none>
[16:10:35.400] {
[16:10:35.400]     {
[16:10:35.400]         {
[16:10:35.400]             ...future.startTime <- base::Sys.time()
[16:10:35.400]             {
[16:10:35.400]                 {
[16:10:35.400]                   {
[16:10:35.400]                     {
[16:10:35.400]                       base::local({
[16:10:35.400]                         has_future <- base::requireNamespace("future", 
[16:10:35.400]                           quietly = TRUE)
[16:10:35.400]                         if (has_future) {
[16:10:35.400]                           ns <- base::getNamespace("future")
[16:10:35.400]                           version <- ns[[".package"]][["version"]]
[16:10:35.400]                           if (is.null(version)) 
[16:10:35.400]                             version <- utils::packageVersion("future")
[16:10:35.400]                         }
[16:10:35.400]                         else {
[16:10:35.400]                           version <- NULL
[16:10:35.400]                         }
[16:10:35.400]                         if (!has_future || version < "1.8.0") {
[16:10:35.400]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:35.400]                             "", base::R.version$version.string), 
[16:10:35.400]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:35.400]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:35.400]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:35.400]                               "release", "version")], collapse = " "), 
[16:10:35.400]                             hostname = base::Sys.info()[["nodename"]])
[16:10:35.400]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:35.400]                             info)
[16:10:35.400]                           info <- base::paste(info, collapse = "; ")
[16:10:35.400]                           if (!has_future) {
[16:10:35.400]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:35.400]                               info)
[16:10:35.400]                           }
[16:10:35.400]                           else {
[16:10:35.400]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:35.400]                               info, version)
[16:10:35.400]                           }
[16:10:35.400]                           base::stop(msg)
[16:10:35.400]                         }
[16:10:35.400]                       })
[16:10:35.400]                     }
[16:10:35.400]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:35.400]                     base::options(mc.cores = 1L)
[16:10:35.400]                   }
[16:10:35.400]                   options(future.plan = NULL)
[16:10:35.400]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:35.400]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:35.400]                 }
[16:10:35.400]                 ...future.workdir <- getwd()
[16:10:35.400]             }
[16:10:35.400]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:35.400]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:35.400]         }
[16:10:35.400]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:35.400]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[16:10:35.400]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:35.400]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:35.400]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:35.400]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:35.400]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:35.400]             base::names(...future.oldOptions))
[16:10:35.400]     }
[16:10:35.400]     if (FALSE) {
[16:10:35.400]     }
[16:10:35.400]     else {
[16:10:35.400]         if (TRUE) {
[16:10:35.400]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:35.400]                 open = "w")
[16:10:35.400]         }
[16:10:35.400]         else {
[16:10:35.400]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:35.400]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:35.400]         }
[16:10:35.400]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:35.400]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:35.400]             base::sink(type = "output", split = FALSE)
[16:10:35.400]             base::close(...future.stdout)
[16:10:35.400]         }, add = TRUE)
[16:10:35.400]     }
[16:10:35.400]     ...future.frame <- base::sys.nframe()
[16:10:35.400]     ...future.conditions <- base::list()
[16:10:35.400]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:35.400]     if (FALSE) {
[16:10:35.400]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:35.400]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:35.400]     }
[16:10:35.400]     ...future.result <- base::tryCatch({
[16:10:35.400]         base::withCallingHandlers({
[16:10:35.400]             ...future.value <- base::withVisible(base::local({
[16:10:35.400]                 withCallingHandlers({
[16:10:35.400]                   {
[16:10:35.400]                     do.call(function(...) {
[16:10:35.400]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.400]                       if (!identical(...future.globals.maxSize.org, 
[16:10:35.400]                         ...future.globals.maxSize)) {
[16:10:35.400]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.400]                         on.exit(options(oopts), add = TRUE)
[16:10:35.400]                       }
[16:10:35.400]                       {
[16:10:35.400]                         lapply(seq_along(...future.elements_ii), 
[16:10:35.400]                           FUN = function(jj) {
[16:10:35.400]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.400]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.400]                               envir = globalenv(), inherits = FALSE)
[16:10:35.400]                             ...future.FUN(...future.X_jj, ...)
[16:10:35.400]                           })
[16:10:35.400]                       }
[16:10:35.400]                     }, args = future.call.arguments)
[16:10:35.400]                   }
[16:10:35.400]                 }, immediateCondition = function(cond) {
[16:10:35.400]                   save_rds <- function (object, pathname, ...) 
[16:10:35.400]                   {
[16:10:35.400]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:10:35.400]                     if (file_test("-f", pathname_tmp)) {
[16:10:35.400]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.400]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:10:35.400]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.400]                         fi_tmp[["mtime"]])
[16:10:35.400]                     }
[16:10:35.400]                     tryCatch({
[16:10:35.400]                       saveRDS(object, file = pathname_tmp, ...)
[16:10:35.400]                     }, error = function(ex) {
[16:10:35.400]                       msg <- conditionMessage(ex)
[16:10:35.400]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.400]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:10:35.400]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.400]                         fi_tmp[["mtime"]], msg)
[16:10:35.400]                       ex$message <- msg
[16:10:35.400]                       stop(ex)
[16:10:35.400]                     })
[16:10:35.400]                     stopifnot(file_test("-f", pathname_tmp))
[16:10:35.400]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:10:35.400]                     if (!res || file_test("-f", pathname_tmp)) {
[16:10:35.400]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.400]                       fi <- file.info(pathname)
[16:10:35.400]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:10:35.400]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.400]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:10:35.400]                         fi[["size"]], fi[["mtime"]])
[16:10:35.400]                       stop(msg)
[16:10:35.400]                     }
[16:10:35.400]                     invisible(pathname)
[16:10:35.400]                   }
[16:10:35.400]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:10:35.400]                     rootPath = tempdir()) 
[16:10:35.400]                   {
[16:10:35.400]                     obj <- list(time = Sys.time(), condition = cond)
[16:10:35.400]                     file <- tempfile(pattern = class(cond)[1], 
[16:10:35.400]                       tmpdir = path, fileext = ".rds")
[16:10:35.400]                     save_rds(obj, file)
[16:10:35.400]                   }
[16:10:35.400]                   saveImmediateCondition(cond, path = "/tmp/RtmpLZUJI0/.future/immediateConditions")
[16:10:35.400]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.400]                   {
[16:10:35.400]                     inherits <- base::inherits
[16:10:35.400]                     invokeRestart <- base::invokeRestart
[16:10:35.400]                     is.null <- base::is.null
[16:10:35.400]                     muffled <- FALSE
[16:10:35.400]                     if (inherits(cond, "message")) {
[16:10:35.400]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:35.400]                       if (muffled) 
[16:10:35.400]                         invokeRestart("muffleMessage")
[16:10:35.400]                     }
[16:10:35.400]                     else if (inherits(cond, "warning")) {
[16:10:35.400]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:35.400]                       if (muffled) 
[16:10:35.400]                         invokeRestart("muffleWarning")
[16:10:35.400]                     }
[16:10:35.400]                     else if (inherits(cond, "condition")) {
[16:10:35.400]                       if (!is.null(pattern)) {
[16:10:35.400]                         computeRestarts <- base::computeRestarts
[16:10:35.400]                         grepl <- base::grepl
[16:10:35.400]                         restarts <- computeRestarts(cond)
[16:10:35.400]                         for (restart in restarts) {
[16:10:35.400]                           name <- restart$name
[16:10:35.400]                           if (is.null(name)) 
[16:10:35.400]                             next
[16:10:35.400]                           if (!grepl(pattern, name)) 
[16:10:35.400]                             next
[16:10:35.400]                           invokeRestart(restart)
[16:10:35.400]                           muffled <- TRUE
[16:10:35.400]                           break
[16:10:35.400]                         }
[16:10:35.400]                       }
[16:10:35.400]                     }
[16:10:35.400]                     invisible(muffled)
[16:10:35.400]                   }
[16:10:35.400]                   muffleCondition(cond)
[16:10:35.400]                 })
[16:10:35.400]             }))
[16:10:35.400]             future::FutureResult(value = ...future.value$value, 
[16:10:35.400]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:35.400]                   ...future.rng), globalenv = if (FALSE) 
[16:10:35.400]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:35.400]                     ...future.globalenv.names))
[16:10:35.400]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:35.400]         }, condition = base::local({
[16:10:35.400]             c <- base::c
[16:10:35.400]             inherits <- base::inherits
[16:10:35.400]             invokeRestart <- base::invokeRestart
[16:10:35.400]             length <- base::length
[16:10:35.400]             list <- base::list
[16:10:35.400]             seq.int <- base::seq.int
[16:10:35.400]             signalCondition <- base::signalCondition
[16:10:35.400]             sys.calls <- base::sys.calls
[16:10:35.400]             `[[` <- base::`[[`
[16:10:35.400]             `+` <- base::`+`
[16:10:35.400]             `<<-` <- base::`<<-`
[16:10:35.400]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:35.400]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:35.400]                   3L)]
[16:10:35.400]             }
[16:10:35.400]             function(cond) {
[16:10:35.400]                 is_error <- inherits(cond, "error")
[16:10:35.400]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:35.400]                   NULL)
[16:10:35.400]                 if (is_error) {
[16:10:35.400]                   sessionInformation <- function() {
[16:10:35.400]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:35.400]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:35.400]                       search = base::search(), system = base::Sys.info())
[16:10:35.400]                   }
[16:10:35.400]                   ...future.conditions[[length(...future.conditions) + 
[16:10:35.400]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:35.400]                     cond$call), session = sessionInformation(), 
[16:10:35.400]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:35.400]                   signalCondition(cond)
[16:10:35.400]                 }
[16:10:35.400]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:35.400]                 "immediateCondition"))) {
[16:10:35.400]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:35.400]                   ...future.conditions[[length(...future.conditions) + 
[16:10:35.400]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:35.400]                   if (TRUE && !signal) {
[16:10:35.400]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.400]                     {
[16:10:35.400]                       inherits <- base::inherits
[16:10:35.400]                       invokeRestart <- base::invokeRestart
[16:10:35.400]                       is.null <- base::is.null
[16:10:35.400]                       muffled <- FALSE
[16:10:35.400]                       if (inherits(cond, "message")) {
[16:10:35.400]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:35.400]                         if (muffled) 
[16:10:35.400]                           invokeRestart("muffleMessage")
[16:10:35.400]                       }
[16:10:35.400]                       else if (inherits(cond, "warning")) {
[16:10:35.400]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:35.400]                         if (muffled) 
[16:10:35.400]                           invokeRestart("muffleWarning")
[16:10:35.400]                       }
[16:10:35.400]                       else if (inherits(cond, "condition")) {
[16:10:35.400]                         if (!is.null(pattern)) {
[16:10:35.400]                           computeRestarts <- base::computeRestarts
[16:10:35.400]                           grepl <- base::grepl
[16:10:35.400]                           restarts <- computeRestarts(cond)
[16:10:35.400]                           for (restart in restarts) {
[16:10:35.400]                             name <- restart$name
[16:10:35.400]                             if (is.null(name)) 
[16:10:35.400]                               next
[16:10:35.400]                             if (!grepl(pattern, name)) 
[16:10:35.400]                               next
[16:10:35.400]                             invokeRestart(restart)
[16:10:35.400]                             muffled <- TRUE
[16:10:35.400]                             break
[16:10:35.400]                           }
[16:10:35.400]                         }
[16:10:35.400]                       }
[16:10:35.400]                       invisible(muffled)
[16:10:35.400]                     }
[16:10:35.400]                     muffleCondition(cond, pattern = "^muffle")
[16:10:35.400]                   }
[16:10:35.400]                 }
[16:10:35.400]                 else {
[16:10:35.400]                   if (TRUE) {
[16:10:35.400]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.400]                     {
[16:10:35.400]                       inherits <- base::inherits
[16:10:35.400]                       invokeRestart <- base::invokeRestart
[16:10:35.400]                       is.null <- base::is.null
[16:10:35.400]                       muffled <- FALSE
[16:10:35.400]                       if (inherits(cond, "message")) {
[16:10:35.400]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:35.400]                         if (muffled) 
[16:10:35.400]                           invokeRestart("muffleMessage")
[16:10:35.400]                       }
[16:10:35.400]                       else if (inherits(cond, "warning")) {
[16:10:35.400]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:35.400]                         if (muffled) 
[16:10:35.400]                           invokeRestart("muffleWarning")
[16:10:35.400]                       }
[16:10:35.400]                       else if (inherits(cond, "condition")) {
[16:10:35.400]                         if (!is.null(pattern)) {
[16:10:35.400]                           computeRestarts <- base::computeRestarts
[16:10:35.400]                           grepl <- base::grepl
[16:10:35.400]                           restarts <- computeRestarts(cond)
[16:10:35.400]                           for (restart in restarts) {
[16:10:35.400]                             name <- restart$name
[16:10:35.400]                             if (is.null(name)) 
[16:10:35.400]                               next
[16:10:35.400]                             if (!grepl(pattern, name)) 
[16:10:35.400]                               next
[16:10:35.400]                             invokeRestart(restart)
[16:10:35.400]                             muffled <- TRUE
[16:10:35.400]                             break
[16:10:35.400]                           }
[16:10:35.400]                         }
[16:10:35.400]                       }
[16:10:35.400]                       invisible(muffled)
[16:10:35.400]                     }
[16:10:35.400]                     muffleCondition(cond, pattern = "^muffle")
[16:10:35.400]                   }
[16:10:35.400]                 }
[16:10:35.400]             }
[16:10:35.400]         }))
[16:10:35.400]     }, error = function(ex) {
[16:10:35.400]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:35.400]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:35.400]                 ...future.rng), started = ...future.startTime, 
[16:10:35.400]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:35.400]             version = "1.8"), class = "FutureResult")
[16:10:35.400]     }, finally = {
[16:10:35.400]         if (!identical(...future.workdir, getwd())) 
[16:10:35.400]             setwd(...future.workdir)
[16:10:35.400]         {
[16:10:35.400]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:35.400]                 ...future.oldOptions$nwarnings <- NULL
[16:10:35.400]             }
[16:10:35.400]             base::options(...future.oldOptions)
[16:10:35.400]             if (.Platform$OS.type == "windows") {
[16:10:35.400]                 old_names <- names(...future.oldEnvVars)
[16:10:35.400]                 envs <- base::Sys.getenv()
[16:10:35.400]                 names <- names(envs)
[16:10:35.400]                 common <- intersect(names, old_names)
[16:10:35.400]                 added <- setdiff(names, old_names)
[16:10:35.400]                 removed <- setdiff(old_names, names)
[16:10:35.400]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:35.400]                   envs[common]]
[16:10:35.400]                 NAMES <- toupper(changed)
[16:10:35.400]                 args <- list()
[16:10:35.400]                 for (kk in seq_along(NAMES)) {
[16:10:35.400]                   name <- changed[[kk]]
[16:10:35.400]                   NAME <- NAMES[[kk]]
[16:10:35.400]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.400]                     next
[16:10:35.400]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:35.400]                 }
[16:10:35.400]                 NAMES <- toupper(added)
[16:10:35.400]                 for (kk in seq_along(NAMES)) {
[16:10:35.400]                   name <- added[[kk]]
[16:10:35.400]                   NAME <- NAMES[[kk]]
[16:10:35.400]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.400]                     next
[16:10:35.400]                   args[[name]] <- ""
[16:10:35.400]                 }
[16:10:35.400]                 NAMES <- toupper(removed)
[16:10:35.400]                 for (kk in seq_along(NAMES)) {
[16:10:35.400]                   name <- removed[[kk]]
[16:10:35.400]                   NAME <- NAMES[[kk]]
[16:10:35.400]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.400]                     next
[16:10:35.400]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:35.400]                 }
[16:10:35.400]                 if (length(args) > 0) 
[16:10:35.400]                   base::do.call(base::Sys.setenv, args = args)
[16:10:35.400]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:35.400]             }
[16:10:35.400]             else {
[16:10:35.400]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:35.400]             }
[16:10:35.400]             {
[16:10:35.400]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:35.400]                   0L) {
[16:10:35.400]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:35.400]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:35.400]                   base::options(opts)
[16:10:35.400]                 }
[16:10:35.400]                 {
[16:10:35.400]                   {
[16:10:35.400]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:35.400]                     NULL
[16:10:35.400]                   }
[16:10:35.400]                   options(future.plan = NULL)
[16:10:35.400]                   if (is.na(NA_character_)) 
[16:10:35.400]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:35.400]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:35.400]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:10:35.400]                     envir = parent.frame()) 
[16:10:35.400]                   {
[16:10:35.400]                     default_workers <- missing(workers)
[16:10:35.400]                     if (is.function(workers)) 
[16:10:35.400]                       workers <- workers()
[16:10:35.400]                     workers <- structure(as.integer(workers), 
[16:10:35.400]                       class = class(workers))
[16:10:35.400]                     stop_if_not(is.finite(workers), workers >= 
[16:10:35.400]                       1L)
[16:10:35.400]                     if ((workers == 1L && !inherits(workers, 
[16:10:35.400]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:10:35.400]                       if (default_workers) 
[16:10:35.400]                         supportsMulticore(warn = TRUE)
[16:10:35.400]                       return(sequential(..., envir = envir))
[16:10:35.400]                     }
[16:10:35.400]                     oopts <- options(mc.cores = workers)
[16:10:35.400]                     on.exit(options(oopts))
[16:10:35.400]                     future <- MulticoreFuture(..., workers = workers, 
[16:10:35.400]                       envir = envir)
[16:10:35.400]                     if (!future$lazy) 
[16:10:35.400]                       future <- run(future)
[16:10:35.400]                     invisible(future)
[16:10:35.400]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:35.400]                 }
[16:10:35.400]             }
[16:10:35.400]         }
[16:10:35.400]     })
[16:10:35.400]     if (TRUE) {
[16:10:35.400]         base::sink(type = "output", split = FALSE)
[16:10:35.400]         if (TRUE) {
[16:10:35.400]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:35.400]         }
[16:10:35.400]         else {
[16:10:35.400]             ...future.result["stdout"] <- base::list(NULL)
[16:10:35.400]         }
[16:10:35.400]         base::close(...future.stdout)
[16:10:35.400]         ...future.stdout <- NULL
[16:10:35.400]     }
[16:10:35.400]     ...future.result$conditions <- ...future.conditions
[16:10:35.400]     ...future.result$finished <- base::Sys.time()
[16:10:35.400]     ...future.result
[16:10:35.400] }
[16:10:35.403] assign_globals() ...
[16:10:35.403] List of 5
[16:10:35.403]  $ ...future.FUN            :function (...)  
[16:10:35.403]  $ future.call.arguments    : list()
[16:10:35.403]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:35.403]  $ ...future.elements_ii    :List of 3
[16:10:35.403]   ..$ : int 0
[16:10:35.403]   ..$ : int 0
[16:10:35.403]   ..$ : int 0
[16:10:35.403]  $ ...future.seeds_ii       :List of 3
[16:10:35.403]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[16:10:35.403]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[16:10:35.403]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[16:10:35.403]  $ ...future.globals.maxSize: NULL
[16:10:35.403]  - attr(*, "resolved")= logi FALSE
[16:10:35.403]  - attr(*, "total_size")= num 616
[16:10:35.403]  - attr(*, "where")=List of 5
[16:10:35.403]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:10:35.403]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:10:35.403]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:10:35.403]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:10:35.403]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:10:35.403]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:35.403]  - attr(*, "already-done")= logi TRUE
[16:10:35.411] - reassign environment for ‘...future.FUN’
[16:10:35.411] - copied ‘...future.FUN’ to environment
[16:10:35.411] - copied ‘future.call.arguments’ to environment
[16:10:35.411] - copied ‘...future.elements_ii’ to environment
[16:10:35.412] - copied ‘...future.seeds_ii’ to environment
[16:10:35.412] - copied ‘...future.globals.maxSize’ to environment
[16:10:35.412] assign_globals() ... done
[16:10:35.412] requestCore(): workers = 2
[16:10:35.414] MulticoreFuture started
[16:10:35.414] - Launch lazy future ... done
[16:10:35.415] run() for ‘MulticoreFuture’ ... done
[16:10:35.415] Created future:
[16:10:35.416] plan(): Setting new future strategy stack:
[16:10:35.416] List of future strategies:
[16:10:35.416] 1. sequential:
[16:10:35.416]    - args: function (..., envir = parent.frame())
[16:10:35.416]    - tweaked: FALSE
[16:10:35.416]    - call: NULL
[16:10:35.417] plan(): nbrOfWorkers() = 1
[16:10:35.419] plan(): Setting new future strategy stack:
[16:10:35.419] List of future strategies:
[16:10:35.419] 1. multicore:
[16:10:35.419]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:10:35.419]    - tweaked: FALSE
[16:10:35.419]    - call: plan(strategy)
[16:10:35.424] plan(): nbrOfWorkers() = 2
[16:10:35.415] MulticoreFuture:
[16:10:35.415] Label: ‘future_replicate-2’
[16:10:35.415] Expression:
[16:10:35.415] {
[16:10:35.415]     do.call(function(...) {
[16:10:35.415]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.415]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:35.415]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.415]             on.exit(options(oopts), add = TRUE)
[16:10:35.415]         }
[16:10:35.415]         {
[16:10:35.415]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:35.415]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.415]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.415]                   envir = globalenv(), inherits = FALSE)
[16:10:35.415]                 ...future.FUN(...future.X_jj, ...)
[16:10:35.415]             })
[16:10:35.415]         }
[16:10:35.415]     }, args = future.call.arguments)
[16:10:35.415] }
[16:10:35.415] Lazy evaluation: FALSE
[16:10:35.415] Asynchronous evaluation: TRUE
[16:10:35.415] Local evaluation: TRUE
[16:10:35.415] Environment: R_GlobalEnv
[16:10:35.415] Capture standard output: TRUE
[16:10:35.415] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:35.415] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:35.415] Packages: <none>
[16:10:35.415] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:35.415] Resolved: TRUE
[16:10:35.415] Value: <not collected>
[16:10:35.415] Conditions captured: <none>
[16:10:35.415] Early signaling: FALSE
[16:10:35.415] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:35.415] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:35.425] Chunk #2 of 2 ... DONE
[16:10:35.425] Launching 2 futures (chunks) ... DONE
[16:10:35.426] Resolving 2 futures (chunks) ...
[16:10:35.426] resolve() on list ...
[16:10:35.426]  recursive: 0
[16:10:35.426]  length: 2
[16:10:35.426] 
[16:10:35.427] Future #1
[16:10:35.428] signalConditionsASAP(MulticoreFuture, pos=1) ...
[16:10:35.428] - nx: 2
[16:10:35.428] - relay: TRUE
[16:10:35.428] - stdout: TRUE
[16:10:35.429] - signal: TRUE
[16:10:35.429] - resignal: FALSE
[16:10:35.429] - force: TRUE
[16:10:35.429] - relayed: [n=2] FALSE, FALSE
[16:10:35.429] - queued futures: [n=2] FALSE, FALSE
[16:10:35.429]  - until=1
[16:10:35.430]  - relaying element #1
[16:10:35.430] - relayed: [n=2] TRUE, FALSE
[16:10:35.430] - queued futures: [n=2] TRUE, FALSE
[16:10:35.430] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[16:10:35.431]  length: 1 (resolved future 1)
[16:10:35.431] Future #2
[16:10:35.432] signalConditionsASAP(MulticoreFuture, pos=2) ...
[16:10:35.432] - nx: 2
[16:10:35.433] - relay: TRUE
[16:10:35.433] - stdout: TRUE
[16:10:35.433] - signal: TRUE
[16:10:35.433] - resignal: FALSE
[16:10:35.433] - force: TRUE
[16:10:35.433] - relayed: [n=2] TRUE, FALSE
[16:10:35.434] - queued futures: [n=2] TRUE, FALSE
[16:10:35.434]  - until=2
[16:10:35.434]  - relaying element #2
[16:10:35.434] - relayed: [n=2] TRUE, TRUE
[16:10:35.437] - queued futures: [n=2] TRUE, TRUE
[16:10:35.437] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[16:10:35.437]  length: 0 (resolved future 2)
[16:10:35.437] Relaying remaining futures
[16:10:35.437] signalConditionsASAP(NULL, pos=0) ...
[16:10:35.438] - nx: 2
[16:10:35.438] - relay: TRUE
[16:10:35.438] - stdout: TRUE
[16:10:35.438] - signal: TRUE
[16:10:35.438] - resignal: FALSE
[16:10:35.438] - force: TRUE
[16:10:35.438] - relayed: [n=2] TRUE, TRUE
[16:10:35.439] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:10:35.439] - relayed: [n=2] TRUE, TRUE
[16:10:35.439] - queued futures: [n=2] TRUE, TRUE
[16:10:35.439] signalConditionsASAP(NULL, pos=0) ... done
[16:10:35.439] resolve() on list ... DONE
[16:10:35.440]  - Number of value chunks collected: 2
[16:10:35.440] Resolving 2 futures (chunks) ... DONE
[16:10:35.440] Reducing values from 2 chunks ...
[16:10:35.440]  - Number of values collected after concatenation: 5
[16:10:35.440]  - Number of values expected: 5
[16:10:35.440] Reducing values from 2 chunks ... DONE
[16:10:35.440] future_lapply() ... DONE
- example(replicate) ...
[16:10:35.441] future_lapply() ...
[16:10:35.441] Generating random seeds ...
[16:10:35.442] Generating random seed streams for 5 elements ...
[16:10:35.442] Generating random seed streams for 5 elements ... DONE
[16:10:35.442] Generating random seeds ... DONE
[16:10:35.442] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:10:35.446] Number of chunks: 2
[16:10:35.447] getGlobalsAndPackagesXApply() ...
[16:10:35.447]  - future.globals: TRUE
[16:10:35.447] getGlobalsAndPackages() ...
[16:10:35.447] Searching for globals...
[16:10:35.449] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[16:10:35.449] Searching for globals ... DONE
[16:10:35.449] Resolving globals: FALSE
[16:10:35.450] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[16:10:35.450] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[16:10:35.450] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[16:10:35.451] 
[16:10:35.451] getGlobalsAndPackages() ... DONE
[16:10:35.451]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[16:10:35.451]  - needed namespaces: [n=0] 
[16:10:35.451] Finding globals ... DONE
[16:10:35.451]  - use_args: TRUE
[16:10:35.451]  - Getting '...' globals ...
[16:10:35.452] resolve() on list ...
[16:10:35.452]  recursive: 0
[16:10:35.452]  length: 1
[16:10:35.452]  elements: ‘...’
[16:10:35.452]  length: 0 (resolved future 1)
[16:10:35.452] resolve() on list ... DONE
[16:10:35.452]    - '...' content: [n=0] 
[16:10:35.452] List of 1
[16:10:35.452]  $ ...: list()
[16:10:35.452]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:35.452]  - attr(*, "where")=List of 1
[16:10:35.452]   ..$ ...:<environment: 0x55cf8de5bb98> 
[16:10:35.452]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:35.452]  - attr(*, "resolved")= logi TRUE
[16:10:35.452]  - attr(*, "total_size")= num NA
[16:10:35.455]  - Getting '...' globals ... DONE
[16:10:35.456] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[16:10:35.456] List of 4
[16:10:35.456]  $ ...future.FUN:function (...)  
[16:10:35.456]  $ foo          :function (x = 1, y = 2)  
[16:10:35.456]  $ x            : num 3
[16:10:35.456]  $ ...          : list()
[16:10:35.456]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:35.456]  - attr(*, "where")=List of 4
[16:10:35.456]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:10:35.456]   ..$ foo          :<environment: R_EmptyEnv> 
[16:10:35.456]   ..$ x            :<environment: R_EmptyEnv> 
[16:10:35.456]   ..$ ...          :<environment: 0x55cf8de5bb98> 
[16:10:35.456]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:35.456]  - attr(*, "resolved")= logi FALSE
[16:10:35.456]  - attr(*, "total_size")= num 2200
[16:10:35.460] Packages to be attached in all futures: [n=0] 
[16:10:35.460] getGlobalsAndPackagesXApply() ... DONE
[16:10:35.460] Number of futures (= number of chunks): 2
[16:10:35.460] Launching 2 futures (chunks) ...
[16:10:35.460] Chunk #1 of 2 ...
[16:10:35.460]  - Finding globals in 'X' for chunk #1 ...
[16:10:35.460] getGlobalsAndPackages() ...
[16:10:35.460] Searching for globals...
[16:10:35.461] 
[16:10:35.461] Searching for globals ... DONE
[16:10:35.461] - globals: [0] <none>
[16:10:35.461] getGlobalsAndPackages() ... DONE
[16:10:35.461]    + additional globals found: [n=0] 
[16:10:35.461]    + additional namespaces needed: [n=0] 
[16:10:35.461]  - Finding globals in 'X' for chunk #1 ... DONE
[16:10:35.461]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:10:35.461]  - seeds: [2] <seeds>
[16:10:35.462] getGlobalsAndPackages() ...
[16:10:35.462] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:35.462] Resolving globals: FALSE
[16:10:35.462] Tweak future expression to call with '...' arguments ...
[16:10:35.462] {
[16:10:35.462]     do.call(function(...) {
[16:10:35.462]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.462]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:35.462]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.462]             on.exit(options(oopts), add = TRUE)
[16:10:35.462]         }
[16:10:35.462]         {
[16:10:35.462]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:35.462]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.462]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.462]                   envir = globalenv(), inherits = FALSE)
[16:10:35.462]                 ...future.FUN(...future.X_jj, ...)
[16:10:35.462]             })
[16:10:35.462]         }
[16:10:35.462]     }, args = future.call.arguments)
[16:10:35.462] }
[16:10:35.462] Tweak future expression to call with '...' arguments ... DONE
[16:10:35.463] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:35.463] 
[16:10:35.463] getGlobalsAndPackages() ... DONE
[16:10:35.463] run() for ‘Future’ ...
[16:10:35.463] - state: ‘created’
[16:10:35.463] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:10:35.467] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:35.467] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:10:35.468]   - Field: ‘label’
[16:10:35.468]   - Field: ‘local’
[16:10:35.468]   - Field: ‘owner’
[16:10:35.469]   - Field: ‘envir’
[16:10:35.469]   - Field: ‘workers’
[16:10:35.469]   - Field: ‘packages’
[16:10:35.469]   - Field: ‘gc’
[16:10:35.469]   - Field: ‘job’
[16:10:35.469]   - Field: ‘conditions’
[16:10:35.469]   - Field: ‘expr’
[16:10:35.469]   - Field: ‘uuid’
[16:10:35.469]   - Field: ‘seed’
[16:10:35.469]   - Field: ‘version’
[16:10:35.470]   - Field: ‘result’
[16:10:35.470]   - Field: ‘asynchronous’
[16:10:35.470]   - Field: ‘calls’
[16:10:35.470]   - Field: ‘globals’
[16:10:35.470]   - Field: ‘stdout’
[16:10:35.470]   - Field: ‘earlySignal’
[16:10:35.470]   - Field: ‘lazy’
[16:10:35.470]   - Field: ‘state’
[16:10:35.470] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:10:35.470] - Launch lazy future ...
[16:10:35.471] Packages needed by the future expression (n = 0): <none>
[16:10:35.471] Packages needed by future strategies (n = 0): <none>
[16:10:35.471] {
[16:10:35.471]     {
[16:10:35.471]         {
[16:10:35.471]             ...future.startTime <- base::Sys.time()
[16:10:35.471]             {
[16:10:35.471]                 {
[16:10:35.471]                   {
[16:10:35.471]                     {
[16:10:35.471]                       base::local({
[16:10:35.471]                         has_future <- base::requireNamespace("future", 
[16:10:35.471]                           quietly = TRUE)
[16:10:35.471]                         if (has_future) {
[16:10:35.471]                           ns <- base::getNamespace("future")
[16:10:35.471]                           version <- ns[[".package"]][["version"]]
[16:10:35.471]                           if (is.null(version)) 
[16:10:35.471]                             version <- utils::packageVersion("future")
[16:10:35.471]                         }
[16:10:35.471]                         else {
[16:10:35.471]                           version <- NULL
[16:10:35.471]                         }
[16:10:35.471]                         if (!has_future || version < "1.8.0") {
[16:10:35.471]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:35.471]                             "", base::R.version$version.string), 
[16:10:35.471]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:35.471]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:35.471]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:35.471]                               "release", "version")], collapse = " "), 
[16:10:35.471]                             hostname = base::Sys.info()[["nodename"]])
[16:10:35.471]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:35.471]                             info)
[16:10:35.471]                           info <- base::paste(info, collapse = "; ")
[16:10:35.471]                           if (!has_future) {
[16:10:35.471]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:35.471]                               info)
[16:10:35.471]                           }
[16:10:35.471]                           else {
[16:10:35.471]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:35.471]                               info, version)
[16:10:35.471]                           }
[16:10:35.471]                           base::stop(msg)
[16:10:35.471]                         }
[16:10:35.471]                       })
[16:10:35.471]                     }
[16:10:35.471]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:35.471]                     base::options(mc.cores = 1L)
[16:10:35.471]                   }
[16:10:35.471]                   options(future.plan = NULL)
[16:10:35.471]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:35.471]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:35.471]                 }
[16:10:35.471]                 ...future.workdir <- getwd()
[16:10:35.471]             }
[16:10:35.471]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:35.471]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:35.471]         }
[16:10:35.471]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:35.471]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:10:35.471]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:35.471]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:35.471]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:35.471]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:35.471]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:35.471]             base::names(...future.oldOptions))
[16:10:35.471]     }
[16:10:35.471]     if (FALSE) {
[16:10:35.471]     }
[16:10:35.471]     else {
[16:10:35.471]         if (TRUE) {
[16:10:35.471]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:35.471]                 open = "w")
[16:10:35.471]         }
[16:10:35.471]         else {
[16:10:35.471]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:35.471]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:35.471]         }
[16:10:35.471]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:35.471]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:35.471]             base::sink(type = "output", split = FALSE)
[16:10:35.471]             base::close(...future.stdout)
[16:10:35.471]         }, add = TRUE)
[16:10:35.471]     }
[16:10:35.471]     ...future.frame <- base::sys.nframe()
[16:10:35.471]     ...future.conditions <- base::list()
[16:10:35.471]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:35.471]     if (FALSE) {
[16:10:35.471]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:35.471]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:35.471]     }
[16:10:35.471]     ...future.result <- base::tryCatch({
[16:10:35.471]         base::withCallingHandlers({
[16:10:35.471]             ...future.value <- base::withVisible(base::local({
[16:10:35.471]                 withCallingHandlers({
[16:10:35.471]                   {
[16:10:35.471]                     do.call(function(...) {
[16:10:35.471]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.471]                       if (!identical(...future.globals.maxSize.org, 
[16:10:35.471]                         ...future.globals.maxSize)) {
[16:10:35.471]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.471]                         on.exit(options(oopts), add = TRUE)
[16:10:35.471]                       }
[16:10:35.471]                       {
[16:10:35.471]                         lapply(seq_along(...future.elements_ii), 
[16:10:35.471]                           FUN = function(jj) {
[16:10:35.471]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.471]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.471]                               envir = globalenv(), inherits = FALSE)
[16:10:35.471]                             ...future.FUN(...future.X_jj, ...)
[16:10:35.471]                           })
[16:10:35.471]                       }
[16:10:35.471]                     }, args = future.call.arguments)
[16:10:35.471]                   }
[16:10:35.471]                 }, immediateCondition = function(cond) {
[16:10:35.471]                   save_rds <- function (object, pathname, ...) 
[16:10:35.471]                   {
[16:10:35.471]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:10:35.471]                     if (file_test("-f", pathname_tmp)) {
[16:10:35.471]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.471]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:10:35.471]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.471]                         fi_tmp[["mtime"]])
[16:10:35.471]                     }
[16:10:35.471]                     tryCatch({
[16:10:35.471]                       saveRDS(object, file = pathname_tmp, ...)
[16:10:35.471]                     }, error = function(ex) {
[16:10:35.471]                       msg <- conditionMessage(ex)
[16:10:35.471]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.471]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:10:35.471]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.471]                         fi_tmp[["mtime"]], msg)
[16:10:35.471]                       ex$message <- msg
[16:10:35.471]                       stop(ex)
[16:10:35.471]                     })
[16:10:35.471]                     stopifnot(file_test("-f", pathname_tmp))
[16:10:35.471]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:10:35.471]                     if (!res || file_test("-f", pathname_tmp)) {
[16:10:35.471]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.471]                       fi <- file.info(pathname)
[16:10:35.471]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:10:35.471]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.471]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:10:35.471]                         fi[["size"]], fi[["mtime"]])
[16:10:35.471]                       stop(msg)
[16:10:35.471]                     }
[16:10:35.471]                     invisible(pathname)
[16:10:35.471]                   }
[16:10:35.471]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:10:35.471]                     rootPath = tempdir()) 
[16:10:35.471]                   {
[16:10:35.471]                     obj <- list(time = Sys.time(), condition = cond)
[16:10:35.471]                     file <- tempfile(pattern = class(cond)[1], 
[16:10:35.471]                       tmpdir = path, fileext = ".rds")
[16:10:35.471]                     save_rds(obj, file)
[16:10:35.471]                   }
[16:10:35.471]                   saveImmediateCondition(cond, path = "/tmp/RtmpLZUJI0/.future/immediateConditions")
[16:10:35.471]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.471]                   {
[16:10:35.471]                     inherits <- base::inherits
[16:10:35.471]                     invokeRestart <- base::invokeRestart
[16:10:35.471]                     is.null <- base::is.null
[16:10:35.471]                     muffled <- FALSE
[16:10:35.471]                     if (inherits(cond, "message")) {
[16:10:35.471]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:35.471]                       if (muffled) 
[16:10:35.471]                         invokeRestart("muffleMessage")
[16:10:35.471]                     }
[16:10:35.471]                     else if (inherits(cond, "warning")) {
[16:10:35.471]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:35.471]                       if (muffled) 
[16:10:35.471]                         invokeRestart("muffleWarning")
[16:10:35.471]                     }
[16:10:35.471]                     else if (inherits(cond, "condition")) {
[16:10:35.471]                       if (!is.null(pattern)) {
[16:10:35.471]                         computeRestarts <- base::computeRestarts
[16:10:35.471]                         grepl <- base::grepl
[16:10:35.471]                         restarts <- computeRestarts(cond)
[16:10:35.471]                         for (restart in restarts) {
[16:10:35.471]                           name <- restart$name
[16:10:35.471]                           if (is.null(name)) 
[16:10:35.471]                             next
[16:10:35.471]                           if (!grepl(pattern, name)) 
[16:10:35.471]                             next
[16:10:35.471]                           invokeRestart(restart)
[16:10:35.471]                           muffled <- TRUE
[16:10:35.471]                           break
[16:10:35.471]                         }
[16:10:35.471]                       }
[16:10:35.471]                     }
[16:10:35.471]                     invisible(muffled)
[16:10:35.471]                   }
[16:10:35.471]                   muffleCondition(cond)
[16:10:35.471]                 })
[16:10:35.471]             }))
[16:10:35.471]             future::FutureResult(value = ...future.value$value, 
[16:10:35.471]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:35.471]                   ...future.rng), globalenv = if (FALSE) 
[16:10:35.471]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:35.471]                     ...future.globalenv.names))
[16:10:35.471]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:35.471]         }, condition = base::local({
[16:10:35.471]             c <- base::c
[16:10:35.471]             inherits <- base::inherits
[16:10:35.471]             invokeRestart <- base::invokeRestart
[16:10:35.471]             length <- base::length
[16:10:35.471]             list <- base::list
[16:10:35.471]             seq.int <- base::seq.int
[16:10:35.471]             signalCondition <- base::signalCondition
[16:10:35.471]             sys.calls <- base::sys.calls
[16:10:35.471]             `[[` <- base::`[[`
[16:10:35.471]             `+` <- base::`+`
[16:10:35.471]             `<<-` <- base::`<<-`
[16:10:35.471]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:35.471]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:35.471]                   3L)]
[16:10:35.471]             }
[16:10:35.471]             function(cond) {
[16:10:35.471]                 is_error <- inherits(cond, "error")
[16:10:35.471]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:35.471]                   NULL)
[16:10:35.471]                 if (is_error) {
[16:10:35.471]                   sessionInformation <- function() {
[16:10:35.471]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:35.471]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:35.471]                       search = base::search(), system = base::Sys.info())
[16:10:35.471]                   }
[16:10:35.471]                   ...future.conditions[[length(...future.conditions) + 
[16:10:35.471]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:35.471]                     cond$call), session = sessionInformation(), 
[16:10:35.471]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:35.471]                   signalCondition(cond)
[16:10:35.471]                 }
[16:10:35.471]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:35.471]                 "immediateCondition"))) {
[16:10:35.471]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:35.471]                   ...future.conditions[[length(...future.conditions) + 
[16:10:35.471]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:35.471]                   if (TRUE && !signal) {
[16:10:35.471]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.471]                     {
[16:10:35.471]                       inherits <- base::inherits
[16:10:35.471]                       invokeRestart <- base::invokeRestart
[16:10:35.471]                       is.null <- base::is.null
[16:10:35.471]                       muffled <- FALSE
[16:10:35.471]                       if (inherits(cond, "message")) {
[16:10:35.471]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:35.471]                         if (muffled) 
[16:10:35.471]                           invokeRestart("muffleMessage")
[16:10:35.471]                       }
[16:10:35.471]                       else if (inherits(cond, "warning")) {
[16:10:35.471]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:35.471]                         if (muffled) 
[16:10:35.471]                           invokeRestart("muffleWarning")
[16:10:35.471]                       }
[16:10:35.471]                       else if (inherits(cond, "condition")) {
[16:10:35.471]                         if (!is.null(pattern)) {
[16:10:35.471]                           computeRestarts <- base::computeRestarts
[16:10:35.471]                           grepl <- base::grepl
[16:10:35.471]                           restarts <- computeRestarts(cond)
[16:10:35.471]                           for (restart in restarts) {
[16:10:35.471]                             name <- restart$name
[16:10:35.471]                             if (is.null(name)) 
[16:10:35.471]                               next
[16:10:35.471]                             if (!grepl(pattern, name)) 
[16:10:35.471]                               next
[16:10:35.471]                             invokeRestart(restart)
[16:10:35.471]                             muffled <- TRUE
[16:10:35.471]                             break
[16:10:35.471]                           }
[16:10:35.471]                         }
[16:10:35.471]                       }
[16:10:35.471]                       invisible(muffled)
[16:10:35.471]                     }
[16:10:35.471]                     muffleCondition(cond, pattern = "^muffle")
[16:10:35.471]                   }
[16:10:35.471]                 }
[16:10:35.471]                 else {
[16:10:35.471]                   if (TRUE) {
[16:10:35.471]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.471]                     {
[16:10:35.471]                       inherits <- base::inherits
[16:10:35.471]                       invokeRestart <- base::invokeRestart
[16:10:35.471]                       is.null <- base::is.null
[16:10:35.471]                       muffled <- FALSE
[16:10:35.471]                       if (inherits(cond, "message")) {
[16:10:35.471]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:35.471]                         if (muffled) 
[16:10:35.471]                           invokeRestart("muffleMessage")
[16:10:35.471]                       }
[16:10:35.471]                       else if (inherits(cond, "warning")) {
[16:10:35.471]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:35.471]                         if (muffled) 
[16:10:35.471]                           invokeRestart("muffleWarning")
[16:10:35.471]                       }
[16:10:35.471]                       else if (inherits(cond, "condition")) {
[16:10:35.471]                         if (!is.null(pattern)) {
[16:10:35.471]                           computeRestarts <- base::computeRestarts
[16:10:35.471]                           grepl <- base::grepl
[16:10:35.471]                           restarts <- computeRestarts(cond)
[16:10:35.471]                           for (restart in restarts) {
[16:10:35.471]                             name <- restart$name
[16:10:35.471]                             if (is.null(name)) 
[16:10:35.471]                               next
[16:10:35.471]                             if (!grepl(pattern, name)) 
[16:10:35.471]                               next
[16:10:35.471]                             invokeRestart(restart)
[16:10:35.471]                             muffled <- TRUE
[16:10:35.471]                             break
[16:10:35.471]                           }
[16:10:35.471]                         }
[16:10:35.471]                       }
[16:10:35.471]                       invisible(muffled)
[16:10:35.471]                     }
[16:10:35.471]                     muffleCondition(cond, pattern = "^muffle")
[16:10:35.471]                   }
[16:10:35.471]                 }
[16:10:35.471]             }
[16:10:35.471]         }))
[16:10:35.471]     }, error = function(ex) {
[16:10:35.471]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:35.471]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:35.471]                 ...future.rng), started = ...future.startTime, 
[16:10:35.471]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:35.471]             version = "1.8"), class = "FutureResult")
[16:10:35.471]     }, finally = {
[16:10:35.471]         if (!identical(...future.workdir, getwd())) 
[16:10:35.471]             setwd(...future.workdir)
[16:10:35.471]         {
[16:10:35.471]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:35.471]                 ...future.oldOptions$nwarnings <- NULL
[16:10:35.471]             }
[16:10:35.471]             base::options(...future.oldOptions)
[16:10:35.471]             if (.Platform$OS.type == "windows") {
[16:10:35.471]                 old_names <- names(...future.oldEnvVars)
[16:10:35.471]                 envs <- base::Sys.getenv()
[16:10:35.471]                 names <- names(envs)
[16:10:35.471]                 common <- intersect(names, old_names)
[16:10:35.471]                 added <- setdiff(names, old_names)
[16:10:35.471]                 removed <- setdiff(old_names, names)
[16:10:35.471]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:35.471]                   envs[common]]
[16:10:35.471]                 NAMES <- toupper(changed)
[16:10:35.471]                 args <- list()
[16:10:35.471]                 for (kk in seq_along(NAMES)) {
[16:10:35.471]                   name <- changed[[kk]]
[16:10:35.471]                   NAME <- NAMES[[kk]]
[16:10:35.471]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.471]                     next
[16:10:35.471]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:35.471]                 }
[16:10:35.471]                 NAMES <- toupper(added)
[16:10:35.471]                 for (kk in seq_along(NAMES)) {
[16:10:35.471]                   name <- added[[kk]]
[16:10:35.471]                   NAME <- NAMES[[kk]]
[16:10:35.471]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.471]                     next
[16:10:35.471]                   args[[name]] <- ""
[16:10:35.471]                 }
[16:10:35.471]                 NAMES <- toupper(removed)
[16:10:35.471]                 for (kk in seq_along(NAMES)) {
[16:10:35.471]                   name <- removed[[kk]]
[16:10:35.471]                   NAME <- NAMES[[kk]]
[16:10:35.471]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.471]                     next
[16:10:35.471]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:35.471]                 }
[16:10:35.471]                 if (length(args) > 0) 
[16:10:35.471]                   base::do.call(base::Sys.setenv, args = args)
[16:10:35.471]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:35.471]             }
[16:10:35.471]             else {
[16:10:35.471]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:35.471]             }
[16:10:35.471]             {
[16:10:35.471]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:35.471]                   0L) {
[16:10:35.471]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:35.471]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:35.471]                   base::options(opts)
[16:10:35.471]                 }
[16:10:35.471]                 {
[16:10:35.471]                   {
[16:10:35.471]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:35.471]                     NULL
[16:10:35.471]                   }
[16:10:35.471]                   options(future.plan = NULL)
[16:10:35.471]                   if (is.na(NA_character_)) 
[16:10:35.471]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:35.471]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:35.471]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:10:35.471]                     envir = parent.frame()) 
[16:10:35.471]                   {
[16:10:35.471]                     default_workers <- missing(workers)
[16:10:35.471]                     if (is.function(workers)) 
[16:10:35.471]                       workers <- workers()
[16:10:35.471]                     workers <- structure(as.integer(workers), 
[16:10:35.471]                       class = class(workers))
[16:10:35.471]                     stop_if_not(is.finite(workers), workers >= 
[16:10:35.471]                       1L)
[16:10:35.471]                     if ((workers == 1L && !inherits(workers, 
[16:10:35.471]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:10:35.471]                       if (default_workers) 
[16:10:35.471]                         supportsMulticore(warn = TRUE)
[16:10:35.471]                       return(sequential(..., envir = envir))
[16:10:35.471]                     }
[16:10:35.471]                     oopts <- options(mc.cores = workers)
[16:10:35.471]                     on.exit(options(oopts))
[16:10:35.471]                     future <- MulticoreFuture(..., workers = workers, 
[16:10:35.471]                       envir = envir)
[16:10:35.471]                     if (!future$lazy) 
[16:10:35.471]                       future <- run(future)
[16:10:35.471]                     invisible(future)
[16:10:35.471]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:35.471]                 }
[16:10:35.471]             }
[16:10:35.471]         }
[16:10:35.471]     })
[16:10:35.471]     if (TRUE) {
[16:10:35.471]         base::sink(type = "output", split = FALSE)
[16:10:35.471]         if (TRUE) {
[16:10:35.471]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:35.471]         }
[16:10:35.471]         else {
[16:10:35.471]             ...future.result["stdout"] <- base::list(NULL)
[16:10:35.471]         }
[16:10:35.471]         base::close(...future.stdout)
[16:10:35.471]         ...future.stdout <- NULL
[16:10:35.471]     }
[16:10:35.471]     ...future.result$conditions <- ...future.conditions
[16:10:35.471]     ...future.result$finished <- base::Sys.time()
[16:10:35.471]     ...future.result
[16:10:35.471] }
[16:10:35.474] assign_globals() ...
[16:10:35.474] List of 7
[16:10:35.474]  $ ...future.FUN            :function (...)  
[16:10:35.474]  $ foo                      :function (x = 1, y = 2)  
[16:10:35.474]  $ x                        : num 3
[16:10:35.474]  $ future.call.arguments    : list()
[16:10:35.474]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:35.474]  $ ...future.elements_ii    :List of 2
[16:10:35.474]   ..$ : int 0
[16:10:35.474]   ..$ : int 0
[16:10:35.474]  $ ...future.seeds_ii       :List of 2
[16:10:35.474]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[16:10:35.474]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[16:10:35.474]  $ ...future.globals.maxSize: NULL
[16:10:35.474]  - attr(*, "resolved")= logi FALSE
[16:10:35.474]  - attr(*, "total_size")= num 2200
[16:10:35.474]  - attr(*, "where")=List of 7
[16:10:35.474]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:10:35.474]   ..$ foo                      :<environment: R_EmptyEnv> 
[16:10:35.474]   ..$ x                        :<environment: R_EmptyEnv> 
[16:10:35.474]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:10:35.474]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:10:35.474]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:10:35.474]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:10:35.474]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:35.474]  - attr(*, "already-done")= logi TRUE
[16:10:35.480] - reassign environment for ‘...future.FUN’
[16:10:35.480] - copied ‘...future.FUN’ to environment
[16:10:35.480] - reassign environment for ‘foo’
[16:10:35.480] - copied ‘foo’ to environment
[16:10:35.480] - copied ‘x’ to environment
[16:10:35.480] - copied ‘future.call.arguments’ to environment
[16:10:35.481] - copied ‘...future.elements_ii’ to environment
[16:10:35.481] - copied ‘...future.seeds_ii’ to environment
[16:10:35.481] - copied ‘...future.globals.maxSize’ to environment
[16:10:35.481] assign_globals() ... done
[16:10:35.481] requestCore(): workers = 2
[16:10:35.483] MulticoreFuture started
[16:10:35.483] - Launch lazy future ... done
[16:10:35.483] run() for ‘MulticoreFuture’ ... done
[16:10:35.484] Created future:
[16:10:35.484] plan(): Setting new future strategy stack:
[16:10:35.484] List of future strategies:
[16:10:35.484] 1. sequential:
[16:10:35.484]    - args: function (..., envir = parent.frame())
[16:10:35.484]    - tweaked: FALSE
[16:10:35.484]    - call: NULL
[16:10:35.485] plan(): nbrOfWorkers() = 1
[16:10:35.487] plan(): Setting new future strategy stack:
[16:10:35.487] List of future strategies:
[16:10:35.487] 1. multicore:
[16:10:35.487]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:10:35.487]    - tweaked: FALSE
[16:10:35.487]    - call: plan(strategy)
[16:10:35.492] plan(): nbrOfWorkers() = 2
[16:10:35.484] MulticoreFuture:
[16:10:35.484] Label: ‘future_replicate-1’
[16:10:35.484] Expression:
[16:10:35.484] {
[16:10:35.484]     do.call(function(...) {
[16:10:35.484]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.484]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:35.484]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.484]             on.exit(options(oopts), add = TRUE)
[16:10:35.484]         }
[16:10:35.484]         {
[16:10:35.484]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:35.484]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.484]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.484]                   envir = globalenv(), inherits = FALSE)
[16:10:35.484]                 ...future.FUN(...future.X_jj, ...)
[16:10:35.484]             })
[16:10:35.484]         }
[16:10:35.484]     }, args = future.call.arguments)
[16:10:35.484] }
[16:10:35.484] Lazy evaluation: FALSE
[16:10:35.484] Asynchronous evaluation: TRUE
[16:10:35.484] Local evaluation: TRUE
[16:10:35.484] Environment: 0x55cf8de87b18
[16:10:35.484] Capture standard output: TRUE
[16:10:35.484] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:35.484] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[16:10:35.484] Packages: <none>
[16:10:35.484] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:35.484] Resolved: TRUE
[16:10:35.484] Value: <not collected>
[16:10:35.484] Conditions captured: <none>
[16:10:35.484] Early signaling: FALSE
[16:10:35.484] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:35.484] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:35.493] Chunk #1 of 2 ... DONE
[16:10:35.494] Chunk #2 of 2 ...
[16:10:35.494]  - Finding globals in 'X' for chunk #2 ...
[16:10:35.494] getGlobalsAndPackages() ...
[16:10:35.494] Searching for globals...
[16:10:35.494] 
[16:10:35.495] Searching for globals ... DONE
[16:10:35.495] - globals: [0] <none>
[16:10:35.495] getGlobalsAndPackages() ... DONE
[16:10:35.495]    + additional globals found: [n=0] 
[16:10:35.495]    + additional namespaces needed: [n=0] 
[16:10:35.495]  - Finding globals in 'X' for chunk #2 ... DONE
[16:10:35.495]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[16:10:35.496]  - seeds: [3] <seeds>
[16:10:35.496] getGlobalsAndPackages() ...
[16:10:35.496] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:35.496] Resolving globals: FALSE
[16:10:35.496] Tweak future expression to call with '...' arguments ...
[16:10:35.497] {
[16:10:35.497]     do.call(function(...) {
[16:10:35.497]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.497]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:35.497]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.497]             on.exit(options(oopts), add = TRUE)
[16:10:35.497]         }
[16:10:35.497]         {
[16:10:35.497]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:35.497]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.497]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.497]                   envir = globalenv(), inherits = FALSE)
[16:10:35.497]                 ...future.FUN(...future.X_jj, ...)
[16:10:35.497]             })
[16:10:35.497]         }
[16:10:35.497]     }, args = future.call.arguments)
[16:10:35.497] }
[16:10:35.497] Tweak future expression to call with '...' arguments ... DONE
[16:10:35.498] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:35.498] 
[16:10:35.498] getGlobalsAndPackages() ... DONE
[16:10:35.499] run() for ‘Future’ ...
[16:10:35.499] - state: ‘created’
[16:10:35.499] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:10:35.503] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:35.504] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:10:35.504]   - Field: ‘label’
[16:10:35.504]   - Field: ‘local’
[16:10:35.504]   - Field: ‘owner’
[16:10:35.504]   - Field: ‘envir’
[16:10:35.505]   - Field: ‘workers’
[16:10:35.505]   - Field: ‘packages’
[16:10:35.505]   - Field: ‘gc’
[16:10:35.505]   - Field: ‘job’
[16:10:35.505]   - Field: ‘conditions’
[16:10:35.505]   - Field: ‘expr’
[16:10:35.505]   - Field: ‘uuid’
[16:10:35.506]   - Field: ‘seed’
[16:10:35.506]   - Field: ‘version’
[16:10:35.506]   - Field: ‘result’
[16:10:35.506]   - Field: ‘asynchronous’
[16:10:35.506]   - Field: ‘calls’
[16:10:35.506]   - Field: ‘globals’
[16:10:35.506]   - Field: ‘stdout’
[16:10:35.506]   - Field: ‘earlySignal’
[16:10:35.507]   - Field: ‘lazy’
[16:10:35.507]   - Field: ‘state’
[16:10:35.507] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:10:35.507] - Launch lazy future ...
[16:10:35.507] Packages needed by the future expression (n = 0): <none>
[16:10:35.508] Packages needed by future strategies (n = 0): <none>
[16:10:35.508] {
[16:10:35.508]     {
[16:10:35.508]         {
[16:10:35.508]             ...future.startTime <- base::Sys.time()
[16:10:35.508]             {
[16:10:35.508]                 {
[16:10:35.508]                   {
[16:10:35.508]                     {
[16:10:35.508]                       base::local({
[16:10:35.508]                         has_future <- base::requireNamespace("future", 
[16:10:35.508]                           quietly = TRUE)
[16:10:35.508]                         if (has_future) {
[16:10:35.508]                           ns <- base::getNamespace("future")
[16:10:35.508]                           version <- ns[[".package"]][["version"]]
[16:10:35.508]                           if (is.null(version)) 
[16:10:35.508]                             version <- utils::packageVersion("future")
[16:10:35.508]                         }
[16:10:35.508]                         else {
[16:10:35.508]                           version <- NULL
[16:10:35.508]                         }
[16:10:35.508]                         if (!has_future || version < "1.8.0") {
[16:10:35.508]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:35.508]                             "", base::R.version$version.string), 
[16:10:35.508]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:35.508]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:35.508]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:35.508]                               "release", "version")], collapse = " "), 
[16:10:35.508]                             hostname = base::Sys.info()[["nodename"]])
[16:10:35.508]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:35.508]                             info)
[16:10:35.508]                           info <- base::paste(info, collapse = "; ")
[16:10:35.508]                           if (!has_future) {
[16:10:35.508]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:35.508]                               info)
[16:10:35.508]                           }
[16:10:35.508]                           else {
[16:10:35.508]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:35.508]                               info, version)
[16:10:35.508]                           }
[16:10:35.508]                           base::stop(msg)
[16:10:35.508]                         }
[16:10:35.508]                       })
[16:10:35.508]                     }
[16:10:35.508]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:35.508]                     base::options(mc.cores = 1L)
[16:10:35.508]                   }
[16:10:35.508]                   options(future.plan = NULL)
[16:10:35.508]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:35.508]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:35.508]                 }
[16:10:35.508]                 ...future.workdir <- getwd()
[16:10:35.508]             }
[16:10:35.508]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:35.508]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:35.508]         }
[16:10:35.508]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:35.508]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[16:10:35.508]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:35.508]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:35.508]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:35.508]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:35.508]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:35.508]             base::names(...future.oldOptions))
[16:10:35.508]     }
[16:10:35.508]     if (FALSE) {
[16:10:35.508]     }
[16:10:35.508]     else {
[16:10:35.508]         if (TRUE) {
[16:10:35.508]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:35.508]                 open = "w")
[16:10:35.508]         }
[16:10:35.508]         else {
[16:10:35.508]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:35.508]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:35.508]         }
[16:10:35.508]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:35.508]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:35.508]             base::sink(type = "output", split = FALSE)
[16:10:35.508]             base::close(...future.stdout)
[16:10:35.508]         }, add = TRUE)
[16:10:35.508]     }
[16:10:35.508]     ...future.frame <- base::sys.nframe()
[16:10:35.508]     ...future.conditions <- base::list()
[16:10:35.508]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:35.508]     if (FALSE) {
[16:10:35.508]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:35.508]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:35.508]     }
[16:10:35.508]     ...future.result <- base::tryCatch({
[16:10:35.508]         base::withCallingHandlers({
[16:10:35.508]             ...future.value <- base::withVisible(base::local({
[16:10:35.508]                 withCallingHandlers({
[16:10:35.508]                   {
[16:10:35.508]                     do.call(function(...) {
[16:10:35.508]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.508]                       if (!identical(...future.globals.maxSize.org, 
[16:10:35.508]                         ...future.globals.maxSize)) {
[16:10:35.508]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.508]                         on.exit(options(oopts), add = TRUE)
[16:10:35.508]                       }
[16:10:35.508]                       {
[16:10:35.508]                         lapply(seq_along(...future.elements_ii), 
[16:10:35.508]                           FUN = function(jj) {
[16:10:35.508]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.508]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.508]                               envir = globalenv(), inherits = FALSE)
[16:10:35.508]                             ...future.FUN(...future.X_jj, ...)
[16:10:35.508]                           })
[16:10:35.508]                       }
[16:10:35.508]                     }, args = future.call.arguments)
[16:10:35.508]                   }
[16:10:35.508]                 }, immediateCondition = function(cond) {
[16:10:35.508]                   save_rds <- function (object, pathname, ...) 
[16:10:35.508]                   {
[16:10:35.508]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:10:35.508]                     if (file_test("-f", pathname_tmp)) {
[16:10:35.508]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.508]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:10:35.508]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.508]                         fi_tmp[["mtime"]])
[16:10:35.508]                     }
[16:10:35.508]                     tryCatch({
[16:10:35.508]                       saveRDS(object, file = pathname_tmp, ...)
[16:10:35.508]                     }, error = function(ex) {
[16:10:35.508]                       msg <- conditionMessage(ex)
[16:10:35.508]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.508]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:10:35.508]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.508]                         fi_tmp[["mtime"]], msg)
[16:10:35.508]                       ex$message <- msg
[16:10:35.508]                       stop(ex)
[16:10:35.508]                     })
[16:10:35.508]                     stopifnot(file_test("-f", pathname_tmp))
[16:10:35.508]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:10:35.508]                     if (!res || file_test("-f", pathname_tmp)) {
[16:10:35.508]                       fi_tmp <- file.info(pathname_tmp)
[16:10:35.508]                       fi <- file.info(pathname)
[16:10:35.508]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:10:35.508]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:10:35.508]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:10:35.508]                         fi[["size"]], fi[["mtime"]])
[16:10:35.508]                       stop(msg)
[16:10:35.508]                     }
[16:10:35.508]                     invisible(pathname)
[16:10:35.508]                   }
[16:10:35.508]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:10:35.508]                     rootPath = tempdir()) 
[16:10:35.508]                   {
[16:10:35.508]                     obj <- list(time = Sys.time(), condition = cond)
[16:10:35.508]                     file <- tempfile(pattern = class(cond)[1], 
[16:10:35.508]                       tmpdir = path, fileext = ".rds")
[16:10:35.508]                     save_rds(obj, file)
[16:10:35.508]                   }
[16:10:35.508]                   saveImmediateCondition(cond, path = "/tmp/RtmpLZUJI0/.future/immediateConditions")
[16:10:35.508]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.508]                   {
[16:10:35.508]                     inherits <- base::inherits
[16:10:35.508]                     invokeRestart <- base::invokeRestart
[16:10:35.508]                     is.null <- base::is.null
[16:10:35.508]                     muffled <- FALSE
[16:10:35.508]                     if (inherits(cond, "message")) {
[16:10:35.508]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:35.508]                       if (muffled) 
[16:10:35.508]                         invokeRestart("muffleMessage")
[16:10:35.508]                     }
[16:10:35.508]                     else if (inherits(cond, "warning")) {
[16:10:35.508]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:35.508]                       if (muffled) 
[16:10:35.508]                         invokeRestart("muffleWarning")
[16:10:35.508]                     }
[16:10:35.508]                     else if (inherits(cond, "condition")) {
[16:10:35.508]                       if (!is.null(pattern)) {
[16:10:35.508]                         computeRestarts <- base::computeRestarts
[16:10:35.508]                         grepl <- base::grepl
[16:10:35.508]                         restarts <- computeRestarts(cond)
[16:10:35.508]                         for (restart in restarts) {
[16:10:35.508]                           name <- restart$name
[16:10:35.508]                           if (is.null(name)) 
[16:10:35.508]                             next
[16:10:35.508]                           if (!grepl(pattern, name)) 
[16:10:35.508]                             next
[16:10:35.508]                           invokeRestart(restart)
[16:10:35.508]                           muffled <- TRUE
[16:10:35.508]                           break
[16:10:35.508]                         }
[16:10:35.508]                       }
[16:10:35.508]                     }
[16:10:35.508]                     invisible(muffled)
[16:10:35.508]                   }
[16:10:35.508]                   muffleCondition(cond)
[16:10:35.508]                 })
[16:10:35.508]             }))
[16:10:35.508]             future::FutureResult(value = ...future.value$value, 
[16:10:35.508]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:35.508]                   ...future.rng), globalenv = if (FALSE) 
[16:10:35.508]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:35.508]                     ...future.globalenv.names))
[16:10:35.508]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:35.508]         }, condition = base::local({
[16:10:35.508]             c <- base::c
[16:10:35.508]             inherits <- base::inherits
[16:10:35.508]             invokeRestart <- base::invokeRestart
[16:10:35.508]             length <- base::length
[16:10:35.508]             list <- base::list
[16:10:35.508]             seq.int <- base::seq.int
[16:10:35.508]             signalCondition <- base::signalCondition
[16:10:35.508]             sys.calls <- base::sys.calls
[16:10:35.508]             `[[` <- base::`[[`
[16:10:35.508]             `+` <- base::`+`
[16:10:35.508]             `<<-` <- base::`<<-`
[16:10:35.508]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:35.508]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:35.508]                   3L)]
[16:10:35.508]             }
[16:10:35.508]             function(cond) {
[16:10:35.508]                 is_error <- inherits(cond, "error")
[16:10:35.508]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:35.508]                   NULL)
[16:10:35.508]                 if (is_error) {
[16:10:35.508]                   sessionInformation <- function() {
[16:10:35.508]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:35.508]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:35.508]                       search = base::search(), system = base::Sys.info())
[16:10:35.508]                   }
[16:10:35.508]                   ...future.conditions[[length(...future.conditions) + 
[16:10:35.508]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:35.508]                     cond$call), session = sessionInformation(), 
[16:10:35.508]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:35.508]                   signalCondition(cond)
[16:10:35.508]                 }
[16:10:35.508]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:35.508]                 "immediateCondition"))) {
[16:10:35.508]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:35.508]                   ...future.conditions[[length(...future.conditions) + 
[16:10:35.508]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:35.508]                   if (TRUE && !signal) {
[16:10:35.508]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.508]                     {
[16:10:35.508]                       inherits <- base::inherits
[16:10:35.508]                       invokeRestart <- base::invokeRestart
[16:10:35.508]                       is.null <- base::is.null
[16:10:35.508]                       muffled <- FALSE
[16:10:35.508]                       if (inherits(cond, "message")) {
[16:10:35.508]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:35.508]                         if (muffled) 
[16:10:35.508]                           invokeRestart("muffleMessage")
[16:10:35.508]                       }
[16:10:35.508]                       else if (inherits(cond, "warning")) {
[16:10:35.508]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:35.508]                         if (muffled) 
[16:10:35.508]                           invokeRestart("muffleWarning")
[16:10:35.508]                       }
[16:10:35.508]                       else if (inherits(cond, "condition")) {
[16:10:35.508]                         if (!is.null(pattern)) {
[16:10:35.508]                           computeRestarts <- base::computeRestarts
[16:10:35.508]                           grepl <- base::grepl
[16:10:35.508]                           restarts <- computeRestarts(cond)
[16:10:35.508]                           for (restart in restarts) {
[16:10:35.508]                             name <- restart$name
[16:10:35.508]                             if (is.null(name)) 
[16:10:35.508]                               next
[16:10:35.508]                             if (!grepl(pattern, name)) 
[16:10:35.508]                               next
[16:10:35.508]                             invokeRestart(restart)
[16:10:35.508]                             muffled <- TRUE
[16:10:35.508]                             break
[16:10:35.508]                           }
[16:10:35.508]                         }
[16:10:35.508]                       }
[16:10:35.508]                       invisible(muffled)
[16:10:35.508]                     }
[16:10:35.508]                     muffleCondition(cond, pattern = "^muffle")
[16:10:35.508]                   }
[16:10:35.508]                 }
[16:10:35.508]                 else {
[16:10:35.508]                   if (TRUE) {
[16:10:35.508]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:35.508]                     {
[16:10:35.508]                       inherits <- base::inherits
[16:10:35.508]                       invokeRestart <- base::invokeRestart
[16:10:35.508]                       is.null <- base::is.null
[16:10:35.508]                       muffled <- FALSE
[16:10:35.508]                       if (inherits(cond, "message")) {
[16:10:35.508]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:35.508]                         if (muffled) 
[16:10:35.508]                           invokeRestart("muffleMessage")
[16:10:35.508]                       }
[16:10:35.508]                       else if (inherits(cond, "warning")) {
[16:10:35.508]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:35.508]                         if (muffled) 
[16:10:35.508]                           invokeRestart("muffleWarning")
[16:10:35.508]                       }
[16:10:35.508]                       else if (inherits(cond, "condition")) {
[16:10:35.508]                         if (!is.null(pattern)) {
[16:10:35.508]                           computeRestarts <- base::computeRestarts
[16:10:35.508]                           grepl <- base::grepl
[16:10:35.508]                           restarts <- computeRestarts(cond)
[16:10:35.508]                           for (restart in restarts) {
[16:10:35.508]                             name <- restart$name
[16:10:35.508]                             if (is.null(name)) 
[16:10:35.508]                               next
[16:10:35.508]                             if (!grepl(pattern, name)) 
[16:10:35.508]                               next
[16:10:35.508]                             invokeRestart(restart)
[16:10:35.508]                             muffled <- TRUE
[16:10:35.508]                             break
[16:10:35.508]                           }
[16:10:35.508]                         }
[16:10:35.508]                       }
[16:10:35.508]                       invisible(muffled)
[16:10:35.508]                     }
[16:10:35.508]                     muffleCondition(cond, pattern = "^muffle")
[16:10:35.508]                   }
[16:10:35.508]                 }
[16:10:35.508]             }
[16:10:35.508]         }))
[16:10:35.508]     }, error = function(ex) {
[16:10:35.508]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:35.508]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:35.508]                 ...future.rng), started = ...future.startTime, 
[16:10:35.508]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:35.508]             version = "1.8"), class = "FutureResult")
[16:10:35.508]     }, finally = {
[16:10:35.508]         if (!identical(...future.workdir, getwd())) 
[16:10:35.508]             setwd(...future.workdir)
[16:10:35.508]         {
[16:10:35.508]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:35.508]                 ...future.oldOptions$nwarnings <- NULL
[16:10:35.508]             }
[16:10:35.508]             base::options(...future.oldOptions)
[16:10:35.508]             if (.Platform$OS.type == "windows") {
[16:10:35.508]                 old_names <- names(...future.oldEnvVars)
[16:10:35.508]                 envs <- base::Sys.getenv()
[16:10:35.508]                 names <- names(envs)
[16:10:35.508]                 common <- intersect(names, old_names)
[16:10:35.508]                 added <- setdiff(names, old_names)
[16:10:35.508]                 removed <- setdiff(old_names, names)
[16:10:35.508]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:35.508]                   envs[common]]
[16:10:35.508]                 NAMES <- toupper(changed)
[16:10:35.508]                 args <- list()
[16:10:35.508]                 for (kk in seq_along(NAMES)) {
[16:10:35.508]                   name <- changed[[kk]]
[16:10:35.508]                   NAME <- NAMES[[kk]]
[16:10:35.508]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.508]                     next
[16:10:35.508]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:35.508]                 }
[16:10:35.508]                 NAMES <- toupper(added)
[16:10:35.508]                 for (kk in seq_along(NAMES)) {
[16:10:35.508]                   name <- added[[kk]]
[16:10:35.508]                   NAME <- NAMES[[kk]]
[16:10:35.508]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.508]                     next
[16:10:35.508]                   args[[name]] <- ""
[16:10:35.508]                 }
[16:10:35.508]                 NAMES <- toupper(removed)
[16:10:35.508]                 for (kk in seq_along(NAMES)) {
[16:10:35.508]                   name <- removed[[kk]]
[16:10:35.508]                   NAME <- NAMES[[kk]]
[16:10:35.508]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:35.508]                     next
[16:10:35.508]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:35.508]                 }
[16:10:35.508]                 if (length(args) > 0) 
[16:10:35.508]                   base::do.call(base::Sys.setenv, args = args)
[16:10:35.508]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:35.508]             }
[16:10:35.508]             else {
[16:10:35.508]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:35.508]             }
[16:10:35.508]             {
[16:10:35.508]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:35.508]                   0L) {
[16:10:35.508]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:35.508]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:35.508]                   base::options(opts)
[16:10:35.508]                 }
[16:10:35.508]                 {
[16:10:35.508]                   {
[16:10:35.508]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:35.508]                     NULL
[16:10:35.508]                   }
[16:10:35.508]                   options(future.plan = NULL)
[16:10:35.508]                   if (is.na(NA_character_)) 
[16:10:35.508]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:35.508]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:35.508]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:10:35.508]                     envir = parent.frame()) 
[16:10:35.508]                   {
[16:10:35.508]                     default_workers <- missing(workers)
[16:10:35.508]                     if (is.function(workers)) 
[16:10:35.508]                       workers <- workers()
[16:10:35.508]                     workers <- structure(as.integer(workers), 
[16:10:35.508]                       class = class(workers))
[16:10:35.508]                     stop_if_not(is.finite(workers), workers >= 
[16:10:35.508]                       1L)
[16:10:35.508]                     if ((workers == 1L && !inherits(workers, 
[16:10:35.508]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:10:35.508]                       if (default_workers) 
[16:10:35.508]                         supportsMulticore(warn = TRUE)
[16:10:35.508]                       return(sequential(..., envir = envir))
[16:10:35.508]                     }
[16:10:35.508]                     oopts <- options(mc.cores = workers)
[16:10:35.508]                     on.exit(options(oopts))
[16:10:35.508]                     future <- MulticoreFuture(..., workers = workers, 
[16:10:35.508]                       envir = envir)
[16:10:35.508]                     if (!future$lazy) 
[16:10:35.508]                       future <- run(future)
[16:10:35.508]                     invisible(future)
[16:10:35.508]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:35.508]                 }
[16:10:35.508]             }
[16:10:35.508]         }
[16:10:35.508]     })
[16:10:35.508]     if (TRUE) {
[16:10:35.508]         base::sink(type = "output", split = FALSE)
[16:10:35.508]         if (TRUE) {
[16:10:35.508]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:35.508]         }
[16:10:35.508]         else {
[16:10:35.508]             ...future.result["stdout"] <- base::list(NULL)
[16:10:35.508]         }
[16:10:35.508]         base::close(...future.stdout)
[16:10:35.508]         ...future.stdout <- NULL
[16:10:35.508]     }
[16:10:35.508]     ...future.result$conditions <- ...future.conditions
[16:10:35.508]     ...future.result$finished <- base::Sys.time()
[16:10:35.508]     ...future.result
[16:10:35.508] }
[16:10:35.512] assign_globals() ...
[16:10:35.515] List of 7
[16:10:35.515]  $ ...future.FUN            :function (...)  
[16:10:35.515]  $ foo                      :function (x = 1, y = 2)  
[16:10:35.515]  $ x                        : num 3
[16:10:35.515]  $ future.call.arguments    : list()
[16:10:35.515]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:35.515]  $ ...future.elements_ii    :List of 3
[16:10:35.515]   ..$ : int 0
[16:10:35.515]   ..$ : int 0
[16:10:35.515]   ..$ : int 0
[16:10:35.515]  $ ...future.seeds_ii       :List of 3
[16:10:35.515]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[16:10:35.515]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[16:10:35.515]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[16:10:35.515]  $ ...future.globals.maxSize: NULL
[16:10:35.515]  - attr(*, "resolved")= logi FALSE
[16:10:35.515]  - attr(*, "total_size")= num 2200
[16:10:35.515]  - attr(*, "where")=List of 7
[16:10:35.515]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:10:35.515]   ..$ foo                      :<environment: R_EmptyEnv> 
[16:10:35.515]   ..$ x                        :<environment: R_EmptyEnv> 
[16:10:35.515]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:10:35.515]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:10:35.515]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:10:35.515]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:10:35.515]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:35.515]  - attr(*, "already-done")= logi TRUE
[16:10:35.528] - reassign environment for ‘...future.FUN’
[16:10:35.528] - copied ‘...future.FUN’ to environment
[16:10:35.528] - reassign environment for ‘foo’
[16:10:35.528] - copied ‘foo’ to environment
[16:10:35.528] - copied ‘x’ to environment
[16:10:35.529] - copied ‘future.call.arguments’ to environment
[16:10:35.529] - copied ‘...future.elements_ii’ to environment
[16:10:35.529] - copied ‘...future.seeds_ii’ to environment
[16:10:35.529] - copied ‘...future.globals.maxSize’ to environment
[16:10:35.529] assign_globals() ... done
[16:10:35.529] requestCore(): workers = 2
[16:10:35.531] MulticoreFuture started
[16:10:35.532] - Launch lazy future ... done
[16:10:35.532] run() for ‘MulticoreFuture’ ... done
[16:10:35.532] Created future:
[16:10:35.533] plan(): Setting new future strategy stack:
[16:10:35.533] List of future strategies:
[16:10:35.533] 1. sequential:
[16:10:35.533]    - args: function (..., envir = parent.frame())
[16:10:35.533]    - tweaked: FALSE
[16:10:35.533]    - call: NULL
[16:10:35.534] plan(): nbrOfWorkers() = 1
[16:10:35.536] plan(): Setting new future strategy stack:
[16:10:35.536] List of future strategies:
[16:10:35.536] 1. multicore:
[16:10:35.536]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:10:35.536]    - tweaked: FALSE
[16:10:35.536]    - call: plan(strategy)
[16:10:35.542] plan(): nbrOfWorkers() = 2
[16:10:35.533] MulticoreFuture:
[16:10:35.533] Label: ‘future_replicate-2’
[16:10:35.533] Expression:
[16:10:35.533] {
[16:10:35.533]     do.call(function(...) {
[16:10:35.533]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:35.533]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:35.533]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:35.533]             on.exit(options(oopts), add = TRUE)
[16:10:35.533]         }
[16:10:35.533]         {
[16:10:35.533]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:35.533]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:35.533]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:35.533]                   envir = globalenv(), inherits = FALSE)
[16:10:35.533]                 ...future.FUN(...future.X_jj, ...)
[16:10:35.533]             })
[16:10:35.533]         }
[16:10:35.533]     }, args = future.call.arguments)
[16:10:35.533] }
[16:10:35.533] Lazy evaluation: FALSE
[16:10:35.533] Asynchronous evaluation: TRUE
[16:10:35.533] Local evaluation: TRUE
[16:10:35.533] Environment: 0x55cf8de87b18
[16:10:35.533] Capture standard output: TRUE
[16:10:35.533] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:35.533] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[16:10:35.533] Packages: <none>
[16:10:35.533] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:35.533] Resolved: TRUE
[16:10:35.533] Value: <not collected>
[16:10:35.533] Conditions captured: <none>
[16:10:35.533] Early signaling: FALSE
[16:10:35.533] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:35.533] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:35.543] Chunk #2 of 2 ... DONE
[16:10:35.543] Launching 2 futures (chunks) ... DONE
[16:10:35.543] Resolving 2 futures (chunks) ...
[16:10:35.543] resolve() on list ...
[16:10:35.543]  recursive: 0
[16:10:35.544]  length: 2
[16:10:35.544] 
[16:10:35.544] Future #1
[16:10:35.545] signalConditionsASAP(MulticoreFuture, pos=1) ...
[16:10:35.545] - nx: 2
[16:10:35.545] - relay: TRUE
[16:10:35.546] - stdout: TRUE
[16:10:35.546] - signal: TRUE
[16:10:35.546] - resignal: FALSE
[16:10:35.546] - force: TRUE
[16:10:35.546] - relayed: [n=2] FALSE, FALSE
[16:10:35.546] - queued futures: [n=2] FALSE, FALSE
[16:10:35.546]  - until=1
[16:10:35.547]  - relaying element #1
[16:10:35.547] - relayed: [n=2] TRUE, FALSE
[16:10:35.547] - queued futures: [n=2] TRUE, FALSE
[16:10:35.547] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[16:10:35.547]  length: 1 (resolved future 1)
[16:10:35.548] Future #2
[16:10:35.549] signalConditionsASAP(MulticoreFuture, pos=2) ...
[16:10:35.549] - nx: 2
[16:10:35.549] - relay: TRUE
[16:10:35.549] - stdout: TRUE
[16:10:35.549] - signal: TRUE
[16:10:35.549] - resignal: FALSE
[16:10:35.549] - force: TRUE
[16:10:35.549] - relayed: [n=2] TRUE, FALSE
[16:10:35.550] - queued futures: [n=2] TRUE, FALSE
[16:10:35.550]  - until=2
[16:10:35.550]  - relaying element #2
[16:10:35.550] - relayed: [n=2] TRUE, TRUE
[16:10:35.550] - queued futures: [n=2] TRUE, TRUE
[16:10:35.550] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[16:10:35.551]  length: 0 (resolved future 2)
[16:10:35.551] Relaying remaining futures
[16:10:35.551] signalConditionsASAP(NULL, pos=0) ...
[16:10:35.551] - nx: 2
[16:10:35.551] - relay: TRUE
[16:10:35.551] - stdout: TRUE
[16:10:35.551] - signal: TRUE
[16:10:35.551] - resignal: FALSE
[16:10:35.551] - force: TRUE
[16:10:35.551] - relayed: [n=2] TRUE, TRUE
[16:10:35.552] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:10:35.552] - relayed: [n=2] TRUE, TRUE
[16:10:35.552] - queued futures: [n=2] TRUE, TRUE
[16:10:35.552] signalConditionsASAP(NULL, pos=0) ... done
[16:10:35.552] resolve() on list ... DONE
[16:10:35.552]  - Number of value chunks collected: 2
[16:10:35.552] Resolving 2 futures (chunks) ... DONE
[16:10:35.553] Reducing values from 2 chunks ...
[16:10:35.553]  - Number of values collected after concatenation: 5
[16:10:35.553]  - Number of values expected: 5
[16:10:35.553] Reducing values from 2 chunks ... DONE
[16:10:35.553] future_lapply() ... DONE
[16:10:35.554] plan(): Setting new future strategy stack:
[16:10:35.554] List of future strategies:
[16:10:35.554] 1. sequential:
[16:10:35.554]    - args: function (..., envir = parent.frame())
[16:10:35.554]    - tweaked: FALSE
[16:10:35.554]    - call: plan(sequential)
[16:10:35.554] plan(): nbrOfWorkers() = 1
*** strategy = ‘multicore’ ... done
*** strategy = ‘multisession’ ...
[16:10:35.555] plan(): Setting new future strategy stack:
[16:10:35.555] List of future strategies:
[16:10:35.555] 1. multisession:
[16:10:35.555]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:10:35.555]    - tweaked: FALSE
[16:10:35.555]    - call: plan(strategy)
[16:10:35.555] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:10:35.556] multisession:
[16:10:35.556] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:10:35.556] - tweaked: FALSE
[16:10:35.556] - call: plan(strategy)
[16:10:35.565] getGlobalsAndPackages() ...
[16:10:35.565] Not searching for globals
[16:10:35.565] - globals: [0] <none>
[16:10:35.565] getGlobalsAndPackages() ... DONE
[16:10:35.566] [local output] makeClusterPSOCK() ...
[16:10:35.605] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:10:35.610] [local output] Base port: 11117
[16:10:35.610] [local output] Getting setup options for 2 cluster nodes ...
[16:10:35.610] [local output]  - Node 1 of 2 ...
[16:10:35.611] [local output] localMachine=TRUE => revtunnel=FALSE

[16:10:35.611] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpLZUJI0/worker.rank=1.parallelly.parent=76232.129c841380c72.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpLZUJI0/worker.rank=1.parallelly.parent=76232.129c841380c72.pid")'’
[16:10:35.798] - Possible to infer worker's PID: TRUE
[16:10:35.798] [local output] Rscript port: 11117

[16:10:35.799] [local output]  - Node 2 of 2 ...
[16:10:35.799] [local output] localMachine=TRUE => revtunnel=FALSE

[16:10:35.800] [local output] Rscript port: 11117

[16:10:35.800] [local output] Getting setup options for 2 cluster nodes ... done
[16:10:35.800] [local output]  - Parallel setup requested for some PSOCK nodes
[16:10:35.801] [local output] Setting up PSOCK nodes in parallel
[16:10:35.801] List of 36
[16:10:35.801]  $ worker          : chr "localhost"
[16:10:35.801]   ..- attr(*, "localhost")= logi TRUE
[16:10:35.801]  $ master          : chr "localhost"
[16:10:35.801]  $ port            : int 11117
[16:10:35.801]  $ connectTimeout  : num 120
[16:10:35.801]  $ timeout         : num 2592000
[16:10:35.801]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:10:35.801]  $ homogeneous     : logi TRUE
[16:10:35.801]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:10:35.801]  $ rscript_envs    : NULL
[16:10:35.801]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:10:35.801]  $ rscript_startup : NULL
[16:10:35.801]  $ rscript_sh      : chr "sh"
[16:10:35.801]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:10:35.801]  $ methods         : logi TRUE
[16:10:35.801]  $ socketOptions   : chr "no-delay"
[16:10:35.801]  $ useXDR          : logi FALSE
[16:10:35.801]  $ outfile         : chr "/dev/null"
[16:10:35.801]  $ renice          : int NA
[16:10:35.801]  $ rshcmd          : NULL
[16:10:35.801]  $ user            : chr(0) 
[16:10:35.801]  $ revtunnel       : logi FALSE
[16:10:35.801]  $ rshlogfile      : NULL
[16:10:35.801]  $ rshopts         : chr(0) 
[16:10:35.801]  $ rank            : int 1
[16:10:35.801]  $ manual          : logi FALSE
[16:10:35.801]  $ dryrun          : logi FALSE
[16:10:35.801]  $ quiet           : logi FALSE
[16:10:35.801]  $ setup_strategy  : chr "parallel"
[16:10:35.801]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:10:35.801]  $ pidfile         : chr "/tmp/RtmpLZUJI0/worker.rank=1.parallelly.parent=76232.129c841380c72.pid"
[16:10:35.801]  $ rshcmd_label    : NULL
[16:10:35.801]  $ rsh_call        : NULL
[16:10:35.801]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:10:35.801]  $ localMachine    : logi TRUE
[16:10:35.801]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:10:35.801]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:10:35.801]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:10:35.801]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:10:35.801]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:10:35.801]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:10:35.801]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:10:35.801]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:10:35.801]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:10:35.801]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:10:35.801]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:10:35.801]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:10:35.801]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:10:35.801]  $ arguments       :List of 28
[16:10:35.801]   ..$ worker          : chr "localhost"
[16:10:35.801]   ..$ master          : NULL
[16:10:35.801]   ..$ port            : int 11117
[16:10:35.801]   ..$ connectTimeout  : num 120
[16:10:35.801]   ..$ timeout         : num 2592000
[16:10:35.801]   ..$ rscript         : NULL
[16:10:35.801]   ..$ homogeneous     : NULL
[16:10:35.801]   ..$ rscript_args    : NULL
[16:10:35.801]   ..$ rscript_envs    : NULL
[16:10:35.801]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:10:35.801]   ..$ rscript_startup : NULL
[16:10:35.801]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:10:35.801]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:10:35.801]   ..$ methods         : logi TRUE
[16:10:35.801]   ..$ socketOptions   : chr "no-delay"
[16:10:35.801]   ..$ useXDR          : logi FALSE
[16:10:35.801]   ..$ outfile         : chr "/dev/null"
[16:10:35.801]   ..$ renice          : int NA
[16:10:35.801]   ..$ rshcmd          : NULL
[16:10:35.801]   ..$ user            : NULL
[16:10:35.801]   ..$ revtunnel       : logi NA
[16:10:35.801]   ..$ rshlogfile      : NULL
[16:10:35.801]   ..$ rshopts         : NULL
[16:10:35.801]   ..$ rank            : int 1
[16:10:35.801]   ..$ manual          : logi FALSE
[16:10:35.801]   ..$ dryrun          : logi FALSE
[16:10:35.801]   ..$ quiet           : logi FALSE
[16:10:35.801]   ..$ setup_strategy  : chr "parallel"
[16:10:35.801]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:10:35.818] [local output] System call to launch all workers:
[16:10:35.818] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpLZUJI0/worker.rank=1.parallelly.parent=76232.129c841380c72.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11117 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:10:35.818] [local output] Starting PSOCK main server
[16:10:35.819] [local output] Workers launched
[16:10:35.820] [local output] Waiting for workers to connect back
[16:10:35.820]  - [local output] 0 workers out of 2 ready
[16:10:36.062]  - [local output] 0 workers out of 2 ready
[16:10:36.062]  - [local output] 1 workers out of 2 ready
[16:10:36.066]  - [local output] 1 workers out of 2 ready
[16:10:36.066]  - [local output] 2 workers out of 2 ready
[16:10:36.067] [local output] Launching of workers completed
[16:10:36.067] [local output] Collecting session information from workers
[16:10:36.067] [local output]  - Worker #1 of 2
[16:10:36.068] [local output]  - Worker #2 of 2
[16:10:36.068] [local output] makeClusterPSOCK() ... done
[16:10:36.080] Packages needed by the future expression (n = 0): <none>
[16:10:36.080] Packages needed by future strategies (n = 0): <none>
[16:10:36.081] {
[16:10:36.081]     {
[16:10:36.081]         {
[16:10:36.081]             ...future.startTime <- base::Sys.time()
[16:10:36.081]             {
[16:10:36.081]                 {
[16:10:36.081]                   {
[16:10:36.081]                     {
[16:10:36.081]                       base::local({
[16:10:36.081]                         has_future <- base::requireNamespace("future", 
[16:10:36.081]                           quietly = TRUE)
[16:10:36.081]                         if (has_future) {
[16:10:36.081]                           ns <- base::getNamespace("future")
[16:10:36.081]                           version <- ns[[".package"]][["version"]]
[16:10:36.081]                           if (is.null(version)) 
[16:10:36.081]                             version <- utils::packageVersion("future")
[16:10:36.081]                         }
[16:10:36.081]                         else {
[16:10:36.081]                           version <- NULL
[16:10:36.081]                         }
[16:10:36.081]                         if (!has_future || version < "1.8.0") {
[16:10:36.081]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:36.081]                             "", base::R.version$version.string), 
[16:10:36.081]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:36.081]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:36.081]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:36.081]                               "release", "version")], collapse = " "), 
[16:10:36.081]                             hostname = base::Sys.info()[["nodename"]])
[16:10:36.081]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:36.081]                             info)
[16:10:36.081]                           info <- base::paste(info, collapse = "; ")
[16:10:36.081]                           if (!has_future) {
[16:10:36.081]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:36.081]                               info)
[16:10:36.081]                           }
[16:10:36.081]                           else {
[16:10:36.081]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:36.081]                               info, version)
[16:10:36.081]                           }
[16:10:36.081]                           base::stop(msg)
[16:10:36.081]                         }
[16:10:36.081]                       })
[16:10:36.081]                     }
[16:10:36.081]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:36.081]                     base::options(mc.cores = 1L)
[16:10:36.081]                   }
[16:10:36.081]                   options(future.plan = NULL)
[16:10:36.081]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:36.081]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:36.081]                 }
[16:10:36.081]                 ...future.workdir <- getwd()
[16:10:36.081]             }
[16:10:36.081]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:36.081]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:36.081]         }
[16:10:36.081]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:36.081]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:10:36.081]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:36.081]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:36.081]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:36.081]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:36.081]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:36.081]             base::names(...future.oldOptions))
[16:10:36.081]     }
[16:10:36.081]     if (FALSE) {
[16:10:36.081]     }
[16:10:36.081]     else {
[16:10:36.081]         if (TRUE) {
[16:10:36.081]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:36.081]                 open = "w")
[16:10:36.081]         }
[16:10:36.081]         else {
[16:10:36.081]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:36.081]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:36.081]         }
[16:10:36.081]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:36.081]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:36.081]             base::sink(type = "output", split = FALSE)
[16:10:36.081]             base::close(...future.stdout)
[16:10:36.081]         }, add = TRUE)
[16:10:36.081]     }
[16:10:36.081]     ...future.frame <- base::sys.nframe()
[16:10:36.081]     ...future.conditions <- base::list()
[16:10:36.081]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:36.081]     if (FALSE) {
[16:10:36.081]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:36.081]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:36.081]     }
[16:10:36.081]     ...future.result <- base::tryCatch({
[16:10:36.081]         base::withCallingHandlers({
[16:10:36.081]             ...future.value <- base::withVisible(base::local({
[16:10:36.081]                 ...future.makeSendCondition <- local({
[16:10:36.081]                   sendCondition <- NULL
[16:10:36.081]                   function(frame = 1L) {
[16:10:36.081]                     if (is.function(sendCondition)) 
[16:10:36.081]                       return(sendCondition)
[16:10:36.081]                     ns <- getNamespace("parallel")
[16:10:36.081]                     if (exists("sendData", mode = "function", 
[16:10:36.081]                       envir = ns)) {
[16:10:36.081]                       parallel_sendData <- get("sendData", mode = "function", 
[16:10:36.081]                         envir = ns)
[16:10:36.081]                       envir <- sys.frame(frame)
[16:10:36.081]                       master <- NULL
[16:10:36.081]                       while (!identical(envir, .GlobalEnv) && 
[16:10:36.081]                         !identical(envir, emptyenv())) {
[16:10:36.081]                         if (exists("master", mode = "list", envir = envir, 
[16:10:36.081]                           inherits = FALSE)) {
[16:10:36.081]                           master <- get("master", mode = "list", 
[16:10:36.081]                             envir = envir, inherits = FALSE)
[16:10:36.081]                           if (inherits(master, c("SOCKnode", 
[16:10:36.081]                             "SOCK0node"))) {
[16:10:36.081]                             sendCondition <<- function(cond) {
[16:10:36.081]                               data <- list(type = "VALUE", value = cond, 
[16:10:36.081]                                 success = TRUE)
[16:10:36.081]                               parallel_sendData(master, data)
[16:10:36.081]                             }
[16:10:36.081]                             return(sendCondition)
[16:10:36.081]                           }
[16:10:36.081]                         }
[16:10:36.081]                         frame <- frame + 1L
[16:10:36.081]                         envir <- sys.frame(frame)
[16:10:36.081]                       }
[16:10:36.081]                     }
[16:10:36.081]                     sendCondition <<- function(cond) NULL
[16:10:36.081]                   }
[16:10:36.081]                 })
[16:10:36.081]                 withCallingHandlers({
[16:10:36.081]                   NA
[16:10:36.081]                 }, immediateCondition = function(cond) {
[16:10:36.081]                   sendCondition <- ...future.makeSendCondition()
[16:10:36.081]                   sendCondition(cond)
[16:10:36.081]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.081]                   {
[16:10:36.081]                     inherits <- base::inherits
[16:10:36.081]                     invokeRestart <- base::invokeRestart
[16:10:36.081]                     is.null <- base::is.null
[16:10:36.081]                     muffled <- FALSE
[16:10:36.081]                     if (inherits(cond, "message")) {
[16:10:36.081]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:36.081]                       if (muffled) 
[16:10:36.081]                         invokeRestart("muffleMessage")
[16:10:36.081]                     }
[16:10:36.081]                     else if (inherits(cond, "warning")) {
[16:10:36.081]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:36.081]                       if (muffled) 
[16:10:36.081]                         invokeRestart("muffleWarning")
[16:10:36.081]                     }
[16:10:36.081]                     else if (inherits(cond, "condition")) {
[16:10:36.081]                       if (!is.null(pattern)) {
[16:10:36.081]                         computeRestarts <- base::computeRestarts
[16:10:36.081]                         grepl <- base::grepl
[16:10:36.081]                         restarts <- computeRestarts(cond)
[16:10:36.081]                         for (restart in restarts) {
[16:10:36.081]                           name <- restart$name
[16:10:36.081]                           if (is.null(name)) 
[16:10:36.081]                             next
[16:10:36.081]                           if (!grepl(pattern, name)) 
[16:10:36.081]                             next
[16:10:36.081]                           invokeRestart(restart)
[16:10:36.081]                           muffled <- TRUE
[16:10:36.081]                           break
[16:10:36.081]                         }
[16:10:36.081]                       }
[16:10:36.081]                     }
[16:10:36.081]                     invisible(muffled)
[16:10:36.081]                   }
[16:10:36.081]                   muffleCondition(cond)
[16:10:36.081]                 })
[16:10:36.081]             }))
[16:10:36.081]             future::FutureResult(value = ...future.value$value, 
[16:10:36.081]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:36.081]                   ...future.rng), globalenv = if (FALSE) 
[16:10:36.081]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:36.081]                     ...future.globalenv.names))
[16:10:36.081]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:36.081]         }, condition = base::local({
[16:10:36.081]             c <- base::c
[16:10:36.081]             inherits <- base::inherits
[16:10:36.081]             invokeRestart <- base::invokeRestart
[16:10:36.081]             length <- base::length
[16:10:36.081]             list <- base::list
[16:10:36.081]             seq.int <- base::seq.int
[16:10:36.081]             signalCondition <- base::signalCondition
[16:10:36.081]             sys.calls <- base::sys.calls
[16:10:36.081]             `[[` <- base::`[[`
[16:10:36.081]             `+` <- base::`+`
[16:10:36.081]             `<<-` <- base::`<<-`
[16:10:36.081]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:36.081]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:36.081]                   3L)]
[16:10:36.081]             }
[16:10:36.081]             function(cond) {
[16:10:36.081]                 is_error <- inherits(cond, "error")
[16:10:36.081]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:36.081]                   NULL)
[16:10:36.081]                 if (is_error) {
[16:10:36.081]                   sessionInformation <- function() {
[16:10:36.081]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:36.081]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:36.081]                       search = base::search(), system = base::Sys.info())
[16:10:36.081]                   }
[16:10:36.081]                   ...future.conditions[[length(...future.conditions) + 
[16:10:36.081]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:36.081]                     cond$call), session = sessionInformation(), 
[16:10:36.081]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:36.081]                   signalCondition(cond)
[16:10:36.081]                 }
[16:10:36.081]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:36.081]                 "immediateCondition"))) {
[16:10:36.081]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:36.081]                   ...future.conditions[[length(...future.conditions) + 
[16:10:36.081]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:36.081]                   if (TRUE && !signal) {
[16:10:36.081]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.081]                     {
[16:10:36.081]                       inherits <- base::inherits
[16:10:36.081]                       invokeRestart <- base::invokeRestart
[16:10:36.081]                       is.null <- base::is.null
[16:10:36.081]                       muffled <- FALSE
[16:10:36.081]                       if (inherits(cond, "message")) {
[16:10:36.081]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:36.081]                         if (muffled) 
[16:10:36.081]                           invokeRestart("muffleMessage")
[16:10:36.081]                       }
[16:10:36.081]                       else if (inherits(cond, "warning")) {
[16:10:36.081]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:36.081]                         if (muffled) 
[16:10:36.081]                           invokeRestart("muffleWarning")
[16:10:36.081]                       }
[16:10:36.081]                       else if (inherits(cond, "condition")) {
[16:10:36.081]                         if (!is.null(pattern)) {
[16:10:36.081]                           computeRestarts <- base::computeRestarts
[16:10:36.081]                           grepl <- base::grepl
[16:10:36.081]                           restarts <- computeRestarts(cond)
[16:10:36.081]                           for (restart in restarts) {
[16:10:36.081]                             name <- restart$name
[16:10:36.081]                             if (is.null(name)) 
[16:10:36.081]                               next
[16:10:36.081]                             if (!grepl(pattern, name)) 
[16:10:36.081]                               next
[16:10:36.081]                             invokeRestart(restart)
[16:10:36.081]                             muffled <- TRUE
[16:10:36.081]                             break
[16:10:36.081]                           }
[16:10:36.081]                         }
[16:10:36.081]                       }
[16:10:36.081]                       invisible(muffled)
[16:10:36.081]                     }
[16:10:36.081]                     muffleCondition(cond, pattern = "^muffle")
[16:10:36.081]                   }
[16:10:36.081]                 }
[16:10:36.081]                 else {
[16:10:36.081]                   if (TRUE) {
[16:10:36.081]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.081]                     {
[16:10:36.081]                       inherits <- base::inherits
[16:10:36.081]                       invokeRestart <- base::invokeRestart
[16:10:36.081]                       is.null <- base::is.null
[16:10:36.081]                       muffled <- FALSE
[16:10:36.081]                       if (inherits(cond, "message")) {
[16:10:36.081]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:36.081]                         if (muffled) 
[16:10:36.081]                           invokeRestart("muffleMessage")
[16:10:36.081]                       }
[16:10:36.081]                       else if (inherits(cond, "warning")) {
[16:10:36.081]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:36.081]                         if (muffled) 
[16:10:36.081]                           invokeRestart("muffleWarning")
[16:10:36.081]                       }
[16:10:36.081]                       else if (inherits(cond, "condition")) {
[16:10:36.081]                         if (!is.null(pattern)) {
[16:10:36.081]                           computeRestarts <- base::computeRestarts
[16:10:36.081]                           grepl <- base::grepl
[16:10:36.081]                           restarts <- computeRestarts(cond)
[16:10:36.081]                           for (restart in restarts) {
[16:10:36.081]                             name <- restart$name
[16:10:36.081]                             if (is.null(name)) 
[16:10:36.081]                               next
[16:10:36.081]                             if (!grepl(pattern, name)) 
[16:10:36.081]                               next
[16:10:36.081]                             invokeRestart(restart)
[16:10:36.081]                             muffled <- TRUE
[16:10:36.081]                             break
[16:10:36.081]                           }
[16:10:36.081]                         }
[16:10:36.081]                       }
[16:10:36.081]                       invisible(muffled)
[16:10:36.081]                     }
[16:10:36.081]                     muffleCondition(cond, pattern = "^muffle")
[16:10:36.081]                   }
[16:10:36.081]                 }
[16:10:36.081]             }
[16:10:36.081]         }))
[16:10:36.081]     }, error = function(ex) {
[16:10:36.081]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:36.081]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:36.081]                 ...future.rng), started = ...future.startTime, 
[16:10:36.081]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:36.081]             version = "1.8"), class = "FutureResult")
[16:10:36.081]     }, finally = {
[16:10:36.081]         if (!identical(...future.workdir, getwd())) 
[16:10:36.081]             setwd(...future.workdir)
[16:10:36.081]         {
[16:10:36.081]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:36.081]                 ...future.oldOptions$nwarnings <- NULL
[16:10:36.081]             }
[16:10:36.081]             base::options(...future.oldOptions)
[16:10:36.081]             if (.Platform$OS.type == "windows") {
[16:10:36.081]                 old_names <- names(...future.oldEnvVars)
[16:10:36.081]                 envs <- base::Sys.getenv()
[16:10:36.081]                 names <- names(envs)
[16:10:36.081]                 common <- intersect(names, old_names)
[16:10:36.081]                 added <- setdiff(names, old_names)
[16:10:36.081]                 removed <- setdiff(old_names, names)
[16:10:36.081]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:36.081]                   envs[common]]
[16:10:36.081]                 NAMES <- toupper(changed)
[16:10:36.081]                 args <- list()
[16:10:36.081]                 for (kk in seq_along(NAMES)) {
[16:10:36.081]                   name <- changed[[kk]]
[16:10:36.081]                   NAME <- NAMES[[kk]]
[16:10:36.081]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.081]                     next
[16:10:36.081]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:36.081]                 }
[16:10:36.081]                 NAMES <- toupper(added)
[16:10:36.081]                 for (kk in seq_along(NAMES)) {
[16:10:36.081]                   name <- added[[kk]]
[16:10:36.081]                   NAME <- NAMES[[kk]]
[16:10:36.081]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.081]                     next
[16:10:36.081]                   args[[name]] <- ""
[16:10:36.081]                 }
[16:10:36.081]                 NAMES <- toupper(removed)
[16:10:36.081]                 for (kk in seq_along(NAMES)) {
[16:10:36.081]                   name <- removed[[kk]]
[16:10:36.081]                   NAME <- NAMES[[kk]]
[16:10:36.081]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.081]                     next
[16:10:36.081]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:36.081]                 }
[16:10:36.081]                 if (length(args) > 0) 
[16:10:36.081]                   base::do.call(base::Sys.setenv, args = args)
[16:10:36.081]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:36.081]             }
[16:10:36.081]             else {
[16:10:36.081]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:36.081]             }
[16:10:36.081]             {
[16:10:36.081]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:36.081]                   0L) {
[16:10:36.081]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:36.081]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:36.081]                   base::options(opts)
[16:10:36.081]                 }
[16:10:36.081]                 {
[16:10:36.081]                   {
[16:10:36.081]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:36.081]                     NULL
[16:10:36.081]                   }
[16:10:36.081]                   options(future.plan = NULL)
[16:10:36.081]                   if (is.na(NA_character_)) 
[16:10:36.081]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:36.081]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:36.081]                   future::plan(list(function (..., workers = availableCores(), 
[16:10:36.081]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:10:36.081]                     envir = parent.frame()) 
[16:10:36.081]                   {
[16:10:36.081]                     if (is.function(workers)) 
[16:10:36.081]                       workers <- workers()
[16:10:36.081]                     workers <- structure(as.integer(workers), 
[16:10:36.081]                       class = class(workers))
[16:10:36.081]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:10:36.081]                       workers >= 1)
[16:10:36.081]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:10:36.081]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:10:36.081]                     }
[16:10:36.081]                     future <- MultisessionFuture(..., workers = workers, 
[16:10:36.081]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:10:36.081]                       envir = envir)
[16:10:36.081]                     if (!future$lazy) 
[16:10:36.081]                       future <- run(future)
[16:10:36.081]                     invisible(future)
[16:10:36.081]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:36.081]                 }
[16:10:36.081]             }
[16:10:36.081]         }
[16:10:36.081]     })
[16:10:36.081]     if (TRUE) {
[16:10:36.081]         base::sink(type = "output", split = FALSE)
[16:10:36.081]         if (TRUE) {
[16:10:36.081]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:36.081]         }
[16:10:36.081]         else {
[16:10:36.081]             ...future.result["stdout"] <- base::list(NULL)
[16:10:36.081]         }
[16:10:36.081]         base::close(...future.stdout)
[16:10:36.081]         ...future.stdout <- NULL
[16:10:36.081]     }
[16:10:36.081]     ...future.result$conditions <- ...future.conditions
[16:10:36.081]     ...future.result$finished <- base::Sys.time()
[16:10:36.081]     ...future.result
[16:10:36.081] }
[16:10:36.151] MultisessionFuture started
[16:10:36.151] result() for ClusterFuture ...
[16:10:36.152] receiveMessageFromWorker() for ClusterFuture ...
[16:10:36.152] - Validating connection of MultisessionFuture
[16:10:36.182] - received message: FutureResult
[16:10:36.183] - Received FutureResult
[16:10:36.183] - Erased future from FutureRegistry
[16:10:36.183] result() for ClusterFuture ...
[16:10:36.183] - result already collected: FutureResult
[16:10:36.183] result() for ClusterFuture ... done
[16:10:36.183] receiveMessageFromWorker() for ClusterFuture ... done
[16:10:36.183] result() for ClusterFuture ... done
[16:10:36.184] result() for ClusterFuture ...
[16:10:36.184] - result already collected: FutureResult
[16:10:36.184] result() for ClusterFuture ... done
[16:10:36.184] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:10:36.187] plan(): nbrOfWorkers() = 2
[16:10:36.188] future_lapply() ...
[16:10:36.188] Generating random seeds ...
[16:10:36.189] Generating random seed streams for 5 elements ...
[16:10:36.189] Generating random seed streams for 5 elements ... DONE
[16:10:36.189] Generating random seeds ... DONE
[16:10:36.189] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:10:36.193] Number of chunks: 2
[16:10:36.193] getGlobalsAndPackagesXApply() ...
[16:10:36.193]  - future.globals: TRUE
[16:10:36.193] getGlobalsAndPackages() ...
[16:10:36.194] Searching for globals...
[16:10:36.195] - globals found: [2] ‘FUN’, ‘sample’
[16:10:36.195] Searching for globals ... DONE
[16:10:36.195] Resolving globals: FALSE
[16:10:36.196] The total size of the 1 globals is 616 bytes (616 bytes)
[16:10:36.196] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:10:36.196] - globals: [1] ‘FUN’
[16:10:36.196] 
[16:10:36.196] getGlobalsAndPackages() ... DONE
[16:10:36.196]  - globals found/used: [n=1] ‘FUN’
[16:10:36.197]  - needed namespaces: [n=0] 
[16:10:36.197] Finding globals ... DONE
[16:10:36.197]  - use_args: TRUE
[16:10:36.197]  - Getting '...' globals ...
[16:10:36.197] resolve() on list ...
[16:10:36.197]  recursive: 0
[16:10:36.198]  length: 1
[16:10:36.198]  elements: ‘...’
[16:10:36.198]  length: 0 (resolved future 1)
[16:10:36.198] resolve() on list ... DONE
[16:10:36.198]    - '...' content: [n=0] 
[16:10:36.198] List of 1
[16:10:36.198]  $ ...: list()
[16:10:36.198]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:36.198]  - attr(*, "where")=List of 1
[16:10:36.198]   ..$ ...:<environment: 0x55cf8faea408> 
[16:10:36.198]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:36.198]  - attr(*, "resolved")= logi TRUE
[16:10:36.198]  - attr(*, "total_size")= num NA
[16:10:36.201]  - Getting '...' globals ... DONE
[16:10:36.202] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:10:36.202] List of 2
[16:10:36.202]  $ ...future.FUN:function (...)  
[16:10:36.202]  $ ...          : list()
[16:10:36.202]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:36.202]  - attr(*, "where")=List of 2
[16:10:36.202]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:10:36.202]   ..$ ...          :<environment: 0x55cf8faea408> 
[16:10:36.202]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:36.202]  - attr(*, "resolved")= logi FALSE
[16:10:36.202]  - attr(*, "total_size")= num 616
[16:10:36.205] Packages to be attached in all futures: [n=0] 
[16:10:36.205] getGlobalsAndPackagesXApply() ... DONE
[16:10:36.205] Number of futures (= number of chunks): 2
[16:10:36.206] Launching 2 futures (chunks) ...
[16:10:36.206] Chunk #1 of 2 ...
[16:10:36.206]  - Finding globals in 'X' for chunk #1 ...
[16:10:36.206] getGlobalsAndPackages() ...
[16:10:36.206] Searching for globals...
[16:10:36.206] 
[16:10:36.206] Searching for globals ... DONE
[16:10:36.207] - globals: [0] <none>
[16:10:36.207] getGlobalsAndPackages() ... DONE
[16:10:36.207]    + additional globals found: [n=0] 
[16:10:36.207]    + additional namespaces needed: [n=0] 
[16:10:36.207]  - Finding globals in 'X' for chunk #1 ... DONE
[16:10:36.207]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:10:36.207]  - seeds: [2] <seeds>
[16:10:36.207] getGlobalsAndPackages() ...
[16:10:36.207] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:36.208] Resolving globals: FALSE
[16:10:36.208] Tweak future expression to call with '...' arguments ...
[16:10:36.208] {
[16:10:36.208]     do.call(function(...) {
[16:10:36.208]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.208]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:36.208]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.208]             on.exit(options(oopts), add = TRUE)
[16:10:36.208]         }
[16:10:36.208]         {
[16:10:36.208]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:36.208]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.208]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.208]                   envir = globalenv(), inherits = FALSE)
[16:10:36.208]                 ...future.FUN(...future.X_jj, ...)
[16:10:36.208]             })
[16:10:36.208]         }
[16:10:36.208]     }, args = future.call.arguments)
[16:10:36.208] }
[16:10:36.208] Tweak future expression to call with '...' arguments ... DONE
[16:10:36.209] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:36.209] 
[16:10:36.209] getGlobalsAndPackages() ... DONE
[16:10:36.209] run() for ‘Future’ ...
[16:10:36.209] - state: ‘created’
[16:10:36.210] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:10:36.225] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:36.225] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:10:36.225]   - Field: ‘node’
[16:10:36.225]   - Field: ‘label’
[16:10:36.225]   - Field: ‘local’
[16:10:36.225]   - Field: ‘owner’
[16:10:36.225]   - Field: ‘envir’
[16:10:36.225]   - Field: ‘workers’
[16:10:36.225]   - Field: ‘packages’
[16:10:36.226]   - Field: ‘gc’
[16:10:36.226]   - Field: ‘conditions’
[16:10:36.226]   - Field: ‘persistent’
[16:10:36.226]   - Field: ‘expr’
[16:10:36.226]   - Field: ‘uuid’
[16:10:36.226]   - Field: ‘seed’
[16:10:36.226]   - Field: ‘version’
[16:10:36.226]   - Field: ‘result’
[16:10:36.227]   - Field: ‘asynchronous’
[16:10:36.227]   - Field: ‘calls’
[16:10:36.227]   - Field: ‘globals’
[16:10:36.227]   - Field: ‘stdout’
[16:10:36.227]   - Field: ‘earlySignal’
[16:10:36.227]   - Field: ‘lazy’
[16:10:36.227]   - Field: ‘state’
[16:10:36.227] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:10:36.227] - Launch lazy future ...
[16:10:36.228] Packages needed by the future expression (n = 0): <none>
[16:10:36.228] Packages needed by future strategies (n = 0): <none>
[16:10:36.228] {
[16:10:36.228]     {
[16:10:36.228]         {
[16:10:36.228]             ...future.startTime <- base::Sys.time()
[16:10:36.228]             {
[16:10:36.228]                 {
[16:10:36.228]                   {
[16:10:36.228]                     {
[16:10:36.228]                       base::local({
[16:10:36.228]                         has_future <- base::requireNamespace("future", 
[16:10:36.228]                           quietly = TRUE)
[16:10:36.228]                         if (has_future) {
[16:10:36.228]                           ns <- base::getNamespace("future")
[16:10:36.228]                           version <- ns[[".package"]][["version"]]
[16:10:36.228]                           if (is.null(version)) 
[16:10:36.228]                             version <- utils::packageVersion("future")
[16:10:36.228]                         }
[16:10:36.228]                         else {
[16:10:36.228]                           version <- NULL
[16:10:36.228]                         }
[16:10:36.228]                         if (!has_future || version < "1.8.0") {
[16:10:36.228]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:36.228]                             "", base::R.version$version.string), 
[16:10:36.228]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:36.228]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:36.228]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:36.228]                               "release", "version")], collapse = " "), 
[16:10:36.228]                             hostname = base::Sys.info()[["nodename"]])
[16:10:36.228]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:36.228]                             info)
[16:10:36.228]                           info <- base::paste(info, collapse = "; ")
[16:10:36.228]                           if (!has_future) {
[16:10:36.228]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:36.228]                               info)
[16:10:36.228]                           }
[16:10:36.228]                           else {
[16:10:36.228]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:36.228]                               info, version)
[16:10:36.228]                           }
[16:10:36.228]                           base::stop(msg)
[16:10:36.228]                         }
[16:10:36.228]                       })
[16:10:36.228]                     }
[16:10:36.228]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:36.228]                     base::options(mc.cores = 1L)
[16:10:36.228]                   }
[16:10:36.228]                   options(future.plan = NULL)
[16:10:36.228]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:36.228]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:36.228]                 }
[16:10:36.228]                 ...future.workdir <- getwd()
[16:10:36.228]             }
[16:10:36.228]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:36.228]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:36.228]         }
[16:10:36.228]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:36.228]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:10:36.228]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:36.228]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:36.228]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:36.228]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:36.228]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:36.228]             base::names(...future.oldOptions))
[16:10:36.228]     }
[16:10:36.228]     if (FALSE) {
[16:10:36.228]     }
[16:10:36.228]     else {
[16:10:36.228]         if (TRUE) {
[16:10:36.228]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:36.228]                 open = "w")
[16:10:36.228]         }
[16:10:36.228]         else {
[16:10:36.228]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:36.228]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:36.228]         }
[16:10:36.228]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:36.228]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:36.228]             base::sink(type = "output", split = FALSE)
[16:10:36.228]             base::close(...future.stdout)
[16:10:36.228]         }, add = TRUE)
[16:10:36.228]     }
[16:10:36.228]     ...future.frame <- base::sys.nframe()
[16:10:36.228]     ...future.conditions <- base::list()
[16:10:36.228]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:36.228]     if (FALSE) {
[16:10:36.228]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:36.228]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:36.228]     }
[16:10:36.228]     ...future.result <- base::tryCatch({
[16:10:36.228]         base::withCallingHandlers({
[16:10:36.228]             ...future.value <- base::withVisible(base::local({
[16:10:36.228]                 ...future.makeSendCondition <- local({
[16:10:36.228]                   sendCondition <- NULL
[16:10:36.228]                   function(frame = 1L) {
[16:10:36.228]                     if (is.function(sendCondition)) 
[16:10:36.228]                       return(sendCondition)
[16:10:36.228]                     ns <- getNamespace("parallel")
[16:10:36.228]                     if (exists("sendData", mode = "function", 
[16:10:36.228]                       envir = ns)) {
[16:10:36.228]                       parallel_sendData <- get("sendData", mode = "function", 
[16:10:36.228]                         envir = ns)
[16:10:36.228]                       envir <- sys.frame(frame)
[16:10:36.228]                       master <- NULL
[16:10:36.228]                       while (!identical(envir, .GlobalEnv) && 
[16:10:36.228]                         !identical(envir, emptyenv())) {
[16:10:36.228]                         if (exists("master", mode = "list", envir = envir, 
[16:10:36.228]                           inherits = FALSE)) {
[16:10:36.228]                           master <- get("master", mode = "list", 
[16:10:36.228]                             envir = envir, inherits = FALSE)
[16:10:36.228]                           if (inherits(master, c("SOCKnode", 
[16:10:36.228]                             "SOCK0node"))) {
[16:10:36.228]                             sendCondition <<- function(cond) {
[16:10:36.228]                               data <- list(type = "VALUE", value = cond, 
[16:10:36.228]                                 success = TRUE)
[16:10:36.228]                               parallel_sendData(master, data)
[16:10:36.228]                             }
[16:10:36.228]                             return(sendCondition)
[16:10:36.228]                           }
[16:10:36.228]                         }
[16:10:36.228]                         frame <- frame + 1L
[16:10:36.228]                         envir <- sys.frame(frame)
[16:10:36.228]                       }
[16:10:36.228]                     }
[16:10:36.228]                     sendCondition <<- function(cond) NULL
[16:10:36.228]                   }
[16:10:36.228]                 })
[16:10:36.228]                 withCallingHandlers({
[16:10:36.228]                   {
[16:10:36.228]                     do.call(function(...) {
[16:10:36.228]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.228]                       if (!identical(...future.globals.maxSize.org, 
[16:10:36.228]                         ...future.globals.maxSize)) {
[16:10:36.228]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.228]                         on.exit(options(oopts), add = TRUE)
[16:10:36.228]                       }
[16:10:36.228]                       {
[16:10:36.228]                         lapply(seq_along(...future.elements_ii), 
[16:10:36.228]                           FUN = function(jj) {
[16:10:36.228]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.228]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.228]                               envir = globalenv(), inherits = FALSE)
[16:10:36.228]                             ...future.FUN(...future.X_jj, ...)
[16:10:36.228]                           })
[16:10:36.228]                       }
[16:10:36.228]                     }, args = future.call.arguments)
[16:10:36.228]                   }
[16:10:36.228]                 }, immediateCondition = function(cond) {
[16:10:36.228]                   sendCondition <- ...future.makeSendCondition()
[16:10:36.228]                   sendCondition(cond)
[16:10:36.228]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.228]                   {
[16:10:36.228]                     inherits <- base::inherits
[16:10:36.228]                     invokeRestart <- base::invokeRestart
[16:10:36.228]                     is.null <- base::is.null
[16:10:36.228]                     muffled <- FALSE
[16:10:36.228]                     if (inherits(cond, "message")) {
[16:10:36.228]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:36.228]                       if (muffled) 
[16:10:36.228]                         invokeRestart("muffleMessage")
[16:10:36.228]                     }
[16:10:36.228]                     else if (inherits(cond, "warning")) {
[16:10:36.228]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:36.228]                       if (muffled) 
[16:10:36.228]                         invokeRestart("muffleWarning")
[16:10:36.228]                     }
[16:10:36.228]                     else if (inherits(cond, "condition")) {
[16:10:36.228]                       if (!is.null(pattern)) {
[16:10:36.228]                         computeRestarts <- base::computeRestarts
[16:10:36.228]                         grepl <- base::grepl
[16:10:36.228]                         restarts <- computeRestarts(cond)
[16:10:36.228]                         for (restart in restarts) {
[16:10:36.228]                           name <- restart$name
[16:10:36.228]                           if (is.null(name)) 
[16:10:36.228]                             next
[16:10:36.228]                           if (!grepl(pattern, name)) 
[16:10:36.228]                             next
[16:10:36.228]                           invokeRestart(restart)
[16:10:36.228]                           muffled <- TRUE
[16:10:36.228]                           break
[16:10:36.228]                         }
[16:10:36.228]                       }
[16:10:36.228]                     }
[16:10:36.228]                     invisible(muffled)
[16:10:36.228]                   }
[16:10:36.228]                   muffleCondition(cond)
[16:10:36.228]                 })
[16:10:36.228]             }))
[16:10:36.228]             future::FutureResult(value = ...future.value$value, 
[16:10:36.228]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:36.228]                   ...future.rng), globalenv = if (FALSE) 
[16:10:36.228]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:36.228]                     ...future.globalenv.names))
[16:10:36.228]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:36.228]         }, condition = base::local({
[16:10:36.228]             c <- base::c
[16:10:36.228]             inherits <- base::inherits
[16:10:36.228]             invokeRestart <- base::invokeRestart
[16:10:36.228]             length <- base::length
[16:10:36.228]             list <- base::list
[16:10:36.228]             seq.int <- base::seq.int
[16:10:36.228]             signalCondition <- base::signalCondition
[16:10:36.228]             sys.calls <- base::sys.calls
[16:10:36.228]             `[[` <- base::`[[`
[16:10:36.228]             `+` <- base::`+`
[16:10:36.228]             `<<-` <- base::`<<-`
[16:10:36.228]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:36.228]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:36.228]                   3L)]
[16:10:36.228]             }
[16:10:36.228]             function(cond) {
[16:10:36.228]                 is_error <- inherits(cond, "error")
[16:10:36.228]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:36.228]                   NULL)
[16:10:36.228]                 if (is_error) {
[16:10:36.228]                   sessionInformation <- function() {
[16:10:36.228]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:36.228]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:36.228]                       search = base::search(), system = base::Sys.info())
[16:10:36.228]                   }
[16:10:36.228]                   ...future.conditions[[length(...future.conditions) + 
[16:10:36.228]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:36.228]                     cond$call), session = sessionInformation(), 
[16:10:36.228]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:36.228]                   signalCondition(cond)
[16:10:36.228]                 }
[16:10:36.228]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:36.228]                 "immediateCondition"))) {
[16:10:36.228]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:36.228]                   ...future.conditions[[length(...future.conditions) + 
[16:10:36.228]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:36.228]                   if (TRUE && !signal) {
[16:10:36.228]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.228]                     {
[16:10:36.228]                       inherits <- base::inherits
[16:10:36.228]                       invokeRestart <- base::invokeRestart
[16:10:36.228]                       is.null <- base::is.null
[16:10:36.228]                       muffled <- FALSE
[16:10:36.228]                       if (inherits(cond, "message")) {
[16:10:36.228]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:36.228]                         if (muffled) 
[16:10:36.228]                           invokeRestart("muffleMessage")
[16:10:36.228]                       }
[16:10:36.228]                       else if (inherits(cond, "warning")) {
[16:10:36.228]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:36.228]                         if (muffled) 
[16:10:36.228]                           invokeRestart("muffleWarning")
[16:10:36.228]                       }
[16:10:36.228]                       else if (inherits(cond, "condition")) {
[16:10:36.228]                         if (!is.null(pattern)) {
[16:10:36.228]                           computeRestarts <- base::computeRestarts
[16:10:36.228]                           grepl <- base::grepl
[16:10:36.228]                           restarts <- computeRestarts(cond)
[16:10:36.228]                           for (restart in restarts) {
[16:10:36.228]                             name <- restart$name
[16:10:36.228]                             if (is.null(name)) 
[16:10:36.228]                               next
[16:10:36.228]                             if (!grepl(pattern, name)) 
[16:10:36.228]                               next
[16:10:36.228]                             invokeRestart(restart)
[16:10:36.228]                             muffled <- TRUE
[16:10:36.228]                             break
[16:10:36.228]                           }
[16:10:36.228]                         }
[16:10:36.228]                       }
[16:10:36.228]                       invisible(muffled)
[16:10:36.228]                     }
[16:10:36.228]                     muffleCondition(cond, pattern = "^muffle")
[16:10:36.228]                   }
[16:10:36.228]                 }
[16:10:36.228]                 else {
[16:10:36.228]                   if (TRUE) {
[16:10:36.228]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.228]                     {
[16:10:36.228]                       inherits <- base::inherits
[16:10:36.228]                       invokeRestart <- base::invokeRestart
[16:10:36.228]                       is.null <- base::is.null
[16:10:36.228]                       muffled <- FALSE
[16:10:36.228]                       if (inherits(cond, "message")) {
[16:10:36.228]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:36.228]                         if (muffled) 
[16:10:36.228]                           invokeRestart("muffleMessage")
[16:10:36.228]                       }
[16:10:36.228]                       else if (inherits(cond, "warning")) {
[16:10:36.228]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:36.228]                         if (muffled) 
[16:10:36.228]                           invokeRestart("muffleWarning")
[16:10:36.228]                       }
[16:10:36.228]                       else if (inherits(cond, "condition")) {
[16:10:36.228]                         if (!is.null(pattern)) {
[16:10:36.228]                           computeRestarts <- base::computeRestarts
[16:10:36.228]                           grepl <- base::grepl
[16:10:36.228]                           restarts <- computeRestarts(cond)
[16:10:36.228]                           for (restart in restarts) {
[16:10:36.228]                             name <- restart$name
[16:10:36.228]                             if (is.null(name)) 
[16:10:36.228]                               next
[16:10:36.228]                             if (!grepl(pattern, name)) 
[16:10:36.228]                               next
[16:10:36.228]                             invokeRestart(restart)
[16:10:36.228]                             muffled <- TRUE
[16:10:36.228]                             break
[16:10:36.228]                           }
[16:10:36.228]                         }
[16:10:36.228]                       }
[16:10:36.228]                       invisible(muffled)
[16:10:36.228]                     }
[16:10:36.228]                     muffleCondition(cond, pattern = "^muffle")
[16:10:36.228]                   }
[16:10:36.228]                 }
[16:10:36.228]             }
[16:10:36.228]         }))
[16:10:36.228]     }, error = function(ex) {
[16:10:36.228]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:36.228]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:36.228]                 ...future.rng), started = ...future.startTime, 
[16:10:36.228]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:36.228]             version = "1.8"), class = "FutureResult")
[16:10:36.228]     }, finally = {
[16:10:36.228]         if (!identical(...future.workdir, getwd())) 
[16:10:36.228]             setwd(...future.workdir)
[16:10:36.228]         {
[16:10:36.228]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:36.228]                 ...future.oldOptions$nwarnings <- NULL
[16:10:36.228]             }
[16:10:36.228]             base::options(...future.oldOptions)
[16:10:36.228]             if (.Platform$OS.type == "windows") {
[16:10:36.228]                 old_names <- names(...future.oldEnvVars)
[16:10:36.228]                 envs <- base::Sys.getenv()
[16:10:36.228]                 names <- names(envs)
[16:10:36.228]                 common <- intersect(names, old_names)
[16:10:36.228]                 added <- setdiff(names, old_names)
[16:10:36.228]                 removed <- setdiff(old_names, names)
[16:10:36.228]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:36.228]                   envs[common]]
[16:10:36.228]                 NAMES <- toupper(changed)
[16:10:36.228]                 args <- list()
[16:10:36.228]                 for (kk in seq_along(NAMES)) {
[16:10:36.228]                   name <- changed[[kk]]
[16:10:36.228]                   NAME <- NAMES[[kk]]
[16:10:36.228]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.228]                     next
[16:10:36.228]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:36.228]                 }
[16:10:36.228]                 NAMES <- toupper(added)
[16:10:36.228]                 for (kk in seq_along(NAMES)) {
[16:10:36.228]                   name <- added[[kk]]
[16:10:36.228]                   NAME <- NAMES[[kk]]
[16:10:36.228]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.228]                     next
[16:10:36.228]                   args[[name]] <- ""
[16:10:36.228]                 }
[16:10:36.228]                 NAMES <- toupper(removed)
[16:10:36.228]                 for (kk in seq_along(NAMES)) {
[16:10:36.228]                   name <- removed[[kk]]
[16:10:36.228]                   NAME <- NAMES[[kk]]
[16:10:36.228]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.228]                     next
[16:10:36.228]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:36.228]                 }
[16:10:36.228]                 if (length(args) > 0) 
[16:10:36.228]                   base::do.call(base::Sys.setenv, args = args)
[16:10:36.228]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:36.228]             }
[16:10:36.228]             else {
[16:10:36.228]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:36.228]             }
[16:10:36.228]             {
[16:10:36.228]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:36.228]                   0L) {
[16:10:36.228]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:36.228]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:36.228]                   base::options(opts)
[16:10:36.228]                 }
[16:10:36.228]                 {
[16:10:36.228]                   {
[16:10:36.228]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:36.228]                     NULL
[16:10:36.228]                   }
[16:10:36.228]                   options(future.plan = NULL)
[16:10:36.228]                   if (is.na(NA_character_)) 
[16:10:36.228]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:36.228]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:36.228]                   future::plan(list(function (..., workers = availableCores(), 
[16:10:36.228]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:10:36.228]                     envir = parent.frame()) 
[16:10:36.228]                   {
[16:10:36.228]                     if (is.function(workers)) 
[16:10:36.228]                       workers <- workers()
[16:10:36.228]                     workers <- structure(as.integer(workers), 
[16:10:36.228]                       class = class(workers))
[16:10:36.228]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:10:36.228]                       workers >= 1)
[16:10:36.228]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:10:36.228]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:10:36.228]                     }
[16:10:36.228]                     future <- MultisessionFuture(..., workers = workers, 
[16:10:36.228]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:10:36.228]                       envir = envir)
[16:10:36.228]                     if (!future$lazy) 
[16:10:36.228]                       future <- run(future)
[16:10:36.228]                     invisible(future)
[16:10:36.228]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:36.228]                 }
[16:10:36.228]             }
[16:10:36.228]         }
[16:10:36.228]     })
[16:10:36.228]     if (TRUE) {
[16:10:36.228]         base::sink(type = "output", split = FALSE)
[16:10:36.228]         if (TRUE) {
[16:10:36.228]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:36.228]         }
[16:10:36.228]         else {
[16:10:36.228]             ...future.result["stdout"] <- base::list(NULL)
[16:10:36.228]         }
[16:10:36.228]         base::close(...future.stdout)
[16:10:36.228]         ...future.stdout <- NULL
[16:10:36.228]     }
[16:10:36.228]     ...future.result$conditions <- ...future.conditions
[16:10:36.228]     ...future.result$finished <- base::Sys.time()
[16:10:36.228]     ...future.result
[16:10:36.228] }
[16:10:36.232] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[16:10:36.232] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[16:10:36.232] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[16:10:36.233] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[16:10:36.233] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[16:10:36.233] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[16:10:36.233] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[16:10:36.234] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[16:10:36.234] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[16:10:36.234] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[16:10:36.235] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[16:10:36.235] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[16:10:36.235] MultisessionFuture started
[16:10:36.235] - Launch lazy future ... done
[16:10:36.235] run() for ‘MultisessionFuture’ ... done
[16:10:36.236] Created future:
[16:10:36.236] MultisessionFuture:
[16:10:36.236] Label: ‘future_replicate-1’
[16:10:36.236] Expression:
[16:10:36.236] {
[16:10:36.236]     do.call(function(...) {
[16:10:36.236]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.236]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:36.236]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.236]             on.exit(options(oopts), add = TRUE)
[16:10:36.236]         }
[16:10:36.236]         {
[16:10:36.236]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:36.236]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.236]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.236]                   envir = globalenv(), inherits = FALSE)
[16:10:36.236]                 ...future.FUN(...future.X_jj, ...)
[16:10:36.236]             })
[16:10:36.236]         }
[16:10:36.236]     }, args = future.call.arguments)
[16:10:36.236] }
[16:10:36.236] Lazy evaluation: FALSE
[16:10:36.236] Asynchronous evaluation: TRUE
[16:10:36.236] Local evaluation: TRUE
[16:10:36.236] Environment: R_GlobalEnv
[16:10:36.236] Capture standard output: TRUE
[16:10:36.236] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:36.236] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:36.236] Packages: <none>
[16:10:36.236] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:36.236] Resolved: FALSE
[16:10:36.236] Value: <not collected>
[16:10:36.236] Conditions captured: <none>
[16:10:36.236] Early signaling: FALSE
[16:10:36.236] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:36.236] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:36.248] Chunk #1 of 2 ... DONE
[16:10:36.248] Chunk #2 of 2 ...
[16:10:36.248]  - Finding globals in 'X' for chunk #2 ...
[16:10:36.248] getGlobalsAndPackages() ...
[16:10:36.249] Searching for globals...
[16:10:36.249] 
[16:10:36.249] Searching for globals ... DONE
[16:10:36.249] - globals: [0] <none>
[16:10:36.249] getGlobalsAndPackages() ... DONE
[16:10:36.249]    + additional globals found: [n=0] 
[16:10:36.249]    + additional namespaces needed: [n=0] 
[16:10:36.250]  - Finding globals in 'X' for chunk #2 ... DONE
[16:10:36.250]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[16:10:36.250]  - seeds: [3] <seeds>
[16:10:36.250] getGlobalsAndPackages() ...
[16:10:36.250] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:36.250] Resolving globals: FALSE
[16:10:36.250] Tweak future expression to call with '...' arguments ...
[16:10:36.250] {
[16:10:36.250]     do.call(function(...) {
[16:10:36.250]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.250]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:36.250]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.250]             on.exit(options(oopts), add = TRUE)
[16:10:36.250]         }
[16:10:36.250]         {
[16:10:36.250]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:36.250]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.250]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.250]                   envir = globalenv(), inherits = FALSE)
[16:10:36.250]                 ...future.FUN(...future.X_jj, ...)
[16:10:36.250]             })
[16:10:36.250]         }
[16:10:36.250]     }, args = future.call.arguments)
[16:10:36.250] }
[16:10:36.251] Tweak future expression to call with '...' arguments ... DONE
[16:10:36.251] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:36.251] 
[16:10:36.251] getGlobalsAndPackages() ... DONE
[16:10:36.252] run() for ‘Future’ ...
[16:10:36.252] - state: ‘created’
[16:10:36.252] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:10:36.267] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:36.267] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:10:36.267]   - Field: ‘node’
[16:10:36.267]   - Field: ‘label’
[16:10:36.267]   - Field: ‘local’
[16:10:36.267]   - Field: ‘owner’
[16:10:36.268]   - Field: ‘envir’
[16:10:36.268]   - Field: ‘workers’
[16:10:36.268]   - Field: ‘packages’
[16:10:36.268]   - Field: ‘gc’
[16:10:36.268]   - Field: ‘conditions’
[16:10:36.268]   - Field: ‘persistent’
[16:10:36.268]   - Field: ‘expr’
[16:10:36.268]   - Field: ‘uuid’
[16:10:36.268]   - Field: ‘seed’
[16:10:36.269]   - Field: ‘version’
[16:10:36.269]   - Field: ‘result’
[16:10:36.269]   - Field: ‘asynchronous’
[16:10:36.269]   - Field: ‘calls’
[16:10:36.269]   - Field: ‘globals’
[16:10:36.269]   - Field: ‘stdout’
[16:10:36.269]   - Field: ‘earlySignal’
[16:10:36.269]   - Field: ‘lazy’
[16:10:36.269]   - Field: ‘state’
[16:10:36.270] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:10:36.270] - Launch lazy future ...
[16:10:36.270] Packages needed by the future expression (n = 0): <none>
[16:10:36.270] Packages needed by future strategies (n = 0): <none>
[16:10:36.271] {
[16:10:36.271]     {
[16:10:36.271]         {
[16:10:36.271]             ...future.startTime <- base::Sys.time()
[16:10:36.271]             {
[16:10:36.271]                 {
[16:10:36.271]                   {
[16:10:36.271]                     {
[16:10:36.271]                       base::local({
[16:10:36.271]                         has_future <- base::requireNamespace("future", 
[16:10:36.271]                           quietly = TRUE)
[16:10:36.271]                         if (has_future) {
[16:10:36.271]                           ns <- base::getNamespace("future")
[16:10:36.271]                           version <- ns[[".package"]][["version"]]
[16:10:36.271]                           if (is.null(version)) 
[16:10:36.271]                             version <- utils::packageVersion("future")
[16:10:36.271]                         }
[16:10:36.271]                         else {
[16:10:36.271]                           version <- NULL
[16:10:36.271]                         }
[16:10:36.271]                         if (!has_future || version < "1.8.0") {
[16:10:36.271]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:36.271]                             "", base::R.version$version.string), 
[16:10:36.271]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:36.271]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:36.271]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:36.271]                               "release", "version")], collapse = " "), 
[16:10:36.271]                             hostname = base::Sys.info()[["nodename"]])
[16:10:36.271]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:36.271]                             info)
[16:10:36.271]                           info <- base::paste(info, collapse = "; ")
[16:10:36.271]                           if (!has_future) {
[16:10:36.271]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:36.271]                               info)
[16:10:36.271]                           }
[16:10:36.271]                           else {
[16:10:36.271]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:36.271]                               info, version)
[16:10:36.271]                           }
[16:10:36.271]                           base::stop(msg)
[16:10:36.271]                         }
[16:10:36.271]                       })
[16:10:36.271]                     }
[16:10:36.271]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:36.271]                     base::options(mc.cores = 1L)
[16:10:36.271]                   }
[16:10:36.271]                   options(future.plan = NULL)
[16:10:36.271]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:36.271]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:36.271]                 }
[16:10:36.271]                 ...future.workdir <- getwd()
[16:10:36.271]             }
[16:10:36.271]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:36.271]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:36.271]         }
[16:10:36.271]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:36.271]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[16:10:36.271]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:36.271]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:36.271]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:36.271]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:36.271]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:36.271]             base::names(...future.oldOptions))
[16:10:36.271]     }
[16:10:36.271]     if (FALSE) {
[16:10:36.271]     }
[16:10:36.271]     else {
[16:10:36.271]         if (TRUE) {
[16:10:36.271]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:36.271]                 open = "w")
[16:10:36.271]         }
[16:10:36.271]         else {
[16:10:36.271]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:36.271]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:36.271]         }
[16:10:36.271]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:36.271]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:36.271]             base::sink(type = "output", split = FALSE)
[16:10:36.271]             base::close(...future.stdout)
[16:10:36.271]         }, add = TRUE)
[16:10:36.271]     }
[16:10:36.271]     ...future.frame <- base::sys.nframe()
[16:10:36.271]     ...future.conditions <- base::list()
[16:10:36.271]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:36.271]     if (FALSE) {
[16:10:36.271]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:36.271]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:36.271]     }
[16:10:36.271]     ...future.result <- base::tryCatch({
[16:10:36.271]         base::withCallingHandlers({
[16:10:36.271]             ...future.value <- base::withVisible(base::local({
[16:10:36.271]                 ...future.makeSendCondition <- local({
[16:10:36.271]                   sendCondition <- NULL
[16:10:36.271]                   function(frame = 1L) {
[16:10:36.271]                     if (is.function(sendCondition)) 
[16:10:36.271]                       return(sendCondition)
[16:10:36.271]                     ns <- getNamespace("parallel")
[16:10:36.271]                     if (exists("sendData", mode = "function", 
[16:10:36.271]                       envir = ns)) {
[16:10:36.271]                       parallel_sendData <- get("sendData", mode = "function", 
[16:10:36.271]                         envir = ns)
[16:10:36.271]                       envir <- sys.frame(frame)
[16:10:36.271]                       master <- NULL
[16:10:36.271]                       while (!identical(envir, .GlobalEnv) && 
[16:10:36.271]                         !identical(envir, emptyenv())) {
[16:10:36.271]                         if (exists("master", mode = "list", envir = envir, 
[16:10:36.271]                           inherits = FALSE)) {
[16:10:36.271]                           master <- get("master", mode = "list", 
[16:10:36.271]                             envir = envir, inherits = FALSE)
[16:10:36.271]                           if (inherits(master, c("SOCKnode", 
[16:10:36.271]                             "SOCK0node"))) {
[16:10:36.271]                             sendCondition <<- function(cond) {
[16:10:36.271]                               data <- list(type = "VALUE", value = cond, 
[16:10:36.271]                                 success = TRUE)
[16:10:36.271]                               parallel_sendData(master, data)
[16:10:36.271]                             }
[16:10:36.271]                             return(sendCondition)
[16:10:36.271]                           }
[16:10:36.271]                         }
[16:10:36.271]                         frame <- frame + 1L
[16:10:36.271]                         envir <- sys.frame(frame)
[16:10:36.271]                       }
[16:10:36.271]                     }
[16:10:36.271]                     sendCondition <<- function(cond) NULL
[16:10:36.271]                   }
[16:10:36.271]                 })
[16:10:36.271]                 withCallingHandlers({
[16:10:36.271]                   {
[16:10:36.271]                     do.call(function(...) {
[16:10:36.271]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.271]                       if (!identical(...future.globals.maxSize.org, 
[16:10:36.271]                         ...future.globals.maxSize)) {
[16:10:36.271]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.271]                         on.exit(options(oopts), add = TRUE)
[16:10:36.271]                       }
[16:10:36.271]                       {
[16:10:36.271]                         lapply(seq_along(...future.elements_ii), 
[16:10:36.271]                           FUN = function(jj) {
[16:10:36.271]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.271]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.271]                               envir = globalenv(), inherits = FALSE)
[16:10:36.271]                             ...future.FUN(...future.X_jj, ...)
[16:10:36.271]                           })
[16:10:36.271]                       }
[16:10:36.271]                     }, args = future.call.arguments)
[16:10:36.271]                   }
[16:10:36.271]                 }, immediateCondition = function(cond) {
[16:10:36.271]                   sendCondition <- ...future.makeSendCondition()
[16:10:36.271]                   sendCondition(cond)
[16:10:36.271]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.271]                   {
[16:10:36.271]                     inherits <- base::inherits
[16:10:36.271]                     invokeRestart <- base::invokeRestart
[16:10:36.271]                     is.null <- base::is.null
[16:10:36.271]                     muffled <- FALSE
[16:10:36.271]                     if (inherits(cond, "message")) {
[16:10:36.271]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:36.271]                       if (muffled) 
[16:10:36.271]                         invokeRestart("muffleMessage")
[16:10:36.271]                     }
[16:10:36.271]                     else if (inherits(cond, "warning")) {
[16:10:36.271]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:36.271]                       if (muffled) 
[16:10:36.271]                         invokeRestart("muffleWarning")
[16:10:36.271]                     }
[16:10:36.271]                     else if (inherits(cond, "condition")) {
[16:10:36.271]                       if (!is.null(pattern)) {
[16:10:36.271]                         computeRestarts <- base::computeRestarts
[16:10:36.271]                         grepl <- base::grepl
[16:10:36.271]                         restarts <- computeRestarts(cond)
[16:10:36.271]                         for (restart in restarts) {
[16:10:36.271]                           name <- restart$name
[16:10:36.271]                           if (is.null(name)) 
[16:10:36.271]                             next
[16:10:36.271]                           if (!grepl(pattern, name)) 
[16:10:36.271]                             next
[16:10:36.271]                           invokeRestart(restart)
[16:10:36.271]                           muffled <- TRUE
[16:10:36.271]                           break
[16:10:36.271]                         }
[16:10:36.271]                       }
[16:10:36.271]                     }
[16:10:36.271]                     invisible(muffled)
[16:10:36.271]                   }
[16:10:36.271]                   muffleCondition(cond)
[16:10:36.271]                 })
[16:10:36.271]             }))
[16:10:36.271]             future::FutureResult(value = ...future.value$value, 
[16:10:36.271]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:36.271]                   ...future.rng), globalenv = if (FALSE) 
[16:10:36.271]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:36.271]                     ...future.globalenv.names))
[16:10:36.271]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:36.271]         }, condition = base::local({
[16:10:36.271]             c <- base::c
[16:10:36.271]             inherits <- base::inherits
[16:10:36.271]             invokeRestart <- base::invokeRestart
[16:10:36.271]             length <- base::length
[16:10:36.271]             list <- base::list
[16:10:36.271]             seq.int <- base::seq.int
[16:10:36.271]             signalCondition <- base::signalCondition
[16:10:36.271]             sys.calls <- base::sys.calls
[16:10:36.271]             `[[` <- base::`[[`
[16:10:36.271]             `+` <- base::`+`
[16:10:36.271]             `<<-` <- base::`<<-`
[16:10:36.271]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:36.271]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:36.271]                   3L)]
[16:10:36.271]             }
[16:10:36.271]             function(cond) {
[16:10:36.271]                 is_error <- inherits(cond, "error")
[16:10:36.271]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:36.271]                   NULL)
[16:10:36.271]                 if (is_error) {
[16:10:36.271]                   sessionInformation <- function() {
[16:10:36.271]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:36.271]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:36.271]                       search = base::search(), system = base::Sys.info())
[16:10:36.271]                   }
[16:10:36.271]                   ...future.conditions[[length(...future.conditions) + 
[16:10:36.271]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:36.271]                     cond$call), session = sessionInformation(), 
[16:10:36.271]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:36.271]                   signalCondition(cond)
[16:10:36.271]                 }
[16:10:36.271]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:36.271]                 "immediateCondition"))) {
[16:10:36.271]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:36.271]                   ...future.conditions[[length(...future.conditions) + 
[16:10:36.271]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:36.271]                   if (TRUE && !signal) {
[16:10:36.271]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.271]                     {
[16:10:36.271]                       inherits <- base::inherits
[16:10:36.271]                       invokeRestart <- base::invokeRestart
[16:10:36.271]                       is.null <- base::is.null
[16:10:36.271]                       muffled <- FALSE
[16:10:36.271]                       if (inherits(cond, "message")) {
[16:10:36.271]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:36.271]                         if (muffled) 
[16:10:36.271]                           invokeRestart("muffleMessage")
[16:10:36.271]                       }
[16:10:36.271]                       else if (inherits(cond, "warning")) {
[16:10:36.271]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:36.271]                         if (muffled) 
[16:10:36.271]                           invokeRestart("muffleWarning")
[16:10:36.271]                       }
[16:10:36.271]                       else if (inherits(cond, "condition")) {
[16:10:36.271]                         if (!is.null(pattern)) {
[16:10:36.271]                           computeRestarts <- base::computeRestarts
[16:10:36.271]                           grepl <- base::grepl
[16:10:36.271]                           restarts <- computeRestarts(cond)
[16:10:36.271]                           for (restart in restarts) {
[16:10:36.271]                             name <- restart$name
[16:10:36.271]                             if (is.null(name)) 
[16:10:36.271]                               next
[16:10:36.271]                             if (!grepl(pattern, name)) 
[16:10:36.271]                               next
[16:10:36.271]                             invokeRestart(restart)
[16:10:36.271]                             muffled <- TRUE
[16:10:36.271]                             break
[16:10:36.271]                           }
[16:10:36.271]                         }
[16:10:36.271]                       }
[16:10:36.271]                       invisible(muffled)
[16:10:36.271]                     }
[16:10:36.271]                     muffleCondition(cond, pattern = "^muffle")
[16:10:36.271]                   }
[16:10:36.271]                 }
[16:10:36.271]                 else {
[16:10:36.271]                   if (TRUE) {
[16:10:36.271]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.271]                     {
[16:10:36.271]                       inherits <- base::inherits
[16:10:36.271]                       invokeRestart <- base::invokeRestart
[16:10:36.271]                       is.null <- base::is.null
[16:10:36.271]                       muffled <- FALSE
[16:10:36.271]                       if (inherits(cond, "message")) {
[16:10:36.271]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:36.271]                         if (muffled) 
[16:10:36.271]                           invokeRestart("muffleMessage")
[16:10:36.271]                       }
[16:10:36.271]                       else if (inherits(cond, "warning")) {
[16:10:36.271]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:36.271]                         if (muffled) 
[16:10:36.271]                           invokeRestart("muffleWarning")
[16:10:36.271]                       }
[16:10:36.271]                       else if (inherits(cond, "condition")) {
[16:10:36.271]                         if (!is.null(pattern)) {
[16:10:36.271]                           computeRestarts <- base::computeRestarts
[16:10:36.271]                           grepl <- base::grepl
[16:10:36.271]                           restarts <- computeRestarts(cond)
[16:10:36.271]                           for (restart in restarts) {
[16:10:36.271]                             name <- restart$name
[16:10:36.271]                             if (is.null(name)) 
[16:10:36.271]                               next
[16:10:36.271]                             if (!grepl(pattern, name)) 
[16:10:36.271]                               next
[16:10:36.271]                             invokeRestart(restart)
[16:10:36.271]                             muffled <- TRUE
[16:10:36.271]                             break
[16:10:36.271]                           }
[16:10:36.271]                         }
[16:10:36.271]                       }
[16:10:36.271]                       invisible(muffled)
[16:10:36.271]                     }
[16:10:36.271]                     muffleCondition(cond, pattern = "^muffle")
[16:10:36.271]                   }
[16:10:36.271]                 }
[16:10:36.271]             }
[16:10:36.271]         }))
[16:10:36.271]     }, error = function(ex) {
[16:10:36.271]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:36.271]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:36.271]                 ...future.rng), started = ...future.startTime, 
[16:10:36.271]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:36.271]             version = "1.8"), class = "FutureResult")
[16:10:36.271]     }, finally = {
[16:10:36.271]         if (!identical(...future.workdir, getwd())) 
[16:10:36.271]             setwd(...future.workdir)
[16:10:36.271]         {
[16:10:36.271]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:36.271]                 ...future.oldOptions$nwarnings <- NULL
[16:10:36.271]             }
[16:10:36.271]             base::options(...future.oldOptions)
[16:10:36.271]             if (.Platform$OS.type == "windows") {
[16:10:36.271]                 old_names <- names(...future.oldEnvVars)
[16:10:36.271]                 envs <- base::Sys.getenv()
[16:10:36.271]                 names <- names(envs)
[16:10:36.271]                 common <- intersect(names, old_names)
[16:10:36.271]                 added <- setdiff(names, old_names)
[16:10:36.271]                 removed <- setdiff(old_names, names)
[16:10:36.271]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:36.271]                   envs[common]]
[16:10:36.271]                 NAMES <- toupper(changed)
[16:10:36.271]                 args <- list()
[16:10:36.271]                 for (kk in seq_along(NAMES)) {
[16:10:36.271]                   name <- changed[[kk]]
[16:10:36.271]                   NAME <- NAMES[[kk]]
[16:10:36.271]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.271]                     next
[16:10:36.271]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:36.271]                 }
[16:10:36.271]                 NAMES <- toupper(added)
[16:10:36.271]                 for (kk in seq_along(NAMES)) {
[16:10:36.271]                   name <- added[[kk]]
[16:10:36.271]                   NAME <- NAMES[[kk]]
[16:10:36.271]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.271]                     next
[16:10:36.271]                   args[[name]] <- ""
[16:10:36.271]                 }
[16:10:36.271]                 NAMES <- toupper(removed)
[16:10:36.271]                 for (kk in seq_along(NAMES)) {
[16:10:36.271]                   name <- removed[[kk]]
[16:10:36.271]                   NAME <- NAMES[[kk]]
[16:10:36.271]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.271]                     next
[16:10:36.271]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:36.271]                 }
[16:10:36.271]                 if (length(args) > 0) 
[16:10:36.271]                   base::do.call(base::Sys.setenv, args = args)
[16:10:36.271]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:36.271]             }
[16:10:36.271]             else {
[16:10:36.271]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:36.271]             }
[16:10:36.271]             {
[16:10:36.271]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:36.271]                   0L) {
[16:10:36.271]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:36.271]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:36.271]                   base::options(opts)
[16:10:36.271]                 }
[16:10:36.271]                 {
[16:10:36.271]                   {
[16:10:36.271]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:36.271]                     NULL
[16:10:36.271]                   }
[16:10:36.271]                   options(future.plan = NULL)
[16:10:36.271]                   if (is.na(NA_character_)) 
[16:10:36.271]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:36.271]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:36.271]                   future::plan(list(function (..., workers = availableCores(), 
[16:10:36.271]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:10:36.271]                     envir = parent.frame()) 
[16:10:36.271]                   {
[16:10:36.271]                     if (is.function(workers)) 
[16:10:36.271]                       workers <- workers()
[16:10:36.271]                     workers <- structure(as.integer(workers), 
[16:10:36.271]                       class = class(workers))
[16:10:36.271]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:10:36.271]                       workers >= 1)
[16:10:36.271]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:10:36.271]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:10:36.271]                     }
[16:10:36.271]                     future <- MultisessionFuture(..., workers = workers, 
[16:10:36.271]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:10:36.271]                       envir = envir)
[16:10:36.271]                     if (!future$lazy) 
[16:10:36.271]                       future <- run(future)
[16:10:36.271]                     invisible(future)
[16:10:36.271]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:36.271]                 }
[16:10:36.271]             }
[16:10:36.271]         }
[16:10:36.271]     })
[16:10:36.271]     if (TRUE) {
[16:10:36.271]         base::sink(type = "output", split = FALSE)
[16:10:36.271]         if (TRUE) {
[16:10:36.271]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:36.271]         }
[16:10:36.271]         else {
[16:10:36.271]             ...future.result["stdout"] <- base::list(NULL)
[16:10:36.271]         }
[16:10:36.271]         base::close(...future.stdout)
[16:10:36.271]         ...future.stdout <- NULL
[16:10:36.271]     }
[16:10:36.271]     ...future.result$conditions <- ...future.conditions
[16:10:36.271]     ...future.result$finished <- base::Sys.time()
[16:10:36.271]     ...future.result
[16:10:36.271] }
[16:10:36.343] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[16:10:36.343] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[16:10:36.344] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[16:10:36.344] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[16:10:36.344] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[16:10:36.345] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[16:10:36.345] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[16:10:36.345] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[16:10:36.345] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[16:10:36.346] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[16:10:36.346] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[16:10:36.346] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[16:10:36.347] MultisessionFuture started
[16:10:36.347] - Launch lazy future ... done
[16:10:36.347] run() for ‘MultisessionFuture’ ... done
[16:10:36.347] Created future:
[16:10:36.347] MultisessionFuture:
[16:10:36.347] Label: ‘future_replicate-2’
[16:10:36.347] Expression:
[16:10:36.347] {
[16:10:36.347]     do.call(function(...) {
[16:10:36.347]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.347]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:36.347]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.347]             on.exit(options(oopts), add = TRUE)
[16:10:36.347]         }
[16:10:36.347]         {
[16:10:36.347]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:36.347]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.347]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.347]                   envir = globalenv(), inherits = FALSE)
[16:10:36.347]                 ...future.FUN(...future.X_jj, ...)
[16:10:36.347]             })
[16:10:36.347]         }
[16:10:36.347]     }, args = future.call.arguments)
[16:10:36.347] }
[16:10:36.347] Lazy evaluation: FALSE
[16:10:36.347] Asynchronous evaluation: TRUE
[16:10:36.347] Local evaluation: TRUE
[16:10:36.347] Environment: R_GlobalEnv
[16:10:36.347] Capture standard output: TRUE
[16:10:36.347] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:36.347] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:36.347] Packages: <none>
[16:10:36.347] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:36.347] Resolved: FALSE
[16:10:36.347] Value: <not collected>
[16:10:36.347] Conditions captured: <none>
[16:10:36.347] Early signaling: FALSE
[16:10:36.347] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:36.347] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:36.359] Chunk #2 of 2 ... DONE
[16:10:36.359] Launching 2 futures (chunks) ... DONE
[16:10:36.360] Resolving 2 futures (chunks) ...
[16:10:36.360] resolve() on list ...
[16:10:36.360]  recursive: 0
[16:10:36.360]  length: 2
[16:10:36.360] 
[16:10:36.361] receiveMessageFromWorker() for ClusterFuture ...
[16:10:36.361] - Validating connection of MultisessionFuture
[16:10:36.363] - received message: FutureResult
[16:10:36.364] - Received FutureResult
[16:10:36.364] - Erased future from FutureRegistry
[16:10:36.364] result() for ClusterFuture ...
[16:10:36.364] - result already collected: FutureResult
[16:10:36.364] result() for ClusterFuture ... done
[16:10:36.364] receiveMessageFromWorker() for ClusterFuture ... done
[16:10:36.364] Future #1
[16:10:36.364] result() for ClusterFuture ...
[16:10:36.364] - result already collected: FutureResult
[16:10:36.364] result() for ClusterFuture ... done
[16:10:36.365] result() for ClusterFuture ...
[16:10:36.365] - result already collected: FutureResult
[16:10:36.365] result() for ClusterFuture ... done
[16:10:36.365] signalConditionsASAP(MultisessionFuture, pos=1) ...
[16:10:36.365] - nx: 2
[16:10:36.365] - relay: TRUE
[16:10:36.365] - stdout: TRUE
[16:10:36.365] - signal: TRUE
[16:10:36.365] - resignal: FALSE
[16:10:36.365] - force: TRUE
[16:10:36.365] - relayed: [n=2] FALSE, FALSE
[16:10:36.365] - queued futures: [n=2] FALSE, FALSE
[16:10:36.366]  - until=1
[16:10:36.366]  - relaying element #1
[16:10:36.366] result() for ClusterFuture ...
[16:10:36.366] - result already collected: FutureResult
[16:10:36.366] result() for ClusterFuture ... done
[16:10:36.366] result() for ClusterFuture ...
[16:10:36.366] - result already collected: FutureResult
[16:10:36.366] result() for ClusterFuture ... done
[16:10:36.366] result() for ClusterFuture ...
[16:10:36.366] - result already collected: FutureResult
[16:10:36.366] result() for ClusterFuture ... done
[16:10:36.367] result() for ClusterFuture ...
[16:10:36.367] - result already collected: FutureResult
[16:10:36.367] result() for ClusterFuture ... done
[16:10:36.367] - relayed: [n=2] TRUE, FALSE
[16:10:36.367] - queued futures: [n=2] TRUE, FALSE
[16:10:36.367] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[16:10:36.367]  length: 1 (resolved future 1)
[16:10:36.429] receiveMessageFromWorker() for ClusterFuture ...
[16:10:36.429] - Validating connection of MultisessionFuture
[16:10:36.430] - received message: FutureResult
[16:10:36.430] - Received FutureResult
[16:10:36.430] - Erased future from FutureRegistry
[16:10:36.430] result() for ClusterFuture ...
[16:10:36.430] - result already collected: FutureResult
[16:10:36.431] result() for ClusterFuture ... done
[16:10:36.431] receiveMessageFromWorker() for ClusterFuture ... done
[16:10:36.431] Future #2
[16:10:36.431] result() for ClusterFuture ...
[16:10:36.431] - result already collected: FutureResult
[16:10:36.431] result() for ClusterFuture ... done
[16:10:36.431] result() for ClusterFuture ...
[16:10:36.431] - result already collected: FutureResult
[16:10:36.431] result() for ClusterFuture ... done
[16:10:36.431] signalConditionsASAP(MultisessionFuture, pos=2) ...
[16:10:36.431] - nx: 2
[16:10:36.431] - relay: TRUE
[16:10:36.432] - stdout: TRUE
[16:10:36.432] - signal: TRUE
[16:10:36.432] - resignal: FALSE
[16:10:36.432] - force: TRUE
[16:10:36.432] - relayed: [n=2] TRUE, FALSE
[16:10:36.432] - queued futures: [n=2] TRUE, FALSE
[16:10:36.432]  - until=2
[16:10:36.432]  - relaying element #2
[16:10:36.432] result() for ClusterFuture ...
[16:10:36.432] - result already collected: FutureResult
[16:10:36.432] result() for ClusterFuture ... done
[16:10:36.433] result() for ClusterFuture ...
[16:10:36.433] - result already collected: FutureResult
[16:10:36.433] result() for ClusterFuture ... done
[16:10:36.433] result() for ClusterFuture ...
[16:10:36.433] - result already collected: FutureResult
[16:10:36.433] result() for ClusterFuture ... done
[16:10:36.433] result() for ClusterFuture ...
[16:10:36.433] - result already collected: FutureResult
[16:10:36.433] result() for ClusterFuture ... done
[16:10:36.433] - relayed: [n=2] TRUE, TRUE
[16:10:36.433] - queued futures: [n=2] TRUE, TRUE
[16:10:36.434] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[16:10:36.434]  length: 0 (resolved future 2)
[16:10:36.434] Relaying remaining futures
[16:10:36.434] signalConditionsASAP(NULL, pos=0) ...
[16:10:36.434] - nx: 2
[16:10:36.434] - relay: TRUE
[16:10:36.434] - stdout: TRUE
[16:10:36.434] - signal: TRUE
[16:10:36.434] - resignal: FALSE
[16:10:36.434] - force: TRUE
[16:10:36.434] - relayed: [n=2] TRUE, TRUE
[16:10:36.434] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:10:36.435] - relayed: [n=2] TRUE, TRUE
[16:10:36.435] - queued futures: [n=2] TRUE, TRUE
[16:10:36.435] signalConditionsASAP(NULL, pos=0) ... done
[16:10:36.435] resolve() on list ... DONE
[16:10:36.435] result() for ClusterFuture ...
[16:10:36.435] - result already collected: FutureResult
[16:10:36.435] result() for ClusterFuture ... done
[16:10:36.435] result() for ClusterFuture ...
[16:10:36.435] - result already collected: FutureResult
[16:10:36.435] result() for ClusterFuture ... done
[16:10:36.435] result() for ClusterFuture ...
[16:10:36.436] - result already collected: FutureResult
[16:10:36.436] result() for ClusterFuture ... done
[16:10:36.436] result() for ClusterFuture ...
[16:10:36.436] - result already collected: FutureResult
[16:10:36.436] result() for ClusterFuture ... done
[16:10:36.436]  - Number of value chunks collected: 2
[16:10:36.436] Resolving 2 futures (chunks) ... DONE
[16:10:36.436] Reducing values from 2 chunks ...
[16:10:36.436]  - Number of values collected after concatenation: 5
[16:10:36.436]  - Number of values expected: 5
[16:10:36.436] Reducing values from 2 chunks ... DONE
[16:10:36.437] future_lapply() ... DONE
[16:10:36.437] future_lapply() ...
[16:10:36.437] Generating random seeds ...
[16:10:36.437] Generating random seed streams for 5 elements ...
[16:10:36.437] Generating random seed streams for 5 elements ... DONE
[16:10:36.437] Generating random seeds ... DONE
[16:10:36.438] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:10:36.441] Number of chunks: 2
[16:10:36.442] getGlobalsAndPackagesXApply() ...
[16:10:36.442]  - future.globals: TRUE
[16:10:36.442] getGlobalsAndPackages() ...
[16:10:36.442] Searching for globals...
[16:10:36.443] - globals found: [2] ‘FUN’, ‘sample’
[16:10:36.443] Searching for globals ... DONE
[16:10:36.443] Resolving globals: FALSE
[16:10:36.443] The total size of the 1 globals is 616 bytes (616 bytes)
[16:10:36.444] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:10:36.444] - globals: [1] ‘FUN’
[16:10:36.444] 
[16:10:36.444] getGlobalsAndPackages() ... DONE
[16:10:36.444]  - globals found/used: [n=1] ‘FUN’
[16:10:36.444]  - needed namespaces: [n=0] 
[16:10:36.444] Finding globals ... DONE
[16:10:36.445]  - use_args: TRUE
[16:10:36.445]  - Getting '...' globals ...
[16:10:36.445] resolve() on list ...
[16:10:36.445]  recursive: 0
[16:10:36.445]  length: 1
[16:10:36.445]  elements: ‘...’
[16:10:36.445]  length: 0 (resolved future 1)
[16:10:36.445] resolve() on list ... DONE
[16:10:36.445]    - '...' content: [n=0] 
[16:10:36.446] List of 1
[16:10:36.446]  $ ...: list()
[16:10:36.446]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:36.446]  - attr(*, "where")=List of 1
[16:10:36.446]   ..$ ...:<environment: 0x55cf8e83cfb8> 
[16:10:36.446]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:36.446]  - attr(*, "resolved")= logi TRUE
[16:10:36.446]  - attr(*, "total_size")= num NA
[16:10:36.448]  - Getting '...' globals ... DONE
[16:10:36.448] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:10:36.448] List of 2
[16:10:36.448]  $ ...future.FUN:function (...)  
[16:10:36.448]  $ ...          : list()
[16:10:36.448]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:36.448]  - attr(*, "where")=List of 2
[16:10:36.448]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:10:36.448]   ..$ ...          :<environment: 0x55cf8e83cfb8> 
[16:10:36.448]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:36.448]  - attr(*, "resolved")= logi FALSE
[16:10:36.448]  - attr(*, "total_size")= num 616
[16:10:36.451] Packages to be attached in all futures: [n=0] 
[16:10:36.451] getGlobalsAndPackagesXApply() ... DONE
[16:10:36.451] Number of futures (= number of chunks): 2
[16:10:36.451] Launching 2 futures (chunks) ...
[16:10:36.452] Chunk #1 of 2 ...
[16:10:36.452]  - Finding globals in 'X' for chunk #1 ...
[16:10:36.452] getGlobalsAndPackages() ...
[16:10:36.452] Searching for globals...
[16:10:36.452] 
[16:10:36.452] Searching for globals ... DONE
[16:10:36.452] - globals: [0] <none>
[16:10:36.452] getGlobalsAndPackages() ... DONE
[16:10:36.452]    + additional globals found: [n=0] 
[16:10:36.453]    + additional namespaces needed: [n=0] 
[16:10:36.453]  - Finding globals in 'X' for chunk #1 ... DONE
[16:10:36.453]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:10:36.453]  - seeds: [2] <seeds>
[16:10:36.453] getGlobalsAndPackages() ...
[16:10:36.453] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:36.453] Resolving globals: FALSE
[16:10:36.453] Tweak future expression to call with '...' arguments ...
[16:10:36.453] {
[16:10:36.453]     do.call(function(...) {
[16:10:36.453]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.453]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:36.453]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.453]             on.exit(options(oopts), add = TRUE)
[16:10:36.453]         }
[16:10:36.453]         {
[16:10:36.453]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:36.453]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.453]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.453]                   envir = globalenv(), inherits = FALSE)
[16:10:36.453]                 ...future.FUN(...future.X_jj, ...)
[16:10:36.453]             })
[16:10:36.453]         }
[16:10:36.453]     }, args = future.call.arguments)
[16:10:36.453] }
[16:10:36.454] Tweak future expression to call with '...' arguments ... DONE
[16:10:36.454] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:36.454] 
[16:10:36.454] getGlobalsAndPackages() ... DONE
[16:10:36.454] run() for ‘Future’ ...
[16:10:36.455] - state: ‘created’
[16:10:36.455] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:10:36.469] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:36.469] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:10:36.469]   - Field: ‘node’
[16:10:36.469]   - Field: ‘label’
[16:10:36.469]   - Field: ‘local’
[16:10:36.469]   - Field: ‘owner’
[16:10:36.470]   - Field: ‘envir’
[16:10:36.470]   - Field: ‘workers’
[16:10:36.470]   - Field: ‘packages’
[16:10:36.470]   - Field: ‘gc’
[16:10:36.470]   - Field: ‘conditions’
[16:10:36.470]   - Field: ‘persistent’
[16:10:36.470]   - Field: ‘expr’
[16:10:36.470]   - Field: ‘uuid’
[16:10:36.470]   - Field: ‘seed’
[16:10:36.470]   - Field: ‘version’
[16:10:36.470]   - Field: ‘result’
[16:10:36.470]   - Field: ‘asynchronous’
[16:10:36.471]   - Field: ‘calls’
[16:10:36.471]   - Field: ‘globals’
[16:10:36.471]   - Field: ‘stdout’
[16:10:36.471]   - Field: ‘earlySignal’
[16:10:36.471]   - Field: ‘lazy’
[16:10:36.471]   - Field: ‘state’
[16:10:36.471] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:10:36.471] - Launch lazy future ...
[16:10:36.471] Packages needed by the future expression (n = 0): <none>
[16:10:36.472] Packages needed by future strategies (n = 0): <none>
[16:10:36.472] {
[16:10:36.472]     {
[16:10:36.472]         {
[16:10:36.472]             ...future.startTime <- base::Sys.time()
[16:10:36.472]             {
[16:10:36.472]                 {
[16:10:36.472]                   {
[16:10:36.472]                     {
[16:10:36.472]                       base::local({
[16:10:36.472]                         has_future <- base::requireNamespace("future", 
[16:10:36.472]                           quietly = TRUE)
[16:10:36.472]                         if (has_future) {
[16:10:36.472]                           ns <- base::getNamespace("future")
[16:10:36.472]                           version <- ns[[".package"]][["version"]]
[16:10:36.472]                           if (is.null(version)) 
[16:10:36.472]                             version <- utils::packageVersion("future")
[16:10:36.472]                         }
[16:10:36.472]                         else {
[16:10:36.472]                           version <- NULL
[16:10:36.472]                         }
[16:10:36.472]                         if (!has_future || version < "1.8.0") {
[16:10:36.472]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:36.472]                             "", base::R.version$version.string), 
[16:10:36.472]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:36.472]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:36.472]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:36.472]                               "release", "version")], collapse = " "), 
[16:10:36.472]                             hostname = base::Sys.info()[["nodename"]])
[16:10:36.472]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:36.472]                             info)
[16:10:36.472]                           info <- base::paste(info, collapse = "; ")
[16:10:36.472]                           if (!has_future) {
[16:10:36.472]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:36.472]                               info)
[16:10:36.472]                           }
[16:10:36.472]                           else {
[16:10:36.472]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:36.472]                               info, version)
[16:10:36.472]                           }
[16:10:36.472]                           base::stop(msg)
[16:10:36.472]                         }
[16:10:36.472]                       })
[16:10:36.472]                     }
[16:10:36.472]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:36.472]                     base::options(mc.cores = 1L)
[16:10:36.472]                   }
[16:10:36.472]                   options(future.plan = NULL)
[16:10:36.472]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:36.472]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:36.472]                 }
[16:10:36.472]                 ...future.workdir <- getwd()
[16:10:36.472]             }
[16:10:36.472]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:36.472]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:36.472]         }
[16:10:36.472]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:36.472]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:10:36.472]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:36.472]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:36.472]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:36.472]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:36.472]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:36.472]             base::names(...future.oldOptions))
[16:10:36.472]     }
[16:10:36.472]     if (FALSE) {
[16:10:36.472]     }
[16:10:36.472]     else {
[16:10:36.472]         if (TRUE) {
[16:10:36.472]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:36.472]                 open = "w")
[16:10:36.472]         }
[16:10:36.472]         else {
[16:10:36.472]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:36.472]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:36.472]         }
[16:10:36.472]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:36.472]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:36.472]             base::sink(type = "output", split = FALSE)
[16:10:36.472]             base::close(...future.stdout)
[16:10:36.472]         }, add = TRUE)
[16:10:36.472]     }
[16:10:36.472]     ...future.frame <- base::sys.nframe()
[16:10:36.472]     ...future.conditions <- base::list()
[16:10:36.472]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:36.472]     if (FALSE) {
[16:10:36.472]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:36.472]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:36.472]     }
[16:10:36.472]     ...future.result <- base::tryCatch({
[16:10:36.472]         base::withCallingHandlers({
[16:10:36.472]             ...future.value <- base::withVisible(base::local({
[16:10:36.472]                 ...future.makeSendCondition <- local({
[16:10:36.472]                   sendCondition <- NULL
[16:10:36.472]                   function(frame = 1L) {
[16:10:36.472]                     if (is.function(sendCondition)) 
[16:10:36.472]                       return(sendCondition)
[16:10:36.472]                     ns <- getNamespace("parallel")
[16:10:36.472]                     if (exists("sendData", mode = "function", 
[16:10:36.472]                       envir = ns)) {
[16:10:36.472]                       parallel_sendData <- get("sendData", mode = "function", 
[16:10:36.472]                         envir = ns)
[16:10:36.472]                       envir <- sys.frame(frame)
[16:10:36.472]                       master <- NULL
[16:10:36.472]                       while (!identical(envir, .GlobalEnv) && 
[16:10:36.472]                         !identical(envir, emptyenv())) {
[16:10:36.472]                         if (exists("master", mode = "list", envir = envir, 
[16:10:36.472]                           inherits = FALSE)) {
[16:10:36.472]                           master <- get("master", mode = "list", 
[16:10:36.472]                             envir = envir, inherits = FALSE)
[16:10:36.472]                           if (inherits(master, c("SOCKnode", 
[16:10:36.472]                             "SOCK0node"))) {
[16:10:36.472]                             sendCondition <<- function(cond) {
[16:10:36.472]                               data <- list(type = "VALUE", value = cond, 
[16:10:36.472]                                 success = TRUE)
[16:10:36.472]                               parallel_sendData(master, data)
[16:10:36.472]                             }
[16:10:36.472]                             return(sendCondition)
[16:10:36.472]                           }
[16:10:36.472]                         }
[16:10:36.472]                         frame <- frame + 1L
[16:10:36.472]                         envir <- sys.frame(frame)
[16:10:36.472]                       }
[16:10:36.472]                     }
[16:10:36.472]                     sendCondition <<- function(cond) NULL
[16:10:36.472]                   }
[16:10:36.472]                 })
[16:10:36.472]                 withCallingHandlers({
[16:10:36.472]                   {
[16:10:36.472]                     do.call(function(...) {
[16:10:36.472]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.472]                       if (!identical(...future.globals.maxSize.org, 
[16:10:36.472]                         ...future.globals.maxSize)) {
[16:10:36.472]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.472]                         on.exit(options(oopts), add = TRUE)
[16:10:36.472]                       }
[16:10:36.472]                       {
[16:10:36.472]                         lapply(seq_along(...future.elements_ii), 
[16:10:36.472]                           FUN = function(jj) {
[16:10:36.472]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.472]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.472]                               envir = globalenv(), inherits = FALSE)
[16:10:36.472]                             ...future.FUN(...future.X_jj, ...)
[16:10:36.472]                           })
[16:10:36.472]                       }
[16:10:36.472]                     }, args = future.call.arguments)
[16:10:36.472]                   }
[16:10:36.472]                 }, immediateCondition = function(cond) {
[16:10:36.472]                   sendCondition <- ...future.makeSendCondition()
[16:10:36.472]                   sendCondition(cond)
[16:10:36.472]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.472]                   {
[16:10:36.472]                     inherits <- base::inherits
[16:10:36.472]                     invokeRestart <- base::invokeRestart
[16:10:36.472]                     is.null <- base::is.null
[16:10:36.472]                     muffled <- FALSE
[16:10:36.472]                     if (inherits(cond, "message")) {
[16:10:36.472]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:36.472]                       if (muffled) 
[16:10:36.472]                         invokeRestart("muffleMessage")
[16:10:36.472]                     }
[16:10:36.472]                     else if (inherits(cond, "warning")) {
[16:10:36.472]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:36.472]                       if (muffled) 
[16:10:36.472]                         invokeRestart("muffleWarning")
[16:10:36.472]                     }
[16:10:36.472]                     else if (inherits(cond, "condition")) {
[16:10:36.472]                       if (!is.null(pattern)) {
[16:10:36.472]                         computeRestarts <- base::computeRestarts
[16:10:36.472]                         grepl <- base::grepl
[16:10:36.472]                         restarts <- computeRestarts(cond)
[16:10:36.472]                         for (restart in restarts) {
[16:10:36.472]                           name <- restart$name
[16:10:36.472]                           if (is.null(name)) 
[16:10:36.472]                             next
[16:10:36.472]                           if (!grepl(pattern, name)) 
[16:10:36.472]                             next
[16:10:36.472]                           invokeRestart(restart)
[16:10:36.472]                           muffled <- TRUE
[16:10:36.472]                           break
[16:10:36.472]                         }
[16:10:36.472]                       }
[16:10:36.472]                     }
[16:10:36.472]                     invisible(muffled)
[16:10:36.472]                   }
[16:10:36.472]                   muffleCondition(cond)
[16:10:36.472]                 })
[16:10:36.472]             }))
[16:10:36.472]             future::FutureResult(value = ...future.value$value, 
[16:10:36.472]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:36.472]                   ...future.rng), globalenv = if (FALSE) 
[16:10:36.472]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:36.472]                     ...future.globalenv.names))
[16:10:36.472]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:36.472]         }, condition = base::local({
[16:10:36.472]             c <- base::c
[16:10:36.472]             inherits <- base::inherits
[16:10:36.472]             invokeRestart <- base::invokeRestart
[16:10:36.472]             length <- base::length
[16:10:36.472]             list <- base::list
[16:10:36.472]             seq.int <- base::seq.int
[16:10:36.472]             signalCondition <- base::signalCondition
[16:10:36.472]             sys.calls <- base::sys.calls
[16:10:36.472]             `[[` <- base::`[[`
[16:10:36.472]             `+` <- base::`+`
[16:10:36.472]             `<<-` <- base::`<<-`
[16:10:36.472]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:36.472]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:36.472]                   3L)]
[16:10:36.472]             }
[16:10:36.472]             function(cond) {
[16:10:36.472]                 is_error <- inherits(cond, "error")
[16:10:36.472]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:36.472]                   NULL)
[16:10:36.472]                 if (is_error) {
[16:10:36.472]                   sessionInformation <- function() {
[16:10:36.472]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:36.472]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:36.472]                       search = base::search(), system = base::Sys.info())
[16:10:36.472]                   }
[16:10:36.472]                   ...future.conditions[[length(...future.conditions) + 
[16:10:36.472]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:36.472]                     cond$call), session = sessionInformation(), 
[16:10:36.472]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:36.472]                   signalCondition(cond)
[16:10:36.472]                 }
[16:10:36.472]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:36.472]                 "immediateCondition"))) {
[16:10:36.472]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:36.472]                   ...future.conditions[[length(...future.conditions) + 
[16:10:36.472]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:36.472]                   if (TRUE && !signal) {
[16:10:36.472]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.472]                     {
[16:10:36.472]                       inherits <- base::inherits
[16:10:36.472]                       invokeRestart <- base::invokeRestart
[16:10:36.472]                       is.null <- base::is.null
[16:10:36.472]                       muffled <- FALSE
[16:10:36.472]                       if (inherits(cond, "message")) {
[16:10:36.472]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:36.472]                         if (muffled) 
[16:10:36.472]                           invokeRestart("muffleMessage")
[16:10:36.472]                       }
[16:10:36.472]                       else if (inherits(cond, "warning")) {
[16:10:36.472]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:36.472]                         if (muffled) 
[16:10:36.472]                           invokeRestart("muffleWarning")
[16:10:36.472]                       }
[16:10:36.472]                       else if (inherits(cond, "condition")) {
[16:10:36.472]                         if (!is.null(pattern)) {
[16:10:36.472]                           computeRestarts <- base::computeRestarts
[16:10:36.472]                           grepl <- base::grepl
[16:10:36.472]                           restarts <- computeRestarts(cond)
[16:10:36.472]                           for (restart in restarts) {
[16:10:36.472]                             name <- restart$name
[16:10:36.472]                             if (is.null(name)) 
[16:10:36.472]                               next
[16:10:36.472]                             if (!grepl(pattern, name)) 
[16:10:36.472]                               next
[16:10:36.472]                             invokeRestart(restart)
[16:10:36.472]                             muffled <- TRUE
[16:10:36.472]                             break
[16:10:36.472]                           }
[16:10:36.472]                         }
[16:10:36.472]                       }
[16:10:36.472]                       invisible(muffled)
[16:10:36.472]                     }
[16:10:36.472]                     muffleCondition(cond, pattern = "^muffle")
[16:10:36.472]                   }
[16:10:36.472]                 }
[16:10:36.472]                 else {
[16:10:36.472]                   if (TRUE) {
[16:10:36.472]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.472]                     {
[16:10:36.472]                       inherits <- base::inherits
[16:10:36.472]                       invokeRestart <- base::invokeRestart
[16:10:36.472]                       is.null <- base::is.null
[16:10:36.472]                       muffled <- FALSE
[16:10:36.472]                       if (inherits(cond, "message")) {
[16:10:36.472]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:36.472]                         if (muffled) 
[16:10:36.472]                           invokeRestart("muffleMessage")
[16:10:36.472]                       }
[16:10:36.472]                       else if (inherits(cond, "warning")) {
[16:10:36.472]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:36.472]                         if (muffled) 
[16:10:36.472]                           invokeRestart("muffleWarning")
[16:10:36.472]                       }
[16:10:36.472]                       else if (inherits(cond, "condition")) {
[16:10:36.472]                         if (!is.null(pattern)) {
[16:10:36.472]                           computeRestarts <- base::computeRestarts
[16:10:36.472]                           grepl <- base::grepl
[16:10:36.472]                           restarts <- computeRestarts(cond)
[16:10:36.472]                           for (restart in restarts) {
[16:10:36.472]                             name <- restart$name
[16:10:36.472]                             if (is.null(name)) 
[16:10:36.472]                               next
[16:10:36.472]                             if (!grepl(pattern, name)) 
[16:10:36.472]                               next
[16:10:36.472]                             invokeRestart(restart)
[16:10:36.472]                             muffled <- TRUE
[16:10:36.472]                             break
[16:10:36.472]                           }
[16:10:36.472]                         }
[16:10:36.472]                       }
[16:10:36.472]                       invisible(muffled)
[16:10:36.472]                     }
[16:10:36.472]                     muffleCondition(cond, pattern = "^muffle")
[16:10:36.472]                   }
[16:10:36.472]                 }
[16:10:36.472]             }
[16:10:36.472]         }))
[16:10:36.472]     }, error = function(ex) {
[16:10:36.472]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:36.472]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:36.472]                 ...future.rng), started = ...future.startTime, 
[16:10:36.472]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:36.472]             version = "1.8"), class = "FutureResult")
[16:10:36.472]     }, finally = {
[16:10:36.472]         if (!identical(...future.workdir, getwd())) 
[16:10:36.472]             setwd(...future.workdir)
[16:10:36.472]         {
[16:10:36.472]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:36.472]                 ...future.oldOptions$nwarnings <- NULL
[16:10:36.472]             }
[16:10:36.472]             base::options(...future.oldOptions)
[16:10:36.472]             if (.Platform$OS.type == "windows") {
[16:10:36.472]                 old_names <- names(...future.oldEnvVars)
[16:10:36.472]                 envs <- base::Sys.getenv()
[16:10:36.472]                 names <- names(envs)
[16:10:36.472]                 common <- intersect(names, old_names)
[16:10:36.472]                 added <- setdiff(names, old_names)
[16:10:36.472]                 removed <- setdiff(old_names, names)
[16:10:36.472]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:36.472]                   envs[common]]
[16:10:36.472]                 NAMES <- toupper(changed)
[16:10:36.472]                 args <- list()
[16:10:36.472]                 for (kk in seq_along(NAMES)) {
[16:10:36.472]                   name <- changed[[kk]]
[16:10:36.472]                   NAME <- NAMES[[kk]]
[16:10:36.472]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.472]                     next
[16:10:36.472]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:36.472]                 }
[16:10:36.472]                 NAMES <- toupper(added)
[16:10:36.472]                 for (kk in seq_along(NAMES)) {
[16:10:36.472]                   name <- added[[kk]]
[16:10:36.472]                   NAME <- NAMES[[kk]]
[16:10:36.472]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.472]                     next
[16:10:36.472]                   args[[name]] <- ""
[16:10:36.472]                 }
[16:10:36.472]                 NAMES <- toupper(removed)
[16:10:36.472]                 for (kk in seq_along(NAMES)) {
[16:10:36.472]                   name <- removed[[kk]]
[16:10:36.472]                   NAME <- NAMES[[kk]]
[16:10:36.472]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.472]                     next
[16:10:36.472]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:36.472]                 }
[16:10:36.472]                 if (length(args) > 0) 
[16:10:36.472]                   base::do.call(base::Sys.setenv, args = args)
[16:10:36.472]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:36.472]             }
[16:10:36.472]             else {
[16:10:36.472]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:36.472]             }
[16:10:36.472]             {
[16:10:36.472]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:36.472]                   0L) {
[16:10:36.472]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:36.472]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:36.472]                   base::options(opts)
[16:10:36.472]                 }
[16:10:36.472]                 {
[16:10:36.472]                   {
[16:10:36.472]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:36.472]                     NULL
[16:10:36.472]                   }
[16:10:36.472]                   options(future.plan = NULL)
[16:10:36.472]                   if (is.na(NA_character_)) 
[16:10:36.472]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:36.472]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:36.472]                   future::plan(list(function (..., workers = availableCores(), 
[16:10:36.472]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:10:36.472]                     envir = parent.frame()) 
[16:10:36.472]                   {
[16:10:36.472]                     if (is.function(workers)) 
[16:10:36.472]                       workers <- workers()
[16:10:36.472]                     workers <- structure(as.integer(workers), 
[16:10:36.472]                       class = class(workers))
[16:10:36.472]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:10:36.472]                       workers >= 1)
[16:10:36.472]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:10:36.472]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:10:36.472]                     }
[16:10:36.472]                     future <- MultisessionFuture(..., workers = workers, 
[16:10:36.472]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:10:36.472]                       envir = envir)
[16:10:36.472]                     if (!future$lazy) 
[16:10:36.472]                       future <- run(future)
[16:10:36.472]                     invisible(future)
[16:10:36.472]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:36.472]                 }
[16:10:36.472]             }
[16:10:36.472]         }
[16:10:36.472]     })
[16:10:36.472]     if (TRUE) {
[16:10:36.472]         base::sink(type = "output", split = FALSE)
[16:10:36.472]         if (TRUE) {
[16:10:36.472]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:36.472]         }
[16:10:36.472]         else {
[16:10:36.472]             ...future.result["stdout"] <- base::list(NULL)
[16:10:36.472]         }
[16:10:36.472]         base::close(...future.stdout)
[16:10:36.472]         ...future.stdout <- NULL
[16:10:36.472]     }
[16:10:36.472]     ...future.result$conditions <- ...future.conditions
[16:10:36.472]     ...future.result$finished <- base::Sys.time()
[16:10:36.472]     ...future.result
[16:10:36.472] }
[16:10:36.475] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[16:10:36.475] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[16:10:36.475] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[16:10:36.476] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[16:10:36.476] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[16:10:36.476] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[16:10:36.477] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[16:10:36.477] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[16:10:36.477] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[16:10:36.477] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[16:10:36.478] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[16:10:36.478] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[16:10:36.478] MultisessionFuture started
[16:10:36.478] - Launch lazy future ... done
[16:10:36.479] run() for ‘MultisessionFuture’ ... done
[16:10:36.479] Created future:
[16:10:36.479] MultisessionFuture:
[16:10:36.479] Label: ‘future_replicate-1’
[16:10:36.479] Expression:
[16:10:36.479] {
[16:10:36.479]     do.call(function(...) {
[16:10:36.479]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.479]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:36.479]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.479]             on.exit(options(oopts), add = TRUE)
[16:10:36.479]         }
[16:10:36.479]         {
[16:10:36.479]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:36.479]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.479]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.479]                   envir = globalenv(), inherits = FALSE)
[16:10:36.479]                 ...future.FUN(...future.X_jj, ...)
[16:10:36.479]             })
[16:10:36.479]         }
[16:10:36.479]     }, args = future.call.arguments)
[16:10:36.479] }
[16:10:36.479] Lazy evaluation: FALSE
[16:10:36.479] Asynchronous evaluation: TRUE
[16:10:36.479] Local evaluation: TRUE
[16:10:36.479] Environment: R_GlobalEnv
[16:10:36.479] Capture standard output: TRUE
[16:10:36.479] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:36.479] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:36.479] Packages: <none>
[16:10:36.479] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:36.479] Resolved: FALSE
[16:10:36.479] Value: <not collected>
[16:10:36.479] Conditions captured: <none>
[16:10:36.479] Early signaling: FALSE
[16:10:36.479] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:36.479] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:36.490] Chunk #1 of 2 ... DONE
[16:10:36.490] Chunk #2 of 2 ...
[16:10:36.491]  - Finding globals in 'X' for chunk #2 ...
[16:10:36.491] getGlobalsAndPackages() ...
[16:10:36.491] Searching for globals...
[16:10:36.491] 
[16:10:36.491] Searching for globals ... DONE
[16:10:36.491] - globals: [0] <none>
[16:10:36.491] getGlobalsAndPackages() ... DONE
[16:10:36.491]    + additional globals found: [n=0] 
[16:10:36.491]    + additional namespaces needed: [n=0] 
[16:10:36.492]  - Finding globals in 'X' for chunk #2 ... DONE
[16:10:36.492]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[16:10:36.492]  - seeds: [3] <seeds>
[16:10:36.492] getGlobalsAndPackages() ...
[16:10:36.492] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:36.492] Resolving globals: FALSE
[16:10:36.492] Tweak future expression to call with '...' arguments ...
[16:10:36.492] {
[16:10:36.492]     do.call(function(...) {
[16:10:36.492]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.492]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:36.492]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.492]             on.exit(options(oopts), add = TRUE)
[16:10:36.492]         }
[16:10:36.492]         {
[16:10:36.492]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:36.492]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.492]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.492]                   envir = globalenv(), inherits = FALSE)
[16:10:36.492]                 ...future.FUN(...future.X_jj, ...)
[16:10:36.492]             })
[16:10:36.492]         }
[16:10:36.492]     }, args = future.call.arguments)
[16:10:36.492] }
[16:10:36.493] Tweak future expression to call with '...' arguments ... DONE
[16:10:36.493] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:36.493] 
[16:10:36.493] getGlobalsAndPackages() ... DONE
[16:10:36.493] run() for ‘Future’ ...
[16:10:36.494] - state: ‘created’
[16:10:36.494] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:10:36.508] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:36.508] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:10:36.508]   - Field: ‘node’
[16:10:36.508]   - Field: ‘label’
[16:10:36.508]   - Field: ‘local’
[16:10:36.509]   - Field: ‘owner’
[16:10:36.509]   - Field: ‘envir’
[16:10:36.509]   - Field: ‘workers’
[16:10:36.509]   - Field: ‘packages’
[16:10:36.509]   - Field: ‘gc’
[16:10:36.509]   - Field: ‘conditions’
[16:10:36.509]   - Field: ‘persistent’
[16:10:36.509]   - Field: ‘expr’
[16:10:36.509]   - Field: ‘uuid’
[16:10:36.509]   - Field: ‘seed’
[16:10:36.509]   - Field: ‘version’
[16:10:36.510]   - Field: ‘result’
[16:10:36.510]   - Field: ‘asynchronous’
[16:10:36.510]   - Field: ‘calls’
[16:10:36.510]   - Field: ‘globals’
[16:10:36.510]   - Field: ‘stdout’
[16:10:36.510]   - Field: ‘earlySignal’
[16:10:36.510]   - Field: ‘lazy’
[16:10:36.510]   - Field: ‘state’
[16:10:36.510] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:10:36.510] - Launch lazy future ...
[16:10:36.511] Packages needed by the future expression (n = 0): <none>
[16:10:36.511] Packages needed by future strategies (n = 0): <none>
[16:10:36.511] {
[16:10:36.511]     {
[16:10:36.511]         {
[16:10:36.511]             ...future.startTime <- base::Sys.time()
[16:10:36.511]             {
[16:10:36.511]                 {
[16:10:36.511]                   {
[16:10:36.511]                     {
[16:10:36.511]                       base::local({
[16:10:36.511]                         has_future <- base::requireNamespace("future", 
[16:10:36.511]                           quietly = TRUE)
[16:10:36.511]                         if (has_future) {
[16:10:36.511]                           ns <- base::getNamespace("future")
[16:10:36.511]                           version <- ns[[".package"]][["version"]]
[16:10:36.511]                           if (is.null(version)) 
[16:10:36.511]                             version <- utils::packageVersion("future")
[16:10:36.511]                         }
[16:10:36.511]                         else {
[16:10:36.511]                           version <- NULL
[16:10:36.511]                         }
[16:10:36.511]                         if (!has_future || version < "1.8.0") {
[16:10:36.511]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:36.511]                             "", base::R.version$version.string), 
[16:10:36.511]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:36.511]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:36.511]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:36.511]                               "release", "version")], collapse = " "), 
[16:10:36.511]                             hostname = base::Sys.info()[["nodename"]])
[16:10:36.511]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:36.511]                             info)
[16:10:36.511]                           info <- base::paste(info, collapse = "; ")
[16:10:36.511]                           if (!has_future) {
[16:10:36.511]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:36.511]                               info)
[16:10:36.511]                           }
[16:10:36.511]                           else {
[16:10:36.511]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:36.511]                               info, version)
[16:10:36.511]                           }
[16:10:36.511]                           base::stop(msg)
[16:10:36.511]                         }
[16:10:36.511]                       })
[16:10:36.511]                     }
[16:10:36.511]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:36.511]                     base::options(mc.cores = 1L)
[16:10:36.511]                   }
[16:10:36.511]                   options(future.plan = NULL)
[16:10:36.511]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:36.511]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:36.511]                 }
[16:10:36.511]                 ...future.workdir <- getwd()
[16:10:36.511]             }
[16:10:36.511]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:36.511]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:36.511]         }
[16:10:36.511]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:36.511]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[16:10:36.511]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:36.511]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:36.511]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:36.511]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:36.511]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:36.511]             base::names(...future.oldOptions))
[16:10:36.511]     }
[16:10:36.511]     if (FALSE) {
[16:10:36.511]     }
[16:10:36.511]     else {
[16:10:36.511]         if (TRUE) {
[16:10:36.511]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:36.511]                 open = "w")
[16:10:36.511]         }
[16:10:36.511]         else {
[16:10:36.511]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:36.511]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:36.511]         }
[16:10:36.511]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:36.511]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:36.511]             base::sink(type = "output", split = FALSE)
[16:10:36.511]             base::close(...future.stdout)
[16:10:36.511]         }, add = TRUE)
[16:10:36.511]     }
[16:10:36.511]     ...future.frame <- base::sys.nframe()
[16:10:36.511]     ...future.conditions <- base::list()
[16:10:36.511]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:36.511]     if (FALSE) {
[16:10:36.511]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:36.511]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:36.511]     }
[16:10:36.511]     ...future.result <- base::tryCatch({
[16:10:36.511]         base::withCallingHandlers({
[16:10:36.511]             ...future.value <- base::withVisible(base::local({
[16:10:36.511]                 ...future.makeSendCondition <- local({
[16:10:36.511]                   sendCondition <- NULL
[16:10:36.511]                   function(frame = 1L) {
[16:10:36.511]                     if (is.function(sendCondition)) 
[16:10:36.511]                       return(sendCondition)
[16:10:36.511]                     ns <- getNamespace("parallel")
[16:10:36.511]                     if (exists("sendData", mode = "function", 
[16:10:36.511]                       envir = ns)) {
[16:10:36.511]                       parallel_sendData <- get("sendData", mode = "function", 
[16:10:36.511]                         envir = ns)
[16:10:36.511]                       envir <- sys.frame(frame)
[16:10:36.511]                       master <- NULL
[16:10:36.511]                       while (!identical(envir, .GlobalEnv) && 
[16:10:36.511]                         !identical(envir, emptyenv())) {
[16:10:36.511]                         if (exists("master", mode = "list", envir = envir, 
[16:10:36.511]                           inherits = FALSE)) {
[16:10:36.511]                           master <- get("master", mode = "list", 
[16:10:36.511]                             envir = envir, inherits = FALSE)
[16:10:36.511]                           if (inherits(master, c("SOCKnode", 
[16:10:36.511]                             "SOCK0node"))) {
[16:10:36.511]                             sendCondition <<- function(cond) {
[16:10:36.511]                               data <- list(type = "VALUE", value = cond, 
[16:10:36.511]                                 success = TRUE)
[16:10:36.511]                               parallel_sendData(master, data)
[16:10:36.511]                             }
[16:10:36.511]                             return(sendCondition)
[16:10:36.511]                           }
[16:10:36.511]                         }
[16:10:36.511]                         frame <- frame + 1L
[16:10:36.511]                         envir <- sys.frame(frame)
[16:10:36.511]                       }
[16:10:36.511]                     }
[16:10:36.511]                     sendCondition <<- function(cond) NULL
[16:10:36.511]                   }
[16:10:36.511]                 })
[16:10:36.511]                 withCallingHandlers({
[16:10:36.511]                   {
[16:10:36.511]                     do.call(function(...) {
[16:10:36.511]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.511]                       if (!identical(...future.globals.maxSize.org, 
[16:10:36.511]                         ...future.globals.maxSize)) {
[16:10:36.511]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.511]                         on.exit(options(oopts), add = TRUE)
[16:10:36.511]                       }
[16:10:36.511]                       {
[16:10:36.511]                         lapply(seq_along(...future.elements_ii), 
[16:10:36.511]                           FUN = function(jj) {
[16:10:36.511]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.511]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.511]                               envir = globalenv(), inherits = FALSE)
[16:10:36.511]                             ...future.FUN(...future.X_jj, ...)
[16:10:36.511]                           })
[16:10:36.511]                       }
[16:10:36.511]                     }, args = future.call.arguments)
[16:10:36.511]                   }
[16:10:36.511]                 }, immediateCondition = function(cond) {
[16:10:36.511]                   sendCondition <- ...future.makeSendCondition()
[16:10:36.511]                   sendCondition(cond)
[16:10:36.511]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.511]                   {
[16:10:36.511]                     inherits <- base::inherits
[16:10:36.511]                     invokeRestart <- base::invokeRestart
[16:10:36.511]                     is.null <- base::is.null
[16:10:36.511]                     muffled <- FALSE
[16:10:36.511]                     if (inherits(cond, "message")) {
[16:10:36.511]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:36.511]                       if (muffled) 
[16:10:36.511]                         invokeRestart("muffleMessage")
[16:10:36.511]                     }
[16:10:36.511]                     else if (inherits(cond, "warning")) {
[16:10:36.511]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:36.511]                       if (muffled) 
[16:10:36.511]                         invokeRestart("muffleWarning")
[16:10:36.511]                     }
[16:10:36.511]                     else if (inherits(cond, "condition")) {
[16:10:36.511]                       if (!is.null(pattern)) {
[16:10:36.511]                         computeRestarts <- base::computeRestarts
[16:10:36.511]                         grepl <- base::grepl
[16:10:36.511]                         restarts <- computeRestarts(cond)
[16:10:36.511]                         for (restart in restarts) {
[16:10:36.511]                           name <- restart$name
[16:10:36.511]                           if (is.null(name)) 
[16:10:36.511]                             next
[16:10:36.511]                           if (!grepl(pattern, name)) 
[16:10:36.511]                             next
[16:10:36.511]                           invokeRestart(restart)
[16:10:36.511]                           muffled <- TRUE
[16:10:36.511]                           break
[16:10:36.511]                         }
[16:10:36.511]                       }
[16:10:36.511]                     }
[16:10:36.511]                     invisible(muffled)
[16:10:36.511]                   }
[16:10:36.511]                   muffleCondition(cond)
[16:10:36.511]                 })
[16:10:36.511]             }))
[16:10:36.511]             future::FutureResult(value = ...future.value$value, 
[16:10:36.511]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:36.511]                   ...future.rng), globalenv = if (FALSE) 
[16:10:36.511]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:36.511]                     ...future.globalenv.names))
[16:10:36.511]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:36.511]         }, condition = base::local({
[16:10:36.511]             c <- base::c
[16:10:36.511]             inherits <- base::inherits
[16:10:36.511]             invokeRestart <- base::invokeRestart
[16:10:36.511]             length <- base::length
[16:10:36.511]             list <- base::list
[16:10:36.511]             seq.int <- base::seq.int
[16:10:36.511]             signalCondition <- base::signalCondition
[16:10:36.511]             sys.calls <- base::sys.calls
[16:10:36.511]             `[[` <- base::`[[`
[16:10:36.511]             `+` <- base::`+`
[16:10:36.511]             `<<-` <- base::`<<-`
[16:10:36.511]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:36.511]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:36.511]                   3L)]
[16:10:36.511]             }
[16:10:36.511]             function(cond) {
[16:10:36.511]                 is_error <- inherits(cond, "error")
[16:10:36.511]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:36.511]                   NULL)
[16:10:36.511]                 if (is_error) {
[16:10:36.511]                   sessionInformation <- function() {
[16:10:36.511]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:36.511]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:36.511]                       search = base::search(), system = base::Sys.info())
[16:10:36.511]                   }
[16:10:36.511]                   ...future.conditions[[length(...future.conditions) + 
[16:10:36.511]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:36.511]                     cond$call), session = sessionInformation(), 
[16:10:36.511]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:36.511]                   signalCondition(cond)
[16:10:36.511]                 }
[16:10:36.511]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:36.511]                 "immediateCondition"))) {
[16:10:36.511]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:36.511]                   ...future.conditions[[length(...future.conditions) + 
[16:10:36.511]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:36.511]                   if (TRUE && !signal) {
[16:10:36.511]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.511]                     {
[16:10:36.511]                       inherits <- base::inherits
[16:10:36.511]                       invokeRestart <- base::invokeRestart
[16:10:36.511]                       is.null <- base::is.null
[16:10:36.511]                       muffled <- FALSE
[16:10:36.511]                       if (inherits(cond, "message")) {
[16:10:36.511]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:36.511]                         if (muffled) 
[16:10:36.511]                           invokeRestart("muffleMessage")
[16:10:36.511]                       }
[16:10:36.511]                       else if (inherits(cond, "warning")) {
[16:10:36.511]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:36.511]                         if (muffled) 
[16:10:36.511]                           invokeRestart("muffleWarning")
[16:10:36.511]                       }
[16:10:36.511]                       else if (inherits(cond, "condition")) {
[16:10:36.511]                         if (!is.null(pattern)) {
[16:10:36.511]                           computeRestarts <- base::computeRestarts
[16:10:36.511]                           grepl <- base::grepl
[16:10:36.511]                           restarts <- computeRestarts(cond)
[16:10:36.511]                           for (restart in restarts) {
[16:10:36.511]                             name <- restart$name
[16:10:36.511]                             if (is.null(name)) 
[16:10:36.511]                               next
[16:10:36.511]                             if (!grepl(pattern, name)) 
[16:10:36.511]                               next
[16:10:36.511]                             invokeRestart(restart)
[16:10:36.511]                             muffled <- TRUE
[16:10:36.511]                             break
[16:10:36.511]                           }
[16:10:36.511]                         }
[16:10:36.511]                       }
[16:10:36.511]                       invisible(muffled)
[16:10:36.511]                     }
[16:10:36.511]                     muffleCondition(cond, pattern = "^muffle")
[16:10:36.511]                   }
[16:10:36.511]                 }
[16:10:36.511]                 else {
[16:10:36.511]                   if (TRUE) {
[16:10:36.511]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.511]                     {
[16:10:36.511]                       inherits <- base::inherits
[16:10:36.511]                       invokeRestart <- base::invokeRestart
[16:10:36.511]                       is.null <- base::is.null
[16:10:36.511]                       muffled <- FALSE
[16:10:36.511]                       if (inherits(cond, "message")) {
[16:10:36.511]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:36.511]                         if (muffled) 
[16:10:36.511]                           invokeRestart("muffleMessage")
[16:10:36.511]                       }
[16:10:36.511]                       else if (inherits(cond, "warning")) {
[16:10:36.511]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:36.511]                         if (muffled) 
[16:10:36.511]                           invokeRestart("muffleWarning")
[16:10:36.511]                       }
[16:10:36.511]                       else if (inherits(cond, "condition")) {
[16:10:36.511]                         if (!is.null(pattern)) {
[16:10:36.511]                           computeRestarts <- base::computeRestarts
[16:10:36.511]                           grepl <- base::grepl
[16:10:36.511]                           restarts <- computeRestarts(cond)
[16:10:36.511]                           for (restart in restarts) {
[16:10:36.511]                             name <- restart$name
[16:10:36.511]                             if (is.null(name)) 
[16:10:36.511]                               next
[16:10:36.511]                             if (!grepl(pattern, name)) 
[16:10:36.511]                               next
[16:10:36.511]                             invokeRestart(restart)
[16:10:36.511]                             muffled <- TRUE
[16:10:36.511]                             break
[16:10:36.511]                           }
[16:10:36.511]                         }
[16:10:36.511]                       }
[16:10:36.511]                       invisible(muffled)
[16:10:36.511]                     }
[16:10:36.511]                     muffleCondition(cond, pattern = "^muffle")
[16:10:36.511]                   }
[16:10:36.511]                 }
[16:10:36.511]             }
[16:10:36.511]         }))
[16:10:36.511]     }, error = function(ex) {
[16:10:36.511]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:36.511]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:36.511]                 ...future.rng), started = ...future.startTime, 
[16:10:36.511]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:36.511]             version = "1.8"), class = "FutureResult")
[16:10:36.511]     }, finally = {
[16:10:36.511]         if (!identical(...future.workdir, getwd())) 
[16:10:36.511]             setwd(...future.workdir)
[16:10:36.511]         {
[16:10:36.511]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:36.511]                 ...future.oldOptions$nwarnings <- NULL
[16:10:36.511]             }
[16:10:36.511]             base::options(...future.oldOptions)
[16:10:36.511]             if (.Platform$OS.type == "windows") {
[16:10:36.511]                 old_names <- names(...future.oldEnvVars)
[16:10:36.511]                 envs <- base::Sys.getenv()
[16:10:36.511]                 names <- names(envs)
[16:10:36.511]                 common <- intersect(names, old_names)
[16:10:36.511]                 added <- setdiff(names, old_names)
[16:10:36.511]                 removed <- setdiff(old_names, names)
[16:10:36.511]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:36.511]                   envs[common]]
[16:10:36.511]                 NAMES <- toupper(changed)
[16:10:36.511]                 args <- list()
[16:10:36.511]                 for (kk in seq_along(NAMES)) {
[16:10:36.511]                   name <- changed[[kk]]
[16:10:36.511]                   NAME <- NAMES[[kk]]
[16:10:36.511]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.511]                     next
[16:10:36.511]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:36.511]                 }
[16:10:36.511]                 NAMES <- toupper(added)
[16:10:36.511]                 for (kk in seq_along(NAMES)) {
[16:10:36.511]                   name <- added[[kk]]
[16:10:36.511]                   NAME <- NAMES[[kk]]
[16:10:36.511]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.511]                     next
[16:10:36.511]                   args[[name]] <- ""
[16:10:36.511]                 }
[16:10:36.511]                 NAMES <- toupper(removed)
[16:10:36.511]                 for (kk in seq_along(NAMES)) {
[16:10:36.511]                   name <- removed[[kk]]
[16:10:36.511]                   NAME <- NAMES[[kk]]
[16:10:36.511]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.511]                     next
[16:10:36.511]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:36.511]                 }
[16:10:36.511]                 if (length(args) > 0) 
[16:10:36.511]                   base::do.call(base::Sys.setenv, args = args)
[16:10:36.511]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:36.511]             }
[16:10:36.511]             else {
[16:10:36.511]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:36.511]             }
[16:10:36.511]             {
[16:10:36.511]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:36.511]                   0L) {
[16:10:36.511]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:36.511]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:36.511]                   base::options(opts)
[16:10:36.511]                 }
[16:10:36.511]                 {
[16:10:36.511]                   {
[16:10:36.511]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:36.511]                     NULL
[16:10:36.511]                   }
[16:10:36.511]                   options(future.plan = NULL)
[16:10:36.511]                   if (is.na(NA_character_)) 
[16:10:36.511]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:36.511]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:36.511]                   future::plan(list(function (..., workers = availableCores(), 
[16:10:36.511]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:10:36.511]                     envir = parent.frame()) 
[16:10:36.511]                   {
[16:10:36.511]                     if (is.function(workers)) 
[16:10:36.511]                       workers <- workers()
[16:10:36.511]                     workers <- structure(as.integer(workers), 
[16:10:36.511]                       class = class(workers))
[16:10:36.511]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:10:36.511]                       workers >= 1)
[16:10:36.511]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:10:36.511]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:10:36.511]                     }
[16:10:36.511]                     future <- MultisessionFuture(..., workers = workers, 
[16:10:36.511]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:10:36.511]                       envir = envir)
[16:10:36.511]                     if (!future$lazy) 
[16:10:36.511]                       future <- run(future)
[16:10:36.511]                     invisible(future)
[16:10:36.511]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:36.511]                 }
[16:10:36.511]             }
[16:10:36.511]         }
[16:10:36.511]     })
[16:10:36.511]     if (TRUE) {
[16:10:36.511]         base::sink(type = "output", split = FALSE)
[16:10:36.511]         if (TRUE) {
[16:10:36.511]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:36.511]         }
[16:10:36.511]         else {
[16:10:36.511]             ...future.result["stdout"] <- base::list(NULL)
[16:10:36.511]         }
[16:10:36.511]         base::close(...future.stdout)
[16:10:36.511]         ...future.stdout <- NULL
[16:10:36.511]     }
[16:10:36.511]     ...future.result$conditions <- ...future.conditions
[16:10:36.511]     ...future.result$finished <- base::Sys.time()
[16:10:36.511]     ...future.result
[16:10:36.511] }
[16:10:36.514] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[16:10:36.514] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[16:10:36.515] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[16:10:36.515] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[16:10:36.515] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[16:10:36.515] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[16:10:36.516] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[16:10:36.516] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[16:10:36.516] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[16:10:36.516] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[16:10:36.516] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[16:10:36.517] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[16:10:36.517] MultisessionFuture started
[16:10:36.517] - Launch lazy future ... done
[16:10:36.517] run() for ‘MultisessionFuture’ ... done
[16:10:36.517] Created future:
[16:10:36.517] MultisessionFuture:
[16:10:36.517] Label: ‘future_replicate-2’
[16:10:36.517] Expression:
[16:10:36.517] {
[16:10:36.517]     do.call(function(...) {
[16:10:36.517]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.517]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:36.517]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.517]             on.exit(options(oopts), add = TRUE)
[16:10:36.517]         }
[16:10:36.517]         {
[16:10:36.517]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:36.517]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.517]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.517]                   envir = globalenv(), inherits = FALSE)
[16:10:36.517]                 ...future.FUN(...future.X_jj, ...)
[16:10:36.517]             })
[16:10:36.517]         }
[16:10:36.517]     }, args = future.call.arguments)
[16:10:36.517] }
[16:10:36.517] Lazy evaluation: FALSE
[16:10:36.517] Asynchronous evaluation: TRUE
[16:10:36.517] Local evaluation: TRUE
[16:10:36.517] Environment: R_GlobalEnv
[16:10:36.517] Capture standard output: TRUE
[16:10:36.517] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:36.517] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:36.517] Packages: <none>
[16:10:36.517] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:36.517] Resolved: FALSE
[16:10:36.517] Value: <not collected>
[16:10:36.517] Conditions captured: <none>
[16:10:36.517] Early signaling: FALSE
[16:10:36.517] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:36.517] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:36.529] Chunk #2 of 2 ... DONE
[16:10:36.529] Launching 2 futures (chunks) ... DONE
[16:10:36.529] Resolving 2 futures (chunks) ...
[16:10:36.529] resolve() on list ...
[16:10:36.529]  recursive: 0
[16:10:36.529]  length: 2
[16:10:36.530] 
[16:10:36.530] receiveMessageFromWorker() for ClusterFuture ...
[16:10:36.530] - Validating connection of MultisessionFuture
[16:10:36.530] - received message: FutureResult
[16:10:36.530] - Received FutureResult
[16:10:36.530] - Erased future from FutureRegistry
[16:10:36.531] result() for ClusterFuture ...
[16:10:36.531] - result already collected: FutureResult
[16:10:36.531] result() for ClusterFuture ... done
[16:10:36.531] receiveMessageFromWorker() for ClusterFuture ... done
[16:10:36.531] Future #1
[16:10:36.531] result() for ClusterFuture ...
[16:10:36.531] - result already collected: FutureResult
[16:10:36.531] result() for ClusterFuture ... done
[16:10:36.531] result() for ClusterFuture ...
[16:10:36.531] - result already collected: FutureResult
[16:10:36.531] result() for ClusterFuture ... done
[16:10:36.532] signalConditionsASAP(MultisessionFuture, pos=1) ...
[16:10:36.532] - nx: 2
[16:10:36.532] - relay: TRUE
[16:10:36.532] - stdout: TRUE
[16:10:36.532] - signal: TRUE
[16:10:36.532] - resignal: FALSE
[16:10:36.532] - force: TRUE
[16:10:36.532] - relayed: [n=2] FALSE, FALSE
[16:10:36.532] - queued futures: [n=2] FALSE, FALSE
[16:10:36.532]  - until=1
[16:10:36.533]  - relaying element #1
[16:10:36.533] result() for ClusterFuture ...
[16:10:36.533] - result already collected: FutureResult
[16:10:36.533] result() for ClusterFuture ... done
[16:10:36.533] result() for ClusterFuture ...
[16:10:36.533] - result already collected: FutureResult
[16:10:36.533] result() for ClusterFuture ... done
[16:10:36.533] result() for ClusterFuture ...
[16:10:36.533] - result already collected: FutureResult
[16:10:36.533] result() for ClusterFuture ... done
[16:10:36.534] result() for ClusterFuture ...
[16:10:36.534] - result already collected: FutureResult
[16:10:36.534] result() for ClusterFuture ... done
[16:10:36.534] - relayed: [n=2] TRUE, FALSE
[16:10:36.534] - queued futures: [n=2] TRUE, FALSE
[16:10:36.534] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[16:10:36.534]  length: 1 (resolved future 1)
[16:10:36.565] receiveMessageFromWorker() for ClusterFuture ...
[16:10:36.565] - Validating connection of MultisessionFuture
[16:10:36.565] - received message: FutureResult
[16:10:36.565] - Received FutureResult
[16:10:36.565] - Erased future from FutureRegistry
[16:10:36.565] result() for ClusterFuture ...
[16:10:36.566] - result already collected: FutureResult
[16:10:36.566] result() for ClusterFuture ... done
[16:10:36.566] receiveMessageFromWorker() for ClusterFuture ... done
[16:10:36.566] Future #2
[16:10:36.566] result() for ClusterFuture ...
[16:10:36.566] - result already collected: FutureResult
[16:10:36.566] result() for ClusterFuture ... done
[16:10:36.566] result() for ClusterFuture ...
[16:10:36.566] - result already collected: FutureResult
[16:10:36.566] result() for ClusterFuture ... done
[16:10:36.566] signalConditionsASAP(MultisessionFuture, pos=2) ...
[16:10:36.567] - nx: 2
[16:10:36.567] - relay: TRUE
[16:10:36.567] - stdout: TRUE
[16:10:36.567] - signal: TRUE
[16:10:36.567] - resignal: FALSE
[16:10:36.567] - force: TRUE
[16:10:36.567] - relayed: [n=2] TRUE, FALSE
[16:10:36.567] - queued futures: [n=2] TRUE, FALSE
[16:10:36.567]  - until=2
[16:10:36.567]  - relaying element #2
[16:10:36.567] result() for ClusterFuture ...
[16:10:36.567] - result already collected: FutureResult
[16:10:36.568] result() for ClusterFuture ... done
[16:10:36.568] result() for ClusterFuture ...
[16:10:36.568] - result already collected: FutureResult
[16:10:36.568] result() for ClusterFuture ... done
[16:10:36.568] result() for ClusterFuture ...
[16:10:36.568] - result already collected: FutureResult
[16:10:36.568] result() for ClusterFuture ... done
[16:10:36.568] result() for ClusterFuture ...
[16:10:36.568] - result already collected: FutureResult
[16:10:36.568] result() for ClusterFuture ... done
[16:10:36.568] - relayed: [n=2] TRUE, TRUE
[16:10:36.569] - queued futures: [n=2] TRUE, TRUE
[16:10:36.569] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[16:10:36.569]  length: 0 (resolved future 2)
[16:10:36.569] Relaying remaining futures
[16:10:36.569] signalConditionsASAP(NULL, pos=0) ...
[16:10:36.569] - nx: 2
[16:10:36.569] - relay: TRUE
[16:10:36.569] - stdout: TRUE
[16:10:36.569] - signal: TRUE
[16:10:36.569] - resignal: FALSE
[16:10:36.569] - force: TRUE
[16:10:36.569] - relayed: [n=2] TRUE, TRUE
[16:10:36.570] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:10:36.570] - relayed: [n=2] TRUE, TRUE
[16:10:36.570] - queued futures: [n=2] TRUE, TRUE
[16:10:36.570] signalConditionsASAP(NULL, pos=0) ... done
[16:10:36.570] resolve() on list ... DONE
[16:10:36.570] result() for ClusterFuture ...
[16:10:36.570] - result already collected: FutureResult
[16:10:36.570] result() for ClusterFuture ... done
[16:10:36.570] result() for ClusterFuture ...
[16:10:36.570] - result already collected: FutureResult
[16:10:36.570] result() for ClusterFuture ... done
[16:10:36.571] result() for ClusterFuture ...
[16:10:36.571] - result already collected: FutureResult
[16:10:36.571] result() for ClusterFuture ... done
[16:10:36.571] result() for ClusterFuture ...
[16:10:36.571] - result already collected: FutureResult
[16:10:36.571] result() for ClusterFuture ... done
[16:10:36.571]  - Number of value chunks collected: 2
[16:10:36.571] Resolving 2 futures (chunks) ... DONE
[16:10:36.571] Reducing values from 2 chunks ...
[16:10:36.571]  - Number of values collected after concatenation: 5
[16:10:36.571]  - Number of values expected: 5
[16:10:36.572] Reducing values from 2 chunks ... DONE
[16:10:36.572] future_lapply() ... DONE
[16:10:36.572] future_lapply() ...
[16:10:36.572] Generating random seeds ...
[16:10:36.572] Generating random seed streams for 5 elements ...
[16:10:36.573] Generating random seed streams for 5 elements ... DONE
[16:10:36.573] Generating random seeds ... DONE
[16:10:36.573] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:10:36.577] Number of chunks: 2
[16:10:36.577] getGlobalsAndPackagesXApply() ...
[16:10:36.577]  - future.globals: TRUE
[16:10:36.577] getGlobalsAndPackages() ...
[16:10:36.577] Searching for globals...
[16:10:36.578] - globals found: [2] ‘FUN’, ‘sample’
[16:10:36.578] Searching for globals ... DONE
[16:10:36.579] Resolving globals: FALSE
[16:10:36.579] The total size of the 1 globals is 616 bytes (616 bytes)
[16:10:36.579] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:10:36.579] - globals: [1] ‘FUN’
[16:10:36.579] 
[16:10:36.580] getGlobalsAndPackages() ... DONE
[16:10:36.580]  - globals found/used: [n=1] ‘FUN’
[16:10:36.580]  - needed namespaces: [n=0] 
[16:10:36.580] Finding globals ... DONE
[16:10:36.580]  - use_args: TRUE
[16:10:36.580]  - Getting '...' globals ...
[16:10:36.580] resolve() on list ...
[16:10:36.580]  recursive: 0
[16:10:36.581]  length: 1
[16:10:36.581]  elements: ‘...’
[16:10:36.581]  length: 0 (resolved future 1)
[16:10:36.581] resolve() on list ... DONE
[16:10:36.581]    - '...' content: [n=0] 
[16:10:36.581] List of 1
[16:10:36.581]  $ ...: list()
[16:10:36.581]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:36.581]  - attr(*, "where")=List of 1
[16:10:36.581]   ..$ ...:<environment: 0x55cf9099f110> 
[16:10:36.581]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:36.581]  - attr(*, "resolved")= logi TRUE
[16:10:36.581]  - attr(*, "total_size")= num NA
[16:10:36.585]  - Getting '...' globals ... DONE
[16:10:36.585] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:10:36.586] List of 2
[16:10:36.586]  $ ...future.FUN:function (...)  
[16:10:36.586]  $ ...          : list()
[16:10:36.586]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:36.586]  - attr(*, "where")=List of 2
[16:10:36.586]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:10:36.586]   ..$ ...          :<environment: 0x55cf9099f110> 
[16:10:36.586]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:36.586]  - attr(*, "resolved")= logi FALSE
[16:10:36.586]  - attr(*, "total_size")= num 616
[16:10:36.588] Packages to be attached in all futures: [n=0] 
[16:10:36.588] getGlobalsAndPackagesXApply() ... DONE
[16:10:36.588] Number of futures (= number of chunks): 2
[16:10:36.588] Launching 2 futures (chunks) ...
[16:10:36.589] Chunk #1 of 2 ...
[16:10:36.589]  - Finding globals in 'X' for chunk #1 ...
[16:10:36.589] getGlobalsAndPackages() ...
[16:10:36.589] Searching for globals...
[16:10:36.589] 
[16:10:36.589] Searching for globals ... DONE
[16:10:36.589] - globals: [0] <none>
[16:10:36.589] getGlobalsAndPackages() ... DONE
[16:10:36.589]    + additional globals found: [n=0] 
[16:10:36.590]    + additional namespaces needed: [n=0] 
[16:10:36.590]  - Finding globals in 'X' for chunk #1 ... DONE
[16:10:36.590]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:10:36.590]  - seeds: [2] <seeds>
[16:10:36.590] getGlobalsAndPackages() ...
[16:10:36.590] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:36.590] Resolving globals: FALSE
[16:10:36.590] Tweak future expression to call with '...' arguments ...
[16:10:36.590] {
[16:10:36.590]     do.call(function(...) {
[16:10:36.590]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.590]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:36.590]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.590]             on.exit(options(oopts), add = TRUE)
[16:10:36.590]         }
[16:10:36.590]         {
[16:10:36.590]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:36.590]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.590]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.590]                   envir = globalenv(), inherits = FALSE)
[16:10:36.590]                 ...future.FUN(...future.X_jj, ...)
[16:10:36.590]             })
[16:10:36.590]         }
[16:10:36.590]     }, args = future.call.arguments)
[16:10:36.590] }
[16:10:36.591] Tweak future expression to call with '...' arguments ... DONE
[16:10:36.591] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:36.591] 
[16:10:36.591] getGlobalsAndPackages() ... DONE
[16:10:36.591] run() for ‘Future’ ...
[16:10:36.592] - state: ‘created’
[16:10:36.592] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:10:36.606] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:36.606] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:10:36.607]   - Field: ‘node’
[16:10:36.607]   - Field: ‘label’
[16:10:36.607]   - Field: ‘local’
[16:10:36.607]   - Field: ‘owner’
[16:10:36.607]   - Field: ‘envir’
[16:10:36.607]   - Field: ‘workers’
[16:10:36.607]   - Field: ‘packages’
[16:10:36.607]   - Field: ‘gc’
[16:10:36.607]   - Field: ‘conditions’
[16:10:36.607]   - Field: ‘persistent’
[16:10:36.608]   - Field: ‘expr’
[16:10:36.608]   - Field: ‘uuid’
[16:10:36.608]   - Field: ‘seed’
[16:10:36.608]   - Field: ‘version’
[16:10:36.608]   - Field: ‘result’
[16:10:36.608]   - Field: ‘asynchronous’
[16:10:36.608]   - Field: ‘calls’
[16:10:36.608]   - Field: ‘globals’
[16:10:36.608]   - Field: ‘stdout’
[16:10:36.608]   - Field: ‘earlySignal’
[16:10:36.608]   - Field: ‘lazy’
[16:10:36.609]   - Field: ‘state’
[16:10:36.609] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:10:36.609] - Launch lazy future ...
[16:10:36.609] Packages needed by the future expression (n = 0): <none>
[16:10:36.609] Packages needed by future strategies (n = 0): <none>
[16:10:36.610] {
[16:10:36.610]     {
[16:10:36.610]         {
[16:10:36.610]             ...future.startTime <- base::Sys.time()
[16:10:36.610]             {
[16:10:36.610]                 {
[16:10:36.610]                   {
[16:10:36.610]                     {
[16:10:36.610]                       base::local({
[16:10:36.610]                         has_future <- base::requireNamespace("future", 
[16:10:36.610]                           quietly = TRUE)
[16:10:36.610]                         if (has_future) {
[16:10:36.610]                           ns <- base::getNamespace("future")
[16:10:36.610]                           version <- ns[[".package"]][["version"]]
[16:10:36.610]                           if (is.null(version)) 
[16:10:36.610]                             version <- utils::packageVersion("future")
[16:10:36.610]                         }
[16:10:36.610]                         else {
[16:10:36.610]                           version <- NULL
[16:10:36.610]                         }
[16:10:36.610]                         if (!has_future || version < "1.8.0") {
[16:10:36.610]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:36.610]                             "", base::R.version$version.string), 
[16:10:36.610]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:36.610]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:36.610]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:36.610]                               "release", "version")], collapse = " "), 
[16:10:36.610]                             hostname = base::Sys.info()[["nodename"]])
[16:10:36.610]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:36.610]                             info)
[16:10:36.610]                           info <- base::paste(info, collapse = "; ")
[16:10:36.610]                           if (!has_future) {
[16:10:36.610]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:36.610]                               info)
[16:10:36.610]                           }
[16:10:36.610]                           else {
[16:10:36.610]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:36.610]                               info, version)
[16:10:36.610]                           }
[16:10:36.610]                           base::stop(msg)
[16:10:36.610]                         }
[16:10:36.610]                       })
[16:10:36.610]                     }
[16:10:36.610]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:36.610]                     base::options(mc.cores = 1L)
[16:10:36.610]                   }
[16:10:36.610]                   options(future.plan = NULL)
[16:10:36.610]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:36.610]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:36.610]                 }
[16:10:36.610]                 ...future.workdir <- getwd()
[16:10:36.610]             }
[16:10:36.610]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:36.610]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:36.610]         }
[16:10:36.610]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:36.610]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:10:36.610]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:36.610]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:36.610]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:36.610]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:36.610]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:36.610]             base::names(...future.oldOptions))
[16:10:36.610]     }
[16:10:36.610]     if (FALSE) {
[16:10:36.610]     }
[16:10:36.610]     else {
[16:10:36.610]         if (TRUE) {
[16:10:36.610]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:36.610]                 open = "w")
[16:10:36.610]         }
[16:10:36.610]         else {
[16:10:36.610]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:36.610]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:36.610]         }
[16:10:36.610]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:36.610]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:36.610]             base::sink(type = "output", split = FALSE)
[16:10:36.610]             base::close(...future.stdout)
[16:10:36.610]         }, add = TRUE)
[16:10:36.610]     }
[16:10:36.610]     ...future.frame <- base::sys.nframe()
[16:10:36.610]     ...future.conditions <- base::list()
[16:10:36.610]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:36.610]     if (FALSE) {
[16:10:36.610]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:36.610]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:36.610]     }
[16:10:36.610]     ...future.result <- base::tryCatch({
[16:10:36.610]         base::withCallingHandlers({
[16:10:36.610]             ...future.value <- base::withVisible(base::local({
[16:10:36.610]                 ...future.makeSendCondition <- local({
[16:10:36.610]                   sendCondition <- NULL
[16:10:36.610]                   function(frame = 1L) {
[16:10:36.610]                     if (is.function(sendCondition)) 
[16:10:36.610]                       return(sendCondition)
[16:10:36.610]                     ns <- getNamespace("parallel")
[16:10:36.610]                     if (exists("sendData", mode = "function", 
[16:10:36.610]                       envir = ns)) {
[16:10:36.610]                       parallel_sendData <- get("sendData", mode = "function", 
[16:10:36.610]                         envir = ns)
[16:10:36.610]                       envir <- sys.frame(frame)
[16:10:36.610]                       master <- NULL
[16:10:36.610]                       while (!identical(envir, .GlobalEnv) && 
[16:10:36.610]                         !identical(envir, emptyenv())) {
[16:10:36.610]                         if (exists("master", mode = "list", envir = envir, 
[16:10:36.610]                           inherits = FALSE)) {
[16:10:36.610]                           master <- get("master", mode = "list", 
[16:10:36.610]                             envir = envir, inherits = FALSE)
[16:10:36.610]                           if (inherits(master, c("SOCKnode", 
[16:10:36.610]                             "SOCK0node"))) {
[16:10:36.610]                             sendCondition <<- function(cond) {
[16:10:36.610]                               data <- list(type = "VALUE", value = cond, 
[16:10:36.610]                                 success = TRUE)
[16:10:36.610]                               parallel_sendData(master, data)
[16:10:36.610]                             }
[16:10:36.610]                             return(sendCondition)
[16:10:36.610]                           }
[16:10:36.610]                         }
[16:10:36.610]                         frame <- frame + 1L
[16:10:36.610]                         envir <- sys.frame(frame)
[16:10:36.610]                       }
[16:10:36.610]                     }
[16:10:36.610]                     sendCondition <<- function(cond) NULL
[16:10:36.610]                   }
[16:10:36.610]                 })
[16:10:36.610]                 withCallingHandlers({
[16:10:36.610]                   {
[16:10:36.610]                     do.call(function(...) {
[16:10:36.610]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.610]                       if (!identical(...future.globals.maxSize.org, 
[16:10:36.610]                         ...future.globals.maxSize)) {
[16:10:36.610]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.610]                         on.exit(options(oopts), add = TRUE)
[16:10:36.610]                       }
[16:10:36.610]                       {
[16:10:36.610]                         lapply(seq_along(...future.elements_ii), 
[16:10:36.610]                           FUN = function(jj) {
[16:10:36.610]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.610]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.610]                               envir = globalenv(), inherits = FALSE)
[16:10:36.610]                             ...future.FUN(...future.X_jj, ...)
[16:10:36.610]                           })
[16:10:36.610]                       }
[16:10:36.610]                     }, args = future.call.arguments)
[16:10:36.610]                   }
[16:10:36.610]                 }, immediateCondition = function(cond) {
[16:10:36.610]                   sendCondition <- ...future.makeSendCondition()
[16:10:36.610]                   sendCondition(cond)
[16:10:36.610]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.610]                   {
[16:10:36.610]                     inherits <- base::inherits
[16:10:36.610]                     invokeRestart <- base::invokeRestart
[16:10:36.610]                     is.null <- base::is.null
[16:10:36.610]                     muffled <- FALSE
[16:10:36.610]                     if (inherits(cond, "message")) {
[16:10:36.610]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:36.610]                       if (muffled) 
[16:10:36.610]                         invokeRestart("muffleMessage")
[16:10:36.610]                     }
[16:10:36.610]                     else if (inherits(cond, "warning")) {
[16:10:36.610]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:36.610]                       if (muffled) 
[16:10:36.610]                         invokeRestart("muffleWarning")
[16:10:36.610]                     }
[16:10:36.610]                     else if (inherits(cond, "condition")) {
[16:10:36.610]                       if (!is.null(pattern)) {
[16:10:36.610]                         computeRestarts <- base::computeRestarts
[16:10:36.610]                         grepl <- base::grepl
[16:10:36.610]                         restarts <- computeRestarts(cond)
[16:10:36.610]                         for (restart in restarts) {
[16:10:36.610]                           name <- restart$name
[16:10:36.610]                           if (is.null(name)) 
[16:10:36.610]                             next
[16:10:36.610]                           if (!grepl(pattern, name)) 
[16:10:36.610]                             next
[16:10:36.610]                           invokeRestart(restart)
[16:10:36.610]                           muffled <- TRUE
[16:10:36.610]                           break
[16:10:36.610]                         }
[16:10:36.610]                       }
[16:10:36.610]                     }
[16:10:36.610]                     invisible(muffled)
[16:10:36.610]                   }
[16:10:36.610]                   muffleCondition(cond)
[16:10:36.610]                 })
[16:10:36.610]             }))
[16:10:36.610]             future::FutureResult(value = ...future.value$value, 
[16:10:36.610]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:36.610]                   ...future.rng), globalenv = if (FALSE) 
[16:10:36.610]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:36.610]                     ...future.globalenv.names))
[16:10:36.610]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:36.610]         }, condition = base::local({
[16:10:36.610]             c <- base::c
[16:10:36.610]             inherits <- base::inherits
[16:10:36.610]             invokeRestart <- base::invokeRestart
[16:10:36.610]             length <- base::length
[16:10:36.610]             list <- base::list
[16:10:36.610]             seq.int <- base::seq.int
[16:10:36.610]             signalCondition <- base::signalCondition
[16:10:36.610]             sys.calls <- base::sys.calls
[16:10:36.610]             `[[` <- base::`[[`
[16:10:36.610]             `+` <- base::`+`
[16:10:36.610]             `<<-` <- base::`<<-`
[16:10:36.610]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:36.610]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:36.610]                   3L)]
[16:10:36.610]             }
[16:10:36.610]             function(cond) {
[16:10:36.610]                 is_error <- inherits(cond, "error")
[16:10:36.610]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:36.610]                   NULL)
[16:10:36.610]                 if (is_error) {
[16:10:36.610]                   sessionInformation <- function() {
[16:10:36.610]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:36.610]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:36.610]                       search = base::search(), system = base::Sys.info())
[16:10:36.610]                   }
[16:10:36.610]                   ...future.conditions[[length(...future.conditions) + 
[16:10:36.610]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:36.610]                     cond$call), session = sessionInformation(), 
[16:10:36.610]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:36.610]                   signalCondition(cond)
[16:10:36.610]                 }
[16:10:36.610]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:36.610]                 "immediateCondition"))) {
[16:10:36.610]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:36.610]                   ...future.conditions[[length(...future.conditions) + 
[16:10:36.610]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:36.610]                   if (TRUE && !signal) {
[16:10:36.610]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.610]                     {
[16:10:36.610]                       inherits <- base::inherits
[16:10:36.610]                       invokeRestart <- base::invokeRestart
[16:10:36.610]                       is.null <- base::is.null
[16:10:36.610]                       muffled <- FALSE
[16:10:36.610]                       if (inherits(cond, "message")) {
[16:10:36.610]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:36.610]                         if (muffled) 
[16:10:36.610]                           invokeRestart("muffleMessage")
[16:10:36.610]                       }
[16:10:36.610]                       else if (inherits(cond, "warning")) {
[16:10:36.610]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:36.610]                         if (muffled) 
[16:10:36.610]                           invokeRestart("muffleWarning")
[16:10:36.610]                       }
[16:10:36.610]                       else if (inherits(cond, "condition")) {
[16:10:36.610]                         if (!is.null(pattern)) {
[16:10:36.610]                           computeRestarts <- base::computeRestarts
[16:10:36.610]                           grepl <- base::grepl
[16:10:36.610]                           restarts <- computeRestarts(cond)
[16:10:36.610]                           for (restart in restarts) {
[16:10:36.610]                             name <- restart$name
[16:10:36.610]                             if (is.null(name)) 
[16:10:36.610]                               next
[16:10:36.610]                             if (!grepl(pattern, name)) 
[16:10:36.610]                               next
[16:10:36.610]                             invokeRestart(restart)
[16:10:36.610]                             muffled <- TRUE
[16:10:36.610]                             break
[16:10:36.610]                           }
[16:10:36.610]                         }
[16:10:36.610]                       }
[16:10:36.610]                       invisible(muffled)
[16:10:36.610]                     }
[16:10:36.610]                     muffleCondition(cond, pattern = "^muffle")
[16:10:36.610]                   }
[16:10:36.610]                 }
[16:10:36.610]                 else {
[16:10:36.610]                   if (TRUE) {
[16:10:36.610]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.610]                     {
[16:10:36.610]                       inherits <- base::inherits
[16:10:36.610]                       invokeRestart <- base::invokeRestart
[16:10:36.610]                       is.null <- base::is.null
[16:10:36.610]                       muffled <- FALSE
[16:10:36.610]                       if (inherits(cond, "message")) {
[16:10:36.610]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:36.610]                         if (muffled) 
[16:10:36.610]                           invokeRestart("muffleMessage")
[16:10:36.610]                       }
[16:10:36.610]                       else if (inherits(cond, "warning")) {
[16:10:36.610]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:36.610]                         if (muffled) 
[16:10:36.610]                           invokeRestart("muffleWarning")
[16:10:36.610]                       }
[16:10:36.610]                       else if (inherits(cond, "condition")) {
[16:10:36.610]                         if (!is.null(pattern)) {
[16:10:36.610]                           computeRestarts <- base::computeRestarts
[16:10:36.610]                           grepl <- base::grepl
[16:10:36.610]                           restarts <- computeRestarts(cond)
[16:10:36.610]                           for (restart in restarts) {
[16:10:36.610]                             name <- restart$name
[16:10:36.610]                             if (is.null(name)) 
[16:10:36.610]                               next
[16:10:36.610]                             if (!grepl(pattern, name)) 
[16:10:36.610]                               next
[16:10:36.610]                             invokeRestart(restart)
[16:10:36.610]                             muffled <- TRUE
[16:10:36.610]                             break
[16:10:36.610]                           }
[16:10:36.610]                         }
[16:10:36.610]                       }
[16:10:36.610]                       invisible(muffled)
[16:10:36.610]                     }
[16:10:36.610]                     muffleCondition(cond, pattern = "^muffle")
[16:10:36.610]                   }
[16:10:36.610]                 }
[16:10:36.610]             }
[16:10:36.610]         }))
[16:10:36.610]     }, error = function(ex) {
[16:10:36.610]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:36.610]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:36.610]                 ...future.rng), started = ...future.startTime, 
[16:10:36.610]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:36.610]             version = "1.8"), class = "FutureResult")
[16:10:36.610]     }, finally = {
[16:10:36.610]         if (!identical(...future.workdir, getwd())) 
[16:10:36.610]             setwd(...future.workdir)
[16:10:36.610]         {
[16:10:36.610]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:36.610]                 ...future.oldOptions$nwarnings <- NULL
[16:10:36.610]             }
[16:10:36.610]             base::options(...future.oldOptions)
[16:10:36.610]             if (.Platform$OS.type == "windows") {
[16:10:36.610]                 old_names <- names(...future.oldEnvVars)
[16:10:36.610]                 envs <- base::Sys.getenv()
[16:10:36.610]                 names <- names(envs)
[16:10:36.610]                 common <- intersect(names, old_names)
[16:10:36.610]                 added <- setdiff(names, old_names)
[16:10:36.610]                 removed <- setdiff(old_names, names)
[16:10:36.610]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:36.610]                   envs[common]]
[16:10:36.610]                 NAMES <- toupper(changed)
[16:10:36.610]                 args <- list()
[16:10:36.610]                 for (kk in seq_along(NAMES)) {
[16:10:36.610]                   name <- changed[[kk]]
[16:10:36.610]                   NAME <- NAMES[[kk]]
[16:10:36.610]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.610]                     next
[16:10:36.610]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:36.610]                 }
[16:10:36.610]                 NAMES <- toupper(added)
[16:10:36.610]                 for (kk in seq_along(NAMES)) {
[16:10:36.610]                   name <- added[[kk]]
[16:10:36.610]                   NAME <- NAMES[[kk]]
[16:10:36.610]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.610]                     next
[16:10:36.610]                   args[[name]] <- ""
[16:10:36.610]                 }
[16:10:36.610]                 NAMES <- toupper(removed)
[16:10:36.610]                 for (kk in seq_along(NAMES)) {
[16:10:36.610]                   name <- removed[[kk]]
[16:10:36.610]                   NAME <- NAMES[[kk]]
[16:10:36.610]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.610]                     next
[16:10:36.610]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:36.610]                 }
[16:10:36.610]                 if (length(args) > 0) 
[16:10:36.610]                   base::do.call(base::Sys.setenv, args = args)
[16:10:36.610]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:36.610]             }
[16:10:36.610]             else {
[16:10:36.610]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:36.610]             }
[16:10:36.610]             {
[16:10:36.610]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:36.610]                   0L) {
[16:10:36.610]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:36.610]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:36.610]                   base::options(opts)
[16:10:36.610]                 }
[16:10:36.610]                 {
[16:10:36.610]                   {
[16:10:36.610]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:36.610]                     NULL
[16:10:36.610]                   }
[16:10:36.610]                   options(future.plan = NULL)
[16:10:36.610]                   if (is.na(NA_character_)) 
[16:10:36.610]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:36.610]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:36.610]                   future::plan(list(function (..., workers = availableCores(), 
[16:10:36.610]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:10:36.610]                     envir = parent.frame()) 
[16:10:36.610]                   {
[16:10:36.610]                     if (is.function(workers)) 
[16:10:36.610]                       workers <- workers()
[16:10:36.610]                     workers <- structure(as.integer(workers), 
[16:10:36.610]                       class = class(workers))
[16:10:36.610]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:10:36.610]                       workers >= 1)
[16:10:36.610]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:10:36.610]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:10:36.610]                     }
[16:10:36.610]                     future <- MultisessionFuture(..., workers = workers, 
[16:10:36.610]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:10:36.610]                       envir = envir)
[16:10:36.610]                     if (!future$lazy) 
[16:10:36.610]                       future <- run(future)
[16:10:36.610]                     invisible(future)
[16:10:36.610]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:36.610]                 }
[16:10:36.610]             }
[16:10:36.610]         }
[16:10:36.610]     })
[16:10:36.610]     if (TRUE) {
[16:10:36.610]         base::sink(type = "output", split = FALSE)
[16:10:36.610]         if (TRUE) {
[16:10:36.610]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:36.610]         }
[16:10:36.610]         else {
[16:10:36.610]             ...future.result["stdout"] <- base::list(NULL)
[16:10:36.610]         }
[16:10:36.610]         base::close(...future.stdout)
[16:10:36.610]         ...future.stdout <- NULL
[16:10:36.610]     }
[16:10:36.610]     ...future.result$conditions <- ...future.conditions
[16:10:36.610]     ...future.result$finished <- base::Sys.time()
[16:10:36.610]     ...future.result
[16:10:36.610] }
[16:10:36.612] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[16:10:36.613] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[16:10:36.613] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[16:10:36.613] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[16:10:36.614] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[16:10:36.614] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[16:10:36.614] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[16:10:36.614] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[16:10:36.615] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[16:10:36.615] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[16:10:36.615] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[16:10:36.615] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[16:10:36.616] MultisessionFuture started
[16:10:36.616] - Launch lazy future ... done
[16:10:36.616] run() for ‘MultisessionFuture’ ... done
[16:10:36.616] Created future:
[16:10:36.616] MultisessionFuture:
[16:10:36.616] Label: ‘future_replicate-1’
[16:10:36.616] Expression:
[16:10:36.616] {
[16:10:36.616]     do.call(function(...) {
[16:10:36.616]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.616]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:36.616]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.616]             on.exit(options(oopts), add = TRUE)
[16:10:36.616]         }
[16:10:36.616]         {
[16:10:36.616]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:36.616]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.616]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.616]                   envir = globalenv(), inherits = FALSE)
[16:10:36.616]                 ...future.FUN(...future.X_jj, ...)
[16:10:36.616]             })
[16:10:36.616]         }
[16:10:36.616]     }, args = future.call.arguments)
[16:10:36.616] }
[16:10:36.616] Lazy evaluation: FALSE
[16:10:36.616] Asynchronous evaluation: TRUE
[16:10:36.616] Local evaluation: TRUE
[16:10:36.616] Environment: R_GlobalEnv
[16:10:36.616] Capture standard output: TRUE
[16:10:36.616] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:36.616] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:36.616] Packages: <none>
[16:10:36.616] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:36.616] Resolved: FALSE
[16:10:36.616] Value: <not collected>
[16:10:36.616] Conditions captured: <none>
[16:10:36.616] Early signaling: FALSE
[16:10:36.616] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:36.616] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:36.628] Chunk #1 of 2 ... DONE
[16:10:36.628] Chunk #2 of 2 ...
[16:10:36.628]  - Finding globals in 'X' for chunk #2 ...
[16:10:36.628] getGlobalsAndPackages() ...
[16:10:36.628] Searching for globals...
[16:10:36.629] 
[16:10:36.629] Searching for globals ... DONE
[16:10:36.629] - globals: [0] <none>
[16:10:36.629] getGlobalsAndPackages() ... DONE
[16:10:36.629]    + additional globals found: [n=0] 
[16:10:36.629]    + additional namespaces needed: [n=0] 
[16:10:36.629]  - Finding globals in 'X' for chunk #2 ... DONE
[16:10:36.629]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[16:10:36.629]  - seeds: [3] <seeds>
[16:10:36.630] getGlobalsAndPackages() ...
[16:10:36.630] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:36.630] Resolving globals: FALSE
[16:10:36.630] Tweak future expression to call with '...' arguments ...
[16:10:36.630] {
[16:10:36.630]     do.call(function(...) {
[16:10:36.630]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.630]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:36.630]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.630]             on.exit(options(oopts), add = TRUE)
[16:10:36.630]         }
[16:10:36.630]         {
[16:10:36.630]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:36.630]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.630]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.630]                   envir = globalenv(), inherits = FALSE)
[16:10:36.630]                 ...future.FUN(...future.X_jj, ...)
[16:10:36.630]             })
[16:10:36.630]         }
[16:10:36.630]     }, args = future.call.arguments)
[16:10:36.630] }
[16:10:36.630] Tweak future expression to call with '...' arguments ... DONE
[16:10:36.631] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:36.631] 
[16:10:36.631] getGlobalsAndPackages() ... DONE
[16:10:36.631] run() for ‘Future’ ...
[16:10:36.631] - state: ‘created’
[16:10:36.631] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:10:36.647] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:36.647] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:10:36.647]   - Field: ‘node’
[16:10:36.647]   - Field: ‘label’
[16:10:36.647]   - Field: ‘local’
[16:10:36.647]   - Field: ‘owner’
[16:10:36.647]   - Field: ‘envir’
[16:10:36.647]   - Field: ‘workers’
[16:10:36.647]   - Field: ‘packages’
[16:10:36.648]   - Field: ‘gc’
[16:10:36.648]   - Field: ‘conditions’
[16:10:36.648]   - Field: ‘persistent’
[16:10:36.648]   - Field: ‘expr’
[16:10:36.648]   - Field: ‘uuid’
[16:10:36.648]   - Field: ‘seed’
[16:10:36.648]   - Field: ‘version’
[16:10:36.648]   - Field: ‘result’
[16:10:36.648]   - Field: ‘asynchronous’
[16:10:36.648]   - Field: ‘calls’
[16:10:36.649]   - Field: ‘globals’
[16:10:36.649]   - Field: ‘stdout’
[16:10:36.649]   - Field: ‘earlySignal’
[16:10:36.649]   - Field: ‘lazy’
[16:10:36.649]   - Field: ‘state’
[16:10:36.649] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:10:36.649] - Launch lazy future ...
[16:10:36.649] Packages needed by the future expression (n = 0): <none>
[16:10:36.649] Packages needed by future strategies (n = 0): <none>
[16:10:36.650] {
[16:10:36.650]     {
[16:10:36.650]         {
[16:10:36.650]             ...future.startTime <- base::Sys.time()
[16:10:36.650]             {
[16:10:36.650]                 {
[16:10:36.650]                   {
[16:10:36.650]                     {
[16:10:36.650]                       base::local({
[16:10:36.650]                         has_future <- base::requireNamespace("future", 
[16:10:36.650]                           quietly = TRUE)
[16:10:36.650]                         if (has_future) {
[16:10:36.650]                           ns <- base::getNamespace("future")
[16:10:36.650]                           version <- ns[[".package"]][["version"]]
[16:10:36.650]                           if (is.null(version)) 
[16:10:36.650]                             version <- utils::packageVersion("future")
[16:10:36.650]                         }
[16:10:36.650]                         else {
[16:10:36.650]                           version <- NULL
[16:10:36.650]                         }
[16:10:36.650]                         if (!has_future || version < "1.8.0") {
[16:10:36.650]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:36.650]                             "", base::R.version$version.string), 
[16:10:36.650]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:36.650]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:36.650]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:36.650]                               "release", "version")], collapse = " "), 
[16:10:36.650]                             hostname = base::Sys.info()[["nodename"]])
[16:10:36.650]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:36.650]                             info)
[16:10:36.650]                           info <- base::paste(info, collapse = "; ")
[16:10:36.650]                           if (!has_future) {
[16:10:36.650]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:36.650]                               info)
[16:10:36.650]                           }
[16:10:36.650]                           else {
[16:10:36.650]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:36.650]                               info, version)
[16:10:36.650]                           }
[16:10:36.650]                           base::stop(msg)
[16:10:36.650]                         }
[16:10:36.650]                       })
[16:10:36.650]                     }
[16:10:36.650]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:36.650]                     base::options(mc.cores = 1L)
[16:10:36.650]                   }
[16:10:36.650]                   options(future.plan = NULL)
[16:10:36.650]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:36.650]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:36.650]                 }
[16:10:36.650]                 ...future.workdir <- getwd()
[16:10:36.650]             }
[16:10:36.650]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:36.650]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:36.650]         }
[16:10:36.650]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:36.650]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[16:10:36.650]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:36.650]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:36.650]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:36.650]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:36.650]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:36.650]             base::names(...future.oldOptions))
[16:10:36.650]     }
[16:10:36.650]     if (FALSE) {
[16:10:36.650]     }
[16:10:36.650]     else {
[16:10:36.650]         if (TRUE) {
[16:10:36.650]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:36.650]                 open = "w")
[16:10:36.650]         }
[16:10:36.650]         else {
[16:10:36.650]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:36.650]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:36.650]         }
[16:10:36.650]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:36.650]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:36.650]             base::sink(type = "output", split = FALSE)
[16:10:36.650]             base::close(...future.stdout)
[16:10:36.650]         }, add = TRUE)
[16:10:36.650]     }
[16:10:36.650]     ...future.frame <- base::sys.nframe()
[16:10:36.650]     ...future.conditions <- base::list()
[16:10:36.650]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:36.650]     if (FALSE) {
[16:10:36.650]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:36.650]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:36.650]     }
[16:10:36.650]     ...future.result <- base::tryCatch({
[16:10:36.650]         base::withCallingHandlers({
[16:10:36.650]             ...future.value <- base::withVisible(base::local({
[16:10:36.650]                 ...future.makeSendCondition <- local({
[16:10:36.650]                   sendCondition <- NULL
[16:10:36.650]                   function(frame = 1L) {
[16:10:36.650]                     if (is.function(sendCondition)) 
[16:10:36.650]                       return(sendCondition)
[16:10:36.650]                     ns <- getNamespace("parallel")
[16:10:36.650]                     if (exists("sendData", mode = "function", 
[16:10:36.650]                       envir = ns)) {
[16:10:36.650]                       parallel_sendData <- get("sendData", mode = "function", 
[16:10:36.650]                         envir = ns)
[16:10:36.650]                       envir <- sys.frame(frame)
[16:10:36.650]                       master <- NULL
[16:10:36.650]                       while (!identical(envir, .GlobalEnv) && 
[16:10:36.650]                         !identical(envir, emptyenv())) {
[16:10:36.650]                         if (exists("master", mode = "list", envir = envir, 
[16:10:36.650]                           inherits = FALSE)) {
[16:10:36.650]                           master <- get("master", mode = "list", 
[16:10:36.650]                             envir = envir, inherits = FALSE)
[16:10:36.650]                           if (inherits(master, c("SOCKnode", 
[16:10:36.650]                             "SOCK0node"))) {
[16:10:36.650]                             sendCondition <<- function(cond) {
[16:10:36.650]                               data <- list(type = "VALUE", value = cond, 
[16:10:36.650]                                 success = TRUE)
[16:10:36.650]                               parallel_sendData(master, data)
[16:10:36.650]                             }
[16:10:36.650]                             return(sendCondition)
[16:10:36.650]                           }
[16:10:36.650]                         }
[16:10:36.650]                         frame <- frame + 1L
[16:10:36.650]                         envir <- sys.frame(frame)
[16:10:36.650]                       }
[16:10:36.650]                     }
[16:10:36.650]                     sendCondition <<- function(cond) NULL
[16:10:36.650]                   }
[16:10:36.650]                 })
[16:10:36.650]                 withCallingHandlers({
[16:10:36.650]                   {
[16:10:36.650]                     do.call(function(...) {
[16:10:36.650]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.650]                       if (!identical(...future.globals.maxSize.org, 
[16:10:36.650]                         ...future.globals.maxSize)) {
[16:10:36.650]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.650]                         on.exit(options(oopts), add = TRUE)
[16:10:36.650]                       }
[16:10:36.650]                       {
[16:10:36.650]                         lapply(seq_along(...future.elements_ii), 
[16:10:36.650]                           FUN = function(jj) {
[16:10:36.650]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.650]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.650]                               envir = globalenv(), inherits = FALSE)
[16:10:36.650]                             ...future.FUN(...future.X_jj, ...)
[16:10:36.650]                           })
[16:10:36.650]                       }
[16:10:36.650]                     }, args = future.call.arguments)
[16:10:36.650]                   }
[16:10:36.650]                 }, immediateCondition = function(cond) {
[16:10:36.650]                   sendCondition <- ...future.makeSendCondition()
[16:10:36.650]                   sendCondition(cond)
[16:10:36.650]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.650]                   {
[16:10:36.650]                     inherits <- base::inherits
[16:10:36.650]                     invokeRestart <- base::invokeRestart
[16:10:36.650]                     is.null <- base::is.null
[16:10:36.650]                     muffled <- FALSE
[16:10:36.650]                     if (inherits(cond, "message")) {
[16:10:36.650]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:36.650]                       if (muffled) 
[16:10:36.650]                         invokeRestart("muffleMessage")
[16:10:36.650]                     }
[16:10:36.650]                     else if (inherits(cond, "warning")) {
[16:10:36.650]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:36.650]                       if (muffled) 
[16:10:36.650]                         invokeRestart("muffleWarning")
[16:10:36.650]                     }
[16:10:36.650]                     else if (inherits(cond, "condition")) {
[16:10:36.650]                       if (!is.null(pattern)) {
[16:10:36.650]                         computeRestarts <- base::computeRestarts
[16:10:36.650]                         grepl <- base::grepl
[16:10:36.650]                         restarts <- computeRestarts(cond)
[16:10:36.650]                         for (restart in restarts) {
[16:10:36.650]                           name <- restart$name
[16:10:36.650]                           if (is.null(name)) 
[16:10:36.650]                             next
[16:10:36.650]                           if (!grepl(pattern, name)) 
[16:10:36.650]                             next
[16:10:36.650]                           invokeRestart(restart)
[16:10:36.650]                           muffled <- TRUE
[16:10:36.650]                           break
[16:10:36.650]                         }
[16:10:36.650]                       }
[16:10:36.650]                     }
[16:10:36.650]                     invisible(muffled)
[16:10:36.650]                   }
[16:10:36.650]                   muffleCondition(cond)
[16:10:36.650]                 })
[16:10:36.650]             }))
[16:10:36.650]             future::FutureResult(value = ...future.value$value, 
[16:10:36.650]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:36.650]                   ...future.rng), globalenv = if (FALSE) 
[16:10:36.650]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:36.650]                     ...future.globalenv.names))
[16:10:36.650]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:36.650]         }, condition = base::local({
[16:10:36.650]             c <- base::c
[16:10:36.650]             inherits <- base::inherits
[16:10:36.650]             invokeRestart <- base::invokeRestart
[16:10:36.650]             length <- base::length
[16:10:36.650]             list <- base::list
[16:10:36.650]             seq.int <- base::seq.int
[16:10:36.650]             signalCondition <- base::signalCondition
[16:10:36.650]             sys.calls <- base::sys.calls
[16:10:36.650]             `[[` <- base::`[[`
[16:10:36.650]             `+` <- base::`+`
[16:10:36.650]             `<<-` <- base::`<<-`
[16:10:36.650]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:36.650]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:36.650]                   3L)]
[16:10:36.650]             }
[16:10:36.650]             function(cond) {
[16:10:36.650]                 is_error <- inherits(cond, "error")
[16:10:36.650]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:36.650]                   NULL)
[16:10:36.650]                 if (is_error) {
[16:10:36.650]                   sessionInformation <- function() {
[16:10:36.650]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:36.650]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:36.650]                       search = base::search(), system = base::Sys.info())
[16:10:36.650]                   }
[16:10:36.650]                   ...future.conditions[[length(...future.conditions) + 
[16:10:36.650]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:36.650]                     cond$call), session = sessionInformation(), 
[16:10:36.650]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:36.650]                   signalCondition(cond)
[16:10:36.650]                 }
[16:10:36.650]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:36.650]                 "immediateCondition"))) {
[16:10:36.650]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:36.650]                   ...future.conditions[[length(...future.conditions) + 
[16:10:36.650]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:36.650]                   if (TRUE && !signal) {
[16:10:36.650]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.650]                     {
[16:10:36.650]                       inherits <- base::inherits
[16:10:36.650]                       invokeRestart <- base::invokeRestart
[16:10:36.650]                       is.null <- base::is.null
[16:10:36.650]                       muffled <- FALSE
[16:10:36.650]                       if (inherits(cond, "message")) {
[16:10:36.650]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:36.650]                         if (muffled) 
[16:10:36.650]                           invokeRestart("muffleMessage")
[16:10:36.650]                       }
[16:10:36.650]                       else if (inherits(cond, "warning")) {
[16:10:36.650]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:36.650]                         if (muffled) 
[16:10:36.650]                           invokeRestart("muffleWarning")
[16:10:36.650]                       }
[16:10:36.650]                       else if (inherits(cond, "condition")) {
[16:10:36.650]                         if (!is.null(pattern)) {
[16:10:36.650]                           computeRestarts <- base::computeRestarts
[16:10:36.650]                           grepl <- base::grepl
[16:10:36.650]                           restarts <- computeRestarts(cond)
[16:10:36.650]                           for (restart in restarts) {
[16:10:36.650]                             name <- restart$name
[16:10:36.650]                             if (is.null(name)) 
[16:10:36.650]                               next
[16:10:36.650]                             if (!grepl(pattern, name)) 
[16:10:36.650]                               next
[16:10:36.650]                             invokeRestart(restart)
[16:10:36.650]                             muffled <- TRUE
[16:10:36.650]                             break
[16:10:36.650]                           }
[16:10:36.650]                         }
[16:10:36.650]                       }
[16:10:36.650]                       invisible(muffled)
[16:10:36.650]                     }
[16:10:36.650]                     muffleCondition(cond, pattern = "^muffle")
[16:10:36.650]                   }
[16:10:36.650]                 }
[16:10:36.650]                 else {
[16:10:36.650]                   if (TRUE) {
[16:10:36.650]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.650]                     {
[16:10:36.650]                       inherits <- base::inherits
[16:10:36.650]                       invokeRestart <- base::invokeRestart
[16:10:36.650]                       is.null <- base::is.null
[16:10:36.650]                       muffled <- FALSE
[16:10:36.650]                       if (inherits(cond, "message")) {
[16:10:36.650]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:36.650]                         if (muffled) 
[16:10:36.650]                           invokeRestart("muffleMessage")
[16:10:36.650]                       }
[16:10:36.650]                       else if (inherits(cond, "warning")) {
[16:10:36.650]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:36.650]                         if (muffled) 
[16:10:36.650]                           invokeRestart("muffleWarning")
[16:10:36.650]                       }
[16:10:36.650]                       else if (inherits(cond, "condition")) {
[16:10:36.650]                         if (!is.null(pattern)) {
[16:10:36.650]                           computeRestarts <- base::computeRestarts
[16:10:36.650]                           grepl <- base::grepl
[16:10:36.650]                           restarts <- computeRestarts(cond)
[16:10:36.650]                           for (restart in restarts) {
[16:10:36.650]                             name <- restart$name
[16:10:36.650]                             if (is.null(name)) 
[16:10:36.650]                               next
[16:10:36.650]                             if (!grepl(pattern, name)) 
[16:10:36.650]                               next
[16:10:36.650]                             invokeRestart(restart)
[16:10:36.650]                             muffled <- TRUE
[16:10:36.650]                             break
[16:10:36.650]                           }
[16:10:36.650]                         }
[16:10:36.650]                       }
[16:10:36.650]                       invisible(muffled)
[16:10:36.650]                     }
[16:10:36.650]                     muffleCondition(cond, pattern = "^muffle")
[16:10:36.650]                   }
[16:10:36.650]                 }
[16:10:36.650]             }
[16:10:36.650]         }))
[16:10:36.650]     }, error = function(ex) {
[16:10:36.650]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:36.650]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:36.650]                 ...future.rng), started = ...future.startTime, 
[16:10:36.650]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:36.650]             version = "1.8"), class = "FutureResult")
[16:10:36.650]     }, finally = {
[16:10:36.650]         if (!identical(...future.workdir, getwd())) 
[16:10:36.650]             setwd(...future.workdir)
[16:10:36.650]         {
[16:10:36.650]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:36.650]                 ...future.oldOptions$nwarnings <- NULL
[16:10:36.650]             }
[16:10:36.650]             base::options(...future.oldOptions)
[16:10:36.650]             if (.Platform$OS.type == "windows") {
[16:10:36.650]                 old_names <- names(...future.oldEnvVars)
[16:10:36.650]                 envs <- base::Sys.getenv()
[16:10:36.650]                 names <- names(envs)
[16:10:36.650]                 common <- intersect(names, old_names)
[16:10:36.650]                 added <- setdiff(names, old_names)
[16:10:36.650]                 removed <- setdiff(old_names, names)
[16:10:36.650]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:36.650]                   envs[common]]
[16:10:36.650]                 NAMES <- toupper(changed)
[16:10:36.650]                 args <- list()
[16:10:36.650]                 for (kk in seq_along(NAMES)) {
[16:10:36.650]                   name <- changed[[kk]]
[16:10:36.650]                   NAME <- NAMES[[kk]]
[16:10:36.650]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.650]                     next
[16:10:36.650]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:36.650]                 }
[16:10:36.650]                 NAMES <- toupper(added)
[16:10:36.650]                 for (kk in seq_along(NAMES)) {
[16:10:36.650]                   name <- added[[kk]]
[16:10:36.650]                   NAME <- NAMES[[kk]]
[16:10:36.650]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.650]                     next
[16:10:36.650]                   args[[name]] <- ""
[16:10:36.650]                 }
[16:10:36.650]                 NAMES <- toupper(removed)
[16:10:36.650]                 for (kk in seq_along(NAMES)) {
[16:10:36.650]                   name <- removed[[kk]]
[16:10:36.650]                   NAME <- NAMES[[kk]]
[16:10:36.650]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.650]                     next
[16:10:36.650]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:36.650]                 }
[16:10:36.650]                 if (length(args) > 0) 
[16:10:36.650]                   base::do.call(base::Sys.setenv, args = args)
[16:10:36.650]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:36.650]             }
[16:10:36.650]             else {
[16:10:36.650]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:36.650]             }
[16:10:36.650]             {
[16:10:36.650]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:36.650]                   0L) {
[16:10:36.650]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:36.650]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:36.650]                   base::options(opts)
[16:10:36.650]                 }
[16:10:36.650]                 {
[16:10:36.650]                   {
[16:10:36.650]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:36.650]                     NULL
[16:10:36.650]                   }
[16:10:36.650]                   options(future.plan = NULL)
[16:10:36.650]                   if (is.na(NA_character_)) 
[16:10:36.650]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:36.650]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:36.650]                   future::plan(list(function (..., workers = availableCores(), 
[16:10:36.650]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:10:36.650]                     envir = parent.frame()) 
[16:10:36.650]                   {
[16:10:36.650]                     if (is.function(workers)) 
[16:10:36.650]                       workers <- workers()
[16:10:36.650]                     workers <- structure(as.integer(workers), 
[16:10:36.650]                       class = class(workers))
[16:10:36.650]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:10:36.650]                       workers >= 1)
[16:10:36.650]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:10:36.650]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:10:36.650]                     }
[16:10:36.650]                     future <- MultisessionFuture(..., workers = workers, 
[16:10:36.650]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:10:36.650]                       envir = envir)
[16:10:36.650]                     if (!future$lazy) 
[16:10:36.650]                       future <- run(future)
[16:10:36.650]                     invisible(future)
[16:10:36.650]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:36.650]                 }
[16:10:36.650]             }
[16:10:36.650]         }
[16:10:36.650]     })
[16:10:36.650]     if (TRUE) {
[16:10:36.650]         base::sink(type = "output", split = FALSE)
[16:10:36.650]         if (TRUE) {
[16:10:36.650]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:36.650]         }
[16:10:36.650]         else {
[16:10:36.650]             ...future.result["stdout"] <- base::list(NULL)
[16:10:36.650]         }
[16:10:36.650]         base::close(...future.stdout)
[16:10:36.650]         ...future.stdout <- NULL
[16:10:36.650]     }
[16:10:36.650]     ...future.result$conditions <- ...future.conditions
[16:10:36.650]     ...future.result$finished <- base::Sys.time()
[16:10:36.650]     ...future.result
[16:10:36.650] }
[16:10:36.653] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[16:10:36.653] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[16:10:36.653] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[16:10:36.653] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[16:10:36.654] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[16:10:36.654] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[16:10:36.654] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[16:10:36.654] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[16:10:36.655] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[16:10:36.655] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[16:10:36.655] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[16:10:36.655] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[16:10:36.656] MultisessionFuture started
[16:10:36.656] - Launch lazy future ... done
[16:10:36.656] run() for ‘MultisessionFuture’ ... done
[16:10:36.656] Created future:
[16:10:36.656] MultisessionFuture:
[16:10:36.656] Label: ‘future_replicate-2’
[16:10:36.656] Expression:
[16:10:36.656] {
[16:10:36.656]     do.call(function(...) {
[16:10:36.656]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.656]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:36.656]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.656]             on.exit(options(oopts), add = TRUE)
[16:10:36.656]         }
[16:10:36.656]         {
[16:10:36.656]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:36.656]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.656]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.656]                   envir = globalenv(), inherits = FALSE)
[16:10:36.656]                 ...future.FUN(...future.X_jj, ...)
[16:10:36.656]             })
[16:10:36.656]         }
[16:10:36.656]     }, args = future.call.arguments)
[16:10:36.656] }
[16:10:36.656] Lazy evaluation: FALSE
[16:10:36.656] Asynchronous evaluation: TRUE
[16:10:36.656] Local evaluation: TRUE
[16:10:36.656] Environment: R_GlobalEnv
[16:10:36.656] Capture standard output: TRUE
[16:10:36.656] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:36.656] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:36.656] Packages: <none>
[16:10:36.656] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:36.656] Resolved: FALSE
[16:10:36.656] Value: <not collected>
[16:10:36.656] Conditions captured: <none>
[16:10:36.656] Early signaling: FALSE
[16:10:36.656] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:36.656] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:36.668] Chunk #2 of 2 ... DONE
[16:10:36.668] Launching 2 futures (chunks) ... DONE
[16:10:36.668] Resolving 2 futures (chunks) ...
[16:10:36.668] resolve() on list ...
[16:10:36.668]  recursive: 0
[16:10:36.668]  length: 2
[16:10:36.668] 
[16:10:36.669] receiveMessageFromWorker() for ClusterFuture ...
[16:10:36.669] - Validating connection of MultisessionFuture
[16:10:36.669] - received message: FutureResult
[16:10:36.669] - Received FutureResult
[16:10:36.669] - Erased future from FutureRegistry
[16:10:36.669] result() for ClusterFuture ...
[16:10:36.669] - result already collected: FutureResult
[16:10:36.670] result() for ClusterFuture ... done
[16:10:36.670] receiveMessageFromWorker() for ClusterFuture ... done
[16:10:36.670] Future #1
[16:10:36.670] result() for ClusterFuture ...
[16:10:36.670] - result already collected: FutureResult
[16:10:36.670] result() for ClusterFuture ... done
[16:10:36.670] result() for ClusterFuture ...
[16:10:36.670] - result already collected: FutureResult
[16:10:36.670] result() for ClusterFuture ... done
[16:10:36.670] signalConditionsASAP(MultisessionFuture, pos=1) ...
[16:10:36.670] - nx: 2
[16:10:36.671] - relay: TRUE
[16:10:36.671] - stdout: TRUE
[16:10:36.671] - signal: TRUE
[16:10:36.671] - resignal: FALSE
[16:10:36.671] - force: TRUE
[16:10:36.671] - relayed: [n=2] FALSE, FALSE
[16:10:36.671] - queued futures: [n=2] FALSE, FALSE
[16:10:36.671]  - until=1
[16:10:36.671]  - relaying element #1
[16:10:36.671] result() for ClusterFuture ...
[16:10:36.671] - result already collected: FutureResult
[16:10:36.671] result() for ClusterFuture ... done
[16:10:36.672] result() for ClusterFuture ...
[16:10:36.672] - result already collected: FutureResult
[16:10:36.672] result() for ClusterFuture ... done
[16:10:36.672] result() for ClusterFuture ...
[16:10:36.672] - result already collected: FutureResult
[16:10:36.672] result() for ClusterFuture ... done
[16:10:36.672] result() for ClusterFuture ...
[16:10:36.672] - result already collected: FutureResult
[16:10:36.672] result() for ClusterFuture ... done
[16:10:36.672] - relayed: [n=2] TRUE, FALSE
[16:10:36.672] - queued futures: [n=2] TRUE, FALSE
[16:10:36.673] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[16:10:36.673]  length: 1 (resolved future 1)
[16:10:36.701] receiveMessageFromWorker() for ClusterFuture ...
[16:10:36.701] - Validating connection of MultisessionFuture
[16:10:36.701] - received message: FutureResult
[16:10:36.702] - Received FutureResult
[16:10:36.702] - Erased future from FutureRegistry
[16:10:36.702] result() for ClusterFuture ...
[16:10:36.702] - result already collected: FutureResult
[16:10:36.702] result() for ClusterFuture ... done
[16:10:36.702] receiveMessageFromWorker() for ClusterFuture ... done
[16:10:36.702] Future #2
[16:10:36.702] result() for ClusterFuture ...
[16:10:36.703] - result already collected: FutureResult
[16:10:36.703] result() for ClusterFuture ... done
[16:10:36.703] result() for ClusterFuture ...
[16:10:36.703] - result already collected: FutureResult
[16:10:36.703] result() for ClusterFuture ... done
[16:10:36.703] signalConditionsASAP(MultisessionFuture, pos=2) ...
[16:10:36.703] - nx: 2
[16:10:36.703] - relay: TRUE
[16:10:36.703] - stdout: TRUE
[16:10:36.703] - signal: TRUE
[16:10:36.703] - resignal: FALSE
[16:10:36.704] - force: TRUE
[16:10:36.704] - relayed: [n=2] TRUE, FALSE
[16:10:36.704] - queued futures: [n=2] TRUE, FALSE
[16:10:36.704]  - until=2
[16:10:36.704]  - relaying element #2
[16:10:36.704] result() for ClusterFuture ...
[16:10:36.704] - result already collected: FutureResult
[16:10:36.704] result() for ClusterFuture ... done
[16:10:36.704] result() for ClusterFuture ...
[16:10:36.704] - result already collected: FutureResult
[16:10:36.704] result() for ClusterFuture ... done
[16:10:36.705] result() for ClusterFuture ...
[16:10:36.705] - result already collected: FutureResult
[16:10:36.705] result() for ClusterFuture ... done
[16:10:36.705] result() for ClusterFuture ...
[16:10:36.705] - result already collected: FutureResult
[16:10:36.705] result() for ClusterFuture ... done
[16:10:36.705] - relayed: [n=2] TRUE, TRUE
[16:10:36.705] - queued futures: [n=2] TRUE, TRUE
[16:10:36.705] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[16:10:36.705]  length: 0 (resolved future 2)
[16:10:36.705] Relaying remaining futures
[16:10:36.706] signalConditionsASAP(NULL, pos=0) ...
[16:10:36.706] - nx: 2
[16:10:36.706] - relay: TRUE
[16:10:36.706] - stdout: TRUE
[16:10:36.706] - signal: TRUE
[16:10:36.706] - resignal: FALSE
[16:10:36.706] - force: TRUE
[16:10:36.706] - relayed: [n=2] TRUE, TRUE
[16:10:36.706] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:10:36.706] - relayed: [n=2] TRUE, TRUE
[16:10:36.706] - queued futures: [n=2] TRUE, TRUE
[16:10:36.707] signalConditionsASAP(NULL, pos=0) ... done
[16:10:36.707] resolve() on list ... DONE
[16:10:36.707] result() for ClusterFuture ...
[16:10:36.707] - result already collected: FutureResult
[16:10:36.707] result() for ClusterFuture ... done
[16:10:36.707] result() for ClusterFuture ...
[16:10:36.707] - result already collected: FutureResult
[16:10:36.707] result() for ClusterFuture ... done
[16:10:36.707] result() for ClusterFuture ...
[16:10:36.707] - result already collected: FutureResult
[16:10:36.707] result() for ClusterFuture ... done
[16:10:36.708] result() for ClusterFuture ...
[16:10:36.708] - result already collected: FutureResult
[16:10:36.708] result() for ClusterFuture ... done
[16:10:36.708]  - Number of value chunks collected: 2
[16:10:36.708] Resolving 2 futures (chunks) ... DONE
[16:10:36.708] Reducing values from 2 chunks ...
[16:10:36.708]  - Number of values collected after concatenation: 5
[16:10:36.708]  - Number of values expected: 5
[16:10:36.708] Reducing values from 2 chunks ... DONE
[16:10:36.708] future_lapply() ... DONE
[16:10:36.709] future_lapply() ...
[16:10:36.709] Generating random seeds ...
[16:10:36.709] Generating random seed streams for 5 elements ...
[16:10:36.709] Generating random seed streams for 5 elements ... DONE
[16:10:36.709] Generating random seeds ... DONE
[16:10:36.710] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:10:36.713] Number of chunks: 2
[16:10:36.714] getGlobalsAndPackagesXApply() ...
[16:10:36.714]  - future.globals: TRUE
[16:10:36.714] getGlobalsAndPackages() ...
[16:10:36.714] Searching for globals...
[16:10:36.715] - globals found: [2] ‘FUN’, ‘sample’
[16:10:36.715] Searching for globals ... DONE
[16:10:36.715] Resolving globals: FALSE
[16:10:36.715] The total size of the 1 globals is 616 bytes (616 bytes)
[16:10:36.716] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:10:36.716] - globals: [1] ‘FUN’
[16:10:36.716] 
[16:10:36.716] getGlobalsAndPackages() ... DONE
[16:10:36.716]  - globals found/used: [n=1] ‘FUN’
[16:10:36.716]  - needed namespaces: [n=0] 
[16:10:36.716] Finding globals ... DONE
[16:10:36.717]  - use_args: TRUE
[16:10:36.717]  - Getting '...' globals ...
[16:10:36.717] resolve() on list ...
[16:10:36.717]  recursive: 0
[16:10:36.717]  length: 1
[16:10:36.717]  elements: ‘...’
[16:10:36.717]  length: 0 (resolved future 1)
[16:10:36.717] resolve() on list ... DONE
[16:10:36.717]    - '...' content: [n=0] 
[16:10:36.718] List of 1
[16:10:36.718]  $ ...: list()
[16:10:36.718]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:36.718]  - attr(*, "where")=List of 1
[16:10:36.718]   ..$ ...:<environment: 0x55cf8ff105a8> 
[16:10:36.718]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:36.718]  - attr(*, "resolved")= logi TRUE
[16:10:36.718]  - attr(*, "total_size")= num NA
[16:10:36.720]  - Getting '...' globals ... DONE
[16:10:36.720] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:10:36.721] List of 2
[16:10:36.721]  $ ...future.FUN:function (...)  
[16:10:36.721]  $ ...          : list()
[16:10:36.721]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:36.721]  - attr(*, "where")=List of 2
[16:10:36.721]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:10:36.721]   ..$ ...          :<environment: 0x55cf8ff105a8> 
[16:10:36.721]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:36.721]  - attr(*, "resolved")= logi FALSE
[16:10:36.721]  - attr(*, "total_size")= num 616
[16:10:36.723] Packages to be attached in all futures: [n=0] 
[16:10:36.723] getGlobalsAndPackagesXApply() ... DONE
[16:10:36.723] Number of futures (= number of chunks): 2
[16:10:36.724] Launching 2 futures (chunks) ...
[16:10:36.724] Chunk #1 of 2 ...
[16:10:36.724]  - Finding globals in 'X' for chunk #1 ...
[16:10:36.724] getGlobalsAndPackages() ...
[16:10:36.724] Searching for globals...
[16:10:36.724] 
[16:10:36.724] Searching for globals ... DONE
[16:10:36.724] - globals: [0] <none>
[16:10:36.725] getGlobalsAndPackages() ... DONE
[16:10:36.725]    + additional globals found: [n=0] 
[16:10:36.725]    + additional namespaces needed: [n=0] 
[16:10:36.725]  - Finding globals in 'X' for chunk #1 ... DONE
[16:10:36.725]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:10:36.725]  - seeds: [2] <seeds>
[16:10:36.725] getGlobalsAndPackages() ...
[16:10:36.725] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:36.725] Resolving globals: FALSE
[16:10:36.725] Tweak future expression to call with '...' arguments ...
[16:10:36.726] {
[16:10:36.726]     do.call(function(...) {
[16:10:36.726]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.726]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:36.726]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.726]             on.exit(options(oopts), add = TRUE)
[16:10:36.726]         }
[16:10:36.726]         {
[16:10:36.726]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:36.726]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.726]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.726]                   envir = globalenv(), inherits = FALSE)
[16:10:36.726]                 ...future.FUN(...future.X_jj, ...)
[16:10:36.726]             })
[16:10:36.726]         }
[16:10:36.726]     }, args = future.call.arguments)
[16:10:36.726] }
[16:10:36.726] Tweak future expression to call with '...' arguments ... DONE
[16:10:36.726] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:36.726] 
[16:10:36.726] getGlobalsAndPackages() ... DONE
[16:10:36.727] run() for ‘Future’ ...
[16:10:36.727] - state: ‘created’
[16:10:36.727] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:10:36.742] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:36.742] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:10:36.742]   - Field: ‘node’
[16:10:36.742]   - Field: ‘label’
[16:10:36.742]   - Field: ‘local’
[16:10:36.742]   - Field: ‘owner’
[16:10:36.742]   - Field: ‘envir’
[16:10:36.742]   - Field: ‘workers’
[16:10:36.742]   - Field: ‘packages’
[16:10:36.742]   - Field: ‘gc’
[16:10:36.743]   - Field: ‘conditions’
[16:10:36.743]   - Field: ‘persistent’
[16:10:36.743]   - Field: ‘expr’
[16:10:36.743]   - Field: ‘uuid’
[16:10:36.743]   - Field: ‘seed’
[16:10:36.743]   - Field: ‘version’
[16:10:36.743]   - Field: ‘result’
[16:10:36.743]   - Field: ‘asynchronous’
[16:10:36.743]   - Field: ‘calls’
[16:10:36.743]   - Field: ‘globals’
[16:10:36.744]   - Field: ‘stdout’
[16:10:36.744]   - Field: ‘earlySignal’
[16:10:36.744]   - Field: ‘lazy’
[16:10:36.744]   - Field: ‘state’
[16:10:36.744] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:10:36.744] - Launch lazy future ...
[16:10:36.744] Packages needed by the future expression (n = 0): <none>
[16:10:36.744] Packages needed by future strategies (n = 0): <none>
[16:10:36.745] {
[16:10:36.745]     {
[16:10:36.745]         {
[16:10:36.745]             ...future.startTime <- base::Sys.time()
[16:10:36.745]             {
[16:10:36.745]                 {
[16:10:36.745]                   {
[16:10:36.745]                     {
[16:10:36.745]                       base::local({
[16:10:36.745]                         has_future <- base::requireNamespace("future", 
[16:10:36.745]                           quietly = TRUE)
[16:10:36.745]                         if (has_future) {
[16:10:36.745]                           ns <- base::getNamespace("future")
[16:10:36.745]                           version <- ns[[".package"]][["version"]]
[16:10:36.745]                           if (is.null(version)) 
[16:10:36.745]                             version <- utils::packageVersion("future")
[16:10:36.745]                         }
[16:10:36.745]                         else {
[16:10:36.745]                           version <- NULL
[16:10:36.745]                         }
[16:10:36.745]                         if (!has_future || version < "1.8.0") {
[16:10:36.745]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:36.745]                             "", base::R.version$version.string), 
[16:10:36.745]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:36.745]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:36.745]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:36.745]                               "release", "version")], collapse = " "), 
[16:10:36.745]                             hostname = base::Sys.info()[["nodename"]])
[16:10:36.745]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:36.745]                             info)
[16:10:36.745]                           info <- base::paste(info, collapse = "; ")
[16:10:36.745]                           if (!has_future) {
[16:10:36.745]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:36.745]                               info)
[16:10:36.745]                           }
[16:10:36.745]                           else {
[16:10:36.745]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:36.745]                               info, version)
[16:10:36.745]                           }
[16:10:36.745]                           base::stop(msg)
[16:10:36.745]                         }
[16:10:36.745]                       })
[16:10:36.745]                     }
[16:10:36.745]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:36.745]                     base::options(mc.cores = 1L)
[16:10:36.745]                   }
[16:10:36.745]                   options(future.plan = NULL)
[16:10:36.745]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:36.745]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:36.745]                 }
[16:10:36.745]                 ...future.workdir <- getwd()
[16:10:36.745]             }
[16:10:36.745]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:36.745]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:36.745]         }
[16:10:36.745]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:36.745]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:10:36.745]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:36.745]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:36.745]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:36.745]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:36.745]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:36.745]             base::names(...future.oldOptions))
[16:10:36.745]     }
[16:10:36.745]     if (FALSE) {
[16:10:36.745]     }
[16:10:36.745]     else {
[16:10:36.745]         if (TRUE) {
[16:10:36.745]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:36.745]                 open = "w")
[16:10:36.745]         }
[16:10:36.745]         else {
[16:10:36.745]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:36.745]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:36.745]         }
[16:10:36.745]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:36.745]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:36.745]             base::sink(type = "output", split = FALSE)
[16:10:36.745]             base::close(...future.stdout)
[16:10:36.745]         }, add = TRUE)
[16:10:36.745]     }
[16:10:36.745]     ...future.frame <- base::sys.nframe()
[16:10:36.745]     ...future.conditions <- base::list()
[16:10:36.745]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:36.745]     if (FALSE) {
[16:10:36.745]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:36.745]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:36.745]     }
[16:10:36.745]     ...future.result <- base::tryCatch({
[16:10:36.745]         base::withCallingHandlers({
[16:10:36.745]             ...future.value <- base::withVisible(base::local({
[16:10:36.745]                 ...future.makeSendCondition <- local({
[16:10:36.745]                   sendCondition <- NULL
[16:10:36.745]                   function(frame = 1L) {
[16:10:36.745]                     if (is.function(sendCondition)) 
[16:10:36.745]                       return(sendCondition)
[16:10:36.745]                     ns <- getNamespace("parallel")
[16:10:36.745]                     if (exists("sendData", mode = "function", 
[16:10:36.745]                       envir = ns)) {
[16:10:36.745]                       parallel_sendData <- get("sendData", mode = "function", 
[16:10:36.745]                         envir = ns)
[16:10:36.745]                       envir <- sys.frame(frame)
[16:10:36.745]                       master <- NULL
[16:10:36.745]                       while (!identical(envir, .GlobalEnv) && 
[16:10:36.745]                         !identical(envir, emptyenv())) {
[16:10:36.745]                         if (exists("master", mode = "list", envir = envir, 
[16:10:36.745]                           inherits = FALSE)) {
[16:10:36.745]                           master <- get("master", mode = "list", 
[16:10:36.745]                             envir = envir, inherits = FALSE)
[16:10:36.745]                           if (inherits(master, c("SOCKnode", 
[16:10:36.745]                             "SOCK0node"))) {
[16:10:36.745]                             sendCondition <<- function(cond) {
[16:10:36.745]                               data <- list(type = "VALUE", value = cond, 
[16:10:36.745]                                 success = TRUE)
[16:10:36.745]                               parallel_sendData(master, data)
[16:10:36.745]                             }
[16:10:36.745]                             return(sendCondition)
[16:10:36.745]                           }
[16:10:36.745]                         }
[16:10:36.745]                         frame <- frame + 1L
[16:10:36.745]                         envir <- sys.frame(frame)
[16:10:36.745]                       }
[16:10:36.745]                     }
[16:10:36.745]                     sendCondition <<- function(cond) NULL
[16:10:36.745]                   }
[16:10:36.745]                 })
[16:10:36.745]                 withCallingHandlers({
[16:10:36.745]                   {
[16:10:36.745]                     do.call(function(...) {
[16:10:36.745]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.745]                       if (!identical(...future.globals.maxSize.org, 
[16:10:36.745]                         ...future.globals.maxSize)) {
[16:10:36.745]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.745]                         on.exit(options(oopts), add = TRUE)
[16:10:36.745]                       }
[16:10:36.745]                       {
[16:10:36.745]                         lapply(seq_along(...future.elements_ii), 
[16:10:36.745]                           FUN = function(jj) {
[16:10:36.745]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.745]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.745]                               envir = globalenv(), inherits = FALSE)
[16:10:36.745]                             ...future.FUN(...future.X_jj, ...)
[16:10:36.745]                           })
[16:10:36.745]                       }
[16:10:36.745]                     }, args = future.call.arguments)
[16:10:36.745]                   }
[16:10:36.745]                 }, immediateCondition = function(cond) {
[16:10:36.745]                   sendCondition <- ...future.makeSendCondition()
[16:10:36.745]                   sendCondition(cond)
[16:10:36.745]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.745]                   {
[16:10:36.745]                     inherits <- base::inherits
[16:10:36.745]                     invokeRestart <- base::invokeRestart
[16:10:36.745]                     is.null <- base::is.null
[16:10:36.745]                     muffled <- FALSE
[16:10:36.745]                     if (inherits(cond, "message")) {
[16:10:36.745]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:36.745]                       if (muffled) 
[16:10:36.745]                         invokeRestart("muffleMessage")
[16:10:36.745]                     }
[16:10:36.745]                     else if (inherits(cond, "warning")) {
[16:10:36.745]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:36.745]                       if (muffled) 
[16:10:36.745]                         invokeRestart("muffleWarning")
[16:10:36.745]                     }
[16:10:36.745]                     else if (inherits(cond, "condition")) {
[16:10:36.745]                       if (!is.null(pattern)) {
[16:10:36.745]                         computeRestarts <- base::computeRestarts
[16:10:36.745]                         grepl <- base::grepl
[16:10:36.745]                         restarts <- computeRestarts(cond)
[16:10:36.745]                         for (restart in restarts) {
[16:10:36.745]                           name <- restart$name
[16:10:36.745]                           if (is.null(name)) 
[16:10:36.745]                             next
[16:10:36.745]                           if (!grepl(pattern, name)) 
[16:10:36.745]                             next
[16:10:36.745]                           invokeRestart(restart)
[16:10:36.745]                           muffled <- TRUE
[16:10:36.745]                           break
[16:10:36.745]                         }
[16:10:36.745]                       }
[16:10:36.745]                     }
[16:10:36.745]                     invisible(muffled)
[16:10:36.745]                   }
[16:10:36.745]                   muffleCondition(cond)
[16:10:36.745]                 })
[16:10:36.745]             }))
[16:10:36.745]             future::FutureResult(value = ...future.value$value, 
[16:10:36.745]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:36.745]                   ...future.rng), globalenv = if (FALSE) 
[16:10:36.745]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:36.745]                     ...future.globalenv.names))
[16:10:36.745]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:36.745]         }, condition = base::local({
[16:10:36.745]             c <- base::c
[16:10:36.745]             inherits <- base::inherits
[16:10:36.745]             invokeRestart <- base::invokeRestart
[16:10:36.745]             length <- base::length
[16:10:36.745]             list <- base::list
[16:10:36.745]             seq.int <- base::seq.int
[16:10:36.745]             signalCondition <- base::signalCondition
[16:10:36.745]             sys.calls <- base::sys.calls
[16:10:36.745]             `[[` <- base::`[[`
[16:10:36.745]             `+` <- base::`+`
[16:10:36.745]             `<<-` <- base::`<<-`
[16:10:36.745]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:36.745]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:36.745]                   3L)]
[16:10:36.745]             }
[16:10:36.745]             function(cond) {
[16:10:36.745]                 is_error <- inherits(cond, "error")
[16:10:36.745]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:36.745]                   NULL)
[16:10:36.745]                 if (is_error) {
[16:10:36.745]                   sessionInformation <- function() {
[16:10:36.745]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:36.745]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:36.745]                       search = base::search(), system = base::Sys.info())
[16:10:36.745]                   }
[16:10:36.745]                   ...future.conditions[[length(...future.conditions) + 
[16:10:36.745]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:36.745]                     cond$call), session = sessionInformation(), 
[16:10:36.745]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:36.745]                   signalCondition(cond)
[16:10:36.745]                 }
[16:10:36.745]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:36.745]                 "immediateCondition"))) {
[16:10:36.745]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:36.745]                   ...future.conditions[[length(...future.conditions) + 
[16:10:36.745]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:36.745]                   if (TRUE && !signal) {
[16:10:36.745]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.745]                     {
[16:10:36.745]                       inherits <- base::inherits
[16:10:36.745]                       invokeRestart <- base::invokeRestart
[16:10:36.745]                       is.null <- base::is.null
[16:10:36.745]                       muffled <- FALSE
[16:10:36.745]                       if (inherits(cond, "message")) {
[16:10:36.745]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:36.745]                         if (muffled) 
[16:10:36.745]                           invokeRestart("muffleMessage")
[16:10:36.745]                       }
[16:10:36.745]                       else if (inherits(cond, "warning")) {
[16:10:36.745]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:36.745]                         if (muffled) 
[16:10:36.745]                           invokeRestart("muffleWarning")
[16:10:36.745]                       }
[16:10:36.745]                       else if (inherits(cond, "condition")) {
[16:10:36.745]                         if (!is.null(pattern)) {
[16:10:36.745]                           computeRestarts <- base::computeRestarts
[16:10:36.745]                           grepl <- base::grepl
[16:10:36.745]                           restarts <- computeRestarts(cond)
[16:10:36.745]                           for (restart in restarts) {
[16:10:36.745]                             name <- restart$name
[16:10:36.745]                             if (is.null(name)) 
[16:10:36.745]                               next
[16:10:36.745]                             if (!grepl(pattern, name)) 
[16:10:36.745]                               next
[16:10:36.745]                             invokeRestart(restart)
[16:10:36.745]                             muffled <- TRUE
[16:10:36.745]                             break
[16:10:36.745]                           }
[16:10:36.745]                         }
[16:10:36.745]                       }
[16:10:36.745]                       invisible(muffled)
[16:10:36.745]                     }
[16:10:36.745]                     muffleCondition(cond, pattern = "^muffle")
[16:10:36.745]                   }
[16:10:36.745]                 }
[16:10:36.745]                 else {
[16:10:36.745]                   if (TRUE) {
[16:10:36.745]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.745]                     {
[16:10:36.745]                       inherits <- base::inherits
[16:10:36.745]                       invokeRestart <- base::invokeRestart
[16:10:36.745]                       is.null <- base::is.null
[16:10:36.745]                       muffled <- FALSE
[16:10:36.745]                       if (inherits(cond, "message")) {
[16:10:36.745]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:36.745]                         if (muffled) 
[16:10:36.745]                           invokeRestart("muffleMessage")
[16:10:36.745]                       }
[16:10:36.745]                       else if (inherits(cond, "warning")) {
[16:10:36.745]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:36.745]                         if (muffled) 
[16:10:36.745]                           invokeRestart("muffleWarning")
[16:10:36.745]                       }
[16:10:36.745]                       else if (inherits(cond, "condition")) {
[16:10:36.745]                         if (!is.null(pattern)) {
[16:10:36.745]                           computeRestarts <- base::computeRestarts
[16:10:36.745]                           grepl <- base::grepl
[16:10:36.745]                           restarts <- computeRestarts(cond)
[16:10:36.745]                           for (restart in restarts) {
[16:10:36.745]                             name <- restart$name
[16:10:36.745]                             if (is.null(name)) 
[16:10:36.745]                               next
[16:10:36.745]                             if (!grepl(pattern, name)) 
[16:10:36.745]                               next
[16:10:36.745]                             invokeRestart(restart)
[16:10:36.745]                             muffled <- TRUE
[16:10:36.745]                             break
[16:10:36.745]                           }
[16:10:36.745]                         }
[16:10:36.745]                       }
[16:10:36.745]                       invisible(muffled)
[16:10:36.745]                     }
[16:10:36.745]                     muffleCondition(cond, pattern = "^muffle")
[16:10:36.745]                   }
[16:10:36.745]                 }
[16:10:36.745]             }
[16:10:36.745]         }))
[16:10:36.745]     }, error = function(ex) {
[16:10:36.745]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:36.745]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:36.745]                 ...future.rng), started = ...future.startTime, 
[16:10:36.745]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:36.745]             version = "1.8"), class = "FutureResult")
[16:10:36.745]     }, finally = {
[16:10:36.745]         if (!identical(...future.workdir, getwd())) 
[16:10:36.745]             setwd(...future.workdir)
[16:10:36.745]         {
[16:10:36.745]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:36.745]                 ...future.oldOptions$nwarnings <- NULL
[16:10:36.745]             }
[16:10:36.745]             base::options(...future.oldOptions)
[16:10:36.745]             if (.Platform$OS.type == "windows") {
[16:10:36.745]                 old_names <- names(...future.oldEnvVars)
[16:10:36.745]                 envs <- base::Sys.getenv()
[16:10:36.745]                 names <- names(envs)
[16:10:36.745]                 common <- intersect(names, old_names)
[16:10:36.745]                 added <- setdiff(names, old_names)
[16:10:36.745]                 removed <- setdiff(old_names, names)
[16:10:36.745]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:36.745]                   envs[common]]
[16:10:36.745]                 NAMES <- toupper(changed)
[16:10:36.745]                 args <- list()
[16:10:36.745]                 for (kk in seq_along(NAMES)) {
[16:10:36.745]                   name <- changed[[kk]]
[16:10:36.745]                   NAME <- NAMES[[kk]]
[16:10:36.745]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.745]                     next
[16:10:36.745]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:36.745]                 }
[16:10:36.745]                 NAMES <- toupper(added)
[16:10:36.745]                 for (kk in seq_along(NAMES)) {
[16:10:36.745]                   name <- added[[kk]]
[16:10:36.745]                   NAME <- NAMES[[kk]]
[16:10:36.745]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.745]                     next
[16:10:36.745]                   args[[name]] <- ""
[16:10:36.745]                 }
[16:10:36.745]                 NAMES <- toupper(removed)
[16:10:36.745]                 for (kk in seq_along(NAMES)) {
[16:10:36.745]                   name <- removed[[kk]]
[16:10:36.745]                   NAME <- NAMES[[kk]]
[16:10:36.745]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.745]                     next
[16:10:36.745]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:36.745]                 }
[16:10:36.745]                 if (length(args) > 0) 
[16:10:36.745]                   base::do.call(base::Sys.setenv, args = args)
[16:10:36.745]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:36.745]             }
[16:10:36.745]             else {
[16:10:36.745]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:36.745]             }
[16:10:36.745]             {
[16:10:36.745]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:36.745]                   0L) {
[16:10:36.745]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:36.745]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:36.745]                   base::options(opts)
[16:10:36.745]                 }
[16:10:36.745]                 {
[16:10:36.745]                   {
[16:10:36.745]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:36.745]                     NULL
[16:10:36.745]                   }
[16:10:36.745]                   options(future.plan = NULL)
[16:10:36.745]                   if (is.na(NA_character_)) 
[16:10:36.745]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:36.745]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:36.745]                   future::plan(list(function (..., workers = availableCores(), 
[16:10:36.745]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:10:36.745]                     envir = parent.frame()) 
[16:10:36.745]                   {
[16:10:36.745]                     if (is.function(workers)) 
[16:10:36.745]                       workers <- workers()
[16:10:36.745]                     workers <- structure(as.integer(workers), 
[16:10:36.745]                       class = class(workers))
[16:10:36.745]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:10:36.745]                       workers >= 1)
[16:10:36.745]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:10:36.745]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:10:36.745]                     }
[16:10:36.745]                     future <- MultisessionFuture(..., workers = workers, 
[16:10:36.745]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:10:36.745]                       envir = envir)
[16:10:36.745]                     if (!future$lazy) 
[16:10:36.745]                       future <- run(future)
[16:10:36.745]                     invisible(future)
[16:10:36.745]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:36.745]                 }
[16:10:36.745]             }
[16:10:36.745]         }
[16:10:36.745]     })
[16:10:36.745]     if (TRUE) {
[16:10:36.745]         base::sink(type = "output", split = FALSE)
[16:10:36.745]         if (TRUE) {
[16:10:36.745]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:36.745]         }
[16:10:36.745]         else {
[16:10:36.745]             ...future.result["stdout"] <- base::list(NULL)
[16:10:36.745]         }
[16:10:36.745]         base::close(...future.stdout)
[16:10:36.745]         ...future.stdout <- NULL
[16:10:36.745]     }
[16:10:36.745]     ...future.result$conditions <- ...future.conditions
[16:10:36.745]     ...future.result$finished <- base::Sys.time()
[16:10:36.745]     ...future.result
[16:10:36.745] }
[16:10:36.748] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[16:10:36.748] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[16:10:36.748] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[16:10:36.749] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[16:10:36.749] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[16:10:36.749] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[16:10:36.750] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[16:10:36.750] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[16:10:36.750] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[16:10:36.750] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[16:10:36.751] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[16:10:36.751] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[16:10:36.751] MultisessionFuture started
[16:10:36.751] - Launch lazy future ... done
[16:10:36.752] run() for ‘MultisessionFuture’ ... done
[16:10:36.752] Created future:
[16:10:36.752] MultisessionFuture:
[16:10:36.752] Label: ‘future_replicate-1’
[16:10:36.752] Expression:
[16:10:36.752] {
[16:10:36.752]     do.call(function(...) {
[16:10:36.752]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.752]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:36.752]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.752]             on.exit(options(oopts), add = TRUE)
[16:10:36.752]         }
[16:10:36.752]         {
[16:10:36.752]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:36.752]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.752]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.752]                   envir = globalenv(), inherits = FALSE)
[16:10:36.752]                 ...future.FUN(...future.X_jj, ...)
[16:10:36.752]             })
[16:10:36.752]         }
[16:10:36.752]     }, args = future.call.arguments)
[16:10:36.752] }
[16:10:36.752] Lazy evaluation: FALSE
[16:10:36.752] Asynchronous evaluation: TRUE
[16:10:36.752] Local evaluation: TRUE
[16:10:36.752] Environment: R_GlobalEnv
[16:10:36.752] Capture standard output: TRUE
[16:10:36.752] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:36.752] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:36.752] Packages: <none>
[16:10:36.752] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:36.752] Resolved: FALSE
[16:10:36.752] Value: <not collected>
[16:10:36.752] Conditions captured: <none>
[16:10:36.752] Early signaling: FALSE
[16:10:36.752] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:36.752] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:36.763] Chunk #1 of 2 ... DONE
[16:10:36.764] Chunk #2 of 2 ...
[16:10:36.764]  - Finding globals in 'X' for chunk #2 ...
[16:10:36.764] getGlobalsAndPackages() ...
[16:10:36.764] Searching for globals...
[16:10:36.764] 
[16:10:36.764] Searching for globals ... DONE
[16:10:36.765] - globals: [0] <none>
[16:10:36.765] getGlobalsAndPackages() ... DONE
[16:10:36.765]    + additional globals found: [n=0] 
[16:10:36.765]    + additional namespaces needed: [n=0] 
[16:10:36.765]  - Finding globals in 'X' for chunk #2 ... DONE
[16:10:36.765]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[16:10:36.765]  - seeds: [3] <seeds>
[16:10:36.765] getGlobalsAndPackages() ...
[16:10:36.765] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:36.765] Resolving globals: FALSE
[16:10:36.766] Tweak future expression to call with '...' arguments ...
[16:10:36.766] {
[16:10:36.766]     do.call(function(...) {
[16:10:36.766]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.766]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:36.766]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.766]             on.exit(options(oopts), add = TRUE)
[16:10:36.766]         }
[16:10:36.766]         {
[16:10:36.766]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:36.766]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.766]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.766]                   envir = globalenv(), inherits = FALSE)
[16:10:36.766]                 ...future.FUN(...future.X_jj, ...)
[16:10:36.766]             })
[16:10:36.766]         }
[16:10:36.766]     }, args = future.call.arguments)
[16:10:36.766] }
[16:10:36.766] Tweak future expression to call with '...' arguments ... DONE
[16:10:36.766] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:36.767] 
[16:10:36.769] getGlobalsAndPackages() ... DONE
[16:10:36.769] run() for ‘Future’ ...
[16:10:36.769] - state: ‘created’
[16:10:36.769] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:10:36.783] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:36.784] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:10:36.784]   - Field: ‘node’
[16:10:36.784]   - Field: ‘label’
[16:10:36.784]   - Field: ‘local’
[16:10:36.784]   - Field: ‘owner’
[16:10:36.784]   - Field: ‘envir’
[16:10:36.784]   - Field: ‘workers’
[16:10:36.784]   - Field: ‘packages’
[16:10:36.784]   - Field: ‘gc’
[16:10:36.784]   - Field: ‘conditions’
[16:10:36.785]   - Field: ‘persistent’
[16:10:36.785]   - Field: ‘expr’
[16:10:36.785]   - Field: ‘uuid’
[16:10:36.785]   - Field: ‘seed’
[16:10:36.785]   - Field: ‘version’
[16:10:36.785]   - Field: ‘result’
[16:10:36.785]   - Field: ‘asynchronous’
[16:10:36.785]   - Field: ‘calls’
[16:10:36.785]   - Field: ‘globals’
[16:10:36.785]   - Field: ‘stdout’
[16:10:36.785]   - Field: ‘earlySignal’
[16:10:36.786]   - Field: ‘lazy’
[16:10:36.786]   - Field: ‘state’
[16:10:36.786] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:10:36.786] - Launch lazy future ...
[16:10:36.786] Packages needed by the future expression (n = 0): <none>
[16:10:36.786] Packages needed by future strategies (n = 0): <none>
[16:10:36.787] {
[16:10:36.787]     {
[16:10:36.787]         {
[16:10:36.787]             ...future.startTime <- base::Sys.time()
[16:10:36.787]             {
[16:10:36.787]                 {
[16:10:36.787]                   {
[16:10:36.787]                     {
[16:10:36.787]                       base::local({
[16:10:36.787]                         has_future <- base::requireNamespace("future", 
[16:10:36.787]                           quietly = TRUE)
[16:10:36.787]                         if (has_future) {
[16:10:36.787]                           ns <- base::getNamespace("future")
[16:10:36.787]                           version <- ns[[".package"]][["version"]]
[16:10:36.787]                           if (is.null(version)) 
[16:10:36.787]                             version <- utils::packageVersion("future")
[16:10:36.787]                         }
[16:10:36.787]                         else {
[16:10:36.787]                           version <- NULL
[16:10:36.787]                         }
[16:10:36.787]                         if (!has_future || version < "1.8.0") {
[16:10:36.787]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:36.787]                             "", base::R.version$version.string), 
[16:10:36.787]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:36.787]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:36.787]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:36.787]                               "release", "version")], collapse = " "), 
[16:10:36.787]                             hostname = base::Sys.info()[["nodename"]])
[16:10:36.787]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:36.787]                             info)
[16:10:36.787]                           info <- base::paste(info, collapse = "; ")
[16:10:36.787]                           if (!has_future) {
[16:10:36.787]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:36.787]                               info)
[16:10:36.787]                           }
[16:10:36.787]                           else {
[16:10:36.787]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:36.787]                               info, version)
[16:10:36.787]                           }
[16:10:36.787]                           base::stop(msg)
[16:10:36.787]                         }
[16:10:36.787]                       })
[16:10:36.787]                     }
[16:10:36.787]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:36.787]                     base::options(mc.cores = 1L)
[16:10:36.787]                   }
[16:10:36.787]                   options(future.plan = NULL)
[16:10:36.787]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:36.787]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:36.787]                 }
[16:10:36.787]                 ...future.workdir <- getwd()
[16:10:36.787]             }
[16:10:36.787]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:36.787]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:36.787]         }
[16:10:36.787]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:36.787]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[16:10:36.787]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:36.787]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:36.787]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:36.787]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:36.787]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:36.787]             base::names(...future.oldOptions))
[16:10:36.787]     }
[16:10:36.787]     if (FALSE) {
[16:10:36.787]     }
[16:10:36.787]     else {
[16:10:36.787]         if (TRUE) {
[16:10:36.787]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:36.787]                 open = "w")
[16:10:36.787]         }
[16:10:36.787]         else {
[16:10:36.787]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:36.787]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:36.787]         }
[16:10:36.787]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:36.787]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:36.787]             base::sink(type = "output", split = FALSE)
[16:10:36.787]             base::close(...future.stdout)
[16:10:36.787]         }, add = TRUE)
[16:10:36.787]     }
[16:10:36.787]     ...future.frame <- base::sys.nframe()
[16:10:36.787]     ...future.conditions <- base::list()
[16:10:36.787]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:36.787]     if (FALSE) {
[16:10:36.787]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:36.787]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:36.787]     }
[16:10:36.787]     ...future.result <- base::tryCatch({
[16:10:36.787]         base::withCallingHandlers({
[16:10:36.787]             ...future.value <- base::withVisible(base::local({
[16:10:36.787]                 ...future.makeSendCondition <- local({
[16:10:36.787]                   sendCondition <- NULL
[16:10:36.787]                   function(frame = 1L) {
[16:10:36.787]                     if (is.function(sendCondition)) 
[16:10:36.787]                       return(sendCondition)
[16:10:36.787]                     ns <- getNamespace("parallel")
[16:10:36.787]                     if (exists("sendData", mode = "function", 
[16:10:36.787]                       envir = ns)) {
[16:10:36.787]                       parallel_sendData <- get("sendData", mode = "function", 
[16:10:36.787]                         envir = ns)
[16:10:36.787]                       envir <- sys.frame(frame)
[16:10:36.787]                       master <- NULL
[16:10:36.787]                       while (!identical(envir, .GlobalEnv) && 
[16:10:36.787]                         !identical(envir, emptyenv())) {
[16:10:36.787]                         if (exists("master", mode = "list", envir = envir, 
[16:10:36.787]                           inherits = FALSE)) {
[16:10:36.787]                           master <- get("master", mode = "list", 
[16:10:36.787]                             envir = envir, inherits = FALSE)
[16:10:36.787]                           if (inherits(master, c("SOCKnode", 
[16:10:36.787]                             "SOCK0node"))) {
[16:10:36.787]                             sendCondition <<- function(cond) {
[16:10:36.787]                               data <- list(type = "VALUE", value = cond, 
[16:10:36.787]                                 success = TRUE)
[16:10:36.787]                               parallel_sendData(master, data)
[16:10:36.787]                             }
[16:10:36.787]                             return(sendCondition)
[16:10:36.787]                           }
[16:10:36.787]                         }
[16:10:36.787]                         frame <- frame + 1L
[16:10:36.787]                         envir <- sys.frame(frame)
[16:10:36.787]                       }
[16:10:36.787]                     }
[16:10:36.787]                     sendCondition <<- function(cond) NULL
[16:10:36.787]                   }
[16:10:36.787]                 })
[16:10:36.787]                 withCallingHandlers({
[16:10:36.787]                   {
[16:10:36.787]                     do.call(function(...) {
[16:10:36.787]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.787]                       if (!identical(...future.globals.maxSize.org, 
[16:10:36.787]                         ...future.globals.maxSize)) {
[16:10:36.787]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.787]                         on.exit(options(oopts), add = TRUE)
[16:10:36.787]                       }
[16:10:36.787]                       {
[16:10:36.787]                         lapply(seq_along(...future.elements_ii), 
[16:10:36.787]                           FUN = function(jj) {
[16:10:36.787]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.787]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.787]                               envir = globalenv(), inherits = FALSE)
[16:10:36.787]                             ...future.FUN(...future.X_jj, ...)
[16:10:36.787]                           })
[16:10:36.787]                       }
[16:10:36.787]                     }, args = future.call.arguments)
[16:10:36.787]                   }
[16:10:36.787]                 }, immediateCondition = function(cond) {
[16:10:36.787]                   sendCondition <- ...future.makeSendCondition()
[16:10:36.787]                   sendCondition(cond)
[16:10:36.787]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.787]                   {
[16:10:36.787]                     inherits <- base::inherits
[16:10:36.787]                     invokeRestart <- base::invokeRestart
[16:10:36.787]                     is.null <- base::is.null
[16:10:36.787]                     muffled <- FALSE
[16:10:36.787]                     if (inherits(cond, "message")) {
[16:10:36.787]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:36.787]                       if (muffled) 
[16:10:36.787]                         invokeRestart("muffleMessage")
[16:10:36.787]                     }
[16:10:36.787]                     else if (inherits(cond, "warning")) {
[16:10:36.787]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:36.787]                       if (muffled) 
[16:10:36.787]                         invokeRestart("muffleWarning")
[16:10:36.787]                     }
[16:10:36.787]                     else if (inherits(cond, "condition")) {
[16:10:36.787]                       if (!is.null(pattern)) {
[16:10:36.787]                         computeRestarts <- base::computeRestarts
[16:10:36.787]                         grepl <- base::grepl
[16:10:36.787]                         restarts <- computeRestarts(cond)
[16:10:36.787]                         for (restart in restarts) {
[16:10:36.787]                           name <- restart$name
[16:10:36.787]                           if (is.null(name)) 
[16:10:36.787]                             next
[16:10:36.787]                           if (!grepl(pattern, name)) 
[16:10:36.787]                             next
[16:10:36.787]                           invokeRestart(restart)
[16:10:36.787]                           muffled <- TRUE
[16:10:36.787]                           break
[16:10:36.787]                         }
[16:10:36.787]                       }
[16:10:36.787]                     }
[16:10:36.787]                     invisible(muffled)
[16:10:36.787]                   }
[16:10:36.787]                   muffleCondition(cond)
[16:10:36.787]                 })
[16:10:36.787]             }))
[16:10:36.787]             future::FutureResult(value = ...future.value$value, 
[16:10:36.787]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:36.787]                   ...future.rng), globalenv = if (FALSE) 
[16:10:36.787]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:36.787]                     ...future.globalenv.names))
[16:10:36.787]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:36.787]         }, condition = base::local({
[16:10:36.787]             c <- base::c
[16:10:36.787]             inherits <- base::inherits
[16:10:36.787]             invokeRestart <- base::invokeRestart
[16:10:36.787]             length <- base::length
[16:10:36.787]             list <- base::list
[16:10:36.787]             seq.int <- base::seq.int
[16:10:36.787]             signalCondition <- base::signalCondition
[16:10:36.787]             sys.calls <- base::sys.calls
[16:10:36.787]             `[[` <- base::`[[`
[16:10:36.787]             `+` <- base::`+`
[16:10:36.787]             `<<-` <- base::`<<-`
[16:10:36.787]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:36.787]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:36.787]                   3L)]
[16:10:36.787]             }
[16:10:36.787]             function(cond) {
[16:10:36.787]                 is_error <- inherits(cond, "error")
[16:10:36.787]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:36.787]                   NULL)
[16:10:36.787]                 if (is_error) {
[16:10:36.787]                   sessionInformation <- function() {
[16:10:36.787]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:36.787]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:36.787]                       search = base::search(), system = base::Sys.info())
[16:10:36.787]                   }
[16:10:36.787]                   ...future.conditions[[length(...future.conditions) + 
[16:10:36.787]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:36.787]                     cond$call), session = sessionInformation(), 
[16:10:36.787]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:36.787]                   signalCondition(cond)
[16:10:36.787]                 }
[16:10:36.787]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:36.787]                 "immediateCondition"))) {
[16:10:36.787]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:36.787]                   ...future.conditions[[length(...future.conditions) + 
[16:10:36.787]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:36.787]                   if (TRUE && !signal) {
[16:10:36.787]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.787]                     {
[16:10:36.787]                       inherits <- base::inherits
[16:10:36.787]                       invokeRestart <- base::invokeRestart
[16:10:36.787]                       is.null <- base::is.null
[16:10:36.787]                       muffled <- FALSE
[16:10:36.787]                       if (inherits(cond, "message")) {
[16:10:36.787]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:36.787]                         if (muffled) 
[16:10:36.787]                           invokeRestart("muffleMessage")
[16:10:36.787]                       }
[16:10:36.787]                       else if (inherits(cond, "warning")) {
[16:10:36.787]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:36.787]                         if (muffled) 
[16:10:36.787]                           invokeRestart("muffleWarning")
[16:10:36.787]                       }
[16:10:36.787]                       else if (inherits(cond, "condition")) {
[16:10:36.787]                         if (!is.null(pattern)) {
[16:10:36.787]                           computeRestarts <- base::computeRestarts
[16:10:36.787]                           grepl <- base::grepl
[16:10:36.787]                           restarts <- computeRestarts(cond)
[16:10:36.787]                           for (restart in restarts) {
[16:10:36.787]                             name <- restart$name
[16:10:36.787]                             if (is.null(name)) 
[16:10:36.787]                               next
[16:10:36.787]                             if (!grepl(pattern, name)) 
[16:10:36.787]                               next
[16:10:36.787]                             invokeRestart(restart)
[16:10:36.787]                             muffled <- TRUE
[16:10:36.787]                             break
[16:10:36.787]                           }
[16:10:36.787]                         }
[16:10:36.787]                       }
[16:10:36.787]                       invisible(muffled)
[16:10:36.787]                     }
[16:10:36.787]                     muffleCondition(cond, pattern = "^muffle")
[16:10:36.787]                   }
[16:10:36.787]                 }
[16:10:36.787]                 else {
[16:10:36.787]                   if (TRUE) {
[16:10:36.787]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.787]                     {
[16:10:36.787]                       inherits <- base::inherits
[16:10:36.787]                       invokeRestart <- base::invokeRestart
[16:10:36.787]                       is.null <- base::is.null
[16:10:36.787]                       muffled <- FALSE
[16:10:36.787]                       if (inherits(cond, "message")) {
[16:10:36.787]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:36.787]                         if (muffled) 
[16:10:36.787]                           invokeRestart("muffleMessage")
[16:10:36.787]                       }
[16:10:36.787]                       else if (inherits(cond, "warning")) {
[16:10:36.787]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:36.787]                         if (muffled) 
[16:10:36.787]                           invokeRestart("muffleWarning")
[16:10:36.787]                       }
[16:10:36.787]                       else if (inherits(cond, "condition")) {
[16:10:36.787]                         if (!is.null(pattern)) {
[16:10:36.787]                           computeRestarts <- base::computeRestarts
[16:10:36.787]                           grepl <- base::grepl
[16:10:36.787]                           restarts <- computeRestarts(cond)
[16:10:36.787]                           for (restart in restarts) {
[16:10:36.787]                             name <- restart$name
[16:10:36.787]                             if (is.null(name)) 
[16:10:36.787]                               next
[16:10:36.787]                             if (!grepl(pattern, name)) 
[16:10:36.787]                               next
[16:10:36.787]                             invokeRestart(restart)
[16:10:36.787]                             muffled <- TRUE
[16:10:36.787]                             break
[16:10:36.787]                           }
[16:10:36.787]                         }
[16:10:36.787]                       }
[16:10:36.787]                       invisible(muffled)
[16:10:36.787]                     }
[16:10:36.787]                     muffleCondition(cond, pattern = "^muffle")
[16:10:36.787]                   }
[16:10:36.787]                 }
[16:10:36.787]             }
[16:10:36.787]         }))
[16:10:36.787]     }, error = function(ex) {
[16:10:36.787]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:36.787]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:36.787]                 ...future.rng), started = ...future.startTime, 
[16:10:36.787]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:36.787]             version = "1.8"), class = "FutureResult")
[16:10:36.787]     }, finally = {
[16:10:36.787]         if (!identical(...future.workdir, getwd())) 
[16:10:36.787]             setwd(...future.workdir)
[16:10:36.787]         {
[16:10:36.787]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:36.787]                 ...future.oldOptions$nwarnings <- NULL
[16:10:36.787]             }
[16:10:36.787]             base::options(...future.oldOptions)
[16:10:36.787]             if (.Platform$OS.type == "windows") {
[16:10:36.787]                 old_names <- names(...future.oldEnvVars)
[16:10:36.787]                 envs <- base::Sys.getenv()
[16:10:36.787]                 names <- names(envs)
[16:10:36.787]                 common <- intersect(names, old_names)
[16:10:36.787]                 added <- setdiff(names, old_names)
[16:10:36.787]                 removed <- setdiff(old_names, names)
[16:10:36.787]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:36.787]                   envs[common]]
[16:10:36.787]                 NAMES <- toupper(changed)
[16:10:36.787]                 args <- list()
[16:10:36.787]                 for (kk in seq_along(NAMES)) {
[16:10:36.787]                   name <- changed[[kk]]
[16:10:36.787]                   NAME <- NAMES[[kk]]
[16:10:36.787]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.787]                     next
[16:10:36.787]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:36.787]                 }
[16:10:36.787]                 NAMES <- toupper(added)
[16:10:36.787]                 for (kk in seq_along(NAMES)) {
[16:10:36.787]                   name <- added[[kk]]
[16:10:36.787]                   NAME <- NAMES[[kk]]
[16:10:36.787]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.787]                     next
[16:10:36.787]                   args[[name]] <- ""
[16:10:36.787]                 }
[16:10:36.787]                 NAMES <- toupper(removed)
[16:10:36.787]                 for (kk in seq_along(NAMES)) {
[16:10:36.787]                   name <- removed[[kk]]
[16:10:36.787]                   NAME <- NAMES[[kk]]
[16:10:36.787]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.787]                     next
[16:10:36.787]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:36.787]                 }
[16:10:36.787]                 if (length(args) > 0) 
[16:10:36.787]                   base::do.call(base::Sys.setenv, args = args)
[16:10:36.787]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:36.787]             }
[16:10:36.787]             else {
[16:10:36.787]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:36.787]             }
[16:10:36.787]             {
[16:10:36.787]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:36.787]                   0L) {
[16:10:36.787]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:36.787]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:36.787]                   base::options(opts)
[16:10:36.787]                 }
[16:10:36.787]                 {
[16:10:36.787]                   {
[16:10:36.787]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:36.787]                     NULL
[16:10:36.787]                   }
[16:10:36.787]                   options(future.plan = NULL)
[16:10:36.787]                   if (is.na(NA_character_)) 
[16:10:36.787]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:36.787]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:36.787]                   future::plan(list(function (..., workers = availableCores(), 
[16:10:36.787]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:10:36.787]                     envir = parent.frame()) 
[16:10:36.787]                   {
[16:10:36.787]                     if (is.function(workers)) 
[16:10:36.787]                       workers <- workers()
[16:10:36.787]                     workers <- structure(as.integer(workers), 
[16:10:36.787]                       class = class(workers))
[16:10:36.787]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:10:36.787]                       workers >= 1)
[16:10:36.787]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:10:36.787]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:10:36.787]                     }
[16:10:36.787]                     future <- MultisessionFuture(..., workers = workers, 
[16:10:36.787]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:10:36.787]                       envir = envir)
[16:10:36.787]                     if (!future$lazy) 
[16:10:36.787]                       future <- run(future)
[16:10:36.787]                     invisible(future)
[16:10:36.787]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:36.787]                 }
[16:10:36.787]             }
[16:10:36.787]         }
[16:10:36.787]     })
[16:10:36.787]     if (TRUE) {
[16:10:36.787]         base::sink(type = "output", split = FALSE)
[16:10:36.787]         if (TRUE) {
[16:10:36.787]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:36.787]         }
[16:10:36.787]         else {
[16:10:36.787]             ...future.result["stdout"] <- base::list(NULL)
[16:10:36.787]         }
[16:10:36.787]         base::close(...future.stdout)
[16:10:36.787]         ...future.stdout <- NULL
[16:10:36.787]     }
[16:10:36.787]     ...future.result$conditions <- ...future.conditions
[16:10:36.787]     ...future.result$finished <- base::Sys.time()
[16:10:36.787]     ...future.result
[16:10:36.787] }
[16:10:36.789] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[16:10:36.790] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[16:10:36.790] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[16:10:36.790] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[16:10:36.791] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[16:10:36.791] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[16:10:36.791] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[16:10:36.791] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[16:10:36.791] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[16:10:36.792] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[16:10:36.792] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[16:10:36.792] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[16:10:36.793] MultisessionFuture started
[16:10:36.793] - Launch lazy future ... done
[16:10:36.793] run() for ‘MultisessionFuture’ ... done
[16:10:36.793] Created future:
[16:10:36.794] MultisessionFuture:
[16:10:36.794] Label: ‘future_replicate-2’
[16:10:36.794] Expression:
[16:10:36.794] {
[16:10:36.794]     do.call(function(...) {
[16:10:36.794]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.794]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:36.794]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.794]             on.exit(options(oopts), add = TRUE)
[16:10:36.794]         }
[16:10:36.794]         {
[16:10:36.794]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:36.794]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.794]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.794]                   envir = globalenv(), inherits = FALSE)
[16:10:36.794]                 ...future.FUN(...future.X_jj, ...)
[16:10:36.794]             })
[16:10:36.794]         }
[16:10:36.794]     }, args = future.call.arguments)
[16:10:36.794] }
[16:10:36.794] Lazy evaluation: FALSE
[16:10:36.794] Asynchronous evaluation: TRUE
[16:10:36.794] Local evaluation: TRUE
[16:10:36.794] Environment: R_GlobalEnv
[16:10:36.794] Capture standard output: TRUE
[16:10:36.794] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:36.794] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:36.794] Packages: <none>
[16:10:36.794] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:36.794] Resolved: FALSE
[16:10:36.794] Value: <not collected>
[16:10:36.794] Conditions captured: <none>
[16:10:36.794] Early signaling: FALSE
[16:10:36.794] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:36.794] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:36.806] Chunk #2 of 2 ... DONE
[16:10:36.806] Launching 2 futures (chunks) ... DONE
[16:10:36.806] Resolving 2 futures (chunks) ...
[16:10:36.806] resolve() on list ...
[16:10:36.806]  recursive: 0
[16:10:36.806]  length: 2
[16:10:36.806] 
[16:10:36.807] receiveMessageFromWorker() for ClusterFuture ...
[16:10:36.807] - Validating connection of MultisessionFuture
[16:10:36.807] - received message: FutureResult
[16:10:36.807] - Received FutureResult
[16:10:36.807] - Erased future from FutureRegistry
[16:10:36.807] result() for ClusterFuture ...
[16:10:36.807] - result already collected: FutureResult
[16:10:36.808] result() for ClusterFuture ... done
[16:10:36.808] receiveMessageFromWorker() for ClusterFuture ... done
[16:10:36.808] Future #1
[16:10:36.808] result() for ClusterFuture ...
[16:10:36.808] - result already collected: FutureResult
[16:10:36.808] result() for ClusterFuture ... done
[16:10:36.808] result() for ClusterFuture ...
[16:10:36.808] - result already collected: FutureResult
[16:10:36.808] result() for ClusterFuture ... done
[16:10:36.808] signalConditionsASAP(MultisessionFuture, pos=1) ...
[16:10:36.809] - nx: 2
[16:10:36.809] - relay: TRUE
[16:10:36.809] - stdout: TRUE
[16:10:36.809] - signal: TRUE
[16:10:36.809] - resignal: FALSE
[16:10:36.809] - force: TRUE
[16:10:36.809] - relayed: [n=2] FALSE, FALSE
[16:10:36.809] - queued futures: [n=2] FALSE, FALSE
[16:10:36.809]  - until=1
[16:10:36.809]  - relaying element #1
[16:10:36.809] result() for ClusterFuture ...
[16:10:36.809] - result already collected: FutureResult
[16:10:36.810] result() for ClusterFuture ... done
[16:10:36.810] result() for ClusterFuture ...
[16:10:36.810] - result already collected: FutureResult
[16:10:36.810] result() for ClusterFuture ... done
[16:10:36.810] result() for ClusterFuture ...
[16:10:36.810] - result already collected: FutureResult
[16:10:36.810] result() for ClusterFuture ... done
[16:10:36.810] result() for ClusterFuture ...
[16:10:36.810] - result already collected: FutureResult
[16:10:36.810] result() for ClusterFuture ... done
[16:10:36.810] - relayed: [n=2] TRUE, FALSE
[16:10:36.811] - queued futures: [n=2] TRUE, FALSE
[16:10:36.811] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[16:10:36.811]  length: 1 (resolved future 1)
[16:10:36.841] receiveMessageFromWorker() for ClusterFuture ...
[16:10:36.841] - Validating connection of MultisessionFuture
[16:10:36.841] - received message: FutureResult
[16:10:36.841] - Received FutureResult
[16:10:36.841] - Erased future from FutureRegistry
[16:10:36.841] result() for ClusterFuture ...
[16:10:36.842] - result already collected: FutureResult
[16:10:36.842] result() for ClusterFuture ... done
[16:10:36.842] receiveMessageFromWorker() for ClusterFuture ... done
[16:10:36.842] Future #2
[16:10:36.842] result() for ClusterFuture ...
[16:10:36.842] - result already collected: FutureResult
[16:10:36.842] result() for ClusterFuture ... done
[16:10:36.842] result() for ClusterFuture ...
[16:10:36.842] - result already collected: FutureResult
[16:10:36.842] result() for ClusterFuture ... done
[16:10:36.842] signalConditionsASAP(MultisessionFuture, pos=2) ...
[16:10:36.843] - nx: 2
[16:10:36.843] - relay: TRUE
[16:10:36.843] - stdout: TRUE
[16:10:36.843] - signal: TRUE
[16:10:36.843] - resignal: FALSE
[16:10:36.843] - force: TRUE
[16:10:36.843] - relayed: [n=2] TRUE, FALSE
[16:10:36.843] - queued futures: [n=2] TRUE, FALSE
[16:10:36.843]  - until=2
[16:10:36.843]  - relaying element #2
[16:10:36.843] result() for ClusterFuture ...
[16:10:36.843] - result already collected: FutureResult
[16:10:36.843] result() for ClusterFuture ... done
[16:10:36.844] result() for ClusterFuture ...
[16:10:36.844] - result already collected: FutureResult
[16:10:36.844] result() for ClusterFuture ... done
[16:10:36.844] result() for ClusterFuture ...
[16:10:36.844] - result already collected: FutureResult
[16:10:36.844] result() for ClusterFuture ... done
[16:10:36.844] result() for ClusterFuture ...
[16:10:36.844] - result already collected: FutureResult
[16:10:36.844] result() for ClusterFuture ... done
[16:10:36.844] - relayed: [n=2] TRUE, TRUE
[16:10:36.845] - queued futures: [n=2] TRUE, TRUE
[16:10:36.845] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[16:10:36.845]  length: 0 (resolved future 2)
[16:10:36.845] Relaying remaining futures
[16:10:36.845] signalConditionsASAP(NULL, pos=0) ...
[16:10:36.845] - nx: 2
[16:10:36.845] - relay: TRUE
[16:10:36.845] - stdout: TRUE
[16:10:36.845] - signal: TRUE
[16:10:36.845] - resignal: FALSE
[16:10:36.845] - force: TRUE
[16:10:36.845] - relayed: [n=2] TRUE, TRUE
[16:10:36.846] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:10:36.846] - relayed: [n=2] TRUE, TRUE
[16:10:36.846] - queued futures: [n=2] TRUE, TRUE
[16:10:36.846] signalConditionsASAP(NULL, pos=0) ... done
[16:10:36.846] resolve() on list ... DONE
[16:10:36.846] result() for ClusterFuture ...
[16:10:36.846] - result already collected: FutureResult
[16:10:36.846] result() for ClusterFuture ... done
[16:10:36.846] result() for ClusterFuture ...
[16:10:36.846] - result already collected: FutureResult
[16:10:36.846] result() for ClusterFuture ... done
[16:10:36.847] result() for ClusterFuture ...
[16:10:36.847] - result already collected: FutureResult
[16:10:36.847] result() for ClusterFuture ... done
[16:10:36.847] result() for ClusterFuture ...
[16:10:36.847] - result already collected: FutureResult
[16:10:36.847] result() for ClusterFuture ... done
[16:10:36.847]  - Number of value chunks collected: 2
[16:10:36.847] Resolving 2 futures (chunks) ... DONE
[16:10:36.847] Reducing values from 2 chunks ...
[16:10:36.847]  - Number of values collected after concatenation: 5
[16:10:36.847]  - Number of values expected: 5
[16:10:36.848] Reducing values from 2 chunks ... DONE
[16:10:36.848] future_lapply() ... DONE
[16:10:36.848] future_lapply() ...
[16:10:36.848] Generating random seeds ...
[16:10:36.848] Generating random seed streams for 5 elements ...
[16:10:36.849] Generating random seed streams for 5 elements ... DONE
[16:10:36.849] Generating random seeds ... DONE
[16:10:36.849] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:10:36.853] Number of chunks: 2
[16:10:36.853] getGlobalsAndPackagesXApply() ...
[16:10:36.853]  - future.globals: TRUE
[16:10:36.853] getGlobalsAndPackages() ...
[16:10:36.853] Searching for globals...
[16:10:36.854] - globals found: [2] ‘FUN’, ‘sample’
[16:10:36.854] Searching for globals ... DONE
[16:10:36.854] Resolving globals: FALSE
[16:10:36.855] The total size of the 1 globals is 616 bytes (616 bytes)
[16:10:36.855] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:10:36.855] - globals: [1] ‘FUN’
[16:10:36.855] 
[16:10:36.855] getGlobalsAndPackages() ... DONE
[16:10:36.855]  - globals found/used: [n=1] ‘FUN’
[16:10:36.856]  - needed namespaces: [n=0] 
[16:10:36.856] Finding globals ... DONE
[16:10:36.856]  - use_args: TRUE
[16:10:36.856]  - Getting '...' globals ...
[16:10:36.856] resolve() on list ...
[16:10:36.856]  recursive: 0
[16:10:36.856]  length: 1
[16:10:36.856]  elements: ‘...’
[16:10:36.857]  length: 0 (resolved future 1)
[16:10:36.857] resolve() on list ... DONE
[16:10:36.857]    - '...' content: [n=0] 
[16:10:36.857] List of 1
[16:10:36.857]  $ ...: list()
[16:10:36.857]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:36.857]  - attr(*, "where")=List of 1
[16:10:36.857]   ..$ ...:<environment: 0x55cf8d0a9148> 
[16:10:36.857]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:36.857]  - attr(*, "resolved")= logi TRUE
[16:10:36.857]  - attr(*, "total_size")= num NA
[16:10:36.859]  - Getting '...' globals ... DONE
[16:10:36.859] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:10:36.860] List of 2
[16:10:36.860]  $ ...future.FUN:function (...)  
[16:10:36.860]  $ ...          : list()
[16:10:36.860]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:36.860]  - attr(*, "where")=List of 2
[16:10:36.860]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:10:36.860]   ..$ ...          :<environment: 0x55cf8d0a9148> 
[16:10:36.860]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:36.860]  - attr(*, "resolved")= logi FALSE
[16:10:36.860]  - attr(*, "total_size")= num 616
[16:10:36.862] Packages to be attached in all futures: [n=0] 
[16:10:36.862] getGlobalsAndPackagesXApply() ... DONE
[16:10:36.862] Number of futures (= number of chunks): 2
[16:10:36.863] Launching 2 futures (chunks) ...
[16:10:36.863] Chunk #1 of 2 ...
[16:10:36.863]  - Finding globals in 'X' for chunk #1 ...
[16:10:36.863] getGlobalsAndPackages() ...
[16:10:36.863] Searching for globals...
[16:10:36.863] 
[16:10:36.863] Searching for globals ... DONE
[16:10:36.863] - globals: [0] <none>
[16:10:36.863] getGlobalsAndPackages() ... DONE
[16:10:36.864]    + additional globals found: [n=0] 
[16:10:36.864]    + additional namespaces needed: [n=0] 
[16:10:36.864]  - Finding globals in 'X' for chunk #1 ... DONE
[16:10:36.864]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:10:36.864]  - seeds: [2] <seeds>
[16:10:36.864] getGlobalsAndPackages() ...
[16:10:36.864] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:36.864] Resolving globals: FALSE
[16:10:36.864] Tweak future expression to call with '...' arguments ...
[16:10:36.865] {
[16:10:36.865]     do.call(function(...) {
[16:10:36.865]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.865]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:36.865]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.865]             on.exit(options(oopts), add = TRUE)
[16:10:36.865]         }
[16:10:36.865]         {
[16:10:36.865]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:36.865]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.865]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.865]                   envir = globalenv(), inherits = FALSE)
[16:10:36.865]                 ...future.FUN(...future.X_jj, ...)
[16:10:36.865]             })
[16:10:36.865]         }
[16:10:36.865]     }, args = future.call.arguments)
[16:10:36.865] }
[16:10:36.865] Tweak future expression to call with '...' arguments ... DONE
[16:10:36.865] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:36.865] 
[16:10:36.865] getGlobalsAndPackages() ... DONE
[16:10:36.866] run() for ‘Future’ ...
[16:10:36.866] - state: ‘created’
[16:10:36.866] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:10:36.880] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:36.881] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:10:36.881]   - Field: ‘node’
[16:10:36.881]   - Field: ‘label’
[16:10:36.881]   - Field: ‘local’
[16:10:36.881]   - Field: ‘owner’
[16:10:36.881]   - Field: ‘envir’
[16:10:36.881]   - Field: ‘workers’
[16:10:36.881]   - Field: ‘packages’
[16:10:36.881]   - Field: ‘gc’
[16:10:36.881]   - Field: ‘conditions’
[16:10:36.882]   - Field: ‘persistent’
[16:10:36.882]   - Field: ‘expr’
[16:10:36.882]   - Field: ‘uuid’
[16:10:36.882]   - Field: ‘seed’
[16:10:36.882]   - Field: ‘version’
[16:10:36.882]   - Field: ‘result’
[16:10:36.882]   - Field: ‘asynchronous’
[16:10:36.882]   - Field: ‘calls’
[16:10:36.882]   - Field: ‘globals’
[16:10:36.882]   - Field: ‘stdout’
[16:10:36.882]   - Field: ‘earlySignal’
[16:10:36.883]   - Field: ‘lazy’
[16:10:36.883]   - Field: ‘state’
[16:10:36.883] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:10:36.883] - Launch lazy future ...
[16:10:36.883] Packages needed by the future expression (n = 0): <none>
[16:10:36.883] Packages needed by future strategies (n = 0): <none>
[16:10:36.884] {
[16:10:36.884]     {
[16:10:36.884]         {
[16:10:36.884]             ...future.startTime <- base::Sys.time()
[16:10:36.884]             {
[16:10:36.884]                 {
[16:10:36.884]                   {
[16:10:36.884]                     {
[16:10:36.884]                       base::local({
[16:10:36.884]                         has_future <- base::requireNamespace("future", 
[16:10:36.884]                           quietly = TRUE)
[16:10:36.884]                         if (has_future) {
[16:10:36.884]                           ns <- base::getNamespace("future")
[16:10:36.884]                           version <- ns[[".package"]][["version"]]
[16:10:36.884]                           if (is.null(version)) 
[16:10:36.884]                             version <- utils::packageVersion("future")
[16:10:36.884]                         }
[16:10:36.884]                         else {
[16:10:36.884]                           version <- NULL
[16:10:36.884]                         }
[16:10:36.884]                         if (!has_future || version < "1.8.0") {
[16:10:36.884]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:36.884]                             "", base::R.version$version.string), 
[16:10:36.884]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:36.884]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:36.884]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:36.884]                               "release", "version")], collapse = " "), 
[16:10:36.884]                             hostname = base::Sys.info()[["nodename"]])
[16:10:36.884]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:36.884]                             info)
[16:10:36.884]                           info <- base::paste(info, collapse = "; ")
[16:10:36.884]                           if (!has_future) {
[16:10:36.884]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:36.884]                               info)
[16:10:36.884]                           }
[16:10:36.884]                           else {
[16:10:36.884]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:36.884]                               info, version)
[16:10:36.884]                           }
[16:10:36.884]                           base::stop(msg)
[16:10:36.884]                         }
[16:10:36.884]                       })
[16:10:36.884]                     }
[16:10:36.884]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:36.884]                     base::options(mc.cores = 1L)
[16:10:36.884]                   }
[16:10:36.884]                   options(future.plan = NULL)
[16:10:36.884]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:36.884]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:36.884]                 }
[16:10:36.884]                 ...future.workdir <- getwd()
[16:10:36.884]             }
[16:10:36.884]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:36.884]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:36.884]         }
[16:10:36.884]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:36.884]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:10:36.884]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:36.884]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:36.884]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:36.884]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:36.884]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:36.884]             base::names(...future.oldOptions))
[16:10:36.884]     }
[16:10:36.884]     if (FALSE) {
[16:10:36.884]     }
[16:10:36.884]     else {
[16:10:36.884]         if (TRUE) {
[16:10:36.884]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:36.884]                 open = "w")
[16:10:36.884]         }
[16:10:36.884]         else {
[16:10:36.884]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:36.884]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:36.884]         }
[16:10:36.884]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:36.884]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:36.884]             base::sink(type = "output", split = FALSE)
[16:10:36.884]             base::close(...future.stdout)
[16:10:36.884]         }, add = TRUE)
[16:10:36.884]     }
[16:10:36.884]     ...future.frame <- base::sys.nframe()
[16:10:36.884]     ...future.conditions <- base::list()
[16:10:36.884]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:36.884]     if (FALSE) {
[16:10:36.884]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:36.884]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:36.884]     }
[16:10:36.884]     ...future.result <- base::tryCatch({
[16:10:36.884]         base::withCallingHandlers({
[16:10:36.884]             ...future.value <- base::withVisible(base::local({
[16:10:36.884]                 ...future.makeSendCondition <- local({
[16:10:36.884]                   sendCondition <- NULL
[16:10:36.884]                   function(frame = 1L) {
[16:10:36.884]                     if (is.function(sendCondition)) 
[16:10:36.884]                       return(sendCondition)
[16:10:36.884]                     ns <- getNamespace("parallel")
[16:10:36.884]                     if (exists("sendData", mode = "function", 
[16:10:36.884]                       envir = ns)) {
[16:10:36.884]                       parallel_sendData <- get("sendData", mode = "function", 
[16:10:36.884]                         envir = ns)
[16:10:36.884]                       envir <- sys.frame(frame)
[16:10:36.884]                       master <- NULL
[16:10:36.884]                       while (!identical(envir, .GlobalEnv) && 
[16:10:36.884]                         !identical(envir, emptyenv())) {
[16:10:36.884]                         if (exists("master", mode = "list", envir = envir, 
[16:10:36.884]                           inherits = FALSE)) {
[16:10:36.884]                           master <- get("master", mode = "list", 
[16:10:36.884]                             envir = envir, inherits = FALSE)
[16:10:36.884]                           if (inherits(master, c("SOCKnode", 
[16:10:36.884]                             "SOCK0node"))) {
[16:10:36.884]                             sendCondition <<- function(cond) {
[16:10:36.884]                               data <- list(type = "VALUE", value = cond, 
[16:10:36.884]                                 success = TRUE)
[16:10:36.884]                               parallel_sendData(master, data)
[16:10:36.884]                             }
[16:10:36.884]                             return(sendCondition)
[16:10:36.884]                           }
[16:10:36.884]                         }
[16:10:36.884]                         frame <- frame + 1L
[16:10:36.884]                         envir <- sys.frame(frame)
[16:10:36.884]                       }
[16:10:36.884]                     }
[16:10:36.884]                     sendCondition <<- function(cond) NULL
[16:10:36.884]                   }
[16:10:36.884]                 })
[16:10:36.884]                 withCallingHandlers({
[16:10:36.884]                   {
[16:10:36.884]                     do.call(function(...) {
[16:10:36.884]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.884]                       if (!identical(...future.globals.maxSize.org, 
[16:10:36.884]                         ...future.globals.maxSize)) {
[16:10:36.884]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.884]                         on.exit(options(oopts), add = TRUE)
[16:10:36.884]                       }
[16:10:36.884]                       {
[16:10:36.884]                         lapply(seq_along(...future.elements_ii), 
[16:10:36.884]                           FUN = function(jj) {
[16:10:36.884]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.884]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.884]                               envir = globalenv(), inherits = FALSE)
[16:10:36.884]                             ...future.FUN(...future.X_jj, ...)
[16:10:36.884]                           })
[16:10:36.884]                       }
[16:10:36.884]                     }, args = future.call.arguments)
[16:10:36.884]                   }
[16:10:36.884]                 }, immediateCondition = function(cond) {
[16:10:36.884]                   sendCondition <- ...future.makeSendCondition()
[16:10:36.884]                   sendCondition(cond)
[16:10:36.884]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.884]                   {
[16:10:36.884]                     inherits <- base::inherits
[16:10:36.884]                     invokeRestart <- base::invokeRestart
[16:10:36.884]                     is.null <- base::is.null
[16:10:36.884]                     muffled <- FALSE
[16:10:36.884]                     if (inherits(cond, "message")) {
[16:10:36.884]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:36.884]                       if (muffled) 
[16:10:36.884]                         invokeRestart("muffleMessage")
[16:10:36.884]                     }
[16:10:36.884]                     else if (inherits(cond, "warning")) {
[16:10:36.884]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:36.884]                       if (muffled) 
[16:10:36.884]                         invokeRestart("muffleWarning")
[16:10:36.884]                     }
[16:10:36.884]                     else if (inherits(cond, "condition")) {
[16:10:36.884]                       if (!is.null(pattern)) {
[16:10:36.884]                         computeRestarts <- base::computeRestarts
[16:10:36.884]                         grepl <- base::grepl
[16:10:36.884]                         restarts <- computeRestarts(cond)
[16:10:36.884]                         for (restart in restarts) {
[16:10:36.884]                           name <- restart$name
[16:10:36.884]                           if (is.null(name)) 
[16:10:36.884]                             next
[16:10:36.884]                           if (!grepl(pattern, name)) 
[16:10:36.884]                             next
[16:10:36.884]                           invokeRestart(restart)
[16:10:36.884]                           muffled <- TRUE
[16:10:36.884]                           break
[16:10:36.884]                         }
[16:10:36.884]                       }
[16:10:36.884]                     }
[16:10:36.884]                     invisible(muffled)
[16:10:36.884]                   }
[16:10:36.884]                   muffleCondition(cond)
[16:10:36.884]                 })
[16:10:36.884]             }))
[16:10:36.884]             future::FutureResult(value = ...future.value$value, 
[16:10:36.884]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:36.884]                   ...future.rng), globalenv = if (FALSE) 
[16:10:36.884]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:36.884]                     ...future.globalenv.names))
[16:10:36.884]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:36.884]         }, condition = base::local({
[16:10:36.884]             c <- base::c
[16:10:36.884]             inherits <- base::inherits
[16:10:36.884]             invokeRestart <- base::invokeRestart
[16:10:36.884]             length <- base::length
[16:10:36.884]             list <- base::list
[16:10:36.884]             seq.int <- base::seq.int
[16:10:36.884]             signalCondition <- base::signalCondition
[16:10:36.884]             sys.calls <- base::sys.calls
[16:10:36.884]             `[[` <- base::`[[`
[16:10:36.884]             `+` <- base::`+`
[16:10:36.884]             `<<-` <- base::`<<-`
[16:10:36.884]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:36.884]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:36.884]                   3L)]
[16:10:36.884]             }
[16:10:36.884]             function(cond) {
[16:10:36.884]                 is_error <- inherits(cond, "error")
[16:10:36.884]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:36.884]                   NULL)
[16:10:36.884]                 if (is_error) {
[16:10:36.884]                   sessionInformation <- function() {
[16:10:36.884]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:36.884]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:36.884]                       search = base::search(), system = base::Sys.info())
[16:10:36.884]                   }
[16:10:36.884]                   ...future.conditions[[length(...future.conditions) + 
[16:10:36.884]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:36.884]                     cond$call), session = sessionInformation(), 
[16:10:36.884]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:36.884]                   signalCondition(cond)
[16:10:36.884]                 }
[16:10:36.884]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:36.884]                 "immediateCondition"))) {
[16:10:36.884]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:36.884]                   ...future.conditions[[length(...future.conditions) + 
[16:10:36.884]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:36.884]                   if (TRUE && !signal) {
[16:10:36.884]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.884]                     {
[16:10:36.884]                       inherits <- base::inherits
[16:10:36.884]                       invokeRestart <- base::invokeRestart
[16:10:36.884]                       is.null <- base::is.null
[16:10:36.884]                       muffled <- FALSE
[16:10:36.884]                       if (inherits(cond, "message")) {
[16:10:36.884]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:36.884]                         if (muffled) 
[16:10:36.884]                           invokeRestart("muffleMessage")
[16:10:36.884]                       }
[16:10:36.884]                       else if (inherits(cond, "warning")) {
[16:10:36.884]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:36.884]                         if (muffled) 
[16:10:36.884]                           invokeRestart("muffleWarning")
[16:10:36.884]                       }
[16:10:36.884]                       else if (inherits(cond, "condition")) {
[16:10:36.884]                         if (!is.null(pattern)) {
[16:10:36.884]                           computeRestarts <- base::computeRestarts
[16:10:36.884]                           grepl <- base::grepl
[16:10:36.884]                           restarts <- computeRestarts(cond)
[16:10:36.884]                           for (restart in restarts) {
[16:10:36.884]                             name <- restart$name
[16:10:36.884]                             if (is.null(name)) 
[16:10:36.884]                               next
[16:10:36.884]                             if (!grepl(pattern, name)) 
[16:10:36.884]                               next
[16:10:36.884]                             invokeRestart(restart)
[16:10:36.884]                             muffled <- TRUE
[16:10:36.884]                             break
[16:10:36.884]                           }
[16:10:36.884]                         }
[16:10:36.884]                       }
[16:10:36.884]                       invisible(muffled)
[16:10:36.884]                     }
[16:10:36.884]                     muffleCondition(cond, pattern = "^muffle")
[16:10:36.884]                   }
[16:10:36.884]                 }
[16:10:36.884]                 else {
[16:10:36.884]                   if (TRUE) {
[16:10:36.884]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.884]                     {
[16:10:36.884]                       inherits <- base::inherits
[16:10:36.884]                       invokeRestart <- base::invokeRestart
[16:10:36.884]                       is.null <- base::is.null
[16:10:36.884]                       muffled <- FALSE
[16:10:36.884]                       if (inherits(cond, "message")) {
[16:10:36.884]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:36.884]                         if (muffled) 
[16:10:36.884]                           invokeRestart("muffleMessage")
[16:10:36.884]                       }
[16:10:36.884]                       else if (inherits(cond, "warning")) {
[16:10:36.884]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:36.884]                         if (muffled) 
[16:10:36.884]                           invokeRestart("muffleWarning")
[16:10:36.884]                       }
[16:10:36.884]                       else if (inherits(cond, "condition")) {
[16:10:36.884]                         if (!is.null(pattern)) {
[16:10:36.884]                           computeRestarts <- base::computeRestarts
[16:10:36.884]                           grepl <- base::grepl
[16:10:36.884]                           restarts <- computeRestarts(cond)
[16:10:36.884]                           for (restart in restarts) {
[16:10:36.884]                             name <- restart$name
[16:10:36.884]                             if (is.null(name)) 
[16:10:36.884]                               next
[16:10:36.884]                             if (!grepl(pattern, name)) 
[16:10:36.884]                               next
[16:10:36.884]                             invokeRestart(restart)
[16:10:36.884]                             muffled <- TRUE
[16:10:36.884]                             break
[16:10:36.884]                           }
[16:10:36.884]                         }
[16:10:36.884]                       }
[16:10:36.884]                       invisible(muffled)
[16:10:36.884]                     }
[16:10:36.884]                     muffleCondition(cond, pattern = "^muffle")
[16:10:36.884]                   }
[16:10:36.884]                 }
[16:10:36.884]             }
[16:10:36.884]         }))
[16:10:36.884]     }, error = function(ex) {
[16:10:36.884]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:36.884]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:36.884]                 ...future.rng), started = ...future.startTime, 
[16:10:36.884]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:36.884]             version = "1.8"), class = "FutureResult")
[16:10:36.884]     }, finally = {
[16:10:36.884]         if (!identical(...future.workdir, getwd())) 
[16:10:36.884]             setwd(...future.workdir)
[16:10:36.884]         {
[16:10:36.884]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:36.884]                 ...future.oldOptions$nwarnings <- NULL
[16:10:36.884]             }
[16:10:36.884]             base::options(...future.oldOptions)
[16:10:36.884]             if (.Platform$OS.type == "windows") {
[16:10:36.884]                 old_names <- names(...future.oldEnvVars)
[16:10:36.884]                 envs <- base::Sys.getenv()
[16:10:36.884]                 names <- names(envs)
[16:10:36.884]                 common <- intersect(names, old_names)
[16:10:36.884]                 added <- setdiff(names, old_names)
[16:10:36.884]                 removed <- setdiff(old_names, names)
[16:10:36.884]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:36.884]                   envs[common]]
[16:10:36.884]                 NAMES <- toupper(changed)
[16:10:36.884]                 args <- list()
[16:10:36.884]                 for (kk in seq_along(NAMES)) {
[16:10:36.884]                   name <- changed[[kk]]
[16:10:36.884]                   NAME <- NAMES[[kk]]
[16:10:36.884]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.884]                     next
[16:10:36.884]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:36.884]                 }
[16:10:36.884]                 NAMES <- toupper(added)
[16:10:36.884]                 for (kk in seq_along(NAMES)) {
[16:10:36.884]                   name <- added[[kk]]
[16:10:36.884]                   NAME <- NAMES[[kk]]
[16:10:36.884]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.884]                     next
[16:10:36.884]                   args[[name]] <- ""
[16:10:36.884]                 }
[16:10:36.884]                 NAMES <- toupper(removed)
[16:10:36.884]                 for (kk in seq_along(NAMES)) {
[16:10:36.884]                   name <- removed[[kk]]
[16:10:36.884]                   NAME <- NAMES[[kk]]
[16:10:36.884]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.884]                     next
[16:10:36.884]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:36.884]                 }
[16:10:36.884]                 if (length(args) > 0) 
[16:10:36.884]                   base::do.call(base::Sys.setenv, args = args)
[16:10:36.884]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:36.884]             }
[16:10:36.884]             else {
[16:10:36.884]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:36.884]             }
[16:10:36.884]             {
[16:10:36.884]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:36.884]                   0L) {
[16:10:36.884]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:36.884]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:36.884]                   base::options(opts)
[16:10:36.884]                 }
[16:10:36.884]                 {
[16:10:36.884]                   {
[16:10:36.884]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:36.884]                     NULL
[16:10:36.884]                   }
[16:10:36.884]                   options(future.plan = NULL)
[16:10:36.884]                   if (is.na(NA_character_)) 
[16:10:36.884]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:36.884]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:36.884]                   future::plan(list(function (..., workers = availableCores(), 
[16:10:36.884]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:10:36.884]                     envir = parent.frame()) 
[16:10:36.884]                   {
[16:10:36.884]                     if (is.function(workers)) 
[16:10:36.884]                       workers <- workers()
[16:10:36.884]                     workers <- structure(as.integer(workers), 
[16:10:36.884]                       class = class(workers))
[16:10:36.884]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:10:36.884]                       workers >= 1)
[16:10:36.884]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:10:36.884]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:10:36.884]                     }
[16:10:36.884]                     future <- MultisessionFuture(..., workers = workers, 
[16:10:36.884]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:10:36.884]                       envir = envir)
[16:10:36.884]                     if (!future$lazy) 
[16:10:36.884]                       future <- run(future)
[16:10:36.884]                     invisible(future)
[16:10:36.884]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:36.884]                 }
[16:10:36.884]             }
[16:10:36.884]         }
[16:10:36.884]     })
[16:10:36.884]     if (TRUE) {
[16:10:36.884]         base::sink(type = "output", split = FALSE)
[16:10:36.884]         if (TRUE) {
[16:10:36.884]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:36.884]         }
[16:10:36.884]         else {
[16:10:36.884]             ...future.result["stdout"] <- base::list(NULL)
[16:10:36.884]         }
[16:10:36.884]         base::close(...future.stdout)
[16:10:36.884]         ...future.stdout <- NULL
[16:10:36.884]     }
[16:10:36.884]     ...future.result$conditions <- ...future.conditions
[16:10:36.884]     ...future.result$finished <- base::Sys.time()
[16:10:36.884]     ...future.result
[16:10:36.884] }
[16:10:36.887] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[16:10:36.887] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[16:10:36.887] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[16:10:36.887] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[16:10:36.888] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[16:10:36.888] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[16:10:36.888] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[16:10:36.888] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[16:10:36.889] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[16:10:36.889] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[16:10:36.889] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[16:10:36.889] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[16:10:36.890] MultisessionFuture started
[16:10:36.890] - Launch lazy future ... done
[16:10:36.890] run() for ‘MultisessionFuture’ ... done
[16:10:36.890] Created future:
[16:10:36.891] MultisessionFuture:
[16:10:36.891] Label: ‘future_replicate-1’
[16:10:36.891] Expression:
[16:10:36.891] {
[16:10:36.891]     do.call(function(...) {
[16:10:36.891]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.891]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:36.891]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.891]             on.exit(options(oopts), add = TRUE)
[16:10:36.891]         }
[16:10:36.891]         {
[16:10:36.891]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:36.891]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.891]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.891]                   envir = globalenv(), inherits = FALSE)
[16:10:36.891]                 ...future.FUN(...future.X_jj, ...)
[16:10:36.891]             })
[16:10:36.891]         }
[16:10:36.891]     }, args = future.call.arguments)
[16:10:36.891] }
[16:10:36.891] Lazy evaluation: FALSE
[16:10:36.891] Asynchronous evaluation: TRUE
[16:10:36.891] Local evaluation: TRUE
[16:10:36.891] Environment: R_GlobalEnv
[16:10:36.891] Capture standard output: TRUE
[16:10:36.891] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:36.891] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:36.891] Packages: <none>
[16:10:36.891] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:36.891] Resolved: FALSE
[16:10:36.891] Value: <not collected>
[16:10:36.891] Conditions captured: <none>
[16:10:36.891] Early signaling: FALSE
[16:10:36.891] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:36.891] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:36.902] Chunk #1 of 2 ... DONE
[16:10:36.902] Chunk #2 of 2 ...
[16:10:36.902]  - Finding globals in 'X' for chunk #2 ...
[16:10:36.903] getGlobalsAndPackages() ...
[16:10:36.903] Searching for globals...
[16:10:36.903] 
[16:10:36.903] Searching for globals ... DONE
[16:10:36.903] - globals: [0] <none>
[16:10:36.903] getGlobalsAndPackages() ... DONE
[16:10:36.903]    + additional globals found: [n=0] 
[16:10:36.903]    + additional namespaces needed: [n=0] 
[16:10:36.903]  - Finding globals in 'X' for chunk #2 ... DONE
[16:10:36.904]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[16:10:36.904]  - seeds: [3] <seeds>
[16:10:36.904] getGlobalsAndPackages() ...
[16:10:36.904] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:36.904] Resolving globals: FALSE
[16:10:36.904] Tweak future expression to call with '...' arguments ...
[16:10:36.904] {
[16:10:36.904]     do.call(function(...) {
[16:10:36.904]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.904]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:36.904]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.904]             on.exit(options(oopts), add = TRUE)
[16:10:36.904]         }
[16:10:36.904]         {
[16:10:36.904]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:36.904]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.904]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.904]                   envir = globalenv(), inherits = FALSE)
[16:10:36.904]                 ...future.FUN(...future.X_jj, ...)
[16:10:36.904]             })
[16:10:36.904]         }
[16:10:36.904]     }, args = future.call.arguments)
[16:10:36.904] }
[16:10:36.905] Tweak future expression to call with '...' arguments ... DONE
[16:10:36.905] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:36.905] 
[16:10:36.905] getGlobalsAndPackages() ... DONE
[16:10:36.905] run() for ‘Future’ ...
[16:10:36.906] - state: ‘created’
[16:10:36.906] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:10:36.920] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:36.921] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:10:36.921]   - Field: ‘node’
[16:10:36.921]   - Field: ‘label’
[16:10:36.921]   - Field: ‘local’
[16:10:36.921]   - Field: ‘owner’
[16:10:36.921]   - Field: ‘envir’
[16:10:36.921]   - Field: ‘workers’
[16:10:36.921]   - Field: ‘packages’
[16:10:36.921]   - Field: ‘gc’
[16:10:36.922]   - Field: ‘conditions’
[16:10:36.922]   - Field: ‘persistent’
[16:10:36.922]   - Field: ‘expr’
[16:10:36.922]   - Field: ‘uuid’
[16:10:36.922]   - Field: ‘seed’
[16:10:36.922]   - Field: ‘version’
[16:10:36.922]   - Field: ‘result’
[16:10:36.922]   - Field: ‘asynchronous’
[16:10:36.922]   - Field: ‘calls’
[16:10:36.922]   - Field: ‘globals’
[16:10:36.922]   - Field: ‘stdout’
[16:10:36.922]   - Field: ‘earlySignal’
[16:10:36.923]   - Field: ‘lazy’
[16:10:36.923]   - Field: ‘state’
[16:10:36.923] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:10:36.923] - Launch lazy future ...
[16:10:36.923] Packages needed by the future expression (n = 0): <none>
[16:10:36.923] Packages needed by future strategies (n = 0): <none>
[16:10:36.924] {
[16:10:36.924]     {
[16:10:36.924]         {
[16:10:36.924]             ...future.startTime <- base::Sys.time()
[16:10:36.924]             {
[16:10:36.924]                 {
[16:10:36.924]                   {
[16:10:36.924]                     {
[16:10:36.924]                       base::local({
[16:10:36.924]                         has_future <- base::requireNamespace("future", 
[16:10:36.924]                           quietly = TRUE)
[16:10:36.924]                         if (has_future) {
[16:10:36.924]                           ns <- base::getNamespace("future")
[16:10:36.924]                           version <- ns[[".package"]][["version"]]
[16:10:36.924]                           if (is.null(version)) 
[16:10:36.924]                             version <- utils::packageVersion("future")
[16:10:36.924]                         }
[16:10:36.924]                         else {
[16:10:36.924]                           version <- NULL
[16:10:36.924]                         }
[16:10:36.924]                         if (!has_future || version < "1.8.0") {
[16:10:36.924]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:36.924]                             "", base::R.version$version.string), 
[16:10:36.924]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:36.924]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:36.924]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:36.924]                               "release", "version")], collapse = " "), 
[16:10:36.924]                             hostname = base::Sys.info()[["nodename"]])
[16:10:36.924]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:36.924]                             info)
[16:10:36.924]                           info <- base::paste(info, collapse = "; ")
[16:10:36.924]                           if (!has_future) {
[16:10:36.924]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:36.924]                               info)
[16:10:36.924]                           }
[16:10:36.924]                           else {
[16:10:36.924]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:36.924]                               info, version)
[16:10:36.924]                           }
[16:10:36.924]                           base::stop(msg)
[16:10:36.924]                         }
[16:10:36.924]                       })
[16:10:36.924]                     }
[16:10:36.924]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:36.924]                     base::options(mc.cores = 1L)
[16:10:36.924]                   }
[16:10:36.924]                   options(future.plan = NULL)
[16:10:36.924]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:36.924]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:36.924]                 }
[16:10:36.924]                 ...future.workdir <- getwd()
[16:10:36.924]             }
[16:10:36.924]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:36.924]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:36.924]         }
[16:10:36.924]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:36.924]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[16:10:36.924]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:36.924]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:36.924]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:36.924]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:36.924]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:36.924]             base::names(...future.oldOptions))
[16:10:36.924]     }
[16:10:36.924]     if (FALSE) {
[16:10:36.924]     }
[16:10:36.924]     else {
[16:10:36.924]         if (TRUE) {
[16:10:36.924]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:36.924]                 open = "w")
[16:10:36.924]         }
[16:10:36.924]         else {
[16:10:36.924]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:36.924]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:36.924]         }
[16:10:36.924]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:36.924]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:36.924]             base::sink(type = "output", split = FALSE)
[16:10:36.924]             base::close(...future.stdout)
[16:10:36.924]         }, add = TRUE)
[16:10:36.924]     }
[16:10:36.924]     ...future.frame <- base::sys.nframe()
[16:10:36.924]     ...future.conditions <- base::list()
[16:10:36.924]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:36.924]     if (FALSE) {
[16:10:36.924]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:36.924]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:36.924]     }
[16:10:36.924]     ...future.result <- base::tryCatch({
[16:10:36.924]         base::withCallingHandlers({
[16:10:36.924]             ...future.value <- base::withVisible(base::local({
[16:10:36.924]                 ...future.makeSendCondition <- local({
[16:10:36.924]                   sendCondition <- NULL
[16:10:36.924]                   function(frame = 1L) {
[16:10:36.924]                     if (is.function(sendCondition)) 
[16:10:36.924]                       return(sendCondition)
[16:10:36.924]                     ns <- getNamespace("parallel")
[16:10:36.924]                     if (exists("sendData", mode = "function", 
[16:10:36.924]                       envir = ns)) {
[16:10:36.924]                       parallel_sendData <- get("sendData", mode = "function", 
[16:10:36.924]                         envir = ns)
[16:10:36.924]                       envir <- sys.frame(frame)
[16:10:36.924]                       master <- NULL
[16:10:36.924]                       while (!identical(envir, .GlobalEnv) && 
[16:10:36.924]                         !identical(envir, emptyenv())) {
[16:10:36.924]                         if (exists("master", mode = "list", envir = envir, 
[16:10:36.924]                           inherits = FALSE)) {
[16:10:36.924]                           master <- get("master", mode = "list", 
[16:10:36.924]                             envir = envir, inherits = FALSE)
[16:10:36.924]                           if (inherits(master, c("SOCKnode", 
[16:10:36.924]                             "SOCK0node"))) {
[16:10:36.924]                             sendCondition <<- function(cond) {
[16:10:36.924]                               data <- list(type = "VALUE", value = cond, 
[16:10:36.924]                                 success = TRUE)
[16:10:36.924]                               parallel_sendData(master, data)
[16:10:36.924]                             }
[16:10:36.924]                             return(sendCondition)
[16:10:36.924]                           }
[16:10:36.924]                         }
[16:10:36.924]                         frame <- frame + 1L
[16:10:36.924]                         envir <- sys.frame(frame)
[16:10:36.924]                       }
[16:10:36.924]                     }
[16:10:36.924]                     sendCondition <<- function(cond) NULL
[16:10:36.924]                   }
[16:10:36.924]                 })
[16:10:36.924]                 withCallingHandlers({
[16:10:36.924]                   {
[16:10:36.924]                     do.call(function(...) {
[16:10:36.924]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.924]                       if (!identical(...future.globals.maxSize.org, 
[16:10:36.924]                         ...future.globals.maxSize)) {
[16:10:36.924]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.924]                         on.exit(options(oopts), add = TRUE)
[16:10:36.924]                       }
[16:10:36.924]                       {
[16:10:36.924]                         lapply(seq_along(...future.elements_ii), 
[16:10:36.924]                           FUN = function(jj) {
[16:10:36.924]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.924]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.924]                               envir = globalenv(), inherits = FALSE)
[16:10:36.924]                             ...future.FUN(...future.X_jj, ...)
[16:10:36.924]                           })
[16:10:36.924]                       }
[16:10:36.924]                     }, args = future.call.arguments)
[16:10:36.924]                   }
[16:10:36.924]                 }, immediateCondition = function(cond) {
[16:10:36.924]                   sendCondition <- ...future.makeSendCondition()
[16:10:36.924]                   sendCondition(cond)
[16:10:36.924]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.924]                   {
[16:10:36.924]                     inherits <- base::inherits
[16:10:36.924]                     invokeRestart <- base::invokeRestart
[16:10:36.924]                     is.null <- base::is.null
[16:10:36.924]                     muffled <- FALSE
[16:10:36.924]                     if (inherits(cond, "message")) {
[16:10:36.924]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:36.924]                       if (muffled) 
[16:10:36.924]                         invokeRestart("muffleMessage")
[16:10:36.924]                     }
[16:10:36.924]                     else if (inherits(cond, "warning")) {
[16:10:36.924]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:36.924]                       if (muffled) 
[16:10:36.924]                         invokeRestart("muffleWarning")
[16:10:36.924]                     }
[16:10:36.924]                     else if (inherits(cond, "condition")) {
[16:10:36.924]                       if (!is.null(pattern)) {
[16:10:36.924]                         computeRestarts <- base::computeRestarts
[16:10:36.924]                         grepl <- base::grepl
[16:10:36.924]                         restarts <- computeRestarts(cond)
[16:10:36.924]                         for (restart in restarts) {
[16:10:36.924]                           name <- restart$name
[16:10:36.924]                           if (is.null(name)) 
[16:10:36.924]                             next
[16:10:36.924]                           if (!grepl(pattern, name)) 
[16:10:36.924]                             next
[16:10:36.924]                           invokeRestart(restart)
[16:10:36.924]                           muffled <- TRUE
[16:10:36.924]                           break
[16:10:36.924]                         }
[16:10:36.924]                       }
[16:10:36.924]                     }
[16:10:36.924]                     invisible(muffled)
[16:10:36.924]                   }
[16:10:36.924]                   muffleCondition(cond)
[16:10:36.924]                 })
[16:10:36.924]             }))
[16:10:36.924]             future::FutureResult(value = ...future.value$value, 
[16:10:36.924]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:36.924]                   ...future.rng), globalenv = if (FALSE) 
[16:10:36.924]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:36.924]                     ...future.globalenv.names))
[16:10:36.924]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:36.924]         }, condition = base::local({
[16:10:36.924]             c <- base::c
[16:10:36.924]             inherits <- base::inherits
[16:10:36.924]             invokeRestart <- base::invokeRestart
[16:10:36.924]             length <- base::length
[16:10:36.924]             list <- base::list
[16:10:36.924]             seq.int <- base::seq.int
[16:10:36.924]             signalCondition <- base::signalCondition
[16:10:36.924]             sys.calls <- base::sys.calls
[16:10:36.924]             `[[` <- base::`[[`
[16:10:36.924]             `+` <- base::`+`
[16:10:36.924]             `<<-` <- base::`<<-`
[16:10:36.924]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:36.924]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:36.924]                   3L)]
[16:10:36.924]             }
[16:10:36.924]             function(cond) {
[16:10:36.924]                 is_error <- inherits(cond, "error")
[16:10:36.924]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:36.924]                   NULL)
[16:10:36.924]                 if (is_error) {
[16:10:36.924]                   sessionInformation <- function() {
[16:10:36.924]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:36.924]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:36.924]                       search = base::search(), system = base::Sys.info())
[16:10:36.924]                   }
[16:10:36.924]                   ...future.conditions[[length(...future.conditions) + 
[16:10:36.924]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:36.924]                     cond$call), session = sessionInformation(), 
[16:10:36.924]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:36.924]                   signalCondition(cond)
[16:10:36.924]                 }
[16:10:36.924]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:36.924]                 "immediateCondition"))) {
[16:10:36.924]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:36.924]                   ...future.conditions[[length(...future.conditions) + 
[16:10:36.924]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:36.924]                   if (TRUE && !signal) {
[16:10:36.924]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.924]                     {
[16:10:36.924]                       inherits <- base::inherits
[16:10:36.924]                       invokeRestart <- base::invokeRestart
[16:10:36.924]                       is.null <- base::is.null
[16:10:36.924]                       muffled <- FALSE
[16:10:36.924]                       if (inherits(cond, "message")) {
[16:10:36.924]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:36.924]                         if (muffled) 
[16:10:36.924]                           invokeRestart("muffleMessage")
[16:10:36.924]                       }
[16:10:36.924]                       else if (inherits(cond, "warning")) {
[16:10:36.924]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:36.924]                         if (muffled) 
[16:10:36.924]                           invokeRestart("muffleWarning")
[16:10:36.924]                       }
[16:10:36.924]                       else if (inherits(cond, "condition")) {
[16:10:36.924]                         if (!is.null(pattern)) {
[16:10:36.924]                           computeRestarts <- base::computeRestarts
[16:10:36.924]                           grepl <- base::grepl
[16:10:36.924]                           restarts <- computeRestarts(cond)
[16:10:36.924]                           for (restart in restarts) {
[16:10:36.924]                             name <- restart$name
[16:10:36.924]                             if (is.null(name)) 
[16:10:36.924]                               next
[16:10:36.924]                             if (!grepl(pattern, name)) 
[16:10:36.924]                               next
[16:10:36.924]                             invokeRestart(restart)
[16:10:36.924]                             muffled <- TRUE
[16:10:36.924]                             break
[16:10:36.924]                           }
[16:10:36.924]                         }
[16:10:36.924]                       }
[16:10:36.924]                       invisible(muffled)
[16:10:36.924]                     }
[16:10:36.924]                     muffleCondition(cond, pattern = "^muffle")
[16:10:36.924]                   }
[16:10:36.924]                 }
[16:10:36.924]                 else {
[16:10:36.924]                   if (TRUE) {
[16:10:36.924]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:36.924]                     {
[16:10:36.924]                       inherits <- base::inherits
[16:10:36.924]                       invokeRestart <- base::invokeRestart
[16:10:36.924]                       is.null <- base::is.null
[16:10:36.924]                       muffled <- FALSE
[16:10:36.924]                       if (inherits(cond, "message")) {
[16:10:36.924]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:36.924]                         if (muffled) 
[16:10:36.924]                           invokeRestart("muffleMessage")
[16:10:36.924]                       }
[16:10:36.924]                       else if (inherits(cond, "warning")) {
[16:10:36.924]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:36.924]                         if (muffled) 
[16:10:36.924]                           invokeRestart("muffleWarning")
[16:10:36.924]                       }
[16:10:36.924]                       else if (inherits(cond, "condition")) {
[16:10:36.924]                         if (!is.null(pattern)) {
[16:10:36.924]                           computeRestarts <- base::computeRestarts
[16:10:36.924]                           grepl <- base::grepl
[16:10:36.924]                           restarts <- computeRestarts(cond)
[16:10:36.924]                           for (restart in restarts) {
[16:10:36.924]                             name <- restart$name
[16:10:36.924]                             if (is.null(name)) 
[16:10:36.924]                               next
[16:10:36.924]                             if (!grepl(pattern, name)) 
[16:10:36.924]                               next
[16:10:36.924]                             invokeRestart(restart)
[16:10:36.924]                             muffled <- TRUE
[16:10:36.924]                             break
[16:10:36.924]                           }
[16:10:36.924]                         }
[16:10:36.924]                       }
[16:10:36.924]                       invisible(muffled)
[16:10:36.924]                     }
[16:10:36.924]                     muffleCondition(cond, pattern = "^muffle")
[16:10:36.924]                   }
[16:10:36.924]                 }
[16:10:36.924]             }
[16:10:36.924]         }))
[16:10:36.924]     }, error = function(ex) {
[16:10:36.924]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:36.924]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:36.924]                 ...future.rng), started = ...future.startTime, 
[16:10:36.924]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:36.924]             version = "1.8"), class = "FutureResult")
[16:10:36.924]     }, finally = {
[16:10:36.924]         if (!identical(...future.workdir, getwd())) 
[16:10:36.924]             setwd(...future.workdir)
[16:10:36.924]         {
[16:10:36.924]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:36.924]                 ...future.oldOptions$nwarnings <- NULL
[16:10:36.924]             }
[16:10:36.924]             base::options(...future.oldOptions)
[16:10:36.924]             if (.Platform$OS.type == "windows") {
[16:10:36.924]                 old_names <- names(...future.oldEnvVars)
[16:10:36.924]                 envs <- base::Sys.getenv()
[16:10:36.924]                 names <- names(envs)
[16:10:36.924]                 common <- intersect(names, old_names)
[16:10:36.924]                 added <- setdiff(names, old_names)
[16:10:36.924]                 removed <- setdiff(old_names, names)
[16:10:36.924]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:36.924]                   envs[common]]
[16:10:36.924]                 NAMES <- toupper(changed)
[16:10:36.924]                 args <- list()
[16:10:36.924]                 for (kk in seq_along(NAMES)) {
[16:10:36.924]                   name <- changed[[kk]]
[16:10:36.924]                   NAME <- NAMES[[kk]]
[16:10:36.924]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.924]                     next
[16:10:36.924]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:36.924]                 }
[16:10:36.924]                 NAMES <- toupper(added)
[16:10:36.924]                 for (kk in seq_along(NAMES)) {
[16:10:36.924]                   name <- added[[kk]]
[16:10:36.924]                   NAME <- NAMES[[kk]]
[16:10:36.924]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.924]                     next
[16:10:36.924]                   args[[name]] <- ""
[16:10:36.924]                 }
[16:10:36.924]                 NAMES <- toupper(removed)
[16:10:36.924]                 for (kk in seq_along(NAMES)) {
[16:10:36.924]                   name <- removed[[kk]]
[16:10:36.924]                   NAME <- NAMES[[kk]]
[16:10:36.924]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:36.924]                     next
[16:10:36.924]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:36.924]                 }
[16:10:36.924]                 if (length(args) > 0) 
[16:10:36.924]                   base::do.call(base::Sys.setenv, args = args)
[16:10:36.924]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:36.924]             }
[16:10:36.924]             else {
[16:10:36.924]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:36.924]             }
[16:10:36.924]             {
[16:10:36.924]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:36.924]                   0L) {
[16:10:36.924]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:36.924]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:36.924]                   base::options(opts)
[16:10:36.924]                 }
[16:10:36.924]                 {
[16:10:36.924]                   {
[16:10:36.924]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:36.924]                     NULL
[16:10:36.924]                   }
[16:10:36.924]                   options(future.plan = NULL)
[16:10:36.924]                   if (is.na(NA_character_)) 
[16:10:36.924]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:36.924]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:36.924]                   future::plan(list(function (..., workers = availableCores(), 
[16:10:36.924]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:10:36.924]                     envir = parent.frame()) 
[16:10:36.924]                   {
[16:10:36.924]                     if (is.function(workers)) 
[16:10:36.924]                       workers <- workers()
[16:10:36.924]                     workers <- structure(as.integer(workers), 
[16:10:36.924]                       class = class(workers))
[16:10:36.924]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:10:36.924]                       workers >= 1)
[16:10:36.924]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:10:36.924]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:10:36.924]                     }
[16:10:36.924]                     future <- MultisessionFuture(..., workers = workers, 
[16:10:36.924]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:10:36.924]                       envir = envir)
[16:10:36.924]                     if (!future$lazy) 
[16:10:36.924]                       future <- run(future)
[16:10:36.924]                     invisible(future)
[16:10:36.924]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:36.924]                 }
[16:10:36.924]             }
[16:10:36.924]         }
[16:10:36.924]     })
[16:10:36.924]     if (TRUE) {
[16:10:36.924]         base::sink(type = "output", split = FALSE)
[16:10:36.924]         if (TRUE) {
[16:10:36.924]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:36.924]         }
[16:10:36.924]         else {
[16:10:36.924]             ...future.result["stdout"] <- base::list(NULL)
[16:10:36.924]         }
[16:10:36.924]         base::close(...future.stdout)
[16:10:36.924]         ...future.stdout <- NULL
[16:10:36.924]     }
[16:10:36.924]     ...future.result$conditions <- ...future.conditions
[16:10:36.924]     ...future.result$finished <- base::Sys.time()
[16:10:36.924]     ...future.result
[16:10:36.924] }
[16:10:36.927] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[16:10:36.927] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[16:10:36.927] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[16:10:36.927] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[16:10:36.928] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[16:10:36.928] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[16:10:36.928] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[16:10:36.928] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[16:10:36.929] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[16:10:36.929] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[16:10:36.929] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[16:10:36.929] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[16:10:36.930] MultisessionFuture started
[16:10:36.930] - Launch lazy future ... done
[16:10:36.930] run() for ‘MultisessionFuture’ ... done
[16:10:36.930] Created future:
[16:10:36.930] MultisessionFuture:
[16:10:36.930] Label: ‘future_replicate-2’
[16:10:36.930] Expression:
[16:10:36.930] {
[16:10:36.930]     do.call(function(...) {
[16:10:36.930]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:36.930]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:36.930]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:36.930]             on.exit(options(oopts), add = TRUE)
[16:10:36.930]         }
[16:10:36.930]         {
[16:10:36.930]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:36.930]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:36.930]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:36.930]                   envir = globalenv(), inherits = FALSE)
[16:10:36.930]                 ...future.FUN(...future.X_jj, ...)
[16:10:36.930]             })
[16:10:36.930]         }
[16:10:36.930]     }, args = future.call.arguments)
[16:10:36.930] }
[16:10:36.930] Lazy evaluation: FALSE
[16:10:36.930] Asynchronous evaluation: TRUE
[16:10:36.930] Local evaluation: TRUE
[16:10:36.930] Environment: R_GlobalEnv
[16:10:36.930] Capture standard output: TRUE
[16:10:36.930] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:36.930] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:10:36.930] Packages: <none>
[16:10:36.930] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:36.930] Resolved: FALSE
[16:10:36.930] Value: <not collected>
[16:10:36.930] Conditions captured: <none>
[16:10:36.930] Early signaling: FALSE
[16:10:36.930] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:36.930] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:36.942] Chunk #2 of 2 ... DONE
[16:10:36.942] Launching 2 futures (chunks) ... DONE
[16:10:36.942] Resolving 2 futures (chunks) ...
[16:10:36.942] resolve() on list ...
[16:10:36.942]  recursive: 0
[16:10:36.942]  length: 2
[16:10:36.942] 
[16:10:36.943] receiveMessageFromWorker() for ClusterFuture ...
[16:10:36.943] - Validating connection of MultisessionFuture
[16:10:36.943] - received message: FutureResult
[16:10:36.943] - Received FutureResult
[16:10:36.943] - Erased future from FutureRegistry
[16:10:36.943] result() for ClusterFuture ...
[16:10:36.943] - result already collected: FutureResult
[16:10:36.944] result() for ClusterFuture ... done
[16:10:36.944] receiveMessageFromWorker() for ClusterFuture ... done
[16:10:36.944] Future #1
[16:10:36.944] result() for ClusterFuture ...
[16:10:36.944] - result already collected: FutureResult
[16:10:36.944] result() for ClusterFuture ... done
[16:10:36.944] result() for ClusterFuture ...
[16:10:36.944] - result already collected: FutureResult
[16:10:36.944] result() for ClusterFuture ... done
[16:10:36.944] signalConditionsASAP(MultisessionFuture, pos=1) ...
[16:10:36.945] - nx: 2
[16:10:36.945] - relay: TRUE
[16:10:36.945] - stdout: TRUE
[16:10:36.945] - signal: TRUE
[16:10:36.945] - resignal: FALSE
[16:10:36.945] - force: TRUE
[16:10:36.945] - relayed: [n=2] FALSE, FALSE
[16:10:36.945] - queued futures: [n=2] FALSE, FALSE
[16:10:36.945]  - until=1
[16:10:36.945]  - relaying element #1
[16:10:36.945] result() for ClusterFuture ...
[16:10:36.945] - result already collected: FutureResult
[16:10:36.946] result() for ClusterFuture ... done
[16:10:36.946] result() for ClusterFuture ...
[16:10:36.946] - result already collected: FutureResult
[16:10:36.946] result() for ClusterFuture ... done
[16:10:36.946] result() for ClusterFuture ...
[16:10:36.946] - result already collected: FutureResult
[16:10:36.946] result() for ClusterFuture ... done
[16:10:36.946] result() for ClusterFuture ...
[16:10:36.946] - result already collected: FutureResult
[16:10:36.946] result() for ClusterFuture ... done
[16:10:36.946] - relayed: [n=2] TRUE, FALSE
[16:10:36.947] - queued futures: [n=2] TRUE, FALSE
[16:10:36.947] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[16:10:36.947]  length: 1 (resolved future 1)
[16:10:36.976] receiveMessageFromWorker() for ClusterFuture ...
[16:10:36.977] - Validating connection of MultisessionFuture
[16:10:36.977] - received message: FutureResult
[16:10:36.977] - Received FutureResult
[16:10:36.977] - Erased future from FutureRegistry
[16:10:36.977] result() for ClusterFuture ...
[16:10:36.977] - result already collected: FutureResult
[16:10:36.977] result() for ClusterFuture ... done
[16:10:36.977] receiveMessageFromWorker() for ClusterFuture ... done
[16:10:36.978] Future #2
[16:10:36.978] result() for ClusterFuture ...
[16:10:36.978] - result already collected: FutureResult
[16:10:36.978] result() for ClusterFuture ... done
[16:10:36.978] result() for ClusterFuture ...
[16:10:36.978] - result already collected: FutureResult
[16:10:36.978] result() for ClusterFuture ... done
[16:10:36.978] signalConditionsASAP(MultisessionFuture, pos=2) ...
[16:10:36.978] - nx: 2
[16:10:36.978] - relay: TRUE
[16:10:36.978] - stdout: TRUE
[16:10:36.978] - signal: TRUE
[16:10:36.979] - resignal: FALSE
[16:10:36.979] - force: TRUE
[16:10:36.979] - relayed: [n=2] TRUE, FALSE
[16:10:36.979] - queued futures: [n=2] TRUE, FALSE
[16:10:36.979]  - until=2
[16:10:36.979]  - relaying element #2
[16:10:36.979] result() for ClusterFuture ...
[16:10:36.979] - result already collected: FutureResult
[16:10:36.979] result() for ClusterFuture ... done
[16:10:36.979] result() for ClusterFuture ...
[16:10:36.979] - result already collected: FutureResult
[16:10:36.980] result() for ClusterFuture ... done
[16:10:36.980] result() for ClusterFuture ...
[16:10:36.980] - result already collected: FutureResult
[16:10:36.980] result() for ClusterFuture ... done
[16:10:36.980] result() for ClusterFuture ...
[16:10:36.980] - result already collected: FutureResult
[16:10:36.980] result() for ClusterFuture ... done
[16:10:36.982] - relayed: [n=2] TRUE, TRUE
[16:10:36.982] - queued futures: [n=2] TRUE, TRUE
[16:10:36.982] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[16:10:36.983]  length: 0 (resolved future 2)
[16:10:36.983] Relaying remaining futures
[16:10:36.983] signalConditionsASAP(NULL, pos=0) ...
[16:10:36.983] - nx: 2
[16:10:36.983] - relay: TRUE
[16:10:36.983] - stdout: TRUE
[16:10:36.983] - signal: TRUE
[16:10:36.983] - resignal: FALSE
[16:10:36.983] - force: TRUE
[16:10:36.983] - relayed: [n=2] TRUE, TRUE
[16:10:36.983] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:10:36.983] - relayed: [n=2] TRUE, TRUE
[16:10:36.984] - queued futures: [n=2] TRUE, TRUE
[16:10:36.984] signalConditionsASAP(NULL, pos=0) ... done
[16:10:36.984] resolve() on list ... DONE
[16:10:36.984] result() for ClusterFuture ...
[16:10:36.984] - result already collected: FutureResult
[16:10:36.984] result() for ClusterFuture ... done
[16:10:36.984] result() for ClusterFuture ...
[16:10:36.984] - result already collected: FutureResult
[16:10:36.984] result() for ClusterFuture ... done
[16:10:36.984] result() for ClusterFuture ...
[16:10:36.985] - result already collected: FutureResult
[16:10:36.985] result() for ClusterFuture ... done
[16:10:36.985] result() for ClusterFuture ...
[16:10:36.985] - result already collected: FutureResult
[16:10:36.985] result() for ClusterFuture ... done
[16:10:36.985]  - Number of value chunks collected: 2
[16:10:36.985] Resolving 2 futures (chunks) ... DONE
[16:10:36.985] Reducing values from 2 chunks ...
[16:10:36.985]  - Number of values collected after concatenation: 5
[16:10:36.985]  - Number of values expected: 5
[16:10:36.985] Reducing values from 2 chunks ... DONE
[16:10:36.985] future_lapply() ... DONE
- example(replicate) ...
[16:10:36.986] future_lapply() ...
[16:10:36.986] Generating random seeds ...
[16:10:36.986] Generating random seed streams for 5 elements ...
[16:10:36.987] Generating random seed streams for 5 elements ... DONE
[16:10:36.987] Generating random seeds ... DONE
[16:10:36.987] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:10:36.991] Number of chunks: 2
[16:10:36.991] getGlobalsAndPackagesXApply() ...
[16:10:36.991]  - future.globals: TRUE
[16:10:36.991] getGlobalsAndPackages() ...
[16:10:36.991] Searching for globals...
[16:10:36.993] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[16:10:36.993] Searching for globals ... DONE
[16:10:36.993] Resolving globals: FALSE
[16:10:36.993] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[16:10:36.994] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[16:10:36.994] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[16:10:36.994] 
[16:10:36.994] getGlobalsAndPackages() ... DONE
[16:10:36.994]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[16:10:36.994]  - needed namespaces: [n=0] 
[16:10:36.994] Finding globals ... DONE
[16:10:36.994]  - use_args: TRUE
[16:10:36.995]  - Getting '...' globals ...
[16:10:36.995] resolve() on list ...
[16:10:36.995]  recursive: 0
[16:10:36.995]  length: 1
[16:10:36.995]  elements: ‘...’
[16:10:36.995]  length: 0 (resolved future 1)
[16:10:36.995] resolve() on list ... DONE
[16:10:36.995]    - '...' content: [n=0] 
[16:10:36.996] List of 1
[16:10:36.996]  $ ...: list()
[16:10:36.996]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:36.996]  - attr(*, "where")=List of 1
[16:10:36.996]   ..$ ...:<environment: 0x55cf8f0a5a58> 
[16:10:36.996]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:36.996]  - attr(*, "resolved")= logi TRUE
[16:10:36.996]  - attr(*, "total_size")= num NA
[16:10:36.998]  - Getting '...' globals ... DONE
[16:10:36.998] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[16:10:36.998] List of 4
[16:10:36.998]  $ ...future.FUN:function (...)  
[16:10:36.998]  $ foo          :function (x = 1, y = 2)  
[16:10:36.998]  $ x            : num 3
[16:10:36.998]  $ ...          : list()
[16:10:36.998]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:10:36.998]  - attr(*, "where")=List of 4
[16:10:36.998]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:10:36.998]   ..$ foo          :<environment: R_EmptyEnv> 
[16:10:36.998]   ..$ x            :<environment: R_EmptyEnv> 
[16:10:36.998]   ..$ ...          :<environment: 0x55cf8f0a5a58> 
[16:10:36.998]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:10:36.998]  - attr(*, "resolved")= logi FALSE
[16:10:36.998]  - attr(*, "total_size")= num 2200
[16:10:37.002] Packages to be attached in all futures: [n=0] 
[16:10:37.002] getGlobalsAndPackagesXApply() ... DONE
[16:10:37.002] Number of futures (= number of chunks): 2
[16:10:37.002] Launching 2 futures (chunks) ...
[16:10:37.002] Chunk #1 of 2 ...
[16:10:37.002]  - Finding globals in 'X' for chunk #1 ...
[16:10:37.003] getGlobalsAndPackages() ...
[16:10:37.003] Searching for globals...
[16:10:37.003] 
[16:10:37.003] Searching for globals ... DONE
[16:10:37.003] - globals: [0] <none>
[16:10:37.003] getGlobalsAndPackages() ... DONE
[16:10:37.003]    + additional globals found: [n=0] 
[16:10:37.003]    + additional namespaces needed: [n=0] 
[16:10:37.003]  - Finding globals in 'X' for chunk #1 ... DONE
[16:10:37.004]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:10:37.004]  - seeds: [2] <seeds>
[16:10:37.004] getGlobalsAndPackages() ...
[16:10:37.004] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:37.004] Resolving globals: FALSE
[16:10:37.004] Tweak future expression to call with '...' arguments ...
[16:10:37.004] {
[16:10:37.004]     do.call(function(...) {
[16:10:37.004]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:37.004]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:37.004]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:37.004]             on.exit(options(oopts), add = TRUE)
[16:10:37.004]         }
[16:10:37.004]         {
[16:10:37.004]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:37.004]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:37.004]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:37.004]                   envir = globalenv(), inherits = FALSE)
[16:10:37.004]                 ...future.FUN(...future.X_jj, ...)
[16:10:37.004]             })
[16:10:37.004]         }
[16:10:37.004]     }, args = future.call.arguments)
[16:10:37.004] }
[16:10:37.005] Tweak future expression to call with '...' arguments ... DONE
[16:10:37.005] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:37.005] 
[16:10:37.005] getGlobalsAndPackages() ... DONE
[16:10:37.006] run() for ‘Future’ ...
[16:10:37.006] - state: ‘created’
[16:10:37.006] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:10:37.022] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:37.022] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:10:37.022]   - Field: ‘node’
[16:10:37.022]   - Field: ‘label’
[16:10:37.023]   - Field: ‘local’
[16:10:37.023]   - Field: ‘owner’
[16:10:37.023]   - Field: ‘envir’
[16:10:37.023]   - Field: ‘workers’
[16:10:37.023]   - Field: ‘packages’
[16:10:37.023]   - Field: ‘gc’
[16:10:37.023]   - Field: ‘conditions’
[16:10:37.023]   - Field: ‘persistent’
[16:10:37.023]   - Field: ‘expr’
[16:10:37.023]   - Field: ‘uuid’
[16:10:37.023]   - Field: ‘seed’
[16:10:37.024]   - Field: ‘version’
[16:10:37.024]   - Field: ‘result’
[16:10:37.024]   - Field: ‘asynchronous’
[16:10:37.024]   - Field: ‘calls’
[16:10:37.024]   - Field: ‘globals’
[16:10:37.024]   - Field: ‘stdout’
[16:10:37.024]   - Field: ‘earlySignal’
[16:10:37.024]   - Field: ‘lazy’
[16:10:37.024]   - Field: ‘state’
[16:10:37.024] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:10:37.025] - Launch lazy future ...
[16:10:37.025] Packages needed by the future expression (n = 0): <none>
[16:10:37.025] Packages needed by future strategies (n = 0): <none>
[16:10:37.025] {
[16:10:37.025]     {
[16:10:37.025]         {
[16:10:37.025]             ...future.startTime <- base::Sys.time()
[16:10:37.025]             {
[16:10:37.025]                 {
[16:10:37.025]                   {
[16:10:37.025]                     {
[16:10:37.025]                       base::local({
[16:10:37.025]                         has_future <- base::requireNamespace("future", 
[16:10:37.025]                           quietly = TRUE)
[16:10:37.025]                         if (has_future) {
[16:10:37.025]                           ns <- base::getNamespace("future")
[16:10:37.025]                           version <- ns[[".package"]][["version"]]
[16:10:37.025]                           if (is.null(version)) 
[16:10:37.025]                             version <- utils::packageVersion("future")
[16:10:37.025]                         }
[16:10:37.025]                         else {
[16:10:37.025]                           version <- NULL
[16:10:37.025]                         }
[16:10:37.025]                         if (!has_future || version < "1.8.0") {
[16:10:37.025]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:37.025]                             "", base::R.version$version.string), 
[16:10:37.025]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:37.025]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:37.025]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:37.025]                               "release", "version")], collapse = " "), 
[16:10:37.025]                             hostname = base::Sys.info()[["nodename"]])
[16:10:37.025]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:37.025]                             info)
[16:10:37.025]                           info <- base::paste(info, collapse = "; ")
[16:10:37.025]                           if (!has_future) {
[16:10:37.025]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:37.025]                               info)
[16:10:37.025]                           }
[16:10:37.025]                           else {
[16:10:37.025]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:37.025]                               info, version)
[16:10:37.025]                           }
[16:10:37.025]                           base::stop(msg)
[16:10:37.025]                         }
[16:10:37.025]                       })
[16:10:37.025]                     }
[16:10:37.025]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:37.025]                     base::options(mc.cores = 1L)
[16:10:37.025]                   }
[16:10:37.025]                   options(future.plan = NULL)
[16:10:37.025]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:37.025]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:37.025]                 }
[16:10:37.025]                 ...future.workdir <- getwd()
[16:10:37.025]             }
[16:10:37.025]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:37.025]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:37.025]         }
[16:10:37.025]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:37.025]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:10:37.025]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:37.025]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:37.025]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:37.025]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:37.025]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:37.025]             base::names(...future.oldOptions))
[16:10:37.025]     }
[16:10:37.025]     if (FALSE) {
[16:10:37.025]     }
[16:10:37.025]     else {
[16:10:37.025]         if (TRUE) {
[16:10:37.025]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:37.025]                 open = "w")
[16:10:37.025]         }
[16:10:37.025]         else {
[16:10:37.025]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:37.025]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:37.025]         }
[16:10:37.025]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:37.025]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:37.025]             base::sink(type = "output", split = FALSE)
[16:10:37.025]             base::close(...future.stdout)
[16:10:37.025]         }, add = TRUE)
[16:10:37.025]     }
[16:10:37.025]     ...future.frame <- base::sys.nframe()
[16:10:37.025]     ...future.conditions <- base::list()
[16:10:37.025]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:37.025]     if (FALSE) {
[16:10:37.025]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:37.025]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:37.025]     }
[16:10:37.025]     ...future.result <- base::tryCatch({
[16:10:37.025]         base::withCallingHandlers({
[16:10:37.025]             ...future.value <- base::withVisible(base::local({
[16:10:37.025]                 ...future.makeSendCondition <- local({
[16:10:37.025]                   sendCondition <- NULL
[16:10:37.025]                   function(frame = 1L) {
[16:10:37.025]                     if (is.function(sendCondition)) 
[16:10:37.025]                       return(sendCondition)
[16:10:37.025]                     ns <- getNamespace("parallel")
[16:10:37.025]                     if (exists("sendData", mode = "function", 
[16:10:37.025]                       envir = ns)) {
[16:10:37.025]                       parallel_sendData <- get("sendData", mode = "function", 
[16:10:37.025]                         envir = ns)
[16:10:37.025]                       envir <- sys.frame(frame)
[16:10:37.025]                       master <- NULL
[16:10:37.025]                       while (!identical(envir, .GlobalEnv) && 
[16:10:37.025]                         !identical(envir, emptyenv())) {
[16:10:37.025]                         if (exists("master", mode = "list", envir = envir, 
[16:10:37.025]                           inherits = FALSE)) {
[16:10:37.025]                           master <- get("master", mode = "list", 
[16:10:37.025]                             envir = envir, inherits = FALSE)
[16:10:37.025]                           if (inherits(master, c("SOCKnode", 
[16:10:37.025]                             "SOCK0node"))) {
[16:10:37.025]                             sendCondition <<- function(cond) {
[16:10:37.025]                               data <- list(type = "VALUE", value = cond, 
[16:10:37.025]                                 success = TRUE)
[16:10:37.025]                               parallel_sendData(master, data)
[16:10:37.025]                             }
[16:10:37.025]                             return(sendCondition)
[16:10:37.025]                           }
[16:10:37.025]                         }
[16:10:37.025]                         frame <- frame + 1L
[16:10:37.025]                         envir <- sys.frame(frame)
[16:10:37.025]                       }
[16:10:37.025]                     }
[16:10:37.025]                     sendCondition <<- function(cond) NULL
[16:10:37.025]                   }
[16:10:37.025]                 })
[16:10:37.025]                 withCallingHandlers({
[16:10:37.025]                   {
[16:10:37.025]                     do.call(function(...) {
[16:10:37.025]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:37.025]                       if (!identical(...future.globals.maxSize.org, 
[16:10:37.025]                         ...future.globals.maxSize)) {
[16:10:37.025]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:37.025]                         on.exit(options(oopts), add = TRUE)
[16:10:37.025]                       }
[16:10:37.025]                       {
[16:10:37.025]                         lapply(seq_along(...future.elements_ii), 
[16:10:37.025]                           FUN = function(jj) {
[16:10:37.025]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:37.025]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:37.025]                               envir = globalenv(), inherits = FALSE)
[16:10:37.025]                             ...future.FUN(...future.X_jj, ...)
[16:10:37.025]                           })
[16:10:37.025]                       }
[16:10:37.025]                     }, args = future.call.arguments)
[16:10:37.025]                   }
[16:10:37.025]                 }, immediateCondition = function(cond) {
[16:10:37.025]                   sendCondition <- ...future.makeSendCondition()
[16:10:37.025]                   sendCondition(cond)
[16:10:37.025]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:37.025]                   {
[16:10:37.025]                     inherits <- base::inherits
[16:10:37.025]                     invokeRestart <- base::invokeRestart
[16:10:37.025]                     is.null <- base::is.null
[16:10:37.025]                     muffled <- FALSE
[16:10:37.025]                     if (inherits(cond, "message")) {
[16:10:37.025]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:37.025]                       if (muffled) 
[16:10:37.025]                         invokeRestart("muffleMessage")
[16:10:37.025]                     }
[16:10:37.025]                     else if (inherits(cond, "warning")) {
[16:10:37.025]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:37.025]                       if (muffled) 
[16:10:37.025]                         invokeRestart("muffleWarning")
[16:10:37.025]                     }
[16:10:37.025]                     else if (inherits(cond, "condition")) {
[16:10:37.025]                       if (!is.null(pattern)) {
[16:10:37.025]                         computeRestarts <- base::computeRestarts
[16:10:37.025]                         grepl <- base::grepl
[16:10:37.025]                         restarts <- computeRestarts(cond)
[16:10:37.025]                         for (restart in restarts) {
[16:10:37.025]                           name <- restart$name
[16:10:37.025]                           if (is.null(name)) 
[16:10:37.025]                             next
[16:10:37.025]                           if (!grepl(pattern, name)) 
[16:10:37.025]                             next
[16:10:37.025]                           invokeRestart(restart)
[16:10:37.025]                           muffled <- TRUE
[16:10:37.025]                           break
[16:10:37.025]                         }
[16:10:37.025]                       }
[16:10:37.025]                     }
[16:10:37.025]                     invisible(muffled)
[16:10:37.025]                   }
[16:10:37.025]                   muffleCondition(cond)
[16:10:37.025]                 })
[16:10:37.025]             }))
[16:10:37.025]             future::FutureResult(value = ...future.value$value, 
[16:10:37.025]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:37.025]                   ...future.rng), globalenv = if (FALSE) 
[16:10:37.025]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:37.025]                     ...future.globalenv.names))
[16:10:37.025]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:37.025]         }, condition = base::local({
[16:10:37.025]             c <- base::c
[16:10:37.025]             inherits <- base::inherits
[16:10:37.025]             invokeRestart <- base::invokeRestart
[16:10:37.025]             length <- base::length
[16:10:37.025]             list <- base::list
[16:10:37.025]             seq.int <- base::seq.int
[16:10:37.025]             signalCondition <- base::signalCondition
[16:10:37.025]             sys.calls <- base::sys.calls
[16:10:37.025]             `[[` <- base::`[[`
[16:10:37.025]             `+` <- base::`+`
[16:10:37.025]             `<<-` <- base::`<<-`
[16:10:37.025]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:37.025]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:37.025]                   3L)]
[16:10:37.025]             }
[16:10:37.025]             function(cond) {
[16:10:37.025]                 is_error <- inherits(cond, "error")
[16:10:37.025]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:37.025]                   NULL)
[16:10:37.025]                 if (is_error) {
[16:10:37.025]                   sessionInformation <- function() {
[16:10:37.025]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:37.025]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:37.025]                       search = base::search(), system = base::Sys.info())
[16:10:37.025]                   }
[16:10:37.025]                   ...future.conditions[[length(...future.conditions) + 
[16:10:37.025]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:37.025]                     cond$call), session = sessionInformation(), 
[16:10:37.025]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:37.025]                   signalCondition(cond)
[16:10:37.025]                 }
[16:10:37.025]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:37.025]                 "immediateCondition"))) {
[16:10:37.025]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:37.025]                   ...future.conditions[[length(...future.conditions) + 
[16:10:37.025]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:37.025]                   if (TRUE && !signal) {
[16:10:37.025]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:37.025]                     {
[16:10:37.025]                       inherits <- base::inherits
[16:10:37.025]                       invokeRestart <- base::invokeRestart
[16:10:37.025]                       is.null <- base::is.null
[16:10:37.025]                       muffled <- FALSE
[16:10:37.025]                       if (inherits(cond, "message")) {
[16:10:37.025]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:37.025]                         if (muffled) 
[16:10:37.025]                           invokeRestart("muffleMessage")
[16:10:37.025]                       }
[16:10:37.025]                       else if (inherits(cond, "warning")) {
[16:10:37.025]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:37.025]                         if (muffled) 
[16:10:37.025]                           invokeRestart("muffleWarning")
[16:10:37.025]                       }
[16:10:37.025]                       else if (inherits(cond, "condition")) {
[16:10:37.025]                         if (!is.null(pattern)) {
[16:10:37.025]                           computeRestarts <- base::computeRestarts
[16:10:37.025]                           grepl <- base::grepl
[16:10:37.025]                           restarts <- computeRestarts(cond)
[16:10:37.025]                           for (restart in restarts) {
[16:10:37.025]                             name <- restart$name
[16:10:37.025]                             if (is.null(name)) 
[16:10:37.025]                               next
[16:10:37.025]                             if (!grepl(pattern, name)) 
[16:10:37.025]                               next
[16:10:37.025]                             invokeRestart(restart)
[16:10:37.025]                             muffled <- TRUE
[16:10:37.025]                             break
[16:10:37.025]                           }
[16:10:37.025]                         }
[16:10:37.025]                       }
[16:10:37.025]                       invisible(muffled)
[16:10:37.025]                     }
[16:10:37.025]                     muffleCondition(cond, pattern = "^muffle")
[16:10:37.025]                   }
[16:10:37.025]                 }
[16:10:37.025]                 else {
[16:10:37.025]                   if (TRUE) {
[16:10:37.025]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:37.025]                     {
[16:10:37.025]                       inherits <- base::inherits
[16:10:37.025]                       invokeRestart <- base::invokeRestart
[16:10:37.025]                       is.null <- base::is.null
[16:10:37.025]                       muffled <- FALSE
[16:10:37.025]                       if (inherits(cond, "message")) {
[16:10:37.025]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:37.025]                         if (muffled) 
[16:10:37.025]                           invokeRestart("muffleMessage")
[16:10:37.025]                       }
[16:10:37.025]                       else if (inherits(cond, "warning")) {
[16:10:37.025]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:37.025]                         if (muffled) 
[16:10:37.025]                           invokeRestart("muffleWarning")
[16:10:37.025]                       }
[16:10:37.025]                       else if (inherits(cond, "condition")) {
[16:10:37.025]                         if (!is.null(pattern)) {
[16:10:37.025]                           computeRestarts <- base::computeRestarts
[16:10:37.025]                           grepl <- base::grepl
[16:10:37.025]                           restarts <- computeRestarts(cond)
[16:10:37.025]                           for (restart in restarts) {
[16:10:37.025]                             name <- restart$name
[16:10:37.025]                             if (is.null(name)) 
[16:10:37.025]                               next
[16:10:37.025]                             if (!grepl(pattern, name)) 
[16:10:37.025]                               next
[16:10:37.025]                             invokeRestart(restart)
[16:10:37.025]                             muffled <- TRUE
[16:10:37.025]                             break
[16:10:37.025]                           }
[16:10:37.025]                         }
[16:10:37.025]                       }
[16:10:37.025]                       invisible(muffled)
[16:10:37.025]                     }
[16:10:37.025]                     muffleCondition(cond, pattern = "^muffle")
[16:10:37.025]                   }
[16:10:37.025]                 }
[16:10:37.025]             }
[16:10:37.025]         }))
[16:10:37.025]     }, error = function(ex) {
[16:10:37.025]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:37.025]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:37.025]                 ...future.rng), started = ...future.startTime, 
[16:10:37.025]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:37.025]             version = "1.8"), class = "FutureResult")
[16:10:37.025]     }, finally = {
[16:10:37.025]         if (!identical(...future.workdir, getwd())) 
[16:10:37.025]             setwd(...future.workdir)
[16:10:37.025]         {
[16:10:37.025]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:37.025]                 ...future.oldOptions$nwarnings <- NULL
[16:10:37.025]             }
[16:10:37.025]             base::options(...future.oldOptions)
[16:10:37.025]             if (.Platform$OS.type == "windows") {
[16:10:37.025]                 old_names <- names(...future.oldEnvVars)
[16:10:37.025]                 envs <- base::Sys.getenv()
[16:10:37.025]                 names <- names(envs)
[16:10:37.025]                 common <- intersect(names, old_names)
[16:10:37.025]                 added <- setdiff(names, old_names)
[16:10:37.025]                 removed <- setdiff(old_names, names)
[16:10:37.025]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:37.025]                   envs[common]]
[16:10:37.025]                 NAMES <- toupper(changed)
[16:10:37.025]                 args <- list()
[16:10:37.025]                 for (kk in seq_along(NAMES)) {
[16:10:37.025]                   name <- changed[[kk]]
[16:10:37.025]                   NAME <- NAMES[[kk]]
[16:10:37.025]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:37.025]                     next
[16:10:37.025]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:37.025]                 }
[16:10:37.025]                 NAMES <- toupper(added)
[16:10:37.025]                 for (kk in seq_along(NAMES)) {
[16:10:37.025]                   name <- added[[kk]]
[16:10:37.025]                   NAME <- NAMES[[kk]]
[16:10:37.025]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:37.025]                     next
[16:10:37.025]                   args[[name]] <- ""
[16:10:37.025]                 }
[16:10:37.025]                 NAMES <- toupper(removed)
[16:10:37.025]                 for (kk in seq_along(NAMES)) {
[16:10:37.025]                   name <- removed[[kk]]
[16:10:37.025]                   NAME <- NAMES[[kk]]
[16:10:37.025]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:37.025]                     next
[16:10:37.025]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:37.025]                 }
[16:10:37.025]                 if (length(args) > 0) 
[16:10:37.025]                   base::do.call(base::Sys.setenv, args = args)
[16:10:37.025]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:37.025]             }
[16:10:37.025]             else {
[16:10:37.025]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:37.025]             }
[16:10:37.025]             {
[16:10:37.025]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:37.025]                   0L) {
[16:10:37.025]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:37.025]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:37.025]                   base::options(opts)
[16:10:37.025]                 }
[16:10:37.025]                 {
[16:10:37.025]                   {
[16:10:37.025]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:37.025]                     NULL
[16:10:37.025]                   }
[16:10:37.025]                   options(future.plan = NULL)
[16:10:37.025]                   if (is.na(NA_character_)) 
[16:10:37.025]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:37.025]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:37.025]                   future::plan(list(function (..., workers = availableCores(), 
[16:10:37.025]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:10:37.025]                     envir = parent.frame()) 
[16:10:37.025]                   {
[16:10:37.025]                     if (is.function(workers)) 
[16:10:37.025]                       workers <- workers()
[16:10:37.025]                     workers <- structure(as.integer(workers), 
[16:10:37.025]                       class = class(workers))
[16:10:37.025]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:10:37.025]                       workers >= 1)
[16:10:37.025]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:10:37.025]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:10:37.025]                     }
[16:10:37.025]                     future <- MultisessionFuture(..., workers = workers, 
[16:10:37.025]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:10:37.025]                       envir = envir)
[16:10:37.025]                     if (!future$lazy) 
[16:10:37.025]                       future <- run(future)
[16:10:37.025]                     invisible(future)
[16:10:37.025]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:37.025]                 }
[16:10:37.025]             }
[16:10:37.025]         }
[16:10:37.025]     })
[16:10:37.025]     if (TRUE) {
[16:10:37.025]         base::sink(type = "output", split = FALSE)
[16:10:37.025]         if (TRUE) {
[16:10:37.025]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:37.025]         }
[16:10:37.025]         else {
[16:10:37.025]             ...future.result["stdout"] <- base::list(NULL)
[16:10:37.025]         }
[16:10:37.025]         base::close(...future.stdout)
[16:10:37.025]         ...future.stdout <- NULL
[16:10:37.025]     }
[16:10:37.025]     ...future.result$conditions <- ...future.conditions
[16:10:37.025]     ...future.result$finished <- base::Sys.time()
[16:10:37.025]     ...future.result
[16:10:37.025] }
[16:10:37.028] Exporting 7 global objects (2.15 KiB) to cluster node #1 ...
[16:10:37.029] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ...
[16:10:37.029] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ... DONE
[16:10:37.029] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ...
[16:10:37.030] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ... DONE
[16:10:37.030] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[16:10:37.030] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[16:10:37.030] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[16:10:37.031] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[16:10:37.031] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[16:10:37.031] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[16:10:37.031] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[16:10:37.032] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[16:10:37.032] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[16:10:37.032] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[16:10:37.032] Exporting 7 global objects (2.15 KiB) to cluster node #1 ... DONE
[16:10:37.033] MultisessionFuture started
[16:10:37.033] - Launch lazy future ... done
[16:10:37.033] run() for ‘MultisessionFuture’ ... done
[16:10:37.034] Created future:
[16:10:37.034] MultisessionFuture:
[16:10:37.034] Label: ‘future_replicate-1’
[16:10:37.034] Expression:
[16:10:37.034] {
[16:10:37.034]     do.call(function(...) {
[16:10:37.034]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:37.034]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:37.034]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:37.034]             on.exit(options(oopts), add = TRUE)
[16:10:37.034]         }
[16:10:37.034]         {
[16:10:37.034]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:37.034]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:37.034]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:37.034]                   envir = globalenv(), inherits = FALSE)
[16:10:37.034]                 ...future.FUN(...future.X_jj, ...)
[16:10:37.034]             })
[16:10:37.034]         }
[16:10:37.034]     }, args = future.call.arguments)
[16:10:37.034] }
[16:10:37.034] Lazy evaluation: FALSE
[16:10:37.034] Asynchronous evaluation: TRUE
[16:10:37.034] Local evaluation: TRUE
[16:10:37.034] Environment: 0x55cf8f0a4248
[16:10:37.034] Capture standard output: TRUE
[16:10:37.034] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:37.034] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[16:10:37.034] Packages: <none>
[16:10:37.034] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:37.034] Resolved: FALSE
[16:10:37.034] Value: <not collected>
[16:10:37.034] Conditions captured: <none>
[16:10:37.034] Early signaling: FALSE
[16:10:37.034] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:37.034] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:37.045] Chunk #1 of 2 ... DONE
[16:10:37.046] Chunk #2 of 2 ...
[16:10:37.046]  - Finding globals in 'X' for chunk #2 ...
[16:10:37.046] getGlobalsAndPackages() ...
[16:10:37.046] Searching for globals...
[16:10:37.046] 
[16:10:37.046] Searching for globals ... DONE
[16:10:37.046] - globals: [0] <none>
[16:10:37.047] getGlobalsAndPackages() ... DONE
[16:10:37.047]    + additional globals found: [n=0] 
[16:10:37.047]    + additional namespaces needed: [n=0] 
[16:10:37.047]  - Finding globals in 'X' for chunk #2 ... DONE
[16:10:37.047]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[16:10:37.047]  - seeds: [3] <seeds>
[16:10:37.047] getGlobalsAndPackages() ...
[16:10:37.047] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:37.047] Resolving globals: FALSE
[16:10:37.048] Tweak future expression to call with '...' arguments ...
[16:10:37.048] {
[16:10:37.048]     do.call(function(...) {
[16:10:37.048]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:37.048]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:37.048]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:37.048]             on.exit(options(oopts), add = TRUE)
[16:10:37.048]         }
[16:10:37.048]         {
[16:10:37.048]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:37.048]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:37.048]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:37.048]                   envir = globalenv(), inherits = FALSE)
[16:10:37.048]                 ...future.FUN(...future.X_jj, ...)
[16:10:37.048]             })
[16:10:37.048]         }
[16:10:37.048]     }, args = future.call.arguments)
[16:10:37.048] }
[16:10:37.048] Tweak future expression to call with '...' arguments ... DONE
[16:10:37.048] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:10:37.049] 
[16:10:37.049] getGlobalsAndPackages() ... DONE
[16:10:37.049] run() for ‘Future’ ...
[16:10:37.049] - state: ‘created’
[16:10:37.049] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:10:37.064] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:37.065] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:10:37.065]   - Field: ‘node’
[16:10:37.065]   - Field: ‘label’
[16:10:37.065]   - Field: ‘local’
[16:10:37.065]   - Field: ‘owner’
[16:10:37.065]   - Field: ‘envir’
[16:10:37.065]   - Field: ‘workers’
[16:10:37.065]   - Field: ‘packages’
[16:10:37.065]   - Field: ‘gc’
[16:10:37.065]   - Field: ‘conditions’
[16:10:37.066]   - Field: ‘persistent’
[16:10:37.066]   - Field: ‘expr’
[16:10:37.066]   - Field: ‘uuid’
[16:10:37.066]   - Field: ‘seed’
[16:10:37.066]   - Field: ‘version’
[16:10:37.066]   - Field: ‘result’
[16:10:37.066]   - Field: ‘asynchronous’
[16:10:37.066]   - Field: ‘calls’
[16:10:37.066]   - Field: ‘globals’
[16:10:37.066]   - Field: ‘stdout’
[16:10:37.066]   - Field: ‘earlySignal’
[16:10:37.067]   - Field: ‘lazy’
[16:10:37.067]   - Field: ‘state’
[16:10:37.067] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:10:37.067] - Launch lazy future ...
[16:10:37.067] Packages needed by the future expression (n = 0): <none>
[16:10:37.067] Packages needed by future strategies (n = 0): <none>
[16:10:37.068] {
[16:10:37.068]     {
[16:10:37.068]         {
[16:10:37.068]             ...future.startTime <- base::Sys.time()
[16:10:37.068]             {
[16:10:37.068]                 {
[16:10:37.068]                   {
[16:10:37.068]                     {
[16:10:37.068]                       base::local({
[16:10:37.068]                         has_future <- base::requireNamespace("future", 
[16:10:37.068]                           quietly = TRUE)
[16:10:37.068]                         if (has_future) {
[16:10:37.068]                           ns <- base::getNamespace("future")
[16:10:37.068]                           version <- ns[[".package"]][["version"]]
[16:10:37.068]                           if (is.null(version)) 
[16:10:37.068]                             version <- utils::packageVersion("future")
[16:10:37.068]                         }
[16:10:37.068]                         else {
[16:10:37.068]                           version <- NULL
[16:10:37.068]                         }
[16:10:37.068]                         if (!has_future || version < "1.8.0") {
[16:10:37.068]                           info <- base::c(r_version = base::gsub("R version ", 
[16:10:37.068]                             "", base::R.version$version.string), 
[16:10:37.068]                             platform = base::sprintf("%s (%s-bit)", 
[16:10:37.068]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:10:37.068]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:10:37.068]                               "release", "version")], collapse = " "), 
[16:10:37.068]                             hostname = base::Sys.info()[["nodename"]])
[16:10:37.068]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:10:37.068]                             info)
[16:10:37.068]                           info <- base::paste(info, collapse = "; ")
[16:10:37.068]                           if (!has_future) {
[16:10:37.068]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:10:37.068]                               info)
[16:10:37.068]                           }
[16:10:37.068]                           else {
[16:10:37.068]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:10:37.068]                               info, version)
[16:10:37.068]                           }
[16:10:37.068]                           base::stop(msg)
[16:10:37.068]                         }
[16:10:37.068]                       })
[16:10:37.068]                     }
[16:10:37.068]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:10:37.068]                     base::options(mc.cores = 1L)
[16:10:37.068]                   }
[16:10:37.068]                   options(future.plan = NULL)
[16:10:37.068]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:10:37.068]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:10:37.068]                 }
[16:10:37.068]                 ...future.workdir <- getwd()
[16:10:37.068]             }
[16:10:37.068]             ...future.oldOptions <- base::as.list(base::.Options)
[16:10:37.068]             ...future.oldEnvVars <- base::Sys.getenv()
[16:10:37.068]         }
[16:10:37.068]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:10:37.068]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[16:10:37.068]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:10:37.068]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:10:37.068]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:10:37.068]             future.stdout.windows.reencode = NULL, width = 80L)
[16:10:37.068]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:10:37.068]             base::names(...future.oldOptions))
[16:10:37.068]     }
[16:10:37.068]     if (FALSE) {
[16:10:37.068]     }
[16:10:37.068]     else {
[16:10:37.068]         if (TRUE) {
[16:10:37.068]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:10:37.068]                 open = "w")
[16:10:37.068]         }
[16:10:37.068]         else {
[16:10:37.068]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:10:37.068]                 windows = "NUL", "/dev/null"), open = "w")
[16:10:37.068]         }
[16:10:37.068]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:10:37.068]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:10:37.068]             base::sink(type = "output", split = FALSE)
[16:10:37.068]             base::close(...future.stdout)
[16:10:37.068]         }, add = TRUE)
[16:10:37.068]     }
[16:10:37.068]     ...future.frame <- base::sys.nframe()
[16:10:37.068]     ...future.conditions <- base::list()
[16:10:37.068]     ...future.rng <- base::globalenv()$.Random.seed
[16:10:37.068]     if (FALSE) {
[16:10:37.068]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:10:37.068]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:10:37.068]     }
[16:10:37.068]     ...future.result <- base::tryCatch({
[16:10:37.068]         base::withCallingHandlers({
[16:10:37.068]             ...future.value <- base::withVisible(base::local({
[16:10:37.068]                 ...future.makeSendCondition <- local({
[16:10:37.068]                   sendCondition <- NULL
[16:10:37.068]                   function(frame = 1L) {
[16:10:37.068]                     if (is.function(sendCondition)) 
[16:10:37.068]                       return(sendCondition)
[16:10:37.068]                     ns <- getNamespace("parallel")
[16:10:37.068]                     if (exists("sendData", mode = "function", 
[16:10:37.068]                       envir = ns)) {
[16:10:37.068]                       parallel_sendData <- get("sendData", mode = "function", 
[16:10:37.068]                         envir = ns)
[16:10:37.068]                       envir <- sys.frame(frame)
[16:10:37.068]                       master <- NULL
[16:10:37.068]                       while (!identical(envir, .GlobalEnv) && 
[16:10:37.068]                         !identical(envir, emptyenv())) {
[16:10:37.068]                         if (exists("master", mode = "list", envir = envir, 
[16:10:37.068]                           inherits = FALSE)) {
[16:10:37.068]                           master <- get("master", mode = "list", 
[16:10:37.068]                             envir = envir, inherits = FALSE)
[16:10:37.068]                           if (inherits(master, c("SOCKnode", 
[16:10:37.068]                             "SOCK0node"))) {
[16:10:37.068]                             sendCondition <<- function(cond) {
[16:10:37.068]                               data <- list(type = "VALUE", value = cond, 
[16:10:37.068]                                 success = TRUE)
[16:10:37.068]                               parallel_sendData(master, data)
[16:10:37.068]                             }
[16:10:37.068]                             return(sendCondition)
[16:10:37.068]                           }
[16:10:37.068]                         }
[16:10:37.068]                         frame <- frame + 1L
[16:10:37.068]                         envir <- sys.frame(frame)
[16:10:37.068]                       }
[16:10:37.068]                     }
[16:10:37.068]                     sendCondition <<- function(cond) NULL
[16:10:37.068]                   }
[16:10:37.068]                 })
[16:10:37.068]                 withCallingHandlers({
[16:10:37.068]                   {
[16:10:37.068]                     do.call(function(...) {
[16:10:37.068]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:37.068]                       if (!identical(...future.globals.maxSize.org, 
[16:10:37.068]                         ...future.globals.maxSize)) {
[16:10:37.068]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:37.068]                         on.exit(options(oopts), add = TRUE)
[16:10:37.068]                       }
[16:10:37.068]                       {
[16:10:37.068]                         lapply(seq_along(...future.elements_ii), 
[16:10:37.068]                           FUN = function(jj) {
[16:10:37.068]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:37.068]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:37.068]                               envir = globalenv(), inherits = FALSE)
[16:10:37.068]                             ...future.FUN(...future.X_jj, ...)
[16:10:37.068]                           })
[16:10:37.068]                       }
[16:10:37.068]                     }, args = future.call.arguments)
[16:10:37.068]                   }
[16:10:37.068]                 }, immediateCondition = function(cond) {
[16:10:37.068]                   sendCondition <- ...future.makeSendCondition()
[16:10:37.068]                   sendCondition(cond)
[16:10:37.068]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:37.068]                   {
[16:10:37.068]                     inherits <- base::inherits
[16:10:37.068]                     invokeRestart <- base::invokeRestart
[16:10:37.068]                     is.null <- base::is.null
[16:10:37.068]                     muffled <- FALSE
[16:10:37.068]                     if (inherits(cond, "message")) {
[16:10:37.068]                       muffled <- grepl(pattern, "muffleMessage")
[16:10:37.068]                       if (muffled) 
[16:10:37.068]                         invokeRestart("muffleMessage")
[16:10:37.068]                     }
[16:10:37.068]                     else if (inherits(cond, "warning")) {
[16:10:37.068]                       muffled <- grepl(pattern, "muffleWarning")
[16:10:37.068]                       if (muffled) 
[16:10:37.068]                         invokeRestart("muffleWarning")
[16:10:37.068]                     }
[16:10:37.068]                     else if (inherits(cond, "condition")) {
[16:10:37.068]                       if (!is.null(pattern)) {
[16:10:37.068]                         computeRestarts <- base::computeRestarts
[16:10:37.068]                         grepl <- base::grepl
[16:10:37.068]                         restarts <- computeRestarts(cond)
[16:10:37.068]                         for (restart in restarts) {
[16:10:37.068]                           name <- restart$name
[16:10:37.068]                           if (is.null(name)) 
[16:10:37.068]                             next
[16:10:37.068]                           if (!grepl(pattern, name)) 
[16:10:37.068]                             next
[16:10:37.068]                           invokeRestart(restart)
[16:10:37.068]                           muffled <- TRUE
[16:10:37.068]                           break
[16:10:37.068]                         }
[16:10:37.068]                       }
[16:10:37.068]                     }
[16:10:37.068]                     invisible(muffled)
[16:10:37.068]                   }
[16:10:37.068]                   muffleCondition(cond)
[16:10:37.068]                 })
[16:10:37.068]             }))
[16:10:37.068]             future::FutureResult(value = ...future.value$value, 
[16:10:37.068]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:37.068]                   ...future.rng), globalenv = if (FALSE) 
[16:10:37.068]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:10:37.068]                     ...future.globalenv.names))
[16:10:37.068]                 else NULL, started = ...future.startTime, version = "1.8")
[16:10:37.068]         }, condition = base::local({
[16:10:37.068]             c <- base::c
[16:10:37.068]             inherits <- base::inherits
[16:10:37.068]             invokeRestart <- base::invokeRestart
[16:10:37.068]             length <- base::length
[16:10:37.068]             list <- base::list
[16:10:37.068]             seq.int <- base::seq.int
[16:10:37.068]             signalCondition <- base::signalCondition
[16:10:37.068]             sys.calls <- base::sys.calls
[16:10:37.068]             `[[` <- base::`[[`
[16:10:37.068]             `+` <- base::`+`
[16:10:37.068]             `<<-` <- base::`<<-`
[16:10:37.068]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:10:37.068]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:10:37.068]                   3L)]
[16:10:37.068]             }
[16:10:37.068]             function(cond) {
[16:10:37.068]                 is_error <- inherits(cond, "error")
[16:10:37.068]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:10:37.068]                   NULL)
[16:10:37.068]                 if (is_error) {
[16:10:37.068]                   sessionInformation <- function() {
[16:10:37.068]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:10:37.068]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:10:37.068]                       search = base::search(), system = base::Sys.info())
[16:10:37.068]                   }
[16:10:37.068]                   ...future.conditions[[length(...future.conditions) + 
[16:10:37.068]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:10:37.068]                     cond$call), session = sessionInformation(), 
[16:10:37.068]                     timestamp = base::Sys.time(), signaled = 0L)
[16:10:37.068]                   signalCondition(cond)
[16:10:37.068]                 }
[16:10:37.068]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:10:37.068]                 "immediateCondition"))) {
[16:10:37.068]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:10:37.068]                   ...future.conditions[[length(...future.conditions) + 
[16:10:37.068]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:10:37.068]                   if (TRUE && !signal) {
[16:10:37.068]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:37.068]                     {
[16:10:37.068]                       inherits <- base::inherits
[16:10:37.068]                       invokeRestart <- base::invokeRestart
[16:10:37.068]                       is.null <- base::is.null
[16:10:37.068]                       muffled <- FALSE
[16:10:37.068]                       if (inherits(cond, "message")) {
[16:10:37.068]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:37.068]                         if (muffled) 
[16:10:37.068]                           invokeRestart("muffleMessage")
[16:10:37.068]                       }
[16:10:37.068]                       else if (inherits(cond, "warning")) {
[16:10:37.068]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:37.068]                         if (muffled) 
[16:10:37.068]                           invokeRestart("muffleWarning")
[16:10:37.068]                       }
[16:10:37.068]                       else if (inherits(cond, "condition")) {
[16:10:37.068]                         if (!is.null(pattern)) {
[16:10:37.068]                           computeRestarts <- base::computeRestarts
[16:10:37.068]                           grepl <- base::grepl
[16:10:37.068]                           restarts <- computeRestarts(cond)
[16:10:37.068]                           for (restart in restarts) {
[16:10:37.068]                             name <- restart$name
[16:10:37.068]                             if (is.null(name)) 
[16:10:37.068]                               next
[16:10:37.068]                             if (!grepl(pattern, name)) 
[16:10:37.068]                               next
[16:10:37.068]                             invokeRestart(restart)
[16:10:37.068]                             muffled <- TRUE
[16:10:37.068]                             break
[16:10:37.068]                           }
[16:10:37.068]                         }
[16:10:37.068]                       }
[16:10:37.068]                       invisible(muffled)
[16:10:37.068]                     }
[16:10:37.068]                     muffleCondition(cond, pattern = "^muffle")
[16:10:37.068]                   }
[16:10:37.068]                 }
[16:10:37.068]                 else {
[16:10:37.068]                   if (TRUE) {
[16:10:37.068]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:10:37.068]                     {
[16:10:37.068]                       inherits <- base::inherits
[16:10:37.068]                       invokeRestart <- base::invokeRestart
[16:10:37.068]                       is.null <- base::is.null
[16:10:37.068]                       muffled <- FALSE
[16:10:37.068]                       if (inherits(cond, "message")) {
[16:10:37.068]                         muffled <- grepl(pattern, "muffleMessage")
[16:10:37.068]                         if (muffled) 
[16:10:37.068]                           invokeRestart("muffleMessage")
[16:10:37.068]                       }
[16:10:37.068]                       else if (inherits(cond, "warning")) {
[16:10:37.068]                         muffled <- grepl(pattern, "muffleWarning")
[16:10:37.068]                         if (muffled) 
[16:10:37.068]                           invokeRestart("muffleWarning")
[16:10:37.068]                       }
[16:10:37.068]                       else if (inherits(cond, "condition")) {
[16:10:37.068]                         if (!is.null(pattern)) {
[16:10:37.068]                           computeRestarts <- base::computeRestarts
[16:10:37.068]                           grepl <- base::grepl
[16:10:37.068]                           restarts <- computeRestarts(cond)
[16:10:37.068]                           for (restart in restarts) {
[16:10:37.068]                             name <- restart$name
[16:10:37.068]                             if (is.null(name)) 
[16:10:37.068]                               next
[16:10:37.068]                             if (!grepl(pattern, name)) 
[16:10:37.068]                               next
[16:10:37.068]                             invokeRestart(restart)
[16:10:37.068]                             muffled <- TRUE
[16:10:37.068]                             break
[16:10:37.068]                           }
[16:10:37.068]                         }
[16:10:37.068]                       }
[16:10:37.068]                       invisible(muffled)
[16:10:37.068]                     }
[16:10:37.068]                     muffleCondition(cond, pattern = "^muffle")
[16:10:37.068]                   }
[16:10:37.068]                 }
[16:10:37.068]             }
[16:10:37.068]         }))
[16:10:37.068]     }, error = function(ex) {
[16:10:37.068]         base::structure(base::list(value = NULL, visible = NULL, 
[16:10:37.068]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:10:37.068]                 ...future.rng), started = ...future.startTime, 
[16:10:37.068]             finished = Sys.time(), session_uuid = NA_character_, 
[16:10:37.068]             version = "1.8"), class = "FutureResult")
[16:10:37.068]     }, finally = {
[16:10:37.068]         if (!identical(...future.workdir, getwd())) 
[16:10:37.068]             setwd(...future.workdir)
[16:10:37.068]         {
[16:10:37.068]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:10:37.068]                 ...future.oldOptions$nwarnings <- NULL
[16:10:37.068]             }
[16:10:37.068]             base::options(...future.oldOptions)
[16:10:37.068]             if (.Platform$OS.type == "windows") {
[16:10:37.068]                 old_names <- names(...future.oldEnvVars)
[16:10:37.068]                 envs <- base::Sys.getenv()
[16:10:37.068]                 names <- names(envs)
[16:10:37.068]                 common <- intersect(names, old_names)
[16:10:37.068]                 added <- setdiff(names, old_names)
[16:10:37.068]                 removed <- setdiff(old_names, names)
[16:10:37.068]                 changed <- common[...future.oldEnvVars[common] != 
[16:10:37.068]                   envs[common]]
[16:10:37.068]                 NAMES <- toupper(changed)
[16:10:37.068]                 args <- list()
[16:10:37.068]                 for (kk in seq_along(NAMES)) {
[16:10:37.068]                   name <- changed[[kk]]
[16:10:37.068]                   NAME <- NAMES[[kk]]
[16:10:37.068]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:37.068]                     next
[16:10:37.068]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:37.068]                 }
[16:10:37.068]                 NAMES <- toupper(added)
[16:10:37.068]                 for (kk in seq_along(NAMES)) {
[16:10:37.068]                   name <- added[[kk]]
[16:10:37.068]                   NAME <- NAMES[[kk]]
[16:10:37.068]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:37.068]                     next
[16:10:37.068]                   args[[name]] <- ""
[16:10:37.068]                 }
[16:10:37.068]                 NAMES <- toupper(removed)
[16:10:37.068]                 for (kk in seq_along(NAMES)) {
[16:10:37.068]                   name <- removed[[kk]]
[16:10:37.068]                   NAME <- NAMES[[kk]]
[16:10:37.068]                   if (name != NAME && is.element(NAME, old_names)) 
[16:10:37.068]                     next
[16:10:37.068]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:10:37.068]                 }
[16:10:37.068]                 if (length(args) > 0) 
[16:10:37.068]                   base::do.call(base::Sys.setenv, args = args)
[16:10:37.068]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:10:37.068]             }
[16:10:37.068]             else {
[16:10:37.068]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:10:37.068]             }
[16:10:37.068]             {
[16:10:37.068]                 if (base::length(...future.futureOptionsAdded) > 
[16:10:37.068]                   0L) {
[16:10:37.068]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:10:37.068]                   base::names(opts) <- ...future.futureOptionsAdded
[16:10:37.068]                   base::options(opts)
[16:10:37.068]                 }
[16:10:37.068]                 {
[16:10:37.068]                   {
[16:10:37.068]                     base::options(mc.cores = ...future.mc.cores.old)
[16:10:37.068]                     NULL
[16:10:37.068]                   }
[16:10:37.068]                   options(future.plan = NULL)
[16:10:37.068]                   if (is.na(NA_character_)) 
[16:10:37.068]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:10:37.068]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:10:37.068]                   future::plan(list(function (..., workers = availableCores(), 
[16:10:37.068]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:10:37.068]                     envir = parent.frame()) 
[16:10:37.068]                   {
[16:10:37.068]                     if (is.function(workers)) 
[16:10:37.068]                       workers <- workers()
[16:10:37.068]                     workers <- structure(as.integer(workers), 
[16:10:37.068]                       class = class(workers))
[16:10:37.068]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:10:37.068]                       workers >= 1)
[16:10:37.068]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:10:37.068]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:10:37.068]                     }
[16:10:37.068]                     future <- MultisessionFuture(..., workers = workers, 
[16:10:37.068]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:10:37.068]                       envir = envir)
[16:10:37.068]                     if (!future$lazy) 
[16:10:37.068]                       future <- run(future)
[16:10:37.068]                     invisible(future)
[16:10:37.068]                   }), .cleanup = FALSE, .init = FALSE)
[16:10:37.068]                 }
[16:10:37.068]             }
[16:10:37.068]         }
[16:10:37.068]     })
[16:10:37.068]     if (TRUE) {
[16:10:37.068]         base::sink(type = "output", split = FALSE)
[16:10:37.068]         if (TRUE) {
[16:10:37.068]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:10:37.068]         }
[16:10:37.068]         else {
[16:10:37.068]             ...future.result["stdout"] <- base::list(NULL)
[16:10:37.068]         }
[16:10:37.068]         base::close(...future.stdout)
[16:10:37.068]         ...future.stdout <- NULL
[16:10:37.068]     }
[16:10:37.068]     ...future.result$conditions <- ...future.conditions
[16:10:37.068]     ...future.result$finished <- base::Sys.time()
[16:10:37.068]     ...future.result
[16:10:37.068] }
[16:10:37.071] Exporting 7 global objects (2.15 KiB) to cluster node #2 ...
[16:10:37.071] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ...
[16:10:37.071] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ... DONE
[16:10:37.071] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ...
[16:10:37.072] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ... DONE
[16:10:37.072] Exporting ‘x’ (56 bytes) to cluster node #2 ...
[16:10:37.072] Exporting ‘x’ (56 bytes) to cluster node #2 ... DONE
[16:10:37.073] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[16:10:37.073] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[16:10:37.073] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[16:10:37.073] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[16:10:37.074] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[16:10:37.074] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[16:10:37.074] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[16:10:37.074] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[16:10:37.074] Exporting 7 global objects (2.15 KiB) to cluster node #2 ... DONE
[16:10:37.075] MultisessionFuture started
[16:10:37.075] - Launch lazy future ... done
[16:10:37.075] run() for ‘MultisessionFuture’ ... done
[16:10:37.076] Created future:
[16:10:37.076] MultisessionFuture:
[16:10:37.076] Label: ‘future_replicate-2’
[16:10:37.076] Expression:
[16:10:37.076] {
[16:10:37.076]     do.call(function(...) {
[16:10:37.076]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:10:37.076]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:10:37.076]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:10:37.076]             on.exit(options(oopts), add = TRUE)
[16:10:37.076]         }
[16:10:37.076]         {
[16:10:37.076]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:10:37.076]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:10:37.076]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:10:37.076]                   envir = globalenv(), inherits = FALSE)
[16:10:37.076]                 ...future.FUN(...future.X_jj, ...)
[16:10:37.076]             })
[16:10:37.076]         }
[16:10:37.076]     }, args = future.call.arguments)
[16:10:37.076] }
[16:10:37.076] Lazy evaluation: FALSE
[16:10:37.076] Asynchronous evaluation: TRUE
[16:10:37.076] Local evaluation: TRUE
[16:10:37.076] Environment: 0x55cf8f0a4248
[16:10:37.076] Capture standard output: TRUE
[16:10:37.076] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:10:37.076] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[16:10:37.076] Packages: <none>
[16:10:37.076] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:10:37.076] Resolved: FALSE
[16:10:37.076] Value: <not collected>
[16:10:37.076] Conditions captured: <none>
[16:10:37.076] Early signaling: FALSE
[16:10:37.076] Owner process: bbb8c9a9-7690-1b85-ebaa-87eb52f2dd3d
[16:10:37.076] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:10:37.087] Chunk #2 of 2 ... DONE
[16:10:37.088] Launching 2 futures (chunks) ... DONE
[16:10:37.088] Resolving 2 futures (chunks) ...
[16:10:37.088] resolve() on list ...
[16:10:37.088]  recursive: 0
[16:10:37.088]  length: 2
[16:10:37.088] 
[16:10:37.089] receiveMessageFromWorker() for ClusterFuture ...
[16:10:37.089] - Validating connection of MultisessionFuture
[16:10:37.089] - received message: FutureResult
[16:10:37.089] - Received FutureResult
[16:10:37.089] - Erased future from FutureRegistry
[16:10:37.089] result() for ClusterFuture ...
[16:10:37.089] - result already collected: FutureResult
[16:10:37.089] result() for ClusterFuture ... done
[16:10:37.090] receiveMessageFromWorker() for ClusterFuture ... done
[16:10:37.090] Future #1
[16:10:37.090] result() for ClusterFuture ...
[16:10:37.090] - result already collected: FutureResult
[16:10:37.090] result() for ClusterFuture ... done
[16:10:37.090] result() for ClusterFuture ...
[16:10:37.090] - result already collected: FutureResult
[16:10:37.090] result() for ClusterFuture ... done
[16:10:37.090] signalConditionsASAP(MultisessionFuture, pos=1) ...
[16:10:37.090] - nx: 2
[16:10:37.090] - relay: TRUE
[16:10:37.090] - stdout: TRUE
[16:10:37.091] - signal: TRUE
[16:10:37.091] - resignal: FALSE
[16:10:37.091] - force: TRUE
[16:10:37.091] - relayed: [n=2] FALSE, FALSE
[16:10:37.091] - queued futures: [n=2] FALSE, FALSE
[16:10:37.091]  - until=1
[16:10:37.091]  - relaying element #1
[16:10:37.091] result() for ClusterFuture ...
[16:10:37.091] - result already collected: FutureResult
[16:10:37.091] result() for ClusterFuture ... done
[16:10:37.091] result() for ClusterFuture ...
[16:10:37.092] - result already collected: FutureResult
[16:10:37.092] result() for ClusterFuture ... done
[16:10:37.092] result() for ClusterFuture ...
[16:10:37.092] - result already collected: FutureResult
[16:10:37.092] result() for ClusterFuture ... done
[16:10:37.092] result() for ClusterFuture ...
[16:10:37.092] - result already collected: FutureResult
[16:10:37.092] result() for ClusterFuture ... done
[16:10:37.092] - relayed: [n=2] TRUE, FALSE
[16:10:37.092] - queued futures: [n=2] TRUE, FALSE
[16:10:37.092] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[16:10:37.093]  length: 1 (resolved future 1)
[16:10:37.121] receiveMessageFromWorker() for ClusterFuture ...
[16:10:37.121] - Validating connection of MultisessionFuture
[16:10:37.121] - received message: FutureResult
[16:10:37.121] - Received FutureResult
[16:10:37.121] - Erased future from FutureRegistry
[16:10:37.122] result() for ClusterFuture ...
[16:10:37.122] - result already collected: FutureResult
[16:10:37.122] result() for ClusterFuture ... done
[16:10:37.122] receiveMessageFromWorker() for ClusterFuture ... done
[16:10:37.122] Future #2
[16:10:37.122] result() for ClusterFuture ...
[16:10:37.122] - result already collected: FutureResult
[16:10:37.122] result() for ClusterFuture ... done
[16:10:37.122] result() for ClusterFuture ...
[16:10:37.122] - result already collected: FutureResult
[16:10:37.122] result() for ClusterFuture ... done
[16:10:37.123] signalConditionsASAP(MultisessionFuture, pos=2) ...
[16:10:37.123] - nx: 2
[16:10:37.123] - relay: TRUE
[16:10:37.123] - stdout: TRUE
[16:10:37.123] - signal: TRUE
[16:10:37.123] - resignal: FALSE
[16:10:37.123] - force: TRUE
[16:10:37.123] - relayed: [n=2] TRUE, FALSE
[16:10:37.123] - queued futures: [n=2] TRUE, FALSE
[16:10:37.123]  - until=2
[16:10:37.123]  - relaying element #2
[16:10:37.124] result() for ClusterFuture ...
[16:10:37.124] - result already collected: FutureResult
[16:10:37.124] result() for ClusterFuture ... done
[16:10:37.124] result() for ClusterFuture ...
[16:10:37.124] - result already collected: FutureResult
[16:10:37.124] result() for ClusterFuture ... done
[16:10:37.124] result() for ClusterFuture ...
[16:10:37.124] - result already collected: FutureResult
[16:10:37.124] result() for ClusterFuture ... done
[16:10:37.124] result() for ClusterFuture ...
[16:10:37.124] - result already collected: FutureResult
[16:10:37.125] result() for ClusterFuture ... done
[16:10:37.125] - relayed: [n=2] TRUE, TRUE
[16:10:37.125] - queued futures: [n=2] TRUE, TRUE
[16:10:37.125] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[16:10:37.125]  length: 0 (resolved future 2)
[16:10:37.125] Relaying remaining futures
[16:10:37.125] signalConditionsASAP(NULL, pos=0) ...
[16:10:37.125] - nx: 2
[16:10:37.125] - relay: TRUE
[16:10:37.125] - stdout: TRUE
[16:10:37.125] - signal: TRUE
[16:10:37.126] - resignal: FALSE
[16:10:37.126] - force: TRUE
[16:10:37.126] - relayed: [n=2] TRUE, TRUE
[16:10:37.126] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:10:37.126] - relayed: [n=2] TRUE, TRUE
[16:10:37.126] - queued futures: [n=2] TRUE, TRUE
[16:10:37.126] signalConditionsASAP(NULL, pos=0) ... done
[16:10:37.126] resolve() on list ... DONE
[16:10:37.126] result() for ClusterFuture ...
[16:10:37.126] - result already collected: FutureResult
[16:10:37.126] result() for ClusterFuture ... done
[16:10:37.127] result() for ClusterFuture ...
[16:10:37.127] - result already collected: FutureResult
[16:10:37.127] result() for ClusterFuture ... done
[16:10:37.127] result() for ClusterFuture ...
[16:10:37.127] - result already collected: FutureResult
[16:10:37.127] result() for ClusterFuture ... done
[16:10:37.127] result() for ClusterFuture ...
[16:10:37.127] - result already collected: FutureResult
[16:10:37.127] result() for ClusterFuture ... done
[16:10:37.127]  - Number of value chunks collected: 2
[16:10:37.127] Resolving 2 futures (chunks) ... DONE
[16:10:37.128] Reducing values from 2 chunks ...
[16:10:37.128]  - Number of values collected after concatenation: 5
[16:10:37.128]  - Number of values expected: 5
[16:10:37.128] Reducing values from 2 chunks ... DONE
[16:10:37.128] future_lapply() ... DONE
[16:10:37.128] plan(): Setting new future strategy stack:
[16:10:37.128] List of future strategies:
[16:10:37.128] 1. sequential:
[16:10:37.128]    - args: function (..., envir = parent.frame())
[16:10:37.128]    - tweaked: FALSE
[16:10:37.128]    - call: plan(sequential)
[16:10:37.129] plan(): nbrOfWorkers() = 1
*** strategy = ‘multisession’ ... done
> 
> message("*** future_replicate() ... DONE")
*** future_replicate() ... DONE
> 
> source("incl/end.R")
[16:10:37.130] plan(): Setting new future strategy stack:
[16:10:37.130] List of future strategies:
[16:10:37.130] 1. FutureStrategy:
[16:10:37.130]    - args: function (..., envir = parent.frame())
[16:10:37.130]    - tweaked: FALSE
[16:10:37.130]    - call: future::plan(oplan)
[16:10:37.131] plan(): nbrOfWorkers() = 1
> 
