
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[17:40:28.351] plan(): Setting new future strategy stack:
[17:40:28.351] List of future strategies:
[17:40:28.351] 1. sequential:
[17:40:28.351]    - args: function (..., envir = parent.frame())
[17:40:28.351]    - tweaked: FALSE
[17:40:28.351]    - call: future::plan("sequential")
[17:40:28.362] plan(): nbrOfWorkers() = 1
> 
> message("*** future_replicate() ...")
*** future_replicate() ...
> 
> for (strategy in supportedStrategies()) {
+   message(sprintf("*** strategy = %s ...", sQuote(strategy)))
+   plan(strategy)
+   
+   y0 <- replicate(5L, sample(10L, size = 1L))
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(length(y0) == length(y1))
+   
+   set.seed(0xBEEF)
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   set.seed(0xBEEF)
+   y2 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(all.equal(y2, y1))
+   
+   y3 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   y4 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   stopifnot(all.equal(y4, y3))
+   
+   
+   message("- example(replicate) ...")
+   
+   foo <- function(x = 1, y = 2) c(x, y)
+   bar0 <- function(n, x) replicate(n, foo(x = x))
+   y0 <- bar0(5, x = 3)
+   
+   bar1 <- function(n, x) future_replicate(n, foo(x = x))
+   y1 <- bar1(5, x = 3)
+   stopifnot(all.equal(y1, y0))
+   
+   plan(sequential)
+   message(sprintf("*** strategy = %s ... done", sQuote(strategy)))
+ } ## for (strategy in ...) 
*** strategy = ‘sequential’ ...
[17:40:28.389] plan(): Setting new future strategy stack:
[17:40:28.389] List of future strategies:
[17:40:28.389] 1. sequential:
[17:40:28.389]    - args: function (..., envir = parent.frame())
[17:40:28.389]    - tweaked: FALSE
[17:40:28.389]    - call: plan(strategy)
[17:40:28.400] plan(): nbrOfWorkers() = 1
[17:40:28.402] future_lapply() ...
[17:40:28.406] Generating random seeds ...
[17:40:28.406] Generating random seed streams for 5 elements ...
[17:40:28.406] Generating random seed streams for 5 elements ... DONE
[17:40:28.406] Generating random seeds ... DONE
[17:40:28.406] Will set RNG state on exit: 10403, 7, 882691974, 1645298273, 250756083, 506564194, 1668339924, 623370711, 1704420301, -242538652, 1929089866, 301445813, 114221583, 649503510, 813092288, 1515351427, 1783145377, 1368923024, 607504494, 91131417, 2084449963, 1833906842, 12783196, -488608929, 1414726965, 2123666636, 1593286178, -483225475, 323324279, -704239970, -1668692648, 1340638395, -1629660583, -726965784, 1576104982, 114646929, -1597431741, 174049106, 817654756, 474501671, 1779960445, -1962323084, -356176038, -1021646427, -1448245825, -569903546, 838948048, -223998221, 1895184401, -2068038080, -218377698, 1609129193, 520037915, 1684231722, 769632588, 2010452751, 352626245, -1206943748, -1375664558, 849558477, -877300345, -1455099794, 591030344, -801985973, -41138263, -1907128584, 1841213990, -1852314815, 2026524883, -2133486462, 9867956, 1667196471, 1949469997, 208660036, -1542890646, 1650681813, 1666269551, 1073810550, 1581254560, -1811046301, 476144897, 236742768, -575089650, 381977721, -74730485, -590283462, 558808124, -440951937, -1958311723, 1029131500, -2047113662, 1458837917, 814619671, 544514430, 745912120, -658202597, -1694682759, 1596446664, -2065269770, 1174490673, -970520477, -1324152782, -1789950588, -408646713, 980803229, -1475676652, -171578182, 627685637, -1816806689, 604718950, -2049671440, -344775149, 328118193, 1031527008, 62883838, 327952265, -223842117, -538489718, 768225132, 77946095, 655537957, 1417101788, 72294322, 123840173, -1452335513, -1555718770, 245553768, 564106859, 1086664713, -34287976, -429958714, -266458847, 706144691, -888310494, -1573458156, -672270441, -1182034035, 1667058340, 763036810, 125377269, -775991985, -725194154, -1107306240, 1921489987, 1145556961, -928817328, 1735750062, 631340889, 1459582315, 1969052890, 1402934684, -1774462561, 1367899125, 257989260, 1627115362, -1313067203, 1857144759, -923712418, 1078851992, -1123508997, 95385753, -278484696, -1064071210, -487465903, 177223427, -437895534, 769088548, 191660775, -1804486851, 1533118388, 740117530, -1074383003, -874608129, -2090777466, -445044720, -1820312909, -1881065135, 1693587712, -1589519394, 845899817, -7561253, -52044566, 1938098828, 1528247759, -1562277499, 312955452, -1957099758, 1534938125, -1299380409, 1366271278, -291302264, 1102127499, 1714346345, 651645752, 340655590, 349047169, -1837581037, -633275710, -84859532, 1428116855, -531472787, 1792995588, -1670093782, 593402261, 557182511, 87952182, -1335536800, -1706354269, 1494452929, -1276026192, -734249522, -605777607, 112782667, 1795679994, 610805756, 1393207359, 701968661, -1344751060, 1830315778, 569795549, 233737943, -1212565058, 986856440, -1405857829, 1691640377, -184097912, 708313910, -1050967695, 1112546211, 97625740, -1455067716, 162713202, -1748755472, 2040108612, -2008127400, 2122520634, 1563056240, 1521461308, -988702444, 666407618, -1986848, 370792572, -2087702832, 237439394, -880746456, 930999052, -1584107076, 1152611122, -523617600, 1621230644, 1582057160, 172238010, -2125134192, 1990414060, 292129364, 266429074, 1962807584, -1588323892, -40824096, -1312274238, 1439634472, 130713516, -1631489348, -1792316430, -51843536, 541480868, -1930322504, 1874962266, 2017476752, -439348356, 1042759956, -1600313022, 114235648, 2038533564, 822749520, 940382498, 256418376, -571111412, -977082788, 1274943954, -546460160, 879611220, -1445266200, 1257322746, 242818768, -1523844308, -161355532, -1916911214, 1828619616, 1983898636, 1626266848, -295234974, 734082216, 1908040780, 1303531388, 1019341106, 1449681520, 1316066116, -1772983336, 1012333434, -1649706960, -58536004, -1472144812, 1977040962, -1048410464, 758739644, 357835728, 1349408098, -1995104536, -109298484, -712111620, -636973582, 2144885888, 622537204, 1515401864, -902218950, -2029337264, -579402644, -1028506220, 1255966802, -1064227360, 121611468, 1082478240, -2062745214, -253652760, -625841428, -1069286084, -764524430, 1591841392, -262923740, 1131792440, 913639706, 237450448, -1675187908, -1485999212, -700983422, -1956660288, -1047488964, 565662096, 469334050, -1861321464, 78137484, -108036324, -1858650990, 1870196096, 1719447572, -614258904, 403953210, -363353648, 1156202860, -1753928780, -773320174, 376883168, 792046028, -228734752, 539661346, 1268505384, -125109748, 121238332, 1697658866, 1806664432, -130876860, 290416216, -428783814, -1820551184, 1395870396, -2073758444, -1987134270, 1459702880, -466555524, -1902346288, 2068240674, 157404840, 432439180, -409615172, 1881015090, -1481464256, 48141492, 1763187784, 726588858, -608429552, 1767529708, 383500628, 721771282, 197338528, 1318343372, 2035636832, 1327159234, 1252922152, -1314520660, 1432364348, 698393458, 84874544, 1205550884, -1114213064, -1376790822, -1831004272, 1258021628, 1786723220, -1652685758, 166259968, -1552060356, 682122576, -644361054, -927052984, -352092404, -705855780, -2091309230, 1877071488, 535244884, -1067346968, -537261318, -1818534576, -990632148, -84538508, -563461230, -253560224, -1856000116, -715298976, 287345634, -588526680, 1800547532, -1232791044, -695541838, 619998704, -1118720572, -2026274472, -731523718, -562573904, -1768029252, -153372588, 1877979074, -1606784992, -1598750532, 498268752, 45537250, 212897384, -1437684148, 609458428, 1001455602, -1456720640, 250407796, -1656707064, 1570556346, 1140198864, 703357932, -664216684, 851807186, 654856032, 1295948108, 441028896, 17952642, 2031202024, 1652058348, 347692604, 1822970738, -1651705330, -1301681188, -614464435, -959031369, -2057533120, -1355739106, -1241549077, 163665517, -1112940838, -1123107176, -751770367, -1095120205, -1172118060, -964758302, -1398473353, -830184255, -1439557562, -293517436, -1068596939, -1804714209, -1204899208, 804128598, -1364392477, -1830888539, -237295038, 1056761904, -974451623, 140079563, 1250107964, -539866006, 310988447, 1946243881, -1945575490, -572707156, 105993213, -1953346745, -195400656, -2095022770, -1027951237, 2057220829, 1845121802, 301699624, 1683925649, 647174787, -1177138300, 1349079474, -475468025, 924822865, 1550410966, -692219468, -588814907, -419298033, -447757432, -633787738, -430237101, 1231868853, 694931730, -477949216, 1396684617, 729893243, -436632500, 406484442, 1332926415, 1338075545, -561657426, 1584285372, -121907411, 584381655, -232047328, -77608322, -1013214133, -1519741363, 527379578, -910848840, -1860999583, -151077869, -870786508, 841501762, -695786409, -912347231, 1498554470, -224290716, 504656789, 1612887231, -1109019560, 632811638, 405045379, -69332795, 1587752418, -1921821616, -909075079, -1198792021, -947987940, 220529994, 86252863, -1292166263, 269243294, -1751879092, 305165341, 583372199, 926859472, 1026257518, -723899109, 310851197, 1272968298, -918961912, 381654449, -522538461, 2087999268, 626192338, -1776976857, -601876879, -927281994, -702612396, 1984382181, 1592348911, -1430891480, -994959226, -1636853069, -142386155, -198558094, -1352033600, 496000809, 1882369435, -1097754004, -904950150, -1221558353, 1160972985, 1088906446, 138616348, -324926067, 1297269751, 1998268160, 1237208414, 1546466859, -906381011, -455129702, -1367207080, 1784826561, 1346583923, 1547558548, -1294525662, -482576841, 447410945, -1455146490, -1350268860, -894596747, -1103983393, -1011019720, 449624086, -1011349469, -1029818395, -1157901822, 1228607600, -1329093095, 1141618699, -422702340, 532923178, -1279662753, 681131241, 200391678, 609355756, -485334211, 1906110215, -2034718992, -630815090, 1491992763, -157260643, -1716873142, 808541271
[17:40:28.407] Number of chunks: 1
[17:40:28.407] getGlobalsAndPackagesXApply() ...
[17:40:28.408]  - future.globals: TRUE
[17:40:28.408] getGlobalsAndPackages() ...
[17:40:28.408] Searching for globals...
[17:40:28.411] - globals found: [2] ‘FUN’, ‘sample’
[17:40:28.411] Searching for globals ... DONE
[17:40:28.411] Resolving globals: FALSE
[17:40:28.412] The total size of the 1 globals is 616 bytes (616 bytes)
[17:40:28.412] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:40:28.413] - globals: [1] ‘FUN’
[17:40:28.413] 
[17:40:28.413] getGlobalsAndPackages() ... DONE
[17:40:28.413]  - globals found/used: [n=1] ‘FUN’
[17:40:28.413]  - needed namespaces: [n=0] 
[17:40:28.413] Finding globals ... DONE
[17:40:28.413]  - use_args: TRUE
[17:40:28.413]  - Getting '...' globals ...
[17:40:28.414] resolve() on list ...
[17:40:28.414]  recursive: 0
[17:40:28.414]  length: 1
[17:40:28.415]  elements: ‘...’
[17:40:28.415]  length: 0 (resolved future 1)
[17:40:28.415] resolve() on list ... DONE
[17:40:28.415]    - '...' content: [n=0] 
[17:40:28.415] List of 1
[17:40:28.415]  $ ...: list()
[17:40:28.415]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.415]  - attr(*, "where")=List of 1
[17:40:28.415]   ..$ ...:<environment: 0x558a3bfe01a8> 
[17:40:28.415]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.415]  - attr(*, "resolved")= logi TRUE
[17:40:28.415]  - attr(*, "total_size")= num NA
[17:40:28.422]  - Getting '...' globals ... DONE
[17:40:28.423] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:40:28.423] List of 2
[17:40:28.423]  $ ...future.FUN:function (...)  
[17:40:28.423]  $ ...          : list()
[17:40:28.423]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.423]  - attr(*, "where")=List of 2
[17:40:28.423]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:40:28.423]   ..$ ...          :<environment: 0x558a3bfe01a8> 
[17:40:28.423]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.423]  - attr(*, "resolved")= logi FALSE
[17:40:28.423]  - attr(*, "total_size")= num 616
[17:40:28.425] Packages to be attached in all futures: [n=0] 
[17:40:28.425] getGlobalsAndPackagesXApply() ... DONE
[17:40:28.426] Number of futures (= number of chunks): 1
[17:40:28.426] Launching 1 futures (chunks) ...
[17:40:28.426] Chunk #1 of 1 ...
[17:40:28.426]  - Finding globals in 'X' for chunk #1 ...
[17:40:28.426] getGlobalsAndPackages() ...
[17:40:28.427] Searching for globals...
[17:40:28.427] 
[17:40:28.427] Searching for globals ... DONE
[17:40:28.427] - globals: [0] <none>
[17:40:28.427] getGlobalsAndPackages() ... DONE
[17:40:28.427]    + additional globals found: [n=0] 
[17:40:28.427]    + additional namespaces needed: [n=0] 
[17:40:28.427]  - Finding globals in 'X' for chunk #1 ... DONE
[17:40:28.428]  - Adjusted option 'future.globals.maxSize': 524288000 -> 5 * 524288000 = 2621440000 (bytes)
[17:40:28.428]  - seeds: [5] <seeds>
[17:40:28.428] getGlobalsAndPackages() ...
[17:40:28.428] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.428] Resolving globals: FALSE
[17:40:28.428] Tweak future expression to call with '...' arguments ...
[17:40:28.428] {
[17:40:28.428]     do.call(function(...) {
[17:40:28.428]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.428]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.428]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.428]             on.exit(options(oopts), add = TRUE)
[17:40:28.428]         }
[17:40:28.428]         {
[17:40:28.428]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.428]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.428]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.428]                   envir = globalenv(), inherits = FALSE)
[17:40:28.428]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.428]             })
[17:40:28.428]         }
[17:40:28.428]     }, args = future.call.arguments)
[17:40:28.428] }
[17:40:28.429] Tweak future expression to call with '...' arguments ... DONE
[17:40:28.429] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.429] 
[17:40:28.429] getGlobalsAndPackages() ... DONE
[17:40:28.430] run() for ‘Future’ ...
[17:40:28.430] - state: ‘created’
[17:40:28.430] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:40:28.431] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:40:28.431] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:40:28.431]   - Field: ‘label’
[17:40:28.431]   - Field: ‘local’
[17:40:28.431]   - Field: ‘owner’
[17:40:28.431]   - Field: ‘envir’
[17:40:28.431]   - Field: ‘packages’
[17:40:28.431]   - Field: ‘gc’
[17:40:28.431]   - Field: ‘conditions’
[17:40:28.432]   - Field: ‘expr’
[17:40:28.432]   - Field: ‘uuid’
[17:40:28.432]   - Field: ‘seed’
[17:40:28.432]   - Field: ‘version’
[17:40:28.432]   - Field: ‘result’
[17:40:28.432]   - Field: ‘asynchronous’
[17:40:28.432]   - Field: ‘calls’
[17:40:28.432]   - Field: ‘globals’
[17:40:28.432]   - Field: ‘stdout’
[17:40:28.432]   - Field: ‘earlySignal’
[17:40:28.432]   - Field: ‘lazy’
[17:40:28.433]   - Field: ‘state’
[17:40:28.433] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:40:28.433] - Launch lazy future ...
[17:40:28.433] Packages needed by the future expression (n = 0): <none>
[17:40:28.434] Packages needed by future strategies (n = 0): <none>
[17:40:28.434] {
[17:40:28.434]     {
[17:40:28.434]         {
[17:40:28.434]             ...future.startTime <- base::Sys.time()
[17:40:28.434]             {
[17:40:28.434]                 {
[17:40:28.434]                   {
[17:40:28.434]                     base::local({
[17:40:28.434]                       has_future <- base::requireNamespace("future", 
[17:40:28.434]                         quietly = TRUE)
[17:40:28.434]                       if (has_future) {
[17:40:28.434]                         ns <- base::getNamespace("future")
[17:40:28.434]                         version <- ns[[".package"]][["version"]]
[17:40:28.434]                         if (is.null(version)) 
[17:40:28.434]                           version <- utils::packageVersion("future")
[17:40:28.434]                       }
[17:40:28.434]                       else {
[17:40:28.434]                         version <- NULL
[17:40:28.434]                       }
[17:40:28.434]                       if (!has_future || version < "1.8.0") {
[17:40:28.434]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:28.434]                           "", base::R.version$version.string), 
[17:40:28.434]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:28.434]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:28.434]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:28.434]                             "release", "version")], collapse = " "), 
[17:40:28.434]                           hostname = base::Sys.info()[["nodename"]])
[17:40:28.434]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:28.434]                           info)
[17:40:28.434]                         info <- base::paste(info, collapse = "; ")
[17:40:28.434]                         if (!has_future) {
[17:40:28.434]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:28.434]                             info)
[17:40:28.434]                         }
[17:40:28.434]                         else {
[17:40:28.434]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:28.434]                             info, version)
[17:40:28.434]                         }
[17:40:28.434]                         base::stop(msg)
[17:40:28.434]                       }
[17:40:28.434]                     })
[17:40:28.434]                   }
[17:40:28.434]                   options(future.plan = NULL)
[17:40:28.434]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.434]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:28.434]                 }
[17:40:28.434]                 ...future.workdir <- getwd()
[17:40:28.434]             }
[17:40:28.434]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:28.434]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:28.434]         }
[17:40:28.434]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:28.434]             future.globals.maxSize = 2621440000, future.globals.method = NULL, 
[17:40:28.434]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:28.434]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:28.434]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:28.434]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:28.434]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:28.434]             base::names(...future.oldOptions))
[17:40:28.434]     }
[17:40:28.434]     if (FALSE) {
[17:40:28.434]     }
[17:40:28.434]     else {
[17:40:28.434]         if (TRUE) {
[17:40:28.434]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:28.434]                 open = "w")
[17:40:28.434]         }
[17:40:28.434]         else {
[17:40:28.434]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:28.434]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:28.434]         }
[17:40:28.434]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:28.434]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:28.434]             base::sink(type = "output", split = FALSE)
[17:40:28.434]             base::close(...future.stdout)
[17:40:28.434]         }, add = TRUE)
[17:40:28.434]     }
[17:40:28.434]     ...future.frame <- base::sys.nframe()
[17:40:28.434]     ...future.conditions <- base::list()
[17:40:28.434]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:28.434]     if (FALSE) {
[17:40:28.434]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:28.434]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:28.434]     }
[17:40:28.434]     ...future.result <- base::tryCatch({
[17:40:28.434]         base::withCallingHandlers({
[17:40:28.434]             ...future.value <- base::withVisible(base::local({
[17:40:28.434]                 do.call(function(...) {
[17:40:28.434]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.434]                   if (!identical(...future.globals.maxSize.org, 
[17:40:28.434]                     ...future.globals.maxSize)) {
[17:40:28.434]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.434]                     on.exit(options(oopts), add = TRUE)
[17:40:28.434]                   }
[17:40:28.434]                   {
[17:40:28.434]                     lapply(seq_along(...future.elements_ii), 
[17:40:28.434]                       FUN = function(jj) {
[17:40:28.434]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.434]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.434]                           envir = globalenv(), inherits = FALSE)
[17:40:28.434]                         ...future.FUN(...future.X_jj, ...)
[17:40:28.434]                       })
[17:40:28.434]                   }
[17:40:28.434]                 }, args = future.call.arguments)
[17:40:28.434]             }))
[17:40:28.434]             future::FutureResult(value = ...future.value$value, 
[17:40:28.434]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.434]                   ...future.rng), globalenv = if (FALSE) 
[17:40:28.434]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:28.434]                     ...future.globalenv.names))
[17:40:28.434]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:28.434]         }, condition = base::local({
[17:40:28.434]             c <- base::c
[17:40:28.434]             inherits <- base::inherits
[17:40:28.434]             invokeRestart <- base::invokeRestart
[17:40:28.434]             length <- base::length
[17:40:28.434]             list <- base::list
[17:40:28.434]             seq.int <- base::seq.int
[17:40:28.434]             signalCondition <- base::signalCondition
[17:40:28.434]             sys.calls <- base::sys.calls
[17:40:28.434]             `[[` <- base::`[[`
[17:40:28.434]             `+` <- base::`+`
[17:40:28.434]             `<<-` <- base::`<<-`
[17:40:28.434]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:28.434]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:28.434]                   3L)]
[17:40:28.434]             }
[17:40:28.434]             function(cond) {
[17:40:28.434]                 is_error <- inherits(cond, "error")
[17:40:28.434]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:28.434]                   NULL)
[17:40:28.434]                 if (is_error) {
[17:40:28.434]                   sessionInformation <- function() {
[17:40:28.434]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:28.434]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:28.434]                       search = base::search(), system = base::Sys.info())
[17:40:28.434]                   }
[17:40:28.434]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.434]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:28.434]                     cond$call), session = sessionInformation(), 
[17:40:28.434]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:28.434]                   signalCondition(cond)
[17:40:28.434]                 }
[17:40:28.434]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:28.434]                 "immediateCondition"))) {
[17:40:28.434]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:28.434]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.434]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:28.434]                   if (TRUE && !signal) {
[17:40:28.434]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.434]                     {
[17:40:28.434]                       inherits <- base::inherits
[17:40:28.434]                       invokeRestart <- base::invokeRestart
[17:40:28.434]                       is.null <- base::is.null
[17:40:28.434]                       muffled <- FALSE
[17:40:28.434]                       if (inherits(cond, "message")) {
[17:40:28.434]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.434]                         if (muffled) 
[17:40:28.434]                           invokeRestart("muffleMessage")
[17:40:28.434]                       }
[17:40:28.434]                       else if (inherits(cond, "warning")) {
[17:40:28.434]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.434]                         if (muffled) 
[17:40:28.434]                           invokeRestart("muffleWarning")
[17:40:28.434]                       }
[17:40:28.434]                       else if (inherits(cond, "condition")) {
[17:40:28.434]                         if (!is.null(pattern)) {
[17:40:28.434]                           computeRestarts <- base::computeRestarts
[17:40:28.434]                           grepl <- base::grepl
[17:40:28.434]                           restarts <- computeRestarts(cond)
[17:40:28.434]                           for (restart in restarts) {
[17:40:28.434]                             name <- restart$name
[17:40:28.434]                             if (is.null(name)) 
[17:40:28.434]                               next
[17:40:28.434]                             if (!grepl(pattern, name)) 
[17:40:28.434]                               next
[17:40:28.434]                             invokeRestart(restart)
[17:40:28.434]                             muffled <- TRUE
[17:40:28.434]                             break
[17:40:28.434]                           }
[17:40:28.434]                         }
[17:40:28.434]                       }
[17:40:28.434]                       invisible(muffled)
[17:40:28.434]                     }
[17:40:28.434]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.434]                   }
[17:40:28.434]                 }
[17:40:28.434]                 else {
[17:40:28.434]                   if (TRUE) {
[17:40:28.434]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.434]                     {
[17:40:28.434]                       inherits <- base::inherits
[17:40:28.434]                       invokeRestart <- base::invokeRestart
[17:40:28.434]                       is.null <- base::is.null
[17:40:28.434]                       muffled <- FALSE
[17:40:28.434]                       if (inherits(cond, "message")) {
[17:40:28.434]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.434]                         if (muffled) 
[17:40:28.434]                           invokeRestart("muffleMessage")
[17:40:28.434]                       }
[17:40:28.434]                       else if (inherits(cond, "warning")) {
[17:40:28.434]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.434]                         if (muffled) 
[17:40:28.434]                           invokeRestart("muffleWarning")
[17:40:28.434]                       }
[17:40:28.434]                       else if (inherits(cond, "condition")) {
[17:40:28.434]                         if (!is.null(pattern)) {
[17:40:28.434]                           computeRestarts <- base::computeRestarts
[17:40:28.434]                           grepl <- base::grepl
[17:40:28.434]                           restarts <- computeRestarts(cond)
[17:40:28.434]                           for (restart in restarts) {
[17:40:28.434]                             name <- restart$name
[17:40:28.434]                             if (is.null(name)) 
[17:40:28.434]                               next
[17:40:28.434]                             if (!grepl(pattern, name)) 
[17:40:28.434]                               next
[17:40:28.434]                             invokeRestart(restart)
[17:40:28.434]                             muffled <- TRUE
[17:40:28.434]                             break
[17:40:28.434]                           }
[17:40:28.434]                         }
[17:40:28.434]                       }
[17:40:28.434]                       invisible(muffled)
[17:40:28.434]                     }
[17:40:28.434]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.434]                   }
[17:40:28.434]                 }
[17:40:28.434]             }
[17:40:28.434]         }))
[17:40:28.434]     }, error = function(ex) {
[17:40:28.434]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:28.434]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.434]                 ...future.rng), started = ...future.startTime, 
[17:40:28.434]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:28.434]             version = "1.8"), class = "FutureResult")
[17:40:28.434]     }, finally = {
[17:40:28.434]         if (!identical(...future.workdir, getwd())) 
[17:40:28.434]             setwd(...future.workdir)
[17:40:28.434]         {
[17:40:28.434]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:28.434]                 ...future.oldOptions$nwarnings <- NULL
[17:40:28.434]             }
[17:40:28.434]             base::options(...future.oldOptions)
[17:40:28.434]             if (.Platform$OS.type == "windows") {
[17:40:28.434]                 old_names <- names(...future.oldEnvVars)
[17:40:28.434]                 envs <- base::Sys.getenv()
[17:40:28.434]                 names <- names(envs)
[17:40:28.434]                 common <- intersect(names, old_names)
[17:40:28.434]                 added <- setdiff(names, old_names)
[17:40:28.434]                 removed <- setdiff(old_names, names)
[17:40:28.434]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:28.434]                   envs[common]]
[17:40:28.434]                 NAMES <- toupper(changed)
[17:40:28.434]                 args <- list()
[17:40:28.434]                 for (kk in seq_along(NAMES)) {
[17:40:28.434]                   name <- changed[[kk]]
[17:40:28.434]                   NAME <- NAMES[[kk]]
[17:40:28.434]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.434]                     next
[17:40:28.434]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.434]                 }
[17:40:28.434]                 NAMES <- toupper(added)
[17:40:28.434]                 for (kk in seq_along(NAMES)) {
[17:40:28.434]                   name <- added[[kk]]
[17:40:28.434]                   NAME <- NAMES[[kk]]
[17:40:28.434]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.434]                     next
[17:40:28.434]                   args[[name]] <- ""
[17:40:28.434]                 }
[17:40:28.434]                 NAMES <- toupper(removed)
[17:40:28.434]                 for (kk in seq_along(NAMES)) {
[17:40:28.434]                   name <- removed[[kk]]
[17:40:28.434]                   NAME <- NAMES[[kk]]
[17:40:28.434]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.434]                     next
[17:40:28.434]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.434]                 }
[17:40:28.434]                 if (length(args) > 0) 
[17:40:28.434]                   base::do.call(base::Sys.setenv, args = args)
[17:40:28.434]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:28.434]             }
[17:40:28.434]             else {
[17:40:28.434]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:28.434]             }
[17:40:28.434]             {
[17:40:28.434]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:28.434]                   0L) {
[17:40:28.434]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:28.434]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:28.434]                   base::options(opts)
[17:40:28.434]                 }
[17:40:28.434]                 {
[17:40:28.434]                   {
[17:40:28.434]                     base::assign(".Random.seed", c(10403L, 7L, 
[17:40:28.434]                     882691974L, 1645298273L, 250756083L, 506564194L, 
[17:40:28.434]                     1668339924L, 623370711L, 1704420301L, -242538652L, 
[17:40:28.434]                     1929089866L, 301445813L, 114221583L, 649503510L, 
[17:40:28.434]                     813092288L, 1515351427L, 1783145377L, 1368923024L, 
[17:40:28.434]                     607504494L, 91131417L, 2084449963L, 1833906842L, 
[17:40:28.434]                     12783196L, -488608929L, 1414726965L, 2123666636L, 
[17:40:28.434]                     1593286178L, -483225475L, 323324279L, -704239970L, 
[17:40:28.434]                     -1668692648L, 1340638395L, -1629660583L, 
[17:40:28.434]                     -726965784L, 1576104982L, 114646929L, -1597431741L, 
[17:40:28.434]                     174049106L, 817654756L, 474501671L, 1779960445L, 
[17:40:28.434]                     -1962323084L, -356176038L, -1021646427L, 
[17:40:28.434]                     -1448245825L, -569903546L, 838948048L, -223998221L, 
[17:40:28.434]                     1895184401L, -2068038080L, -218377698L, 1609129193L, 
[17:40:28.434]                     520037915L, 1684231722L, 769632588L, 2010452751L, 
[17:40:28.434]                     352626245L, -1206943748L, -1375664558L, 849558477L, 
[17:40:28.434]                     -877300345L, -1455099794L, 591030344L, -801985973L, 
[17:40:28.434]                     -41138263L, -1907128584L, 1841213990L, -1852314815L, 
[17:40:28.434]                     2026524883L, -2133486462L, 9867956L, 1667196471L, 
[17:40:28.434]                     1949469997L, 208660036L, -1542890646L, 1650681813L, 
[17:40:28.434]                     1666269551L, 1073810550L, 1581254560L, -1811046301L, 
[17:40:28.434]                     476144897L, 236742768L, -575089650L, 381977721L, 
[17:40:28.434]                     -74730485L, -590283462L, 558808124L, -440951937L, 
[17:40:28.434]                     -1958311723L, 1029131500L, -2047113662L, 
[17:40:28.434]                     1458837917L, 814619671L, 544514430L, 745912120L, 
[17:40:28.434]                     -658202597L, -1694682759L, 1596446664L, -2065269770L, 
[17:40:28.434]                     1174490673L, -970520477L, -1324152782L, -1789950588L, 
[17:40:28.434]                     -408646713L, 980803229L, -1475676652L, -171578182L, 
[17:40:28.434]                     627685637L, -1816806689L, 604718950L, -2049671440L, 
[17:40:28.434]                     -344775149L, 328118193L, 1031527008L, 62883838L, 
[17:40:28.434]                     327952265L, -223842117L, -538489718L, 768225132L, 
[17:40:28.434]                     77946095L, 655537957L, 1417101788L, 72294322L, 
[17:40:28.434]                     123840173L, -1452335513L, -1555718770L, 245553768L, 
[17:40:28.434]                     564106859L, 1086664713L, -34287976L, -429958714L, 
[17:40:28.434]                     -266458847L, 706144691L, -888310494L, -1573458156L, 
[17:40:28.434]                     -672270441L, -1182034035L, 1667058340L, 763036810L, 
[17:40:28.434]                     125377269L, -775991985L, -725194154L, -1107306240L, 
[17:40:28.434]                     1921489987L, 1145556961L, -928817328L, 1735750062L, 
[17:40:28.434]                     631340889L, 1459582315L, 1969052890L, 1402934684L, 
[17:40:28.434]                     -1774462561L, 1367899125L, 257989260L, 1627115362L, 
[17:40:28.434]                     -1313067203L, 1857144759L, -923712418L, 1078851992L, 
[17:40:28.434]                     -1123508997L, 95385753L, -278484696L, -1064071210L, 
[17:40:28.434]                     -487465903L, 177223427L, -437895534L, 769088548L, 
[17:40:28.434]                     191660775L, -1804486851L, 1533118388L, 740117530L, 
[17:40:28.434]                     -1074383003L, -874608129L, -2090777466L, 
[17:40:28.434]                     -445044720L, -1820312909L, -1881065135L, 
[17:40:28.434]                     1693587712L, -1589519394L, 845899817L, -7561253L, 
[17:40:28.434]                     -52044566L, 1938098828L, 1528247759L, -1562277499L, 
[17:40:28.434]                     312955452L, -1957099758L, 1534938125L, -1299380409L, 
[17:40:28.434]                     1366271278L, -291302264L, 1102127499L, 1714346345L, 
[17:40:28.434]                     651645752L, 340655590L, 349047169L, -1837581037L, 
[17:40:28.434]                     -633275710L, -84859532L, 1428116855L, -531472787L, 
[17:40:28.434]                     1792995588L, -1670093782L, 593402261L, 557182511L, 
[17:40:28.434]                     87952182L, -1335536800L, -1706354269L, 1494452929L, 
[17:40:28.434]                     -1276026192L, -734249522L, -605777607L, 112782667L, 
[17:40:28.434]                     1795679994L, 610805756L, 1393207359L, 701968661L, 
[17:40:28.434]                     -1344751060L, 1830315778L, 569795549L, 233737943L, 
[17:40:28.434]                     -1212565058L, 986856440L, -1405857829L, 1691640377L, 
[17:40:28.434]                     -184097912L, 708313910L, -1050967695L, 1112546211L, 
[17:40:28.434]                     97625740L, -1455067716L, 162713202L, -1748755472L, 
[17:40:28.434]                     2040108612L, -2008127400L, 2122520634L, 1563056240L, 
[17:40:28.434]                     1521461308L, -988702444L, 666407618L, -1986848L, 
[17:40:28.434]                     370792572L, -2087702832L, 237439394L, -880746456L, 
[17:40:28.434]                     930999052L, -1584107076L, 1152611122L, -523617600L, 
[17:40:28.434]                     1621230644L, 1582057160L, 172238010L, -2125134192L, 
[17:40:28.434]                     1990414060L, 292129364L, 266429074L, 1962807584L, 
[17:40:28.434]                     -1588323892L, -40824096L, -1312274238L, 1439634472L, 
[17:40:28.434]                     130713516L, -1631489348L, -1792316430L, -51843536L, 
[17:40:28.434]                     541480868L, -1930322504L, 1874962266L, 2017476752L, 
[17:40:28.434]                     -439348356L, 1042759956L, -1600313022L, 114235648L, 
[17:40:28.434]                     2038533564L, 822749520L, 940382498L, 256418376L, 
[17:40:28.434]                     -571111412L, -977082788L, 1274943954L, -546460160L, 
[17:40:28.434]                     879611220L, -1445266200L, 1257322746L, 242818768L, 
[17:40:28.434]                     -1523844308L, -161355532L, -1916911214L, 
[17:40:28.434]                     1828619616L, 1983898636L, 1626266848L, -295234974L, 
[17:40:28.434]                     734082216L, 1908040780L, 1303531388L, 1019341106L, 
[17:40:28.434]                     1449681520L, 1316066116L, -1772983336L, 1012333434L, 
[17:40:28.434]                     -1649706960L, -58536004L, -1472144812L, 1977040962L, 
[17:40:28.434]                     -1048410464L, 758739644L, 357835728L, 1349408098L, 
[17:40:28.434]                     -1995104536L, -109298484L, -712111620L, -636973582L, 
[17:40:28.434]                     2144885888L, 622537204L, 1515401864L, -902218950L, 
[17:40:28.434]                     -2029337264L, -579402644L, -1028506220L, 
[17:40:28.434]                     1255966802L, -1064227360L, 121611468L, 1082478240L, 
[17:40:28.434]                     -2062745214L, -253652760L, -625841428L, -1069286084L, 
[17:40:28.434]                     -764524430L, 1591841392L, -262923740L, 1131792440L, 
[17:40:28.434]                     913639706L, 237450448L, -1675187908L, -1485999212L, 
[17:40:28.434]                     -700983422L, -1956660288L, -1047488964L, 
[17:40:28.434]                     565662096L, 469334050L, -1861321464L, 78137484L, 
[17:40:28.434]                     -108036324L, -1858650990L, 1870196096L, 1719447572L, 
[17:40:28.434]                     -614258904L, 403953210L, -363353648L, 1156202860L, 
[17:40:28.434]                     -1753928780L, -773320174L, 376883168L, 792046028L, 
[17:40:28.434]                     -228734752L, 539661346L, 1268505384L, -125109748L, 
[17:40:28.434]                     121238332L, 1697658866L, 1806664432L, -130876860L, 
[17:40:28.434]                     290416216L, -428783814L, -1820551184L, 1395870396L, 
[17:40:28.434]                     -2073758444L, -1987134270L, 1459702880L, 
[17:40:28.434]                     -466555524L, -1902346288L, 2068240674L, 157404840L, 
[17:40:28.434]                     432439180L, -409615172L, 1881015090L, -1481464256L, 
[17:40:28.434]                     48141492L, 1763187784L, 726588858L, -608429552L, 
[17:40:28.434]                     1767529708L, 383500628L, 721771282L, 197338528L, 
[17:40:28.434]                     1318343372L, 2035636832L, 1327159234L, 1252922152L, 
[17:40:28.434]                     -1314520660L, 1432364348L, 698393458L, 84874544L, 
[17:40:28.434]                     1205550884L, -1114213064L, -1376790822L, 
[17:40:28.434]                     -1831004272L, 1258021628L, 1786723220L, -1652685758L, 
[17:40:28.434]                     166259968L, -1552060356L, 682122576L, -644361054L, 
[17:40:28.434]                     -927052984L, -352092404L, -705855780L, -2091309230L, 
[17:40:28.434]                     1877071488L, 535244884L, -1067346968L, -537261318L, 
[17:40:28.434]                     -1818534576L, -990632148L, -84538508L, -563461230L, 
[17:40:28.434]                     -253560224L, -1856000116L, -715298976L, 287345634L, 
[17:40:28.434]                     -588526680L, 1800547532L, -1232791044L, -695541838L, 
[17:40:28.434]                     619998704L, -1118720572L, -2026274472L, -731523718L, 
[17:40:28.434]                     -562573904L, -1768029252L, -153372588L, 1877979074L, 
[17:40:28.434]                     -1606784992L, -1598750532L, 498268752L, 45537250L, 
[17:40:28.434]                     212897384L, -1437684148L, 609458428L, 1001455602L, 
[17:40:28.434]                     -1456720640L, 250407796L, -1656707064L, 1570556346L, 
[17:40:28.434]                     1140198864L, 703357932L, -664216684L, 851807186L, 
[17:40:28.434]                     654856032L, 1295948108L, 441028896L, 17952642L, 
[17:40:28.434]                     2031202024L, 1652058348L, 347692604L, 1822970738L, 
[17:40:28.434]                     -1651705330L, -1301681188L, -614464435L, 
[17:40:28.434]                     -959031369L, -2057533120L, -1355739106L, 
[17:40:28.434]                     -1241549077L, 163665517L, -1112940838L, -1123107176L, 
[17:40:28.434]                     -751770367L, -1095120205L, -1172118060L, 
[17:40:28.434]                     -964758302L, -1398473353L, -830184255L, -1439557562L, 
[17:40:28.434]                     -293517436L, -1068596939L, -1804714209L, 
[17:40:28.434]                     -1204899208L, 804128598L, -1364392477L, -1830888539L, 
[17:40:28.434]                     -237295038L, 1056761904L, -974451623L, 140079563L, 
[17:40:28.434]                     1250107964L, -539866006L, 310988447L, 1946243881L, 
[17:40:28.434]                     -1945575490L, -572707156L, 105993213L, -1953346745L, 
[17:40:28.434]                     -195400656L, -2095022770L, -1027951237L, 
[17:40:28.434]                     2057220829L, 1845121802L, 301699624L, 1683925649L, 
[17:40:28.434]                     647174787L, -1177138300L, 1349079474L, -475468025L, 
[17:40:28.434]                     924822865L, 1550410966L, -692219468L, -588814907L, 
[17:40:28.434]                     -419298033L, -447757432L, -633787738L, -430237101L, 
[17:40:28.434]                     1231868853L, 694931730L, -477949216L, 1396684617L, 
[17:40:28.434]                     729893243L, -436632500L, 406484442L, 1332926415L, 
[17:40:28.434]                     1338075545L, -561657426L, 1584285372L, -121907411L, 
[17:40:28.434]                     584381655L, -232047328L, -77608322L, -1013214133L, 
[17:40:28.434]                     -1519741363L, 527379578L, -910848840L, -1860999583L, 
[17:40:28.434]                     -151077869L, -870786508L, 841501762L, -695786409L, 
[17:40:28.434]                     -912347231L, 1498554470L, -224290716L, 504656789L, 
[17:40:28.434]                     1612887231L, -1109019560L, 632811638L, 405045379L, 
[17:40:28.434]                     -69332795L, 1587752418L, -1921821616L, -909075079L, 
[17:40:28.434]                     -1198792021L, -947987940L, 220529994L, 86252863L, 
[17:40:28.434]                     -1292166263L, 269243294L, -1751879092L, 305165341L, 
[17:40:28.434]                     583372199L, 926859472L, 1026257518L, -723899109L, 
[17:40:28.434]                     310851197L, 1272968298L, -918961912L, 381654449L, 
[17:40:28.434]                     -522538461L, 2087999268L, 626192338L, -1776976857L, 
[17:40:28.434]                     -601876879L, -927281994L, -702612396L, 1984382181L, 
[17:40:28.434]                     1592348911L, -1430891480L, -994959226L, -1636853069L, 
[17:40:28.434]                     -142386155L, -198558094L, -1352033600L, 496000809L, 
[17:40:28.434]                     1882369435L, -1097754004L, -904950150L, -1221558353L, 
[17:40:28.434]                     1160972985L, 1088906446L, 138616348L, -324926067L, 
[17:40:28.434]                     1297269751L, 1998268160L, 1237208414L, 1546466859L, 
[17:40:28.434]                     -906381011L, -455129702L, -1367207080L, 1784826561L, 
[17:40:28.434]                     1346583923L, 1547558548L, -1294525662L, -482576841L, 
[17:40:28.434]                     447410945L, -1455146490L, -1350268860L, -894596747L, 
[17:40:28.434]                     -1103983393L, -1011019720L, 449624086L, -1011349469L, 
[17:40:28.434]                     -1029818395L, -1157901822L, 1228607600L, 
[17:40:28.434]                     -1329093095L, 1141618699L, -422702340L, 532923178L, 
[17:40:28.434]                     -1279662753L, 681131241L, 200391678L, 609355756L, 
[17:40:28.434]                     -485334211L, 1906110215L, -2034718992L, -630815090L, 
[17:40:28.434]                     1491992763L, -157260643L, -1716873142L, 808541271L
[17:40:28.434]                     ), envir = base::globalenv(), inherits = FALSE)
[17:40:28.434]                     NULL
[17:40:28.434]                   }
[17:40:28.434]                   options(future.plan = NULL)
[17:40:28.434]                   if (is.na(NA_character_)) 
[17:40:28.434]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.434]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:28.434]                   future::plan(list(function (..., envir = parent.frame()) 
[17:40:28.434]                   {
[17:40:28.434]                     future <- SequentialFuture(..., envir = envir)
[17:40:28.434]                     if (!future$lazy) 
[17:40:28.434]                       future <- run(future)
[17:40:28.434]                     invisible(future)
[17:40:28.434]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:28.434]                 }
[17:40:28.434]             }
[17:40:28.434]         }
[17:40:28.434]     })
[17:40:28.434]     if (TRUE) {
[17:40:28.434]         base::sink(type = "output", split = FALSE)
[17:40:28.434]         if (TRUE) {
[17:40:28.434]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:28.434]         }
[17:40:28.434]         else {
[17:40:28.434]             ...future.result["stdout"] <- base::list(NULL)
[17:40:28.434]         }
[17:40:28.434]         base::close(...future.stdout)
[17:40:28.434]         ...future.stdout <- NULL
[17:40:28.434]     }
[17:40:28.434]     ...future.result$conditions <- ...future.conditions
[17:40:28.434]     ...future.result$finished <- base::Sys.time()
[17:40:28.434]     ...future.result
[17:40:28.434] }
[17:40:28.437] assign_globals() ...
[17:40:28.437] List of 5
[17:40:28.437]  $ ...future.FUN            :function (...)  
[17:40:28.437]  $ future.call.arguments    : list()
[17:40:28.437]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.437]  $ ...future.elements_ii    :List of 5
[17:40:28.437]   ..$ : int 0
[17:40:28.437]   ..$ : int 0
[17:40:28.437]   ..$ : int 0
[17:40:28.437]   ..$ : int 0
[17:40:28.437]   ..$ : int 0
[17:40:28.437]  $ ...future.seeds_ii       :List of 5
[17:40:28.437]   ..$ : int [1:7] 10407 1007280353 1939596159 1694967749 -96803461 93942176 932698491
[17:40:28.437]   ..$ : int [1:7] 10407 -1208559903 -1052950387 -1526264655 -1803782214 -1265993193 -188105733
[17:40:28.437]   ..$ : int [1:7] 10407 1930616371 1393382697 -271454241 398661604 1872805378 -1042498548
[17:40:28.437]   ..$ : int [1:7] 10407 -1737029608 -1155826139 1072212704 -409442258 -797238702 -1712108304
[17:40:28.437]   ..$ : int [1:7] 10407 -959118697 -1936545983 -1535537690 -100912114 -1399836983 1726984080
[17:40:28.437]  $ ...future.globals.maxSize: NULL
[17:40:28.437]  - attr(*, "resolved")= logi FALSE
[17:40:28.437]  - attr(*, "total_size")= num 616
[17:40:28.437]  - attr(*, "where")=List of 5
[17:40:28.437]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:40:28.437]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:40:28.437]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:40:28.437]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:40:28.437]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:40:28.437]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.437]  - attr(*, "already-done")= logi TRUE
[17:40:28.445] - reassign environment for ‘...future.FUN’
[17:40:28.445] - copied ‘...future.FUN’ to environment
[17:40:28.445] - copied ‘future.call.arguments’ to environment
[17:40:28.445] - copied ‘...future.elements_ii’ to environment
[17:40:28.445] - copied ‘...future.seeds_ii’ to environment
[17:40:28.445] - copied ‘...future.globals.maxSize’ to environment
[17:40:28.445] assign_globals() ... done
[17:40:28.446] plan(): Setting new future strategy stack:
[17:40:28.446] List of future strategies:
[17:40:28.446] 1. sequential:
[17:40:28.446]    - args: function (..., envir = parent.frame())
[17:40:28.446]    - tweaked: FALSE
[17:40:28.446]    - call: NULL
[17:40:28.446] plan(): nbrOfWorkers() = 1
[17:40:28.447] plan(): Setting new future strategy stack:
[17:40:28.448] List of future strategies:
[17:40:28.448] 1. sequential:
[17:40:28.448]    - args: function (..., envir = parent.frame())
[17:40:28.448]    - tweaked: FALSE
[17:40:28.448]    - call: plan(strategy)
[17:40:28.448] plan(): nbrOfWorkers() = 1
[17:40:28.448] SequentialFuture started (and completed)
[17:40:28.449] - Launch lazy future ... done
[17:40:28.449] run() for ‘SequentialFuture’ ... done
[17:40:28.449] Created future:
[17:40:28.449] SequentialFuture:
[17:40:28.449] Label: ‘future_replicate-1’
[17:40:28.449] Expression:
[17:40:28.449] {
[17:40:28.449]     do.call(function(...) {
[17:40:28.449]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.449]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.449]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.449]             on.exit(options(oopts), add = TRUE)
[17:40:28.449]         }
[17:40:28.449]         {
[17:40:28.449]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.449]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.449]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.449]                   envir = globalenv(), inherits = FALSE)
[17:40:28.449]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.449]             })
[17:40:28.449]         }
[17:40:28.449]     }, args = future.call.arguments)
[17:40:28.449] }
[17:40:28.449] Lazy evaluation: FALSE
[17:40:28.449] Asynchronous evaluation: FALSE
[17:40:28.449] Local evaluation: TRUE
[17:40:28.449] Environment: R_GlobalEnv
[17:40:28.449] Capture standard output: TRUE
[17:40:28.449] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:28.449] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:28.449] Packages: <none>
[17:40:28.449] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:28.449] Resolved: TRUE
[17:40:28.449] Value: 280 bytes of class ‘list’
[17:40:28.449] Early signaling: FALSE
[17:40:28.449] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:28.449] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:40:28.453] Chunk #1 of 1 ... DONE
[17:40:28.453] Launching 1 futures (chunks) ... DONE
[17:40:28.453] Resolving 1 futures (chunks) ...
[17:40:28.453] resolve() on list ...
[17:40:28.453]  recursive: 0
[17:40:28.453]  length: 1
[17:40:28.453] 
[17:40:28.453] resolved() for ‘SequentialFuture’ ...
[17:40:28.453] - state: ‘finished’
[17:40:28.454] - run: TRUE
[17:40:28.454] - result: ‘FutureResult’
[17:40:28.454] resolved() for ‘SequentialFuture’ ... done
[17:40:28.454] Future #1
[17:40:28.454] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:40:28.455] - nx: 1
[17:40:28.455] - relay: TRUE
[17:40:28.455] - stdout: TRUE
[17:40:28.455] - signal: TRUE
[17:40:28.455] - resignal: FALSE
[17:40:28.455] - force: TRUE
[17:40:28.455] - relayed: [n=1] FALSE
[17:40:28.455] - queued futures: [n=1] FALSE
[17:40:28.455]  - until=1
[17:40:28.455]  - relaying element #1
[17:40:28.456] - relayed: [n=1] TRUE
[17:40:28.456] - queued futures: [n=1] TRUE
[17:40:28.456] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:40:28.456]  length: 0 (resolved future 1)
[17:40:28.456] Relaying remaining futures
[17:40:28.456] signalConditionsASAP(NULL, pos=0) ...
[17:40:28.456] - nx: 1
[17:40:28.456] - relay: TRUE
[17:40:28.456] - stdout: TRUE
[17:40:28.456] - signal: TRUE
[17:40:28.457] - resignal: FALSE
[17:40:28.457] - force: TRUE
[17:40:28.457] - relayed: [n=1] TRUE
[17:40:28.457] - queued futures: [n=1] TRUE
 - flush all
[17:40:28.457] - relayed: [n=1] TRUE
[17:40:28.457] - queued futures: [n=1] TRUE
[17:40:28.457] signalConditionsASAP(NULL, pos=0) ... done
[17:40:28.457] resolve() on list ... DONE
[17:40:28.457]  - Number of value chunks collected: 1
[17:40:28.457] Resolving 1 futures (chunks) ... DONE
[17:40:28.458] Reducing values from 1 chunks ...
[17:40:28.458]  - Number of values collected after concatenation: 5
[17:40:28.458]  - Number of values expected: 5
[17:40:28.458] Reducing values from 1 chunks ... DONE
[17:40:28.458] future_lapply() ... DONE
[17:40:28.458] future_lapply() ...
[17:40:28.459] Generating random seeds ...
[17:40:28.459] Generating random seed streams for 5 elements ...
[17:40:28.459] Generating random seed streams for 5 elements ... DONE
[17:40:28.459] Generating random seeds ... DONE
[17:40:28.459] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:40:28.460] Number of chunks: 1
[17:40:28.460] getGlobalsAndPackagesXApply() ...
[17:40:28.460]  - future.globals: TRUE
[17:40:28.460] getGlobalsAndPackages() ...
[17:40:28.460] Searching for globals...
[17:40:28.461] - globals found: [2] ‘FUN’, ‘sample’
[17:40:28.461] Searching for globals ... DONE
[17:40:28.461] Resolving globals: FALSE
[17:40:28.462] The total size of the 1 globals is 616 bytes (616 bytes)
[17:40:28.462] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:40:28.462] - globals: [1] ‘FUN’
[17:40:28.462] 
[17:40:28.462] getGlobalsAndPackages() ... DONE
[17:40:28.462]  - globals found/used: [n=1] ‘FUN’
[17:40:28.463]  - needed namespaces: [n=0] 
[17:40:28.463] Finding globals ... DONE
[17:40:28.463]  - use_args: TRUE
[17:40:28.463]  - Getting '...' globals ...
[17:40:28.463] resolve() on list ...
[17:40:28.463]  recursive: 0
[17:40:28.463]  length: 1
[17:40:28.463]  elements: ‘...’
[17:40:28.464]  length: 0 (resolved future 1)
[17:40:28.464] resolve() on list ... DONE
[17:40:28.464]    - '...' content: [n=0] 
[17:40:28.464] List of 1
[17:40:28.464]  $ ...: list()
[17:40:28.464]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.464]  - attr(*, "where")=List of 1
[17:40:28.464]   ..$ ...:<environment: 0x558a39cd11c0> 
[17:40:28.464]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.464]  - attr(*, "resolved")= logi TRUE
[17:40:28.464]  - attr(*, "total_size")= num NA
[17:40:28.466]  - Getting '...' globals ... DONE
[17:40:28.466] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:40:28.467] List of 2
[17:40:28.467]  $ ...future.FUN:function (...)  
[17:40:28.467]  $ ...          : list()
[17:40:28.467]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.467]  - attr(*, "where")=List of 2
[17:40:28.467]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:40:28.467]   ..$ ...          :<environment: 0x558a39cd11c0> 
[17:40:28.467]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.467]  - attr(*, "resolved")= logi FALSE
[17:40:28.467]  - attr(*, "total_size")= num 616
[17:40:28.469] Packages to be attached in all futures: [n=0] 
[17:40:28.469] getGlobalsAndPackagesXApply() ... DONE
[17:40:28.469] Number of futures (= number of chunks): 1
[17:40:28.470] Launching 1 futures (chunks) ...
[17:40:28.470] Chunk #1 of 1 ...
[17:40:28.470]  - Finding globals in 'X' for chunk #1 ...
[17:40:28.470] getGlobalsAndPackages() ...
[17:40:28.470] Searching for globals...
[17:40:28.470] 
[17:40:28.470] Searching for globals ... DONE
[17:40:28.470] - globals: [0] <none>
[17:40:28.470] getGlobalsAndPackages() ... DONE
[17:40:28.471]    + additional globals found: [n=0] 
[17:40:28.471]    + additional namespaces needed: [n=0] 
[17:40:28.471]  - Finding globals in 'X' for chunk #1 ... DONE
[17:40:28.471]  - Adjusted option 'future.globals.maxSize': 524288000 -> 5 * 524288000 = 2621440000 (bytes)
[17:40:28.471]  - seeds: [5] <seeds>
[17:40:28.471] getGlobalsAndPackages() ...
[17:40:28.471] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.471] Resolving globals: FALSE
[17:40:28.471] Tweak future expression to call with '...' arguments ...
[17:40:28.472] {
[17:40:28.472]     do.call(function(...) {
[17:40:28.472]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.472]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.472]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.472]             on.exit(options(oopts), add = TRUE)
[17:40:28.472]         }
[17:40:28.472]         {
[17:40:28.472]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.472]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.472]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.472]                   envir = globalenv(), inherits = FALSE)
[17:40:28.472]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.472]             })
[17:40:28.472]         }
[17:40:28.472]     }, args = future.call.arguments)
[17:40:28.472] }
[17:40:28.472] Tweak future expression to call with '...' arguments ... DONE
[17:40:28.472] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.472] 
[17:40:28.472] getGlobalsAndPackages() ... DONE
[17:40:28.473] run() for ‘Future’ ...
[17:40:28.473] - state: ‘created’
[17:40:28.473] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:40:28.473] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:40:28.473] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:40:28.474]   - Field: ‘label’
[17:40:28.474]   - Field: ‘local’
[17:40:28.474]   - Field: ‘owner’
[17:40:28.474]   - Field: ‘envir’
[17:40:28.474]   - Field: ‘packages’
[17:40:28.474]   - Field: ‘gc’
[17:40:28.474]   - Field: ‘conditions’
[17:40:28.474]   - Field: ‘expr’
[17:40:28.475]   - Field: ‘uuid’
[17:40:28.475]   - Field: ‘seed’
[17:40:28.475]   - Field: ‘version’
[17:40:28.475]   - Field: ‘result’
[17:40:28.475]   - Field: ‘asynchronous’
[17:40:28.475]   - Field: ‘calls’
[17:40:28.475]   - Field: ‘globals’
[17:40:28.475]   - Field: ‘stdout’
[17:40:28.475]   - Field: ‘earlySignal’
[17:40:28.475]   - Field: ‘lazy’
[17:40:28.475]   - Field: ‘state’
[17:40:28.476] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:40:28.476] - Launch lazy future ...
[17:40:28.476] Packages needed by the future expression (n = 0): <none>
[17:40:28.476] Packages needed by future strategies (n = 0): <none>
[17:40:28.478] {
[17:40:28.478]     {
[17:40:28.478]         {
[17:40:28.478]             ...future.startTime <- base::Sys.time()
[17:40:28.478]             {
[17:40:28.478]                 {
[17:40:28.478]                   {
[17:40:28.478]                     base::local({
[17:40:28.478]                       has_future <- base::requireNamespace("future", 
[17:40:28.478]                         quietly = TRUE)
[17:40:28.478]                       if (has_future) {
[17:40:28.478]                         ns <- base::getNamespace("future")
[17:40:28.478]                         version <- ns[[".package"]][["version"]]
[17:40:28.478]                         if (is.null(version)) 
[17:40:28.478]                           version <- utils::packageVersion("future")
[17:40:28.478]                       }
[17:40:28.478]                       else {
[17:40:28.478]                         version <- NULL
[17:40:28.478]                       }
[17:40:28.478]                       if (!has_future || version < "1.8.0") {
[17:40:28.478]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:28.478]                           "", base::R.version$version.string), 
[17:40:28.478]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:28.478]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:28.478]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:28.478]                             "release", "version")], collapse = " "), 
[17:40:28.478]                           hostname = base::Sys.info()[["nodename"]])
[17:40:28.478]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:28.478]                           info)
[17:40:28.478]                         info <- base::paste(info, collapse = "; ")
[17:40:28.478]                         if (!has_future) {
[17:40:28.478]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:28.478]                             info)
[17:40:28.478]                         }
[17:40:28.478]                         else {
[17:40:28.478]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:28.478]                             info, version)
[17:40:28.478]                         }
[17:40:28.478]                         base::stop(msg)
[17:40:28.478]                       }
[17:40:28.478]                     })
[17:40:28.478]                   }
[17:40:28.478]                   options(future.plan = NULL)
[17:40:28.478]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.478]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:28.478]                 }
[17:40:28.478]                 ...future.workdir <- getwd()
[17:40:28.478]             }
[17:40:28.478]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:28.478]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:28.478]         }
[17:40:28.478]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:28.478]             future.globals.maxSize = 2621440000, future.globals.method = NULL, 
[17:40:28.478]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:28.478]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:28.478]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:28.478]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:28.478]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:28.478]             base::names(...future.oldOptions))
[17:40:28.478]     }
[17:40:28.478]     if (FALSE) {
[17:40:28.478]     }
[17:40:28.478]     else {
[17:40:28.478]         if (TRUE) {
[17:40:28.478]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:28.478]                 open = "w")
[17:40:28.478]         }
[17:40:28.478]         else {
[17:40:28.478]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:28.478]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:28.478]         }
[17:40:28.478]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:28.478]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:28.478]             base::sink(type = "output", split = FALSE)
[17:40:28.478]             base::close(...future.stdout)
[17:40:28.478]         }, add = TRUE)
[17:40:28.478]     }
[17:40:28.478]     ...future.frame <- base::sys.nframe()
[17:40:28.478]     ...future.conditions <- base::list()
[17:40:28.478]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:28.478]     if (FALSE) {
[17:40:28.478]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:28.478]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:28.478]     }
[17:40:28.478]     ...future.result <- base::tryCatch({
[17:40:28.478]         base::withCallingHandlers({
[17:40:28.478]             ...future.value <- base::withVisible(base::local({
[17:40:28.478]                 do.call(function(...) {
[17:40:28.478]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.478]                   if (!identical(...future.globals.maxSize.org, 
[17:40:28.478]                     ...future.globals.maxSize)) {
[17:40:28.478]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.478]                     on.exit(options(oopts), add = TRUE)
[17:40:28.478]                   }
[17:40:28.478]                   {
[17:40:28.478]                     lapply(seq_along(...future.elements_ii), 
[17:40:28.478]                       FUN = function(jj) {
[17:40:28.478]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.478]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.478]                           envir = globalenv(), inherits = FALSE)
[17:40:28.478]                         ...future.FUN(...future.X_jj, ...)
[17:40:28.478]                       })
[17:40:28.478]                   }
[17:40:28.478]                 }, args = future.call.arguments)
[17:40:28.478]             }))
[17:40:28.478]             future::FutureResult(value = ...future.value$value, 
[17:40:28.478]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.478]                   ...future.rng), globalenv = if (FALSE) 
[17:40:28.478]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:28.478]                     ...future.globalenv.names))
[17:40:28.478]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:28.478]         }, condition = base::local({
[17:40:28.478]             c <- base::c
[17:40:28.478]             inherits <- base::inherits
[17:40:28.478]             invokeRestart <- base::invokeRestart
[17:40:28.478]             length <- base::length
[17:40:28.478]             list <- base::list
[17:40:28.478]             seq.int <- base::seq.int
[17:40:28.478]             signalCondition <- base::signalCondition
[17:40:28.478]             sys.calls <- base::sys.calls
[17:40:28.478]             `[[` <- base::`[[`
[17:40:28.478]             `+` <- base::`+`
[17:40:28.478]             `<<-` <- base::`<<-`
[17:40:28.478]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:28.478]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:28.478]                   3L)]
[17:40:28.478]             }
[17:40:28.478]             function(cond) {
[17:40:28.478]                 is_error <- inherits(cond, "error")
[17:40:28.478]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:28.478]                   NULL)
[17:40:28.478]                 if (is_error) {
[17:40:28.478]                   sessionInformation <- function() {
[17:40:28.478]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:28.478]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:28.478]                       search = base::search(), system = base::Sys.info())
[17:40:28.478]                   }
[17:40:28.478]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.478]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:28.478]                     cond$call), session = sessionInformation(), 
[17:40:28.478]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:28.478]                   signalCondition(cond)
[17:40:28.478]                 }
[17:40:28.478]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:28.478]                 "immediateCondition"))) {
[17:40:28.478]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:28.478]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.478]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:28.478]                   if (TRUE && !signal) {
[17:40:28.478]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.478]                     {
[17:40:28.478]                       inherits <- base::inherits
[17:40:28.478]                       invokeRestart <- base::invokeRestart
[17:40:28.478]                       is.null <- base::is.null
[17:40:28.478]                       muffled <- FALSE
[17:40:28.478]                       if (inherits(cond, "message")) {
[17:40:28.478]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.478]                         if (muffled) 
[17:40:28.478]                           invokeRestart("muffleMessage")
[17:40:28.478]                       }
[17:40:28.478]                       else if (inherits(cond, "warning")) {
[17:40:28.478]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.478]                         if (muffled) 
[17:40:28.478]                           invokeRestart("muffleWarning")
[17:40:28.478]                       }
[17:40:28.478]                       else if (inherits(cond, "condition")) {
[17:40:28.478]                         if (!is.null(pattern)) {
[17:40:28.478]                           computeRestarts <- base::computeRestarts
[17:40:28.478]                           grepl <- base::grepl
[17:40:28.478]                           restarts <- computeRestarts(cond)
[17:40:28.478]                           for (restart in restarts) {
[17:40:28.478]                             name <- restart$name
[17:40:28.478]                             if (is.null(name)) 
[17:40:28.478]                               next
[17:40:28.478]                             if (!grepl(pattern, name)) 
[17:40:28.478]                               next
[17:40:28.478]                             invokeRestart(restart)
[17:40:28.478]                             muffled <- TRUE
[17:40:28.478]                             break
[17:40:28.478]                           }
[17:40:28.478]                         }
[17:40:28.478]                       }
[17:40:28.478]                       invisible(muffled)
[17:40:28.478]                     }
[17:40:28.478]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.478]                   }
[17:40:28.478]                 }
[17:40:28.478]                 else {
[17:40:28.478]                   if (TRUE) {
[17:40:28.478]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.478]                     {
[17:40:28.478]                       inherits <- base::inherits
[17:40:28.478]                       invokeRestart <- base::invokeRestart
[17:40:28.478]                       is.null <- base::is.null
[17:40:28.478]                       muffled <- FALSE
[17:40:28.478]                       if (inherits(cond, "message")) {
[17:40:28.478]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.478]                         if (muffled) 
[17:40:28.478]                           invokeRestart("muffleMessage")
[17:40:28.478]                       }
[17:40:28.478]                       else if (inherits(cond, "warning")) {
[17:40:28.478]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.478]                         if (muffled) 
[17:40:28.478]                           invokeRestart("muffleWarning")
[17:40:28.478]                       }
[17:40:28.478]                       else if (inherits(cond, "condition")) {
[17:40:28.478]                         if (!is.null(pattern)) {
[17:40:28.478]                           computeRestarts <- base::computeRestarts
[17:40:28.478]                           grepl <- base::grepl
[17:40:28.478]                           restarts <- computeRestarts(cond)
[17:40:28.478]                           for (restart in restarts) {
[17:40:28.478]                             name <- restart$name
[17:40:28.478]                             if (is.null(name)) 
[17:40:28.478]                               next
[17:40:28.478]                             if (!grepl(pattern, name)) 
[17:40:28.478]                               next
[17:40:28.478]                             invokeRestart(restart)
[17:40:28.478]                             muffled <- TRUE
[17:40:28.478]                             break
[17:40:28.478]                           }
[17:40:28.478]                         }
[17:40:28.478]                       }
[17:40:28.478]                       invisible(muffled)
[17:40:28.478]                     }
[17:40:28.478]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.478]                   }
[17:40:28.478]                 }
[17:40:28.478]             }
[17:40:28.478]         }))
[17:40:28.478]     }, error = function(ex) {
[17:40:28.478]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:28.478]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.478]                 ...future.rng), started = ...future.startTime, 
[17:40:28.478]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:28.478]             version = "1.8"), class = "FutureResult")
[17:40:28.478]     }, finally = {
[17:40:28.478]         if (!identical(...future.workdir, getwd())) 
[17:40:28.478]             setwd(...future.workdir)
[17:40:28.478]         {
[17:40:28.478]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:28.478]                 ...future.oldOptions$nwarnings <- NULL
[17:40:28.478]             }
[17:40:28.478]             base::options(...future.oldOptions)
[17:40:28.478]             if (.Platform$OS.type == "windows") {
[17:40:28.478]                 old_names <- names(...future.oldEnvVars)
[17:40:28.478]                 envs <- base::Sys.getenv()
[17:40:28.478]                 names <- names(envs)
[17:40:28.478]                 common <- intersect(names, old_names)
[17:40:28.478]                 added <- setdiff(names, old_names)
[17:40:28.478]                 removed <- setdiff(old_names, names)
[17:40:28.478]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:28.478]                   envs[common]]
[17:40:28.478]                 NAMES <- toupper(changed)
[17:40:28.478]                 args <- list()
[17:40:28.478]                 for (kk in seq_along(NAMES)) {
[17:40:28.478]                   name <- changed[[kk]]
[17:40:28.478]                   NAME <- NAMES[[kk]]
[17:40:28.478]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.478]                     next
[17:40:28.478]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.478]                 }
[17:40:28.478]                 NAMES <- toupper(added)
[17:40:28.478]                 for (kk in seq_along(NAMES)) {
[17:40:28.478]                   name <- added[[kk]]
[17:40:28.478]                   NAME <- NAMES[[kk]]
[17:40:28.478]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.478]                     next
[17:40:28.478]                   args[[name]] <- ""
[17:40:28.478]                 }
[17:40:28.478]                 NAMES <- toupper(removed)
[17:40:28.478]                 for (kk in seq_along(NAMES)) {
[17:40:28.478]                   name <- removed[[kk]]
[17:40:28.478]                   NAME <- NAMES[[kk]]
[17:40:28.478]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.478]                     next
[17:40:28.478]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.478]                 }
[17:40:28.478]                 if (length(args) > 0) 
[17:40:28.478]                   base::do.call(base::Sys.setenv, args = args)
[17:40:28.478]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:28.478]             }
[17:40:28.478]             else {
[17:40:28.478]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:28.478]             }
[17:40:28.478]             {
[17:40:28.478]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:28.478]                   0L) {
[17:40:28.478]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:28.478]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:28.478]                   base::options(opts)
[17:40:28.478]                 }
[17:40:28.478]                 {
[17:40:28.478]                   {
[17:40:28.478]                     base::assign(".Random.seed", c(10403L, 2L, 
[17:40:28.478]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[17:40:28.478]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[17:40:28.478]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[17:40:28.478]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[17:40:28.478]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[17:40:28.478]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[17:40:28.478]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[17:40:28.478]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[17:40:28.478]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[17:40:28.478]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[17:40:28.478]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[17:40:28.478]                     -1512233174L, -1985955764L, -425390065L, 
[17:40:28.478]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[17:40:28.478]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[17:40:28.478]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[17:40:28.478]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[17:40:28.478]                     1818328109L, -1284085436L, -1981489558L, 
[17:40:28.478]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[17:40:28.478]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[17:40:28.478]                     -1718567047L, -793788661L, -1133789126L, 
[17:40:28.478]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[17:40:28.478]                     -1823521982L, -1345991523L, -1672661737L, 
[17:40:28.478]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[17:40:28.478]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[17:40:28.478]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[17:40:28.478]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[17:40:28.478]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[17:40:28.478]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[17:40:28.478]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[17:40:28.478]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[17:40:28.478]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[17:40:28.478]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[17:40:28.478]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[17:40:28.478]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[17:40:28.478]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[17:40:28.478]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[17:40:28.478]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[17:40:28.478]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[17:40:28.478]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[17:40:28.478]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[17:40:28.478]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[17:40:28.478]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[17:40:28.478]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[17:40:28.478]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[17:40:28.478]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[17:40:28.478]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[17:40:28.478]                     -1119334354L, -1521015416L, -2041922421L, 
[17:40:28.478]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[17:40:28.478]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[17:40:28.478]                     1232111981L, -1801753084L, -1608606422L, 
[17:40:28.478]                     -1172096363L, 1420874031L, -1210473418L, 
[17:40:28.478]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[17:40:28.478]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[17:40:28.478]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[17:40:28.478]                     679371266L, -591318819L, -104578089L, -172818754L, 
[17:40:28.478]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[17:40:28.478]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[17:40:28.478]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[17:40:28.478]                     -332493318L, -1978392251L, -1691039632L, 
[17:40:28.478]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[17:40:28.478]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[17:40:28.478]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[17:40:28.478]                     87560756L, -87565624L, 426345146L, -699970416L, 
[17:40:28.478]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[17:40:28.478]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[17:40:28.478]                     -1178330196L, -687617348L, -1701912078L, 
[17:40:28.478]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[17:40:28.478]                     -1345416048L, 1816730492L, -1570431212L, 
[17:40:28.478]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[17:40:28.478]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[17:40:28.478]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[17:40:28.478]                     -1493184262L, -1943836976L, -590788308L, 
[17:40:28.478]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[17:40:28.478]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[17:40:28.478]                     1274857340L, -1205842638L, -1938479504L, 
[17:40:28.478]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[17:40:28.478]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[17:40:28.478]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[17:40:28.478]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[17:40:28.478]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[17:40:28.478]                     -1460751252L, 1201879444L, -1459788718L, 
[17:40:28.478]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[17:40:28.478]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[17:40:28.478]                     -420945808L, -1997735900L, -1838404552L, 
[17:40:28.478]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[17:40:28.478]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[17:40:28.478]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[17:40:28.478]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[17:40:28.478]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[17:40:28.478]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[17:40:28.478]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[17:40:28.478]                     942193650L, 751741680L, 689743428L, -18455976L, 
[17:40:28.478]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[17:40:28.478]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[17:40:28.478]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[17:40:28.478]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[17:40:28.478]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[17:40:28.478]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[17:40:28.478]                     -1357570110L, 1896595240L, -2066952276L, 
[17:40:28.478]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[17:40:28.478]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[17:40:28.478]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[17:40:28.478]                     769655120L, 236357794L, 181393736L, -13334772L, 
[17:40:28.478]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[17:40:28.478]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[17:40:28.478]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[17:40:28.478]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[17:40:28.478]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[17:40:28.478]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[17:40:28.478]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[17:40:28.478]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[17:40:28.478]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[17:40:28.478]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[17:40:28.478]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[17:40:28.478]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[17:40:28.478]                     -1365842884L, -438961294L, -1851472272L, 
[17:40:28.478]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[17:40:28.478]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[17:40:28.478]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[17:40:28.478]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[17:40:28.478]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[17:40:28.478]                     -594809770L, -2146766621L, -2013964635L, 
[17:40:28.478]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[17:40:28.478]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[17:40:28.478]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[17:40:28.478]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[17:40:28.478]                     -1426021878L, -1285634264L, 1507547537L, 
[17:40:28.478]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[17:40:28.478]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[17:40:28.478]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[17:40:28.478]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[17:40:28.478]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[17:40:28.478]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[17:40:28.478]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[17:40:28.478]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[17:40:28.478]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[17:40:28.478]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[17:40:28.478]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[17:40:28.478]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[17:40:28.478]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[17:40:28.478]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[17:40:28.478]                     -1604604761L, 1421229008L, -1268333714L, 
[17:40:28.478]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[17:40:28.478]                     -2070476623L, -2099222749L, 1141171236L, 
[17:40:28.478]                     -146426158L, -1797385433L, -1129376399L, 
[17:40:28.478]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[17:40:28.478]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[17:40:28.478]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[17:40:28.478]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[17:40:28.478]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[17:40:28.478]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[17:40:28.478]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[17:40:28.478]                     -1092079724L, -1765622238L, -1882554057L, 
[17:40:28.478]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[17:40:28.478]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[17:40:28.478]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[17:40:28.478]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[17:40:28.478]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[17:40:28.478]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[17:40:28.478]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[17:40:28.478]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[17:40:28.478]                     865377681L, -1127426242L), envir = base::globalenv(), 
[17:40:28.478]                       inherits = FALSE)
[17:40:28.478]                     NULL
[17:40:28.478]                   }
[17:40:28.478]                   options(future.plan = NULL)
[17:40:28.478]                   if (is.na(NA_character_)) 
[17:40:28.478]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.478]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:28.478]                   future::plan(list(function (..., envir = parent.frame()) 
[17:40:28.478]                   {
[17:40:28.478]                     future <- SequentialFuture(..., envir = envir)
[17:40:28.478]                     if (!future$lazy) 
[17:40:28.478]                       future <- run(future)
[17:40:28.478]                     invisible(future)
[17:40:28.478]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:28.478]                 }
[17:40:28.478]             }
[17:40:28.478]         }
[17:40:28.478]     })
[17:40:28.478]     if (TRUE) {
[17:40:28.478]         base::sink(type = "output", split = FALSE)
[17:40:28.478]         if (TRUE) {
[17:40:28.478]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:28.478]         }
[17:40:28.478]         else {
[17:40:28.478]             ...future.result["stdout"] <- base::list(NULL)
[17:40:28.478]         }
[17:40:28.478]         base::close(...future.stdout)
[17:40:28.478]         ...future.stdout <- NULL
[17:40:28.478]     }
[17:40:28.478]     ...future.result$conditions <- ...future.conditions
[17:40:28.478]     ...future.result$finished <- base::Sys.time()
[17:40:28.478]     ...future.result
[17:40:28.478] }
[17:40:28.481] assign_globals() ...
[17:40:28.481] List of 5
[17:40:28.481]  $ ...future.FUN            :function (...)  
[17:40:28.481]  $ future.call.arguments    : list()
[17:40:28.481]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.481]  $ ...future.elements_ii    :List of 5
[17:40:28.481]   ..$ : int 0
[17:40:28.481]   ..$ : int 0
[17:40:28.481]   ..$ : int 0
[17:40:28.481]   ..$ : int 0
[17:40:28.481]   ..$ : int 0
[17:40:28.481]  $ ...future.seeds_ii       :List of 5
[17:40:28.481]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[17:40:28.481]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[17:40:28.481]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[17:40:28.481]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[17:40:28.481]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[17:40:28.481]  $ ...future.globals.maxSize: NULL
[17:40:28.481]  - attr(*, "resolved")= logi FALSE
[17:40:28.481]  - attr(*, "total_size")= num 616
[17:40:28.481]  - attr(*, "where")=List of 5
[17:40:28.481]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:40:28.481]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:40:28.481]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:40:28.481]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:40:28.481]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:40:28.481]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.481]  - attr(*, "already-done")= logi TRUE
[17:40:28.488] - reassign environment for ‘...future.FUN’
[17:40:28.488] - copied ‘...future.FUN’ to environment
[17:40:28.488] - copied ‘future.call.arguments’ to environment
[17:40:28.489] - copied ‘...future.elements_ii’ to environment
[17:40:28.489] - copied ‘...future.seeds_ii’ to environment
[17:40:28.489] - copied ‘...future.globals.maxSize’ to environment
[17:40:28.489] assign_globals() ... done
[17:40:28.489] plan(): Setting new future strategy stack:
[17:40:28.489] List of future strategies:
[17:40:28.489] 1. sequential:
[17:40:28.489]    - args: function (..., envir = parent.frame())
[17:40:28.489]    - tweaked: FALSE
[17:40:28.489]    - call: NULL
[17:40:28.490] plan(): nbrOfWorkers() = 1
[17:40:28.490] plan(): Setting new future strategy stack:
[17:40:28.490] List of future strategies:
[17:40:28.490] 1. sequential:
[17:40:28.490]    - args: function (..., envir = parent.frame())
[17:40:28.490]    - tweaked: FALSE
[17:40:28.490]    - call: plan(strategy)
[17:40:28.491] plan(): nbrOfWorkers() = 1
[17:40:28.491] SequentialFuture started (and completed)
[17:40:28.491] - Launch lazy future ... done
[17:40:28.491] run() for ‘SequentialFuture’ ... done
[17:40:28.491] Created future:
[17:40:28.491] SequentialFuture:
[17:40:28.491] Label: ‘future_replicate-1’
[17:40:28.491] Expression:
[17:40:28.491] {
[17:40:28.491]     do.call(function(...) {
[17:40:28.491]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.491]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.491]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.491]             on.exit(options(oopts), add = TRUE)
[17:40:28.491]         }
[17:40:28.491]         {
[17:40:28.491]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.491]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.491]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.491]                   envir = globalenv(), inherits = FALSE)
[17:40:28.491]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.491]             })
[17:40:28.491]         }
[17:40:28.491]     }, args = future.call.arguments)
[17:40:28.491] }
[17:40:28.491] Lazy evaluation: FALSE
[17:40:28.491] Asynchronous evaluation: FALSE
[17:40:28.491] Local evaluation: TRUE
[17:40:28.491] Environment: R_GlobalEnv
[17:40:28.491] Capture standard output: TRUE
[17:40:28.491] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:28.491] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:28.491] Packages: <none>
[17:40:28.491] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:28.491] Resolved: TRUE
[17:40:28.491] Value: 280 bytes of class ‘list’
[17:40:28.491] Early signaling: FALSE
[17:40:28.491] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:28.491] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:40:28.493] Chunk #1 of 1 ... DONE
[17:40:28.493] Launching 1 futures (chunks) ... DONE
[17:40:28.493] Resolving 1 futures (chunks) ...
[17:40:28.493] resolve() on list ...
[17:40:28.493]  recursive: 0
[17:40:28.493]  length: 1
[17:40:28.493] 
[17:40:28.493] resolved() for ‘SequentialFuture’ ...
[17:40:28.493] - state: ‘finished’
[17:40:28.493] - run: TRUE
[17:40:28.494] - result: ‘FutureResult’
[17:40:28.494] resolved() for ‘SequentialFuture’ ... done
[17:40:28.494] Future #1
[17:40:28.494] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:40:28.494] - nx: 1
[17:40:28.494] - relay: TRUE
[17:40:28.494] - stdout: TRUE
[17:40:28.494] - signal: TRUE
[17:40:28.494] - resignal: FALSE
[17:40:28.494] - force: TRUE
[17:40:28.495] - relayed: [n=1] FALSE
[17:40:28.495] - queued futures: [n=1] FALSE
[17:40:28.495]  - until=1
[17:40:28.495]  - relaying element #1
[17:40:28.495] - relayed: [n=1] TRUE
[17:40:28.495] - queued futures: [n=1] TRUE
[17:40:28.495] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:40:28.495]  length: 0 (resolved future 1)
[17:40:28.495] Relaying remaining futures
[17:40:28.496] signalConditionsASAP(NULL, pos=0) ...
[17:40:28.496] - nx: 1
[17:40:28.496] - relay: TRUE
[17:40:28.496] - stdout: TRUE
[17:40:28.496] - signal: TRUE
[17:40:28.496] - resignal: FALSE
[17:40:28.496] - force: TRUE
[17:40:28.496] - relayed: [n=1] TRUE
[17:40:28.496] - queued futures: [n=1] TRUE
 - flush all
[17:40:28.496] - relayed: [n=1] TRUE
[17:40:28.497] - queued futures: [n=1] TRUE
[17:40:28.497] signalConditionsASAP(NULL, pos=0) ... done
[17:40:28.497] resolve() on list ... DONE
[17:40:28.497]  - Number of value chunks collected: 1
[17:40:28.497] Resolving 1 futures (chunks) ... DONE
[17:40:28.497] Reducing values from 1 chunks ...
[17:40:28.497]  - Number of values collected after concatenation: 5
[17:40:28.497]  - Number of values expected: 5
[17:40:28.497] Reducing values from 1 chunks ... DONE
[17:40:28.498] future_lapply() ... DONE
[17:40:28.498] future_lapply() ...
[17:40:28.498] Generating random seeds ...
[17:40:28.498] Generating random seed streams for 5 elements ...
[17:40:28.498] Generating random seed streams for 5 elements ... DONE
[17:40:28.499] Generating random seeds ... DONE
[17:40:28.499] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:40:28.499] Number of chunks: 1
[17:40:28.499] getGlobalsAndPackagesXApply() ...
[17:40:28.500]  - future.globals: TRUE
[17:40:28.500] getGlobalsAndPackages() ...
[17:40:28.500] Searching for globals...
[17:40:28.501] - globals found: [2] ‘FUN’, ‘sample’
[17:40:28.501] Searching for globals ... DONE
[17:40:28.501] Resolving globals: FALSE
[17:40:28.502] The total size of the 1 globals is 616 bytes (616 bytes)
[17:40:28.502] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:40:28.502] - globals: [1] ‘FUN’
[17:40:28.502] 
[17:40:28.502] getGlobalsAndPackages() ... DONE
[17:40:28.502]  - globals found/used: [n=1] ‘FUN’
[17:40:28.502]  - needed namespaces: [n=0] 
[17:40:28.503] Finding globals ... DONE
[17:40:28.503]  - use_args: TRUE
[17:40:28.503]  - Getting '...' globals ...
[17:40:28.503] resolve() on list ...
[17:40:28.503]  recursive: 0
[17:40:28.503]  length: 1
[17:40:28.503]  elements: ‘...’
[17:40:28.503]  length: 0 (resolved future 1)
[17:40:28.504] resolve() on list ... DONE
[17:40:28.504]    - '...' content: [n=0] 
[17:40:28.504] List of 1
[17:40:28.504]  $ ...: list()
[17:40:28.504]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.504]  - attr(*, "where")=List of 1
[17:40:28.504]   ..$ ...:<environment: 0x558a3beee030> 
[17:40:28.504]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.504]  - attr(*, "resolved")= logi TRUE
[17:40:28.504]  - attr(*, "total_size")= num NA
[17:40:28.508]  - Getting '...' globals ... DONE
[17:40:28.508] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:40:28.508] List of 2
[17:40:28.508]  $ ...future.FUN:function (...)  
[17:40:28.508]  $ ...          : list()
[17:40:28.508]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.508]  - attr(*, "where")=List of 2
[17:40:28.508]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:40:28.508]   ..$ ...          :<environment: 0x558a3beee030> 
[17:40:28.508]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.508]  - attr(*, "resolved")= logi FALSE
[17:40:28.508]  - attr(*, "total_size")= num 616
[17:40:28.511] Packages to be attached in all futures: [n=0] 
[17:40:28.511] getGlobalsAndPackagesXApply() ... DONE
[17:40:28.511] Number of futures (= number of chunks): 1
[17:40:28.512] Launching 1 futures (chunks) ...
[17:40:28.512] Chunk #1 of 1 ...
[17:40:28.512]  - Finding globals in 'X' for chunk #1 ...
[17:40:28.512] getGlobalsAndPackages() ...
[17:40:28.512] Searching for globals...
[17:40:28.512] 
[17:40:28.512] Searching for globals ... DONE
[17:40:28.512] - globals: [0] <none>
[17:40:28.512] getGlobalsAndPackages() ... DONE
[17:40:28.513]    + additional globals found: [n=0] 
[17:40:28.513]    + additional namespaces needed: [n=0] 
[17:40:28.513]  - Finding globals in 'X' for chunk #1 ... DONE
[17:40:28.513]  - Adjusted option 'future.globals.maxSize': 524288000 -> 5 * 524288000 = 2621440000 (bytes)
[17:40:28.513]  - seeds: [5] <seeds>
[17:40:28.513] getGlobalsAndPackages() ...
[17:40:28.513] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.513] Resolving globals: FALSE
[17:40:28.513] Tweak future expression to call with '...' arguments ...
[17:40:28.514] {
[17:40:28.514]     do.call(function(...) {
[17:40:28.514]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.514]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.514]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.514]             on.exit(options(oopts), add = TRUE)
[17:40:28.514]         }
[17:40:28.514]         {
[17:40:28.514]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.514]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.514]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.514]                   envir = globalenv(), inherits = FALSE)
[17:40:28.514]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.514]             })
[17:40:28.514]         }
[17:40:28.514]     }, args = future.call.arguments)
[17:40:28.514] }
[17:40:28.514] Tweak future expression to call with '...' arguments ... DONE
[17:40:28.514] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.514] 
[17:40:28.514] getGlobalsAndPackages() ... DONE
[17:40:28.515] run() for ‘Future’ ...
[17:40:28.515] - state: ‘created’
[17:40:28.515] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:40:28.515] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:40:28.515] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:40:28.515]   - Field: ‘label’
[17:40:28.515]   - Field: ‘local’
[17:40:28.516]   - Field: ‘owner’
[17:40:28.516]   - Field: ‘envir’
[17:40:28.516]   - Field: ‘packages’
[17:40:28.516]   - Field: ‘gc’
[17:40:28.516]   - Field: ‘conditions’
[17:40:28.516]   - Field: ‘expr’
[17:40:28.516]   - Field: ‘uuid’
[17:40:28.516]   - Field: ‘seed’
[17:40:28.516]   - Field: ‘version’
[17:40:28.516]   - Field: ‘result’
[17:40:28.517]   - Field: ‘asynchronous’
[17:40:28.517]   - Field: ‘calls’
[17:40:28.517]   - Field: ‘globals’
[17:40:28.517]   - Field: ‘stdout’
[17:40:28.517]   - Field: ‘earlySignal’
[17:40:28.517]   - Field: ‘lazy’
[17:40:28.517]   - Field: ‘state’
[17:40:28.517] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:40:28.517] - Launch lazy future ...
[17:40:28.517] Packages needed by the future expression (n = 0): <none>
[17:40:28.518] Packages needed by future strategies (n = 0): <none>
[17:40:28.518] {
[17:40:28.518]     {
[17:40:28.518]         {
[17:40:28.518]             ...future.startTime <- base::Sys.time()
[17:40:28.518]             {
[17:40:28.518]                 {
[17:40:28.518]                   {
[17:40:28.518]                     base::local({
[17:40:28.518]                       has_future <- base::requireNamespace("future", 
[17:40:28.518]                         quietly = TRUE)
[17:40:28.518]                       if (has_future) {
[17:40:28.518]                         ns <- base::getNamespace("future")
[17:40:28.518]                         version <- ns[[".package"]][["version"]]
[17:40:28.518]                         if (is.null(version)) 
[17:40:28.518]                           version <- utils::packageVersion("future")
[17:40:28.518]                       }
[17:40:28.518]                       else {
[17:40:28.518]                         version <- NULL
[17:40:28.518]                       }
[17:40:28.518]                       if (!has_future || version < "1.8.0") {
[17:40:28.518]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:28.518]                           "", base::R.version$version.string), 
[17:40:28.518]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:28.518]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:28.518]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:28.518]                             "release", "version")], collapse = " "), 
[17:40:28.518]                           hostname = base::Sys.info()[["nodename"]])
[17:40:28.518]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:28.518]                           info)
[17:40:28.518]                         info <- base::paste(info, collapse = "; ")
[17:40:28.518]                         if (!has_future) {
[17:40:28.518]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:28.518]                             info)
[17:40:28.518]                         }
[17:40:28.518]                         else {
[17:40:28.518]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:28.518]                             info, version)
[17:40:28.518]                         }
[17:40:28.518]                         base::stop(msg)
[17:40:28.518]                       }
[17:40:28.518]                     })
[17:40:28.518]                   }
[17:40:28.518]                   options(future.plan = NULL)
[17:40:28.518]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.518]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:28.518]                 }
[17:40:28.518]                 ...future.workdir <- getwd()
[17:40:28.518]             }
[17:40:28.518]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:28.518]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:28.518]         }
[17:40:28.518]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:28.518]             future.globals.maxSize = 2621440000, future.globals.method = NULL, 
[17:40:28.518]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:28.518]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:28.518]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:28.518]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:28.518]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:28.518]             base::names(...future.oldOptions))
[17:40:28.518]     }
[17:40:28.518]     if (FALSE) {
[17:40:28.518]     }
[17:40:28.518]     else {
[17:40:28.518]         if (TRUE) {
[17:40:28.518]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:28.518]                 open = "w")
[17:40:28.518]         }
[17:40:28.518]         else {
[17:40:28.518]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:28.518]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:28.518]         }
[17:40:28.518]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:28.518]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:28.518]             base::sink(type = "output", split = FALSE)
[17:40:28.518]             base::close(...future.stdout)
[17:40:28.518]         }, add = TRUE)
[17:40:28.518]     }
[17:40:28.518]     ...future.frame <- base::sys.nframe()
[17:40:28.518]     ...future.conditions <- base::list()
[17:40:28.518]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:28.518]     if (FALSE) {
[17:40:28.518]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:28.518]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:28.518]     }
[17:40:28.518]     ...future.result <- base::tryCatch({
[17:40:28.518]         base::withCallingHandlers({
[17:40:28.518]             ...future.value <- base::withVisible(base::local({
[17:40:28.518]                 do.call(function(...) {
[17:40:28.518]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.518]                   if (!identical(...future.globals.maxSize.org, 
[17:40:28.518]                     ...future.globals.maxSize)) {
[17:40:28.518]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.518]                     on.exit(options(oopts), add = TRUE)
[17:40:28.518]                   }
[17:40:28.518]                   {
[17:40:28.518]                     lapply(seq_along(...future.elements_ii), 
[17:40:28.518]                       FUN = function(jj) {
[17:40:28.518]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.518]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.518]                           envir = globalenv(), inherits = FALSE)
[17:40:28.518]                         ...future.FUN(...future.X_jj, ...)
[17:40:28.518]                       })
[17:40:28.518]                   }
[17:40:28.518]                 }, args = future.call.arguments)
[17:40:28.518]             }))
[17:40:28.518]             future::FutureResult(value = ...future.value$value, 
[17:40:28.518]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.518]                   ...future.rng), globalenv = if (FALSE) 
[17:40:28.518]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:28.518]                     ...future.globalenv.names))
[17:40:28.518]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:28.518]         }, condition = base::local({
[17:40:28.518]             c <- base::c
[17:40:28.518]             inherits <- base::inherits
[17:40:28.518]             invokeRestart <- base::invokeRestart
[17:40:28.518]             length <- base::length
[17:40:28.518]             list <- base::list
[17:40:28.518]             seq.int <- base::seq.int
[17:40:28.518]             signalCondition <- base::signalCondition
[17:40:28.518]             sys.calls <- base::sys.calls
[17:40:28.518]             `[[` <- base::`[[`
[17:40:28.518]             `+` <- base::`+`
[17:40:28.518]             `<<-` <- base::`<<-`
[17:40:28.518]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:28.518]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:28.518]                   3L)]
[17:40:28.518]             }
[17:40:28.518]             function(cond) {
[17:40:28.518]                 is_error <- inherits(cond, "error")
[17:40:28.518]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:28.518]                   NULL)
[17:40:28.518]                 if (is_error) {
[17:40:28.518]                   sessionInformation <- function() {
[17:40:28.518]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:28.518]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:28.518]                       search = base::search(), system = base::Sys.info())
[17:40:28.518]                   }
[17:40:28.518]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.518]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:28.518]                     cond$call), session = sessionInformation(), 
[17:40:28.518]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:28.518]                   signalCondition(cond)
[17:40:28.518]                 }
[17:40:28.518]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:28.518]                 "immediateCondition"))) {
[17:40:28.518]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:28.518]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.518]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:28.518]                   if (TRUE && !signal) {
[17:40:28.518]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.518]                     {
[17:40:28.518]                       inherits <- base::inherits
[17:40:28.518]                       invokeRestart <- base::invokeRestart
[17:40:28.518]                       is.null <- base::is.null
[17:40:28.518]                       muffled <- FALSE
[17:40:28.518]                       if (inherits(cond, "message")) {
[17:40:28.518]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.518]                         if (muffled) 
[17:40:28.518]                           invokeRestart("muffleMessage")
[17:40:28.518]                       }
[17:40:28.518]                       else if (inherits(cond, "warning")) {
[17:40:28.518]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.518]                         if (muffled) 
[17:40:28.518]                           invokeRestart("muffleWarning")
[17:40:28.518]                       }
[17:40:28.518]                       else if (inherits(cond, "condition")) {
[17:40:28.518]                         if (!is.null(pattern)) {
[17:40:28.518]                           computeRestarts <- base::computeRestarts
[17:40:28.518]                           grepl <- base::grepl
[17:40:28.518]                           restarts <- computeRestarts(cond)
[17:40:28.518]                           for (restart in restarts) {
[17:40:28.518]                             name <- restart$name
[17:40:28.518]                             if (is.null(name)) 
[17:40:28.518]                               next
[17:40:28.518]                             if (!grepl(pattern, name)) 
[17:40:28.518]                               next
[17:40:28.518]                             invokeRestart(restart)
[17:40:28.518]                             muffled <- TRUE
[17:40:28.518]                             break
[17:40:28.518]                           }
[17:40:28.518]                         }
[17:40:28.518]                       }
[17:40:28.518]                       invisible(muffled)
[17:40:28.518]                     }
[17:40:28.518]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.518]                   }
[17:40:28.518]                 }
[17:40:28.518]                 else {
[17:40:28.518]                   if (TRUE) {
[17:40:28.518]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.518]                     {
[17:40:28.518]                       inherits <- base::inherits
[17:40:28.518]                       invokeRestart <- base::invokeRestart
[17:40:28.518]                       is.null <- base::is.null
[17:40:28.518]                       muffled <- FALSE
[17:40:28.518]                       if (inherits(cond, "message")) {
[17:40:28.518]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.518]                         if (muffled) 
[17:40:28.518]                           invokeRestart("muffleMessage")
[17:40:28.518]                       }
[17:40:28.518]                       else if (inherits(cond, "warning")) {
[17:40:28.518]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.518]                         if (muffled) 
[17:40:28.518]                           invokeRestart("muffleWarning")
[17:40:28.518]                       }
[17:40:28.518]                       else if (inherits(cond, "condition")) {
[17:40:28.518]                         if (!is.null(pattern)) {
[17:40:28.518]                           computeRestarts <- base::computeRestarts
[17:40:28.518]                           grepl <- base::grepl
[17:40:28.518]                           restarts <- computeRestarts(cond)
[17:40:28.518]                           for (restart in restarts) {
[17:40:28.518]                             name <- restart$name
[17:40:28.518]                             if (is.null(name)) 
[17:40:28.518]                               next
[17:40:28.518]                             if (!grepl(pattern, name)) 
[17:40:28.518]                               next
[17:40:28.518]                             invokeRestart(restart)
[17:40:28.518]                             muffled <- TRUE
[17:40:28.518]                             break
[17:40:28.518]                           }
[17:40:28.518]                         }
[17:40:28.518]                       }
[17:40:28.518]                       invisible(muffled)
[17:40:28.518]                     }
[17:40:28.518]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.518]                   }
[17:40:28.518]                 }
[17:40:28.518]             }
[17:40:28.518]         }))
[17:40:28.518]     }, error = function(ex) {
[17:40:28.518]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:28.518]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.518]                 ...future.rng), started = ...future.startTime, 
[17:40:28.518]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:28.518]             version = "1.8"), class = "FutureResult")
[17:40:28.518]     }, finally = {
[17:40:28.518]         if (!identical(...future.workdir, getwd())) 
[17:40:28.518]             setwd(...future.workdir)
[17:40:28.518]         {
[17:40:28.518]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:28.518]                 ...future.oldOptions$nwarnings <- NULL
[17:40:28.518]             }
[17:40:28.518]             base::options(...future.oldOptions)
[17:40:28.518]             if (.Platform$OS.type == "windows") {
[17:40:28.518]                 old_names <- names(...future.oldEnvVars)
[17:40:28.518]                 envs <- base::Sys.getenv()
[17:40:28.518]                 names <- names(envs)
[17:40:28.518]                 common <- intersect(names, old_names)
[17:40:28.518]                 added <- setdiff(names, old_names)
[17:40:28.518]                 removed <- setdiff(old_names, names)
[17:40:28.518]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:28.518]                   envs[common]]
[17:40:28.518]                 NAMES <- toupper(changed)
[17:40:28.518]                 args <- list()
[17:40:28.518]                 for (kk in seq_along(NAMES)) {
[17:40:28.518]                   name <- changed[[kk]]
[17:40:28.518]                   NAME <- NAMES[[kk]]
[17:40:28.518]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.518]                     next
[17:40:28.518]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.518]                 }
[17:40:28.518]                 NAMES <- toupper(added)
[17:40:28.518]                 for (kk in seq_along(NAMES)) {
[17:40:28.518]                   name <- added[[kk]]
[17:40:28.518]                   NAME <- NAMES[[kk]]
[17:40:28.518]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.518]                     next
[17:40:28.518]                   args[[name]] <- ""
[17:40:28.518]                 }
[17:40:28.518]                 NAMES <- toupper(removed)
[17:40:28.518]                 for (kk in seq_along(NAMES)) {
[17:40:28.518]                   name <- removed[[kk]]
[17:40:28.518]                   NAME <- NAMES[[kk]]
[17:40:28.518]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.518]                     next
[17:40:28.518]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.518]                 }
[17:40:28.518]                 if (length(args) > 0) 
[17:40:28.518]                   base::do.call(base::Sys.setenv, args = args)
[17:40:28.518]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:28.518]             }
[17:40:28.518]             else {
[17:40:28.518]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:28.518]             }
[17:40:28.518]             {
[17:40:28.518]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:28.518]                   0L) {
[17:40:28.518]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:28.518]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:28.518]                   base::options(opts)
[17:40:28.518]                 }
[17:40:28.518]                 {
[17:40:28.518]                   {
[17:40:28.518]                     base::assign(".Random.seed", c(10403L, 2L, 
[17:40:28.518]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[17:40:28.518]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[17:40:28.518]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[17:40:28.518]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[17:40:28.518]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[17:40:28.518]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[17:40:28.518]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[17:40:28.518]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[17:40:28.518]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[17:40:28.518]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[17:40:28.518]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[17:40:28.518]                     -1512233174L, -1985955764L, -425390065L, 
[17:40:28.518]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[17:40:28.518]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[17:40:28.518]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[17:40:28.518]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[17:40:28.518]                     1818328109L, -1284085436L, -1981489558L, 
[17:40:28.518]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[17:40:28.518]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[17:40:28.518]                     -1718567047L, -793788661L, -1133789126L, 
[17:40:28.518]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[17:40:28.518]                     -1823521982L, -1345991523L, -1672661737L, 
[17:40:28.518]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[17:40:28.518]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[17:40:28.518]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[17:40:28.518]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[17:40:28.518]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[17:40:28.518]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[17:40:28.518]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[17:40:28.518]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[17:40:28.518]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[17:40:28.518]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[17:40:28.518]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[17:40:28.518]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[17:40:28.518]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[17:40:28.518]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[17:40:28.518]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[17:40:28.518]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[17:40:28.518]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[17:40:28.518]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[17:40:28.518]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[17:40:28.518]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[17:40:28.518]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[17:40:28.518]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[17:40:28.518]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[17:40:28.518]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[17:40:28.518]                     -1119334354L, -1521015416L, -2041922421L, 
[17:40:28.518]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[17:40:28.518]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[17:40:28.518]                     1232111981L, -1801753084L, -1608606422L, 
[17:40:28.518]                     -1172096363L, 1420874031L, -1210473418L, 
[17:40:28.518]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[17:40:28.518]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[17:40:28.518]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[17:40:28.518]                     679371266L, -591318819L, -104578089L, -172818754L, 
[17:40:28.518]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[17:40:28.518]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[17:40:28.518]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[17:40:28.518]                     -332493318L, -1978392251L, -1691039632L, 
[17:40:28.518]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[17:40:28.518]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[17:40:28.518]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[17:40:28.518]                     87560756L, -87565624L, 426345146L, -699970416L, 
[17:40:28.518]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[17:40:28.518]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[17:40:28.518]                     -1178330196L, -687617348L, -1701912078L, 
[17:40:28.518]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[17:40:28.518]                     -1345416048L, 1816730492L, -1570431212L, 
[17:40:28.518]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[17:40:28.518]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[17:40:28.518]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[17:40:28.518]                     -1493184262L, -1943836976L, -590788308L, 
[17:40:28.518]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[17:40:28.518]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[17:40:28.518]                     1274857340L, -1205842638L, -1938479504L, 
[17:40:28.518]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[17:40:28.518]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[17:40:28.518]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[17:40:28.518]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[17:40:28.518]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[17:40:28.518]                     -1460751252L, 1201879444L, -1459788718L, 
[17:40:28.518]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[17:40:28.518]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[17:40:28.518]                     -420945808L, -1997735900L, -1838404552L, 
[17:40:28.518]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[17:40:28.518]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[17:40:28.518]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[17:40:28.518]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[17:40:28.518]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[17:40:28.518]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[17:40:28.518]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[17:40:28.518]                     942193650L, 751741680L, 689743428L, -18455976L, 
[17:40:28.518]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[17:40:28.518]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[17:40:28.518]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[17:40:28.518]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[17:40:28.518]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[17:40:28.518]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[17:40:28.518]                     -1357570110L, 1896595240L, -2066952276L, 
[17:40:28.518]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[17:40:28.518]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[17:40:28.518]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[17:40:28.518]                     769655120L, 236357794L, 181393736L, -13334772L, 
[17:40:28.518]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[17:40:28.518]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[17:40:28.518]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[17:40:28.518]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[17:40:28.518]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[17:40:28.518]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[17:40:28.518]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[17:40:28.518]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[17:40:28.518]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[17:40:28.518]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[17:40:28.518]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[17:40:28.518]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[17:40:28.518]                     -1365842884L, -438961294L, -1851472272L, 
[17:40:28.518]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[17:40:28.518]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[17:40:28.518]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[17:40:28.518]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[17:40:28.518]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[17:40:28.518]                     -594809770L, -2146766621L, -2013964635L, 
[17:40:28.518]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[17:40:28.518]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[17:40:28.518]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[17:40:28.518]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[17:40:28.518]                     -1426021878L, -1285634264L, 1507547537L, 
[17:40:28.518]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[17:40:28.518]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[17:40:28.518]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[17:40:28.518]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[17:40:28.518]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[17:40:28.518]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[17:40:28.518]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[17:40:28.518]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[17:40:28.518]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[17:40:28.518]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[17:40:28.518]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[17:40:28.518]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[17:40:28.518]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[17:40:28.518]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[17:40:28.518]                     -1604604761L, 1421229008L, -1268333714L, 
[17:40:28.518]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[17:40:28.518]                     -2070476623L, -2099222749L, 1141171236L, 
[17:40:28.518]                     -146426158L, -1797385433L, -1129376399L, 
[17:40:28.518]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[17:40:28.518]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[17:40:28.518]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[17:40:28.518]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[17:40:28.518]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[17:40:28.518]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[17:40:28.518]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[17:40:28.518]                     -1092079724L, -1765622238L, -1882554057L, 
[17:40:28.518]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[17:40:28.518]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[17:40:28.518]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[17:40:28.518]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[17:40:28.518]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[17:40:28.518]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[17:40:28.518]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[17:40:28.518]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[17:40:28.518]                     865377681L, -1127426242L), envir = base::globalenv(), 
[17:40:28.518]                       inherits = FALSE)
[17:40:28.518]                     NULL
[17:40:28.518]                   }
[17:40:28.518]                   options(future.plan = NULL)
[17:40:28.518]                   if (is.na(NA_character_)) 
[17:40:28.518]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.518]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:28.518]                   future::plan(list(function (..., envir = parent.frame()) 
[17:40:28.518]                   {
[17:40:28.518]                     future <- SequentialFuture(..., envir = envir)
[17:40:28.518]                     if (!future$lazy) 
[17:40:28.518]                       future <- run(future)
[17:40:28.518]                     invisible(future)
[17:40:28.518]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:28.518]                 }
[17:40:28.518]             }
[17:40:28.518]         }
[17:40:28.518]     })
[17:40:28.518]     if (TRUE) {
[17:40:28.518]         base::sink(type = "output", split = FALSE)
[17:40:28.518]         if (TRUE) {
[17:40:28.518]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:28.518]         }
[17:40:28.518]         else {
[17:40:28.518]             ...future.result["stdout"] <- base::list(NULL)
[17:40:28.518]         }
[17:40:28.518]         base::close(...future.stdout)
[17:40:28.518]         ...future.stdout <- NULL
[17:40:28.518]     }
[17:40:28.518]     ...future.result$conditions <- ...future.conditions
[17:40:28.518]     ...future.result$finished <- base::Sys.time()
[17:40:28.518]     ...future.result
[17:40:28.518] }
[17:40:28.521] assign_globals() ...
[17:40:28.521] List of 5
[17:40:28.521]  $ ...future.FUN            :function (...)  
[17:40:28.521]  $ future.call.arguments    : list()
[17:40:28.521]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.521]  $ ...future.elements_ii    :List of 5
[17:40:28.521]   ..$ : int 0
[17:40:28.521]   ..$ : int 0
[17:40:28.521]   ..$ : int 0
[17:40:28.521]   ..$ : int 0
[17:40:28.521]   ..$ : int 0
[17:40:28.521]  $ ...future.seeds_ii       :List of 5
[17:40:28.521]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[17:40:28.521]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[17:40:28.521]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[17:40:28.521]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[17:40:28.521]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[17:40:28.521]  $ ...future.globals.maxSize: NULL
[17:40:28.521]  - attr(*, "resolved")= logi FALSE
[17:40:28.521]  - attr(*, "total_size")= num 616
[17:40:28.521]  - attr(*, "where")=List of 5
[17:40:28.521]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:40:28.521]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:40:28.521]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:40:28.521]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:40:28.521]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:40:28.521]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.521]  - attr(*, "already-done")= logi TRUE
[17:40:28.528] - reassign environment for ‘...future.FUN’
[17:40:28.528] - copied ‘...future.FUN’ to environment
[17:40:28.528] - copied ‘future.call.arguments’ to environment
[17:40:28.529] - copied ‘...future.elements_ii’ to environment
[17:40:28.529] - copied ‘...future.seeds_ii’ to environment
[17:40:28.529] - copied ‘...future.globals.maxSize’ to environment
[17:40:28.529] assign_globals() ... done
[17:40:28.529] plan(): Setting new future strategy stack:
[17:40:28.529] List of future strategies:
[17:40:28.529] 1. sequential:
[17:40:28.529]    - args: function (..., envir = parent.frame())
[17:40:28.529]    - tweaked: FALSE
[17:40:28.529]    - call: NULL
[17:40:28.530] plan(): nbrOfWorkers() = 1
[17:40:28.530] plan(): Setting new future strategy stack:
[17:40:28.530] List of future strategies:
[17:40:28.530] 1. sequential:
[17:40:28.530]    - args: function (..., envir = parent.frame())
[17:40:28.530]    - tweaked: FALSE
[17:40:28.530]    - call: plan(strategy)
[17:40:28.531] plan(): nbrOfWorkers() = 1
[17:40:28.531] SequentialFuture started (and completed)
[17:40:28.531] - Launch lazy future ... done
[17:40:28.531] run() for ‘SequentialFuture’ ... done
[17:40:28.531] Created future:
[17:40:28.533] SequentialFuture:
[17:40:28.533] Label: ‘future_replicate-1’
[17:40:28.533] Expression:
[17:40:28.533] {
[17:40:28.533]     do.call(function(...) {
[17:40:28.533]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.533]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.533]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.533]             on.exit(options(oopts), add = TRUE)
[17:40:28.533]         }
[17:40:28.533]         {
[17:40:28.533]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.533]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.533]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.533]                   envir = globalenv(), inherits = FALSE)
[17:40:28.533]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.533]             })
[17:40:28.533]         }
[17:40:28.533]     }, args = future.call.arguments)
[17:40:28.533] }
[17:40:28.533] Lazy evaluation: FALSE
[17:40:28.533] Asynchronous evaluation: FALSE
[17:40:28.533] Local evaluation: TRUE
[17:40:28.533] Environment: R_GlobalEnv
[17:40:28.533] Capture standard output: TRUE
[17:40:28.533] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:28.533] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:28.533] Packages: <none>
[17:40:28.533] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:28.533] Resolved: TRUE
[17:40:28.533] Value: 280 bytes of class ‘list’
[17:40:28.533] Early signaling: FALSE
[17:40:28.533] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:28.533] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:40:28.534] Chunk #1 of 1 ... DONE
[17:40:28.534] Launching 1 futures (chunks) ... DONE
[17:40:28.534] Resolving 1 futures (chunks) ...
[17:40:28.534] resolve() on list ...
[17:40:28.535]  recursive: 0
[17:40:28.535]  length: 1
[17:40:28.535] 
[17:40:28.535] resolved() for ‘SequentialFuture’ ...
[17:40:28.535] - state: ‘finished’
[17:40:28.535] - run: TRUE
[17:40:28.535] - result: ‘FutureResult’
[17:40:28.535] resolved() for ‘SequentialFuture’ ... done
[17:40:28.535] Future #1
[17:40:28.535] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:40:28.536] - nx: 1
[17:40:28.536] - relay: TRUE
[17:40:28.536] - stdout: TRUE
[17:40:28.536] - signal: TRUE
[17:40:28.536] - resignal: FALSE
[17:40:28.536] - force: TRUE
[17:40:28.536] - relayed: [n=1] FALSE
[17:40:28.536] - queued futures: [n=1] FALSE
[17:40:28.536]  - until=1
[17:40:28.536]  - relaying element #1
[17:40:28.537] - relayed: [n=1] TRUE
[17:40:28.537] - queued futures: [n=1] TRUE
[17:40:28.537] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:40:28.537]  length: 0 (resolved future 1)
[17:40:28.537] Relaying remaining futures
[17:40:28.537] signalConditionsASAP(NULL, pos=0) ...
[17:40:28.537] - nx: 1
[17:40:28.537] - relay: TRUE
[17:40:28.537] - stdout: TRUE
[17:40:28.537] - signal: TRUE
[17:40:28.537] - resignal: FALSE
[17:40:28.538] - force: TRUE
[17:40:28.538] - relayed: [n=1] TRUE
[17:40:28.538] - queued futures: [n=1] TRUE
 - flush all
[17:40:28.538] - relayed: [n=1] TRUE
[17:40:28.538] - queued futures: [n=1] TRUE
[17:40:28.538] signalConditionsASAP(NULL, pos=0) ... done
[17:40:28.538] resolve() on list ... DONE
[17:40:28.538]  - Number of value chunks collected: 1
[17:40:28.538] Resolving 1 futures (chunks) ... DONE
[17:40:28.538] Reducing values from 1 chunks ...
[17:40:28.538]  - Number of values collected after concatenation: 5
[17:40:28.539]  - Number of values expected: 5
[17:40:28.539] Reducing values from 1 chunks ... DONE
[17:40:28.539] future_lapply() ... DONE
[17:40:28.539] future_lapply() ...
[17:40:28.540] Generating random seeds ...
[17:40:28.540] Generating random seed streams for 5 elements ...
[17:40:28.540] Generating random seed streams for 5 elements ... DONE
[17:40:28.540] Generating random seeds ... DONE
[17:40:28.540] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:40:28.541] Number of chunks: 1
[17:40:28.541] getGlobalsAndPackagesXApply() ...
[17:40:28.541]  - future.globals: TRUE
[17:40:28.541] getGlobalsAndPackages() ...
[17:40:28.541] Searching for globals...
[17:40:28.542] - globals found: [2] ‘FUN’, ‘sample’
[17:40:28.542] Searching for globals ... DONE
[17:40:28.542] Resolving globals: FALSE
[17:40:28.543] The total size of the 1 globals is 616 bytes (616 bytes)
[17:40:28.543] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:40:28.543] - globals: [1] ‘FUN’
[17:40:28.543] 
[17:40:28.543] getGlobalsAndPackages() ... DONE
[17:40:28.544]  - globals found/used: [n=1] ‘FUN’
[17:40:28.544]  - needed namespaces: [n=0] 
[17:40:28.544] Finding globals ... DONE
[17:40:28.544]  - use_args: TRUE
[17:40:28.544]  - Getting '...' globals ...
[17:40:28.544] resolve() on list ...
[17:40:28.544]  recursive: 0
[17:40:28.544]  length: 1
[17:40:28.544]  elements: ‘...’
[17:40:28.545]  length: 0 (resolved future 1)
[17:40:28.545] resolve() on list ... DONE
[17:40:28.545]    - '...' content: [n=0] 
[17:40:28.545] List of 1
[17:40:28.545]  $ ...: list()
[17:40:28.545]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.545]  - attr(*, "where")=List of 1
[17:40:28.545]   ..$ ...:<environment: 0x558a39cb1258> 
[17:40:28.545]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.545]  - attr(*, "resolved")= logi TRUE
[17:40:28.545]  - attr(*, "total_size")= num NA
[17:40:28.547]  - Getting '...' globals ... DONE
[17:40:28.547] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:40:28.548] List of 2
[17:40:28.548]  $ ...future.FUN:function (...)  
[17:40:28.548]  $ ...          : list()
[17:40:28.548]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.548]  - attr(*, "where")=List of 2
[17:40:28.548]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:40:28.548]   ..$ ...          :<environment: 0x558a39cb1258> 
[17:40:28.548]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.548]  - attr(*, "resolved")= logi FALSE
[17:40:28.548]  - attr(*, "total_size")= num 616
[17:40:28.550] Packages to be attached in all futures: [n=0] 
[17:40:28.550] getGlobalsAndPackagesXApply() ... DONE
[17:40:28.550] Number of futures (= number of chunks): 1
[17:40:28.551] Launching 1 futures (chunks) ...
[17:40:28.551] Chunk #1 of 1 ...
[17:40:28.551]  - Finding globals in 'X' for chunk #1 ...
[17:40:28.551] getGlobalsAndPackages() ...
[17:40:28.551] Searching for globals...
[17:40:28.551] 
[17:40:28.551] Searching for globals ... DONE
[17:40:28.551] - globals: [0] <none>
[17:40:28.552] getGlobalsAndPackages() ... DONE
[17:40:28.552]    + additional globals found: [n=0] 
[17:40:28.552]    + additional namespaces needed: [n=0] 
[17:40:28.552]  - Finding globals in 'X' for chunk #1 ... DONE
[17:40:28.552]  - Adjusted option 'future.globals.maxSize': 524288000 -> 5 * 524288000 = 2621440000 (bytes)
[17:40:28.552]  - seeds: [5] <seeds>
[17:40:28.552] getGlobalsAndPackages() ...
[17:40:28.552] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.552] Resolving globals: FALSE
[17:40:28.552] Tweak future expression to call with '...' arguments ...
[17:40:28.553] {
[17:40:28.553]     do.call(function(...) {
[17:40:28.553]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.553]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.553]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.553]             on.exit(options(oopts), add = TRUE)
[17:40:28.553]         }
[17:40:28.553]         {
[17:40:28.553]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.553]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.553]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.553]                   envir = globalenv(), inherits = FALSE)
[17:40:28.553]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.553]             })
[17:40:28.553]         }
[17:40:28.553]     }, args = future.call.arguments)
[17:40:28.553] }
[17:40:28.553] Tweak future expression to call with '...' arguments ... DONE
[17:40:28.553] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.553] 
[17:40:28.553] getGlobalsAndPackages() ... DONE
[17:40:28.554] run() for ‘Future’ ...
[17:40:28.554] - state: ‘created’
[17:40:28.554] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:40:28.554] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:40:28.554] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:40:28.554]   - Field: ‘label’
[17:40:28.555]   - Field: ‘local’
[17:40:28.555]   - Field: ‘owner’
[17:40:28.555]   - Field: ‘envir’
[17:40:28.555]   - Field: ‘packages’
[17:40:28.555]   - Field: ‘gc’
[17:40:28.555]   - Field: ‘conditions’
[17:40:28.555]   - Field: ‘expr’
[17:40:28.555]   - Field: ‘uuid’
[17:40:28.555]   - Field: ‘seed’
[17:40:28.555]   - Field: ‘version’
[17:40:28.555]   - Field: ‘result’
[17:40:28.556]   - Field: ‘asynchronous’
[17:40:28.556]   - Field: ‘calls’
[17:40:28.556]   - Field: ‘globals’
[17:40:28.556]   - Field: ‘stdout’
[17:40:28.556]   - Field: ‘earlySignal’
[17:40:28.556]   - Field: ‘lazy’
[17:40:28.556]   - Field: ‘state’
[17:40:28.556] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:40:28.558] - Launch lazy future ...
[17:40:28.558] Packages needed by the future expression (n = 0): <none>
[17:40:28.558] Packages needed by future strategies (n = 0): <none>
[17:40:28.559] {
[17:40:28.559]     {
[17:40:28.559]         {
[17:40:28.559]             ...future.startTime <- base::Sys.time()
[17:40:28.559]             {
[17:40:28.559]                 {
[17:40:28.559]                   {
[17:40:28.559]                     base::local({
[17:40:28.559]                       has_future <- base::requireNamespace("future", 
[17:40:28.559]                         quietly = TRUE)
[17:40:28.559]                       if (has_future) {
[17:40:28.559]                         ns <- base::getNamespace("future")
[17:40:28.559]                         version <- ns[[".package"]][["version"]]
[17:40:28.559]                         if (is.null(version)) 
[17:40:28.559]                           version <- utils::packageVersion("future")
[17:40:28.559]                       }
[17:40:28.559]                       else {
[17:40:28.559]                         version <- NULL
[17:40:28.559]                       }
[17:40:28.559]                       if (!has_future || version < "1.8.0") {
[17:40:28.559]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:28.559]                           "", base::R.version$version.string), 
[17:40:28.559]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:28.559]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:28.559]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:28.559]                             "release", "version")], collapse = " "), 
[17:40:28.559]                           hostname = base::Sys.info()[["nodename"]])
[17:40:28.559]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:28.559]                           info)
[17:40:28.559]                         info <- base::paste(info, collapse = "; ")
[17:40:28.559]                         if (!has_future) {
[17:40:28.559]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:28.559]                             info)
[17:40:28.559]                         }
[17:40:28.559]                         else {
[17:40:28.559]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:28.559]                             info, version)
[17:40:28.559]                         }
[17:40:28.559]                         base::stop(msg)
[17:40:28.559]                       }
[17:40:28.559]                     })
[17:40:28.559]                   }
[17:40:28.559]                   options(future.plan = NULL)
[17:40:28.559]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.559]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:28.559]                 }
[17:40:28.559]                 ...future.workdir <- getwd()
[17:40:28.559]             }
[17:40:28.559]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:28.559]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:28.559]         }
[17:40:28.559]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:28.559]             future.globals.maxSize = 2621440000, future.globals.method = NULL, 
[17:40:28.559]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:28.559]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:28.559]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:28.559]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:28.559]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:28.559]             base::names(...future.oldOptions))
[17:40:28.559]     }
[17:40:28.559]     if (FALSE) {
[17:40:28.559]     }
[17:40:28.559]     else {
[17:40:28.559]         if (TRUE) {
[17:40:28.559]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:28.559]                 open = "w")
[17:40:28.559]         }
[17:40:28.559]         else {
[17:40:28.559]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:28.559]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:28.559]         }
[17:40:28.559]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:28.559]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:28.559]             base::sink(type = "output", split = FALSE)
[17:40:28.559]             base::close(...future.stdout)
[17:40:28.559]         }, add = TRUE)
[17:40:28.559]     }
[17:40:28.559]     ...future.frame <- base::sys.nframe()
[17:40:28.559]     ...future.conditions <- base::list()
[17:40:28.559]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:28.559]     if (FALSE) {
[17:40:28.559]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:28.559]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:28.559]     }
[17:40:28.559]     ...future.result <- base::tryCatch({
[17:40:28.559]         base::withCallingHandlers({
[17:40:28.559]             ...future.value <- base::withVisible(base::local({
[17:40:28.559]                 do.call(function(...) {
[17:40:28.559]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.559]                   if (!identical(...future.globals.maxSize.org, 
[17:40:28.559]                     ...future.globals.maxSize)) {
[17:40:28.559]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.559]                     on.exit(options(oopts), add = TRUE)
[17:40:28.559]                   }
[17:40:28.559]                   {
[17:40:28.559]                     lapply(seq_along(...future.elements_ii), 
[17:40:28.559]                       FUN = function(jj) {
[17:40:28.559]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.559]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.559]                           envir = globalenv(), inherits = FALSE)
[17:40:28.559]                         ...future.FUN(...future.X_jj, ...)
[17:40:28.559]                       })
[17:40:28.559]                   }
[17:40:28.559]                 }, args = future.call.arguments)
[17:40:28.559]             }))
[17:40:28.559]             future::FutureResult(value = ...future.value$value, 
[17:40:28.559]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.559]                   ...future.rng), globalenv = if (FALSE) 
[17:40:28.559]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:28.559]                     ...future.globalenv.names))
[17:40:28.559]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:28.559]         }, condition = base::local({
[17:40:28.559]             c <- base::c
[17:40:28.559]             inherits <- base::inherits
[17:40:28.559]             invokeRestart <- base::invokeRestart
[17:40:28.559]             length <- base::length
[17:40:28.559]             list <- base::list
[17:40:28.559]             seq.int <- base::seq.int
[17:40:28.559]             signalCondition <- base::signalCondition
[17:40:28.559]             sys.calls <- base::sys.calls
[17:40:28.559]             `[[` <- base::`[[`
[17:40:28.559]             `+` <- base::`+`
[17:40:28.559]             `<<-` <- base::`<<-`
[17:40:28.559]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:28.559]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:28.559]                   3L)]
[17:40:28.559]             }
[17:40:28.559]             function(cond) {
[17:40:28.559]                 is_error <- inherits(cond, "error")
[17:40:28.559]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:28.559]                   NULL)
[17:40:28.559]                 if (is_error) {
[17:40:28.559]                   sessionInformation <- function() {
[17:40:28.559]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:28.559]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:28.559]                       search = base::search(), system = base::Sys.info())
[17:40:28.559]                   }
[17:40:28.559]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.559]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:28.559]                     cond$call), session = sessionInformation(), 
[17:40:28.559]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:28.559]                   signalCondition(cond)
[17:40:28.559]                 }
[17:40:28.559]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:28.559]                 "immediateCondition"))) {
[17:40:28.559]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:28.559]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.559]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:28.559]                   if (TRUE && !signal) {
[17:40:28.559]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.559]                     {
[17:40:28.559]                       inherits <- base::inherits
[17:40:28.559]                       invokeRestart <- base::invokeRestart
[17:40:28.559]                       is.null <- base::is.null
[17:40:28.559]                       muffled <- FALSE
[17:40:28.559]                       if (inherits(cond, "message")) {
[17:40:28.559]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.559]                         if (muffled) 
[17:40:28.559]                           invokeRestart("muffleMessage")
[17:40:28.559]                       }
[17:40:28.559]                       else if (inherits(cond, "warning")) {
[17:40:28.559]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.559]                         if (muffled) 
[17:40:28.559]                           invokeRestart("muffleWarning")
[17:40:28.559]                       }
[17:40:28.559]                       else if (inherits(cond, "condition")) {
[17:40:28.559]                         if (!is.null(pattern)) {
[17:40:28.559]                           computeRestarts <- base::computeRestarts
[17:40:28.559]                           grepl <- base::grepl
[17:40:28.559]                           restarts <- computeRestarts(cond)
[17:40:28.559]                           for (restart in restarts) {
[17:40:28.559]                             name <- restart$name
[17:40:28.559]                             if (is.null(name)) 
[17:40:28.559]                               next
[17:40:28.559]                             if (!grepl(pattern, name)) 
[17:40:28.559]                               next
[17:40:28.559]                             invokeRestart(restart)
[17:40:28.559]                             muffled <- TRUE
[17:40:28.559]                             break
[17:40:28.559]                           }
[17:40:28.559]                         }
[17:40:28.559]                       }
[17:40:28.559]                       invisible(muffled)
[17:40:28.559]                     }
[17:40:28.559]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.559]                   }
[17:40:28.559]                 }
[17:40:28.559]                 else {
[17:40:28.559]                   if (TRUE) {
[17:40:28.559]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.559]                     {
[17:40:28.559]                       inherits <- base::inherits
[17:40:28.559]                       invokeRestart <- base::invokeRestart
[17:40:28.559]                       is.null <- base::is.null
[17:40:28.559]                       muffled <- FALSE
[17:40:28.559]                       if (inherits(cond, "message")) {
[17:40:28.559]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.559]                         if (muffled) 
[17:40:28.559]                           invokeRestart("muffleMessage")
[17:40:28.559]                       }
[17:40:28.559]                       else if (inherits(cond, "warning")) {
[17:40:28.559]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.559]                         if (muffled) 
[17:40:28.559]                           invokeRestart("muffleWarning")
[17:40:28.559]                       }
[17:40:28.559]                       else if (inherits(cond, "condition")) {
[17:40:28.559]                         if (!is.null(pattern)) {
[17:40:28.559]                           computeRestarts <- base::computeRestarts
[17:40:28.559]                           grepl <- base::grepl
[17:40:28.559]                           restarts <- computeRestarts(cond)
[17:40:28.559]                           for (restart in restarts) {
[17:40:28.559]                             name <- restart$name
[17:40:28.559]                             if (is.null(name)) 
[17:40:28.559]                               next
[17:40:28.559]                             if (!grepl(pattern, name)) 
[17:40:28.559]                               next
[17:40:28.559]                             invokeRestart(restart)
[17:40:28.559]                             muffled <- TRUE
[17:40:28.559]                             break
[17:40:28.559]                           }
[17:40:28.559]                         }
[17:40:28.559]                       }
[17:40:28.559]                       invisible(muffled)
[17:40:28.559]                     }
[17:40:28.559]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.559]                   }
[17:40:28.559]                 }
[17:40:28.559]             }
[17:40:28.559]         }))
[17:40:28.559]     }, error = function(ex) {
[17:40:28.559]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:28.559]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.559]                 ...future.rng), started = ...future.startTime, 
[17:40:28.559]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:28.559]             version = "1.8"), class = "FutureResult")
[17:40:28.559]     }, finally = {
[17:40:28.559]         if (!identical(...future.workdir, getwd())) 
[17:40:28.559]             setwd(...future.workdir)
[17:40:28.559]         {
[17:40:28.559]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:28.559]                 ...future.oldOptions$nwarnings <- NULL
[17:40:28.559]             }
[17:40:28.559]             base::options(...future.oldOptions)
[17:40:28.559]             if (.Platform$OS.type == "windows") {
[17:40:28.559]                 old_names <- names(...future.oldEnvVars)
[17:40:28.559]                 envs <- base::Sys.getenv()
[17:40:28.559]                 names <- names(envs)
[17:40:28.559]                 common <- intersect(names, old_names)
[17:40:28.559]                 added <- setdiff(names, old_names)
[17:40:28.559]                 removed <- setdiff(old_names, names)
[17:40:28.559]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:28.559]                   envs[common]]
[17:40:28.559]                 NAMES <- toupper(changed)
[17:40:28.559]                 args <- list()
[17:40:28.559]                 for (kk in seq_along(NAMES)) {
[17:40:28.559]                   name <- changed[[kk]]
[17:40:28.559]                   NAME <- NAMES[[kk]]
[17:40:28.559]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.559]                     next
[17:40:28.559]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.559]                 }
[17:40:28.559]                 NAMES <- toupper(added)
[17:40:28.559]                 for (kk in seq_along(NAMES)) {
[17:40:28.559]                   name <- added[[kk]]
[17:40:28.559]                   NAME <- NAMES[[kk]]
[17:40:28.559]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.559]                     next
[17:40:28.559]                   args[[name]] <- ""
[17:40:28.559]                 }
[17:40:28.559]                 NAMES <- toupper(removed)
[17:40:28.559]                 for (kk in seq_along(NAMES)) {
[17:40:28.559]                   name <- removed[[kk]]
[17:40:28.559]                   NAME <- NAMES[[kk]]
[17:40:28.559]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.559]                     next
[17:40:28.559]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.559]                 }
[17:40:28.559]                 if (length(args) > 0) 
[17:40:28.559]                   base::do.call(base::Sys.setenv, args = args)
[17:40:28.559]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:28.559]             }
[17:40:28.559]             else {
[17:40:28.559]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:28.559]             }
[17:40:28.559]             {
[17:40:28.559]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:28.559]                   0L) {
[17:40:28.559]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:28.559]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:28.559]                   base::options(opts)
[17:40:28.559]                 }
[17:40:28.559]                 {
[17:40:28.559]                   {
[17:40:28.559]                     base::assign(".Random.seed", c(10403L, 4L, 
[17:40:28.559]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[17:40:28.559]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[17:40:28.559]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[17:40:28.559]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[17:40:28.559]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[17:40:28.559]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[17:40:28.559]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[17:40:28.559]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[17:40:28.559]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[17:40:28.559]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[17:40:28.559]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[17:40:28.559]                     -1512233174L, -1985955764L, -425390065L, 
[17:40:28.559]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[17:40:28.559]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[17:40:28.559]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[17:40:28.559]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[17:40:28.559]                     1818328109L, -1284085436L, -1981489558L, 
[17:40:28.559]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[17:40:28.559]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[17:40:28.559]                     -1718567047L, -793788661L, -1133789126L, 
[17:40:28.559]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[17:40:28.559]                     -1823521982L, -1345991523L, -1672661737L, 
[17:40:28.559]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[17:40:28.559]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[17:40:28.559]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[17:40:28.559]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[17:40:28.559]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[17:40:28.559]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[17:40:28.559]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[17:40:28.559]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[17:40:28.559]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[17:40:28.559]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[17:40:28.559]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[17:40:28.559]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[17:40:28.559]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[17:40:28.559]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[17:40:28.559]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[17:40:28.559]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[17:40:28.559]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[17:40:28.559]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[17:40:28.559]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[17:40:28.559]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[17:40:28.559]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[17:40:28.559]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[17:40:28.559]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[17:40:28.559]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[17:40:28.559]                     -1119334354L, -1521015416L, -2041922421L, 
[17:40:28.559]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[17:40:28.559]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[17:40:28.559]                     1232111981L, -1801753084L, -1608606422L, 
[17:40:28.559]                     -1172096363L, 1420874031L, -1210473418L, 
[17:40:28.559]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[17:40:28.559]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[17:40:28.559]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[17:40:28.559]                     679371266L, -591318819L, -104578089L, -172818754L, 
[17:40:28.559]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[17:40:28.559]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[17:40:28.559]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[17:40:28.559]                     -332493318L, -1978392251L, -1691039632L, 
[17:40:28.559]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[17:40:28.559]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[17:40:28.559]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[17:40:28.559]                     87560756L, -87565624L, 426345146L, -699970416L, 
[17:40:28.559]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[17:40:28.559]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[17:40:28.559]                     -1178330196L, -687617348L, -1701912078L, 
[17:40:28.559]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[17:40:28.559]                     -1345416048L, 1816730492L, -1570431212L, 
[17:40:28.559]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[17:40:28.559]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[17:40:28.559]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[17:40:28.559]                     -1493184262L, -1943836976L, -590788308L, 
[17:40:28.559]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[17:40:28.559]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[17:40:28.559]                     1274857340L, -1205842638L, -1938479504L, 
[17:40:28.559]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[17:40:28.559]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[17:40:28.559]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[17:40:28.559]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[17:40:28.559]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[17:40:28.559]                     -1460751252L, 1201879444L, -1459788718L, 
[17:40:28.559]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[17:40:28.559]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[17:40:28.559]                     -420945808L, -1997735900L, -1838404552L, 
[17:40:28.559]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[17:40:28.559]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[17:40:28.559]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[17:40:28.559]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[17:40:28.559]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[17:40:28.559]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[17:40:28.559]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[17:40:28.559]                     942193650L, 751741680L, 689743428L, -18455976L, 
[17:40:28.559]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[17:40:28.559]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[17:40:28.559]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[17:40:28.559]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[17:40:28.559]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[17:40:28.559]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[17:40:28.559]                     -1357570110L, 1896595240L, -2066952276L, 
[17:40:28.559]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[17:40:28.559]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[17:40:28.559]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[17:40:28.559]                     769655120L, 236357794L, 181393736L, -13334772L, 
[17:40:28.559]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[17:40:28.559]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[17:40:28.559]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[17:40:28.559]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[17:40:28.559]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[17:40:28.559]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[17:40:28.559]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[17:40:28.559]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[17:40:28.559]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[17:40:28.559]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[17:40:28.559]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[17:40:28.559]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[17:40:28.559]                     -1365842884L, -438961294L, -1851472272L, 
[17:40:28.559]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[17:40:28.559]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[17:40:28.559]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[17:40:28.559]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[17:40:28.559]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[17:40:28.559]                     -594809770L, -2146766621L, -2013964635L, 
[17:40:28.559]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[17:40:28.559]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[17:40:28.559]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[17:40:28.559]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[17:40:28.559]                     -1426021878L, -1285634264L, 1507547537L, 
[17:40:28.559]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[17:40:28.559]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[17:40:28.559]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[17:40:28.559]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[17:40:28.559]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[17:40:28.559]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[17:40:28.559]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[17:40:28.559]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[17:40:28.559]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[17:40:28.559]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[17:40:28.559]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[17:40:28.559]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[17:40:28.559]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[17:40:28.559]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[17:40:28.559]                     -1604604761L, 1421229008L, -1268333714L, 
[17:40:28.559]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[17:40:28.559]                     -2070476623L, -2099222749L, 1141171236L, 
[17:40:28.559]                     -146426158L, -1797385433L, -1129376399L, 
[17:40:28.559]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[17:40:28.559]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[17:40:28.559]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[17:40:28.559]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[17:40:28.559]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[17:40:28.559]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[17:40:28.559]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[17:40:28.559]                     -1092079724L, -1765622238L, -1882554057L, 
[17:40:28.559]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[17:40:28.559]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[17:40:28.559]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[17:40:28.559]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[17:40:28.559]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[17:40:28.559]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[17:40:28.559]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[17:40:28.559]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[17:40:28.559]                     865377681L, -1127426242L), envir = base::globalenv(), 
[17:40:28.559]                       inherits = FALSE)
[17:40:28.559]                     NULL
[17:40:28.559]                   }
[17:40:28.559]                   options(future.plan = NULL)
[17:40:28.559]                   if (is.na(NA_character_)) 
[17:40:28.559]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.559]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:28.559]                   future::plan(list(function (..., envir = parent.frame()) 
[17:40:28.559]                   {
[17:40:28.559]                     future <- SequentialFuture(..., envir = envir)
[17:40:28.559]                     if (!future$lazy) 
[17:40:28.559]                       future <- run(future)
[17:40:28.559]                     invisible(future)
[17:40:28.559]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:28.559]                 }
[17:40:28.559]             }
[17:40:28.559]         }
[17:40:28.559]     })
[17:40:28.559]     if (TRUE) {
[17:40:28.559]         base::sink(type = "output", split = FALSE)
[17:40:28.559]         if (TRUE) {
[17:40:28.559]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:28.559]         }
[17:40:28.559]         else {
[17:40:28.559]             ...future.result["stdout"] <- base::list(NULL)
[17:40:28.559]         }
[17:40:28.559]         base::close(...future.stdout)
[17:40:28.559]         ...future.stdout <- NULL
[17:40:28.559]     }
[17:40:28.559]     ...future.result$conditions <- ...future.conditions
[17:40:28.559]     ...future.result$finished <- base::Sys.time()
[17:40:28.559]     ...future.result
[17:40:28.559] }
[17:40:28.561] assign_globals() ...
[17:40:28.561] List of 5
[17:40:28.561]  $ ...future.FUN            :function (...)  
[17:40:28.561]  $ future.call.arguments    : list()
[17:40:28.561]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.561]  $ ...future.elements_ii    :List of 5
[17:40:28.561]   ..$ : int 0
[17:40:28.561]   ..$ : int 0
[17:40:28.561]   ..$ : int 0
[17:40:28.561]   ..$ : int 0
[17:40:28.561]   ..$ : int 0
[17:40:28.561]  $ ...future.seeds_ii       :List of 5
[17:40:28.561]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[17:40:28.561]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[17:40:28.561]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[17:40:28.561]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[17:40:28.561]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[17:40:28.561]  $ ...future.globals.maxSize: NULL
[17:40:28.561]  - attr(*, "resolved")= logi FALSE
[17:40:28.561]  - attr(*, "total_size")= num 616
[17:40:28.561]  - attr(*, "where")=List of 5
[17:40:28.561]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:40:28.561]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:40:28.561]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:40:28.561]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:40:28.561]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:40:28.561]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.561]  - attr(*, "already-done")= logi TRUE
[17:40:28.569] - reassign environment for ‘...future.FUN’
[17:40:28.569] - copied ‘...future.FUN’ to environment
[17:40:28.569] - copied ‘future.call.arguments’ to environment
[17:40:28.569] - copied ‘...future.elements_ii’ to environment
[17:40:28.569] - copied ‘...future.seeds_ii’ to environment
[17:40:28.569] - copied ‘...future.globals.maxSize’ to environment
[17:40:28.569] assign_globals() ... done
[17:40:28.570] plan(): Setting new future strategy stack:
[17:40:28.570] List of future strategies:
[17:40:28.570] 1. sequential:
[17:40:28.570]    - args: function (..., envir = parent.frame())
[17:40:28.570]    - tweaked: FALSE
[17:40:28.570]    - call: NULL
[17:40:28.570] plan(): nbrOfWorkers() = 1
[17:40:28.571] plan(): Setting new future strategy stack:
[17:40:28.571] List of future strategies:
[17:40:28.571] 1. sequential:
[17:40:28.571]    - args: function (..., envir = parent.frame())
[17:40:28.571]    - tweaked: FALSE
[17:40:28.571]    - call: plan(strategy)
[17:40:28.571] plan(): nbrOfWorkers() = 1
[17:40:28.572] SequentialFuture started (and completed)
[17:40:28.572] - Launch lazy future ... done
[17:40:28.572] run() for ‘SequentialFuture’ ... done
[17:40:28.572] Created future:
[17:40:28.572] SequentialFuture:
[17:40:28.572] Label: ‘future_replicate-1’
[17:40:28.572] Expression:
[17:40:28.572] {
[17:40:28.572]     do.call(function(...) {
[17:40:28.572]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.572]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.572]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.572]             on.exit(options(oopts), add = TRUE)
[17:40:28.572]         }
[17:40:28.572]         {
[17:40:28.572]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.572]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.572]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.572]                   envir = globalenv(), inherits = FALSE)
[17:40:28.572]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.572]             })
[17:40:28.572]         }
[17:40:28.572]     }, args = future.call.arguments)
[17:40:28.572] }
[17:40:28.572] Lazy evaluation: FALSE
[17:40:28.572] Asynchronous evaluation: FALSE
[17:40:28.572] Local evaluation: TRUE
[17:40:28.572] Environment: R_GlobalEnv
[17:40:28.572] Capture standard output: TRUE
[17:40:28.572] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:28.572] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:28.572] Packages: <none>
[17:40:28.572] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:28.572] Resolved: TRUE
[17:40:28.572] Value: 280 bytes of class ‘list’
[17:40:28.572] Early signaling: FALSE
[17:40:28.572] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:28.572] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:40:28.573] Chunk #1 of 1 ... DONE
[17:40:28.573] Launching 1 futures (chunks) ... DONE
[17:40:28.573] Resolving 1 futures (chunks) ...
[17:40:28.573] resolve() on list ...
[17:40:28.573]  recursive: 0
[17:40:28.574]  length: 1
[17:40:28.574] 
[17:40:28.574] resolved() for ‘SequentialFuture’ ...
[17:40:28.574] - state: ‘finished’
[17:40:28.574] - run: TRUE
[17:40:28.574] - result: ‘FutureResult’
[17:40:28.574] resolved() for ‘SequentialFuture’ ... done
[17:40:28.574] Future #1
[17:40:28.574] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:40:28.574] - nx: 1
[17:40:28.575] - relay: TRUE
[17:40:28.575] - stdout: TRUE
[17:40:28.575] - signal: TRUE
[17:40:28.575] - resignal: FALSE
[17:40:28.575] - force: TRUE
[17:40:28.575] - relayed: [n=1] FALSE
[17:40:28.575] - queued futures: [n=1] FALSE
[17:40:28.575]  - until=1
[17:40:28.575]  - relaying element #1
[17:40:28.575] - relayed: [n=1] TRUE
[17:40:28.576] - queued futures: [n=1] TRUE
[17:40:28.576] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:40:28.576]  length: 0 (resolved future 1)
[17:40:28.576] Relaying remaining futures
[17:40:28.576] signalConditionsASAP(NULL, pos=0) ...
[17:40:28.576] - nx: 1
[17:40:28.576] - relay: TRUE
[17:40:28.576] - stdout: TRUE
[17:40:28.576] - signal: TRUE
[17:40:28.576] - resignal: FALSE
[17:40:28.576] - force: TRUE
[17:40:28.576] - relayed: [n=1] TRUE
[17:40:28.577] - queued futures: [n=1] TRUE
 - flush all
[17:40:28.577] - relayed: [n=1] TRUE
[17:40:28.577] - queued futures: [n=1] TRUE
[17:40:28.577] signalConditionsASAP(NULL, pos=0) ... done
[17:40:28.577] resolve() on list ... DONE
[17:40:28.577]  - Number of value chunks collected: 1
[17:40:28.577] Resolving 1 futures (chunks) ... DONE
[17:40:28.577] Reducing values from 1 chunks ...
[17:40:28.577]  - Number of values collected after concatenation: 5
[17:40:28.577]  - Number of values expected: 5
[17:40:28.578] Reducing values from 1 chunks ... DONE
[17:40:28.578] future_lapply() ... DONE
[17:40:28.578] future_lapply() ...
[17:40:28.578] Generating random seeds ...
[17:40:28.578] Generating random seed streams for 5 elements ...
[17:40:28.578] Generating random seed streams for 5 elements ... DONE
[17:40:28.579] Generating random seeds ... DONE
[17:40:28.579] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:40:28.579] Number of chunks: 1
[17:40:28.579] getGlobalsAndPackagesXApply() ...
[17:40:28.579]  - future.globals: TRUE
[17:40:28.580] getGlobalsAndPackages() ...
[17:40:28.580] Searching for globals...
[17:40:28.581] - globals found: [2] ‘FUN’, ‘sample’
[17:40:28.581] Searching for globals ... DONE
[17:40:28.581] Resolving globals: FALSE
[17:40:28.581] The total size of the 1 globals is 616 bytes (616 bytes)
[17:40:28.582] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:40:28.582] - globals: [1] ‘FUN’
[17:40:28.582] 
[17:40:28.582] getGlobalsAndPackages() ... DONE
[17:40:28.582]  - globals found/used: [n=1] ‘FUN’
[17:40:28.582]  - needed namespaces: [n=0] 
[17:40:28.582] Finding globals ... DONE
[17:40:28.582]  - use_args: TRUE
[17:40:28.582]  - Getting '...' globals ...
[17:40:28.583] resolve() on list ...
[17:40:28.583]  recursive: 0
[17:40:28.583]  length: 1
[17:40:28.584]  elements: ‘...’
[17:40:28.585]  length: 0 (resolved future 1)
[17:40:28.585] resolve() on list ... DONE
[17:40:28.585]    - '...' content: [n=0] 
[17:40:28.585] List of 1
[17:40:28.585]  $ ...: list()
[17:40:28.585]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.585]  - attr(*, "where")=List of 1
[17:40:28.585]   ..$ ...:<environment: 0x558a3bfb2238> 
[17:40:28.585]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.585]  - attr(*, "resolved")= logi TRUE
[17:40:28.585]  - attr(*, "total_size")= num NA
[17:40:28.587]  - Getting '...' globals ... DONE
[17:40:28.588] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:40:28.588] List of 2
[17:40:28.588]  $ ...future.FUN:function (...)  
[17:40:28.588]  $ ...          : list()
[17:40:28.588]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.588]  - attr(*, "where")=List of 2
[17:40:28.588]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:40:28.588]   ..$ ...          :<environment: 0x558a3bfb2238> 
[17:40:28.588]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.588]  - attr(*, "resolved")= logi FALSE
[17:40:28.588]  - attr(*, "total_size")= num 616
[17:40:28.590] Packages to be attached in all futures: [n=0] 
[17:40:28.590] getGlobalsAndPackagesXApply() ... DONE
[17:40:28.590] Number of futures (= number of chunks): 1
[17:40:28.591] Launching 1 futures (chunks) ...
[17:40:28.591] Chunk #1 of 1 ...
[17:40:28.591]  - Finding globals in 'X' for chunk #1 ...
[17:40:28.591] getGlobalsAndPackages() ...
[17:40:28.591] Searching for globals...
[17:40:28.591] 
[17:40:28.591] Searching for globals ... DONE
[17:40:28.592] - globals: [0] <none>
[17:40:28.592] getGlobalsAndPackages() ... DONE
[17:40:28.592]    + additional globals found: [n=0] 
[17:40:28.592]    + additional namespaces needed: [n=0] 
[17:40:28.592]  - Finding globals in 'X' for chunk #1 ... DONE
[17:40:28.592]  - Adjusted option 'future.globals.maxSize': 524288000 -> 5 * 524288000 = 2621440000 (bytes)
[17:40:28.592]  - seeds: [5] <seeds>
[17:40:28.592] getGlobalsAndPackages() ...
[17:40:28.592] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.592] Resolving globals: FALSE
[17:40:28.593] Tweak future expression to call with '...' arguments ...
[17:40:28.593] {
[17:40:28.593]     do.call(function(...) {
[17:40:28.593]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.593]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.593]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.593]             on.exit(options(oopts), add = TRUE)
[17:40:28.593]         }
[17:40:28.593]         {
[17:40:28.593]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.593]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.593]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.593]                   envir = globalenv(), inherits = FALSE)
[17:40:28.593]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.593]             })
[17:40:28.593]         }
[17:40:28.593]     }, args = future.call.arguments)
[17:40:28.593] }
[17:40:28.593] Tweak future expression to call with '...' arguments ... DONE
[17:40:28.593] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.593] 
[17:40:28.593] getGlobalsAndPackages() ... DONE
[17:40:28.594] run() for ‘Future’ ...
[17:40:28.594] - state: ‘created’
[17:40:28.594] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:40:28.594] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:40:28.594] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:40:28.594]   - Field: ‘label’
[17:40:28.594]   - Field: ‘local’
[17:40:28.595]   - Field: ‘owner’
[17:40:28.595]   - Field: ‘envir’
[17:40:28.595]   - Field: ‘packages’
[17:40:28.595]   - Field: ‘gc’
[17:40:28.595]   - Field: ‘conditions’
[17:40:28.595]   - Field: ‘expr’
[17:40:28.595]   - Field: ‘uuid’
[17:40:28.595]   - Field: ‘seed’
[17:40:28.595]   - Field: ‘version’
[17:40:28.595]   - Field: ‘result’
[17:40:28.596]   - Field: ‘asynchronous’
[17:40:28.596]   - Field: ‘calls’
[17:40:28.596]   - Field: ‘globals’
[17:40:28.596]   - Field: ‘stdout’
[17:40:28.596]   - Field: ‘earlySignal’
[17:40:28.596]   - Field: ‘lazy’
[17:40:28.596]   - Field: ‘state’
[17:40:28.596] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:40:28.596] - Launch lazy future ...
[17:40:28.596] Packages needed by the future expression (n = 0): <none>
[17:40:28.597] Packages needed by future strategies (n = 0): <none>
[17:40:28.597] {
[17:40:28.597]     {
[17:40:28.597]         {
[17:40:28.597]             ...future.startTime <- base::Sys.time()
[17:40:28.597]             {
[17:40:28.597]                 {
[17:40:28.597]                   {
[17:40:28.597]                     base::local({
[17:40:28.597]                       has_future <- base::requireNamespace("future", 
[17:40:28.597]                         quietly = TRUE)
[17:40:28.597]                       if (has_future) {
[17:40:28.597]                         ns <- base::getNamespace("future")
[17:40:28.597]                         version <- ns[[".package"]][["version"]]
[17:40:28.597]                         if (is.null(version)) 
[17:40:28.597]                           version <- utils::packageVersion("future")
[17:40:28.597]                       }
[17:40:28.597]                       else {
[17:40:28.597]                         version <- NULL
[17:40:28.597]                       }
[17:40:28.597]                       if (!has_future || version < "1.8.0") {
[17:40:28.597]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:28.597]                           "", base::R.version$version.string), 
[17:40:28.597]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:28.597]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:28.597]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:28.597]                             "release", "version")], collapse = " "), 
[17:40:28.597]                           hostname = base::Sys.info()[["nodename"]])
[17:40:28.597]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:28.597]                           info)
[17:40:28.597]                         info <- base::paste(info, collapse = "; ")
[17:40:28.597]                         if (!has_future) {
[17:40:28.597]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:28.597]                             info)
[17:40:28.597]                         }
[17:40:28.597]                         else {
[17:40:28.597]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:28.597]                             info, version)
[17:40:28.597]                         }
[17:40:28.597]                         base::stop(msg)
[17:40:28.597]                       }
[17:40:28.597]                     })
[17:40:28.597]                   }
[17:40:28.597]                   options(future.plan = NULL)
[17:40:28.597]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.597]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:28.597]                 }
[17:40:28.597]                 ...future.workdir <- getwd()
[17:40:28.597]             }
[17:40:28.597]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:28.597]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:28.597]         }
[17:40:28.597]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:28.597]             future.globals.maxSize = 2621440000, future.globals.method = NULL, 
[17:40:28.597]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:28.597]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:28.597]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:28.597]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:28.597]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:28.597]             base::names(...future.oldOptions))
[17:40:28.597]     }
[17:40:28.597]     if (FALSE) {
[17:40:28.597]     }
[17:40:28.597]     else {
[17:40:28.597]         if (TRUE) {
[17:40:28.597]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:28.597]                 open = "w")
[17:40:28.597]         }
[17:40:28.597]         else {
[17:40:28.597]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:28.597]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:28.597]         }
[17:40:28.597]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:28.597]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:28.597]             base::sink(type = "output", split = FALSE)
[17:40:28.597]             base::close(...future.stdout)
[17:40:28.597]         }, add = TRUE)
[17:40:28.597]     }
[17:40:28.597]     ...future.frame <- base::sys.nframe()
[17:40:28.597]     ...future.conditions <- base::list()
[17:40:28.597]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:28.597]     if (FALSE) {
[17:40:28.597]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:28.597]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:28.597]     }
[17:40:28.597]     ...future.result <- base::tryCatch({
[17:40:28.597]         base::withCallingHandlers({
[17:40:28.597]             ...future.value <- base::withVisible(base::local({
[17:40:28.597]                 do.call(function(...) {
[17:40:28.597]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.597]                   if (!identical(...future.globals.maxSize.org, 
[17:40:28.597]                     ...future.globals.maxSize)) {
[17:40:28.597]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.597]                     on.exit(options(oopts), add = TRUE)
[17:40:28.597]                   }
[17:40:28.597]                   {
[17:40:28.597]                     lapply(seq_along(...future.elements_ii), 
[17:40:28.597]                       FUN = function(jj) {
[17:40:28.597]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.597]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.597]                           envir = globalenv(), inherits = FALSE)
[17:40:28.597]                         ...future.FUN(...future.X_jj, ...)
[17:40:28.597]                       })
[17:40:28.597]                   }
[17:40:28.597]                 }, args = future.call.arguments)
[17:40:28.597]             }))
[17:40:28.597]             future::FutureResult(value = ...future.value$value, 
[17:40:28.597]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.597]                   ...future.rng), globalenv = if (FALSE) 
[17:40:28.597]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:28.597]                     ...future.globalenv.names))
[17:40:28.597]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:28.597]         }, condition = base::local({
[17:40:28.597]             c <- base::c
[17:40:28.597]             inherits <- base::inherits
[17:40:28.597]             invokeRestart <- base::invokeRestart
[17:40:28.597]             length <- base::length
[17:40:28.597]             list <- base::list
[17:40:28.597]             seq.int <- base::seq.int
[17:40:28.597]             signalCondition <- base::signalCondition
[17:40:28.597]             sys.calls <- base::sys.calls
[17:40:28.597]             `[[` <- base::`[[`
[17:40:28.597]             `+` <- base::`+`
[17:40:28.597]             `<<-` <- base::`<<-`
[17:40:28.597]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:28.597]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:28.597]                   3L)]
[17:40:28.597]             }
[17:40:28.597]             function(cond) {
[17:40:28.597]                 is_error <- inherits(cond, "error")
[17:40:28.597]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:28.597]                   NULL)
[17:40:28.597]                 if (is_error) {
[17:40:28.597]                   sessionInformation <- function() {
[17:40:28.597]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:28.597]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:28.597]                       search = base::search(), system = base::Sys.info())
[17:40:28.597]                   }
[17:40:28.597]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.597]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:28.597]                     cond$call), session = sessionInformation(), 
[17:40:28.597]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:28.597]                   signalCondition(cond)
[17:40:28.597]                 }
[17:40:28.597]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:28.597]                 "immediateCondition"))) {
[17:40:28.597]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:28.597]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.597]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:28.597]                   if (TRUE && !signal) {
[17:40:28.597]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.597]                     {
[17:40:28.597]                       inherits <- base::inherits
[17:40:28.597]                       invokeRestart <- base::invokeRestart
[17:40:28.597]                       is.null <- base::is.null
[17:40:28.597]                       muffled <- FALSE
[17:40:28.597]                       if (inherits(cond, "message")) {
[17:40:28.597]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.597]                         if (muffled) 
[17:40:28.597]                           invokeRestart("muffleMessage")
[17:40:28.597]                       }
[17:40:28.597]                       else if (inherits(cond, "warning")) {
[17:40:28.597]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.597]                         if (muffled) 
[17:40:28.597]                           invokeRestart("muffleWarning")
[17:40:28.597]                       }
[17:40:28.597]                       else if (inherits(cond, "condition")) {
[17:40:28.597]                         if (!is.null(pattern)) {
[17:40:28.597]                           computeRestarts <- base::computeRestarts
[17:40:28.597]                           grepl <- base::grepl
[17:40:28.597]                           restarts <- computeRestarts(cond)
[17:40:28.597]                           for (restart in restarts) {
[17:40:28.597]                             name <- restart$name
[17:40:28.597]                             if (is.null(name)) 
[17:40:28.597]                               next
[17:40:28.597]                             if (!grepl(pattern, name)) 
[17:40:28.597]                               next
[17:40:28.597]                             invokeRestart(restart)
[17:40:28.597]                             muffled <- TRUE
[17:40:28.597]                             break
[17:40:28.597]                           }
[17:40:28.597]                         }
[17:40:28.597]                       }
[17:40:28.597]                       invisible(muffled)
[17:40:28.597]                     }
[17:40:28.597]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.597]                   }
[17:40:28.597]                 }
[17:40:28.597]                 else {
[17:40:28.597]                   if (TRUE) {
[17:40:28.597]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.597]                     {
[17:40:28.597]                       inherits <- base::inherits
[17:40:28.597]                       invokeRestart <- base::invokeRestart
[17:40:28.597]                       is.null <- base::is.null
[17:40:28.597]                       muffled <- FALSE
[17:40:28.597]                       if (inherits(cond, "message")) {
[17:40:28.597]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.597]                         if (muffled) 
[17:40:28.597]                           invokeRestart("muffleMessage")
[17:40:28.597]                       }
[17:40:28.597]                       else if (inherits(cond, "warning")) {
[17:40:28.597]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.597]                         if (muffled) 
[17:40:28.597]                           invokeRestart("muffleWarning")
[17:40:28.597]                       }
[17:40:28.597]                       else if (inherits(cond, "condition")) {
[17:40:28.597]                         if (!is.null(pattern)) {
[17:40:28.597]                           computeRestarts <- base::computeRestarts
[17:40:28.597]                           grepl <- base::grepl
[17:40:28.597]                           restarts <- computeRestarts(cond)
[17:40:28.597]                           for (restart in restarts) {
[17:40:28.597]                             name <- restart$name
[17:40:28.597]                             if (is.null(name)) 
[17:40:28.597]                               next
[17:40:28.597]                             if (!grepl(pattern, name)) 
[17:40:28.597]                               next
[17:40:28.597]                             invokeRestart(restart)
[17:40:28.597]                             muffled <- TRUE
[17:40:28.597]                             break
[17:40:28.597]                           }
[17:40:28.597]                         }
[17:40:28.597]                       }
[17:40:28.597]                       invisible(muffled)
[17:40:28.597]                     }
[17:40:28.597]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.597]                   }
[17:40:28.597]                 }
[17:40:28.597]             }
[17:40:28.597]         }))
[17:40:28.597]     }, error = function(ex) {
[17:40:28.597]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:28.597]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.597]                 ...future.rng), started = ...future.startTime, 
[17:40:28.597]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:28.597]             version = "1.8"), class = "FutureResult")
[17:40:28.597]     }, finally = {
[17:40:28.597]         if (!identical(...future.workdir, getwd())) 
[17:40:28.597]             setwd(...future.workdir)
[17:40:28.597]         {
[17:40:28.597]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:28.597]                 ...future.oldOptions$nwarnings <- NULL
[17:40:28.597]             }
[17:40:28.597]             base::options(...future.oldOptions)
[17:40:28.597]             if (.Platform$OS.type == "windows") {
[17:40:28.597]                 old_names <- names(...future.oldEnvVars)
[17:40:28.597]                 envs <- base::Sys.getenv()
[17:40:28.597]                 names <- names(envs)
[17:40:28.597]                 common <- intersect(names, old_names)
[17:40:28.597]                 added <- setdiff(names, old_names)
[17:40:28.597]                 removed <- setdiff(old_names, names)
[17:40:28.597]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:28.597]                   envs[common]]
[17:40:28.597]                 NAMES <- toupper(changed)
[17:40:28.597]                 args <- list()
[17:40:28.597]                 for (kk in seq_along(NAMES)) {
[17:40:28.597]                   name <- changed[[kk]]
[17:40:28.597]                   NAME <- NAMES[[kk]]
[17:40:28.597]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.597]                     next
[17:40:28.597]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.597]                 }
[17:40:28.597]                 NAMES <- toupper(added)
[17:40:28.597]                 for (kk in seq_along(NAMES)) {
[17:40:28.597]                   name <- added[[kk]]
[17:40:28.597]                   NAME <- NAMES[[kk]]
[17:40:28.597]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.597]                     next
[17:40:28.597]                   args[[name]] <- ""
[17:40:28.597]                 }
[17:40:28.597]                 NAMES <- toupper(removed)
[17:40:28.597]                 for (kk in seq_along(NAMES)) {
[17:40:28.597]                   name <- removed[[kk]]
[17:40:28.597]                   NAME <- NAMES[[kk]]
[17:40:28.597]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.597]                     next
[17:40:28.597]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.597]                 }
[17:40:28.597]                 if (length(args) > 0) 
[17:40:28.597]                   base::do.call(base::Sys.setenv, args = args)
[17:40:28.597]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:28.597]             }
[17:40:28.597]             else {
[17:40:28.597]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:28.597]             }
[17:40:28.597]             {
[17:40:28.597]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:28.597]                   0L) {
[17:40:28.597]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:28.597]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:28.597]                   base::options(opts)
[17:40:28.597]                 }
[17:40:28.597]                 {
[17:40:28.597]                   {
[17:40:28.597]                     base::assign(".Random.seed", c(10403L, 6L, 
[17:40:28.597]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[17:40:28.597]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[17:40:28.597]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[17:40:28.597]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[17:40:28.597]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[17:40:28.597]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[17:40:28.597]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[17:40:28.597]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[17:40:28.597]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[17:40:28.597]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[17:40:28.597]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[17:40:28.597]                     -1512233174L, -1985955764L, -425390065L, 
[17:40:28.597]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[17:40:28.597]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[17:40:28.597]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[17:40:28.597]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[17:40:28.597]                     1818328109L, -1284085436L, -1981489558L, 
[17:40:28.597]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[17:40:28.597]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[17:40:28.597]                     -1718567047L, -793788661L, -1133789126L, 
[17:40:28.597]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[17:40:28.597]                     -1823521982L, -1345991523L, -1672661737L, 
[17:40:28.597]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[17:40:28.597]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[17:40:28.597]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[17:40:28.597]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[17:40:28.597]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[17:40:28.597]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[17:40:28.597]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[17:40:28.597]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[17:40:28.597]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[17:40:28.597]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[17:40:28.597]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[17:40:28.597]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[17:40:28.597]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[17:40:28.597]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[17:40:28.597]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[17:40:28.597]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[17:40:28.597]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[17:40:28.597]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[17:40:28.597]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[17:40:28.597]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[17:40:28.597]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[17:40:28.597]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[17:40:28.597]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[17:40:28.597]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[17:40:28.597]                     -1119334354L, -1521015416L, -2041922421L, 
[17:40:28.597]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[17:40:28.597]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[17:40:28.597]                     1232111981L, -1801753084L, -1608606422L, 
[17:40:28.597]                     -1172096363L, 1420874031L, -1210473418L, 
[17:40:28.597]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[17:40:28.597]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[17:40:28.597]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[17:40:28.597]                     679371266L, -591318819L, -104578089L, -172818754L, 
[17:40:28.597]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[17:40:28.597]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[17:40:28.597]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[17:40:28.597]                     -332493318L, -1978392251L, -1691039632L, 
[17:40:28.597]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[17:40:28.597]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[17:40:28.597]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[17:40:28.597]                     87560756L, -87565624L, 426345146L, -699970416L, 
[17:40:28.597]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[17:40:28.597]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[17:40:28.597]                     -1178330196L, -687617348L, -1701912078L, 
[17:40:28.597]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[17:40:28.597]                     -1345416048L, 1816730492L, -1570431212L, 
[17:40:28.597]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[17:40:28.597]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[17:40:28.597]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[17:40:28.597]                     -1493184262L, -1943836976L, -590788308L, 
[17:40:28.597]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[17:40:28.597]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[17:40:28.597]                     1274857340L, -1205842638L, -1938479504L, 
[17:40:28.597]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[17:40:28.597]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[17:40:28.597]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[17:40:28.597]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[17:40:28.597]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[17:40:28.597]                     -1460751252L, 1201879444L, -1459788718L, 
[17:40:28.597]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[17:40:28.597]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[17:40:28.597]                     -420945808L, -1997735900L, -1838404552L, 
[17:40:28.597]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[17:40:28.597]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[17:40:28.597]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[17:40:28.597]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[17:40:28.597]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[17:40:28.597]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[17:40:28.597]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[17:40:28.597]                     942193650L, 751741680L, 689743428L, -18455976L, 
[17:40:28.597]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[17:40:28.597]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[17:40:28.597]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[17:40:28.597]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[17:40:28.597]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[17:40:28.597]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[17:40:28.597]                     -1357570110L, 1896595240L, -2066952276L, 
[17:40:28.597]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[17:40:28.597]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[17:40:28.597]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[17:40:28.597]                     769655120L, 236357794L, 181393736L, -13334772L, 
[17:40:28.597]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[17:40:28.597]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[17:40:28.597]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[17:40:28.597]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[17:40:28.597]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[17:40:28.597]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[17:40:28.597]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[17:40:28.597]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[17:40:28.597]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[17:40:28.597]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[17:40:28.597]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[17:40:28.597]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[17:40:28.597]                     -1365842884L, -438961294L, -1851472272L, 
[17:40:28.597]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[17:40:28.597]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[17:40:28.597]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[17:40:28.597]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[17:40:28.597]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[17:40:28.597]                     -594809770L, -2146766621L, -2013964635L, 
[17:40:28.597]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[17:40:28.597]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[17:40:28.597]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[17:40:28.597]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[17:40:28.597]                     -1426021878L, -1285634264L, 1507547537L, 
[17:40:28.597]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[17:40:28.597]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[17:40:28.597]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[17:40:28.597]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[17:40:28.597]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[17:40:28.597]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[17:40:28.597]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[17:40:28.597]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[17:40:28.597]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[17:40:28.597]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[17:40:28.597]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[17:40:28.597]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[17:40:28.597]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[17:40:28.597]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[17:40:28.597]                     -1604604761L, 1421229008L, -1268333714L, 
[17:40:28.597]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[17:40:28.597]                     -2070476623L, -2099222749L, 1141171236L, 
[17:40:28.597]                     -146426158L, -1797385433L, -1129376399L, 
[17:40:28.597]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[17:40:28.597]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[17:40:28.597]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[17:40:28.597]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[17:40:28.597]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[17:40:28.597]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[17:40:28.597]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[17:40:28.597]                     -1092079724L, -1765622238L, -1882554057L, 
[17:40:28.597]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[17:40:28.597]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[17:40:28.597]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[17:40:28.597]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[17:40:28.597]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[17:40:28.597]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[17:40:28.597]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[17:40:28.597]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[17:40:28.597]                     865377681L, -1127426242L), envir = base::globalenv(), 
[17:40:28.597]                       inherits = FALSE)
[17:40:28.597]                     NULL
[17:40:28.597]                   }
[17:40:28.597]                   options(future.plan = NULL)
[17:40:28.597]                   if (is.na(NA_character_)) 
[17:40:28.597]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.597]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:28.597]                   future::plan(list(function (..., envir = parent.frame()) 
[17:40:28.597]                   {
[17:40:28.597]                     future <- SequentialFuture(..., envir = envir)
[17:40:28.597]                     if (!future$lazy) 
[17:40:28.597]                       future <- run(future)
[17:40:28.597]                     invisible(future)
[17:40:28.597]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:28.597]                 }
[17:40:28.597]             }
[17:40:28.597]         }
[17:40:28.597]     })
[17:40:28.597]     if (TRUE) {
[17:40:28.597]         base::sink(type = "output", split = FALSE)
[17:40:28.597]         if (TRUE) {
[17:40:28.597]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:28.597]         }
[17:40:28.597]         else {
[17:40:28.597]             ...future.result["stdout"] <- base::list(NULL)
[17:40:28.597]         }
[17:40:28.597]         base::close(...future.stdout)
[17:40:28.597]         ...future.stdout <- NULL
[17:40:28.597]     }
[17:40:28.597]     ...future.result$conditions <- ...future.conditions
[17:40:28.597]     ...future.result$finished <- base::Sys.time()
[17:40:28.597]     ...future.result
[17:40:28.597] }
[17:40:28.600] assign_globals() ...
[17:40:28.600] List of 5
[17:40:28.600]  $ ...future.FUN            :function (...)  
[17:40:28.600]  $ future.call.arguments    : list()
[17:40:28.600]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.600]  $ ...future.elements_ii    :List of 5
[17:40:28.600]   ..$ : int 0
[17:40:28.600]   ..$ : int 0
[17:40:28.600]   ..$ : int 0
[17:40:28.600]   ..$ : int 0
[17:40:28.600]   ..$ : int 0
[17:40:28.600]  $ ...future.seeds_ii       :List of 5
[17:40:28.600]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[17:40:28.600]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[17:40:28.600]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[17:40:28.600]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[17:40:28.600]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[17:40:28.600]  $ ...future.globals.maxSize: NULL
[17:40:28.600]  - attr(*, "resolved")= logi FALSE
[17:40:28.600]  - attr(*, "total_size")= num 616
[17:40:28.600]  - attr(*, "where")=List of 5
[17:40:28.600]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:40:28.600]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:40:28.600]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:40:28.600]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:40:28.600]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:40:28.600]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.600]  - attr(*, "already-done")= logi TRUE
[17:40:28.607] - reassign environment for ‘...future.FUN’
[17:40:28.607] - copied ‘...future.FUN’ to environment
[17:40:28.607] - copied ‘future.call.arguments’ to environment
[17:40:28.607] - copied ‘...future.elements_ii’ to environment
[17:40:28.607] - copied ‘...future.seeds_ii’ to environment
[17:40:28.607] - copied ‘...future.globals.maxSize’ to environment
[17:40:28.607] assign_globals() ... done
[17:40:28.609] plan(): Setting new future strategy stack:
[17:40:28.609] List of future strategies:
[17:40:28.609] 1. sequential:
[17:40:28.609]    - args: function (..., envir = parent.frame())
[17:40:28.609]    - tweaked: FALSE
[17:40:28.609]    - call: NULL
[17:40:28.609] plan(): nbrOfWorkers() = 1
[17:40:28.610] plan(): Setting new future strategy stack:
[17:40:28.610] List of future strategies:
[17:40:28.610] 1. sequential:
[17:40:28.610]    - args: function (..., envir = parent.frame())
[17:40:28.610]    - tweaked: FALSE
[17:40:28.610]    - call: plan(strategy)
[17:40:28.610] plan(): nbrOfWorkers() = 1
[17:40:28.611] SequentialFuture started (and completed)
[17:40:28.611] - Launch lazy future ... done
[17:40:28.611] run() for ‘SequentialFuture’ ... done
[17:40:28.611] Created future:
[17:40:28.611] SequentialFuture:
[17:40:28.611] Label: ‘future_replicate-1’
[17:40:28.611] Expression:
[17:40:28.611] {
[17:40:28.611]     do.call(function(...) {
[17:40:28.611]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.611]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.611]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.611]             on.exit(options(oopts), add = TRUE)
[17:40:28.611]         }
[17:40:28.611]         {
[17:40:28.611]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.611]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.611]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.611]                   envir = globalenv(), inherits = FALSE)
[17:40:28.611]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.611]             })
[17:40:28.611]         }
[17:40:28.611]     }, args = future.call.arguments)
[17:40:28.611] }
[17:40:28.611] Lazy evaluation: FALSE
[17:40:28.611] Asynchronous evaluation: FALSE
[17:40:28.611] Local evaluation: TRUE
[17:40:28.611] Environment: R_GlobalEnv
[17:40:28.611] Capture standard output: TRUE
[17:40:28.611] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:28.611] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:28.611] Packages: <none>
[17:40:28.611] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:28.611] Resolved: TRUE
[17:40:28.611] Value: 280 bytes of class ‘list’
[17:40:28.611] Early signaling: FALSE
[17:40:28.611] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:28.611] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:40:28.612] Chunk #1 of 1 ... DONE
[17:40:28.612] Launching 1 futures (chunks) ... DONE
[17:40:28.612] Resolving 1 futures (chunks) ...
[17:40:28.612] resolve() on list ...
[17:40:28.612]  recursive: 0
[17:40:28.612]  length: 1
[17:40:28.612] 
[17:40:28.613] resolved() for ‘SequentialFuture’ ...
[17:40:28.613] - state: ‘finished’
[17:40:28.613] - run: TRUE
[17:40:28.613] - result: ‘FutureResult’
[17:40:28.613] resolved() for ‘SequentialFuture’ ... done
[17:40:28.613] Future #1
[17:40:28.613] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:40:28.613] - nx: 1
[17:40:28.613] - relay: TRUE
[17:40:28.613] - stdout: TRUE
[17:40:28.614] - signal: TRUE
[17:40:28.614] - resignal: FALSE
[17:40:28.614] - force: TRUE
[17:40:28.614] - relayed: [n=1] FALSE
[17:40:28.614] - queued futures: [n=1] FALSE
[17:40:28.614]  - until=1
[17:40:28.614]  - relaying element #1
[17:40:28.614] - relayed: [n=1] TRUE
[17:40:28.614] - queued futures: [n=1] TRUE
[17:40:28.614] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:40:28.615]  length: 0 (resolved future 1)
[17:40:28.615] Relaying remaining futures
[17:40:28.615] signalConditionsASAP(NULL, pos=0) ...
[17:40:28.615] - nx: 1
[17:40:28.615] - relay: TRUE
[17:40:28.615] - stdout: TRUE
[17:40:28.615] - signal: TRUE
[17:40:28.615] - resignal: FALSE
[17:40:28.615] - force: TRUE
[17:40:28.615] - relayed: [n=1] TRUE
[17:40:28.615] - queued futures: [n=1] TRUE
 - flush all
[17:40:28.615] - relayed: [n=1] TRUE
[17:40:28.616] - queued futures: [n=1] TRUE
[17:40:28.616] signalConditionsASAP(NULL, pos=0) ... done
[17:40:28.616] resolve() on list ... DONE
[17:40:28.616]  - Number of value chunks collected: 1
[17:40:28.616] Resolving 1 futures (chunks) ... DONE
[17:40:28.616] Reducing values from 1 chunks ...
[17:40:28.616]  - Number of values collected after concatenation: 5
[17:40:28.616]  - Number of values expected: 5
[17:40:28.616] Reducing values from 1 chunks ... DONE
[17:40:28.616] future_lapply() ... DONE
- example(replicate) ...
[17:40:28.617] future_lapply() ...
[17:40:28.617] Generating random seeds ...
[17:40:28.617] Generating random seed streams for 5 elements ...
[17:40:28.617] Generating random seed streams for 5 elements ... DONE
[17:40:28.617] Generating random seeds ... DONE
[17:40:28.618] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:40:28.618] Number of chunks: 1
[17:40:28.618] getGlobalsAndPackagesXApply() ...
[17:40:28.618]  - future.globals: TRUE
[17:40:28.618] getGlobalsAndPackages() ...
[17:40:28.618] Searching for globals...
[17:40:28.620] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[17:40:28.620] Searching for globals ... DONE
[17:40:28.620] Resolving globals: FALSE
[17:40:28.621] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[17:40:28.621] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[17:40:28.621] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[17:40:28.621] 
[17:40:28.621] getGlobalsAndPackages() ... DONE
[17:40:28.621]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[17:40:28.622]  - needed namespaces: [n=0] 
[17:40:28.622] Finding globals ... DONE
[17:40:28.622]  - use_args: TRUE
[17:40:28.622]  - Getting '...' globals ...
[17:40:28.622] resolve() on list ...
[17:40:28.622]  recursive: 0
[17:40:28.622]  length: 1
[17:40:28.622]  elements: ‘...’
[17:40:28.623]  length: 0 (resolved future 1)
[17:40:28.623] resolve() on list ... DONE
[17:40:28.623]    - '...' content: [n=0] 
[17:40:28.623] List of 1
[17:40:28.623]  $ ...: list()
[17:40:28.623]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.623]  - attr(*, "where")=List of 1
[17:40:28.623]   ..$ ...:<environment: 0x558a3a4d3570> 
[17:40:28.623]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.623]  - attr(*, "resolved")= logi TRUE
[17:40:28.623]  - attr(*, "total_size")= num NA
[17:40:28.625]  - Getting '...' globals ... DONE
[17:40:28.625] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[17:40:28.625] List of 4
[17:40:28.625]  $ ...future.FUN:function (...)  
[17:40:28.625]  $ foo          :function (x = 1, y = 2)  
[17:40:28.625]  $ x            : num 3
[17:40:28.625]  $ ...          : list()
[17:40:28.625]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.625]  - attr(*, "where")=List of 4
[17:40:28.625]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:40:28.625]   ..$ foo          :<environment: R_EmptyEnv> 
[17:40:28.625]   ..$ x            :<environment: R_EmptyEnv> 
[17:40:28.625]   ..$ ...          :<environment: 0x558a3a4d3570> 
[17:40:28.625]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.625]  - attr(*, "resolved")= logi FALSE
[17:40:28.625]  - attr(*, "total_size")= num 2200
[17:40:28.629] Packages to be attached in all futures: [n=0] 
[17:40:28.629] getGlobalsAndPackagesXApply() ... DONE
[17:40:28.629] Number of futures (= number of chunks): 1
[17:40:28.629] Launching 1 futures (chunks) ...
[17:40:28.629] Chunk #1 of 1 ...
[17:40:28.629]  - Finding globals in 'X' for chunk #1 ...
[17:40:28.630] getGlobalsAndPackages() ...
[17:40:28.630] Searching for globals...
[17:40:28.630] 
[17:40:28.630] Searching for globals ... DONE
[17:40:28.630] - globals: [0] <none>
[17:40:28.631] getGlobalsAndPackages() ... DONE
[17:40:28.631]    + additional globals found: [n=0] 
[17:40:28.631]    + additional namespaces needed: [n=0] 
[17:40:28.632]  - Finding globals in 'X' for chunk #1 ... DONE
[17:40:28.632]  - Adjusted option 'future.globals.maxSize': 524288000 -> 5 * 524288000 = 2621440000 (bytes)
[17:40:28.632]  - seeds: [5] <seeds>
[17:40:28.632] getGlobalsAndPackages() ...
[17:40:28.632] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.632] Resolving globals: FALSE
[17:40:28.632] Tweak future expression to call with '...' arguments ...
[17:40:28.632] {
[17:40:28.632]     do.call(function(...) {
[17:40:28.632]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.632]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.632]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.632]             on.exit(options(oopts), add = TRUE)
[17:40:28.632]         }
[17:40:28.632]         {
[17:40:28.632]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.632]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.632]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.632]                   envir = globalenv(), inherits = FALSE)
[17:40:28.632]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.632]             })
[17:40:28.632]         }
[17:40:28.632]     }, args = future.call.arguments)
[17:40:28.632] }
[17:40:28.633] Tweak future expression to call with '...' arguments ... DONE
[17:40:28.633] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.633] 
[17:40:28.633] getGlobalsAndPackages() ... DONE
[17:40:28.633] run() for ‘Future’ ...
[17:40:28.633] - state: ‘created’
[17:40:28.634] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:40:28.634] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:40:28.634] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:40:28.634]   - Field: ‘label’
[17:40:28.634]   - Field: ‘local’
[17:40:28.634]   - Field: ‘owner’
[17:40:28.634]   - Field: ‘envir’
[17:40:28.634]   - Field: ‘packages’
[17:40:28.635]   - Field: ‘gc’
[17:40:28.635]   - Field: ‘conditions’
[17:40:28.635]   - Field: ‘expr’
[17:40:28.635]   - Field: ‘uuid’
[17:40:28.635]   - Field: ‘seed’
[17:40:28.635]   - Field: ‘version’
[17:40:28.635]   - Field: ‘result’
[17:40:28.635]   - Field: ‘asynchronous’
[17:40:28.635]   - Field: ‘calls’
[17:40:28.635]   - Field: ‘globals’
[17:40:28.635]   - Field: ‘stdout’
[17:40:28.636]   - Field: ‘earlySignal’
[17:40:28.636]   - Field: ‘lazy’
[17:40:28.636]   - Field: ‘state’
[17:40:28.636] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:40:28.636] - Launch lazy future ...
[17:40:28.636] Packages needed by the future expression (n = 0): <none>
[17:40:28.636] Packages needed by future strategies (n = 0): <none>
[17:40:28.637] {
[17:40:28.637]     {
[17:40:28.637]         {
[17:40:28.637]             ...future.startTime <- base::Sys.time()
[17:40:28.637]             {
[17:40:28.637]                 {
[17:40:28.637]                   {
[17:40:28.637]                     base::local({
[17:40:28.637]                       has_future <- base::requireNamespace("future", 
[17:40:28.637]                         quietly = TRUE)
[17:40:28.637]                       if (has_future) {
[17:40:28.637]                         ns <- base::getNamespace("future")
[17:40:28.637]                         version <- ns[[".package"]][["version"]]
[17:40:28.637]                         if (is.null(version)) 
[17:40:28.637]                           version <- utils::packageVersion("future")
[17:40:28.637]                       }
[17:40:28.637]                       else {
[17:40:28.637]                         version <- NULL
[17:40:28.637]                       }
[17:40:28.637]                       if (!has_future || version < "1.8.0") {
[17:40:28.637]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:28.637]                           "", base::R.version$version.string), 
[17:40:28.637]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:28.637]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:28.637]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:28.637]                             "release", "version")], collapse = " "), 
[17:40:28.637]                           hostname = base::Sys.info()[["nodename"]])
[17:40:28.637]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:28.637]                           info)
[17:40:28.637]                         info <- base::paste(info, collapse = "; ")
[17:40:28.637]                         if (!has_future) {
[17:40:28.637]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:28.637]                             info)
[17:40:28.637]                         }
[17:40:28.637]                         else {
[17:40:28.637]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:28.637]                             info, version)
[17:40:28.637]                         }
[17:40:28.637]                         base::stop(msg)
[17:40:28.637]                       }
[17:40:28.637]                     })
[17:40:28.637]                   }
[17:40:28.637]                   options(future.plan = NULL)
[17:40:28.637]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.637]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:28.637]                 }
[17:40:28.637]                 ...future.workdir <- getwd()
[17:40:28.637]             }
[17:40:28.637]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:28.637]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:28.637]         }
[17:40:28.637]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:28.637]             future.globals.maxSize = 2621440000, future.globals.method = NULL, 
[17:40:28.637]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:28.637]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:28.637]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:28.637]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:28.637]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:28.637]             base::names(...future.oldOptions))
[17:40:28.637]     }
[17:40:28.637]     if (FALSE) {
[17:40:28.637]     }
[17:40:28.637]     else {
[17:40:28.637]         if (TRUE) {
[17:40:28.637]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:28.637]                 open = "w")
[17:40:28.637]         }
[17:40:28.637]         else {
[17:40:28.637]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:28.637]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:28.637]         }
[17:40:28.637]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:28.637]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:28.637]             base::sink(type = "output", split = FALSE)
[17:40:28.637]             base::close(...future.stdout)
[17:40:28.637]         }, add = TRUE)
[17:40:28.637]     }
[17:40:28.637]     ...future.frame <- base::sys.nframe()
[17:40:28.637]     ...future.conditions <- base::list()
[17:40:28.637]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:28.637]     if (FALSE) {
[17:40:28.637]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:28.637]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:28.637]     }
[17:40:28.637]     ...future.result <- base::tryCatch({
[17:40:28.637]         base::withCallingHandlers({
[17:40:28.637]             ...future.value <- base::withVisible(base::local({
[17:40:28.637]                 do.call(function(...) {
[17:40:28.637]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.637]                   if (!identical(...future.globals.maxSize.org, 
[17:40:28.637]                     ...future.globals.maxSize)) {
[17:40:28.637]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.637]                     on.exit(options(oopts), add = TRUE)
[17:40:28.637]                   }
[17:40:28.637]                   {
[17:40:28.637]                     lapply(seq_along(...future.elements_ii), 
[17:40:28.637]                       FUN = function(jj) {
[17:40:28.637]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.637]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.637]                           envir = globalenv(), inherits = FALSE)
[17:40:28.637]                         ...future.FUN(...future.X_jj, ...)
[17:40:28.637]                       })
[17:40:28.637]                   }
[17:40:28.637]                 }, args = future.call.arguments)
[17:40:28.637]             }))
[17:40:28.637]             future::FutureResult(value = ...future.value$value, 
[17:40:28.637]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.637]                   ...future.rng), globalenv = if (FALSE) 
[17:40:28.637]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:28.637]                     ...future.globalenv.names))
[17:40:28.637]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:28.637]         }, condition = base::local({
[17:40:28.637]             c <- base::c
[17:40:28.637]             inherits <- base::inherits
[17:40:28.637]             invokeRestart <- base::invokeRestart
[17:40:28.637]             length <- base::length
[17:40:28.637]             list <- base::list
[17:40:28.637]             seq.int <- base::seq.int
[17:40:28.637]             signalCondition <- base::signalCondition
[17:40:28.637]             sys.calls <- base::sys.calls
[17:40:28.637]             `[[` <- base::`[[`
[17:40:28.637]             `+` <- base::`+`
[17:40:28.637]             `<<-` <- base::`<<-`
[17:40:28.637]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:28.637]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:28.637]                   3L)]
[17:40:28.637]             }
[17:40:28.637]             function(cond) {
[17:40:28.637]                 is_error <- inherits(cond, "error")
[17:40:28.637]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:28.637]                   NULL)
[17:40:28.637]                 if (is_error) {
[17:40:28.637]                   sessionInformation <- function() {
[17:40:28.637]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:28.637]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:28.637]                       search = base::search(), system = base::Sys.info())
[17:40:28.637]                   }
[17:40:28.637]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.637]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:28.637]                     cond$call), session = sessionInformation(), 
[17:40:28.637]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:28.637]                   signalCondition(cond)
[17:40:28.637]                 }
[17:40:28.637]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:28.637]                 "immediateCondition"))) {
[17:40:28.637]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:28.637]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.637]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:28.637]                   if (TRUE && !signal) {
[17:40:28.637]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.637]                     {
[17:40:28.637]                       inherits <- base::inherits
[17:40:28.637]                       invokeRestart <- base::invokeRestart
[17:40:28.637]                       is.null <- base::is.null
[17:40:28.637]                       muffled <- FALSE
[17:40:28.637]                       if (inherits(cond, "message")) {
[17:40:28.637]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.637]                         if (muffled) 
[17:40:28.637]                           invokeRestart("muffleMessage")
[17:40:28.637]                       }
[17:40:28.637]                       else if (inherits(cond, "warning")) {
[17:40:28.637]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.637]                         if (muffled) 
[17:40:28.637]                           invokeRestart("muffleWarning")
[17:40:28.637]                       }
[17:40:28.637]                       else if (inherits(cond, "condition")) {
[17:40:28.637]                         if (!is.null(pattern)) {
[17:40:28.637]                           computeRestarts <- base::computeRestarts
[17:40:28.637]                           grepl <- base::grepl
[17:40:28.637]                           restarts <- computeRestarts(cond)
[17:40:28.637]                           for (restart in restarts) {
[17:40:28.637]                             name <- restart$name
[17:40:28.637]                             if (is.null(name)) 
[17:40:28.637]                               next
[17:40:28.637]                             if (!grepl(pattern, name)) 
[17:40:28.637]                               next
[17:40:28.637]                             invokeRestart(restart)
[17:40:28.637]                             muffled <- TRUE
[17:40:28.637]                             break
[17:40:28.637]                           }
[17:40:28.637]                         }
[17:40:28.637]                       }
[17:40:28.637]                       invisible(muffled)
[17:40:28.637]                     }
[17:40:28.637]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.637]                   }
[17:40:28.637]                 }
[17:40:28.637]                 else {
[17:40:28.637]                   if (TRUE) {
[17:40:28.637]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.637]                     {
[17:40:28.637]                       inherits <- base::inherits
[17:40:28.637]                       invokeRestart <- base::invokeRestart
[17:40:28.637]                       is.null <- base::is.null
[17:40:28.637]                       muffled <- FALSE
[17:40:28.637]                       if (inherits(cond, "message")) {
[17:40:28.637]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.637]                         if (muffled) 
[17:40:28.637]                           invokeRestart("muffleMessage")
[17:40:28.637]                       }
[17:40:28.637]                       else if (inherits(cond, "warning")) {
[17:40:28.637]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.637]                         if (muffled) 
[17:40:28.637]                           invokeRestart("muffleWarning")
[17:40:28.637]                       }
[17:40:28.637]                       else if (inherits(cond, "condition")) {
[17:40:28.637]                         if (!is.null(pattern)) {
[17:40:28.637]                           computeRestarts <- base::computeRestarts
[17:40:28.637]                           grepl <- base::grepl
[17:40:28.637]                           restarts <- computeRestarts(cond)
[17:40:28.637]                           for (restart in restarts) {
[17:40:28.637]                             name <- restart$name
[17:40:28.637]                             if (is.null(name)) 
[17:40:28.637]                               next
[17:40:28.637]                             if (!grepl(pattern, name)) 
[17:40:28.637]                               next
[17:40:28.637]                             invokeRestart(restart)
[17:40:28.637]                             muffled <- TRUE
[17:40:28.637]                             break
[17:40:28.637]                           }
[17:40:28.637]                         }
[17:40:28.637]                       }
[17:40:28.637]                       invisible(muffled)
[17:40:28.637]                     }
[17:40:28.637]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.637]                   }
[17:40:28.637]                 }
[17:40:28.637]             }
[17:40:28.637]         }))
[17:40:28.637]     }, error = function(ex) {
[17:40:28.637]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:28.637]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.637]                 ...future.rng), started = ...future.startTime, 
[17:40:28.637]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:28.637]             version = "1.8"), class = "FutureResult")
[17:40:28.637]     }, finally = {
[17:40:28.637]         if (!identical(...future.workdir, getwd())) 
[17:40:28.637]             setwd(...future.workdir)
[17:40:28.637]         {
[17:40:28.637]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:28.637]                 ...future.oldOptions$nwarnings <- NULL
[17:40:28.637]             }
[17:40:28.637]             base::options(...future.oldOptions)
[17:40:28.637]             if (.Platform$OS.type == "windows") {
[17:40:28.637]                 old_names <- names(...future.oldEnvVars)
[17:40:28.637]                 envs <- base::Sys.getenv()
[17:40:28.637]                 names <- names(envs)
[17:40:28.637]                 common <- intersect(names, old_names)
[17:40:28.637]                 added <- setdiff(names, old_names)
[17:40:28.637]                 removed <- setdiff(old_names, names)
[17:40:28.637]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:28.637]                   envs[common]]
[17:40:28.637]                 NAMES <- toupper(changed)
[17:40:28.637]                 args <- list()
[17:40:28.637]                 for (kk in seq_along(NAMES)) {
[17:40:28.637]                   name <- changed[[kk]]
[17:40:28.637]                   NAME <- NAMES[[kk]]
[17:40:28.637]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.637]                     next
[17:40:28.637]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.637]                 }
[17:40:28.637]                 NAMES <- toupper(added)
[17:40:28.637]                 for (kk in seq_along(NAMES)) {
[17:40:28.637]                   name <- added[[kk]]
[17:40:28.637]                   NAME <- NAMES[[kk]]
[17:40:28.637]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.637]                     next
[17:40:28.637]                   args[[name]] <- ""
[17:40:28.637]                 }
[17:40:28.637]                 NAMES <- toupper(removed)
[17:40:28.637]                 for (kk in seq_along(NAMES)) {
[17:40:28.637]                   name <- removed[[kk]]
[17:40:28.637]                   NAME <- NAMES[[kk]]
[17:40:28.637]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.637]                     next
[17:40:28.637]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.637]                 }
[17:40:28.637]                 if (length(args) > 0) 
[17:40:28.637]                   base::do.call(base::Sys.setenv, args = args)
[17:40:28.637]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:28.637]             }
[17:40:28.637]             else {
[17:40:28.637]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:28.637]             }
[17:40:28.637]             {
[17:40:28.637]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:28.637]                   0L) {
[17:40:28.637]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:28.637]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:28.637]                   base::options(opts)
[17:40:28.637]                 }
[17:40:28.637]                 {
[17:40:28.637]                   {
[17:40:28.637]                     base::assign(".Random.seed", c(10403L, 8L, 
[17:40:28.637]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[17:40:28.637]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[17:40:28.637]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[17:40:28.637]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[17:40:28.637]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[17:40:28.637]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[17:40:28.637]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[17:40:28.637]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[17:40:28.637]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[17:40:28.637]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[17:40:28.637]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[17:40:28.637]                     -1512233174L, -1985955764L, -425390065L, 
[17:40:28.637]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[17:40:28.637]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[17:40:28.637]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[17:40:28.637]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[17:40:28.637]                     1818328109L, -1284085436L, -1981489558L, 
[17:40:28.637]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[17:40:28.637]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[17:40:28.637]                     -1718567047L, -793788661L, -1133789126L, 
[17:40:28.637]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[17:40:28.637]                     -1823521982L, -1345991523L, -1672661737L, 
[17:40:28.637]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[17:40:28.637]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[17:40:28.637]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[17:40:28.637]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[17:40:28.637]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[17:40:28.637]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[17:40:28.637]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[17:40:28.637]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[17:40:28.637]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[17:40:28.637]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[17:40:28.637]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[17:40:28.637]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[17:40:28.637]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[17:40:28.637]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[17:40:28.637]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[17:40:28.637]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[17:40:28.637]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[17:40:28.637]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[17:40:28.637]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[17:40:28.637]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[17:40:28.637]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[17:40:28.637]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[17:40:28.637]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[17:40:28.637]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[17:40:28.637]                     -1119334354L, -1521015416L, -2041922421L, 
[17:40:28.637]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[17:40:28.637]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[17:40:28.637]                     1232111981L, -1801753084L, -1608606422L, 
[17:40:28.637]                     -1172096363L, 1420874031L, -1210473418L, 
[17:40:28.637]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[17:40:28.637]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[17:40:28.637]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[17:40:28.637]                     679371266L, -591318819L, -104578089L, -172818754L, 
[17:40:28.637]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[17:40:28.637]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[17:40:28.637]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[17:40:28.637]                     -332493318L, -1978392251L, -1691039632L, 
[17:40:28.637]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[17:40:28.637]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[17:40:28.637]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[17:40:28.637]                     87560756L, -87565624L, 426345146L, -699970416L, 
[17:40:28.637]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[17:40:28.637]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[17:40:28.637]                     -1178330196L, -687617348L, -1701912078L, 
[17:40:28.637]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[17:40:28.637]                     -1345416048L, 1816730492L, -1570431212L, 
[17:40:28.637]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[17:40:28.637]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[17:40:28.637]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[17:40:28.637]                     -1493184262L, -1943836976L, -590788308L, 
[17:40:28.637]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[17:40:28.637]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[17:40:28.637]                     1274857340L, -1205842638L, -1938479504L, 
[17:40:28.637]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[17:40:28.637]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[17:40:28.637]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[17:40:28.637]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[17:40:28.637]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[17:40:28.637]                     -1460751252L, 1201879444L, -1459788718L, 
[17:40:28.637]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[17:40:28.637]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[17:40:28.637]                     -420945808L, -1997735900L, -1838404552L, 
[17:40:28.637]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[17:40:28.637]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[17:40:28.637]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[17:40:28.637]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[17:40:28.637]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[17:40:28.637]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[17:40:28.637]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[17:40:28.637]                     942193650L, 751741680L, 689743428L, -18455976L, 
[17:40:28.637]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[17:40:28.637]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[17:40:28.637]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[17:40:28.637]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[17:40:28.637]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[17:40:28.637]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[17:40:28.637]                     -1357570110L, 1896595240L, -2066952276L, 
[17:40:28.637]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[17:40:28.637]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[17:40:28.637]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[17:40:28.637]                     769655120L, 236357794L, 181393736L, -13334772L, 
[17:40:28.637]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[17:40:28.637]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[17:40:28.637]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[17:40:28.637]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[17:40:28.637]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[17:40:28.637]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[17:40:28.637]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[17:40:28.637]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[17:40:28.637]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[17:40:28.637]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[17:40:28.637]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[17:40:28.637]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[17:40:28.637]                     -1365842884L, -438961294L, -1851472272L, 
[17:40:28.637]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[17:40:28.637]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[17:40:28.637]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[17:40:28.637]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[17:40:28.637]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[17:40:28.637]                     -594809770L, -2146766621L, -2013964635L, 
[17:40:28.637]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[17:40:28.637]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[17:40:28.637]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[17:40:28.637]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[17:40:28.637]                     -1426021878L, -1285634264L, 1507547537L, 
[17:40:28.637]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[17:40:28.637]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[17:40:28.637]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[17:40:28.637]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[17:40:28.637]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[17:40:28.637]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[17:40:28.637]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[17:40:28.637]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[17:40:28.637]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[17:40:28.637]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[17:40:28.637]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[17:40:28.637]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[17:40:28.637]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[17:40:28.637]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[17:40:28.637]                     -1604604761L, 1421229008L, -1268333714L, 
[17:40:28.637]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[17:40:28.637]                     -2070476623L, -2099222749L, 1141171236L, 
[17:40:28.637]                     -146426158L, -1797385433L, -1129376399L, 
[17:40:28.637]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[17:40:28.637]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[17:40:28.637]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[17:40:28.637]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[17:40:28.637]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[17:40:28.637]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[17:40:28.637]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[17:40:28.637]                     -1092079724L, -1765622238L, -1882554057L, 
[17:40:28.637]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[17:40:28.637]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[17:40:28.637]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[17:40:28.637]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[17:40:28.637]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[17:40:28.637]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[17:40:28.637]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[17:40:28.637]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[17:40:28.637]                     865377681L, -1127426242L), envir = base::globalenv(), 
[17:40:28.637]                       inherits = FALSE)
[17:40:28.637]                     NULL
[17:40:28.637]                   }
[17:40:28.637]                   options(future.plan = NULL)
[17:40:28.637]                   if (is.na(NA_character_)) 
[17:40:28.637]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.637]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:28.637]                   future::plan(list(function (..., envir = parent.frame()) 
[17:40:28.637]                   {
[17:40:28.637]                     future <- SequentialFuture(..., envir = envir)
[17:40:28.637]                     if (!future$lazy) 
[17:40:28.637]                       future <- run(future)
[17:40:28.637]                     invisible(future)
[17:40:28.637]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:28.637]                 }
[17:40:28.637]             }
[17:40:28.637]         }
[17:40:28.637]     })
[17:40:28.637]     if (TRUE) {
[17:40:28.637]         base::sink(type = "output", split = FALSE)
[17:40:28.637]         if (TRUE) {
[17:40:28.637]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:28.637]         }
[17:40:28.637]         else {
[17:40:28.637]             ...future.result["stdout"] <- base::list(NULL)
[17:40:28.637]         }
[17:40:28.637]         base::close(...future.stdout)
[17:40:28.637]         ...future.stdout <- NULL
[17:40:28.637]     }
[17:40:28.637]     ...future.result$conditions <- ...future.conditions
[17:40:28.637]     ...future.result$finished <- base::Sys.time()
[17:40:28.637]     ...future.result
[17:40:28.637] }
[17:40:28.639] assign_globals() ...
[17:40:28.639] List of 7
[17:40:28.639]  $ ...future.FUN            :function (...)  
[17:40:28.639]  $ foo                      :function (x = 1, y = 2)  
[17:40:28.639]  $ x                        : num 3
[17:40:28.639]  $ future.call.arguments    : list()
[17:40:28.639]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.639]  $ ...future.elements_ii    :List of 5
[17:40:28.639]   ..$ : int 0
[17:40:28.639]   ..$ : int 0
[17:40:28.639]   ..$ : int 0
[17:40:28.639]   ..$ : int 0
[17:40:28.639]   ..$ : int 0
[17:40:28.639]  $ ...future.seeds_ii       :List of 5
[17:40:28.639]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[17:40:28.639]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[17:40:28.639]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[17:40:28.639]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[17:40:28.639]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[17:40:28.639]  $ ...future.globals.maxSize: NULL
[17:40:28.639]  - attr(*, "resolved")= logi FALSE
[17:40:28.639]  - attr(*, "total_size")= num 2200
[17:40:28.639]  - attr(*, "where")=List of 7
[17:40:28.639]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:40:28.639]   ..$ foo                      :<environment: R_EmptyEnv> 
[17:40:28.639]   ..$ x                        :<environment: R_EmptyEnv> 
[17:40:28.639]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:40:28.639]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:40:28.639]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:40:28.639]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:40:28.639]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.639]  - attr(*, "already-done")= logi TRUE
[17:40:28.647] - reassign environment for ‘...future.FUN’
[17:40:28.647] - copied ‘...future.FUN’ to environment
[17:40:28.647] - reassign environment for ‘foo’
[17:40:28.647] - copied ‘foo’ to environment
[17:40:28.647] - copied ‘x’ to environment
[17:40:28.647] - copied ‘future.call.arguments’ to environment
[17:40:28.648] - copied ‘...future.elements_ii’ to environment
[17:40:28.648] - copied ‘...future.seeds_ii’ to environment
[17:40:28.648] - copied ‘...future.globals.maxSize’ to environment
[17:40:28.648] assign_globals() ... done
[17:40:28.648] plan(): Setting new future strategy stack:
[17:40:28.648] List of future strategies:
[17:40:28.648] 1. sequential:
[17:40:28.648]    - args: function (..., envir = parent.frame())
[17:40:28.648]    - tweaked: FALSE
[17:40:28.648]    - call: NULL
[17:40:28.648] plan(): nbrOfWorkers() = 1
[17:40:28.649] plan(): Setting new future strategy stack:
[17:40:28.649] List of future strategies:
[17:40:28.649] 1. sequential:
[17:40:28.649]    - args: function (..., envir = parent.frame())
[17:40:28.649]    - tweaked: FALSE
[17:40:28.649]    - call: plan(strategy)
[17:40:28.650] plan(): nbrOfWorkers() = 1
[17:40:28.650] SequentialFuture started (and completed)
[17:40:28.650] - Launch lazy future ... done
[17:40:28.650] run() for ‘SequentialFuture’ ... done
[17:40:28.650] Created future:
[17:40:28.650] SequentialFuture:
[17:40:28.650] Label: ‘future_replicate-1’
[17:40:28.650] Expression:
[17:40:28.650] {
[17:40:28.650]     do.call(function(...) {
[17:40:28.650]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.650]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.650]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.650]             on.exit(options(oopts), add = TRUE)
[17:40:28.650]         }
[17:40:28.650]         {
[17:40:28.650]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.650]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.650]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.650]                   envir = globalenv(), inherits = FALSE)
[17:40:28.650]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.650]             })
[17:40:28.650]         }
[17:40:28.650]     }, args = future.call.arguments)
[17:40:28.650] }
[17:40:28.650] Lazy evaluation: FALSE
[17:40:28.650] Asynchronous evaluation: FALSE
[17:40:28.650] Local evaluation: TRUE
[17:40:28.650] Environment: 0x558a3a18d900
[17:40:28.650] Capture standard output: TRUE
[17:40:28.650] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:28.650] Globals: 7 objects totaling 2.81 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, ...)
[17:40:28.650] Packages: <none>
[17:40:28.650] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:28.650] Resolved: TRUE
[17:40:28.650] Value: 320 bytes of class ‘list’
[17:40:28.650] Early signaling: FALSE
[17:40:28.650] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:28.650] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:40:28.651] Chunk #1 of 1 ... DONE
[17:40:28.651] Launching 1 futures (chunks) ... DONE
[17:40:28.651] Resolving 1 futures (chunks) ...
[17:40:28.652] resolve() on list ...
[17:40:28.652]  recursive: 0
[17:40:28.652]  length: 1
[17:40:28.652] 
[17:40:28.652] resolved() for ‘SequentialFuture’ ...
[17:40:28.652] - state: ‘finished’
[17:40:28.652] - run: TRUE
[17:40:28.652] - result: ‘FutureResult’
[17:40:28.652] resolved() for ‘SequentialFuture’ ... done
[17:40:28.652] Future #1
[17:40:28.653] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:40:28.653] - nx: 1
[17:40:28.653] - relay: TRUE
[17:40:28.653] - stdout: TRUE
[17:40:28.653] - signal: TRUE
[17:40:28.653] - resignal: FALSE
[17:40:28.653] - force: TRUE
[17:40:28.653] - relayed: [n=1] FALSE
[17:40:28.653] - queued futures: [n=1] FALSE
[17:40:28.653]  - until=1
[17:40:28.653]  - relaying element #1
[17:40:28.654] - relayed: [n=1] TRUE
[17:40:28.654] - queued futures: [n=1] TRUE
[17:40:28.654] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:40:28.654]  length: 0 (resolved future 1)
[17:40:28.655] Relaying remaining futures
[17:40:28.655] signalConditionsASAP(NULL, pos=0) ...
[17:40:28.655] - nx: 1
[17:40:28.655] - relay: TRUE
[17:40:28.655] - stdout: TRUE
[17:40:28.655] - signal: TRUE
[17:40:28.655] - resignal: FALSE
[17:40:28.656] - force: TRUE
[17:40:28.656] - relayed: [n=1] TRUE
[17:40:28.656] - queued futures: [n=1] TRUE
 - flush all
[17:40:28.656] - relayed: [n=1] TRUE
[17:40:28.656] - queued futures: [n=1] TRUE
[17:40:28.656] signalConditionsASAP(NULL, pos=0) ... done
[17:40:28.656] resolve() on list ... DONE
[17:40:28.656]  - Number of value chunks collected: 1
[17:40:28.656] Resolving 1 futures (chunks) ... DONE
[17:40:28.656] Reducing values from 1 chunks ...
[17:40:28.657]  - Number of values collected after concatenation: 5
[17:40:28.657]  - Number of values expected: 5
[17:40:28.657] Reducing values from 1 chunks ... DONE
[17:40:28.657] future_lapply() ... DONE
[17:40:28.657] plan(): Setting new future strategy stack:
[17:40:28.657] List of future strategies:
[17:40:28.657] 1. sequential:
[17:40:28.657]    - args: function (..., envir = parent.frame())
[17:40:28.657]    - tweaked: FALSE
[17:40:28.657]    - call: plan(sequential)
[17:40:28.658] plan(): nbrOfWorkers() = 1
*** strategy = ‘sequential’ ... done
*** strategy = ‘multicore’ ...
[17:40:28.658] plan(): Setting new future strategy stack:
[17:40:28.658] List of future strategies:
[17:40:28.658] 1. multicore:
[17:40:28.658]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:28.658]    - tweaked: FALSE
[17:40:28.658]    - call: plan(strategy)
[17:40:28.662] plan(): nbrOfWorkers() = 2
[17:40:28.663] future_lapply() ...
[17:40:28.663] Generating random seeds ...
[17:40:28.663] Generating random seed streams for 5 elements ...
[17:40:28.663] Generating random seed streams for 5 elements ... DONE
[17:40:28.664] Generating random seeds ... DONE
[17:40:28.664] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:40:28.669] Number of chunks: 2
[17:40:28.669] getGlobalsAndPackagesXApply() ...
[17:40:28.669]  - future.globals: TRUE
[17:40:28.670] getGlobalsAndPackages() ...
[17:40:28.670] Searching for globals...
[17:40:28.671] - globals found: [2] ‘FUN’, ‘sample’
[17:40:28.671] Searching for globals ... DONE
[17:40:28.671] Resolving globals: FALSE
[17:40:28.671] The total size of the 1 globals is 616 bytes (616 bytes)
[17:40:28.672] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:40:28.672] - globals: [1] ‘FUN’
[17:40:28.672] 
[17:40:28.672] getGlobalsAndPackages() ... DONE
[17:40:28.672]  - globals found/used: [n=1] ‘FUN’
[17:40:28.672]  - needed namespaces: [n=0] 
[17:40:28.672] Finding globals ... DONE
[17:40:28.672]  - use_args: TRUE
[17:40:28.672]  - Getting '...' globals ...
[17:40:28.673] resolve() on list ...
[17:40:28.673]  recursive: 0
[17:40:28.673]  length: 1
[17:40:28.673]  elements: ‘...’
[17:40:28.673]  length: 0 (resolved future 1)
[17:40:28.673] resolve() on list ... DONE
[17:40:28.673]    - '...' content: [n=0] 
[17:40:28.673] List of 1
[17:40:28.673]  $ ...: list()
[17:40:28.673]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.673]  - attr(*, "where")=List of 1
[17:40:28.673]   ..$ ...:<environment: 0x558a39ed4cd8> 
[17:40:28.673]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.673]  - attr(*, "resolved")= logi TRUE
[17:40:28.673]  - attr(*, "total_size")= num NA
[17:40:28.676]  - Getting '...' globals ... DONE
[17:40:28.676] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:40:28.676] List of 2
[17:40:28.676]  $ ...future.FUN:function (...)  
[17:40:28.676]  $ ...          : list()
[17:40:28.676]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.676]  - attr(*, "where")=List of 2
[17:40:28.676]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:40:28.676]   ..$ ...          :<environment: 0x558a39ed4cd8> 
[17:40:28.676]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.676]  - attr(*, "resolved")= logi FALSE
[17:40:28.676]  - attr(*, "total_size")= num 616
[17:40:28.679] Packages to be attached in all futures: [n=0] 
[17:40:28.679] getGlobalsAndPackagesXApply() ... DONE
[17:40:28.679] Number of futures (= number of chunks): 2
[17:40:28.679] Launching 2 futures (chunks) ...
[17:40:28.679] Chunk #1 of 2 ...
[17:40:28.680]  - Finding globals in 'X' for chunk #1 ...
[17:40:28.680] getGlobalsAndPackages() ...
[17:40:28.680] Searching for globals...
[17:40:28.680] 
[17:40:28.680] Searching for globals ... DONE
[17:40:28.680] - globals: [0] <none>
[17:40:28.680] getGlobalsAndPackages() ... DONE
[17:40:28.680]    + additional globals found: [n=0] 
[17:40:28.681]    + additional namespaces needed: [n=0] 
[17:40:28.681]  - Finding globals in 'X' for chunk #1 ... DONE
[17:40:28.681]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:40:28.681]  - seeds: [2] <seeds>
[17:40:28.681] getGlobalsAndPackages() ...
[17:40:28.681] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.681] Resolving globals: FALSE
[17:40:28.681] Tweak future expression to call with '...' arguments ...
[17:40:28.681] {
[17:40:28.681]     do.call(function(...) {
[17:40:28.681]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.681]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.681]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.681]             on.exit(options(oopts), add = TRUE)
[17:40:28.681]         }
[17:40:28.681]         {
[17:40:28.681]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.681]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.681]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.681]                   envir = globalenv(), inherits = FALSE)
[17:40:28.681]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.681]             })
[17:40:28.681]         }
[17:40:28.681]     }, args = future.call.arguments)
[17:40:28.681] }
[17:40:28.682] Tweak future expression to call with '...' arguments ... DONE
[17:40:28.682] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.682] 
[17:40:28.682] getGlobalsAndPackages() ... DONE
[17:40:28.683] run() for ‘Future’ ...
[17:40:28.683] - state: ‘created’
[17:40:28.683] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:40:28.688] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:28.688] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:40:28.689]   - Field: ‘label’
[17:40:28.689]   - Field: ‘local’
[17:40:28.689]   - Field: ‘owner’
[17:40:28.689]   - Field: ‘envir’
[17:40:28.689]   - Field: ‘workers’
[17:40:28.689]   - Field: ‘packages’
[17:40:28.689]   - Field: ‘gc’
[17:40:28.689]   - Field: ‘job’
[17:40:28.689]   - Field: ‘conditions’
[17:40:28.689]   - Field: ‘expr’
[17:40:28.690]   - Field: ‘uuid’
[17:40:28.690]   - Field: ‘seed’
[17:40:28.690]   - Field: ‘version’
[17:40:28.690]   - Field: ‘result’
[17:40:28.690]   - Field: ‘asynchronous’
[17:40:28.690]   - Field: ‘calls’
[17:40:28.690]   - Field: ‘globals’
[17:40:28.690]   - Field: ‘stdout’
[17:40:28.690]   - Field: ‘earlySignal’
[17:40:28.690]   - Field: ‘lazy’
[17:40:28.691]   - Field: ‘state’
[17:40:28.691] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:40:28.691] - Launch lazy future ...
[17:40:28.692] Packages needed by the future expression (n = 0): <none>
[17:40:28.692] Packages needed by future strategies (n = 0): <none>
[17:40:28.692] {
[17:40:28.692]     {
[17:40:28.692]         {
[17:40:28.692]             ...future.startTime <- base::Sys.time()
[17:40:28.692]             {
[17:40:28.692]                 {
[17:40:28.692]                   {
[17:40:28.692]                     {
[17:40:28.692]                       base::local({
[17:40:28.692]                         has_future <- base::requireNamespace("future", 
[17:40:28.692]                           quietly = TRUE)
[17:40:28.692]                         if (has_future) {
[17:40:28.692]                           ns <- base::getNamespace("future")
[17:40:28.692]                           version <- ns[[".package"]][["version"]]
[17:40:28.692]                           if (is.null(version)) 
[17:40:28.692]                             version <- utils::packageVersion("future")
[17:40:28.692]                         }
[17:40:28.692]                         else {
[17:40:28.692]                           version <- NULL
[17:40:28.692]                         }
[17:40:28.692]                         if (!has_future || version < "1.8.0") {
[17:40:28.692]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:28.692]                             "", base::R.version$version.string), 
[17:40:28.692]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:28.692]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:28.692]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:28.692]                               "release", "version")], collapse = " "), 
[17:40:28.692]                             hostname = base::Sys.info()[["nodename"]])
[17:40:28.692]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:28.692]                             info)
[17:40:28.692]                           info <- base::paste(info, collapse = "; ")
[17:40:28.692]                           if (!has_future) {
[17:40:28.692]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:28.692]                               info)
[17:40:28.692]                           }
[17:40:28.692]                           else {
[17:40:28.692]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:28.692]                               info, version)
[17:40:28.692]                           }
[17:40:28.692]                           base::stop(msg)
[17:40:28.692]                         }
[17:40:28.692]                       })
[17:40:28.692]                     }
[17:40:28.692]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:28.692]                     base::options(mc.cores = 1L)
[17:40:28.692]                   }
[17:40:28.692]                   options(future.plan = NULL)
[17:40:28.692]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.692]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:28.692]                 }
[17:40:28.692]                 ...future.workdir <- getwd()
[17:40:28.692]             }
[17:40:28.692]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:28.692]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:28.692]         }
[17:40:28.692]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:28.692]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:40:28.692]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:28.692]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:28.692]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:28.692]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:28.692]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:28.692]             base::names(...future.oldOptions))
[17:40:28.692]     }
[17:40:28.692]     if (FALSE) {
[17:40:28.692]     }
[17:40:28.692]     else {
[17:40:28.692]         if (TRUE) {
[17:40:28.692]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:28.692]                 open = "w")
[17:40:28.692]         }
[17:40:28.692]         else {
[17:40:28.692]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:28.692]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:28.692]         }
[17:40:28.692]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:28.692]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:28.692]             base::sink(type = "output", split = FALSE)
[17:40:28.692]             base::close(...future.stdout)
[17:40:28.692]         }, add = TRUE)
[17:40:28.692]     }
[17:40:28.692]     ...future.frame <- base::sys.nframe()
[17:40:28.692]     ...future.conditions <- base::list()
[17:40:28.692]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:28.692]     if (FALSE) {
[17:40:28.692]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:28.692]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:28.692]     }
[17:40:28.692]     ...future.result <- base::tryCatch({
[17:40:28.692]         base::withCallingHandlers({
[17:40:28.692]             ...future.value <- base::withVisible(base::local({
[17:40:28.692]                 withCallingHandlers({
[17:40:28.692]                   {
[17:40:28.692]                     do.call(function(...) {
[17:40:28.692]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.692]                       if (!identical(...future.globals.maxSize.org, 
[17:40:28.692]                         ...future.globals.maxSize)) {
[17:40:28.692]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.692]                         on.exit(options(oopts), add = TRUE)
[17:40:28.692]                       }
[17:40:28.692]                       {
[17:40:28.692]                         lapply(seq_along(...future.elements_ii), 
[17:40:28.692]                           FUN = function(jj) {
[17:40:28.692]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.692]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.692]                               envir = globalenv(), inherits = FALSE)
[17:40:28.692]                             ...future.FUN(...future.X_jj, ...)
[17:40:28.692]                           })
[17:40:28.692]                       }
[17:40:28.692]                     }, args = future.call.arguments)
[17:40:28.692]                   }
[17:40:28.692]                 }, immediateCondition = function(cond) {
[17:40:28.692]                   save_rds <- function (object, pathname, ...) 
[17:40:28.692]                   {
[17:40:28.692]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:28.692]                     if (file_test("-f", pathname_tmp)) {
[17:40:28.692]                       fi_tmp <- file.info(pathname_tmp)
[17:40:28.692]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:28.692]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:28.692]                         fi_tmp[["mtime"]])
[17:40:28.692]                     }
[17:40:28.692]                     tryCatch({
[17:40:28.692]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:28.692]                     }, error = function(ex) {
[17:40:28.692]                       msg <- conditionMessage(ex)
[17:40:28.692]                       fi_tmp <- file.info(pathname_tmp)
[17:40:28.692]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:28.692]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:28.692]                         fi_tmp[["mtime"]], msg)
[17:40:28.692]                       ex$message <- msg
[17:40:28.692]                       stop(ex)
[17:40:28.692]                     })
[17:40:28.692]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:28.692]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:28.692]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:28.692]                       fi_tmp <- file.info(pathname_tmp)
[17:40:28.692]                       fi <- file.info(pathname)
[17:40:28.692]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:28.692]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:28.692]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:28.692]                         fi[["size"]], fi[["mtime"]])
[17:40:28.692]                       stop(msg)
[17:40:28.692]                     }
[17:40:28.692]                     invisible(pathname)
[17:40:28.692]                   }
[17:40:28.692]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:28.692]                     rootPath = tempdir()) 
[17:40:28.692]                   {
[17:40:28.692]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:28.692]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:28.692]                       tmpdir = path, fileext = ".rds")
[17:40:28.692]                     save_rds(obj, file)
[17:40:28.692]                   }
[17:40:28.692]                   saveImmediateCondition(cond, path = "/tmp/RtmpYOEZWb/.future/immediateConditions")
[17:40:28.692]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.692]                   {
[17:40:28.692]                     inherits <- base::inherits
[17:40:28.692]                     invokeRestart <- base::invokeRestart
[17:40:28.692]                     is.null <- base::is.null
[17:40:28.692]                     muffled <- FALSE
[17:40:28.692]                     if (inherits(cond, "message")) {
[17:40:28.692]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:28.692]                       if (muffled) 
[17:40:28.692]                         invokeRestart("muffleMessage")
[17:40:28.692]                     }
[17:40:28.692]                     else if (inherits(cond, "warning")) {
[17:40:28.692]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:28.692]                       if (muffled) 
[17:40:28.692]                         invokeRestart("muffleWarning")
[17:40:28.692]                     }
[17:40:28.692]                     else if (inherits(cond, "condition")) {
[17:40:28.692]                       if (!is.null(pattern)) {
[17:40:28.692]                         computeRestarts <- base::computeRestarts
[17:40:28.692]                         grepl <- base::grepl
[17:40:28.692]                         restarts <- computeRestarts(cond)
[17:40:28.692]                         for (restart in restarts) {
[17:40:28.692]                           name <- restart$name
[17:40:28.692]                           if (is.null(name)) 
[17:40:28.692]                             next
[17:40:28.692]                           if (!grepl(pattern, name)) 
[17:40:28.692]                             next
[17:40:28.692]                           invokeRestart(restart)
[17:40:28.692]                           muffled <- TRUE
[17:40:28.692]                           break
[17:40:28.692]                         }
[17:40:28.692]                       }
[17:40:28.692]                     }
[17:40:28.692]                     invisible(muffled)
[17:40:28.692]                   }
[17:40:28.692]                   muffleCondition(cond)
[17:40:28.692]                 })
[17:40:28.692]             }))
[17:40:28.692]             future::FutureResult(value = ...future.value$value, 
[17:40:28.692]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.692]                   ...future.rng), globalenv = if (FALSE) 
[17:40:28.692]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:28.692]                     ...future.globalenv.names))
[17:40:28.692]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:28.692]         }, condition = base::local({
[17:40:28.692]             c <- base::c
[17:40:28.692]             inherits <- base::inherits
[17:40:28.692]             invokeRestart <- base::invokeRestart
[17:40:28.692]             length <- base::length
[17:40:28.692]             list <- base::list
[17:40:28.692]             seq.int <- base::seq.int
[17:40:28.692]             signalCondition <- base::signalCondition
[17:40:28.692]             sys.calls <- base::sys.calls
[17:40:28.692]             `[[` <- base::`[[`
[17:40:28.692]             `+` <- base::`+`
[17:40:28.692]             `<<-` <- base::`<<-`
[17:40:28.692]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:28.692]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:28.692]                   3L)]
[17:40:28.692]             }
[17:40:28.692]             function(cond) {
[17:40:28.692]                 is_error <- inherits(cond, "error")
[17:40:28.692]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:28.692]                   NULL)
[17:40:28.692]                 if (is_error) {
[17:40:28.692]                   sessionInformation <- function() {
[17:40:28.692]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:28.692]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:28.692]                       search = base::search(), system = base::Sys.info())
[17:40:28.692]                   }
[17:40:28.692]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.692]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:28.692]                     cond$call), session = sessionInformation(), 
[17:40:28.692]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:28.692]                   signalCondition(cond)
[17:40:28.692]                 }
[17:40:28.692]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:28.692]                 "immediateCondition"))) {
[17:40:28.692]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:28.692]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.692]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:28.692]                   if (TRUE && !signal) {
[17:40:28.692]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.692]                     {
[17:40:28.692]                       inherits <- base::inherits
[17:40:28.692]                       invokeRestart <- base::invokeRestart
[17:40:28.692]                       is.null <- base::is.null
[17:40:28.692]                       muffled <- FALSE
[17:40:28.692]                       if (inherits(cond, "message")) {
[17:40:28.692]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.692]                         if (muffled) 
[17:40:28.692]                           invokeRestart("muffleMessage")
[17:40:28.692]                       }
[17:40:28.692]                       else if (inherits(cond, "warning")) {
[17:40:28.692]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.692]                         if (muffled) 
[17:40:28.692]                           invokeRestart("muffleWarning")
[17:40:28.692]                       }
[17:40:28.692]                       else if (inherits(cond, "condition")) {
[17:40:28.692]                         if (!is.null(pattern)) {
[17:40:28.692]                           computeRestarts <- base::computeRestarts
[17:40:28.692]                           grepl <- base::grepl
[17:40:28.692]                           restarts <- computeRestarts(cond)
[17:40:28.692]                           for (restart in restarts) {
[17:40:28.692]                             name <- restart$name
[17:40:28.692]                             if (is.null(name)) 
[17:40:28.692]                               next
[17:40:28.692]                             if (!grepl(pattern, name)) 
[17:40:28.692]                               next
[17:40:28.692]                             invokeRestart(restart)
[17:40:28.692]                             muffled <- TRUE
[17:40:28.692]                             break
[17:40:28.692]                           }
[17:40:28.692]                         }
[17:40:28.692]                       }
[17:40:28.692]                       invisible(muffled)
[17:40:28.692]                     }
[17:40:28.692]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.692]                   }
[17:40:28.692]                 }
[17:40:28.692]                 else {
[17:40:28.692]                   if (TRUE) {
[17:40:28.692]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.692]                     {
[17:40:28.692]                       inherits <- base::inherits
[17:40:28.692]                       invokeRestart <- base::invokeRestart
[17:40:28.692]                       is.null <- base::is.null
[17:40:28.692]                       muffled <- FALSE
[17:40:28.692]                       if (inherits(cond, "message")) {
[17:40:28.692]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.692]                         if (muffled) 
[17:40:28.692]                           invokeRestart("muffleMessage")
[17:40:28.692]                       }
[17:40:28.692]                       else if (inherits(cond, "warning")) {
[17:40:28.692]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.692]                         if (muffled) 
[17:40:28.692]                           invokeRestart("muffleWarning")
[17:40:28.692]                       }
[17:40:28.692]                       else if (inherits(cond, "condition")) {
[17:40:28.692]                         if (!is.null(pattern)) {
[17:40:28.692]                           computeRestarts <- base::computeRestarts
[17:40:28.692]                           grepl <- base::grepl
[17:40:28.692]                           restarts <- computeRestarts(cond)
[17:40:28.692]                           for (restart in restarts) {
[17:40:28.692]                             name <- restart$name
[17:40:28.692]                             if (is.null(name)) 
[17:40:28.692]                               next
[17:40:28.692]                             if (!grepl(pattern, name)) 
[17:40:28.692]                               next
[17:40:28.692]                             invokeRestart(restart)
[17:40:28.692]                             muffled <- TRUE
[17:40:28.692]                             break
[17:40:28.692]                           }
[17:40:28.692]                         }
[17:40:28.692]                       }
[17:40:28.692]                       invisible(muffled)
[17:40:28.692]                     }
[17:40:28.692]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.692]                   }
[17:40:28.692]                 }
[17:40:28.692]             }
[17:40:28.692]         }))
[17:40:28.692]     }, error = function(ex) {
[17:40:28.692]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:28.692]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.692]                 ...future.rng), started = ...future.startTime, 
[17:40:28.692]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:28.692]             version = "1.8"), class = "FutureResult")
[17:40:28.692]     }, finally = {
[17:40:28.692]         if (!identical(...future.workdir, getwd())) 
[17:40:28.692]             setwd(...future.workdir)
[17:40:28.692]         {
[17:40:28.692]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:28.692]                 ...future.oldOptions$nwarnings <- NULL
[17:40:28.692]             }
[17:40:28.692]             base::options(...future.oldOptions)
[17:40:28.692]             if (.Platform$OS.type == "windows") {
[17:40:28.692]                 old_names <- names(...future.oldEnvVars)
[17:40:28.692]                 envs <- base::Sys.getenv()
[17:40:28.692]                 names <- names(envs)
[17:40:28.692]                 common <- intersect(names, old_names)
[17:40:28.692]                 added <- setdiff(names, old_names)
[17:40:28.692]                 removed <- setdiff(old_names, names)
[17:40:28.692]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:28.692]                   envs[common]]
[17:40:28.692]                 NAMES <- toupper(changed)
[17:40:28.692]                 args <- list()
[17:40:28.692]                 for (kk in seq_along(NAMES)) {
[17:40:28.692]                   name <- changed[[kk]]
[17:40:28.692]                   NAME <- NAMES[[kk]]
[17:40:28.692]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.692]                     next
[17:40:28.692]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.692]                 }
[17:40:28.692]                 NAMES <- toupper(added)
[17:40:28.692]                 for (kk in seq_along(NAMES)) {
[17:40:28.692]                   name <- added[[kk]]
[17:40:28.692]                   NAME <- NAMES[[kk]]
[17:40:28.692]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.692]                     next
[17:40:28.692]                   args[[name]] <- ""
[17:40:28.692]                 }
[17:40:28.692]                 NAMES <- toupper(removed)
[17:40:28.692]                 for (kk in seq_along(NAMES)) {
[17:40:28.692]                   name <- removed[[kk]]
[17:40:28.692]                   NAME <- NAMES[[kk]]
[17:40:28.692]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.692]                     next
[17:40:28.692]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.692]                 }
[17:40:28.692]                 if (length(args) > 0) 
[17:40:28.692]                   base::do.call(base::Sys.setenv, args = args)
[17:40:28.692]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:28.692]             }
[17:40:28.692]             else {
[17:40:28.692]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:28.692]             }
[17:40:28.692]             {
[17:40:28.692]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:28.692]                   0L) {
[17:40:28.692]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:28.692]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:28.692]                   base::options(opts)
[17:40:28.692]                 }
[17:40:28.692]                 {
[17:40:28.692]                   {
[17:40:28.692]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:28.692]                     NULL
[17:40:28.692]                   }
[17:40:28.692]                   options(future.plan = NULL)
[17:40:28.692]                   if (is.na(NA_character_)) 
[17:40:28.692]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.692]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:28.692]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:40:28.692]                     envir = parent.frame()) 
[17:40:28.692]                   {
[17:40:28.692]                     default_workers <- missing(workers)
[17:40:28.692]                     if (is.function(workers)) 
[17:40:28.692]                       workers <- workers()
[17:40:28.692]                     workers <- structure(as.integer(workers), 
[17:40:28.692]                       class = class(workers))
[17:40:28.692]                     stop_if_not(is.finite(workers), workers >= 
[17:40:28.692]                       1L)
[17:40:28.692]                     if ((workers == 1L && !inherits(workers, 
[17:40:28.692]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:40:28.692]                       if (default_workers) 
[17:40:28.692]                         supportsMulticore(warn = TRUE)
[17:40:28.692]                       return(sequential(..., envir = envir))
[17:40:28.692]                     }
[17:40:28.692]                     oopts <- options(mc.cores = workers)
[17:40:28.692]                     on.exit(options(oopts))
[17:40:28.692]                     future <- MulticoreFuture(..., workers = workers, 
[17:40:28.692]                       envir = envir)
[17:40:28.692]                     if (!future$lazy) 
[17:40:28.692]                       future <- run(future)
[17:40:28.692]                     invisible(future)
[17:40:28.692]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:28.692]                 }
[17:40:28.692]             }
[17:40:28.692]         }
[17:40:28.692]     })
[17:40:28.692]     if (TRUE) {
[17:40:28.692]         base::sink(type = "output", split = FALSE)
[17:40:28.692]         if (TRUE) {
[17:40:28.692]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:28.692]         }
[17:40:28.692]         else {
[17:40:28.692]             ...future.result["stdout"] <- base::list(NULL)
[17:40:28.692]         }
[17:40:28.692]         base::close(...future.stdout)
[17:40:28.692]         ...future.stdout <- NULL
[17:40:28.692]     }
[17:40:28.692]     ...future.result$conditions <- ...future.conditions
[17:40:28.692]     ...future.result$finished <- base::Sys.time()
[17:40:28.692]     ...future.result
[17:40:28.692] }
[17:40:28.695] assign_globals() ...
[17:40:28.695] List of 5
[17:40:28.695]  $ ...future.FUN            :function (...)  
[17:40:28.695]  $ future.call.arguments    : list()
[17:40:28.695]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.695]  $ ...future.elements_ii    :List of 2
[17:40:28.695]   ..$ : int 0
[17:40:28.695]   ..$ : int 0
[17:40:28.695]  $ ...future.seeds_ii       :List of 2
[17:40:28.695]   ..$ : int [1:7] 10407 800596211 191202253 -1245543361 -1911991084 -470201595 630973807
[17:40:28.695]   ..$ : int [1:7] 10407 336362669 -1847432762 -712550016 1068830663 1731026700 1489470838
[17:40:28.695]  $ ...future.globals.maxSize: NULL
[17:40:28.695]  - attr(*, "resolved")= logi FALSE
[17:40:28.695]  - attr(*, "total_size")= num 616
[17:40:28.695]  - attr(*, "where")=List of 5
[17:40:28.695]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:40:28.695]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:40:28.695]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:40:28.695]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:40:28.695]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:40:28.695]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.695]  - attr(*, "already-done")= logi TRUE
[17:40:28.701] - reassign environment for ‘...future.FUN’
[17:40:28.701] - copied ‘...future.FUN’ to environment
[17:40:28.701] - copied ‘future.call.arguments’ to environment
[17:40:28.701] - copied ‘...future.elements_ii’ to environment
[17:40:28.701] - copied ‘...future.seeds_ii’ to environment
[17:40:28.701] - copied ‘...future.globals.maxSize’ to environment
[17:40:28.702] assign_globals() ... done
[17:40:28.702] requestCore(): workers = 2
[17:40:28.705] MulticoreFuture started
[17:40:28.705] - Launch lazy future ... done
[17:40:28.705] run() for ‘MulticoreFuture’ ... done
[17:40:28.706] Created future:
[17:40:28.706] plan(): Setting new future strategy stack:
[17:40:28.706] List of future strategies:
[17:40:28.706] 1. sequential:
[17:40:28.706]    - args: function (..., envir = parent.frame())
[17:40:28.706]    - tweaked: FALSE
[17:40:28.706]    - call: NULL
[17:40:28.707] plan(): nbrOfWorkers() = 1
[17:40:28.709] plan(): Setting new future strategy stack:
[17:40:28.709] List of future strategies:
[17:40:28.709] 1. multicore:
[17:40:28.709]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:28.709]    - tweaked: FALSE
[17:40:28.709]    - call: plan(strategy)
[17:40:28.714] plan(): nbrOfWorkers() = 2
[17:40:28.706] MulticoreFuture:
[17:40:28.706] Label: ‘future_replicate-1’
[17:40:28.706] Expression:
[17:40:28.706] {
[17:40:28.706]     do.call(function(...) {
[17:40:28.706]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.706]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.706]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.706]             on.exit(options(oopts), add = TRUE)
[17:40:28.706]         }
[17:40:28.706]         {
[17:40:28.706]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.706]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.706]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.706]                   envir = globalenv(), inherits = FALSE)
[17:40:28.706]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.706]             })
[17:40:28.706]         }
[17:40:28.706]     }, args = future.call.arguments)
[17:40:28.706] }
[17:40:28.706] Lazy evaluation: FALSE
[17:40:28.706] Asynchronous evaluation: TRUE
[17:40:28.706] Local evaluation: TRUE
[17:40:28.706] Environment: R_GlobalEnv
[17:40:28.706] Capture standard output: TRUE
[17:40:28.706] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:28.706] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:28.706] Packages: <none>
[17:40:28.706] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:28.706] Resolved: TRUE
[17:40:28.706] Value: <not collected>
[17:40:28.706] Conditions captured: <none>
[17:40:28.706] Early signaling: FALSE
[17:40:28.706] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:28.706] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:28.715] Chunk #1 of 2 ... DONE
[17:40:28.715] Chunk #2 of 2 ...
[17:40:28.715]  - Finding globals in 'X' for chunk #2 ...
[17:40:28.716] getGlobalsAndPackages() ...
[17:40:28.716] Searching for globals...
[17:40:28.716] 
[17:40:28.716] Searching for globals ... DONE
[17:40:28.716] - globals: [0] <none>
[17:40:28.717] getGlobalsAndPackages() ... DONE
[17:40:28.717]    + additional globals found: [n=0] 
[17:40:28.717]    + additional namespaces needed: [n=0] 
[17:40:28.717]  - Finding globals in 'X' for chunk #2 ... DONE
[17:40:28.717]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[17:40:28.717]  - seeds: [3] <seeds>
[17:40:28.717] getGlobalsAndPackages() ...
[17:40:28.718] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.718] Resolving globals: FALSE
[17:40:28.718] Tweak future expression to call with '...' arguments ...
[17:40:28.718] {
[17:40:28.718]     do.call(function(...) {
[17:40:28.718]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.718]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.718]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.718]             on.exit(options(oopts), add = TRUE)
[17:40:28.718]         }
[17:40:28.718]         {
[17:40:28.718]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.718]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.718]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.718]                   envir = globalenv(), inherits = FALSE)
[17:40:28.718]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.718]             })
[17:40:28.718]         }
[17:40:28.718]     }, args = future.call.arguments)
[17:40:28.718] }
[17:40:28.718] Tweak future expression to call with '...' arguments ... DONE
[17:40:28.719] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.719] 
[17:40:28.719] getGlobalsAndPackages() ... DONE
[17:40:28.720] run() for ‘Future’ ...
[17:40:28.720] - state: ‘created’
[17:40:28.720] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:40:28.725] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:28.725] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:40:28.725]   - Field: ‘label’
[17:40:28.725]   - Field: ‘local’
[17:40:28.725]   - Field: ‘owner’
[17:40:28.726]   - Field: ‘envir’
[17:40:28.726]   - Field: ‘workers’
[17:40:28.726]   - Field: ‘packages’
[17:40:28.726]   - Field: ‘gc’
[17:40:28.726]   - Field: ‘job’
[17:40:28.726]   - Field: ‘conditions’
[17:40:28.726]   - Field: ‘expr’
[17:40:28.726]   - Field: ‘uuid’
[17:40:28.727]   - Field: ‘seed’
[17:40:28.727]   - Field: ‘version’
[17:40:28.727]   - Field: ‘result’
[17:40:28.727]   - Field: ‘asynchronous’
[17:40:28.727]   - Field: ‘calls’
[17:40:28.727]   - Field: ‘globals’
[17:40:28.727]   - Field: ‘stdout’
[17:40:28.728]   - Field: ‘earlySignal’
[17:40:28.728]   - Field: ‘lazy’
[17:40:28.728]   - Field: ‘state’
[17:40:28.728] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:40:28.728] - Launch lazy future ...
[17:40:28.729] Packages needed by the future expression (n = 0): <none>
[17:40:28.729] Packages needed by future strategies (n = 0): <none>
[17:40:28.733] {
[17:40:28.733]     {
[17:40:28.733]         {
[17:40:28.733]             ...future.startTime <- base::Sys.time()
[17:40:28.733]             {
[17:40:28.733]                 {
[17:40:28.733]                   {
[17:40:28.733]                     {
[17:40:28.733]                       base::local({
[17:40:28.733]                         has_future <- base::requireNamespace("future", 
[17:40:28.733]                           quietly = TRUE)
[17:40:28.733]                         if (has_future) {
[17:40:28.733]                           ns <- base::getNamespace("future")
[17:40:28.733]                           version <- ns[[".package"]][["version"]]
[17:40:28.733]                           if (is.null(version)) 
[17:40:28.733]                             version <- utils::packageVersion("future")
[17:40:28.733]                         }
[17:40:28.733]                         else {
[17:40:28.733]                           version <- NULL
[17:40:28.733]                         }
[17:40:28.733]                         if (!has_future || version < "1.8.0") {
[17:40:28.733]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:28.733]                             "", base::R.version$version.string), 
[17:40:28.733]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:28.733]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:28.733]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:28.733]                               "release", "version")], collapse = " "), 
[17:40:28.733]                             hostname = base::Sys.info()[["nodename"]])
[17:40:28.733]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:28.733]                             info)
[17:40:28.733]                           info <- base::paste(info, collapse = "; ")
[17:40:28.733]                           if (!has_future) {
[17:40:28.733]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:28.733]                               info)
[17:40:28.733]                           }
[17:40:28.733]                           else {
[17:40:28.733]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:28.733]                               info, version)
[17:40:28.733]                           }
[17:40:28.733]                           base::stop(msg)
[17:40:28.733]                         }
[17:40:28.733]                       })
[17:40:28.733]                     }
[17:40:28.733]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:28.733]                     base::options(mc.cores = 1L)
[17:40:28.733]                   }
[17:40:28.733]                   options(future.plan = NULL)
[17:40:28.733]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.733]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:28.733]                 }
[17:40:28.733]                 ...future.workdir <- getwd()
[17:40:28.733]             }
[17:40:28.733]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:28.733]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:28.733]         }
[17:40:28.733]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:28.733]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[17:40:28.733]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:28.733]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:28.733]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:28.733]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:28.733]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:28.733]             base::names(...future.oldOptions))
[17:40:28.733]     }
[17:40:28.733]     if (FALSE) {
[17:40:28.733]     }
[17:40:28.733]     else {
[17:40:28.733]         if (TRUE) {
[17:40:28.733]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:28.733]                 open = "w")
[17:40:28.733]         }
[17:40:28.733]         else {
[17:40:28.733]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:28.733]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:28.733]         }
[17:40:28.733]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:28.733]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:28.733]             base::sink(type = "output", split = FALSE)
[17:40:28.733]             base::close(...future.stdout)
[17:40:28.733]         }, add = TRUE)
[17:40:28.733]     }
[17:40:28.733]     ...future.frame <- base::sys.nframe()
[17:40:28.733]     ...future.conditions <- base::list()
[17:40:28.733]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:28.733]     if (FALSE) {
[17:40:28.733]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:28.733]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:28.733]     }
[17:40:28.733]     ...future.result <- base::tryCatch({
[17:40:28.733]         base::withCallingHandlers({
[17:40:28.733]             ...future.value <- base::withVisible(base::local({
[17:40:28.733]                 withCallingHandlers({
[17:40:28.733]                   {
[17:40:28.733]                     do.call(function(...) {
[17:40:28.733]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.733]                       if (!identical(...future.globals.maxSize.org, 
[17:40:28.733]                         ...future.globals.maxSize)) {
[17:40:28.733]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.733]                         on.exit(options(oopts), add = TRUE)
[17:40:28.733]                       }
[17:40:28.733]                       {
[17:40:28.733]                         lapply(seq_along(...future.elements_ii), 
[17:40:28.733]                           FUN = function(jj) {
[17:40:28.733]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.733]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.733]                               envir = globalenv(), inherits = FALSE)
[17:40:28.733]                             ...future.FUN(...future.X_jj, ...)
[17:40:28.733]                           })
[17:40:28.733]                       }
[17:40:28.733]                     }, args = future.call.arguments)
[17:40:28.733]                   }
[17:40:28.733]                 }, immediateCondition = function(cond) {
[17:40:28.733]                   save_rds <- function (object, pathname, ...) 
[17:40:28.733]                   {
[17:40:28.733]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:28.733]                     if (file_test("-f", pathname_tmp)) {
[17:40:28.733]                       fi_tmp <- file.info(pathname_tmp)
[17:40:28.733]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:28.733]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:28.733]                         fi_tmp[["mtime"]])
[17:40:28.733]                     }
[17:40:28.733]                     tryCatch({
[17:40:28.733]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:28.733]                     }, error = function(ex) {
[17:40:28.733]                       msg <- conditionMessage(ex)
[17:40:28.733]                       fi_tmp <- file.info(pathname_tmp)
[17:40:28.733]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:28.733]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:28.733]                         fi_tmp[["mtime"]], msg)
[17:40:28.733]                       ex$message <- msg
[17:40:28.733]                       stop(ex)
[17:40:28.733]                     })
[17:40:28.733]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:28.733]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:28.733]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:28.733]                       fi_tmp <- file.info(pathname_tmp)
[17:40:28.733]                       fi <- file.info(pathname)
[17:40:28.733]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:28.733]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:28.733]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:28.733]                         fi[["size"]], fi[["mtime"]])
[17:40:28.733]                       stop(msg)
[17:40:28.733]                     }
[17:40:28.733]                     invisible(pathname)
[17:40:28.733]                   }
[17:40:28.733]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:28.733]                     rootPath = tempdir()) 
[17:40:28.733]                   {
[17:40:28.733]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:28.733]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:28.733]                       tmpdir = path, fileext = ".rds")
[17:40:28.733]                     save_rds(obj, file)
[17:40:28.733]                   }
[17:40:28.733]                   saveImmediateCondition(cond, path = "/tmp/RtmpYOEZWb/.future/immediateConditions")
[17:40:28.733]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.733]                   {
[17:40:28.733]                     inherits <- base::inherits
[17:40:28.733]                     invokeRestart <- base::invokeRestart
[17:40:28.733]                     is.null <- base::is.null
[17:40:28.733]                     muffled <- FALSE
[17:40:28.733]                     if (inherits(cond, "message")) {
[17:40:28.733]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:28.733]                       if (muffled) 
[17:40:28.733]                         invokeRestart("muffleMessage")
[17:40:28.733]                     }
[17:40:28.733]                     else if (inherits(cond, "warning")) {
[17:40:28.733]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:28.733]                       if (muffled) 
[17:40:28.733]                         invokeRestart("muffleWarning")
[17:40:28.733]                     }
[17:40:28.733]                     else if (inherits(cond, "condition")) {
[17:40:28.733]                       if (!is.null(pattern)) {
[17:40:28.733]                         computeRestarts <- base::computeRestarts
[17:40:28.733]                         grepl <- base::grepl
[17:40:28.733]                         restarts <- computeRestarts(cond)
[17:40:28.733]                         for (restart in restarts) {
[17:40:28.733]                           name <- restart$name
[17:40:28.733]                           if (is.null(name)) 
[17:40:28.733]                             next
[17:40:28.733]                           if (!grepl(pattern, name)) 
[17:40:28.733]                             next
[17:40:28.733]                           invokeRestart(restart)
[17:40:28.733]                           muffled <- TRUE
[17:40:28.733]                           break
[17:40:28.733]                         }
[17:40:28.733]                       }
[17:40:28.733]                     }
[17:40:28.733]                     invisible(muffled)
[17:40:28.733]                   }
[17:40:28.733]                   muffleCondition(cond)
[17:40:28.733]                 })
[17:40:28.733]             }))
[17:40:28.733]             future::FutureResult(value = ...future.value$value, 
[17:40:28.733]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.733]                   ...future.rng), globalenv = if (FALSE) 
[17:40:28.733]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:28.733]                     ...future.globalenv.names))
[17:40:28.733]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:28.733]         }, condition = base::local({
[17:40:28.733]             c <- base::c
[17:40:28.733]             inherits <- base::inherits
[17:40:28.733]             invokeRestart <- base::invokeRestart
[17:40:28.733]             length <- base::length
[17:40:28.733]             list <- base::list
[17:40:28.733]             seq.int <- base::seq.int
[17:40:28.733]             signalCondition <- base::signalCondition
[17:40:28.733]             sys.calls <- base::sys.calls
[17:40:28.733]             `[[` <- base::`[[`
[17:40:28.733]             `+` <- base::`+`
[17:40:28.733]             `<<-` <- base::`<<-`
[17:40:28.733]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:28.733]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:28.733]                   3L)]
[17:40:28.733]             }
[17:40:28.733]             function(cond) {
[17:40:28.733]                 is_error <- inherits(cond, "error")
[17:40:28.733]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:28.733]                   NULL)
[17:40:28.733]                 if (is_error) {
[17:40:28.733]                   sessionInformation <- function() {
[17:40:28.733]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:28.733]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:28.733]                       search = base::search(), system = base::Sys.info())
[17:40:28.733]                   }
[17:40:28.733]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.733]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:28.733]                     cond$call), session = sessionInformation(), 
[17:40:28.733]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:28.733]                   signalCondition(cond)
[17:40:28.733]                 }
[17:40:28.733]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:28.733]                 "immediateCondition"))) {
[17:40:28.733]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:28.733]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.733]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:28.733]                   if (TRUE && !signal) {
[17:40:28.733]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.733]                     {
[17:40:28.733]                       inherits <- base::inherits
[17:40:28.733]                       invokeRestart <- base::invokeRestart
[17:40:28.733]                       is.null <- base::is.null
[17:40:28.733]                       muffled <- FALSE
[17:40:28.733]                       if (inherits(cond, "message")) {
[17:40:28.733]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.733]                         if (muffled) 
[17:40:28.733]                           invokeRestart("muffleMessage")
[17:40:28.733]                       }
[17:40:28.733]                       else if (inherits(cond, "warning")) {
[17:40:28.733]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.733]                         if (muffled) 
[17:40:28.733]                           invokeRestart("muffleWarning")
[17:40:28.733]                       }
[17:40:28.733]                       else if (inherits(cond, "condition")) {
[17:40:28.733]                         if (!is.null(pattern)) {
[17:40:28.733]                           computeRestarts <- base::computeRestarts
[17:40:28.733]                           grepl <- base::grepl
[17:40:28.733]                           restarts <- computeRestarts(cond)
[17:40:28.733]                           for (restart in restarts) {
[17:40:28.733]                             name <- restart$name
[17:40:28.733]                             if (is.null(name)) 
[17:40:28.733]                               next
[17:40:28.733]                             if (!grepl(pattern, name)) 
[17:40:28.733]                               next
[17:40:28.733]                             invokeRestart(restart)
[17:40:28.733]                             muffled <- TRUE
[17:40:28.733]                             break
[17:40:28.733]                           }
[17:40:28.733]                         }
[17:40:28.733]                       }
[17:40:28.733]                       invisible(muffled)
[17:40:28.733]                     }
[17:40:28.733]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.733]                   }
[17:40:28.733]                 }
[17:40:28.733]                 else {
[17:40:28.733]                   if (TRUE) {
[17:40:28.733]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.733]                     {
[17:40:28.733]                       inherits <- base::inherits
[17:40:28.733]                       invokeRestart <- base::invokeRestart
[17:40:28.733]                       is.null <- base::is.null
[17:40:28.733]                       muffled <- FALSE
[17:40:28.733]                       if (inherits(cond, "message")) {
[17:40:28.733]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.733]                         if (muffled) 
[17:40:28.733]                           invokeRestart("muffleMessage")
[17:40:28.733]                       }
[17:40:28.733]                       else if (inherits(cond, "warning")) {
[17:40:28.733]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.733]                         if (muffled) 
[17:40:28.733]                           invokeRestart("muffleWarning")
[17:40:28.733]                       }
[17:40:28.733]                       else if (inherits(cond, "condition")) {
[17:40:28.733]                         if (!is.null(pattern)) {
[17:40:28.733]                           computeRestarts <- base::computeRestarts
[17:40:28.733]                           grepl <- base::grepl
[17:40:28.733]                           restarts <- computeRestarts(cond)
[17:40:28.733]                           for (restart in restarts) {
[17:40:28.733]                             name <- restart$name
[17:40:28.733]                             if (is.null(name)) 
[17:40:28.733]                               next
[17:40:28.733]                             if (!grepl(pattern, name)) 
[17:40:28.733]                               next
[17:40:28.733]                             invokeRestart(restart)
[17:40:28.733]                             muffled <- TRUE
[17:40:28.733]                             break
[17:40:28.733]                           }
[17:40:28.733]                         }
[17:40:28.733]                       }
[17:40:28.733]                       invisible(muffled)
[17:40:28.733]                     }
[17:40:28.733]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.733]                   }
[17:40:28.733]                 }
[17:40:28.733]             }
[17:40:28.733]         }))
[17:40:28.733]     }, error = function(ex) {
[17:40:28.733]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:28.733]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.733]                 ...future.rng), started = ...future.startTime, 
[17:40:28.733]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:28.733]             version = "1.8"), class = "FutureResult")
[17:40:28.733]     }, finally = {
[17:40:28.733]         if (!identical(...future.workdir, getwd())) 
[17:40:28.733]             setwd(...future.workdir)
[17:40:28.733]         {
[17:40:28.733]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:28.733]                 ...future.oldOptions$nwarnings <- NULL
[17:40:28.733]             }
[17:40:28.733]             base::options(...future.oldOptions)
[17:40:28.733]             if (.Platform$OS.type == "windows") {
[17:40:28.733]                 old_names <- names(...future.oldEnvVars)
[17:40:28.733]                 envs <- base::Sys.getenv()
[17:40:28.733]                 names <- names(envs)
[17:40:28.733]                 common <- intersect(names, old_names)
[17:40:28.733]                 added <- setdiff(names, old_names)
[17:40:28.733]                 removed <- setdiff(old_names, names)
[17:40:28.733]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:28.733]                   envs[common]]
[17:40:28.733]                 NAMES <- toupper(changed)
[17:40:28.733]                 args <- list()
[17:40:28.733]                 for (kk in seq_along(NAMES)) {
[17:40:28.733]                   name <- changed[[kk]]
[17:40:28.733]                   NAME <- NAMES[[kk]]
[17:40:28.733]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.733]                     next
[17:40:28.733]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.733]                 }
[17:40:28.733]                 NAMES <- toupper(added)
[17:40:28.733]                 for (kk in seq_along(NAMES)) {
[17:40:28.733]                   name <- added[[kk]]
[17:40:28.733]                   NAME <- NAMES[[kk]]
[17:40:28.733]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.733]                     next
[17:40:28.733]                   args[[name]] <- ""
[17:40:28.733]                 }
[17:40:28.733]                 NAMES <- toupper(removed)
[17:40:28.733]                 for (kk in seq_along(NAMES)) {
[17:40:28.733]                   name <- removed[[kk]]
[17:40:28.733]                   NAME <- NAMES[[kk]]
[17:40:28.733]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.733]                     next
[17:40:28.733]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.733]                 }
[17:40:28.733]                 if (length(args) > 0) 
[17:40:28.733]                   base::do.call(base::Sys.setenv, args = args)
[17:40:28.733]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:28.733]             }
[17:40:28.733]             else {
[17:40:28.733]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:28.733]             }
[17:40:28.733]             {
[17:40:28.733]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:28.733]                   0L) {
[17:40:28.733]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:28.733]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:28.733]                   base::options(opts)
[17:40:28.733]                 }
[17:40:28.733]                 {
[17:40:28.733]                   {
[17:40:28.733]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:28.733]                     NULL
[17:40:28.733]                   }
[17:40:28.733]                   options(future.plan = NULL)
[17:40:28.733]                   if (is.na(NA_character_)) 
[17:40:28.733]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.733]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:28.733]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:40:28.733]                     envir = parent.frame()) 
[17:40:28.733]                   {
[17:40:28.733]                     default_workers <- missing(workers)
[17:40:28.733]                     if (is.function(workers)) 
[17:40:28.733]                       workers <- workers()
[17:40:28.733]                     workers <- structure(as.integer(workers), 
[17:40:28.733]                       class = class(workers))
[17:40:28.733]                     stop_if_not(is.finite(workers), workers >= 
[17:40:28.733]                       1L)
[17:40:28.733]                     if ((workers == 1L && !inherits(workers, 
[17:40:28.733]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:40:28.733]                       if (default_workers) 
[17:40:28.733]                         supportsMulticore(warn = TRUE)
[17:40:28.733]                       return(sequential(..., envir = envir))
[17:40:28.733]                     }
[17:40:28.733]                     oopts <- options(mc.cores = workers)
[17:40:28.733]                     on.exit(options(oopts))
[17:40:28.733]                     future <- MulticoreFuture(..., workers = workers, 
[17:40:28.733]                       envir = envir)
[17:40:28.733]                     if (!future$lazy) 
[17:40:28.733]                       future <- run(future)
[17:40:28.733]                     invisible(future)
[17:40:28.733]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:28.733]                 }
[17:40:28.733]             }
[17:40:28.733]         }
[17:40:28.733]     })
[17:40:28.733]     if (TRUE) {
[17:40:28.733]         base::sink(type = "output", split = FALSE)
[17:40:28.733]         if (TRUE) {
[17:40:28.733]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:28.733]         }
[17:40:28.733]         else {
[17:40:28.733]             ...future.result["stdout"] <- base::list(NULL)
[17:40:28.733]         }
[17:40:28.733]         base::close(...future.stdout)
[17:40:28.733]         ...future.stdout <- NULL
[17:40:28.733]     }
[17:40:28.733]     ...future.result$conditions <- ...future.conditions
[17:40:28.733]     ...future.result$finished <- base::Sys.time()
[17:40:28.733]     ...future.result
[17:40:28.733] }
[17:40:28.736] assign_globals() ...
[17:40:28.736] List of 5
[17:40:28.736]  $ ...future.FUN            :function (...)  
[17:40:28.736]  $ future.call.arguments    : list()
[17:40:28.736]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.736]  $ ...future.elements_ii    :List of 3
[17:40:28.736]   ..$ : int 0
[17:40:28.736]   ..$ : int 0
[17:40:28.736]   ..$ : int 0
[17:40:28.736]  $ ...future.seeds_ii       :List of 3
[17:40:28.736]   ..$ : int [1:7] 10407 2000585943 1277356830 -2089408352 -860958827 226502925 99834792
[17:40:28.736]   ..$ : int [1:7] 10407 -1366366742 -1587533199 -987670999 1146693195 -372746989 -1779846945
[17:40:28.736]   ..$ : int [1:7] 10407 -1326244930 -121340665 862160877 1069041468 -111293265 1245428870
[17:40:28.736]  $ ...future.globals.maxSize: NULL
[17:40:28.736]  - attr(*, "resolved")= logi FALSE
[17:40:28.736]  - attr(*, "total_size")= num 616
[17:40:28.736]  - attr(*, "where")=List of 5
[17:40:28.736]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:40:28.736]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:40:28.736]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:40:28.736]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:40:28.736]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:40:28.736]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.736]  - attr(*, "already-done")= logi TRUE
[17:40:28.746] - reassign environment for ‘...future.FUN’
[17:40:28.746] - copied ‘...future.FUN’ to environment
[17:40:28.747] - copied ‘future.call.arguments’ to environment
[17:40:28.747] - copied ‘...future.elements_ii’ to environment
[17:40:28.747] - copied ‘...future.seeds_ii’ to environment
[17:40:28.747] - copied ‘...future.globals.maxSize’ to environment
[17:40:28.747] assign_globals() ... done
[17:40:28.747] requestCore(): workers = 2
[17:40:28.753] MulticoreFuture started
[17:40:28.753] - Launch lazy future ... done
[17:40:28.753] run() for ‘MulticoreFuture’ ... done
[17:40:28.754] Created future:
[17:40:28.754] plan(): Setting new future strategy stack:
[17:40:28.754] List of future strategies:
[17:40:28.754] 1. sequential:
[17:40:28.754]    - args: function (..., envir = parent.frame())
[17:40:28.754]    - tweaked: FALSE
[17:40:28.754]    - call: NULL
[17:40:28.755] plan(): nbrOfWorkers() = 1
[17:40:28.757] plan(): Setting new future strategy stack:
[17:40:28.757] List of future strategies:
[17:40:28.757] 1. multicore:
[17:40:28.757]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:28.757]    - tweaked: FALSE
[17:40:28.757]    - call: plan(strategy)
[17:40:28.763] plan(): nbrOfWorkers() = 2
[17:40:28.754] MulticoreFuture:
[17:40:28.754] Label: ‘future_replicate-2’
[17:40:28.754] Expression:
[17:40:28.754] {
[17:40:28.754]     do.call(function(...) {
[17:40:28.754]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.754]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.754]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.754]             on.exit(options(oopts), add = TRUE)
[17:40:28.754]         }
[17:40:28.754]         {
[17:40:28.754]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.754]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.754]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.754]                   envir = globalenv(), inherits = FALSE)
[17:40:28.754]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.754]             })
[17:40:28.754]         }
[17:40:28.754]     }, args = future.call.arguments)
[17:40:28.754] }
[17:40:28.754] Lazy evaluation: FALSE
[17:40:28.754] Asynchronous evaluation: TRUE
[17:40:28.754] Local evaluation: TRUE
[17:40:28.754] Environment: R_GlobalEnv
[17:40:28.754] Capture standard output: TRUE
[17:40:28.754] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:28.754] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:28.754] Packages: <none>
[17:40:28.754] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:28.754] Resolved: TRUE
[17:40:28.754] Value: <not collected>
[17:40:28.754] Conditions captured: <none>
[17:40:28.754] Early signaling: FALSE
[17:40:28.754] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:28.754] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:28.764] Chunk #2 of 2 ... DONE
[17:40:28.764] Launching 2 futures (chunks) ... DONE
[17:40:28.764] Resolving 2 futures (chunks) ...
[17:40:28.764] resolve() on list ...
[17:40:28.764]  recursive: 0
[17:40:28.764]  length: 2
[17:40:28.764] 
[17:40:28.765] Future #1
[17:40:28.767] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:40:28.767] - nx: 2
[17:40:28.767] - relay: TRUE
[17:40:28.767] - stdout: TRUE
[17:40:28.767] - signal: TRUE
[17:40:28.768] - resignal: FALSE
[17:40:28.768] - force: TRUE
[17:40:28.768] - relayed: [n=2] FALSE, FALSE
[17:40:28.768] - queued futures: [n=2] FALSE, FALSE
[17:40:28.768]  - until=1
[17:40:28.768]  - relaying element #1
[17:40:28.768] - relayed: [n=2] TRUE, FALSE
[17:40:28.769] - queued futures: [n=2] TRUE, FALSE
[17:40:28.769] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:40:28.769]  length: 1 (resolved future 1)
[17:40:28.769] Future #2
[17:40:28.770] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:40:28.770] - nx: 2
[17:40:28.770] - relay: TRUE
[17:40:28.770] - stdout: TRUE
[17:40:28.771] - signal: TRUE
[17:40:28.771] - resignal: FALSE
[17:40:28.771] - force: TRUE
[17:40:28.771] - relayed: [n=2] TRUE, FALSE
[17:40:28.771] - queued futures: [n=2] TRUE, FALSE
[17:40:28.771]  - until=2
[17:40:28.771]  - relaying element #2
[17:40:28.772] - relayed: [n=2] TRUE, TRUE
[17:40:28.772] - queued futures: [n=2] TRUE, TRUE
[17:40:28.772] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:40:28.772]  length: 0 (resolved future 2)
[17:40:28.772] Relaying remaining futures
[17:40:28.772] signalConditionsASAP(NULL, pos=0) ...
[17:40:28.772] - nx: 2
[17:40:28.772] - relay: TRUE
[17:40:28.773] - stdout: TRUE
[17:40:28.773] - signal: TRUE
[17:40:28.773] - resignal: FALSE
[17:40:28.773] - force: TRUE
[17:40:28.773] - relayed: [n=2] TRUE, TRUE
[17:40:28.773] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:40:28.773] - relayed: [n=2] TRUE, TRUE
[17:40:28.773] - queued futures: [n=2] TRUE, TRUE
[17:40:28.773] signalConditionsASAP(NULL, pos=0) ... done
[17:40:28.774] resolve() on list ... DONE
[17:40:28.774]  - Number of value chunks collected: 2
[17:40:28.774] Resolving 2 futures (chunks) ... DONE
[17:40:28.774] Reducing values from 2 chunks ...
[17:40:28.774]  - Number of values collected after concatenation: 5
[17:40:28.774]  - Number of values expected: 5
[17:40:28.774] Reducing values from 2 chunks ... DONE
[17:40:28.774] future_lapply() ... DONE
[17:40:28.775] future_lapply() ...
[17:40:28.775] Generating random seeds ...
[17:40:28.775] Generating random seed streams for 5 elements ...
[17:40:28.776] Generating random seed streams for 5 elements ... DONE
[17:40:28.778] Generating random seeds ... DONE
[17:40:28.778] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:40:28.783] Number of chunks: 2
[17:40:28.783] getGlobalsAndPackagesXApply() ...
[17:40:28.783]  - future.globals: TRUE
[17:40:28.783] getGlobalsAndPackages() ...
[17:40:28.783] Searching for globals...
[17:40:28.785] - globals found: [2] ‘FUN’, ‘sample’
[17:40:28.785] Searching for globals ... DONE
[17:40:28.785] Resolving globals: FALSE
[17:40:28.786] The total size of the 1 globals is 616 bytes (616 bytes)
[17:40:28.786] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:40:28.786] - globals: [1] ‘FUN’
[17:40:28.786] 
[17:40:28.786] getGlobalsAndPackages() ... DONE
[17:40:28.787]  - globals found/used: [n=1] ‘FUN’
[17:40:28.787]  - needed namespaces: [n=0] 
[17:40:28.787] Finding globals ... DONE
[17:40:28.787]  - use_args: TRUE
[17:40:28.787]  - Getting '...' globals ...
[17:40:28.788] resolve() on list ...
[17:40:28.788]  recursive: 0
[17:40:28.788]  length: 1
[17:40:28.788]  elements: ‘...’
[17:40:28.788]  length: 0 (resolved future 1)
[17:40:28.788] resolve() on list ... DONE
[17:40:28.788]    - '...' content: [n=0] 
[17:40:28.788] List of 1
[17:40:28.788]  $ ...: list()
[17:40:28.788]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.788]  - attr(*, "where")=List of 1
[17:40:28.788]   ..$ ...:<environment: 0x558a3c2f07c8> 
[17:40:28.788]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.788]  - attr(*, "resolved")= logi TRUE
[17:40:28.788]  - attr(*, "total_size")= num NA
[17:40:28.792]  - Getting '...' globals ... DONE
[17:40:28.792] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:40:28.792] List of 2
[17:40:28.792]  $ ...future.FUN:function (...)  
[17:40:28.792]  $ ...          : list()
[17:40:28.792]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.792]  - attr(*, "where")=List of 2
[17:40:28.792]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:40:28.792]   ..$ ...          :<environment: 0x558a3c2f07c8> 
[17:40:28.792]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.792]  - attr(*, "resolved")= logi FALSE
[17:40:28.792]  - attr(*, "total_size")= num 616
[17:40:28.795] Packages to be attached in all futures: [n=0] 
[17:40:28.795] getGlobalsAndPackagesXApply() ... DONE
[17:40:28.796] Number of futures (= number of chunks): 2
[17:40:28.796] Launching 2 futures (chunks) ...
[17:40:28.796] Chunk #1 of 2 ...
[17:40:28.796]  - Finding globals in 'X' for chunk #1 ...
[17:40:28.796] getGlobalsAndPackages() ...
[17:40:28.796] Searching for globals...
[17:40:28.796] 
[17:40:28.796] Searching for globals ... DONE
[17:40:28.797] - globals: [0] <none>
[17:40:28.797] getGlobalsAndPackages() ... DONE
[17:40:28.797]    + additional globals found: [n=0] 
[17:40:28.797]    + additional namespaces needed: [n=0] 
[17:40:28.797]  - Finding globals in 'X' for chunk #1 ... DONE
[17:40:28.797]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:40:28.797]  - seeds: [2] <seeds>
[17:40:28.797] getGlobalsAndPackages() ...
[17:40:28.797] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.798] Resolving globals: FALSE
[17:40:28.798] Tweak future expression to call with '...' arguments ...
[17:40:28.798] {
[17:40:28.798]     do.call(function(...) {
[17:40:28.798]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.798]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.798]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.798]             on.exit(options(oopts), add = TRUE)
[17:40:28.798]         }
[17:40:28.798]         {
[17:40:28.798]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.798]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.798]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.798]                   envir = globalenv(), inherits = FALSE)
[17:40:28.798]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.798]             })
[17:40:28.798]         }
[17:40:28.798]     }, args = future.call.arguments)
[17:40:28.798] }
[17:40:28.798] Tweak future expression to call with '...' arguments ... DONE
[17:40:28.798] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.799] 
[17:40:28.799] getGlobalsAndPackages() ... DONE
[17:40:28.799] run() for ‘Future’ ...
[17:40:28.799] - state: ‘created’
[17:40:28.799] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:40:28.803] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:28.804] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:40:28.804]   - Field: ‘label’
[17:40:28.804]   - Field: ‘local’
[17:40:28.804]   - Field: ‘owner’
[17:40:28.804]   - Field: ‘envir’
[17:40:28.804]   - Field: ‘workers’
[17:40:28.804]   - Field: ‘packages’
[17:40:28.804]   - Field: ‘gc’
[17:40:28.804]   - Field: ‘job’
[17:40:28.804]   - Field: ‘conditions’
[17:40:28.805]   - Field: ‘expr’
[17:40:28.805]   - Field: ‘uuid’
[17:40:28.805]   - Field: ‘seed’
[17:40:28.805]   - Field: ‘version’
[17:40:28.805]   - Field: ‘result’
[17:40:28.805]   - Field: ‘asynchronous’
[17:40:28.805]   - Field: ‘calls’
[17:40:28.805]   - Field: ‘globals’
[17:40:28.805]   - Field: ‘stdout’
[17:40:28.805]   - Field: ‘earlySignal’
[17:40:28.805]   - Field: ‘lazy’
[17:40:28.806]   - Field: ‘state’
[17:40:28.806] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:40:28.806] - Launch lazy future ...
[17:40:28.806] Packages needed by the future expression (n = 0): <none>
[17:40:28.806] Packages needed by future strategies (n = 0): <none>
[17:40:28.807] {
[17:40:28.807]     {
[17:40:28.807]         {
[17:40:28.807]             ...future.startTime <- base::Sys.time()
[17:40:28.807]             {
[17:40:28.807]                 {
[17:40:28.807]                   {
[17:40:28.807]                     {
[17:40:28.807]                       base::local({
[17:40:28.807]                         has_future <- base::requireNamespace("future", 
[17:40:28.807]                           quietly = TRUE)
[17:40:28.807]                         if (has_future) {
[17:40:28.807]                           ns <- base::getNamespace("future")
[17:40:28.807]                           version <- ns[[".package"]][["version"]]
[17:40:28.807]                           if (is.null(version)) 
[17:40:28.807]                             version <- utils::packageVersion("future")
[17:40:28.807]                         }
[17:40:28.807]                         else {
[17:40:28.807]                           version <- NULL
[17:40:28.807]                         }
[17:40:28.807]                         if (!has_future || version < "1.8.0") {
[17:40:28.807]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:28.807]                             "", base::R.version$version.string), 
[17:40:28.807]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:28.807]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:28.807]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:28.807]                               "release", "version")], collapse = " "), 
[17:40:28.807]                             hostname = base::Sys.info()[["nodename"]])
[17:40:28.807]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:28.807]                             info)
[17:40:28.807]                           info <- base::paste(info, collapse = "; ")
[17:40:28.807]                           if (!has_future) {
[17:40:28.807]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:28.807]                               info)
[17:40:28.807]                           }
[17:40:28.807]                           else {
[17:40:28.807]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:28.807]                               info, version)
[17:40:28.807]                           }
[17:40:28.807]                           base::stop(msg)
[17:40:28.807]                         }
[17:40:28.807]                       })
[17:40:28.807]                     }
[17:40:28.807]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:28.807]                     base::options(mc.cores = 1L)
[17:40:28.807]                   }
[17:40:28.807]                   options(future.plan = NULL)
[17:40:28.807]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.807]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:28.807]                 }
[17:40:28.807]                 ...future.workdir <- getwd()
[17:40:28.807]             }
[17:40:28.807]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:28.807]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:28.807]         }
[17:40:28.807]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:28.807]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:40:28.807]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:28.807]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:28.807]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:28.807]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:28.807]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:28.807]             base::names(...future.oldOptions))
[17:40:28.807]     }
[17:40:28.807]     if (FALSE) {
[17:40:28.807]     }
[17:40:28.807]     else {
[17:40:28.807]         if (TRUE) {
[17:40:28.807]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:28.807]                 open = "w")
[17:40:28.807]         }
[17:40:28.807]         else {
[17:40:28.807]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:28.807]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:28.807]         }
[17:40:28.807]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:28.807]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:28.807]             base::sink(type = "output", split = FALSE)
[17:40:28.807]             base::close(...future.stdout)
[17:40:28.807]         }, add = TRUE)
[17:40:28.807]     }
[17:40:28.807]     ...future.frame <- base::sys.nframe()
[17:40:28.807]     ...future.conditions <- base::list()
[17:40:28.807]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:28.807]     if (FALSE) {
[17:40:28.807]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:28.807]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:28.807]     }
[17:40:28.807]     ...future.result <- base::tryCatch({
[17:40:28.807]         base::withCallingHandlers({
[17:40:28.807]             ...future.value <- base::withVisible(base::local({
[17:40:28.807]                 withCallingHandlers({
[17:40:28.807]                   {
[17:40:28.807]                     do.call(function(...) {
[17:40:28.807]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.807]                       if (!identical(...future.globals.maxSize.org, 
[17:40:28.807]                         ...future.globals.maxSize)) {
[17:40:28.807]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.807]                         on.exit(options(oopts), add = TRUE)
[17:40:28.807]                       }
[17:40:28.807]                       {
[17:40:28.807]                         lapply(seq_along(...future.elements_ii), 
[17:40:28.807]                           FUN = function(jj) {
[17:40:28.807]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.807]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.807]                               envir = globalenv(), inherits = FALSE)
[17:40:28.807]                             ...future.FUN(...future.X_jj, ...)
[17:40:28.807]                           })
[17:40:28.807]                       }
[17:40:28.807]                     }, args = future.call.arguments)
[17:40:28.807]                   }
[17:40:28.807]                 }, immediateCondition = function(cond) {
[17:40:28.807]                   save_rds <- function (object, pathname, ...) 
[17:40:28.807]                   {
[17:40:28.807]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:28.807]                     if (file_test("-f", pathname_tmp)) {
[17:40:28.807]                       fi_tmp <- file.info(pathname_tmp)
[17:40:28.807]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:28.807]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:28.807]                         fi_tmp[["mtime"]])
[17:40:28.807]                     }
[17:40:28.807]                     tryCatch({
[17:40:28.807]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:28.807]                     }, error = function(ex) {
[17:40:28.807]                       msg <- conditionMessage(ex)
[17:40:28.807]                       fi_tmp <- file.info(pathname_tmp)
[17:40:28.807]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:28.807]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:28.807]                         fi_tmp[["mtime"]], msg)
[17:40:28.807]                       ex$message <- msg
[17:40:28.807]                       stop(ex)
[17:40:28.807]                     })
[17:40:28.807]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:28.807]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:28.807]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:28.807]                       fi_tmp <- file.info(pathname_tmp)
[17:40:28.807]                       fi <- file.info(pathname)
[17:40:28.807]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:28.807]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:28.807]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:28.807]                         fi[["size"]], fi[["mtime"]])
[17:40:28.807]                       stop(msg)
[17:40:28.807]                     }
[17:40:28.807]                     invisible(pathname)
[17:40:28.807]                   }
[17:40:28.807]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:28.807]                     rootPath = tempdir()) 
[17:40:28.807]                   {
[17:40:28.807]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:28.807]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:28.807]                       tmpdir = path, fileext = ".rds")
[17:40:28.807]                     save_rds(obj, file)
[17:40:28.807]                   }
[17:40:28.807]                   saveImmediateCondition(cond, path = "/tmp/RtmpYOEZWb/.future/immediateConditions")
[17:40:28.807]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.807]                   {
[17:40:28.807]                     inherits <- base::inherits
[17:40:28.807]                     invokeRestart <- base::invokeRestart
[17:40:28.807]                     is.null <- base::is.null
[17:40:28.807]                     muffled <- FALSE
[17:40:28.807]                     if (inherits(cond, "message")) {
[17:40:28.807]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:28.807]                       if (muffled) 
[17:40:28.807]                         invokeRestart("muffleMessage")
[17:40:28.807]                     }
[17:40:28.807]                     else if (inherits(cond, "warning")) {
[17:40:28.807]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:28.807]                       if (muffled) 
[17:40:28.807]                         invokeRestart("muffleWarning")
[17:40:28.807]                     }
[17:40:28.807]                     else if (inherits(cond, "condition")) {
[17:40:28.807]                       if (!is.null(pattern)) {
[17:40:28.807]                         computeRestarts <- base::computeRestarts
[17:40:28.807]                         grepl <- base::grepl
[17:40:28.807]                         restarts <- computeRestarts(cond)
[17:40:28.807]                         for (restart in restarts) {
[17:40:28.807]                           name <- restart$name
[17:40:28.807]                           if (is.null(name)) 
[17:40:28.807]                             next
[17:40:28.807]                           if (!grepl(pattern, name)) 
[17:40:28.807]                             next
[17:40:28.807]                           invokeRestart(restart)
[17:40:28.807]                           muffled <- TRUE
[17:40:28.807]                           break
[17:40:28.807]                         }
[17:40:28.807]                       }
[17:40:28.807]                     }
[17:40:28.807]                     invisible(muffled)
[17:40:28.807]                   }
[17:40:28.807]                   muffleCondition(cond)
[17:40:28.807]                 })
[17:40:28.807]             }))
[17:40:28.807]             future::FutureResult(value = ...future.value$value, 
[17:40:28.807]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.807]                   ...future.rng), globalenv = if (FALSE) 
[17:40:28.807]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:28.807]                     ...future.globalenv.names))
[17:40:28.807]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:28.807]         }, condition = base::local({
[17:40:28.807]             c <- base::c
[17:40:28.807]             inherits <- base::inherits
[17:40:28.807]             invokeRestart <- base::invokeRestart
[17:40:28.807]             length <- base::length
[17:40:28.807]             list <- base::list
[17:40:28.807]             seq.int <- base::seq.int
[17:40:28.807]             signalCondition <- base::signalCondition
[17:40:28.807]             sys.calls <- base::sys.calls
[17:40:28.807]             `[[` <- base::`[[`
[17:40:28.807]             `+` <- base::`+`
[17:40:28.807]             `<<-` <- base::`<<-`
[17:40:28.807]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:28.807]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:28.807]                   3L)]
[17:40:28.807]             }
[17:40:28.807]             function(cond) {
[17:40:28.807]                 is_error <- inherits(cond, "error")
[17:40:28.807]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:28.807]                   NULL)
[17:40:28.807]                 if (is_error) {
[17:40:28.807]                   sessionInformation <- function() {
[17:40:28.807]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:28.807]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:28.807]                       search = base::search(), system = base::Sys.info())
[17:40:28.807]                   }
[17:40:28.807]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.807]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:28.807]                     cond$call), session = sessionInformation(), 
[17:40:28.807]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:28.807]                   signalCondition(cond)
[17:40:28.807]                 }
[17:40:28.807]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:28.807]                 "immediateCondition"))) {
[17:40:28.807]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:28.807]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.807]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:28.807]                   if (TRUE && !signal) {
[17:40:28.807]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.807]                     {
[17:40:28.807]                       inherits <- base::inherits
[17:40:28.807]                       invokeRestart <- base::invokeRestart
[17:40:28.807]                       is.null <- base::is.null
[17:40:28.807]                       muffled <- FALSE
[17:40:28.807]                       if (inherits(cond, "message")) {
[17:40:28.807]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.807]                         if (muffled) 
[17:40:28.807]                           invokeRestart("muffleMessage")
[17:40:28.807]                       }
[17:40:28.807]                       else if (inherits(cond, "warning")) {
[17:40:28.807]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.807]                         if (muffled) 
[17:40:28.807]                           invokeRestart("muffleWarning")
[17:40:28.807]                       }
[17:40:28.807]                       else if (inherits(cond, "condition")) {
[17:40:28.807]                         if (!is.null(pattern)) {
[17:40:28.807]                           computeRestarts <- base::computeRestarts
[17:40:28.807]                           grepl <- base::grepl
[17:40:28.807]                           restarts <- computeRestarts(cond)
[17:40:28.807]                           for (restart in restarts) {
[17:40:28.807]                             name <- restart$name
[17:40:28.807]                             if (is.null(name)) 
[17:40:28.807]                               next
[17:40:28.807]                             if (!grepl(pattern, name)) 
[17:40:28.807]                               next
[17:40:28.807]                             invokeRestart(restart)
[17:40:28.807]                             muffled <- TRUE
[17:40:28.807]                             break
[17:40:28.807]                           }
[17:40:28.807]                         }
[17:40:28.807]                       }
[17:40:28.807]                       invisible(muffled)
[17:40:28.807]                     }
[17:40:28.807]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.807]                   }
[17:40:28.807]                 }
[17:40:28.807]                 else {
[17:40:28.807]                   if (TRUE) {
[17:40:28.807]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.807]                     {
[17:40:28.807]                       inherits <- base::inherits
[17:40:28.807]                       invokeRestart <- base::invokeRestart
[17:40:28.807]                       is.null <- base::is.null
[17:40:28.807]                       muffled <- FALSE
[17:40:28.807]                       if (inherits(cond, "message")) {
[17:40:28.807]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.807]                         if (muffled) 
[17:40:28.807]                           invokeRestart("muffleMessage")
[17:40:28.807]                       }
[17:40:28.807]                       else if (inherits(cond, "warning")) {
[17:40:28.807]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.807]                         if (muffled) 
[17:40:28.807]                           invokeRestart("muffleWarning")
[17:40:28.807]                       }
[17:40:28.807]                       else if (inherits(cond, "condition")) {
[17:40:28.807]                         if (!is.null(pattern)) {
[17:40:28.807]                           computeRestarts <- base::computeRestarts
[17:40:28.807]                           grepl <- base::grepl
[17:40:28.807]                           restarts <- computeRestarts(cond)
[17:40:28.807]                           for (restart in restarts) {
[17:40:28.807]                             name <- restart$name
[17:40:28.807]                             if (is.null(name)) 
[17:40:28.807]                               next
[17:40:28.807]                             if (!grepl(pattern, name)) 
[17:40:28.807]                               next
[17:40:28.807]                             invokeRestart(restart)
[17:40:28.807]                             muffled <- TRUE
[17:40:28.807]                             break
[17:40:28.807]                           }
[17:40:28.807]                         }
[17:40:28.807]                       }
[17:40:28.807]                       invisible(muffled)
[17:40:28.807]                     }
[17:40:28.807]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.807]                   }
[17:40:28.807]                 }
[17:40:28.807]             }
[17:40:28.807]         }))
[17:40:28.807]     }, error = function(ex) {
[17:40:28.807]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:28.807]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.807]                 ...future.rng), started = ...future.startTime, 
[17:40:28.807]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:28.807]             version = "1.8"), class = "FutureResult")
[17:40:28.807]     }, finally = {
[17:40:28.807]         if (!identical(...future.workdir, getwd())) 
[17:40:28.807]             setwd(...future.workdir)
[17:40:28.807]         {
[17:40:28.807]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:28.807]                 ...future.oldOptions$nwarnings <- NULL
[17:40:28.807]             }
[17:40:28.807]             base::options(...future.oldOptions)
[17:40:28.807]             if (.Platform$OS.type == "windows") {
[17:40:28.807]                 old_names <- names(...future.oldEnvVars)
[17:40:28.807]                 envs <- base::Sys.getenv()
[17:40:28.807]                 names <- names(envs)
[17:40:28.807]                 common <- intersect(names, old_names)
[17:40:28.807]                 added <- setdiff(names, old_names)
[17:40:28.807]                 removed <- setdiff(old_names, names)
[17:40:28.807]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:28.807]                   envs[common]]
[17:40:28.807]                 NAMES <- toupper(changed)
[17:40:28.807]                 args <- list()
[17:40:28.807]                 for (kk in seq_along(NAMES)) {
[17:40:28.807]                   name <- changed[[kk]]
[17:40:28.807]                   NAME <- NAMES[[kk]]
[17:40:28.807]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.807]                     next
[17:40:28.807]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.807]                 }
[17:40:28.807]                 NAMES <- toupper(added)
[17:40:28.807]                 for (kk in seq_along(NAMES)) {
[17:40:28.807]                   name <- added[[kk]]
[17:40:28.807]                   NAME <- NAMES[[kk]]
[17:40:28.807]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.807]                     next
[17:40:28.807]                   args[[name]] <- ""
[17:40:28.807]                 }
[17:40:28.807]                 NAMES <- toupper(removed)
[17:40:28.807]                 for (kk in seq_along(NAMES)) {
[17:40:28.807]                   name <- removed[[kk]]
[17:40:28.807]                   NAME <- NAMES[[kk]]
[17:40:28.807]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.807]                     next
[17:40:28.807]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.807]                 }
[17:40:28.807]                 if (length(args) > 0) 
[17:40:28.807]                   base::do.call(base::Sys.setenv, args = args)
[17:40:28.807]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:28.807]             }
[17:40:28.807]             else {
[17:40:28.807]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:28.807]             }
[17:40:28.807]             {
[17:40:28.807]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:28.807]                   0L) {
[17:40:28.807]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:28.807]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:28.807]                   base::options(opts)
[17:40:28.807]                 }
[17:40:28.807]                 {
[17:40:28.807]                   {
[17:40:28.807]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:28.807]                     NULL
[17:40:28.807]                   }
[17:40:28.807]                   options(future.plan = NULL)
[17:40:28.807]                   if (is.na(NA_character_)) 
[17:40:28.807]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.807]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:28.807]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:40:28.807]                     envir = parent.frame()) 
[17:40:28.807]                   {
[17:40:28.807]                     default_workers <- missing(workers)
[17:40:28.807]                     if (is.function(workers)) 
[17:40:28.807]                       workers <- workers()
[17:40:28.807]                     workers <- structure(as.integer(workers), 
[17:40:28.807]                       class = class(workers))
[17:40:28.807]                     stop_if_not(is.finite(workers), workers >= 
[17:40:28.807]                       1L)
[17:40:28.807]                     if ((workers == 1L && !inherits(workers, 
[17:40:28.807]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:40:28.807]                       if (default_workers) 
[17:40:28.807]                         supportsMulticore(warn = TRUE)
[17:40:28.807]                       return(sequential(..., envir = envir))
[17:40:28.807]                     }
[17:40:28.807]                     oopts <- options(mc.cores = workers)
[17:40:28.807]                     on.exit(options(oopts))
[17:40:28.807]                     future <- MulticoreFuture(..., workers = workers, 
[17:40:28.807]                       envir = envir)
[17:40:28.807]                     if (!future$lazy) 
[17:40:28.807]                       future <- run(future)
[17:40:28.807]                     invisible(future)
[17:40:28.807]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:28.807]                 }
[17:40:28.807]             }
[17:40:28.807]         }
[17:40:28.807]     })
[17:40:28.807]     if (TRUE) {
[17:40:28.807]         base::sink(type = "output", split = FALSE)
[17:40:28.807]         if (TRUE) {
[17:40:28.807]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:28.807]         }
[17:40:28.807]         else {
[17:40:28.807]             ...future.result["stdout"] <- base::list(NULL)
[17:40:28.807]         }
[17:40:28.807]         base::close(...future.stdout)
[17:40:28.807]         ...future.stdout <- NULL
[17:40:28.807]     }
[17:40:28.807]     ...future.result$conditions <- ...future.conditions
[17:40:28.807]     ...future.result$finished <- base::Sys.time()
[17:40:28.807]     ...future.result
[17:40:28.807] }
[17:40:28.809] assign_globals() ...
[17:40:28.809] List of 5
[17:40:28.809]  $ ...future.FUN            :function (...)  
[17:40:28.809]  $ future.call.arguments    : list()
[17:40:28.809]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.809]  $ ...future.elements_ii    :List of 2
[17:40:28.809]   ..$ : int 0
[17:40:28.809]   ..$ : int 0
[17:40:28.809]  $ ...future.seeds_ii       :List of 2
[17:40:28.809]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[17:40:28.809]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[17:40:28.809]  $ ...future.globals.maxSize: NULL
[17:40:28.809]  - attr(*, "resolved")= logi FALSE
[17:40:28.809]  - attr(*, "total_size")= num 616
[17:40:28.809]  - attr(*, "where")=List of 5
[17:40:28.809]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:40:28.809]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:40:28.809]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:40:28.809]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:40:28.809]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:40:28.809]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.809]  - attr(*, "already-done")= logi TRUE
[17:40:28.817] - reassign environment for ‘...future.FUN’
[17:40:28.817] - copied ‘...future.FUN’ to environment
[17:40:28.817] - copied ‘future.call.arguments’ to environment
[17:40:28.817] - copied ‘...future.elements_ii’ to environment
[17:40:28.817] - copied ‘...future.seeds_ii’ to environment
[17:40:28.817] - copied ‘...future.globals.maxSize’ to environment
[17:40:28.818] assign_globals() ... done
[17:40:28.818] requestCore(): workers = 2
[17:40:28.820] MulticoreFuture started
[17:40:28.820] - Launch lazy future ... done
[17:40:28.820] run() for ‘MulticoreFuture’ ... done
[17:40:28.821] Created future:
[17:40:28.821] plan(): Setting new future strategy stack:
[17:40:28.821] List of future strategies:
[17:40:28.821] 1. sequential:
[17:40:28.821]    - args: function (..., envir = parent.frame())
[17:40:28.821]    - tweaked: FALSE
[17:40:28.821]    - call: NULL
[17:40:28.822] plan(): nbrOfWorkers() = 1
[17:40:28.824] plan(): Setting new future strategy stack:
[17:40:28.824] List of future strategies:
[17:40:28.824] 1. multicore:
[17:40:28.824]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:28.824]    - tweaked: FALSE
[17:40:28.824]    - call: plan(strategy)
[17:40:28.829] plan(): nbrOfWorkers() = 2
[17:40:28.821] MulticoreFuture:
[17:40:28.821] Label: ‘future_replicate-1’
[17:40:28.821] Expression:
[17:40:28.821] {
[17:40:28.821]     do.call(function(...) {
[17:40:28.821]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.821]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.821]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.821]             on.exit(options(oopts), add = TRUE)
[17:40:28.821]         }
[17:40:28.821]         {
[17:40:28.821]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.821]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.821]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.821]                   envir = globalenv(), inherits = FALSE)
[17:40:28.821]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.821]             })
[17:40:28.821]         }
[17:40:28.821]     }, args = future.call.arguments)
[17:40:28.821] }
[17:40:28.821] Lazy evaluation: FALSE
[17:40:28.821] Asynchronous evaluation: TRUE
[17:40:28.821] Local evaluation: TRUE
[17:40:28.821] Environment: R_GlobalEnv
[17:40:28.821] Capture standard output: TRUE
[17:40:28.821] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:28.821] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:28.821] Packages: <none>
[17:40:28.821] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:28.821] Resolved: TRUE
[17:40:28.821] Value: <not collected>
[17:40:28.821] Conditions captured: <none>
[17:40:28.821] Early signaling: FALSE
[17:40:28.821] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:28.821] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:28.830] Chunk #1 of 2 ... DONE
[17:40:28.831] Chunk #2 of 2 ...
[17:40:28.831]  - Finding globals in 'X' for chunk #2 ...
[17:40:28.831] getGlobalsAndPackages() ...
[17:40:28.831] Searching for globals...
[17:40:28.832] 
[17:40:28.832] Searching for globals ... DONE
[17:40:28.832] - globals: [0] <none>
[17:40:28.832] getGlobalsAndPackages() ... DONE
[17:40:28.832]    + additional globals found: [n=0] 
[17:40:28.832]    + additional namespaces needed: [n=0] 
[17:40:28.832]  - Finding globals in 'X' for chunk #2 ... DONE
[17:40:28.832]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[17:40:28.833]  - seeds: [3] <seeds>
[17:40:28.833] getGlobalsAndPackages() ...
[17:40:28.833] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.833] Resolving globals: FALSE
[17:40:28.833] Tweak future expression to call with '...' arguments ...
[17:40:28.834] {
[17:40:28.834]     do.call(function(...) {
[17:40:28.834]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.834]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.834]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.834]             on.exit(options(oopts), add = TRUE)
[17:40:28.834]         }
[17:40:28.834]         {
[17:40:28.834]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.834]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.834]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.834]                   envir = globalenv(), inherits = FALSE)
[17:40:28.834]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.834]             })
[17:40:28.834]         }
[17:40:28.834]     }, args = future.call.arguments)
[17:40:28.834] }
[17:40:28.834] Tweak future expression to call with '...' arguments ... DONE
[17:40:28.835] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.835] 
[17:40:28.835] getGlobalsAndPackages() ... DONE
[17:40:28.835] run() for ‘Future’ ...
[17:40:28.836] - state: ‘created’
[17:40:28.836] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:40:28.840] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:28.840] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:40:28.841]   - Field: ‘label’
[17:40:28.841]   - Field: ‘local’
[17:40:28.841]   - Field: ‘owner’
[17:40:28.841]   - Field: ‘envir’
[17:40:28.841]   - Field: ‘workers’
[17:40:28.841]   - Field: ‘packages’
[17:40:28.841]   - Field: ‘gc’
[17:40:28.842]   - Field: ‘job’
[17:40:28.842]   - Field: ‘conditions’
[17:40:28.842]   - Field: ‘expr’
[17:40:28.842]   - Field: ‘uuid’
[17:40:28.842]   - Field: ‘seed’
[17:40:28.842]   - Field: ‘version’
[17:40:28.842]   - Field: ‘result’
[17:40:28.842]   - Field: ‘asynchronous’
[17:40:28.843]   - Field: ‘calls’
[17:40:28.843]   - Field: ‘globals’
[17:40:28.843]   - Field: ‘stdout’
[17:40:28.843]   - Field: ‘earlySignal’
[17:40:28.843]   - Field: ‘lazy’
[17:40:28.843]   - Field: ‘state’
[17:40:28.843] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:40:28.844] - Launch lazy future ...
[17:40:28.844] Packages needed by the future expression (n = 0): <none>
[17:40:28.844] Packages needed by future strategies (n = 0): <none>
[17:40:28.845] {
[17:40:28.845]     {
[17:40:28.845]         {
[17:40:28.845]             ...future.startTime <- base::Sys.time()
[17:40:28.845]             {
[17:40:28.845]                 {
[17:40:28.845]                   {
[17:40:28.845]                     {
[17:40:28.845]                       base::local({
[17:40:28.845]                         has_future <- base::requireNamespace("future", 
[17:40:28.845]                           quietly = TRUE)
[17:40:28.845]                         if (has_future) {
[17:40:28.845]                           ns <- base::getNamespace("future")
[17:40:28.845]                           version <- ns[[".package"]][["version"]]
[17:40:28.845]                           if (is.null(version)) 
[17:40:28.845]                             version <- utils::packageVersion("future")
[17:40:28.845]                         }
[17:40:28.845]                         else {
[17:40:28.845]                           version <- NULL
[17:40:28.845]                         }
[17:40:28.845]                         if (!has_future || version < "1.8.0") {
[17:40:28.845]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:28.845]                             "", base::R.version$version.string), 
[17:40:28.845]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:28.845]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:28.845]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:28.845]                               "release", "version")], collapse = " "), 
[17:40:28.845]                             hostname = base::Sys.info()[["nodename"]])
[17:40:28.845]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:28.845]                             info)
[17:40:28.845]                           info <- base::paste(info, collapse = "; ")
[17:40:28.845]                           if (!has_future) {
[17:40:28.845]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:28.845]                               info)
[17:40:28.845]                           }
[17:40:28.845]                           else {
[17:40:28.845]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:28.845]                               info, version)
[17:40:28.845]                           }
[17:40:28.845]                           base::stop(msg)
[17:40:28.845]                         }
[17:40:28.845]                       })
[17:40:28.845]                     }
[17:40:28.845]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:28.845]                     base::options(mc.cores = 1L)
[17:40:28.845]                   }
[17:40:28.845]                   options(future.plan = NULL)
[17:40:28.845]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.845]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:28.845]                 }
[17:40:28.845]                 ...future.workdir <- getwd()
[17:40:28.845]             }
[17:40:28.845]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:28.845]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:28.845]         }
[17:40:28.845]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:28.845]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[17:40:28.845]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:28.845]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:28.845]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:28.845]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:28.845]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:28.845]             base::names(...future.oldOptions))
[17:40:28.845]     }
[17:40:28.845]     if (FALSE) {
[17:40:28.845]     }
[17:40:28.845]     else {
[17:40:28.845]         if (TRUE) {
[17:40:28.845]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:28.845]                 open = "w")
[17:40:28.845]         }
[17:40:28.845]         else {
[17:40:28.845]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:28.845]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:28.845]         }
[17:40:28.845]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:28.845]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:28.845]             base::sink(type = "output", split = FALSE)
[17:40:28.845]             base::close(...future.stdout)
[17:40:28.845]         }, add = TRUE)
[17:40:28.845]     }
[17:40:28.845]     ...future.frame <- base::sys.nframe()
[17:40:28.845]     ...future.conditions <- base::list()
[17:40:28.845]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:28.845]     if (FALSE) {
[17:40:28.845]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:28.845]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:28.845]     }
[17:40:28.845]     ...future.result <- base::tryCatch({
[17:40:28.845]         base::withCallingHandlers({
[17:40:28.845]             ...future.value <- base::withVisible(base::local({
[17:40:28.845]                 withCallingHandlers({
[17:40:28.845]                   {
[17:40:28.845]                     do.call(function(...) {
[17:40:28.845]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.845]                       if (!identical(...future.globals.maxSize.org, 
[17:40:28.845]                         ...future.globals.maxSize)) {
[17:40:28.845]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.845]                         on.exit(options(oopts), add = TRUE)
[17:40:28.845]                       }
[17:40:28.845]                       {
[17:40:28.845]                         lapply(seq_along(...future.elements_ii), 
[17:40:28.845]                           FUN = function(jj) {
[17:40:28.845]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.845]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.845]                               envir = globalenv(), inherits = FALSE)
[17:40:28.845]                             ...future.FUN(...future.X_jj, ...)
[17:40:28.845]                           })
[17:40:28.845]                       }
[17:40:28.845]                     }, args = future.call.arguments)
[17:40:28.845]                   }
[17:40:28.845]                 }, immediateCondition = function(cond) {
[17:40:28.845]                   save_rds <- function (object, pathname, ...) 
[17:40:28.845]                   {
[17:40:28.845]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:28.845]                     if (file_test("-f", pathname_tmp)) {
[17:40:28.845]                       fi_tmp <- file.info(pathname_tmp)
[17:40:28.845]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:28.845]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:28.845]                         fi_tmp[["mtime"]])
[17:40:28.845]                     }
[17:40:28.845]                     tryCatch({
[17:40:28.845]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:28.845]                     }, error = function(ex) {
[17:40:28.845]                       msg <- conditionMessage(ex)
[17:40:28.845]                       fi_tmp <- file.info(pathname_tmp)
[17:40:28.845]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:28.845]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:28.845]                         fi_tmp[["mtime"]], msg)
[17:40:28.845]                       ex$message <- msg
[17:40:28.845]                       stop(ex)
[17:40:28.845]                     })
[17:40:28.845]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:28.845]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:28.845]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:28.845]                       fi_tmp <- file.info(pathname_tmp)
[17:40:28.845]                       fi <- file.info(pathname)
[17:40:28.845]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:28.845]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:28.845]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:28.845]                         fi[["size"]], fi[["mtime"]])
[17:40:28.845]                       stop(msg)
[17:40:28.845]                     }
[17:40:28.845]                     invisible(pathname)
[17:40:28.845]                   }
[17:40:28.845]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:28.845]                     rootPath = tempdir()) 
[17:40:28.845]                   {
[17:40:28.845]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:28.845]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:28.845]                       tmpdir = path, fileext = ".rds")
[17:40:28.845]                     save_rds(obj, file)
[17:40:28.845]                   }
[17:40:28.845]                   saveImmediateCondition(cond, path = "/tmp/RtmpYOEZWb/.future/immediateConditions")
[17:40:28.845]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.845]                   {
[17:40:28.845]                     inherits <- base::inherits
[17:40:28.845]                     invokeRestart <- base::invokeRestart
[17:40:28.845]                     is.null <- base::is.null
[17:40:28.845]                     muffled <- FALSE
[17:40:28.845]                     if (inherits(cond, "message")) {
[17:40:28.845]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:28.845]                       if (muffled) 
[17:40:28.845]                         invokeRestart("muffleMessage")
[17:40:28.845]                     }
[17:40:28.845]                     else if (inherits(cond, "warning")) {
[17:40:28.845]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:28.845]                       if (muffled) 
[17:40:28.845]                         invokeRestart("muffleWarning")
[17:40:28.845]                     }
[17:40:28.845]                     else if (inherits(cond, "condition")) {
[17:40:28.845]                       if (!is.null(pattern)) {
[17:40:28.845]                         computeRestarts <- base::computeRestarts
[17:40:28.845]                         grepl <- base::grepl
[17:40:28.845]                         restarts <- computeRestarts(cond)
[17:40:28.845]                         for (restart in restarts) {
[17:40:28.845]                           name <- restart$name
[17:40:28.845]                           if (is.null(name)) 
[17:40:28.845]                             next
[17:40:28.845]                           if (!grepl(pattern, name)) 
[17:40:28.845]                             next
[17:40:28.845]                           invokeRestart(restart)
[17:40:28.845]                           muffled <- TRUE
[17:40:28.845]                           break
[17:40:28.845]                         }
[17:40:28.845]                       }
[17:40:28.845]                     }
[17:40:28.845]                     invisible(muffled)
[17:40:28.845]                   }
[17:40:28.845]                   muffleCondition(cond)
[17:40:28.845]                 })
[17:40:28.845]             }))
[17:40:28.845]             future::FutureResult(value = ...future.value$value, 
[17:40:28.845]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.845]                   ...future.rng), globalenv = if (FALSE) 
[17:40:28.845]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:28.845]                     ...future.globalenv.names))
[17:40:28.845]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:28.845]         }, condition = base::local({
[17:40:28.845]             c <- base::c
[17:40:28.845]             inherits <- base::inherits
[17:40:28.845]             invokeRestart <- base::invokeRestart
[17:40:28.845]             length <- base::length
[17:40:28.845]             list <- base::list
[17:40:28.845]             seq.int <- base::seq.int
[17:40:28.845]             signalCondition <- base::signalCondition
[17:40:28.845]             sys.calls <- base::sys.calls
[17:40:28.845]             `[[` <- base::`[[`
[17:40:28.845]             `+` <- base::`+`
[17:40:28.845]             `<<-` <- base::`<<-`
[17:40:28.845]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:28.845]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:28.845]                   3L)]
[17:40:28.845]             }
[17:40:28.845]             function(cond) {
[17:40:28.845]                 is_error <- inherits(cond, "error")
[17:40:28.845]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:28.845]                   NULL)
[17:40:28.845]                 if (is_error) {
[17:40:28.845]                   sessionInformation <- function() {
[17:40:28.845]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:28.845]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:28.845]                       search = base::search(), system = base::Sys.info())
[17:40:28.845]                   }
[17:40:28.845]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.845]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:28.845]                     cond$call), session = sessionInformation(), 
[17:40:28.845]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:28.845]                   signalCondition(cond)
[17:40:28.845]                 }
[17:40:28.845]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:28.845]                 "immediateCondition"))) {
[17:40:28.845]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:28.845]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.845]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:28.845]                   if (TRUE && !signal) {
[17:40:28.845]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.845]                     {
[17:40:28.845]                       inherits <- base::inherits
[17:40:28.845]                       invokeRestart <- base::invokeRestart
[17:40:28.845]                       is.null <- base::is.null
[17:40:28.845]                       muffled <- FALSE
[17:40:28.845]                       if (inherits(cond, "message")) {
[17:40:28.845]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.845]                         if (muffled) 
[17:40:28.845]                           invokeRestart("muffleMessage")
[17:40:28.845]                       }
[17:40:28.845]                       else if (inherits(cond, "warning")) {
[17:40:28.845]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.845]                         if (muffled) 
[17:40:28.845]                           invokeRestart("muffleWarning")
[17:40:28.845]                       }
[17:40:28.845]                       else if (inherits(cond, "condition")) {
[17:40:28.845]                         if (!is.null(pattern)) {
[17:40:28.845]                           computeRestarts <- base::computeRestarts
[17:40:28.845]                           grepl <- base::grepl
[17:40:28.845]                           restarts <- computeRestarts(cond)
[17:40:28.845]                           for (restart in restarts) {
[17:40:28.845]                             name <- restart$name
[17:40:28.845]                             if (is.null(name)) 
[17:40:28.845]                               next
[17:40:28.845]                             if (!grepl(pattern, name)) 
[17:40:28.845]                               next
[17:40:28.845]                             invokeRestart(restart)
[17:40:28.845]                             muffled <- TRUE
[17:40:28.845]                             break
[17:40:28.845]                           }
[17:40:28.845]                         }
[17:40:28.845]                       }
[17:40:28.845]                       invisible(muffled)
[17:40:28.845]                     }
[17:40:28.845]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.845]                   }
[17:40:28.845]                 }
[17:40:28.845]                 else {
[17:40:28.845]                   if (TRUE) {
[17:40:28.845]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.845]                     {
[17:40:28.845]                       inherits <- base::inherits
[17:40:28.845]                       invokeRestart <- base::invokeRestart
[17:40:28.845]                       is.null <- base::is.null
[17:40:28.845]                       muffled <- FALSE
[17:40:28.845]                       if (inherits(cond, "message")) {
[17:40:28.845]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.845]                         if (muffled) 
[17:40:28.845]                           invokeRestart("muffleMessage")
[17:40:28.845]                       }
[17:40:28.845]                       else if (inherits(cond, "warning")) {
[17:40:28.845]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.845]                         if (muffled) 
[17:40:28.845]                           invokeRestart("muffleWarning")
[17:40:28.845]                       }
[17:40:28.845]                       else if (inherits(cond, "condition")) {
[17:40:28.845]                         if (!is.null(pattern)) {
[17:40:28.845]                           computeRestarts <- base::computeRestarts
[17:40:28.845]                           grepl <- base::grepl
[17:40:28.845]                           restarts <- computeRestarts(cond)
[17:40:28.845]                           for (restart in restarts) {
[17:40:28.845]                             name <- restart$name
[17:40:28.845]                             if (is.null(name)) 
[17:40:28.845]                               next
[17:40:28.845]                             if (!grepl(pattern, name)) 
[17:40:28.845]                               next
[17:40:28.845]                             invokeRestart(restart)
[17:40:28.845]                             muffled <- TRUE
[17:40:28.845]                             break
[17:40:28.845]                           }
[17:40:28.845]                         }
[17:40:28.845]                       }
[17:40:28.845]                       invisible(muffled)
[17:40:28.845]                     }
[17:40:28.845]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.845]                   }
[17:40:28.845]                 }
[17:40:28.845]             }
[17:40:28.845]         }))
[17:40:28.845]     }, error = function(ex) {
[17:40:28.845]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:28.845]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.845]                 ...future.rng), started = ...future.startTime, 
[17:40:28.845]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:28.845]             version = "1.8"), class = "FutureResult")
[17:40:28.845]     }, finally = {
[17:40:28.845]         if (!identical(...future.workdir, getwd())) 
[17:40:28.845]             setwd(...future.workdir)
[17:40:28.845]         {
[17:40:28.845]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:28.845]                 ...future.oldOptions$nwarnings <- NULL
[17:40:28.845]             }
[17:40:28.845]             base::options(...future.oldOptions)
[17:40:28.845]             if (.Platform$OS.type == "windows") {
[17:40:28.845]                 old_names <- names(...future.oldEnvVars)
[17:40:28.845]                 envs <- base::Sys.getenv()
[17:40:28.845]                 names <- names(envs)
[17:40:28.845]                 common <- intersect(names, old_names)
[17:40:28.845]                 added <- setdiff(names, old_names)
[17:40:28.845]                 removed <- setdiff(old_names, names)
[17:40:28.845]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:28.845]                   envs[common]]
[17:40:28.845]                 NAMES <- toupper(changed)
[17:40:28.845]                 args <- list()
[17:40:28.845]                 for (kk in seq_along(NAMES)) {
[17:40:28.845]                   name <- changed[[kk]]
[17:40:28.845]                   NAME <- NAMES[[kk]]
[17:40:28.845]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.845]                     next
[17:40:28.845]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.845]                 }
[17:40:28.845]                 NAMES <- toupper(added)
[17:40:28.845]                 for (kk in seq_along(NAMES)) {
[17:40:28.845]                   name <- added[[kk]]
[17:40:28.845]                   NAME <- NAMES[[kk]]
[17:40:28.845]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.845]                     next
[17:40:28.845]                   args[[name]] <- ""
[17:40:28.845]                 }
[17:40:28.845]                 NAMES <- toupper(removed)
[17:40:28.845]                 for (kk in seq_along(NAMES)) {
[17:40:28.845]                   name <- removed[[kk]]
[17:40:28.845]                   NAME <- NAMES[[kk]]
[17:40:28.845]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.845]                     next
[17:40:28.845]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.845]                 }
[17:40:28.845]                 if (length(args) > 0) 
[17:40:28.845]                   base::do.call(base::Sys.setenv, args = args)
[17:40:28.845]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:28.845]             }
[17:40:28.845]             else {
[17:40:28.845]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:28.845]             }
[17:40:28.845]             {
[17:40:28.845]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:28.845]                   0L) {
[17:40:28.845]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:28.845]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:28.845]                   base::options(opts)
[17:40:28.845]                 }
[17:40:28.845]                 {
[17:40:28.845]                   {
[17:40:28.845]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:28.845]                     NULL
[17:40:28.845]                   }
[17:40:28.845]                   options(future.plan = NULL)
[17:40:28.845]                   if (is.na(NA_character_)) 
[17:40:28.845]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.845]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:28.845]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:40:28.845]                     envir = parent.frame()) 
[17:40:28.845]                   {
[17:40:28.845]                     default_workers <- missing(workers)
[17:40:28.845]                     if (is.function(workers)) 
[17:40:28.845]                       workers <- workers()
[17:40:28.845]                     workers <- structure(as.integer(workers), 
[17:40:28.845]                       class = class(workers))
[17:40:28.845]                     stop_if_not(is.finite(workers), workers >= 
[17:40:28.845]                       1L)
[17:40:28.845]                     if ((workers == 1L && !inherits(workers, 
[17:40:28.845]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:40:28.845]                       if (default_workers) 
[17:40:28.845]                         supportsMulticore(warn = TRUE)
[17:40:28.845]                       return(sequential(..., envir = envir))
[17:40:28.845]                     }
[17:40:28.845]                     oopts <- options(mc.cores = workers)
[17:40:28.845]                     on.exit(options(oopts))
[17:40:28.845]                     future <- MulticoreFuture(..., workers = workers, 
[17:40:28.845]                       envir = envir)
[17:40:28.845]                     if (!future$lazy) 
[17:40:28.845]                       future <- run(future)
[17:40:28.845]                     invisible(future)
[17:40:28.845]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:28.845]                 }
[17:40:28.845]             }
[17:40:28.845]         }
[17:40:28.845]     })
[17:40:28.845]     if (TRUE) {
[17:40:28.845]         base::sink(type = "output", split = FALSE)
[17:40:28.845]         if (TRUE) {
[17:40:28.845]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:28.845]         }
[17:40:28.845]         else {
[17:40:28.845]             ...future.result["stdout"] <- base::list(NULL)
[17:40:28.845]         }
[17:40:28.845]         base::close(...future.stdout)
[17:40:28.845]         ...future.stdout <- NULL
[17:40:28.845]     }
[17:40:28.845]     ...future.result$conditions <- ...future.conditions
[17:40:28.845]     ...future.result$finished <- base::Sys.time()
[17:40:28.845]     ...future.result
[17:40:28.845] }
[17:40:28.849] assign_globals() ...
[17:40:28.849] List of 5
[17:40:28.849]  $ ...future.FUN            :function (...)  
[17:40:28.849]  $ future.call.arguments    : list()
[17:40:28.849]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.849]  $ ...future.elements_ii    :List of 3
[17:40:28.849]   ..$ : int 0
[17:40:28.849]   ..$ : int 0
[17:40:28.849]   ..$ : int 0
[17:40:28.849]  $ ...future.seeds_ii       :List of 3
[17:40:28.849]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[17:40:28.849]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[17:40:28.849]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[17:40:28.849]  $ ...future.globals.maxSize: NULL
[17:40:28.849]  - attr(*, "resolved")= logi FALSE
[17:40:28.849]  - attr(*, "total_size")= num 616
[17:40:28.849]  - attr(*, "where")=List of 5
[17:40:28.849]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:40:28.849]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:40:28.849]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:40:28.849]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:40:28.849]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:40:28.849]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.849]  - attr(*, "already-done")= logi TRUE
[17:40:28.861] - reassign environment for ‘...future.FUN’
[17:40:28.862] - copied ‘...future.FUN’ to environment
[17:40:28.862] - copied ‘future.call.arguments’ to environment
[17:40:28.862] - copied ‘...future.elements_ii’ to environment
[17:40:28.862] - copied ‘...future.seeds_ii’ to environment
[17:40:28.862] - copied ‘...future.globals.maxSize’ to environment
[17:40:28.862] assign_globals() ... done
[17:40:28.863] requestCore(): workers = 2
[17:40:28.865] MulticoreFuture started
[17:40:28.865] - Launch lazy future ... done
[17:40:28.865] run() for ‘MulticoreFuture’ ... done
[17:40:28.866] Created future:
[17:40:28.866] plan(): Setting new future strategy stack:
[17:40:28.866] List of future strategies:
[17:40:28.866] 1. sequential:
[17:40:28.866]    - args: function (..., envir = parent.frame())
[17:40:28.866]    - tweaked: FALSE
[17:40:28.866]    - call: NULL
[17:40:28.867] plan(): nbrOfWorkers() = 1
[17:40:28.869] plan(): Setting new future strategy stack:
[17:40:28.869] List of future strategies:
[17:40:28.869] 1. multicore:
[17:40:28.869]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:28.869]    - tweaked: FALSE
[17:40:28.869]    - call: plan(strategy)
[17:40:28.875] plan(): nbrOfWorkers() = 2
[17:40:28.866] MulticoreFuture:
[17:40:28.866] Label: ‘future_replicate-2’
[17:40:28.866] Expression:
[17:40:28.866] {
[17:40:28.866]     do.call(function(...) {
[17:40:28.866]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.866]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.866]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.866]             on.exit(options(oopts), add = TRUE)
[17:40:28.866]         }
[17:40:28.866]         {
[17:40:28.866]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.866]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.866]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.866]                   envir = globalenv(), inherits = FALSE)
[17:40:28.866]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.866]             })
[17:40:28.866]         }
[17:40:28.866]     }, args = future.call.arguments)
[17:40:28.866] }
[17:40:28.866] Lazy evaluation: FALSE
[17:40:28.866] Asynchronous evaluation: TRUE
[17:40:28.866] Local evaluation: TRUE
[17:40:28.866] Environment: R_GlobalEnv
[17:40:28.866] Capture standard output: TRUE
[17:40:28.866] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:28.866] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:28.866] Packages: <none>
[17:40:28.866] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:28.866] Resolved: TRUE
[17:40:28.866] Value: <not collected>
[17:40:28.866] Conditions captured: <none>
[17:40:28.866] Early signaling: FALSE
[17:40:28.866] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:28.866] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:28.876] Chunk #2 of 2 ... DONE
[17:40:28.876] Launching 2 futures (chunks) ... DONE
[17:40:28.876] Resolving 2 futures (chunks) ...
[17:40:28.876] resolve() on list ...
[17:40:28.876]  recursive: 0
[17:40:28.877]  length: 2
[17:40:28.877] 
[17:40:28.877] Future #1
[17:40:28.878] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:40:28.878] - nx: 2
[17:40:28.878] - relay: TRUE
[17:40:28.878] - stdout: TRUE
[17:40:28.879] - signal: TRUE
[17:40:28.879] - resignal: FALSE
[17:40:28.879] - force: TRUE
[17:40:28.879] - relayed: [n=2] FALSE, FALSE
[17:40:28.879] - queued futures: [n=2] FALSE, FALSE
[17:40:28.879]  - until=1
[17:40:28.880]  - relaying element #1
[17:40:28.880] - relayed: [n=2] TRUE, FALSE
[17:40:28.880] - queued futures: [n=2] TRUE, FALSE
[17:40:28.880] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:40:28.880]  length: 1 (resolved future 1)
[17:40:28.881] Future #2
[17:40:28.881] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:40:28.881] - nx: 2
[17:40:28.882] - relay: TRUE
[17:40:28.882] - stdout: TRUE
[17:40:28.882] - signal: TRUE
[17:40:28.882] - resignal: FALSE
[17:40:28.882] - force: TRUE
[17:40:28.882] - relayed: [n=2] TRUE, FALSE
[17:40:28.882] - queued futures: [n=2] TRUE, FALSE
[17:40:28.882]  - until=2
[17:40:28.883]  - relaying element #2
[17:40:28.883] - relayed: [n=2] TRUE, TRUE
[17:40:28.883] - queued futures: [n=2] TRUE, TRUE
[17:40:28.883] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:40:28.883]  length: 0 (resolved future 2)
[17:40:28.883] Relaying remaining futures
[17:40:28.884] signalConditionsASAP(NULL, pos=0) ...
[17:40:28.884] - nx: 2
[17:40:28.884] - relay: TRUE
[17:40:28.884] - stdout: TRUE
[17:40:28.884] - signal: TRUE
[17:40:28.884] - resignal: FALSE
[17:40:28.884] - force: TRUE
[17:40:28.884] - relayed: [n=2] TRUE, TRUE
[17:40:28.884] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:40:28.885] - relayed: [n=2] TRUE, TRUE
[17:40:28.885] - queued futures: [n=2] TRUE, TRUE
[17:40:28.885] signalConditionsASAP(NULL, pos=0) ... done
[17:40:28.885] resolve() on list ... DONE
[17:40:28.885]  - Number of value chunks collected: 2
[17:40:28.885] Resolving 2 futures (chunks) ... DONE
[17:40:28.885] Reducing values from 2 chunks ...
[17:40:28.885]  - Number of values collected after concatenation: 5
[17:40:28.886]  - Number of values expected: 5
[17:40:28.886] Reducing values from 2 chunks ... DONE
[17:40:28.886] future_lapply() ... DONE
[17:40:28.886] future_lapply() ...
[17:40:28.887] Generating random seeds ...
[17:40:28.887] Generating random seed streams for 5 elements ...
[17:40:28.887] Generating random seed streams for 5 elements ... DONE
[17:40:28.887] Generating random seeds ... DONE
[17:40:28.887] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:40:28.892] Number of chunks: 2
[17:40:28.892] getGlobalsAndPackagesXApply() ...
[17:40:28.892]  - future.globals: TRUE
[17:40:28.892] getGlobalsAndPackages() ...
[17:40:28.892] Searching for globals...
[17:40:28.893] - globals found: [2] ‘FUN’, ‘sample’
[17:40:28.894] Searching for globals ... DONE
[17:40:28.894] Resolving globals: FALSE
[17:40:28.894] The total size of the 1 globals is 616 bytes (616 bytes)
[17:40:28.895] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:40:28.895] - globals: [1] ‘FUN’
[17:40:28.895] 
[17:40:28.895] getGlobalsAndPackages() ... DONE
[17:40:28.895]  - globals found/used: [n=1] ‘FUN’
[17:40:28.895]  - needed namespaces: [n=0] 
[17:40:28.895] Finding globals ... DONE
[17:40:28.895]  - use_args: TRUE
[17:40:28.896]  - Getting '...' globals ...
[17:40:28.896] resolve() on list ...
[17:40:28.896]  recursive: 0
[17:40:28.896]  length: 1
[17:40:28.896]  elements: ‘...’
[17:40:28.896]  length: 0 (resolved future 1)
[17:40:28.896] resolve() on list ... DONE
[17:40:28.897]    - '...' content: [n=0] 
[17:40:28.897] List of 1
[17:40:28.897]  $ ...: list()
[17:40:28.897]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.897]  - attr(*, "where")=List of 1
[17:40:28.897]   ..$ ...:<environment: 0x558a3bd37648> 
[17:40:28.897]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.897]  - attr(*, "resolved")= logi TRUE
[17:40:28.897]  - attr(*, "total_size")= num NA
[17:40:28.902]  - Getting '...' globals ... DONE
[17:40:28.902] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:40:28.902] List of 2
[17:40:28.902]  $ ...future.FUN:function (...)  
[17:40:28.902]  $ ...          : list()
[17:40:28.902]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.902]  - attr(*, "where")=List of 2
[17:40:28.902]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:40:28.902]   ..$ ...          :<environment: 0x558a3bd37648> 
[17:40:28.902]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.902]  - attr(*, "resolved")= logi FALSE
[17:40:28.902]  - attr(*, "total_size")= num 616
[17:40:28.906] Packages to be attached in all futures: [n=0] 
[17:40:28.906] getGlobalsAndPackagesXApply() ... DONE
[17:40:28.906] Number of futures (= number of chunks): 2
[17:40:28.906] Launching 2 futures (chunks) ...
[17:40:28.906] Chunk #1 of 2 ...
[17:40:28.907]  - Finding globals in 'X' for chunk #1 ...
[17:40:28.907] getGlobalsAndPackages() ...
[17:40:28.907] Searching for globals...
[17:40:28.907] 
[17:40:28.907] Searching for globals ... DONE
[17:40:28.907] - globals: [0] <none>
[17:40:28.908] getGlobalsAndPackages() ... DONE
[17:40:28.908]    + additional globals found: [n=0] 
[17:40:28.908]    + additional namespaces needed: [n=0] 
[17:40:28.908]  - Finding globals in 'X' for chunk #1 ... DONE
[17:40:28.908]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:40:28.908]  - seeds: [2] <seeds>
[17:40:28.908] getGlobalsAndPackages() ...
[17:40:28.909] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.909] Resolving globals: FALSE
[17:40:28.909] Tweak future expression to call with '...' arguments ...
[17:40:28.909] {
[17:40:28.909]     do.call(function(...) {
[17:40:28.909]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.909]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.909]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.909]             on.exit(options(oopts), add = TRUE)
[17:40:28.909]         }
[17:40:28.909]         {
[17:40:28.909]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.909]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.909]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.909]                   envir = globalenv(), inherits = FALSE)
[17:40:28.909]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.909]             })
[17:40:28.909]         }
[17:40:28.909]     }, args = future.call.arguments)
[17:40:28.909] }
[17:40:28.909] Tweak future expression to call with '...' arguments ... DONE
[17:40:28.910] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.910] 
[17:40:28.910] getGlobalsAndPackages() ... DONE
[17:40:28.910] run() for ‘Future’ ...
[17:40:28.910] - state: ‘created’
[17:40:28.910] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:40:28.914] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:28.914] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:40:28.914]   - Field: ‘label’
[17:40:28.915]   - Field: ‘local’
[17:40:28.915]   - Field: ‘owner’
[17:40:28.915]   - Field: ‘envir’
[17:40:28.915]   - Field: ‘workers’
[17:40:28.915]   - Field: ‘packages’
[17:40:28.915]   - Field: ‘gc’
[17:40:28.915]   - Field: ‘job’
[17:40:28.915]   - Field: ‘conditions’
[17:40:28.915]   - Field: ‘expr’
[17:40:28.916]   - Field: ‘uuid’
[17:40:28.916]   - Field: ‘seed’
[17:40:28.916]   - Field: ‘version’
[17:40:28.916]   - Field: ‘result’
[17:40:28.916]   - Field: ‘asynchronous’
[17:40:28.916]   - Field: ‘calls’
[17:40:28.916]   - Field: ‘globals’
[17:40:28.916]   - Field: ‘stdout’
[17:40:28.916]   - Field: ‘earlySignal’
[17:40:28.916]   - Field: ‘lazy’
[17:40:28.916]   - Field: ‘state’
[17:40:28.917] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:40:28.917] - Launch lazy future ...
[17:40:28.917] Packages needed by the future expression (n = 0): <none>
[17:40:28.917] Packages needed by future strategies (n = 0): <none>
[17:40:28.918] {
[17:40:28.918]     {
[17:40:28.918]         {
[17:40:28.918]             ...future.startTime <- base::Sys.time()
[17:40:28.918]             {
[17:40:28.918]                 {
[17:40:28.918]                   {
[17:40:28.918]                     {
[17:40:28.918]                       base::local({
[17:40:28.918]                         has_future <- base::requireNamespace("future", 
[17:40:28.918]                           quietly = TRUE)
[17:40:28.918]                         if (has_future) {
[17:40:28.918]                           ns <- base::getNamespace("future")
[17:40:28.918]                           version <- ns[[".package"]][["version"]]
[17:40:28.918]                           if (is.null(version)) 
[17:40:28.918]                             version <- utils::packageVersion("future")
[17:40:28.918]                         }
[17:40:28.918]                         else {
[17:40:28.918]                           version <- NULL
[17:40:28.918]                         }
[17:40:28.918]                         if (!has_future || version < "1.8.0") {
[17:40:28.918]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:28.918]                             "", base::R.version$version.string), 
[17:40:28.918]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:28.918]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:28.918]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:28.918]                               "release", "version")], collapse = " "), 
[17:40:28.918]                             hostname = base::Sys.info()[["nodename"]])
[17:40:28.918]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:28.918]                             info)
[17:40:28.918]                           info <- base::paste(info, collapse = "; ")
[17:40:28.918]                           if (!has_future) {
[17:40:28.918]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:28.918]                               info)
[17:40:28.918]                           }
[17:40:28.918]                           else {
[17:40:28.918]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:28.918]                               info, version)
[17:40:28.918]                           }
[17:40:28.918]                           base::stop(msg)
[17:40:28.918]                         }
[17:40:28.918]                       })
[17:40:28.918]                     }
[17:40:28.918]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:28.918]                     base::options(mc.cores = 1L)
[17:40:28.918]                   }
[17:40:28.918]                   options(future.plan = NULL)
[17:40:28.918]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.918]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:28.918]                 }
[17:40:28.918]                 ...future.workdir <- getwd()
[17:40:28.918]             }
[17:40:28.918]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:28.918]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:28.918]         }
[17:40:28.918]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:28.918]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:40:28.918]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:28.918]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:28.918]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:28.918]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:28.918]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:28.918]             base::names(...future.oldOptions))
[17:40:28.918]     }
[17:40:28.918]     if (FALSE) {
[17:40:28.918]     }
[17:40:28.918]     else {
[17:40:28.918]         if (TRUE) {
[17:40:28.918]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:28.918]                 open = "w")
[17:40:28.918]         }
[17:40:28.918]         else {
[17:40:28.918]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:28.918]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:28.918]         }
[17:40:28.918]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:28.918]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:28.918]             base::sink(type = "output", split = FALSE)
[17:40:28.918]             base::close(...future.stdout)
[17:40:28.918]         }, add = TRUE)
[17:40:28.918]     }
[17:40:28.918]     ...future.frame <- base::sys.nframe()
[17:40:28.918]     ...future.conditions <- base::list()
[17:40:28.918]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:28.918]     if (FALSE) {
[17:40:28.918]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:28.918]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:28.918]     }
[17:40:28.918]     ...future.result <- base::tryCatch({
[17:40:28.918]         base::withCallingHandlers({
[17:40:28.918]             ...future.value <- base::withVisible(base::local({
[17:40:28.918]                 withCallingHandlers({
[17:40:28.918]                   {
[17:40:28.918]                     do.call(function(...) {
[17:40:28.918]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.918]                       if (!identical(...future.globals.maxSize.org, 
[17:40:28.918]                         ...future.globals.maxSize)) {
[17:40:28.918]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.918]                         on.exit(options(oopts), add = TRUE)
[17:40:28.918]                       }
[17:40:28.918]                       {
[17:40:28.918]                         lapply(seq_along(...future.elements_ii), 
[17:40:28.918]                           FUN = function(jj) {
[17:40:28.918]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.918]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.918]                               envir = globalenv(), inherits = FALSE)
[17:40:28.918]                             ...future.FUN(...future.X_jj, ...)
[17:40:28.918]                           })
[17:40:28.918]                       }
[17:40:28.918]                     }, args = future.call.arguments)
[17:40:28.918]                   }
[17:40:28.918]                 }, immediateCondition = function(cond) {
[17:40:28.918]                   save_rds <- function (object, pathname, ...) 
[17:40:28.918]                   {
[17:40:28.918]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:28.918]                     if (file_test("-f", pathname_tmp)) {
[17:40:28.918]                       fi_tmp <- file.info(pathname_tmp)
[17:40:28.918]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:28.918]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:28.918]                         fi_tmp[["mtime"]])
[17:40:28.918]                     }
[17:40:28.918]                     tryCatch({
[17:40:28.918]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:28.918]                     }, error = function(ex) {
[17:40:28.918]                       msg <- conditionMessage(ex)
[17:40:28.918]                       fi_tmp <- file.info(pathname_tmp)
[17:40:28.918]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:28.918]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:28.918]                         fi_tmp[["mtime"]], msg)
[17:40:28.918]                       ex$message <- msg
[17:40:28.918]                       stop(ex)
[17:40:28.918]                     })
[17:40:28.918]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:28.918]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:28.918]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:28.918]                       fi_tmp <- file.info(pathname_tmp)
[17:40:28.918]                       fi <- file.info(pathname)
[17:40:28.918]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:28.918]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:28.918]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:28.918]                         fi[["size"]], fi[["mtime"]])
[17:40:28.918]                       stop(msg)
[17:40:28.918]                     }
[17:40:28.918]                     invisible(pathname)
[17:40:28.918]                   }
[17:40:28.918]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:28.918]                     rootPath = tempdir()) 
[17:40:28.918]                   {
[17:40:28.918]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:28.918]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:28.918]                       tmpdir = path, fileext = ".rds")
[17:40:28.918]                     save_rds(obj, file)
[17:40:28.918]                   }
[17:40:28.918]                   saveImmediateCondition(cond, path = "/tmp/RtmpYOEZWb/.future/immediateConditions")
[17:40:28.918]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.918]                   {
[17:40:28.918]                     inherits <- base::inherits
[17:40:28.918]                     invokeRestart <- base::invokeRestart
[17:40:28.918]                     is.null <- base::is.null
[17:40:28.918]                     muffled <- FALSE
[17:40:28.918]                     if (inherits(cond, "message")) {
[17:40:28.918]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:28.918]                       if (muffled) 
[17:40:28.918]                         invokeRestart("muffleMessage")
[17:40:28.918]                     }
[17:40:28.918]                     else if (inherits(cond, "warning")) {
[17:40:28.918]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:28.918]                       if (muffled) 
[17:40:28.918]                         invokeRestart("muffleWarning")
[17:40:28.918]                     }
[17:40:28.918]                     else if (inherits(cond, "condition")) {
[17:40:28.918]                       if (!is.null(pattern)) {
[17:40:28.918]                         computeRestarts <- base::computeRestarts
[17:40:28.918]                         grepl <- base::grepl
[17:40:28.918]                         restarts <- computeRestarts(cond)
[17:40:28.918]                         for (restart in restarts) {
[17:40:28.918]                           name <- restart$name
[17:40:28.918]                           if (is.null(name)) 
[17:40:28.918]                             next
[17:40:28.918]                           if (!grepl(pattern, name)) 
[17:40:28.918]                             next
[17:40:28.918]                           invokeRestart(restart)
[17:40:28.918]                           muffled <- TRUE
[17:40:28.918]                           break
[17:40:28.918]                         }
[17:40:28.918]                       }
[17:40:28.918]                     }
[17:40:28.918]                     invisible(muffled)
[17:40:28.918]                   }
[17:40:28.918]                   muffleCondition(cond)
[17:40:28.918]                 })
[17:40:28.918]             }))
[17:40:28.918]             future::FutureResult(value = ...future.value$value, 
[17:40:28.918]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.918]                   ...future.rng), globalenv = if (FALSE) 
[17:40:28.918]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:28.918]                     ...future.globalenv.names))
[17:40:28.918]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:28.918]         }, condition = base::local({
[17:40:28.918]             c <- base::c
[17:40:28.918]             inherits <- base::inherits
[17:40:28.918]             invokeRestart <- base::invokeRestart
[17:40:28.918]             length <- base::length
[17:40:28.918]             list <- base::list
[17:40:28.918]             seq.int <- base::seq.int
[17:40:28.918]             signalCondition <- base::signalCondition
[17:40:28.918]             sys.calls <- base::sys.calls
[17:40:28.918]             `[[` <- base::`[[`
[17:40:28.918]             `+` <- base::`+`
[17:40:28.918]             `<<-` <- base::`<<-`
[17:40:28.918]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:28.918]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:28.918]                   3L)]
[17:40:28.918]             }
[17:40:28.918]             function(cond) {
[17:40:28.918]                 is_error <- inherits(cond, "error")
[17:40:28.918]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:28.918]                   NULL)
[17:40:28.918]                 if (is_error) {
[17:40:28.918]                   sessionInformation <- function() {
[17:40:28.918]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:28.918]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:28.918]                       search = base::search(), system = base::Sys.info())
[17:40:28.918]                   }
[17:40:28.918]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.918]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:28.918]                     cond$call), session = sessionInformation(), 
[17:40:28.918]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:28.918]                   signalCondition(cond)
[17:40:28.918]                 }
[17:40:28.918]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:28.918]                 "immediateCondition"))) {
[17:40:28.918]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:28.918]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.918]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:28.918]                   if (TRUE && !signal) {
[17:40:28.918]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.918]                     {
[17:40:28.918]                       inherits <- base::inherits
[17:40:28.918]                       invokeRestart <- base::invokeRestart
[17:40:28.918]                       is.null <- base::is.null
[17:40:28.918]                       muffled <- FALSE
[17:40:28.918]                       if (inherits(cond, "message")) {
[17:40:28.918]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.918]                         if (muffled) 
[17:40:28.918]                           invokeRestart("muffleMessage")
[17:40:28.918]                       }
[17:40:28.918]                       else if (inherits(cond, "warning")) {
[17:40:28.918]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.918]                         if (muffled) 
[17:40:28.918]                           invokeRestart("muffleWarning")
[17:40:28.918]                       }
[17:40:28.918]                       else if (inherits(cond, "condition")) {
[17:40:28.918]                         if (!is.null(pattern)) {
[17:40:28.918]                           computeRestarts <- base::computeRestarts
[17:40:28.918]                           grepl <- base::grepl
[17:40:28.918]                           restarts <- computeRestarts(cond)
[17:40:28.918]                           for (restart in restarts) {
[17:40:28.918]                             name <- restart$name
[17:40:28.918]                             if (is.null(name)) 
[17:40:28.918]                               next
[17:40:28.918]                             if (!grepl(pattern, name)) 
[17:40:28.918]                               next
[17:40:28.918]                             invokeRestart(restart)
[17:40:28.918]                             muffled <- TRUE
[17:40:28.918]                             break
[17:40:28.918]                           }
[17:40:28.918]                         }
[17:40:28.918]                       }
[17:40:28.918]                       invisible(muffled)
[17:40:28.918]                     }
[17:40:28.918]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.918]                   }
[17:40:28.918]                 }
[17:40:28.918]                 else {
[17:40:28.918]                   if (TRUE) {
[17:40:28.918]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.918]                     {
[17:40:28.918]                       inherits <- base::inherits
[17:40:28.918]                       invokeRestart <- base::invokeRestart
[17:40:28.918]                       is.null <- base::is.null
[17:40:28.918]                       muffled <- FALSE
[17:40:28.918]                       if (inherits(cond, "message")) {
[17:40:28.918]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.918]                         if (muffled) 
[17:40:28.918]                           invokeRestart("muffleMessage")
[17:40:28.918]                       }
[17:40:28.918]                       else if (inherits(cond, "warning")) {
[17:40:28.918]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.918]                         if (muffled) 
[17:40:28.918]                           invokeRestart("muffleWarning")
[17:40:28.918]                       }
[17:40:28.918]                       else if (inherits(cond, "condition")) {
[17:40:28.918]                         if (!is.null(pattern)) {
[17:40:28.918]                           computeRestarts <- base::computeRestarts
[17:40:28.918]                           grepl <- base::grepl
[17:40:28.918]                           restarts <- computeRestarts(cond)
[17:40:28.918]                           for (restart in restarts) {
[17:40:28.918]                             name <- restart$name
[17:40:28.918]                             if (is.null(name)) 
[17:40:28.918]                               next
[17:40:28.918]                             if (!grepl(pattern, name)) 
[17:40:28.918]                               next
[17:40:28.918]                             invokeRestart(restart)
[17:40:28.918]                             muffled <- TRUE
[17:40:28.918]                             break
[17:40:28.918]                           }
[17:40:28.918]                         }
[17:40:28.918]                       }
[17:40:28.918]                       invisible(muffled)
[17:40:28.918]                     }
[17:40:28.918]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.918]                   }
[17:40:28.918]                 }
[17:40:28.918]             }
[17:40:28.918]         }))
[17:40:28.918]     }, error = function(ex) {
[17:40:28.918]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:28.918]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.918]                 ...future.rng), started = ...future.startTime, 
[17:40:28.918]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:28.918]             version = "1.8"), class = "FutureResult")
[17:40:28.918]     }, finally = {
[17:40:28.918]         if (!identical(...future.workdir, getwd())) 
[17:40:28.918]             setwd(...future.workdir)
[17:40:28.918]         {
[17:40:28.918]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:28.918]                 ...future.oldOptions$nwarnings <- NULL
[17:40:28.918]             }
[17:40:28.918]             base::options(...future.oldOptions)
[17:40:28.918]             if (.Platform$OS.type == "windows") {
[17:40:28.918]                 old_names <- names(...future.oldEnvVars)
[17:40:28.918]                 envs <- base::Sys.getenv()
[17:40:28.918]                 names <- names(envs)
[17:40:28.918]                 common <- intersect(names, old_names)
[17:40:28.918]                 added <- setdiff(names, old_names)
[17:40:28.918]                 removed <- setdiff(old_names, names)
[17:40:28.918]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:28.918]                   envs[common]]
[17:40:28.918]                 NAMES <- toupper(changed)
[17:40:28.918]                 args <- list()
[17:40:28.918]                 for (kk in seq_along(NAMES)) {
[17:40:28.918]                   name <- changed[[kk]]
[17:40:28.918]                   NAME <- NAMES[[kk]]
[17:40:28.918]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.918]                     next
[17:40:28.918]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.918]                 }
[17:40:28.918]                 NAMES <- toupper(added)
[17:40:28.918]                 for (kk in seq_along(NAMES)) {
[17:40:28.918]                   name <- added[[kk]]
[17:40:28.918]                   NAME <- NAMES[[kk]]
[17:40:28.918]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.918]                     next
[17:40:28.918]                   args[[name]] <- ""
[17:40:28.918]                 }
[17:40:28.918]                 NAMES <- toupper(removed)
[17:40:28.918]                 for (kk in seq_along(NAMES)) {
[17:40:28.918]                   name <- removed[[kk]]
[17:40:28.918]                   NAME <- NAMES[[kk]]
[17:40:28.918]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.918]                     next
[17:40:28.918]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.918]                 }
[17:40:28.918]                 if (length(args) > 0) 
[17:40:28.918]                   base::do.call(base::Sys.setenv, args = args)
[17:40:28.918]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:28.918]             }
[17:40:28.918]             else {
[17:40:28.918]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:28.918]             }
[17:40:28.918]             {
[17:40:28.918]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:28.918]                   0L) {
[17:40:28.918]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:28.918]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:28.918]                   base::options(opts)
[17:40:28.918]                 }
[17:40:28.918]                 {
[17:40:28.918]                   {
[17:40:28.918]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:28.918]                     NULL
[17:40:28.918]                   }
[17:40:28.918]                   options(future.plan = NULL)
[17:40:28.918]                   if (is.na(NA_character_)) 
[17:40:28.918]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.918]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:28.918]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:40:28.918]                     envir = parent.frame()) 
[17:40:28.918]                   {
[17:40:28.918]                     default_workers <- missing(workers)
[17:40:28.918]                     if (is.function(workers)) 
[17:40:28.918]                       workers <- workers()
[17:40:28.918]                     workers <- structure(as.integer(workers), 
[17:40:28.918]                       class = class(workers))
[17:40:28.918]                     stop_if_not(is.finite(workers), workers >= 
[17:40:28.918]                       1L)
[17:40:28.918]                     if ((workers == 1L && !inherits(workers, 
[17:40:28.918]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:40:28.918]                       if (default_workers) 
[17:40:28.918]                         supportsMulticore(warn = TRUE)
[17:40:28.918]                       return(sequential(..., envir = envir))
[17:40:28.918]                     }
[17:40:28.918]                     oopts <- options(mc.cores = workers)
[17:40:28.918]                     on.exit(options(oopts))
[17:40:28.918]                     future <- MulticoreFuture(..., workers = workers, 
[17:40:28.918]                       envir = envir)
[17:40:28.918]                     if (!future$lazy) 
[17:40:28.918]                       future <- run(future)
[17:40:28.918]                     invisible(future)
[17:40:28.918]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:28.918]                 }
[17:40:28.918]             }
[17:40:28.918]         }
[17:40:28.918]     })
[17:40:28.918]     if (TRUE) {
[17:40:28.918]         base::sink(type = "output", split = FALSE)
[17:40:28.918]         if (TRUE) {
[17:40:28.918]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:28.918]         }
[17:40:28.918]         else {
[17:40:28.918]             ...future.result["stdout"] <- base::list(NULL)
[17:40:28.918]         }
[17:40:28.918]         base::close(...future.stdout)
[17:40:28.918]         ...future.stdout <- NULL
[17:40:28.918]     }
[17:40:28.918]     ...future.result$conditions <- ...future.conditions
[17:40:28.918]     ...future.result$finished <- base::Sys.time()
[17:40:28.918]     ...future.result
[17:40:28.918] }
[17:40:28.920] assign_globals() ...
[17:40:28.920] List of 5
[17:40:28.920]  $ ...future.FUN            :function (...)  
[17:40:28.920]  $ future.call.arguments    : list()
[17:40:28.920]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.920]  $ ...future.elements_ii    :List of 2
[17:40:28.920]   ..$ : int 0
[17:40:28.920]   ..$ : int 0
[17:40:28.920]  $ ...future.seeds_ii       :List of 2
[17:40:28.920]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[17:40:28.920]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[17:40:28.920]  $ ...future.globals.maxSize: NULL
[17:40:28.920]  - attr(*, "resolved")= logi FALSE
[17:40:28.920]  - attr(*, "total_size")= num 616
[17:40:28.920]  - attr(*, "where")=List of 5
[17:40:28.920]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:40:28.920]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:40:28.920]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:40:28.920]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:40:28.920]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:40:28.920]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.920]  - attr(*, "already-done")= logi TRUE
[17:40:28.928] - reassign environment for ‘...future.FUN’
[17:40:28.929] - copied ‘...future.FUN’ to environment
[17:40:28.929] - copied ‘future.call.arguments’ to environment
[17:40:28.929] - copied ‘...future.elements_ii’ to environment
[17:40:28.929] - copied ‘...future.seeds_ii’ to environment
[17:40:28.929] - copied ‘...future.globals.maxSize’ to environment
[17:40:28.929] assign_globals() ... done
[17:40:28.929] requestCore(): workers = 2
[17:40:28.931] MulticoreFuture started
[17:40:28.932] - Launch lazy future ... done
[17:40:28.932] run() for ‘MulticoreFuture’ ... done
[17:40:28.932] Created future:
[17:40:28.933] plan(): Setting new future strategy stack:
[17:40:28.933] List of future strategies:
[17:40:28.933] 1. sequential:
[17:40:28.933]    - args: function (..., envir = parent.frame())
[17:40:28.933]    - tweaked: FALSE
[17:40:28.933]    - call: NULL
[17:40:28.934] plan(): nbrOfWorkers() = 1
[17:40:28.936] plan(): Setting new future strategy stack:
[17:40:28.936] List of future strategies:
[17:40:28.936] 1. multicore:
[17:40:28.936]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:28.936]    - tweaked: FALSE
[17:40:28.936]    - call: plan(strategy)
[17:40:28.942] plan(): nbrOfWorkers() = 2
[17:40:28.933] MulticoreFuture:
[17:40:28.933] Label: ‘future_replicate-1’
[17:40:28.933] Expression:
[17:40:28.933] {
[17:40:28.933]     do.call(function(...) {
[17:40:28.933]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.933]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.933]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.933]             on.exit(options(oopts), add = TRUE)
[17:40:28.933]         }
[17:40:28.933]         {
[17:40:28.933]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.933]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.933]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.933]                   envir = globalenv(), inherits = FALSE)
[17:40:28.933]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.933]             })
[17:40:28.933]         }
[17:40:28.933]     }, args = future.call.arguments)
[17:40:28.933] }
[17:40:28.933] Lazy evaluation: FALSE
[17:40:28.933] Asynchronous evaluation: TRUE
[17:40:28.933] Local evaluation: TRUE
[17:40:28.933] Environment: R_GlobalEnv
[17:40:28.933] Capture standard output: TRUE
[17:40:28.933] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:28.933] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:28.933] Packages: <none>
[17:40:28.933] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:28.933] Resolved: TRUE
[17:40:28.933] Value: <not collected>
[17:40:28.933] Conditions captured: <none>
[17:40:28.933] Early signaling: FALSE
[17:40:28.933] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:28.933] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:28.944] Chunk #1 of 2 ... DONE
[17:40:28.944] Chunk #2 of 2 ...
[17:40:28.944]  - Finding globals in 'X' for chunk #2 ...
[17:40:28.944] getGlobalsAndPackages() ...
[17:40:28.944] Searching for globals...
[17:40:28.945] 
[17:40:28.945] Searching for globals ... DONE
[17:40:28.945] - globals: [0] <none>
[17:40:28.945] getGlobalsAndPackages() ... DONE
[17:40:28.945]    + additional globals found: [n=0] 
[17:40:28.945]    + additional namespaces needed: [n=0] 
[17:40:28.946]  - Finding globals in 'X' for chunk #2 ... DONE
[17:40:28.946]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[17:40:28.946]  - seeds: [3] <seeds>
[17:40:28.946] getGlobalsAndPackages() ...
[17:40:28.946] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.946] Resolving globals: FALSE
[17:40:28.947] Tweak future expression to call with '...' arguments ...
[17:40:28.947] {
[17:40:28.947]     do.call(function(...) {
[17:40:28.947]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.947]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.947]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.947]             on.exit(options(oopts), add = TRUE)
[17:40:28.947]         }
[17:40:28.947]         {
[17:40:28.947]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.947]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.947]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.947]                   envir = globalenv(), inherits = FALSE)
[17:40:28.947]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.947]             })
[17:40:28.947]         }
[17:40:28.947]     }, args = future.call.arguments)
[17:40:28.947] }
[17:40:28.947] Tweak future expression to call with '...' arguments ... DONE
[17:40:28.948] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:28.948] 
[17:40:28.948] getGlobalsAndPackages() ... DONE
[17:40:28.949] run() for ‘Future’ ...
[17:40:28.949] - state: ‘created’
[17:40:28.949] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:40:28.954] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:28.954] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:40:28.954]   - Field: ‘label’
[17:40:28.954]   - Field: ‘local’
[17:40:28.955]   - Field: ‘owner’
[17:40:28.955]   - Field: ‘envir’
[17:40:28.955]   - Field: ‘workers’
[17:40:28.955]   - Field: ‘packages’
[17:40:28.955]   - Field: ‘gc’
[17:40:28.955]   - Field: ‘job’
[17:40:28.955]   - Field: ‘conditions’
[17:40:28.956]   - Field: ‘expr’
[17:40:28.956]   - Field: ‘uuid’
[17:40:28.956]   - Field: ‘seed’
[17:40:28.956]   - Field: ‘version’
[17:40:28.956]   - Field: ‘result’
[17:40:28.956]   - Field: ‘asynchronous’
[17:40:28.956]   - Field: ‘calls’
[17:40:28.957]   - Field: ‘globals’
[17:40:28.957]   - Field: ‘stdout’
[17:40:28.957]   - Field: ‘earlySignal’
[17:40:28.957]   - Field: ‘lazy’
[17:40:28.957]   - Field: ‘state’
[17:40:28.957] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:40:28.957] - Launch lazy future ...
[17:40:28.958] Packages needed by the future expression (n = 0): <none>
[17:40:28.958] Packages needed by future strategies (n = 0): <none>
[17:40:28.959] {
[17:40:28.959]     {
[17:40:28.959]         {
[17:40:28.959]             ...future.startTime <- base::Sys.time()
[17:40:28.959]             {
[17:40:28.959]                 {
[17:40:28.959]                   {
[17:40:28.959]                     {
[17:40:28.959]                       base::local({
[17:40:28.959]                         has_future <- base::requireNamespace("future", 
[17:40:28.959]                           quietly = TRUE)
[17:40:28.959]                         if (has_future) {
[17:40:28.959]                           ns <- base::getNamespace("future")
[17:40:28.959]                           version <- ns[[".package"]][["version"]]
[17:40:28.959]                           if (is.null(version)) 
[17:40:28.959]                             version <- utils::packageVersion("future")
[17:40:28.959]                         }
[17:40:28.959]                         else {
[17:40:28.959]                           version <- NULL
[17:40:28.959]                         }
[17:40:28.959]                         if (!has_future || version < "1.8.0") {
[17:40:28.959]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:28.959]                             "", base::R.version$version.string), 
[17:40:28.959]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:28.959]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:28.959]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:28.959]                               "release", "version")], collapse = " "), 
[17:40:28.959]                             hostname = base::Sys.info()[["nodename"]])
[17:40:28.959]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:28.959]                             info)
[17:40:28.959]                           info <- base::paste(info, collapse = "; ")
[17:40:28.959]                           if (!has_future) {
[17:40:28.959]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:28.959]                               info)
[17:40:28.959]                           }
[17:40:28.959]                           else {
[17:40:28.959]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:28.959]                               info, version)
[17:40:28.959]                           }
[17:40:28.959]                           base::stop(msg)
[17:40:28.959]                         }
[17:40:28.959]                       })
[17:40:28.959]                     }
[17:40:28.959]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:28.959]                     base::options(mc.cores = 1L)
[17:40:28.959]                   }
[17:40:28.959]                   options(future.plan = NULL)
[17:40:28.959]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.959]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:28.959]                 }
[17:40:28.959]                 ...future.workdir <- getwd()
[17:40:28.959]             }
[17:40:28.959]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:28.959]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:28.959]         }
[17:40:28.959]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:28.959]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[17:40:28.959]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:28.959]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:28.959]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:28.959]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:28.959]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:28.959]             base::names(...future.oldOptions))
[17:40:28.959]     }
[17:40:28.959]     if (FALSE) {
[17:40:28.959]     }
[17:40:28.959]     else {
[17:40:28.959]         if (TRUE) {
[17:40:28.959]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:28.959]                 open = "w")
[17:40:28.959]         }
[17:40:28.959]         else {
[17:40:28.959]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:28.959]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:28.959]         }
[17:40:28.959]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:28.959]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:28.959]             base::sink(type = "output", split = FALSE)
[17:40:28.959]             base::close(...future.stdout)
[17:40:28.959]         }, add = TRUE)
[17:40:28.959]     }
[17:40:28.959]     ...future.frame <- base::sys.nframe()
[17:40:28.959]     ...future.conditions <- base::list()
[17:40:28.959]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:28.959]     if (FALSE) {
[17:40:28.959]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:28.959]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:28.959]     }
[17:40:28.959]     ...future.result <- base::tryCatch({
[17:40:28.959]         base::withCallingHandlers({
[17:40:28.959]             ...future.value <- base::withVisible(base::local({
[17:40:28.959]                 withCallingHandlers({
[17:40:28.959]                   {
[17:40:28.959]                     do.call(function(...) {
[17:40:28.959]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.959]                       if (!identical(...future.globals.maxSize.org, 
[17:40:28.959]                         ...future.globals.maxSize)) {
[17:40:28.959]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.959]                         on.exit(options(oopts), add = TRUE)
[17:40:28.959]                       }
[17:40:28.959]                       {
[17:40:28.959]                         lapply(seq_along(...future.elements_ii), 
[17:40:28.959]                           FUN = function(jj) {
[17:40:28.959]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.959]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.959]                               envir = globalenv(), inherits = FALSE)
[17:40:28.959]                             ...future.FUN(...future.X_jj, ...)
[17:40:28.959]                           })
[17:40:28.959]                       }
[17:40:28.959]                     }, args = future.call.arguments)
[17:40:28.959]                   }
[17:40:28.959]                 }, immediateCondition = function(cond) {
[17:40:28.959]                   save_rds <- function (object, pathname, ...) 
[17:40:28.959]                   {
[17:40:28.959]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:28.959]                     if (file_test("-f", pathname_tmp)) {
[17:40:28.959]                       fi_tmp <- file.info(pathname_tmp)
[17:40:28.959]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:28.959]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:28.959]                         fi_tmp[["mtime"]])
[17:40:28.959]                     }
[17:40:28.959]                     tryCatch({
[17:40:28.959]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:28.959]                     }, error = function(ex) {
[17:40:28.959]                       msg <- conditionMessage(ex)
[17:40:28.959]                       fi_tmp <- file.info(pathname_tmp)
[17:40:28.959]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:28.959]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:28.959]                         fi_tmp[["mtime"]], msg)
[17:40:28.959]                       ex$message <- msg
[17:40:28.959]                       stop(ex)
[17:40:28.959]                     })
[17:40:28.959]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:28.959]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:28.959]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:28.959]                       fi_tmp <- file.info(pathname_tmp)
[17:40:28.959]                       fi <- file.info(pathname)
[17:40:28.959]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:28.959]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:28.959]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:28.959]                         fi[["size"]], fi[["mtime"]])
[17:40:28.959]                       stop(msg)
[17:40:28.959]                     }
[17:40:28.959]                     invisible(pathname)
[17:40:28.959]                   }
[17:40:28.959]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:28.959]                     rootPath = tempdir()) 
[17:40:28.959]                   {
[17:40:28.959]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:28.959]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:28.959]                       tmpdir = path, fileext = ".rds")
[17:40:28.959]                     save_rds(obj, file)
[17:40:28.959]                   }
[17:40:28.959]                   saveImmediateCondition(cond, path = "/tmp/RtmpYOEZWb/.future/immediateConditions")
[17:40:28.959]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.959]                   {
[17:40:28.959]                     inherits <- base::inherits
[17:40:28.959]                     invokeRestart <- base::invokeRestart
[17:40:28.959]                     is.null <- base::is.null
[17:40:28.959]                     muffled <- FALSE
[17:40:28.959]                     if (inherits(cond, "message")) {
[17:40:28.959]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:28.959]                       if (muffled) 
[17:40:28.959]                         invokeRestart("muffleMessage")
[17:40:28.959]                     }
[17:40:28.959]                     else if (inherits(cond, "warning")) {
[17:40:28.959]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:28.959]                       if (muffled) 
[17:40:28.959]                         invokeRestart("muffleWarning")
[17:40:28.959]                     }
[17:40:28.959]                     else if (inherits(cond, "condition")) {
[17:40:28.959]                       if (!is.null(pattern)) {
[17:40:28.959]                         computeRestarts <- base::computeRestarts
[17:40:28.959]                         grepl <- base::grepl
[17:40:28.959]                         restarts <- computeRestarts(cond)
[17:40:28.959]                         for (restart in restarts) {
[17:40:28.959]                           name <- restart$name
[17:40:28.959]                           if (is.null(name)) 
[17:40:28.959]                             next
[17:40:28.959]                           if (!grepl(pattern, name)) 
[17:40:28.959]                             next
[17:40:28.959]                           invokeRestart(restart)
[17:40:28.959]                           muffled <- TRUE
[17:40:28.959]                           break
[17:40:28.959]                         }
[17:40:28.959]                       }
[17:40:28.959]                     }
[17:40:28.959]                     invisible(muffled)
[17:40:28.959]                   }
[17:40:28.959]                   muffleCondition(cond)
[17:40:28.959]                 })
[17:40:28.959]             }))
[17:40:28.959]             future::FutureResult(value = ...future.value$value, 
[17:40:28.959]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.959]                   ...future.rng), globalenv = if (FALSE) 
[17:40:28.959]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:28.959]                     ...future.globalenv.names))
[17:40:28.959]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:28.959]         }, condition = base::local({
[17:40:28.959]             c <- base::c
[17:40:28.959]             inherits <- base::inherits
[17:40:28.959]             invokeRestart <- base::invokeRestart
[17:40:28.959]             length <- base::length
[17:40:28.959]             list <- base::list
[17:40:28.959]             seq.int <- base::seq.int
[17:40:28.959]             signalCondition <- base::signalCondition
[17:40:28.959]             sys.calls <- base::sys.calls
[17:40:28.959]             `[[` <- base::`[[`
[17:40:28.959]             `+` <- base::`+`
[17:40:28.959]             `<<-` <- base::`<<-`
[17:40:28.959]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:28.959]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:28.959]                   3L)]
[17:40:28.959]             }
[17:40:28.959]             function(cond) {
[17:40:28.959]                 is_error <- inherits(cond, "error")
[17:40:28.959]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:28.959]                   NULL)
[17:40:28.959]                 if (is_error) {
[17:40:28.959]                   sessionInformation <- function() {
[17:40:28.959]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:28.959]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:28.959]                       search = base::search(), system = base::Sys.info())
[17:40:28.959]                   }
[17:40:28.959]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.959]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:28.959]                     cond$call), session = sessionInformation(), 
[17:40:28.959]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:28.959]                   signalCondition(cond)
[17:40:28.959]                 }
[17:40:28.959]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:28.959]                 "immediateCondition"))) {
[17:40:28.959]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:28.959]                   ...future.conditions[[length(...future.conditions) + 
[17:40:28.959]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:28.959]                   if (TRUE && !signal) {
[17:40:28.959]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.959]                     {
[17:40:28.959]                       inherits <- base::inherits
[17:40:28.959]                       invokeRestart <- base::invokeRestart
[17:40:28.959]                       is.null <- base::is.null
[17:40:28.959]                       muffled <- FALSE
[17:40:28.959]                       if (inherits(cond, "message")) {
[17:40:28.959]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.959]                         if (muffled) 
[17:40:28.959]                           invokeRestart("muffleMessage")
[17:40:28.959]                       }
[17:40:28.959]                       else if (inherits(cond, "warning")) {
[17:40:28.959]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.959]                         if (muffled) 
[17:40:28.959]                           invokeRestart("muffleWarning")
[17:40:28.959]                       }
[17:40:28.959]                       else if (inherits(cond, "condition")) {
[17:40:28.959]                         if (!is.null(pattern)) {
[17:40:28.959]                           computeRestarts <- base::computeRestarts
[17:40:28.959]                           grepl <- base::grepl
[17:40:28.959]                           restarts <- computeRestarts(cond)
[17:40:28.959]                           for (restart in restarts) {
[17:40:28.959]                             name <- restart$name
[17:40:28.959]                             if (is.null(name)) 
[17:40:28.959]                               next
[17:40:28.959]                             if (!grepl(pattern, name)) 
[17:40:28.959]                               next
[17:40:28.959]                             invokeRestart(restart)
[17:40:28.959]                             muffled <- TRUE
[17:40:28.959]                             break
[17:40:28.959]                           }
[17:40:28.959]                         }
[17:40:28.959]                       }
[17:40:28.959]                       invisible(muffled)
[17:40:28.959]                     }
[17:40:28.959]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.959]                   }
[17:40:28.959]                 }
[17:40:28.959]                 else {
[17:40:28.959]                   if (TRUE) {
[17:40:28.959]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:28.959]                     {
[17:40:28.959]                       inherits <- base::inherits
[17:40:28.959]                       invokeRestart <- base::invokeRestart
[17:40:28.959]                       is.null <- base::is.null
[17:40:28.959]                       muffled <- FALSE
[17:40:28.959]                       if (inherits(cond, "message")) {
[17:40:28.959]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:28.959]                         if (muffled) 
[17:40:28.959]                           invokeRestart("muffleMessage")
[17:40:28.959]                       }
[17:40:28.959]                       else if (inherits(cond, "warning")) {
[17:40:28.959]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:28.959]                         if (muffled) 
[17:40:28.959]                           invokeRestart("muffleWarning")
[17:40:28.959]                       }
[17:40:28.959]                       else if (inherits(cond, "condition")) {
[17:40:28.959]                         if (!is.null(pattern)) {
[17:40:28.959]                           computeRestarts <- base::computeRestarts
[17:40:28.959]                           grepl <- base::grepl
[17:40:28.959]                           restarts <- computeRestarts(cond)
[17:40:28.959]                           for (restart in restarts) {
[17:40:28.959]                             name <- restart$name
[17:40:28.959]                             if (is.null(name)) 
[17:40:28.959]                               next
[17:40:28.959]                             if (!grepl(pattern, name)) 
[17:40:28.959]                               next
[17:40:28.959]                             invokeRestart(restart)
[17:40:28.959]                             muffled <- TRUE
[17:40:28.959]                             break
[17:40:28.959]                           }
[17:40:28.959]                         }
[17:40:28.959]                       }
[17:40:28.959]                       invisible(muffled)
[17:40:28.959]                     }
[17:40:28.959]                     muffleCondition(cond, pattern = "^muffle")
[17:40:28.959]                   }
[17:40:28.959]                 }
[17:40:28.959]             }
[17:40:28.959]         }))
[17:40:28.959]     }, error = function(ex) {
[17:40:28.959]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:28.959]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:28.959]                 ...future.rng), started = ...future.startTime, 
[17:40:28.959]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:28.959]             version = "1.8"), class = "FutureResult")
[17:40:28.959]     }, finally = {
[17:40:28.959]         if (!identical(...future.workdir, getwd())) 
[17:40:28.959]             setwd(...future.workdir)
[17:40:28.959]         {
[17:40:28.959]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:28.959]                 ...future.oldOptions$nwarnings <- NULL
[17:40:28.959]             }
[17:40:28.959]             base::options(...future.oldOptions)
[17:40:28.959]             if (.Platform$OS.type == "windows") {
[17:40:28.959]                 old_names <- names(...future.oldEnvVars)
[17:40:28.959]                 envs <- base::Sys.getenv()
[17:40:28.959]                 names <- names(envs)
[17:40:28.959]                 common <- intersect(names, old_names)
[17:40:28.959]                 added <- setdiff(names, old_names)
[17:40:28.959]                 removed <- setdiff(old_names, names)
[17:40:28.959]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:28.959]                   envs[common]]
[17:40:28.959]                 NAMES <- toupper(changed)
[17:40:28.959]                 args <- list()
[17:40:28.959]                 for (kk in seq_along(NAMES)) {
[17:40:28.959]                   name <- changed[[kk]]
[17:40:28.959]                   NAME <- NAMES[[kk]]
[17:40:28.959]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.959]                     next
[17:40:28.959]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.959]                 }
[17:40:28.959]                 NAMES <- toupper(added)
[17:40:28.959]                 for (kk in seq_along(NAMES)) {
[17:40:28.959]                   name <- added[[kk]]
[17:40:28.959]                   NAME <- NAMES[[kk]]
[17:40:28.959]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.959]                     next
[17:40:28.959]                   args[[name]] <- ""
[17:40:28.959]                 }
[17:40:28.959]                 NAMES <- toupper(removed)
[17:40:28.959]                 for (kk in seq_along(NAMES)) {
[17:40:28.959]                   name <- removed[[kk]]
[17:40:28.959]                   NAME <- NAMES[[kk]]
[17:40:28.959]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:28.959]                     next
[17:40:28.959]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:28.959]                 }
[17:40:28.959]                 if (length(args) > 0) 
[17:40:28.959]                   base::do.call(base::Sys.setenv, args = args)
[17:40:28.959]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:28.959]             }
[17:40:28.959]             else {
[17:40:28.959]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:28.959]             }
[17:40:28.959]             {
[17:40:28.959]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:28.959]                   0L) {
[17:40:28.959]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:28.959]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:28.959]                   base::options(opts)
[17:40:28.959]                 }
[17:40:28.959]                 {
[17:40:28.959]                   {
[17:40:28.959]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:28.959]                     NULL
[17:40:28.959]                   }
[17:40:28.959]                   options(future.plan = NULL)
[17:40:28.959]                   if (is.na(NA_character_)) 
[17:40:28.959]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:28.959]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:28.959]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:40:28.959]                     envir = parent.frame()) 
[17:40:28.959]                   {
[17:40:28.959]                     default_workers <- missing(workers)
[17:40:28.959]                     if (is.function(workers)) 
[17:40:28.959]                       workers <- workers()
[17:40:28.959]                     workers <- structure(as.integer(workers), 
[17:40:28.959]                       class = class(workers))
[17:40:28.959]                     stop_if_not(is.finite(workers), workers >= 
[17:40:28.959]                       1L)
[17:40:28.959]                     if ((workers == 1L && !inherits(workers, 
[17:40:28.959]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:40:28.959]                       if (default_workers) 
[17:40:28.959]                         supportsMulticore(warn = TRUE)
[17:40:28.959]                       return(sequential(..., envir = envir))
[17:40:28.959]                     }
[17:40:28.959]                     oopts <- options(mc.cores = workers)
[17:40:28.959]                     on.exit(options(oopts))
[17:40:28.959]                     future <- MulticoreFuture(..., workers = workers, 
[17:40:28.959]                       envir = envir)
[17:40:28.959]                     if (!future$lazy) 
[17:40:28.959]                       future <- run(future)
[17:40:28.959]                     invisible(future)
[17:40:28.959]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:28.959]                 }
[17:40:28.959]             }
[17:40:28.959]         }
[17:40:28.959]     })
[17:40:28.959]     if (TRUE) {
[17:40:28.959]         base::sink(type = "output", split = FALSE)
[17:40:28.959]         if (TRUE) {
[17:40:28.959]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:28.959]         }
[17:40:28.959]         else {
[17:40:28.959]             ...future.result["stdout"] <- base::list(NULL)
[17:40:28.959]         }
[17:40:28.959]         base::close(...future.stdout)
[17:40:28.959]         ...future.stdout <- NULL
[17:40:28.959]     }
[17:40:28.959]     ...future.result$conditions <- ...future.conditions
[17:40:28.959]     ...future.result$finished <- base::Sys.time()
[17:40:28.959]     ...future.result
[17:40:28.959] }
[17:40:28.962] assign_globals() ...
[17:40:28.962] List of 5
[17:40:28.962]  $ ...future.FUN            :function (...)  
[17:40:28.962]  $ future.call.arguments    : list()
[17:40:28.962]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:28.962]  $ ...future.elements_ii    :List of 3
[17:40:28.962]   ..$ : int 0
[17:40:28.962]   ..$ : int 0
[17:40:28.962]   ..$ : int 0
[17:40:28.962]  $ ...future.seeds_ii       :List of 3
[17:40:28.962]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[17:40:28.962]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[17:40:28.962]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[17:40:28.962]  $ ...future.globals.maxSize: NULL
[17:40:28.962]  - attr(*, "resolved")= logi FALSE
[17:40:28.962]  - attr(*, "total_size")= num 616
[17:40:28.962]  - attr(*, "where")=List of 5
[17:40:28.962]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:40:28.962]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:40:28.962]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:40:28.962]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:40:28.962]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:40:28.962]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:28.962]  - attr(*, "already-done")= logi TRUE
[17:40:28.972] - reassign environment for ‘...future.FUN’
[17:40:28.972] - copied ‘...future.FUN’ to environment
[17:40:28.972] - copied ‘future.call.arguments’ to environment
[17:40:28.972] - copied ‘...future.elements_ii’ to environment
[17:40:28.973] - copied ‘...future.seeds_ii’ to environment
[17:40:28.973] - copied ‘...future.globals.maxSize’ to environment
[17:40:28.973] assign_globals() ... done
[17:40:28.973] requestCore(): workers = 2
[17:40:28.975] MulticoreFuture started
[17:40:28.976] - Launch lazy future ... done
[17:40:28.976] run() for ‘MulticoreFuture’ ... done
[17:40:28.976] Created future:
[17:40:28.976] plan(): Setting new future strategy stack:
[17:40:28.977] List of future strategies:
[17:40:28.977] 1. sequential:
[17:40:28.977]    - args: function (..., envir = parent.frame())
[17:40:28.977]    - tweaked: FALSE
[17:40:28.977]    - call: NULL
[17:40:29.022] plan(): nbrOfWorkers() = 1
[17:40:29.023] plan(): Setting new future strategy stack:
[17:40:29.024] List of future strategies:
[17:40:29.024] 1. multicore:
[17:40:29.024]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:29.024]    - tweaked: FALSE
[17:40:29.024]    - call: plan(strategy)
[17:40:29.028] plan(): nbrOfWorkers() = 2
[17:40:28.976] MulticoreFuture:
[17:40:28.976] Label: ‘future_replicate-2’
[17:40:28.976] Expression:
[17:40:28.976] {
[17:40:28.976]     do.call(function(...) {
[17:40:28.976]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:28.976]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:28.976]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:28.976]             on.exit(options(oopts), add = TRUE)
[17:40:28.976]         }
[17:40:28.976]         {
[17:40:28.976]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:28.976]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:28.976]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:28.976]                   envir = globalenv(), inherits = FALSE)
[17:40:28.976]                 ...future.FUN(...future.X_jj, ...)
[17:40:28.976]             })
[17:40:28.976]         }
[17:40:28.976]     }, args = future.call.arguments)
[17:40:28.976] }
[17:40:28.976] Lazy evaluation: FALSE
[17:40:28.976] Asynchronous evaluation: TRUE
[17:40:28.976] Local evaluation: TRUE
[17:40:28.976] Environment: R_GlobalEnv
[17:40:28.976] Capture standard output: TRUE
[17:40:28.976] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:28.976] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:28.976] Packages: <none>
[17:40:28.976] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:28.976] Resolved: TRUE
[17:40:28.976] Value: <not collected>
[17:40:28.976] Conditions captured: <none>
[17:40:28.976] Early signaling: FALSE
[17:40:28.976] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:28.976] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:29.029] Chunk #2 of 2 ... DONE
[17:40:29.029] Launching 2 futures (chunks) ... DONE
[17:40:29.029] Resolving 2 futures (chunks) ...
[17:40:29.029] resolve() on list ...
[17:40:29.029]  recursive: 0
[17:40:29.030]  length: 2
[17:40:29.030] 
[17:40:29.030] Future #1
[17:40:29.031] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:40:29.031] - nx: 2
[17:40:29.031] - relay: TRUE
[17:40:29.031] - stdout: TRUE
[17:40:29.032] - signal: TRUE
[17:40:29.032] - resignal: FALSE
[17:40:29.032] - force: TRUE
[17:40:29.032] - relayed: [n=2] FALSE, FALSE
[17:40:29.032] - queued futures: [n=2] FALSE, FALSE
[17:40:29.032]  - until=1
[17:40:29.033]  - relaying element #1
[17:40:29.033] - relayed: [n=2] TRUE, FALSE
[17:40:29.033] - queued futures: [n=2] TRUE, FALSE
[17:40:29.033] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:40:29.033]  length: 1 (resolved future 1)
[17:40:29.034] Future #2
[17:40:29.034] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:40:29.035] - nx: 2
[17:40:29.035] - relay: TRUE
[17:40:29.035] - stdout: TRUE
[17:40:29.035] - signal: TRUE
[17:40:29.035] - resignal: FALSE
[17:40:29.035] - force: TRUE
[17:40:29.035] - relayed: [n=2] TRUE, FALSE
[17:40:29.035] - queued futures: [n=2] TRUE, FALSE
[17:40:29.036]  - until=2
[17:40:29.036]  - relaying element #2
[17:40:29.036] - relayed: [n=2] TRUE, TRUE
[17:40:29.036] - queued futures: [n=2] TRUE, TRUE
[17:40:29.036] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:40:29.036]  length: 0 (resolved future 2)
[17:40:29.037] Relaying remaining futures
[17:40:29.037] signalConditionsASAP(NULL, pos=0) ...
[17:40:29.037] - nx: 2
[17:40:29.037] - relay: TRUE
[17:40:29.037] - stdout: TRUE
[17:40:29.037] - signal: TRUE
[17:40:29.037] - resignal: FALSE
[17:40:29.037] - force: TRUE
[17:40:29.037] - relayed: [n=2] TRUE, TRUE
[17:40:29.037] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:40:29.038] - relayed: [n=2] TRUE, TRUE
[17:40:29.038] - queued futures: [n=2] TRUE, TRUE
[17:40:29.038] signalConditionsASAP(NULL, pos=0) ... done
[17:40:29.038] resolve() on list ... DONE
[17:40:29.038]  - Number of value chunks collected: 2
[17:40:29.038] Resolving 2 futures (chunks) ... DONE
[17:40:29.038] Reducing values from 2 chunks ...
[17:40:29.038]  - Number of values collected after concatenation: 5
[17:40:29.039]  - Number of values expected: 5
[17:40:29.039] Reducing values from 2 chunks ... DONE
[17:40:29.039] future_lapply() ... DONE
[17:40:29.039] future_lapply() ...
[17:40:29.039] Generating random seeds ...
[17:40:29.040] Generating random seed streams for 5 elements ...
[17:40:29.040] Generating random seed streams for 5 elements ... DONE
[17:40:29.040] Generating random seeds ... DONE
[17:40:29.040] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:40:29.044] Number of chunks: 2
[17:40:29.044] getGlobalsAndPackagesXApply() ...
[17:40:29.044]  - future.globals: TRUE
[17:40:29.044] getGlobalsAndPackages() ...
[17:40:29.045] Searching for globals...
[17:40:29.046] - globals found: [2] ‘FUN’, ‘sample’
[17:40:29.046] Searching for globals ... DONE
[17:40:29.046] Resolving globals: FALSE
[17:40:29.046] The total size of the 1 globals is 616 bytes (616 bytes)
[17:40:29.047] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:40:29.047] - globals: [1] ‘FUN’
[17:40:29.047] 
[17:40:29.047] getGlobalsAndPackages() ... DONE
[17:40:29.047]  - globals found/used: [n=1] ‘FUN’
[17:40:29.047]  - needed namespaces: [n=0] 
[17:40:29.047] Finding globals ... DONE
[17:40:29.047]  - use_args: TRUE
[17:40:29.047]  - Getting '...' globals ...
[17:40:29.048] resolve() on list ...
[17:40:29.048]  recursive: 0
[17:40:29.048]  length: 1
[17:40:29.048]  elements: ‘...’
[17:40:29.048]  length: 0 (resolved future 1)
[17:40:29.048] resolve() on list ... DONE
[17:40:29.048]    - '...' content: [n=0] 
[17:40:29.049] List of 1
[17:40:29.049]  $ ...: list()
[17:40:29.049]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:29.049]  - attr(*, "where")=List of 1
[17:40:29.049]   ..$ ...:<environment: 0x558a3ab14fc8> 
[17:40:29.049]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:29.049]  - attr(*, "resolved")= logi TRUE
[17:40:29.049]  - attr(*, "total_size")= num NA
[17:40:29.051]  - Getting '...' globals ... DONE
[17:40:29.051] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:40:29.052] List of 2
[17:40:29.052]  $ ...future.FUN:function (...)  
[17:40:29.052]  $ ...          : list()
[17:40:29.052]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:29.052]  - attr(*, "where")=List of 2
[17:40:29.052]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:40:29.052]   ..$ ...          :<environment: 0x558a3ab14fc8> 
[17:40:29.052]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:29.052]  - attr(*, "resolved")= logi FALSE
[17:40:29.052]  - attr(*, "total_size")= num 616
[17:40:29.054] Packages to be attached in all futures: [n=0] 
[17:40:29.054] getGlobalsAndPackagesXApply() ... DONE
[17:40:29.055] Number of futures (= number of chunks): 2
[17:40:29.055] Launching 2 futures (chunks) ...
[17:40:29.055] Chunk #1 of 2 ...
[17:40:29.055]  - Finding globals in 'X' for chunk #1 ...
[17:40:29.055] getGlobalsAndPackages() ...
[17:40:29.055] Searching for globals...
[17:40:29.055] 
[17:40:29.056] Searching for globals ... DONE
[17:40:29.056] - globals: [0] <none>
[17:40:29.056] getGlobalsAndPackages() ... DONE
[17:40:29.056]    + additional globals found: [n=0] 
[17:40:29.056]    + additional namespaces needed: [n=0] 
[17:40:29.056]  - Finding globals in 'X' for chunk #1 ... DONE
[17:40:29.056]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:40:29.056]  - seeds: [2] <seeds>
[17:40:29.056] getGlobalsAndPackages() ...
[17:40:29.056] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:29.057] Resolving globals: FALSE
[17:40:29.057] Tweak future expression to call with '...' arguments ...
[17:40:29.057] {
[17:40:29.057]     do.call(function(...) {
[17:40:29.057]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:29.057]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:29.057]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:29.057]             on.exit(options(oopts), add = TRUE)
[17:40:29.057]         }
[17:40:29.057]         {
[17:40:29.057]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:29.057]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:29.057]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:29.057]                   envir = globalenv(), inherits = FALSE)
[17:40:29.057]                 ...future.FUN(...future.X_jj, ...)
[17:40:29.057]             })
[17:40:29.057]         }
[17:40:29.057]     }, args = future.call.arguments)
[17:40:29.057] }
[17:40:29.057] Tweak future expression to call with '...' arguments ... DONE
[17:40:29.059] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:29.059] 
[17:40:29.059] getGlobalsAndPackages() ... DONE
[17:40:29.060] run() for ‘Future’ ...
[17:40:29.060] - state: ‘created’
[17:40:29.060] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:40:29.064] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:29.064] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:40:29.064]   - Field: ‘label’
[17:40:29.064]   - Field: ‘local’
[17:40:29.064]   - Field: ‘owner’
[17:40:29.065]   - Field: ‘envir’
[17:40:29.065]   - Field: ‘workers’
[17:40:29.065]   - Field: ‘packages’
[17:40:29.065]   - Field: ‘gc’
[17:40:29.065]   - Field: ‘job’
[17:40:29.065]   - Field: ‘conditions’
[17:40:29.065]   - Field: ‘expr’
[17:40:29.065]   - Field: ‘uuid’
[17:40:29.065]   - Field: ‘seed’
[17:40:29.066]   - Field: ‘version’
[17:40:29.066]   - Field: ‘result’
[17:40:29.066]   - Field: ‘asynchronous’
[17:40:29.066]   - Field: ‘calls’
[17:40:29.066]   - Field: ‘globals’
[17:40:29.066]   - Field: ‘stdout’
[17:40:29.066]   - Field: ‘earlySignal’
[17:40:29.066]   - Field: ‘lazy’
[17:40:29.066]   - Field: ‘state’
[17:40:29.066] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:40:29.066] - Launch lazy future ...
[17:40:29.067] Packages needed by the future expression (n = 0): <none>
[17:40:29.067] Packages needed by future strategies (n = 0): <none>
[17:40:29.067] {
[17:40:29.067]     {
[17:40:29.067]         {
[17:40:29.067]             ...future.startTime <- base::Sys.time()
[17:40:29.067]             {
[17:40:29.067]                 {
[17:40:29.067]                   {
[17:40:29.067]                     {
[17:40:29.067]                       base::local({
[17:40:29.067]                         has_future <- base::requireNamespace("future", 
[17:40:29.067]                           quietly = TRUE)
[17:40:29.067]                         if (has_future) {
[17:40:29.067]                           ns <- base::getNamespace("future")
[17:40:29.067]                           version <- ns[[".package"]][["version"]]
[17:40:29.067]                           if (is.null(version)) 
[17:40:29.067]                             version <- utils::packageVersion("future")
[17:40:29.067]                         }
[17:40:29.067]                         else {
[17:40:29.067]                           version <- NULL
[17:40:29.067]                         }
[17:40:29.067]                         if (!has_future || version < "1.8.0") {
[17:40:29.067]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:29.067]                             "", base::R.version$version.string), 
[17:40:29.067]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:29.067]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:29.067]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:29.067]                               "release", "version")], collapse = " "), 
[17:40:29.067]                             hostname = base::Sys.info()[["nodename"]])
[17:40:29.067]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:29.067]                             info)
[17:40:29.067]                           info <- base::paste(info, collapse = "; ")
[17:40:29.067]                           if (!has_future) {
[17:40:29.067]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:29.067]                               info)
[17:40:29.067]                           }
[17:40:29.067]                           else {
[17:40:29.067]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:29.067]                               info, version)
[17:40:29.067]                           }
[17:40:29.067]                           base::stop(msg)
[17:40:29.067]                         }
[17:40:29.067]                       })
[17:40:29.067]                     }
[17:40:29.067]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:29.067]                     base::options(mc.cores = 1L)
[17:40:29.067]                   }
[17:40:29.067]                   options(future.plan = NULL)
[17:40:29.067]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:29.067]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:29.067]                 }
[17:40:29.067]                 ...future.workdir <- getwd()
[17:40:29.067]             }
[17:40:29.067]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:29.067]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:29.067]         }
[17:40:29.067]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:29.067]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:40:29.067]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:29.067]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:29.067]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:29.067]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:29.067]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:29.067]             base::names(...future.oldOptions))
[17:40:29.067]     }
[17:40:29.067]     if (FALSE) {
[17:40:29.067]     }
[17:40:29.067]     else {
[17:40:29.067]         if (TRUE) {
[17:40:29.067]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:29.067]                 open = "w")
[17:40:29.067]         }
[17:40:29.067]         else {
[17:40:29.067]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:29.067]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:29.067]         }
[17:40:29.067]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:29.067]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:29.067]             base::sink(type = "output", split = FALSE)
[17:40:29.067]             base::close(...future.stdout)
[17:40:29.067]         }, add = TRUE)
[17:40:29.067]     }
[17:40:29.067]     ...future.frame <- base::sys.nframe()
[17:40:29.067]     ...future.conditions <- base::list()
[17:40:29.067]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:29.067]     if (FALSE) {
[17:40:29.067]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:29.067]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:29.067]     }
[17:40:29.067]     ...future.result <- base::tryCatch({
[17:40:29.067]         base::withCallingHandlers({
[17:40:29.067]             ...future.value <- base::withVisible(base::local({
[17:40:29.067]                 withCallingHandlers({
[17:40:29.067]                   {
[17:40:29.067]                     do.call(function(...) {
[17:40:29.067]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:29.067]                       if (!identical(...future.globals.maxSize.org, 
[17:40:29.067]                         ...future.globals.maxSize)) {
[17:40:29.067]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:29.067]                         on.exit(options(oopts), add = TRUE)
[17:40:29.067]                       }
[17:40:29.067]                       {
[17:40:29.067]                         lapply(seq_along(...future.elements_ii), 
[17:40:29.067]                           FUN = function(jj) {
[17:40:29.067]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:29.067]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:29.067]                               envir = globalenv(), inherits = FALSE)
[17:40:29.067]                             ...future.FUN(...future.X_jj, ...)
[17:40:29.067]                           })
[17:40:29.067]                       }
[17:40:29.067]                     }, args = future.call.arguments)
[17:40:29.067]                   }
[17:40:29.067]                 }, immediateCondition = function(cond) {
[17:40:29.067]                   save_rds <- function (object, pathname, ...) 
[17:40:29.067]                   {
[17:40:29.067]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:29.067]                     if (file_test("-f", pathname_tmp)) {
[17:40:29.067]                       fi_tmp <- file.info(pathname_tmp)
[17:40:29.067]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:29.067]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:29.067]                         fi_tmp[["mtime"]])
[17:40:29.067]                     }
[17:40:29.067]                     tryCatch({
[17:40:29.067]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:29.067]                     }, error = function(ex) {
[17:40:29.067]                       msg <- conditionMessage(ex)
[17:40:29.067]                       fi_tmp <- file.info(pathname_tmp)
[17:40:29.067]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:29.067]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:29.067]                         fi_tmp[["mtime"]], msg)
[17:40:29.067]                       ex$message <- msg
[17:40:29.067]                       stop(ex)
[17:40:29.067]                     })
[17:40:29.067]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:29.067]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:29.067]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:29.067]                       fi_tmp <- file.info(pathname_tmp)
[17:40:29.067]                       fi <- file.info(pathname)
[17:40:29.067]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:29.067]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:29.067]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:29.067]                         fi[["size"]], fi[["mtime"]])
[17:40:29.067]                       stop(msg)
[17:40:29.067]                     }
[17:40:29.067]                     invisible(pathname)
[17:40:29.067]                   }
[17:40:29.067]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:29.067]                     rootPath = tempdir()) 
[17:40:29.067]                   {
[17:40:29.067]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:29.067]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:29.067]                       tmpdir = path, fileext = ".rds")
[17:40:29.067]                     save_rds(obj, file)
[17:40:29.067]                   }
[17:40:29.067]                   saveImmediateCondition(cond, path = "/tmp/RtmpYOEZWb/.future/immediateConditions")
[17:40:29.067]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:29.067]                   {
[17:40:29.067]                     inherits <- base::inherits
[17:40:29.067]                     invokeRestart <- base::invokeRestart
[17:40:29.067]                     is.null <- base::is.null
[17:40:29.067]                     muffled <- FALSE
[17:40:29.067]                     if (inherits(cond, "message")) {
[17:40:29.067]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:29.067]                       if (muffled) 
[17:40:29.067]                         invokeRestart("muffleMessage")
[17:40:29.067]                     }
[17:40:29.067]                     else if (inherits(cond, "warning")) {
[17:40:29.067]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:29.067]                       if (muffled) 
[17:40:29.067]                         invokeRestart("muffleWarning")
[17:40:29.067]                     }
[17:40:29.067]                     else if (inherits(cond, "condition")) {
[17:40:29.067]                       if (!is.null(pattern)) {
[17:40:29.067]                         computeRestarts <- base::computeRestarts
[17:40:29.067]                         grepl <- base::grepl
[17:40:29.067]                         restarts <- computeRestarts(cond)
[17:40:29.067]                         for (restart in restarts) {
[17:40:29.067]                           name <- restart$name
[17:40:29.067]                           if (is.null(name)) 
[17:40:29.067]                             next
[17:40:29.067]                           if (!grepl(pattern, name)) 
[17:40:29.067]                             next
[17:40:29.067]                           invokeRestart(restart)
[17:40:29.067]                           muffled <- TRUE
[17:40:29.067]                           break
[17:40:29.067]                         }
[17:40:29.067]                       }
[17:40:29.067]                     }
[17:40:29.067]                     invisible(muffled)
[17:40:29.067]                   }
[17:40:29.067]                   muffleCondition(cond)
[17:40:29.067]                 })
[17:40:29.067]             }))
[17:40:29.067]             future::FutureResult(value = ...future.value$value, 
[17:40:29.067]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:29.067]                   ...future.rng), globalenv = if (FALSE) 
[17:40:29.067]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:29.067]                     ...future.globalenv.names))
[17:40:29.067]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:29.067]         }, condition = base::local({
[17:40:29.067]             c <- base::c
[17:40:29.067]             inherits <- base::inherits
[17:40:29.067]             invokeRestart <- base::invokeRestart
[17:40:29.067]             length <- base::length
[17:40:29.067]             list <- base::list
[17:40:29.067]             seq.int <- base::seq.int
[17:40:29.067]             signalCondition <- base::signalCondition
[17:40:29.067]             sys.calls <- base::sys.calls
[17:40:29.067]             `[[` <- base::`[[`
[17:40:29.067]             `+` <- base::`+`
[17:40:29.067]             `<<-` <- base::`<<-`
[17:40:29.067]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:29.067]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:29.067]                   3L)]
[17:40:29.067]             }
[17:40:29.067]             function(cond) {
[17:40:29.067]                 is_error <- inherits(cond, "error")
[17:40:29.067]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:29.067]                   NULL)
[17:40:29.067]                 if (is_error) {
[17:40:29.067]                   sessionInformation <- function() {
[17:40:29.067]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:29.067]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:29.067]                       search = base::search(), system = base::Sys.info())
[17:40:29.067]                   }
[17:40:29.067]                   ...future.conditions[[length(...future.conditions) + 
[17:40:29.067]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:29.067]                     cond$call), session = sessionInformation(), 
[17:40:29.067]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:29.067]                   signalCondition(cond)
[17:40:29.067]                 }
[17:40:29.067]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:29.067]                 "immediateCondition"))) {
[17:40:29.067]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:29.067]                   ...future.conditions[[length(...future.conditions) + 
[17:40:29.067]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:29.067]                   if (TRUE && !signal) {
[17:40:29.067]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:29.067]                     {
[17:40:29.067]                       inherits <- base::inherits
[17:40:29.067]                       invokeRestart <- base::invokeRestart
[17:40:29.067]                       is.null <- base::is.null
[17:40:29.067]                       muffled <- FALSE
[17:40:29.067]                       if (inherits(cond, "message")) {
[17:40:29.067]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:29.067]                         if (muffled) 
[17:40:29.067]                           invokeRestart("muffleMessage")
[17:40:29.067]                       }
[17:40:29.067]                       else if (inherits(cond, "warning")) {
[17:40:29.067]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:29.067]                         if (muffled) 
[17:40:29.067]                           invokeRestart("muffleWarning")
[17:40:29.067]                       }
[17:40:29.067]                       else if (inherits(cond, "condition")) {
[17:40:29.067]                         if (!is.null(pattern)) {
[17:40:29.067]                           computeRestarts <- base::computeRestarts
[17:40:29.067]                           grepl <- base::grepl
[17:40:29.067]                           restarts <- computeRestarts(cond)
[17:40:29.067]                           for (restart in restarts) {
[17:40:29.067]                             name <- restart$name
[17:40:29.067]                             if (is.null(name)) 
[17:40:29.067]                               next
[17:40:29.067]                             if (!grepl(pattern, name)) 
[17:40:29.067]                               next
[17:40:29.067]                             invokeRestart(restart)
[17:40:29.067]                             muffled <- TRUE
[17:40:29.067]                             break
[17:40:29.067]                           }
[17:40:29.067]                         }
[17:40:29.067]                       }
[17:40:29.067]                       invisible(muffled)
[17:40:29.067]                     }
[17:40:29.067]                     muffleCondition(cond, pattern = "^muffle")
[17:40:29.067]                   }
[17:40:29.067]                 }
[17:40:29.067]                 else {
[17:40:29.067]                   if (TRUE) {
[17:40:29.067]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:29.067]                     {
[17:40:29.067]                       inherits <- base::inherits
[17:40:29.067]                       invokeRestart <- base::invokeRestart
[17:40:29.067]                       is.null <- base::is.null
[17:40:29.067]                       muffled <- FALSE
[17:40:29.067]                       if (inherits(cond, "message")) {
[17:40:29.067]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:29.067]                         if (muffled) 
[17:40:29.067]                           invokeRestart("muffleMessage")
[17:40:29.067]                       }
[17:40:29.067]                       else if (inherits(cond, "warning")) {
[17:40:29.067]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:29.067]                         if (muffled) 
[17:40:29.067]                           invokeRestart("muffleWarning")
[17:40:29.067]                       }
[17:40:29.067]                       else if (inherits(cond, "condition")) {
[17:40:29.067]                         if (!is.null(pattern)) {
[17:40:29.067]                           computeRestarts <- base::computeRestarts
[17:40:29.067]                           grepl <- base::grepl
[17:40:29.067]                           restarts <- computeRestarts(cond)
[17:40:29.067]                           for (restart in restarts) {
[17:40:29.067]                             name <- restart$name
[17:40:29.067]                             if (is.null(name)) 
[17:40:29.067]                               next
[17:40:29.067]                             if (!grepl(pattern, name)) 
[17:40:29.067]                               next
[17:40:29.067]                             invokeRestart(restart)
[17:40:29.067]                             muffled <- TRUE
[17:40:29.067]                             break
[17:40:29.067]                           }
[17:40:29.067]                         }
[17:40:29.067]                       }
[17:40:29.067]                       invisible(muffled)
[17:40:29.067]                     }
[17:40:29.067]                     muffleCondition(cond, pattern = "^muffle")
[17:40:29.067]                   }
[17:40:29.067]                 }
[17:40:29.067]             }
[17:40:29.067]         }))
[17:40:29.067]     }, error = function(ex) {
[17:40:29.067]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:29.067]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:29.067]                 ...future.rng), started = ...future.startTime, 
[17:40:29.067]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:29.067]             version = "1.8"), class = "FutureResult")
[17:40:29.067]     }, finally = {
[17:40:29.067]         if (!identical(...future.workdir, getwd())) 
[17:40:29.067]             setwd(...future.workdir)
[17:40:29.067]         {
[17:40:29.067]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:29.067]                 ...future.oldOptions$nwarnings <- NULL
[17:40:29.067]             }
[17:40:29.067]             base::options(...future.oldOptions)
[17:40:29.067]             if (.Platform$OS.type == "windows") {
[17:40:29.067]                 old_names <- names(...future.oldEnvVars)
[17:40:29.067]                 envs <- base::Sys.getenv()
[17:40:29.067]                 names <- names(envs)
[17:40:29.067]                 common <- intersect(names, old_names)
[17:40:29.067]                 added <- setdiff(names, old_names)
[17:40:29.067]                 removed <- setdiff(old_names, names)
[17:40:29.067]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:29.067]                   envs[common]]
[17:40:29.067]                 NAMES <- toupper(changed)
[17:40:29.067]                 args <- list()
[17:40:29.067]                 for (kk in seq_along(NAMES)) {
[17:40:29.067]                   name <- changed[[kk]]
[17:40:29.067]                   NAME <- NAMES[[kk]]
[17:40:29.067]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:29.067]                     next
[17:40:29.067]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:29.067]                 }
[17:40:29.067]                 NAMES <- toupper(added)
[17:40:29.067]                 for (kk in seq_along(NAMES)) {
[17:40:29.067]                   name <- added[[kk]]
[17:40:29.067]                   NAME <- NAMES[[kk]]
[17:40:29.067]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:29.067]                     next
[17:40:29.067]                   args[[name]] <- ""
[17:40:29.067]                 }
[17:40:29.067]                 NAMES <- toupper(removed)
[17:40:29.067]                 for (kk in seq_along(NAMES)) {
[17:40:29.067]                   name <- removed[[kk]]
[17:40:29.067]                   NAME <- NAMES[[kk]]
[17:40:29.067]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:29.067]                     next
[17:40:29.067]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:29.067]                 }
[17:40:29.067]                 if (length(args) > 0) 
[17:40:29.067]                   base::do.call(base::Sys.setenv, args = args)
[17:40:29.067]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:29.067]             }
[17:40:29.067]             else {
[17:40:29.067]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:29.067]             }
[17:40:29.067]             {
[17:40:29.067]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:29.067]                   0L) {
[17:40:29.067]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:29.067]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:29.067]                   base::options(opts)
[17:40:29.067]                 }
[17:40:29.067]                 {
[17:40:29.067]                   {
[17:40:29.067]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:29.067]                     NULL
[17:40:29.067]                   }
[17:40:29.067]                   options(future.plan = NULL)
[17:40:29.067]                   if (is.na(NA_character_)) 
[17:40:29.067]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:29.067]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:29.067]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:40:29.067]                     envir = parent.frame()) 
[17:40:29.067]                   {
[17:40:29.067]                     default_workers <- missing(workers)
[17:40:29.067]                     if (is.function(workers)) 
[17:40:29.067]                       workers <- workers()
[17:40:29.067]                     workers <- structure(as.integer(workers), 
[17:40:29.067]                       class = class(workers))
[17:40:29.067]                     stop_if_not(is.finite(workers), workers >= 
[17:40:29.067]                       1L)
[17:40:29.067]                     if ((workers == 1L && !inherits(workers, 
[17:40:29.067]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:40:29.067]                       if (default_workers) 
[17:40:29.067]                         supportsMulticore(warn = TRUE)
[17:40:29.067]                       return(sequential(..., envir = envir))
[17:40:29.067]                     }
[17:40:29.067]                     oopts <- options(mc.cores = workers)
[17:40:29.067]                     on.exit(options(oopts))
[17:40:29.067]                     future <- MulticoreFuture(..., workers = workers, 
[17:40:29.067]                       envir = envir)
[17:40:29.067]                     if (!future$lazy) 
[17:40:29.067]                       future <- run(future)
[17:40:29.067]                     invisible(future)
[17:40:29.067]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:29.067]                 }
[17:40:29.067]             }
[17:40:29.067]         }
[17:40:29.067]     })
[17:40:29.067]     if (TRUE) {
[17:40:29.067]         base::sink(type = "output", split = FALSE)
[17:40:29.067]         if (TRUE) {
[17:40:29.067]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:29.067]         }
[17:40:29.067]         else {
[17:40:29.067]             ...future.result["stdout"] <- base::list(NULL)
[17:40:29.067]         }
[17:40:29.067]         base::close(...future.stdout)
[17:40:29.067]         ...future.stdout <- NULL
[17:40:29.067]     }
[17:40:29.067]     ...future.result$conditions <- ...future.conditions
[17:40:29.067]     ...future.result$finished <- base::Sys.time()
[17:40:29.067]     ...future.result
[17:40:29.067] }
[17:40:29.070] assign_globals() ...
[17:40:29.070] List of 5
[17:40:29.070]  $ ...future.FUN            :function (...)  
[17:40:29.070]  $ future.call.arguments    : list()
[17:40:29.070]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:29.070]  $ ...future.elements_ii    :List of 2
[17:40:29.070]   ..$ : int 0
[17:40:29.070]   ..$ : int 0
[17:40:29.070]  $ ...future.seeds_ii       :List of 2
[17:40:29.070]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[17:40:29.070]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[17:40:29.070]  $ ...future.globals.maxSize: NULL
[17:40:29.070]  - attr(*, "resolved")= logi FALSE
[17:40:29.070]  - attr(*, "total_size")= num 616
[17:40:29.070]  - attr(*, "where")=List of 5
[17:40:29.070]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:40:29.070]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:40:29.070]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:40:29.070]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:40:29.070]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:40:29.070]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:29.070]  - attr(*, "already-done")= logi TRUE
[17:40:29.076] - reassign environment for ‘...future.FUN’
[17:40:29.076] - copied ‘...future.FUN’ to environment
[17:40:29.076] - copied ‘future.call.arguments’ to environment
[17:40:29.076] - copied ‘...future.elements_ii’ to environment
[17:40:29.076] - copied ‘...future.seeds_ii’ to environment
[17:40:29.076] - copied ‘...future.globals.maxSize’ to environment
[17:40:29.076] assign_globals() ... done
[17:40:29.077] requestCore(): workers = 2
[17:40:29.079] MulticoreFuture started
[17:40:29.079] - Launch lazy future ... done
[17:40:29.080] run() for ‘MulticoreFuture’ ... done
[17:40:29.080] plan(): Setting new future strategy stack:
[17:40:29.080] Created future:
[17:40:29.080] List of future strategies:
[17:40:29.080] 1. sequential:
[17:40:29.080]    - args: function (..., envir = parent.frame())
[17:40:29.080]    - tweaked: FALSE
[17:40:29.080]    - call: NULL
[17:40:29.081] plan(): nbrOfWorkers() = 1
[17:40:29.084] plan(): Setting new future strategy stack:
[17:40:29.084] List of future strategies:
[17:40:29.084] 1. multicore:
[17:40:29.084]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:29.084]    - tweaked: FALSE
[17:40:29.084]    - call: plan(strategy)
[17:40:29.089] plan(): nbrOfWorkers() = 2
[17:40:29.080] MulticoreFuture:
[17:40:29.080] Label: ‘future_replicate-1’
[17:40:29.080] Expression:
[17:40:29.080] {
[17:40:29.080]     do.call(function(...) {
[17:40:29.080]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:29.080]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:29.080]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:29.080]             on.exit(options(oopts), add = TRUE)
[17:40:29.080]         }
[17:40:29.080]         {
[17:40:29.080]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:29.080]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:29.080]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:29.080]                   envir = globalenv(), inherits = FALSE)
[17:40:29.080]                 ...future.FUN(...future.X_jj, ...)
[17:40:29.080]             })
[17:40:29.080]         }
[17:40:29.080]     }, args = future.call.arguments)
[17:40:29.080] }
[17:40:29.080] Lazy evaluation: FALSE
[17:40:29.080] Asynchronous evaluation: TRUE
[17:40:29.080] Local evaluation: TRUE
[17:40:29.080] Environment: R_GlobalEnv
[17:40:29.080] Capture standard output: TRUE
[17:40:29.080] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:29.080] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:29.080] Packages: <none>
[17:40:29.080] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:29.080] Resolved: TRUE
[17:40:29.080] Value: <not collected>
[17:40:29.080] Conditions captured: <none>
[17:40:29.080] Early signaling: FALSE
[17:40:29.080] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:29.080] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:29.091] Chunk #1 of 2 ... DONE
[17:40:29.091] Chunk #2 of 2 ...
[17:40:29.091]  - Finding globals in 'X' for chunk #2 ...
[17:40:29.091] getGlobalsAndPackages() ...
[17:40:29.091] Searching for globals...
[17:40:29.092] 
[17:40:29.092] Searching for globals ... DONE
[17:40:29.092] - globals: [0] <none>
[17:40:29.093] getGlobalsAndPackages() ... DONE
[17:40:29.093]    + additional globals found: [n=0] 
[17:40:29.093]    + additional namespaces needed: [n=0] 
[17:40:29.093]  - Finding globals in 'X' for chunk #2 ... DONE
[17:40:29.093]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[17:40:29.093]  - seeds: [3] <seeds>
[17:40:29.094] getGlobalsAndPackages() ...
[17:40:29.094] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:29.094] Resolving globals: FALSE
[17:40:29.094] Tweak future expression to call with '...' arguments ...
[17:40:29.095] {
[17:40:29.095]     do.call(function(...) {
[17:40:29.095]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:29.095]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:29.095]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:29.095]             on.exit(options(oopts), add = TRUE)
[17:40:29.095]         }
[17:40:29.095]         {
[17:40:29.095]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:29.095]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:29.095]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:29.095]                   envir = globalenv(), inherits = FALSE)
[17:40:29.095]                 ...future.FUN(...future.X_jj, ...)
[17:40:29.095]             })
[17:40:29.095]         }
[17:40:29.095]     }, args = future.call.arguments)
[17:40:29.095] }
[17:40:29.095] Tweak future expression to call with '...' arguments ... DONE
[17:40:29.096] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:29.096] 
[17:40:29.096] getGlobalsAndPackages() ... DONE
[17:40:29.097] run() for ‘Future’ ...
[17:40:29.097] - state: ‘created’
[17:40:29.097] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:40:29.102] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:29.103] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:40:29.103]   - Field: ‘label’
[17:40:29.103]   - Field: ‘local’
[17:40:29.103]   - Field: ‘owner’
[17:40:29.103]   - Field: ‘envir’
[17:40:29.104]   - Field: ‘workers’
[17:40:29.104]   - Field: ‘packages’
[17:40:29.104]   - Field: ‘gc’
[17:40:29.104]   - Field: ‘job’
[17:40:29.104]   - Field: ‘conditions’
[17:40:29.104]   - Field: ‘expr’
[17:40:29.104]   - Field: ‘uuid’
[17:40:29.105]   - Field: ‘seed’
[17:40:29.105]   - Field: ‘version’
[17:40:29.105]   - Field: ‘result’
[17:40:29.105]   - Field: ‘asynchronous’
[17:40:29.105]   - Field: ‘calls’
[17:40:29.105]   - Field: ‘globals’
[17:40:29.105]   - Field: ‘stdout’
[17:40:29.106]   - Field: ‘earlySignal’
[17:40:29.106]   - Field: ‘lazy’
[17:40:29.106]   - Field: ‘state’
[17:40:29.106] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:40:29.106] - Launch lazy future ...
[17:40:29.107] Packages needed by the future expression (n = 0): <none>
[17:40:29.107] Packages needed by future strategies (n = 0): <none>
[17:40:29.108] {
[17:40:29.108]     {
[17:40:29.108]         {
[17:40:29.108]             ...future.startTime <- base::Sys.time()
[17:40:29.108]             {
[17:40:29.108]                 {
[17:40:29.108]                   {
[17:40:29.108]                     {
[17:40:29.108]                       base::local({
[17:40:29.108]                         has_future <- base::requireNamespace("future", 
[17:40:29.108]                           quietly = TRUE)
[17:40:29.108]                         if (has_future) {
[17:40:29.108]                           ns <- base::getNamespace("future")
[17:40:29.108]                           version <- ns[[".package"]][["version"]]
[17:40:29.108]                           if (is.null(version)) 
[17:40:29.108]                             version <- utils::packageVersion("future")
[17:40:29.108]                         }
[17:40:29.108]                         else {
[17:40:29.108]                           version <- NULL
[17:40:29.108]                         }
[17:40:29.108]                         if (!has_future || version < "1.8.0") {
[17:40:29.108]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:29.108]                             "", base::R.version$version.string), 
[17:40:29.108]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:29.108]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:29.108]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:29.108]                               "release", "version")], collapse = " "), 
[17:40:29.108]                             hostname = base::Sys.info()[["nodename"]])
[17:40:29.108]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:29.108]                             info)
[17:40:29.108]                           info <- base::paste(info, collapse = "; ")
[17:40:29.108]                           if (!has_future) {
[17:40:29.108]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:29.108]                               info)
[17:40:29.108]                           }
[17:40:29.108]                           else {
[17:40:29.108]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:29.108]                               info, version)
[17:40:29.108]                           }
[17:40:29.108]                           base::stop(msg)
[17:40:29.108]                         }
[17:40:29.108]                       })
[17:40:29.108]                     }
[17:40:29.108]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:29.108]                     base::options(mc.cores = 1L)
[17:40:29.108]                   }
[17:40:29.108]                   options(future.plan = NULL)
[17:40:29.108]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:29.108]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:29.108]                 }
[17:40:29.108]                 ...future.workdir <- getwd()
[17:40:29.108]             }
[17:40:29.108]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:29.108]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:29.108]         }
[17:40:29.108]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:29.108]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[17:40:29.108]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:29.108]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:29.108]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:29.108]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:29.108]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:29.108]             base::names(...future.oldOptions))
[17:40:29.108]     }
[17:40:29.108]     if (FALSE) {
[17:40:29.108]     }
[17:40:29.108]     else {
[17:40:29.108]         if (TRUE) {
[17:40:29.108]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:29.108]                 open = "w")
[17:40:29.108]         }
[17:40:29.108]         else {
[17:40:29.108]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:29.108]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:29.108]         }
[17:40:29.108]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:29.108]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:29.108]             base::sink(type = "output", split = FALSE)
[17:40:29.108]             base::close(...future.stdout)
[17:40:29.108]         }, add = TRUE)
[17:40:29.108]     }
[17:40:29.108]     ...future.frame <- base::sys.nframe()
[17:40:29.108]     ...future.conditions <- base::list()
[17:40:29.108]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:29.108]     if (FALSE) {
[17:40:29.108]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:29.108]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:29.108]     }
[17:40:29.108]     ...future.result <- base::tryCatch({
[17:40:29.108]         base::withCallingHandlers({
[17:40:29.108]             ...future.value <- base::withVisible(base::local({
[17:40:29.108]                 withCallingHandlers({
[17:40:29.108]                   {
[17:40:29.108]                     do.call(function(...) {
[17:40:29.108]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:29.108]                       if (!identical(...future.globals.maxSize.org, 
[17:40:29.108]                         ...future.globals.maxSize)) {
[17:40:29.108]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:29.108]                         on.exit(options(oopts), add = TRUE)
[17:40:29.108]                       }
[17:40:29.108]                       {
[17:40:29.108]                         lapply(seq_along(...future.elements_ii), 
[17:40:29.108]                           FUN = function(jj) {
[17:40:29.108]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:29.108]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:29.108]                               envir = globalenv(), inherits = FALSE)
[17:40:29.108]                             ...future.FUN(...future.X_jj, ...)
[17:40:29.108]                           })
[17:40:29.108]                       }
[17:40:29.108]                     }, args = future.call.arguments)
[17:40:29.108]                   }
[17:40:29.108]                 }, immediateCondition = function(cond) {
[17:40:29.108]                   save_rds <- function (object, pathname, ...) 
[17:40:29.108]                   {
[17:40:29.108]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:29.108]                     if (file_test("-f", pathname_tmp)) {
[17:40:29.108]                       fi_tmp <- file.info(pathname_tmp)
[17:40:29.108]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:29.108]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:29.108]                         fi_tmp[["mtime"]])
[17:40:29.108]                     }
[17:40:29.108]                     tryCatch({
[17:40:29.108]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:29.108]                     }, error = function(ex) {
[17:40:29.108]                       msg <- conditionMessage(ex)
[17:40:29.108]                       fi_tmp <- file.info(pathname_tmp)
[17:40:29.108]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:29.108]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:29.108]                         fi_tmp[["mtime"]], msg)
[17:40:29.108]                       ex$message <- msg
[17:40:29.108]                       stop(ex)
[17:40:29.108]                     })
[17:40:29.108]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:29.108]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:29.108]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:29.108]                       fi_tmp <- file.info(pathname_tmp)
[17:40:29.108]                       fi <- file.info(pathname)
[17:40:29.108]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:29.108]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:29.108]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:29.108]                         fi[["size"]], fi[["mtime"]])
[17:40:29.108]                       stop(msg)
[17:40:29.108]                     }
[17:40:29.108]                     invisible(pathname)
[17:40:29.108]                   }
[17:40:29.108]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:29.108]                     rootPath = tempdir()) 
[17:40:29.108]                   {
[17:40:29.108]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:29.108]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:29.108]                       tmpdir = path, fileext = ".rds")
[17:40:29.108]                     save_rds(obj, file)
[17:40:29.108]                   }
[17:40:29.108]                   saveImmediateCondition(cond, path = "/tmp/RtmpYOEZWb/.future/immediateConditions")
[17:40:29.108]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:29.108]                   {
[17:40:29.108]                     inherits <- base::inherits
[17:40:29.108]                     invokeRestart <- base::invokeRestart
[17:40:29.108]                     is.null <- base::is.null
[17:40:29.108]                     muffled <- FALSE
[17:40:29.108]                     if (inherits(cond, "message")) {
[17:40:29.108]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:29.108]                       if (muffled) 
[17:40:29.108]                         invokeRestart("muffleMessage")
[17:40:29.108]                     }
[17:40:29.108]                     else if (inherits(cond, "warning")) {
[17:40:29.108]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:29.108]                       if (muffled) 
[17:40:29.108]                         invokeRestart("muffleWarning")
[17:40:29.108]                     }
[17:40:29.108]                     else if (inherits(cond, "condition")) {
[17:40:29.108]                       if (!is.null(pattern)) {
[17:40:29.108]                         computeRestarts <- base::computeRestarts
[17:40:29.108]                         grepl <- base::grepl
[17:40:29.108]                         restarts <- computeRestarts(cond)
[17:40:29.108]                         for (restart in restarts) {
[17:40:29.108]                           name <- restart$name
[17:40:29.108]                           if (is.null(name)) 
[17:40:29.108]                             next
[17:40:29.108]                           if (!grepl(pattern, name)) 
[17:40:29.108]                             next
[17:40:29.108]                           invokeRestart(restart)
[17:40:29.108]                           muffled <- TRUE
[17:40:29.108]                           break
[17:40:29.108]                         }
[17:40:29.108]                       }
[17:40:29.108]                     }
[17:40:29.108]                     invisible(muffled)
[17:40:29.108]                   }
[17:40:29.108]                   muffleCondition(cond)
[17:40:29.108]                 })
[17:40:29.108]             }))
[17:40:29.108]             future::FutureResult(value = ...future.value$value, 
[17:40:29.108]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:29.108]                   ...future.rng), globalenv = if (FALSE) 
[17:40:29.108]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:29.108]                     ...future.globalenv.names))
[17:40:29.108]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:29.108]         }, condition = base::local({
[17:40:29.108]             c <- base::c
[17:40:29.108]             inherits <- base::inherits
[17:40:29.108]             invokeRestart <- base::invokeRestart
[17:40:29.108]             length <- base::length
[17:40:29.108]             list <- base::list
[17:40:29.108]             seq.int <- base::seq.int
[17:40:29.108]             signalCondition <- base::signalCondition
[17:40:29.108]             sys.calls <- base::sys.calls
[17:40:29.108]             `[[` <- base::`[[`
[17:40:29.108]             `+` <- base::`+`
[17:40:29.108]             `<<-` <- base::`<<-`
[17:40:29.108]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:29.108]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:29.108]                   3L)]
[17:40:29.108]             }
[17:40:29.108]             function(cond) {
[17:40:29.108]                 is_error <- inherits(cond, "error")
[17:40:29.108]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:29.108]                   NULL)
[17:40:29.108]                 if (is_error) {
[17:40:29.108]                   sessionInformation <- function() {
[17:40:29.108]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:29.108]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:29.108]                       search = base::search(), system = base::Sys.info())
[17:40:29.108]                   }
[17:40:29.108]                   ...future.conditions[[length(...future.conditions) + 
[17:40:29.108]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:29.108]                     cond$call), session = sessionInformation(), 
[17:40:29.108]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:29.108]                   signalCondition(cond)
[17:40:29.108]                 }
[17:40:29.108]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:29.108]                 "immediateCondition"))) {
[17:40:29.108]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:29.108]                   ...future.conditions[[length(...future.conditions) + 
[17:40:29.108]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:29.108]                   if (TRUE && !signal) {
[17:40:29.108]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:29.108]                     {
[17:40:29.108]                       inherits <- base::inherits
[17:40:29.108]                       invokeRestart <- base::invokeRestart
[17:40:29.108]                       is.null <- base::is.null
[17:40:29.108]                       muffled <- FALSE
[17:40:29.108]                       if (inherits(cond, "message")) {
[17:40:29.108]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:29.108]                         if (muffled) 
[17:40:29.108]                           invokeRestart("muffleMessage")
[17:40:29.108]                       }
[17:40:29.108]                       else if (inherits(cond, "warning")) {
[17:40:29.108]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:29.108]                         if (muffled) 
[17:40:29.108]                           invokeRestart("muffleWarning")
[17:40:29.108]                       }
[17:40:29.108]                       else if (inherits(cond, "condition")) {
[17:40:29.108]                         if (!is.null(pattern)) {
[17:40:29.108]                           computeRestarts <- base::computeRestarts
[17:40:29.108]                           grepl <- base::grepl
[17:40:29.108]                           restarts <- computeRestarts(cond)
[17:40:29.108]                           for (restart in restarts) {
[17:40:29.108]                             name <- restart$name
[17:40:29.108]                             if (is.null(name)) 
[17:40:29.108]                               next
[17:40:29.108]                             if (!grepl(pattern, name)) 
[17:40:29.108]                               next
[17:40:29.108]                             invokeRestart(restart)
[17:40:29.108]                             muffled <- TRUE
[17:40:29.108]                             break
[17:40:29.108]                           }
[17:40:29.108]                         }
[17:40:29.108]                       }
[17:40:29.108]                       invisible(muffled)
[17:40:29.108]                     }
[17:40:29.108]                     muffleCondition(cond, pattern = "^muffle")
[17:40:29.108]                   }
[17:40:29.108]                 }
[17:40:29.108]                 else {
[17:40:29.108]                   if (TRUE) {
[17:40:29.108]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:29.108]                     {
[17:40:29.108]                       inherits <- base::inherits
[17:40:29.108]                       invokeRestart <- base::invokeRestart
[17:40:29.108]                       is.null <- base::is.null
[17:40:29.108]                       muffled <- FALSE
[17:40:29.108]                       if (inherits(cond, "message")) {
[17:40:29.108]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:29.108]                         if (muffled) 
[17:40:29.108]                           invokeRestart("muffleMessage")
[17:40:29.108]                       }
[17:40:29.108]                       else if (inherits(cond, "warning")) {
[17:40:29.108]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:29.108]                         if (muffled) 
[17:40:29.108]                           invokeRestart("muffleWarning")
[17:40:29.108]                       }
[17:40:29.108]                       else if (inherits(cond, "condition")) {
[17:40:29.108]                         if (!is.null(pattern)) {
[17:40:29.108]                           computeRestarts <- base::computeRestarts
[17:40:29.108]                           grepl <- base::grepl
[17:40:29.108]                           restarts <- computeRestarts(cond)
[17:40:29.108]                           for (restart in restarts) {
[17:40:29.108]                             name <- restart$name
[17:40:29.108]                             if (is.null(name)) 
[17:40:29.108]                               next
[17:40:29.108]                             if (!grepl(pattern, name)) 
[17:40:29.108]                               next
[17:40:29.108]                             invokeRestart(restart)
[17:40:29.108]                             muffled <- TRUE
[17:40:29.108]                             break
[17:40:29.108]                           }
[17:40:29.108]                         }
[17:40:29.108]                       }
[17:40:29.108]                       invisible(muffled)
[17:40:29.108]                     }
[17:40:29.108]                     muffleCondition(cond, pattern = "^muffle")
[17:40:29.108]                   }
[17:40:29.108]                 }
[17:40:29.108]             }
[17:40:29.108]         }))
[17:40:29.108]     }, error = function(ex) {
[17:40:29.108]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:29.108]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:29.108]                 ...future.rng), started = ...future.startTime, 
[17:40:29.108]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:29.108]             version = "1.8"), class = "FutureResult")
[17:40:29.108]     }, finally = {
[17:40:29.108]         if (!identical(...future.workdir, getwd())) 
[17:40:29.108]             setwd(...future.workdir)
[17:40:29.108]         {
[17:40:29.108]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:29.108]                 ...future.oldOptions$nwarnings <- NULL
[17:40:29.108]             }
[17:40:29.108]             base::options(...future.oldOptions)
[17:40:29.108]             if (.Platform$OS.type == "windows") {
[17:40:29.108]                 old_names <- names(...future.oldEnvVars)
[17:40:29.108]                 envs <- base::Sys.getenv()
[17:40:29.108]                 names <- names(envs)
[17:40:29.108]                 common <- intersect(names, old_names)
[17:40:29.108]                 added <- setdiff(names, old_names)
[17:40:29.108]                 removed <- setdiff(old_names, names)
[17:40:29.108]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:29.108]                   envs[common]]
[17:40:29.108]                 NAMES <- toupper(changed)
[17:40:29.108]                 args <- list()
[17:40:29.108]                 for (kk in seq_along(NAMES)) {
[17:40:29.108]                   name <- changed[[kk]]
[17:40:29.108]                   NAME <- NAMES[[kk]]
[17:40:29.108]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:29.108]                     next
[17:40:29.108]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:29.108]                 }
[17:40:29.108]                 NAMES <- toupper(added)
[17:40:29.108]                 for (kk in seq_along(NAMES)) {
[17:40:29.108]                   name <- added[[kk]]
[17:40:29.108]                   NAME <- NAMES[[kk]]
[17:40:29.108]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:29.108]                     next
[17:40:29.108]                   args[[name]] <- ""
[17:40:29.108]                 }
[17:40:29.108]                 NAMES <- toupper(removed)
[17:40:29.108]                 for (kk in seq_along(NAMES)) {
[17:40:29.108]                   name <- removed[[kk]]
[17:40:29.108]                   NAME <- NAMES[[kk]]
[17:40:29.108]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:29.108]                     next
[17:40:29.108]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:29.108]                 }
[17:40:29.108]                 if (length(args) > 0) 
[17:40:29.108]                   base::do.call(base::Sys.setenv, args = args)
[17:40:29.108]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:29.108]             }
[17:40:29.108]             else {
[17:40:29.108]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:29.108]             }
[17:40:29.108]             {
[17:40:29.108]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:29.108]                   0L) {
[17:40:29.108]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:29.108]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:29.108]                   base::options(opts)
[17:40:29.108]                 }
[17:40:29.108]                 {
[17:40:29.108]                   {
[17:40:29.108]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:29.108]                     NULL
[17:40:29.108]                   }
[17:40:29.108]                   options(future.plan = NULL)
[17:40:29.108]                   if (is.na(NA_character_)) 
[17:40:29.108]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:29.108]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:29.108]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:40:29.108]                     envir = parent.frame()) 
[17:40:29.108]                   {
[17:40:29.108]                     default_workers <- missing(workers)
[17:40:29.108]                     if (is.function(workers)) 
[17:40:29.108]                       workers <- workers()
[17:40:29.108]                     workers <- structure(as.integer(workers), 
[17:40:29.108]                       class = class(workers))
[17:40:29.108]                     stop_if_not(is.finite(workers), workers >= 
[17:40:29.108]                       1L)
[17:40:29.108]                     if ((workers == 1L && !inherits(workers, 
[17:40:29.108]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:40:29.108]                       if (default_workers) 
[17:40:29.108]                         supportsMulticore(warn = TRUE)
[17:40:29.108]                       return(sequential(..., envir = envir))
[17:40:29.108]                     }
[17:40:29.108]                     oopts <- options(mc.cores = workers)
[17:40:29.108]                     on.exit(options(oopts))
[17:40:29.108]                     future <- MulticoreFuture(..., workers = workers, 
[17:40:29.108]                       envir = envir)
[17:40:29.108]                     if (!future$lazy) 
[17:40:29.108]                       future <- run(future)
[17:40:29.108]                     invisible(future)
[17:40:29.108]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:29.108]                 }
[17:40:29.108]             }
[17:40:29.108]         }
[17:40:29.108]     })
[17:40:29.108]     if (TRUE) {
[17:40:29.108]         base::sink(type = "output", split = FALSE)
[17:40:29.108]         if (TRUE) {
[17:40:29.108]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:29.108]         }
[17:40:29.108]         else {
[17:40:29.108]             ...future.result["stdout"] <- base::list(NULL)
[17:40:29.108]         }
[17:40:29.108]         base::close(...future.stdout)
[17:40:29.108]         ...future.stdout <- NULL
[17:40:29.108]     }
[17:40:29.108]     ...future.result$conditions <- ...future.conditions
[17:40:29.108]     ...future.result$finished <- base::Sys.time()
[17:40:29.108]     ...future.result
[17:40:29.108] }
[17:40:29.111] assign_globals() ...
[17:40:29.111] List of 5
[17:40:29.111]  $ ...future.FUN            :function (...)  
[17:40:29.111]  $ future.call.arguments    : list()
[17:40:29.111]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:29.111]  $ ...future.elements_ii    :List of 3
[17:40:29.111]   ..$ : int 0
[17:40:29.111]   ..$ : int 0
[17:40:29.111]   ..$ : int 0
[17:40:29.111]  $ ...future.seeds_ii       :List of 3
[17:40:29.111]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[17:40:29.111]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[17:40:29.111]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[17:40:29.111]  $ ...future.globals.maxSize: NULL
[17:40:29.111]  - attr(*, "resolved")= logi FALSE
[17:40:29.111]  - attr(*, "total_size")= num 616
[17:40:29.111]  - attr(*, "where")=List of 5
[17:40:29.111]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:40:29.111]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:40:29.111]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:40:29.111]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:40:29.111]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:40:29.111]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:29.111]  - attr(*, "already-done")= logi TRUE
[17:40:29.125] - reassign environment for ‘...future.FUN’
[17:40:29.125] - copied ‘...future.FUN’ to environment
[17:40:29.125] - copied ‘future.call.arguments’ to environment
[17:40:29.125] - copied ‘...future.elements_ii’ to environment
[17:40:29.126] - copied ‘...future.seeds_ii’ to environment
[17:40:29.126] - copied ‘...future.globals.maxSize’ to environment
[17:40:29.126] assign_globals() ... done
[17:40:29.126] requestCore(): workers = 2
[17:40:29.128] MulticoreFuture started
[17:40:29.129] - Launch lazy future ... done
[17:40:29.129] run() for ‘MulticoreFuture’ ... done
[17:40:29.130] Created future:
[17:40:29.130] plan(): Setting new future strategy stack:
[17:40:29.130] List of future strategies:
[17:40:29.130] 1. sequential:
[17:40:29.130]    - args: function (..., envir = parent.frame())
[17:40:29.130]    - tweaked: FALSE
[17:40:29.130]    - call: NULL
[17:40:29.132] plan(): nbrOfWorkers() = 1
[17:40:29.134] plan(): Setting new future strategy stack:
[17:40:29.134] List of future strategies:
[17:40:29.134] 1. multicore:
[17:40:29.134]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:29.134]    - tweaked: FALSE
[17:40:29.134]    - call: plan(strategy)
[17:40:29.140] plan(): nbrOfWorkers() = 2
[17:40:29.130] MulticoreFuture:
[17:40:29.130] Label: ‘future_replicate-2’
[17:40:29.130] Expression:
[17:40:29.130] {
[17:40:29.130]     do.call(function(...) {
[17:40:29.130]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:29.130]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:29.130]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:29.130]             on.exit(options(oopts), add = TRUE)
[17:40:29.130]         }
[17:40:29.130]         {
[17:40:29.130]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:29.130]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:29.130]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:29.130]                   envir = globalenv(), inherits = FALSE)
[17:40:29.130]                 ...future.FUN(...future.X_jj, ...)
[17:40:29.130]             })
[17:40:29.130]         }
[17:40:29.130]     }, args = future.call.arguments)
[17:40:29.130] }
[17:40:29.130] Lazy evaluation: FALSE
[17:40:29.130] Asynchronous evaluation: TRUE
[17:40:29.130] Local evaluation: TRUE
[17:40:29.130] Environment: R_GlobalEnv
[17:40:29.130] Capture standard output: TRUE
[17:40:29.130] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:29.130] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:29.130] Packages: <none>
[17:40:29.130] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:29.130] Resolved: TRUE
[17:40:29.130] Value: <not collected>
[17:40:29.130] Conditions captured: <none>
[17:40:29.130] Early signaling: FALSE
[17:40:29.130] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:29.130] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:29.141] Chunk #2 of 2 ... DONE
[17:40:29.141] Launching 2 futures (chunks) ... DONE
[17:40:29.141] Resolving 2 futures (chunks) ...
[17:40:29.141] resolve() on list ...
[17:40:29.141]  recursive: 0
[17:40:29.142]  length: 2
[17:40:29.142] 
[17:40:29.142] Future #1
[17:40:29.143] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:40:29.143] - nx: 2
[17:40:29.143] - relay: TRUE
[17:40:29.144] - stdout: TRUE
[17:40:29.144] - signal: TRUE
[17:40:29.144] - resignal: FALSE
[17:40:29.144] - force: TRUE
[17:40:29.144] - relayed: [n=2] FALSE, FALSE
[17:40:29.144] - queued futures: [n=2] FALSE, FALSE
[17:40:29.144]  - until=1
[17:40:29.145]  - relaying element #1
[17:40:29.145] - relayed: [n=2] TRUE, FALSE
[17:40:29.145] - queued futures: [n=2] TRUE, FALSE
[17:40:29.145] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:40:29.145]  length: 1 (resolved future 1)
[17:40:29.146] Future #2
[17:40:29.146] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:40:29.147] - nx: 2
[17:40:29.147] - relay: TRUE
[17:40:29.147] - stdout: TRUE
[17:40:29.147] - signal: TRUE
[17:40:29.147] - resignal: FALSE
[17:40:29.147] - force: TRUE
[17:40:29.148] - relayed: [n=2] TRUE, FALSE
[17:40:29.148] - queued futures: [n=2] TRUE, FALSE
[17:40:29.148]  - until=2
[17:40:29.148]  - relaying element #2
[17:40:29.148] - relayed: [n=2] TRUE, TRUE
[17:40:29.148] - queued futures: [n=2] TRUE, TRUE
[17:40:29.148] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:40:29.149]  length: 0 (resolved future 2)
[17:40:29.149] Relaying remaining futures
[17:40:29.149] signalConditionsASAP(NULL, pos=0) ...
[17:40:29.149] - nx: 2
[17:40:29.149] - relay: TRUE
[17:40:29.149] - stdout: TRUE
[17:40:29.149] - signal: TRUE
[17:40:29.149] - resignal: FALSE
[17:40:29.149] - force: TRUE
[17:40:29.150] - relayed: [n=2] TRUE, TRUE
[17:40:29.150] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:40:29.150] - relayed: [n=2] TRUE, TRUE
[17:40:29.150] - queued futures: [n=2] TRUE, TRUE
[17:40:29.150] signalConditionsASAP(NULL, pos=0) ... done
[17:40:29.150] resolve() on list ... DONE
[17:40:29.150]  - Number of value chunks collected: 2
[17:40:29.151] Resolving 2 futures (chunks) ... DONE
[17:40:29.151] Reducing values from 2 chunks ...
[17:40:29.151]  - Number of values collected after concatenation: 5
[17:40:29.151]  - Number of values expected: 5
[17:40:29.151] Reducing values from 2 chunks ... DONE
[17:40:29.151] future_lapply() ... DONE
[17:40:29.151] future_lapply() ...
[17:40:29.152] Generating random seeds ...
[17:40:29.152] Generating random seed streams for 5 elements ...
[17:40:29.152] Generating random seed streams for 5 elements ... DONE
[17:40:29.153] Generating random seeds ... DONE
[17:40:29.153] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:40:29.157] Number of chunks: 2
[17:40:29.157] getGlobalsAndPackagesXApply() ...
[17:40:29.158]  - future.globals: TRUE
[17:40:29.158] getGlobalsAndPackages() ...
[17:40:29.158] Searching for globals...
[17:40:29.159] - globals found: [2] ‘FUN’, ‘sample’
[17:40:29.159] Searching for globals ... DONE
[17:40:29.159] Resolving globals: FALSE
[17:40:29.160] The total size of the 1 globals is 616 bytes (616 bytes)
[17:40:29.160] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:40:29.160] - globals: [1] ‘FUN’
[17:40:29.161] 
[17:40:29.161] getGlobalsAndPackages() ... DONE
[17:40:29.161]  - globals found/used: [n=1] ‘FUN’
[17:40:29.161]  - needed namespaces: [n=0] 
[17:40:29.161] Finding globals ... DONE
[17:40:29.161]  - use_args: TRUE
[17:40:29.161]  - Getting '...' globals ...
[17:40:29.162] resolve() on list ...
[17:40:29.162]  recursive: 0
[17:40:29.162]  length: 1
[17:40:29.162]  elements: ‘...’
[17:40:29.162]  length: 0 (resolved future 1)
[17:40:29.162] resolve() on list ... DONE
[17:40:29.162]    - '...' content: [n=0] 
[17:40:29.162] List of 1
[17:40:29.162]  $ ...: list()
[17:40:29.162]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:29.162]  - attr(*, "where")=List of 1
[17:40:29.162]   ..$ ...:<environment: 0x558a3be34238> 
[17:40:29.162]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:29.162]  - attr(*, "resolved")= logi TRUE
[17:40:29.162]  - attr(*, "total_size")= num NA
[17:40:29.168]  - Getting '...' globals ... DONE
[17:40:29.168] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:40:29.168] List of 2
[17:40:29.168]  $ ...future.FUN:function (...)  
[17:40:29.168]  $ ...          : list()
[17:40:29.168]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:29.168]  - attr(*, "where")=List of 2
[17:40:29.168]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:40:29.168]   ..$ ...          :<environment: 0x558a3be34238> 
[17:40:29.168]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:29.168]  - attr(*, "resolved")= logi FALSE
[17:40:29.168]  - attr(*, "total_size")= num 616
[17:40:29.172] Packages to be attached in all futures: [n=0] 
[17:40:29.172] getGlobalsAndPackagesXApply() ... DONE
[17:40:29.172] Number of futures (= number of chunks): 2
[17:40:29.172] Launching 2 futures (chunks) ...
[17:40:29.172] Chunk #1 of 2 ...
[17:40:29.172]  - Finding globals in 'X' for chunk #1 ...
[17:40:29.173] getGlobalsAndPackages() ...
[17:40:29.173] Searching for globals...
[17:40:29.173] 
[17:40:29.173] Searching for globals ... DONE
[17:40:29.173] - globals: [0] <none>
[17:40:29.173] getGlobalsAndPackages() ... DONE
[17:40:29.173]    + additional globals found: [n=0] 
[17:40:29.173]    + additional namespaces needed: [n=0] 
[17:40:29.173]  - Finding globals in 'X' for chunk #1 ... DONE
[17:40:29.174]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:40:29.174]  - seeds: [2] <seeds>
[17:40:29.174] getGlobalsAndPackages() ...
[17:40:29.174] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:29.174] Resolving globals: FALSE
[17:40:29.174] Tweak future expression to call with '...' arguments ...
[17:40:29.174] {
[17:40:29.174]     do.call(function(...) {
[17:40:29.174]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:29.174]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:29.174]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:29.174]             on.exit(options(oopts), add = TRUE)
[17:40:29.174]         }
[17:40:29.174]         {
[17:40:29.174]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:29.174]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:29.174]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:29.174]                   envir = globalenv(), inherits = FALSE)
[17:40:29.174]                 ...future.FUN(...future.X_jj, ...)
[17:40:29.174]             })
[17:40:29.174]         }
[17:40:29.174]     }, args = future.call.arguments)
[17:40:29.174] }
[17:40:29.175] Tweak future expression to call with '...' arguments ... DONE
[17:40:29.175] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:29.175] 
[17:40:29.175] getGlobalsAndPackages() ... DONE
[17:40:29.176] run() for ‘Future’ ...
[17:40:29.176] - state: ‘created’
[17:40:29.176] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:40:29.179] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:29.179] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:40:29.180]   - Field: ‘label’
[17:40:29.180]   - Field: ‘local’
[17:40:29.180]   - Field: ‘owner’
[17:40:29.180]   - Field: ‘envir’
[17:40:29.180]   - Field: ‘workers’
[17:40:29.180]   - Field: ‘packages’
[17:40:29.180]   - Field: ‘gc’
[17:40:29.180]   - Field: ‘job’
[17:40:29.180]   - Field: ‘conditions’
[17:40:29.180]   - Field: ‘expr’
[17:40:29.180]   - Field: ‘uuid’
[17:40:29.181]   - Field: ‘seed’
[17:40:29.181]   - Field: ‘version’
[17:40:29.181]   - Field: ‘result’
[17:40:29.181]   - Field: ‘asynchronous’
[17:40:29.181]   - Field: ‘calls’
[17:40:29.181]   - Field: ‘globals’
[17:40:29.181]   - Field: ‘stdout’
[17:40:29.181]   - Field: ‘earlySignal’
[17:40:29.181]   - Field: ‘lazy’
[17:40:29.181]   - Field: ‘state’
[17:40:29.182] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:40:29.182] - Launch lazy future ...
[17:40:29.182] Packages needed by the future expression (n = 0): <none>
[17:40:29.182] Packages needed by future strategies (n = 0): <none>
[17:40:29.182] {
[17:40:29.182]     {
[17:40:29.182]         {
[17:40:29.182]             ...future.startTime <- base::Sys.time()
[17:40:29.182]             {
[17:40:29.182]                 {
[17:40:29.182]                   {
[17:40:29.182]                     {
[17:40:29.182]                       base::local({
[17:40:29.182]                         has_future <- base::requireNamespace("future", 
[17:40:29.182]                           quietly = TRUE)
[17:40:29.182]                         if (has_future) {
[17:40:29.182]                           ns <- base::getNamespace("future")
[17:40:29.182]                           version <- ns[[".package"]][["version"]]
[17:40:29.182]                           if (is.null(version)) 
[17:40:29.182]                             version <- utils::packageVersion("future")
[17:40:29.182]                         }
[17:40:29.182]                         else {
[17:40:29.182]                           version <- NULL
[17:40:29.182]                         }
[17:40:29.182]                         if (!has_future || version < "1.8.0") {
[17:40:29.182]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:29.182]                             "", base::R.version$version.string), 
[17:40:29.182]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:29.182]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:29.182]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:29.182]                               "release", "version")], collapse = " "), 
[17:40:29.182]                             hostname = base::Sys.info()[["nodename"]])
[17:40:29.182]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:29.182]                             info)
[17:40:29.182]                           info <- base::paste(info, collapse = "; ")
[17:40:29.182]                           if (!has_future) {
[17:40:29.182]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:29.182]                               info)
[17:40:29.182]                           }
[17:40:29.182]                           else {
[17:40:29.182]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:29.182]                               info, version)
[17:40:29.182]                           }
[17:40:29.182]                           base::stop(msg)
[17:40:29.182]                         }
[17:40:29.182]                       })
[17:40:29.182]                     }
[17:40:29.182]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:29.182]                     base::options(mc.cores = 1L)
[17:40:29.182]                   }
[17:40:29.182]                   options(future.plan = NULL)
[17:40:29.182]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:29.182]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:29.182]                 }
[17:40:29.182]                 ...future.workdir <- getwd()
[17:40:29.182]             }
[17:40:29.182]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:29.182]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:29.182]         }
[17:40:29.182]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:29.182]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:40:29.182]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:29.182]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:29.182]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:29.182]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:29.182]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:29.182]             base::names(...future.oldOptions))
[17:40:29.182]     }
[17:40:29.182]     if (FALSE) {
[17:40:29.182]     }
[17:40:29.182]     else {
[17:40:29.182]         if (TRUE) {
[17:40:29.182]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:29.182]                 open = "w")
[17:40:29.182]         }
[17:40:29.182]         else {
[17:40:29.182]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:29.182]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:29.182]         }
[17:40:29.182]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:29.182]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:29.182]             base::sink(type = "output", split = FALSE)
[17:40:29.182]             base::close(...future.stdout)
[17:40:29.182]         }, add = TRUE)
[17:40:29.182]     }
[17:40:29.182]     ...future.frame <- base::sys.nframe()
[17:40:29.182]     ...future.conditions <- base::list()
[17:40:29.182]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:29.182]     if (FALSE) {
[17:40:29.182]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:29.182]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:29.182]     }
[17:40:29.182]     ...future.result <- base::tryCatch({
[17:40:29.182]         base::withCallingHandlers({
[17:40:29.182]             ...future.value <- base::withVisible(base::local({
[17:40:29.182]                 withCallingHandlers({
[17:40:29.182]                   {
[17:40:29.182]                     do.call(function(...) {
[17:40:29.182]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:29.182]                       if (!identical(...future.globals.maxSize.org, 
[17:40:29.182]                         ...future.globals.maxSize)) {
[17:40:29.182]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:29.182]                         on.exit(options(oopts), add = TRUE)
[17:40:29.182]                       }
[17:40:29.182]                       {
[17:40:29.182]                         lapply(seq_along(...future.elements_ii), 
[17:40:29.182]                           FUN = function(jj) {
[17:40:29.182]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:29.182]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:29.182]                               envir = globalenv(), inherits = FALSE)
[17:40:29.182]                             ...future.FUN(...future.X_jj, ...)
[17:40:29.182]                           })
[17:40:29.182]                       }
[17:40:29.182]                     }, args = future.call.arguments)
[17:40:29.182]                   }
[17:40:29.182]                 }, immediateCondition = function(cond) {
[17:40:29.182]                   save_rds <- function (object, pathname, ...) 
[17:40:29.182]                   {
[17:40:29.182]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:29.182]                     if (file_test("-f", pathname_tmp)) {
[17:40:29.182]                       fi_tmp <- file.info(pathname_tmp)
[17:40:29.182]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:29.182]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:29.182]                         fi_tmp[["mtime"]])
[17:40:29.182]                     }
[17:40:29.182]                     tryCatch({
[17:40:29.182]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:29.182]                     }, error = function(ex) {
[17:40:29.182]                       msg <- conditionMessage(ex)
[17:40:29.182]                       fi_tmp <- file.info(pathname_tmp)
[17:40:29.182]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:29.182]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:29.182]                         fi_tmp[["mtime"]], msg)
[17:40:29.182]                       ex$message <- msg
[17:40:29.182]                       stop(ex)
[17:40:29.182]                     })
[17:40:29.182]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:29.182]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:29.182]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:29.182]                       fi_tmp <- file.info(pathname_tmp)
[17:40:29.182]                       fi <- file.info(pathname)
[17:40:29.182]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:29.182]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:29.182]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:29.182]                         fi[["size"]], fi[["mtime"]])
[17:40:29.182]                       stop(msg)
[17:40:29.182]                     }
[17:40:29.182]                     invisible(pathname)
[17:40:29.182]                   }
[17:40:29.182]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:29.182]                     rootPath = tempdir()) 
[17:40:29.182]                   {
[17:40:29.182]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:29.182]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:29.182]                       tmpdir = path, fileext = ".rds")
[17:40:29.182]                     save_rds(obj, file)
[17:40:29.182]                   }
[17:40:29.182]                   saveImmediateCondition(cond, path = "/tmp/RtmpYOEZWb/.future/immediateConditions")
[17:40:29.182]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:29.182]                   {
[17:40:29.182]                     inherits <- base::inherits
[17:40:29.182]                     invokeRestart <- base::invokeRestart
[17:40:29.182]                     is.null <- base::is.null
[17:40:29.182]                     muffled <- FALSE
[17:40:29.182]                     if (inherits(cond, "message")) {
[17:40:29.182]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:29.182]                       if (muffled) 
[17:40:29.182]                         invokeRestart("muffleMessage")
[17:40:29.182]                     }
[17:40:29.182]                     else if (inherits(cond, "warning")) {
[17:40:29.182]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:29.182]                       if (muffled) 
[17:40:29.182]                         invokeRestart("muffleWarning")
[17:40:29.182]                     }
[17:40:29.182]                     else if (inherits(cond, "condition")) {
[17:40:29.182]                       if (!is.null(pattern)) {
[17:40:29.182]                         computeRestarts <- base::computeRestarts
[17:40:29.182]                         grepl <- base::grepl
[17:40:29.182]                         restarts <- computeRestarts(cond)
[17:40:29.182]                         for (restart in restarts) {
[17:40:29.182]                           name <- restart$name
[17:40:29.182]                           if (is.null(name)) 
[17:40:29.182]                             next
[17:40:29.182]                           if (!grepl(pattern, name)) 
[17:40:29.182]                             next
[17:40:29.182]                           invokeRestart(restart)
[17:40:29.182]                           muffled <- TRUE
[17:40:29.182]                           break
[17:40:29.182]                         }
[17:40:29.182]                       }
[17:40:29.182]                     }
[17:40:29.182]                     invisible(muffled)
[17:40:29.182]                   }
[17:40:29.182]                   muffleCondition(cond)
[17:40:29.182]                 })
[17:40:29.182]             }))
[17:40:29.182]             future::FutureResult(value = ...future.value$value, 
[17:40:29.182]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:29.182]                   ...future.rng), globalenv = if (FALSE) 
[17:40:29.182]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:29.182]                     ...future.globalenv.names))
[17:40:29.182]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:29.182]         }, condition = base::local({
[17:40:29.182]             c <- base::c
[17:40:29.182]             inherits <- base::inherits
[17:40:29.182]             invokeRestart <- base::invokeRestart
[17:40:29.182]             length <- base::length
[17:40:29.182]             list <- base::list
[17:40:29.182]             seq.int <- base::seq.int
[17:40:29.182]             signalCondition <- base::signalCondition
[17:40:29.182]             sys.calls <- base::sys.calls
[17:40:29.182]             `[[` <- base::`[[`
[17:40:29.182]             `+` <- base::`+`
[17:40:29.182]             `<<-` <- base::`<<-`
[17:40:29.182]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:29.182]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:29.182]                   3L)]
[17:40:29.182]             }
[17:40:29.182]             function(cond) {
[17:40:29.182]                 is_error <- inherits(cond, "error")
[17:40:29.182]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:29.182]                   NULL)
[17:40:29.182]                 if (is_error) {
[17:40:29.182]                   sessionInformation <- function() {
[17:40:29.182]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:29.182]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:29.182]                       search = base::search(), system = base::Sys.info())
[17:40:29.182]                   }
[17:40:29.182]                   ...future.conditions[[length(...future.conditions) + 
[17:40:29.182]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:29.182]                     cond$call), session = sessionInformation(), 
[17:40:29.182]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:29.182]                   signalCondition(cond)
[17:40:29.182]                 }
[17:40:29.182]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:29.182]                 "immediateCondition"))) {
[17:40:29.182]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:29.182]                   ...future.conditions[[length(...future.conditions) + 
[17:40:29.182]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:29.182]                   if (TRUE && !signal) {
[17:40:29.182]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:29.182]                     {
[17:40:29.182]                       inherits <- base::inherits
[17:40:29.182]                       invokeRestart <- base::invokeRestart
[17:40:29.182]                       is.null <- base::is.null
[17:40:29.182]                       muffled <- FALSE
[17:40:29.182]                       if (inherits(cond, "message")) {
[17:40:29.182]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:29.182]                         if (muffled) 
[17:40:29.182]                           invokeRestart("muffleMessage")
[17:40:29.182]                       }
[17:40:29.182]                       else if (inherits(cond, "warning")) {
[17:40:29.182]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:29.182]                         if (muffled) 
[17:40:29.182]                           invokeRestart("muffleWarning")
[17:40:29.182]                       }
[17:40:29.182]                       else if (inherits(cond, "condition")) {
[17:40:29.182]                         if (!is.null(pattern)) {
[17:40:29.182]                           computeRestarts <- base::computeRestarts
[17:40:29.182]                           grepl <- base::grepl
[17:40:29.182]                           restarts <- computeRestarts(cond)
[17:40:29.182]                           for (restart in restarts) {
[17:40:29.182]                             name <- restart$name
[17:40:29.182]                             if (is.null(name)) 
[17:40:29.182]                               next
[17:40:29.182]                             if (!grepl(pattern, name)) 
[17:40:29.182]                               next
[17:40:29.182]                             invokeRestart(restart)
[17:40:29.182]                             muffled <- TRUE
[17:40:29.182]                             break
[17:40:29.182]                           }
[17:40:29.182]                         }
[17:40:29.182]                       }
[17:40:29.182]                       invisible(muffled)
[17:40:29.182]                     }
[17:40:29.182]                     muffleCondition(cond, pattern = "^muffle")
[17:40:29.182]                   }
[17:40:29.182]                 }
[17:40:29.182]                 else {
[17:40:29.182]                   if (TRUE) {
[17:40:29.182]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:29.182]                     {
[17:40:29.182]                       inherits <- base::inherits
[17:40:29.182]                       invokeRestart <- base::invokeRestart
[17:40:29.182]                       is.null <- base::is.null
[17:40:29.182]                       muffled <- FALSE
[17:40:29.182]                       if (inherits(cond, "message")) {
[17:40:29.182]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:29.182]                         if (muffled) 
[17:40:29.182]                           invokeRestart("muffleMessage")
[17:40:29.182]                       }
[17:40:29.182]                       else if (inherits(cond, "warning")) {
[17:40:29.182]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:29.182]                         if (muffled) 
[17:40:29.182]                           invokeRestart("muffleWarning")
[17:40:29.182]                       }
[17:40:29.182]                       else if (inherits(cond, "condition")) {
[17:40:29.182]                         if (!is.null(pattern)) {
[17:40:29.182]                           computeRestarts <- base::computeRestarts
[17:40:29.182]                           grepl <- base::grepl
[17:40:29.182]                           restarts <- computeRestarts(cond)
[17:40:29.182]                           for (restart in restarts) {
[17:40:29.182]                             name <- restart$name
[17:40:29.182]                             if (is.null(name)) 
[17:40:29.182]                               next
[17:40:29.182]                             if (!grepl(pattern, name)) 
[17:40:29.182]                               next
[17:40:29.182]                             invokeRestart(restart)
[17:40:29.182]                             muffled <- TRUE
[17:40:29.182]                             break
[17:40:29.182]                           }
[17:40:29.182]                         }
[17:40:29.182]                       }
[17:40:29.182]                       invisible(muffled)
[17:40:29.182]                     }
[17:40:29.182]                     muffleCondition(cond, pattern = "^muffle")
[17:40:29.182]                   }
[17:40:29.182]                 }
[17:40:29.182]             }
[17:40:29.182]         }))
[17:40:29.182]     }, error = function(ex) {
[17:40:29.182]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:29.182]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:29.182]                 ...future.rng), started = ...future.startTime, 
[17:40:29.182]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:29.182]             version = "1.8"), class = "FutureResult")
[17:40:29.182]     }, finally = {
[17:40:29.182]         if (!identical(...future.workdir, getwd())) 
[17:40:29.182]             setwd(...future.workdir)
[17:40:29.182]         {
[17:40:29.182]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:29.182]                 ...future.oldOptions$nwarnings <- NULL
[17:40:29.182]             }
[17:40:29.182]             base::options(...future.oldOptions)
[17:40:29.182]             if (.Platform$OS.type == "windows") {
[17:40:29.182]                 old_names <- names(...future.oldEnvVars)
[17:40:29.182]                 envs <- base::Sys.getenv()
[17:40:29.182]                 names <- names(envs)
[17:40:29.182]                 common <- intersect(names, old_names)
[17:40:29.182]                 added <- setdiff(names, old_names)
[17:40:29.182]                 removed <- setdiff(old_names, names)
[17:40:29.182]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:29.182]                   envs[common]]
[17:40:29.182]                 NAMES <- toupper(changed)
[17:40:29.182]                 args <- list()
[17:40:29.182]                 for (kk in seq_along(NAMES)) {
[17:40:29.182]                   name <- changed[[kk]]
[17:40:29.182]                   NAME <- NAMES[[kk]]
[17:40:29.182]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:29.182]                     next
[17:40:29.182]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:29.182]                 }
[17:40:29.182]                 NAMES <- toupper(added)
[17:40:29.182]                 for (kk in seq_along(NAMES)) {
[17:40:29.182]                   name <- added[[kk]]
[17:40:29.182]                   NAME <- NAMES[[kk]]
[17:40:29.182]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:29.182]                     next
[17:40:29.182]                   args[[name]] <- ""
[17:40:29.182]                 }
[17:40:29.182]                 NAMES <- toupper(removed)
[17:40:29.182]                 for (kk in seq_along(NAMES)) {
[17:40:29.182]                   name <- removed[[kk]]
[17:40:29.182]                   NAME <- NAMES[[kk]]
[17:40:29.182]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:29.182]                     next
[17:40:29.182]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:29.182]                 }
[17:40:29.182]                 if (length(args) > 0) 
[17:40:29.182]                   base::do.call(base::Sys.setenv, args = args)
[17:40:29.182]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:29.182]             }
[17:40:29.182]             else {
[17:40:29.182]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:29.182]             }
[17:40:29.182]             {
[17:40:29.182]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:29.182]                   0L) {
[17:40:29.182]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:29.182]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:29.182]                   base::options(opts)
[17:40:29.182]                 }
[17:40:29.182]                 {
[17:40:29.182]                   {
[17:40:29.182]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:29.182]                     NULL
[17:40:29.182]                   }
[17:40:29.182]                   options(future.plan = NULL)
[17:40:29.182]                   if (is.na(NA_character_)) 
[17:40:29.182]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:29.182]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:29.182]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:40:29.182]                     envir = parent.frame()) 
[17:40:29.182]                   {
[17:40:29.182]                     default_workers <- missing(workers)
[17:40:29.182]                     if (is.function(workers)) 
[17:40:29.182]                       workers <- workers()
[17:40:29.182]                     workers <- structure(as.integer(workers), 
[17:40:29.182]                       class = class(workers))
[17:40:29.182]                     stop_if_not(is.finite(workers), workers >= 
[17:40:29.182]                       1L)
[17:40:29.182]                     if ((workers == 1L && !inherits(workers, 
[17:40:29.182]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:40:29.182]                       if (default_workers) 
[17:40:29.182]                         supportsMulticore(warn = TRUE)
[17:40:29.182]                       return(sequential(..., envir = envir))
[17:40:29.182]                     }
[17:40:29.182]                     oopts <- options(mc.cores = workers)
[17:40:29.182]                     on.exit(options(oopts))
[17:40:29.182]                     future <- MulticoreFuture(..., workers = workers, 
[17:40:29.182]                       envir = envir)
[17:40:29.182]                     if (!future$lazy) 
[17:40:29.182]                       future <- run(future)
[17:40:29.182]                     invisible(future)
[17:40:29.182]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:29.182]                 }
[17:40:29.182]             }
[17:40:29.182]         }
[17:40:29.182]     })
[17:40:29.182]     if (TRUE) {
[17:40:29.182]         base::sink(type = "output", split = FALSE)
[17:40:29.182]         if (TRUE) {
[17:40:29.182]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:29.182]         }
[17:40:29.182]         else {
[17:40:29.182]             ...future.result["stdout"] <- base::list(NULL)
[17:40:29.182]         }
[17:40:29.182]         base::close(...future.stdout)
[17:40:29.182]         ...future.stdout <- NULL
[17:40:29.182]     }
[17:40:29.182]     ...future.result$conditions <- ...future.conditions
[17:40:29.182]     ...future.result$finished <- base::Sys.time()
[17:40:29.182]     ...future.result
[17:40:29.182] }
[17:40:29.185] assign_globals() ...
[17:40:29.185] List of 5
[17:40:29.185]  $ ...future.FUN            :function (...)  
[17:40:29.185]  $ future.call.arguments    : list()
[17:40:29.185]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:29.185]  $ ...future.elements_ii    :List of 2
[17:40:29.185]   ..$ : int 0
[17:40:29.185]   ..$ : int 0
[17:40:29.185]  $ ...future.seeds_ii       :List of 2
[17:40:29.185]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[17:40:29.185]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[17:40:29.185]  $ ...future.globals.maxSize: NULL
[17:40:29.185]  - attr(*, "resolved")= logi FALSE
[17:40:29.185]  - attr(*, "total_size")= num 616
[17:40:29.185]  - attr(*, "where")=List of 5
[17:40:29.185]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:40:29.185]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:40:29.185]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:40:29.185]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:40:29.185]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:40:29.185]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:29.185]  - attr(*, "already-done")= logi TRUE
[17:40:29.191] - reassign environment for ‘...future.FUN’
[17:40:29.191] - copied ‘...future.FUN’ to environment
[17:40:29.191] - copied ‘future.call.arguments’ to environment
[17:40:29.191] - copied ‘...future.elements_ii’ to environment
[17:40:29.191] - copied ‘...future.seeds_ii’ to environment
[17:40:29.191] - copied ‘...future.globals.maxSize’ to environment
[17:40:29.192] assign_globals() ... done
[17:40:29.192] requestCore(): workers = 2
[17:40:29.194] MulticoreFuture started
[17:40:29.194] - Launch lazy future ... done
[17:40:29.194] run() for ‘MulticoreFuture’ ... done
[17:40:29.195] Created future:
[17:40:29.195] plan(): Setting new future strategy stack:
[17:40:29.195] List of future strategies:
[17:40:29.195] 1. sequential:
[17:40:29.195]    - args: function (..., envir = parent.frame())
[17:40:29.195]    - tweaked: FALSE
[17:40:29.195]    - call: NULL
[17:40:29.196] plan(): nbrOfWorkers() = 1
[17:40:29.201] plan(): Setting new future strategy stack:
[17:40:29.201] List of future strategies:
[17:40:29.201] 1. multicore:
[17:40:29.201]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:29.201]    - tweaked: FALSE
[17:40:29.201]    - call: plan(strategy)
[17:40:29.208] plan(): nbrOfWorkers() = 2
[17:40:29.195] MulticoreFuture:
[17:40:29.195] Label: ‘future_replicate-1’
[17:40:29.195] Expression:
[17:40:29.195] {
[17:40:29.195]     do.call(function(...) {
[17:40:29.195]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:29.195]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:29.195]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:29.195]             on.exit(options(oopts), add = TRUE)
[17:40:29.195]         }
[17:40:29.195]         {
[17:40:29.195]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:29.195]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:29.195]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:29.195]                   envir = globalenv(), inherits = FALSE)
[17:40:29.195]                 ...future.FUN(...future.X_jj, ...)
[17:40:29.195]             })
[17:40:29.195]         }
[17:40:29.195]     }, args = future.call.arguments)
[17:40:29.195] }
[17:40:29.195] Lazy evaluation: FALSE
[17:40:29.195] Asynchronous evaluation: TRUE
[17:40:29.195] Local evaluation: TRUE
[17:40:29.195] Environment: R_GlobalEnv
[17:40:29.195] Capture standard output: TRUE
[17:40:29.195] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:29.195] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:29.195] Packages: <none>
[17:40:29.195] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:29.195] Resolved: TRUE
[17:40:29.195] Value: <not collected>
[17:40:29.195] Conditions captured: <none>
[17:40:29.195] Early signaling: FALSE
[17:40:29.195] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:29.195] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:29.209] Chunk #1 of 2 ... DONE
[17:40:29.210] Chunk #2 of 2 ...
[17:40:29.210]  - Finding globals in 'X' for chunk #2 ...
[17:40:29.210] getGlobalsAndPackages() ...
[17:40:29.210] Searching for globals...
[17:40:29.211] 
[17:40:29.211] Searching for globals ... DONE
[17:40:29.211] - globals: [0] <none>
[17:40:29.212] getGlobalsAndPackages() ... DONE
[17:40:29.212]    + additional globals found: [n=0] 
[17:40:29.212]    + additional namespaces needed: [n=0] 
[17:40:29.212]  - Finding globals in 'X' for chunk #2 ... DONE
[17:40:29.212]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[17:40:29.213]  - seeds: [3] <seeds>
[17:40:29.213] getGlobalsAndPackages() ...
[17:40:29.213] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:29.213] Resolving globals: FALSE
[17:40:29.214] Tweak future expression to call with '...' arguments ...
[17:40:29.214] {
[17:40:29.214]     do.call(function(...) {
[17:40:29.214]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:29.214]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:29.214]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:29.214]             on.exit(options(oopts), add = TRUE)
[17:40:29.214]         }
[17:40:29.214]         {
[17:40:29.214]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:29.214]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:29.214]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:29.214]                   envir = globalenv(), inherits = FALSE)
[17:40:29.214]                 ...future.FUN(...future.X_jj, ...)
[17:40:29.214]             })
[17:40:29.214]         }
[17:40:29.214]     }, args = future.call.arguments)
[17:40:29.214] }
[17:40:29.214] Tweak future expression to call with '...' arguments ... DONE
[17:40:29.215] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:29.215] 
[17:40:29.215] getGlobalsAndPackages() ... DONE
[17:40:29.216] run() for ‘Future’ ...
[17:40:29.216] - state: ‘created’
[17:40:29.216] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:40:29.221] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:29.221] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:40:29.221]   - Field: ‘label’
[17:40:29.221]   - Field: ‘local’
[17:40:29.222]   - Field: ‘owner’
[17:40:29.222]   - Field: ‘envir’
[17:40:29.222]   - Field: ‘workers’
[17:40:29.222]   - Field: ‘packages’
[17:40:29.222]   - Field: ‘gc’
[17:40:29.222]   - Field: ‘job’
[17:40:29.223]   - Field: ‘conditions’
[17:40:29.223]   - Field: ‘expr’
[17:40:29.223]   - Field: ‘uuid’
[17:40:29.223]   - Field: ‘seed’
[17:40:29.223]   - Field: ‘version’
[17:40:29.223]   - Field: ‘result’
[17:40:29.224]   - Field: ‘asynchronous’
[17:40:29.224]   - Field: ‘calls’
[17:40:29.224]   - Field: ‘globals’
[17:40:29.224]   - Field: ‘stdout’
[17:40:29.224]   - Field: ‘earlySignal’
[17:40:29.224]   - Field: ‘lazy’
[17:40:29.224]   - Field: ‘state’
[17:40:29.224] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:40:29.225] - Launch lazy future ...
[17:40:29.225] Packages needed by the future expression (n = 0): <none>
[17:40:29.225] Packages needed by future strategies (n = 0): <none>
[17:40:29.226] {
[17:40:29.226]     {
[17:40:29.226]         {
[17:40:29.226]             ...future.startTime <- base::Sys.time()
[17:40:29.226]             {
[17:40:29.226]                 {
[17:40:29.226]                   {
[17:40:29.226]                     {
[17:40:29.226]                       base::local({
[17:40:29.226]                         has_future <- base::requireNamespace("future", 
[17:40:29.226]                           quietly = TRUE)
[17:40:29.226]                         if (has_future) {
[17:40:29.226]                           ns <- base::getNamespace("future")
[17:40:29.226]                           version <- ns[[".package"]][["version"]]
[17:40:29.226]                           if (is.null(version)) 
[17:40:29.226]                             version <- utils::packageVersion("future")
[17:40:29.226]                         }
[17:40:29.226]                         else {
[17:40:29.226]                           version <- NULL
[17:40:29.226]                         }
[17:40:29.226]                         if (!has_future || version < "1.8.0") {
[17:40:29.226]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:29.226]                             "", base::R.version$version.string), 
[17:40:29.226]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:29.226]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:29.226]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:29.226]                               "release", "version")], collapse = " "), 
[17:40:29.226]                             hostname = base::Sys.info()[["nodename"]])
[17:40:29.226]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:29.226]                             info)
[17:40:29.226]                           info <- base::paste(info, collapse = "; ")
[17:40:29.226]                           if (!has_future) {
[17:40:29.226]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:29.226]                               info)
[17:40:29.226]                           }
[17:40:29.226]                           else {
[17:40:29.226]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:29.226]                               info, version)
[17:40:29.226]                           }
[17:40:29.226]                           base::stop(msg)
[17:40:29.226]                         }
[17:40:29.226]                       })
[17:40:29.226]                     }
[17:40:29.226]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:29.226]                     base::options(mc.cores = 1L)
[17:40:29.226]                   }
[17:40:29.226]                   options(future.plan = NULL)
[17:40:29.226]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:29.226]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:29.226]                 }
[17:40:29.226]                 ...future.workdir <- getwd()
[17:40:29.226]             }
[17:40:29.226]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:29.226]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:29.226]         }
[17:40:29.226]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:29.226]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[17:40:29.226]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:29.226]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:29.226]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:29.226]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:29.226]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:29.226]             base::names(...future.oldOptions))
[17:40:29.226]     }
[17:40:29.226]     if (FALSE) {
[17:40:29.226]     }
[17:40:29.226]     else {
[17:40:29.226]         if (TRUE) {
[17:40:29.226]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:29.226]                 open = "w")
[17:40:29.226]         }
[17:40:29.226]         else {
[17:40:29.226]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:29.226]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:29.226]         }
[17:40:29.226]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:29.226]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:29.226]             base::sink(type = "output", split = FALSE)
[17:40:29.226]             base::close(...future.stdout)
[17:40:29.226]         }, add = TRUE)
[17:40:29.226]     }
[17:40:29.226]     ...future.frame <- base::sys.nframe()
[17:40:29.226]     ...future.conditions <- base::list()
[17:40:29.226]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:29.226]     if (FALSE) {
[17:40:29.226]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:29.226]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:29.226]     }
[17:40:29.226]     ...future.result <- base::tryCatch({
[17:40:29.226]         base::withCallingHandlers({
[17:40:29.226]             ...future.value <- base::withVisible(base::local({
[17:40:29.226]                 withCallingHandlers({
[17:40:29.226]                   {
[17:40:29.226]                     do.call(function(...) {
[17:40:29.226]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:29.226]                       if (!identical(...future.globals.maxSize.org, 
[17:40:29.226]                         ...future.globals.maxSize)) {
[17:40:29.226]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:29.226]                         on.exit(options(oopts), add = TRUE)
[17:40:29.226]                       }
[17:40:29.226]                       {
[17:40:29.226]                         lapply(seq_along(...future.elements_ii), 
[17:40:29.226]                           FUN = function(jj) {
[17:40:29.226]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:29.226]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:29.226]                               envir = globalenv(), inherits = FALSE)
[17:40:29.226]                             ...future.FUN(...future.X_jj, ...)
[17:40:29.226]                           })
[17:40:29.226]                       }
[17:40:29.226]                     }, args = future.call.arguments)
[17:40:29.226]                   }
[17:40:29.226]                 }, immediateCondition = function(cond) {
[17:40:29.226]                   save_rds <- function (object, pathname, ...) 
[17:40:29.226]                   {
[17:40:29.226]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:29.226]                     if (file_test("-f", pathname_tmp)) {
[17:40:29.226]                       fi_tmp <- file.info(pathname_tmp)
[17:40:29.226]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:29.226]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:29.226]                         fi_tmp[["mtime"]])
[17:40:29.226]                     }
[17:40:29.226]                     tryCatch({
[17:40:29.226]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:29.226]                     }, error = function(ex) {
[17:40:29.226]                       msg <- conditionMessage(ex)
[17:40:29.226]                       fi_tmp <- file.info(pathname_tmp)
[17:40:29.226]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:29.226]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:29.226]                         fi_tmp[["mtime"]], msg)
[17:40:29.226]                       ex$message <- msg
[17:40:29.226]                       stop(ex)
[17:40:29.226]                     })
[17:40:29.226]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:29.226]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:29.226]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:29.226]                       fi_tmp <- file.info(pathname_tmp)
[17:40:29.226]                       fi <- file.info(pathname)
[17:40:29.226]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:29.226]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:29.226]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:29.226]                         fi[["size"]], fi[["mtime"]])
[17:40:29.226]                       stop(msg)
[17:40:29.226]                     }
[17:40:29.226]                     invisible(pathname)
[17:40:29.226]                   }
[17:40:29.226]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:29.226]                     rootPath = tempdir()) 
[17:40:29.226]                   {
[17:40:29.226]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:29.226]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:29.226]                       tmpdir = path, fileext = ".rds")
[17:40:29.226]                     save_rds(obj, file)
[17:40:29.226]                   }
[17:40:29.226]                   saveImmediateCondition(cond, path = "/tmp/RtmpYOEZWb/.future/immediateConditions")
[17:40:29.226]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:29.226]                   {
[17:40:29.226]                     inherits <- base::inherits
[17:40:29.226]                     invokeRestart <- base::invokeRestart
[17:40:29.226]                     is.null <- base::is.null
[17:40:29.226]                     muffled <- FALSE
[17:40:29.226]                     if (inherits(cond, "message")) {
[17:40:29.226]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:29.226]                       if (muffled) 
[17:40:29.226]                         invokeRestart("muffleMessage")
[17:40:29.226]                     }
[17:40:29.226]                     else if (inherits(cond, "warning")) {
[17:40:29.226]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:29.226]                       if (muffled) 
[17:40:29.226]                         invokeRestart("muffleWarning")
[17:40:29.226]                     }
[17:40:29.226]                     else if (inherits(cond, "condition")) {
[17:40:29.226]                       if (!is.null(pattern)) {
[17:40:29.226]                         computeRestarts <- base::computeRestarts
[17:40:29.226]                         grepl <- base::grepl
[17:40:29.226]                         restarts <- computeRestarts(cond)
[17:40:29.226]                         for (restart in restarts) {
[17:40:29.226]                           name <- restart$name
[17:40:29.226]                           if (is.null(name)) 
[17:40:29.226]                             next
[17:40:29.226]                           if (!grepl(pattern, name)) 
[17:40:29.226]                             next
[17:40:29.226]                           invokeRestart(restart)
[17:40:29.226]                           muffled <- TRUE
[17:40:29.226]                           break
[17:40:29.226]                         }
[17:40:29.226]                       }
[17:40:29.226]                     }
[17:40:29.226]                     invisible(muffled)
[17:40:29.226]                   }
[17:40:29.226]                   muffleCondition(cond)
[17:40:29.226]                 })
[17:40:29.226]             }))
[17:40:29.226]             future::FutureResult(value = ...future.value$value, 
[17:40:29.226]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:29.226]                   ...future.rng), globalenv = if (FALSE) 
[17:40:29.226]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:29.226]                     ...future.globalenv.names))
[17:40:29.226]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:29.226]         }, condition = base::local({
[17:40:29.226]             c <- base::c
[17:40:29.226]             inherits <- base::inherits
[17:40:29.226]             invokeRestart <- base::invokeRestart
[17:40:29.226]             length <- base::length
[17:40:29.226]             list <- base::list
[17:40:29.226]             seq.int <- base::seq.int
[17:40:29.226]             signalCondition <- base::signalCondition
[17:40:29.226]             sys.calls <- base::sys.calls
[17:40:29.226]             `[[` <- base::`[[`
[17:40:29.226]             `+` <- base::`+`
[17:40:29.226]             `<<-` <- base::`<<-`
[17:40:29.226]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:29.226]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:29.226]                   3L)]
[17:40:29.226]             }
[17:40:29.226]             function(cond) {
[17:40:29.226]                 is_error <- inherits(cond, "error")
[17:40:29.226]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:29.226]                   NULL)
[17:40:29.226]                 if (is_error) {
[17:40:29.226]                   sessionInformation <- function() {
[17:40:29.226]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:29.226]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:29.226]                       search = base::search(), system = base::Sys.info())
[17:40:29.226]                   }
[17:40:29.226]                   ...future.conditions[[length(...future.conditions) + 
[17:40:29.226]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:29.226]                     cond$call), session = sessionInformation(), 
[17:40:29.226]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:29.226]                   signalCondition(cond)
[17:40:29.226]                 }
[17:40:29.226]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:29.226]                 "immediateCondition"))) {
[17:40:29.226]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:29.226]                   ...future.conditions[[length(...future.conditions) + 
[17:40:29.226]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:29.226]                   if (TRUE && !signal) {
[17:40:29.226]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:29.226]                     {
[17:40:29.226]                       inherits <- base::inherits
[17:40:29.226]                       invokeRestart <- base::invokeRestart
[17:40:29.226]                       is.null <- base::is.null
[17:40:29.226]                       muffled <- FALSE
[17:40:29.226]                       if (inherits(cond, "message")) {
[17:40:29.226]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:29.226]                         if (muffled) 
[17:40:29.226]                           invokeRestart("muffleMessage")
[17:40:29.226]                       }
[17:40:29.226]                       else if (inherits(cond, "warning")) {
[17:40:29.226]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:29.226]                         if (muffled) 
[17:40:29.226]                           invokeRestart("muffleWarning")
[17:40:29.226]                       }
[17:40:29.226]                       else if (inherits(cond, "condition")) {
[17:40:29.226]                         if (!is.null(pattern)) {
[17:40:29.226]                           computeRestarts <- base::computeRestarts
[17:40:29.226]                           grepl <- base::grepl
[17:40:29.226]                           restarts <- computeRestarts(cond)
[17:40:29.226]                           for (restart in restarts) {
[17:40:29.226]                             name <- restart$name
[17:40:29.226]                             if (is.null(name)) 
[17:40:29.226]                               next
[17:40:29.226]                             if (!grepl(pattern, name)) 
[17:40:29.226]                               next
[17:40:29.226]                             invokeRestart(restart)
[17:40:29.226]                             muffled <- TRUE
[17:40:29.226]                             break
[17:40:29.226]                           }
[17:40:29.226]                         }
[17:40:29.226]                       }
[17:40:29.226]                       invisible(muffled)
[17:40:29.226]                     }
[17:40:29.226]                     muffleCondition(cond, pattern = "^muffle")
[17:40:29.226]                   }
[17:40:29.226]                 }
[17:40:29.226]                 else {
[17:40:29.226]                   if (TRUE) {
[17:40:29.226]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:29.226]                     {
[17:40:29.226]                       inherits <- base::inherits
[17:40:29.226]                       invokeRestart <- base::invokeRestart
[17:40:29.226]                       is.null <- base::is.null
[17:40:29.226]                       muffled <- FALSE
[17:40:29.226]                       if (inherits(cond, "message")) {
[17:40:29.226]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:29.226]                         if (muffled) 
[17:40:29.226]                           invokeRestart("muffleMessage")
[17:40:29.226]                       }
[17:40:29.226]                       else if (inherits(cond, "warning")) {
[17:40:29.226]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:29.226]                         if (muffled) 
[17:40:29.226]                           invokeRestart("muffleWarning")
[17:40:29.226]                       }
[17:40:29.226]                       else if (inherits(cond, "condition")) {
[17:40:29.226]                         if (!is.null(pattern)) {
[17:40:29.226]                           computeRestarts <- base::computeRestarts
[17:40:29.226]                           grepl <- base::grepl
[17:40:29.226]                           restarts <- computeRestarts(cond)
[17:40:29.226]                           for (restart in restarts) {
[17:40:29.226]                             name <- restart$name
[17:40:29.226]                             if (is.null(name)) 
[17:40:29.226]                               next
[17:40:29.226]                             if (!grepl(pattern, name)) 
[17:40:29.226]                               next
[17:40:29.226]                             invokeRestart(restart)
[17:40:29.226]                             muffled <- TRUE
[17:40:29.226]                             break
[17:40:29.226]                           }
[17:40:29.226]                         }
[17:40:29.226]                       }
[17:40:29.226]                       invisible(muffled)
[17:40:29.226]                     }
[17:40:29.226]                     muffleCondition(cond, pattern = "^muffle")
[17:40:29.226]                   }
[17:40:29.226]                 }
[17:40:29.226]             }
[17:40:29.226]         }))
[17:40:29.226]     }, error = function(ex) {
[17:40:29.226]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:29.226]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:29.226]                 ...future.rng), started = ...future.startTime, 
[17:40:29.226]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:29.226]             version = "1.8"), class = "FutureResult")
[17:40:29.226]     }, finally = {
[17:40:29.226]         if (!identical(...future.workdir, getwd())) 
[17:40:29.226]             setwd(...future.workdir)
[17:40:29.226]         {
[17:40:29.226]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:29.226]                 ...future.oldOptions$nwarnings <- NULL
[17:40:29.226]             }
[17:40:29.226]             base::options(...future.oldOptions)
[17:40:29.226]             if (.Platform$OS.type == "windows") {
[17:40:29.226]                 old_names <- names(...future.oldEnvVars)
[17:40:29.226]                 envs <- base::Sys.getenv()
[17:40:29.226]                 names <- names(envs)
[17:40:29.226]                 common <- intersect(names, old_names)
[17:40:29.226]                 added <- setdiff(names, old_names)
[17:40:29.226]                 removed <- setdiff(old_names, names)
[17:40:29.226]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:29.226]                   envs[common]]
[17:40:29.226]                 NAMES <- toupper(changed)
[17:40:29.226]                 args <- list()
[17:40:29.226]                 for (kk in seq_along(NAMES)) {
[17:40:29.226]                   name <- changed[[kk]]
[17:40:29.226]                   NAME <- NAMES[[kk]]
[17:40:29.226]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:29.226]                     next
[17:40:29.226]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:29.226]                 }
[17:40:29.226]                 NAMES <- toupper(added)
[17:40:29.226]                 for (kk in seq_along(NAMES)) {
[17:40:29.226]                   name <- added[[kk]]
[17:40:29.226]                   NAME <- NAMES[[kk]]
[17:40:29.226]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:29.226]                     next
[17:40:29.226]                   args[[name]] <- ""
[17:40:29.226]                 }
[17:40:29.226]                 NAMES <- toupper(removed)
[17:40:29.226]                 for (kk in seq_along(NAMES)) {
[17:40:29.226]                   name <- removed[[kk]]
[17:40:29.226]                   NAME <- NAMES[[kk]]
[17:40:29.226]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:29.226]                     next
[17:40:29.226]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:29.226]                 }
[17:40:29.226]                 if (length(args) > 0) 
[17:40:29.226]                   base::do.call(base::Sys.setenv, args = args)
[17:40:29.226]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:29.226]             }
[17:40:29.226]             else {
[17:40:29.226]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:29.226]             }
[17:40:29.226]             {
[17:40:29.226]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:29.226]                   0L) {
[17:40:29.226]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:29.226]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:29.226]                   base::options(opts)
[17:40:29.226]                 }
[17:40:29.226]                 {
[17:40:29.226]                   {
[17:40:29.226]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:29.226]                     NULL
[17:40:29.226]                   }
[17:40:29.226]                   options(future.plan = NULL)
[17:40:29.226]                   if (is.na(NA_character_)) 
[17:40:29.226]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:29.226]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:29.226]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:40:29.226]                     envir = parent.frame()) 
[17:40:29.226]                   {
[17:40:29.226]                     default_workers <- missing(workers)
[17:40:29.226]                     if (is.function(workers)) 
[17:40:29.226]                       workers <- workers()
[17:40:29.226]                     workers <- structure(as.integer(workers), 
[17:40:29.226]                       class = class(workers))
[17:40:29.226]                     stop_if_not(is.finite(workers), workers >= 
[17:40:29.226]                       1L)
[17:40:29.226]                     if ((workers == 1L && !inherits(workers, 
[17:40:29.226]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:40:29.226]                       if (default_workers) 
[17:40:29.226]                         supportsMulticore(warn = TRUE)
[17:40:29.226]                       return(sequential(..., envir = envir))
[17:40:29.226]                     }
[17:40:29.226]                     oopts <- options(mc.cores = workers)
[17:40:29.226]                     on.exit(options(oopts))
[17:40:29.226]                     future <- MulticoreFuture(..., workers = workers, 
[17:40:29.226]                       envir = envir)
[17:40:29.226]                     if (!future$lazy) 
[17:40:29.226]                       future <- run(future)
[17:40:29.226]                     invisible(future)
[17:40:29.226]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:29.226]                 }
[17:40:29.226]             }
[17:40:29.226]         }
[17:40:29.226]     })
[17:40:29.226]     if (TRUE) {
[17:40:29.226]         base::sink(type = "output", split = FALSE)
[17:40:29.226]         if (TRUE) {
[17:40:29.226]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:29.226]         }
[17:40:29.226]         else {
[17:40:29.226]             ...future.result["stdout"] <- base::list(NULL)
[17:40:29.226]         }
[17:40:29.226]         base::close(...future.stdout)
[17:40:29.226]         ...future.stdout <- NULL
[17:40:29.226]     }
[17:40:29.226]     ...future.result$conditions <- ...future.conditions
[17:40:29.226]     ...future.result$finished <- base::Sys.time()
[17:40:29.226]     ...future.result
[17:40:29.226] }
[17:40:29.229] assign_globals() ...
[17:40:29.229] List of 5
[17:40:29.229]  $ ...future.FUN            :function (...)  
[17:40:29.229]  $ future.call.arguments    : list()
[17:40:29.229]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:29.229]  $ ...future.elements_ii    :List of 3
[17:40:29.229]   ..$ : int 0
[17:40:29.229]   ..$ : int 0
[17:40:29.229]   ..$ : int 0
[17:40:29.229]  $ ...future.seeds_ii       :List of 3
[17:40:29.229]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[17:40:29.229]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[17:40:29.229]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[17:40:29.229]  $ ...future.globals.maxSize: NULL
[17:40:29.229]  - attr(*, "resolved")= logi FALSE
[17:40:29.229]  - attr(*, "total_size")= num 616
[17:40:29.229]  - attr(*, "where")=List of 5
[17:40:29.229]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:40:29.229]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:40:29.229]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:40:29.229]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:40:29.229]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:40:29.229]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:29.229]  - attr(*, "already-done")= logi TRUE
[17:40:29.237] - reassign environment for ‘...future.FUN’
[17:40:29.237] - copied ‘...future.FUN’ to environment
[17:40:29.237] - copied ‘future.call.arguments’ to environment
[17:40:29.237] - copied ‘...future.elements_ii’ to environment
[17:40:29.238] - copied ‘...future.seeds_ii’ to environment
[17:40:29.238] - copied ‘...future.globals.maxSize’ to environment
[17:40:29.238] assign_globals() ... done
[17:40:29.238] requestCore(): workers = 2
[17:40:29.240] MulticoreFuture started
[17:40:29.241] - Launch lazy future ... done
[17:40:29.241] run() for ‘MulticoreFuture’ ... done
[17:40:29.241] Created future:
[17:40:29.241] plan(): Setting new future strategy stack:
[17:40:29.242] List of future strategies:
[17:40:29.242] 1. sequential:
[17:40:29.242]    - args: function (..., envir = parent.frame())
[17:40:29.242]    - tweaked: FALSE
[17:40:29.242]    - call: NULL
[17:40:29.243] plan(): nbrOfWorkers() = 1
[17:40:29.245] plan(): Setting new future strategy stack:
[17:40:29.245] List of future strategies:
[17:40:29.245] 1. multicore:
[17:40:29.245]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:29.245]    - tweaked: FALSE
[17:40:29.245]    - call: plan(strategy)
[17:40:29.250] plan(): nbrOfWorkers() = 2
[17:40:29.241] MulticoreFuture:
[17:40:29.241] Label: ‘future_replicate-2’
[17:40:29.241] Expression:
[17:40:29.241] {
[17:40:29.241]     do.call(function(...) {
[17:40:29.241]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:29.241]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:29.241]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:29.241]             on.exit(options(oopts), add = TRUE)
[17:40:29.241]         }
[17:40:29.241]         {
[17:40:29.241]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:29.241]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:29.241]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:29.241]                   envir = globalenv(), inherits = FALSE)
[17:40:29.241]                 ...future.FUN(...future.X_jj, ...)
[17:40:29.241]             })
[17:40:29.241]         }
[17:40:29.241]     }, args = future.call.arguments)
[17:40:29.241] }
[17:40:29.241] Lazy evaluation: FALSE
[17:40:29.241] Asynchronous evaluation: TRUE
[17:40:29.241] Local evaluation: TRUE
[17:40:29.241] Environment: R_GlobalEnv
[17:40:29.241] Capture standard output: TRUE
[17:40:29.241] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:29.241] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:29.241] Packages: <none>
[17:40:29.241] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:29.241] Resolved: TRUE
[17:40:29.241] Value: <not collected>
[17:40:29.241] Conditions captured: <none>
[17:40:29.241] Early signaling: FALSE
[17:40:29.241] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:29.241] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:29.251] Chunk #2 of 2 ... DONE
[17:40:29.251] Launching 2 futures (chunks) ... DONE
[17:40:29.252] Resolving 2 futures (chunks) ...
[17:40:29.252] resolve() on list ...
[17:40:29.252]  recursive: 0
[17:40:29.252]  length: 2
[17:40:29.252] 
[17:40:29.253] Future #1
[17:40:29.254] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:40:29.254] - nx: 2
[17:40:29.254] - relay: TRUE
[17:40:29.254] - stdout: TRUE
[17:40:29.254] - signal: TRUE
[17:40:29.254] - resignal: FALSE
[17:40:29.254] - force: TRUE
[17:40:29.255] - relayed: [n=2] FALSE, FALSE
[17:40:29.255] - queued futures: [n=2] FALSE, FALSE
[17:40:29.255]  - until=1
[17:40:29.255]  - relaying element #1
[17:40:29.255] - relayed: [n=2] TRUE, FALSE
[17:40:29.256] - queued futures: [n=2] TRUE, FALSE
[17:40:29.256] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:40:29.256]  length: 1 (resolved future 1)
[17:40:29.256] Future #2
[17:40:29.257] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:40:29.257] - nx: 2
[17:40:29.257] - relay: TRUE
[17:40:29.257] - stdout: TRUE
[17:40:29.258] - signal: TRUE
[17:40:29.258] - resignal: FALSE
[17:40:29.258] - force: TRUE
[17:40:29.258] - relayed: [n=2] TRUE, FALSE
[17:40:29.258] - queued futures: [n=2] TRUE, FALSE
[17:40:29.258]  - until=2
[17:40:29.258]  - relaying element #2
[17:40:29.259] - relayed: [n=2] TRUE, TRUE
[17:40:29.261] - queued futures: [n=2] TRUE, TRUE
[17:40:29.261] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:40:29.262]  length: 0 (resolved future 2)
[17:40:29.262] Relaying remaining futures
[17:40:29.262] signalConditionsASAP(NULL, pos=0) ...
[17:40:29.262] - nx: 2
[17:40:29.262] - relay: TRUE
[17:40:29.262] - stdout: TRUE
[17:40:29.263] - signal: TRUE
[17:40:29.263] - resignal: FALSE
[17:40:29.263] - force: TRUE
[17:40:29.263] - relayed: [n=2] TRUE, TRUE
[17:40:29.263] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:40:29.263] - relayed: [n=2] TRUE, TRUE
[17:40:29.264] - queued futures: [n=2] TRUE, TRUE
[17:40:29.264] signalConditionsASAP(NULL, pos=0) ... done
[17:40:29.264] resolve() on list ... DONE
[17:40:29.264]  - Number of value chunks collected: 2
[17:40:29.264] Resolving 2 futures (chunks) ... DONE
[17:40:29.265] Reducing values from 2 chunks ...
[17:40:29.265]  - Number of values collected after concatenation: 5
[17:40:29.265]  - Number of values expected: 5
[17:40:29.265] Reducing values from 2 chunks ... DONE
[17:40:29.265] future_lapply() ... DONE
- example(replicate) ...
[17:40:29.265] future_lapply() ...
[17:40:29.266] Generating random seeds ...
[17:40:29.266] Generating random seed streams for 5 elements ...
[17:40:29.267] Generating random seed streams for 5 elements ... DONE
[17:40:29.267] Generating random seeds ... DONE
[17:40:29.267] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:40:29.272] Number of chunks: 2
[17:40:29.272] getGlobalsAndPackagesXApply() ...
[17:40:29.272]  - future.globals: TRUE
[17:40:29.272] getGlobalsAndPackages() ...
[17:40:29.272] Searching for globals...
[17:40:29.274] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[17:40:29.274] Searching for globals ... DONE
[17:40:29.275] Resolving globals: FALSE
[17:40:29.275] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[17:40:29.276] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[17:40:29.276] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[17:40:29.276] 
[17:40:29.276] getGlobalsAndPackages() ... DONE
[17:40:29.276]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[17:40:29.276]  - needed namespaces: [n=0] 
[17:40:29.276] Finding globals ... DONE
[17:40:29.276]  - use_args: TRUE
[17:40:29.276]  - Getting '...' globals ...
[17:40:29.277] resolve() on list ...
[17:40:29.277]  recursive: 0
[17:40:29.277]  length: 1
[17:40:29.277]  elements: ‘...’
[17:40:29.277]  length: 0 (resolved future 1)
[17:40:29.277] resolve() on list ... DONE
[17:40:29.277]    - '...' content: [n=0] 
[17:40:29.278] List of 1
[17:40:29.278]  $ ...: list()
[17:40:29.278]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:29.278]  - attr(*, "where")=List of 1
[17:40:29.278]   ..$ ...:<environment: 0x558a3b34dd90> 
[17:40:29.278]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:29.278]  - attr(*, "resolved")= logi TRUE
[17:40:29.278]  - attr(*, "total_size")= num NA
[17:40:29.281]  - Getting '...' globals ... DONE
[17:40:29.281] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[17:40:29.281] List of 4
[17:40:29.281]  $ ...future.FUN:function (...)  
[17:40:29.281]  $ foo          :function (x = 1, y = 2)  
[17:40:29.281]  $ x            : num 3
[17:40:29.281]  $ ...          : list()
[17:40:29.281]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:29.281]  - attr(*, "where")=List of 4
[17:40:29.281]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:40:29.281]   ..$ foo          :<environment: R_EmptyEnv> 
[17:40:29.281]   ..$ x            :<environment: R_EmptyEnv> 
[17:40:29.281]   ..$ ...          :<environment: 0x558a3b34dd90> 
[17:40:29.281]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:29.281]  - attr(*, "resolved")= logi FALSE
[17:40:29.281]  - attr(*, "total_size")= num 2200
[17:40:29.285] Packages to be attached in all futures: [n=0] 
[17:40:29.285] getGlobalsAndPackagesXApply() ... DONE
[17:40:29.285] Number of futures (= number of chunks): 2
[17:40:29.285] Launching 2 futures (chunks) ...
[17:40:29.285] Chunk #1 of 2 ...
[17:40:29.286]  - Finding globals in 'X' for chunk #1 ...
[17:40:29.286] getGlobalsAndPackages() ...
[17:40:29.286] Searching for globals...
[17:40:29.286] 
[17:40:29.286] Searching for globals ... DONE
[17:40:29.286] - globals: [0] <none>
[17:40:29.286] getGlobalsAndPackages() ... DONE
[17:40:29.286]    + additional globals found: [n=0] 
[17:40:29.286]    + additional namespaces needed: [n=0] 
[17:40:29.287]  - Finding globals in 'X' for chunk #1 ... DONE
[17:40:29.287]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:40:29.287]  - seeds: [2] <seeds>
[17:40:29.287] getGlobalsAndPackages() ...
[17:40:29.287] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:29.287] Resolving globals: FALSE
[17:40:29.287] Tweak future expression to call with '...' arguments ...
[17:40:29.287] {
[17:40:29.287]     do.call(function(...) {
[17:40:29.287]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:29.287]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:29.287]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:29.287]             on.exit(options(oopts), add = TRUE)
[17:40:29.287]         }
[17:40:29.287]         {
[17:40:29.287]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:29.287]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:29.287]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:29.287]                   envir = globalenv(), inherits = FALSE)
[17:40:29.287]                 ...future.FUN(...future.X_jj, ...)
[17:40:29.287]             })
[17:40:29.287]         }
[17:40:29.287]     }, args = future.call.arguments)
[17:40:29.287] }
[17:40:29.288] Tweak future expression to call with '...' arguments ... DONE
[17:40:29.288] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:29.288] 
[17:40:29.288] getGlobalsAndPackages() ... DONE
[17:40:29.289] run() for ‘Future’ ...
[17:40:29.289] - state: ‘created’
[17:40:29.289] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:40:29.292] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:29.293] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:40:29.294]   - Field: ‘label’
[17:40:29.294]   - Field: ‘local’
[17:40:29.294]   - Field: ‘owner’
[17:40:29.294]   - Field: ‘envir’
[17:40:29.295]   - Field: ‘workers’
[17:40:29.295]   - Field: ‘packages’
[17:40:29.295]   - Field: ‘gc’
[17:40:29.295]   - Field: ‘job’
[17:40:29.295]   - Field: ‘conditions’
[17:40:29.295]   - Field: ‘expr’
[17:40:29.295]   - Field: ‘uuid’
[17:40:29.295]   - Field: ‘seed’
[17:40:29.295]   - Field: ‘version’
[17:40:29.296]   - Field: ‘result’
[17:40:29.296]   - Field: ‘asynchronous’
[17:40:29.296]   - Field: ‘calls’
[17:40:29.296]   - Field: ‘globals’
[17:40:29.296]   - Field: ‘stdout’
[17:40:29.296]   - Field: ‘earlySignal’
[17:40:29.296]   - Field: ‘lazy’
[17:40:29.296]   - Field: ‘state’
[17:40:29.296] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:40:29.297] - Launch lazy future ...
[17:40:29.297] Packages needed by the future expression (n = 0): <none>
[17:40:29.297] Packages needed by future strategies (n = 0): <none>
[17:40:29.297] {
[17:40:29.297]     {
[17:40:29.297]         {
[17:40:29.297]             ...future.startTime <- base::Sys.time()
[17:40:29.297]             {
[17:40:29.297]                 {
[17:40:29.297]                   {
[17:40:29.297]                     {
[17:40:29.297]                       base::local({
[17:40:29.297]                         has_future <- base::requireNamespace("future", 
[17:40:29.297]                           quietly = TRUE)
[17:40:29.297]                         if (has_future) {
[17:40:29.297]                           ns <- base::getNamespace("future")
[17:40:29.297]                           version <- ns[[".package"]][["version"]]
[17:40:29.297]                           if (is.null(version)) 
[17:40:29.297]                             version <- utils::packageVersion("future")
[17:40:29.297]                         }
[17:40:29.297]                         else {
[17:40:29.297]                           version <- NULL
[17:40:29.297]                         }
[17:40:29.297]                         if (!has_future || version < "1.8.0") {
[17:40:29.297]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:29.297]                             "", base::R.version$version.string), 
[17:40:29.297]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:29.297]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:29.297]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:29.297]                               "release", "version")], collapse = " "), 
[17:40:29.297]                             hostname = base::Sys.info()[["nodename"]])
[17:40:29.297]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:29.297]                             info)
[17:40:29.297]                           info <- base::paste(info, collapse = "; ")
[17:40:29.297]                           if (!has_future) {
[17:40:29.297]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:29.297]                               info)
[17:40:29.297]                           }
[17:40:29.297]                           else {
[17:40:29.297]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:29.297]                               info, version)
[17:40:29.297]                           }
[17:40:29.297]                           base::stop(msg)
[17:40:29.297]                         }
[17:40:29.297]                       })
[17:40:29.297]                     }
[17:40:29.297]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:29.297]                     base::options(mc.cores = 1L)
[17:40:29.297]                   }
[17:40:29.297]                   options(future.plan = NULL)
[17:40:29.297]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:29.297]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:29.297]                 }
[17:40:29.297]                 ...future.workdir <- getwd()
[17:40:29.297]             }
[17:40:29.297]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:29.297]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:29.297]         }
[17:40:29.297]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:29.297]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:40:29.297]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:29.297]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:29.297]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:29.297]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:29.297]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:29.297]             base::names(...future.oldOptions))
[17:40:29.297]     }
[17:40:29.297]     if (FALSE) {
[17:40:29.297]     }
[17:40:29.297]     else {
[17:40:29.297]         if (TRUE) {
[17:40:29.297]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:29.297]                 open = "w")
[17:40:29.297]         }
[17:40:29.297]         else {
[17:40:29.297]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:29.297]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:29.297]         }
[17:40:29.297]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:29.297]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:29.297]             base::sink(type = "output", split = FALSE)
[17:40:29.297]             base::close(...future.stdout)
[17:40:29.297]         }, add = TRUE)
[17:40:29.297]     }
[17:40:29.297]     ...future.frame <- base::sys.nframe()
[17:40:29.297]     ...future.conditions <- base::list()
[17:40:29.297]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:29.297]     if (FALSE) {
[17:40:29.297]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:29.297]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:29.297]     }
[17:40:29.297]     ...future.result <- base::tryCatch({
[17:40:29.297]         base::withCallingHandlers({
[17:40:29.297]             ...future.value <- base::withVisible(base::local({
[17:40:29.297]                 withCallingHandlers({
[17:40:29.297]                   {
[17:40:29.297]                     do.call(function(...) {
[17:40:29.297]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:29.297]                       if (!identical(...future.globals.maxSize.org, 
[17:40:29.297]                         ...future.globals.maxSize)) {
[17:40:29.297]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:29.297]                         on.exit(options(oopts), add = TRUE)
[17:40:29.297]                       }
[17:40:29.297]                       {
[17:40:29.297]                         lapply(seq_along(...future.elements_ii), 
[17:40:29.297]                           FUN = function(jj) {
[17:40:29.297]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:29.297]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:29.297]                               envir = globalenv(), inherits = FALSE)
[17:40:29.297]                             ...future.FUN(...future.X_jj, ...)
[17:40:29.297]                           })
[17:40:29.297]                       }
[17:40:29.297]                     }, args = future.call.arguments)
[17:40:29.297]                   }
[17:40:29.297]                 }, immediateCondition = function(cond) {
[17:40:29.297]                   save_rds <- function (object, pathname, ...) 
[17:40:29.297]                   {
[17:40:29.297]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:29.297]                     if (file_test("-f", pathname_tmp)) {
[17:40:29.297]                       fi_tmp <- file.info(pathname_tmp)
[17:40:29.297]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:29.297]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:29.297]                         fi_tmp[["mtime"]])
[17:40:29.297]                     }
[17:40:29.297]                     tryCatch({
[17:40:29.297]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:29.297]                     }, error = function(ex) {
[17:40:29.297]                       msg <- conditionMessage(ex)
[17:40:29.297]                       fi_tmp <- file.info(pathname_tmp)
[17:40:29.297]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:29.297]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:29.297]                         fi_tmp[["mtime"]], msg)
[17:40:29.297]                       ex$message <- msg
[17:40:29.297]                       stop(ex)
[17:40:29.297]                     })
[17:40:29.297]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:29.297]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:29.297]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:29.297]                       fi_tmp <- file.info(pathname_tmp)
[17:40:29.297]                       fi <- file.info(pathname)
[17:40:29.297]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:29.297]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:29.297]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:29.297]                         fi[["size"]], fi[["mtime"]])
[17:40:29.297]                       stop(msg)
[17:40:29.297]                     }
[17:40:29.297]                     invisible(pathname)
[17:40:29.297]                   }
[17:40:29.297]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:29.297]                     rootPath = tempdir()) 
[17:40:29.297]                   {
[17:40:29.297]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:29.297]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:29.297]                       tmpdir = path, fileext = ".rds")
[17:40:29.297]                     save_rds(obj, file)
[17:40:29.297]                   }
[17:40:29.297]                   saveImmediateCondition(cond, path = "/tmp/RtmpYOEZWb/.future/immediateConditions")
[17:40:29.297]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:29.297]                   {
[17:40:29.297]                     inherits <- base::inherits
[17:40:29.297]                     invokeRestart <- base::invokeRestart
[17:40:29.297]                     is.null <- base::is.null
[17:40:29.297]                     muffled <- FALSE
[17:40:29.297]                     if (inherits(cond, "message")) {
[17:40:29.297]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:29.297]                       if (muffled) 
[17:40:29.297]                         invokeRestart("muffleMessage")
[17:40:29.297]                     }
[17:40:29.297]                     else if (inherits(cond, "warning")) {
[17:40:29.297]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:29.297]                       if (muffled) 
[17:40:29.297]                         invokeRestart("muffleWarning")
[17:40:29.297]                     }
[17:40:29.297]                     else if (inherits(cond, "condition")) {
[17:40:29.297]                       if (!is.null(pattern)) {
[17:40:29.297]                         computeRestarts <- base::computeRestarts
[17:40:29.297]                         grepl <- base::grepl
[17:40:29.297]                         restarts <- computeRestarts(cond)
[17:40:29.297]                         for (restart in restarts) {
[17:40:29.297]                           name <- restart$name
[17:40:29.297]                           if (is.null(name)) 
[17:40:29.297]                             next
[17:40:29.297]                           if (!grepl(pattern, name)) 
[17:40:29.297]                             next
[17:40:29.297]                           invokeRestart(restart)
[17:40:29.297]                           muffled <- TRUE
[17:40:29.297]                           break
[17:40:29.297]                         }
[17:40:29.297]                       }
[17:40:29.297]                     }
[17:40:29.297]                     invisible(muffled)
[17:40:29.297]                   }
[17:40:29.297]                   muffleCondition(cond)
[17:40:29.297]                 })
[17:40:29.297]             }))
[17:40:29.297]             future::FutureResult(value = ...future.value$value, 
[17:40:29.297]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:29.297]                   ...future.rng), globalenv = if (FALSE) 
[17:40:29.297]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:29.297]                     ...future.globalenv.names))
[17:40:29.297]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:29.297]         }, condition = base::local({
[17:40:29.297]             c <- base::c
[17:40:29.297]             inherits <- base::inherits
[17:40:29.297]             invokeRestart <- base::invokeRestart
[17:40:29.297]             length <- base::length
[17:40:29.297]             list <- base::list
[17:40:29.297]             seq.int <- base::seq.int
[17:40:29.297]             signalCondition <- base::signalCondition
[17:40:29.297]             sys.calls <- base::sys.calls
[17:40:29.297]             `[[` <- base::`[[`
[17:40:29.297]             `+` <- base::`+`
[17:40:29.297]             `<<-` <- base::`<<-`
[17:40:29.297]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:29.297]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:29.297]                   3L)]
[17:40:29.297]             }
[17:40:29.297]             function(cond) {
[17:40:29.297]                 is_error <- inherits(cond, "error")
[17:40:29.297]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:29.297]                   NULL)
[17:40:29.297]                 if (is_error) {
[17:40:29.297]                   sessionInformation <- function() {
[17:40:29.297]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:29.297]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:29.297]                       search = base::search(), system = base::Sys.info())
[17:40:29.297]                   }
[17:40:29.297]                   ...future.conditions[[length(...future.conditions) + 
[17:40:29.297]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:29.297]                     cond$call), session = sessionInformation(), 
[17:40:29.297]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:29.297]                   signalCondition(cond)
[17:40:29.297]                 }
[17:40:29.297]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:29.297]                 "immediateCondition"))) {
[17:40:29.297]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:29.297]                   ...future.conditions[[length(...future.conditions) + 
[17:40:29.297]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:29.297]                   if (TRUE && !signal) {
[17:40:29.297]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:29.297]                     {
[17:40:29.297]                       inherits <- base::inherits
[17:40:29.297]                       invokeRestart <- base::invokeRestart
[17:40:29.297]                       is.null <- base::is.null
[17:40:29.297]                       muffled <- FALSE
[17:40:29.297]                       if (inherits(cond, "message")) {
[17:40:29.297]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:29.297]                         if (muffled) 
[17:40:29.297]                           invokeRestart("muffleMessage")
[17:40:29.297]                       }
[17:40:29.297]                       else if (inherits(cond, "warning")) {
[17:40:29.297]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:29.297]                         if (muffled) 
[17:40:29.297]                           invokeRestart("muffleWarning")
[17:40:29.297]                       }
[17:40:29.297]                       else if (inherits(cond, "condition")) {
[17:40:29.297]                         if (!is.null(pattern)) {
[17:40:29.297]                           computeRestarts <- base::computeRestarts
[17:40:29.297]                           grepl <- base::grepl
[17:40:29.297]                           restarts <- computeRestarts(cond)
[17:40:29.297]                           for (restart in restarts) {
[17:40:29.297]                             name <- restart$name
[17:40:29.297]                             if (is.null(name)) 
[17:40:29.297]                               next
[17:40:29.297]                             if (!grepl(pattern, name)) 
[17:40:29.297]                               next
[17:40:29.297]                             invokeRestart(restart)
[17:40:29.297]                             muffled <- TRUE
[17:40:29.297]                             break
[17:40:29.297]                           }
[17:40:29.297]                         }
[17:40:29.297]                       }
[17:40:29.297]                       invisible(muffled)
[17:40:29.297]                     }
[17:40:29.297]                     muffleCondition(cond, pattern = "^muffle")
[17:40:29.297]                   }
[17:40:29.297]                 }
[17:40:29.297]                 else {
[17:40:29.297]                   if (TRUE) {
[17:40:29.297]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:29.297]                     {
[17:40:29.297]                       inherits <- base::inherits
[17:40:29.297]                       invokeRestart <- base::invokeRestart
[17:40:29.297]                       is.null <- base::is.null
[17:40:29.297]                       muffled <- FALSE
[17:40:29.297]                       if (inherits(cond, "message")) {
[17:40:29.297]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:29.297]                         if (muffled) 
[17:40:29.297]                           invokeRestart("muffleMessage")
[17:40:29.297]                       }
[17:40:29.297]                       else if (inherits(cond, "warning")) {
[17:40:29.297]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:29.297]                         if (muffled) 
[17:40:29.297]                           invokeRestart("muffleWarning")
[17:40:29.297]                       }
[17:40:29.297]                       else if (inherits(cond, "condition")) {
[17:40:29.297]                         if (!is.null(pattern)) {
[17:40:29.297]                           computeRestarts <- base::computeRestarts
[17:40:29.297]                           grepl <- base::grepl
[17:40:29.297]                           restarts <- computeRestarts(cond)
[17:40:29.297]                           for (restart in restarts) {
[17:40:29.297]                             name <- restart$name
[17:40:29.297]                             if (is.null(name)) 
[17:40:29.297]                               next
[17:40:29.297]                             if (!grepl(pattern, name)) 
[17:40:29.297]                               next
[17:40:29.297]                             invokeRestart(restart)
[17:40:29.297]                             muffled <- TRUE
[17:40:29.297]                             break
[17:40:29.297]                           }
[17:40:29.297]                         }
[17:40:29.297]                       }
[17:40:29.297]                       invisible(muffled)
[17:40:29.297]                     }
[17:40:29.297]                     muffleCondition(cond, pattern = "^muffle")
[17:40:29.297]                   }
[17:40:29.297]                 }
[17:40:29.297]             }
[17:40:29.297]         }))
[17:40:29.297]     }, error = function(ex) {
[17:40:29.297]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:29.297]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:29.297]                 ...future.rng), started = ...future.startTime, 
[17:40:29.297]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:29.297]             version = "1.8"), class = "FutureResult")
[17:40:29.297]     }, finally = {
[17:40:29.297]         if (!identical(...future.workdir, getwd())) 
[17:40:29.297]             setwd(...future.workdir)
[17:40:29.297]         {
[17:40:29.297]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:29.297]                 ...future.oldOptions$nwarnings <- NULL
[17:40:29.297]             }
[17:40:29.297]             base::options(...future.oldOptions)
[17:40:29.297]             if (.Platform$OS.type == "windows") {
[17:40:29.297]                 old_names <- names(...future.oldEnvVars)
[17:40:29.297]                 envs <- base::Sys.getenv()
[17:40:29.297]                 names <- names(envs)
[17:40:29.297]                 common <- intersect(names, old_names)
[17:40:29.297]                 added <- setdiff(names, old_names)
[17:40:29.297]                 removed <- setdiff(old_names, names)
[17:40:29.297]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:29.297]                   envs[common]]
[17:40:29.297]                 NAMES <- toupper(changed)
[17:40:29.297]                 args <- list()
[17:40:29.297]                 for (kk in seq_along(NAMES)) {
[17:40:29.297]                   name <- changed[[kk]]
[17:40:29.297]                   NAME <- NAMES[[kk]]
[17:40:29.297]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:29.297]                     next
[17:40:29.297]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:29.297]                 }
[17:40:29.297]                 NAMES <- toupper(added)
[17:40:29.297]                 for (kk in seq_along(NAMES)) {
[17:40:29.297]                   name <- added[[kk]]
[17:40:29.297]                   NAME <- NAMES[[kk]]
[17:40:29.297]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:29.297]                     next
[17:40:29.297]                   args[[name]] <- ""
[17:40:29.297]                 }
[17:40:29.297]                 NAMES <- toupper(removed)
[17:40:29.297]                 for (kk in seq_along(NAMES)) {
[17:40:29.297]                   name <- removed[[kk]]
[17:40:29.297]                   NAME <- NAMES[[kk]]
[17:40:29.297]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:29.297]                     next
[17:40:29.297]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:29.297]                 }
[17:40:29.297]                 if (length(args) > 0) 
[17:40:29.297]                   base::do.call(base::Sys.setenv, args = args)
[17:40:29.297]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:29.297]             }
[17:40:29.297]             else {
[17:40:29.297]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:29.297]             }
[17:40:29.297]             {
[17:40:29.297]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:29.297]                   0L) {
[17:40:29.297]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:29.297]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:29.297]                   base::options(opts)
[17:40:29.297]                 }
[17:40:29.297]                 {
[17:40:29.297]                   {
[17:40:29.297]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:29.297]                     NULL
[17:40:29.297]                   }
[17:40:29.297]                   options(future.plan = NULL)
[17:40:29.297]                   if (is.na(NA_character_)) 
[17:40:29.297]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:29.297]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:29.297]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:40:29.297]                     envir = parent.frame()) 
[17:40:29.297]                   {
[17:40:29.297]                     default_workers <- missing(workers)
[17:40:29.297]                     if (is.function(workers)) 
[17:40:29.297]                       workers <- workers()
[17:40:29.297]                     workers <- structure(as.integer(workers), 
[17:40:29.297]                       class = class(workers))
[17:40:29.297]                     stop_if_not(is.finite(workers), workers >= 
[17:40:29.297]                       1L)
[17:40:29.297]                     if ((workers == 1L && !inherits(workers, 
[17:40:29.297]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:40:29.297]                       if (default_workers) 
[17:40:29.297]                         supportsMulticore(warn = TRUE)
[17:40:29.297]                       return(sequential(..., envir = envir))
[17:40:29.297]                     }
[17:40:29.297]                     oopts <- options(mc.cores = workers)
[17:40:29.297]                     on.exit(options(oopts))
[17:40:29.297]                     future <- MulticoreFuture(..., workers = workers, 
[17:40:29.297]                       envir = envir)
[17:40:29.297]                     if (!future$lazy) 
[17:40:29.297]                       future <- run(future)
[17:40:29.297]                     invisible(future)
[17:40:29.297]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:29.297]                 }
[17:40:29.297]             }
[17:40:29.297]         }
[17:40:29.297]     })
[17:40:29.297]     if (TRUE) {
[17:40:29.297]         base::sink(type = "output", split = FALSE)
[17:40:29.297]         if (TRUE) {
[17:40:29.297]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:29.297]         }
[17:40:29.297]         else {
[17:40:29.297]             ...future.result["stdout"] <- base::list(NULL)
[17:40:29.297]         }
[17:40:29.297]         base::close(...future.stdout)
[17:40:29.297]         ...future.stdout <- NULL
[17:40:29.297]     }
[17:40:29.297]     ...future.result$conditions <- ...future.conditions
[17:40:29.297]     ...future.result$finished <- base::Sys.time()
[17:40:29.297]     ...future.result
[17:40:29.297] }
[17:40:29.300] assign_globals() ...
[17:40:29.300] List of 7
[17:40:29.300]  $ ...future.FUN            :function (...)  
[17:40:29.300]  $ foo                      :function (x = 1, y = 2)  
[17:40:29.300]  $ x                        : num 3
[17:40:29.300]  $ future.call.arguments    : list()
[17:40:29.300]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:29.300]  $ ...future.elements_ii    :List of 2
[17:40:29.300]   ..$ : int 0
[17:40:29.300]   ..$ : int 0
[17:40:29.300]  $ ...future.seeds_ii       :List of 2
[17:40:29.300]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[17:40:29.300]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[17:40:29.300]  $ ...future.globals.maxSize: NULL
[17:40:29.300]  - attr(*, "resolved")= logi FALSE
[17:40:29.300]  - attr(*, "total_size")= num 2200
[17:40:29.300]  - attr(*, "where")=List of 7
[17:40:29.300]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:40:29.300]   ..$ foo                      :<environment: R_EmptyEnv> 
[17:40:29.300]   ..$ x                        :<environment: R_EmptyEnv> 
[17:40:29.300]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:40:29.300]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:40:29.300]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:40:29.300]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:40:29.300]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:29.300]  - attr(*, "already-done")= logi TRUE
[17:40:29.307] - reassign environment for ‘...future.FUN’
[17:40:29.307] - copied ‘...future.FUN’ to environment
[17:40:29.307] - reassign environment for ‘foo’
[17:40:29.307] - copied ‘foo’ to environment
[17:40:29.307] - copied ‘x’ to environment
[17:40:29.307] - copied ‘future.call.arguments’ to environment
[17:40:29.307] - copied ‘...future.elements_ii’ to environment
[17:40:29.307] - copied ‘...future.seeds_ii’ to environment
[17:40:29.307] - copied ‘...future.globals.maxSize’ to environment
[17:40:29.307] assign_globals() ... done
[17:40:29.308] requestCore(): workers = 2
[17:40:29.310] MulticoreFuture started
[17:40:29.310] - Launch lazy future ... done
[17:40:29.310] run() for ‘MulticoreFuture’ ... done
[17:40:29.311] Created future:
[17:40:29.311] plan(): Setting new future strategy stack:
[17:40:29.311] List of future strategies:
[17:40:29.311] 1. sequential:
[17:40:29.311]    - args: function (..., envir = parent.frame())
[17:40:29.311]    - tweaked: FALSE
[17:40:29.311]    - call: NULL
[17:40:29.312] plan(): nbrOfWorkers() = 1
[17:40:29.314] plan(): Setting new future strategy stack:
[17:40:29.314] List of future strategies:
[17:40:29.314] 1. multicore:
[17:40:29.314]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:29.314]    - tweaked: FALSE
[17:40:29.314]    - call: plan(strategy)
[17:40:29.320] plan(): nbrOfWorkers() = 2
[17:40:29.311] MulticoreFuture:
[17:40:29.311] Label: ‘future_replicate-1’
[17:40:29.311] Expression:
[17:40:29.311] {
[17:40:29.311]     do.call(function(...) {
[17:40:29.311]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:29.311]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:29.311]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:29.311]             on.exit(options(oopts), add = TRUE)
[17:40:29.311]         }
[17:40:29.311]         {
[17:40:29.311]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:29.311]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:29.311]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:29.311]                   envir = globalenv(), inherits = FALSE)
[17:40:29.311]                 ...future.FUN(...future.X_jj, ...)
[17:40:29.311]             })
[17:40:29.311]         }
[17:40:29.311]     }, args = future.call.arguments)
[17:40:29.311] }
[17:40:29.311] Lazy evaluation: FALSE
[17:40:29.311] Asynchronous evaluation: TRUE
[17:40:29.311] Local evaluation: TRUE
[17:40:29.311] Environment: 0x558a3b377fb0
[17:40:29.311] Capture standard output: TRUE
[17:40:29.311] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:29.311] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[17:40:29.311] Packages: <none>
[17:40:29.311] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:29.311] Resolved: TRUE
[17:40:29.311] Value: <not collected>
[17:40:29.311] Conditions captured: <none>
[17:40:29.311] Early signaling: FALSE
[17:40:29.311] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:29.311] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:29.321] Chunk #1 of 2 ... DONE
[17:40:29.321] Chunk #2 of 2 ...
[17:40:29.321]  - Finding globals in 'X' for chunk #2 ...
[17:40:29.321] getGlobalsAndPackages() ...
[17:40:29.322] Searching for globals...
[17:40:29.322] 
[17:40:29.322] Searching for globals ... DONE
[17:40:29.322] - globals: [0] <none>
[17:40:29.322] getGlobalsAndPackages() ... DONE
[17:40:29.322]    + additional globals found: [n=0] 
[17:40:29.323]    + additional namespaces needed: [n=0] 
[17:40:29.323]  - Finding globals in 'X' for chunk #2 ... DONE
[17:40:29.323]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[17:40:29.323]  - seeds: [3] <seeds>
[17:40:29.323] getGlobalsAndPackages() ...
[17:40:29.324] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:29.324] Resolving globals: FALSE
[17:40:29.324] Tweak future expression to call with '...' arguments ...
[17:40:29.324] {
[17:40:29.324]     do.call(function(...) {
[17:40:29.324]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:29.324]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:29.324]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:29.324]             on.exit(options(oopts), add = TRUE)
[17:40:29.324]         }
[17:40:29.324]         {
[17:40:29.324]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:29.324]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:29.324]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:29.324]                   envir = globalenv(), inherits = FALSE)
[17:40:29.324]                 ...future.FUN(...future.X_jj, ...)
[17:40:29.324]             })
[17:40:29.324]         }
[17:40:29.324]     }, args = future.call.arguments)
[17:40:29.324] }
[17:40:29.325] Tweak future expression to call with '...' arguments ... DONE
[17:40:29.325] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:29.325] 
[17:40:29.326] getGlobalsAndPackages() ... DONE
[17:40:29.326] run() for ‘Future’ ...
[17:40:29.326] - state: ‘created’
[17:40:29.327] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:40:29.331] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:29.331] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:40:29.331]   - Field: ‘label’
[17:40:29.332]   - Field: ‘local’
[17:40:29.332]   - Field: ‘owner’
[17:40:29.332]   - Field: ‘envir’
[17:40:29.332]   - Field: ‘workers’
[17:40:29.332]   - Field: ‘packages’
[17:40:29.332]   - Field: ‘gc’
[17:40:29.332]   - Field: ‘job’
[17:40:29.333]   - Field: ‘conditions’
[17:40:29.333]   - Field: ‘expr’
[17:40:29.333]   - Field: ‘uuid’
[17:40:29.333]   - Field: ‘seed’
[17:40:29.333]   - Field: ‘version’
[17:40:29.333]   - Field: ‘result’
[17:40:29.333]   - Field: ‘asynchronous’
[17:40:29.334]   - Field: ‘calls’
[17:40:29.334]   - Field: ‘globals’
[17:40:29.334]   - Field: ‘stdout’
[17:40:29.334]   - Field: ‘earlySignal’
[17:40:29.334]   - Field: ‘lazy’
[17:40:29.334]   - Field: ‘state’
[17:40:29.334] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:40:29.335] - Launch lazy future ...
[17:40:29.335] Packages needed by the future expression (n = 0): <none>
[17:40:29.335] Packages needed by future strategies (n = 0): <none>
[17:40:29.336] {
[17:40:29.336]     {
[17:40:29.336]         {
[17:40:29.336]             ...future.startTime <- base::Sys.time()
[17:40:29.336]             {
[17:40:29.336]                 {
[17:40:29.336]                   {
[17:40:29.336]                     {
[17:40:29.336]                       base::local({
[17:40:29.336]                         has_future <- base::requireNamespace("future", 
[17:40:29.336]                           quietly = TRUE)
[17:40:29.336]                         if (has_future) {
[17:40:29.336]                           ns <- base::getNamespace("future")
[17:40:29.336]                           version <- ns[[".package"]][["version"]]
[17:40:29.336]                           if (is.null(version)) 
[17:40:29.336]                             version <- utils::packageVersion("future")
[17:40:29.336]                         }
[17:40:29.336]                         else {
[17:40:29.336]                           version <- NULL
[17:40:29.336]                         }
[17:40:29.336]                         if (!has_future || version < "1.8.0") {
[17:40:29.336]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:29.336]                             "", base::R.version$version.string), 
[17:40:29.336]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:29.336]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:29.336]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:29.336]                               "release", "version")], collapse = " "), 
[17:40:29.336]                             hostname = base::Sys.info()[["nodename"]])
[17:40:29.336]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:29.336]                             info)
[17:40:29.336]                           info <- base::paste(info, collapse = "; ")
[17:40:29.336]                           if (!has_future) {
[17:40:29.336]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:29.336]                               info)
[17:40:29.336]                           }
[17:40:29.336]                           else {
[17:40:29.336]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:29.336]                               info, version)
[17:40:29.336]                           }
[17:40:29.336]                           base::stop(msg)
[17:40:29.336]                         }
[17:40:29.336]                       })
[17:40:29.336]                     }
[17:40:29.336]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:29.336]                     base::options(mc.cores = 1L)
[17:40:29.336]                   }
[17:40:29.336]                   options(future.plan = NULL)
[17:40:29.336]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:29.336]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:29.336]                 }
[17:40:29.336]                 ...future.workdir <- getwd()
[17:40:29.336]             }
[17:40:29.336]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:29.336]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:29.336]         }
[17:40:29.336]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:29.336]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[17:40:29.336]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:29.336]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:29.336]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:29.336]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:29.336]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:29.336]             base::names(...future.oldOptions))
[17:40:29.336]     }
[17:40:29.336]     if (FALSE) {
[17:40:29.336]     }
[17:40:29.336]     else {
[17:40:29.336]         if (TRUE) {
[17:40:29.336]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:29.336]                 open = "w")
[17:40:29.336]         }
[17:40:29.336]         else {
[17:40:29.336]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:29.336]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:29.336]         }
[17:40:29.336]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:29.336]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:29.336]             base::sink(type = "output", split = FALSE)
[17:40:29.336]             base::close(...future.stdout)
[17:40:29.336]         }, add = TRUE)
[17:40:29.336]     }
[17:40:29.336]     ...future.frame <- base::sys.nframe()
[17:40:29.336]     ...future.conditions <- base::list()
[17:40:29.336]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:29.336]     if (FALSE) {
[17:40:29.336]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:29.336]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:29.336]     }
[17:40:29.336]     ...future.result <- base::tryCatch({
[17:40:29.336]         base::withCallingHandlers({
[17:40:29.336]             ...future.value <- base::withVisible(base::local({
[17:40:29.336]                 withCallingHandlers({
[17:40:29.336]                   {
[17:40:29.336]                     do.call(function(...) {
[17:40:29.336]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:29.336]                       if (!identical(...future.globals.maxSize.org, 
[17:40:29.336]                         ...future.globals.maxSize)) {
[17:40:29.336]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:29.336]                         on.exit(options(oopts), add = TRUE)
[17:40:29.336]                       }
[17:40:29.336]                       {
[17:40:29.336]                         lapply(seq_along(...future.elements_ii), 
[17:40:29.336]                           FUN = function(jj) {
[17:40:29.336]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:29.336]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:29.336]                               envir = globalenv(), inherits = FALSE)
[17:40:29.336]                             ...future.FUN(...future.X_jj, ...)
[17:40:29.336]                           })
[17:40:29.336]                       }
[17:40:29.336]                     }, args = future.call.arguments)
[17:40:29.336]                   }
[17:40:29.336]                 }, immediateCondition = function(cond) {
[17:40:29.336]                   save_rds <- function (object, pathname, ...) 
[17:40:29.336]                   {
[17:40:29.336]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:29.336]                     if (file_test("-f", pathname_tmp)) {
[17:40:29.336]                       fi_tmp <- file.info(pathname_tmp)
[17:40:29.336]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:29.336]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:29.336]                         fi_tmp[["mtime"]])
[17:40:29.336]                     }
[17:40:29.336]                     tryCatch({
[17:40:29.336]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:29.336]                     }, error = function(ex) {
[17:40:29.336]                       msg <- conditionMessage(ex)
[17:40:29.336]                       fi_tmp <- file.info(pathname_tmp)
[17:40:29.336]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:29.336]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:29.336]                         fi_tmp[["mtime"]], msg)
[17:40:29.336]                       ex$message <- msg
[17:40:29.336]                       stop(ex)
[17:40:29.336]                     })
[17:40:29.336]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:29.336]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:29.336]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:29.336]                       fi_tmp <- file.info(pathname_tmp)
[17:40:29.336]                       fi <- file.info(pathname)
[17:40:29.336]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:29.336]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:29.336]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:29.336]                         fi[["size"]], fi[["mtime"]])
[17:40:29.336]                       stop(msg)
[17:40:29.336]                     }
[17:40:29.336]                     invisible(pathname)
[17:40:29.336]                   }
[17:40:29.336]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:29.336]                     rootPath = tempdir()) 
[17:40:29.336]                   {
[17:40:29.336]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:29.336]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:29.336]                       tmpdir = path, fileext = ".rds")
[17:40:29.336]                     save_rds(obj, file)
[17:40:29.336]                   }
[17:40:29.336]                   saveImmediateCondition(cond, path = "/tmp/RtmpYOEZWb/.future/immediateConditions")
[17:40:29.336]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:29.336]                   {
[17:40:29.336]                     inherits <- base::inherits
[17:40:29.336]                     invokeRestart <- base::invokeRestart
[17:40:29.336]                     is.null <- base::is.null
[17:40:29.336]                     muffled <- FALSE
[17:40:29.336]                     if (inherits(cond, "message")) {
[17:40:29.336]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:29.336]                       if (muffled) 
[17:40:29.336]                         invokeRestart("muffleMessage")
[17:40:29.336]                     }
[17:40:29.336]                     else if (inherits(cond, "warning")) {
[17:40:29.336]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:29.336]                       if (muffled) 
[17:40:29.336]                         invokeRestart("muffleWarning")
[17:40:29.336]                     }
[17:40:29.336]                     else if (inherits(cond, "condition")) {
[17:40:29.336]                       if (!is.null(pattern)) {
[17:40:29.336]                         computeRestarts <- base::computeRestarts
[17:40:29.336]                         grepl <- base::grepl
[17:40:29.336]                         restarts <- computeRestarts(cond)
[17:40:29.336]                         for (restart in restarts) {
[17:40:29.336]                           name <- restart$name
[17:40:29.336]                           if (is.null(name)) 
[17:40:29.336]                             next
[17:40:29.336]                           if (!grepl(pattern, name)) 
[17:40:29.336]                             next
[17:40:29.336]                           invokeRestart(restart)
[17:40:29.336]                           muffled <- TRUE
[17:40:29.336]                           break
[17:40:29.336]                         }
[17:40:29.336]                       }
[17:40:29.336]                     }
[17:40:29.336]                     invisible(muffled)
[17:40:29.336]                   }
[17:40:29.336]                   muffleCondition(cond)
[17:40:29.336]                 })
[17:40:29.336]             }))
[17:40:29.336]             future::FutureResult(value = ...future.value$value, 
[17:40:29.336]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:29.336]                   ...future.rng), globalenv = if (FALSE) 
[17:40:29.336]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:29.336]                     ...future.globalenv.names))
[17:40:29.336]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:29.336]         }, condition = base::local({
[17:40:29.336]             c <- base::c
[17:40:29.336]             inherits <- base::inherits
[17:40:29.336]             invokeRestart <- base::invokeRestart
[17:40:29.336]             length <- base::length
[17:40:29.336]             list <- base::list
[17:40:29.336]             seq.int <- base::seq.int
[17:40:29.336]             signalCondition <- base::signalCondition
[17:40:29.336]             sys.calls <- base::sys.calls
[17:40:29.336]             `[[` <- base::`[[`
[17:40:29.336]             `+` <- base::`+`
[17:40:29.336]             `<<-` <- base::`<<-`
[17:40:29.336]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:29.336]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:29.336]                   3L)]
[17:40:29.336]             }
[17:40:29.336]             function(cond) {
[17:40:29.336]                 is_error <- inherits(cond, "error")
[17:40:29.336]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:29.336]                   NULL)
[17:40:29.336]                 if (is_error) {
[17:40:29.336]                   sessionInformation <- function() {
[17:40:29.336]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:29.336]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:29.336]                       search = base::search(), system = base::Sys.info())
[17:40:29.336]                   }
[17:40:29.336]                   ...future.conditions[[length(...future.conditions) + 
[17:40:29.336]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:29.336]                     cond$call), session = sessionInformation(), 
[17:40:29.336]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:29.336]                   signalCondition(cond)
[17:40:29.336]                 }
[17:40:29.336]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:29.336]                 "immediateCondition"))) {
[17:40:29.336]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:29.336]                   ...future.conditions[[length(...future.conditions) + 
[17:40:29.336]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:29.336]                   if (TRUE && !signal) {
[17:40:29.336]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:29.336]                     {
[17:40:29.336]                       inherits <- base::inherits
[17:40:29.336]                       invokeRestart <- base::invokeRestart
[17:40:29.336]                       is.null <- base::is.null
[17:40:29.336]                       muffled <- FALSE
[17:40:29.336]                       if (inherits(cond, "message")) {
[17:40:29.336]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:29.336]                         if (muffled) 
[17:40:29.336]                           invokeRestart("muffleMessage")
[17:40:29.336]                       }
[17:40:29.336]                       else if (inherits(cond, "warning")) {
[17:40:29.336]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:29.336]                         if (muffled) 
[17:40:29.336]                           invokeRestart("muffleWarning")
[17:40:29.336]                       }
[17:40:29.336]                       else if (inherits(cond, "condition")) {
[17:40:29.336]                         if (!is.null(pattern)) {
[17:40:29.336]                           computeRestarts <- base::computeRestarts
[17:40:29.336]                           grepl <- base::grepl
[17:40:29.336]                           restarts <- computeRestarts(cond)
[17:40:29.336]                           for (restart in restarts) {
[17:40:29.336]                             name <- restart$name
[17:40:29.336]                             if (is.null(name)) 
[17:40:29.336]                               next
[17:40:29.336]                             if (!grepl(pattern, name)) 
[17:40:29.336]                               next
[17:40:29.336]                             invokeRestart(restart)
[17:40:29.336]                             muffled <- TRUE
[17:40:29.336]                             break
[17:40:29.336]                           }
[17:40:29.336]                         }
[17:40:29.336]                       }
[17:40:29.336]                       invisible(muffled)
[17:40:29.336]                     }
[17:40:29.336]                     muffleCondition(cond, pattern = "^muffle")
[17:40:29.336]                   }
[17:40:29.336]                 }
[17:40:29.336]                 else {
[17:40:29.336]                   if (TRUE) {
[17:40:29.336]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:29.336]                     {
[17:40:29.336]                       inherits <- base::inherits
[17:40:29.336]                       invokeRestart <- base::invokeRestart
[17:40:29.336]                       is.null <- base::is.null
[17:40:29.336]                       muffled <- FALSE
[17:40:29.336]                       if (inherits(cond, "message")) {
[17:40:29.336]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:29.336]                         if (muffled) 
[17:40:29.336]                           invokeRestart("muffleMessage")
[17:40:29.336]                       }
[17:40:29.336]                       else if (inherits(cond, "warning")) {
[17:40:29.336]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:29.336]                         if (muffled) 
[17:40:29.336]                           invokeRestart("muffleWarning")
[17:40:29.336]                       }
[17:40:29.336]                       else if (inherits(cond, "condition")) {
[17:40:29.336]                         if (!is.null(pattern)) {
[17:40:29.336]                           computeRestarts <- base::computeRestarts
[17:40:29.336]                           grepl <- base::grepl
[17:40:29.336]                           restarts <- computeRestarts(cond)
[17:40:29.336]                           for (restart in restarts) {
[17:40:29.336]                             name <- restart$name
[17:40:29.336]                             if (is.null(name)) 
[17:40:29.336]                               next
[17:40:29.336]                             if (!grepl(pattern, name)) 
[17:40:29.336]                               next
[17:40:29.336]                             invokeRestart(restart)
[17:40:29.336]                             muffled <- TRUE
[17:40:29.336]                             break
[17:40:29.336]                           }
[17:40:29.336]                         }
[17:40:29.336]                       }
[17:40:29.336]                       invisible(muffled)
[17:40:29.336]                     }
[17:40:29.336]                     muffleCondition(cond, pattern = "^muffle")
[17:40:29.336]                   }
[17:40:29.336]                 }
[17:40:29.336]             }
[17:40:29.336]         }))
[17:40:29.336]     }, error = function(ex) {
[17:40:29.336]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:29.336]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:29.336]                 ...future.rng), started = ...future.startTime, 
[17:40:29.336]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:29.336]             version = "1.8"), class = "FutureResult")
[17:40:29.336]     }, finally = {
[17:40:29.336]         if (!identical(...future.workdir, getwd())) 
[17:40:29.336]             setwd(...future.workdir)
[17:40:29.336]         {
[17:40:29.336]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:29.336]                 ...future.oldOptions$nwarnings <- NULL
[17:40:29.336]             }
[17:40:29.336]             base::options(...future.oldOptions)
[17:40:29.336]             if (.Platform$OS.type == "windows") {
[17:40:29.336]                 old_names <- names(...future.oldEnvVars)
[17:40:29.336]                 envs <- base::Sys.getenv()
[17:40:29.336]                 names <- names(envs)
[17:40:29.336]                 common <- intersect(names, old_names)
[17:40:29.336]                 added <- setdiff(names, old_names)
[17:40:29.336]                 removed <- setdiff(old_names, names)
[17:40:29.336]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:29.336]                   envs[common]]
[17:40:29.336]                 NAMES <- toupper(changed)
[17:40:29.336]                 args <- list()
[17:40:29.336]                 for (kk in seq_along(NAMES)) {
[17:40:29.336]                   name <- changed[[kk]]
[17:40:29.336]                   NAME <- NAMES[[kk]]
[17:40:29.336]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:29.336]                     next
[17:40:29.336]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:29.336]                 }
[17:40:29.336]                 NAMES <- toupper(added)
[17:40:29.336]                 for (kk in seq_along(NAMES)) {
[17:40:29.336]                   name <- added[[kk]]
[17:40:29.336]                   NAME <- NAMES[[kk]]
[17:40:29.336]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:29.336]                     next
[17:40:29.336]                   args[[name]] <- ""
[17:40:29.336]                 }
[17:40:29.336]                 NAMES <- toupper(removed)
[17:40:29.336]                 for (kk in seq_along(NAMES)) {
[17:40:29.336]                   name <- removed[[kk]]
[17:40:29.336]                   NAME <- NAMES[[kk]]
[17:40:29.336]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:29.336]                     next
[17:40:29.336]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:29.336]                 }
[17:40:29.336]                 if (length(args) > 0) 
[17:40:29.336]                   base::do.call(base::Sys.setenv, args = args)
[17:40:29.336]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:29.336]             }
[17:40:29.336]             else {
[17:40:29.336]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:29.336]             }
[17:40:29.336]             {
[17:40:29.336]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:29.336]                   0L) {
[17:40:29.336]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:29.336]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:29.336]                   base::options(opts)
[17:40:29.336]                 }
[17:40:29.336]                 {
[17:40:29.336]                   {
[17:40:29.336]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:29.336]                     NULL
[17:40:29.336]                   }
[17:40:29.336]                   options(future.plan = NULL)
[17:40:29.336]                   if (is.na(NA_character_)) 
[17:40:29.336]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:29.336]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:29.336]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:40:29.336]                     envir = parent.frame()) 
[17:40:29.336]                   {
[17:40:29.336]                     default_workers <- missing(workers)
[17:40:29.336]                     if (is.function(workers)) 
[17:40:29.336]                       workers <- workers()
[17:40:29.336]                     workers <- structure(as.integer(workers), 
[17:40:29.336]                       class = class(workers))
[17:40:29.336]                     stop_if_not(is.finite(workers), workers >= 
[17:40:29.336]                       1L)
[17:40:29.336]                     if ((workers == 1L && !inherits(workers, 
[17:40:29.336]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:40:29.336]                       if (default_workers) 
[17:40:29.336]                         supportsMulticore(warn = TRUE)
[17:40:29.336]                       return(sequential(..., envir = envir))
[17:40:29.336]                     }
[17:40:29.336]                     oopts <- options(mc.cores = workers)
[17:40:29.336]                     on.exit(options(oopts))
[17:40:29.336]                     future <- MulticoreFuture(..., workers = workers, 
[17:40:29.336]                       envir = envir)
[17:40:29.336]                     if (!future$lazy) 
[17:40:29.336]                       future <- run(future)
[17:40:29.336]                     invisible(future)
[17:40:29.336]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:29.336]                 }
[17:40:29.336]             }
[17:40:29.336]         }
[17:40:29.336]     })
[17:40:29.336]     if (TRUE) {
[17:40:29.336]         base::sink(type = "output", split = FALSE)
[17:40:29.336]         if (TRUE) {
[17:40:29.336]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:29.336]         }
[17:40:29.336]         else {
[17:40:29.336]             ...future.result["stdout"] <- base::list(NULL)
[17:40:29.336]         }
[17:40:29.336]         base::close(...future.stdout)
[17:40:29.336]         ...future.stdout <- NULL
[17:40:29.336]     }
[17:40:29.336]     ...future.result$conditions <- ...future.conditions
[17:40:29.336]     ...future.result$finished <- base::Sys.time()
[17:40:29.336]     ...future.result
[17:40:29.336] }
[17:40:29.339] assign_globals() ...
[17:40:29.340] List of 7
[17:40:29.340]  $ ...future.FUN            :function (...)  
[17:40:29.340]  $ foo                      :function (x = 1, y = 2)  
[17:40:29.340]  $ x                        : num 3
[17:40:29.340]  $ future.call.arguments    : list()
[17:40:29.340]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:29.340]  $ ...future.elements_ii    :List of 3
[17:40:29.340]   ..$ : int 0
[17:40:29.340]   ..$ : int 0
[17:40:29.340]   ..$ : int 0
[17:40:29.340]  $ ...future.seeds_ii       :List of 3
[17:40:29.340]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[17:40:29.340]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[17:40:29.340]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[17:40:29.340]  $ ...future.globals.maxSize: NULL
[17:40:29.340]  - attr(*, "resolved")= logi FALSE
[17:40:29.340]  - attr(*, "total_size")= num 2200
[17:40:29.340]  - attr(*, "where")=List of 7
[17:40:29.340]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:40:29.340]   ..$ foo                      :<environment: R_EmptyEnv> 
[17:40:29.340]   ..$ x                        :<environment: R_EmptyEnv> 
[17:40:29.340]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:40:29.340]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:40:29.340]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:40:29.340]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:40:29.340]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:29.340]  - attr(*, "already-done")= logi TRUE
[17:40:29.355] - reassign environment for ‘...future.FUN’
[17:40:29.355] - copied ‘...future.FUN’ to environment
[17:40:29.355] - reassign environment for ‘foo’
[17:40:29.356] - copied ‘foo’ to environment
[17:40:29.356] - copied ‘x’ to environment
[17:40:29.356] - copied ‘future.call.arguments’ to environment
[17:40:29.356] - copied ‘...future.elements_ii’ to environment
[17:40:29.356] - copied ‘...future.seeds_ii’ to environment
[17:40:29.356] - copied ‘...future.globals.maxSize’ to environment
[17:40:29.356] assign_globals() ... done
[17:40:29.357] requestCore(): workers = 2
[17:40:29.359] MulticoreFuture started
[17:40:29.359] - Launch lazy future ... done
[17:40:29.359] run() for ‘MulticoreFuture’ ... done
[17:40:29.360] Created future:
[17:40:29.360] plan(): Setting new future strategy stack:
[17:40:29.360] List of future strategies:
[17:40:29.360] 1. sequential:
[17:40:29.360]    - args: function (..., envir = parent.frame())
[17:40:29.360]    - tweaked: FALSE
[17:40:29.360]    - call: NULL
[17:40:29.361] plan(): nbrOfWorkers() = 1
[17:40:29.363] plan(): Setting new future strategy stack:
[17:40:29.364] List of future strategies:
[17:40:29.364] 1. multicore:
[17:40:29.364]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:29.364]    - tweaked: FALSE
[17:40:29.364]    - call: plan(strategy)
[17:40:29.369] plan(): nbrOfWorkers() = 2
[17:40:29.360] MulticoreFuture:
[17:40:29.360] Label: ‘future_replicate-2’
[17:40:29.360] Expression:
[17:40:29.360] {
[17:40:29.360]     do.call(function(...) {
[17:40:29.360]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:29.360]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:29.360]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:29.360]             on.exit(options(oopts), add = TRUE)
[17:40:29.360]         }
[17:40:29.360]         {
[17:40:29.360]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:29.360]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:29.360]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:29.360]                   envir = globalenv(), inherits = FALSE)
[17:40:29.360]                 ...future.FUN(...future.X_jj, ...)
[17:40:29.360]             })
[17:40:29.360]         }
[17:40:29.360]     }, args = future.call.arguments)
[17:40:29.360] }
[17:40:29.360] Lazy evaluation: FALSE
[17:40:29.360] Asynchronous evaluation: TRUE
[17:40:29.360] Local evaluation: TRUE
[17:40:29.360] Environment: 0x558a3b377fb0
[17:40:29.360] Capture standard output: TRUE
[17:40:29.360] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:29.360] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[17:40:29.360] Packages: <none>
[17:40:29.360] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:29.360] Resolved: TRUE
[17:40:29.360] Value: <not collected>
[17:40:29.360] Conditions captured: <none>
[17:40:29.360] Early signaling: FALSE
[17:40:29.360] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:29.360] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:29.370] Chunk #2 of 2 ... DONE
[17:40:29.370] Launching 2 futures (chunks) ... DONE
[17:40:29.370] Resolving 2 futures (chunks) ...
[17:40:29.370] resolve() on list ...
[17:40:29.370]  recursive: 0
[17:40:29.371]  length: 2
[17:40:29.371] 
[17:40:29.371] Future #1
[17:40:29.372] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:40:29.372] - nx: 2
[17:40:29.373] - relay: TRUE
[17:40:29.373] - stdout: TRUE
[17:40:29.373] - signal: TRUE
[17:40:29.373] - resignal: FALSE
[17:40:29.373] - force: TRUE
[17:40:29.373] - relayed: [n=2] FALSE, FALSE
[17:40:29.374] - queued futures: [n=2] FALSE, FALSE
[17:40:29.374]  - until=1
[17:40:29.374]  - relaying element #1
[17:40:29.374] - relayed: [n=2] TRUE, FALSE
[17:40:29.374] - queued futures: [n=2] TRUE, FALSE
[17:40:29.374] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:40:29.375]  length: 1 (resolved future 1)
[17:40:29.375] Future #2
[17:40:29.376] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:40:29.376] - nx: 2
[17:40:29.376] - relay: TRUE
[17:40:29.376] - stdout: TRUE
[17:40:29.376] - signal: TRUE
[17:40:29.377] - resignal: FALSE
[17:40:29.377] - force: TRUE
[17:40:29.377] - relayed: [n=2] TRUE, FALSE
[17:40:29.377] - queued futures: [n=2] TRUE, FALSE
[17:40:29.377]  - until=2
[17:40:29.377]  - relaying element #2
[17:40:29.377] - relayed: [n=2] TRUE, TRUE
[17:40:29.378] - queued futures: [n=2] TRUE, TRUE
[17:40:29.378] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:40:29.378]  length: 0 (resolved future 2)
[17:40:29.378] Relaying remaining futures
[17:40:29.378] signalConditionsASAP(NULL, pos=0) ...
[17:40:29.378] - nx: 2
[17:40:29.378] - relay: TRUE
[17:40:29.378] - stdout: TRUE
[17:40:29.378] - signal: TRUE
[17:40:29.379] - resignal: FALSE
[17:40:29.379] - force: TRUE
[17:40:29.379] - relayed: [n=2] TRUE, TRUE
[17:40:29.379] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:40:29.379] - relayed: [n=2] TRUE, TRUE
[17:40:29.379] - queued futures: [n=2] TRUE, TRUE
[17:40:29.379] signalConditionsASAP(NULL, pos=0) ... done
[17:40:29.379] resolve() on list ... DONE
[17:40:29.380]  - Number of value chunks collected: 2
[17:40:29.380] Resolving 2 futures (chunks) ... DONE
[17:40:29.380] Reducing values from 2 chunks ...
[17:40:29.380]  - Number of values collected after concatenation: 5
[17:40:29.380]  - Number of values expected: 5
[17:40:29.380] Reducing values from 2 chunks ... DONE
[17:40:29.380] future_lapply() ... DONE
[17:40:29.381] plan(): Setting new future strategy stack:
[17:40:29.381] List of future strategies:
[17:40:29.381] 1. sequential:
[17:40:29.381]    - args: function (..., envir = parent.frame())
[17:40:29.381]    - tweaked: FALSE
[17:40:29.381]    - call: plan(sequential)
[17:40:29.382] plan(): nbrOfWorkers() = 1
*** strategy = ‘multicore’ ... done
*** strategy = ‘multisession’ ...
[17:40:29.382] plan(): Setting new future strategy stack:
[17:40:29.382] List of future strategies:
[17:40:29.382] 1. multisession:
[17:40:29.382]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:40:29.382]    - tweaked: FALSE
[17:40:29.382]    - call: plan(strategy)
[17:40:29.383] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:40:29.383] multisession:
[17:40:29.383] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:40:29.383] - tweaked: FALSE
[17:40:29.383] - call: plan(strategy)
[17:40:29.392] getGlobalsAndPackages() ...
[17:40:29.392] Not searching for globals
[17:40:29.392] - globals: [0] <none>
[17:40:29.392] getGlobalsAndPackages() ... DONE
[17:40:29.393] [local output] makeClusterPSOCK() ...
[17:40:29.433] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:40:29.439] [local output] Base port: 11279
[17:40:29.439] [local output] Getting setup options for 2 cluster nodes ...
[17:40:29.439] [local output]  - Node 1 of 2 ...
[17:40:29.439] [local output] localMachine=TRUE => revtunnel=FALSE

[17:40:29.440] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpYOEZWb/worker.rank=1.parallelly.parent=37700.934436e2199e.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpYOEZWb/worker.rank=1.parallelly.parent=37700.934436e2199e.pid")'’
[17:40:29.632] - Possible to infer worker's PID: TRUE
[17:40:29.632] [local output] Rscript port: 11279

[17:40:29.632] [local output]  - Node 2 of 2 ...
[17:40:29.633] [local output] localMachine=TRUE => revtunnel=FALSE

[17:40:29.633] [local output] Rscript port: 11279

[17:40:29.634] [local output] Getting setup options for 2 cluster nodes ... done
[17:40:29.634] [local output]  - Parallel setup requested for some PSOCK nodes
[17:40:29.634] [local output] Setting up PSOCK nodes in parallel
[17:40:29.635] List of 36
[17:40:29.635]  $ worker          : chr "localhost"
[17:40:29.635]   ..- attr(*, "localhost")= logi TRUE
[17:40:29.635]  $ master          : chr "localhost"
[17:40:29.635]  $ port            : int 11279
[17:40:29.635]  $ connectTimeout  : num 120
[17:40:29.635]  $ timeout         : num 2592000
[17:40:29.635]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:40:29.635]  $ homogeneous     : logi TRUE
[17:40:29.635]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:40:29.635]  $ rscript_envs    : NULL
[17:40:29.635]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:40:29.635]  $ rscript_startup : NULL
[17:40:29.635]  $ rscript_sh      : chr "sh"
[17:40:29.635]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:40:29.635]  $ methods         : logi TRUE
[17:40:29.635]  $ socketOptions   : chr "no-delay"
[17:40:29.635]  $ useXDR          : logi FALSE
[17:40:29.635]  $ outfile         : chr "/dev/null"
[17:40:29.635]  $ renice          : int NA
[17:40:29.635]  $ rshcmd          : NULL
[17:40:29.635]  $ user            : chr(0) 
[17:40:29.635]  $ revtunnel       : logi FALSE
[17:40:29.635]  $ rshlogfile      : NULL
[17:40:29.635]  $ rshopts         : chr(0) 
[17:40:29.635]  $ rank            : int 1
[17:40:29.635]  $ manual          : logi FALSE
[17:40:29.635]  $ dryrun          : logi FALSE
[17:40:29.635]  $ quiet           : logi FALSE
[17:40:29.635]  $ setup_strategy  : chr "parallel"
[17:40:29.635]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:40:29.635]  $ pidfile         : chr "/tmp/RtmpYOEZWb/worker.rank=1.parallelly.parent=37700.934436e2199e.pid"
[17:40:29.635]  $ rshcmd_label    : NULL
[17:40:29.635]  $ rsh_call        : NULL
[17:40:29.635]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:40:29.635]  $ localMachine    : logi TRUE
[17:40:29.635]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:40:29.635]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:40:29.635]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:40:29.635]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:40:29.635]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:40:29.635]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:40:29.635]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:40:29.635]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:40:29.635]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:40:29.635]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:40:29.635]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:40:29.635]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:40:29.635]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:40:29.635]  $ arguments       :List of 28
[17:40:29.635]   ..$ worker          : chr "localhost"
[17:40:29.635]   ..$ master          : NULL
[17:40:29.635]   ..$ port            : int 11279
[17:40:29.635]   ..$ connectTimeout  : num 120
[17:40:29.635]   ..$ timeout         : num 2592000
[17:40:29.635]   ..$ rscript         : NULL
[17:40:29.635]   ..$ homogeneous     : NULL
[17:40:29.635]   ..$ rscript_args    : NULL
[17:40:29.635]   ..$ rscript_envs    : NULL
[17:40:29.635]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:40:29.635]   ..$ rscript_startup : NULL
[17:40:29.635]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:40:29.635]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:40:29.635]   ..$ methods         : logi TRUE
[17:40:29.635]   ..$ socketOptions   : chr "no-delay"
[17:40:29.635]   ..$ useXDR          : logi FALSE
[17:40:29.635]   ..$ outfile         : chr "/dev/null"
[17:40:29.635]   ..$ renice          : int NA
[17:40:29.635]   ..$ rshcmd          : NULL
[17:40:29.635]   ..$ user            : NULL
[17:40:29.635]   ..$ revtunnel       : logi NA
[17:40:29.635]   ..$ rshlogfile      : NULL
[17:40:29.635]   ..$ rshopts         : NULL
[17:40:29.635]   ..$ rank            : int 1
[17:40:29.635]   ..$ manual          : logi FALSE
[17:40:29.635]   ..$ dryrun          : logi FALSE
[17:40:29.635]   ..$ quiet           : logi FALSE
[17:40:29.635]   ..$ setup_strategy  : chr "parallel"
[17:40:29.635]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:40:29.651] [local output] System call to launch all workers:
[17:40:29.652] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpYOEZWb/worker.rank=1.parallelly.parent=37700.934436e2199e.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11279 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:40:29.652] [local output] Starting PSOCK main server
[17:40:29.653] [local output] Workers launched
[17:40:29.653] [local output] Waiting for workers to connect back
[17:40:29.653]  - [local output] 0 workers out of 2 ready
[17:40:29.897]  - [local output] 0 workers out of 2 ready
[17:40:29.897]  - [local output] 1 workers out of 2 ready
[17:40:29.898]  - [local output] 2 workers out of 2 ready
[17:40:29.898] [local output] Launching of workers completed
[17:40:29.898] [local output] Collecting session information from workers
[17:40:29.899] [local output]  - Worker #1 of 2
[17:40:29.900] [local output]  - Worker #2 of 2
[17:40:29.900] [local output] makeClusterPSOCK() ... done
[17:40:29.912] Packages needed by the future expression (n = 0): <none>
[17:40:29.912] Packages needed by future strategies (n = 0): <none>
[17:40:29.912] {
[17:40:29.912]     {
[17:40:29.912]         {
[17:40:29.912]             ...future.startTime <- base::Sys.time()
[17:40:29.912]             {
[17:40:29.912]                 {
[17:40:29.912]                   {
[17:40:29.912]                     {
[17:40:29.912]                       base::local({
[17:40:29.912]                         has_future <- base::requireNamespace("future", 
[17:40:29.912]                           quietly = TRUE)
[17:40:29.912]                         if (has_future) {
[17:40:29.912]                           ns <- base::getNamespace("future")
[17:40:29.912]                           version <- ns[[".package"]][["version"]]
[17:40:29.912]                           if (is.null(version)) 
[17:40:29.912]                             version <- utils::packageVersion("future")
[17:40:29.912]                         }
[17:40:29.912]                         else {
[17:40:29.912]                           version <- NULL
[17:40:29.912]                         }
[17:40:29.912]                         if (!has_future || version < "1.8.0") {
[17:40:29.912]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:29.912]                             "", base::R.version$version.string), 
[17:40:29.912]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:29.912]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:29.912]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:29.912]                               "release", "version")], collapse = " "), 
[17:40:29.912]                             hostname = base::Sys.info()[["nodename"]])
[17:40:29.912]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:29.912]                             info)
[17:40:29.912]                           info <- base::paste(info, collapse = "; ")
[17:40:29.912]                           if (!has_future) {
[17:40:29.912]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:29.912]                               info)
[17:40:29.912]                           }
[17:40:29.912]                           else {
[17:40:29.912]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:29.912]                               info, version)
[17:40:29.912]                           }
[17:40:29.912]                           base::stop(msg)
[17:40:29.912]                         }
[17:40:29.912]                       })
[17:40:29.912]                     }
[17:40:29.912]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:29.912]                     base::options(mc.cores = 1L)
[17:40:29.912]                   }
[17:40:29.912]                   options(future.plan = NULL)
[17:40:29.912]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:29.912]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:29.912]                 }
[17:40:29.912]                 ...future.workdir <- getwd()
[17:40:29.912]             }
[17:40:29.912]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:29.912]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:29.912]         }
[17:40:29.912]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:29.912]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:29.912]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:29.912]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:29.912]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:29.912]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:29.912]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:29.912]             base::names(...future.oldOptions))
[17:40:29.912]     }
[17:40:29.912]     if (FALSE) {
[17:40:29.912]     }
[17:40:29.912]     else {
[17:40:29.912]         if (TRUE) {
[17:40:29.912]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:29.912]                 open = "w")
[17:40:29.912]         }
[17:40:29.912]         else {
[17:40:29.912]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:29.912]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:29.912]         }
[17:40:29.912]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:29.912]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:29.912]             base::sink(type = "output", split = FALSE)
[17:40:29.912]             base::close(...future.stdout)
[17:40:29.912]         }, add = TRUE)
[17:40:29.912]     }
[17:40:29.912]     ...future.frame <- base::sys.nframe()
[17:40:29.912]     ...future.conditions <- base::list()
[17:40:29.912]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:29.912]     if (FALSE) {
[17:40:29.912]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:29.912]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:29.912]     }
[17:40:29.912]     ...future.result <- base::tryCatch({
[17:40:29.912]         base::withCallingHandlers({
[17:40:29.912]             ...future.value <- base::withVisible(base::local({
[17:40:29.912]                 ...future.makeSendCondition <- local({
[17:40:29.912]                   sendCondition <- NULL
[17:40:29.912]                   function(frame = 1L) {
[17:40:29.912]                     if (is.function(sendCondition)) 
[17:40:29.912]                       return(sendCondition)
[17:40:29.912]                     ns <- getNamespace("parallel")
[17:40:29.912]                     if (exists("sendData", mode = "function", 
[17:40:29.912]                       envir = ns)) {
[17:40:29.912]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:29.912]                         envir = ns)
[17:40:29.912]                       envir <- sys.frame(frame)
[17:40:29.912]                       master <- NULL
[17:40:29.912]                       while (!identical(envir, .GlobalEnv) && 
[17:40:29.912]                         !identical(envir, emptyenv())) {
[17:40:29.912]                         if (exists("master", mode = "list", envir = envir, 
[17:40:29.912]                           inherits = FALSE)) {
[17:40:29.912]                           master <- get("master", mode = "list", 
[17:40:29.912]                             envir = envir, inherits = FALSE)
[17:40:29.912]                           if (inherits(master, c("SOCKnode", 
[17:40:29.912]                             "SOCK0node"))) {
[17:40:29.912]                             sendCondition <<- function(cond) {
[17:40:29.912]                               data <- list(type = "VALUE", value = cond, 
[17:40:29.912]                                 success = TRUE)
[17:40:29.912]                               parallel_sendData(master, data)
[17:40:29.912]                             }
[17:40:29.912]                             return(sendCondition)
[17:40:29.912]                           }
[17:40:29.912]                         }
[17:40:29.912]                         frame <- frame + 1L
[17:40:29.912]                         envir <- sys.frame(frame)
[17:40:29.912]                       }
[17:40:29.912]                     }
[17:40:29.912]                     sendCondition <<- function(cond) NULL
[17:40:29.912]                   }
[17:40:29.912]                 })
[17:40:29.912]                 withCallingHandlers({
[17:40:29.912]                   NA
[17:40:29.912]                 }, immediateCondition = function(cond) {
[17:40:29.912]                   sendCondition <- ...future.makeSendCondition()
[17:40:29.912]                   sendCondition(cond)
[17:40:29.912]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:29.912]                   {
[17:40:29.912]                     inherits <- base::inherits
[17:40:29.912]                     invokeRestart <- base::invokeRestart
[17:40:29.912]                     is.null <- base::is.null
[17:40:29.912]                     muffled <- FALSE
[17:40:29.912]                     if (inherits(cond, "message")) {
[17:40:29.912]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:29.912]                       if (muffled) 
[17:40:29.912]                         invokeRestart("muffleMessage")
[17:40:29.912]                     }
[17:40:29.912]                     else if (inherits(cond, "warning")) {
[17:40:29.912]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:29.912]                       if (muffled) 
[17:40:29.912]                         invokeRestart("muffleWarning")
[17:40:29.912]                     }
[17:40:29.912]                     else if (inherits(cond, "condition")) {
[17:40:29.912]                       if (!is.null(pattern)) {
[17:40:29.912]                         computeRestarts <- base::computeRestarts
[17:40:29.912]                         grepl <- base::grepl
[17:40:29.912]                         restarts <- computeRestarts(cond)
[17:40:29.912]                         for (restart in restarts) {
[17:40:29.912]                           name <- restart$name
[17:40:29.912]                           if (is.null(name)) 
[17:40:29.912]                             next
[17:40:29.912]                           if (!grepl(pattern, name)) 
[17:40:29.912]                             next
[17:40:29.912]                           invokeRestart(restart)
[17:40:29.912]                           muffled <- TRUE
[17:40:29.912]                           break
[17:40:29.912]                         }
[17:40:29.912]                       }
[17:40:29.912]                     }
[17:40:29.912]                     invisible(muffled)
[17:40:29.912]                   }
[17:40:29.912]                   muffleCondition(cond)
[17:40:29.912]                 })
[17:40:29.912]             }))
[17:40:29.912]             future::FutureResult(value = ...future.value$value, 
[17:40:29.912]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:29.912]                   ...future.rng), globalenv = if (FALSE) 
[17:40:29.912]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:29.912]                     ...future.globalenv.names))
[17:40:29.912]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:29.912]         }, condition = base::local({
[17:40:29.912]             c <- base::c
[17:40:29.912]             inherits <- base::inherits
[17:40:29.912]             invokeRestart <- base::invokeRestart
[17:40:29.912]             length <- base::length
[17:40:29.912]             list <- base::list
[17:40:29.912]             seq.int <- base::seq.int
[17:40:29.912]             signalCondition <- base::signalCondition
[17:40:29.912]             sys.calls <- base::sys.calls
[17:40:29.912]             `[[` <- base::`[[`
[17:40:29.912]             `+` <- base::`+`
[17:40:29.912]             `<<-` <- base::`<<-`
[17:40:29.912]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:29.912]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:29.912]                   3L)]
[17:40:29.912]             }
[17:40:29.912]             function(cond) {
[17:40:29.912]                 is_error <- inherits(cond, "error")
[17:40:29.912]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:29.912]                   NULL)
[17:40:29.912]                 if (is_error) {
[17:40:29.912]                   sessionInformation <- function() {
[17:40:29.912]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:29.912]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:29.912]                       search = base::search(), system = base::Sys.info())
[17:40:29.912]                   }
[17:40:29.912]                   ...future.conditions[[length(...future.conditions) + 
[17:40:29.912]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:29.912]                     cond$call), session = sessionInformation(), 
[17:40:29.912]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:29.912]                   signalCondition(cond)
[17:40:29.912]                 }
[17:40:29.912]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:29.912]                 "immediateCondition"))) {
[17:40:29.912]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:29.912]                   ...future.conditions[[length(...future.conditions) + 
[17:40:29.912]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:29.912]                   if (TRUE && !signal) {
[17:40:29.912]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:29.912]                     {
[17:40:29.912]                       inherits <- base::inherits
[17:40:29.912]                       invokeRestart <- base::invokeRestart
[17:40:29.912]                       is.null <- base::is.null
[17:40:29.912]                       muffled <- FALSE
[17:40:29.912]                       if (inherits(cond, "message")) {
[17:40:29.912]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:29.912]                         if (muffled) 
[17:40:29.912]                           invokeRestart("muffleMessage")
[17:40:29.912]                       }
[17:40:29.912]                       else if (inherits(cond, "warning")) {
[17:40:29.912]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:29.912]                         if (muffled) 
[17:40:29.912]                           invokeRestart("muffleWarning")
[17:40:29.912]                       }
[17:40:29.912]                       else if (inherits(cond, "condition")) {
[17:40:29.912]                         if (!is.null(pattern)) {
[17:40:29.912]                           computeRestarts <- base::computeRestarts
[17:40:29.912]                           grepl <- base::grepl
[17:40:29.912]                           restarts <- computeRestarts(cond)
[17:40:29.912]                           for (restart in restarts) {
[17:40:29.912]                             name <- restart$name
[17:40:29.912]                             if (is.null(name)) 
[17:40:29.912]                               next
[17:40:29.912]                             if (!grepl(pattern, name)) 
[17:40:29.912]                               next
[17:40:29.912]                             invokeRestart(restart)
[17:40:29.912]                             muffled <- TRUE
[17:40:29.912]                             break
[17:40:29.912]                           }
[17:40:29.912]                         }
[17:40:29.912]                       }
[17:40:29.912]                       invisible(muffled)
[17:40:29.912]                     }
[17:40:29.912]                     muffleCondition(cond, pattern = "^muffle")
[17:40:29.912]                   }
[17:40:29.912]                 }
[17:40:29.912]                 else {
[17:40:29.912]                   if (TRUE) {
[17:40:29.912]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:29.912]                     {
[17:40:29.912]                       inherits <- base::inherits
[17:40:29.912]                       invokeRestart <- base::invokeRestart
[17:40:29.912]                       is.null <- base::is.null
[17:40:29.912]                       muffled <- FALSE
[17:40:29.912]                       if (inherits(cond, "message")) {
[17:40:29.912]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:29.912]                         if (muffled) 
[17:40:29.912]                           invokeRestart("muffleMessage")
[17:40:29.912]                       }
[17:40:29.912]                       else if (inherits(cond, "warning")) {
[17:40:29.912]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:29.912]                         if (muffled) 
[17:40:29.912]                           invokeRestart("muffleWarning")
[17:40:29.912]                       }
[17:40:29.912]                       else if (inherits(cond, "condition")) {
[17:40:29.912]                         if (!is.null(pattern)) {
[17:40:29.912]                           computeRestarts <- base::computeRestarts
[17:40:29.912]                           grepl <- base::grepl
[17:40:29.912]                           restarts <- computeRestarts(cond)
[17:40:29.912]                           for (restart in restarts) {
[17:40:29.912]                             name <- restart$name
[17:40:29.912]                             if (is.null(name)) 
[17:40:29.912]                               next
[17:40:29.912]                             if (!grepl(pattern, name)) 
[17:40:29.912]                               next
[17:40:29.912]                             invokeRestart(restart)
[17:40:29.912]                             muffled <- TRUE
[17:40:29.912]                             break
[17:40:29.912]                           }
[17:40:29.912]                         }
[17:40:29.912]                       }
[17:40:29.912]                       invisible(muffled)
[17:40:29.912]                     }
[17:40:29.912]                     muffleCondition(cond, pattern = "^muffle")
[17:40:29.912]                   }
[17:40:29.912]                 }
[17:40:29.912]             }
[17:40:29.912]         }))
[17:40:29.912]     }, error = function(ex) {
[17:40:29.912]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:29.912]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:29.912]                 ...future.rng), started = ...future.startTime, 
[17:40:29.912]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:29.912]             version = "1.8"), class = "FutureResult")
[17:40:29.912]     }, finally = {
[17:40:29.912]         if (!identical(...future.workdir, getwd())) 
[17:40:29.912]             setwd(...future.workdir)
[17:40:29.912]         {
[17:40:29.912]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:29.912]                 ...future.oldOptions$nwarnings <- NULL
[17:40:29.912]             }
[17:40:29.912]             base::options(...future.oldOptions)
[17:40:29.912]             if (.Platform$OS.type == "windows") {
[17:40:29.912]                 old_names <- names(...future.oldEnvVars)
[17:40:29.912]                 envs <- base::Sys.getenv()
[17:40:29.912]                 names <- names(envs)
[17:40:29.912]                 common <- intersect(names, old_names)
[17:40:29.912]                 added <- setdiff(names, old_names)
[17:40:29.912]                 removed <- setdiff(old_names, names)
[17:40:29.912]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:29.912]                   envs[common]]
[17:40:29.912]                 NAMES <- toupper(changed)
[17:40:29.912]                 args <- list()
[17:40:29.912]                 for (kk in seq_along(NAMES)) {
[17:40:29.912]                   name <- changed[[kk]]
[17:40:29.912]                   NAME <- NAMES[[kk]]
[17:40:29.912]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:29.912]                     next
[17:40:29.912]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:29.912]                 }
[17:40:29.912]                 NAMES <- toupper(added)
[17:40:29.912]                 for (kk in seq_along(NAMES)) {
[17:40:29.912]                   name <- added[[kk]]
[17:40:29.912]                   NAME <- NAMES[[kk]]
[17:40:29.912]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:29.912]                     next
[17:40:29.912]                   args[[name]] <- ""
[17:40:29.912]                 }
[17:40:29.912]                 NAMES <- toupper(removed)
[17:40:29.912]                 for (kk in seq_along(NAMES)) {
[17:40:29.912]                   name <- removed[[kk]]
[17:40:29.912]                   NAME <- NAMES[[kk]]
[17:40:29.912]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:29.912]                     next
[17:40:29.912]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:29.912]                 }
[17:40:29.912]                 if (length(args) > 0) 
[17:40:29.912]                   base::do.call(base::Sys.setenv, args = args)
[17:40:29.912]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:29.912]             }
[17:40:29.912]             else {
[17:40:29.912]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:29.912]             }
[17:40:29.912]             {
[17:40:29.912]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:29.912]                   0L) {
[17:40:29.912]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:29.912]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:29.912]                   base::options(opts)
[17:40:29.912]                 }
[17:40:29.912]                 {
[17:40:29.912]                   {
[17:40:29.912]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:29.912]                     NULL
[17:40:29.912]                   }
[17:40:29.912]                   options(future.plan = NULL)
[17:40:29.912]                   if (is.na(NA_character_)) 
[17:40:29.912]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:29.912]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:29.912]                   future::plan(list(function (..., workers = availableCores(), 
[17:40:29.912]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:40:29.912]                     envir = parent.frame()) 
[17:40:29.912]                   {
[17:40:29.912]                     if (is.function(workers)) 
[17:40:29.912]                       workers <- workers()
[17:40:29.912]                     workers <- structure(as.integer(workers), 
[17:40:29.912]                       class = class(workers))
[17:40:29.912]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:40:29.912]                       workers >= 1)
[17:40:29.912]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:40:29.912]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:40:29.912]                     }
[17:40:29.912]                     future <- MultisessionFuture(..., workers = workers, 
[17:40:29.912]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:40:29.912]                       envir = envir)
[17:40:29.912]                     if (!future$lazy) 
[17:40:29.912]                       future <- run(future)
[17:40:29.912]                     invisible(future)
[17:40:29.912]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:29.912]                 }
[17:40:29.912]             }
[17:40:29.912]         }
[17:40:29.912]     })
[17:40:29.912]     if (TRUE) {
[17:40:29.912]         base::sink(type = "output", split = FALSE)
[17:40:29.912]         if (TRUE) {
[17:40:29.912]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:29.912]         }
[17:40:29.912]         else {
[17:40:29.912]             ...future.result["stdout"] <- base::list(NULL)
[17:40:29.912]         }
[17:40:29.912]         base::close(...future.stdout)
[17:40:29.912]         ...future.stdout <- NULL
[17:40:29.912]     }
[17:40:29.912]     ...future.result$conditions <- ...future.conditions
[17:40:29.912]     ...future.result$finished <- base::Sys.time()
[17:40:29.912]     ...future.result
[17:40:29.912] }
[17:40:29.985] MultisessionFuture started
[17:40:29.985] result() for ClusterFuture ...
[17:40:29.986] receiveMessageFromWorker() for ClusterFuture ...
[17:40:29.986] - Validating connection of MultisessionFuture
[17:40:30.018] - received message: FutureResult
[17:40:30.019] - Received FutureResult
[17:40:30.019] - Erased future from FutureRegistry
[17:40:30.019] result() for ClusterFuture ...
[17:40:30.019] - result already collected: FutureResult
[17:40:30.019] result() for ClusterFuture ... done
[17:40:30.019] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:30.020] result() for ClusterFuture ... done
[17:40:30.020] result() for ClusterFuture ...
[17:40:30.020] - result already collected: FutureResult
[17:40:30.020] result() for ClusterFuture ... done
[17:40:30.020] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:40:30.024] plan(): nbrOfWorkers() = 2
[17:40:30.024] future_lapply() ...
[17:40:30.025] Generating random seeds ...
[17:40:30.025] Generating random seed streams for 5 elements ...
[17:40:30.025] Generating random seed streams for 5 elements ... DONE
[17:40:30.025] Generating random seeds ... DONE
[17:40:30.025] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:40:30.030] Number of chunks: 2
[17:40:30.030] getGlobalsAndPackagesXApply() ...
[17:40:30.030]  - future.globals: TRUE
[17:40:30.030] getGlobalsAndPackages() ...
[17:40:30.030] Searching for globals...
[17:40:30.032] - globals found: [2] ‘FUN’, ‘sample’
[17:40:30.032] Searching for globals ... DONE
[17:40:30.032] Resolving globals: FALSE
[17:40:30.032] The total size of the 1 globals is 616 bytes (616 bytes)
[17:40:30.033] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:40:30.033] - globals: [1] ‘FUN’
[17:40:30.033] 
[17:40:30.033] getGlobalsAndPackages() ... DONE
[17:40:30.033]  - globals found/used: [n=1] ‘FUN’
[17:40:30.033]  - needed namespaces: [n=0] 
[17:40:30.033] Finding globals ... DONE
[17:40:30.034]  - use_args: TRUE
[17:40:30.034]  - Getting '...' globals ...
[17:40:30.034] resolve() on list ...
[17:40:30.034]  recursive: 0
[17:40:30.034]  length: 1
[17:40:30.034]  elements: ‘...’
[17:40:30.035]  length: 0 (resolved future 1)
[17:40:30.035] resolve() on list ... DONE
[17:40:30.035]    - '...' content: [n=0] 
[17:40:30.035] List of 1
[17:40:30.035]  $ ...: list()
[17:40:30.035]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:30.035]  - attr(*, "where")=List of 1
[17:40:30.035]   ..$ ...:<environment: 0x558a3cfc2230> 
[17:40:30.035]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:30.035]  - attr(*, "resolved")= logi TRUE
[17:40:30.035]  - attr(*, "total_size")= num NA
[17:40:30.038]  - Getting '...' globals ... DONE
[17:40:30.038] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:40:30.038] List of 2
[17:40:30.038]  $ ...future.FUN:function (...)  
[17:40:30.038]  $ ...          : list()
[17:40:30.038]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:30.038]  - attr(*, "where")=List of 2
[17:40:30.038]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:40:30.038]   ..$ ...          :<environment: 0x558a3cfc2230> 
[17:40:30.038]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:30.038]  - attr(*, "resolved")= logi FALSE
[17:40:30.038]  - attr(*, "total_size")= num 616
[17:40:30.042] Packages to be attached in all futures: [n=0] 
[17:40:30.042] getGlobalsAndPackagesXApply() ... DONE
[17:40:30.042] Number of futures (= number of chunks): 2
[17:40:30.042] Launching 2 futures (chunks) ...
[17:40:30.042] Chunk #1 of 2 ...
[17:40:30.043]  - Finding globals in 'X' for chunk #1 ...
[17:40:30.043] getGlobalsAndPackages() ...
[17:40:30.043] Searching for globals...
[17:40:30.043] 
[17:40:30.043] Searching for globals ... DONE
[17:40:30.043] - globals: [0] <none>
[17:40:30.043] getGlobalsAndPackages() ... DONE
[17:40:30.044]    + additional globals found: [n=0] 
[17:40:30.044]    + additional namespaces needed: [n=0] 
[17:40:30.044]  - Finding globals in 'X' for chunk #1 ... DONE
[17:40:30.044]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:40:30.044]  - seeds: [2] <seeds>
[17:40:30.044] getGlobalsAndPackages() ...
[17:40:30.044] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.044] Resolving globals: FALSE
[17:40:30.045] Tweak future expression to call with '...' arguments ...
[17:40:30.045] {
[17:40:30.045]     do.call(function(...) {
[17:40:30.045]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.045]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.045]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.045]             on.exit(options(oopts), add = TRUE)
[17:40:30.045]         }
[17:40:30.045]         {
[17:40:30.045]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.045]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.045]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.045]                   envir = globalenv(), inherits = FALSE)
[17:40:30.045]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.045]             })
[17:40:30.045]         }
[17:40:30.045]     }, args = future.call.arguments)
[17:40:30.045] }
[17:40:30.045] Tweak future expression to call with '...' arguments ... DONE
[17:40:30.045] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.046] 
[17:40:30.046] getGlobalsAndPackages() ... DONE
[17:40:30.046] run() for ‘Future’ ...
[17:40:30.046] - state: ‘created’
[17:40:30.046] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:40:30.061] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.062] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:40:30.062]   - Field: ‘node’
[17:40:30.062]   - Field: ‘label’
[17:40:30.062]   - Field: ‘local’
[17:40:30.062]   - Field: ‘owner’
[17:40:30.062]   - Field: ‘envir’
[17:40:30.062]   - Field: ‘workers’
[17:40:30.062]   - Field: ‘packages’
[17:40:30.062]   - Field: ‘gc’
[17:40:30.063]   - Field: ‘conditions’
[17:40:30.063]   - Field: ‘persistent’
[17:40:30.063]   - Field: ‘expr’
[17:40:30.063]   - Field: ‘uuid’
[17:40:30.063]   - Field: ‘seed’
[17:40:30.063]   - Field: ‘version’
[17:40:30.063]   - Field: ‘result’
[17:40:30.063]   - Field: ‘asynchronous’
[17:40:30.064]   - Field: ‘calls’
[17:40:30.064]   - Field: ‘globals’
[17:40:30.064]   - Field: ‘stdout’
[17:40:30.064]   - Field: ‘earlySignal’
[17:40:30.064]   - Field: ‘lazy’
[17:40:30.064]   - Field: ‘state’
[17:40:30.064] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:40:30.064] - Launch lazy future ...
[17:40:30.065] Packages needed by the future expression (n = 0): <none>
[17:40:30.065] Packages needed by future strategies (n = 0): <none>
[17:40:30.065] {
[17:40:30.065]     {
[17:40:30.065]         {
[17:40:30.065]             ...future.startTime <- base::Sys.time()
[17:40:30.065]             {
[17:40:30.065]                 {
[17:40:30.065]                   {
[17:40:30.065]                     {
[17:40:30.065]                       base::local({
[17:40:30.065]                         has_future <- base::requireNamespace("future", 
[17:40:30.065]                           quietly = TRUE)
[17:40:30.065]                         if (has_future) {
[17:40:30.065]                           ns <- base::getNamespace("future")
[17:40:30.065]                           version <- ns[[".package"]][["version"]]
[17:40:30.065]                           if (is.null(version)) 
[17:40:30.065]                             version <- utils::packageVersion("future")
[17:40:30.065]                         }
[17:40:30.065]                         else {
[17:40:30.065]                           version <- NULL
[17:40:30.065]                         }
[17:40:30.065]                         if (!has_future || version < "1.8.0") {
[17:40:30.065]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:30.065]                             "", base::R.version$version.string), 
[17:40:30.065]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:30.065]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:30.065]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:30.065]                               "release", "version")], collapse = " "), 
[17:40:30.065]                             hostname = base::Sys.info()[["nodename"]])
[17:40:30.065]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:30.065]                             info)
[17:40:30.065]                           info <- base::paste(info, collapse = "; ")
[17:40:30.065]                           if (!has_future) {
[17:40:30.065]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:30.065]                               info)
[17:40:30.065]                           }
[17:40:30.065]                           else {
[17:40:30.065]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:30.065]                               info, version)
[17:40:30.065]                           }
[17:40:30.065]                           base::stop(msg)
[17:40:30.065]                         }
[17:40:30.065]                       })
[17:40:30.065]                     }
[17:40:30.065]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:30.065]                     base::options(mc.cores = 1L)
[17:40:30.065]                   }
[17:40:30.065]                   options(future.plan = NULL)
[17:40:30.065]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.065]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:30.065]                 }
[17:40:30.065]                 ...future.workdir <- getwd()
[17:40:30.065]             }
[17:40:30.065]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:30.065]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:30.065]         }
[17:40:30.065]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:30.065]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:40:30.065]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:30.065]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:30.065]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:30.065]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:30.065]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:30.065]             base::names(...future.oldOptions))
[17:40:30.065]     }
[17:40:30.065]     if (FALSE) {
[17:40:30.065]     }
[17:40:30.065]     else {
[17:40:30.065]         if (TRUE) {
[17:40:30.065]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:30.065]                 open = "w")
[17:40:30.065]         }
[17:40:30.065]         else {
[17:40:30.065]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:30.065]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:30.065]         }
[17:40:30.065]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:30.065]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:30.065]             base::sink(type = "output", split = FALSE)
[17:40:30.065]             base::close(...future.stdout)
[17:40:30.065]         }, add = TRUE)
[17:40:30.065]     }
[17:40:30.065]     ...future.frame <- base::sys.nframe()
[17:40:30.065]     ...future.conditions <- base::list()
[17:40:30.065]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:30.065]     if (FALSE) {
[17:40:30.065]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:30.065]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:30.065]     }
[17:40:30.065]     ...future.result <- base::tryCatch({
[17:40:30.065]         base::withCallingHandlers({
[17:40:30.065]             ...future.value <- base::withVisible(base::local({
[17:40:30.065]                 ...future.makeSendCondition <- local({
[17:40:30.065]                   sendCondition <- NULL
[17:40:30.065]                   function(frame = 1L) {
[17:40:30.065]                     if (is.function(sendCondition)) 
[17:40:30.065]                       return(sendCondition)
[17:40:30.065]                     ns <- getNamespace("parallel")
[17:40:30.065]                     if (exists("sendData", mode = "function", 
[17:40:30.065]                       envir = ns)) {
[17:40:30.065]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:30.065]                         envir = ns)
[17:40:30.065]                       envir <- sys.frame(frame)
[17:40:30.065]                       master <- NULL
[17:40:30.065]                       while (!identical(envir, .GlobalEnv) && 
[17:40:30.065]                         !identical(envir, emptyenv())) {
[17:40:30.065]                         if (exists("master", mode = "list", envir = envir, 
[17:40:30.065]                           inherits = FALSE)) {
[17:40:30.065]                           master <- get("master", mode = "list", 
[17:40:30.065]                             envir = envir, inherits = FALSE)
[17:40:30.065]                           if (inherits(master, c("SOCKnode", 
[17:40:30.065]                             "SOCK0node"))) {
[17:40:30.065]                             sendCondition <<- function(cond) {
[17:40:30.065]                               data <- list(type = "VALUE", value = cond, 
[17:40:30.065]                                 success = TRUE)
[17:40:30.065]                               parallel_sendData(master, data)
[17:40:30.065]                             }
[17:40:30.065]                             return(sendCondition)
[17:40:30.065]                           }
[17:40:30.065]                         }
[17:40:30.065]                         frame <- frame + 1L
[17:40:30.065]                         envir <- sys.frame(frame)
[17:40:30.065]                       }
[17:40:30.065]                     }
[17:40:30.065]                     sendCondition <<- function(cond) NULL
[17:40:30.065]                   }
[17:40:30.065]                 })
[17:40:30.065]                 withCallingHandlers({
[17:40:30.065]                   {
[17:40:30.065]                     do.call(function(...) {
[17:40:30.065]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.065]                       if (!identical(...future.globals.maxSize.org, 
[17:40:30.065]                         ...future.globals.maxSize)) {
[17:40:30.065]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.065]                         on.exit(options(oopts), add = TRUE)
[17:40:30.065]                       }
[17:40:30.065]                       {
[17:40:30.065]                         lapply(seq_along(...future.elements_ii), 
[17:40:30.065]                           FUN = function(jj) {
[17:40:30.065]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.065]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.065]                               envir = globalenv(), inherits = FALSE)
[17:40:30.065]                             ...future.FUN(...future.X_jj, ...)
[17:40:30.065]                           })
[17:40:30.065]                       }
[17:40:30.065]                     }, args = future.call.arguments)
[17:40:30.065]                   }
[17:40:30.065]                 }, immediateCondition = function(cond) {
[17:40:30.065]                   sendCondition <- ...future.makeSendCondition()
[17:40:30.065]                   sendCondition(cond)
[17:40:30.065]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.065]                   {
[17:40:30.065]                     inherits <- base::inherits
[17:40:30.065]                     invokeRestart <- base::invokeRestart
[17:40:30.065]                     is.null <- base::is.null
[17:40:30.065]                     muffled <- FALSE
[17:40:30.065]                     if (inherits(cond, "message")) {
[17:40:30.065]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:30.065]                       if (muffled) 
[17:40:30.065]                         invokeRestart("muffleMessage")
[17:40:30.065]                     }
[17:40:30.065]                     else if (inherits(cond, "warning")) {
[17:40:30.065]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:30.065]                       if (muffled) 
[17:40:30.065]                         invokeRestart("muffleWarning")
[17:40:30.065]                     }
[17:40:30.065]                     else if (inherits(cond, "condition")) {
[17:40:30.065]                       if (!is.null(pattern)) {
[17:40:30.065]                         computeRestarts <- base::computeRestarts
[17:40:30.065]                         grepl <- base::grepl
[17:40:30.065]                         restarts <- computeRestarts(cond)
[17:40:30.065]                         for (restart in restarts) {
[17:40:30.065]                           name <- restart$name
[17:40:30.065]                           if (is.null(name)) 
[17:40:30.065]                             next
[17:40:30.065]                           if (!grepl(pattern, name)) 
[17:40:30.065]                             next
[17:40:30.065]                           invokeRestart(restart)
[17:40:30.065]                           muffled <- TRUE
[17:40:30.065]                           break
[17:40:30.065]                         }
[17:40:30.065]                       }
[17:40:30.065]                     }
[17:40:30.065]                     invisible(muffled)
[17:40:30.065]                   }
[17:40:30.065]                   muffleCondition(cond)
[17:40:30.065]                 })
[17:40:30.065]             }))
[17:40:30.065]             future::FutureResult(value = ...future.value$value, 
[17:40:30.065]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.065]                   ...future.rng), globalenv = if (FALSE) 
[17:40:30.065]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:30.065]                     ...future.globalenv.names))
[17:40:30.065]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:30.065]         }, condition = base::local({
[17:40:30.065]             c <- base::c
[17:40:30.065]             inherits <- base::inherits
[17:40:30.065]             invokeRestart <- base::invokeRestart
[17:40:30.065]             length <- base::length
[17:40:30.065]             list <- base::list
[17:40:30.065]             seq.int <- base::seq.int
[17:40:30.065]             signalCondition <- base::signalCondition
[17:40:30.065]             sys.calls <- base::sys.calls
[17:40:30.065]             `[[` <- base::`[[`
[17:40:30.065]             `+` <- base::`+`
[17:40:30.065]             `<<-` <- base::`<<-`
[17:40:30.065]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:30.065]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:30.065]                   3L)]
[17:40:30.065]             }
[17:40:30.065]             function(cond) {
[17:40:30.065]                 is_error <- inherits(cond, "error")
[17:40:30.065]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:30.065]                   NULL)
[17:40:30.065]                 if (is_error) {
[17:40:30.065]                   sessionInformation <- function() {
[17:40:30.065]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:30.065]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:30.065]                       search = base::search(), system = base::Sys.info())
[17:40:30.065]                   }
[17:40:30.065]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.065]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:30.065]                     cond$call), session = sessionInformation(), 
[17:40:30.065]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:30.065]                   signalCondition(cond)
[17:40:30.065]                 }
[17:40:30.065]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:30.065]                 "immediateCondition"))) {
[17:40:30.065]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:30.065]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.065]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:30.065]                   if (TRUE && !signal) {
[17:40:30.065]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.065]                     {
[17:40:30.065]                       inherits <- base::inherits
[17:40:30.065]                       invokeRestart <- base::invokeRestart
[17:40:30.065]                       is.null <- base::is.null
[17:40:30.065]                       muffled <- FALSE
[17:40:30.065]                       if (inherits(cond, "message")) {
[17:40:30.065]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.065]                         if (muffled) 
[17:40:30.065]                           invokeRestart("muffleMessage")
[17:40:30.065]                       }
[17:40:30.065]                       else if (inherits(cond, "warning")) {
[17:40:30.065]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.065]                         if (muffled) 
[17:40:30.065]                           invokeRestart("muffleWarning")
[17:40:30.065]                       }
[17:40:30.065]                       else if (inherits(cond, "condition")) {
[17:40:30.065]                         if (!is.null(pattern)) {
[17:40:30.065]                           computeRestarts <- base::computeRestarts
[17:40:30.065]                           grepl <- base::grepl
[17:40:30.065]                           restarts <- computeRestarts(cond)
[17:40:30.065]                           for (restart in restarts) {
[17:40:30.065]                             name <- restart$name
[17:40:30.065]                             if (is.null(name)) 
[17:40:30.065]                               next
[17:40:30.065]                             if (!grepl(pattern, name)) 
[17:40:30.065]                               next
[17:40:30.065]                             invokeRestart(restart)
[17:40:30.065]                             muffled <- TRUE
[17:40:30.065]                             break
[17:40:30.065]                           }
[17:40:30.065]                         }
[17:40:30.065]                       }
[17:40:30.065]                       invisible(muffled)
[17:40:30.065]                     }
[17:40:30.065]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.065]                   }
[17:40:30.065]                 }
[17:40:30.065]                 else {
[17:40:30.065]                   if (TRUE) {
[17:40:30.065]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.065]                     {
[17:40:30.065]                       inherits <- base::inherits
[17:40:30.065]                       invokeRestart <- base::invokeRestart
[17:40:30.065]                       is.null <- base::is.null
[17:40:30.065]                       muffled <- FALSE
[17:40:30.065]                       if (inherits(cond, "message")) {
[17:40:30.065]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.065]                         if (muffled) 
[17:40:30.065]                           invokeRestart("muffleMessage")
[17:40:30.065]                       }
[17:40:30.065]                       else if (inherits(cond, "warning")) {
[17:40:30.065]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.065]                         if (muffled) 
[17:40:30.065]                           invokeRestart("muffleWarning")
[17:40:30.065]                       }
[17:40:30.065]                       else if (inherits(cond, "condition")) {
[17:40:30.065]                         if (!is.null(pattern)) {
[17:40:30.065]                           computeRestarts <- base::computeRestarts
[17:40:30.065]                           grepl <- base::grepl
[17:40:30.065]                           restarts <- computeRestarts(cond)
[17:40:30.065]                           for (restart in restarts) {
[17:40:30.065]                             name <- restart$name
[17:40:30.065]                             if (is.null(name)) 
[17:40:30.065]                               next
[17:40:30.065]                             if (!grepl(pattern, name)) 
[17:40:30.065]                               next
[17:40:30.065]                             invokeRestart(restart)
[17:40:30.065]                             muffled <- TRUE
[17:40:30.065]                             break
[17:40:30.065]                           }
[17:40:30.065]                         }
[17:40:30.065]                       }
[17:40:30.065]                       invisible(muffled)
[17:40:30.065]                     }
[17:40:30.065]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.065]                   }
[17:40:30.065]                 }
[17:40:30.065]             }
[17:40:30.065]         }))
[17:40:30.065]     }, error = function(ex) {
[17:40:30.065]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:30.065]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.065]                 ...future.rng), started = ...future.startTime, 
[17:40:30.065]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:30.065]             version = "1.8"), class = "FutureResult")
[17:40:30.065]     }, finally = {
[17:40:30.065]         if (!identical(...future.workdir, getwd())) 
[17:40:30.065]             setwd(...future.workdir)
[17:40:30.065]         {
[17:40:30.065]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:30.065]                 ...future.oldOptions$nwarnings <- NULL
[17:40:30.065]             }
[17:40:30.065]             base::options(...future.oldOptions)
[17:40:30.065]             if (.Platform$OS.type == "windows") {
[17:40:30.065]                 old_names <- names(...future.oldEnvVars)
[17:40:30.065]                 envs <- base::Sys.getenv()
[17:40:30.065]                 names <- names(envs)
[17:40:30.065]                 common <- intersect(names, old_names)
[17:40:30.065]                 added <- setdiff(names, old_names)
[17:40:30.065]                 removed <- setdiff(old_names, names)
[17:40:30.065]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:30.065]                   envs[common]]
[17:40:30.065]                 NAMES <- toupper(changed)
[17:40:30.065]                 args <- list()
[17:40:30.065]                 for (kk in seq_along(NAMES)) {
[17:40:30.065]                   name <- changed[[kk]]
[17:40:30.065]                   NAME <- NAMES[[kk]]
[17:40:30.065]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.065]                     next
[17:40:30.065]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.065]                 }
[17:40:30.065]                 NAMES <- toupper(added)
[17:40:30.065]                 for (kk in seq_along(NAMES)) {
[17:40:30.065]                   name <- added[[kk]]
[17:40:30.065]                   NAME <- NAMES[[kk]]
[17:40:30.065]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.065]                     next
[17:40:30.065]                   args[[name]] <- ""
[17:40:30.065]                 }
[17:40:30.065]                 NAMES <- toupper(removed)
[17:40:30.065]                 for (kk in seq_along(NAMES)) {
[17:40:30.065]                   name <- removed[[kk]]
[17:40:30.065]                   NAME <- NAMES[[kk]]
[17:40:30.065]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.065]                     next
[17:40:30.065]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.065]                 }
[17:40:30.065]                 if (length(args) > 0) 
[17:40:30.065]                   base::do.call(base::Sys.setenv, args = args)
[17:40:30.065]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:30.065]             }
[17:40:30.065]             else {
[17:40:30.065]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:30.065]             }
[17:40:30.065]             {
[17:40:30.065]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:30.065]                   0L) {
[17:40:30.065]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:30.065]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:30.065]                   base::options(opts)
[17:40:30.065]                 }
[17:40:30.065]                 {
[17:40:30.065]                   {
[17:40:30.065]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:30.065]                     NULL
[17:40:30.065]                   }
[17:40:30.065]                   options(future.plan = NULL)
[17:40:30.065]                   if (is.na(NA_character_)) 
[17:40:30.065]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.065]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:30.065]                   future::plan(list(function (..., workers = availableCores(), 
[17:40:30.065]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:40:30.065]                     envir = parent.frame()) 
[17:40:30.065]                   {
[17:40:30.065]                     if (is.function(workers)) 
[17:40:30.065]                       workers <- workers()
[17:40:30.065]                     workers <- structure(as.integer(workers), 
[17:40:30.065]                       class = class(workers))
[17:40:30.065]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:40:30.065]                       workers >= 1)
[17:40:30.065]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:40:30.065]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:40:30.065]                     }
[17:40:30.065]                     future <- MultisessionFuture(..., workers = workers, 
[17:40:30.065]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:40:30.065]                       envir = envir)
[17:40:30.065]                     if (!future$lazy) 
[17:40:30.065]                       future <- run(future)
[17:40:30.065]                     invisible(future)
[17:40:30.065]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:30.065]                 }
[17:40:30.065]             }
[17:40:30.065]         }
[17:40:30.065]     })
[17:40:30.065]     if (TRUE) {
[17:40:30.065]         base::sink(type = "output", split = FALSE)
[17:40:30.065]         if (TRUE) {
[17:40:30.065]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:30.065]         }
[17:40:30.065]         else {
[17:40:30.065]             ...future.result["stdout"] <- base::list(NULL)
[17:40:30.065]         }
[17:40:30.065]         base::close(...future.stdout)
[17:40:30.065]         ...future.stdout <- NULL
[17:40:30.065]     }
[17:40:30.065]     ...future.result$conditions <- ...future.conditions
[17:40:30.065]     ...future.result$finished <- base::Sys.time()
[17:40:30.065]     ...future.result
[17:40:30.065] }
[17:40:30.069] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[17:40:30.069] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[17:40:30.069] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[17:40:30.069] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:40:30.070] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:40:30.070] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:40:30.070] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:40:30.071] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:40:30.071] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:40:30.071] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:40:30.071] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:40:30.072] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[17:40:30.072] MultisessionFuture started
[17:40:30.072] - Launch lazy future ... done
[17:40:30.072] run() for ‘MultisessionFuture’ ... done
[17:40:30.073] Created future:
[17:40:30.073] MultisessionFuture:
[17:40:30.073] Label: ‘future_replicate-1’
[17:40:30.073] Expression:
[17:40:30.073] {
[17:40:30.073]     do.call(function(...) {
[17:40:30.073]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.073]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.073]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.073]             on.exit(options(oopts), add = TRUE)
[17:40:30.073]         }
[17:40:30.073]         {
[17:40:30.073]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.073]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.073]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.073]                   envir = globalenv(), inherits = FALSE)
[17:40:30.073]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.073]             })
[17:40:30.073]         }
[17:40:30.073]     }, args = future.call.arguments)
[17:40:30.073] }
[17:40:30.073] Lazy evaluation: FALSE
[17:40:30.073] Asynchronous evaluation: TRUE
[17:40:30.073] Local evaluation: TRUE
[17:40:30.073] Environment: R_GlobalEnv
[17:40:30.073] Capture standard output: TRUE
[17:40:30.073] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:30.073] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:30.073] Packages: <none>
[17:40:30.073] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:30.073] Resolved: FALSE
[17:40:30.073] Value: <not collected>
[17:40:30.073] Conditions captured: <none>
[17:40:30.073] Early signaling: FALSE
[17:40:30.073] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:30.073] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.085] Chunk #1 of 2 ... DONE
[17:40:30.085] Chunk #2 of 2 ...
[17:40:30.085]  - Finding globals in 'X' for chunk #2 ...
[17:40:30.085] getGlobalsAndPackages() ...
[17:40:30.085] Searching for globals...
[17:40:30.085] 
[17:40:30.086] Searching for globals ... DONE
[17:40:30.086] - globals: [0] <none>
[17:40:30.086] getGlobalsAndPackages() ... DONE
[17:40:30.086]    + additional globals found: [n=0] 
[17:40:30.086]    + additional namespaces needed: [n=0] 
[17:40:30.086]  - Finding globals in 'X' for chunk #2 ... DONE
[17:40:30.086]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[17:40:30.086]  - seeds: [3] <seeds>
[17:40:30.087] getGlobalsAndPackages() ...
[17:40:30.087] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.087] Resolving globals: FALSE
[17:40:30.087] Tweak future expression to call with '...' arguments ...
[17:40:30.087] {
[17:40:30.087]     do.call(function(...) {
[17:40:30.087]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.087]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.087]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.087]             on.exit(options(oopts), add = TRUE)
[17:40:30.087]         }
[17:40:30.087]         {
[17:40:30.087]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.087]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.087]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.087]                   envir = globalenv(), inherits = FALSE)
[17:40:30.087]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.087]             })
[17:40:30.087]         }
[17:40:30.087]     }, args = future.call.arguments)
[17:40:30.087] }
[17:40:30.088] Tweak future expression to call with '...' arguments ... DONE
[17:40:30.088] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.088] 
[17:40:30.088] getGlobalsAndPackages() ... DONE
[17:40:30.089] run() for ‘Future’ ...
[17:40:30.089] - state: ‘created’
[17:40:30.089] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:40:30.104] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.104] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:40:30.104]   - Field: ‘node’
[17:40:30.104]   - Field: ‘label’
[17:40:30.104]   - Field: ‘local’
[17:40:30.105]   - Field: ‘owner’
[17:40:30.105]   - Field: ‘envir’
[17:40:30.105]   - Field: ‘workers’
[17:40:30.105]   - Field: ‘packages’
[17:40:30.105]   - Field: ‘gc’
[17:40:30.105]   - Field: ‘conditions’
[17:40:30.105]   - Field: ‘persistent’
[17:40:30.105]   - Field: ‘expr’
[17:40:30.105]   - Field: ‘uuid’
[17:40:30.106]   - Field: ‘seed’
[17:40:30.106]   - Field: ‘version’
[17:40:30.106]   - Field: ‘result’
[17:40:30.106]   - Field: ‘asynchronous’
[17:40:30.106]   - Field: ‘calls’
[17:40:30.106]   - Field: ‘globals’
[17:40:30.106]   - Field: ‘stdout’
[17:40:30.106]   - Field: ‘earlySignal’
[17:40:30.106]   - Field: ‘lazy’
[17:40:30.107]   - Field: ‘state’
[17:40:30.107] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:40:30.107] - Launch lazy future ...
[17:40:30.107] Packages needed by the future expression (n = 0): <none>
[17:40:30.107] Packages needed by future strategies (n = 0): <none>
[17:40:30.108] {
[17:40:30.108]     {
[17:40:30.108]         {
[17:40:30.108]             ...future.startTime <- base::Sys.time()
[17:40:30.108]             {
[17:40:30.108]                 {
[17:40:30.108]                   {
[17:40:30.108]                     {
[17:40:30.108]                       base::local({
[17:40:30.108]                         has_future <- base::requireNamespace("future", 
[17:40:30.108]                           quietly = TRUE)
[17:40:30.108]                         if (has_future) {
[17:40:30.108]                           ns <- base::getNamespace("future")
[17:40:30.108]                           version <- ns[[".package"]][["version"]]
[17:40:30.108]                           if (is.null(version)) 
[17:40:30.108]                             version <- utils::packageVersion("future")
[17:40:30.108]                         }
[17:40:30.108]                         else {
[17:40:30.108]                           version <- NULL
[17:40:30.108]                         }
[17:40:30.108]                         if (!has_future || version < "1.8.0") {
[17:40:30.108]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:30.108]                             "", base::R.version$version.string), 
[17:40:30.108]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:30.108]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:30.108]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:30.108]                               "release", "version")], collapse = " "), 
[17:40:30.108]                             hostname = base::Sys.info()[["nodename"]])
[17:40:30.108]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:30.108]                             info)
[17:40:30.108]                           info <- base::paste(info, collapse = "; ")
[17:40:30.108]                           if (!has_future) {
[17:40:30.108]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:30.108]                               info)
[17:40:30.108]                           }
[17:40:30.108]                           else {
[17:40:30.108]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:30.108]                               info, version)
[17:40:30.108]                           }
[17:40:30.108]                           base::stop(msg)
[17:40:30.108]                         }
[17:40:30.108]                       })
[17:40:30.108]                     }
[17:40:30.108]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:30.108]                     base::options(mc.cores = 1L)
[17:40:30.108]                   }
[17:40:30.108]                   options(future.plan = NULL)
[17:40:30.108]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.108]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:30.108]                 }
[17:40:30.108]                 ...future.workdir <- getwd()
[17:40:30.108]             }
[17:40:30.108]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:30.108]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:30.108]         }
[17:40:30.108]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:30.108]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[17:40:30.108]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:30.108]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:30.108]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:30.108]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:30.108]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:30.108]             base::names(...future.oldOptions))
[17:40:30.108]     }
[17:40:30.108]     if (FALSE) {
[17:40:30.108]     }
[17:40:30.108]     else {
[17:40:30.108]         if (TRUE) {
[17:40:30.108]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:30.108]                 open = "w")
[17:40:30.108]         }
[17:40:30.108]         else {
[17:40:30.108]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:30.108]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:30.108]         }
[17:40:30.108]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:30.108]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:30.108]             base::sink(type = "output", split = FALSE)
[17:40:30.108]             base::close(...future.stdout)
[17:40:30.108]         }, add = TRUE)
[17:40:30.108]     }
[17:40:30.108]     ...future.frame <- base::sys.nframe()
[17:40:30.108]     ...future.conditions <- base::list()
[17:40:30.108]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:30.108]     if (FALSE) {
[17:40:30.108]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:30.108]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:30.108]     }
[17:40:30.108]     ...future.result <- base::tryCatch({
[17:40:30.108]         base::withCallingHandlers({
[17:40:30.108]             ...future.value <- base::withVisible(base::local({
[17:40:30.108]                 ...future.makeSendCondition <- local({
[17:40:30.108]                   sendCondition <- NULL
[17:40:30.108]                   function(frame = 1L) {
[17:40:30.108]                     if (is.function(sendCondition)) 
[17:40:30.108]                       return(sendCondition)
[17:40:30.108]                     ns <- getNamespace("parallel")
[17:40:30.108]                     if (exists("sendData", mode = "function", 
[17:40:30.108]                       envir = ns)) {
[17:40:30.108]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:30.108]                         envir = ns)
[17:40:30.108]                       envir <- sys.frame(frame)
[17:40:30.108]                       master <- NULL
[17:40:30.108]                       while (!identical(envir, .GlobalEnv) && 
[17:40:30.108]                         !identical(envir, emptyenv())) {
[17:40:30.108]                         if (exists("master", mode = "list", envir = envir, 
[17:40:30.108]                           inherits = FALSE)) {
[17:40:30.108]                           master <- get("master", mode = "list", 
[17:40:30.108]                             envir = envir, inherits = FALSE)
[17:40:30.108]                           if (inherits(master, c("SOCKnode", 
[17:40:30.108]                             "SOCK0node"))) {
[17:40:30.108]                             sendCondition <<- function(cond) {
[17:40:30.108]                               data <- list(type = "VALUE", value = cond, 
[17:40:30.108]                                 success = TRUE)
[17:40:30.108]                               parallel_sendData(master, data)
[17:40:30.108]                             }
[17:40:30.108]                             return(sendCondition)
[17:40:30.108]                           }
[17:40:30.108]                         }
[17:40:30.108]                         frame <- frame + 1L
[17:40:30.108]                         envir <- sys.frame(frame)
[17:40:30.108]                       }
[17:40:30.108]                     }
[17:40:30.108]                     sendCondition <<- function(cond) NULL
[17:40:30.108]                   }
[17:40:30.108]                 })
[17:40:30.108]                 withCallingHandlers({
[17:40:30.108]                   {
[17:40:30.108]                     do.call(function(...) {
[17:40:30.108]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.108]                       if (!identical(...future.globals.maxSize.org, 
[17:40:30.108]                         ...future.globals.maxSize)) {
[17:40:30.108]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.108]                         on.exit(options(oopts), add = TRUE)
[17:40:30.108]                       }
[17:40:30.108]                       {
[17:40:30.108]                         lapply(seq_along(...future.elements_ii), 
[17:40:30.108]                           FUN = function(jj) {
[17:40:30.108]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.108]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.108]                               envir = globalenv(), inherits = FALSE)
[17:40:30.108]                             ...future.FUN(...future.X_jj, ...)
[17:40:30.108]                           })
[17:40:30.108]                       }
[17:40:30.108]                     }, args = future.call.arguments)
[17:40:30.108]                   }
[17:40:30.108]                 }, immediateCondition = function(cond) {
[17:40:30.108]                   sendCondition <- ...future.makeSendCondition()
[17:40:30.108]                   sendCondition(cond)
[17:40:30.108]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.108]                   {
[17:40:30.108]                     inherits <- base::inherits
[17:40:30.108]                     invokeRestart <- base::invokeRestart
[17:40:30.108]                     is.null <- base::is.null
[17:40:30.108]                     muffled <- FALSE
[17:40:30.108]                     if (inherits(cond, "message")) {
[17:40:30.108]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:30.108]                       if (muffled) 
[17:40:30.108]                         invokeRestart("muffleMessage")
[17:40:30.108]                     }
[17:40:30.108]                     else if (inherits(cond, "warning")) {
[17:40:30.108]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:30.108]                       if (muffled) 
[17:40:30.108]                         invokeRestart("muffleWarning")
[17:40:30.108]                     }
[17:40:30.108]                     else if (inherits(cond, "condition")) {
[17:40:30.108]                       if (!is.null(pattern)) {
[17:40:30.108]                         computeRestarts <- base::computeRestarts
[17:40:30.108]                         grepl <- base::grepl
[17:40:30.108]                         restarts <- computeRestarts(cond)
[17:40:30.108]                         for (restart in restarts) {
[17:40:30.108]                           name <- restart$name
[17:40:30.108]                           if (is.null(name)) 
[17:40:30.108]                             next
[17:40:30.108]                           if (!grepl(pattern, name)) 
[17:40:30.108]                             next
[17:40:30.108]                           invokeRestart(restart)
[17:40:30.108]                           muffled <- TRUE
[17:40:30.108]                           break
[17:40:30.108]                         }
[17:40:30.108]                       }
[17:40:30.108]                     }
[17:40:30.108]                     invisible(muffled)
[17:40:30.108]                   }
[17:40:30.108]                   muffleCondition(cond)
[17:40:30.108]                 })
[17:40:30.108]             }))
[17:40:30.108]             future::FutureResult(value = ...future.value$value, 
[17:40:30.108]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.108]                   ...future.rng), globalenv = if (FALSE) 
[17:40:30.108]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:30.108]                     ...future.globalenv.names))
[17:40:30.108]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:30.108]         }, condition = base::local({
[17:40:30.108]             c <- base::c
[17:40:30.108]             inherits <- base::inherits
[17:40:30.108]             invokeRestart <- base::invokeRestart
[17:40:30.108]             length <- base::length
[17:40:30.108]             list <- base::list
[17:40:30.108]             seq.int <- base::seq.int
[17:40:30.108]             signalCondition <- base::signalCondition
[17:40:30.108]             sys.calls <- base::sys.calls
[17:40:30.108]             `[[` <- base::`[[`
[17:40:30.108]             `+` <- base::`+`
[17:40:30.108]             `<<-` <- base::`<<-`
[17:40:30.108]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:30.108]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:30.108]                   3L)]
[17:40:30.108]             }
[17:40:30.108]             function(cond) {
[17:40:30.108]                 is_error <- inherits(cond, "error")
[17:40:30.108]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:30.108]                   NULL)
[17:40:30.108]                 if (is_error) {
[17:40:30.108]                   sessionInformation <- function() {
[17:40:30.108]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:30.108]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:30.108]                       search = base::search(), system = base::Sys.info())
[17:40:30.108]                   }
[17:40:30.108]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.108]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:30.108]                     cond$call), session = sessionInformation(), 
[17:40:30.108]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:30.108]                   signalCondition(cond)
[17:40:30.108]                 }
[17:40:30.108]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:30.108]                 "immediateCondition"))) {
[17:40:30.108]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:30.108]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.108]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:30.108]                   if (TRUE && !signal) {
[17:40:30.108]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.108]                     {
[17:40:30.108]                       inherits <- base::inherits
[17:40:30.108]                       invokeRestart <- base::invokeRestart
[17:40:30.108]                       is.null <- base::is.null
[17:40:30.108]                       muffled <- FALSE
[17:40:30.108]                       if (inherits(cond, "message")) {
[17:40:30.108]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.108]                         if (muffled) 
[17:40:30.108]                           invokeRestart("muffleMessage")
[17:40:30.108]                       }
[17:40:30.108]                       else if (inherits(cond, "warning")) {
[17:40:30.108]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.108]                         if (muffled) 
[17:40:30.108]                           invokeRestart("muffleWarning")
[17:40:30.108]                       }
[17:40:30.108]                       else if (inherits(cond, "condition")) {
[17:40:30.108]                         if (!is.null(pattern)) {
[17:40:30.108]                           computeRestarts <- base::computeRestarts
[17:40:30.108]                           grepl <- base::grepl
[17:40:30.108]                           restarts <- computeRestarts(cond)
[17:40:30.108]                           for (restart in restarts) {
[17:40:30.108]                             name <- restart$name
[17:40:30.108]                             if (is.null(name)) 
[17:40:30.108]                               next
[17:40:30.108]                             if (!grepl(pattern, name)) 
[17:40:30.108]                               next
[17:40:30.108]                             invokeRestart(restart)
[17:40:30.108]                             muffled <- TRUE
[17:40:30.108]                             break
[17:40:30.108]                           }
[17:40:30.108]                         }
[17:40:30.108]                       }
[17:40:30.108]                       invisible(muffled)
[17:40:30.108]                     }
[17:40:30.108]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.108]                   }
[17:40:30.108]                 }
[17:40:30.108]                 else {
[17:40:30.108]                   if (TRUE) {
[17:40:30.108]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.108]                     {
[17:40:30.108]                       inherits <- base::inherits
[17:40:30.108]                       invokeRestart <- base::invokeRestart
[17:40:30.108]                       is.null <- base::is.null
[17:40:30.108]                       muffled <- FALSE
[17:40:30.108]                       if (inherits(cond, "message")) {
[17:40:30.108]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.108]                         if (muffled) 
[17:40:30.108]                           invokeRestart("muffleMessage")
[17:40:30.108]                       }
[17:40:30.108]                       else if (inherits(cond, "warning")) {
[17:40:30.108]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.108]                         if (muffled) 
[17:40:30.108]                           invokeRestart("muffleWarning")
[17:40:30.108]                       }
[17:40:30.108]                       else if (inherits(cond, "condition")) {
[17:40:30.108]                         if (!is.null(pattern)) {
[17:40:30.108]                           computeRestarts <- base::computeRestarts
[17:40:30.108]                           grepl <- base::grepl
[17:40:30.108]                           restarts <- computeRestarts(cond)
[17:40:30.108]                           for (restart in restarts) {
[17:40:30.108]                             name <- restart$name
[17:40:30.108]                             if (is.null(name)) 
[17:40:30.108]                               next
[17:40:30.108]                             if (!grepl(pattern, name)) 
[17:40:30.108]                               next
[17:40:30.108]                             invokeRestart(restart)
[17:40:30.108]                             muffled <- TRUE
[17:40:30.108]                             break
[17:40:30.108]                           }
[17:40:30.108]                         }
[17:40:30.108]                       }
[17:40:30.108]                       invisible(muffled)
[17:40:30.108]                     }
[17:40:30.108]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.108]                   }
[17:40:30.108]                 }
[17:40:30.108]             }
[17:40:30.108]         }))
[17:40:30.108]     }, error = function(ex) {
[17:40:30.108]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:30.108]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.108]                 ...future.rng), started = ...future.startTime, 
[17:40:30.108]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:30.108]             version = "1.8"), class = "FutureResult")
[17:40:30.108]     }, finally = {
[17:40:30.108]         if (!identical(...future.workdir, getwd())) 
[17:40:30.108]             setwd(...future.workdir)
[17:40:30.108]         {
[17:40:30.108]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:30.108]                 ...future.oldOptions$nwarnings <- NULL
[17:40:30.108]             }
[17:40:30.108]             base::options(...future.oldOptions)
[17:40:30.108]             if (.Platform$OS.type == "windows") {
[17:40:30.108]                 old_names <- names(...future.oldEnvVars)
[17:40:30.108]                 envs <- base::Sys.getenv()
[17:40:30.108]                 names <- names(envs)
[17:40:30.108]                 common <- intersect(names, old_names)
[17:40:30.108]                 added <- setdiff(names, old_names)
[17:40:30.108]                 removed <- setdiff(old_names, names)
[17:40:30.108]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:30.108]                   envs[common]]
[17:40:30.108]                 NAMES <- toupper(changed)
[17:40:30.108]                 args <- list()
[17:40:30.108]                 for (kk in seq_along(NAMES)) {
[17:40:30.108]                   name <- changed[[kk]]
[17:40:30.108]                   NAME <- NAMES[[kk]]
[17:40:30.108]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.108]                     next
[17:40:30.108]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.108]                 }
[17:40:30.108]                 NAMES <- toupper(added)
[17:40:30.108]                 for (kk in seq_along(NAMES)) {
[17:40:30.108]                   name <- added[[kk]]
[17:40:30.108]                   NAME <- NAMES[[kk]]
[17:40:30.108]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.108]                     next
[17:40:30.108]                   args[[name]] <- ""
[17:40:30.108]                 }
[17:40:30.108]                 NAMES <- toupper(removed)
[17:40:30.108]                 for (kk in seq_along(NAMES)) {
[17:40:30.108]                   name <- removed[[kk]]
[17:40:30.108]                   NAME <- NAMES[[kk]]
[17:40:30.108]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.108]                     next
[17:40:30.108]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.108]                 }
[17:40:30.108]                 if (length(args) > 0) 
[17:40:30.108]                   base::do.call(base::Sys.setenv, args = args)
[17:40:30.108]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:30.108]             }
[17:40:30.108]             else {
[17:40:30.108]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:30.108]             }
[17:40:30.108]             {
[17:40:30.108]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:30.108]                   0L) {
[17:40:30.108]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:30.108]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:30.108]                   base::options(opts)
[17:40:30.108]                 }
[17:40:30.108]                 {
[17:40:30.108]                   {
[17:40:30.108]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:30.108]                     NULL
[17:40:30.108]                   }
[17:40:30.108]                   options(future.plan = NULL)
[17:40:30.108]                   if (is.na(NA_character_)) 
[17:40:30.108]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.108]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:30.108]                   future::plan(list(function (..., workers = availableCores(), 
[17:40:30.108]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:40:30.108]                     envir = parent.frame()) 
[17:40:30.108]                   {
[17:40:30.108]                     if (is.function(workers)) 
[17:40:30.108]                       workers <- workers()
[17:40:30.108]                     workers <- structure(as.integer(workers), 
[17:40:30.108]                       class = class(workers))
[17:40:30.108]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:40:30.108]                       workers >= 1)
[17:40:30.108]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:40:30.108]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:40:30.108]                     }
[17:40:30.108]                     future <- MultisessionFuture(..., workers = workers, 
[17:40:30.108]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:40:30.108]                       envir = envir)
[17:40:30.108]                     if (!future$lazy) 
[17:40:30.108]                       future <- run(future)
[17:40:30.108]                     invisible(future)
[17:40:30.108]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:30.108]                 }
[17:40:30.108]             }
[17:40:30.108]         }
[17:40:30.108]     })
[17:40:30.108]     if (TRUE) {
[17:40:30.108]         base::sink(type = "output", split = FALSE)
[17:40:30.108]         if (TRUE) {
[17:40:30.108]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:30.108]         }
[17:40:30.108]         else {
[17:40:30.108]             ...future.result["stdout"] <- base::list(NULL)
[17:40:30.108]         }
[17:40:30.108]         base::close(...future.stdout)
[17:40:30.108]         ...future.stdout <- NULL
[17:40:30.108]     }
[17:40:30.108]     ...future.result$conditions <- ...future.conditions
[17:40:30.108]     ...future.result$finished <- base::Sys.time()
[17:40:30.108]     ...future.result
[17:40:30.108] }
[17:40:30.181] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[17:40:30.181] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[17:40:30.181] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[17:40:30.182] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:40:30.182] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:40:30.182] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:40:30.183] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:40:30.183] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:40:30.183] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:40:30.183] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:40:30.184] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:40:30.184] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[17:40:30.185] MultisessionFuture started
[17:40:30.185] - Launch lazy future ... done
[17:40:30.185] run() for ‘MultisessionFuture’ ... done
[17:40:30.185] Created future:
[17:40:30.185] MultisessionFuture:
[17:40:30.185] Label: ‘future_replicate-2’
[17:40:30.185] Expression:
[17:40:30.185] {
[17:40:30.185]     do.call(function(...) {
[17:40:30.185]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.185]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.185]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.185]             on.exit(options(oopts), add = TRUE)
[17:40:30.185]         }
[17:40:30.185]         {
[17:40:30.185]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.185]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.185]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.185]                   envir = globalenv(), inherits = FALSE)
[17:40:30.185]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.185]             })
[17:40:30.185]         }
[17:40:30.185]     }, args = future.call.arguments)
[17:40:30.185] }
[17:40:30.185] Lazy evaluation: FALSE
[17:40:30.185] Asynchronous evaluation: TRUE
[17:40:30.185] Local evaluation: TRUE
[17:40:30.185] Environment: R_GlobalEnv
[17:40:30.185] Capture standard output: TRUE
[17:40:30.185] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:30.185] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:30.185] Packages: <none>
[17:40:30.185] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:30.185] Resolved: FALSE
[17:40:30.185] Value: <not collected>
[17:40:30.185] Conditions captured: <none>
[17:40:30.185] Early signaling: FALSE
[17:40:30.185] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:30.185] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.197] Chunk #2 of 2 ... DONE
[17:40:30.197] Launching 2 futures (chunks) ... DONE
[17:40:30.197] Resolving 2 futures (chunks) ...
[17:40:30.197] resolve() on list ...
[17:40:30.197]  recursive: 0
[17:40:30.198]  length: 2
[17:40:30.198] 
[17:40:30.198] receiveMessageFromWorker() for ClusterFuture ...
[17:40:30.198] - Validating connection of MultisessionFuture
[17:40:30.199] - received message: FutureResult
[17:40:30.201] - Received FutureResult
[17:40:30.201] - Erased future from FutureRegistry
[17:40:30.201] result() for ClusterFuture ...
[17:40:30.201] - result already collected: FutureResult
[17:40:30.201] result() for ClusterFuture ... done
[17:40:30.201] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:30.201] Future #1
[17:40:30.202] result() for ClusterFuture ...
[17:40:30.202] - result already collected: FutureResult
[17:40:30.202] result() for ClusterFuture ... done
[17:40:30.202] result() for ClusterFuture ...
[17:40:30.202] - result already collected: FutureResult
[17:40:30.202] result() for ClusterFuture ... done
[17:40:30.202] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:40:30.202] - nx: 2
[17:40:30.202] - relay: TRUE
[17:40:30.202] - stdout: TRUE
[17:40:30.202] - signal: TRUE
[17:40:30.203] - resignal: FALSE
[17:40:30.203] - force: TRUE
[17:40:30.203] - relayed: [n=2] FALSE, FALSE
[17:40:30.203] - queued futures: [n=2] FALSE, FALSE
[17:40:30.203]  - until=1
[17:40:30.203]  - relaying element #1
[17:40:30.203] result() for ClusterFuture ...
[17:40:30.203] - result already collected: FutureResult
[17:40:30.203] result() for ClusterFuture ... done
[17:40:30.203] result() for ClusterFuture ...
[17:40:30.203] - result already collected: FutureResult
[17:40:30.204] result() for ClusterFuture ... done
[17:40:30.204] result() for ClusterFuture ...
[17:40:30.204] - result already collected: FutureResult
[17:40:30.204] result() for ClusterFuture ... done
[17:40:30.204] result() for ClusterFuture ...
[17:40:30.204] - result already collected: FutureResult
[17:40:30.204] result() for ClusterFuture ... done
[17:40:30.204] - relayed: [n=2] TRUE, FALSE
[17:40:30.204] - queued futures: [n=2] TRUE, FALSE
[17:40:30.204] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:40:30.204]  length: 1 (resolved future 1)
[17:40:30.267] receiveMessageFromWorker() for ClusterFuture ...
[17:40:30.267] - Validating connection of MultisessionFuture
[17:40:30.267] - received message: FutureResult
[17:40:30.268] - Received FutureResult
[17:40:30.268] - Erased future from FutureRegistry
[17:40:30.268] result() for ClusterFuture ...
[17:40:30.268] - result already collected: FutureResult
[17:40:30.268] result() for ClusterFuture ... done
[17:40:30.268] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:30.268] Future #2
[17:40:30.268] result() for ClusterFuture ...
[17:40:30.268] - result already collected: FutureResult
[17:40:30.268] result() for ClusterFuture ... done
[17:40:30.269] result() for ClusterFuture ...
[17:40:30.269] - result already collected: FutureResult
[17:40:30.269] result() for ClusterFuture ... done
[17:40:30.269] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:40:30.269] - nx: 2
[17:40:30.269] - relay: TRUE
[17:40:30.269] - stdout: TRUE
[17:40:30.269] - signal: TRUE
[17:40:30.269] - resignal: FALSE
[17:40:30.269] - force: TRUE
[17:40:30.269] - relayed: [n=2] TRUE, FALSE
[17:40:30.269] - queued futures: [n=2] TRUE, FALSE
[17:40:30.270]  - until=2
[17:40:30.270]  - relaying element #2
[17:40:30.270] result() for ClusterFuture ...
[17:40:30.270] - result already collected: FutureResult
[17:40:30.270] result() for ClusterFuture ... done
[17:40:30.270] result() for ClusterFuture ...
[17:40:30.270] - result already collected: FutureResult
[17:40:30.270] result() for ClusterFuture ... done
[17:40:30.270] result() for ClusterFuture ...
[17:40:30.270] - result already collected: FutureResult
[17:40:30.271] result() for ClusterFuture ... done
[17:40:30.271] result() for ClusterFuture ...
[17:40:30.271] - result already collected: FutureResult
[17:40:30.271] result() for ClusterFuture ... done
[17:40:30.271] - relayed: [n=2] TRUE, TRUE
[17:40:30.271] - queued futures: [n=2] TRUE, TRUE
[17:40:30.271] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:40:30.271]  length: 0 (resolved future 2)
[17:40:30.271] Relaying remaining futures
[17:40:30.271] signalConditionsASAP(NULL, pos=0) ...
[17:40:30.271] - nx: 2
[17:40:30.272] - relay: TRUE
[17:40:30.272] - stdout: TRUE
[17:40:30.272] - signal: TRUE
[17:40:30.272] - resignal: FALSE
[17:40:30.272] - force: TRUE
[17:40:30.272] - relayed: [n=2] TRUE, TRUE
[17:40:30.272] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:40:30.272] - relayed: [n=2] TRUE, TRUE
[17:40:30.272] - queued futures: [n=2] TRUE, TRUE
[17:40:30.272] signalConditionsASAP(NULL, pos=0) ... done
[17:40:30.272] resolve() on list ... DONE
[17:40:30.273] result() for ClusterFuture ...
[17:40:30.273] - result already collected: FutureResult
[17:40:30.273] result() for ClusterFuture ... done
[17:40:30.273] result() for ClusterFuture ...
[17:40:30.273] - result already collected: FutureResult
[17:40:30.273] result() for ClusterFuture ... done
[17:40:30.273] result() for ClusterFuture ...
[17:40:30.273] - result already collected: FutureResult
[17:40:30.273] result() for ClusterFuture ... done
[17:40:30.273] result() for ClusterFuture ...
[17:40:30.273] - result already collected: FutureResult
[17:40:30.273] result() for ClusterFuture ... done
[17:40:30.274]  - Number of value chunks collected: 2
[17:40:30.274] Resolving 2 futures (chunks) ... DONE
[17:40:30.274] Reducing values from 2 chunks ...
[17:40:30.274]  - Number of values collected after concatenation: 5
[17:40:30.274]  - Number of values expected: 5
[17:40:30.274] Reducing values from 2 chunks ... DONE
[17:40:30.274] future_lapply() ... DONE
[17:40:30.274] future_lapply() ...
[17:40:30.275] Generating random seeds ...
[17:40:30.275] Generating random seed streams for 5 elements ...
[17:40:30.275] Generating random seed streams for 5 elements ... DONE
[17:40:30.275] Generating random seeds ... DONE
[17:40:30.275] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:40:30.279] Number of chunks: 2
[17:40:30.279] getGlobalsAndPackagesXApply() ...
[17:40:30.279]  - future.globals: TRUE
[17:40:30.280] getGlobalsAndPackages() ...
[17:40:30.280] Searching for globals...
[17:40:30.281] - globals found: [2] ‘FUN’, ‘sample’
[17:40:30.281] Searching for globals ... DONE
[17:40:30.281] Resolving globals: FALSE
[17:40:30.281] The total size of the 1 globals is 616 bytes (616 bytes)
[17:40:30.282] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:40:30.282] - globals: [1] ‘FUN’
[17:40:30.282] 
[17:40:30.282] getGlobalsAndPackages() ... DONE
[17:40:30.282]  - globals found/used: [n=1] ‘FUN’
[17:40:30.282]  - needed namespaces: [n=0] 
[17:40:30.282] Finding globals ... DONE
[17:40:30.282]  - use_args: TRUE
[17:40:30.282]  - Getting '...' globals ...
[17:40:30.283] resolve() on list ...
[17:40:30.283]  recursive: 0
[17:40:30.283]  length: 1
[17:40:30.283]  elements: ‘...’
[17:40:30.283]  length: 0 (resolved future 1)
[17:40:30.283] resolve() on list ... DONE
[17:40:30.283]    - '...' content: [n=0] 
[17:40:30.283] List of 1
[17:40:30.283]  $ ...: list()
[17:40:30.283]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:30.283]  - attr(*, "where")=List of 1
[17:40:30.283]   ..$ ...:<environment: 0x558a3bd49d48> 
[17:40:30.283]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:30.283]  - attr(*, "resolved")= logi TRUE
[17:40:30.283]  - attr(*, "total_size")= num NA
[17:40:30.286]  - Getting '...' globals ... DONE
[17:40:30.286] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:40:30.286] List of 2
[17:40:30.286]  $ ...future.FUN:function (...)  
[17:40:30.286]  $ ...          : list()
[17:40:30.286]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:30.286]  - attr(*, "where")=List of 2
[17:40:30.286]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:40:30.286]   ..$ ...          :<environment: 0x558a3bd49d48> 
[17:40:30.286]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:30.286]  - attr(*, "resolved")= logi FALSE
[17:40:30.286]  - attr(*, "total_size")= num 616
[17:40:30.289] Packages to be attached in all futures: [n=0] 
[17:40:30.289] getGlobalsAndPackagesXApply() ... DONE
[17:40:30.289] Number of futures (= number of chunks): 2
[17:40:30.289] Launching 2 futures (chunks) ...
[17:40:30.289] Chunk #1 of 2 ...
[17:40:30.290]  - Finding globals in 'X' for chunk #1 ...
[17:40:30.290] getGlobalsAndPackages() ...
[17:40:30.290] Searching for globals...
[17:40:30.290] 
[17:40:30.290] Searching for globals ... DONE
[17:40:30.290] - globals: [0] <none>
[17:40:30.290] getGlobalsAndPackages() ... DONE
[17:40:30.290]    + additional globals found: [n=0] 
[17:40:30.290]    + additional namespaces needed: [n=0] 
[17:40:30.291]  - Finding globals in 'X' for chunk #1 ... DONE
[17:40:30.291]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:40:30.291]  - seeds: [2] <seeds>
[17:40:30.291] getGlobalsAndPackages() ...
[17:40:30.291] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.291] Resolving globals: FALSE
[17:40:30.291] Tweak future expression to call with '...' arguments ...
[17:40:30.291] {
[17:40:30.291]     do.call(function(...) {
[17:40:30.291]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.291]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.291]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.291]             on.exit(options(oopts), add = TRUE)
[17:40:30.291]         }
[17:40:30.291]         {
[17:40:30.291]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.291]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.291]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.291]                   envir = globalenv(), inherits = FALSE)
[17:40:30.291]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.291]             })
[17:40:30.291]         }
[17:40:30.291]     }, args = future.call.arguments)
[17:40:30.291] }
[17:40:30.292] Tweak future expression to call with '...' arguments ... DONE
[17:40:30.292] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.292] 
[17:40:30.292] getGlobalsAndPackages() ... DONE
[17:40:30.292] run() for ‘Future’ ...
[17:40:30.293] - state: ‘created’
[17:40:30.293] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:40:30.307] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.307] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:40:30.307]   - Field: ‘node’
[17:40:30.307]   - Field: ‘label’
[17:40:30.308]   - Field: ‘local’
[17:40:30.308]   - Field: ‘owner’
[17:40:30.308]   - Field: ‘envir’
[17:40:30.308]   - Field: ‘workers’
[17:40:30.308]   - Field: ‘packages’
[17:40:30.308]   - Field: ‘gc’
[17:40:30.308]   - Field: ‘conditions’
[17:40:30.308]   - Field: ‘persistent’
[17:40:30.308]   - Field: ‘expr’
[17:40:30.308]   - Field: ‘uuid’
[17:40:30.309]   - Field: ‘seed’
[17:40:30.309]   - Field: ‘version’
[17:40:30.309]   - Field: ‘result’
[17:40:30.309]   - Field: ‘asynchronous’
[17:40:30.309]   - Field: ‘calls’
[17:40:30.309]   - Field: ‘globals’
[17:40:30.309]   - Field: ‘stdout’
[17:40:30.309]   - Field: ‘earlySignal’
[17:40:30.309]   - Field: ‘lazy’
[17:40:30.309]   - Field: ‘state’
[17:40:30.309] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:40:30.310] - Launch lazy future ...
[17:40:30.310] Packages needed by the future expression (n = 0): <none>
[17:40:30.310] Packages needed by future strategies (n = 0): <none>
[17:40:30.310] {
[17:40:30.310]     {
[17:40:30.310]         {
[17:40:30.310]             ...future.startTime <- base::Sys.time()
[17:40:30.310]             {
[17:40:30.310]                 {
[17:40:30.310]                   {
[17:40:30.310]                     {
[17:40:30.310]                       base::local({
[17:40:30.310]                         has_future <- base::requireNamespace("future", 
[17:40:30.310]                           quietly = TRUE)
[17:40:30.310]                         if (has_future) {
[17:40:30.310]                           ns <- base::getNamespace("future")
[17:40:30.310]                           version <- ns[[".package"]][["version"]]
[17:40:30.310]                           if (is.null(version)) 
[17:40:30.310]                             version <- utils::packageVersion("future")
[17:40:30.310]                         }
[17:40:30.310]                         else {
[17:40:30.310]                           version <- NULL
[17:40:30.310]                         }
[17:40:30.310]                         if (!has_future || version < "1.8.0") {
[17:40:30.310]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:30.310]                             "", base::R.version$version.string), 
[17:40:30.310]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:30.310]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:30.310]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:30.310]                               "release", "version")], collapse = " "), 
[17:40:30.310]                             hostname = base::Sys.info()[["nodename"]])
[17:40:30.310]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:30.310]                             info)
[17:40:30.310]                           info <- base::paste(info, collapse = "; ")
[17:40:30.310]                           if (!has_future) {
[17:40:30.310]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:30.310]                               info)
[17:40:30.310]                           }
[17:40:30.310]                           else {
[17:40:30.310]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:30.310]                               info, version)
[17:40:30.310]                           }
[17:40:30.310]                           base::stop(msg)
[17:40:30.310]                         }
[17:40:30.310]                       })
[17:40:30.310]                     }
[17:40:30.310]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:30.310]                     base::options(mc.cores = 1L)
[17:40:30.310]                   }
[17:40:30.310]                   options(future.plan = NULL)
[17:40:30.310]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.310]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:30.310]                 }
[17:40:30.310]                 ...future.workdir <- getwd()
[17:40:30.310]             }
[17:40:30.310]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:30.310]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:30.310]         }
[17:40:30.310]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:30.310]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:40:30.310]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:30.310]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:30.310]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:30.310]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:30.310]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:30.310]             base::names(...future.oldOptions))
[17:40:30.310]     }
[17:40:30.310]     if (FALSE) {
[17:40:30.310]     }
[17:40:30.310]     else {
[17:40:30.310]         if (TRUE) {
[17:40:30.310]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:30.310]                 open = "w")
[17:40:30.310]         }
[17:40:30.310]         else {
[17:40:30.310]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:30.310]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:30.310]         }
[17:40:30.310]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:30.310]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:30.310]             base::sink(type = "output", split = FALSE)
[17:40:30.310]             base::close(...future.stdout)
[17:40:30.310]         }, add = TRUE)
[17:40:30.310]     }
[17:40:30.310]     ...future.frame <- base::sys.nframe()
[17:40:30.310]     ...future.conditions <- base::list()
[17:40:30.310]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:30.310]     if (FALSE) {
[17:40:30.310]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:30.310]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:30.310]     }
[17:40:30.310]     ...future.result <- base::tryCatch({
[17:40:30.310]         base::withCallingHandlers({
[17:40:30.310]             ...future.value <- base::withVisible(base::local({
[17:40:30.310]                 ...future.makeSendCondition <- local({
[17:40:30.310]                   sendCondition <- NULL
[17:40:30.310]                   function(frame = 1L) {
[17:40:30.310]                     if (is.function(sendCondition)) 
[17:40:30.310]                       return(sendCondition)
[17:40:30.310]                     ns <- getNamespace("parallel")
[17:40:30.310]                     if (exists("sendData", mode = "function", 
[17:40:30.310]                       envir = ns)) {
[17:40:30.310]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:30.310]                         envir = ns)
[17:40:30.310]                       envir <- sys.frame(frame)
[17:40:30.310]                       master <- NULL
[17:40:30.310]                       while (!identical(envir, .GlobalEnv) && 
[17:40:30.310]                         !identical(envir, emptyenv())) {
[17:40:30.310]                         if (exists("master", mode = "list", envir = envir, 
[17:40:30.310]                           inherits = FALSE)) {
[17:40:30.310]                           master <- get("master", mode = "list", 
[17:40:30.310]                             envir = envir, inherits = FALSE)
[17:40:30.310]                           if (inherits(master, c("SOCKnode", 
[17:40:30.310]                             "SOCK0node"))) {
[17:40:30.310]                             sendCondition <<- function(cond) {
[17:40:30.310]                               data <- list(type = "VALUE", value = cond, 
[17:40:30.310]                                 success = TRUE)
[17:40:30.310]                               parallel_sendData(master, data)
[17:40:30.310]                             }
[17:40:30.310]                             return(sendCondition)
[17:40:30.310]                           }
[17:40:30.310]                         }
[17:40:30.310]                         frame <- frame + 1L
[17:40:30.310]                         envir <- sys.frame(frame)
[17:40:30.310]                       }
[17:40:30.310]                     }
[17:40:30.310]                     sendCondition <<- function(cond) NULL
[17:40:30.310]                   }
[17:40:30.310]                 })
[17:40:30.310]                 withCallingHandlers({
[17:40:30.310]                   {
[17:40:30.310]                     do.call(function(...) {
[17:40:30.310]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.310]                       if (!identical(...future.globals.maxSize.org, 
[17:40:30.310]                         ...future.globals.maxSize)) {
[17:40:30.310]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.310]                         on.exit(options(oopts), add = TRUE)
[17:40:30.310]                       }
[17:40:30.310]                       {
[17:40:30.310]                         lapply(seq_along(...future.elements_ii), 
[17:40:30.310]                           FUN = function(jj) {
[17:40:30.310]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.310]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.310]                               envir = globalenv(), inherits = FALSE)
[17:40:30.310]                             ...future.FUN(...future.X_jj, ...)
[17:40:30.310]                           })
[17:40:30.310]                       }
[17:40:30.310]                     }, args = future.call.arguments)
[17:40:30.310]                   }
[17:40:30.310]                 }, immediateCondition = function(cond) {
[17:40:30.310]                   sendCondition <- ...future.makeSendCondition()
[17:40:30.310]                   sendCondition(cond)
[17:40:30.310]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.310]                   {
[17:40:30.310]                     inherits <- base::inherits
[17:40:30.310]                     invokeRestart <- base::invokeRestart
[17:40:30.310]                     is.null <- base::is.null
[17:40:30.310]                     muffled <- FALSE
[17:40:30.310]                     if (inherits(cond, "message")) {
[17:40:30.310]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:30.310]                       if (muffled) 
[17:40:30.310]                         invokeRestart("muffleMessage")
[17:40:30.310]                     }
[17:40:30.310]                     else if (inherits(cond, "warning")) {
[17:40:30.310]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:30.310]                       if (muffled) 
[17:40:30.310]                         invokeRestart("muffleWarning")
[17:40:30.310]                     }
[17:40:30.310]                     else if (inherits(cond, "condition")) {
[17:40:30.310]                       if (!is.null(pattern)) {
[17:40:30.310]                         computeRestarts <- base::computeRestarts
[17:40:30.310]                         grepl <- base::grepl
[17:40:30.310]                         restarts <- computeRestarts(cond)
[17:40:30.310]                         for (restart in restarts) {
[17:40:30.310]                           name <- restart$name
[17:40:30.310]                           if (is.null(name)) 
[17:40:30.310]                             next
[17:40:30.310]                           if (!grepl(pattern, name)) 
[17:40:30.310]                             next
[17:40:30.310]                           invokeRestart(restart)
[17:40:30.310]                           muffled <- TRUE
[17:40:30.310]                           break
[17:40:30.310]                         }
[17:40:30.310]                       }
[17:40:30.310]                     }
[17:40:30.310]                     invisible(muffled)
[17:40:30.310]                   }
[17:40:30.310]                   muffleCondition(cond)
[17:40:30.310]                 })
[17:40:30.310]             }))
[17:40:30.310]             future::FutureResult(value = ...future.value$value, 
[17:40:30.310]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.310]                   ...future.rng), globalenv = if (FALSE) 
[17:40:30.310]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:30.310]                     ...future.globalenv.names))
[17:40:30.310]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:30.310]         }, condition = base::local({
[17:40:30.310]             c <- base::c
[17:40:30.310]             inherits <- base::inherits
[17:40:30.310]             invokeRestart <- base::invokeRestart
[17:40:30.310]             length <- base::length
[17:40:30.310]             list <- base::list
[17:40:30.310]             seq.int <- base::seq.int
[17:40:30.310]             signalCondition <- base::signalCondition
[17:40:30.310]             sys.calls <- base::sys.calls
[17:40:30.310]             `[[` <- base::`[[`
[17:40:30.310]             `+` <- base::`+`
[17:40:30.310]             `<<-` <- base::`<<-`
[17:40:30.310]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:30.310]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:30.310]                   3L)]
[17:40:30.310]             }
[17:40:30.310]             function(cond) {
[17:40:30.310]                 is_error <- inherits(cond, "error")
[17:40:30.310]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:30.310]                   NULL)
[17:40:30.310]                 if (is_error) {
[17:40:30.310]                   sessionInformation <- function() {
[17:40:30.310]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:30.310]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:30.310]                       search = base::search(), system = base::Sys.info())
[17:40:30.310]                   }
[17:40:30.310]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.310]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:30.310]                     cond$call), session = sessionInformation(), 
[17:40:30.310]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:30.310]                   signalCondition(cond)
[17:40:30.310]                 }
[17:40:30.310]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:30.310]                 "immediateCondition"))) {
[17:40:30.310]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:30.310]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.310]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:30.310]                   if (TRUE && !signal) {
[17:40:30.310]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.310]                     {
[17:40:30.310]                       inherits <- base::inherits
[17:40:30.310]                       invokeRestart <- base::invokeRestart
[17:40:30.310]                       is.null <- base::is.null
[17:40:30.310]                       muffled <- FALSE
[17:40:30.310]                       if (inherits(cond, "message")) {
[17:40:30.310]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.310]                         if (muffled) 
[17:40:30.310]                           invokeRestart("muffleMessage")
[17:40:30.310]                       }
[17:40:30.310]                       else if (inherits(cond, "warning")) {
[17:40:30.310]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.310]                         if (muffled) 
[17:40:30.310]                           invokeRestart("muffleWarning")
[17:40:30.310]                       }
[17:40:30.310]                       else if (inherits(cond, "condition")) {
[17:40:30.310]                         if (!is.null(pattern)) {
[17:40:30.310]                           computeRestarts <- base::computeRestarts
[17:40:30.310]                           grepl <- base::grepl
[17:40:30.310]                           restarts <- computeRestarts(cond)
[17:40:30.310]                           for (restart in restarts) {
[17:40:30.310]                             name <- restart$name
[17:40:30.310]                             if (is.null(name)) 
[17:40:30.310]                               next
[17:40:30.310]                             if (!grepl(pattern, name)) 
[17:40:30.310]                               next
[17:40:30.310]                             invokeRestart(restart)
[17:40:30.310]                             muffled <- TRUE
[17:40:30.310]                             break
[17:40:30.310]                           }
[17:40:30.310]                         }
[17:40:30.310]                       }
[17:40:30.310]                       invisible(muffled)
[17:40:30.310]                     }
[17:40:30.310]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.310]                   }
[17:40:30.310]                 }
[17:40:30.310]                 else {
[17:40:30.310]                   if (TRUE) {
[17:40:30.310]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.310]                     {
[17:40:30.310]                       inherits <- base::inherits
[17:40:30.310]                       invokeRestart <- base::invokeRestart
[17:40:30.310]                       is.null <- base::is.null
[17:40:30.310]                       muffled <- FALSE
[17:40:30.310]                       if (inherits(cond, "message")) {
[17:40:30.310]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.310]                         if (muffled) 
[17:40:30.310]                           invokeRestart("muffleMessage")
[17:40:30.310]                       }
[17:40:30.310]                       else if (inherits(cond, "warning")) {
[17:40:30.310]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.310]                         if (muffled) 
[17:40:30.310]                           invokeRestart("muffleWarning")
[17:40:30.310]                       }
[17:40:30.310]                       else if (inherits(cond, "condition")) {
[17:40:30.310]                         if (!is.null(pattern)) {
[17:40:30.310]                           computeRestarts <- base::computeRestarts
[17:40:30.310]                           grepl <- base::grepl
[17:40:30.310]                           restarts <- computeRestarts(cond)
[17:40:30.310]                           for (restart in restarts) {
[17:40:30.310]                             name <- restart$name
[17:40:30.310]                             if (is.null(name)) 
[17:40:30.310]                               next
[17:40:30.310]                             if (!grepl(pattern, name)) 
[17:40:30.310]                               next
[17:40:30.310]                             invokeRestart(restart)
[17:40:30.310]                             muffled <- TRUE
[17:40:30.310]                             break
[17:40:30.310]                           }
[17:40:30.310]                         }
[17:40:30.310]                       }
[17:40:30.310]                       invisible(muffled)
[17:40:30.310]                     }
[17:40:30.310]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.310]                   }
[17:40:30.310]                 }
[17:40:30.310]             }
[17:40:30.310]         }))
[17:40:30.310]     }, error = function(ex) {
[17:40:30.310]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:30.310]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.310]                 ...future.rng), started = ...future.startTime, 
[17:40:30.310]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:30.310]             version = "1.8"), class = "FutureResult")
[17:40:30.310]     }, finally = {
[17:40:30.310]         if (!identical(...future.workdir, getwd())) 
[17:40:30.310]             setwd(...future.workdir)
[17:40:30.310]         {
[17:40:30.310]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:30.310]                 ...future.oldOptions$nwarnings <- NULL
[17:40:30.310]             }
[17:40:30.310]             base::options(...future.oldOptions)
[17:40:30.310]             if (.Platform$OS.type == "windows") {
[17:40:30.310]                 old_names <- names(...future.oldEnvVars)
[17:40:30.310]                 envs <- base::Sys.getenv()
[17:40:30.310]                 names <- names(envs)
[17:40:30.310]                 common <- intersect(names, old_names)
[17:40:30.310]                 added <- setdiff(names, old_names)
[17:40:30.310]                 removed <- setdiff(old_names, names)
[17:40:30.310]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:30.310]                   envs[common]]
[17:40:30.310]                 NAMES <- toupper(changed)
[17:40:30.310]                 args <- list()
[17:40:30.310]                 for (kk in seq_along(NAMES)) {
[17:40:30.310]                   name <- changed[[kk]]
[17:40:30.310]                   NAME <- NAMES[[kk]]
[17:40:30.310]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.310]                     next
[17:40:30.310]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.310]                 }
[17:40:30.310]                 NAMES <- toupper(added)
[17:40:30.310]                 for (kk in seq_along(NAMES)) {
[17:40:30.310]                   name <- added[[kk]]
[17:40:30.310]                   NAME <- NAMES[[kk]]
[17:40:30.310]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.310]                     next
[17:40:30.310]                   args[[name]] <- ""
[17:40:30.310]                 }
[17:40:30.310]                 NAMES <- toupper(removed)
[17:40:30.310]                 for (kk in seq_along(NAMES)) {
[17:40:30.310]                   name <- removed[[kk]]
[17:40:30.310]                   NAME <- NAMES[[kk]]
[17:40:30.310]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.310]                     next
[17:40:30.310]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.310]                 }
[17:40:30.310]                 if (length(args) > 0) 
[17:40:30.310]                   base::do.call(base::Sys.setenv, args = args)
[17:40:30.310]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:30.310]             }
[17:40:30.310]             else {
[17:40:30.310]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:30.310]             }
[17:40:30.310]             {
[17:40:30.310]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:30.310]                   0L) {
[17:40:30.310]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:30.310]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:30.310]                   base::options(opts)
[17:40:30.310]                 }
[17:40:30.310]                 {
[17:40:30.310]                   {
[17:40:30.310]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:30.310]                     NULL
[17:40:30.310]                   }
[17:40:30.310]                   options(future.plan = NULL)
[17:40:30.310]                   if (is.na(NA_character_)) 
[17:40:30.310]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.310]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:30.310]                   future::plan(list(function (..., workers = availableCores(), 
[17:40:30.310]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:40:30.310]                     envir = parent.frame()) 
[17:40:30.310]                   {
[17:40:30.310]                     if (is.function(workers)) 
[17:40:30.310]                       workers <- workers()
[17:40:30.310]                     workers <- structure(as.integer(workers), 
[17:40:30.310]                       class = class(workers))
[17:40:30.310]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:40:30.310]                       workers >= 1)
[17:40:30.310]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:40:30.310]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:40:30.310]                     }
[17:40:30.310]                     future <- MultisessionFuture(..., workers = workers, 
[17:40:30.310]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:40:30.310]                       envir = envir)
[17:40:30.310]                     if (!future$lazy) 
[17:40:30.310]                       future <- run(future)
[17:40:30.310]                     invisible(future)
[17:40:30.310]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:30.310]                 }
[17:40:30.310]             }
[17:40:30.310]         }
[17:40:30.310]     })
[17:40:30.310]     if (TRUE) {
[17:40:30.310]         base::sink(type = "output", split = FALSE)
[17:40:30.310]         if (TRUE) {
[17:40:30.310]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:30.310]         }
[17:40:30.310]         else {
[17:40:30.310]             ...future.result["stdout"] <- base::list(NULL)
[17:40:30.310]         }
[17:40:30.310]         base::close(...future.stdout)
[17:40:30.310]         ...future.stdout <- NULL
[17:40:30.310]     }
[17:40:30.310]     ...future.result$conditions <- ...future.conditions
[17:40:30.310]     ...future.result$finished <- base::Sys.time()
[17:40:30.310]     ...future.result
[17:40:30.310] }
[17:40:30.313] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[17:40:30.313] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[17:40:30.314] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[17:40:30.314] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:40:30.314] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:40:30.314] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:40:30.315] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:40:30.315] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:40:30.315] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:40:30.315] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:40:30.316] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:40:30.316] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[17:40:30.316] MultisessionFuture started
[17:40:30.316] - Launch lazy future ... done
[17:40:30.316] run() for ‘MultisessionFuture’ ... done
[17:40:30.317] Created future:
[17:40:30.317] MultisessionFuture:
[17:40:30.317] Label: ‘future_replicate-1’
[17:40:30.317] Expression:
[17:40:30.317] {
[17:40:30.317]     do.call(function(...) {
[17:40:30.317]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.317]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.317]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.317]             on.exit(options(oopts), add = TRUE)
[17:40:30.317]         }
[17:40:30.317]         {
[17:40:30.317]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.317]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.317]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.317]                   envir = globalenv(), inherits = FALSE)
[17:40:30.317]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.317]             })
[17:40:30.317]         }
[17:40:30.317]     }, args = future.call.arguments)
[17:40:30.317] }
[17:40:30.317] Lazy evaluation: FALSE
[17:40:30.317] Asynchronous evaluation: TRUE
[17:40:30.317] Local evaluation: TRUE
[17:40:30.317] Environment: R_GlobalEnv
[17:40:30.317] Capture standard output: TRUE
[17:40:30.317] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:30.317] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:30.317] Packages: <none>
[17:40:30.317] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:30.317] Resolved: FALSE
[17:40:30.317] Value: <not collected>
[17:40:30.317] Conditions captured: <none>
[17:40:30.317] Early signaling: FALSE
[17:40:30.317] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:30.317] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.328] Chunk #1 of 2 ... DONE
[17:40:30.328] Chunk #2 of 2 ...
[17:40:30.328]  - Finding globals in 'X' for chunk #2 ...
[17:40:30.328] getGlobalsAndPackages() ...
[17:40:30.328] Searching for globals...
[17:40:30.329] 
[17:40:30.329] Searching for globals ... DONE
[17:40:30.329] - globals: [0] <none>
[17:40:30.329] getGlobalsAndPackages() ... DONE
[17:40:30.329]    + additional globals found: [n=0] 
[17:40:30.329]    + additional namespaces needed: [n=0] 
[17:40:30.329]  - Finding globals in 'X' for chunk #2 ... DONE
[17:40:30.329]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[17:40:30.330]  - seeds: [3] <seeds>
[17:40:30.330] getGlobalsAndPackages() ...
[17:40:30.330] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.330] Resolving globals: FALSE
[17:40:30.330] Tweak future expression to call with '...' arguments ...
[17:40:30.330] {
[17:40:30.330]     do.call(function(...) {
[17:40:30.330]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.330]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.330]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.330]             on.exit(options(oopts), add = TRUE)
[17:40:30.330]         }
[17:40:30.330]         {
[17:40:30.330]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.330]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.330]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.330]                   envir = globalenv(), inherits = FALSE)
[17:40:30.330]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.330]             })
[17:40:30.330]         }
[17:40:30.330]     }, args = future.call.arguments)
[17:40:30.330] }
[17:40:30.330] Tweak future expression to call with '...' arguments ... DONE
[17:40:30.331] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.331] 
[17:40:30.331] getGlobalsAndPackages() ... DONE
[17:40:30.331] run() for ‘Future’ ...
[17:40:30.331] - state: ‘created’
[17:40:30.331] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:40:30.346] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.346] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:40:30.346]   - Field: ‘node’
[17:40:30.346]   - Field: ‘label’
[17:40:30.346]   - Field: ‘local’
[17:40:30.346]   - Field: ‘owner’
[17:40:30.347]   - Field: ‘envir’
[17:40:30.347]   - Field: ‘workers’
[17:40:30.347]   - Field: ‘packages’
[17:40:30.347]   - Field: ‘gc’
[17:40:30.347]   - Field: ‘conditions’
[17:40:30.347]   - Field: ‘persistent’
[17:40:30.347]   - Field: ‘expr’
[17:40:30.347]   - Field: ‘uuid’
[17:40:30.347]   - Field: ‘seed’
[17:40:30.347]   - Field: ‘version’
[17:40:30.348]   - Field: ‘result’
[17:40:30.348]   - Field: ‘asynchronous’
[17:40:30.348]   - Field: ‘calls’
[17:40:30.348]   - Field: ‘globals’
[17:40:30.348]   - Field: ‘stdout’
[17:40:30.348]   - Field: ‘earlySignal’
[17:40:30.348]   - Field: ‘lazy’
[17:40:30.348]   - Field: ‘state’
[17:40:30.348] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:40:30.348] - Launch lazy future ...
[17:40:30.349] Packages needed by the future expression (n = 0): <none>
[17:40:30.349] Packages needed by future strategies (n = 0): <none>
[17:40:30.349] {
[17:40:30.349]     {
[17:40:30.349]         {
[17:40:30.349]             ...future.startTime <- base::Sys.time()
[17:40:30.349]             {
[17:40:30.349]                 {
[17:40:30.349]                   {
[17:40:30.349]                     {
[17:40:30.349]                       base::local({
[17:40:30.349]                         has_future <- base::requireNamespace("future", 
[17:40:30.349]                           quietly = TRUE)
[17:40:30.349]                         if (has_future) {
[17:40:30.349]                           ns <- base::getNamespace("future")
[17:40:30.349]                           version <- ns[[".package"]][["version"]]
[17:40:30.349]                           if (is.null(version)) 
[17:40:30.349]                             version <- utils::packageVersion("future")
[17:40:30.349]                         }
[17:40:30.349]                         else {
[17:40:30.349]                           version <- NULL
[17:40:30.349]                         }
[17:40:30.349]                         if (!has_future || version < "1.8.0") {
[17:40:30.349]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:30.349]                             "", base::R.version$version.string), 
[17:40:30.349]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:30.349]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:30.349]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:30.349]                               "release", "version")], collapse = " "), 
[17:40:30.349]                             hostname = base::Sys.info()[["nodename"]])
[17:40:30.349]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:30.349]                             info)
[17:40:30.349]                           info <- base::paste(info, collapse = "; ")
[17:40:30.349]                           if (!has_future) {
[17:40:30.349]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:30.349]                               info)
[17:40:30.349]                           }
[17:40:30.349]                           else {
[17:40:30.349]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:30.349]                               info, version)
[17:40:30.349]                           }
[17:40:30.349]                           base::stop(msg)
[17:40:30.349]                         }
[17:40:30.349]                       })
[17:40:30.349]                     }
[17:40:30.349]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:30.349]                     base::options(mc.cores = 1L)
[17:40:30.349]                   }
[17:40:30.349]                   options(future.plan = NULL)
[17:40:30.349]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.349]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:30.349]                 }
[17:40:30.349]                 ...future.workdir <- getwd()
[17:40:30.349]             }
[17:40:30.349]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:30.349]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:30.349]         }
[17:40:30.349]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:30.349]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[17:40:30.349]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:30.349]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:30.349]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:30.349]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:30.349]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:30.349]             base::names(...future.oldOptions))
[17:40:30.349]     }
[17:40:30.349]     if (FALSE) {
[17:40:30.349]     }
[17:40:30.349]     else {
[17:40:30.349]         if (TRUE) {
[17:40:30.349]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:30.349]                 open = "w")
[17:40:30.349]         }
[17:40:30.349]         else {
[17:40:30.349]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:30.349]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:30.349]         }
[17:40:30.349]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:30.349]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:30.349]             base::sink(type = "output", split = FALSE)
[17:40:30.349]             base::close(...future.stdout)
[17:40:30.349]         }, add = TRUE)
[17:40:30.349]     }
[17:40:30.349]     ...future.frame <- base::sys.nframe()
[17:40:30.349]     ...future.conditions <- base::list()
[17:40:30.349]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:30.349]     if (FALSE) {
[17:40:30.349]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:30.349]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:30.349]     }
[17:40:30.349]     ...future.result <- base::tryCatch({
[17:40:30.349]         base::withCallingHandlers({
[17:40:30.349]             ...future.value <- base::withVisible(base::local({
[17:40:30.349]                 ...future.makeSendCondition <- local({
[17:40:30.349]                   sendCondition <- NULL
[17:40:30.349]                   function(frame = 1L) {
[17:40:30.349]                     if (is.function(sendCondition)) 
[17:40:30.349]                       return(sendCondition)
[17:40:30.349]                     ns <- getNamespace("parallel")
[17:40:30.349]                     if (exists("sendData", mode = "function", 
[17:40:30.349]                       envir = ns)) {
[17:40:30.349]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:30.349]                         envir = ns)
[17:40:30.349]                       envir <- sys.frame(frame)
[17:40:30.349]                       master <- NULL
[17:40:30.349]                       while (!identical(envir, .GlobalEnv) && 
[17:40:30.349]                         !identical(envir, emptyenv())) {
[17:40:30.349]                         if (exists("master", mode = "list", envir = envir, 
[17:40:30.349]                           inherits = FALSE)) {
[17:40:30.349]                           master <- get("master", mode = "list", 
[17:40:30.349]                             envir = envir, inherits = FALSE)
[17:40:30.349]                           if (inherits(master, c("SOCKnode", 
[17:40:30.349]                             "SOCK0node"))) {
[17:40:30.349]                             sendCondition <<- function(cond) {
[17:40:30.349]                               data <- list(type = "VALUE", value = cond, 
[17:40:30.349]                                 success = TRUE)
[17:40:30.349]                               parallel_sendData(master, data)
[17:40:30.349]                             }
[17:40:30.349]                             return(sendCondition)
[17:40:30.349]                           }
[17:40:30.349]                         }
[17:40:30.349]                         frame <- frame + 1L
[17:40:30.349]                         envir <- sys.frame(frame)
[17:40:30.349]                       }
[17:40:30.349]                     }
[17:40:30.349]                     sendCondition <<- function(cond) NULL
[17:40:30.349]                   }
[17:40:30.349]                 })
[17:40:30.349]                 withCallingHandlers({
[17:40:30.349]                   {
[17:40:30.349]                     do.call(function(...) {
[17:40:30.349]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.349]                       if (!identical(...future.globals.maxSize.org, 
[17:40:30.349]                         ...future.globals.maxSize)) {
[17:40:30.349]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.349]                         on.exit(options(oopts), add = TRUE)
[17:40:30.349]                       }
[17:40:30.349]                       {
[17:40:30.349]                         lapply(seq_along(...future.elements_ii), 
[17:40:30.349]                           FUN = function(jj) {
[17:40:30.349]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.349]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.349]                               envir = globalenv(), inherits = FALSE)
[17:40:30.349]                             ...future.FUN(...future.X_jj, ...)
[17:40:30.349]                           })
[17:40:30.349]                       }
[17:40:30.349]                     }, args = future.call.arguments)
[17:40:30.349]                   }
[17:40:30.349]                 }, immediateCondition = function(cond) {
[17:40:30.349]                   sendCondition <- ...future.makeSendCondition()
[17:40:30.349]                   sendCondition(cond)
[17:40:30.349]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.349]                   {
[17:40:30.349]                     inherits <- base::inherits
[17:40:30.349]                     invokeRestart <- base::invokeRestart
[17:40:30.349]                     is.null <- base::is.null
[17:40:30.349]                     muffled <- FALSE
[17:40:30.349]                     if (inherits(cond, "message")) {
[17:40:30.349]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:30.349]                       if (muffled) 
[17:40:30.349]                         invokeRestart("muffleMessage")
[17:40:30.349]                     }
[17:40:30.349]                     else if (inherits(cond, "warning")) {
[17:40:30.349]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:30.349]                       if (muffled) 
[17:40:30.349]                         invokeRestart("muffleWarning")
[17:40:30.349]                     }
[17:40:30.349]                     else if (inherits(cond, "condition")) {
[17:40:30.349]                       if (!is.null(pattern)) {
[17:40:30.349]                         computeRestarts <- base::computeRestarts
[17:40:30.349]                         grepl <- base::grepl
[17:40:30.349]                         restarts <- computeRestarts(cond)
[17:40:30.349]                         for (restart in restarts) {
[17:40:30.349]                           name <- restart$name
[17:40:30.349]                           if (is.null(name)) 
[17:40:30.349]                             next
[17:40:30.349]                           if (!grepl(pattern, name)) 
[17:40:30.349]                             next
[17:40:30.349]                           invokeRestart(restart)
[17:40:30.349]                           muffled <- TRUE
[17:40:30.349]                           break
[17:40:30.349]                         }
[17:40:30.349]                       }
[17:40:30.349]                     }
[17:40:30.349]                     invisible(muffled)
[17:40:30.349]                   }
[17:40:30.349]                   muffleCondition(cond)
[17:40:30.349]                 })
[17:40:30.349]             }))
[17:40:30.349]             future::FutureResult(value = ...future.value$value, 
[17:40:30.349]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.349]                   ...future.rng), globalenv = if (FALSE) 
[17:40:30.349]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:30.349]                     ...future.globalenv.names))
[17:40:30.349]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:30.349]         }, condition = base::local({
[17:40:30.349]             c <- base::c
[17:40:30.349]             inherits <- base::inherits
[17:40:30.349]             invokeRestart <- base::invokeRestart
[17:40:30.349]             length <- base::length
[17:40:30.349]             list <- base::list
[17:40:30.349]             seq.int <- base::seq.int
[17:40:30.349]             signalCondition <- base::signalCondition
[17:40:30.349]             sys.calls <- base::sys.calls
[17:40:30.349]             `[[` <- base::`[[`
[17:40:30.349]             `+` <- base::`+`
[17:40:30.349]             `<<-` <- base::`<<-`
[17:40:30.349]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:30.349]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:30.349]                   3L)]
[17:40:30.349]             }
[17:40:30.349]             function(cond) {
[17:40:30.349]                 is_error <- inherits(cond, "error")
[17:40:30.349]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:30.349]                   NULL)
[17:40:30.349]                 if (is_error) {
[17:40:30.349]                   sessionInformation <- function() {
[17:40:30.349]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:30.349]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:30.349]                       search = base::search(), system = base::Sys.info())
[17:40:30.349]                   }
[17:40:30.349]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.349]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:30.349]                     cond$call), session = sessionInformation(), 
[17:40:30.349]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:30.349]                   signalCondition(cond)
[17:40:30.349]                 }
[17:40:30.349]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:30.349]                 "immediateCondition"))) {
[17:40:30.349]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:30.349]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.349]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:30.349]                   if (TRUE && !signal) {
[17:40:30.349]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.349]                     {
[17:40:30.349]                       inherits <- base::inherits
[17:40:30.349]                       invokeRestart <- base::invokeRestart
[17:40:30.349]                       is.null <- base::is.null
[17:40:30.349]                       muffled <- FALSE
[17:40:30.349]                       if (inherits(cond, "message")) {
[17:40:30.349]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.349]                         if (muffled) 
[17:40:30.349]                           invokeRestart("muffleMessage")
[17:40:30.349]                       }
[17:40:30.349]                       else if (inherits(cond, "warning")) {
[17:40:30.349]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.349]                         if (muffled) 
[17:40:30.349]                           invokeRestart("muffleWarning")
[17:40:30.349]                       }
[17:40:30.349]                       else if (inherits(cond, "condition")) {
[17:40:30.349]                         if (!is.null(pattern)) {
[17:40:30.349]                           computeRestarts <- base::computeRestarts
[17:40:30.349]                           grepl <- base::grepl
[17:40:30.349]                           restarts <- computeRestarts(cond)
[17:40:30.349]                           for (restart in restarts) {
[17:40:30.349]                             name <- restart$name
[17:40:30.349]                             if (is.null(name)) 
[17:40:30.349]                               next
[17:40:30.349]                             if (!grepl(pattern, name)) 
[17:40:30.349]                               next
[17:40:30.349]                             invokeRestart(restart)
[17:40:30.349]                             muffled <- TRUE
[17:40:30.349]                             break
[17:40:30.349]                           }
[17:40:30.349]                         }
[17:40:30.349]                       }
[17:40:30.349]                       invisible(muffled)
[17:40:30.349]                     }
[17:40:30.349]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.349]                   }
[17:40:30.349]                 }
[17:40:30.349]                 else {
[17:40:30.349]                   if (TRUE) {
[17:40:30.349]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.349]                     {
[17:40:30.349]                       inherits <- base::inherits
[17:40:30.349]                       invokeRestart <- base::invokeRestart
[17:40:30.349]                       is.null <- base::is.null
[17:40:30.349]                       muffled <- FALSE
[17:40:30.349]                       if (inherits(cond, "message")) {
[17:40:30.349]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.349]                         if (muffled) 
[17:40:30.349]                           invokeRestart("muffleMessage")
[17:40:30.349]                       }
[17:40:30.349]                       else if (inherits(cond, "warning")) {
[17:40:30.349]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.349]                         if (muffled) 
[17:40:30.349]                           invokeRestart("muffleWarning")
[17:40:30.349]                       }
[17:40:30.349]                       else if (inherits(cond, "condition")) {
[17:40:30.349]                         if (!is.null(pattern)) {
[17:40:30.349]                           computeRestarts <- base::computeRestarts
[17:40:30.349]                           grepl <- base::grepl
[17:40:30.349]                           restarts <- computeRestarts(cond)
[17:40:30.349]                           for (restart in restarts) {
[17:40:30.349]                             name <- restart$name
[17:40:30.349]                             if (is.null(name)) 
[17:40:30.349]                               next
[17:40:30.349]                             if (!grepl(pattern, name)) 
[17:40:30.349]                               next
[17:40:30.349]                             invokeRestart(restart)
[17:40:30.349]                             muffled <- TRUE
[17:40:30.349]                             break
[17:40:30.349]                           }
[17:40:30.349]                         }
[17:40:30.349]                       }
[17:40:30.349]                       invisible(muffled)
[17:40:30.349]                     }
[17:40:30.349]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.349]                   }
[17:40:30.349]                 }
[17:40:30.349]             }
[17:40:30.349]         }))
[17:40:30.349]     }, error = function(ex) {
[17:40:30.349]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:30.349]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.349]                 ...future.rng), started = ...future.startTime, 
[17:40:30.349]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:30.349]             version = "1.8"), class = "FutureResult")
[17:40:30.349]     }, finally = {
[17:40:30.349]         if (!identical(...future.workdir, getwd())) 
[17:40:30.349]             setwd(...future.workdir)
[17:40:30.349]         {
[17:40:30.349]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:30.349]                 ...future.oldOptions$nwarnings <- NULL
[17:40:30.349]             }
[17:40:30.349]             base::options(...future.oldOptions)
[17:40:30.349]             if (.Platform$OS.type == "windows") {
[17:40:30.349]                 old_names <- names(...future.oldEnvVars)
[17:40:30.349]                 envs <- base::Sys.getenv()
[17:40:30.349]                 names <- names(envs)
[17:40:30.349]                 common <- intersect(names, old_names)
[17:40:30.349]                 added <- setdiff(names, old_names)
[17:40:30.349]                 removed <- setdiff(old_names, names)
[17:40:30.349]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:30.349]                   envs[common]]
[17:40:30.349]                 NAMES <- toupper(changed)
[17:40:30.349]                 args <- list()
[17:40:30.349]                 for (kk in seq_along(NAMES)) {
[17:40:30.349]                   name <- changed[[kk]]
[17:40:30.349]                   NAME <- NAMES[[kk]]
[17:40:30.349]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.349]                     next
[17:40:30.349]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.349]                 }
[17:40:30.349]                 NAMES <- toupper(added)
[17:40:30.349]                 for (kk in seq_along(NAMES)) {
[17:40:30.349]                   name <- added[[kk]]
[17:40:30.349]                   NAME <- NAMES[[kk]]
[17:40:30.349]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.349]                     next
[17:40:30.349]                   args[[name]] <- ""
[17:40:30.349]                 }
[17:40:30.349]                 NAMES <- toupper(removed)
[17:40:30.349]                 for (kk in seq_along(NAMES)) {
[17:40:30.349]                   name <- removed[[kk]]
[17:40:30.349]                   NAME <- NAMES[[kk]]
[17:40:30.349]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.349]                     next
[17:40:30.349]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.349]                 }
[17:40:30.349]                 if (length(args) > 0) 
[17:40:30.349]                   base::do.call(base::Sys.setenv, args = args)
[17:40:30.349]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:30.349]             }
[17:40:30.349]             else {
[17:40:30.349]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:30.349]             }
[17:40:30.349]             {
[17:40:30.349]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:30.349]                   0L) {
[17:40:30.349]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:30.349]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:30.349]                   base::options(opts)
[17:40:30.349]                 }
[17:40:30.349]                 {
[17:40:30.349]                   {
[17:40:30.349]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:30.349]                     NULL
[17:40:30.349]                   }
[17:40:30.349]                   options(future.plan = NULL)
[17:40:30.349]                   if (is.na(NA_character_)) 
[17:40:30.349]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.349]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:30.349]                   future::plan(list(function (..., workers = availableCores(), 
[17:40:30.349]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:40:30.349]                     envir = parent.frame()) 
[17:40:30.349]                   {
[17:40:30.349]                     if (is.function(workers)) 
[17:40:30.349]                       workers <- workers()
[17:40:30.349]                     workers <- structure(as.integer(workers), 
[17:40:30.349]                       class = class(workers))
[17:40:30.349]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:40:30.349]                       workers >= 1)
[17:40:30.349]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:40:30.349]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:40:30.349]                     }
[17:40:30.349]                     future <- MultisessionFuture(..., workers = workers, 
[17:40:30.349]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:40:30.349]                       envir = envir)
[17:40:30.349]                     if (!future$lazy) 
[17:40:30.349]                       future <- run(future)
[17:40:30.349]                     invisible(future)
[17:40:30.349]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:30.349]                 }
[17:40:30.349]             }
[17:40:30.349]         }
[17:40:30.349]     })
[17:40:30.349]     if (TRUE) {
[17:40:30.349]         base::sink(type = "output", split = FALSE)
[17:40:30.349]         if (TRUE) {
[17:40:30.349]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:30.349]         }
[17:40:30.349]         else {
[17:40:30.349]             ...future.result["stdout"] <- base::list(NULL)
[17:40:30.349]         }
[17:40:30.349]         base::close(...future.stdout)
[17:40:30.349]         ...future.stdout <- NULL
[17:40:30.349]     }
[17:40:30.349]     ...future.result$conditions <- ...future.conditions
[17:40:30.349]     ...future.result$finished <- base::Sys.time()
[17:40:30.349]     ...future.result
[17:40:30.349] }
[17:40:30.352] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[17:40:30.352] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[17:40:30.353] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[17:40:30.353] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:40:30.353] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:40:30.353] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:40:30.354] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:40:30.354] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:40:30.354] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:40:30.354] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:40:30.354] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:40:30.355] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[17:40:30.355] MultisessionFuture started
[17:40:30.355] - Launch lazy future ... done
[17:40:30.355] run() for ‘MultisessionFuture’ ... done
[17:40:30.355] Created future:
[17:40:30.356] MultisessionFuture:
[17:40:30.356] Label: ‘future_replicate-2’
[17:40:30.356] Expression:
[17:40:30.356] {
[17:40:30.356]     do.call(function(...) {
[17:40:30.356]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.356]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.356]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.356]             on.exit(options(oopts), add = TRUE)
[17:40:30.356]         }
[17:40:30.356]         {
[17:40:30.356]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.356]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.356]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.356]                   envir = globalenv(), inherits = FALSE)
[17:40:30.356]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.356]             })
[17:40:30.356]         }
[17:40:30.356]     }, args = future.call.arguments)
[17:40:30.356] }
[17:40:30.356] Lazy evaluation: FALSE
[17:40:30.356] Asynchronous evaluation: TRUE
[17:40:30.356] Local evaluation: TRUE
[17:40:30.356] Environment: R_GlobalEnv
[17:40:30.356] Capture standard output: TRUE
[17:40:30.356] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:30.356] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:30.356] Packages: <none>
[17:40:30.356] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:30.356] Resolved: FALSE
[17:40:30.356] Value: <not collected>
[17:40:30.356] Conditions captured: <none>
[17:40:30.356] Early signaling: FALSE
[17:40:30.356] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:30.356] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.367] Chunk #2 of 2 ... DONE
[17:40:30.367] Launching 2 futures (chunks) ... DONE
[17:40:30.367] Resolving 2 futures (chunks) ...
[17:40:30.368] resolve() on list ...
[17:40:30.368]  recursive: 0
[17:40:30.368]  length: 2
[17:40:30.368] 
[17:40:30.368] receiveMessageFromWorker() for ClusterFuture ...
[17:40:30.369] - Validating connection of MultisessionFuture
[17:40:30.369] - received message: FutureResult
[17:40:30.369] - Received FutureResult
[17:40:30.369] - Erased future from FutureRegistry
[17:40:30.369] result() for ClusterFuture ...
[17:40:30.369] - result already collected: FutureResult
[17:40:30.369] result() for ClusterFuture ... done
[17:40:30.369] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:30.369] Future #1
[17:40:30.370] result() for ClusterFuture ...
[17:40:30.370] - result already collected: FutureResult
[17:40:30.370] result() for ClusterFuture ... done
[17:40:30.370] result() for ClusterFuture ...
[17:40:30.370] - result already collected: FutureResult
[17:40:30.370] result() for ClusterFuture ... done
[17:40:30.370] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:40:30.370] - nx: 2
[17:40:30.370] - relay: TRUE
[17:40:30.370] - stdout: TRUE
[17:40:30.370] - signal: TRUE
[17:40:30.371] - resignal: FALSE
[17:40:30.371] - force: TRUE
[17:40:30.371] - relayed: [n=2] FALSE, FALSE
[17:40:30.371] - queued futures: [n=2] FALSE, FALSE
[17:40:30.371]  - until=1
[17:40:30.371]  - relaying element #1
[17:40:30.371] result() for ClusterFuture ...
[17:40:30.371] - result already collected: FutureResult
[17:40:30.371] result() for ClusterFuture ... done
[17:40:30.371] result() for ClusterFuture ...
[17:40:30.371] - result already collected: FutureResult
[17:40:30.372] result() for ClusterFuture ... done
[17:40:30.372] result() for ClusterFuture ...
[17:40:30.372] - result already collected: FutureResult
[17:40:30.372] result() for ClusterFuture ... done
[17:40:30.372] result() for ClusterFuture ...
[17:40:30.372] - result already collected: FutureResult
[17:40:30.372] result() for ClusterFuture ... done
[17:40:30.372] - relayed: [n=2] TRUE, FALSE
[17:40:30.372] - queued futures: [n=2] TRUE, FALSE
[17:40:30.372] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:40:30.373]  length: 1 (resolved future 1)
[17:40:30.414] receiveMessageFromWorker() for ClusterFuture ...
[17:40:30.414] - Validating connection of MultisessionFuture
[17:40:30.415] - received message: FutureResult
[17:40:30.415] - Received FutureResult
[17:40:30.415] - Erased future from FutureRegistry
[17:40:30.415] result() for ClusterFuture ...
[17:40:30.415] - result already collected: FutureResult
[17:40:30.415] result() for ClusterFuture ... done
[17:40:30.415] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:30.415] Future #2
[17:40:30.415] result() for ClusterFuture ...
[17:40:30.416] - result already collected: FutureResult
[17:40:30.416] result() for ClusterFuture ... done
[17:40:30.416] result() for ClusterFuture ...
[17:40:30.416] - result already collected: FutureResult
[17:40:30.416] result() for ClusterFuture ... done
[17:40:30.416] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:40:30.416] - nx: 2
[17:40:30.416] - relay: TRUE
[17:40:30.416] - stdout: TRUE
[17:40:30.416] - signal: TRUE
[17:40:30.416] - resignal: FALSE
[17:40:30.416] - force: TRUE
[17:40:30.417] - relayed: [n=2] TRUE, FALSE
[17:40:30.417] - queued futures: [n=2] TRUE, FALSE
[17:40:30.417]  - until=2
[17:40:30.417]  - relaying element #2
[17:40:30.417] result() for ClusterFuture ...
[17:40:30.417] - result already collected: FutureResult
[17:40:30.417] result() for ClusterFuture ... done
[17:40:30.417] result() for ClusterFuture ...
[17:40:30.417] - result already collected: FutureResult
[17:40:30.417] result() for ClusterFuture ... done
[17:40:30.418] result() for ClusterFuture ...
[17:40:30.418] - result already collected: FutureResult
[17:40:30.418] result() for ClusterFuture ... done
[17:40:30.418] result() for ClusterFuture ...
[17:40:30.418] - result already collected: FutureResult
[17:40:30.418] result() for ClusterFuture ... done
[17:40:30.418] - relayed: [n=2] TRUE, TRUE
[17:40:30.418] - queued futures: [n=2] TRUE, TRUE
[17:40:30.418] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:40:30.418]  length: 0 (resolved future 2)
[17:40:30.418] Relaying remaining futures
[17:40:30.418] signalConditionsASAP(NULL, pos=0) ...
[17:40:30.419] - nx: 2
[17:40:30.419] - relay: TRUE
[17:40:30.419] - stdout: TRUE
[17:40:30.419] - signal: TRUE
[17:40:30.419] - resignal: FALSE
[17:40:30.419] - force: TRUE
[17:40:30.419] - relayed: [n=2] TRUE, TRUE
[17:40:30.419] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:40:30.419] - relayed: [n=2] TRUE, TRUE
[17:40:30.419] - queued futures: [n=2] TRUE, TRUE
[17:40:30.420] signalConditionsASAP(NULL, pos=0) ... done
[17:40:30.420] resolve() on list ... DONE
[17:40:30.420] result() for ClusterFuture ...
[17:40:30.420] - result already collected: FutureResult
[17:40:30.420] result() for ClusterFuture ... done
[17:40:30.420] result() for ClusterFuture ...
[17:40:30.420] - result already collected: FutureResult
[17:40:30.420] result() for ClusterFuture ... done
[17:40:30.420] result() for ClusterFuture ...
[17:40:30.420] - result already collected: FutureResult
[17:40:30.420] result() for ClusterFuture ... done
[17:40:30.420] result() for ClusterFuture ...
[17:40:30.421] - result already collected: FutureResult
[17:40:30.421] result() for ClusterFuture ... done
[17:40:30.421]  - Number of value chunks collected: 2
[17:40:30.421] Resolving 2 futures (chunks) ... DONE
[17:40:30.421] Reducing values from 2 chunks ...
[17:40:30.421]  - Number of values collected after concatenation: 5
[17:40:30.421]  - Number of values expected: 5
[17:40:30.421] Reducing values from 2 chunks ... DONE
[17:40:30.421] future_lapply() ... DONE
[17:40:30.421] future_lapply() ...
[17:40:30.422] Generating random seeds ...
[17:40:30.422] Generating random seed streams for 5 elements ...
[17:40:30.422] Generating random seed streams for 5 elements ... DONE
[17:40:30.422] Generating random seeds ... DONE
[17:40:30.422] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:40:30.426] Number of chunks: 2
[17:40:30.427] getGlobalsAndPackagesXApply() ...
[17:40:30.427]  - future.globals: TRUE
[17:40:30.427] getGlobalsAndPackages() ...
[17:40:30.427] Searching for globals...
[17:40:30.428] - globals found: [2] ‘FUN’, ‘sample’
[17:40:30.428] Searching for globals ... DONE
[17:40:30.428] Resolving globals: FALSE
[17:40:30.428] The total size of the 1 globals is 616 bytes (616 bytes)
[17:40:30.429] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:40:30.429] - globals: [1] ‘FUN’
[17:40:30.429] 
[17:40:30.429] getGlobalsAndPackages() ... DONE
[17:40:30.429]  - globals found/used: [n=1] ‘FUN’
[17:40:30.429]  - needed namespaces: [n=0] 
[17:40:30.429] Finding globals ... DONE
[17:40:30.429]  - use_args: TRUE
[17:40:30.430]  - Getting '...' globals ...
[17:40:30.430] resolve() on list ...
[17:40:30.430]  recursive: 0
[17:40:30.430]  length: 1
[17:40:30.430]  elements: ‘...’
[17:40:30.430]  length: 0 (resolved future 1)
[17:40:30.430] resolve() on list ... DONE
[17:40:30.430]    - '...' content: [n=0] 
[17:40:30.431] List of 1
[17:40:30.431]  $ ...: list()
[17:40:30.431]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:30.431]  - attr(*, "where")=List of 1
[17:40:30.431]   ..$ ...:<environment: 0x558a3debae80> 
[17:40:30.431]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:30.431]  - attr(*, "resolved")= logi TRUE
[17:40:30.431]  - attr(*, "total_size")= num NA
[17:40:30.435]  - Getting '...' globals ... DONE
[17:40:30.435] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:40:30.435] List of 2
[17:40:30.435]  $ ...future.FUN:function (...)  
[17:40:30.435]  $ ...          : list()
[17:40:30.435]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:30.435]  - attr(*, "where")=List of 2
[17:40:30.435]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:40:30.435]   ..$ ...          :<environment: 0x558a3debae80> 
[17:40:30.435]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:30.435]  - attr(*, "resolved")= logi FALSE
[17:40:30.435]  - attr(*, "total_size")= num 616
[17:40:30.438] Packages to be attached in all futures: [n=0] 
[17:40:30.438] getGlobalsAndPackagesXApply() ... DONE
[17:40:30.438] Number of futures (= number of chunks): 2
[17:40:30.438] Launching 2 futures (chunks) ...
[17:40:30.438] Chunk #1 of 2 ...
[17:40:30.438]  - Finding globals in 'X' for chunk #1 ...
[17:40:30.438] getGlobalsAndPackages() ...
[17:40:30.439] Searching for globals...
[17:40:30.439] 
[17:40:30.439] Searching for globals ... DONE
[17:40:30.439] - globals: [0] <none>
[17:40:30.439] getGlobalsAndPackages() ... DONE
[17:40:30.439]    + additional globals found: [n=0] 
[17:40:30.439]    + additional namespaces needed: [n=0] 
[17:40:30.439]  - Finding globals in 'X' for chunk #1 ... DONE
[17:40:30.439]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:40:30.440]  - seeds: [2] <seeds>
[17:40:30.440] getGlobalsAndPackages() ...
[17:40:30.440] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.440] Resolving globals: FALSE
[17:40:30.440] Tweak future expression to call with '...' arguments ...
[17:40:30.440] {
[17:40:30.440]     do.call(function(...) {
[17:40:30.440]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.440]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.440]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.440]             on.exit(options(oopts), add = TRUE)
[17:40:30.440]         }
[17:40:30.440]         {
[17:40:30.440]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.440]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.440]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.440]                   envir = globalenv(), inherits = FALSE)
[17:40:30.440]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.440]             })
[17:40:30.440]         }
[17:40:30.440]     }, args = future.call.arguments)
[17:40:30.440] }
[17:40:30.440] Tweak future expression to call with '...' arguments ... DONE
[17:40:30.441] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.441] 
[17:40:30.441] getGlobalsAndPackages() ... DONE
[17:40:30.441] run() for ‘Future’ ...
[17:40:30.441] - state: ‘created’
[17:40:30.441] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:40:30.456] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.457] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:40:30.457]   - Field: ‘node’
[17:40:30.457]   - Field: ‘label’
[17:40:30.457]   - Field: ‘local’
[17:40:30.457]   - Field: ‘owner’
[17:40:30.457]   - Field: ‘envir’
[17:40:30.457]   - Field: ‘workers’
[17:40:30.457]   - Field: ‘packages’
[17:40:30.457]   - Field: ‘gc’
[17:40:30.457]   - Field: ‘conditions’
[17:40:30.458]   - Field: ‘persistent’
[17:40:30.458]   - Field: ‘expr’
[17:40:30.458]   - Field: ‘uuid’
[17:40:30.458]   - Field: ‘seed’
[17:40:30.458]   - Field: ‘version’
[17:40:30.458]   - Field: ‘result’
[17:40:30.458]   - Field: ‘asynchronous’
[17:40:30.458]   - Field: ‘calls’
[17:40:30.458]   - Field: ‘globals’
[17:40:30.458]   - Field: ‘stdout’
[17:40:30.458]   - Field: ‘earlySignal’
[17:40:30.459]   - Field: ‘lazy’
[17:40:30.459]   - Field: ‘state’
[17:40:30.459] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:40:30.459] - Launch lazy future ...
[17:40:30.459] Packages needed by the future expression (n = 0): <none>
[17:40:30.459] Packages needed by future strategies (n = 0): <none>
[17:40:30.460] {
[17:40:30.460]     {
[17:40:30.460]         {
[17:40:30.460]             ...future.startTime <- base::Sys.time()
[17:40:30.460]             {
[17:40:30.460]                 {
[17:40:30.460]                   {
[17:40:30.460]                     {
[17:40:30.460]                       base::local({
[17:40:30.460]                         has_future <- base::requireNamespace("future", 
[17:40:30.460]                           quietly = TRUE)
[17:40:30.460]                         if (has_future) {
[17:40:30.460]                           ns <- base::getNamespace("future")
[17:40:30.460]                           version <- ns[[".package"]][["version"]]
[17:40:30.460]                           if (is.null(version)) 
[17:40:30.460]                             version <- utils::packageVersion("future")
[17:40:30.460]                         }
[17:40:30.460]                         else {
[17:40:30.460]                           version <- NULL
[17:40:30.460]                         }
[17:40:30.460]                         if (!has_future || version < "1.8.0") {
[17:40:30.460]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:30.460]                             "", base::R.version$version.string), 
[17:40:30.460]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:30.460]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:30.460]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:30.460]                               "release", "version")], collapse = " "), 
[17:40:30.460]                             hostname = base::Sys.info()[["nodename"]])
[17:40:30.460]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:30.460]                             info)
[17:40:30.460]                           info <- base::paste(info, collapse = "; ")
[17:40:30.460]                           if (!has_future) {
[17:40:30.460]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:30.460]                               info)
[17:40:30.460]                           }
[17:40:30.460]                           else {
[17:40:30.460]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:30.460]                               info, version)
[17:40:30.460]                           }
[17:40:30.460]                           base::stop(msg)
[17:40:30.460]                         }
[17:40:30.460]                       })
[17:40:30.460]                     }
[17:40:30.460]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:30.460]                     base::options(mc.cores = 1L)
[17:40:30.460]                   }
[17:40:30.460]                   options(future.plan = NULL)
[17:40:30.460]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.460]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:30.460]                 }
[17:40:30.460]                 ...future.workdir <- getwd()
[17:40:30.460]             }
[17:40:30.460]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:30.460]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:30.460]         }
[17:40:30.460]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:30.460]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:40:30.460]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:30.460]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:30.460]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:30.460]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:30.460]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:30.460]             base::names(...future.oldOptions))
[17:40:30.460]     }
[17:40:30.460]     if (FALSE) {
[17:40:30.460]     }
[17:40:30.460]     else {
[17:40:30.460]         if (TRUE) {
[17:40:30.460]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:30.460]                 open = "w")
[17:40:30.460]         }
[17:40:30.460]         else {
[17:40:30.460]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:30.460]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:30.460]         }
[17:40:30.460]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:30.460]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:30.460]             base::sink(type = "output", split = FALSE)
[17:40:30.460]             base::close(...future.stdout)
[17:40:30.460]         }, add = TRUE)
[17:40:30.460]     }
[17:40:30.460]     ...future.frame <- base::sys.nframe()
[17:40:30.460]     ...future.conditions <- base::list()
[17:40:30.460]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:30.460]     if (FALSE) {
[17:40:30.460]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:30.460]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:30.460]     }
[17:40:30.460]     ...future.result <- base::tryCatch({
[17:40:30.460]         base::withCallingHandlers({
[17:40:30.460]             ...future.value <- base::withVisible(base::local({
[17:40:30.460]                 ...future.makeSendCondition <- local({
[17:40:30.460]                   sendCondition <- NULL
[17:40:30.460]                   function(frame = 1L) {
[17:40:30.460]                     if (is.function(sendCondition)) 
[17:40:30.460]                       return(sendCondition)
[17:40:30.460]                     ns <- getNamespace("parallel")
[17:40:30.460]                     if (exists("sendData", mode = "function", 
[17:40:30.460]                       envir = ns)) {
[17:40:30.460]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:30.460]                         envir = ns)
[17:40:30.460]                       envir <- sys.frame(frame)
[17:40:30.460]                       master <- NULL
[17:40:30.460]                       while (!identical(envir, .GlobalEnv) && 
[17:40:30.460]                         !identical(envir, emptyenv())) {
[17:40:30.460]                         if (exists("master", mode = "list", envir = envir, 
[17:40:30.460]                           inherits = FALSE)) {
[17:40:30.460]                           master <- get("master", mode = "list", 
[17:40:30.460]                             envir = envir, inherits = FALSE)
[17:40:30.460]                           if (inherits(master, c("SOCKnode", 
[17:40:30.460]                             "SOCK0node"))) {
[17:40:30.460]                             sendCondition <<- function(cond) {
[17:40:30.460]                               data <- list(type = "VALUE", value = cond, 
[17:40:30.460]                                 success = TRUE)
[17:40:30.460]                               parallel_sendData(master, data)
[17:40:30.460]                             }
[17:40:30.460]                             return(sendCondition)
[17:40:30.460]                           }
[17:40:30.460]                         }
[17:40:30.460]                         frame <- frame + 1L
[17:40:30.460]                         envir <- sys.frame(frame)
[17:40:30.460]                       }
[17:40:30.460]                     }
[17:40:30.460]                     sendCondition <<- function(cond) NULL
[17:40:30.460]                   }
[17:40:30.460]                 })
[17:40:30.460]                 withCallingHandlers({
[17:40:30.460]                   {
[17:40:30.460]                     do.call(function(...) {
[17:40:30.460]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.460]                       if (!identical(...future.globals.maxSize.org, 
[17:40:30.460]                         ...future.globals.maxSize)) {
[17:40:30.460]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.460]                         on.exit(options(oopts), add = TRUE)
[17:40:30.460]                       }
[17:40:30.460]                       {
[17:40:30.460]                         lapply(seq_along(...future.elements_ii), 
[17:40:30.460]                           FUN = function(jj) {
[17:40:30.460]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.460]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.460]                               envir = globalenv(), inherits = FALSE)
[17:40:30.460]                             ...future.FUN(...future.X_jj, ...)
[17:40:30.460]                           })
[17:40:30.460]                       }
[17:40:30.460]                     }, args = future.call.arguments)
[17:40:30.460]                   }
[17:40:30.460]                 }, immediateCondition = function(cond) {
[17:40:30.460]                   sendCondition <- ...future.makeSendCondition()
[17:40:30.460]                   sendCondition(cond)
[17:40:30.460]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.460]                   {
[17:40:30.460]                     inherits <- base::inherits
[17:40:30.460]                     invokeRestart <- base::invokeRestart
[17:40:30.460]                     is.null <- base::is.null
[17:40:30.460]                     muffled <- FALSE
[17:40:30.460]                     if (inherits(cond, "message")) {
[17:40:30.460]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:30.460]                       if (muffled) 
[17:40:30.460]                         invokeRestart("muffleMessage")
[17:40:30.460]                     }
[17:40:30.460]                     else if (inherits(cond, "warning")) {
[17:40:30.460]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:30.460]                       if (muffled) 
[17:40:30.460]                         invokeRestart("muffleWarning")
[17:40:30.460]                     }
[17:40:30.460]                     else if (inherits(cond, "condition")) {
[17:40:30.460]                       if (!is.null(pattern)) {
[17:40:30.460]                         computeRestarts <- base::computeRestarts
[17:40:30.460]                         grepl <- base::grepl
[17:40:30.460]                         restarts <- computeRestarts(cond)
[17:40:30.460]                         for (restart in restarts) {
[17:40:30.460]                           name <- restart$name
[17:40:30.460]                           if (is.null(name)) 
[17:40:30.460]                             next
[17:40:30.460]                           if (!grepl(pattern, name)) 
[17:40:30.460]                             next
[17:40:30.460]                           invokeRestart(restart)
[17:40:30.460]                           muffled <- TRUE
[17:40:30.460]                           break
[17:40:30.460]                         }
[17:40:30.460]                       }
[17:40:30.460]                     }
[17:40:30.460]                     invisible(muffled)
[17:40:30.460]                   }
[17:40:30.460]                   muffleCondition(cond)
[17:40:30.460]                 })
[17:40:30.460]             }))
[17:40:30.460]             future::FutureResult(value = ...future.value$value, 
[17:40:30.460]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.460]                   ...future.rng), globalenv = if (FALSE) 
[17:40:30.460]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:30.460]                     ...future.globalenv.names))
[17:40:30.460]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:30.460]         }, condition = base::local({
[17:40:30.460]             c <- base::c
[17:40:30.460]             inherits <- base::inherits
[17:40:30.460]             invokeRestart <- base::invokeRestart
[17:40:30.460]             length <- base::length
[17:40:30.460]             list <- base::list
[17:40:30.460]             seq.int <- base::seq.int
[17:40:30.460]             signalCondition <- base::signalCondition
[17:40:30.460]             sys.calls <- base::sys.calls
[17:40:30.460]             `[[` <- base::`[[`
[17:40:30.460]             `+` <- base::`+`
[17:40:30.460]             `<<-` <- base::`<<-`
[17:40:30.460]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:30.460]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:30.460]                   3L)]
[17:40:30.460]             }
[17:40:30.460]             function(cond) {
[17:40:30.460]                 is_error <- inherits(cond, "error")
[17:40:30.460]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:30.460]                   NULL)
[17:40:30.460]                 if (is_error) {
[17:40:30.460]                   sessionInformation <- function() {
[17:40:30.460]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:30.460]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:30.460]                       search = base::search(), system = base::Sys.info())
[17:40:30.460]                   }
[17:40:30.460]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.460]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:30.460]                     cond$call), session = sessionInformation(), 
[17:40:30.460]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:30.460]                   signalCondition(cond)
[17:40:30.460]                 }
[17:40:30.460]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:30.460]                 "immediateCondition"))) {
[17:40:30.460]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:30.460]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.460]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:30.460]                   if (TRUE && !signal) {
[17:40:30.460]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.460]                     {
[17:40:30.460]                       inherits <- base::inherits
[17:40:30.460]                       invokeRestart <- base::invokeRestart
[17:40:30.460]                       is.null <- base::is.null
[17:40:30.460]                       muffled <- FALSE
[17:40:30.460]                       if (inherits(cond, "message")) {
[17:40:30.460]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.460]                         if (muffled) 
[17:40:30.460]                           invokeRestart("muffleMessage")
[17:40:30.460]                       }
[17:40:30.460]                       else if (inherits(cond, "warning")) {
[17:40:30.460]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.460]                         if (muffled) 
[17:40:30.460]                           invokeRestart("muffleWarning")
[17:40:30.460]                       }
[17:40:30.460]                       else if (inherits(cond, "condition")) {
[17:40:30.460]                         if (!is.null(pattern)) {
[17:40:30.460]                           computeRestarts <- base::computeRestarts
[17:40:30.460]                           grepl <- base::grepl
[17:40:30.460]                           restarts <- computeRestarts(cond)
[17:40:30.460]                           for (restart in restarts) {
[17:40:30.460]                             name <- restart$name
[17:40:30.460]                             if (is.null(name)) 
[17:40:30.460]                               next
[17:40:30.460]                             if (!grepl(pattern, name)) 
[17:40:30.460]                               next
[17:40:30.460]                             invokeRestart(restart)
[17:40:30.460]                             muffled <- TRUE
[17:40:30.460]                             break
[17:40:30.460]                           }
[17:40:30.460]                         }
[17:40:30.460]                       }
[17:40:30.460]                       invisible(muffled)
[17:40:30.460]                     }
[17:40:30.460]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.460]                   }
[17:40:30.460]                 }
[17:40:30.460]                 else {
[17:40:30.460]                   if (TRUE) {
[17:40:30.460]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.460]                     {
[17:40:30.460]                       inherits <- base::inherits
[17:40:30.460]                       invokeRestart <- base::invokeRestart
[17:40:30.460]                       is.null <- base::is.null
[17:40:30.460]                       muffled <- FALSE
[17:40:30.460]                       if (inherits(cond, "message")) {
[17:40:30.460]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.460]                         if (muffled) 
[17:40:30.460]                           invokeRestart("muffleMessage")
[17:40:30.460]                       }
[17:40:30.460]                       else if (inherits(cond, "warning")) {
[17:40:30.460]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.460]                         if (muffled) 
[17:40:30.460]                           invokeRestart("muffleWarning")
[17:40:30.460]                       }
[17:40:30.460]                       else if (inherits(cond, "condition")) {
[17:40:30.460]                         if (!is.null(pattern)) {
[17:40:30.460]                           computeRestarts <- base::computeRestarts
[17:40:30.460]                           grepl <- base::grepl
[17:40:30.460]                           restarts <- computeRestarts(cond)
[17:40:30.460]                           for (restart in restarts) {
[17:40:30.460]                             name <- restart$name
[17:40:30.460]                             if (is.null(name)) 
[17:40:30.460]                               next
[17:40:30.460]                             if (!grepl(pattern, name)) 
[17:40:30.460]                               next
[17:40:30.460]                             invokeRestart(restart)
[17:40:30.460]                             muffled <- TRUE
[17:40:30.460]                             break
[17:40:30.460]                           }
[17:40:30.460]                         }
[17:40:30.460]                       }
[17:40:30.460]                       invisible(muffled)
[17:40:30.460]                     }
[17:40:30.460]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.460]                   }
[17:40:30.460]                 }
[17:40:30.460]             }
[17:40:30.460]         }))
[17:40:30.460]     }, error = function(ex) {
[17:40:30.460]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:30.460]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.460]                 ...future.rng), started = ...future.startTime, 
[17:40:30.460]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:30.460]             version = "1.8"), class = "FutureResult")
[17:40:30.460]     }, finally = {
[17:40:30.460]         if (!identical(...future.workdir, getwd())) 
[17:40:30.460]             setwd(...future.workdir)
[17:40:30.460]         {
[17:40:30.460]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:30.460]                 ...future.oldOptions$nwarnings <- NULL
[17:40:30.460]             }
[17:40:30.460]             base::options(...future.oldOptions)
[17:40:30.460]             if (.Platform$OS.type == "windows") {
[17:40:30.460]                 old_names <- names(...future.oldEnvVars)
[17:40:30.460]                 envs <- base::Sys.getenv()
[17:40:30.460]                 names <- names(envs)
[17:40:30.460]                 common <- intersect(names, old_names)
[17:40:30.460]                 added <- setdiff(names, old_names)
[17:40:30.460]                 removed <- setdiff(old_names, names)
[17:40:30.460]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:30.460]                   envs[common]]
[17:40:30.460]                 NAMES <- toupper(changed)
[17:40:30.460]                 args <- list()
[17:40:30.460]                 for (kk in seq_along(NAMES)) {
[17:40:30.460]                   name <- changed[[kk]]
[17:40:30.460]                   NAME <- NAMES[[kk]]
[17:40:30.460]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.460]                     next
[17:40:30.460]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.460]                 }
[17:40:30.460]                 NAMES <- toupper(added)
[17:40:30.460]                 for (kk in seq_along(NAMES)) {
[17:40:30.460]                   name <- added[[kk]]
[17:40:30.460]                   NAME <- NAMES[[kk]]
[17:40:30.460]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.460]                     next
[17:40:30.460]                   args[[name]] <- ""
[17:40:30.460]                 }
[17:40:30.460]                 NAMES <- toupper(removed)
[17:40:30.460]                 for (kk in seq_along(NAMES)) {
[17:40:30.460]                   name <- removed[[kk]]
[17:40:30.460]                   NAME <- NAMES[[kk]]
[17:40:30.460]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.460]                     next
[17:40:30.460]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.460]                 }
[17:40:30.460]                 if (length(args) > 0) 
[17:40:30.460]                   base::do.call(base::Sys.setenv, args = args)
[17:40:30.460]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:30.460]             }
[17:40:30.460]             else {
[17:40:30.460]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:30.460]             }
[17:40:30.460]             {
[17:40:30.460]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:30.460]                   0L) {
[17:40:30.460]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:30.460]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:30.460]                   base::options(opts)
[17:40:30.460]                 }
[17:40:30.460]                 {
[17:40:30.460]                   {
[17:40:30.460]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:30.460]                     NULL
[17:40:30.460]                   }
[17:40:30.460]                   options(future.plan = NULL)
[17:40:30.460]                   if (is.na(NA_character_)) 
[17:40:30.460]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.460]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:30.460]                   future::plan(list(function (..., workers = availableCores(), 
[17:40:30.460]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:40:30.460]                     envir = parent.frame()) 
[17:40:30.460]                   {
[17:40:30.460]                     if (is.function(workers)) 
[17:40:30.460]                       workers <- workers()
[17:40:30.460]                     workers <- structure(as.integer(workers), 
[17:40:30.460]                       class = class(workers))
[17:40:30.460]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:40:30.460]                       workers >= 1)
[17:40:30.460]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:40:30.460]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:40:30.460]                     }
[17:40:30.460]                     future <- MultisessionFuture(..., workers = workers, 
[17:40:30.460]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:40:30.460]                       envir = envir)
[17:40:30.460]                     if (!future$lazy) 
[17:40:30.460]                       future <- run(future)
[17:40:30.460]                     invisible(future)
[17:40:30.460]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:30.460]                 }
[17:40:30.460]             }
[17:40:30.460]         }
[17:40:30.460]     })
[17:40:30.460]     if (TRUE) {
[17:40:30.460]         base::sink(type = "output", split = FALSE)
[17:40:30.460]         if (TRUE) {
[17:40:30.460]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:30.460]         }
[17:40:30.460]         else {
[17:40:30.460]             ...future.result["stdout"] <- base::list(NULL)
[17:40:30.460]         }
[17:40:30.460]         base::close(...future.stdout)
[17:40:30.460]         ...future.stdout <- NULL
[17:40:30.460]     }
[17:40:30.460]     ...future.result$conditions <- ...future.conditions
[17:40:30.460]     ...future.result$finished <- base::Sys.time()
[17:40:30.460]     ...future.result
[17:40:30.460] }
[17:40:30.463] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[17:40:30.463] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[17:40:30.463] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[17:40:30.463] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:40:30.464] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:40:30.464] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:40:30.464] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:40:30.464] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:40:30.465] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:40:30.465] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:40:30.465] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:40:30.465] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[17:40:30.466] MultisessionFuture started
[17:40:30.466] - Launch lazy future ... done
[17:40:30.466] run() for ‘MultisessionFuture’ ... done
[17:40:30.466] Created future:
[17:40:30.467] MultisessionFuture:
[17:40:30.467] Label: ‘future_replicate-1’
[17:40:30.467] Expression:
[17:40:30.467] {
[17:40:30.467]     do.call(function(...) {
[17:40:30.467]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.467]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.467]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.467]             on.exit(options(oopts), add = TRUE)
[17:40:30.467]         }
[17:40:30.467]         {
[17:40:30.467]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.467]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.467]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.467]                   envir = globalenv(), inherits = FALSE)
[17:40:30.467]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.467]             })
[17:40:30.467]         }
[17:40:30.467]     }, args = future.call.arguments)
[17:40:30.467] }
[17:40:30.467] Lazy evaluation: FALSE
[17:40:30.467] Asynchronous evaluation: TRUE
[17:40:30.467] Local evaluation: TRUE
[17:40:30.467] Environment: R_GlobalEnv
[17:40:30.467] Capture standard output: TRUE
[17:40:30.467] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:30.467] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:30.467] Packages: <none>
[17:40:30.467] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:30.467] Resolved: FALSE
[17:40:30.467] Value: <not collected>
[17:40:30.467] Conditions captured: <none>
[17:40:30.467] Early signaling: FALSE
[17:40:30.467] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:30.467] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.478] Chunk #1 of 2 ... DONE
[17:40:30.478] Chunk #2 of 2 ...
[17:40:30.478]  - Finding globals in 'X' for chunk #2 ...
[17:40:30.479] getGlobalsAndPackages() ...
[17:40:30.479] Searching for globals...
[17:40:30.479] 
[17:40:30.479] Searching for globals ... DONE
[17:40:30.479] - globals: [0] <none>
[17:40:30.479] getGlobalsAndPackages() ... DONE
[17:40:30.479]    + additional globals found: [n=0] 
[17:40:30.479]    + additional namespaces needed: [n=0] 
[17:40:30.479]  - Finding globals in 'X' for chunk #2 ... DONE
[17:40:30.480]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[17:40:30.480]  - seeds: [3] <seeds>
[17:40:30.480] getGlobalsAndPackages() ...
[17:40:30.480] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.480] Resolving globals: FALSE
[17:40:30.480] Tweak future expression to call with '...' arguments ...
[17:40:30.480] {
[17:40:30.480]     do.call(function(...) {
[17:40:30.480]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.480]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.480]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.480]             on.exit(options(oopts), add = TRUE)
[17:40:30.480]         }
[17:40:30.480]         {
[17:40:30.480]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.480]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.480]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.480]                   envir = globalenv(), inherits = FALSE)
[17:40:30.480]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.480]             })
[17:40:30.480]         }
[17:40:30.480]     }, args = future.call.arguments)
[17:40:30.480] }
[17:40:30.481] Tweak future expression to call with '...' arguments ... DONE
[17:40:30.481] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.481] 
[17:40:30.481] getGlobalsAndPackages() ... DONE
[17:40:30.481] run() for ‘Future’ ...
[17:40:30.481] - state: ‘created’
[17:40:30.482] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:40:30.497] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.497] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:40:30.497]   - Field: ‘node’
[17:40:30.497]   - Field: ‘label’
[17:40:30.497]   - Field: ‘local’
[17:40:30.497]   - Field: ‘owner’
[17:40:30.497]   - Field: ‘envir’
[17:40:30.498]   - Field: ‘workers’
[17:40:30.498]   - Field: ‘packages’
[17:40:30.498]   - Field: ‘gc’
[17:40:30.498]   - Field: ‘conditions’
[17:40:30.498]   - Field: ‘persistent’
[17:40:30.498]   - Field: ‘expr’
[17:40:30.498]   - Field: ‘uuid’
[17:40:30.498]   - Field: ‘seed’
[17:40:30.498]   - Field: ‘version’
[17:40:30.498]   - Field: ‘result’
[17:40:30.498]   - Field: ‘asynchronous’
[17:40:30.499]   - Field: ‘calls’
[17:40:30.499]   - Field: ‘globals’
[17:40:30.499]   - Field: ‘stdout’
[17:40:30.499]   - Field: ‘earlySignal’
[17:40:30.499]   - Field: ‘lazy’
[17:40:30.499]   - Field: ‘state’
[17:40:30.499] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:40:30.499] - Launch lazy future ...
[17:40:30.500] Packages needed by the future expression (n = 0): <none>
[17:40:30.500] Packages needed by future strategies (n = 0): <none>
[17:40:30.500] {
[17:40:30.500]     {
[17:40:30.500]         {
[17:40:30.500]             ...future.startTime <- base::Sys.time()
[17:40:30.500]             {
[17:40:30.500]                 {
[17:40:30.500]                   {
[17:40:30.500]                     {
[17:40:30.500]                       base::local({
[17:40:30.500]                         has_future <- base::requireNamespace("future", 
[17:40:30.500]                           quietly = TRUE)
[17:40:30.500]                         if (has_future) {
[17:40:30.500]                           ns <- base::getNamespace("future")
[17:40:30.500]                           version <- ns[[".package"]][["version"]]
[17:40:30.500]                           if (is.null(version)) 
[17:40:30.500]                             version <- utils::packageVersion("future")
[17:40:30.500]                         }
[17:40:30.500]                         else {
[17:40:30.500]                           version <- NULL
[17:40:30.500]                         }
[17:40:30.500]                         if (!has_future || version < "1.8.0") {
[17:40:30.500]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:30.500]                             "", base::R.version$version.string), 
[17:40:30.500]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:30.500]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:30.500]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:30.500]                               "release", "version")], collapse = " "), 
[17:40:30.500]                             hostname = base::Sys.info()[["nodename"]])
[17:40:30.500]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:30.500]                             info)
[17:40:30.500]                           info <- base::paste(info, collapse = "; ")
[17:40:30.500]                           if (!has_future) {
[17:40:30.500]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:30.500]                               info)
[17:40:30.500]                           }
[17:40:30.500]                           else {
[17:40:30.500]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:30.500]                               info, version)
[17:40:30.500]                           }
[17:40:30.500]                           base::stop(msg)
[17:40:30.500]                         }
[17:40:30.500]                       })
[17:40:30.500]                     }
[17:40:30.500]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:30.500]                     base::options(mc.cores = 1L)
[17:40:30.500]                   }
[17:40:30.500]                   options(future.plan = NULL)
[17:40:30.500]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.500]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:30.500]                 }
[17:40:30.500]                 ...future.workdir <- getwd()
[17:40:30.500]             }
[17:40:30.500]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:30.500]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:30.500]         }
[17:40:30.500]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:30.500]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[17:40:30.500]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:30.500]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:30.500]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:30.500]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:30.500]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:30.500]             base::names(...future.oldOptions))
[17:40:30.500]     }
[17:40:30.500]     if (FALSE) {
[17:40:30.500]     }
[17:40:30.500]     else {
[17:40:30.500]         if (TRUE) {
[17:40:30.500]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:30.500]                 open = "w")
[17:40:30.500]         }
[17:40:30.500]         else {
[17:40:30.500]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:30.500]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:30.500]         }
[17:40:30.500]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:30.500]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:30.500]             base::sink(type = "output", split = FALSE)
[17:40:30.500]             base::close(...future.stdout)
[17:40:30.500]         }, add = TRUE)
[17:40:30.500]     }
[17:40:30.500]     ...future.frame <- base::sys.nframe()
[17:40:30.500]     ...future.conditions <- base::list()
[17:40:30.500]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:30.500]     if (FALSE) {
[17:40:30.500]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:30.500]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:30.500]     }
[17:40:30.500]     ...future.result <- base::tryCatch({
[17:40:30.500]         base::withCallingHandlers({
[17:40:30.500]             ...future.value <- base::withVisible(base::local({
[17:40:30.500]                 ...future.makeSendCondition <- local({
[17:40:30.500]                   sendCondition <- NULL
[17:40:30.500]                   function(frame = 1L) {
[17:40:30.500]                     if (is.function(sendCondition)) 
[17:40:30.500]                       return(sendCondition)
[17:40:30.500]                     ns <- getNamespace("parallel")
[17:40:30.500]                     if (exists("sendData", mode = "function", 
[17:40:30.500]                       envir = ns)) {
[17:40:30.500]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:30.500]                         envir = ns)
[17:40:30.500]                       envir <- sys.frame(frame)
[17:40:30.500]                       master <- NULL
[17:40:30.500]                       while (!identical(envir, .GlobalEnv) && 
[17:40:30.500]                         !identical(envir, emptyenv())) {
[17:40:30.500]                         if (exists("master", mode = "list", envir = envir, 
[17:40:30.500]                           inherits = FALSE)) {
[17:40:30.500]                           master <- get("master", mode = "list", 
[17:40:30.500]                             envir = envir, inherits = FALSE)
[17:40:30.500]                           if (inherits(master, c("SOCKnode", 
[17:40:30.500]                             "SOCK0node"))) {
[17:40:30.500]                             sendCondition <<- function(cond) {
[17:40:30.500]                               data <- list(type = "VALUE", value = cond, 
[17:40:30.500]                                 success = TRUE)
[17:40:30.500]                               parallel_sendData(master, data)
[17:40:30.500]                             }
[17:40:30.500]                             return(sendCondition)
[17:40:30.500]                           }
[17:40:30.500]                         }
[17:40:30.500]                         frame <- frame + 1L
[17:40:30.500]                         envir <- sys.frame(frame)
[17:40:30.500]                       }
[17:40:30.500]                     }
[17:40:30.500]                     sendCondition <<- function(cond) NULL
[17:40:30.500]                   }
[17:40:30.500]                 })
[17:40:30.500]                 withCallingHandlers({
[17:40:30.500]                   {
[17:40:30.500]                     do.call(function(...) {
[17:40:30.500]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.500]                       if (!identical(...future.globals.maxSize.org, 
[17:40:30.500]                         ...future.globals.maxSize)) {
[17:40:30.500]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.500]                         on.exit(options(oopts), add = TRUE)
[17:40:30.500]                       }
[17:40:30.500]                       {
[17:40:30.500]                         lapply(seq_along(...future.elements_ii), 
[17:40:30.500]                           FUN = function(jj) {
[17:40:30.500]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.500]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.500]                               envir = globalenv(), inherits = FALSE)
[17:40:30.500]                             ...future.FUN(...future.X_jj, ...)
[17:40:30.500]                           })
[17:40:30.500]                       }
[17:40:30.500]                     }, args = future.call.arguments)
[17:40:30.500]                   }
[17:40:30.500]                 }, immediateCondition = function(cond) {
[17:40:30.500]                   sendCondition <- ...future.makeSendCondition()
[17:40:30.500]                   sendCondition(cond)
[17:40:30.500]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.500]                   {
[17:40:30.500]                     inherits <- base::inherits
[17:40:30.500]                     invokeRestart <- base::invokeRestart
[17:40:30.500]                     is.null <- base::is.null
[17:40:30.500]                     muffled <- FALSE
[17:40:30.500]                     if (inherits(cond, "message")) {
[17:40:30.500]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:30.500]                       if (muffled) 
[17:40:30.500]                         invokeRestart("muffleMessage")
[17:40:30.500]                     }
[17:40:30.500]                     else if (inherits(cond, "warning")) {
[17:40:30.500]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:30.500]                       if (muffled) 
[17:40:30.500]                         invokeRestart("muffleWarning")
[17:40:30.500]                     }
[17:40:30.500]                     else if (inherits(cond, "condition")) {
[17:40:30.500]                       if (!is.null(pattern)) {
[17:40:30.500]                         computeRestarts <- base::computeRestarts
[17:40:30.500]                         grepl <- base::grepl
[17:40:30.500]                         restarts <- computeRestarts(cond)
[17:40:30.500]                         for (restart in restarts) {
[17:40:30.500]                           name <- restart$name
[17:40:30.500]                           if (is.null(name)) 
[17:40:30.500]                             next
[17:40:30.500]                           if (!grepl(pattern, name)) 
[17:40:30.500]                             next
[17:40:30.500]                           invokeRestart(restart)
[17:40:30.500]                           muffled <- TRUE
[17:40:30.500]                           break
[17:40:30.500]                         }
[17:40:30.500]                       }
[17:40:30.500]                     }
[17:40:30.500]                     invisible(muffled)
[17:40:30.500]                   }
[17:40:30.500]                   muffleCondition(cond)
[17:40:30.500]                 })
[17:40:30.500]             }))
[17:40:30.500]             future::FutureResult(value = ...future.value$value, 
[17:40:30.500]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.500]                   ...future.rng), globalenv = if (FALSE) 
[17:40:30.500]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:30.500]                     ...future.globalenv.names))
[17:40:30.500]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:30.500]         }, condition = base::local({
[17:40:30.500]             c <- base::c
[17:40:30.500]             inherits <- base::inherits
[17:40:30.500]             invokeRestart <- base::invokeRestart
[17:40:30.500]             length <- base::length
[17:40:30.500]             list <- base::list
[17:40:30.500]             seq.int <- base::seq.int
[17:40:30.500]             signalCondition <- base::signalCondition
[17:40:30.500]             sys.calls <- base::sys.calls
[17:40:30.500]             `[[` <- base::`[[`
[17:40:30.500]             `+` <- base::`+`
[17:40:30.500]             `<<-` <- base::`<<-`
[17:40:30.500]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:30.500]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:30.500]                   3L)]
[17:40:30.500]             }
[17:40:30.500]             function(cond) {
[17:40:30.500]                 is_error <- inherits(cond, "error")
[17:40:30.500]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:30.500]                   NULL)
[17:40:30.500]                 if (is_error) {
[17:40:30.500]                   sessionInformation <- function() {
[17:40:30.500]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:30.500]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:30.500]                       search = base::search(), system = base::Sys.info())
[17:40:30.500]                   }
[17:40:30.500]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.500]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:30.500]                     cond$call), session = sessionInformation(), 
[17:40:30.500]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:30.500]                   signalCondition(cond)
[17:40:30.500]                 }
[17:40:30.500]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:30.500]                 "immediateCondition"))) {
[17:40:30.500]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:30.500]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.500]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:30.500]                   if (TRUE && !signal) {
[17:40:30.500]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.500]                     {
[17:40:30.500]                       inherits <- base::inherits
[17:40:30.500]                       invokeRestart <- base::invokeRestart
[17:40:30.500]                       is.null <- base::is.null
[17:40:30.500]                       muffled <- FALSE
[17:40:30.500]                       if (inherits(cond, "message")) {
[17:40:30.500]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.500]                         if (muffled) 
[17:40:30.500]                           invokeRestart("muffleMessage")
[17:40:30.500]                       }
[17:40:30.500]                       else if (inherits(cond, "warning")) {
[17:40:30.500]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.500]                         if (muffled) 
[17:40:30.500]                           invokeRestart("muffleWarning")
[17:40:30.500]                       }
[17:40:30.500]                       else if (inherits(cond, "condition")) {
[17:40:30.500]                         if (!is.null(pattern)) {
[17:40:30.500]                           computeRestarts <- base::computeRestarts
[17:40:30.500]                           grepl <- base::grepl
[17:40:30.500]                           restarts <- computeRestarts(cond)
[17:40:30.500]                           for (restart in restarts) {
[17:40:30.500]                             name <- restart$name
[17:40:30.500]                             if (is.null(name)) 
[17:40:30.500]                               next
[17:40:30.500]                             if (!grepl(pattern, name)) 
[17:40:30.500]                               next
[17:40:30.500]                             invokeRestart(restart)
[17:40:30.500]                             muffled <- TRUE
[17:40:30.500]                             break
[17:40:30.500]                           }
[17:40:30.500]                         }
[17:40:30.500]                       }
[17:40:30.500]                       invisible(muffled)
[17:40:30.500]                     }
[17:40:30.500]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.500]                   }
[17:40:30.500]                 }
[17:40:30.500]                 else {
[17:40:30.500]                   if (TRUE) {
[17:40:30.500]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.500]                     {
[17:40:30.500]                       inherits <- base::inherits
[17:40:30.500]                       invokeRestart <- base::invokeRestart
[17:40:30.500]                       is.null <- base::is.null
[17:40:30.500]                       muffled <- FALSE
[17:40:30.500]                       if (inherits(cond, "message")) {
[17:40:30.500]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.500]                         if (muffled) 
[17:40:30.500]                           invokeRestart("muffleMessage")
[17:40:30.500]                       }
[17:40:30.500]                       else if (inherits(cond, "warning")) {
[17:40:30.500]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.500]                         if (muffled) 
[17:40:30.500]                           invokeRestart("muffleWarning")
[17:40:30.500]                       }
[17:40:30.500]                       else if (inherits(cond, "condition")) {
[17:40:30.500]                         if (!is.null(pattern)) {
[17:40:30.500]                           computeRestarts <- base::computeRestarts
[17:40:30.500]                           grepl <- base::grepl
[17:40:30.500]                           restarts <- computeRestarts(cond)
[17:40:30.500]                           for (restart in restarts) {
[17:40:30.500]                             name <- restart$name
[17:40:30.500]                             if (is.null(name)) 
[17:40:30.500]                               next
[17:40:30.500]                             if (!grepl(pattern, name)) 
[17:40:30.500]                               next
[17:40:30.500]                             invokeRestart(restart)
[17:40:30.500]                             muffled <- TRUE
[17:40:30.500]                             break
[17:40:30.500]                           }
[17:40:30.500]                         }
[17:40:30.500]                       }
[17:40:30.500]                       invisible(muffled)
[17:40:30.500]                     }
[17:40:30.500]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.500]                   }
[17:40:30.500]                 }
[17:40:30.500]             }
[17:40:30.500]         }))
[17:40:30.500]     }, error = function(ex) {
[17:40:30.500]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:30.500]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.500]                 ...future.rng), started = ...future.startTime, 
[17:40:30.500]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:30.500]             version = "1.8"), class = "FutureResult")
[17:40:30.500]     }, finally = {
[17:40:30.500]         if (!identical(...future.workdir, getwd())) 
[17:40:30.500]             setwd(...future.workdir)
[17:40:30.500]         {
[17:40:30.500]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:30.500]                 ...future.oldOptions$nwarnings <- NULL
[17:40:30.500]             }
[17:40:30.500]             base::options(...future.oldOptions)
[17:40:30.500]             if (.Platform$OS.type == "windows") {
[17:40:30.500]                 old_names <- names(...future.oldEnvVars)
[17:40:30.500]                 envs <- base::Sys.getenv()
[17:40:30.500]                 names <- names(envs)
[17:40:30.500]                 common <- intersect(names, old_names)
[17:40:30.500]                 added <- setdiff(names, old_names)
[17:40:30.500]                 removed <- setdiff(old_names, names)
[17:40:30.500]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:30.500]                   envs[common]]
[17:40:30.500]                 NAMES <- toupper(changed)
[17:40:30.500]                 args <- list()
[17:40:30.500]                 for (kk in seq_along(NAMES)) {
[17:40:30.500]                   name <- changed[[kk]]
[17:40:30.500]                   NAME <- NAMES[[kk]]
[17:40:30.500]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.500]                     next
[17:40:30.500]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.500]                 }
[17:40:30.500]                 NAMES <- toupper(added)
[17:40:30.500]                 for (kk in seq_along(NAMES)) {
[17:40:30.500]                   name <- added[[kk]]
[17:40:30.500]                   NAME <- NAMES[[kk]]
[17:40:30.500]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.500]                     next
[17:40:30.500]                   args[[name]] <- ""
[17:40:30.500]                 }
[17:40:30.500]                 NAMES <- toupper(removed)
[17:40:30.500]                 for (kk in seq_along(NAMES)) {
[17:40:30.500]                   name <- removed[[kk]]
[17:40:30.500]                   NAME <- NAMES[[kk]]
[17:40:30.500]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.500]                     next
[17:40:30.500]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.500]                 }
[17:40:30.500]                 if (length(args) > 0) 
[17:40:30.500]                   base::do.call(base::Sys.setenv, args = args)
[17:40:30.500]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:30.500]             }
[17:40:30.500]             else {
[17:40:30.500]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:30.500]             }
[17:40:30.500]             {
[17:40:30.500]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:30.500]                   0L) {
[17:40:30.500]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:30.500]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:30.500]                   base::options(opts)
[17:40:30.500]                 }
[17:40:30.500]                 {
[17:40:30.500]                   {
[17:40:30.500]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:30.500]                     NULL
[17:40:30.500]                   }
[17:40:30.500]                   options(future.plan = NULL)
[17:40:30.500]                   if (is.na(NA_character_)) 
[17:40:30.500]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.500]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:30.500]                   future::plan(list(function (..., workers = availableCores(), 
[17:40:30.500]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:40:30.500]                     envir = parent.frame()) 
[17:40:30.500]                   {
[17:40:30.500]                     if (is.function(workers)) 
[17:40:30.500]                       workers <- workers()
[17:40:30.500]                     workers <- structure(as.integer(workers), 
[17:40:30.500]                       class = class(workers))
[17:40:30.500]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:40:30.500]                       workers >= 1)
[17:40:30.500]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:40:30.500]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:40:30.500]                     }
[17:40:30.500]                     future <- MultisessionFuture(..., workers = workers, 
[17:40:30.500]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:40:30.500]                       envir = envir)
[17:40:30.500]                     if (!future$lazy) 
[17:40:30.500]                       future <- run(future)
[17:40:30.500]                     invisible(future)
[17:40:30.500]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:30.500]                 }
[17:40:30.500]             }
[17:40:30.500]         }
[17:40:30.500]     })
[17:40:30.500]     if (TRUE) {
[17:40:30.500]         base::sink(type = "output", split = FALSE)
[17:40:30.500]         if (TRUE) {
[17:40:30.500]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:30.500]         }
[17:40:30.500]         else {
[17:40:30.500]             ...future.result["stdout"] <- base::list(NULL)
[17:40:30.500]         }
[17:40:30.500]         base::close(...future.stdout)
[17:40:30.500]         ...future.stdout <- NULL
[17:40:30.500]     }
[17:40:30.500]     ...future.result$conditions <- ...future.conditions
[17:40:30.500]     ...future.result$finished <- base::Sys.time()
[17:40:30.500]     ...future.result
[17:40:30.500] }
[17:40:30.503] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[17:40:30.503] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[17:40:30.503] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[17:40:30.504] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:40:30.504] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:40:30.504] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:40:30.504] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:40:30.504] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:40:30.505] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:40:30.505] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:40:30.505] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:40:30.505] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[17:40:30.506] MultisessionFuture started
[17:40:30.506] - Launch lazy future ... done
[17:40:30.506] run() for ‘MultisessionFuture’ ... done
[17:40:30.506] Created future:
[17:40:30.506] MultisessionFuture:
[17:40:30.506] Label: ‘future_replicate-2’
[17:40:30.506] Expression:
[17:40:30.506] {
[17:40:30.506]     do.call(function(...) {
[17:40:30.506]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.506]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.506]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.506]             on.exit(options(oopts), add = TRUE)
[17:40:30.506]         }
[17:40:30.506]         {
[17:40:30.506]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.506]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.506]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.506]                   envir = globalenv(), inherits = FALSE)
[17:40:30.506]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.506]             })
[17:40:30.506]         }
[17:40:30.506]     }, args = future.call.arguments)
[17:40:30.506] }
[17:40:30.506] Lazy evaluation: FALSE
[17:40:30.506] Asynchronous evaluation: TRUE
[17:40:30.506] Local evaluation: TRUE
[17:40:30.506] Environment: R_GlobalEnv
[17:40:30.506] Capture standard output: TRUE
[17:40:30.506] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:30.506] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:30.506] Packages: <none>
[17:40:30.506] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:30.506] Resolved: FALSE
[17:40:30.506] Value: <not collected>
[17:40:30.506] Conditions captured: <none>
[17:40:30.506] Early signaling: FALSE
[17:40:30.506] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:30.506] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.518] Chunk #2 of 2 ... DONE
[17:40:30.518] Launching 2 futures (chunks) ... DONE
[17:40:30.518] Resolving 2 futures (chunks) ...
[17:40:30.518] resolve() on list ...
[17:40:30.519]  recursive: 0
[17:40:30.519]  length: 2
[17:40:30.519] 
[17:40:30.519] receiveMessageFromWorker() for ClusterFuture ...
[17:40:30.519] - Validating connection of MultisessionFuture
[17:40:30.520] - received message: FutureResult
[17:40:30.520] - Received FutureResult
[17:40:30.520] - Erased future from FutureRegistry
[17:40:30.520] result() for ClusterFuture ...
[17:40:30.520] - result already collected: FutureResult
[17:40:30.520] result() for ClusterFuture ... done
[17:40:30.520] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:30.520] Future #1
[17:40:30.520] result() for ClusterFuture ...
[17:40:30.520] - result already collected: FutureResult
[17:40:30.521] result() for ClusterFuture ... done
[17:40:30.521] result() for ClusterFuture ...
[17:40:30.521] - result already collected: FutureResult
[17:40:30.521] result() for ClusterFuture ... done
[17:40:30.521] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:40:30.521] - nx: 2
[17:40:30.521] - relay: TRUE
[17:40:30.521] - stdout: TRUE
[17:40:30.521] - signal: TRUE
[17:40:30.521] - resignal: FALSE
[17:40:30.521] - force: TRUE
[17:40:30.521] - relayed: [n=2] FALSE, FALSE
[17:40:30.522] - queued futures: [n=2] FALSE, FALSE
[17:40:30.522]  - until=1
[17:40:30.522]  - relaying element #1
[17:40:30.522] result() for ClusterFuture ...
[17:40:30.522] - result already collected: FutureResult
[17:40:30.522] result() for ClusterFuture ... done
[17:40:30.522] result() for ClusterFuture ...
[17:40:30.522] - result already collected: FutureResult
[17:40:30.522] result() for ClusterFuture ... done
[17:40:30.522] result() for ClusterFuture ...
[17:40:30.523] - result already collected: FutureResult
[17:40:30.523] result() for ClusterFuture ... done
[17:40:30.523] result() for ClusterFuture ...
[17:40:30.523] - result already collected: FutureResult
[17:40:30.523] result() for ClusterFuture ... done
[17:40:30.523] - relayed: [n=2] TRUE, FALSE
[17:40:30.523] - queued futures: [n=2] TRUE, FALSE
[17:40:30.523] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:40:30.523]  length: 1 (resolved future 1)
[17:40:30.552] receiveMessageFromWorker() for ClusterFuture ...
[17:40:30.552] - Validating connection of MultisessionFuture
[17:40:30.552] - received message: FutureResult
[17:40:30.552] - Received FutureResult
[17:40:30.552] - Erased future from FutureRegistry
[17:40:30.552] result() for ClusterFuture ...
[17:40:30.552] - result already collected: FutureResult
[17:40:30.552] result() for ClusterFuture ... done
[17:40:30.553] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:30.553] Future #2
[17:40:30.553] result() for ClusterFuture ...
[17:40:30.553] - result already collected: FutureResult
[17:40:30.553] result() for ClusterFuture ... done
[17:40:30.553] result() for ClusterFuture ...
[17:40:30.553] - result already collected: FutureResult
[17:40:30.553] result() for ClusterFuture ... done
[17:40:30.553] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:40:30.553] - nx: 2
[17:40:30.553] - relay: TRUE
[17:40:30.554] - stdout: TRUE
[17:40:30.554] - signal: TRUE
[17:40:30.554] - resignal: FALSE
[17:40:30.554] - force: TRUE
[17:40:30.554] - relayed: [n=2] TRUE, FALSE
[17:40:30.554] - queued futures: [n=2] TRUE, FALSE
[17:40:30.554]  - until=2
[17:40:30.554]  - relaying element #2
[17:40:30.554] result() for ClusterFuture ...
[17:40:30.554] - result already collected: FutureResult
[17:40:30.554] result() for ClusterFuture ... done
[17:40:30.554] result() for ClusterFuture ...
[17:40:30.555] - result already collected: FutureResult
[17:40:30.555] result() for ClusterFuture ... done
[17:40:30.555] result() for ClusterFuture ...
[17:40:30.555] - result already collected: FutureResult
[17:40:30.555] result() for ClusterFuture ... done
[17:40:30.555] result() for ClusterFuture ...
[17:40:30.555] - result already collected: FutureResult
[17:40:30.555] result() for ClusterFuture ... done
[17:40:30.555] - relayed: [n=2] TRUE, TRUE
[17:40:30.555] - queued futures: [n=2] TRUE, TRUE
[17:40:30.556] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:40:30.556]  length: 0 (resolved future 2)
[17:40:30.556] Relaying remaining futures
[17:40:30.556] signalConditionsASAP(NULL, pos=0) ...
[17:40:30.556] - nx: 2
[17:40:30.556] - relay: TRUE
[17:40:30.556] - stdout: TRUE
[17:40:30.556] - signal: TRUE
[17:40:30.556] - resignal: FALSE
[17:40:30.556] - force: TRUE
[17:40:30.556] - relayed: [n=2] TRUE, TRUE
[17:40:30.556] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:40:30.557] - relayed: [n=2] TRUE, TRUE
[17:40:30.557] - queued futures: [n=2] TRUE, TRUE
[17:40:30.557] signalConditionsASAP(NULL, pos=0) ... done
[17:40:30.557] resolve() on list ... DONE
[17:40:30.557] result() for ClusterFuture ...
[17:40:30.557] - result already collected: FutureResult
[17:40:30.557] result() for ClusterFuture ... done
[17:40:30.557] result() for ClusterFuture ...
[17:40:30.557] - result already collected: FutureResult
[17:40:30.557] result() for ClusterFuture ... done
[17:40:30.558] result() for ClusterFuture ...
[17:40:30.558] - result already collected: FutureResult
[17:40:30.558] result() for ClusterFuture ... done
[17:40:30.558] result() for ClusterFuture ...
[17:40:30.558] - result already collected: FutureResult
[17:40:30.558] result() for ClusterFuture ... done
[17:40:30.558]  - Number of value chunks collected: 2
[17:40:30.558] Resolving 2 futures (chunks) ... DONE
[17:40:30.558] Reducing values from 2 chunks ...
[17:40:30.558]  - Number of values collected after concatenation: 5
[17:40:30.558]  - Number of values expected: 5
[17:40:30.558] Reducing values from 2 chunks ... DONE
[17:40:30.559] future_lapply() ... DONE
[17:40:30.559] future_lapply() ...
[17:40:30.559] Generating random seeds ...
[17:40:30.559] Generating random seed streams for 5 elements ...
[17:40:30.560] Generating random seed streams for 5 elements ... DONE
[17:40:30.560] Generating random seeds ... DONE
[17:40:30.560] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:40:30.564] Number of chunks: 2
[17:40:30.564] getGlobalsAndPackagesXApply() ...
[17:40:30.564]  - future.globals: TRUE
[17:40:30.564] getGlobalsAndPackages() ...
[17:40:30.564] Searching for globals...
[17:40:30.565] - globals found: [2] ‘FUN’, ‘sample’
[17:40:30.565] Searching for globals ... DONE
[17:40:30.565] Resolving globals: FALSE
[17:40:30.566] The total size of the 1 globals is 616 bytes (616 bytes)
[17:40:30.566] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:40:30.566] - globals: [1] ‘FUN’
[17:40:30.566] 
[17:40:30.566] getGlobalsAndPackages() ... DONE
[17:40:30.566]  - globals found/used: [n=1] ‘FUN’
[17:40:30.567]  - needed namespaces: [n=0] 
[17:40:30.567] Finding globals ... DONE
[17:40:30.567]  - use_args: TRUE
[17:40:30.567]  - Getting '...' globals ...
[17:40:30.567] resolve() on list ...
[17:40:30.567]  recursive: 0
[17:40:30.567]  length: 1
[17:40:30.567]  elements: ‘...’
[17:40:30.568]  length: 0 (resolved future 1)
[17:40:30.568] resolve() on list ... DONE
[17:40:30.568]    - '...' content: [n=0] 
[17:40:30.568] List of 1
[17:40:30.568]  $ ...: list()
[17:40:30.568]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:30.568]  - attr(*, "where")=List of 1
[17:40:30.568]   ..$ ...:<environment: 0x558a3d3fd048> 
[17:40:30.568]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:30.568]  - attr(*, "resolved")= logi TRUE
[17:40:30.568]  - attr(*, "total_size")= num NA
[17:40:30.570]  - Getting '...' globals ... DONE
[17:40:30.570] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:40:30.571] List of 2
[17:40:30.571]  $ ...future.FUN:function (...)  
[17:40:30.571]  $ ...          : list()
[17:40:30.571]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:30.571]  - attr(*, "where")=List of 2
[17:40:30.571]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:40:30.571]   ..$ ...          :<environment: 0x558a3d3fd048> 
[17:40:30.571]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:30.571]  - attr(*, "resolved")= logi FALSE
[17:40:30.571]  - attr(*, "total_size")= num 616
[17:40:30.573] Packages to be attached in all futures: [n=0] 
[17:40:30.573] getGlobalsAndPackagesXApply() ... DONE
[17:40:30.573] Number of futures (= number of chunks): 2
[17:40:30.574] Launching 2 futures (chunks) ...
[17:40:30.574] Chunk #1 of 2 ...
[17:40:30.574]  - Finding globals in 'X' for chunk #1 ...
[17:40:30.574] getGlobalsAndPackages() ...
[17:40:30.574] Searching for globals...
[17:40:30.574] 
[17:40:30.574] Searching for globals ... DONE
[17:40:30.574] - globals: [0] <none>
[17:40:30.575] getGlobalsAndPackages() ... DONE
[17:40:30.575]    + additional globals found: [n=0] 
[17:40:30.575]    + additional namespaces needed: [n=0] 
[17:40:30.575]  - Finding globals in 'X' for chunk #1 ... DONE
[17:40:30.575]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:40:30.575]  - seeds: [2] <seeds>
[17:40:30.575] getGlobalsAndPackages() ...
[17:40:30.575] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.575] Resolving globals: FALSE
[17:40:30.575] Tweak future expression to call with '...' arguments ...
[17:40:30.576] {
[17:40:30.576]     do.call(function(...) {
[17:40:30.576]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.576]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.576]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.576]             on.exit(options(oopts), add = TRUE)
[17:40:30.576]         }
[17:40:30.576]         {
[17:40:30.576]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.576]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.576]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.576]                   envir = globalenv(), inherits = FALSE)
[17:40:30.576]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.576]             })
[17:40:30.576]         }
[17:40:30.576]     }, args = future.call.arguments)
[17:40:30.576] }
[17:40:30.576] Tweak future expression to call with '...' arguments ... DONE
[17:40:30.576] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.576] 
[17:40:30.576] getGlobalsAndPackages() ... DONE
[17:40:30.577] run() for ‘Future’ ...
[17:40:30.577] - state: ‘created’
[17:40:30.577] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:40:30.591] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.592] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:40:30.592]   - Field: ‘node’
[17:40:30.592]   - Field: ‘label’
[17:40:30.592]   - Field: ‘local’
[17:40:30.592]   - Field: ‘owner’
[17:40:30.592]   - Field: ‘envir’
[17:40:30.592]   - Field: ‘workers’
[17:40:30.592]   - Field: ‘packages’
[17:40:30.592]   - Field: ‘gc’
[17:40:30.592]   - Field: ‘conditions’
[17:40:30.593]   - Field: ‘persistent’
[17:40:30.593]   - Field: ‘expr’
[17:40:30.593]   - Field: ‘uuid’
[17:40:30.593]   - Field: ‘seed’
[17:40:30.593]   - Field: ‘version’
[17:40:30.593]   - Field: ‘result’
[17:40:30.593]   - Field: ‘asynchronous’
[17:40:30.593]   - Field: ‘calls’
[17:40:30.593]   - Field: ‘globals’
[17:40:30.593]   - Field: ‘stdout’
[17:40:30.593]   - Field: ‘earlySignal’
[17:40:30.594]   - Field: ‘lazy’
[17:40:30.594]   - Field: ‘state’
[17:40:30.594] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:40:30.594] - Launch lazy future ...
[17:40:30.594] Packages needed by the future expression (n = 0): <none>
[17:40:30.594] Packages needed by future strategies (n = 0): <none>
[17:40:30.595] {
[17:40:30.595]     {
[17:40:30.595]         {
[17:40:30.595]             ...future.startTime <- base::Sys.time()
[17:40:30.595]             {
[17:40:30.595]                 {
[17:40:30.595]                   {
[17:40:30.595]                     {
[17:40:30.595]                       base::local({
[17:40:30.595]                         has_future <- base::requireNamespace("future", 
[17:40:30.595]                           quietly = TRUE)
[17:40:30.595]                         if (has_future) {
[17:40:30.595]                           ns <- base::getNamespace("future")
[17:40:30.595]                           version <- ns[[".package"]][["version"]]
[17:40:30.595]                           if (is.null(version)) 
[17:40:30.595]                             version <- utils::packageVersion("future")
[17:40:30.595]                         }
[17:40:30.595]                         else {
[17:40:30.595]                           version <- NULL
[17:40:30.595]                         }
[17:40:30.595]                         if (!has_future || version < "1.8.0") {
[17:40:30.595]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:30.595]                             "", base::R.version$version.string), 
[17:40:30.595]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:30.595]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:30.595]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:30.595]                               "release", "version")], collapse = " "), 
[17:40:30.595]                             hostname = base::Sys.info()[["nodename"]])
[17:40:30.595]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:30.595]                             info)
[17:40:30.595]                           info <- base::paste(info, collapse = "; ")
[17:40:30.595]                           if (!has_future) {
[17:40:30.595]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:30.595]                               info)
[17:40:30.595]                           }
[17:40:30.595]                           else {
[17:40:30.595]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:30.595]                               info, version)
[17:40:30.595]                           }
[17:40:30.595]                           base::stop(msg)
[17:40:30.595]                         }
[17:40:30.595]                       })
[17:40:30.595]                     }
[17:40:30.595]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:30.595]                     base::options(mc.cores = 1L)
[17:40:30.595]                   }
[17:40:30.595]                   options(future.plan = NULL)
[17:40:30.595]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.595]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:30.595]                 }
[17:40:30.595]                 ...future.workdir <- getwd()
[17:40:30.595]             }
[17:40:30.595]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:30.595]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:30.595]         }
[17:40:30.595]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:30.595]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:40:30.595]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:30.595]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:30.595]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:30.595]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:30.595]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:30.595]             base::names(...future.oldOptions))
[17:40:30.595]     }
[17:40:30.595]     if (FALSE) {
[17:40:30.595]     }
[17:40:30.595]     else {
[17:40:30.595]         if (TRUE) {
[17:40:30.595]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:30.595]                 open = "w")
[17:40:30.595]         }
[17:40:30.595]         else {
[17:40:30.595]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:30.595]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:30.595]         }
[17:40:30.595]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:30.595]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:30.595]             base::sink(type = "output", split = FALSE)
[17:40:30.595]             base::close(...future.stdout)
[17:40:30.595]         }, add = TRUE)
[17:40:30.595]     }
[17:40:30.595]     ...future.frame <- base::sys.nframe()
[17:40:30.595]     ...future.conditions <- base::list()
[17:40:30.595]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:30.595]     if (FALSE) {
[17:40:30.595]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:30.595]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:30.595]     }
[17:40:30.595]     ...future.result <- base::tryCatch({
[17:40:30.595]         base::withCallingHandlers({
[17:40:30.595]             ...future.value <- base::withVisible(base::local({
[17:40:30.595]                 ...future.makeSendCondition <- local({
[17:40:30.595]                   sendCondition <- NULL
[17:40:30.595]                   function(frame = 1L) {
[17:40:30.595]                     if (is.function(sendCondition)) 
[17:40:30.595]                       return(sendCondition)
[17:40:30.595]                     ns <- getNamespace("parallel")
[17:40:30.595]                     if (exists("sendData", mode = "function", 
[17:40:30.595]                       envir = ns)) {
[17:40:30.595]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:30.595]                         envir = ns)
[17:40:30.595]                       envir <- sys.frame(frame)
[17:40:30.595]                       master <- NULL
[17:40:30.595]                       while (!identical(envir, .GlobalEnv) && 
[17:40:30.595]                         !identical(envir, emptyenv())) {
[17:40:30.595]                         if (exists("master", mode = "list", envir = envir, 
[17:40:30.595]                           inherits = FALSE)) {
[17:40:30.595]                           master <- get("master", mode = "list", 
[17:40:30.595]                             envir = envir, inherits = FALSE)
[17:40:30.595]                           if (inherits(master, c("SOCKnode", 
[17:40:30.595]                             "SOCK0node"))) {
[17:40:30.595]                             sendCondition <<- function(cond) {
[17:40:30.595]                               data <- list(type = "VALUE", value = cond, 
[17:40:30.595]                                 success = TRUE)
[17:40:30.595]                               parallel_sendData(master, data)
[17:40:30.595]                             }
[17:40:30.595]                             return(sendCondition)
[17:40:30.595]                           }
[17:40:30.595]                         }
[17:40:30.595]                         frame <- frame + 1L
[17:40:30.595]                         envir <- sys.frame(frame)
[17:40:30.595]                       }
[17:40:30.595]                     }
[17:40:30.595]                     sendCondition <<- function(cond) NULL
[17:40:30.595]                   }
[17:40:30.595]                 })
[17:40:30.595]                 withCallingHandlers({
[17:40:30.595]                   {
[17:40:30.595]                     do.call(function(...) {
[17:40:30.595]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.595]                       if (!identical(...future.globals.maxSize.org, 
[17:40:30.595]                         ...future.globals.maxSize)) {
[17:40:30.595]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.595]                         on.exit(options(oopts), add = TRUE)
[17:40:30.595]                       }
[17:40:30.595]                       {
[17:40:30.595]                         lapply(seq_along(...future.elements_ii), 
[17:40:30.595]                           FUN = function(jj) {
[17:40:30.595]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.595]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.595]                               envir = globalenv(), inherits = FALSE)
[17:40:30.595]                             ...future.FUN(...future.X_jj, ...)
[17:40:30.595]                           })
[17:40:30.595]                       }
[17:40:30.595]                     }, args = future.call.arguments)
[17:40:30.595]                   }
[17:40:30.595]                 }, immediateCondition = function(cond) {
[17:40:30.595]                   sendCondition <- ...future.makeSendCondition()
[17:40:30.595]                   sendCondition(cond)
[17:40:30.595]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.595]                   {
[17:40:30.595]                     inherits <- base::inherits
[17:40:30.595]                     invokeRestart <- base::invokeRestart
[17:40:30.595]                     is.null <- base::is.null
[17:40:30.595]                     muffled <- FALSE
[17:40:30.595]                     if (inherits(cond, "message")) {
[17:40:30.595]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:30.595]                       if (muffled) 
[17:40:30.595]                         invokeRestart("muffleMessage")
[17:40:30.595]                     }
[17:40:30.595]                     else if (inherits(cond, "warning")) {
[17:40:30.595]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:30.595]                       if (muffled) 
[17:40:30.595]                         invokeRestart("muffleWarning")
[17:40:30.595]                     }
[17:40:30.595]                     else if (inherits(cond, "condition")) {
[17:40:30.595]                       if (!is.null(pattern)) {
[17:40:30.595]                         computeRestarts <- base::computeRestarts
[17:40:30.595]                         grepl <- base::grepl
[17:40:30.595]                         restarts <- computeRestarts(cond)
[17:40:30.595]                         for (restart in restarts) {
[17:40:30.595]                           name <- restart$name
[17:40:30.595]                           if (is.null(name)) 
[17:40:30.595]                             next
[17:40:30.595]                           if (!grepl(pattern, name)) 
[17:40:30.595]                             next
[17:40:30.595]                           invokeRestart(restart)
[17:40:30.595]                           muffled <- TRUE
[17:40:30.595]                           break
[17:40:30.595]                         }
[17:40:30.595]                       }
[17:40:30.595]                     }
[17:40:30.595]                     invisible(muffled)
[17:40:30.595]                   }
[17:40:30.595]                   muffleCondition(cond)
[17:40:30.595]                 })
[17:40:30.595]             }))
[17:40:30.595]             future::FutureResult(value = ...future.value$value, 
[17:40:30.595]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.595]                   ...future.rng), globalenv = if (FALSE) 
[17:40:30.595]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:30.595]                     ...future.globalenv.names))
[17:40:30.595]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:30.595]         }, condition = base::local({
[17:40:30.595]             c <- base::c
[17:40:30.595]             inherits <- base::inherits
[17:40:30.595]             invokeRestart <- base::invokeRestart
[17:40:30.595]             length <- base::length
[17:40:30.595]             list <- base::list
[17:40:30.595]             seq.int <- base::seq.int
[17:40:30.595]             signalCondition <- base::signalCondition
[17:40:30.595]             sys.calls <- base::sys.calls
[17:40:30.595]             `[[` <- base::`[[`
[17:40:30.595]             `+` <- base::`+`
[17:40:30.595]             `<<-` <- base::`<<-`
[17:40:30.595]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:30.595]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:30.595]                   3L)]
[17:40:30.595]             }
[17:40:30.595]             function(cond) {
[17:40:30.595]                 is_error <- inherits(cond, "error")
[17:40:30.595]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:30.595]                   NULL)
[17:40:30.595]                 if (is_error) {
[17:40:30.595]                   sessionInformation <- function() {
[17:40:30.595]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:30.595]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:30.595]                       search = base::search(), system = base::Sys.info())
[17:40:30.595]                   }
[17:40:30.595]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.595]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:30.595]                     cond$call), session = sessionInformation(), 
[17:40:30.595]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:30.595]                   signalCondition(cond)
[17:40:30.595]                 }
[17:40:30.595]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:30.595]                 "immediateCondition"))) {
[17:40:30.595]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:30.595]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.595]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:30.595]                   if (TRUE && !signal) {
[17:40:30.595]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.595]                     {
[17:40:30.595]                       inherits <- base::inherits
[17:40:30.595]                       invokeRestart <- base::invokeRestart
[17:40:30.595]                       is.null <- base::is.null
[17:40:30.595]                       muffled <- FALSE
[17:40:30.595]                       if (inherits(cond, "message")) {
[17:40:30.595]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.595]                         if (muffled) 
[17:40:30.595]                           invokeRestart("muffleMessage")
[17:40:30.595]                       }
[17:40:30.595]                       else if (inherits(cond, "warning")) {
[17:40:30.595]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.595]                         if (muffled) 
[17:40:30.595]                           invokeRestart("muffleWarning")
[17:40:30.595]                       }
[17:40:30.595]                       else if (inherits(cond, "condition")) {
[17:40:30.595]                         if (!is.null(pattern)) {
[17:40:30.595]                           computeRestarts <- base::computeRestarts
[17:40:30.595]                           grepl <- base::grepl
[17:40:30.595]                           restarts <- computeRestarts(cond)
[17:40:30.595]                           for (restart in restarts) {
[17:40:30.595]                             name <- restart$name
[17:40:30.595]                             if (is.null(name)) 
[17:40:30.595]                               next
[17:40:30.595]                             if (!grepl(pattern, name)) 
[17:40:30.595]                               next
[17:40:30.595]                             invokeRestart(restart)
[17:40:30.595]                             muffled <- TRUE
[17:40:30.595]                             break
[17:40:30.595]                           }
[17:40:30.595]                         }
[17:40:30.595]                       }
[17:40:30.595]                       invisible(muffled)
[17:40:30.595]                     }
[17:40:30.595]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.595]                   }
[17:40:30.595]                 }
[17:40:30.595]                 else {
[17:40:30.595]                   if (TRUE) {
[17:40:30.595]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.595]                     {
[17:40:30.595]                       inherits <- base::inherits
[17:40:30.595]                       invokeRestart <- base::invokeRestart
[17:40:30.595]                       is.null <- base::is.null
[17:40:30.595]                       muffled <- FALSE
[17:40:30.595]                       if (inherits(cond, "message")) {
[17:40:30.595]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.595]                         if (muffled) 
[17:40:30.595]                           invokeRestart("muffleMessage")
[17:40:30.595]                       }
[17:40:30.595]                       else if (inherits(cond, "warning")) {
[17:40:30.595]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.595]                         if (muffled) 
[17:40:30.595]                           invokeRestart("muffleWarning")
[17:40:30.595]                       }
[17:40:30.595]                       else if (inherits(cond, "condition")) {
[17:40:30.595]                         if (!is.null(pattern)) {
[17:40:30.595]                           computeRestarts <- base::computeRestarts
[17:40:30.595]                           grepl <- base::grepl
[17:40:30.595]                           restarts <- computeRestarts(cond)
[17:40:30.595]                           for (restart in restarts) {
[17:40:30.595]                             name <- restart$name
[17:40:30.595]                             if (is.null(name)) 
[17:40:30.595]                               next
[17:40:30.595]                             if (!grepl(pattern, name)) 
[17:40:30.595]                               next
[17:40:30.595]                             invokeRestart(restart)
[17:40:30.595]                             muffled <- TRUE
[17:40:30.595]                             break
[17:40:30.595]                           }
[17:40:30.595]                         }
[17:40:30.595]                       }
[17:40:30.595]                       invisible(muffled)
[17:40:30.595]                     }
[17:40:30.595]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.595]                   }
[17:40:30.595]                 }
[17:40:30.595]             }
[17:40:30.595]         }))
[17:40:30.595]     }, error = function(ex) {
[17:40:30.595]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:30.595]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.595]                 ...future.rng), started = ...future.startTime, 
[17:40:30.595]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:30.595]             version = "1.8"), class = "FutureResult")
[17:40:30.595]     }, finally = {
[17:40:30.595]         if (!identical(...future.workdir, getwd())) 
[17:40:30.595]             setwd(...future.workdir)
[17:40:30.595]         {
[17:40:30.595]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:30.595]                 ...future.oldOptions$nwarnings <- NULL
[17:40:30.595]             }
[17:40:30.595]             base::options(...future.oldOptions)
[17:40:30.595]             if (.Platform$OS.type == "windows") {
[17:40:30.595]                 old_names <- names(...future.oldEnvVars)
[17:40:30.595]                 envs <- base::Sys.getenv()
[17:40:30.595]                 names <- names(envs)
[17:40:30.595]                 common <- intersect(names, old_names)
[17:40:30.595]                 added <- setdiff(names, old_names)
[17:40:30.595]                 removed <- setdiff(old_names, names)
[17:40:30.595]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:30.595]                   envs[common]]
[17:40:30.595]                 NAMES <- toupper(changed)
[17:40:30.595]                 args <- list()
[17:40:30.595]                 for (kk in seq_along(NAMES)) {
[17:40:30.595]                   name <- changed[[kk]]
[17:40:30.595]                   NAME <- NAMES[[kk]]
[17:40:30.595]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.595]                     next
[17:40:30.595]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.595]                 }
[17:40:30.595]                 NAMES <- toupper(added)
[17:40:30.595]                 for (kk in seq_along(NAMES)) {
[17:40:30.595]                   name <- added[[kk]]
[17:40:30.595]                   NAME <- NAMES[[kk]]
[17:40:30.595]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.595]                     next
[17:40:30.595]                   args[[name]] <- ""
[17:40:30.595]                 }
[17:40:30.595]                 NAMES <- toupper(removed)
[17:40:30.595]                 for (kk in seq_along(NAMES)) {
[17:40:30.595]                   name <- removed[[kk]]
[17:40:30.595]                   NAME <- NAMES[[kk]]
[17:40:30.595]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.595]                     next
[17:40:30.595]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.595]                 }
[17:40:30.595]                 if (length(args) > 0) 
[17:40:30.595]                   base::do.call(base::Sys.setenv, args = args)
[17:40:30.595]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:30.595]             }
[17:40:30.595]             else {
[17:40:30.595]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:30.595]             }
[17:40:30.595]             {
[17:40:30.595]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:30.595]                   0L) {
[17:40:30.595]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:30.595]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:30.595]                   base::options(opts)
[17:40:30.595]                 }
[17:40:30.595]                 {
[17:40:30.595]                   {
[17:40:30.595]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:30.595]                     NULL
[17:40:30.595]                   }
[17:40:30.595]                   options(future.plan = NULL)
[17:40:30.595]                   if (is.na(NA_character_)) 
[17:40:30.595]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.595]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:30.595]                   future::plan(list(function (..., workers = availableCores(), 
[17:40:30.595]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:40:30.595]                     envir = parent.frame()) 
[17:40:30.595]                   {
[17:40:30.595]                     if (is.function(workers)) 
[17:40:30.595]                       workers <- workers()
[17:40:30.595]                     workers <- structure(as.integer(workers), 
[17:40:30.595]                       class = class(workers))
[17:40:30.595]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:40:30.595]                       workers >= 1)
[17:40:30.595]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:40:30.595]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:40:30.595]                     }
[17:40:30.595]                     future <- MultisessionFuture(..., workers = workers, 
[17:40:30.595]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:40:30.595]                       envir = envir)
[17:40:30.595]                     if (!future$lazy) 
[17:40:30.595]                       future <- run(future)
[17:40:30.595]                     invisible(future)
[17:40:30.595]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:30.595]                 }
[17:40:30.595]             }
[17:40:30.595]         }
[17:40:30.595]     })
[17:40:30.595]     if (TRUE) {
[17:40:30.595]         base::sink(type = "output", split = FALSE)
[17:40:30.595]         if (TRUE) {
[17:40:30.595]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:30.595]         }
[17:40:30.595]         else {
[17:40:30.595]             ...future.result["stdout"] <- base::list(NULL)
[17:40:30.595]         }
[17:40:30.595]         base::close(...future.stdout)
[17:40:30.595]         ...future.stdout <- NULL
[17:40:30.595]     }
[17:40:30.595]     ...future.result$conditions <- ...future.conditions
[17:40:30.595]     ...future.result$finished <- base::Sys.time()
[17:40:30.595]     ...future.result
[17:40:30.595] }
[17:40:30.598] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[17:40:30.598] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[17:40:30.598] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[17:40:30.599] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:40:30.599] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:40:30.599] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:40:30.599] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:40:30.600] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:40:30.600] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:40:30.600] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:40:30.600] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:40:30.600] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[17:40:30.601] MultisessionFuture started
[17:40:30.601] - Launch lazy future ... done
[17:40:30.601] run() for ‘MultisessionFuture’ ... done
[17:40:30.601] Created future:
[17:40:30.601] MultisessionFuture:
[17:40:30.601] Label: ‘future_replicate-1’
[17:40:30.601] Expression:
[17:40:30.601] {
[17:40:30.601]     do.call(function(...) {
[17:40:30.601]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.601]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.601]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.601]             on.exit(options(oopts), add = TRUE)
[17:40:30.601]         }
[17:40:30.601]         {
[17:40:30.601]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.601]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.601]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.601]                   envir = globalenv(), inherits = FALSE)
[17:40:30.601]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.601]             })
[17:40:30.601]         }
[17:40:30.601]     }, args = future.call.arguments)
[17:40:30.601] }
[17:40:30.601] Lazy evaluation: FALSE
[17:40:30.601] Asynchronous evaluation: TRUE
[17:40:30.601] Local evaluation: TRUE
[17:40:30.601] Environment: R_GlobalEnv
[17:40:30.601] Capture standard output: TRUE
[17:40:30.601] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:30.601] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:30.601] Packages: <none>
[17:40:30.601] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:30.601] Resolved: FALSE
[17:40:30.601] Value: <not collected>
[17:40:30.601] Conditions captured: <none>
[17:40:30.601] Early signaling: FALSE
[17:40:30.601] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:30.601] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.613] Chunk #1 of 2 ... DONE
[17:40:30.613] Chunk #2 of 2 ...
[17:40:30.613]  - Finding globals in 'X' for chunk #2 ...
[17:40:30.614] getGlobalsAndPackages() ...
[17:40:30.614] Searching for globals...
[17:40:30.614] 
[17:40:30.614] Searching for globals ... DONE
[17:40:30.614] - globals: [0] <none>
[17:40:30.614] getGlobalsAndPackages() ... DONE
[17:40:30.614]    + additional globals found: [n=0] 
[17:40:30.614]    + additional namespaces needed: [n=0] 
[17:40:30.615]  - Finding globals in 'X' for chunk #2 ... DONE
[17:40:30.615]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[17:40:30.615]  - seeds: [3] <seeds>
[17:40:30.615] getGlobalsAndPackages() ...
[17:40:30.615] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.615] Resolving globals: FALSE
[17:40:30.615] Tweak future expression to call with '...' arguments ...
[17:40:30.615] {
[17:40:30.615]     do.call(function(...) {
[17:40:30.615]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.615]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.615]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.615]             on.exit(options(oopts), add = TRUE)
[17:40:30.615]         }
[17:40:30.615]         {
[17:40:30.615]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.615]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.615]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.615]                   envir = globalenv(), inherits = FALSE)
[17:40:30.615]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.615]             })
[17:40:30.615]         }
[17:40:30.615]     }, args = future.call.arguments)
[17:40:30.615] }
[17:40:30.616] Tweak future expression to call with '...' arguments ... DONE
[17:40:30.616] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.616] 
[17:40:30.618] getGlobalsAndPackages() ... DONE
[17:40:30.618] run() for ‘Future’ ...
[17:40:30.619] - state: ‘created’
[17:40:30.619] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:40:30.633] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.633] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:40:30.633]   - Field: ‘node’
[17:40:30.633]   - Field: ‘label’
[17:40:30.634]   - Field: ‘local’
[17:40:30.634]   - Field: ‘owner’
[17:40:30.634]   - Field: ‘envir’
[17:40:30.634]   - Field: ‘workers’
[17:40:30.634]   - Field: ‘packages’
[17:40:30.634]   - Field: ‘gc’
[17:40:30.634]   - Field: ‘conditions’
[17:40:30.634]   - Field: ‘persistent’
[17:40:30.634]   - Field: ‘expr’
[17:40:30.634]   - Field: ‘uuid’
[17:40:30.635]   - Field: ‘seed’
[17:40:30.635]   - Field: ‘version’
[17:40:30.635]   - Field: ‘result’
[17:40:30.635]   - Field: ‘asynchronous’
[17:40:30.635]   - Field: ‘calls’
[17:40:30.635]   - Field: ‘globals’
[17:40:30.635]   - Field: ‘stdout’
[17:40:30.635]   - Field: ‘earlySignal’
[17:40:30.635]   - Field: ‘lazy’
[17:40:30.635]   - Field: ‘state’
[17:40:30.635] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:40:30.636] - Launch lazy future ...
[17:40:30.636] Packages needed by the future expression (n = 0): <none>
[17:40:30.636] Packages needed by future strategies (n = 0): <none>
[17:40:30.636] {
[17:40:30.636]     {
[17:40:30.636]         {
[17:40:30.636]             ...future.startTime <- base::Sys.time()
[17:40:30.636]             {
[17:40:30.636]                 {
[17:40:30.636]                   {
[17:40:30.636]                     {
[17:40:30.636]                       base::local({
[17:40:30.636]                         has_future <- base::requireNamespace("future", 
[17:40:30.636]                           quietly = TRUE)
[17:40:30.636]                         if (has_future) {
[17:40:30.636]                           ns <- base::getNamespace("future")
[17:40:30.636]                           version <- ns[[".package"]][["version"]]
[17:40:30.636]                           if (is.null(version)) 
[17:40:30.636]                             version <- utils::packageVersion("future")
[17:40:30.636]                         }
[17:40:30.636]                         else {
[17:40:30.636]                           version <- NULL
[17:40:30.636]                         }
[17:40:30.636]                         if (!has_future || version < "1.8.0") {
[17:40:30.636]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:30.636]                             "", base::R.version$version.string), 
[17:40:30.636]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:30.636]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:30.636]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:30.636]                               "release", "version")], collapse = " "), 
[17:40:30.636]                             hostname = base::Sys.info()[["nodename"]])
[17:40:30.636]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:30.636]                             info)
[17:40:30.636]                           info <- base::paste(info, collapse = "; ")
[17:40:30.636]                           if (!has_future) {
[17:40:30.636]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:30.636]                               info)
[17:40:30.636]                           }
[17:40:30.636]                           else {
[17:40:30.636]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:30.636]                               info, version)
[17:40:30.636]                           }
[17:40:30.636]                           base::stop(msg)
[17:40:30.636]                         }
[17:40:30.636]                       })
[17:40:30.636]                     }
[17:40:30.636]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:30.636]                     base::options(mc.cores = 1L)
[17:40:30.636]                   }
[17:40:30.636]                   options(future.plan = NULL)
[17:40:30.636]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.636]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:30.636]                 }
[17:40:30.636]                 ...future.workdir <- getwd()
[17:40:30.636]             }
[17:40:30.636]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:30.636]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:30.636]         }
[17:40:30.636]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:30.636]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[17:40:30.636]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:30.636]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:30.636]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:30.636]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:30.636]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:30.636]             base::names(...future.oldOptions))
[17:40:30.636]     }
[17:40:30.636]     if (FALSE) {
[17:40:30.636]     }
[17:40:30.636]     else {
[17:40:30.636]         if (TRUE) {
[17:40:30.636]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:30.636]                 open = "w")
[17:40:30.636]         }
[17:40:30.636]         else {
[17:40:30.636]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:30.636]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:30.636]         }
[17:40:30.636]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:30.636]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:30.636]             base::sink(type = "output", split = FALSE)
[17:40:30.636]             base::close(...future.stdout)
[17:40:30.636]         }, add = TRUE)
[17:40:30.636]     }
[17:40:30.636]     ...future.frame <- base::sys.nframe()
[17:40:30.636]     ...future.conditions <- base::list()
[17:40:30.636]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:30.636]     if (FALSE) {
[17:40:30.636]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:30.636]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:30.636]     }
[17:40:30.636]     ...future.result <- base::tryCatch({
[17:40:30.636]         base::withCallingHandlers({
[17:40:30.636]             ...future.value <- base::withVisible(base::local({
[17:40:30.636]                 ...future.makeSendCondition <- local({
[17:40:30.636]                   sendCondition <- NULL
[17:40:30.636]                   function(frame = 1L) {
[17:40:30.636]                     if (is.function(sendCondition)) 
[17:40:30.636]                       return(sendCondition)
[17:40:30.636]                     ns <- getNamespace("parallel")
[17:40:30.636]                     if (exists("sendData", mode = "function", 
[17:40:30.636]                       envir = ns)) {
[17:40:30.636]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:30.636]                         envir = ns)
[17:40:30.636]                       envir <- sys.frame(frame)
[17:40:30.636]                       master <- NULL
[17:40:30.636]                       while (!identical(envir, .GlobalEnv) && 
[17:40:30.636]                         !identical(envir, emptyenv())) {
[17:40:30.636]                         if (exists("master", mode = "list", envir = envir, 
[17:40:30.636]                           inherits = FALSE)) {
[17:40:30.636]                           master <- get("master", mode = "list", 
[17:40:30.636]                             envir = envir, inherits = FALSE)
[17:40:30.636]                           if (inherits(master, c("SOCKnode", 
[17:40:30.636]                             "SOCK0node"))) {
[17:40:30.636]                             sendCondition <<- function(cond) {
[17:40:30.636]                               data <- list(type = "VALUE", value = cond, 
[17:40:30.636]                                 success = TRUE)
[17:40:30.636]                               parallel_sendData(master, data)
[17:40:30.636]                             }
[17:40:30.636]                             return(sendCondition)
[17:40:30.636]                           }
[17:40:30.636]                         }
[17:40:30.636]                         frame <- frame + 1L
[17:40:30.636]                         envir <- sys.frame(frame)
[17:40:30.636]                       }
[17:40:30.636]                     }
[17:40:30.636]                     sendCondition <<- function(cond) NULL
[17:40:30.636]                   }
[17:40:30.636]                 })
[17:40:30.636]                 withCallingHandlers({
[17:40:30.636]                   {
[17:40:30.636]                     do.call(function(...) {
[17:40:30.636]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.636]                       if (!identical(...future.globals.maxSize.org, 
[17:40:30.636]                         ...future.globals.maxSize)) {
[17:40:30.636]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.636]                         on.exit(options(oopts), add = TRUE)
[17:40:30.636]                       }
[17:40:30.636]                       {
[17:40:30.636]                         lapply(seq_along(...future.elements_ii), 
[17:40:30.636]                           FUN = function(jj) {
[17:40:30.636]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.636]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.636]                               envir = globalenv(), inherits = FALSE)
[17:40:30.636]                             ...future.FUN(...future.X_jj, ...)
[17:40:30.636]                           })
[17:40:30.636]                       }
[17:40:30.636]                     }, args = future.call.arguments)
[17:40:30.636]                   }
[17:40:30.636]                 }, immediateCondition = function(cond) {
[17:40:30.636]                   sendCondition <- ...future.makeSendCondition()
[17:40:30.636]                   sendCondition(cond)
[17:40:30.636]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.636]                   {
[17:40:30.636]                     inherits <- base::inherits
[17:40:30.636]                     invokeRestart <- base::invokeRestart
[17:40:30.636]                     is.null <- base::is.null
[17:40:30.636]                     muffled <- FALSE
[17:40:30.636]                     if (inherits(cond, "message")) {
[17:40:30.636]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:30.636]                       if (muffled) 
[17:40:30.636]                         invokeRestart("muffleMessage")
[17:40:30.636]                     }
[17:40:30.636]                     else if (inherits(cond, "warning")) {
[17:40:30.636]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:30.636]                       if (muffled) 
[17:40:30.636]                         invokeRestart("muffleWarning")
[17:40:30.636]                     }
[17:40:30.636]                     else if (inherits(cond, "condition")) {
[17:40:30.636]                       if (!is.null(pattern)) {
[17:40:30.636]                         computeRestarts <- base::computeRestarts
[17:40:30.636]                         grepl <- base::grepl
[17:40:30.636]                         restarts <- computeRestarts(cond)
[17:40:30.636]                         for (restart in restarts) {
[17:40:30.636]                           name <- restart$name
[17:40:30.636]                           if (is.null(name)) 
[17:40:30.636]                             next
[17:40:30.636]                           if (!grepl(pattern, name)) 
[17:40:30.636]                             next
[17:40:30.636]                           invokeRestart(restart)
[17:40:30.636]                           muffled <- TRUE
[17:40:30.636]                           break
[17:40:30.636]                         }
[17:40:30.636]                       }
[17:40:30.636]                     }
[17:40:30.636]                     invisible(muffled)
[17:40:30.636]                   }
[17:40:30.636]                   muffleCondition(cond)
[17:40:30.636]                 })
[17:40:30.636]             }))
[17:40:30.636]             future::FutureResult(value = ...future.value$value, 
[17:40:30.636]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.636]                   ...future.rng), globalenv = if (FALSE) 
[17:40:30.636]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:30.636]                     ...future.globalenv.names))
[17:40:30.636]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:30.636]         }, condition = base::local({
[17:40:30.636]             c <- base::c
[17:40:30.636]             inherits <- base::inherits
[17:40:30.636]             invokeRestart <- base::invokeRestart
[17:40:30.636]             length <- base::length
[17:40:30.636]             list <- base::list
[17:40:30.636]             seq.int <- base::seq.int
[17:40:30.636]             signalCondition <- base::signalCondition
[17:40:30.636]             sys.calls <- base::sys.calls
[17:40:30.636]             `[[` <- base::`[[`
[17:40:30.636]             `+` <- base::`+`
[17:40:30.636]             `<<-` <- base::`<<-`
[17:40:30.636]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:30.636]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:30.636]                   3L)]
[17:40:30.636]             }
[17:40:30.636]             function(cond) {
[17:40:30.636]                 is_error <- inherits(cond, "error")
[17:40:30.636]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:30.636]                   NULL)
[17:40:30.636]                 if (is_error) {
[17:40:30.636]                   sessionInformation <- function() {
[17:40:30.636]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:30.636]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:30.636]                       search = base::search(), system = base::Sys.info())
[17:40:30.636]                   }
[17:40:30.636]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.636]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:30.636]                     cond$call), session = sessionInformation(), 
[17:40:30.636]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:30.636]                   signalCondition(cond)
[17:40:30.636]                 }
[17:40:30.636]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:30.636]                 "immediateCondition"))) {
[17:40:30.636]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:30.636]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.636]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:30.636]                   if (TRUE && !signal) {
[17:40:30.636]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.636]                     {
[17:40:30.636]                       inherits <- base::inherits
[17:40:30.636]                       invokeRestart <- base::invokeRestart
[17:40:30.636]                       is.null <- base::is.null
[17:40:30.636]                       muffled <- FALSE
[17:40:30.636]                       if (inherits(cond, "message")) {
[17:40:30.636]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.636]                         if (muffled) 
[17:40:30.636]                           invokeRestart("muffleMessage")
[17:40:30.636]                       }
[17:40:30.636]                       else if (inherits(cond, "warning")) {
[17:40:30.636]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.636]                         if (muffled) 
[17:40:30.636]                           invokeRestart("muffleWarning")
[17:40:30.636]                       }
[17:40:30.636]                       else if (inherits(cond, "condition")) {
[17:40:30.636]                         if (!is.null(pattern)) {
[17:40:30.636]                           computeRestarts <- base::computeRestarts
[17:40:30.636]                           grepl <- base::grepl
[17:40:30.636]                           restarts <- computeRestarts(cond)
[17:40:30.636]                           for (restart in restarts) {
[17:40:30.636]                             name <- restart$name
[17:40:30.636]                             if (is.null(name)) 
[17:40:30.636]                               next
[17:40:30.636]                             if (!grepl(pattern, name)) 
[17:40:30.636]                               next
[17:40:30.636]                             invokeRestart(restart)
[17:40:30.636]                             muffled <- TRUE
[17:40:30.636]                             break
[17:40:30.636]                           }
[17:40:30.636]                         }
[17:40:30.636]                       }
[17:40:30.636]                       invisible(muffled)
[17:40:30.636]                     }
[17:40:30.636]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.636]                   }
[17:40:30.636]                 }
[17:40:30.636]                 else {
[17:40:30.636]                   if (TRUE) {
[17:40:30.636]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.636]                     {
[17:40:30.636]                       inherits <- base::inherits
[17:40:30.636]                       invokeRestart <- base::invokeRestart
[17:40:30.636]                       is.null <- base::is.null
[17:40:30.636]                       muffled <- FALSE
[17:40:30.636]                       if (inherits(cond, "message")) {
[17:40:30.636]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.636]                         if (muffled) 
[17:40:30.636]                           invokeRestart("muffleMessage")
[17:40:30.636]                       }
[17:40:30.636]                       else if (inherits(cond, "warning")) {
[17:40:30.636]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.636]                         if (muffled) 
[17:40:30.636]                           invokeRestart("muffleWarning")
[17:40:30.636]                       }
[17:40:30.636]                       else if (inherits(cond, "condition")) {
[17:40:30.636]                         if (!is.null(pattern)) {
[17:40:30.636]                           computeRestarts <- base::computeRestarts
[17:40:30.636]                           grepl <- base::grepl
[17:40:30.636]                           restarts <- computeRestarts(cond)
[17:40:30.636]                           for (restart in restarts) {
[17:40:30.636]                             name <- restart$name
[17:40:30.636]                             if (is.null(name)) 
[17:40:30.636]                               next
[17:40:30.636]                             if (!grepl(pattern, name)) 
[17:40:30.636]                               next
[17:40:30.636]                             invokeRestart(restart)
[17:40:30.636]                             muffled <- TRUE
[17:40:30.636]                             break
[17:40:30.636]                           }
[17:40:30.636]                         }
[17:40:30.636]                       }
[17:40:30.636]                       invisible(muffled)
[17:40:30.636]                     }
[17:40:30.636]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.636]                   }
[17:40:30.636]                 }
[17:40:30.636]             }
[17:40:30.636]         }))
[17:40:30.636]     }, error = function(ex) {
[17:40:30.636]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:30.636]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.636]                 ...future.rng), started = ...future.startTime, 
[17:40:30.636]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:30.636]             version = "1.8"), class = "FutureResult")
[17:40:30.636]     }, finally = {
[17:40:30.636]         if (!identical(...future.workdir, getwd())) 
[17:40:30.636]             setwd(...future.workdir)
[17:40:30.636]         {
[17:40:30.636]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:30.636]                 ...future.oldOptions$nwarnings <- NULL
[17:40:30.636]             }
[17:40:30.636]             base::options(...future.oldOptions)
[17:40:30.636]             if (.Platform$OS.type == "windows") {
[17:40:30.636]                 old_names <- names(...future.oldEnvVars)
[17:40:30.636]                 envs <- base::Sys.getenv()
[17:40:30.636]                 names <- names(envs)
[17:40:30.636]                 common <- intersect(names, old_names)
[17:40:30.636]                 added <- setdiff(names, old_names)
[17:40:30.636]                 removed <- setdiff(old_names, names)
[17:40:30.636]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:30.636]                   envs[common]]
[17:40:30.636]                 NAMES <- toupper(changed)
[17:40:30.636]                 args <- list()
[17:40:30.636]                 for (kk in seq_along(NAMES)) {
[17:40:30.636]                   name <- changed[[kk]]
[17:40:30.636]                   NAME <- NAMES[[kk]]
[17:40:30.636]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.636]                     next
[17:40:30.636]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.636]                 }
[17:40:30.636]                 NAMES <- toupper(added)
[17:40:30.636]                 for (kk in seq_along(NAMES)) {
[17:40:30.636]                   name <- added[[kk]]
[17:40:30.636]                   NAME <- NAMES[[kk]]
[17:40:30.636]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.636]                     next
[17:40:30.636]                   args[[name]] <- ""
[17:40:30.636]                 }
[17:40:30.636]                 NAMES <- toupper(removed)
[17:40:30.636]                 for (kk in seq_along(NAMES)) {
[17:40:30.636]                   name <- removed[[kk]]
[17:40:30.636]                   NAME <- NAMES[[kk]]
[17:40:30.636]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.636]                     next
[17:40:30.636]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.636]                 }
[17:40:30.636]                 if (length(args) > 0) 
[17:40:30.636]                   base::do.call(base::Sys.setenv, args = args)
[17:40:30.636]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:30.636]             }
[17:40:30.636]             else {
[17:40:30.636]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:30.636]             }
[17:40:30.636]             {
[17:40:30.636]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:30.636]                   0L) {
[17:40:30.636]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:30.636]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:30.636]                   base::options(opts)
[17:40:30.636]                 }
[17:40:30.636]                 {
[17:40:30.636]                   {
[17:40:30.636]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:30.636]                     NULL
[17:40:30.636]                   }
[17:40:30.636]                   options(future.plan = NULL)
[17:40:30.636]                   if (is.na(NA_character_)) 
[17:40:30.636]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.636]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:30.636]                   future::plan(list(function (..., workers = availableCores(), 
[17:40:30.636]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:40:30.636]                     envir = parent.frame()) 
[17:40:30.636]                   {
[17:40:30.636]                     if (is.function(workers)) 
[17:40:30.636]                       workers <- workers()
[17:40:30.636]                     workers <- structure(as.integer(workers), 
[17:40:30.636]                       class = class(workers))
[17:40:30.636]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:40:30.636]                       workers >= 1)
[17:40:30.636]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:40:30.636]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:40:30.636]                     }
[17:40:30.636]                     future <- MultisessionFuture(..., workers = workers, 
[17:40:30.636]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:40:30.636]                       envir = envir)
[17:40:30.636]                     if (!future$lazy) 
[17:40:30.636]                       future <- run(future)
[17:40:30.636]                     invisible(future)
[17:40:30.636]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:30.636]                 }
[17:40:30.636]             }
[17:40:30.636]         }
[17:40:30.636]     })
[17:40:30.636]     if (TRUE) {
[17:40:30.636]         base::sink(type = "output", split = FALSE)
[17:40:30.636]         if (TRUE) {
[17:40:30.636]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:30.636]         }
[17:40:30.636]         else {
[17:40:30.636]             ...future.result["stdout"] <- base::list(NULL)
[17:40:30.636]         }
[17:40:30.636]         base::close(...future.stdout)
[17:40:30.636]         ...future.stdout <- NULL
[17:40:30.636]     }
[17:40:30.636]     ...future.result$conditions <- ...future.conditions
[17:40:30.636]     ...future.result$finished <- base::Sys.time()
[17:40:30.636]     ...future.result
[17:40:30.636] }
[17:40:30.639] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[17:40:30.639] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[17:40:30.640] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[17:40:30.640] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:40:30.640] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:40:30.641] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:40:30.641] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:40:30.641] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:40:30.641] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:40:30.642] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:40:30.642] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:40:30.642] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[17:40:30.643] MultisessionFuture started
[17:40:30.643] - Launch lazy future ... done
[17:40:30.643] run() for ‘MultisessionFuture’ ... done
[17:40:30.643] Created future:
[17:40:30.643] MultisessionFuture:
[17:40:30.643] Label: ‘future_replicate-2’
[17:40:30.643] Expression:
[17:40:30.643] {
[17:40:30.643]     do.call(function(...) {
[17:40:30.643]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.643]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.643]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.643]             on.exit(options(oopts), add = TRUE)
[17:40:30.643]         }
[17:40:30.643]         {
[17:40:30.643]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.643]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.643]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.643]                   envir = globalenv(), inherits = FALSE)
[17:40:30.643]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.643]             })
[17:40:30.643]         }
[17:40:30.643]     }, args = future.call.arguments)
[17:40:30.643] }
[17:40:30.643] Lazy evaluation: FALSE
[17:40:30.643] Asynchronous evaluation: TRUE
[17:40:30.643] Local evaluation: TRUE
[17:40:30.643] Environment: R_GlobalEnv
[17:40:30.643] Capture standard output: TRUE
[17:40:30.643] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:30.643] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:30.643] Packages: <none>
[17:40:30.643] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:30.643] Resolved: FALSE
[17:40:30.643] Value: <not collected>
[17:40:30.643] Conditions captured: <none>
[17:40:30.643] Early signaling: FALSE
[17:40:30.643] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:30.643] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.655] Chunk #2 of 2 ... DONE
[17:40:30.655] Launching 2 futures (chunks) ... DONE
[17:40:30.655] Resolving 2 futures (chunks) ...
[17:40:30.655] resolve() on list ...
[17:40:30.655]  recursive: 0
[17:40:30.655]  length: 2
[17:40:30.655] 
[17:40:30.656] receiveMessageFromWorker() for ClusterFuture ...
[17:40:30.656] - Validating connection of MultisessionFuture
[17:40:30.656] - received message: FutureResult
[17:40:30.656] - Received FutureResult
[17:40:30.656] - Erased future from FutureRegistry
[17:40:30.656] result() for ClusterFuture ...
[17:40:30.656] - result already collected: FutureResult
[17:40:30.657] result() for ClusterFuture ... done
[17:40:30.657] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:30.657] Future #1
[17:40:30.657] result() for ClusterFuture ...
[17:40:30.657] - result already collected: FutureResult
[17:40:30.657] result() for ClusterFuture ... done
[17:40:30.657] result() for ClusterFuture ...
[17:40:30.657] - result already collected: FutureResult
[17:40:30.657] result() for ClusterFuture ... done
[17:40:30.657] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:40:30.657] - nx: 2
[17:40:30.657] - relay: TRUE
[17:40:30.658] - stdout: TRUE
[17:40:30.658] - signal: TRUE
[17:40:30.658] - resignal: FALSE
[17:40:30.658] - force: TRUE
[17:40:30.658] - relayed: [n=2] FALSE, FALSE
[17:40:30.658] - queued futures: [n=2] FALSE, FALSE
[17:40:30.658]  - until=1
[17:40:30.658]  - relaying element #1
[17:40:30.658] result() for ClusterFuture ...
[17:40:30.658] - result already collected: FutureResult
[17:40:30.658] result() for ClusterFuture ... done
[17:40:30.659] result() for ClusterFuture ...
[17:40:30.659] - result already collected: FutureResult
[17:40:30.659] result() for ClusterFuture ... done
[17:40:30.659] result() for ClusterFuture ...
[17:40:30.659] - result already collected: FutureResult
[17:40:30.659] result() for ClusterFuture ... done
[17:40:30.659] result() for ClusterFuture ...
[17:40:30.659] - result already collected: FutureResult
[17:40:30.659] result() for ClusterFuture ... done
[17:40:30.659] - relayed: [n=2] TRUE, FALSE
[17:40:30.659] - queued futures: [n=2] TRUE, FALSE
[17:40:30.660] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:40:30.660]  length: 1 (resolved future 1)
[17:40:30.687] receiveMessageFromWorker() for ClusterFuture ...
[17:40:30.688] - Validating connection of MultisessionFuture
[17:40:30.688] - received message: FutureResult
[17:40:30.688] - Received FutureResult
[17:40:30.688] - Erased future from FutureRegistry
[17:40:30.688] result() for ClusterFuture ...
[17:40:30.688] - result already collected: FutureResult
[17:40:30.688] result() for ClusterFuture ... done
[17:40:30.688] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:30.688] Future #2
[17:40:30.689] result() for ClusterFuture ...
[17:40:30.689] - result already collected: FutureResult
[17:40:30.689] result() for ClusterFuture ... done
[17:40:30.689] result() for ClusterFuture ...
[17:40:30.689] - result already collected: FutureResult
[17:40:30.689] result() for ClusterFuture ... done
[17:40:30.689] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:40:30.689] - nx: 2
[17:40:30.689] - relay: TRUE
[17:40:30.689] - stdout: TRUE
[17:40:30.689] - signal: TRUE
[17:40:30.690] - resignal: FALSE
[17:40:30.690] - force: TRUE
[17:40:30.690] - relayed: [n=2] TRUE, FALSE
[17:40:30.690] - queued futures: [n=2] TRUE, FALSE
[17:40:30.690]  - until=2
[17:40:30.690]  - relaying element #2
[17:40:30.690] result() for ClusterFuture ...
[17:40:30.690] - result already collected: FutureResult
[17:40:30.690] result() for ClusterFuture ... done
[17:40:30.690] result() for ClusterFuture ...
[17:40:30.690] - result already collected: FutureResult
[17:40:30.691] result() for ClusterFuture ... done
[17:40:30.691] result() for ClusterFuture ...
[17:40:30.691] - result already collected: FutureResult
[17:40:30.691] result() for ClusterFuture ... done
[17:40:30.691] result() for ClusterFuture ...
[17:40:30.691] - result already collected: FutureResult
[17:40:30.691] result() for ClusterFuture ... done
[17:40:30.691] - relayed: [n=2] TRUE, TRUE
[17:40:30.691] - queued futures: [n=2] TRUE, TRUE
[17:40:30.691] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:40:30.692]  length: 0 (resolved future 2)
[17:40:30.692] Relaying remaining futures
[17:40:30.692] signalConditionsASAP(NULL, pos=0) ...
[17:40:30.692] - nx: 2
[17:40:30.692] - relay: TRUE
[17:40:30.692] - stdout: TRUE
[17:40:30.692] - signal: TRUE
[17:40:30.692] - resignal: FALSE
[17:40:30.692] - force: TRUE
[17:40:30.692] - relayed: [n=2] TRUE, TRUE
[17:40:30.692] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:40:30.693] - relayed: [n=2] TRUE, TRUE
[17:40:30.693] - queued futures: [n=2] TRUE, TRUE
[17:40:30.693] signalConditionsASAP(NULL, pos=0) ... done
[17:40:30.693] resolve() on list ... DONE
[17:40:30.693] result() for ClusterFuture ...
[17:40:30.693] - result already collected: FutureResult
[17:40:30.693] result() for ClusterFuture ... done
[17:40:30.693] result() for ClusterFuture ...
[17:40:30.693] - result already collected: FutureResult
[17:40:30.693] result() for ClusterFuture ... done
[17:40:30.693] result() for ClusterFuture ...
[17:40:30.694] - result already collected: FutureResult
[17:40:30.694] result() for ClusterFuture ... done
[17:40:30.694] result() for ClusterFuture ...
[17:40:30.694] - result already collected: FutureResult
[17:40:30.694] result() for ClusterFuture ... done
[17:40:30.694]  - Number of value chunks collected: 2
[17:40:30.694] Resolving 2 futures (chunks) ... DONE
[17:40:30.694] Reducing values from 2 chunks ...
[17:40:30.694]  - Number of values collected after concatenation: 5
[17:40:30.694]  - Number of values expected: 5
[17:40:30.694] Reducing values from 2 chunks ... DONE
[17:40:30.695] future_lapply() ... DONE
[17:40:30.695] future_lapply() ...
[17:40:30.695] Generating random seeds ...
[17:40:30.695] Generating random seed streams for 5 elements ...
[17:40:30.695] Generating random seed streams for 5 elements ... DONE
[17:40:30.696] Generating random seeds ... DONE
[17:40:30.696] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:40:30.700] Number of chunks: 2
[17:40:30.700] getGlobalsAndPackagesXApply() ...
[17:40:30.700]  - future.globals: TRUE
[17:40:30.700] getGlobalsAndPackages() ...
[17:40:30.700] Searching for globals...
[17:40:30.701] - globals found: [2] ‘FUN’, ‘sample’
[17:40:30.701] Searching for globals ... DONE
[17:40:30.701] Resolving globals: FALSE
[17:40:30.702] The total size of the 1 globals is 616 bytes (616 bytes)
[17:40:30.702] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:40:30.702] - globals: [1] ‘FUN’
[17:40:30.702] 
[17:40:30.702] getGlobalsAndPackages() ... DONE
[17:40:30.702]  - globals found/used: [n=1] ‘FUN’
[17:40:30.703]  - needed namespaces: [n=0] 
[17:40:30.703] Finding globals ... DONE
[17:40:30.703]  - use_args: TRUE
[17:40:30.703]  - Getting '...' globals ...
[17:40:30.703] resolve() on list ...
[17:40:30.703]  recursive: 0
[17:40:30.703]  length: 1
[17:40:30.703]  elements: ‘...’
[17:40:30.704]  length: 0 (resolved future 1)
[17:40:30.704] resolve() on list ... DONE
[17:40:30.704]    - '...' content: [n=0] 
[17:40:30.704] List of 1
[17:40:30.704]  $ ...: list()
[17:40:30.704]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:30.704]  - attr(*, "where")=List of 1
[17:40:30.704]   ..$ ...:<environment: 0x558a3a51aab0> 
[17:40:30.704]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:30.704]  - attr(*, "resolved")= logi TRUE
[17:40:30.704]  - attr(*, "total_size")= num NA
[17:40:30.707]  - Getting '...' globals ... DONE
[17:40:30.707] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:40:30.707] List of 2
[17:40:30.707]  $ ...future.FUN:function (...)  
[17:40:30.707]  $ ...          : list()
[17:40:30.707]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:30.707]  - attr(*, "where")=List of 2
[17:40:30.707]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:40:30.707]   ..$ ...          :<environment: 0x558a3a51aab0> 
[17:40:30.707]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:30.707]  - attr(*, "resolved")= logi FALSE
[17:40:30.707]  - attr(*, "total_size")= num 616
[17:40:30.709] Packages to be attached in all futures: [n=0] 
[17:40:30.710] getGlobalsAndPackagesXApply() ... DONE
[17:40:30.710] Number of futures (= number of chunks): 2
[17:40:30.710] Launching 2 futures (chunks) ...
[17:40:30.710] Chunk #1 of 2 ...
[17:40:30.710]  - Finding globals in 'X' for chunk #1 ...
[17:40:30.710] getGlobalsAndPackages() ...
[17:40:30.710] Searching for globals...
[17:40:30.710] 
[17:40:30.711] Searching for globals ... DONE
[17:40:30.711] - globals: [0] <none>
[17:40:30.711] getGlobalsAndPackages() ... DONE
[17:40:30.711]    + additional globals found: [n=0] 
[17:40:30.711]    + additional namespaces needed: [n=0] 
[17:40:30.711]  - Finding globals in 'X' for chunk #1 ... DONE
[17:40:30.711]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:40:30.711]  - seeds: [2] <seeds>
[17:40:30.711] getGlobalsAndPackages() ...
[17:40:30.712] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.712] Resolving globals: FALSE
[17:40:30.712] Tweak future expression to call with '...' arguments ...
[17:40:30.712] {
[17:40:30.712]     do.call(function(...) {
[17:40:30.712]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.712]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.712]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.712]             on.exit(options(oopts), add = TRUE)
[17:40:30.712]         }
[17:40:30.712]         {
[17:40:30.712]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.712]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.712]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.712]                   envir = globalenv(), inherits = FALSE)
[17:40:30.712]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.712]             })
[17:40:30.712]         }
[17:40:30.712]     }, args = future.call.arguments)
[17:40:30.712] }
[17:40:30.712] Tweak future expression to call with '...' arguments ... DONE
[17:40:30.712] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.713] 
[17:40:30.713] getGlobalsAndPackages() ... DONE
[17:40:30.713] run() for ‘Future’ ...
[17:40:30.713] - state: ‘created’
[17:40:30.713] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:40:30.727] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.727] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:40:30.728]   - Field: ‘node’
[17:40:30.728]   - Field: ‘label’
[17:40:30.728]   - Field: ‘local’
[17:40:30.728]   - Field: ‘owner’
[17:40:30.728]   - Field: ‘envir’
[17:40:30.728]   - Field: ‘workers’
[17:40:30.728]   - Field: ‘packages’
[17:40:30.728]   - Field: ‘gc’
[17:40:30.728]   - Field: ‘conditions’
[17:40:30.728]   - Field: ‘persistent’
[17:40:30.729]   - Field: ‘expr’
[17:40:30.729]   - Field: ‘uuid’
[17:40:30.729]   - Field: ‘seed’
[17:40:30.729]   - Field: ‘version’
[17:40:30.729]   - Field: ‘result’
[17:40:30.729]   - Field: ‘asynchronous’
[17:40:30.729]   - Field: ‘calls’
[17:40:30.729]   - Field: ‘globals’
[17:40:30.729]   - Field: ‘stdout’
[17:40:30.729]   - Field: ‘earlySignal’
[17:40:30.729]   - Field: ‘lazy’
[17:40:30.730]   - Field: ‘state’
[17:40:30.730] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:40:30.730] - Launch lazy future ...
[17:40:30.730] Packages needed by the future expression (n = 0): <none>
[17:40:30.730] Packages needed by future strategies (n = 0): <none>
[17:40:30.731] {
[17:40:30.731]     {
[17:40:30.731]         {
[17:40:30.731]             ...future.startTime <- base::Sys.time()
[17:40:30.731]             {
[17:40:30.731]                 {
[17:40:30.731]                   {
[17:40:30.731]                     {
[17:40:30.731]                       base::local({
[17:40:30.731]                         has_future <- base::requireNamespace("future", 
[17:40:30.731]                           quietly = TRUE)
[17:40:30.731]                         if (has_future) {
[17:40:30.731]                           ns <- base::getNamespace("future")
[17:40:30.731]                           version <- ns[[".package"]][["version"]]
[17:40:30.731]                           if (is.null(version)) 
[17:40:30.731]                             version <- utils::packageVersion("future")
[17:40:30.731]                         }
[17:40:30.731]                         else {
[17:40:30.731]                           version <- NULL
[17:40:30.731]                         }
[17:40:30.731]                         if (!has_future || version < "1.8.0") {
[17:40:30.731]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:30.731]                             "", base::R.version$version.string), 
[17:40:30.731]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:30.731]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:30.731]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:30.731]                               "release", "version")], collapse = " "), 
[17:40:30.731]                             hostname = base::Sys.info()[["nodename"]])
[17:40:30.731]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:30.731]                             info)
[17:40:30.731]                           info <- base::paste(info, collapse = "; ")
[17:40:30.731]                           if (!has_future) {
[17:40:30.731]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:30.731]                               info)
[17:40:30.731]                           }
[17:40:30.731]                           else {
[17:40:30.731]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:30.731]                               info, version)
[17:40:30.731]                           }
[17:40:30.731]                           base::stop(msg)
[17:40:30.731]                         }
[17:40:30.731]                       })
[17:40:30.731]                     }
[17:40:30.731]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:30.731]                     base::options(mc.cores = 1L)
[17:40:30.731]                   }
[17:40:30.731]                   options(future.plan = NULL)
[17:40:30.731]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.731]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:30.731]                 }
[17:40:30.731]                 ...future.workdir <- getwd()
[17:40:30.731]             }
[17:40:30.731]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:30.731]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:30.731]         }
[17:40:30.731]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:30.731]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:40:30.731]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:30.731]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:30.731]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:30.731]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:30.731]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:30.731]             base::names(...future.oldOptions))
[17:40:30.731]     }
[17:40:30.731]     if (FALSE) {
[17:40:30.731]     }
[17:40:30.731]     else {
[17:40:30.731]         if (TRUE) {
[17:40:30.731]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:30.731]                 open = "w")
[17:40:30.731]         }
[17:40:30.731]         else {
[17:40:30.731]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:30.731]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:30.731]         }
[17:40:30.731]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:30.731]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:30.731]             base::sink(type = "output", split = FALSE)
[17:40:30.731]             base::close(...future.stdout)
[17:40:30.731]         }, add = TRUE)
[17:40:30.731]     }
[17:40:30.731]     ...future.frame <- base::sys.nframe()
[17:40:30.731]     ...future.conditions <- base::list()
[17:40:30.731]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:30.731]     if (FALSE) {
[17:40:30.731]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:30.731]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:30.731]     }
[17:40:30.731]     ...future.result <- base::tryCatch({
[17:40:30.731]         base::withCallingHandlers({
[17:40:30.731]             ...future.value <- base::withVisible(base::local({
[17:40:30.731]                 ...future.makeSendCondition <- local({
[17:40:30.731]                   sendCondition <- NULL
[17:40:30.731]                   function(frame = 1L) {
[17:40:30.731]                     if (is.function(sendCondition)) 
[17:40:30.731]                       return(sendCondition)
[17:40:30.731]                     ns <- getNamespace("parallel")
[17:40:30.731]                     if (exists("sendData", mode = "function", 
[17:40:30.731]                       envir = ns)) {
[17:40:30.731]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:30.731]                         envir = ns)
[17:40:30.731]                       envir <- sys.frame(frame)
[17:40:30.731]                       master <- NULL
[17:40:30.731]                       while (!identical(envir, .GlobalEnv) && 
[17:40:30.731]                         !identical(envir, emptyenv())) {
[17:40:30.731]                         if (exists("master", mode = "list", envir = envir, 
[17:40:30.731]                           inherits = FALSE)) {
[17:40:30.731]                           master <- get("master", mode = "list", 
[17:40:30.731]                             envir = envir, inherits = FALSE)
[17:40:30.731]                           if (inherits(master, c("SOCKnode", 
[17:40:30.731]                             "SOCK0node"))) {
[17:40:30.731]                             sendCondition <<- function(cond) {
[17:40:30.731]                               data <- list(type = "VALUE", value = cond, 
[17:40:30.731]                                 success = TRUE)
[17:40:30.731]                               parallel_sendData(master, data)
[17:40:30.731]                             }
[17:40:30.731]                             return(sendCondition)
[17:40:30.731]                           }
[17:40:30.731]                         }
[17:40:30.731]                         frame <- frame + 1L
[17:40:30.731]                         envir <- sys.frame(frame)
[17:40:30.731]                       }
[17:40:30.731]                     }
[17:40:30.731]                     sendCondition <<- function(cond) NULL
[17:40:30.731]                   }
[17:40:30.731]                 })
[17:40:30.731]                 withCallingHandlers({
[17:40:30.731]                   {
[17:40:30.731]                     do.call(function(...) {
[17:40:30.731]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.731]                       if (!identical(...future.globals.maxSize.org, 
[17:40:30.731]                         ...future.globals.maxSize)) {
[17:40:30.731]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.731]                         on.exit(options(oopts), add = TRUE)
[17:40:30.731]                       }
[17:40:30.731]                       {
[17:40:30.731]                         lapply(seq_along(...future.elements_ii), 
[17:40:30.731]                           FUN = function(jj) {
[17:40:30.731]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.731]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.731]                               envir = globalenv(), inherits = FALSE)
[17:40:30.731]                             ...future.FUN(...future.X_jj, ...)
[17:40:30.731]                           })
[17:40:30.731]                       }
[17:40:30.731]                     }, args = future.call.arguments)
[17:40:30.731]                   }
[17:40:30.731]                 }, immediateCondition = function(cond) {
[17:40:30.731]                   sendCondition <- ...future.makeSendCondition()
[17:40:30.731]                   sendCondition(cond)
[17:40:30.731]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.731]                   {
[17:40:30.731]                     inherits <- base::inherits
[17:40:30.731]                     invokeRestart <- base::invokeRestart
[17:40:30.731]                     is.null <- base::is.null
[17:40:30.731]                     muffled <- FALSE
[17:40:30.731]                     if (inherits(cond, "message")) {
[17:40:30.731]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:30.731]                       if (muffled) 
[17:40:30.731]                         invokeRestart("muffleMessage")
[17:40:30.731]                     }
[17:40:30.731]                     else if (inherits(cond, "warning")) {
[17:40:30.731]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:30.731]                       if (muffled) 
[17:40:30.731]                         invokeRestart("muffleWarning")
[17:40:30.731]                     }
[17:40:30.731]                     else if (inherits(cond, "condition")) {
[17:40:30.731]                       if (!is.null(pattern)) {
[17:40:30.731]                         computeRestarts <- base::computeRestarts
[17:40:30.731]                         grepl <- base::grepl
[17:40:30.731]                         restarts <- computeRestarts(cond)
[17:40:30.731]                         for (restart in restarts) {
[17:40:30.731]                           name <- restart$name
[17:40:30.731]                           if (is.null(name)) 
[17:40:30.731]                             next
[17:40:30.731]                           if (!grepl(pattern, name)) 
[17:40:30.731]                             next
[17:40:30.731]                           invokeRestart(restart)
[17:40:30.731]                           muffled <- TRUE
[17:40:30.731]                           break
[17:40:30.731]                         }
[17:40:30.731]                       }
[17:40:30.731]                     }
[17:40:30.731]                     invisible(muffled)
[17:40:30.731]                   }
[17:40:30.731]                   muffleCondition(cond)
[17:40:30.731]                 })
[17:40:30.731]             }))
[17:40:30.731]             future::FutureResult(value = ...future.value$value, 
[17:40:30.731]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.731]                   ...future.rng), globalenv = if (FALSE) 
[17:40:30.731]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:30.731]                     ...future.globalenv.names))
[17:40:30.731]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:30.731]         }, condition = base::local({
[17:40:30.731]             c <- base::c
[17:40:30.731]             inherits <- base::inherits
[17:40:30.731]             invokeRestart <- base::invokeRestart
[17:40:30.731]             length <- base::length
[17:40:30.731]             list <- base::list
[17:40:30.731]             seq.int <- base::seq.int
[17:40:30.731]             signalCondition <- base::signalCondition
[17:40:30.731]             sys.calls <- base::sys.calls
[17:40:30.731]             `[[` <- base::`[[`
[17:40:30.731]             `+` <- base::`+`
[17:40:30.731]             `<<-` <- base::`<<-`
[17:40:30.731]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:30.731]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:30.731]                   3L)]
[17:40:30.731]             }
[17:40:30.731]             function(cond) {
[17:40:30.731]                 is_error <- inherits(cond, "error")
[17:40:30.731]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:30.731]                   NULL)
[17:40:30.731]                 if (is_error) {
[17:40:30.731]                   sessionInformation <- function() {
[17:40:30.731]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:30.731]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:30.731]                       search = base::search(), system = base::Sys.info())
[17:40:30.731]                   }
[17:40:30.731]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.731]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:30.731]                     cond$call), session = sessionInformation(), 
[17:40:30.731]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:30.731]                   signalCondition(cond)
[17:40:30.731]                 }
[17:40:30.731]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:30.731]                 "immediateCondition"))) {
[17:40:30.731]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:30.731]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.731]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:30.731]                   if (TRUE && !signal) {
[17:40:30.731]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.731]                     {
[17:40:30.731]                       inherits <- base::inherits
[17:40:30.731]                       invokeRestart <- base::invokeRestart
[17:40:30.731]                       is.null <- base::is.null
[17:40:30.731]                       muffled <- FALSE
[17:40:30.731]                       if (inherits(cond, "message")) {
[17:40:30.731]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.731]                         if (muffled) 
[17:40:30.731]                           invokeRestart("muffleMessage")
[17:40:30.731]                       }
[17:40:30.731]                       else if (inherits(cond, "warning")) {
[17:40:30.731]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.731]                         if (muffled) 
[17:40:30.731]                           invokeRestart("muffleWarning")
[17:40:30.731]                       }
[17:40:30.731]                       else if (inherits(cond, "condition")) {
[17:40:30.731]                         if (!is.null(pattern)) {
[17:40:30.731]                           computeRestarts <- base::computeRestarts
[17:40:30.731]                           grepl <- base::grepl
[17:40:30.731]                           restarts <- computeRestarts(cond)
[17:40:30.731]                           for (restart in restarts) {
[17:40:30.731]                             name <- restart$name
[17:40:30.731]                             if (is.null(name)) 
[17:40:30.731]                               next
[17:40:30.731]                             if (!grepl(pattern, name)) 
[17:40:30.731]                               next
[17:40:30.731]                             invokeRestart(restart)
[17:40:30.731]                             muffled <- TRUE
[17:40:30.731]                             break
[17:40:30.731]                           }
[17:40:30.731]                         }
[17:40:30.731]                       }
[17:40:30.731]                       invisible(muffled)
[17:40:30.731]                     }
[17:40:30.731]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.731]                   }
[17:40:30.731]                 }
[17:40:30.731]                 else {
[17:40:30.731]                   if (TRUE) {
[17:40:30.731]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.731]                     {
[17:40:30.731]                       inherits <- base::inherits
[17:40:30.731]                       invokeRestart <- base::invokeRestart
[17:40:30.731]                       is.null <- base::is.null
[17:40:30.731]                       muffled <- FALSE
[17:40:30.731]                       if (inherits(cond, "message")) {
[17:40:30.731]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.731]                         if (muffled) 
[17:40:30.731]                           invokeRestart("muffleMessage")
[17:40:30.731]                       }
[17:40:30.731]                       else if (inherits(cond, "warning")) {
[17:40:30.731]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.731]                         if (muffled) 
[17:40:30.731]                           invokeRestart("muffleWarning")
[17:40:30.731]                       }
[17:40:30.731]                       else if (inherits(cond, "condition")) {
[17:40:30.731]                         if (!is.null(pattern)) {
[17:40:30.731]                           computeRestarts <- base::computeRestarts
[17:40:30.731]                           grepl <- base::grepl
[17:40:30.731]                           restarts <- computeRestarts(cond)
[17:40:30.731]                           for (restart in restarts) {
[17:40:30.731]                             name <- restart$name
[17:40:30.731]                             if (is.null(name)) 
[17:40:30.731]                               next
[17:40:30.731]                             if (!grepl(pattern, name)) 
[17:40:30.731]                               next
[17:40:30.731]                             invokeRestart(restart)
[17:40:30.731]                             muffled <- TRUE
[17:40:30.731]                             break
[17:40:30.731]                           }
[17:40:30.731]                         }
[17:40:30.731]                       }
[17:40:30.731]                       invisible(muffled)
[17:40:30.731]                     }
[17:40:30.731]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.731]                   }
[17:40:30.731]                 }
[17:40:30.731]             }
[17:40:30.731]         }))
[17:40:30.731]     }, error = function(ex) {
[17:40:30.731]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:30.731]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.731]                 ...future.rng), started = ...future.startTime, 
[17:40:30.731]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:30.731]             version = "1.8"), class = "FutureResult")
[17:40:30.731]     }, finally = {
[17:40:30.731]         if (!identical(...future.workdir, getwd())) 
[17:40:30.731]             setwd(...future.workdir)
[17:40:30.731]         {
[17:40:30.731]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:30.731]                 ...future.oldOptions$nwarnings <- NULL
[17:40:30.731]             }
[17:40:30.731]             base::options(...future.oldOptions)
[17:40:30.731]             if (.Platform$OS.type == "windows") {
[17:40:30.731]                 old_names <- names(...future.oldEnvVars)
[17:40:30.731]                 envs <- base::Sys.getenv()
[17:40:30.731]                 names <- names(envs)
[17:40:30.731]                 common <- intersect(names, old_names)
[17:40:30.731]                 added <- setdiff(names, old_names)
[17:40:30.731]                 removed <- setdiff(old_names, names)
[17:40:30.731]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:30.731]                   envs[common]]
[17:40:30.731]                 NAMES <- toupper(changed)
[17:40:30.731]                 args <- list()
[17:40:30.731]                 for (kk in seq_along(NAMES)) {
[17:40:30.731]                   name <- changed[[kk]]
[17:40:30.731]                   NAME <- NAMES[[kk]]
[17:40:30.731]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.731]                     next
[17:40:30.731]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.731]                 }
[17:40:30.731]                 NAMES <- toupper(added)
[17:40:30.731]                 for (kk in seq_along(NAMES)) {
[17:40:30.731]                   name <- added[[kk]]
[17:40:30.731]                   NAME <- NAMES[[kk]]
[17:40:30.731]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.731]                     next
[17:40:30.731]                   args[[name]] <- ""
[17:40:30.731]                 }
[17:40:30.731]                 NAMES <- toupper(removed)
[17:40:30.731]                 for (kk in seq_along(NAMES)) {
[17:40:30.731]                   name <- removed[[kk]]
[17:40:30.731]                   NAME <- NAMES[[kk]]
[17:40:30.731]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.731]                     next
[17:40:30.731]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.731]                 }
[17:40:30.731]                 if (length(args) > 0) 
[17:40:30.731]                   base::do.call(base::Sys.setenv, args = args)
[17:40:30.731]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:30.731]             }
[17:40:30.731]             else {
[17:40:30.731]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:30.731]             }
[17:40:30.731]             {
[17:40:30.731]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:30.731]                   0L) {
[17:40:30.731]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:30.731]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:30.731]                   base::options(opts)
[17:40:30.731]                 }
[17:40:30.731]                 {
[17:40:30.731]                   {
[17:40:30.731]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:30.731]                     NULL
[17:40:30.731]                   }
[17:40:30.731]                   options(future.plan = NULL)
[17:40:30.731]                   if (is.na(NA_character_)) 
[17:40:30.731]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.731]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:30.731]                   future::plan(list(function (..., workers = availableCores(), 
[17:40:30.731]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:40:30.731]                     envir = parent.frame()) 
[17:40:30.731]                   {
[17:40:30.731]                     if (is.function(workers)) 
[17:40:30.731]                       workers <- workers()
[17:40:30.731]                     workers <- structure(as.integer(workers), 
[17:40:30.731]                       class = class(workers))
[17:40:30.731]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:40:30.731]                       workers >= 1)
[17:40:30.731]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:40:30.731]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:40:30.731]                     }
[17:40:30.731]                     future <- MultisessionFuture(..., workers = workers, 
[17:40:30.731]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:40:30.731]                       envir = envir)
[17:40:30.731]                     if (!future$lazy) 
[17:40:30.731]                       future <- run(future)
[17:40:30.731]                     invisible(future)
[17:40:30.731]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:30.731]                 }
[17:40:30.731]             }
[17:40:30.731]         }
[17:40:30.731]     })
[17:40:30.731]     if (TRUE) {
[17:40:30.731]         base::sink(type = "output", split = FALSE)
[17:40:30.731]         if (TRUE) {
[17:40:30.731]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:30.731]         }
[17:40:30.731]         else {
[17:40:30.731]             ...future.result["stdout"] <- base::list(NULL)
[17:40:30.731]         }
[17:40:30.731]         base::close(...future.stdout)
[17:40:30.731]         ...future.stdout <- NULL
[17:40:30.731]     }
[17:40:30.731]     ...future.result$conditions <- ...future.conditions
[17:40:30.731]     ...future.result$finished <- base::Sys.time()
[17:40:30.731]     ...future.result
[17:40:30.731] }
[17:40:30.733] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[17:40:30.734] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[17:40:30.734] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[17:40:30.734] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:40:30.734] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:40:30.735] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:40:30.735] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:40:30.735] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:40:30.735] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:40:30.735] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:40:30.736] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:40:30.736] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[17:40:30.736] MultisessionFuture started
[17:40:30.736] - Launch lazy future ... done
[17:40:30.737] run() for ‘MultisessionFuture’ ... done
[17:40:30.737] Created future:
[17:40:30.737] MultisessionFuture:
[17:40:30.737] Label: ‘future_replicate-1’
[17:40:30.737] Expression:
[17:40:30.737] {
[17:40:30.737]     do.call(function(...) {
[17:40:30.737]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.737]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.737]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.737]             on.exit(options(oopts), add = TRUE)
[17:40:30.737]         }
[17:40:30.737]         {
[17:40:30.737]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.737]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.737]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.737]                   envir = globalenv(), inherits = FALSE)
[17:40:30.737]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.737]             })
[17:40:30.737]         }
[17:40:30.737]     }, args = future.call.arguments)
[17:40:30.737] }
[17:40:30.737] Lazy evaluation: FALSE
[17:40:30.737] Asynchronous evaluation: TRUE
[17:40:30.737] Local evaluation: TRUE
[17:40:30.737] Environment: R_GlobalEnv
[17:40:30.737] Capture standard output: TRUE
[17:40:30.737] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:30.737] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:30.737] Packages: <none>
[17:40:30.737] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:30.737] Resolved: FALSE
[17:40:30.737] Value: <not collected>
[17:40:30.737] Conditions captured: <none>
[17:40:30.737] Early signaling: FALSE
[17:40:30.737] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:30.737] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.748] Chunk #1 of 2 ... DONE
[17:40:30.749] Chunk #2 of 2 ...
[17:40:30.749]  - Finding globals in 'X' for chunk #2 ...
[17:40:30.749] getGlobalsAndPackages() ...
[17:40:30.749] Searching for globals...
[17:40:30.749] 
[17:40:30.749] Searching for globals ... DONE
[17:40:30.749] - globals: [0] <none>
[17:40:30.749] getGlobalsAndPackages() ... DONE
[17:40:30.750]    + additional globals found: [n=0] 
[17:40:30.750]    + additional namespaces needed: [n=0] 
[17:40:30.750]  - Finding globals in 'X' for chunk #2 ... DONE
[17:40:30.750]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[17:40:30.750]  - seeds: [3] <seeds>
[17:40:30.750] getGlobalsAndPackages() ...
[17:40:30.750] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.750] Resolving globals: FALSE
[17:40:30.750] Tweak future expression to call with '...' arguments ...
[17:40:30.751] {
[17:40:30.751]     do.call(function(...) {
[17:40:30.751]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.751]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.751]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.751]             on.exit(options(oopts), add = TRUE)
[17:40:30.751]         }
[17:40:30.751]         {
[17:40:30.751]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.751]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.751]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.751]                   envir = globalenv(), inherits = FALSE)
[17:40:30.751]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.751]             })
[17:40:30.751]         }
[17:40:30.751]     }, args = future.call.arguments)
[17:40:30.751] }
[17:40:30.751] Tweak future expression to call with '...' arguments ... DONE
[17:40:30.751] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.751] 
[17:40:30.751] getGlobalsAndPackages() ... DONE
[17:40:30.752] run() for ‘Future’ ...
[17:40:30.752] - state: ‘created’
[17:40:30.752] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:40:30.767] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.767] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:40:30.767]   - Field: ‘node’
[17:40:30.767]   - Field: ‘label’
[17:40:30.767]   - Field: ‘local’
[17:40:30.767]   - Field: ‘owner’
[17:40:30.767]   - Field: ‘envir’
[17:40:30.767]   - Field: ‘workers’
[17:40:30.768]   - Field: ‘packages’
[17:40:30.768]   - Field: ‘gc’
[17:40:30.768]   - Field: ‘conditions’
[17:40:30.768]   - Field: ‘persistent’
[17:40:30.768]   - Field: ‘expr’
[17:40:30.768]   - Field: ‘uuid’
[17:40:30.768]   - Field: ‘seed’
[17:40:30.768]   - Field: ‘version’
[17:40:30.768]   - Field: ‘result’
[17:40:30.768]   - Field: ‘asynchronous’
[17:40:30.768]   - Field: ‘calls’
[17:40:30.769]   - Field: ‘globals’
[17:40:30.769]   - Field: ‘stdout’
[17:40:30.769]   - Field: ‘earlySignal’
[17:40:30.769]   - Field: ‘lazy’
[17:40:30.769]   - Field: ‘state’
[17:40:30.769] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:40:30.769] - Launch lazy future ...
[17:40:30.769] Packages needed by the future expression (n = 0): <none>
[17:40:30.770] Packages needed by future strategies (n = 0): <none>
[17:40:30.770] {
[17:40:30.770]     {
[17:40:30.770]         {
[17:40:30.770]             ...future.startTime <- base::Sys.time()
[17:40:30.770]             {
[17:40:30.770]                 {
[17:40:30.770]                   {
[17:40:30.770]                     {
[17:40:30.770]                       base::local({
[17:40:30.770]                         has_future <- base::requireNamespace("future", 
[17:40:30.770]                           quietly = TRUE)
[17:40:30.770]                         if (has_future) {
[17:40:30.770]                           ns <- base::getNamespace("future")
[17:40:30.770]                           version <- ns[[".package"]][["version"]]
[17:40:30.770]                           if (is.null(version)) 
[17:40:30.770]                             version <- utils::packageVersion("future")
[17:40:30.770]                         }
[17:40:30.770]                         else {
[17:40:30.770]                           version <- NULL
[17:40:30.770]                         }
[17:40:30.770]                         if (!has_future || version < "1.8.0") {
[17:40:30.770]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:30.770]                             "", base::R.version$version.string), 
[17:40:30.770]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:30.770]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:30.770]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:30.770]                               "release", "version")], collapse = " "), 
[17:40:30.770]                             hostname = base::Sys.info()[["nodename"]])
[17:40:30.770]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:30.770]                             info)
[17:40:30.770]                           info <- base::paste(info, collapse = "; ")
[17:40:30.770]                           if (!has_future) {
[17:40:30.770]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:30.770]                               info)
[17:40:30.770]                           }
[17:40:30.770]                           else {
[17:40:30.770]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:30.770]                               info, version)
[17:40:30.770]                           }
[17:40:30.770]                           base::stop(msg)
[17:40:30.770]                         }
[17:40:30.770]                       })
[17:40:30.770]                     }
[17:40:30.770]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:30.770]                     base::options(mc.cores = 1L)
[17:40:30.770]                   }
[17:40:30.770]                   options(future.plan = NULL)
[17:40:30.770]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.770]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:30.770]                 }
[17:40:30.770]                 ...future.workdir <- getwd()
[17:40:30.770]             }
[17:40:30.770]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:30.770]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:30.770]         }
[17:40:30.770]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:30.770]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[17:40:30.770]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:30.770]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:30.770]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:30.770]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:30.770]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:30.770]             base::names(...future.oldOptions))
[17:40:30.770]     }
[17:40:30.770]     if (FALSE) {
[17:40:30.770]     }
[17:40:30.770]     else {
[17:40:30.770]         if (TRUE) {
[17:40:30.770]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:30.770]                 open = "w")
[17:40:30.770]         }
[17:40:30.770]         else {
[17:40:30.770]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:30.770]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:30.770]         }
[17:40:30.770]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:30.770]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:30.770]             base::sink(type = "output", split = FALSE)
[17:40:30.770]             base::close(...future.stdout)
[17:40:30.770]         }, add = TRUE)
[17:40:30.770]     }
[17:40:30.770]     ...future.frame <- base::sys.nframe()
[17:40:30.770]     ...future.conditions <- base::list()
[17:40:30.770]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:30.770]     if (FALSE) {
[17:40:30.770]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:30.770]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:30.770]     }
[17:40:30.770]     ...future.result <- base::tryCatch({
[17:40:30.770]         base::withCallingHandlers({
[17:40:30.770]             ...future.value <- base::withVisible(base::local({
[17:40:30.770]                 ...future.makeSendCondition <- local({
[17:40:30.770]                   sendCondition <- NULL
[17:40:30.770]                   function(frame = 1L) {
[17:40:30.770]                     if (is.function(sendCondition)) 
[17:40:30.770]                       return(sendCondition)
[17:40:30.770]                     ns <- getNamespace("parallel")
[17:40:30.770]                     if (exists("sendData", mode = "function", 
[17:40:30.770]                       envir = ns)) {
[17:40:30.770]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:30.770]                         envir = ns)
[17:40:30.770]                       envir <- sys.frame(frame)
[17:40:30.770]                       master <- NULL
[17:40:30.770]                       while (!identical(envir, .GlobalEnv) && 
[17:40:30.770]                         !identical(envir, emptyenv())) {
[17:40:30.770]                         if (exists("master", mode = "list", envir = envir, 
[17:40:30.770]                           inherits = FALSE)) {
[17:40:30.770]                           master <- get("master", mode = "list", 
[17:40:30.770]                             envir = envir, inherits = FALSE)
[17:40:30.770]                           if (inherits(master, c("SOCKnode", 
[17:40:30.770]                             "SOCK0node"))) {
[17:40:30.770]                             sendCondition <<- function(cond) {
[17:40:30.770]                               data <- list(type = "VALUE", value = cond, 
[17:40:30.770]                                 success = TRUE)
[17:40:30.770]                               parallel_sendData(master, data)
[17:40:30.770]                             }
[17:40:30.770]                             return(sendCondition)
[17:40:30.770]                           }
[17:40:30.770]                         }
[17:40:30.770]                         frame <- frame + 1L
[17:40:30.770]                         envir <- sys.frame(frame)
[17:40:30.770]                       }
[17:40:30.770]                     }
[17:40:30.770]                     sendCondition <<- function(cond) NULL
[17:40:30.770]                   }
[17:40:30.770]                 })
[17:40:30.770]                 withCallingHandlers({
[17:40:30.770]                   {
[17:40:30.770]                     do.call(function(...) {
[17:40:30.770]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.770]                       if (!identical(...future.globals.maxSize.org, 
[17:40:30.770]                         ...future.globals.maxSize)) {
[17:40:30.770]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.770]                         on.exit(options(oopts), add = TRUE)
[17:40:30.770]                       }
[17:40:30.770]                       {
[17:40:30.770]                         lapply(seq_along(...future.elements_ii), 
[17:40:30.770]                           FUN = function(jj) {
[17:40:30.770]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.770]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.770]                               envir = globalenv(), inherits = FALSE)
[17:40:30.770]                             ...future.FUN(...future.X_jj, ...)
[17:40:30.770]                           })
[17:40:30.770]                       }
[17:40:30.770]                     }, args = future.call.arguments)
[17:40:30.770]                   }
[17:40:30.770]                 }, immediateCondition = function(cond) {
[17:40:30.770]                   sendCondition <- ...future.makeSendCondition()
[17:40:30.770]                   sendCondition(cond)
[17:40:30.770]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.770]                   {
[17:40:30.770]                     inherits <- base::inherits
[17:40:30.770]                     invokeRestart <- base::invokeRestart
[17:40:30.770]                     is.null <- base::is.null
[17:40:30.770]                     muffled <- FALSE
[17:40:30.770]                     if (inherits(cond, "message")) {
[17:40:30.770]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:30.770]                       if (muffled) 
[17:40:30.770]                         invokeRestart("muffleMessage")
[17:40:30.770]                     }
[17:40:30.770]                     else if (inherits(cond, "warning")) {
[17:40:30.770]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:30.770]                       if (muffled) 
[17:40:30.770]                         invokeRestart("muffleWarning")
[17:40:30.770]                     }
[17:40:30.770]                     else if (inherits(cond, "condition")) {
[17:40:30.770]                       if (!is.null(pattern)) {
[17:40:30.770]                         computeRestarts <- base::computeRestarts
[17:40:30.770]                         grepl <- base::grepl
[17:40:30.770]                         restarts <- computeRestarts(cond)
[17:40:30.770]                         for (restart in restarts) {
[17:40:30.770]                           name <- restart$name
[17:40:30.770]                           if (is.null(name)) 
[17:40:30.770]                             next
[17:40:30.770]                           if (!grepl(pattern, name)) 
[17:40:30.770]                             next
[17:40:30.770]                           invokeRestart(restart)
[17:40:30.770]                           muffled <- TRUE
[17:40:30.770]                           break
[17:40:30.770]                         }
[17:40:30.770]                       }
[17:40:30.770]                     }
[17:40:30.770]                     invisible(muffled)
[17:40:30.770]                   }
[17:40:30.770]                   muffleCondition(cond)
[17:40:30.770]                 })
[17:40:30.770]             }))
[17:40:30.770]             future::FutureResult(value = ...future.value$value, 
[17:40:30.770]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.770]                   ...future.rng), globalenv = if (FALSE) 
[17:40:30.770]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:30.770]                     ...future.globalenv.names))
[17:40:30.770]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:30.770]         }, condition = base::local({
[17:40:30.770]             c <- base::c
[17:40:30.770]             inherits <- base::inherits
[17:40:30.770]             invokeRestart <- base::invokeRestart
[17:40:30.770]             length <- base::length
[17:40:30.770]             list <- base::list
[17:40:30.770]             seq.int <- base::seq.int
[17:40:30.770]             signalCondition <- base::signalCondition
[17:40:30.770]             sys.calls <- base::sys.calls
[17:40:30.770]             `[[` <- base::`[[`
[17:40:30.770]             `+` <- base::`+`
[17:40:30.770]             `<<-` <- base::`<<-`
[17:40:30.770]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:30.770]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:30.770]                   3L)]
[17:40:30.770]             }
[17:40:30.770]             function(cond) {
[17:40:30.770]                 is_error <- inherits(cond, "error")
[17:40:30.770]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:30.770]                   NULL)
[17:40:30.770]                 if (is_error) {
[17:40:30.770]                   sessionInformation <- function() {
[17:40:30.770]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:30.770]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:30.770]                       search = base::search(), system = base::Sys.info())
[17:40:30.770]                   }
[17:40:30.770]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.770]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:30.770]                     cond$call), session = sessionInformation(), 
[17:40:30.770]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:30.770]                   signalCondition(cond)
[17:40:30.770]                 }
[17:40:30.770]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:30.770]                 "immediateCondition"))) {
[17:40:30.770]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:30.770]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.770]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:30.770]                   if (TRUE && !signal) {
[17:40:30.770]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.770]                     {
[17:40:30.770]                       inherits <- base::inherits
[17:40:30.770]                       invokeRestart <- base::invokeRestart
[17:40:30.770]                       is.null <- base::is.null
[17:40:30.770]                       muffled <- FALSE
[17:40:30.770]                       if (inherits(cond, "message")) {
[17:40:30.770]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.770]                         if (muffled) 
[17:40:30.770]                           invokeRestart("muffleMessage")
[17:40:30.770]                       }
[17:40:30.770]                       else if (inherits(cond, "warning")) {
[17:40:30.770]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.770]                         if (muffled) 
[17:40:30.770]                           invokeRestart("muffleWarning")
[17:40:30.770]                       }
[17:40:30.770]                       else if (inherits(cond, "condition")) {
[17:40:30.770]                         if (!is.null(pattern)) {
[17:40:30.770]                           computeRestarts <- base::computeRestarts
[17:40:30.770]                           grepl <- base::grepl
[17:40:30.770]                           restarts <- computeRestarts(cond)
[17:40:30.770]                           for (restart in restarts) {
[17:40:30.770]                             name <- restart$name
[17:40:30.770]                             if (is.null(name)) 
[17:40:30.770]                               next
[17:40:30.770]                             if (!grepl(pattern, name)) 
[17:40:30.770]                               next
[17:40:30.770]                             invokeRestart(restart)
[17:40:30.770]                             muffled <- TRUE
[17:40:30.770]                             break
[17:40:30.770]                           }
[17:40:30.770]                         }
[17:40:30.770]                       }
[17:40:30.770]                       invisible(muffled)
[17:40:30.770]                     }
[17:40:30.770]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.770]                   }
[17:40:30.770]                 }
[17:40:30.770]                 else {
[17:40:30.770]                   if (TRUE) {
[17:40:30.770]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.770]                     {
[17:40:30.770]                       inherits <- base::inherits
[17:40:30.770]                       invokeRestart <- base::invokeRestart
[17:40:30.770]                       is.null <- base::is.null
[17:40:30.770]                       muffled <- FALSE
[17:40:30.770]                       if (inherits(cond, "message")) {
[17:40:30.770]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.770]                         if (muffled) 
[17:40:30.770]                           invokeRestart("muffleMessage")
[17:40:30.770]                       }
[17:40:30.770]                       else if (inherits(cond, "warning")) {
[17:40:30.770]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.770]                         if (muffled) 
[17:40:30.770]                           invokeRestart("muffleWarning")
[17:40:30.770]                       }
[17:40:30.770]                       else if (inherits(cond, "condition")) {
[17:40:30.770]                         if (!is.null(pattern)) {
[17:40:30.770]                           computeRestarts <- base::computeRestarts
[17:40:30.770]                           grepl <- base::grepl
[17:40:30.770]                           restarts <- computeRestarts(cond)
[17:40:30.770]                           for (restart in restarts) {
[17:40:30.770]                             name <- restart$name
[17:40:30.770]                             if (is.null(name)) 
[17:40:30.770]                               next
[17:40:30.770]                             if (!grepl(pattern, name)) 
[17:40:30.770]                               next
[17:40:30.770]                             invokeRestart(restart)
[17:40:30.770]                             muffled <- TRUE
[17:40:30.770]                             break
[17:40:30.770]                           }
[17:40:30.770]                         }
[17:40:30.770]                       }
[17:40:30.770]                       invisible(muffled)
[17:40:30.770]                     }
[17:40:30.770]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.770]                   }
[17:40:30.770]                 }
[17:40:30.770]             }
[17:40:30.770]         }))
[17:40:30.770]     }, error = function(ex) {
[17:40:30.770]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:30.770]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.770]                 ...future.rng), started = ...future.startTime, 
[17:40:30.770]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:30.770]             version = "1.8"), class = "FutureResult")
[17:40:30.770]     }, finally = {
[17:40:30.770]         if (!identical(...future.workdir, getwd())) 
[17:40:30.770]             setwd(...future.workdir)
[17:40:30.770]         {
[17:40:30.770]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:30.770]                 ...future.oldOptions$nwarnings <- NULL
[17:40:30.770]             }
[17:40:30.770]             base::options(...future.oldOptions)
[17:40:30.770]             if (.Platform$OS.type == "windows") {
[17:40:30.770]                 old_names <- names(...future.oldEnvVars)
[17:40:30.770]                 envs <- base::Sys.getenv()
[17:40:30.770]                 names <- names(envs)
[17:40:30.770]                 common <- intersect(names, old_names)
[17:40:30.770]                 added <- setdiff(names, old_names)
[17:40:30.770]                 removed <- setdiff(old_names, names)
[17:40:30.770]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:30.770]                   envs[common]]
[17:40:30.770]                 NAMES <- toupper(changed)
[17:40:30.770]                 args <- list()
[17:40:30.770]                 for (kk in seq_along(NAMES)) {
[17:40:30.770]                   name <- changed[[kk]]
[17:40:30.770]                   NAME <- NAMES[[kk]]
[17:40:30.770]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.770]                     next
[17:40:30.770]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.770]                 }
[17:40:30.770]                 NAMES <- toupper(added)
[17:40:30.770]                 for (kk in seq_along(NAMES)) {
[17:40:30.770]                   name <- added[[kk]]
[17:40:30.770]                   NAME <- NAMES[[kk]]
[17:40:30.770]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.770]                     next
[17:40:30.770]                   args[[name]] <- ""
[17:40:30.770]                 }
[17:40:30.770]                 NAMES <- toupper(removed)
[17:40:30.770]                 for (kk in seq_along(NAMES)) {
[17:40:30.770]                   name <- removed[[kk]]
[17:40:30.770]                   NAME <- NAMES[[kk]]
[17:40:30.770]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.770]                     next
[17:40:30.770]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.770]                 }
[17:40:30.770]                 if (length(args) > 0) 
[17:40:30.770]                   base::do.call(base::Sys.setenv, args = args)
[17:40:30.770]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:30.770]             }
[17:40:30.770]             else {
[17:40:30.770]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:30.770]             }
[17:40:30.770]             {
[17:40:30.770]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:30.770]                   0L) {
[17:40:30.770]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:30.770]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:30.770]                   base::options(opts)
[17:40:30.770]                 }
[17:40:30.770]                 {
[17:40:30.770]                   {
[17:40:30.770]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:30.770]                     NULL
[17:40:30.770]                   }
[17:40:30.770]                   options(future.plan = NULL)
[17:40:30.770]                   if (is.na(NA_character_)) 
[17:40:30.770]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.770]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:30.770]                   future::plan(list(function (..., workers = availableCores(), 
[17:40:30.770]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:40:30.770]                     envir = parent.frame()) 
[17:40:30.770]                   {
[17:40:30.770]                     if (is.function(workers)) 
[17:40:30.770]                       workers <- workers()
[17:40:30.770]                     workers <- structure(as.integer(workers), 
[17:40:30.770]                       class = class(workers))
[17:40:30.770]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:40:30.770]                       workers >= 1)
[17:40:30.770]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:40:30.770]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:40:30.770]                     }
[17:40:30.770]                     future <- MultisessionFuture(..., workers = workers, 
[17:40:30.770]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:40:30.770]                       envir = envir)
[17:40:30.770]                     if (!future$lazy) 
[17:40:30.770]                       future <- run(future)
[17:40:30.770]                     invisible(future)
[17:40:30.770]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:30.770]                 }
[17:40:30.770]             }
[17:40:30.770]         }
[17:40:30.770]     })
[17:40:30.770]     if (TRUE) {
[17:40:30.770]         base::sink(type = "output", split = FALSE)
[17:40:30.770]         if (TRUE) {
[17:40:30.770]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:30.770]         }
[17:40:30.770]         else {
[17:40:30.770]             ...future.result["stdout"] <- base::list(NULL)
[17:40:30.770]         }
[17:40:30.770]         base::close(...future.stdout)
[17:40:30.770]         ...future.stdout <- NULL
[17:40:30.770]     }
[17:40:30.770]     ...future.result$conditions <- ...future.conditions
[17:40:30.770]     ...future.result$finished <- base::Sys.time()
[17:40:30.770]     ...future.result
[17:40:30.770] }
[17:40:30.773] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[17:40:30.773] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[17:40:30.774] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[17:40:30.774] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:40:30.774] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:40:30.774] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:40:30.775] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:40:30.775] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:40:30.775] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:40:30.776] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:40:30.776] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:40:30.776] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[17:40:30.777] MultisessionFuture started
[17:40:30.777] - Launch lazy future ... done
[17:40:30.777] run() for ‘MultisessionFuture’ ... done
[17:40:30.777] Created future:
[17:40:30.777] MultisessionFuture:
[17:40:30.777] Label: ‘future_replicate-2’
[17:40:30.777] Expression:
[17:40:30.777] {
[17:40:30.777]     do.call(function(...) {
[17:40:30.777]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.777]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.777]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.777]             on.exit(options(oopts), add = TRUE)
[17:40:30.777]         }
[17:40:30.777]         {
[17:40:30.777]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.777]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.777]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.777]                   envir = globalenv(), inherits = FALSE)
[17:40:30.777]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.777]             })
[17:40:30.777]         }
[17:40:30.777]     }, args = future.call.arguments)
[17:40:30.777] }
[17:40:30.777] Lazy evaluation: FALSE
[17:40:30.777] Asynchronous evaluation: TRUE
[17:40:30.777] Local evaluation: TRUE
[17:40:30.777] Environment: R_GlobalEnv
[17:40:30.777] Capture standard output: TRUE
[17:40:30.777] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:30.777] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:40:30.777] Packages: <none>
[17:40:30.777] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:30.777] Resolved: FALSE
[17:40:30.777] Value: <not collected>
[17:40:30.777] Conditions captured: <none>
[17:40:30.777] Early signaling: FALSE
[17:40:30.777] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:30.777] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.789] Chunk #2 of 2 ... DONE
[17:40:30.789] Launching 2 futures (chunks) ... DONE
[17:40:30.789] Resolving 2 futures (chunks) ...
[17:40:30.789] resolve() on list ...
[17:40:30.789]  recursive: 0
[17:40:30.789]  length: 2
[17:40:30.789] 
[17:40:30.790] receiveMessageFromWorker() for ClusterFuture ...
[17:40:30.790] - Validating connection of MultisessionFuture
[17:40:30.790] - received message: FutureResult
[17:40:30.790] - Received FutureResult
[17:40:30.790] - Erased future from FutureRegistry
[17:40:30.791] result() for ClusterFuture ...
[17:40:30.791] - result already collected: FutureResult
[17:40:30.791] result() for ClusterFuture ... done
[17:40:30.791] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:30.791] Future #1
[17:40:30.791] result() for ClusterFuture ...
[17:40:30.791] - result already collected: FutureResult
[17:40:30.791] result() for ClusterFuture ... done
[17:40:30.791] result() for ClusterFuture ...
[17:40:30.791] - result already collected: FutureResult
[17:40:30.792] result() for ClusterFuture ... done
[17:40:30.792] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:40:30.792] - nx: 2
[17:40:30.792] - relay: TRUE
[17:40:30.792] - stdout: TRUE
[17:40:30.792] - signal: TRUE
[17:40:30.792] - resignal: FALSE
[17:40:30.792] - force: TRUE
[17:40:30.792] - relayed: [n=2] FALSE, FALSE
[17:40:30.792] - queued futures: [n=2] FALSE, FALSE
[17:40:30.792]  - until=1
[17:40:30.793]  - relaying element #1
[17:40:30.793] result() for ClusterFuture ...
[17:40:30.793] - result already collected: FutureResult
[17:40:30.793] result() for ClusterFuture ... done
[17:40:30.793] result() for ClusterFuture ...
[17:40:30.793] - result already collected: FutureResult
[17:40:30.793] result() for ClusterFuture ... done
[17:40:30.793] result() for ClusterFuture ...
[17:40:30.793] - result already collected: FutureResult
[17:40:30.793] result() for ClusterFuture ... done
[17:40:30.793] result() for ClusterFuture ...
[17:40:30.794] - result already collected: FutureResult
[17:40:30.794] result() for ClusterFuture ... done
[17:40:30.794] - relayed: [n=2] TRUE, FALSE
[17:40:30.794] - queued futures: [n=2] TRUE, FALSE
[17:40:30.794] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:40:30.794]  length: 1 (resolved future 1)
[17:40:30.824] receiveMessageFromWorker() for ClusterFuture ...
[17:40:30.824] - Validating connection of MultisessionFuture
[17:40:30.824] - received message: FutureResult
[17:40:30.824] - Received FutureResult
[17:40:30.824] - Erased future from FutureRegistry
[17:40:30.824] result() for ClusterFuture ...
[17:40:30.824] - result already collected: FutureResult
[17:40:30.824] result() for ClusterFuture ... done
[17:40:30.824] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:30.825] Future #2
[17:40:30.825] result() for ClusterFuture ...
[17:40:30.825] - result already collected: FutureResult
[17:40:30.825] result() for ClusterFuture ... done
[17:40:30.825] result() for ClusterFuture ...
[17:40:30.825] - result already collected: FutureResult
[17:40:30.825] result() for ClusterFuture ... done
[17:40:30.825] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:40:30.825] - nx: 2
[17:40:30.825] - relay: TRUE
[17:40:30.825] - stdout: TRUE
[17:40:30.826] - signal: TRUE
[17:40:30.826] - resignal: FALSE
[17:40:30.826] - force: TRUE
[17:40:30.826] - relayed: [n=2] TRUE, FALSE
[17:40:30.826] - queued futures: [n=2] TRUE, FALSE
[17:40:30.826]  - until=2
[17:40:30.826]  - relaying element #2
[17:40:30.826] result() for ClusterFuture ...
[17:40:30.826] - result already collected: FutureResult
[17:40:30.826] result() for ClusterFuture ... done
[17:40:30.826] result() for ClusterFuture ...
[17:40:30.827] - result already collected: FutureResult
[17:40:30.827] result() for ClusterFuture ... done
[17:40:30.827] result() for ClusterFuture ...
[17:40:30.827] - result already collected: FutureResult
[17:40:30.827] result() for ClusterFuture ... done
[17:40:30.827] result() for ClusterFuture ...
[17:40:30.827] - result already collected: FutureResult
[17:40:30.827] result() for ClusterFuture ... done
[17:40:30.829] - relayed: [n=2] TRUE, TRUE
[17:40:30.829] - queued futures: [n=2] TRUE, TRUE
[17:40:30.830] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:40:30.830]  length: 0 (resolved future 2)
[17:40:30.830] Relaying remaining futures
[17:40:30.830] signalConditionsASAP(NULL, pos=0) ...
[17:40:30.830] - nx: 2
[17:40:30.830] - relay: TRUE
[17:40:30.830] - stdout: TRUE
[17:40:30.830] - signal: TRUE
[17:40:30.830] - resignal: FALSE
[17:40:30.830] - force: TRUE
[17:40:30.830] - relayed: [n=2] TRUE, TRUE
[17:40:30.831] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:40:30.831] - relayed: [n=2] TRUE, TRUE
[17:40:30.831] - queued futures: [n=2] TRUE, TRUE
[17:40:30.831] signalConditionsASAP(NULL, pos=0) ... done
[17:40:30.831] resolve() on list ... DONE
[17:40:30.831] result() for ClusterFuture ...
[17:40:30.831] - result already collected: FutureResult
[17:40:30.831] result() for ClusterFuture ... done
[17:40:30.831] result() for ClusterFuture ...
[17:40:30.831] - result already collected: FutureResult
[17:40:30.831] result() for ClusterFuture ... done
[17:40:30.832] result() for ClusterFuture ...
[17:40:30.832] - result already collected: FutureResult
[17:40:30.832] result() for ClusterFuture ... done
[17:40:30.832] result() for ClusterFuture ...
[17:40:30.832] - result already collected: FutureResult
[17:40:30.832] result() for ClusterFuture ... done
[17:40:30.832]  - Number of value chunks collected: 2
[17:40:30.832] Resolving 2 futures (chunks) ... DONE
[17:40:30.832] Reducing values from 2 chunks ...
[17:40:30.832]  - Number of values collected after concatenation: 5
[17:40:30.832]  - Number of values expected: 5
[17:40:30.833] Reducing values from 2 chunks ... DONE
[17:40:30.833] future_lapply() ... DONE
- example(replicate) ...
[17:40:30.833] future_lapply() ...
[17:40:30.834] Generating random seeds ...
[17:40:30.834] Generating random seed streams for 5 elements ...
[17:40:30.834] Generating random seed streams for 5 elements ... DONE
[17:40:30.834] Generating random seeds ... DONE
[17:40:30.834] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:40:30.838] Number of chunks: 2
[17:40:30.838] getGlobalsAndPackagesXApply() ...
[17:40:30.838]  - future.globals: TRUE
[17:40:30.838] getGlobalsAndPackages() ...
[17:40:30.838] Searching for globals...
[17:40:30.840] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[17:40:30.840] Searching for globals ... DONE
[17:40:30.840] Resolving globals: FALSE
[17:40:30.841] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[17:40:30.841] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[17:40:30.841] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[17:40:30.841] 
[17:40:30.841] getGlobalsAndPackages() ... DONE
[17:40:30.841]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[17:40:30.842]  - needed namespaces: [n=0] 
[17:40:30.842] Finding globals ... DONE
[17:40:30.842]  - use_args: TRUE
[17:40:30.842]  - Getting '...' globals ...
[17:40:30.842] resolve() on list ...
[17:40:30.842]  recursive: 0
[17:40:30.842]  length: 1
[17:40:30.842]  elements: ‘...’
[17:40:30.842]  length: 0 (resolved future 1)
[17:40:30.843] resolve() on list ... DONE
[17:40:30.843]    - '...' content: [n=0] 
[17:40:30.843] List of 1
[17:40:30.843]  $ ...: list()
[17:40:30.843]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:30.843]  - attr(*, "where")=List of 1
[17:40:30.843]   ..$ ...:<environment: 0x558a3c594300> 
[17:40:30.843]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:30.843]  - attr(*, "resolved")= logi TRUE
[17:40:30.843]  - attr(*, "total_size")= num NA
[17:40:30.845]  - Getting '...' globals ... DONE
[17:40:30.845] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[17:40:30.846] List of 4
[17:40:30.846]  $ ...future.FUN:function (...)  
[17:40:30.846]  $ foo          :function (x = 1, y = 2)  
[17:40:30.846]  $ x            : num 3
[17:40:30.846]  $ ...          : list()
[17:40:30.846]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:40:30.846]  - attr(*, "where")=List of 4
[17:40:30.846]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:40:30.846]   ..$ foo          :<environment: R_EmptyEnv> 
[17:40:30.846]   ..$ x            :<environment: R_EmptyEnv> 
[17:40:30.846]   ..$ ...          :<environment: 0x558a3c594300> 
[17:40:30.846]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:30.846]  - attr(*, "resolved")= logi FALSE
[17:40:30.846]  - attr(*, "total_size")= num 2200
[17:40:30.849] Packages to be attached in all futures: [n=0] 
[17:40:30.849] getGlobalsAndPackagesXApply() ... DONE
[17:40:30.849] Number of futures (= number of chunks): 2
[17:40:30.850] Launching 2 futures (chunks) ...
[17:40:30.850] Chunk #1 of 2 ...
[17:40:30.850]  - Finding globals in 'X' for chunk #1 ...
[17:40:30.850] getGlobalsAndPackages() ...
[17:40:30.850] Searching for globals...
[17:40:30.850] 
[17:40:30.850] Searching for globals ... DONE
[17:40:30.850] - globals: [0] <none>
[17:40:30.850] getGlobalsAndPackages() ... DONE
[17:40:30.851]    + additional globals found: [n=0] 
[17:40:30.851]    + additional namespaces needed: [n=0] 
[17:40:30.851]  - Finding globals in 'X' for chunk #1 ... DONE
[17:40:30.851]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:40:30.851]  - seeds: [2] <seeds>
[17:40:30.851] getGlobalsAndPackages() ...
[17:40:30.851] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.851] Resolving globals: FALSE
[17:40:30.851] Tweak future expression to call with '...' arguments ...
[17:40:30.852] {
[17:40:30.852]     do.call(function(...) {
[17:40:30.852]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.852]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.852]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.852]             on.exit(options(oopts), add = TRUE)
[17:40:30.852]         }
[17:40:30.852]         {
[17:40:30.852]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.852]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.852]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.852]                   envir = globalenv(), inherits = FALSE)
[17:40:30.852]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.852]             })
[17:40:30.852]         }
[17:40:30.852]     }, args = future.call.arguments)
[17:40:30.852] }
[17:40:30.852] Tweak future expression to call with '...' arguments ... DONE
[17:40:30.852] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.852] 
[17:40:30.852] getGlobalsAndPackages() ... DONE
[17:40:30.853] run() for ‘Future’ ...
[17:40:30.853] - state: ‘created’
[17:40:30.853] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:40:30.869] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.869] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:40:30.870]   - Field: ‘node’
[17:40:30.870]   - Field: ‘label’
[17:40:30.870]   - Field: ‘local’
[17:40:30.870]   - Field: ‘owner’
[17:40:30.870]   - Field: ‘envir’
[17:40:30.870]   - Field: ‘workers’
[17:40:30.870]   - Field: ‘packages’
[17:40:30.870]   - Field: ‘gc’
[17:40:30.870]   - Field: ‘conditions’
[17:40:30.870]   - Field: ‘persistent’
[17:40:30.870]   - Field: ‘expr’
[17:40:30.871]   - Field: ‘uuid’
[17:40:30.871]   - Field: ‘seed’
[17:40:30.871]   - Field: ‘version’
[17:40:30.871]   - Field: ‘result’
[17:40:30.871]   - Field: ‘asynchronous’
[17:40:30.871]   - Field: ‘calls’
[17:40:30.871]   - Field: ‘globals’
[17:40:30.871]   - Field: ‘stdout’
[17:40:30.871]   - Field: ‘earlySignal’
[17:40:30.872]   - Field: ‘lazy’
[17:40:30.872]   - Field: ‘state’
[17:40:30.872] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:40:30.872] - Launch lazy future ...
[17:40:30.872] Packages needed by the future expression (n = 0): <none>
[17:40:30.872] Packages needed by future strategies (n = 0): <none>
[17:40:30.873] {
[17:40:30.873]     {
[17:40:30.873]         {
[17:40:30.873]             ...future.startTime <- base::Sys.time()
[17:40:30.873]             {
[17:40:30.873]                 {
[17:40:30.873]                   {
[17:40:30.873]                     {
[17:40:30.873]                       base::local({
[17:40:30.873]                         has_future <- base::requireNamespace("future", 
[17:40:30.873]                           quietly = TRUE)
[17:40:30.873]                         if (has_future) {
[17:40:30.873]                           ns <- base::getNamespace("future")
[17:40:30.873]                           version <- ns[[".package"]][["version"]]
[17:40:30.873]                           if (is.null(version)) 
[17:40:30.873]                             version <- utils::packageVersion("future")
[17:40:30.873]                         }
[17:40:30.873]                         else {
[17:40:30.873]                           version <- NULL
[17:40:30.873]                         }
[17:40:30.873]                         if (!has_future || version < "1.8.0") {
[17:40:30.873]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:30.873]                             "", base::R.version$version.string), 
[17:40:30.873]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:30.873]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:30.873]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:30.873]                               "release", "version")], collapse = " "), 
[17:40:30.873]                             hostname = base::Sys.info()[["nodename"]])
[17:40:30.873]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:30.873]                             info)
[17:40:30.873]                           info <- base::paste(info, collapse = "; ")
[17:40:30.873]                           if (!has_future) {
[17:40:30.873]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:30.873]                               info)
[17:40:30.873]                           }
[17:40:30.873]                           else {
[17:40:30.873]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:30.873]                               info, version)
[17:40:30.873]                           }
[17:40:30.873]                           base::stop(msg)
[17:40:30.873]                         }
[17:40:30.873]                       })
[17:40:30.873]                     }
[17:40:30.873]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:30.873]                     base::options(mc.cores = 1L)
[17:40:30.873]                   }
[17:40:30.873]                   options(future.plan = NULL)
[17:40:30.873]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.873]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:30.873]                 }
[17:40:30.873]                 ...future.workdir <- getwd()
[17:40:30.873]             }
[17:40:30.873]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:30.873]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:30.873]         }
[17:40:30.873]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:30.873]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:40:30.873]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:30.873]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:30.873]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:30.873]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:30.873]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:30.873]             base::names(...future.oldOptions))
[17:40:30.873]     }
[17:40:30.873]     if (FALSE) {
[17:40:30.873]     }
[17:40:30.873]     else {
[17:40:30.873]         if (TRUE) {
[17:40:30.873]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:30.873]                 open = "w")
[17:40:30.873]         }
[17:40:30.873]         else {
[17:40:30.873]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:30.873]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:30.873]         }
[17:40:30.873]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:30.873]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:30.873]             base::sink(type = "output", split = FALSE)
[17:40:30.873]             base::close(...future.stdout)
[17:40:30.873]         }, add = TRUE)
[17:40:30.873]     }
[17:40:30.873]     ...future.frame <- base::sys.nframe()
[17:40:30.873]     ...future.conditions <- base::list()
[17:40:30.873]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:30.873]     if (FALSE) {
[17:40:30.873]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:30.873]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:30.873]     }
[17:40:30.873]     ...future.result <- base::tryCatch({
[17:40:30.873]         base::withCallingHandlers({
[17:40:30.873]             ...future.value <- base::withVisible(base::local({
[17:40:30.873]                 ...future.makeSendCondition <- local({
[17:40:30.873]                   sendCondition <- NULL
[17:40:30.873]                   function(frame = 1L) {
[17:40:30.873]                     if (is.function(sendCondition)) 
[17:40:30.873]                       return(sendCondition)
[17:40:30.873]                     ns <- getNamespace("parallel")
[17:40:30.873]                     if (exists("sendData", mode = "function", 
[17:40:30.873]                       envir = ns)) {
[17:40:30.873]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:30.873]                         envir = ns)
[17:40:30.873]                       envir <- sys.frame(frame)
[17:40:30.873]                       master <- NULL
[17:40:30.873]                       while (!identical(envir, .GlobalEnv) && 
[17:40:30.873]                         !identical(envir, emptyenv())) {
[17:40:30.873]                         if (exists("master", mode = "list", envir = envir, 
[17:40:30.873]                           inherits = FALSE)) {
[17:40:30.873]                           master <- get("master", mode = "list", 
[17:40:30.873]                             envir = envir, inherits = FALSE)
[17:40:30.873]                           if (inherits(master, c("SOCKnode", 
[17:40:30.873]                             "SOCK0node"))) {
[17:40:30.873]                             sendCondition <<- function(cond) {
[17:40:30.873]                               data <- list(type = "VALUE", value = cond, 
[17:40:30.873]                                 success = TRUE)
[17:40:30.873]                               parallel_sendData(master, data)
[17:40:30.873]                             }
[17:40:30.873]                             return(sendCondition)
[17:40:30.873]                           }
[17:40:30.873]                         }
[17:40:30.873]                         frame <- frame + 1L
[17:40:30.873]                         envir <- sys.frame(frame)
[17:40:30.873]                       }
[17:40:30.873]                     }
[17:40:30.873]                     sendCondition <<- function(cond) NULL
[17:40:30.873]                   }
[17:40:30.873]                 })
[17:40:30.873]                 withCallingHandlers({
[17:40:30.873]                   {
[17:40:30.873]                     do.call(function(...) {
[17:40:30.873]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.873]                       if (!identical(...future.globals.maxSize.org, 
[17:40:30.873]                         ...future.globals.maxSize)) {
[17:40:30.873]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.873]                         on.exit(options(oopts), add = TRUE)
[17:40:30.873]                       }
[17:40:30.873]                       {
[17:40:30.873]                         lapply(seq_along(...future.elements_ii), 
[17:40:30.873]                           FUN = function(jj) {
[17:40:30.873]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.873]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.873]                               envir = globalenv(), inherits = FALSE)
[17:40:30.873]                             ...future.FUN(...future.X_jj, ...)
[17:40:30.873]                           })
[17:40:30.873]                       }
[17:40:30.873]                     }, args = future.call.arguments)
[17:40:30.873]                   }
[17:40:30.873]                 }, immediateCondition = function(cond) {
[17:40:30.873]                   sendCondition <- ...future.makeSendCondition()
[17:40:30.873]                   sendCondition(cond)
[17:40:30.873]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.873]                   {
[17:40:30.873]                     inherits <- base::inherits
[17:40:30.873]                     invokeRestart <- base::invokeRestart
[17:40:30.873]                     is.null <- base::is.null
[17:40:30.873]                     muffled <- FALSE
[17:40:30.873]                     if (inherits(cond, "message")) {
[17:40:30.873]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:30.873]                       if (muffled) 
[17:40:30.873]                         invokeRestart("muffleMessage")
[17:40:30.873]                     }
[17:40:30.873]                     else if (inherits(cond, "warning")) {
[17:40:30.873]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:30.873]                       if (muffled) 
[17:40:30.873]                         invokeRestart("muffleWarning")
[17:40:30.873]                     }
[17:40:30.873]                     else if (inherits(cond, "condition")) {
[17:40:30.873]                       if (!is.null(pattern)) {
[17:40:30.873]                         computeRestarts <- base::computeRestarts
[17:40:30.873]                         grepl <- base::grepl
[17:40:30.873]                         restarts <- computeRestarts(cond)
[17:40:30.873]                         for (restart in restarts) {
[17:40:30.873]                           name <- restart$name
[17:40:30.873]                           if (is.null(name)) 
[17:40:30.873]                             next
[17:40:30.873]                           if (!grepl(pattern, name)) 
[17:40:30.873]                             next
[17:40:30.873]                           invokeRestart(restart)
[17:40:30.873]                           muffled <- TRUE
[17:40:30.873]                           break
[17:40:30.873]                         }
[17:40:30.873]                       }
[17:40:30.873]                     }
[17:40:30.873]                     invisible(muffled)
[17:40:30.873]                   }
[17:40:30.873]                   muffleCondition(cond)
[17:40:30.873]                 })
[17:40:30.873]             }))
[17:40:30.873]             future::FutureResult(value = ...future.value$value, 
[17:40:30.873]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.873]                   ...future.rng), globalenv = if (FALSE) 
[17:40:30.873]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:30.873]                     ...future.globalenv.names))
[17:40:30.873]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:30.873]         }, condition = base::local({
[17:40:30.873]             c <- base::c
[17:40:30.873]             inherits <- base::inherits
[17:40:30.873]             invokeRestart <- base::invokeRestart
[17:40:30.873]             length <- base::length
[17:40:30.873]             list <- base::list
[17:40:30.873]             seq.int <- base::seq.int
[17:40:30.873]             signalCondition <- base::signalCondition
[17:40:30.873]             sys.calls <- base::sys.calls
[17:40:30.873]             `[[` <- base::`[[`
[17:40:30.873]             `+` <- base::`+`
[17:40:30.873]             `<<-` <- base::`<<-`
[17:40:30.873]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:30.873]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:30.873]                   3L)]
[17:40:30.873]             }
[17:40:30.873]             function(cond) {
[17:40:30.873]                 is_error <- inherits(cond, "error")
[17:40:30.873]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:30.873]                   NULL)
[17:40:30.873]                 if (is_error) {
[17:40:30.873]                   sessionInformation <- function() {
[17:40:30.873]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:30.873]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:30.873]                       search = base::search(), system = base::Sys.info())
[17:40:30.873]                   }
[17:40:30.873]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.873]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:30.873]                     cond$call), session = sessionInformation(), 
[17:40:30.873]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:30.873]                   signalCondition(cond)
[17:40:30.873]                 }
[17:40:30.873]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:30.873]                 "immediateCondition"))) {
[17:40:30.873]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:30.873]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.873]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:30.873]                   if (TRUE && !signal) {
[17:40:30.873]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.873]                     {
[17:40:30.873]                       inherits <- base::inherits
[17:40:30.873]                       invokeRestart <- base::invokeRestart
[17:40:30.873]                       is.null <- base::is.null
[17:40:30.873]                       muffled <- FALSE
[17:40:30.873]                       if (inherits(cond, "message")) {
[17:40:30.873]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.873]                         if (muffled) 
[17:40:30.873]                           invokeRestart("muffleMessage")
[17:40:30.873]                       }
[17:40:30.873]                       else if (inherits(cond, "warning")) {
[17:40:30.873]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.873]                         if (muffled) 
[17:40:30.873]                           invokeRestart("muffleWarning")
[17:40:30.873]                       }
[17:40:30.873]                       else if (inherits(cond, "condition")) {
[17:40:30.873]                         if (!is.null(pattern)) {
[17:40:30.873]                           computeRestarts <- base::computeRestarts
[17:40:30.873]                           grepl <- base::grepl
[17:40:30.873]                           restarts <- computeRestarts(cond)
[17:40:30.873]                           for (restart in restarts) {
[17:40:30.873]                             name <- restart$name
[17:40:30.873]                             if (is.null(name)) 
[17:40:30.873]                               next
[17:40:30.873]                             if (!grepl(pattern, name)) 
[17:40:30.873]                               next
[17:40:30.873]                             invokeRestart(restart)
[17:40:30.873]                             muffled <- TRUE
[17:40:30.873]                             break
[17:40:30.873]                           }
[17:40:30.873]                         }
[17:40:30.873]                       }
[17:40:30.873]                       invisible(muffled)
[17:40:30.873]                     }
[17:40:30.873]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.873]                   }
[17:40:30.873]                 }
[17:40:30.873]                 else {
[17:40:30.873]                   if (TRUE) {
[17:40:30.873]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.873]                     {
[17:40:30.873]                       inherits <- base::inherits
[17:40:30.873]                       invokeRestart <- base::invokeRestart
[17:40:30.873]                       is.null <- base::is.null
[17:40:30.873]                       muffled <- FALSE
[17:40:30.873]                       if (inherits(cond, "message")) {
[17:40:30.873]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.873]                         if (muffled) 
[17:40:30.873]                           invokeRestart("muffleMessage")
[17:40:30.873]                       }
[17:40:30.873]                       else if (inherits(cond, "warning")) {
[17:40:30.873]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.873]                         if (muffled) 
[17:40:30.873]                           invokeRestart("muffleWarning")
[17:40:30.873]                       }
[17:40:30.873]                       else if (inherits(cond, "condition")) {
[17:40:30.873]                         if (!is.null(pattern)) {
[17:40:30.873]                           computeRestarts <- base::computeRestarts
[17:40:30.873]                           grepl <- base::grepl
[17:40:30.873]                           restarts <- computeRestarts(cond)
[17:40:30.873]                           for (restart in restarts) {
[17:40:30.873]                             name <- restart$name
[17:40:30.873]                             if (is.null(name)) 
[17:40:30.873]                               next
[17:40:30.873]                             if (!grepl(pattern, name)) 
[17:40:30.873]                               next
[17:40:30.873]                             invokeRestart(restart)
[17:40:30.873]                             muffled <- TRUE
[17:40:30.873]                             break
[17:40:30.873]                           }
[17:40:30.873]                         }
[17:40:30.873]                       }
[17:40:30.873]                       invisible(muffled)
[17:40:30.873]                     }
[17:40:30.873]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.873]                   }
[17:40:30.873]                 }
[17:40:30.873]             }
[17:40:30.873]         }))
[17:40:30.873]     }, error = function(ex) {
[17:40:30.873]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:30.873]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.873]                 ...future.rng), started = ...future.startTime, 
[17:40:30.873]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:30.873]             version = "1.8"), class = "FutureResult")
[17:40:30.873]     }, finally = {
[17:40:30.873]         if (!identical(...future.workdir, getwd())) 
[17:40:30.873]             setwd(...future.workdir)
[17:40:30.873]         {
[17:40:30.873]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:30.873]                 ...future.oldOptions$nwarnings <- NULL
[17:40:30.873]             }
[17:40:30.873]             base::options(...future.oldOptions)
[17:40:30.873]             if (.Platform$OS.type == "windows") {
[17:40:30.873]                 old_names <- names(...future.oldEnvVars)
[17:40:30.873]                 envs <- base::Sys.getenv()
[17:40:30.873]                 names <- names(envs)
[17:40:30.873]                 common <- intersect(names, old_names)
[17:40:30.873]                 added <- setdiff(names, old_names)
[17:40:30.873]                 removed <- setdiff(old_names, names)
[17:40:30.873]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:30.873]                   envs[common]]
[17:40:30.873]                 NAMES <- toupper(changed)
[17:40:30.873]                 args <- list()
[17:40:30.873]                 for (kk in seq_along(NAMES)) {
[17:40:30.873]                   name <- changed[[kk]]
[17:40:30.873]                   NAME <- NAMES[[kk]]
[17:40:30.873]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.873]                     next
[17:40:30.873]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.873]                 }
[17:40:30.873]                 NAMES <- toupper(added)
[17:40:30.873]                 for (kk in seq_along(NAMES)) {
[17:40:30.873]                   name <- added[[kk]]
[17:40:30.873]                   NAME <- NAMES[[kk]]
[17:40:30.873]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.873]                     next
[17:40:30.873]                   args[[name]] <- ""
[17:40:30.873]                 }
[17:40:30.873]                 NAMES <- toupper(removed)
[17:40:30.873]                 for (kk in seq_along(NAMES)) {
[17:40:30.873]                   name <- removed[[kk]]
[17:40:30.873]                   NAME <- NAMES[[kk]]
[17:40:30.873]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.873]                     next
[17:40:30.873]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.873]                 }
[17:40:30.873]                 if (length(args) > 0) 
[17:40:30.873]                   base::do.call(base::Sys.setenv, args = args)
[17:40:30.873]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:30.873]             }
[17:40:30.873]             else {
[17:40:30.873]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:30.873]             }
[17:40:30.873]             {
[17:40:30.873]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:30.873]                   0L) {
[17:40:30.873]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:30.873]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:30.873]                   base::options(opts)
[17:40:30.873]                 }
[17:40:30.873]                 {
[17:40:30.873]                   {
[17:40:30.873]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:30.873]                     NULL
[17:40:30.873]                   }
[17:40:30.873]                   options(future.plan = NULL)
[17:40:30.873]                   if (is.na(NA_character_)) 
[17:40:30.873]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.873]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:30.873]                   future::plan(list(function (..., workers = availableCores(), 
[17:40:30.873]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:40:30.873]                     envir = parent.frame()) 
[17:40:30.873]                   {
[17:40:30.873]                     if (is.function(workers)) 
[17:40:30.873]                       workers <- workers()
[17:40:30.873]                     workers <- structure(as.integer(workers), 
[17:40:30.873]                       class = class(workers))
[17:40:30.873]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:40:30.873]                       workers >= 1)
[17:40:30.873]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:40:30.873]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:40:30.873]                     }
[17:40:30.873]                     future <- MultisessionFuture(..., workers = workers, 
[17:40:30.873]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:40:30.873]                       envir = envir)
[17:40:30.873]                     if (!future$lazy) 
[17:40:30.873]                       future <- run(future)
[17:40:30.873]                     invisible(future)
[17:40:30.873]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:30.873]                 }
[17:40:30.873]             }
[17:40:30.873]         }
[17:40:30.873]     })
[17:40:30.873]     if (TRUE) {
[17:40:30.873]         base::sink(type = "output", split = FALSE)
[17:40:30.873]         if (TRUE) {
[17:40:30.873]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:30.873]         }
[17:40:30.873]         else {
[17:40:30.873]             ...future.result["stdout"] <- base::list(NULL)
[17:40:30.873]         }
[17:40:30.873]         base::close(...future.stdout)
[17:40:30.873]         ...future.stdout <- NULL
[17:40:30.873]     }
[17:40:30.873]     ...future.result$conditions <- ...future.conditions
[17:40:30.873]     ...future.result$finished <- base::Sys.time()
[17:40:30.873]     ...future.result
[17:40:30.873] }
[17:40:30.876] Exporting 7 global objects (2.15 KiB) to cluster node #1 ...
[17:40:30.876] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ...
[17:40:30.876] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ... DONE
[17:40:30.876] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ...
[17:40:30.876] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ... DONE
[17:40:30.877] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[17:40:30.877] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[17:40:30.877] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:40:30.877] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:40:30.878] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:40:30.878] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:40:30.878] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:40:30.878] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:40:30.878] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:40:30.879] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:40:30.879] Exporting 7 global objects (2.15 KiB) to cluster node #1 ... DONE
[17:40:30.879] MultisessionFuture started
[17:40:30.879] - Launch lazy future ... done
[17:40:30.880] run() for ‘MultisessionFuture’ ... done
[17:40:30.880] Created future:
[17:40:30.880] MultisessionFuture:
[17:40:30.880] Label: ‘future_replicate-1’
[17:40:30.880] Expression:
[17:40:30.880] {
[17:40:30.880]     do.call(function(...) {
[17:40:30.880]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.880]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.880]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.880]             on.exit(options(oopts), add = TRUE)
[17:40:30.880]         }
[17:40:30.880]         {
[17:40:30.880]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.880]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.880]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.880]                   envir = globalenv(), inherits = FALSE)
[17:40:30.880]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.880]             })
[17:40:30.880]         }
[17:40:30.880]     }, args = future.call.arguments)
[17:40:30.880] }
[17:40:30.880] Lazy evaluation: FALSE
[17:40:30.880] Asynchronous evaluation: TRUE
[17:40:30.880] Local evaluation: TRUE
[17:40:30.880] Environment: 0x558a3c592b60
[17:40:30.880] Capture standard output: TRUE
[17:40:30.880] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:30.880] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[17:40:30.880] Packages: <none>
[17:40:30.880] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:30.880] Resolved: FALSE
[17:40:30.880] Value: <not collected>
[17:40:30.880] Conditions captured: <none>
[17:40:30.880] Early signaling: FALSE
[17:40:30.880] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:30.880] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.892] Chunk #1 of 2 ... DONE
[17:40:30.892] Chunk #2 of 2 ...
[17:40:30.892]  - Finding globals in 'X' for chunk #2 ...
[17:40:30.892] getGlobalsAndPackages() ...
[17:40:30.892] Searching for globals...
[17:40:30.893] 
[17:40:30.893] Searching for globals ... DONE
[17:40:30.893] - globals: [0] <none>
[17:40:30.893] getGlobalsAndPackages() ... DONE
[17:40:30.893]    + additional globals found: [n=0] 
[17:40:30.893]    + additional namespaces needed: [n=0] 
[17:40:30.893]  - Finding globals in 'X' for chunk #2 ... DONE
[17:40:30.893]  - Adjusted option 'future.globals.maxSize': 524288000 -> 3 * 524288000 = 1572864000 (bytes)
[17:40:30.894]  - seeds: [3] <seeds>
[17:40:30.894] getGlobalsAndPackages() ...
[17:40:30.894] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.894] Resolving globals: FALSE
[17:40:30.894] Tweak future expression to call with '...' arguments ...
[17:40:30.894] {
[17:40:30.894]     do.call(function(...) {
[17:40:30.894]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.894]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.894]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.894]             on.exit(options(oopts), add = TRUE)
[17:40:30.894]         }
[17:40:30.894]         {
[17:40:30.894]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.894]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.894]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.894]                   envir = globalenv(), inherits = FALSE)
[17:40:30.894]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.894]             })
[17:40:30.894]         }
[17:40:30.894]     }, args = future.call.arguments)
[17:40:30.894] }
[17:40:30.894] Tweak future expression to call with '...' arguments ... DONE
[17:40:30.895] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:40:30.895] 
[17:40:30.895] getGlobalsAndPackages() ... DONE
[17:40:30.895] run() for ‘Future’ ...
[17:40:30.895] - state: ‘created’
[17:40:30.896] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:40:30.910] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.910] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:40:30.911]   - Field: ‘node’
[17:40:30.911]   - Field: ‘label’
[17:40:30.911]   - Field: ‘local’
[17:40:30.911]   - Field: ‘owner’
[17:40:30.911]   - Field: ‘envir’
[17:40:30.911]   - Field: ‘workers’
[17:40:30.911]   - Field: ‘packages’
[17:40:30.911]   - Field: ‘gc’
[17:40:30.911]   - Field: ‘conditions’
[17:40:30.911]   - Field: ‘persistent’
[17:40:30.912]   - Field: ‘expr’
[17:40:30.912]   - Field: ‘uuid’
[17:40:30.912]   - Field: ‘seed’
[17:40:30.912]   - Field: ‘version’
[17:40:30.912]   - Field: ‘result’
[17:40:30.912]   - Field: ‘asynchronous’
[17:40:30.912]   - Field: ‘calls’
[17:40:30.912]   - Field: ‘globals’
[17:40:30.912]   - Field: ‘stdout’
[17:40:30.912]   - Field: ‘earlySignal’
[17:40:30.912]   - Field: ‘lazy’
[17:40:30.913]   - Field: ‘state’
[17:40:30.913] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:40:30.913] - Launch lazy future ...
[17:40:30.913] Packages needed by the future expression (n = 0): <none>
[17:40:30.913] Packages needed by future strategies (n = 0): <none>
[17:40:30.914] {
[17:40:30.914]     {
[17:40:30.914]         {
[17:40:30.914]             ...future.startTime <- base::Sys.time()
[17:40:30.914]             {
[17:40:30.914]                 {
[17:40:30.914]                   {
[17:40:30.914]                     {
[17:40:30.914]                       base::local({
[17:40:30.914]                         has_future <- base::requireNamespace("future", 
[17:40:30.914]                           quietly = TRUE)
[17:40:30.914]                         if (has_future) {
[17:40:30.914]                           ns <- base::getNamespace("future")
[17:40:30.914]                           version <- ns[[".package"]][["version"]]
[17:40:30.914]                           if (is.null(version)) 
[17:40:30.914]                             version <- utils::packageVersion("future")
[17:40:30.914]                         }
[17:40:30.914]                         else {
[17:40:30.914]                           version <- NULL
[17:40:30.914]                         }
[17:40:30.914]                         if (!has_future || version < "1.8.0") {
[17:40:30.914]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:30.914]                             "", base::R.version$version.string), 
[17:40:30.914]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:30.914]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:30.914]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:30.914]                               "release", "version")], collapse = " "), 
[17:40:30.914]                             hostname = base::Sys.info()[["nodename"]])
[17:40:30.914]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:30.914]                             info)
[17:40:30.914]                           info <- base::paste(info, collapse = "; ")
[17:40:30.914]                           if (!has_future) {
[17:40:30.914]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:30.914]                               info)
[17:40:30.914]                           }
[17:40:30.914]                           else {
[17:40:30.914]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:30.914]                               info, version)
[17:40:30.914]                           }
[17:40:30.914]                           base::stop(msg)
[17:40:30.914]                         }
[17:40:30.914]                       })
[17:40:30.914]                     }
[17:40:30.914]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:30.914]                     base::options(mc.cores = 1L)
[17:40:30.914]                   }
[17:40:30.914]                   options(future.plan = NULL)
[17:40:30.914]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.914]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:30.914]                 }
[17:40:30.914]                 ...future.workdir <- getwd()
[17:40:30.914]             }
[17:40:30.914]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:30.914]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:30.914]         }
[17:40:30.914]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:30.914]             future.globals.maxSize = 1572864000, future.globals.method = NULL, 
[17:40:30.914]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:30.914]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:30.914]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:30.914]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:30.914]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:30.914]             base::names(...future.oldOptions))
[17:40:30.914]     }
[17:40:30.914]     if (FALSE) {
[17:40:30.914]     }
[17:40:30.914]     else {
[17:40:30.914]         if (TRUE) {
[17:40:30.914]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:30.914]                 open = "w")
[17:40:30.914]         }
[17:40:30.914]         else {
[17:40:30.914]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:30.914]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:30.914]         }
[17:40:30.914]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:30.914]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:30.914]             base::sink(type = "output", split = FALSE)
[17:40:30.914]             base::close(...future.stdout)
[17:40:30.914]         }, add = TRUE)
[17:40:30.914]     }
[17:40:30.914]     ...future.frame <- base::sys.nframe()
[17:40:30.914]     ...future.conditions <- base::list()
[17:40:30.914]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:30.914]     if (FALSE) {
[17:40:30.914]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:30.914]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:30.914]     }
[17:40:30.914]     ...future.result <- base::tryCatch({
[17:40:30.914]         base::withCallingHandlers({
[17:40:30.914]             ...future.value <- base::withVisible(base::local({
[17:40:30.914]                 ...future.makeSendCondition <- local({
[17:40:30.914]                   sendCondition <- NULL
[17:40:30.914]                   function(frame = 1L) {
[17:40:30.914]                     if (is.function(sendCondition)) 
[17:40:30.914]                       return(sendCondition)
[17:40:30.914]                     ns <- getNamespace("parallel")
[17:40:30.914]                     if (exists("sendData", mode = "function", 
[17:40:30.914]                       envir = ns)) {
[17:40:30.914]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:30.914]                         envir = ns)
[17:40:30.914]                       envir <- sys.frame(frame)
[17:40:30.914]                       master <- NULL
[17:40:30.914]                       while (!identical(envir, .GlobalEnv) && 
[17:40:30.914]                         !identical(envir, emptyenv())) {
[17:40:30.914]                         if (exists("master", mode = "list", envir = envir, 
[17:40:30.914]                           inherits = FALSE)) {
[17:40:30.914]                           master <- get("master", mode = "list", 
[17:40:30.914]                             envir = envir, inherits = FALSE)
[17:40:30.914]                           if (inherits(master, c("SOCKnode", 
[17:40:30.914]                             "SOCK0node"))) {
[17:40:30.914]                             sendCondition <<- function(cond) {
[17:40:30.914]                               data <- list(type = "VALUE", value = cond, 
[17:40:30.914]                                 success = TRUE)
[17:40:30.914]                               parallel_sendData(master, data)
[17:40:30.914]                             }
[17:40:30.914]                             return(sendCondition)
[17:40:30.914]                           }
[17:40:30.914]                         }
[17:40:30.914]                         frame <- frame + 1L
[17:40:30.914]                         envir <- sys.frame(frame)
[17:40:30.914]                       }
[17:40:30.914]                     }
[17:40:30.914]                     sendCondition <<- function(cond) NULL
[17:40:30.914]                   }
[17:40:30.914]                 })
[17:40:30.914]                 withCallingHandlers({
[17:40:30.914]                   {
[17:40:30.914]                     do.call(function(...) {
[17:40:30.914]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.914]                       if (!identical(...future.globals.maxSize.org, 
[17:40:30.914]                         ...future.globals.maxSize)) {
[17:40:30.914]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.914]                         on.exit(options(oopts), add = TRUE)
[17:40:30.914]                       }
[17:40:30.914]                       {
[17:40:30.914]                         lapply(seq_along(...future.elements_ii), 
[17:40:30.914]                           FUN = function(jj) {
[17:40:30.914]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.914]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.914]                               envir = globalenv(), inherits = FALSE)
[17:40:30.914]                             ...future.FUN(...future.X_jj, ...)
[17:40:30.914]                           })
[17:40:30.914]                       }
[17:40:30.914]                     }, args = future.call.arguments)
[17:40:30.914]                   }
[17:40:30.914]                 }, immediateCondition = function(cond) {
[17:40:30.914]                   sendCondition <- ...future.makeSendCondition()
[17:40:30.914]                   sendCondition(cond)
[17:40:30.914]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.914]                   {
[17:40:30.914]                     inherits <- base::inherits
[17:40:30.914]                     invokeRestart <- base::invokeRestart
[17:40:30.914]                     is.null <- base::is.null
[17:40:30.914]                     muffled <- FALSE
[17:40:30.914]                     if (inherits(cond, "message")) {
[17:40:30.914]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:30.914]                       if (muffled) 
[17:40:30.914]                         invokeRestart("muffleMessage")
[17:40:30.914]                     }
[17:40:30.914]                     else if (inherits(cond, "warning")) {
[17:40:30.914]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:30.914]                       if (muffled) 
[17:40:30.914]                         invokeRestart("muffleWarning")
[17:40:30.914]                     }
[17:40:30.914]                     else if (inherits(cond, "condition")) {
[17:40:30.914]                       if (!is.null(pattern)) {
[17:40:30.914]                         computeRestarts <- base::computeRestarts
[17:40:30.914]                         grepl <- base::grepl
[17:40:30.914]                         restarts <- computeRestarts(cond)
[17:40:30.914]                         for (restart in restarts) {
[17:40:30.914]                           name <- restart$name
[17:40:30.914]                           if (is.null(name)) 
[17:40:30.914]                             next
[17:40:30.914]                           if (!grepl(pattern, name)) 
[17:40:30.914]                             next
[17:40:30.914]                           invokeRestart(restart)
[17:40:30.914]                           muffled <- TRUE
[17:40:30.914]                           break
[17:40:30.914]                         }
[17:40:30.914]                       }
[17:40:30.914]                     }
[17:40:30.914]                     invisible(muffled)
[17:40:30.914]                   }
[17:40:30.914]                   muffleCondition(cond)
[17:40:30.914]                 })
[17:40:30.914]             }))
[17:40:30.914]             future::FutureResult(value = ...future.value$value, 
[17:40:30.914]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.914]                   ...future.rng), globalenv = if (FALSE) 
[17:40:30.914]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:30.914]                     ...future.globalenv.names))
[17:40:30.914]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:30.914]         }, condition = base::local({
[17:40:30.914]             c <- base::c
[17:40:30.914]             inherits <- base::inherits
[17:40:30.914]             invokeRestart <- base::invokeRestart
[17:40:30.914]             length <- base::length
[17:40:30.914]             list <- base::list
[17:40:30.914]             seq.int <- base::seq.int
[17:40:30.914]             signalCondition <- base::signalCondition
[17:40:30.914]             sys.calls <- base::sys.calls
[17:40:30.914]             `[[` <- base::`[[`
[17:40:30.914]             `+` <- base::`+`
[17:40:30.914]             `<<-` <- base::`<<-`
[17:40:30.914]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:30.914]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:30.914]                   3L)]
[17:40:30.914]             }
[17:40:30.914]             function(cond) {
[17:40:30.914]                 is_error <- inherits(cond, "error")
[17:40:30.914]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:30.914]                   NULL)
[17:40:30.914]                 if (is_error) {
[17:40:30.914]                   sessionInformation <- function() {
[17:40:30.914]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:30.914]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:30.914]                       search = base::search(), system = base::Sys.info())
[17:40:30.914]                   }
[17:40:30.914]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.914]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:30.914]                     cond$call), session = sessionInformation(), 
[17:40:30.914]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:30.914]                   signalCondition(cond)
[17:40:30.914]                 }
[17:40:30.914]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:30.914]                 "immediateCondition"))) {
[17:40:30.914]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:30.914]                   ...future.conditions[[length(...future.conditions) + 
[17:40:30.914]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:30.914]                   if (TRUE && !signal) {
[17:40:30.914]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.914]                     {
[17:40:30.914]                       inherits <- base::inherits
[17:40:30.914]                       invokeRestart <- base::invokeRestart
[17:40:30.914]                       is.null <- base::is.null
[17:40:30.914]                       muffled <- FALSE
[17:40:30.914]                       if (inherits(cond, "message")) {
[17:40:30.914]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.914]                         if (muffled) 
[17:40:30.914]                           invokeRestart("muffleMessage")
[17:40:30.914]                       }
[17:40:30.914]                       else if (inherits(cond, "warning")) {
[17:40:30.914]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.914]                         if (muffled) 
[17:40:30.914]                           invokeRestart("muffleWarning")
[17:40:30.914]                       }
[17:40:30.914]                       else if (inherits(cond, "condition")) {
[17:40:30.914]                         if (!is.null(pattern)) {
[17:40:30.914]                           computeRestarts <- base::computeRestarts
[17:40:30.914]                           grepl <- base::grepl
[17:40:30.914]                           restarts <- computeRestarts(cond)
[17:40:30.914]                           for (restart in restarts) {
[17:40:30.914]                             name <- restart$name
[17:40:30.914]                             if (is.null(name)) 
[17:40:30.914]                               next
[17:40:30.914]                             if (!grepl(pattern, name)) 
[17:40:30.914]                               next
[17:40:30.914]                             invokeRestart(restart)
[17:40:30.914]                             muffled <- TRUE
[17:40:30.914]                             break
[17:40:30.914]                           }
[17:40:30.914]                         }
[17:40:30.914]                       }
[17:40:30.914]                       invisible(muffled)
[17:40:30.914]                     }
[17:40:30.914]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.914]                   }
[17:40:30.914]                 }
[17:40:30.914]                 else {
[17:40:30.914]                   if (TRUE) {
[17:40:30.914]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:30.914]                     {
[17:40:30.914]                       inherits <- base::inherits
[17:40:30.914]                       invokeRestart <- base::invokeRestart
[17:40:30.914]                       is.null <- base::is.null
[17:40:30.914]                       muffled <- FALSE
[17:40:30.914]                       if (inherits(cond, "message")) {
[17:40:30.914]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:30.914]                         if (muffled) 
[17:40:30.914]                           invokeRestart("muffleMessage")
[17:40:30.914]                       }
[17:40:30.914]                       else if (inherits(cond, "warning")) {
[17:40:30.914]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:30.914]                         if (muffled) 
[17:40:30.914]                           invokeRestart("muffleWarning")
[17:40:30.914]                       }
[17:40:30.914]                       else if (inherits(cond, "condition")) {
[17:40:30.914]                         if (!is.null(pattern)) {
[17:40:30.914]                           computeRestarts <- base::computeRestarts
[17:40:30.914]                           grepl <- base::grepl
[17:40:30.914]                           restarts <- computeRestarts(cond)
[17:40:30.914]                           for (restart in restarts) {
[17:40:30.914]                             name <- restart$name
[17:40:30.914]                             if (is.null(name)) 
[17:40:30.914]                               next
[17:40:30.914]                             if (!grepl(pattern, name)) 
[17:40:30.914]                               next
[17:40:30.914]                             invokeRestart(restart)
[17:40:30.914]                             muffled <- TRUE
[17:40:30.914]                             break
[17:40:30.914]                           }
[17:40:30.914]                         }
[17:40:30.914]                       }
[17:40:30.914]                       invisible(muffled)
[17:40:30.914]                     }
[17:40:30.914]                     muffleCondition(cond, pattern = "^muffle")
[17:40:30.914]                   }
[17:40:30.914]                 }
[17:40:30.914]             }
[17:40:30.914]         }))
[17:40:30.914]     }, error = function(ex) {
[17:40:30.914]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:30.914]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:30.914]                 ...future.rng), started = ...future.startTime, 
[17:40:30.914]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:30.914]             version = "1.8"), class = "FutureResult")
[17:40:30.914]     }, finally = {
[17:40:30.914]         if (!identical(...future.workdir, getwd())) 
[17:40:30.914]             setwd(...future.workdir)
[17:40:30.914]         {
[17:40:30.914]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:30.914]                 ...future.oldOptions$nwarnings <- NULL
[17:40:30.914]             }
[17:40:30.914]             base::options(...future.oldOptions)
[17:40:30.914]             if (.Platform$OS.type == "windows") {
[17:40:30.914]                 old_names <- names(...future.oldEnvVars)
[17:40:30.914]                 envs <- base::Sys.getenv()
[17:40:30.914]                 names <- names(envs)
[17:40:30.914]                 common <- intersect(names, old_names)
[17:40:30.914]                 added <- setdiff(names, old_names)
[17:40:30.914]                 removed <- setdiff(old_names, names)
[17:40:30.914]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:30.914]                   envs[common]]
[17:40:30.914]                 NAMES <- toupper(changed)
[17:40:30.914]                 args <- list()
[17:40:30.914]                 for (kk in seq_along(NAMES)) {
[17:40:30.914]                   name <- changed[[kk]]
[17:40:30.914]                   NAME <- NAMES[[kk]]
[17:40:30.914]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.914]                     next
[17:40:30.914]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.914]                 }
[17:40:30.914]                 NAMES <- toupper(added)
[17:40:30.914]                 for (kk in seq_along(NAMES)) {
[17:40:30.914]                   name <- added[[kk]]
[17:40:30.914]                   NAME <- NAMES[[kk]]
[17:40:30.914]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.914]                     next
[17:40:30.914]                   args[[name]] <- ""
[17:40:30.914]                 }
[17:40:30.914]                 NAMES <- toupper(removed)
[17:40:30.914]                 for (kk in seq_along(NAMES)) {
[17:40:30.914]                   name <- removed[[kk]]
[17:40:30.914]                   NAME <- NAMES[[kk]]
[17:40:30.914]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:30.914]                     next
[17:40:30.914]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:30.914]                 }
[17:40:30.914]                 if (length(args) > 0) 
[17:40:30.914]                   base::do.call(base::Sys.setenv, args = args)
[17:40:30.914]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:30.914]             }
[17:40:30.914]             else {
[17:40:30.914]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:30.914]             }
[17:40:30.914]             {
[17:40:30.914]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:30.914]                   0L) {
[17:40:30.914]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:30.914]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:30.914]                   base::options(opts)
[17:40:30.914]                 }
[17:40:30.914]                 {
[17:40:30.914]                   {
[17:40:30.914]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:30.914]                     NULL
[17:40:30.914]                   }
[17:40:30.914]                   options(future.plan = NULL)
[17:40:30.914]                   if (is.na(NA_character_)) 
[17:40:30.914]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:30.914]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:30.914]                   future::plan(list(function (..., workers = availableCores(), 
[17:40:30.914]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:40:30.914]                     envir = parent.frame()) 
[17:40:30.914]                   {
[17:40:30.914]                     if (is.function(workers)) 
[17:40:30.914]                       workers <- workers()
[17:40:30.914]                     workers <- structure(as.integer(workers), 
[17:40:30.914]                       class = class(workers))
[17:40:30.914]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:40:30.914]                       workers >= 1)
[17:40:30.914]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:40:30.914]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:40:30.914]                     }
[17:40:30.914]                     future <- MultisessionFuture(..., workers = workers, 
[17:40:30.914]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:40:30.914]                       envir = envir)
[17:40:30.914]                     if (!future$lazy) 
[17:40:30.914]                       future <- run(future)
[17:40:30.914]                     invisible(future)
[17:40:30.914]                   }), .cleanup = FALSE, .init = FALSE)
[17:40:30.914]                 }
[17:40:30.914]             }
[17:40:30.914]         }
[17:40:30.914]     })
[17:40:30.914]     if (TRUE) {
[17:40:30.914]         base::sink(type = "output", split = FALSE)
[17:40:30.914]         if (TRUE) {
[17:40:30.914]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:30.914]         }
[17:40:30.914]         else {
[17:40:30.914]             ...future.result["stdout"] <- base::list(NULL)
[17:40:30.914]         }
[17:40:30.914]         base::close(...future.stdout)
[17:40:30.914]         ...future.stdout <- NULL
[17:40:30.914]     }
[17:40:30.914]     ...future.result$conditions <- ...future.conditions
[17:40:30.914]     ...future.result$finished <- base::Sys.time()
[17:40:30.914]     ...future.result
[17:40:30.914] }
[17:40:30.917] Exporting 7 global objects (2.15 KiB) to cluster node #2 ...
[17:40:30.917] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ...
[17:40:30.917] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ... DONE
[17:40:30.917] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ...
[17:40:30.918] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ... DONE
[17:40:30.918] Exporting ‘x’ (56 bytes) to cluster node #2 ...
[17:40:30.918] Exporting ‘x’ (56 bytes) to cluster node #2 ... DONE
[17:40:30.918] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:40:30.919] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:40:30.919] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:40:30.919] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:40:30.920] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:40:30.920] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:40:30.920] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:40:30.920] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:40:30.920] Exporting 7 global objects (2.15 KiB) to cluster node #2 ... DONE
[17:40:30.921] MultisessionFuture started
[17:40:30.921] - Launch lazy future ... done
[17:40:30.921] run() for ‘MultisessionFuture’ ... done
[17:40:30.922] Created future:
[17:40:30.922] MultisessionFuture:
[17:40:30.922] Label: ‘future_replicate-2’
[17:40:30.922] Expression:
[17:40:30.922] {
[17:40:30.922]     do.call(function(...) {
[17:40:30.922]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:40:30.922]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:40:30.922]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:40:30.922]             on.exit(options(oopts), add = TRUE)
[17:40:30.922]         }
[17:40:30.922]         {
[17:40:30.922]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:40:30.922]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:40:30.922]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:40:30.922]                   envir = globalenv(), inherits = FALSE)
[17:40:30.922]                 ...future.FUN(...future.X_jj, ...)
[17:40:30.922]             })
[17:40:30.922]         }
[17:40:30.922]     }, args = future.call.arguments)
[17:40:30.922] }
[17:40:30.922] Lazy evaluation: FALSE
[17:40:30.922] Asynchronous evaluation: TRUE
[17:40:30.922] Local evaluation: TRUE
[17:40:30.922] Environment: 0x558a3c592b60
[17:40:30.922] Capture standard output: TRUE
[17:40:30.922] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:30.922] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[17:40:30.922] Packages: <none>
[17:40:30.922] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:40:30.922] Resolved: FALSE
[17:40:30.922] Value: <not collected>
[17:40:30.922] Conditions captured: <none>
[17:40:30.922] Early signaling: FALSE
[17:40:30.922] Owner process: bde9ebc1-8349-4ef7-ab43-864e03c757cb
[17:40:30.922] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:30.934] Chunk #2 of 2 ... DONE
[17:40:30.934] Launching 2 futures (chunks) ... DONE
[17:40:30.934] Resolving 2 futures (chunks) ...
[17:40:30.934] resolve() on list ...
[17:40:30.934]  recursive: 0
[17:40:30.934]  length: 2
[17:40:30.934] 
[17:40:30.935] receiveMessageFromWorker() for ClusterFuture ...
[17:40:30.935] - Validating connection of MultisessionFuture
[17:40:30.935] - received message: FutureResult
[17:40:30.935] - Received FutureResult
[17:40:30.936] - Erased future from FutureRegistry
[17:40:30.936] result() for ClusterFuture ...
[17:40:30.936] - result already collected: FutureResult
[17:40:30.936] result() for ClusterFuture ... done
[17:40:30.936] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:30.936] Future #1
[17:40:30.936] result() for ClusterFuture ...
[17:40:30.936] - result already collected: FutureResult
[17:40:30.936] result() for ClusterFuture ... done
[17:40:30.936] result() for ClusterFuture ...
[17:40:30.936] - result already collected: FutureResult
[17:40:30.937] result() for ClusterFuture ... done
[17:40:30.937] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:40:30.937] - nx: 2
[17:40:30.937] - relay: TRUE
[17:40:30.937] - stdout: TRUE
[17:40:30.937] - signal: TRUE
[17:40:30.937] - resignal: FALSE
[17:40:30.937] - force: TRUE
[17:40:30.937] - relayed: [n=2] FALSE, FALSE
[17:40:30.937] - queued futures: [n=2] FALSE, FALSE
[17:40:30.937]  - until=1
[17:40:30.938]  - relaying element #1
[17:40:30.938] result() for ClusterFuture ...
[17:40:30.938] - result already collected: FutureResult
[17:40:30.938] result() for ClusterFuture ... done
[17:40:30.938] result() for ClusterFuture ...
[17:40:30.938] - result already collected: FutureResult
[17:40:30.938] result() for ClusterFuture ... done
[17:40:30.938] result() for ClusterFuture ...
[17:40:30.938] - result already collected: FutureResult
[17:40:30.938] result() for ClusterFuture ... done
[17:40:30.938] result() for ClusterFuture ...
[17:40:30.939] - result already collected: FutureResult
[17:40:30.939] result() for ClusterFuture ... done
[17:40:30.939] - relayed: [n=2] TRUE, FALSE
[17:40:30.939] - queued futures: [n=2] TRUE, FALSE
[17:40:30.939] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:40:30.939]  length: 1 (resolved future 1)
[17:40:30.968] receiveMessageFromWorker() for ClusterFuture ...
[17:40:30.968] - Validating connection of MultisessionFuture
[17:40:30.968] - received message: FutureResult
[17:40:30.969] - Received FutureResult
[17:40:30.969] - Erased future from FutureRegistry
[17:40:30.969] result() for ClusterFuture ...
[17:40:30.969] - result already collected: FutureResult
[17:40:30.969] result() for ClusterFuture ... done
[17:40:30.969] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:30.969] Future #2
[17:40:30.970] result() for ClusterFuture ...
[17:40:30.970] - result already collected: FutureResult
[17:40:30.970] result() for ClusterFuture ... done
[17:40:30.970] result() for ClusterFuture ...
[17:40:30.970] - result already collected: FutureResult
[17:40:30.970] result() for ClusterFuture ... done
[17:40:30.970] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:40:30.970] - nx: 2
[17:40:30.970] - relay: TRUE
[17:40:30.970] - stdout: TRUE
[17:40:30.970] - signal: TRUE
[17:40:30.971] - resignal: FALSE
[17:40:30.971] - force: TRUE
[17:40:30.971] - relayed: [n=2] TRUE, FALSE
[17:40:30.971] - queued futures: [n=2] TRUE, FALSE
[17:40:30.971]  - until=2
[17:40:30.971]  - relaying element #2
[17:40:30.971] result() for ClusterFuture ...
[17:40:30.971] - result already collected: FutureResult
[17:40:30.971] result() for ClusterFuture ... done
[17:40:30.971] result() for ClusterFuture ...
[17:40:30.972] - result already collected: FutureResult
[17:40:30.972] result() for ClusterFuture ... done
[17:40:30.972] result() for ClusterFuture ...
[17:40:30.972] - result already collected: FutureResult
[17:40:30.972] result() for ClusterFuture ... done
[17:40:30.972] result() for ClusterFuture ...
[17:40:30.972] - result already collected: FutureResult
[17:40:30.972] result() for ClusterFuture ... done
[17:40:30.972] - relayed: [n=2] TRUE, TRUE
[17:40:30.972] - queued futures: [n=2] TRUE, TRUE
[17:40:30.972] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:40:30.973]  length: 0 (resolved future 2)
[17:40:30.973] Relaying remaining futures
[17:40:30.973] signalConditionsASAP(NULL, pos=0) ...
[17:40:30.973] - nx: 2
[17:40:30.973] - relay: TRUE
[17:40:30.973] - stdout: TRUE
[17:40:30.973] - signal: TRUE
[17:40:30.973] - resignal: FALSE
[17:40:30.973] - force: TRUE
[17:40:30.973] - relayed: [n=2] TRUE, TRUE
[17:40:30.973] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:40:30.974] - relayed: [n=2] TRUE, TRUE
[17:40:30.974] - queued futures: [n=2] TRUE, TRUE
[17:40:30.974] signalConditionsASAP(NULL, pos=0) ... done
[17:40:30.974] resolve() on list ... DONE
[17:40:30.974] result() for ClusterFuture ...
[17:40:30.974] - result already collected: FutureResult
[17:40:30.974] result() for ClusterFuture ... done
[17:40:30.974] result() for ClusterFuture ...
[17:40:30.974] - result already collected: FutureResult
[17:40:30.974] result() for ClusterFuture ... done
[17:40:30.974] result() for ClusterFuture ...
[17:40:30.975] - result already collected: FutureResult
[17:40:30.975] result() for ClusterFuture ... done
[17:40:30.975] result() for ClusterFuture ...
[17:40:30.975] - result already collected: FutureResult
[17:40:30.975] result() for ClusterFuture ... done
[17:40:30.975]  - Number of value chunks collected: 2
[17:40:30.975] Resolving 2 futures (chunks) ... DONE
[17:40:30.975] Reducing values from 2 chunks ...
[17:40:30.975]  - Number of values collected after concatenation: 5
[17:40:30.975]  - Number of values expected: 5
[17:40:30.976] Reducing values from 2 chunks ... DONE
[17:40:30.976] future_lapply() ... DONE
[17:40:30.976] plan(): Setting new future strategy stack:
[17:40:30.976] List of future strategies:
[17:40:30.976] 1. sequential:
[17:40:30.976]    - args: function (..., envir = parent.frame())
[17:40:30.976]    - tweaked: FALSE
[17:40:30.976]    - call: plan(sequential)
[17:40:30.977] plan(): nbrOfWorkers() = 1
*** strategy = ‘multisession’ ... done
> 
> message("*** future_replicate() ... DONE")
*** future_replicate() ... DONE
> 
> source("incl/end.R")
[17:40:30.978] plan(): Setting new future strategy stack:
[17:40:30.978] List of future strategies:
[17:40:30.978] 1. FutureStrategy:
[17:40:30.978]    - args: function (..., envir = parent.frame())
[17:40:30.978]    - tweaked: FALSE
[17:40:30.978]    - call: future::plan(oplan)
[17:40:30.978] plan(): nbrOfWorkers() = 1
> 
