
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start,load-only.R")
[13:19:27.392] Set package option ‘parallelly.availableCores.methods’
[13:19:27.393] Environment variable ‘R_PARALLELLY_AVAILABLECORES_METHODS’ not set
[13:19:27.393] Set package option ‘parallelly.availableCores.fallback’
[13:19:27.393] Environment variable ‘R_PARALLELLY_AVAILABLECORES_FALLBACK’ not set
[13:19:27.394] Set package option ‘parallelly.availableCores.min’
[13:19:27.394] Environment variable ‘R_PARALLELLY_AVAILABLECORES_MIN’ not set
[13:19:27.394] Set package option ‘parallelly.availableCores.system’
[13:19:27.395] Environment variable ‘R_PARALLELLY_AVAILABLECORES_SYSTEM’ not set
[13:19:27.395] Set package option ‘parallelly.availableCores.logical’
[13:19:27.395] Environment variable ‘R_PARALLELLY_AVAILABLECORES_LOGICAL’ not set
[13:19:27.395] Set package option ‘parallelly.availableCores.omit’
[13:19:27.396] Environment variable ‘R_PARALLELLY_AVAILABLECORES_OMIT’ not set
[13:19:27.396] Set package option ‘parallelly.availableWorkers.methods’
[13:19:27.401] Environment variable ‘R_PARALLELLY_AVAILABLEWORKERS_METHODS’ not set
[13:19:27.401] Set package option ‘parallelly.fork.enable’
[13:19:27.401] Environment variable ‘R_PARALLELLY_FORK_ENABLE’ not set
[13:19:27.401] Set package option ‘parallelly.supportsMulticore.disableOn’
[13:19:27.402] Environment variable ‘R_PARALLELLY_SUPPORTSMULTICORE_DISABLEON’ not set
[13:19:27.402] Set package option ‘parallelly.supportsMulticore.unstable’
[13:19:27.402] Environment variable ‘R_PARALLELLY_SUPPORTSMULTICORE_UNSTABLE’ not set
[13:19:27.402] Set package option ‘parallelly.makeNodePSOCK.setup_strategy’
[13:19:27.403] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_SETUP_STRATEGY’ not set
[13:19:27.403] Set package option ‘parallelly.makeNodePSOCK.validate’
[13:19:27.403] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_VALIDATE’ not set
[13:19:27.403] Set package option ‘parallelly.makeNodePSOCK.connectTimeout’
[13:19:27.404] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_CONNECTTIMEOUT’ not set
[13:19:27.404] Set package option ‘parallelly.makeNodePSOCK.timeout’
[13:19:27.404] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_TIMEOUT’ not set
[13:19:27.405] Set package option ‘parallelly.makeNodePSOCK.useXDR’
[13:19:27.405] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_USEXDR’ not set
[13:19:27.405] Set package option ‘parallelly.makeNodePSOCK.socketOptions’
[13:19:27.405] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_SOCKETOPTIONS’ not set
[13:19:27.406] Set package option ‘parallelly.makeNodePSOCK.rshcmd’
[13:19:27.406] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_RSHCMD’ not set
[13:19:27.406] Set package option ‘parallelly.makeNodePSOCK.rshopts’
[13:19:27.406] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_RSHOPTS’ not set
[13:19:27.407] Set package option ‘parallelly.makeNodePSOCK.tries’
[13:19:27.407] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_TRIES’ not set
[13:19:27.407] Set package option ‘parallelly.makeNodePSOCK.tries.delay’
[13:19:27.407] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_TRIES_DELAY’ not set
[13:19:27.408] Set package option ‘parallelly.makeNodePSOCK.rscript_label’
[13:19:27.408] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_RSCRIPT_LABEL’ not set
[13:19:27.408] Set package option ‘parallelly.makeNodePSOCK.sessionInfo.pkgs’
[13:19:27.408] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_SESSIONINFO_PKGS’ not set
[13:19:27.409] Set package option ‘parallelly.makeNodePSOCK.autoKill’
[13:19:27.409] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_AUTOKILL’ not set
[13:19:27.409] Set package option ‘parallelly.makeNodePSOCK.master.localhost.hostname’
[13:19:27.409] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_MASTER_LOCALHOST_HOSTNAME’ not set
[13:19:27.409] Set package option ‘parallelly.makeNodePSOCK.port.increment’
[13:19:27.409] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_PORT_INCREMENT’ not set
[13:19:27.410] parallelly-specific environment variables:
[13:19:27.416] Future-specific environment variables:
[13:19:27.416] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:19:27.416] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:19:27.417] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:19:27.417] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:19:27.417] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:19:27.417] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:19:27.417] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:19:27.417] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:19:27.417] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:19:27.417] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:19:27.417] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:19:27.418] Environment variable ‘R_FUTURE_PLAN’ not set
[13:19:27.418] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:19:27.418] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:19:27.418] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:19:27.418] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:19:27.418] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:19:27.418] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:19:27.418] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:19:27.418] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:19:27.419] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:19:27.419] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:19:27.419] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:19:27.419] Environment variable ‘R_FUTURE_WAIT_INTERVAL’ not set
[13:19:27.419] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:19:27.419] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:19:27.419] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:19:27.419] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:19:27.419] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:19:27.419] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:19:27.420] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:19:27.420] R process uuid: 7c07b971-ff60-d3c8-1d9d-b703c24f224f
[13:19:27.421] Setting plan('default')
[13:19:27.421] plan(): Setting new future strategy stack:
[13:19:27.421] List of future strategies:
[13:19:27.421] 1. sequential:
[13:19:27.421]    - args: function (..., envir = parent.frame())
[13:19:27.421]    - tweaked: FALSE
[13:19:27.421]    - call: NULL
[13:19:27.441] plan(): nbrOfWorkers() = 1
[13:19:27.456] plan(): Setting new future strategy stack:
[13:19:27.456] List of future strategies:
[13:19:27.456] 1. sequential:
[13:19:27.456]    - args: function (..., envir = parent.frame())
[13:19:27.456]    - tweaked: FALSE
[13:19:27.456]    - call: future::plan("sequential")
[13:19:27.466] plan(): nbrOfWorkers() = 1
> stop_if_not <- future.apply:::stop_if_not
> 
> message("*** utils ...")
*** utils ...
> 
> message("*** hpaste() ...")
*** hpaste() ...
> 
> # Some vectors
> x <- 1:6
> y <- 10:1
> z <- LETTERS[x]
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Abbreviation of output vector
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> printf("x = %s.\n", hpaste(x))
x = 1, 2, 3, 4, 5, 6.
> ## x = 1, 2, 3, ..., 6.
> 
> printf("x = %s.\n", hpaste(x, maxHead = 2))
x = 1, 2, ..., 6.
> ## x = 1, 2, ..., 6.
> 
> printf("x = %s.\n", hpaste(x, maxHead = 3)) # Default
x = 1, 2, 3, ..., 6.
> ## x = 1, 2, 3, ..., 6.
> 
> # It will never output 1, 2, 3, 4, ..., 6
> printf("x = %s.\n", hpaste(x, maxHead = 4))
x = 1, 2, 3, 4, 5, 6.
> ## x = 1, 2, 3, 4, 5 and 6.
> 
> # Showing the tail
> printf("x = %s.\n", hpaste(x, maxHead = 1, maxTail = 2))
x = 1, ..., 5, 6.
> ## x = 1, ..., 5, 6.
> 
> # Turning off abbreviation
> printf("y = %s.\n", hpaste(y, maxHead = Inf))
y = 10, 9, 8, 7, 6, 5, 4, 3, 2, 1.
> ## y = 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
> 
> ## ...or simply
> printf("y = %s.\n", paste(y, collapse = ", "))
y = 10, 9, 8, 7, 6, 5, 4, 3, 2, 1.
> ## y = 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
> 
> # Change last separator
> printf("x = %s.\n", hpaste(x, lastCollapse = " and "))
x = 1, 2, 3, 4, 5 and 6.
> ## x = 1, 2, 3, 4, 5 and 6.
> 
> # No collapse
> stopifnot(all(hpaste(x, collapse = NULL) == x))
> 
> # Empty input
> stopifnot(identical(hpaste(character(0)), character(0)))
> 
> message("*** hpaste() ...")
*** hpaste() ...
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # debug()
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> message("*** mdebug() ...")
*** mdebug() ...
> 
> mdebug("Hello #", 1)
[13:19:27.480] Hello #1
> mdebugf("Hello #%d", 1)
[13:19:27.481] Hello #1
> options(future.debug = TRUE)
> 
> mdebug("Hello #", 2)
[13:19:27.481] Hello #2
> mdebugf("Hello #%d", 2)
[13:19:27.481] Hello #2
> options(future.debug = FALSE)
> 
> mdebug("Hello #", 3)
NULL
> mdebugf("Hello #%d", 3)
NULL
> 
> message("*** mdebug() ... DONE")
*** mdebug() ... DONE
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # import_from()
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> message("*** import_from() ...")
*** import_from() ...
> 
> obj <- import_from("non-existing-fcn", default = NA, package = "future")
> stopifnot(identical(obj, NA))
> 
> res <- tryCatch({
+   obj <- import_from("non-existing-fcn", package = "future")
+ }, error = identity)
> print(res)
<simpleError: No such 'future' function: non-existing-fcn()>
> stopifnot(inherits(res, "simpleError"))
> 
> message("*** import_from() ... DONE")
*** import_from() ... DONE
> 
> 
> message("*** stop_if_not() ...")
*** stop_if_not() ...
> 
> stop_if_not(TRUE)
NULL
> stop_if_not(TRUE, TRUE)
NULL
> res <- tryCatch({
+   stop_if_not(FALSE)
+ }, error = identity)
> stopifnot(inherits(res, "simpleError"))
> res <- tryCatch({
+   stop_if_not(list(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE))
+ }, error = identity)
> stopifnot(inherits(res, "simpleError"))
> 
> message("*** stop_if_not() ... DONE")
*** stop_if_not() ... DONE
> 
> 
> message("*** assert_values2() ...")
*** assert_values2() ...
> 
> assert_values2 <- future.apply:::assert_values2
> assert_values2(nX = 2L, values2 = as.list(1:2))
> res <- tryCatch({
+   assert_values2(nX = 1L, values = as.list(1:2), values2 = as.list(1:2), fcn = "tests", debug = TRUE)
+ }, error = identity)
> stopifnot(inherits(res, "FutureError"))
> 
> message("*** assert_values2() ... DONE")
*** assert_values2() ... DONE
> 
> 
> message("*** utils ... DONE")
*** utils ... DONE
> 
> source("incl/end.R")
> 
