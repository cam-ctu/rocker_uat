
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
            a           b          c          d           e          f
A  1.07000465  2.49547344  1.4086140  0.4612477 -0.74468557 -0.2223391
B  0.13897438  0.09958196 -0.7144440  0.4081933 -1.80668243  1.0386615
C  0.33077630 -1.39142381  0.5482252  0.9235319 -0.68423905 -1.4115672
D  1.21002672 -0.02013381 -0.6283484  0.5568339  0.05171602 -0.9126799
E -1.38010255  0.48589381  0.1197961 -2.4676801 -0.94636713  0.8650821
F  0.05110231  0.45931824  0.2343952  0.6473224 -0.08537294  0.4771369
G  0.04332718  0.08691612 -1.6157356  0.1740073 -2.00487716  1.2043881
H -1.28528361  0.58981514  0.6062743 -0.3878635 -0.69450685 -0.5084737
I  0.37024941 -1.08458392 -0.6752634  0.3634062 -1.47772068  0.3247774
J -0.49042087 -0.51817283 -1.7277709  0.9951292  0.43245598 -0.3301528
K -1.79395740  1.98170458 -0.9339060  0.7686962 -0.06821772 -1.4316347
L  0.79553494 -0.31941500  0.1204328 -0.2496402 -0.06513099  1.7171022
M -2.41211340  0.18435892 -0.4994413  1.6754366  0.89523728 -1.3177917
N -1.05505751  0.69578558 -0.6323223 -0.3205073  1.12486452  0.7286863
O  1.11447534 -0.18306829  0.4181104 -0.1923359  0.10028819  0.6416585
P -2.08246085 -0.15687175 -0.4350288 -0.3916322 -1.45749905 -1.3424724
Q -0.62653743 -0.64522324  0.1652669  0.4772024  0.35318915  0.7489206
R -0.42450215  0.56889952  0.9262495  1.3511763  1.83669694 -0.5338630
S  2.44104845  0.80583982  0.1648294  1.1150576 -1.07257870 -0.5680073
T -0.49291636 -1.01912900 -0.5313072  1.0608648  1.78369183 -1.3156960
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
           s1          s2          s3
A  1.78273904  0.93493084 -0.48351232
B  0.11927817 -0.15312535 -0.38401047
C -0.53032375  0.73587854 -1.04790312
D  0.59494646 -0.03575724 -0.43048194
E -0.44710437 -1.17394197 -0.04064253
F  0.25521027  0.44085880  0.19588196
G  0.06512165 -0.72086413 -0.40024452
H -0.34773424  0.10920541 -0.60149029
I -0.35716725 -0.15592862 -0.57647164
J -0.50429685 -0.36632085  0.05115158
K  0.09387359 -0.08260488 -0.74992620
L  0.23805997 -0.06460367  0.82598562
M -1.11387724  0.58799765 -0.21127719
N -0.17963596 -0.47641478  0.92677542
O  0.46570353  0.11288723  0.37097337
P -1.11966630 -0.41333048 -1.39998572
Q -0.63588034  0.32123463  0.55105488
R  0.07219869  1.13871288  0.65141698
S  1.62344413  0.63994351 -0.82029301
T -0.75602268  0.26477880  0.23399791
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
            a           b          c          d          e           f
s1  0.6874455  0.29587444  0.1535117  0.5874517 -0.7959728 -0.37698117
s2 -0.6427392  0.40548583 -0.1638175 -0.5085535 -0.9327810  0.50953333
s3 -0.2796485  0.01488321 -0.8041269  0.4693979 -0.2946534  0.07002304
s4 -1.1087891  0.13505111 -0.2871705  0.1927403  0.1657227 -0.32247980
s5  0.2242731 -0.07240323  0.1812596  1.0010753  0.7252498 -0.41716143
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A  0.74471919
B -0.13928588
C -0.28078278
D  0.04290242
E -0.55389629
F  0.29731701
G -0.35199567
H -0.28000637
I -0.36318917
J -0.27315537
K -0.24621916
L  0.33314731
M -0.24571893
N  0.09024156
O  0.31652138
P -0.97766083
Q  0.07880306
R  0.62077618
S  0.48103154
T -0.08574866
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
            a         b          c         d          e          f
s1 -0.2238916 0.1557783 -0.1840687 0.3484223 -0.2264869 -0.1074132
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
           s1          s2          s3
A  1.78273904  0.93493084 -0.48351232
B  0.11927817 -0.15312535 -0.38401047
C -0.53032375  0.73587854 -1.04790312
D  0.59494646 -0.03575724 -0.43048194
E -0.44710437 -1.17394197 -0.04064253
F  0.25521027  0.44085880  0.19588196
G  0.06512165 -0.72086413 -0.40024452
H -0.34773424  0.10920541 -0.60149029
I -0.35716725 -0.15592862 -0.57647164
J -0.50429685 -0.36632085  0.05115158
K  0.09387359 -0.08260488 -0.74992620
L  0.23805997 -0.06460367  0.82598562
M -1.11387724  0.58799765 -0.21127719
N -0.17963596 -0.47641478  0.92677542
O  0.46570353  0.11288723  0.37097337
P -1.11966630 -0.41333048 -1.39998572
Q -0.63588034  0.32123463  0.55105488
R  0.07219869  1.13871288  0.65141698
S  1.62344413  0.63994351 -0.82029301
T -0.75602268  0.26477880  0.23399791
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
            a          b           c          d          e          f
s1  0.6044895  1.2975277  0.34708497  0.4347205 -1.2756840  0.4081612
s2  0.7704015 -0.7057788 -0.04006158  0.7401829 -0.3162615 -1.1621235
s3 -0.6645001  0.4726060  0.17709569 -0.9101789 -0.5158700  0.6711095
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
