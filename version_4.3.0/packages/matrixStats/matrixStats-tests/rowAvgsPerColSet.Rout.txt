
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
             a           b           c           d           e           f
A -0.256812732  2.17664834  1.76326548  0.13275075 -0.79742883  1.80800090
B  0.936157607  0.21845813  0.49134644  0.94146364  1.32794179 -0.24054351
C  1.979954558 -0.88985412 -2.01535607  0.84883267 -0.14853577 -0.23093019
D -1.326921684 -0.46310631  2.93370465 -0.51034728  0.45714543  0.71418721
E -0.497511800 -1.74337951  0.21947023 -1.22587102  0.36209981  0.37587474
F  2.021917908 -0.36900937 -0.61505818  0.45481147 -0.27327648 -2.16259893
G -0.472044608 -1.54083048  0.11562796 -1.10760649  0.28290518  1.10465476
H  0.006369927 -0.01073192  0.82422693  1.42278751  0.31682970 -0.02993397
I  2.100426464  0.05443301  0.32015036 -1.01941463  0.06059213 -1.17244418
J -0.053290195  0.41987547  0.51012149 -0.91637898 -0.94468080 -0.44051886
K  0.816396348  0.75745716 -0.56558761  1.30517266  0.72793471  0.94142226
L -0.295419493 -0.30292906  1.03561956  0.07171418  0.07084408  0.05048228
M  1.248130308 -0.22927497 -1.42450668  0.74812782  0.45826621  0.10395791
N -0.838468608  1.04031224  0.82442080  0.46472027 -1.60598423 -0.51825810
O -0.165107269  0.28921511  0.38652510  0.45226158 -0.65456090  1.02092122
P -1.805191520  1.38772642  0.47772639  0.14268790  0.16095974  1.06499348
Q -1.166478953  1.34479902  0.06150989 -0.25323923  0.35091250 -0.93953682
R -1.251993428 -0.63361652  1.36410852  0.70612881 -0.19162402  1.68143735
S  0.132503594  1.13914759  0.32940214 -0.63981732 -0.18985593  1.30181131
T  0.508271972  0.46151424  0.65533582  0.13548957  0.55191302  0.08922326
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
            s1          s2          s3
A  0.959917806  0.94800812  0.50528604
B  0.577307867  0.71640504  0.54369914
C  0.545050221 -0.58326170 -0.18973298
D -0.895013997  1.21167869  0.58566632
E -1.120445653 -0.50320040  0.36898727
F  0.826454270 -0.08012335 -1.21793771
G -1.006437545 -0.49598926  0.69377997
H -0.002180996  1.12350722  0.14344787
I  1.077429739 -0.34963214 -0.55592603
J  0.183292639 -0.20312875 -0.69259983
K  0.786926753  0.36979252  0.83467848
L -0.299174277  0.55366687  0.06066318
M  0.509427670 -0.33818943  0.28111206
N  0.100921814  0.64457054 -1.06212116
O  0.062053921  0.41939334  0.18318016
P -0.208732550  0.31020715  0.61297661
Q  0.089160032 -0.09586467 -0.29431216
R -0.942804974  1.03511866  0.74490667
S  0.635825594 -0.15520759  0.55597769
T  0.484893107  0.39541270  0.32056814
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
            a          b         c           d           e          f
s1  0.3330944  0.2605365 0.7932401  0.35317495  0.20978066  0.5126786
s2  0.2646829 -0.9159878 0.1360667 -0.11396963  0.17213955 -0.1780009
s3  0.6420283  0.2322091 0.3250759 -0.13972670 -0.02132747 -0.1552646
s4 -0.3901593  0.6219947 0.0660414  0.45194940 -0.41032979  0.4179036
s5 -0.4444242  0.5779611 0.6025891 -0.01285954  0.13033639  0.5332338
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A  0.80440399
B  0.61247068
C -0.07598149
D  0.30077700
E -0.41821959
F -0.15720226
G -0.26954895
H  0.42159136
I  0.05729053
J -0.23747865
K  0.66379925
L  0.10505193
M  0.15078343
N -0.10554294
O  0.22154247
P  0.23815040
Q -0.10033893
R  0.27907345
S  0.34553190
T  0.40029131
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
            a         b         c         d          e         f
s1 0.08104442 0.1553427 0.3846027 0.1077137 0.01611987 0.2261101
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
            s1          s2          s3
A  0.959917806  0.94800812  0.50528604
B  0.577307867  0.71640504  0.54369914
C  0.545050221 -0.58326170 -0.18973298
D -0.895013997  1.21167869  0.58566632
E -1.120445653 -0.50320040  0.36898727
F  0.826454270 -0.08012335 -1.21793771
G -1.006437545 -0.49598926  0.69377997
H -0.002180996  1.12350722  0.14344787
I  1.077429739 -0.34963214 -0.55592603
J  0.183292639 -0.20312875 -0.69259983
K  0.786926753  0.36979252  0.83467848
L -0.299174277  0.55366687  0.06066318
M  0.509427670 -0.33818943  0.28111206
N  0.100921814  0.64457054 -1.06212116
O  0.062053921  0.41939334  0.18318016
P -0.208732550  0.31020715  0.61297661
Q  0.089160032 -0.09586467 -0.29431216
R -0.942804974  1.03511866  0.74490667
S  0.635825594 -0.15520759  0.55597769
T  0.484893107  0.39541270  0.32056814
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
           a          b          c          d          e          f
s1 0.3396724  1.1975532  1.1273060  0.5371072 0.26525648  0.7837287
s2 0.3265164 -0.6764802  0.4591743  0.1692427 0.15430483  0.2416285
s3 0.7622031 -1.0561944 -0.1977940 -0.3855298 0.04441166 -0.8933621
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
