
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
           a           b           c           d           e           f
A  0.5913506 -1.29455583 -0.50159020 -0.41894128  2.54771849 -0.84271607
B  0.2164359  0.26285960  0.57754567  1.79269035  1.21344146 -0.83093445
C  1.1849347  0.66936183  0.27501118 -0.47285919  0.31602929 -1.20607775
D  0.4661169  0.69515904 -0.10287628  0.23180375  0.01445023 -0.89256232
E  0.9201968  1.57783253 -0.41131573 -0.38239024  0.16725049 -0.90287040
F -1.0726633  0.01936570  0.74370681 -0.15133482  0.51780680  0.63757646
G  0.2975082 -0.87341353  0.13740518  0.94700433  2.28927851 -0.98506197
H  1.1293399  0.61676635 -0.73539007 -0.50068973  0.43630208  1.06182356
I  1.3071745  0.69059845  1.27356039 -0.41316087 -1.07575264 -1.39205939
J -0.6107349  0.78699910 -1.29610038 -0.81993183  0.27295338 -0.20716768
K  0.8360205  1.70078584 -0.52831154  0.57700700 -0.23405859  0.46661653
L -1.1350967 -1.77248374  1.05313947 -0.36963229 -1.68335823  0.56605963
M -0.5080092 -0.35108831  0.13443626  0.58285394  0.31707480  1.12615205
N  0.4664667 -0.21508635 -1.69705255  1.56803242  0.94255085  1.12234696
O  0.4717120  0.77347140 -0.07812887 -0.49630920 -0.56262967  2.11753474
P -0.6651735 -0.55864810 -0.98132026 -0.02321387  0.71579536  2.00628310
Q -0.7350538 -0.01341784 -2.70242023 -0.67070231  0.42788190 -0.55812634
R -0.1412575 -0.84922066 -0.38273712 -0.72494829  0.08549711  0.74726250
S -1.5764619  0.80560914 -0.11178123  0.36070418  1.09215505 -1.16077114
T  0.2377531  0.70350482 -0.34433125 -0.22783425 -1.32116905  0.03202831
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
           s1          s2          s3
A -0.35160260 -0.46026574  0.85250121
B  0.23964776  1.18511801  0.19125351
C  0.92714825 -0.09892401 -0.44502423
D  0.58063795  0.06446374 -0.43905605
E  1.24901467 -0.39685299 -0.36780996
F -0.52664881  0.29618600  0.57769163
G -0.28795268  0.54220476  0.65210827
H  0.87305312 -0.61803990  0.74906282
I  0.99888646  0.43019976 -1.23390602
J  0.08813209 -1.05801611  0.03289285
K  1.26840315  0.02434773  0.11627897
L -1.45379024  0.34175359 -0.55864930
M -0.42954876  0.35864510  0.72161343
N  0.12569019 -0.06451007  1.03244890
O  0.62259168 -0.28721904  0.77745253
P -0.61191078 -0.50226707  1.36103923
Q -0.37423584 -1.68656127 -0.06512222
R -0.49523908 -0.55384271  0.41637981
S -0.38542637  0.12446147 -0.03430804
T  0.47062897 -0.28608275 -0.64457037
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
             a           b           c           d           e           f
s1  0.61470952  0.08320616  0.06202259  0.28317341  1.02290987 -0.94307265
s2  0.31859539  0.33513776 -0.06639845 -0.02185261  0.85265947 -0.04713309
s3  0.09934082  0.35147491  0.12557199 -0.25642950 -0.68005402 -0.14163773
s4 -0.05875099 -0.08783784 -0.65551635  0.40784082  0.35319784  1.59307921
s5 -0.55375502  0.16161887 -0.88531746 -0.31569517  0.07109125 -0.23490167
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A  0.01354429
B  0.53867309
C  0.12773334
D  0.06868188
E  0.16145057
F  0.11574294
G  0.30212012
H  0.33469201
I  0.06506007
J -0.31233039
K  0.46967662
L -0.55689531
M  0.21690326
N  0.36454301
O  0.37094173
P  0.08228713
Q -0.70863977
R -0.21090066
S -0.09842431
T -0.15334138
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
            a       b          c          d         e          f
s1 0.08402794 0.16872 -0.2839275 0.01940739 0.3239609 0.04526682
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
           s1          s2          s3
A -0.35160260 -0.46026574  0.85250121
B  0.23964776  1.18511801  0.19125351
C  0.92714825 -0.09892401 -0.44502423
D  0.58063795  0.06446374 -0.43905605
E  1.24901467 -0.39685299 -0.36780996
F -0.52664881  0.29618600  0.57769163
G -0.28795268  0.54220476  0.65210827
H  0.87305312 -0.61803990  0.74906282
I  0.99888646  0.43019976 -1.23390602
J  0.08813209 -1.05801611  0.03289285
K  1.26840315  0.02434773  0.11627897
L -1.45379024  0.34175359 -0.55864930
M -0.42954876  0.35864510  0.72161343
N  0.12569019 -0.06451007  1.03244890
O  0.62259168 -0.28721904  0.77745253
P -0.61191078 -0.50226707  1.36103923
Q -0.37423584 -1.68656127 -0.06512222
R -0.49523908 -0.55384271  0.41637981
S -0.38542637  0.12446147 -0.03430804
T  0.47062897 -0.28608275 -0.64457037
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
             a          b          c          d         e          f
s1  0.40389328 -0.5158481 0.03797773  0.6868745 1.8805800 -0.8368253
s2  0.82552576  0.6822604 0.08606745 -0.1205277 0.1652398 -1.0493200
s3 -0.07623325  0.7985991 0.16619554 -0.2668625 0.3425286 -0.1326470
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
