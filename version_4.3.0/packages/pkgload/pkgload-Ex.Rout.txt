
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "pkgload"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('pkgload')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("dev_example")
> ### * dev_example
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dev_example
> ### Title: Run a examples for an in-development function.
> ### Aliases: dev_example run_example
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Runs installed example:
> ##D library("ggplot2")
> ##D example("ggplot")
> ##D 
> ##D # Runs development example:
> ##D dev_example("ggplot")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("dev_help")
> ### * dev_help
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dev_help
> ### Title: In-development help for package loaded with devtools
> ### Aliases: dev_help dev_topic_find dev_topic_index dev_topic_index_reset
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library("ggplot2")
> ##D help("ggplot") # loads installed documentation for ggplot
> ##D 
> ##D load_all("ggplot2")
> ##D dev_help("ggplot") # loads development documentation for ggplot
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("dev_meta")
> ### * dev_meta
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dev_meta
> ### Title: Return devtools metadata environment
> ### Aliases: dev_meta
> ### Keywords: internal
> 
> ### ** Examples
> 
> dev_meta("stats") # NULL
NULL
> 
> if (has_tests()) {
+ # Load the test package in directory "testLoadHooks"
+ load_all(pkgtest("testLoadHooks"))
+ 
+ # Get metadata for the package
+ x <- dev_meta("testLoadHooks")
+ as.list(x)
+ 
+ # Clean up.
+ unload("testLoadHooks")
+ }
> 
> 
> 
> cleanEx()
> nameEx("help")
> ### * help
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: help
> ### Title: Drop-in replacements for help and ? functions
> ### Aliases: help shim_help ? shim_question
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # This would load devtools and look at the help for load_all, if currently
> ##D # in the devtools source directory.
> ##D load_all()
> ##D ?load_all
> ##D help("load_all")
> ## End(Not run)
> 
> # To see the help pages for utils::help and utils::`?`:
> help("help", "utils")
help                   package:utils                   R Documentation

_D_o_c_u_m_e_n_t_a_t_i_o_n

_D_e_s_c_r_i_p_t_i_o_n:

     ‘help’ is the primary interface to the help systems.

_U_s_a_g_e:

     help(topic, package = NULL, lib.loc = NULL,
          verbose = getOption("verbose"),
          try.all.packages = getOption("help.try.all.packages"),
          help_type = getOption("help_type"))
     
_A_r_g_u_m_e_n_t_s:

   topic: usually, a name or character string specifying the topic for
          which help is sought.  A character string (enclosed in
          explicit single or double quotes) is always taken as naming a
          topic.

          If the value of ‘topic’ is a length-one character vector the
          topic is taken to be the value of the only element.
          Otherwise ‘topic’ must be a name or a reserved word (if
          syntactically valid) or character string.

          See ‘Details’ for what happens if this is omitted.

 package: a name or character vector giving the packages to look into
          for documentation, or ‘NULL’.  By default, all packages whose
          namespaces are loaded are used.  To avoid a name being
          deparsed use e.g.  ‘(pkg_ref)’ (see the examples).

 lib.loc: a character vector of directory names of R libraries, or
          ‘NULL’.  The default value of ‘NULL’ corresponds to all
          libraries currently known.  If the default is used, the
          loaded packages are searched before the libraries.  This is
          not used for HTML help (see ‘Details’).

 verbose: logical; if ‘TRUE’, the file name is reported.

try.all.packages: logical; see ‘Note’.

help_type: character string: the type of help required.  Possible
          values are ‘"text"’, ‘"html"’ and ‘"pdf"’.  Case is ignored,
          and partial matching is allowed.

_D_e_t_a_i_l_s:

     The following types of help are available:

        • Plain text help

        • HTML help pages with hyperlinks to other topics, shown in a
          browser by ‘browseURL’.

          (On Unix-alikes, where possible an existing browser window is
          re-used: the macOS GUI uses its own browser window.)

          If for some reason HTML help is unavailable (see
          ‘startDynamicHelp’), plain text help will be used instead.

        • For ‘help’ only, typeset as PDF - see the section on ‘Offline
          help’.

     On Unix-alikes: The ‘factory-fresh’ default is text help except
          from the macOS GUI, which uses HTML help displayed in its own
          browser window.

     On Windows: The default for the type of help is selected when R is
          installed - the ‘factory-fresh’ default is HTML help.

     The rendering of text help will use directional quotes in suitable
     locales (UTF-8 and single-byte Windows locales): sometimes the
     fonts used do not support these quotes so this can be turned off
     by setting ‘options(useFancyQuotes = FALSE)’.

     ‘topic’ is not optional: if it is omitted R will give

        • If a package is specified, (text or, in interactive use only,
          HTML) information on the package, including hints/links to
          suitable help topics.

        • If ‘lib.loc’ only is specified, a (text) list of available
          packages.

        • Help on ‘help’ itself if none of the first three arguments is
          specified.

     Some topics need to be quoted (by backticks) or given as a
     character string.  These include those which cannot syntactically
     appear on their own such as unary and binary operators, ‘function’
     and control-flow reserved words (including ‘if’, ‘else’ ‘for’,
     ‘in’, ‘repeat’, ‘while’, ‘break’ and ‘next’).  The other
     ‘reserved’ words can be used as if they were names, for example
     ‘TRUE’, ‘NA’ and ‘Inf’.

     If multiple help files matching ‘topic’ are found, in interactive
     use a menu is presented for the user to choose one: in batch use
     the first on the search path is used.  (For HTML help the menu
     will be an HTML page, otherwise a graphical menu if possible if
     ‘getOption("menu.graphics")’ is true, the default.)

     Note that HTML help does not make use of ‘lib.loc’: it will always
     look first in the loaded packages and then along ‘.libPaths()’.

_O_f_f_l_i_n_e _h_e_l_p:

     Typeset documentation is produced by running the LaTeX version of
     the help page through ‘pdflatex’: this will produce a PDF file.

     The appearance of the output can be customized through a file
     ‘Rhelp.cfg’ somewhere in your LaTeX search path: this will be
     input as a LaTeX style file after ‘Rd.sty’.  Some environment
     variables are consulted, notably ‘R_PAPERSIZE’ (_via_
     ‘getOption("papersize")’) and ‘R_RD4PDF’ (see ‘Making manuals’ in
     the ‘R Installation and Administration’ manual).

     If there is a function ‘offline_help_helper’ in the workspace or
     further down the search path it is used to do the typesetting,
     otherwise the function of that name in the ‘utils’ namespace (to
     which the first paragraph applies).  It should accept at least two
     arguments, the name of the LaTeX file to be typeset and the type
     (which is nowadays ignored).  It accepts a third argument,
     ‘texinputs’, which will give the graphics path when the help
     document contains figures, and will otherwise not be supplied.

_N_o_t_e:

     Unless ‘lib.loc’ is specified explicitly, the loaded packages are
     searched before those in the specified libraries.  This ensures
     that if a library is loaded from a library not in the known
     library trees, then the help from the loaded library is used.  If
     ‘lib.loc’ is specified explicitly, the loaded packages are _not_
     searched.

     If this search fails and argument ‘try.all.packages’ is ‘TRUE’ and
     neither ‘packages’ nor ‘lib.loc’ is specified, then all the
     packages in the known library trees are searched for help on
     ‘topic’ and a list of (any) packages where help may be found is
     displayed (with hyperlinks for ‘help_type = "html"’).  *NB:*
     searching all packages can be slow, especially the first time
     (caching of files by the OS can expedite subsequent searches
     dramatically).

_R_e_f_e_r_e_n_c_e_s:

     Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) _The New S
     Language_.  Wadsworth & Brooks/Cole.

_S_e_e _A_l_s_o:

     ‘?’ for shortcuts to help topics.

     ‘help.search()’ or ‘??’ for finding help pages on a vague topic;
     ‘help.start()’ which opens the HTML version of the R help pages;
     ‘library()’ for listing available packages and the help objects
     they contain; ‘data()’ for listing available data sets;
     ‘methods()’.

     Use ‘prompt()’ to get a prototype for writing ‘help’ pages of your
     own package.

_E_x_a_m_p_l_e_s:

     help()
     help(help)              # the same
     
     help(lapply)
     
     help("for")             # or ?"for", but quotes/backticks are needed
     
     try({# requires working TeX installation:
      help(dgamma, help_type = "pdf")
      ## -> nicely formatted pdf -- including math formula -- for help(dgamma):
      system2(getOption("pdfviewer"), "dgamma.pdf", wait = FALSE)
     })
     
     help(package = "splines") # get help even when package is not loaded
     
     topi <- "women"
     help(topi)
     
     try(help("bs", try.all.packages = FALSE)) # reports not found (an error)
     help("bs", try.all.packages = TRUE)       # reports can be found
                                               # in package 'splines'
     
     ## For programmatic use:
     topic <- "family"; pkg_ref <- "stats"
     help((topic), (pkg_ref))
     

> help("?", "utils")
Question                 package:utils                 R Documentation

_D_o_c_u_m_e_n_t_a_t_i_o_n _S_h_o_r_t_c_u_t_s

_D_e_s_c_r_i_p_t_i_o_n:

     These functions provide access to documentation.  Documentation on
     a topic with name ‘name’ (typically, an R object or a data set)
     can be displayed by either ‘help("name")’ or ‘?name’.

_U_s_a_g_e:

     ?topic
     
     type?topic
     
_A_r_g_u_m_e_n_t_s:

   topic: Usually, a name or character string specifying the topic for
          which help is sought.

          Alternatively, a function call to ask for documentation on a
          corresponding S4 method: see the section on S4 method
          documentation.  The calls ‘pkg::topic’ and ‘pkg:::topic’ are
          treated specially, and look for help on ‘topic’ in package
          ‘pkg’.

    type: the special type of documentation to use for this topic; for
          example, if the type is ‘class’, documentation is provided
          for the class with name ‘topic’.  See the Section ‘S4 Method
          Documentation’ for the uses of ‘type’ to get help on formal
          methods, including ‘methods?function’ and ‘method?call’.

_D_e_t_a_i_l_s:

     This is a shortcut to ‘help’ and uses its default type of help.

     Some topics need to be quoted (by backticks) or given as a
     character string.  There include those which cannot syntactically
     appear on their own such as unary and binary operators, ‘function’
     and control-flow reserved words (including ‘if’, ‘else’ ‘for’,
     ‘in’, ‘repeat’, ‘while’, ‘break’ and ‘next’).  The other
     ‘reserved’ words can be used as if they were names, for example
     ‘TRUE’, ‘NA’ and ‘Inf’.

_S_4 _M_e_t_h_o_d _D_o_c_u_m_e_n_t_a_t_i_o_n:

     Authors of formal (‘S4’) methods can provide documentation on
     specific methods, as well as overall documentation on the methods
     of a particular function.  The ‘"?"’ operator allows access to
     this documentation in three ways.

     The expression ‘methods?f’ will look for the overall documentation
     methods for the function ‘f’.  Currently, this means the
     documentation file containing the alias ‘f-methods’.

     There are two different ways to look for documentation on a
     particular method.  The first is to supply the ‘topic’ argument in
     the form of a function call, omitting the ‘type’ argument.  The
     effect is to look for documentation on the method that would be
     used if this function call were actually evaluated. See the
     examples below.  If the function is not a generic (no S4 methods
     are defined for it), the help reverts to documentation on the
     function name.

     The ‘"?"’ operator can also be called with ‘doc_type’ supplied as
     ‘method’; in this case also, the ‘topic’ argument is a function
     call, but the arguments are now interpreted as specifying the
     class of the argument, not the actual expression that will appear
     in a real call to the function.  See the examples below.

     The first approach will be tedious if the actual call involves
     complicated expressions, and may be slow if the arguments take a
     long time to evaluate.  The second approach avoids these issues,
     but you do have to know what the classes of the actual arguments
     will be when they are evaluated.

     Both approaches make use of any inherited methods; the signature
     of the method to be looked up is found by using ‘selectMethod’
     (see the documentation for ‘getMethod’).  A limitation is that
     methods in packages (as opposed to regular functions) will only be
     found if the package exporting them is on the search list, even if
     it is specified explicitly using the ‘?package::generic()’
     notation.

_R_e_f_e_r_e_n_c_e_s:

     Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) _The New S
     Language_.  Wadsworth & Brooks/Cole.

_S_e_e _A_l_s_o:

     ‘help’

     ‘??’ for finding help pages on a vague topic.

_E_x_a_m_p_l_e_s:

     ?lapply
     
     ?"for"                  # but quotes/backticks are needed
     ?`+`
     
     ?women                  # information about data set "women"
     
     ## Not run:
     
     require(methods)
     ## define a S4 generic function and some methods
     combo <- function(x, y) c(x, y)
     setGeneric("combo")
     setMethod("combo", c("numeric", "numeric"), function(x, y) x+y)
     
     ## assume we have written some documentation
     ## for combo, and its methods ....
     
     ?combo  # produces the function documentation
     
     methods?combo  # looks for the overall methods documentation
     
     method?combo("numeric", "numeric")  # documentation for the method above
     
     ?combo(1:10, rnorm(10))  # ... the same method, selected according to
                              # the arguments (one integer, the other numeric)
     
     ?combo(1:10, letters)    # documentation for the default method
     ## End(Not run)
     

> 
> ## Not run: 
> ##D # Examples demonstrating the multiple ways of supplying arguments
> ##D # NB: you can't do pkg <- "ggplot2"; help("ggplot2", pkg)
> ##D help(lm)
> ##D help(lm, stats)
> ##D help(lm, 'stats')
> ##D help('lm')
> ##D help('lm', stats)
> ##D help('lm', 'stats')
> ##D help(package = stats)
> ##D help(package = 'stats')
> ##D topic <- "lm"
> ##D help(topic)
> ##D help(topic, stats)
> ##D help(topic, 'stats')
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("inst")
> ### * inst
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: inst
> ### Title: Get the installation path of a package
> ### Aliases: inst
> 
> ### ** Examples
> 
> inst("pkgload")
[1] "/usr/local/lib/R/site-library/pkgload"
> inst("grid")
[1] "/usr/local/lib/R/library/grid"
> 
> 
> 
> cleanEx()
> nameEx("load_all")
> ### * load_all
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: load_all
> ### Title: Load complete package
> ### Aliases: load_all is_loading
> ### Keywords: programming
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Load the package in the current directory
> ##D load_all("./")
> ##D 
> ##D # Running again loads changed files
> ##D load_all("./")
> ##D 
> ##D # With export_all=FALSE, only objects listed as exports in NAMESPACE
> ##D # are exported
> ##D load_all("./", export_all = FALSE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("package_file")
> ### * package_file
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: package_file
> ### Title: Find file in a package.
> ### Aliases: package_file
> 
> ### ** Examples
> 
> ## Not run: 
> ##D package_file("figures", "figure_1")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("parse_deps")
> ### * parse_deps
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: parse_deps
> ### Title: Parse package dependency strings.
> ### Aliases: parse_deps
> ### Keywords: internal
> 
> ### ** Examples
> 
> parse_deps("httr (< 2.1),\nRCurl (>= 3)")
   name compare version
1  httr       <     2.1
2 RCurl      >=       3
> # only package dependencies are returned
> parse_deps("utils (== 2.12.1),\ntools,\nR (>= 2.10),\nmemoise")
     name compare version
1   utils      ==  2.12.1
2   tools    <NA>    <NA>
4 memoise    <NA>    <NA>
> 
> 
> 
> cleanEx()
> nameEx("parse_ns_file")
> ### * parse_ns_file
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: parse_ns_file
> ### Title: Parses the NAMESPACE file for a package
> ### Aliases: parse_ns_file
> ### Keywords: internal
> 
> ### ** Examples
> 
> if (has_tests()) {
+ parse_ns_file(pkgtest("testLoadHooks"))
+ }
> 
> 
> 
> cleanEx()
> nameEx("pkgtest")
> ### * pkgtest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pkgtest
> ### Title: Return the path to one of the packages in the devtools test dir
> ### Aliases: pkgtest
> ### Keywords: internal
> 
> ### ** Examples
> 
> if (has_tests()) {
+ pkgtest("testData")
+ }
> 
> 
> 
> cleanEx()
> nameEx("unload")
> ### * unload
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: unload
> ### Title: Unload a package
> ### Aliases: unload unregister
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Unload package that is in current directory
> ##D unload()
> ##D 
> ##D # Unload package that is in ./ggplot2/
> ##D unload(pkg_name("ggplot2/"))
> ##D 
> ##D library(ggplot2)
> ##D # unload the ggplot2 package directly by name
> ##D unload("ggplot2")
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.434 0.012 0.453 0.005 0.002 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
