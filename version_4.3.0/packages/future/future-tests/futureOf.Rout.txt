
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:42:18.193] plan(): Setting new future strategy stack:
[17:42:18.193] List of future strategies:
[17:42:18.193] 1. sequential:
[17:42:18.193]    - args: function (..., envir = parent.frame())
[17:42:18.193]    - tweaked: FALSE
[17:42:18.193]    - call: future::plan("sequential")
[17:42:18.207] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** futureOf() ...")
*** futureOf() ...
> 
> a %<-% { 1 } %lazy% TRUE
[17:42:18.221] getGlobalsAndPackages() ...
[17:42:18.221] Searching for globals...
[17:42:18.224] - globals found: [1] ‘{’
[17:42:18.225] Searching for globals ... DONE
[17:42:18.225] Resolving globals: FALSE
[17:42:18.225] 
[17:42:18.225] 
[17:42:18.225] getGlobalsAndPackages() ... DONE
> 
> f1 <- futureOf("a")
> print(f1)
Future:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 8749254f-3011-ade1-5951-fe9588479a18
Class: ‘Future’, ‘environment’
> f2 <- futureOf(a)
> print(f2)
Future:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 8749254f-3011-ade1-5951-fe9588479a18
Class: ‘Future’, ‘environment’
> stopifnot(identical(f2, f1))
> 
> ## Get all futures in the current environment
> fs <- futureOf(drop = TRUE)
> print(fs)
$a
Future:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 8749254f-3011-ade1-5951-fe9588479a18
Class: ‘Future’, ‘environment’

$f1
Future:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 8749254f-3011-ade1-5951-fe9588479a18
Class: ‘Future’, ‘environment’

$f2
Future:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 8749254f-3011-ade1-5951-fe9588479a18
Class: ‘Future’, ‘environment’

> stopifnot(
+   is.list(fs),
+   length(fs) == 3L,
+   all(names(fs) %in% c("a", "f1", "f2"))
+ )
> 
> ## Non-existing object
> res <- tryCatch(futureOf("non-exiting-object", mustExist = TRUE), error = identity)
[17:42:18.234] ERROR: No such future variable: "non-exiting-object"
> stopifnot(inherits(res, "error"))
> 
> message("*** futureOf() ... DONE")
*** futureOf() ... DONE
> 
> source("incl/end.R")
[17:42:18.234] plan(): Setting new future strategy stack:
[17:42:18.234] List of future strategies:
[17:42:18.234] 1. FutureStrategy:
[17:42:18.234]    - args: function (..., envir = parent.frame())
[17:42:18.234]    - tweaked: FALSE
[17:42:18.234]    - call: future::plan(oplan)
[17:42:18.248] plan(): nbrOfWorkers() = 1
> 
