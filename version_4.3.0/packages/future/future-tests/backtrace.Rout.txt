
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:11:40.650] plan(): Setting new future strategy stack:
[16:11:40.651] List of future strategies:
[16:11:40.651] 1. sequential:
[16:11:40.651]    - args: function (..., envir = parent.frame())
[16:11:40.651]    - tweaked: FALSE
[16:11:40.651]    - call: future::plan("sequential")
[16:11:40.663] plan(): nbrOfWorkers() = 1
> 
> message("*** backtrace( ) ...")
*** backtrace( ) ...
> 
> message("*** backtrace( ) - explicit future ...")
*** backtrace( ) - explicit future ...
> 
> f <- future({ 42L; stop("Woops") })
[16:11:40.674] getGlobalsAndPackages() ...
[16:11:40.674] Searching for globals...
[16:11:40.681] - globals found: [2] ‘{’, ‘stop’
[16:11:40.681] Searching for globals ... DONE
[16:11:40.681] Resolving globals: FALSE
[16:11:40.681] 
[16:11:40.681] 
[16:11:40.682] getGlobalsAndPackages() ... DONE
[16:11:40.682] run() for ‘Future’ ...
[16:11:40.682] - state: ‘created’
[16:11:40.683] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:11:40.683] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:11:40.683] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:11:40.683]   - Field: ‘label’
[16:11:40.683]   - Field: ‘local’
[16:11:40.683]   - Field: ‘owner’
[16:11:40.683]   - Field: ‘envir’
[16:11:40.683]   - Field: ‘packages’
[16:11:40.684]   - Field: ‘gc’
[16:11:40.684]   - Field: ‘conditions’
[16:11:40.684]   - Field: ‘expr’
[16:11:40.684]   - Field: ‘uuid’
[16:11:40.684]   - Field: ‘seed’
[16:11:40.684]   - Field: ‘version’
[16:11:40.684]   - Field: ‘result’
[16:11:40.684]   - Field: ‘asynchronous’
[16:11:40.684]   - Field: ‘calls’
[16:11:40.684]   - Field: ‘globals’
[16:11:40.684]   - Field: ‘stdout’
[16:11:40.685]   - Field: ‘earlySignal’
[16:11:40.685]   - Field: ‘lazy’
[16:11:40.685]   - Field: ‘state’
[16:11:40.685] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:11:40.685] - Launch lazy future ...
[16:11:40.686] Packages needed by the future expression (n = 0): <none>
[16:11:40.686] Packages needed by future strategies (n = 0): <none>
[16:11:40.687] {
[16:11:40.687]     {
[16:11:40.687]         {
[16:11:40.687]             ...future.startTime <- base::Sys.time()
[16:11:40.687]             {
[16:11:40.687]                 {
[16:11:40.687]                   {
[16:11:40.687]                     base::local({
[16:11:40.687]                       has_future <- base::requireNamespace("future", 
[16:11:40.687]                         quietly = TRUE)
[16:11:40.687]                       if (has_future) {
[16:11:40.687]                         ns <- base::getNamespace("future")
[16:11:40.687]                         version <- ns[[".package"]][["version"]]
[16:11:40.687]                         if (is.null(version)) 
[16:11:40.687]                           version <- utils::packageVersion("future")
[16:11:40.687]                       }
[16:11:40.687]                       else {
[16:11:40.687]                         version <- NULL
[16:11:40.687]                       }
[16:11:40.687]                       if (!has_future || version < "1.8.0") {
[16:11:40.687]                         info <- base::c(r_version = base::gsub("R version ", 
[16:11:40.687]                           "", base::R.version$version.string), 
[16:11:40.687]                           platform = base::sprintf("%s (%s-bit)", 
[16:11:40.687]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:11:40.687]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:11:40.687]                             "release", "version")], collapse = " "), 
[16:11:40.687]                           hostname = base::Sys.info()[["nodename"]])
[16:11:40.687]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:11:40.687]                           info)
[16:11:40.687]                         info <- base::paste(info, collapse = "; ")
[16:11:40.687]                         if (!has_future) {
[16:11:40.687]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:11:40.687]                             info)
[16:11:40.687]                         }
[16:11:40.687]                         else {
[16:11:40.687]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:11:40.687]                             info, version)
[16:11:40.687]                         }
[16:11:40.687]                         base::stop(msg)
[16:11:40.687]                       }
[16:11:40.687]                     })
[16:11:40.687]                   }
[16:11:40.687]                   options(future.plan = NULL)
[16:11:40.687]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:11:40.687]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:11:40.687]                 }
[16:11:40.687]                 ...future.workdir <- getwd()
[16:11:40.687]             }
[16:11:40.687]             ...future.oldOptions <- base::as.list(base::.Options)
[16:11:40.687]             ...future.oldEnvVars <- base::Sys.getenv()
[16:11:40.687]         }
[16:11:40.687]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:11:40.687]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:11:40.687]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:11:40.687]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:11:40.687]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:11:40.687]             future.stdout.windows.reencode = NULL, width = 80L)
[16:11:40.687]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:11:40.687]             base::names(...future.oldOptions))
[16:11:40.687]     }
[16:11:40.687]     if (FALSE) {
[16:11:40.687]     }
[16:11:40.687]     else {
[16:11:40.687]         if (TRUE) {
[16:11:40.687]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:11:40.687]                 open = "w")
[16:11:40.687]         }
[16:11:40.687]         else {
[16:11:40.687]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:11:40.687]                 windows = "NUL", "/dev/null"), open = "w")
[16:11:40.687]         }
[16:11:40.687]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:11:40.687]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:11:40.687]             base::sink(type = "output", split = FALSE)
[16:11:40.687]             base::close(...future.stdout)
[16:11:40.687]         }, add = TRUE)
[16:11:40.687]     }
[16:11:40.687]     ...future.frame <- base::sys.nframe()
[16:11:40.687]     ...future.conditions <- base::list()
[16:11:40.687]     ...future.rng <- base::globalenv()$.Random.seed
[16:11:40.687]     if (FALSE) {
[16:11:40.687]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:11:40.687]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:11:40.687]     }
[16:11:40.687]     ...future.result <- base::tryCatch({
[16:11:40.687]         base::withCallingHandlers({
[16:11:40.687]             ...future.value <- base::withVisible(base::local({
[16:11:40.687]                 42L
[16:11:40.687]                 stop("Woops")
[16:11:40.687]             }))
[16:11:40.687]             future::FutureResult(value = ...future.value$value, 
[16:11:40.687]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:40.687]                   ...future.rng), globalenv = if (FALSE) 
[16:11:40.687]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:11:40.687]                     ...future.globalenv.names))
[16:11:40.687]                 else NULL, started = ...future.startTime, version = "1.8")
[16:11:40.687]         }, condition = base::local({
[16:11:40.687]             c <- base::c
[16:11:40.687]             inherits <- base::inherits
[16:11:40.687]             invokeRestart <- base::invokeRestart
[16:11:40.687]             length <- base::length
[16:11:40.687]             list <- base::list
[16:11:40.687]             seq.int <- base::seq.int
[16:11:40.687]             signalCondition <- base::signalCondition
[16:11:40.687]             sys.calls <- base::sys.calls
[16:11:40.687]             `[[` <- base::`[[`
[16:11:40.687]             `+` <- base::`+`
[16:11:40.687]             `<<-` <- base::`<<-`
[16:11:40.687]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:11:40.687]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:11:40.687]                   3L)]
[16:11:40.687]             }
[16:11:40.687]             function(cond) {
[16:11:40.687]                 is_error <- inherits(cond, "error")
[16:11:40.687]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:11:40.687]                   NULL)
[16:11:40.687]                 if (is_error) {
[16:11:40.687]                   sessionInformation <- function() {
[16:11:40.687]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:11:40.687]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:11:40.687]                       search = base::search(), system = base::Sys.info())
[16:11:40.687]                   }
[16:11:40.687]                   ...future.conditions[[length(...future.conditions) + 
[16:11:40.687]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:11:40.687]                     cond$call), session = sessionInformation(), 
[16:11:40.687]                     timestamp = base::Sys.time(), signaled = 0L)
[16:11:40.687]                   signalCondition(cond)
[16:11:40.687]                 }
[16:11:40.687]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:11:40.687]                 "immediateCondition"))) {
[16:11:40.687]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:11:40.687]                   ...future.conditions[[length(...future.conditions) + 
[16:11:40.687]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:11:40.687]                   if (TRUE && !signal) {
[16:11:40.687]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:40.687]                     {
[16:11:40.687]                       inherits <- base::inherits
[16:11:40.687]                       invokeRestart <- base::invokeRestart
[16:11:40.687]                       is.null <- base::is.null
[16:11:40.687]                       muffled <- FALSE
[16:11:40.687]                       if (inherits(cond, "message")) {
[16:11:40.687]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:40.687]                         if (muffled) 
[16:11:40.687]                           invokeRestart("muffleMessage")
[16:11:40.687]                       }
[16:11:40.687]                       else if (inherits(cond, "warning")) {
[16:11:40.687]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:40.687]                         if (muffled) 
[16:11:40.687]                           invokeRestart("muffleWarning")
[16:11:40.687]                       }
[16:11:40.687]                       else if (inherits(cond, "condition")) {
[16:11:40.687]                         if (!is.null(pattern)) {
[16:11:40.687]                           computeRestarts <- base::computeRestarts
[16:11:40.687]                           grepl <- base::grepl
[16:11:40.687]                           restarts <- computeRestarts(cond)
[16:11:40.687]                           for (restart in restarts) {
[16:11:40.687]                             name <- restart$name
[16:11:40.687]                             if (is.null(name)) 
[16:11:40.687]                               next
[16:11:40.687]                             if (!grepl(pattern, name)) 
[16:11:40.687]                               next
[16:11:40.687]                             invokeRestart(restart)
[16:11:40.687]                             muffled <- TRUE
[16:11:40.687]                             break
[16:11:40.687]                           }
[16:11:40.687]                         }
[16:11:40.687]                       }
[16:11:40.687]                       invisible(muffled)
[16:11:40.687]                     }
[16:11:40.687]                     muffleCondition(cond, pattern = "^muffle")
[16:11:40.687]                   }
[16:11:40.687]                 }
[16:11:40.687]                 else {
[16:11:40.687]                   if (TRUE) {
[16:11:40.687]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:40.687]                     {
[16:11:40.687]                       inherits <- base::inherits
[16:11:40.687]                       invokeRestart <- base::invokeRestart
[16:11:40.687]                       is.null <- base::is.null
[16:11:40.687]                       muffled <- FALSE
[16:11:40.687]                       if (inherits(cond, "message")) {
[16:11:40.687]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:40.687]                         if (muffled) 
[16:11:40.687]                           invokeRestart("muffleMessage")
[16:11:40.687]                       }
[16:11:40.687]                       else if (inherits(cond, "warning")) {
[16:11:40.687]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:40.687]                         if (muffled) 
[16:11:40.687]                           invokeRestart("muffleWarning")
[16:11:40.687]                       }
[16:11:40.687]                       else if (inherits(cond, "condition")) {
[16:11:40.687]                         if (!is.null(pattern)) {
[16:11:40.687]                           computeRestarts <- base::computeRestarts
[16:11:40.687]                           grepl <- base::grepl
[16:11:40.687]                           restarts <- computeRestarts(cond)
[16:11:40.687]                           for (restart in restarts) {
[16:11:40.687]                             name <- restart$name
[16:11:40.687]                             if (is.null(name)) 
[16:11:40.687]                               next
[16:11:40.687]                             if (!grepl(pattern, name)) 
[16:11:40.687]                               next
[16:11:40.687]                             invokeRestart(restart)
[16:11:40.687]                             muffled <- TRUE
[16:11:40.687]                             break
[16:11:40.687]                           }
[16:11:40.687]                         }
[16:11:40.687]                       }
[16:11:40.687]                       invisible(muffled)
[16:11:40.687]                     }
[16:11:40.687]                     muffleCondition(cond, pattern = "^muffle")
[16:11:40.687]                   }
[16:11:40.687]                 }
[16:11:40.687]             }
[16:11:40.687]         }))
[16:11:40.687]     }, error = function(ex) {
[16:11:40.687]         base::structure(base::list(value = NULL, visible = NULL, 
[16:11:40.687]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:40.687]                 ...future.rng), started = ...future.startTime, 
[16:11:40.687]             finished = Sys.time(), session_uuid = NA_character_, 
[16:11:40.687]             version = "1.8"), class = "FutureResult")
[16:11:40.687]     }, finally = {
[16:11:40.687]         if (!identical(...future.workdir, getwd())) 
[16:11:40.687]             setwd(...future.workdir)
[16:11:40.687]         {
[16:11:40.687]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:11:40.687]                 ...future.oldOptions$nwarnings <- NULL
[16:11:40.687]             }
[16:11:40.687]             base::options(...future.oldOptions)
[16:11:40.687]             if (.Platform$OS.type == "windows") {
[16:11:40.687]                 old_names <- names(...future.oldEnvVars)
[16:11:40.687]                 envs <- base::Sys.getenv()
[16:11:40.687]                 names <- names(envs)
[16:11:40.687]                 common <- intersect(names, old_names)
[16:11:40.687]                 added <- setdiff(names, old_names)
[16:11:40.687]                 removed <- setdiff(old_names, names)
[16:11:40.687]                 changed <- common[...future.oldEnvVars[common] != 
[16:11:40.687]                   envs[common]]
[16:11:40.687]                 NAMES <- toupper(changed)
[16:11:40.687]                 args <- list()
[16:11:40.687]                 for (kk in seq_along(NAMES)) {
[16:11:40.687]                   name <- changed[[kk]]
[16:11:40.687]                   NAME <- NAMES[[kk]]
[16:11:40.687]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.687]                     next
[16:11:40.687]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:40.687]                 }
[16:11:40.687]                 NAMES <- toupper(added)
[16:11:40.687]                 for (kk in seq_along(NAMES)) {
[16:11:40.687]                   name <- added[[kk]]
[16:11:40.687]                   NAME <- NAMES[[kk]]
[16:11:40.687]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.687]                     next
[16:11:40.687]                   args[[name]] <- ""
[16:11:40.687]                 }
[16:11:40.687]                 NAMES <- toupper(removed)
[16:11:40.687]                 for (kk in seq_along(NAMES)) {
[16:11:40.687]                   name <- removed[[kk]]
[16:11:40.687]                   NAME <- NAMES[[kk]]
[16:11:40.687]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.687]                     next
[16:11:40.687]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:40.687]                 }
[16:11:40.687]                 if (length(args) > 0) 
[16:11:40.687]                   base::do.call(base::Sys.setenv, args = args)
[16:11:40.687]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:11:40.687]             }
[16:11:40.687]             else {
[16:11:40.687]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:11:40.687]             }
[16:11:40.687]             {
[16:11:40.687]                 if (base::length(...future.futureOptionsAdded) > 
[16:11:40.687]                   0L) {
[16:11:40.687]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:11:40.687]                   base::names(opts) <- ...future.futureOptionsAdded
[16:11:40.687]                   base::options(opts)
[16:11:40.687]                 }
[16:11:40.687]                 {
[16:11:40.687]                   {
[16:11:40.687]                     NULL
[16:11:40.687]                     RNGkind("Mersenne-Twister")
[16:11:40.687]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:11:40.687]                       inherits = FALSE)
[16:11:40.687]                   }
[16:11:40.687]                   options(future.plan = NULL)
[16:11:40.687]                   if (is.na(NA_character_)) 
[16:11:40.687]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:11:40.687]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:11:40.687]                   future::plan(list(function (..., envir = parent.frame()) 
[16:11:40.687]                   {
[16:11:40.687]                     future <- SequentialFuture(..., envir = envir)
[16:11:40.687]                     if (!future$lazy) 
[16:11:40.687]                       future <- run(future)
[16:11:40.687]                     invisible(future)
[16:11:40.687]                   }), .cleanup = FALSE, .init = FALSE)
[16:11:40.687]                 }
[16:11:40.687]             }
[16:11:40.687]         }
[16:11:40.687]     })
[16:11:40.687]     if (TRUE) {
[16:11:40.687]         base::sink(type = "output", split = FALSE)
[16:11:40.687]         if (TRUE) {
[16:11:40.687]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:11:40.687]         }
[16:11:40.687]         else {
[16:11:40.687]             ...future.result["stdout"] <- base::list(NULL)
[16:11:40.687]         }
[16:11:40.687]         base::close(...future.stdout)
[16:11:40.687]         ...future.stdout <- NULL
[16:11:40.687]     }
[16:11:40.687]     ...future.result$conditions <- ...future.conditions
[16:11:40.687]     ...future.result$finished <- base::Sys.time()
[16:11:40.687]     ...future.result
[16:11:40.687] }
[16:11:40.689] plan(): Setting new future strategy stack:
[16:11:40.689] List of future strategies:
[16:11:40.689] 1. sequential:
[16:11:40.689]    - args: function (..., envir = parent.frame())
[16:11:40.689]    - tweaked: FALSE
[16:11:40.689]    - call: NULL
[16:11:40.689] plan(): nbrOfWorkers() = 1
[16:11:40.690] plan(): Setting new future strategy stack:
[16:11:40.690] List of future strategies:
[16:11:40.690] 1. sequential:
[16:11:40.690]    - args: function (..., envir = parent.frame())
[16:11:40.690]    - tweaked: FALSE
[16:11:40.690]    - call: future::plan("sequential")
[16:11:40.691] plan(): nbrOfWorkers() = 1
[16:11:40.691] SequentialFuture started (and completed)
[16:11:40.691] signalConditions() ...
[16:11:40.691]  - include = ‘immediateCondition’
[16:11:40.692]  - exclude = 
[16:11:40.692]  - resignal = FALSE
[16:11:40.692]  - Number of conditions: 1
[16:11:40.692] signalConditions() ... done
[16:11:40.692] - Launch lazy future ... done
[16:11:40.692] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[16:11:40.693] signalConditions() ...
[16:11:40.693]  - include = ‘immediateCondition’
[16:11:40.693]  - exclude = 
[16:11:40.693]  - resignal = FALSE
[16:11:40.693]  - Number of conditions: 1
[16:11:40.693] signalConditions() ... done
> print(v)
<simpleError in eval(quote({    42L    stop("Woops")}), new.env()): Woops>
> calls <- backtrace(f)
[16:11:40.694] resolved() for ‘SequentialFuture’ ...
[16:11:40.694] - state: ‘finished’
[16:11:40.695] - run: TRUE
[16:11:40.695] - result: ‘FutureResult’
[16:11:40.695] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - explicit future ... DONE")
*** backtrace( ) - explicit future ... DONE
> 
> 
> message("*** backtrace( ) - implicit future ...")
*** backtrace( ) - implicit future ...
> 
> v %<-% { 42L; stop("Woops") }
[16:11:40.696] getGlobalsAndPackages() ...
[16:11:40.696] Searching for globals...
[16:11:40.697] - globals found: [2] ‘{’, ‘stop’
[16:11:40.697] Searching for globals ... DONE
[16:11:40.697] Resolving globals: FALSE
[16:11:40.697] 
[16:11:40.697] 
[16:11:40.697] getGlobalsAndPackages() ... DONE
[16:11:40.698] run() for ‘Future’ ...
[16:11:40.698] - state: ‘created’
[16:11:40.698] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:11:40.698] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:11:40.698] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:11:40.701]   - Field: ‘label’
[16:11:40.701]   - Field: ‘local’
[16:11:40.701]   - Field: ‘owner’
[16:11:40.701]   - Field: ‘envir’
[16:11:40.701]   - Field: ‘packages’
[16:11:40.702]   - Field: ‘gc’
[16:11:40.702]   - Field: ‘conditions’
[16:11:40.702]   - Field: ‘expr’
[16:11:40.702]   - Field: ‘uuid’
[16:11:40.702]   - Field: ‘seed’
[16:11:40.702]   - Field: ‘version’
[16:11:40.702]   - Field: ‘result’
[16:11:40.702]   - Field: ‘asynchronous’
[16:11:40.702]   - Field: ‘calls’
[16:11:40.702]   - Field: ‘globals’
[16:11:40.702]   - Field: ‘stdout’
[16:11:40.703]   - Field: ‘earlySignal’
[16:11:40.703]   - Field: ‘lazy’
[16:11:40.703]   - Field: ‘state’
[16:11:40.703] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:11:40.703] - Launch lazy future ...
[16:11:40.703] Packages needed by the future expression (n = 0): <none>
[16:11:40.703] Packages needed by future strategies (n = 0): <none>
[16:11:40.704] {
[16:11:40.704]     {
[16:11:40.704]         {
[16:11:40.704]             ...future.startTime <- base::Sys.time()
[16:11:40.704]             {
[16:11:40.704]                 {
[16:11:40.704]                   {
[16:11:40.704]                     base::local({
[16:11:40.704]                       has_future <- base::requireNamespace("future", 
[16:11:40.704]                         quietly = TRUE)
[16:11:40.704]                       if (has_future) {
[16:11:40.704]                         ns <- base::getNamespace("future")
[16:11:40.704]                         version <- ns[[".package"]][["version"]]
[16:11:40.704]                         if (is.null(version)) 
[16:11:40.704]                           version <- utils::packageVersion("future")
[16:11:40.704]                       }
[16:11:40.704]                       else {
[16:11:40.704]                         version <- NULL
[16:11:40.704]                       }
[16:11:40.704]                       if (!has_future || version < "1.8.0") {
[16:11:40.704]                         info <- base::c(r_version = base::gsub("R version ", 
[16:11:40.704]                           "", base::R.version$version.string), 
[16:11:40.704]                           platform = base::sprintf("%s (%s-bit)", 
[16:11:40.704]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:11:40.704]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:11:40.704]                             "release", "version")], collapse = " "), 
[16:11:40.704]                           hostname = base::Sys.info()[["nodename"]])
[16:11:40.704]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:11:40.704]                           info)
[16:11:40.704]                         info <- base::paste(info, collapse = "; ")
[16:11:40.704]                         if (!has_future) {
[16:11:40.704]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:11:40.704]                             info)
[16:11:40.704]                         }
[16:11:40.704]                         else {
[16:11:40.704]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:11:40.704]                             info, version)
[16:11:40.704]                         }
[16:11:40.704]                         base::stop(msg)
[16:11:40.704]                       }
[16:11:40.704]                     })
[16:11:40.704]                   }
[16:11:40.704]                   options(future.plan = NULL)
[16:11:40.704]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:11:40.704]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:11:40.704]                 }
[16:11:40.704]                 ...future.workdir <- getwd()
[16:11:40.704]             }
[16:11:40.704]             ...future.oldOptions <- base::as.list(base::.Options)
[16:11:40.704]             ...future.oldEnvVars <- base::Sys.getenv()
[16:11:40.704]         }
[16:11:40.704]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:11:40.704]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:11:40.704]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:11:40.704]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:11:40.704]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:11:40.704]             future.stdout.windows.reencode = NULL, width = 80L)
[16:11:40.704]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:11:40.704]             base::names(...future.oldOptions))
[16:11:40.704]     }
[16:11:40.704]     if (FALSE) {
[16:11:40.704]     }
[16:11:40.704]     else {
[16:11:40.704]         if (TRUE) {
[16:11:40.704]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:11:40.704]                 open = "w")
[16:11:40.704]         }
[16:11:40.704]         else {
[16:11:40.704]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:11:40.704]                 windows = "NUL", "/dev/null"), open = "w")
[16:11:40.704]         }
[16:11:40.704]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:11:40.704]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:11:40.704]             base::sink(type = "output", split = FALSE)
[16:11:40.704]             base::close(...future.stdout)
[16:11:40.704]         }, add = TRUE)
[16:11:40.704]     }
[16:11:40.704]     ...future.frame <- base::sys.nframe()
[16:11:40.704]     ...future.conditions <- base::list()
[16:11:40.704]     ...future.rng <- base::globalenv()$.Random.seed
[16:11:40.704]     if (FALSE) {
[16:11:40.704]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:11:40.704]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:11:40.704]     }
[16:11:40.704]     ...future.result <- base::tryCatch({
[16:11:40.704]         base::withCallingHandlers({
[16:11:40.704]             ...future.value <- base::withVisible(base::local({
[16:11:40.704]                 42L
[16:11:40.704]                 stop("Woops")
[16:11:40.704]             }))
[16:11:40.704]             future::FutureResult(value = ...future.value$value, 
[16:11:40.704]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:40.704]                   ...future.rng), globalenv = if (FALSE) 
[16:11:40.704]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:11:40.704]                     ...future.globalenv.names))
[16:11:40.704]                 else NULL, started = ...future.startTime, version = "1.8")
[16:11:40.704]         }, condition = base::local({
[16:11:40.704]             c <- base::c
[16:11:40.704]             inherits <- base::inherits
[16:11:40.704]             invokeRestart <- base::invokeRestart
[16:11:40.704]             length <- base::length
[16:11:40.704]             list <- base::list
[16:11:40.704]             seq.int <- base::seq.int
[16:11:40.704]             signalCondition <- base::signalCondition
[16:11:40.704]             sys.calls <- base::sys.calls
[16:11:40.704]             `[[` <- base::`[[`
[16:11:40.704]             `+` <- base::`+`
[16:11:40.704]             `<<-` <- base::`<<-`
[16:11:40.704]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:11:40.704]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:11:40.704]                   3L)]
[16:11:40.704]             }
[16:11:40.704]             function(cond) {
[16:11:40.704]                 is_error <- inherits(cond, "error")
[16:11:40.704]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:11:40.704]                   NULL)
[16:11:40.704]                 if (is_error) {
[16:11:40.704]                   sessionInformation <- function() {
[16:11:40.704]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:11:40.704]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:11:40.704]                       search = base::search(), system = base::Sys.info())
[16:11:40.704]                   }
[16:11:40.704]                   ...future.conditions[[length(...future.conditions) + 
[16:11:40.704]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:11:40.704]                     cond$call), session = sessionInformation(), 
[16:11:40.704]                     timestamp = base::Sys.time(), signaled = 0L)
[16:11:40.704]                   signalCondition(cond)
[16:11:40.704]                 }
[16:11:40.704]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:11:40.704]                 "immediateCondition"))) {
[16:11:40.704]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:11:40.704]                   ...future.conditions[[length(...future.conditions) + 
[16:11:40.704]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:11:40.704]                   if (TRUE && !signal) {
[16:11:40.704]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:40.704]                     {
[16:11:40.704]                       inherits <- base::inherits
[16:11:40.704]                       invokeRestart <- base::invokeRestart
[16:11:40.704]                       is.null <- base::is.null
[16:11:40.704]                       muffled <- FALSE
[16:11:40.704]                       if (inherits(cond, "message")) {
[16:11:40.704]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:40.704]                         if (muffled) 
[16:11:40.704]                           invokeRestart("muffleMessage")
[16:11:40.704]                       }
[16:11:40.704]                       else if (inherits(cond, "warning")) {
[16:11:40.704]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:40.704]                         if (muffled) 
[16:11:40.704]                           invokeRestart("muffleWarning")
[16:11:40.704]                       }
[16:11:40.704]                       else if (inherits(cond, "condition")) {
[16:11:40.704]                         if (!is.null(pattern)) {
[16:11:40.704]                           computeRestarts <- base::computeRestarts
[16:11:40.704]                           grepl <- base::grepl
[16:11:40.704]                           restarts <- computeRestarts(cond)
[16:11:40.704]                           for (restart in restarts) {
[16:11:40.704]                             name <- restart$name
[16:11:40.704]                             if (is.null(name)) 
[16:11:40.704]                               next
[16:11:40.704]                             if (!grepl(pattern, name)) 
[16:11:40.704]                               next
[16:11:40.704]                             invokeRestart(restart)
[16:11:40.704]                             muffled <- TRUE
[16:11:40.704]                             break
[16:11:40.704]                           }
[16:11:40.704]                         }
[16:11:40.704]                       }
[16:11:40.704]                       invisible(muffled)
[16:11:40.704]                     }
[16:11:40.704]                     muffleCondition(cond, pattern = "^muffle")
[16:11:40.704]                   }
[16:11:40.704]                 }
[16:11:40.704]                 else {
[16:11:40.704]                   if (TRUE) {
[16:11:40.704]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:40.704]                     {
[16:11:40.704]                       inherits <- base::inherits
[16:11:40.704]                       invokeRestart <- base::invokeRestart
[16:11:40.704]                       is.null <- base::is.null
[16:11:40.704]                       muffled <- FALSE
[16:11:40.704]                       if (inherits(cond, "message")) {
[16:11:40.704]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:40.704]                         if (muffled) 
[16:11:40.704]                           invokeRestart("muffleMessage")
[16:11:40.704]                       }
[16:11:40.704]                       else if (inherits(cond, "warning")) {
[16:11:40.704]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:40.704]                         if (muffled) 
[16:11:40.704]                           invokeRestart("muffleWarning")
[16:11:40.704]                       }
[16:11:40.704]                       else if (inherits(cond, "condition")) {
[16:11:40.704]                         if (!is.null(pattern)) {
[16:11:40.704]                           computeRestarts <- base::computeRestarts
[16:11:40.704]                           grepl <- base::grepl
[16:11:40.704]                           restarts <- computeRestarts(cond)
[16:11:40.704]                           for (restart in restarts) {
[16:11:40.704]                             name <- restart$name
[16:11:40.704]                             if (is.null(name)) 
[16:11:40.704]                               next
[16:11:40.704]                             if (!grepl(pattern, name)) 
[16:11:40.704]                               next
[16:11:40.704]                             invokeRestart(restart)
[16:11:40.704]                             muffled <- TRUE
[16:11:40.704]                             break
[16:11:40.704]                           }
[16:11:40.704]                         }
[16:11:40.704]                       }
[16:11:40.704]                       invisible(muffled)
[16:11:40.704]                     }
[16:11:40.704]                     muffleCondition(cond, pattern = "^muffle")
[16:11:40.704]                   }
[16:11:40.704]                 }
[16:11:40.704]             }
[16:11:40.704]         }))
[16:11:40.704]     }, error = function(ex) {
[16:11:40.704]         base::structure(base::list(value = NULL, visible = NULL, 
[16:11:40.704]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:40.704]                 ...future.rng), started = ...future.startTime, 
[16:11:40.704]             finished = Sys.time(), session_uuid = NA_character_, 
[16:11:40.704]             version = "1.8"), class = "FutureResult")
[16:11:40.704]     }, finally = {
[16:11:40.704]         if (!identical(...future.workdir, getwd())) 
[16:11:40.704]             setwd(...future.workdir)
[16:11:40.704]         {
[16:11:40.704]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:11:40.704]                 ...future.oldOptions$nwarnings <- NULL
[16:11:40.704]             }
[16:11:40.704]             base::options(...future.oldOptions)
[16:11:40.704]             if (.Platform$OS.type == "windows") {
[16:11:40.704]                 old_names <- names(...future.oldEnvVars)
[16:11:40.704]                 envs <- base::Sys.getenv()
[16:11:40.704]                 names <- names(envs)
[16:11:40.704]                 common <- intersect(names, old_names)
[16:11:40.704]                 added <- setdiff(names, old_names)
[16:11:40.704]                 removed <- setdiff(old_names, names)
[16:11:40.704]                 changed <- common[...future.oldEnvVars[common] != 
[16:11:40.704]                   envs[common]]
[16:11:40.704]                 NAMES <- toupper(changed)
[16:11:40.704]                 args <- list()
[16:11:40.704]                 for (kk in seq_along(NAMES)) {
[16:11:40.704]                   name <- changed[[kk]]
[16:11:40.704]                   NAME <- NAMES[[kk]]
[16:11:40.704]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.704]                     next
[16:11:40.704]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:40.704]                 }
[16:11:40.704]                 NAMES <- toupper(added)
[16:11:40.704]                 for (kk in seq_along(NAMES)) {
[16:11:40.704]                   name <- added[[kk]]
[16:11:40.704]                   NAME <- NAMES[[kk]]
[16:11:40.704]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.704]                     next
[16:11:40.704]                   args[[name]] <- ""
[16:11:40.704]                 }
[16:11:40.704]                 NAMES <- toupper(removed)
[16:11:40.704]                 for (kk in seq_along(NAMES)) {
[16:11:40.704]                   name <- removed[[kk]]
[16:11:40.704]                   NAME <- NAMES[[kk]]
[16:11:40.704]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.704]                     next
[16:11:40.704]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:40.704]                 }
[16:11:40.704]                 if (length(args) > 0) 
[16:11:40.704]                   base::do.call(base::Sys.setenv, args = args)
[16:11:40.704]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:11:40.704]             }
[16:11:40.704]             else {
[16:11:40.704]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:11:40.704]             }
[16:11:40.704]             {
[16:11:40.704]                 if (base::length(...future.futureOptionsAdded) > 
[16:11:40.704]                   0L) {
[16:11:40.704]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:11:40.704]                   base::names(opts) <- ...future.futureOptionsAdded
[16:11:40.704]                   base::options(opts)
[16:11:40.704]                 }
[16:11:40.704]                 {
[16:11:40.704]                   {
[16:11:40.704]                     NULL
[16:11:40.704]                     RNGkind("Mersenne-Twister")
[16:11:40.704]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:11:40.704]                       inherits = FALSE)
[16:11:40.704]                   }
[16:11:40.704]                   options(future.plan = NULL)
[16:11:40.704]                   if (is.na(NA_character_)) 
[16:11:40.704]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:11:40.704]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:11:40.704]                   future::plan(list(function (..., envir = parent.frame()) 
[16:11:40.704]                   {
[16:11:40.704]                     future <- SequentialFuture(..., envir = envir)
[16:11:40.704]                     if (!future$lazy) 
[16:11:40.704]                       future <- run(future)
[16:11:40.704]                     invisible(future)
[16:11:40.704]                   }), .cleanup = FALSE, .init = FALSE)
[16:11:40.704]                 }
[16:11:40.704]             }
[16:11:40.704]         }
[16:11:40.704]     })
[16:11:40.704]     if (TRUE) {
[16:11:40.704]         base::sink(type = "output", split = FALSE)
[16:11:40.704]         if (TRUE) {
[16:11:40.704]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:11:40.704]         }
[16:11:40.704]         else {
[16:11:40.704]             ...future.result["stdout"] <- base::list(NULL)
[16:11:40.704]         }
[16:11:40.704]         base::close(...future.stdout)
[16:11:40.704]         ...future.stdout <- NULL
[16:11:40.704]     }
[16:11:40.704]     ...future.result$conditions <- ...future.conditions
[16:11:40.704]     ...future.result$finished <- base::Sys.time()
[16:11:40.704]     ...future.result
[16:11:40.704] }
[16:11:40.706] plan(): Setting new future strategy stack:
[16:11:40.706] List of future strategies:
[16:11:40.706] 1. sequential:
[16:11:40.706]    - args: function (..., envir = parent.frame())
[16:11:40.706]    - tweaked: FALSE
[16:11:40.706]    - call: NULL
[16:11:40.706] plan(): nbrOfWorkers() = 1
[16:11:40.707] plan(): Setting new future strategy stack:
[16:11:40.707] List of future strategies:
[16:11:40.707] 1. sequential:
[16:11:40.707]    - args: function (..., envir = parent.frame())
[16:11:40.707]    - tweaked: FALSE
[16:11:40.707]    - call: future::plan("sequential")
[16:11:40.707] plan(): nbrOfWorkers() = 1
[16:11:40.708] SequentialFuture started (and completed)
[16:11:40.708] signalConditions() ...
[16:11:40.708]  - include = ‘immediateCondition’
[16:11:40.708]  - exclude = 
[16:11:40.708]  - resignal = FALSE
[16:11:40.708]  - Number of conditions: 1
[16:11:40.708] signalConditions() ... done
[16:11:40.708] - Launch lazy future ... done
[16:11:40.708] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(v)
[16:11:40.709] resolved() for ‘SequentialFuture’ ...
[16:11:40.709] - state: ‘finished’
[16:11:40.709] - run: TRUE
[16:11:40.709] - result: ‘FutureResult’
[16:11:40.709] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
v %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - implicit future ... DONE")
*** backtrace( ) - implicit future ... DONE
> 
> 
> message("*** backtrace( ) - subsetting ...")
*** backtrace( ) - subsetting ...
> 
> env <- new.env()
> env[["a"]] %<-% { 42L; stop("Woops") }
[16:11:40.710] getGlobalsAndPackages() ...
[16:11:40.710] Searching for globals...
[16:11:40.711] - globals found: [2] ‘{’, ‘stop’
[16:11:40.711] Searching for globals ... DONE
[16:11:40.711] Resolving globals: FALSE
[16:11:40.711] 
[16:11:40.712] 
[16:11:40.712] getGlobalsAndPackages() ... DONE
[16:11:40.712] run() for ‘Future’ ...
[16:11:40.712] - state: ‘created’
[16:11:40.712] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:11:40.712] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:11:40.713] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:11:40.713]   - Field: ‘label’
[16:11:40.713]   - Field: ‘local’
[16:11:40.713]   - Field: ‘owner’
[16:11:40.713]   - Field: ‘envir’
[16:11:40.713]   - Field: ‘packages’
[16:11:40.713]   - Field: ‘gc’
[16:11:40.713]   - Field: ‘conditions’
[16:11:40.713]   - Field: ‘expr’
[16:11:40.713]   - Field: ‘uuid’
[16:11:40.713]   - Field: ‘seed’
[16:11:40.714]   - Field: ‘version’
[16:11:40.714]   - Field: ‘result’
[16:11:40.714]   - Field: ‘asynchronous’
[16:11:40.714]   - Field: ‘calls’
[16:11:40.714]   - Field: ‘globals’
[16:11:40.714]   - Field: ‘stdout’
[16:11:40.714]   - Field: ‘earlySignal’
[16:11:40.714]   - Field: ‘lazy’
[16:11:40.714]   - Field: ‘state’
[16:11:40.714] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:11:40.714] - Launch lazy future ...
[16:11:40.715] Packages needed by the future expression (n = 0): <none>
[16:11:40.715] Packages needed by future strategies (n = 0): <none>
[16:11:40.715] {
[16:11:40.715]     {
[16:11:40.715]         {
[16:11:40.715]             ...future.startTime <- base::Sys.time()
[16:11:40.715]             {
[16:11:40.715]                 {
[16:11:40.715]                   {
[16:11:40.715]                     base::local({
[16:11:40.715]                       has_future <- base::requireNamespace("future", 
[16:11:40.715]                         quietly = TRUE)
[16:11:40.715]                       if (has_future) {
[16:11:40.715]                         ns <- base::getNamespace("future")
[16:11:40.715]                         version <- ns[[".package"]][["version"]]
[16:11:40.715]                         if (is.null(version)) 
[16:11:40.715]                           version <- utils::packageVersion("future")
[16:11:40.715]                       }
[16:11:40.715]                       else {
[16:11:40.715]                         version <- NULL
[16:11:40.715]                       }
[16:11:40.715]                       if (!has_future || version < "1.8.0") {
[16:11:40.715]                         info <- base::c(r_version = base::gsub("R version ", 
[16:11:40.715]                           "", base::R.version$version.string), 
[16:11:40.715]                           platform = base::sprintf("%s (%s-bit)", 
[16:11:40.715]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:11:40.715]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:11:40.715]                             "release", "version")], collapse = " "), 
[16:11:40.715]                           hostname = base::Sys.info()[["nodename"]])
[16:11:40.715]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:11:40.715]                           info)
[16:11:40.715]                         info <- base::paste(info, collapse = "; ")
[16:11:40.715]                         if (!has_future) {
[16:11:40.715]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:11:40.715]                             info)
[16:11:40.715]                         }
[16:11:40.715]                         else {
[16:11:40.715]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:11:40.715]                             info, version)
[16:11:40.715]                         }
[16:11:40.715]                         base::stop(msg)
[16:11:40.715]                       }
[16:11:40.715]                     })
[16:11:40.715]                   }
[16:11:40.715]                   options(future.plan = NULL)
[16:11:40.715]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:11:40.715]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:11:40.715]                 }
[16:11:40.715]                 ...future.workdir <- getwd()
[16:11:40.715]             }
[16:11:40.715]             ...future.oldOptions <- base::as.list(base::.Options)
[16:11:40.715]             ...future.oldEnvVars <- base::Sys.getenv()
[16:11:40.715]         }
[16:11:40.715]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:11:40.715]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:11:40.715]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:11:40.715]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:11:40.715]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:11:40.715]             future.stdout.windows.reencode = NULL, width = 80L)
[16:11:40.715]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:11:40.715]             base::names(...future.oldOptions))
[16:11:40.715]     }
[16:11:40.715]     if (FALSE) {
[16:11:40.715]     }
[16:11:40.715]     else {
[16:11:40.715]         if (TRUE) {
[16:11:40.715]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:11:40.715]                 open = "w")
[16:11:40.715]         }
[16:11:40.715]         else {
[16:11:40.715]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:11:40.715]                 windows = "NUL", "/dev/null"), open = "w")
[16:11:40.715]         }
[16:11:40.715]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:11:40.715]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:11:40.715]             base::sink(type = "output", split = FALSE)
[16:11:40.715]             base::close(...future.stdout)
[16:11:40.715]         }, add = TRUE)
[16:11:40.715]     }
[16:11:40.715]     ...future.frame <- base::sys.nframe()
[16:11:40.715]     ...future.conditions <- base::list()
[16:11:40.715]     ...future.rng <- base::globalenv()$.Random.seed
[16:11:40.715]     if (FALSE) {
[16:11:40.715]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:11:40.715]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:11:40.715]     }
[16:11:40.715]     ...future.result <- base::tryCatch({
[16:11:40.715]         base::withCallingHandlers({
[16:11:40.715]             ...future.value <- base::withVisible(base::local({
[16:11:40.715]                 42L
[16:11:40.715]                 stop("Woops")
[16:11:40.715]             }))
[16:11:40.715]             future::FutureResult(value = ...future.value$value, 
[16:11:40.715]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:40.715]                   ...future.rng), globalenv = if (FALSE) 
[16:11:40.715]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:11:40.715]                     ...future.globalenv.names))
[16:11:40.715]                 else NULL, started = ...future.startTime, version = "1.8")
[16:11:40.715]         }, condition = base::local({
[16:11:40.715]             c <- base::c
[16:11:40.715]             inherits <- base::inherits
[16:11:40.715]             invokeRestart <- base::invokeRestart
[16:11:40.715]             length <- base::length
[16:11:40.715]             list <- base::list
[16:11:40.715]             seq.int <- base::seq.int
[16:11:40.715]             signalCondition <- base::signalCondition
[16:11:40.715]             sys.calls <- base::sys.calls
[16:11:40.715]             `[[` <- base::`[[`
[16:11:40.715]             `+` <- base::`+`
[16:11:40.715]             `<<-` <- base::`<<-`
[16:11:40.715]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:11:40.715]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:11:40.715]                   3L)]
[16:11:40.715]             }
[16:11:40.715]             function(cond) {
[16:11:40.715]                 is_error <- inherits(cond, "error")
[16:11:40.715]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:11:40.715]                   NULL)
[16:11:40.715]                 if (is_error) {
[16:11:40.715]                   sessionInformation <- function() {
[16:11:40.715]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:11:40.715]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:11:40.715]                       search = base::search(), system = base::Sys.info())
[16:11:40.715]                   }
[16:11:40.715]                   ...future.conditions[[length(...future.conditions) + 
[16:11:40.715]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:11:40.715]                     cond$call), session = sessionInformation(), 
[16:11:40.715]                     timestamp = base::Sys.time(), signaled = 0L)
[16:11:40.715]                   signalCondition(cond)
[16:11:40.715]                 }
[16:11:40.715]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:11:40.715]                 "immediateCondition"))) {
[16:11:40.715]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:11:40.715]                   ...future.conditions[[length(...future.conditions) + 
[16:11:40.715]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:11:40.715]                   if (TRUE && !signal) {
[16:11:40.715]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:40.715]                     {
[16:11:40.715]                       inherits <- base::inherits
[16:11:40.715]                       invokeRestart <- base::invokeRestart
[16:11:40.715]                       is.null <- base::is.null
[16:11:40.715]                       muffled <- FALSE
[16:11:40.715]                       if (inherits(cond, "message")) {
[16:11:40.715]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:40.715]                         if (muffled) 
[16:11:40.715]                           invokeRestart("muffleMessage")
[16:11:40.715]                       }
[16:11:40.715]                       else if (inherits(cond, "warning")) {
[16:11:40.715]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:40.715]                         if (muffled) 
[16:11:40.715]                           invokeRestart("muffleWarning")
[16:11:40.715]                       }
[16:11:40.715]                       else if (inherits(cond, "condition")) {
[16:11:40.715]                         if (!is.null(pattern)) {
[16:11:40.715]                           computeRestarts <- base::computeRestarts
[16:11:40.715]                           grepl <- base::grepl
[16:11:40.715]                           restarts <- computeRestarts(cond)
[16:11:40.715]                           for (restart in restarts) {
[16:11:40.715]                             name <- restart$name
[16:11:40.715]                             if (is.null(name)) 
[16:11:40.715]                               next
[16:11:40.715]                             if (!grepl(pattern, name)) 
[16:11:40.715]                               next
[16:11:40.715]                             invokeRestart(restart)
[16:11:40.715]                             muffled <- TRUE
[16:11:40.715]                             break
[16:11:40.715]                           }
[16:11:40.715]                         }
[16:11:40.715]                       }
[16:11:40.715]                       invisible(muffled)
[16:11:40.715]                     }
[16:11:40.715]                     muffleCondition(cond, pattern = "^muffle")
[16:11:40.715]                   }
[16:11:40.715]                 }
[16:11:40.715]                 else {
[16:11:40.715]                   if (TRUE) {
[16:11:40.715]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:40.715]                     {
[16:11:40.715]                       inherits <- base::inherits
[16:11:40.715]                       invokeRestart <- base::invokeRestart
[16:11:40.715]                       is.null <- base::is.null
[16:11:40.715]                       muffled <- FALSE
[16:11:40.715]                       if (inherits(cond, "message")) {
[16:11:40.715]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:40.715]                         if (muffled) 
[16:11:40.715]                           invokeRestart("muffleMessage")
[16:11:40.715]                       }
[16:11:40.715]                       else if (inherits(cond, "warning")) {
[16:11:40.715]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:40.715]                         if (muffled) 
[16:11:40.715]                           invokeRestart("muffleWarning")
[16:11:40.715]                       }
[16:11:40.715]                       else if (inherits(cond, "condition")) {
[16:11:40.715]                         if (!is.null(pattern)) {
[16:11:40.715]                           computeRestarts <- base::computeRestarts
[16:11:40.715]                           grepl <- base::grepl
[16:11:40.715]                           restarts <- computeRestarts(cond)
[16:11:40.715]                           for (restart in restarts) {
[16:11:40.715]                             name <- restart$name
[16:11:40.715]                             if (is.null(name)) 
[16:11:40.715]                               next
[16:11:40.715]                             if (!grepl(pattern, name)) 
[16:11:40.715]                               next
[16:11:40.715]                             invokeRestart(restart)
[16:11:40.715]                             muffled <- TRUE
[16:11:40.715]                             break
[16:11:40.715]                           }
[16:11:40.715]                         }
[16:11:40.715]                       }
[16:11:40.715]                       invisible(muffled)
[16:11:40.715]                     }
[16:11:40.715]                     muffleCondition(cond, pattern = "^muffle")
[16:11:40.715]                   }
[16:11:40.715]                 }
[16:11:40.715]             }
[16:11:40.715]         }))
[16:11:40.715]     }, error = function(ex) {
[16:11:40.715]         base::structure(base::list(value = NULL, visible = NULL, 
[16:11:40.715]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:40.715]                 ...future.rng), started = ...future.startTime, 
[16:11:40.715]             finished = Sys.time(), session_uuid = NA_character_, 
[16:11:40.715]             version = "1.8"), class = "FutureResult")
[16:11:40.715]     }, finally = {
[16:11:40.715]         if (!identical(...future.workdir, getwd())) 
[16:11:40.715]             setwd(...future.workdir)
[16:11:40.715]         {
[16:11:40.715]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:11:40.715]                 ...future.oldOptions$nwarnings <- NULL
[16:11:40.715]             }
[16:11:40.715]             base::options(...future.oldOptions)
[16:11:40.715]             if (.Platform$OS.type == "windows") {
[16:11:40.715]                 old_names <- names(...future.oldEnvVars)
[16:11:40.715]                 envs <- base::Sys.getenv()
[16:11:40.715]                 names <- names(envs)
[16:11:40.715]                 common <- intersect(names, old_names)
[16:11:40.715]                 added <- setdiff(names, old_names)
[16:11:40.715]                 removed <- setdiff(old_names, names)
[16:11:40.715]                 changed <- common[...future.oldEnvVars[common] != 
[16:11:40.715]                   envs[common]]
[16:11:40.715]                 NAMES <- toupper(changed)
[16:11:40.715]                 args <- list()
[16:11:40.715]                 for (kk in seq_along(NAMES)) {
[16:11:40.715]                   name <- changed[[kk]]
[16:11:40.715]                   NAME <- NAMES[[kk]]
[16:11:40.715]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.715]                     next
[16:11:40.715]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:40.715]                 }
[16:11:40.715]                 NAMES <- toupper(added)
[16:11:40.715]                 for (kk in seq_along(NAMES)) {
[16:11:40.715]                   name <- added[[kk]]
[16:11:40.715]                   NAME <- NAMES[[kk]]
[16:11:40.715]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.715]                     next
[16:11:40.715]                   args[[name]] <- ""
[16:11:40.715]                 }
[16:11:40.715]                 NAMES <- toupper(removed)
[16:11:40.715]                 for (kk in seq_along(NAMES)) {
[16:11:40.715]                   name <- removed[[kk]]
[16:11:40.715]                   NAME <- NAMES[[kk]]
[16:11:40.715]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.715]                     next
[16:11:40.715]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:40.715]                 }
[16:11:40.715]                 if (length(args) > 0) 
[16:11:40.715]                   base::do.call(base::Sys.setenv, args = args)
[16:11:40.715]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:11:40.715]             }
[16:11:40.715]             else {
[16:11:40.715]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:11:40.715]             }
[16:11:40.715]             {
[16:11:40.715]                 if (base::length(...future.futureOptionsAdded) > 
[16:11:40.715]                   0L) {
[16:11:40.715]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:11:40.715]                   base::names(opts) <- ...future.futureOptionsAdded
[16:11:40.715]                   base::options(opts)
[16:11:40.715]                 }
[16:11:40.715]                 {
[16:11:40.715]                   {
[16:11:40.715]                     NULL
[16:11:40.715]                     RNGkind("Mersenne-Twister")
[16:11:40.715]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:11:40.715]                       inherits = FALSE)
[16:11:40.715]                   }
[16:11:40.715]                   options(future.plan = NULL)
[16:11:40.715]                   if (is.na(NA_character_)) 
[16:11:40.715]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:11:40.715]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:11:40.715]                   future::plan(list(function (..., envir = parent.frame()) 
[16:11:40.715]                   {
[16:11:40.715]                     future <- SequentialFuture(..., envir = envir)
[16:11:40.715]                     if (!future$lazy) 
[16:11:40.715]                       future <- run(future)
[16:11:40.715]                     invisible(future)
[16:11:40.715]                   }), .cleanup = FALSE, .init = FALSE)
[16:11:40.715]                 }
[16:11:40.715]             }
[16:11:40.715]         }
[16:11:40.715]     })
[16:11:40.715]     if (TRUE) {
[16:11:40.715]         base::sink(type = "output", split = FALSE)
[16:11:40.715]         if (TRUE) {
[16:11:40.715]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:11:40.715]         }
[16:11:40.715]         else {
[16:11:40.715]             ...future.result["stdout"] <- base::list(NULL)
[16:11:40.715]         }
[16:11:40.715]         base::close(...future.stdout)
[16:11:40.715]         ...future.stdout <- NULL
[16:11:40.715]     }
[16:11:40.715]     ...future.result$conditions <- ...future.conditions
[16:11:40.715]     ...future.result$finished <- base::Sys.time()
[16:11:40.715]     ...future.result
[16:11:40.715] }
[16:11:40.717] plan(): Setting new future strategy stack:
[16:11:40.717] List of future strategies:
[16:11:40.717] 1. sequential:
[16:11:40.717]    - args: function (..., envir = parent.frame())
[16:11:40.717]    - tweaked: FALSE
[16:11:40.717]    - call: NULL
[16:11:40.717] plan(): nbrOfWorkers() = 1
[16:11:40.718] plan(): Setting new future strategy stack:
[16:11:40.718] List of future strategies:
[16:11:40.718] 1. sequential:
[16:11:40.718]    - args: function (..., envir = parent.frame())
[16:11:40.718]    - tweaked: FALSE
[16:11:40.718]    - call: future::plan("sequential")
[16:11:40.719] plan(): nbrOfWorkers() = 1
[16:11:40.719] SequentialFuture started (and completed)
[16:11:40.719] signalConditions() ...
[16:11:40.719]  - include = ‘immediateCondition’
[16:11:40.719]  - exclude = 
[16:11:40.719]  - resignal = FALSE
[16:11:40.719]  - Number of conditions: 1
[16:11:40.719] signalConditions() ... done
[16:11:40.720] - Launch lazy future ... done
[16:11:40.720] run() for ‘SequentialFuture’ ... done
> env[["b"]] %<-% { 42L; stop("Woops") }
[16:11:40.720] getGlobalsAndPackages() ...
[16:11:40.720] Searching for globals...
[16:11:40.721] - globals found: [2] ‘{’, ‘stop’
[16:11:40.721] Searching for globals ... DONE
[16:11:40.721] Resolving globals: FALSE
[16:11:40.721] 
[16:11:40.722] 
[16:11:40.722] getGlobalsAndPackages() ... DONE
[16:11:40.722] run() for ‘Future’ ...
[16:11:40.722] - state: ‘created’
[16:11:40.722] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:11:40.722] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:11:40.722] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:11:40.723]   - Field: ‘label’
[16:11:40.723]   - Field: ‘local’
[16:11:40.723]   - Field: ‘owner’
[16:11:40.723]   - Field: ‘envir’
[16:11:40.723]   - Field: ‘packages’
[16:11:40.723]   - Field: ‘gc’
[16:11:40.723]   - Field: ‘conditions’
[16:11:40.723]   - Field: ‘expr’
[16:11:40.723]   - Field: ‘uuid’
[16:11:40.723]   - Field: ‘seed’
[16:11:40.723]   - Field: ‘version’
[16:11:40.724]   - Field: ‘result’
[16:11:40.724]   - Field: ‘asynchronous’
[16:11:40.724]   - Field: ‘calls’
[16:11:40.724]   - Field: ‘globals’
[16:11:40.724]   - Field: ‘stdout’
[16:11:40.724]   - Field: ‘earlySignal’
[16:11:40.724]   - Field: ‘lazy’
[16:11:40.724]   - Field: ‘state’
[16:11:40.724] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:11:40.724] - Launch lazy future ...
[16:11:40.725] Packages needed by the future expression (n = 0): <none>
[16:11:40.725] Packages needed by future strategies (n = 0): <none>
[16:11:40.725] {
[16:11:40.725]     {
[16:11:40.725]         {
[16:11:40.725]             ...future.startTime <- base::Sys.time()
[16:11:40.725]             {
[16:11:40.725]                 {
[16:11:40.725]                   {
[16:11:40.725]                     base::local({
[16:11:40.725]                       has_future <- base::requireNamespace("future", 
[16:11:40.725]                         quietly = TRUE)
[16:11:40.725]                       if (has_future) {
[16:11:40.725]                         ns <- base::getNamespace("future")
[16:11:40.725]                         version <- ns[[".package"]][["version"]]
[16:11:40.725]                         if (is.null(version)) 
[16:11:40.725]                           version <- utils::packageVersion("future")
[16:11:40.725]                       }
[16:11:40.725]                       else {
[16:11:40.725]                         version <- NULL
[16:11:40.725]                       }
[16:11:40.725]                       if (!has_future || version < "1.8.0") {
[16:11:40.725]                         info <- base::c(r_version = base::gsub("R version ", 
[16:11:40.725]                           "", base::R.version$version.string), 
[16:11:40.725]                           platform = base::sprintf("%s (%s-bit)", 
[16:11:40.725]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:11:40.725]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:11:40.725]                             "release", "version")], collapse = " "), 
[16:11:40.725]                           hostname = base::Sys.info()[["nodename"]])
[16:11:40.725]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:11:40.725]                           info)
[16:11:40.725]                         info <- base::paste(info, collapse = "; ")
[16:11:40.725]                         if (!has_future) {
[16:11:40.725]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:11:40.725]                             info)
[16:11:40.725]                         }
[16:11:40.725]                         else {
[16:11:40.725]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:11:40.725]                             info, version)
[16:11:40.725]                         }
[16:11:40.725]                         base::stop(msg)
[16:11:40.725]                       }
[16:11:40.725]                     })
[16:11:40.725]                   }
[16:11:40.725]                   options(future.plan = NULL)
[16:11:40.725]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:11:40.725]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:11:40.725]                 }
[16:11:40.725]                 ...future.workdir <- getwd()
[16:11:40.725]             }
[16:11:40.725]             ...future.oldOptions <- base::as.list(base::.Options)
[16:11:40.725]             ...future.oldEnvVars <- base::Sys.getenv()
[16:11:40.725]         }
[16:11:40.725]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:11:40.725]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:11:40.725]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:11:40.725]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:11:40.725]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:11:40.725]             future.stdout.windows.reencode = NULL, width = 80L)
[16:11:40.725]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:11:40.725]             base::names(...future.oldOptions))
[16:11:40.725]     }
[16:11:40.725]     if (FALSE) {
[16:11:40.725]     }
[16:11:40.725]     else {
[16:11:40.725]         if (TRUE) {
[16:11:40.725]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:11:40.725]                 open = "w")
[16:11:40.725]         }
[16:11:40.725]         else {
[16:11:40.725]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:11:40.725]                 windows = "NUL", "/dev/null"), open = "w")
[16:11:40.725]         }
[16:11:40.725]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:11:40.725]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:11:40.725]             base::sink(type = "output", split = FALSE)
[16:11:40.725]             base::close(...future.stdout)
[16:11:40.725]         }, add = TRUE)
[16:11:40.725]     }
[16:11:40.725]     ...future.frame <- base::sys.nframe()
[16:11:40.725]     ...future.conditions <- base::list()
[16:11:40.725]     ...future.rng <- base::globalenv()$.Random.seed
[16:11:40.725]     if (FALSE) {
[16:11:40.725]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:11:40.725]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:11:40.725]     }
[16:11:40.725]     ...future.result <- base::tryCatch({
[16:11:40.725]         base::withCallingHandlers({
[16:11:40.725]             ...future.value <- base::withVisible(base::local({
[16:11:40.725]                 42L
[16:11:40.725]                 stop("Woops")
[16:11:40.725]             }))
[16:11:40.725]             future::FutureResult(value = ...future.value$value, 
[16:11:40.725]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:40.725]                   ...future.rng), globalenv = if (FALSE) 
[16:11:40.725]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:11:40.725]                     ...future.globalenv.names))
[16:11:40.725]                 else NULL, started = ...future.startTime, version = "1.8")
[16:11:40.725]         }, condition = base::local({
[16:11:40.725]             c <- base::c
[16:11:40.725]             inherits <- base::inherits
[16:11:40.725]             invokeRestart <- base::invokeRestart
[16:11:40.725]             length <- base::length
[16:11:40.725]             list <- base::list
[16:11:40.725]             seq.int <- base::seq.int
[16:11:40.725]             signalCondition <- base::signalCondition
[16:11:40.725]             sys.calls <- base::sys.calls
[16:11:40.725]             `[[` <- base::`[[`
[16:11:40.725]             `+` <- base::`+`
[16:11:40.725]             `<<-` <- base::`<<-`
[16:11:40.725]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:11:40.725]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:11:40.725]                   3L)]
[16:11:40.725]             }
[16:11:40.725]             function(cond) {
[16:11:40.725]                 is_error <- inherits(cond, "error")
[16:11:40.725]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:11:40.725]                   NULL)
[16:11:40.725]                 if (is_error) {
[16:11:40.725]                   sessionInformation <- function() {
[16:11:40.725]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:11:40.725]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:11:40.725]                       search = base::search(), system = base::Sys.info())
[16:11:40.725]                   }
[16:11:40.725]                   ...future.conditions[[length(...future.conditions) + 
[16:11:40.725]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:11:40.725]                     cond$call), session = sessionInformation(), 
[16:11:40.725]                     timestamp = base::Sys.time(), signaled = 0L)
[16:11:40.725]                   signalCondition(cond)
[16:11:40.725]                 }
[16:11:40.725]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:11:40.725]                 "immediateCondition"))) {
[16:11:40.725]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:11:40.725]                   ...future.conditions[[length(...future.conditions) + 
[16:11:40.725]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:11:40.725]                   if (TRUE && !signal) {
[16:11:40.725]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:40.725]                     {
[16:11:40.725]                       inherits <- base::inherits
[16:11:40.725]                       invokeRestart <- base::invokeRestart
[16:11:40.725]                       is.null <- base::is.null
[16:11:40.725]                       muffled <- FALSE
[16:11:40.725]                       if (inherits(cond, "message")) {
[16:11:40.725]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:40.725]                         if (muffled) 
[16:11:40.725]                           invokeRestart("muffleMessage")
[16:11:40.725]                       }
[16:11:40.725]                       else if (inherits(cond, "warning")) {
[16:11:40.725]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:40.725]                         if (muffled) 
[16:11:40.725]                           invokeRestart("muffleWarning")
[16:11:40.725]                       }
[16:11:40.725]                       else if (inherits(cond, "condition")) {
[16:11:40.725]                         if (!is.null(pattern)) {
[16:11:40.725]                           computeRestarts <- base::computeRestarts
[16:11:40.725]                           grepl <- base::grepl
[16:11:40.725]                           restarts <- computeRestarts(cond)
[16:11:40.725]                           for (restart in restarts) {
[16:11:40.725]                             name <- restart$name
[16:11:40.725]                             if (is.null(name)) 
[16:11:40.725]                               next
[16:11:40.725]                             if (!grepl(pattern, name)) 
[16:11:40.725]                               next
[16:11:40.725]                             invokeRestart(restart)
[16:11:40.725]                             muffled <- TRUE
[16:11:40.725]                             break
[16:11:40.725]                           }
[16:11:40.725]                         }
[16:11:40.725]                       }
[16:11:40.725]                       invisible(muffled)
[16:11:40.725]                     }
[16:11:40.725]                     muffleCondition(cond, pattern = "^muffle")
[16:11:40.725]                   }
[16:11:40.725]                 }
[16:11:40.725]                 else {
[16:11:40.725]                   if (TRUE) {
[16:11:40.725]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:40.725]                     {
[16:11:40.725]                       inherits <- base::inherits
[16:11:40.725]                       invokeRestart <- base::invokeRestart
[16:11:40.725]                       is.null <- base::is.null
[16:11:40.725]                       muffled <- FALSE
[16:11:40.725]                       if (inherits(cond, "message")) {
[16:11:40.725]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:40.725]                         if (muffled) 
[16:11:40.725]                           invokeRestart("muffleMessage")
[16:11:40.725]                       }
[16:11:40.725]                       else if (inherits(cond, "warning")) {
[16:11:40.725]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:40.725]                         if (muffled) 
[16:11:40.725]                           invokeRestart("muffleWarning")
[16:11:40.725]                       }
[16:11:40.725]                       else if (inherits(cond, "condition")) {
[16:11:40.725]                         if (!is.null(pattern)) {
[16:11:40.725]                           computeRestarts <- base::computeRestarts
[16:11:40.725]                           grepl <- base::grepl
[16:11:40.725]                           restarts <- computeRestarts(cond)
[16:11:40.725]                           for (restart in restarts) {
[16:11:40.725]                             name <- restart$name
[16:11:40.725]                             if (is.null(name)) 
[16:11:40.725]                               next
[16:11:40.725]                             if (!grepl(pattern, name)) 
[16:11:40.725]                               next
[16:11:40.725]                             invokeRestart(restart)
[16:11:40.725]                             muffled <- TRUE
[16:11:40.725]                             break
[16:11:40.725]                           }
[16:11:40.725]                         }
[16:11:40.725]                       }
[16:11:40.725]                       invisible(muffled)
[16:11:40.725]                     }
[16:11:40.725]                     muffleCondition(cond, pattern = "^muffle")
[16:11:40.725]                   }
[16:11:40.725]                 }
[16:11:40.725]             }
[16:11:40.725]         }))
[16:11:40.725]     }, error = function(ex) {
[16:11:40.725]         base::structure(base::list(value = NULL, visible = NULL, 
[16:11:40.725]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:40.725]                 ...future.rng), started = ...future.startTime, 
[16:11:40.725]             finished = Sys.time(), session_uuid = NA_character_, 
[16:11:40.725]             version = "1.8"), class = "FutureResult")
[16:11:40.725]     }, finally = {
[16:11:40.725]         if (!identical(...future.workdir, getwd())) 
[16:11:40.725]             setwd(...future.workdir)
[16:11:40.725]         {
[16:11:40.725]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:11:40.725]                 ...future.oldOptions$nwarnings <- NULL
[16:11:40.725]             }
[16:11:40.725]             base::options(...future.oldOptions)
[16:11:40.725]             if (.Platform$OS.type == "windows") {
[16:11:40.725]                 old_names <- names(...future.oldEnvVars)
[16:11:40.725]                 envs <- base::Sys.getenv()
[16:11:40.725]                 names <- names(envs)
[16:11:40.725]                 common <- intersect(names, old_names)
[16:11:40.725]                 added <- setdiff(names, old_names)
[16:11:40.725]                 removed <- setdiff(old_names, names)
[16:11:40.725]                 changed <- common[...future.oldEnvVars[common] != 
[16:11:40.725]                   envs[common]]
[16:11:40.725]                 NAMES <- toupper(changed)
[16:11:40.725]                 args <- list()
[16:11:40.725]                 for (kk in seq_along(NAMES)) {
[16:11:40.725]                   name <- changed[[kk]]
[16:11:40.725]                   NAME <- NAMES[[kk]]
[16:11:40.725]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.725]                     next
[16:11:40.725]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:40.725]                 }
[16:11:40.725]                 NAMES <- toupper(added)
[16:11:40.725]                 for (kk in seq_along(NAMES)) {
[16:11:40.725]                   name <- added[[kk]]
[16:11:40.725]                   NAME <- NAMES[[kk]]
[16:11:40.725]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.725]                     next
[16:11:40.725]                   args[[name]] <- ""
[16:11:40.725]                 }
[16:11:40.725]                 NAMES <- toupper(removed)
[16:11:40.725]                 for (kk in seq_along(NAMES)) {
[16:11:40.725]                   name <- removed[[kk]]
[16:11:40.725]                   NAME <- NAMES[[kk]]
[16:11:40.725]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.725]                     next
[16:11:40.725]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:40.725]                 }
[16:11:40.725]                 if (length(args) > 0) 
[16:11:40.725]                   base::do.call(base::Sys.setenv, args = args)
[16:11:40.725]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:11:40.725]             }
[16:11:40.725]             else {
[16:11:40.725]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:11:40.725]             }
[16:11:40.725]             {
[16:11:40.725]                 if (base::length(...future.futureOptionsAdded) > 
[16:11:40.725]                   0L) {
[16:11:40.725]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:11:40.725]                   base::names(opts) <- ...future.futureOptionsAdded
[16:11:40.725]                   base::options(opts)
[16:11:40.725]                 }
[16:11:40.725]                 {
[16:11:40.725]                   {
[16:11:40.725]                     NULL
[16:11:40.725]                     RNGkind("Mersenne-Twister")
[16:11:40.725]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:11:40.725]                       inherits = FALSE)
[16:11:40.725]                   }
[16:11:40.725]                   options(future.plan = NULL)
[16:11:40.725]                   if (is.na(NA_character_)) 
[16:11:40.725]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:11:40.725]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:11:40.725]                   future::plan(list(function (..., envir = parent.frame()) 
[16:11:40.725]                   {
[16:11:40.725]                     future <- SequentialFuture(..., envir = envir)
[16:11:40.725]                     if (!future$lazy) 
[16:11:40.725]                       future <- run(future)
[16:11:40.725]                     invisible(future)
[16:11:40.725]                   }), .cleanup = FALSE, .init = FALSE)
[16:11:40.725]                 }
[16:11:40.725]             }
[16:11:40.725]         }
[16:11:40.725]     })
[16:11:40.725]     if (TRUE) {
[16:11:40.725]         base::sink(type = "output", split = FALSE)
[16:11:40.725]         if (TRUE) {
[16:11:40.725]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:11:40.725]         }
[16:11:40.725]         else {
[16:11:40.725]             ...future.result["stdout"] <- base::list(NULL)
[16:11:40.725]         }
[16:11:40.725]         base::close(...future.stdout)
[16:11:40.725]         ...future.stdout <- NULL
[16:11:40.725]     }
[16:11:40.725]     ...future.result$conditions <- ...future.conditions
[16:11:40.725]     ...future.result$finished <- base::Sys.time()
[16:11:40.725]     ...future.result
[16:11:40.725] }
[16:11:40.727] plan(): Setting new future strategy stack:
[16:11:40.727] List of future strategies:
[16:11:40.727] 1. sequential:
[16:11:40.727]    - args: function (..., envir = parent.frame())
[16:11:40.727]    - tweaked: FALSE
[16:11:40.727]    - call: NULL
[16:11:40.727] plan(): nbrOfWorkers() = 1
[16:11:40.728] plan(): Setting new future strategy stack:
[16:11:40.728] List of future strategies:
[16:11:40.728] 1. sequential:
[16:11:40.728]    - args: function (..., envir = parent.frame())
[16:11:40.728]    - tweaked: FALSE
[16:11:40.728]    - call: future::plan("sequential")
[16:11:40.729] plan(): nbrOfWorkers() = 1
[16:11:40.729] SequentialFuture started (and completed)
[16:11:40.729] signalConditions() ...
[16:11:40.729]  - include = ‘immediateCondition’
[16:11:40.729]  - exclude = 
[16:11:40.729]  - resignal = FALSE
[16:11:40.729]  - Number of conditions: 1
[16:11:40.729] signalConditions() ... done
[16:11:40.729] - Launch lazy future ... done
[16:11:40.729] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(env[["b"]])
[16:11:40.730] resolved() for ‘SequentialFuture’ ...
[16:11:40.730] - state: ‘finished’
[16:11:40.730] - run: TRUE
[16:11:40.730] - result: ‘FutureResult’
[16:11:40.730] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
env[["b"]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> lenv <- listenv::listenv()
> lenv[[1]] %<-% { 42L; stop("Woops") }
[16:11:40.731] getGlobalsAndPackages() ...
[16:11:40.731] Searching for globals...
[16:11:40.732] - globals found: [2] ‘{’, ‘stop’
[16:11:40.732] Searching for globals ... DONE
[16:11:40.733] Resolving globals: FALSE
[16:11:40.733] 
[16:11:40.733] 
[16:11:40.733] getGlobalsAndPackages() ... DONE
[16:11:40.733] run() for ‘Future’ ...
[16:11:40.733] - state: ‘created’
[16:11:40.733] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:11:40.734] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:11:40.734] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:11:40.735]   - Field: ‘label’
[16:11:40.736]   - Field: ‘local’
[16:11:40.736]   - Field: ‘owner’
[16:11:40.736]   - Field: ‘envir’
[16:11:40.736]   - Field: ‘packages’
[16:11:40.736]   - Field: ‘gc’
[16:11:40.736]   - Field: ‘conditions’
[16:11:40.736]   - Field: ‘expr’
[16:11:40.736]   - Field: ‘uuid’
[16:11:40.736]   - Field: ‘seed’
[16:11:40.736]   - Field: ‘version’
[16:11:40.737]   - Field: ‘result’
[16:11:40.737]   - Field: ‘asynchronous’
[16:11:40.737]   - Field: ‘calls’
[16:11:40.737]   - Field: ‘globals’
[16:11:40.737]   - Field: ‘stdout’
[16:11:40.737]   - Field: ‘earlySignal’
[16:11:40.737]   - Field: ‘lazy’
[16:11:40.737]   - Field: ‘state’
[16:11:40.737] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:11:40.737] - Launch lazy future ...
[16:11:40.738] Packages needed by the future expression (n = 0): <none>
[16:11:40.738] Packages needed by future strategies (n = 0): <none>
[16:11:40.738] {
[16:11:40.738]     {
[16:11:40.738]         {
[16:11:40.738]             ...future.startTime <- base::Sys.time()
[16:11:40.738]             {
[16:11:40.738]                 {
[16:11:40.738]                   {
[16:11:40.738]                     base::local({
[16:11:40.738]                       has_future <- base::requireNamespace("future", 
[16:11:40.738]                         quietly = TRUE)
[16:11:40.738]                       if (has_future) {
[16:11:40.738]                         ns <- base::getNamespace("future")
[16:11:40.738]                         version <- ns[[".package"]][["version"]]
[16:11:40.738]                         if (is.null(version)) 
[16:11:40.738]                           version <- utils::packageVersion("future")
[16:11:40.738]                       }
[16:11:40.738]                       else {
[16:11:40.738]                         version <- NULL
[16:11:40.738]                       }
[16:11:40.738]                       if (!has_future || version < "1.8.0") {
[16:11:40.738]                         info <- base::c(r_version = base::gsub("R version ", 
[16:11:40.738]                           "", base::R.version$version.string), 
[16:11:40.738]                           platform = base::sprintf("%s (%s-bit)", 
[16:11:40.738]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:11:40.738]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:11:40.738]                             "release", "version")], collapse = " "), 
[16:11:40.738]                           hostname = base::Sys.info()[["nodename"]])
[16:11:40.738]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:11:40.738]                           info)
[16:11:40.738]                         info <- base::paste(info, collapse = "; ")
[16:11:40.738]                         if (!has_future) {
[16:11:40.738]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:11:40.738]                             info)
[16:11:40.738]                         }
[16:11:40.738]                         else {
[16:11:40.738]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:11:40.738]                             info, version)
[16:11:40.738]                         }
[16:11:40.738]                         base::stop(msg)
[16:11:40.738]                       }
[16:11:40.738]                     })
[16:11:40.738]                   }
[16:11:40.738]                   options(future.plan = NULL)
[16:11:40.738]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:11:40.738]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:11:40.738]                 }
[16:11:40.738]                 ...future.workdir <- getwd()
[16:11:40.738]             }
[16:11:40.738]             ...future.oldOptions <- base::as.list(base::.Options)
[16:11:40.738]             ...future.oldEnvVars <- base::Sys.getenv()
[16:11:40.738]         }
[16:11:40.738]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:11:40.738]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:11:40.738]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:11:40.738]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:11:40.738]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:11:40.738]             future.stdout.windows.reencode = NULL, width = 80L)
[16:11:40.738]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:11:40.738]             base::names(...future.oldOptions))
[16:11:40.738]     }
[16:11:40.738]     if (FALSE) {
[16:11:40.738]     }
[16:11:40.738]     else {
[16:11:40.738]         if (TRUE) {
[16:11:40.738]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:11:40.738]                 open = "w")
[16:11:40.738]         }
[16:11:40.738]         else {
[16:11:40.738]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:11:40.738]                 windows = "NUL", "/dev/null"), open = "w")
[16:11:40.738]         }
[16:11:40.738]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:11:40.738]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:11:40.738]             base::sink(type = "output", split = FALSE)
[16:11:40.738]             base::close(...future.stdout)
[16:11:40.738]         }, add = TRUE)
[16:11:40.738]     }
[16:11:40.738]     ...future.frame <- base::sys.nframe()
[16:11:40.738]     ...future.conditions <- base::list()
[16:11:40.738]     ...future.rng <- base::globalenv()$.Random.seed
[16:11:40.738]     if (FALSE) {
[16:11:40.738]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:11:40.738]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:11:40.738]     }
[16:11:40.738]     ...future.result <- base::tryCatch({
[16:11:40.738]         base::withCallingHandlers({
[16:11:40.738]             ...future.value <- base::withVisible(base::local({
[16:11:40.738]                 42L
[16:11:40.738]                 stop("Woops")
[16:11:40.738]             }))
[16:11:40.738]             future::FutureResult(value = ...future.value$value, 
[16:11:40.738]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:40.738]                   ...future.rng), globalenv = if (FALSE) 
[16:11:40.738]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:11:40.738]                     ...future.globalenv.names))
[16:11:40.738]                 else NULL, started = ...future.startTime, version = "1.8")
[16:11:40.738]         }, condition = base::local({
[16:11:40.738]             c <- base::c
[16:11:40.738]             inherits <- base::inherits
[16:11:40.738]             invokeRestart <- base::invokeRestart
[16:11:40.738]             length <- base::length
[16:11:40.738]             list <- base::list
[16:11:40.738]             seq.int <- base::seq.int
[16:11:40.738]             signalCondition <- base::signalCondition
[16:11:40.738]             sys.calls <- base::sys.calls
[16:11:40.738]             `[[` <- base::`[[`
[16:11:40.738]             `+` <- base::`+`
[16:11:40.738]             `<<-` <- base::`<<-`
[16:11:40.738]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:11:40.738]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:11:40.738]                   3L)]
[16:11:40.738]             }
[16:11:40.738]             function(cond) {
[16:11:40.738]                 is_error <- inherits(cond, "error")
[16:11:40.738]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:11:40.738]                   NULL)
[16:11:40.738]                 if (is_error) {
[16:11:40.738]                   sessionInformation <- function() {
[16:11:40.738]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:11:40.738]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:11:40.738]                       search = base::search(), system = base::Sys.info())
[16:11:40.738]                   }
[16:11:40.738]                   ...future.conditions[[length(...future.conditions) + 
[16:11:40.738]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:11:40.738]                     cond$call), session = sessionInformation(), 
[16:11:40.738]                     timestamp = base::Sys.time(), signaled = 0L)
[16:11:40.738]                   signalCondition(cond)
[16:11:40.738]                 }
[16:11:40.738]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:11:40.738]                 "immediateCondition"))) {
[16:11:40.738]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:11:40.738]                   ...future.conditions[[length(...future.conditions) + 
[16:11:40.738]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:11:40.738]                   if (TRUE && !signal) {
[16:11:40.738]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:40.738]                     {
[16:11:40.738]                       inherits <- base::inherits
[16:11:40.738]                       invokeRestart <- base::invokeRestart
[16:11:40.738]                       is.null <- base::is.null
[16:11:40.738]                       muffled <- FALSE
[16:11:40.738]                       if (inherits(cond, "message")) {
[16:11:40.738]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:40.738]                         if (muffled) 
[16:11:40.738]                           invokeRestart("muffleMessage")
[16:11:40.738]                       }
[16:11:40.738]                       else if (inherits(cond, "warning")) {
[16:11:40.738]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:40.738]                         if (muffled) 
[16:11:40.738]                           invokeRestart("muffleWarning")
[16:11:40.738]                       }
[16:11:40.738]                       else if (inherits(cond, "condition")) {
[16:11:40.738]                         if (!is.null(pattern)) {
[16:11:40.738]                           computeRestarts <- base::computeRestarts
[16:11:40.738]                           grepl <- base::grepl
[16:11:40.738]                           restarts <- computeRestarts(cond)
[16:11:40.738]                           for (restart in restarts) {
[16:11:40.738]                             name <- restart$name
[16:11:40.738]                             if (is.null(name)) 
[16:11:40.738]                               next
[16:11:40.738]                             if (!grepl(pattern, name)) 
[16:11:40.738]                               next
[16:11:40.738]                             invokeRestart(restart)
[16:11:40.738]                             muffled <- TRUE
[16:11:40.738]                             break
[16:11:40.738]                           }
[16:11:40.738]                         }
[16:11:40.738]                       }
[16:11:40.738]                       invisible(muffled)
[16:11:40.738]                     }
[16:11:40.738]                     muffleCondition(cond, pattern = "^muffle")
[16:11:40.738]                   }
[16:11:40.738]                 }
[16:11:40.738]                 else {
[16:11:40.738]                   if (TRUE) {
[16:11:40.738]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:40.738]                     {
[16:11:40.738]                       inherits <- base::inherits
[16:11:40.738]                       invokeRestart <- base::invokeRestart
[16:11:40.738]                       is.null <- base::is.null
[16:11:40.738]                       muffled <- FALSE
[16:11:40.738]                       if (inherits(cond, "message")) {
[16:11:40.738]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:40.738]                         if (muffled) 
[16:11:40.738]                           invokeRestart("muffleMessage")
[16:11:40.738]                       }
[16:11:40.738]                       else if (inherits(cond, "warning")) {
[16:11:40.738]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:40.738]                         if (muffled) 
[16:11:40.738]                           invokeRestart("muffleWarning")
[16:11:40.738]                       }
[16:11:40.738]                       else if (inherits(cond, "condition")) {
[16:11:40.738]                         if (!is.null(pattern)) {
[16:11:40.738]                           computeRestarts <- base::computeRestarts
[16:11:40.738]                           grepl <- base::grepl
[16:11:40.738]                           restarts <- computeRestarts(cond)
[16:11:40.738]                           for (restart in restarts) {
[16:11:40.738]                             name <- restart$name
[16:11:40.738]                             if (is.null(name)) 
[16:11:40.738]                               next
[16:11:40.738]                             if (!grepl(pattern, name)) 
[16:11:40.738]                               next
[16:11:40.738]                             invokeRestart(restart)
[16:11:40.738]                             muffled <- TRUE
[16:11:40.738]                             break
[16:11:40.738]                           }
[16:11:40.738]                         }
[16:11:40.738]                       }
[16:11:40.738]                       invisible(muffled)
[16:11:40.738]                     }
[16:11:40.738]                     muffleCondition(cond, pattern = "^muffle")
[16:11:40.738]                   }
[16:11:40.738]                 }
[16:11:40.738]             }
[16:11:40.738]         }))
[16:11:40.738]     }, error = function(ex) {
[16:11:40.738]         base::structure(base::list(value = NULL, visible = NULL, 
[16:11:40.738]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:40.738]                 ...future.rng), started = ...future.startTime, 
[16:11:40.738]             finished = Sys.time(), session_uuid = NA_character_, 
[16:11:40.738]             version = "1.8"), class = "FutureResult")
[16:11:40.738]     }, finally = {
[16:11:40.738]         if (!identical(...future.workdir, getwd())) 
[16:11:40.738]             setwd(...future.workdir)
[16:11:40.738]         {
[16:11:40.738]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:11:40.738]                 ...future.oldOptions$nwarnings <- NULL
[16:11:40.738]             }
[16:11:40.738]             base::options(...future.oldOptions)
[16:11:40.738]             if (.Platform$OS.type == "windows") {
[16:11:40.738]                 old_names <- names(...future.oldEnvVars)
[16:11:40.738]                 envs <- base::Sys.getenv()
[16:11:40.738]                 names <- names(envs)
[16:11:40.738]                 common <- intersect(names, old_names)
[16:11:40.738]                 added <- setdiff(names, old_names)
[16:11:40.738]                 removed <- setdiff(old_names, names)
[16:11:40.738]                 changed <- common[...future.oldEnvVars[common] != 
[16:11:40.738]                   envs[common]]
[16:11:40.738]                 NAMES <- toupper(changed)
[16:11:40.738]                 args <- list()
[16:11:40.738]                 for (kk in seq_along(NAMES)) {
[16:11:40.738]                   name <- changed[[kk]]
[16:11:40.738]                   NAME <- NAMES[[kk]]
[16:11:40.738]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.738]                     next
[16:11:40.738]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:40.738]                 }
[16:11:40.738]                 NAMES <- toupper(added)
[16:11:40.738]                 for (kk in seq_along(NAMES)) {
[16:11:40.738]                   name <- added[[kk]]
[16:11:40.738]                   NAME <- NAMES[[kk]]
[16:11:40.738]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.738]                     next
[16:11:40.738]                   args[[name]] <- ""
[16:11:40.738]                 }
[16:11:40.738]                 NAMES <- toupper(removed)
[16:11:40.738]                 for (kk in seq_along(NAMES)) {
[16:11:40.738]                   name <- removed[[kk]]
[16:11:40.738]                   NAME <- NAMES[[kk]]
[16:11:40.738]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.738]                     next
[16:11:40.738]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:40.738]                 }
[16:11:40.738]                 if (length(args) > 0) 
[16:11:40.738]                   base::do.call(base::Sys.setenv, args = args)
[16:11:40.738]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:11:40.738]             }
[16:11:40.738]             else {
[16:11:40.738]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:11:40.738]             }
[16:11:40.738]             {
[16:11:40.738]                 if (base::length(...future.futureOptionsAdded) > 
[16:11:40.738]                   0L) {
[16:11:40.738]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:11:40.738]                   base::names(opts) <- ...future.futureOptionsAdded
[16:11:40.738]                   base::options(opts)
[16:11:40.738]                 }
[16:11:40.738]                 {
[16:11:40.738]                   {
[16:11:40.738]                     NULL
[16:11:40.738]                     RNGkind("Mersenne-Twister")
[16:11:40.738]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:11:40.738]                       inherits = FALSE)
[16:11:40.738]                   }
[16:11:40.738]                   options(future.plan = NULL)
[16:11:40.738]                   if (is.na(NA_character_)) 
[16:11:40.738]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:11:40.738]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:11:40.738]                   future::plan(list(function (..., envir = parent.frame()) 
[16:11:40.738]                   {
[16:11:40.738]                     future <- SequentialFuture(..., envir = envir)
[16:11:40.738]                     if (!future$lazy) 
[16:11:40.738]                       future <- run(future)
[16:11:40.738]                     invisible(future)
[16:11:40.738]                   }), .cleanup = FALSE, .init = FALSE)
[16:11:40.738]                 }
[16:11:40.738]             }
[16:11:40.738]         }
[16:11:40.738]     })
[16:11:40.738]     if (TRUE) {
[16:11:40.738]         base::sink(type = "output", split = FALSE)
[16:11:40.738]         if (TRUE) {
[16:11:40.738]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:11:40.738]         }
[16:11:40.738]         else {
[16:11:40.738]             ...future.result["stdout"] <- base::list(NULL)
[16:11:40.738]         }
[16:11:40.738]         base::close(...future.stdout)
[16:11:40.738]         ...future.stdout <- NULL
[16:11:40.738]     }
[16:11:40.738]     ...future.result$conditions <- ...future.conditions
[16:11:40.738]     ...future.result$finished <- base::Sys.time()
[16:11:40.738]     ...future.result
[16:11:40.738] }
[16:11:40.740] plan(): Setting new future strategy stack:
[16:11:40.740] List of future strategies:
[16:11:40.740] 1. sequential:
[16:11:40.740]    - args: function (..., envir = parent.frame())
[16:11:40.740]    - tweaked: FALSE
[16:11:40.740]    - call: NULL
[16:11:40.740] plan(): nbrOfWorkers() = 1
[16:11:40.741] plan(): Setting new future strategy stack:
[16:11:40.741] List of future strategies:
[16:11:40.741] 1. sequential:
[16:11:40.741]    - args: function (..., envir = parent.frame())
[16:11:40.741]    - tweaked: FALSE
[16:11:40.741]    - call: future::plan("sequential")
[16:11:40.742] plan(): nbrOfWorkers() = 1
[16:11:40.742] SequentialFuture started (and completed)
[16:11:40.742] signalConditions() ...
[16:11:40.742]  - include = ‘immediateCondition’
[16:11:40.742]  - exclude = 
[16:11:40.742]  - resignal = FALSE
[16:11:40.742]  - Number of conditions: 1
[16:11:40.742] signalConditions() ... done
[16:11:40.742] - Launch lazy future ... done
[16:11:40.742] run() for ‘SequentialFuture’ ... done
> lenv[[2]] %<-% { 42L; stop("Woops") }
[16:11:40.743] getGlobalsAndPackages() ...
[16:11:40.743] Searching for globals...
[16:11:40.744] - globals found: [2] ‘{’, ‘stop’
[16:11:40.744] Searching for globals ... DONE
[16:11:40.744] Resolving globals: FALSE
[16:11:40.744] 
[16:11:40.744] 
[16:11:40.745] getGlobalsAndPackages() ... DONE
[16:11:40.745] run() for ‘Future’ ...
[16:11:40.745] - state: ‘created’
[16:11:40.745] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:11:40.745] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:11:40.745] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:11:40.745]   - Field: ‘label’
[16:11:40.745]   - Field: ‘local’
[16:11:40.746]   - Field: ‘owner’
[16:11:40.746]   - Field: ‘envir’
[16:11:40.746]   - Field: ‘packages’
[16:11:40.746]   - Field: ‘gc’
[16:11:40.746]   - Field: ‘conditions’
[16:11:40.746]   - Field: ‘expr’
[16:11:40.746]   - Field: ‘uuid’
[16:11:40.746]   - Field: ‘seed’
[16:11:40.746]   - Field: ‘version’
[16:11:40.746]   - Field: ‘result’
[16:11:40.746]   - Field: ‘asynchronous’
[16:11:40.747]   - Field: ‘calls’
[16:11:40.747]   - Field: ‘globals’
[16:11:40.747]   - Field: ‘stdout’
[16:11:40.747]   - Field: ‘earlySignal’
[16:11:40.747]   - Field: ‘lazy’
[16:11:40.747]   - Field: ‘state’
[16:11:40.747] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:11:40.747] - Launch lazy future ...
[16:11:40.747] Packages needed by the future expression (n = 0): <none>
[16:11:40.747] Packages needed by future strategies (n = 0): <none>
[16:11:40.748] {
[16:11:40.748]     {
[16:11:40.748]         {
[16:11:40.748]             ...future.startTime <- base::Sys.time()
[16:11:40.748]             {
[16:11:40.748]                 {
[16:11:40.748]                   {
[16:11:40.748]                     base::local({
[16:11:40.748]                       has_future <- base::requireNamespace("future", 
[16:11:40.748]                         quietly = TRUE)
[16:11:40.748]                       if (has_future) {
[16:11:40.748]                         ns <- base::getNamespace("future")
[16:11:40.748]                         version <- ns[[".package"]][["version"]]
[16:11:40.748]                         if (is.null(version)) 
[16:11:40.748]                           version <- utils::packageVersion("future")
[16:11:40.748]                       }
[16:11:40.748]                       else {
[16:11:40.748]                         version <- NULL
[16:11:40.748]                       }
[16:11:40.748]                       if (!has_future || version < "1.8.0") {
[16:11:40.748]                         info <- base::c(r_version = base::gsub("R version ", 
[16:11:40.748]                           "", base::R.version$version.string), 
[16:11:40.748]                           platform = base::sprintf("%s (%s-bit)", 
[16:11:40.748]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:11:40.748]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:11:40.748]                             "release", "version")], collapse = " "), 
[16:11:40.748]                           hostname = base::Sys.info()[["nodename"]])
[16:11:40.748]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:11:40.748]                           info)
[16:11:40.748]                         info <- base::paste(info, collapse = "; ")
[16:11:40.748]                         if (!has_future) {
[16:11:40.748]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:11:40.748]                             info)
[16:11:40.748]                         }
[16:11:40.748]                         else {
[16:11:40.748]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:11:40.748]                             info, version)
[16:11:40.748]                         }
[16:11:40.748]                         base::stop(msg)
[16:11:40.748]                       }
[16:11:40.748]                     })
[16:11:40.748]                   }
[16:11:40.748]                   options(future.plan = NULL)
[16:11:40.748]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:11:40.748]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:11:40.748]                 }
[16:11:40.748]                 ...future.workdir <- getwd()
[16:11:40.748]             }
[16:11:40.748]             ...future.oldOptions <- base::as.list(base::.Options)
[16:11:40.748]             ...future.oldEnvVars <- base::Sys.getenv()
[16:11:40.748]         }
[16:11:40.748]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:11:40.748]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:11:40.748]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:11:40.748]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:11:40.748]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:11:40.748]             future.stdout.windows.reencode = NULL, width = 80L)
[16:11:40.748]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:11:40.748]             base::names(...future.oldOptions))
[16:11:40.748]     }
[16:11:40.748]     if (FALSE) {
[16:11:40.748]     }
[16:11:40.748]     else {
[16:11:40.748]         if (TRUE) {
[16:11:40.748]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:11:40.748]                 open = "w")
[16:11:40.748]         }
[16:11:40.748]         else {
[16:11:40.748]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:11:40.748]                 windows = "NUL", "/dev/null"), open = "w")
[16:11:40.748]         }
[16:11:40.748]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:11:40.748]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:11:40.748]             base::sink(type = "output", split = FALSE)
[16:11:40.748]             base::close(...future.stdout)
[16:11:40.748]         }, add = TRUE)
[16:11:40.748]     }
[16:11:40.748]     ...future.frame <- base::sys.nframe()
[16:11:40.748]     ...future.conditions <- base::list()
[16:11:40.748]     ...future.rng <- base::globalenv()$.Random.seed
[16:11:40.748]     if (FALSE) {
[16:11:40.748]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:11:40.748]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:11:40.748]     }
[16:11:40.748]     ...future.result <- base::tryCatch({
[16:11:40.748]         base::withCallingHandlers({
[16:11:40.748]             ...future.value <- base::withVisible(base::local({
[16:11:40.748]                 42L
[16:11:40.748]                 stop("Woops")
[16:11:40.748]             }))
[16:11:40.748]             future::FutureResult(value = ...future.value$value, 
[16:11:40.748]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:40.748]                   ...future.rng), globalenv = if (FALSE) 
[16:11:40.748]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:11:40.748]                     ...future.globalenv.names))
[16:11:40.748]                 else NULL, started = ...future.startTime, version = "1.8")
[16:11:40.748]         }, condition = base::local({
[16:11:40.748]             c <- base::c
[16:11:40.748]             inherits <- base::inherits
[16:11:40.748]             invokeRestart <- base::invokeRestart
[16:11:40.748]             length <- base::length
[16:11:40.748]             list <- base::list
[16:11:40.748]             seq.int <- base::seq.int
[16:11:40.748]             signalCondition <- base::signalCondition
[16:11:40.748]             sys.calls <- base::sys.calls
[16:11:40.748]             `[[` <- base::`[[`
[16:11:40.748]             `+` <- base::`+`
[16:11:40.748]             `<<-` <- base::`<<-`
[16:11:40.748]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:11:40.748]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:11:40.748]                   3L)]
[16:11:40.748]             }
[16:11:40.748]             function(cond) {
[16:11:40.748]                 is_error <- inherits(cond, "error")
[16:11:40.748]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:11:40.748]                   NULL)
[16:11:40.748]                 if (is_error) {
[16:11:40.748]                   sessionInformation <- function() {
[16:11:40.748]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:11:40.748]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:11:40.748]                       search = base::search(), system = base::Sys.info())
[16:11:40.748]                   }
[16:11:40.748]                   ...future.conditions[[length(...future.conditions) + 
[16:11:40.748]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:11:40.748]                     cond$call), session = sessionInformation(), 
[16:11:40.748]                     timestamp = base::Sys.time(), signaled = 0L)
[16:11:40.748]                   signalCondition(cond)
[16:11:40.748]                 }
[16:11:40.748]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:11:40.748]                 "immediateCondition"))) {
[16:11:40.748]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:11:40.748]                   ...future.conditions[[length(...future.conditions) + 
[16:11:40.748]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:11:40.748]                   if (TRUE && !signal) {
[16:11:40.748]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:40.748]                     {
[16:11:40.748]                       inherits <- base::inherits
[16:11:40.748]                       invokeRestart <- base::invokeRestart
[16:11:40.748]                       is.null <- base::is.null
[16:11:40.748]                       muffled <- FALSE
[16:11:40.748]                       if (inherits(cond, "message")) {
[16:11:40.748]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:40.748]                         if (muffled) 
[16:11:40.748]                           invokeRestart("muffleMessage")
[16:11:40.748]                       }
[16:11:40.748]                       else if (inherits(cond, "warning")) {
[16:11:40.748]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:40.748]                         if (muffled) 
[16:11:40.748]                           invokeRestart("muffleWarning")
[16:11:40.748]                       }
[16:11:40.748]                       else if (inherits(cond, "condition")) {
[16:11:40.748]                         if (!is.null(pattern)) {
[16:11:40.748]                           computeRestarts <- base::computeRestarts
[16:11:40.748]                           grepl <- base::grepl
[16:11:40.748]                           restarts <- computeRestarts(cond)
[16:11:40.748]                           for (restart in restarts) {
[16:11:40.748]                             name <- restart$name
[16:11:40.748]                             if (is.null(name)) 
[16:11:40.748]                               next
[16:11:40.748]                             if (!grepl(pattern, name)) 
[16:11:40.748]                               next
[16:11:40.748]                             invokeRestart(restart)
[16:11:40.748]                             muffled <- TRUE
[16:11:40.748]                             break
[16:11:40.748]                           }
[16:11:40.748]                         }
[16:11:40.748]                       }
[16:11:40.748]                       invisible(muffled)
[16:11:40.748]                     }
[16:11:40.748]                     muffleCondition(cond, pattern = "^muffle")
[16:11:40.748]                   }
[16:11:40.748]                 }
[16:11:40.748]                 else {
[16:11:40.748]                   if (TRUE) {
[16:11:40.748]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:40.748]                     {
[16:11:40.748]                       inherits <- base::inherits
[16:11:40.748]                       invokeRestart <- base::invokeRestart
[16:11:40.748]                       is.null <- base::is.null
[16:11:40.748]                       muffled <- FALSE
[16:11:40.748]                       if (inherits(cond, "message")) {
[16:11:40.748]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:40.748]                         if (muffled) 
[16:11:40.748]                           invokeRestart("muffleMessage")
[16:11:40.748]                       }
[16:11:40.748]                       else if (inherits(cond, "warning")) {
[16:11:40.748]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:40.748]                         if (muffled) 
[16:11:40.748]                           invokeRestart("muffleWarning")
[16:11:40.748]                       }
[16:11:40.748]                       else if (inherits(cond, "condition")) {
[16:11:40.748]                         if (!is.null(pattern)) {
[16:11:40.748]                           computeRestarts <- base::computeRestarts
[16:11:40.748]                           grepl <- base::grepl
[16:11:40.748]                           restarts <- computeRestarts(cond)
[16:11:40.748]                           for (restart in restarts) {
[16:11:40.748]                             name <- restart$name
[16:11:40.748]                             if (is.null(name)) 
[16:11:40.748]                               next
[16:11:40.748]                             if (!grepl(pattern, name)) 
[16:11:40.748]                               next
[16:11:40.748]                             invokeRestart(restart)
[16:11:40.748]                             muffled <- TRUE
[16:11:40.748]                             break
[16:11:40.748]                           }
[16:11:40.748]                         }
[16:11:40.748]                       }
[16:11:40.748]                       invisible(muffled)
[16:11:40.748]                     }
[16:11:40.748]                     muffleCondition(cond, pattern = "^muffle")
[16:11:40.748]                   }
[16:11:40.748]                 }
[16:11:40.748]             }
[16:11:40.748]         }))
[16:11:40.748]     }, error = function(ex) {
[16:11:40.748]         base::structure(base::list(value = NULL, visible = NULL, 
[16:11:40.748]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:40.748]                 ...future.rng), started = ...future.startTime, 
[16:11:40.748]             finished = Sys.time(), session_uuid = NA_character_, 
[16:11:40.748]             version = "1.8"), class = "FutureResult")
[16:11:40.748]     }, finally = {
[16:11:40.748]         if (!identical(...future.workdir, getwd())) 
[16:11:40.748]             setwd(...future.workdir)
[16:11:40.748]         {
[16:11:40.748]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:11:40.748]                 ...future.oldOptions$nwarnings <- NULL
[16:11:40.748]             }
[16:11:40.748]             base::options(...future.oldOptions)
[16:11:40.748]             if (.Platform$OS.type == "windows") {
[16:11:40.748]                 old_names <- names(...future.oldEnvVars)
[16:11:40.748]                 envs <- base::Sys.getenv()
[16:11:40.748]                 names <- names(envs)
[16:11:40.748]                 common <- intersect(names, old_names)
[16:11:40.748]                 added <- setdiff(names, old_names)
[16:11:40.748]                 removed <- setdiff(old_names, names)
[16:11:40.748]                 changed <- common[...future.oldEnvVars[common] != 
[16:11:40.748]                   envs[common]]
[16:11:40.748]                 NAMES <- toupper(changed)
[16:11:40.748]                 args <- list()
[16:11:40.748]                 for (kk in seq_along(NAMES)) {
[16:11:40.748]                   name <- changed[[kk]]
[16:11:40.748]                   NAME <- NAMES[[kk]]
[16:11:40.748]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.748]                     next
[16:11:40.748]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:40.748]                 }
[16:11:40.748]                 NAMES <- toupper(added)
[16:11:40.748]                 for (kk in seq_along(NAMES)) {
[16:11:40.748]                   name <- added[[kk]]
[16:11:40.748]                   NAME <- NAMES[[kk]]
[16:11:40.748]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.748]                     next
[16:11:40.748]                   args[[name]] <- ""
[16:11:40.748]                 }
[16:11:40.748]                 NAMES <- toupper(removed)
[16:11:40.748]                 for (kk in seq_along(NAMES)) {
[16:11:40.748]                   name <- removed[[kk]]
[16:11:40.748]                   NAME <- NAMES[[kk]]
[16:11:40.748]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.748]                     next
[16:11:40.748]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:40.748]                 }
[16:11:40.748]                 if (length(args) > 0) 
[16:11:40.748]                   base::do.call(base::Sys.setenv, args = args)
[16:11:40.748]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:11:40.748]             }
[16:11:40.748]             else {
[16:11:40.748]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:11:40.748]             }
[16:11:40.748]             {
[16:11:40.748]                 if (base::length(...future.futureOptionsAdded) > 
[16:11:40.748]                   0L) {
[16:11:40.748]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:11:40.748]                   base::names(opts) <- ...future.futureOptionsAdded
[16:11:40.748]                   base::options(opts)
[16:11:40.748]                 }
[16:11:40.748]                 {
[16:11:40.748]                   {
[16:11:40.748]                     NULL
[16:11:40.748]                     RNGkind("Mersenne-Twister")
[16:11:40.748]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:11:40.748]                       inherits = FALSE)
[16:11:40.748]                   }
[16:11:40.748]                   options(future.plan = NULL)
[16:11:40.748]                   if (is.na(NA_character_)) 
[16:11:40.748]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:11:40.748]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:11:40.748]                   future::plan(list(function (..., envir = parent.frame()) 
[16:11:40.748]                   {
[16:11:40.748]                     future <- SequentialFuture(..., envir = envir)
[16:11:40.748]                     if (!future$lazy) 
[16:11:40.748]                       future <- run(future)
[16:11:40.748]                     invisible(future)
[16:11:40.748]                   }), .cleanup = FALSE, .init = FALSE)
[16:11:40.748]                 }
[16:11:40.748]             }
[16:11:40.748]         }
[16:11:40.748]     })
[16:11:40.748]     if (TRUE) {
[16:11:40.748]         base::sink(type = "output", split = FALSE)
[16:11:40.748]         if (TRUE) {
[16:11:40.748]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:11:40.748]         }
[16:11:40.748]         else {
[16:11:40.748]             ...future.result["stdout"] <- base::list(NULL)
[16:11:40.748]         }
[16:11:40.748]         base::close(...future.stdout)
[16:11:40.748]         ...future.stdout <- NULL
[16:11:40.748]     }
[16:11:40.748]     ...future.result$conditions <- ...future.conditions
[16:11:40.748]     ...future.result$finished <- base::Sys.time()
[16:11:40.748]     ...future.result
[16:11:40.748] }
[16:11:40.750] plan(): Setting new future strategy stack:
[16:11:40.750] List of future strategies:
[16:11:40.750] 1. sequential:
[16:11:40.750]    - args: function (..., envir = parent.frame())
[16:11:40.750]    - tweaked: FALSE
[16:11:40.750]    - call: NULL
[16:11:40.750] plan(): nbrOfWorkers() = 1
[16:11:40.751] plan(): Setting new future strategy stack:
[16:11:40.751] List of future strategies:
[16:11:40.751] 1. sequential:
[16:11:40.751]    - args: function (..., envir = parent.frame())
[16:11:40.751]    - tweaked: FALSE
[16:11:40.751]    - call: future::plan("sequential")
[16:11:40.751] plan(): nbrOfWorkers() = 1
[16:11:40.751] SequentialFuture started (and completed)
[16:11:40.752] signalConditions() ...
[16:11:40.752]  - include = ‘immediateCondition’
[16:11:40.752]  - exclude = 
[16:11:40.752]  - resignal = FALSE
[16:11:40.752]  - Number of conditions: 1
[16:11:40.752] signalConditions() ... done
[16:11:40.752] - Launch lazy future ... done
[16:11:40.752] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(lenv[[2]])
[16:11:40.753] resolved() for ‘SequentialFuture’ ...
[16:11:40.753] - state: ‘finished’
[16:11:40.753] - run: TRUE
[16:11:40.753] - result: ‘FutureResult’
[16:11:40.753] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
lenv[[2]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> ll <- list()
> ll[[1]] <- future({ 42L; stop("Woops") })
[16:11:40.754] getGlobalsAndPackages() ...
[16:11:40.754] Searching for globals...
[16:11:40.754] - globals found: [2] ‘{’, ‘stop’
[16:11:40.755] Searching for globals ... DONE
[16:11:40.755] Resolving globals: FALSE
[16:11:40.755] 
[16:11:40.755] 
[16:11:40.755] getGlobalsAndPackages() ... DONE
[16:11:40.755] run() for ‘Future’ ...
[16:11:40.755] - state: ‘created’
[16:11:40.756] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:11:40.756] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:11:40.756] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:11:40.756]   - Field: ‘label’
[16:11:40.756]   - Field: ‘local’
[16:11:40.756]   - Field: ‘owner’
[16:11:40.756]   - Field: ‘envir’
[16:11:40.756]   - Field: ‘packages’
[16:11:40.756]   - Field: ‘gc’
[16:11:40.757]   - Field: ‘conditions’
[16:11:40.757]   - Field: ‘expr’
[16:11:40.757]   - Field: ‘uuid’
[16:11:40.757]   - Field: ‘seed’
[16:11:40.757]   - Field: ‘version’
[16:11:40.757]   - Field: ‘result’
[16:11:40.757]   - Field: ‘asynchronous’
[16:11:40.757]   - Field: ‘calls’
[16:11:40.757]   - Field: ‘globals’
[16:11:40.757]   - Field: ‘stdout’
[16:11:40.757]   - Field: ‘earlySignal’
[16:11:40.758]   - Field: ‘lazy’
[16:11:40.758]   - Field: ‘state’
[16:11:40.758] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:11:40.758] - Launch lazy future ...
[16:11:40.758] Packages needed by the future expression (n = 0): <none>
[16:11:40.758] Packages needed by future strategies (n = 0): <none>
[16:11:40.758] {
[16:11:40.758]     {
[16:11:40.758]         {
[16:11:40.758]             ...future.startTime <- base::Sys.time()
[16:11:40.758]             {
[16:11:40.758]                 {
[16:11:40.758]                   {
[16:11:40.758]                     base::local({
[16:11:40.758]                       has_future <- base::requireNamespace("future", 
[16:11:40.758]                         quietly = TRUE)
[16:11:40.758]                       if (has_future) {
[16:11:40.758]                         ns <- base::getNamespace("future")
[16:11:40.758]                         version <- ns[[".package"]][["version"]]
[16:11:40.758]                         if (is.null(version)) 
[16:11:40.758]                           version <- utils::packageVersion("future")
[16:11:40.758]                       }
[16:11:40.758]                       else {
[16:11:40.758]                         version <- NULL
[16:11:40.758]                       }
[16:11:40.758]                       if (!has_future || version < "1.8.0") {
[16:11:40.758]                         info <- base::c(r_version = base::gsub("R version ", 
[16:11:40.758]                           "", base::R.version$version.string), 
[16:11:40.758]                           platform = base::sprintf("%s (%s-bit)", 
[16:11:40.758]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:11:40.758]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:11:40.758]                             "release", "version")], collapse = " "), 
[16:11:40.758]                           hostname = base::Sys.info()[["nodename"]])
[16:11:40.758]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:11:40.758]                           info)
[16:11:40.758]                         info <- base::paste(info, collapse = "; ")
[16:11:40.758]                         if (!has_future) {
[16:11:40.758]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:11:40.758]                             info)
[16:11:40.758]                         }
[16:11:40.758]                         else {
[16:11:40.758]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:11:40.758]                             info, version)
[16:11:40.758]                         }
[16:11:40.758]                         base::stop(msg)
[16:11:40.758]                       }
[16:11:40.758]                     })
[16:11:40.758]                   }
[16:11:40.758]                   options(future.plan = NULL)
[16:11:40.758]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:11:40.758]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:11:40.758]                 }
[16:11:40.758]                 ...future.workdir <- getwd()
[16:11:40.758]             }
[16:11:40.758]             ...future.oldOptions <- base::as.list(base::.Options)
[16:11:40.758]             ...future.oldEnvVars <- base::Sys.getenv()
[16:11:40.758]         }
[16:11:40.758]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:11:40.758]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:11:40.758]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:11:40.758]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:11:40.758]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:11:40.758]             future.stdout.windows.reencode = NULL, width = 80L)
[16:11:40.758]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:11:40.758]             base::names(...future.oldOptions))
[16:11:40.758]     }
[16:11:40.758]     if (FALSE) {
[16:11:40.758]     }
[16:11:40.758]     else {
[16:11:40.758]         if (TRUE) {
[16:11:40.758]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:11:40.758]                 open = "w")
[16:11:40.758]         }
[16:11:40.758]         else {
[16:11:40.758]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:11:40.758]                 windows = "NUL", "/dev/null"), open = "w")
[16:11:40.758]         }
[16:11:40.758]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:11:40.758]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:11:40.758]             base::sink(type = "output", split = FALSE)
[16:11:40.758]             base::close(...future.stdout)
[16:11:40.758]         }, add = TRUE)
[16:11:40.758]     }
[16:11:40.758]     ...future.frame <- base::sys.nframe()
[16:11:40.758]     ...future.conditions <- base::list()
[16:11:40.758]     ...future.rng <- base::globalenv()$.Random.seed
[16:11:40.758]     if (FALSE) {
[16:11:40.758]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:11:40.758]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:11:40.758]     }
[16:11:40.758]     ...future.result <- base::tryCatch({
[16:11:40.758]         base::withCallingHandlers({
[16:11:40.758]             ...future.value <- base::withVisible(base::local({
[16:11:40.758]                 42L
[16:11:40.758]                 stop("Woops")
[16:11:40.758]             }))
[16:11:40.758]             future::FutureResult(value = ...future.value$value, 
[16:11:40.758]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:40.758]                   ...future.rng), globalenv = if (FALSE) 
[16:11:40.758]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:11:40.758]                     ...future.globalenv.names))
[16:11:40.758]                 else NULL, started = ...future.startTime, version = "1.8")
[16:11:40.758]         }, condition = base::local({
[16:11:40.758]             c <- base::c
[16:11:40.758]             inherits <- base::inherits
[16:11:40.758]             invokeRestart <- base::invokeRestart
[16:11:40.758]             length <- base::length
[16:11:40.758]             list <- base::list
[16:11:40.758]             seq.int <- base::seq.int
[16:11:40.758]             signalCondition <- base::signalCondition
[16:11:40.758]             sys.calls <- base::sys.calls
[16:11:40.758]             `[[` <- base::`[[`
[16:11:40.758]             `+` <- base::`+`
[16:11:40.758]             `<<-` <- base::`<<-`
[16:11:40.758]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:11:40.758]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:11:40.758]                   3L)]
[16:11:40.758]             }
[16:11:40.758]             function(cond) {
[16:11:40.758]                 is_error <- inherits(cond, "error")
[16:11:40.758]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:11:40.758]                   NULL)
[16:11:40.758]                 if (is_error) {
[16:11:40.758]                   sessionInformation <- function() {
[16:11:40.758]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:11:40.758]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:11:40.758]                       search = base::search(), system = base::Sys.info())
[16:11:40.758]                   }
[16:11:40.758]                   ...future.conditions[[length(...future.conditions) + 
[16:11:40.758]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:11:40.758]                     cond$call), session = sessionInformation(), 
[16:11:40.758]                     timestamp = base::Sys.time(), signaled = 0L)
[16:11:40.758]                   signalCondition(cond)
[16:11:40.758]                 }
[16:11:40.758]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:11:40.758]                 "immediateCondition"))) {
[16:11:40.758]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:11:40.758]                   ...future.conditions[[length(...future.conditions) + 
[16:11:40.758]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:11:40.758]                   if (TRUE && !signal) {
[16:11:40.758]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:40.758]                     {
[16:11:40.758]                       inherits <- base::inherits
[16:11:40.758]                       invokeRestart <- base::invokeRestart
[16:11:40.758]                       is.null <- base::is.null
[16:11:40.758]                       muffled <- FALSE
[16:11:40.758]                       if (inherits(cond, "message")) {
[16:11:40.758]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:40.758]                         if (muffled) 
[16:11:40.758]                           invokeRestart("muffleMessage")
[16:11:40.758]                       }
[16:11:40.758]                       else if (inherits(cond, "warning")) {
[16:11:40.758]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:40.758]                         if (muffled) 
[16:11:40.758]                           invokeRestart("muffleWarning")
[16:11:40.758]                       }
[16:11:40.758]                       else if (inherits(cond, "condition")) {
[16:11:40.758]                         if (!is.null(pattern)) {
[16:11:40.758]                           computeRestarts <- base::computeRestarts
[16:11:40.758]                           grepl <- base::grepl
[16:11:40.758]                           restarts <- computeRestarts(cond)
[16:11:40.758]                           for (restart in restarts) {
[16:11:40.758]                             name <- restart$name
[16:11:40.758]                             if (is.null(name)) 
[16:11:40.758]                               next
[16:11:40.758]                             if (!grepl(pattern, name)) 
[16:11:40.758]                               next
[16:11:40.758]                             invokeRestart(restart)
[16:11:40.758]                             muffled <- TRUE
[16:11:40.758]                             break
[16:11:40.758]                           }
[16:11:40.758]                         }
[16:11:40.758]                       }
[16:11:40.758]                       invisible(muffled)
[16:11:40.758]                     }
[16:11:40.758]                     muffleCondition(cond, pattern = "^muffle")
[16:11:40.758]                   }
[16:11:40.758]                 }
[16:11:40.758]                 else {
[16:11:40.758]                   if (TRUE) {
[16:11:40.758]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:40.758]                     {
[16:11:40.758]                       inherits <- base::inherits
[16:11:40.758]                       invokeRestart <- base::invokeRestart
[16:11:40.758]                       is.null <- base::is.null
[16:11:40.758]                       muffled <- FALSE
[16:11:40.758]                       if (inherits(cond, "message")) {
[16:11:40.758]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:40.758]                         if (muffled) 
[16:11:40.758]                           invokeRestart("muffleMessage")
[16:11:40.758]                       }
[16:11:40.758]                       else if (inherits(cond, "warning")) {
[16:11:40.758]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:40.758]                         if (muffled) 
[16:11:40.758]                           invokeRestart("muffleWarning")
[16:11:40.758]                       }
[16:11:40.758]                       else if (inherits(cond, "condition")) {
[16:11:40.758]                         if (!is.null(pattern)) {
[16:11:40.758]                           computeRestarts <- base::computeRestarts
[16:11:40.758]                           grepl <- base::grepl
[16:11:40.758]                           restarts <- computeRestarts(cond)
[16:11:40.758]                           for (restart in restarts) {
[16:11:40.758]                             name <- restart$name
[16:11:40.758]                             if (is.null(name)) 
[16:11:40.758]                               next
[16:11:40.758]                             if (!grepl(pattern, name)) 
[16:11:40.758]                               next
[16:11:40.758]                             invokeRestart(restart)
[16:11:40.758]                             muffled <- TRUE
[16:11:40.758]                             break
[16:11:40.758]                           }
[16:11:40.758]                         }
[16:11:40.758]                       }
[16:11:40.758]                       invisible(muffled)
[16:11:40.758]                     }
[16:11:40.758]                     muffleCondition(cond, pattern = "^muffle")
[16:11:40.758]                   }
[16:11:40.758]                 }
[16:11:40.758]             }
[16:11:40.758]         }))
[16:11:40.758]     }, error = function(ex) {
[16:11:40.758]         base::structure(base::list(value = NULL, visible = NULL, 
[16:11:40.758]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:40.758]                 ...future.rng), started = ...future.startTime, 
[16:11:40.758]             finished = Sys.time(), session_uuid = NA_character_, 
[16:11:40.758]             version = "1.8"), class = "FutureResult")
[16:11:40.758]     }, finally = {
[16:11:40.758]         if (!identical(...future.workdir, getwd())) 
[16:11:40.758]             setwd(...future.workdir)
[16:11:40.758]         {
[16:11:40.758]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:11:40.758]                 ...future.oldOptions$nwarnings <- NULL
[16:11:40.758]             }
[16:11:40.758]             base::options(...future.oldOptions)
[16:11:40.758]             if (.Platform$OS.type == "windows") {
[16:11:40.758]                 old_names <- names(...future.oldEnvVars)
[16:11:40.758]                 envs <- base::Sys.getenv()
[16:11:40.758]                 names <- names(envs)
[16:11:40.758]                 common <- intersect(names, old_names)
[16:11:40.758]                 added <- setdiff(names, old_names)
[16:11:40.758]                 removed <- setdiff(old_names, names)
[16:11:40.758]                 changed <- common[...future.oldEnvVars[common] != 
[16:11:40.758]                   envs[common]]
[16:11:40.758]                 NAMES <- toupper(changed)
[16:11:40.758]                 args <- list()
[16:11:40.758]                 for (kk in seq_along(NAMES)) {
[16:11:40.758]                   name <- changed[[kk]]
[16:11:40.758]                   NAME <- NAMES[[kk]]
[16:11:40.758]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.758]                     next
[16:11:40.758]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:40.758]                 }
[16:11:40.758]                 NAMES <- toupper(added)
[16:11:40.758]                 for (kk in seq_along(NAMES)) {
[16:11:40.758]                   name <- added[[kk]]
[16:11:40.758]                   NAME <- NAMES[[kk]]
[16:11:40.758]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.758]                     next
[16:11:40.758]                   args[[name]] <- ""
[16:11:40.758]                 }
[16:11:40.758]                 NAMES <- toupper(removed)
[16:11:40.758]                 for (kk in seq_along(NAMES)) {
[16:11:40.758]                   name <- removed[[kk]]
[16:11:40.758]                   NAME <- NAMES[[kk]]
[16:11:40.758]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.758]                     next
[16:11:40.758]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:40.758]                 }
[16:11:40.758]                 if (length(args) > 0) 
[16:11:40.758]                   base::do.call(base::Sys.setenv, args = args)
[16:11:40.758]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:11:40.758]             }
[16:11:40.758]             else {
[16:11:40.758]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:11:40.758]             }
[16:11:40.758]             {
[16:11:40.758]                 if (base::length(...future.futureOptionsAdded) > 
[16:11:40.758]                   0L) {
[16:11:40.758]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:11:40.758]                   base::names(opts) <- ...future.futureOptionsAdded
[16:11:40.758]                   base::options(opts)
[16:11:40.758]                 }
[16:11:40.758]                 {
[16:11:40.758]                   {
[16:11:40.758]                     NULL
[16:11:40.758]                     RNGkind("Mersenne-Twister")
[16:11:40.758]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:11:40.758]                       inherits = FALSE)
[16:11:40.758]                   }
[16:11:40.758]                   options(future.plan = NULL)
[16:11:40.758]                   if (is.na(NA_character_)) 
[16:11:40.758]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:11:40.758]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:11:40.758]                   future::plan(list(function (..., envir = parent.frame()) 
[16:11:40.758]                   {
[16:11:40.758]                     future <- SequentialFuture(..., envir = envir)
[16:11:40.758]                     if (!future$lazy) 
[16:11:40.758]                       future <- run(future)
[16:11:40.758]                     invisible(future)
[16:11:40.758]                   }), .cleanup = FALSE, .init = FALSE)
[16:11:40.758]                 }
[16:11:40.758]             }
[16:11:40.758]         }
[16:11:40.758]     })
[16:11:40.758]     if (TRUE) {
[16:11:40.758]         base::sink(type = "output", split = FALSE)
[16:11:40.758]         if (TRUE) {
[16:11:40.758]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:11:40.758]         }
[16:11:40.758]         else {
[16:11:40.758]             ...future.result["stdout"] <- base::list(NULL)
[16:11:40.758]         }
[16:11:40.758]         base::close(...future.stdout)
[16:11:40.758]         ...future.stdout <- NULL
[16:11:40.758]     }
[16:11:40.758]     ...future.result$conditions <- ...future.conditions
[16:11:40.758]     ...future.result$finished <- base::Sys.time()
[16:11:40.758]     ...future.result
[16:11:40.758] }
[16:11:40.760] plan(): Setting new future strategy stack:
[16:11:40.760] List of future strategies:
[16:11:40.760] 1. sequential:
[16:11:40.760]    - args: function (..., envir = parent.frame())
[16:11:40.760]    - tweaked: FALSE
[16:11:40.760]    - call: NULL
[16:11:40.761] plan(): nbrOfWorkers() = 1
[16:11:40.761] plan(): Setting new future strategy stack:
[16:11:40.762] List of future strategies:
[16:11:40.762] 1. sequential:
[16:11:40.762]    - args: function (..., envir = parent.frame())
[16:11:40.762]    - tweaked: FALSE
[16:11:40.762]    - call: future::plan("sequential")
[16:11:40.762] plan(): nbrOfWorkers() = 1
[16:11:40.762] SequentialFuture started (and completed)
[16:11:40.762] signalConditions() ...
[16:11:40.762]  - include = ‘immediateCondition’
[16:11:40.762]  - exclude = 
[16:11:40.762]  - resignal = FALSE
[16:11:40.763]  - Number of conditions: 1
[16:11:40.763] signalConditions() ... done
[16:11:40.763] - Launch lazy future ... done
[16:11:40.763] run() for ‘SequentialFuture’ ... done
> ll[[2]] <- future({ 42L; stop("Woops") })
[16:11:40.763] getGlobalsAndPackages() ...
[16:11:40.763] Searching for globals...
[16:11:40.764] - globals found: [2] ‘{’, ‘stop’
[16:11:40.764] Searching for globals ... DONE
[16:11:40.764] Resolving globals: FALSE
[16:11:40.764] 
[16:11:40.764] 
[16:11:40.765] getGlobalsAndPackages() ... DONE
[16:11:40.765] run() for ‘Future’ ...
[16:11:40.765] - state: ‘created’
[16:11:40.765] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:11:40.765] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:11:40.765] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:11:40.765]   - Field: ‘label’
[16:11:40.766]   - Field: ‘local’
[16:11:40.766]   - Field: ‘owner’
[16:11:40.766]   - Field: ‘envir’
[16:11:40.766]   - Field: ‘packages’
[16:11:40.766]   - Field: ‘gc’
[16:11:40.766]   - Field: ‘conditions’
[16:11:40.766]   - Field: ‘expr’
[16:11:40.767]   - Field: ‘uuid’
[16:11:40.768]   - Field: ‘seed’
[16:11:40.768]   - Field: ‘version’
[16:11:40.768]   - Field: ‘result’
[16:11:40.768]   - Field: ‘asynchronous’
[16:11:40.768]   - Field: ‘calls’
[16:11:40.768]   - Field: ‘globals’
[16:11:40.768]   - Field: ‘stdout’
[16:11:40.768]   - Field: ‘earlySignal’
[16:11:40.768]   - Field: ‘lazy’
[16:11:40.768]   - Field: ‘state’
[16:11:40.769] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:11:40.769] - Launch lazy future ...
[16:11:40.769] Packages needed by the future expression (n = 0): <none>
[16:11:40.769] Packages needed by future strategies (n = 0): <none>
[16:11:40.769] {
[16:11:40.769]     {
[16:11:40.769]         {
[16:11:40.769]             ...future.startTime <- base::Sys.time()
[16:11:40.769]             {
[16:11:40.769]                 {
[16:11:40.769]                   {
[16:11:40.769]                     base::local({
[16:11:40.769]                       has_future <- base::requireNamespace("future", 
[16:11:40.769]                         quietly = TRUE)
[16:11:40.769]                       if (has_future) {
[16:11:40.769]                         ns <- base::getNamespace("future")
[16:11:40.769]                         version <- ns[[".package"]][["version"]]
[16:11:40.769]                         if (is.null(version)) 
[16:11:40.769]                           version <- utils::packageVersion("future")
[16:11:40.769]                       }
[16:11:40.769]                       else {
[16:11:40.769]                         version <- NULL
[16:11:40.769]                       }
[16:11:40.769]                       if (!has_future || version < "1.8.0") {
[16:11:40.769]                         info <- base::c(r_version = base::gsub("R version ", 
[16:11:40.769]                           "", base::R.version$version.string), 
[16:11:40.769]                           platform = base::sprintf("%s (%s-bit)", 
[16:11:40.769]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:11:40.769]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:11:40.769]                             "release", "version")], collapse = " "), 
[16:11:40.769]                           hostname = base::Sys.info()[["nodename"]])
[16:11:40.769]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:11:40.769]                           info)
[16:11:40.769]                         info <- base::paste(info, collapse = "; ")
[16:11:40.769]                         if (!has_future) {
[16:11:40.769]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:11:40.769]                             info)
[16:11:40.769]                         }
[16:11:40.769]                         else {
[16:11:40.769]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:11:40.769]                             info, version)
[16:11:40.769]                         }
[16:11:40.769]                         base::stop(msg)
[16:11:40.769]                       }
[16:11:40.769]                     })
[16:11:40.769]                   }
[16:11:40.769]                   options(future.plan = NULL)
[16:11:40.769]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:11:40.769]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:11:40.769]                 }
[16:11:40.769]                 ...future.workdir <- getwd()
[16:11:40.769]             }
[16:11:40.769]             ...future.oldOptions <- base::as.list(base::.Options)
[16:11:40.769]             ...future.oldEnvVars <- base::Sys.getenv()
[16:11:40.769]         }
[16:11:40.769]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:11:40.769]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:11:40.769]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:11:40.769]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:11:40.769]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:11:40.769]             future.stdout.windows.reencode = NULL, width = 80L)
[16:11:40.769]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:11:40.769]             base::names(...future.oldOptions))
[16:11:40.769]     }
[16:11:40.769]     if (FALSE) {
[16:11:40.769]     }
[16:11:40.769]     else {
[16:11:40.769]         if (TRUE) {
[16:11:40.769]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:11:40.769]                 open = "w")
[16:11:40.769]         }
[16:11:40.769]         else {
[16:11:40.769]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:11:40.769]                 windows = "NUL", "/dev/null"), open = "w")
[16:11:40.769]         }
[16:11:40.769]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:11:40.769]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:11:40.769]             base::sink(type = "output", split = FALSE)
[16:11:40.769]             base::close(...future.stdout)
[16:11:40.769]         }, add = TRUE)
[16:11:40.769]     }
[16:11:40.769]     ...future.frame <- base::sys.nframe()
[16:11:40.769]     ...future.conditions <- base::list()
[16:11:40.769]     ...future.rng <- base::globalenv()$.Random.seed
[16:11:40.769]     if (FALSE) {
[16:11:40.769]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:11:40.769]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:11:40.769]     }
[16:11:40.769]     ...future.result <- base::tryCatch({
[16:11:40.769]         base::withCallingHandlers({
[16:11:40.769]             ...future.value <- base::withVisible(base::local({
[16:11:40.769]                 42L
[16:11:40.769]                 stop("Woops")
[16:11:40.769]             }))
[16:11:40.769]             future::FutureResult(value = ...future.value$value, 
[16:11:40.769]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:40.769]                   ...future.rng), globalenv = if (FALSE) 
[16:11:40.769]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:11:40.769]                     ...future.globalenv.names))
[16:11:40.769]                 else NULL, started = ...future.startTime, version = "1.8")
[16:11:40.769]         }, condition = base::local({
[16:11:40.769]             c <- base::c
[16:11:40.769]             inherits <- base::inherits
[16:11:40.769]             invokeRestart <- base::invokeRestart
[16:11:40.769]             length <- base::length
[16:11:40.769]             list <- base::list
[16:11:40.769]             seq.int <- base::seq.int
[16:11:40.769]             signalCondition <- base::signalCondition
[16:11:40.769]             sys.calls <- base::sys.calls
[16:11:40.769]             `[[` <- base::`[[`
[16:11:40.769]             `+` <- base::`+`
[16:11:40.769]             `<<-` <- base::`<<-`
[16:11:40.769]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:11:40.769]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:11:40.769]                   3L)]
[16:11:40.769]             }
[16:11:40.769]             function(cond) {
[16:11:40.769]                 is_error <- inherits(cond, "error")
[16:11:40.769]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:11:40.769]                   NULL)
[16:11:40.769]                 if (is_error) {
[16:11:40.769]                   sessionInformation <- function() {
[16:11:40.769]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:11:40.769]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:11:40.769]                       search = base::search(), system = base::Sys.info())
[16:11:40.769]                   }
[16:11:40.769]                   ...future.conditions[[length(...future.conditions) + 
[16:11:40.769]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:11:40.769]                     cond$call), session = sessionInformation(), 
[16:11:40.769]                     timestamp = base::Sys.time(), signaled = 0L)
[16:11:40.769]                   signalCondition(cond)
[16:11:40.769]                 }
[16:11:40.769]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:11:40.769]                 "immediateCondition"))) {
[16:11:40.769]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:11:40.769]                   ...future.conditions[[length(...future.conditions) + 
[16:11:40.769]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:11:40.769]                   if (TRUE && !signal) {
[16:11:40.769]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:40.769]                     {
[16:11:40.769]                       inherits <- base::inherits
[16:11:40.769]                       invokeRestart <- base::invokeRestart
[16:11:40.769]                       is.null <- base::is.null
[16:11:40.769]                       muffled <- FALSE
[16:11:40.769]                       if (inherits(cond, "message")) {
[16:11:40.769]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:40.769]                         if (muffled) 
[16:11:40.769]                           invokeRestart("muffleMessage")
[16:11:40.769]                       }
[16:11:40.769]                       else if (inherits(cond, "warning")) {
[16:11:40.769]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:40.769]                         if (muffled) 
[16:11:40.769]                           invokeRestart("muffleWarning")
[16:11:40.769]                       }
[16:11:40.769]                       else if (inherits(cond, "condition")) {
[16:11:40.769]                         if (!is.null(pattern)) {
[16:11:40.769]                           computeRestarts <- base::computeRestarts
[16:11:40.769]                           grepl <- base::grepl
[16:11:40.769]                           restarts <- computeRestarts(cond)
[16:11:40.769]                           for (restart in restarts) {
[16:11:40.769]                             name <- restart$name
[16:11:40.769]                             if (is.null(name)) 
[16:11:40.769]                               next
[16:11:40.769]                             if (!grepl(pattern, name)) 
[16:11:40.769]                               next
[16:11:40.769]                             invokeRestart(restart)
[16:11:40.769]                             muffled <- TRUE
[16:11:40.769]                             break
[16:11:40.769]                           }
[16:11:40.769]                         }
[16:11:40.769]                       }
[16:11:40.769]                       invisible(muffled)
[16:11:40.769]                     }
[16:11:40.769]                     muffleCondition(cond, pattern = "^muffle")
[16:11:40.769]                   }
[16:11:40.769]                 }
[16:11:40.769]                 else {
[16:11:40.769]                   if (TRUE) {
[16:11:40.769]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:40.769]                     {
[16:11:40.769]                       inherits <- base::inherits
[16:11:40.769]                       invokeRestart <- base::invokeRestart
[16:11:40.769]                       is.null <- base::is.null
[16:11:40.769]                       muffled <- FALSE
[16:11:40.769]                       if (inherits(cond, "message")) {
[16:11:40.769]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:40.769]                         if (muffled) 
[16:11:40.769]                           invokeRestart("muffleMessage")
[16:11:40.769]                       }
[16:11:40.769]                       else if (inherits(cond, "warning")) {
[16:11:40.769]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:40.769]                         if (muffled) 
[16:11:40.769]                           invokeRestart("muffleWarning")
[16:11:40.769]                       }
[16:11:40.769]                       else if (inherits(cond, "condition")) {
[16:11:40.769]                         if (!is.null(pattern)) {
[16:11:40.769]                           computeRestarts <- base::computeRestarts
[16:11:40.769]                           grepl <- base::grepl
[16:11:40.769]                           restarts <- computeRestarts(cond)
[16:11:40.769]                           for (restart in restarts) {
[16:11:40.769]                             name <- restart$name
[16:11:40.769]                             if (is.null(name)) 
[16:11:40.769]                               next
[16:11:40.769]                             if (!grepl(pattern, name)) 
[16:11:40.769]                               next
[16:11:40.769]                             invokeRestart(restart)
[16:11:40.769]                             muffled <- TRUE
[16:11:40.769]                             break
[16:11:40.769]                           }
[16:11:40.769]                         }
[16:11:40.769]                       }
[16:11:40.769]                       invisible(muffled)
[16:11:40.769]                     }
[16:11:40.769]                     muffleCondition(cond, pattern = "^muffle")
[16:11:40.769]                   }
[16:11:40.769]                 }
[16:11:40.769]             }
[16:11:40.769]         }))
[16:11:40.769]     }, error = function(ex) {
[16:11:40.769]         base::structure(base::list(value = NULL, visible = NULL, 
[16:11:40.769]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:40.769]                 ...future.rng), started = ...future.startTime, 
[16:11:40.769]             finished = Sys.time(), session_uuid = NA_character_, 
[16:11:40.769]             version = "1.8"), class = "FutureResult")
[16:11:40.769]     }, finally = {
[16:11:40.769]         if (!identical(...future.workdir, getwd())) 
[16:11:40.769]             setwd(...future.workdir)
[16:11:40.769]         {
[16:11:40.769]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:11:40.769]                 ...future.oldOptions$nwarnings <- NULL
[16:11:40.769]             }
[16:11:40.769]             base::options(...future.oldOptions)
[16:11:40.769]             if (.Platform$OS.type == "windows") {
[16:11:40.769]                 old_names <- names(...future.oldEnvVars)
[16:11:40.769]                 envs <- base::Sys.getenv()
[16:11:40.769]                 names <- names(envs)
[16:11:40.769]                 common <- intersect(names, old_names)
[16:11:40.769]                 added <- setdiff(names, old_names)
[16:11:40.769]                 removed <- setdiff(old_names, names)
[16:11:40.769]                 changed <- common[...future.oldEnvVars[common] != 
[16:11:40.769]                   envs[common]]
[16:11:40.769]                 NAMES <- toupper(changed)
[16:11:40.769]                 args <- list()
[16:11:40.769]                 for (kk in seq_along(NAMES)) {
[16:11:40.769]                   name <- changed[[kk]]
[16:11:40.769]                   NAME <- NAMES[[kk]]
[16:11:40.769]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.769]                     next
[16:11:40.769]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:40.769]                 }
[16:11:40.769]                 NAMES <- toupper(added)
[16:11:40.769]                 for (kk in seq_along(NAMES)) {
[16:11:40.769]                   name <- added[[kk]]
[16:11:40.769]                   NAME <- NAMES[[kk]]
[16:11:40.769]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.769]                     next
[16:11:40.769]                   args[[name]] <- ""
[16:11:40.769]                 }
[16:11:40.769]                 NAMES <- toupper(removed)
[16:11:40.769]                 for (kk in seq_along(NAMES)) {
[16:11:40.769]                   name <- removed[[kk]]
[16:11:40.769]                   NAME <- NAMES[[kk]]
[16:11:40.769]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.769]                     next
[16:11:40.769]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:40.769]                 }
[16:11:40.769]                 if (length(args) > 0) 
[16:11:40.769]                   base::do.call(base::Sys.setenv, args = args)
[16:11:40.769]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:11:40.769]             }
[16:11:40.769]             else {
[16:11:40.769]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:11:40.769]             }
[16:11:40.769]             {
[16:11:40.769]                 if (base::length(...future.futureOptionsAdded) > 
[16:11:40.769]                   0L) {
[16:11:40.769]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:11:40.769]                   base::names(opts) <- ...future.futureOptionsAdded
[16:11:40.769]                   base::options(opts)
[16:11:40.769]                 }
[16:11:40.769]                 {
[16:11:40.769]                   {
[16:11:40.769]                     NULL
[16:11:40.769]                     RNGkind("Mersenne-Twister")
[16:11:40.769]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:11:40.769]                       inherits = FALSE)
[16:11:40.769]                   }
[16:11:40.769]                   options(future.plan = NULL)
[16:11:40.769]                   if (is.na(NA_character_)) 
[16:11:40.769]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:11:40.769]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:11:40.769]                   future::plan(list(function (..., envir = parent.frame()) 
[16:11:40.769]                   {
[16:11:40.769]                     future <- SequentialFuture(..., envir = envir)
[16:11:40.769]                     if (!future$lazy) 
[16:11:40.769]                       future <- run(future)
[16:11:40.769]                     invisible(future)
[16:11:40.769]                   }), .cleanup = FALSE, .init = FALSE)
[16:11:40.769]                 }
[16:11:40.769]             }
[16:11:40.769]         }
[16:11:40.769]     })
[16:11:40.769]     if (TRUE) {
[16:11:40.769]         base::sink(type = "output", split = FALSE)
[16:11:40.769]         if (TRUE) {
[16:11:40.769]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:11:40.769]         }
[16:11:40.769]         else {
[16:11:40.769]             ...future.result["stdout"] <- base::list(NULL)
[16:11:40.769]         }
[16:11:40.769]         base::close(...future.stdout)
[16:11:40.769]         ...future.stdout <- NULL
[16:11:40.769]     }
[16:11:40.769]     ...future.result$conditions <- ...future.conditions
[16:11:40.769]     ...future.result$finished <- base::Sys.time()
[16:11:40.769]     ...future.result
[16:11:40.769] }
[16:11:40.771] plan(): Setting new future strategy stack:
[16:11:40.771] List of future strategies:
[16:11:40.771] 1. sequential:
[16:11:40.771]    - args: function (..., envir = parent.frame())
[16:11:40.771]    - tweaked: FALSE
[16:11:40.771]    - call: NULL
[16:11:40.771] plan(): nbrOfWorkers() = 1
[16:11:40.772] plan(): Setting new future strategy stack:
[16:11:40.772] List of future strategies:
[16:11:40.772] 1. sequential:
[16:11:40.772]    - args: function (..., envir = parent.frame())
[16:11:40.772]    - tweaked: FALSE
[16:11:40.772]    - call: future::plan("sequential")
[16:11:40.773] plan(): nbrOfWorkers() = 1
[16:11:40.773] SequentialFuture started (and completed)
[16:11:40.773] signalConditions() ...
[16:11:40.773]  - include = ‘immediateCondition’
[16:11:40.773]  - exclude = 
[16:11:40.773]  - resignal = FALSE
[16:11:40.773]  - Number of conditions: 1
[16:11:40.773] signalConditions() ... done
[16:11:40.774] - Launch lazy future ... done
[16:11:40.774] run() for ‘SequentialFuture’ ... done
> vs <- value(ll, signal = FALSE)
[16:11:40.774] resolve() on list ...
[16:11:40.774]  recursive: 0
[16:11:40.775]  length: 2
[16:11:40.775] 
[16:11:40.775] resolved() for ‘SequentialFuture’ ...
[16:11:40.775] - state: ‘finished’
[16:11:40.775] - run: TRUE
[16:11:40.775] - result: ‘FutureResult’
[16:11:40.775] resolved() for ‘SequentialFuture’ ... done
[16:11:40.775] Future #1
[16:11:40.775] signalConditions() ...
[16:11:40.775]  - include = ‘immediateCondition’
[16:11:40.775]  - exclude = 
[16:11:40.776]  - resignal = FALSE
[16:11:40.776]  - Number of conditions: 1
[16:11:40.776] signalConditions() ... done
[16:11:40.776] signalConditionsASAP(SequentialFuture, pos=1) ...
[16:11:40.776] - nx: 2
[16:11:40.776] - relay: TRUE
[16:11:40.776] - stdout: TRUE
[16:11:40.776] - signal: FALSE
[16:11:40.776] - resignal: FALSE
[16:11:40.776] - force: TRUE
[16:11:40.776] - relayed: [n=2] FALSE, FALSE
[16:11:40.777] - queued futures: [n=2] FALSE, FALSE
[16:11:40.777]  - until=1
[16:11:40.777]  - relaying element #1
[16:11:40.777] signalConditions() ...
[16:11:40.777]  - include = ‘immediateCondition’
[16:11:40.777]  - exclude = 
[16:11:40.777]  - resignal = FALSE
[16:11:40.777]  - Number of conditions: 1
[16:11:40.777] signalConditions() ... done
[16:11:40.777] - relayed: [n=2] TRUE, FALSE
[16:11:40.777] - queued futures: [n=2] TRUE, FALSE
[16:11:40.778] signalConditionsASAP(SequentialFuture, pos=1) ... done
[16:11:40.778]  length: 1 (resolved future 1)
[16:11:40.778] resolved() for ‘SequentialFuture’ ...
[16:11:40.778] - state: ‘finished’
[16:11:40.778] - run: TRUE
[16:11:40.778] - result: ‘FutureResult’
[16:11:40.778] resolved() for ‘SequentialFuture’ ... done
[16:11:40.778] Future #2
[16:11:40.778] signalConditions() ...
[16:11:40.779]  - include = ‘immediateCondition’
[16:11:40.779]  - exclude = 
[16:11:40.779]  - resignal = FALSE
[16:11:40.779]  - Number of conditions: 1
[16:11:40.779] signalConditions() ... done
[16:11:40.779] signalConditionsASAP(SequentialFuture, pos=2) ...
[16:11:40.779] - nx: 2
[16:11:40.779] - relay: TRUE
[16:11:40.779] - stdout: TRUE
[16:11:40.779] - signal: FALSE
[16:11:40.779] - resignal: FALSE
[16:11:40.779] - force: TRUE
[16:11:40.779] - relayed: [n=2] TRUE, FALSE
[16:11:40.780] - queued futures: [n=2] TRUE, FALSE
[16:11:40.780]  - until=2
[16:11:40.780]  - relaying element #2
[16:11:40.780] signalConditions() ...
[16:11:40.780]  - include = ‘immediateCondition’
[16:11:40.780]  - exclude = 
[16:11:40.780]  - resignal = FALSE
[16:11:40.780]  - Number of conditions: 1
[16:11:40.780] signalConditions() ... done
[16:11:40.780] - relayed: [n=2] TRUE, TRUE
[16:11:40.781] - queued futures: [n=2] TRUE, TRUE
[16:11:40.781] signalConditionsASAP(SequentialFuture, pos=2) ... done
[16:11:40.781]  length: 0 (resolved future 2)
[16:11:40.781] Relaying remaining futures
[16:11:40.781] signalConditionsASAP(NULL, pos=0) ...
[16:11:40.781] - nx: 2
[16:11:40.781] - relay: TRUE
[16:11:40.781] - stdout: TRUE
[16:11:40.781] - signal: FALSE
[16:11:40.781] - resignal: FALSE
[16:11:40.781] - force: TRUE
[16:11:40.781] - relayed: [n=2] TRUE, TRUE
[16:11:40.781] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:11:40.782] - relayed: [n=2] TRUE, TRUE
[16:11:40.782] - queued futures: [n=2] TRUE, TRUE
[16:11:40.782] signalConditionsASAP(NULL, pos=0) ... done
[16:11:40.782] resolve() on list ... DONE
[16:11:40.782] signalConditions() ...
[16:11:40.782]  - include = ‘immediateCondition’
[16:11:40.782]  - exclude = 
[16:11:40.782]  - resignal = FALSE
[16:11:40.782]  - Number of conditions: 1
[16:11:40.782] signalConditions() ... done
[16:11:40.783] signalConditions() ...
[16:11:40.783]  - include = ‘immediateCondition’
[16:11:40.783]  - exclude = 
[16:11:40.783]  - resignal = FALSE
[16:11:40.783]  - Number of conditions: 1
[16:11:40.783] signalConditions() ... done
> calls <- backtrace(ll[[2]])
[16:11:40.783] resolved() for ‘SequentialFuture’ ...
[16:11:40.783] - state: ‘finished’
[16:11:40.783] - run: TRUE
[16:11:40.784] - result: ‘FutureResult’
[16:11:40.784] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> message("*** backtrace( ) - subsetting ... DONE")
*** backtrace( ) - subsetting ... DONE
> 
> 
> message("*** backtrace( ) - exceptions ...")
*** backtrace( ) - exceptions ...
> 
> message("- No condition ...")
- No condition ...
> f <- future(42L)
[16:11:40.784] getGlobalsAndPackages() ...
[16:11:40.784] Searching for globals...
[16:11:40.785] 
[16:11:40.785] Searching for globals ... DONE
[16:11:40.785] - globals: [0] <none>
[16:11:40.785] getGlobalsAndPackages() ... DONE
[16:11:40.785] run() for ‘Future’ ...
[16:11:40.785] - state: ‘created’
[16:11:40.785] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:11:40.785] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:11:40.786] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:11:40.786]   - Field: ‘label’
[16:11:40.786]   - Field: ‘local’
[16:11:40.786]   - Field: ‘owner’
[16:11:40.786]   - Field: ‘envir’
[16:11:40.786]   - Field: ‘packages’
[16:11:40.786]   - Field: ‘gc’
[16:11:40.786]   - Field: ‘conditions’
[16:11:40.786]   - Field: ‘expr’
[16:11:40.786]   - Field: ‘uuid’
[16:11:40.786]   - Field: ‘seed’
[16:11:40.787]   - Field: ‘version’
[16:11:40.787]   - Field: ‘result’
[16:11:40.787]   - Field: ‘asynchronous’
[16:11:40.787]   - Field: ‘calls’
[16:11:40.787]   - Field: ‘globals’
[16:11:40.787]   - Field: ‘stdout’
[16:11:40.787]   - Field: ‘earlySignal’
[16:11:40.787]   - Field: ‘lazy’
[16:11:40.787]   - Field: ‘state’
[16:11:40.787] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:11:40.787] - Launch lazy future ...
[16:11:40.788] Packages needed by the future expression (n = 0): <none>
[16:11:40.788] Packages needed by future strategies (n = 0): <none>
[16:11:40.788] {
[16:11:40.788]     {
[16:11:40.788]         {
[16:11:40.788]             ...future.startTime <- base::Sys.time()
[16:11:40.788]             {
[16:11:40.788]                 {
[16:11:40.788]                   {
[16:11:40.788]                     base::local({
[16:11:40.788]                       has_future <- base::requireNamespace("future", 
[16:11:40.788]                         quietly = TRUE)
[16:11:40.788]                       if (has_future) {
[16:11:40.788]                         ns <- base::getNamespace("future")
[16:11:40.788]                         version <- ns[[".package"]][["version"]]
[16:11:40.788]                         if (is.null(version)) 
[16:11:40.788]                           version <- utils::packageVersion("future")
[16:11:40.788]                       }
[16:11:40.788]                       else {
[16:11:40.788]                         version <- NULL
[16:11:40.788]                       }
[16:11:40.788]                       if (!has_future || version < "1.8.0") {
[16:11:40.788]                         info <- base::c(r_version = base::gsub("R version ", 
[16:11:40.788]                           "", base::R.version$version.string), 
[16:11:40.788]                           platform = base::sprintf("%s (%s-bit)", 
[16:11:40.788]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:11:40.788]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:11:40.788]                             "release", "version")], collapse = " "), 
[16:11:40.788]                           hostname = base::Sys.info()[["nodename"]])
[16:11:40.788]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:11:40.788]                           info)
[16:11:40.788]                         info <- base::paste(info, collapse = "; ")
[16:11:40.788]                         if (!has_future) {
[16:11:40.788]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:11:40.788]                             info)
[16:11:40.788]                         }
[16:11:40.788]                         else {
[16:11:40.788]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:11:40.788]                             info, version)
[16:11:40.788]                         }
[16:11:40.788]                         base::stop(msg)
[16:11:40.788]                       }
[16:11:40.788]                     })
[16:11:40.788]                   }
[16:11:40.788]                   options(future.plan = NULL)
[16:11:40.788]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:11:40.788]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:11:40.788]                 }
[16:11:40.788]                 ...future.workdir <- getwd()
[16:11:40.788]             }
[16:11:40.788]             ...future.oldOptions <- base::as.list(base::.Options)
[16:11:40.788]             ...future.oldEnvVars <- base::Sys.getenv()
[16:11:40.788]         }
[16:11:40.788]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:11:40.788]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:11:40.788]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:11:40.788]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:11:40.788]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:11:40.788]             future.stdout.windows.reencode = NULL, width = 80L)
[16:11:40.788]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:11:40.788]             base::names(...future.oldOptions))
[16:11:40.788]     }
[16:11:40.788]     if (FALSE) {
[16:11:40.788]     }
[16:11:40.788]     else {
[16:11:40.788]         if (TRUE) {
[16:11:40.788]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:11:40.788]                 open = "w")
[16:11:40.788]         }
[16:11:40.788]         else {
[16:11:40.788]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:11:40.788]                 windows = "NUL", "/dev/null"), open = "w")
[16:11:40.788]         }
[16:11:40.788]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:11:40.788]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:11:40.788]             base::sink(type = "output", split = FALSE)
[16:11:40.788]             base::close(...future.stdout)
[16:11:40.788]         }, add = TRUE)
[16:11:40.788]     }
[16:11:40.788]     ...future.frame <- base::sys.nframe()
[16:11:40.788]     ...future.conditions <- base::list()
[16:11:40.788]     ...future.rng <- base::globalenv()$.Random.seed
[16:11:40.788]     if (FALSE) {
[16:11:40.788]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:11:40.788]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:11:40.788]     }
[16:11:40.788]     ...future.result <- base::tryCatch({
[16:11:40.788]         base::withCallingHandlers({
[16:11:40.788]             ...future.value <- base::withVisible(base::local(42L))
[16:11:40.788]             future::FutureResult(value = ...future.value$value, 
[16:11:40.788]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:40.788]                   ...future.rng), globalenv = if (FALSE) 
[16:11:40.788]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:11:40.788]                     ...future.globalenv.names))
[16:11:40.788]                 else NULL, started = ...future.startTime, version = "1.8")
[16:11:40.788]         }, condition = base::local({
[16:11:40.788]             c <- base::c
[16:11:40.788]             inherits <- base::inherits
[16:11:40.788]             invokeRestart <- base::invokeRestart
[16:11:40.788]             length <- base::length
[16:11:40.788]             list <- base::list
[16:11:40.788]             seq.int <- base::seq.int
[16:11:40.788]             signalCondition <- base::signalCondition
[16:11:40.788]             sys.calls <- base::sys.calls
[16:11:40.788]             `[[` <- base::`[[`
[16:11:40.788]             `+` <- base::`+`
[16:11:40.788]             `<<-` <- base::`<<-`
[16:11:40.788]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:11:40.788]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:11:40.788]                   3L)]
[16:11:40.788]             }
[16:11:40.788]             function(cond) {
[16:11:40.788]                 is_error <- inherits(cond, "error")
[16:11:40.788]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:11:40.788]                   NULL)
[16:11:40.788]                 if (is_error) {
[16:11:40.788]                   sessionInformation <- function() {
[16:11:40.788]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:11:40.788]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:11:40.788]                       search = base::search(), system = base::Sys.info())
[16:11:40.788]                   }
[16:11:40.788]                   ...future.conditions[[length(...future.conditions) + 
[16:11:40.788]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:11:40.788]                     cond$call), session = sessionInformation(), 
[16:11:40.788]                     timestamp = base::Sys.time(), signaled = 0L)
[16:11:40.788]                   signalCondition(cond)
[16:11:40.788]                 }
[16:11:40.788]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:11:40.788]                 "immediateCondition"))) {
[16:11:40.788]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:11:40.788]                   ...future.conditions[[length(...future.conditions) + 
[16:11:40.788]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:11:40.788]                   if (TRUE && !signal) {
[16:11:40.788]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:40.788]                     {
[16:11:40.788]                       inherits <- base::inherits
[16:11:40.788]                       invokeRestart <- base::invokeRestart
[16:11:40.788]                       is.null <- base::is.null
[16:11:40.788]                       muffled <- FALSE
[16:11:40.788]                       if (inherits(cond, "message")) {
[16:11:40.788]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:40.788]                         if (muffled) 
[16:11:40.788]                           invokeRestart("muffleMessage")
[16:11:40.788]                       }
[16:11:40.788]                       else if (inherits(cond, "warning")) {
[16:11:40.788]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:40.788]                         if (muffled) 
[16:11:40.788]                           invokeRestart("muffleWarning")
[16:11:40.788]                       }
[16:11:40.788]                       else if (inherits(cond, "condition")) {
[16:11:40.788]                         if (!is.null(pattern)) {
[16:11:40.788]                           computeRestarts <- base::computeRestarts
[16:11:40.788]                           grepl <- base::grepl
[16:11:40.788]                           restarts <- computeRestarts(cond)
[16:11:40.788]                           for (restart in restarts) {
[16:11:40.788]                             name <- restart$name
[16:11:40.788]                             if (is.null(name)) 
[16:11:40.788]                               next
[16:11:40.788]                             if (!grepl(pattern, name)) 
[16:11:40.788]                               next
[16:11:40.788]                             invokeRestart(restart)
[16:11:40.788]                             muffled <- TRUE
[16:11:40.788]                             break
[16:11:40.788]                           }
[16:11:40.788]                         }
[16:11:40.788]                       }
[16:11:40.788]                       invisible(muffled)
[16:11:40.788]                     }
[16:11:40.788]                     muffleCondition(cond, pattern = "^muffle")
[16:11:40.788]                   }
[16:11:40.788]                 }
[16:11:40.788]                 else {
[16:11:40.788]                   if (TRUE) {
[16:11:40.788]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:40.788]                     {
[16:11:40.788]                       inherits <- base::inherits
[16:11:40.788]                       invokeRestart <- base::invokeRestart
[16:11:40.788]                       is.null <- base::is.null
[16:11:40.788]                       muffled <- FALSE
[16:11:40.788]                       if (inherits(cond, "message")) {
[16:11:40.788]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:40.788]                         if (muffled) 
[16:11:40.788]                           invokeRestart("muffleMessage")
[16:11:40.788]                       }
[16:11:40.788]                       else if (inherits(cond, "warning")) {
[16:11:40.788]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:40.788]                         if (muffled) 
[16:11:40.788]                           invokeRestart("muffleWarning")
[16:11:40.788]                       }
[16:11:40.788]                       else if (inherits(cond, "condition")) {
[16:11:40.788]                         if (!is.null(pattern)) {
[16:11:40.788]                           computeRestarts <- base::computeRestarts
[16:11:40.788]                           grepl <- base::grepl
[16:11:40.788]                           restarts <- computeRestarts(cond)
[16:11:40.788]                           for (restart in restarts) {
[16:11:40.788]                             name <- restart$name
[16:11:40.788]                             if (is.null(name)) 
[16:11:40.788]                               next
[16:11:40.788]                             if (!grepl(pattern, name)) 
[16:11:40.788]                               next
[16:11:40.788]                             invokeRestart(restart)
[16:11:40.788]                             muffled <- TRUE
[16:11:40.788]                             break
[16:11:40.788]                           }
[16:11:40.788]                         }
[16:11:40.788]                       }
[16:11:40.788]                       invisible(muffled)
[16:11:40.788]                     }
[16:11:40.788]                     muffleCondition(cond, pattern = "^muffle")
[16:11:40.788]                   }
[16:11:40.788]                 }
[16:11:40.788]             }
[16:11:40.788]         }))
[16:11:40.788]     }, error = function(ex) {
[16:11:40.788]         base::structure(base::list(value = NULL, visible = NULL, 
[16:11:40.788]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:40.788]                 ...future.rng), started = ...future.startTime, 
[16:11:40.788]             finished = Sys.time(), session_uuid = NA_character_, 
[16:11:40.788]             version = "1.8"), class = "FutureResult")
[16:11:40.788]     }, finally = {
[16:11:40.788]         if (!identical(...future.workdir, getwd())) 
[16:11:40.788]             setwd(...future.workdir)
[16:11:40.788]         {
[16:11:40.788]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:11:40.788]                 ...future.oldOptions$nwarnings <- NULL
[16:11:40.788]             }
[16:11:40.788]             base::options(...future.oldOptions)
[16:11:40.788]             if (.Platform$OS.type == "windows") {
[16:11:40.788]                 old_names <- names(...future.oldEnvVars)
[16:11:40.788]                 envs <- base::Sys.getenv()
[16:11:40.788]                 names <- names(envs)
[16:11:40.788]                 common <- intersect(names, old_names)
[16:11:40.788]                 added <- setdiff(names, old_names)
[16:11:40.788]                 removed <- setdiff(old_names, names)
[16:11:40.788]                 changed <- common[...future.oldEnvVars[common] != 
[16:11:40.788]                   envs[common]]
[16:11:40.788]                 NAMES <- toupper(changed)
[16:11:40.788]                 args <- list()
[16:11:40.788]                 for (kk in seq_along(NAMES)) {
[16:11:40.788]                   name <- changed[[kk]]
[16:11:40.788]                   NAME <- NAMES[[kk]]
[16:11:40.788]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.788]                     next
[16:11:40.788]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:40.788]                 }
[16:11:40.788]                 NAMES <- toupper(added)
[16:11:40.788]                 for (kk in seq_along(NAMES)) {
[16:11:40.788]                   name <- added[[kk]]
[16:11:40.788]                   NAME <- NAMES[[kk]]
[16:11:40.788]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.788]                     next
[16:11:40.788]                   args[[name]] <- ""
[16:11:40.788]                 }
[16:11:40.788]                 NAMES <- toupper(removed)
[16:11:40.788]                 for (kk in seq_along(NAMES)) {
[16:11:40.788]                   name <- removed[[kk]]
[16:11:40.788]                   NAME <- NAMES[[kk]]
[16:11:40.788]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.788]                     next
[16:11:40.788]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:40.788]                 }
[16:11:40.788]                 if (length(args) > 0) 
[16:11:40.788]                   base::do.call(base::Sys.setenv, args = args)
[16:11:40.788]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:11:40.788]             }
[16:11:40.788]             else {
[16:11:40.788]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:11:40.788]             }
[16:11:40.788]             {
[16:11:40.788]                 if (base::length(...future.futureOptionsAdded) > 
[16:11:40.788]                   0L) {
[16:11:40.788]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:11:40.788]                   base::names(opts) <- ...future.futureOptionsAdded
[16:11:40.788]                   base::options(opts)
[16:11:40.788]                 }
[16:11:40.788]                 {
[16:11:40.788]                   {
[16:11:40.788]                     NULL
[16:11:40.788]                     RNGkind("Mersenne-Twister")
[16:11:40.788]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:11:40.788]                       inherits = FALSE)
[16:11:40.788]                   }
[16:11:40.788]                   options(future.plan = NULL)
[16:11:40.788]                   if (is.na(NA_character_)) 
[16:11:40.788]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:11:40.788]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:11:40.788]                   future::plan(list(function (..., envir = parent.frame()) 
[16:11:40.788]                   {
[16:11:40.788]                     future <- SequentialFuture(..., envir = envir)
[16:11:40.788]                     if (!future$lazy) 
[16:11:40.788]                       future <- run(future)
[16:11:40.788]                     invisible(future)
[16:11:40.788]                   }), .cleanup = FALSE, .init = FALSE)
[16:11:40.788]                 }
[16:11:40.788]             }
[16:11:40.788]         }
[16:11:40.788]     })
[16:11:40.788]     if (TRUE) {
[16:11:40.788]         base::sink(type = "output", split = FALSE)
[16:11:40.788]         if (TRUE) {
[16:11:40.788]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:11:40.788]         }
[16:11:40.788]         else {
[16:11:40.788]             ...future.result["stdout"] <- base::list(NULL)
[16:11:40.788]         }
[16:11:40.788]         base::close(...future.stdout)
[16:11:40.788]         ...future.stdout <- NULL
[16:11:40.788]     }
[16:11:40.788]     ...future.result$conditions <- ...future.conditions
[16:11:40.788]     ...future.result$finished <- base::Sys.time()
[16:11:40.788]     ...future.result
[16:11:40.788] }
[16:11:40.790] plan(): Setting new future strategy stack:
[16:11:40.790] List of future strategies:
[16:11:40.790] 1. sequential:
[16:11:40.790]    - args: function (..., envir = parent.frame())
[16:11:40.790]    - tweaked: FALSE
[16:11:40.790]    - call: NULL
[16:11:40.790] plan(): nbrOfWorkers() = 1
[16:11:40.791] plan(): Setting new future strategy stack:
[16:11:40.791] List of future strategies:
[16:11:40.791] 1. sequential:
[16:11:40.791]    - args: function (..., envir = parent.frame())
[16:11:40.791]    - tweaked: FALSE
[16:11:40.791]    - call: future::plan("sequential")
[16:11:40.792] plan(): nbrOfWorkers() = 1
[16:11:40.792] SequentialFuture started (and completed)
[16:11:40.792] - Launch lazy future ... done
[16:11:40.792] run() for ‘SequentialFuture’ ... done
> res <- tryCatch(backtrace(f), error = identity)
[16:11:40.792] resolved() for ‘SequentialFuture’ ...
[16:11:40.792] - state: ‘finished’
[16:11:40.792] - run: TRUE
[16:11:40.793] - result: ‘FutureResult’
[16:11:40.793] resolved() for ‘SequentialFuture’ ... done
> print(res)
<simpleError: No error was caught for this future: ‘f’>
> stopifnot(inherits(res, "error"))
> 
> message("- No call stack ...")
- No call stack ...
> f <- future({ 42L; stop("Woops") })
[16:11:40.793] getGlobalsAndPackages() ...
[16:11:40.793] Searching for globals...
[16:11:40.794] - globals found: [2] ‘{’, ‘stop’
[16:11:40.794] Searching for globals ... DONE
[16:11:40.794] Resolving globals: FALSE
[16:11:40.794] 
[16:11:40.794] 
[16:11:40.795] getGlobalsAndPackages() ... DONE
[16:11:40.795] run() for ‘Future’ ...
[16:11:40.795] - state: ‘created’
[16:11:40.795] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:11:40.795] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:11:40.795] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:11:40.795]   - Field: ‘label’
[16:11:40.796]   - Field: ‘local’
[16:11:40.796]   - Field: ‘owner’
[16:11:40.796]   - Field: ‘envir’
[16:11:40.796]   - Field: ‘packages’
[16:11:40.796]   - Field: ‘gc’
[16:11:40.796]   - Field: ‘conditions’
[16:11:40.796]   - Field: ‘expr’
[16:11:40.797]   - Field: ‘uuid’
[16:11:40.798]   - Field: ‘seed’
[16:11:40.798]   - Field: ‘version’
[16:11:40.798]   - Field: ‘result’
[16:11:40.798]   - Field: ‘asynchronous’
[16:11:40.798]   - Field: ‘calls’
[16:11:40.798]   - Field: ‘globals’
[16:11:40.798]   - Field: ‘stdout’
[16:11:40.798]   - Field: ‘earlySignal’
[16:11:40.798]   - Field: ‘lazy’
[16:11:40.798]   - Field: ‘state’
[16:11:40.798] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:11:40.799] - Launch lazy future ...
[16:11:40.799] Packages needed by the future expression (n = 0): <none>
[16:11:40.799] Packages needed by future strategies (n = 0): <none>
[16:11:40.799] {
[16:11:40.799]     {
[16:11:40.799]         {
[16:11:40.799]             ...future.startTime <- base::Sys.time()
[16:11:40.799]             {
[16:11:40.799]                 {
[16:11:40.799]                   {
[16:11:40.799]                     base::local({
[16:11:40.799]                       has_future <- base::requireNamespace("future", 
[16:11:40.799]                         quietly = TRUE)
[16:11:40.799]                       if (has_future) {
[16:11:40.799]                         ns <- base::getNamespace("future")
[16:11:40.799]                         version <- ns[[".package"]][["version"]]
[16:11:40.799]                         if (is.null(version)) 
[16:11:40.799]                           version <- utils::packageVersion("future")
[16:11:40.799]                       }
[16:11:40.799]                       else {
[16:11:40.799]                         version <- NULL
[16:11:40.799]                       }
[16:11:40.799]                       if (!has_future || version < "1.8.0") {
[16:11:40.799]                         info <- base::c(r_version = base::gsub("R version ", 
[16:11:40.799]                           "", base::R.version$version.string), 
[16:11:40.799]                           platform = base::sprintf("%s (%s-bit)", 
[16:11:40.799]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:11:40.799]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:11:40.799]                             "release", "version")], collapse = " "), 
[16:11:40.799]                           hostname = base::Sys.info()[["nodename"]])
[16:11:40.799]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:11:40.799]                           info)
[16:11:40.799]                         info <- base::paste(info, collapse = "; ")
[16:11:40.799]                         if (!has_future) {
[16:11:40.799]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:11:40.799]                             info)
[16:11:40.799]                         }
[16:11:40.799]                         else {
[16:11:40.799]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:11:40.799]                             info, version)
[16:11:40.799]                         }
[16:11:40.799]                         base::stop(msg)
[16:11:40.799]                       }
[16:11:40.799]                     })
[16:11:40.799]                   }
[16:11:40.799]                   options(future.plan = NULL)
[16:11:40.799]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:11:40.799]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:11:40.799]                 }
[16:11:40.799]                 ...future.workdir <- getwd()
[16:11:40.799]             }
[16:11:40.799]             ...future.oldOptions <- base::as.list(base::.Options)
[16:11:40.799]             ...future.oldEnvVars <- base::Sys.getenv()
[16:11:40.799]         }
[16:11:40.799]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:11:40.799]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:11:40.799]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:11:40.799]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:11:40.799]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:11:40.799]             future.stdout.windows.reencode = NULL, width = 80L)
[16:11:40.799]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:11:40.799]             base::names(...future.oldOptions))
[16:11:40.799]     }
[16:11:40.799]     if (FALSE) {
[16:11:40.799]     }
[16:11:40.799]     else {
[16:11:40.799]         if (TRUE) {
[16:11:40.799]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:11:40.799]                 open = "w")
[16:11:40.799]         }
[16:11:40.799]         else {
[16:11:40.799]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:11:40.799]                 windows = "NUL", "/dev/null"), open = "w")
[16:11:40.799]         }
[16:11:40.799]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:11:40.799]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:11:40.799]             base::sink(type = "output", split = FALSE)
[16:11:40.799]             base::close(...future.stdout)
[16:11:40.799]         }, add = TRUE)
[16:11:40.799]     }
[16:11:40.799]     ...future.frame <- base::sys.nframe()
[16:11:40.799]     ...future.conditions <- base::list()
[16:11:40.799]     ...future.rng <- base::globalenv()$.Random.seed
[16:11:40.799]     if (FALSE) {
[16:11:40.799]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:11:40.799]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:11:40.799]     }
[16:11:40.799]     ...future.result <- base::tryCatch({
[16:11:40.799]         base::withCallingHandlers({
[16:11:40.799]             ...future.value <- base::withVisible(base::local({
[16:11:40.799]                 42L
[16:11:40.799]                 stop("Woops")
[16:11:40.799]             }))
[16:11:40.799]             future::FutureResult(value = ...future.value$value, 
[16:11:40.799]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:40.799]                   ...future.rng), globalenv = if (FALSE) 
[16:11:40.799]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:11:40.799]                     ...future.globalenv.names))
[16:11:40.799]                 else NULL, started = ...future.startTime, version = "1.8")
[16:11:40.799]         }, condition = base::local({
[16:11:40.799]             c <- base::c
[16:11:40.799]             inherits <- base::inherits
[16:11:40.799]             invokeRestart <- base::invokeRestart
[16:11:40.799]             length <- base::length
[16:11:40.799]             list <- base::list
[16:11:40.799]             seq.int <- base::seq.int
[16:11:40.799]             signalCondition <- base::signalCondition
[16:11:40.799]             sys.calls <- base::sys.calls
[16:11:40.799]             `[[` <- base::`[[`
[16:11:40.799]             `+` <- base::`+`
[16:11:40.799]             `<<-` <- base::`<<-`
[16:11:40.799]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:11:40.799]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:11:40.799]                   3L)]
[16:11:40.799]             }
[16:11:40.799]             function(cond) {
[16:11:40.799]                 is_error <- inherits(cond, "error")
[16:11:40.799]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:11:40.799]                   NULL)
[16:11:40.799]                 if (is_error) {
[16:11:40.799]                   sessionInformation <- function() {
[16:11:40.799]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:11:40.799]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:11:40.799]                       search = base::search(), system = base::Sys.info())
[16:11:40.799]                   }
[16:11:40.799]                   ...future.conditions[[length(...future.conditions) + 
[16:11:40.799]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:11:40.799]                     cond$call), session = sessionInformation(), 
[16:11:40.799]                     timestamp = base::Sys.time(), signaled = 0L)
[16:11:40.799]                   signalCondition(cond)
[16:11:40.799]                 }
[16:11:40.799]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:11:40.799]                 "immediateCondition"))) {
[16:11:40.799]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:11:40.799]                   ...future.conditions[[length(...future.conditions) + 
[16:11:40.799]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:11:40.799]                   if (TRUE && !signal) {
[16:11:40.799]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:40.799]                     {
[16:11:40.799]                       inherits <- base::inherits
[16:11:40.799]                       invokeRestart <- base::invokeRestart
[16:11:40.799]                       is.null <- base::is.null
[16:11:40.799]                       muffled <- FALSE
[16:11:40.799]                       if (inherits(cond, "message")) {
[16:11:40.799]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:40.799]                         if (muffled) 
[16:11:40.799]                           invokeRestart("muffleMessage")
[16:11:40.799]                       }
[16:11:40.799]                       else if (inherits(cond, "warning")) {
[16:11:40.799]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:40.799]                         if (muffled) 
[16:11:40.799]                           invokeRestart("muffleWarning")
[16:11:40.799]                       }
[16:11:40.799]                       else if (inherits(cond, "condition")) {
[16:11:40.799]                         if (!is.null(pattern)) {
[16:11:40.799]                           computeRestarts <- base::computeRestarts
[16:11:40.799]                           grepl <- base::grepl
[16:11:40.799]                           restarts <- computeRestarts(cond)
[16:11:40.799]                           for (restart in restarts) {
[16:11:40.799]                             name <- restart$name
[16:11:40.799]                             if (is.null(name)) 
[16:11:40.799]                               next
[16:11:40.799]                             if (!grepl(pattern, name)) 
[16:11:40.799]                               next
[16:11:40.799]                             invokeRestart(restart)
[16:11:40.799]                             muffled <- TRUE
[16:11:40.799]                             break
[16:11:40.799]                           }
[16:11:40.799]                         }
[16:11:40.799]                       }
[16:11:40.799]                       invisible(muffled)
[16:11:40.799]                     }
[16:11:40.799]                     muffleCondition(cond, pattern = "^muffle")
[16:11:40.799]                   }
[16:11:40.799]                 }
[16:11:40.799]                 else {
[16:11:40.799]                   if (TRUE) {
[16:11:40.799]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:40.799]                     {
[16:11:40.799]                       inherits <- base::inherits
[16:11:40.799]                       invokeRestart <- base::invokeRestart
[16:11:40.799]                       is.null <- base::is.null
[16:11:40.799]                       muffled <- FALSE
[16:11:40.799]                       if (inherits(cond, "message")) {
[16:11:40.799]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:40.799]                         if (muffled) 
[16:11:40.799]                           invokeRestart("muffleMessage")
[16:11:40.799]                       }
[16:11:40.799]                       else if (inherits(cond, "warning")) {
[16:11:40.799]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:40.799]                         if (muffled) 
[16:11:40.799]                           invokeRestart("muffleWarning")
[16:11:40.799]                       }
[16:11:40.799]                       else if (inherits(cond, "condition")) {
[16:11:40.799]                         if (!is.null(pattern)) {
[16:11:40.799]                           computeRestarts <- base::computeRestarts
[16:11:40.799]                           grepl <- base::grepl
[16:11:40.799]                           restarts <- computeRestarts(cond)
[16:11:40.799]                           for (restart in restarts) {
[16:11:40.799]                             name <- restart$name
[16:11:40.799]                             if (is.null(name)) 
[16:11:40.799]                               next
[16:11:40.799]                             if (!grepl(pattern, name)) 
[16:11:40.799]                               next
[16:11:40.799]                             invokeRestart(restart)
[16:11:40.799]                             muffled <- TRUE
[16:11:40.799]                             break
[16:11:40.799]                           }
[16:11:40.799]                         }
[16:11:40.799]                       }
[16:11:40.799]                       invisible(muffled)
[16:11:40.799]                     }
[16:11:40.799]                     muffleCondition(cond, pattern = "^muffle")
[16:11:40.799]                   }
[16:11:40.799]                 }
[16:11:40.799]             }
[16:11:40.799]         }))
[16:11:40.799]     }, error = function(ex) {
[16:11:40.799]         base::structure(base::list(value = NULL, visible = NULL, 
[16:11:40.799]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:40.799]                 ...future.rng), started = ...future.startTime, 
[16:11:40.799]             finished = Sys.time(), session_uuid = NA_character_, 
[16:11:40.799]             version = "1.8"), class = "FutureResult")
[16:11:40.799]     }, finally = {
[16:11:40.799]         if (!identical(...future.workdir, getwd())) 
[16:11:40.799]             setwd(...future.workdir)
[16:11:40.799]         {
[16:11:40.799]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:11:40.799]                 ...future.oldOptions$nwarnings <- NULL
[16:11:40.799]             }
[16:11:40.799]             base::options(...future.oldOptions)
[16:11:40.799]             if (.Platform$OS.type == "windows") {
[16:11:40.799]                 old_names <- names(...future.oldEnvVars)
[16:11:40.799]                 envs <- base::Sys.getenv()
[16:11:40.799]                 names <- names(envs)
[16:11:40.799]                 common <- intersect(names, old_names)
[16:11:40.799]                 added <- setdiff(names, old_names)
[16:11:40.799]                 removed <- setdiff(old_names, names)
[16:11:40.799]                 changed <- common[...future.oldEnvVars[common] != 
[16:11:40.799]                   envs[common]]
[16:11:40.799]                 NAMES <- toupper(changed)
[16:11:40.799]                 args <- list()
[16:11:40.799]                 for (kk in seq_along(NAMES)) {
[16:11:40.799]                   name <- changed[[kk]]
[16:11:40.799]                   NAME <- NAMES[[kk]]
[16:11:40.799]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.799]                     next
[16:11:40.799]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:40.799]                 }
[16:11:40.799]                 NAMES <- toupper(added)
[16:11:40.799]                 for (kk in seq_along(NAMES)) {
[16:11:40.799]                   name <- added[[kk]]
[16:11:40.799]                   NAME <- NAMES[[kk]]
[16:11:40.799]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.799]                     next
[16:11:40.799]                   args[[name]] <- ""
[16:11:40.799]                 }
[16:11:40.799]                 NAMES <- toupper(removed)
[16:11:40.799]                 for (kk in seq_along(NAMES)) {
[16:11:40.799]                   name <- removed[[kk]]
[16:11:40.799]                   NAME <- NAMES[[kk]]
[16:11:40.799]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:40.799]                     next
[16:11:40.799]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:40.799]                 }
[16:11:40.799]                 if (length(args) > 0) 
[16:11:40.799]                   base::do.call(base::Sys.setenv, args = args)
[16:11:40.799]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:11:40.799]             }
[16:11:40.799]             else {
[16:11:40.799]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:11:40.799]             }
[16:11:40.799]             {
[16:11:40.799]                 if (base::length(...future.futureOptionsAdded) > 
[16:11:40.799]                   0L) {
[16:11:40.799]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:11:40.799]                   base::names(opts) <- ...future.futureOptionsAdded
[16:11:40.799]                   base::options(opts)
[16:11:40.799]                 }
[16:11:40.799]                 {
[16:11:40.799]                   {
[16:11:40.799]                     NULL
[16:11:40.799]                     RNGkind("Mersenne-Twister")
[16:11:40.799]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:11:40.799]                       inherits = FALSE)
[16:11:40.799]                   }
[16:11:40.799]                   options(future.plan = NULL)
[16:11:40.799]                   if (is.na(NA_character_)) 
[16:11:40.799]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:11:40.799]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:11:40.799]                   future::plan(list(function (..., envir = parent.frame()) 
[16:11:40.799]                   {
[16:11:40.799]                     future <- SequentialFuture(..., envir = envir)
[16:11:40.799]                     if (!future$lazy) 
[16:11:40.799]                       future <- run(future)
[16:11:40.799]                     invisible(future)
[16:11:40.799]                   }), .cleanup = FALSE, .init = FALSE)
[16:11:40.799]                 }
[16:11:40.799]             }
[16:11:40.799]         }
[16:11:40.799]     })
[16:11:40.799]     if (TRUE) {
[16:11:40.799]         base::sink(type = "output", split = FALSE)
[16:11:40.799]         if (TRUE) {
[16:11:40.799]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:11:40.799]         }
[16:11:40.799]         else {
[16:11:40.799]             ...future.result["stdout"] <- base::list(NULL)
[16:11:40.799]         }
[16:11:40.799]         base::close(...future.stdout)
[16:11:40.799]         ...future.stdout <- NULL
[16:11:40.799]     }
[16:11:40.799]     ...future.result$conditions <- ...future.conditions
[16:11:40.799]     ...future.result$finished <- base::Sys.time()
[16:11:40.799]     ...future.result
[16:11:40.799] }
[16:11:40.801] plan(): Setting new future strategy stack:
[16:11:40.801] List of future strategies:
[16:11:40.801] 1. sequential:
[16:11:40.801]    - args: function (..., envir = parent.frame())
[16:11:40.801]    - tweaked: FALSE
[16:11:40.801]    - call: NULL
[16:11:40.801] plan(): nbrOfWorkers() = 1
[16:11:40.802] plan(): Setting new future strategy stack:
[16:11:40.802] List of future strategies:
[16:11:40.802] 1. sequential:
[16:11:40.802]    - args: function (..., envir = parent.frame())
[16:11:40.802]    - tweaked: FALSE
[16:11:40.802]    - call: future::plan("sequential")
[16:11:40.803] plan(): nbrOfWorkers() = 1
[16:11:40.803] SequentialFuture started (and completed)
[16:11:40.803] signalConditions() ...
[16:11:40.803]  - include = ‘immediateCondition’
[16:11:40.803]  - exclude = 
[16:11:40.803]  - resignal = FALSE
[16:11:40.803]  - Number of conditions: 1
[16:11:40.803] signalConditions() ... done
[16:11:40.803] - Launch lazy future ... done
[16:11:40.804] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[16:11:40.804] signalConditions() ...
[16:11:40.804]  - include = ‘immediateCondition’
[16:11:40.804]  - exclude = 
[16:11:40.804]  - resignal = FALSE
[16:11:40.804]  - Number of conditions: 1
[16:11:40.804] signalConditions() ... done
> 
> if (availableCores() >= 2L) {
+   message("- Non-resolved future ...")
+   plan(multisession, workers = 2L)
+   f <- future({ Sys.sleep(3); 42L; stop("Woops") })
+   res <- tryCatch(backtrace(f), error = identity)
+   print(res)
+   stopifnot(inherits(res, "error"))
+   
+   ## If we don't resolve the future, the cluster of workers will not
+   ## be able to shut down naturally. They will eventually time out,
+   ## but that will happen long after 'R CMD check' terminates. Because
+   ## of this, 'R CMD check --as-cran' will report on "detritus in the
+   ## temp directory" when running on MS Windows.  This happens because
+   ## MS Windows doesn't shut down child processes as Linux and macOS
+   ## does when the main R session terminates.
+   resolve(f)
+ }
- Non-resolved future ...
[16:11:40.810] plan(): Setting new future strategy stack:
[16:11:40.811] List of future strategies:
[16:11:40.811] 1. multisession:
[16:11:40.811]    - args: function (..., workers = 2L, envir = parent.frame())
[16:11:40.811]    - tweaked: TRUE
[16:11:40.811]    - call: plan(multisession, workers = 2L)
[16:11:40.822] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:11:40.822] multisession:
[16:11:40.822] - args: function (..., workers = 2L, envir = parent.frame())
[16:11:40.822] - tweaked: TRUE
[16:11:40.822] - call: plan(multisession, workers = 2L)
[16:11:40.823] getGlobalsAndPackages() ...
[16:11:40.823] Not searching for globals
[16:11:40.823] - globals: [0] <none>
[16:11:40.823] getGlobalsAndPackages() ... DONE
[16:11:40.824] [local output] makeClusterPSOCK() ...
[16:11:40.852] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:11:40.857] [local output] Base port: 11049
[16:11:40.857] [local output] Getting setup options for 2 cluster nodes ...
[16:11:40.857] [local output]  - Node 1 of 2 ...
[16:11:40.858] [local output] localMachine=TRUE => revtunnel=FALSE

[16:11:40.858] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpxQOMkq/worker.rank=1.parallelly.parent=79982.1386e51ab0c3.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpxQOMkq/worker.rank=1.parallelly.parent=79982.1386e51ab0c3.pid")'’
[16:11:41.045] - Possible to infer worker's PID: TRUE
[16:11:41.045] [local output] Rscript port: 11049

[16:11:41.046] [local output]  - Node 2 of 2 ...
[16:11:41.046] [local output] localMachine=TRUE => revtunnel=FALSE

[16:11:41.047] [local output] Rscript port: 11049

[16:11:41.047] [local output] Getting setup options for 2 cluster nodes ... done
[16:11:41.047] [local output]  - Parallel setup requested for some PSOCK nodes
[16:11:41.048] [local output] Setting up PSOCK nodes in parallel
[16:11:41.048] List of 36
[16:11:41.048]  $ worker          : chr "localhost"
[16:11:41.048]   ..- attr(*, "localhost")= logi TRUE
[16:11:41.048]  $ master          : chr "localhost"
[16:11:41.048]  $ port            : int 11049
[16:11:41.048]  $ connectTimeout  : num 120
[16:11:41.048]  $ timeout         : num 2592000
[16:11:41.048]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:11:41.048]  $ homogeneous     : logi TRUE
[16:11:41.048]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:11:41.048]  $ rscript_envs    : NULL
[16:11:41.048]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:11:41.048]  $ rscript_startup : NULL
[16:11:41.048]  $ rscript_sh      : chr "sh"
[16:11:41.048]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:11:41.048]  $ methods         : logi TRUE
[16:11:41.048]  $ socketOptions   : chr "no-delay"
[16:11:41.048]  $ useXDR          : logi FALSE
[16:11:41.048]  $ outfile         : chr "/dev/null"
[16:11:41.048]  $ renice          : int NA
[16:11:41.048]  $ rshcmd          : NULL
[16:11:41.048]  $ user            : chr(0) 
[16:11:41.048]  $ revtunnel       : logi FALSE
[16:11:41.048]  $ rshlogfile      : NULL
[16:11:41.048]  $ rshopts         : chr(0) 
[16:11:41.048]  $ rank            : int 1
[16:11:41.048]  $ manual          : logi FALSE
[16:11:41.048]  $ dryrun          : logi FALSE
[16:11:41.048]  $ quiet           : logi FALSE
[16:11:41.048]  $ setup_strategy  : chr "parallel"
[16:11:41.048]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:11:41.048]  $ pidfile         : chr "/tmp/RtmpxQOMkq/worker.rank=1.parallelly.parent=79982.1386e51ab0c3.pid"
[16:11:41.048]  $ rshcmd_label    : NULL
[16:11:41.048]  $ rsh_call        : NULL
[16:11:41.048]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:11:41.048]  $ localMachine    : logi TRUE
[16:11:41.048]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:11:41.048]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:11:41.048]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:11:41.048]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:11:41.048]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:11:41.048]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:11:41.048]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:11:41.048]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:11:41.048]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:11:41.048]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:11:41.048]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:11:41.048]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:11:41.048]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:11:41.048]  $ arguments       :List of 28
[16:11:41.048]   ..$ worker          : chr "localhost"
[16:11:41.048]   ..$ master          : NULL
[16:11:41.048]   ..$ port            : int 11049
[16:11:41.048]   ..$ connectTimeout  : num 120
[16:11:41.048]   ..$ timeout         : num 2592000
[16:11:41.048]   ..$ rscript         : NULL
[16:11:41.048]   ..$ homogeneous     : NULL
[16:11:41.048]   ..$ rscript_args    : NULL
[16:11:41.048]   ..$ rscript_envs    : NULL
[16:11:41.048]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:11:41.048]   ..$ rscript_startup : NULL
[16:11:41.048]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:11:41.048]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:11:41.048]   ..$ methods         : logi TRUE
[16:11:41.048]   ..$ socketOptions   : chr "no-delay"
[16:11:41.048]   ..$ useXDR          : logi FALSE
[16:11:41.048]   ..$ outfile         : chr "/dev/null"
[16:11:41.048]   ..$ renice          : int NA
[16:11:41.048]   ..$ rshcmd          : NULL
[16:11:41.048]   ..$ user            : NULL
[16:11:41.048]   ..$ revtunnel       : logi NA
[16:11:41.048]   ..$ rshlogfile      : NULL
[16:11:41.048]   ..$ rshopts         : NULL
[16:11:41.048]   ..$ rank            : int 1
[16:11:41.048]   ..$ manual          : logi FALSE
[16:11:41.048]   ..$ dryrun          : logi FALSE
[16:11:41.048]   ..$ quiet           : logi FALSE
[16:11:41.048]   ..$ setup_strategy  : chr "parallel"
[16:11:41.048]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:11:41.067] [local output] System call to launch all workers:
[16:11:41.067] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpxQOMkq/worker.rank=1.parallelly.parent=79982.1386e51ab0c3.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11049 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:11:41.067] [local output] Starting PSOCK main server
[16:11:41.068] [local output] Workers launched
[16:11:41.069] [local output] Waiting for workers to connect back
[16:11:41.069]  - [local output] 0 workers out of 2 ready
[16:11:41.310]  - [local output] 0 workers out of 2 ready
[16:11:41.311]  - [local output] 1 workers out of 2 ready
[16:11:41.312]  - [local output] 1 workers out of 2 ready
[16:11:41.313]  - [local output] 2 workers out of 2 ready
[16:11:41.313] [local output] Launching of workers completed
[16:11:41.313] [local output] Collecting session information from workers
[16:11:41.314] [local output]  - Worker #1 of 2
[16:11:41.314] [local output]  - Worker #2 of 2
[16:11:41.315] [local output] makeClusterPSOCK() ... done
[16:11:41.326] Packages needed by the future expression (n = 0): <none>
[16:11:41.326] Packages needed by future strategies (n = 0): <none>
[16:11:41.327] {
[16:11:41.327]     {
[16:11:41.327]         {
[16:11:41.327]             ...future.startTime <- base::Sys.time()
[16:11:41.327]             {
[16:11:41.327]                 {
[16:11:41.327]                   {
[16:11:41.327]                     {
[16:11:41.327]                       base::local({
[16:11:41.327]                         has_future <- base::requireNamespace("future", 
[16:11:41.327]                           quietly = TRUE)
[16:11:41.327]                         if (has_future) {
[16:11:41.327]                           ns <- base::getNamespace("future")
[16:11:41.327]                           version <- ns[[".package"]][["version"]]
[16:11:41.327]                           if (is.null(version)) 
[16:11:41.327]                             version <- utils::packageVersion("future")
[16:11:41.327]                         }
[16:11:41.327]                         else {
[16:11:41.327]                           version <- NULL
[16:11:41.327]                         }
[16:11:41.327]                         if (!has_future || version < "1.8.0") {
[16:11:41.327]                           info <- base::c(r_version = base::gsub("R version ", 
[16:11:41.327]                             "", base::R.version$version.string), 
[16:11:41.327]                             platform = base::sprintf("%s (%s-bit)", 
[16:11:41.327]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:11:41.327]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:11:41.327]                               "release", "version")], collapse = " "), 
[16:11:41.327]                             hostname = base::Sys.info()[["nodename"]])
[16:11:41.327]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:11:41.327]                             info)
[16:11:41.327]                           info <- base::paste(info, collapse = "; ")
[16:11:41.327]                           if (!has_future) {
[16:11:41.327]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:11:41.327]                               info)
[16:11:41.327]                           }
[16:11:41.327]                           else {
[16:11:41.327]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:11:41.327]                               info, version)
[16:11:41.327]                           }
[16:11:41.327]                           base::stop(msg)
[16:11:41.327]                         }
[16:11:41.327]                       })
[16:11:41.327]                     }
[16:11:41.327]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:11:41.327]                     base::options(mc.cores = 1L)
[16:11:41.327]                   }
[16:11:41.327]                   options(future.plan = NULL)
[16:11:41.327]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:11:41.327]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:11:41.327]                 }
[16:11:41.327]                 ...future.workdir <- getwd()
[16:11:41.327]             }
[16:11:41.327]             ...future.oldOptions <- base::as.list(base::.Options)
[16:11:41.327]             ...future.oldEnvVars <- base::Sys.getenv()
[16:11:41.327]         }
[16:11:41.327]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:11:41.327]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:11:41.327]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:11:41.327]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:11:41.327]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:11:41.327]             future.stdout.windows.reencode = NULL, width = 80L)
[16:11:41.327]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:11:41.327]             base::names(...future.oldOptions))
[16:11:41.327]     }
[16:11:41.327]     if (FALSE) {
[16:11:41.327]     }
[16:11:41.327]     else {
[16:11:41.327]         if (TRUE) {
[16:11:41.327]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:11:41.327]                 open = "w")
[16:11:41.327]         }
[16:11:41.327]         else {
[16:11:41.327]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:11:41.327]                 windows = "NUL", "/dev/null"), open = "w")
[16:11:41.327]         }
[16:11:41.327]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:11:41.327]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:11:41.327]             base::sink(type = "output", split = FALSE)
[16:11:41.327]             base::close(...future.stdout)
[16:11:41.327]         }, add = TRUE)
[16:11:41.327]     }
[16:11:41.327]     ...future.frame <- base::sys.nframe()
[16:11:41.327]     ...future.conditions <- base::list()
[16:11:41.327]     ...future.rng <- base::globalenv()$.Random.seed
[16:11:41.327]     if (FALSE) {
[16:11:41.327]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:11:41.327]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:11:41.327]     }
[16:11:41.327]     ...future.result <- base::tryCatch({
[16:11:41.327]         base::withCallingHandlers({
[16:11:41.327]             ...future.value <- base::withVisible(base::local({
[16:11:41.327]                 ...future.makeSendCondition <- local({
[16:11:41.327]                   sendCondition <- NULL
[16:11:41.327]                   function(frame = 1L) {
[16:11:41.327]                     if (is.function(sendCondition)) 
[16:11:41.327]                       return(sendCondition)
[16:11:41.327]                     ns <- getNamespace("parallel")
[16:11:41.327]                     if (exists("sendData", mode = "function", 
[16:11:41.327]                       envir = ns)) {
[16:11:41.327]                       parallel_sendData <- get("sendData", mode = "function", 
[16:11:41.327]                         envir = ns)
[16:11:41.327]                       envir <- sys.frame(frame)
[16:11:41.327]                       master <- NULL
[16:11:41.327]                       while (!identical(envir, .GlobalEnv) && 
[16:11:41.327]                         !identical(envir, emptyenv())) {
[16:11:41.327]                         if (exists("master", mode = "list", envir = envir, 
[16:11:41.327]                           inherits = FALSE)) {
[16:11:41.327]                           master <- get("master", mode = "list", 
[16:11:41.327]                             envir = envir, inherits = FALSE)
[16:11:41.327]                           if (inherits(master, c("SOCKnode", 
[16:11:41.327]                             "SOCK0node"))) {
[16:11:41.327]                             sendCondition <<- function(cond) {
[16:11:41.327]                               data <- list(type = "VALUE", value = cond, 
[16:11:41.327]                                 success = TRUE)
[16:11:41.327]                               parallel_sendData(master, data)
[16:11:41.327]                             }
[16:11:41.327]                             return(sendCondition)
[16:11:41.327]                           }
[16:11:41.327]                         }
[16:11:41.327]                         frame <- frame + 1L
[16:11:41.327]                         envir <- sys.frame(frame)
[16:11:41.327]                       }
[16:11:41.327]                     }
[16:11:41.327]                     sendCondition <<- function(cond) NULL
[16:11:41.327]                   }
[16:11:41.327]                 })
[16:11:41.327]                 withCallingHandlers({
[16:11:41.327]                   NA
[16:11:41.327]                 }, immediateCondition = function(cond) {
[16:11:41.327]                   sendCondition <- ...future.makeSendCondition()
[16:11:41.327]                   sendCondition(cond)
[16:11:41.327]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:41.327]                   {
[16:11:41.327]                     inherits <- base::inherits
[16:11:41.327]                     invokeRestart <- base::invokeRestart
[16:11:41.327]                     is.null <- base::is.null
[16:11:41.327]                     muffled <- FALSE
[16:11:41.327]                     if (inherits(cond, "message")) {
[16:11:41.327]                       muffled <- grepl(pattern, "muffleMessage")
[16:11:41.327]                       if (muffled) 
[16:11:41.327]                         invokeRestart("muffleMessage")
[16:11:41.327]                     }
[16:11:41.327]                     else if (inherits(cond, "warning")) {
[16:11:41.327]                       muffled <- grepl(pattern, "muffleWarning")
[16:11:41.327]                       if (muffled) 
[16:11:41.327]                         invokeRestart("muffleWarning")
[16:11:41.327]                     }
[16:11:41.327]                     else if (inherits(cond, "condition")) {
[16:11:41.327]                       if (!is.null(pattern)) {
[16:11:41.327]                         computeRestarts <- base::computeRestarts
[16:11:41.327]                         grepl <- base::grepl
[16:11:41.327]                         restarts <- computeRestarts(cond)
[16:11:41.327]                         for (restart in restarts) {
[16:11:41.327]                           name <- restart$name
[16:11:41.327]                           if (is.null(name)) 
[16:11:41.327]                             next
[16:11:41.327]                           if (!grepl(pattern, name)) 
[16:11:41.327]                             next
[16:11:41.327]                           invokeRestart(restart)
[16:11:41.327]                           muffled <- TRUE
[16:11:41.327]                           break
[16:11:41.327]                         }
[16:11:41.327]                       }
[16:11:41.327]                     }
[16:11:41.327]                     invisible(muffled)
[16:11:41.327]                   }
[16:11:41.327]                   muffleCondition(cond)
[16:11:41.327]                 })
[16:11:41.327]             }))
[16:11:41.327]             future::FutureResult(value = ...future.value$value, 
[16:11:41.327]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:41.327]                   ...future.rng), globalenv = if (FALSE) 
[16:11:41.327]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:11:41.327]                     ...future.globalenv.names))
[16:11:41.327]                 else NULL, started = ...future.startTime, version = "1.8")
[16:11:41.327]         }, condition = base::local({
[16:11:41.327]             c <- base::c
[16:11:41.327]             inherits <- base::inherits
[16:11:41.327]             invokeRestart <- base::invokeRestart
[16:11:41.327]             length <- base::length
[16:11:41.327]             list <- base::list
[16:11:41.327]             seq.int <- base::seq.int
[16:11:41.327]             signalCondition <- base::signalCondition
[16:11:41.327]             sys.calls <- base::sys.calls
[16:11:41.327]             `[[` <- base::`[[`
[16:11:41.327]             `+` <- base::`+`
[16:11:41.327]             `<<-` <- base::`<<-`
[16:11:41.327]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:11:41.327]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:11:41.327]                   3L)]
[16:11:41.327]             }
[16:11:41.327]             function(cond) {
[16:11:41.327]                 is_error <- inherits(cond, "error")
[16:11:41.327]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:11:41.327]                   NULL)
[16:11:41.327]                 if (is_error) {
[16:11:41.327]                   sessionInformation <- function() {
[16:11:41.327]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:11:41.327]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:11:41.327]                       search = base::search(), system = base::Sys.info())
[16:11:41.327]                   }
[16:11:41.327]                   ...future.conditions[[length(...future.conditions) + 
[16:11:41.327]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:11:41.327]                     cond$call), session = sessionInformation(), 
[16:11:41.327]                     timestamp = base::Sys.time(), signaled = 0L)
[16:11:41.327]                   signalCondition(cond)
[16:11:41.327]                 }
[16:11:41.327]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:11:41.327]                 "immediateCondition"))) {
[16:11:41.327]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:11:41.327]                   ...future.conditions[[length(...future.conditions) + 
[16:11:41.327]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:11:41.327]                   if (TRUE && !signal) {
[16:11:41.327]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:41.327]                     {
[16:11:41.327]                       inherits <- base::inherits
[16:11:41.327]                       invokeRestart <- base::invokeRestart
[16:11:41.327]                       is.null <- base::is.null
[16:11:41.327]                       muffled <- FALSE
[16:11:41.327]                       if (inherits(cond, "message")) {
[16:11:41.327]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:41.327]                         if (muffled) 
[16:11:41.327]                           invokeRestart("muffleMessage")
[16:11:41.327]                       }
[16:11:41.327]                       else if (inherits(cond, "warning")) {
[16:11:41.327]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:41.327]                         if (muffled) 
[16:11:41.327]                           invokeRestart("muffleWarning")
[16:11:41.327]                       }
[16:11:41.327]                       else if (inherits(cond, "condition")) {
[16:11:41.327]                         if (!is.null(pattern)) {
[16:11:41.327]                           computeRestarts <- base::computeRestarts
[16:11:41.327]                           grepl <- base::grepl
[16:11:41.327]                           restarts <- computeRestarts(cond)
[16:11:41.327]                           for (restart in restarts) {
[16:11:41.327]                             name <- restart$name
[16:11:41.327]                             if (is.null(name)) 
[16:11:41.327]                               next
[16:11:41.327]                             if (!grepl(pattern, name)) 
[16:11:41.327]                               next
[16:11:41.327]                             invokeRestart(restart)
[16:11:41.327]                             muffled <- TRUE
[16:11:41.327]                             break
[16:11:41.327]                           }
[16:11:41.327]                         }
[16:11:41.327]                       }
[16:11:41.327]                       invisible(muffled)
[16:11:41.327]                     }
[16:11:41.327]                     muffleCondition(cond, pattern = "^muffle")
[16:11:41.327]                   }
[16:11:41.327]                 }
[16:11:41.327]                 else {
[16:11:41.327]                   if (TRUE) {
[16:11:41.327]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:41.327]                     {
[16:11:41.327]                       inherits <- base::inherits
[16:11:41.327]                       invokeRestart <- base::invokeRestart
[16:11:41.327]                       is.null <- base::is.null
[16:11:41.327]                       muffled <- FALSE
[16:11:41.327]                       if (inherits(cond, "message")) {
[16:11:41.327]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:41.327]                         if (muffled) 
[16:11:41.327]                           invokeRestart("muffleMessage")
[16:11:41.327]                       }
[16:11:41.327]                       else if (inherits(cond, "warning")) {
[16:11:41.327]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:41.327]                         if (muffled) 
[16:11:41.327]                           invokeRestart("muffleWarning")
[16:11:41.327]                       }
[16:11:41.327]                       else if (inherits(cond, "condition")) {
[16:11:41.327]                         if (!is.null(pattern)) {
[16:11:41.327]                           computeRestarts <- base::computeRestarts
[16:11:41.327]                           grepl <- base::grepl
[16:11:41.327]                           restarts <- computeRestarts(cond)
[16:11:41.327]                           for (restart in restarts) {
[16:11:41.327]                             name <- restart$name
[16:11:41.327]                             if (is.null(name)) 
[16:11:41.327]                               next
[16:11:41.327]                             if (!grepl(pattern, name)) 
[16:11:41.327]                               next
[16:11:41.327]                             invokeRestart(restart)
[16:11:41.327]                             muffled <- TRUE
[16:11:41.327]                             break
[16:11:41.327]                           }
[16:11:41.327]                         }
[16:11:41.327]                       }
[16:11:41.327]                       invisible(muffled)
[16:11:41.327]                     }
[16:11:41.327]                     muffleCondition(cond, pattern = "^muffle")
[16:11:41.327]                   }
[16:11:41.327]                 }
[16:11:41.327]             }
[16:11:41.327]         }))
[16:11:41.327]     }, error = function(ex) {
[16:11:41.327]         base::structure(base::list(value = NULL, visible = NULL, 
[16:11:41.327]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:41.327]                 ...future.rng), started = ...future.startTime, 
[16:11:41.327]             finished = Sys.time(), session_uuid = NA_character_, 
[16:11:41.327]             version = "1.8"), class = "FutureResult")
[16:11:41.327]     }, finally = {
[16:11:41.327]         if (!identical(...future.workdir, getwd())) 
[16:11:41.327]             setwd(...future.workdir)
[16:11:41.327]         {
[16:11:41.327]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:11:41.327]                 ...future.oldOptions$nwarnings <- NULL
[16:11:41.327]             }
[16:11:41.327]             base::options(...future.oldOptions)
[16:11:41.327]             if (.Platform$OS.type == "windows") {
[16:11:41.327]                 old_names <- names(...future.oldEnvVars)
[16:11:41.327]                 envs <- base::Sys.getenv()
[16:11:41.327]                 names <- names(envs)
[16:11:41.327]                 common <- intersect(names, old_names)
[16:11:41.327]                 added <- setdiff(names, old_names)
[16:11:41.327]                 removed <- setdiff(old_names, names)
[16:11:41.327]                 changed <- common[...future.oldEnvVars[common] != 
[16:11:41.327]                   envs[common]]
[16:11:41.327]                 NAMES <- toupper(changed)
[16:11:41.327]                 args <- list()
[16:11:41.327]                 for (kk in seq_along(NAMES)) {
[16:11:41.327]                   name <- changed[[kk]]
[16:11:41.327]                   NAME <- NAMES[[kk]]
[16:11:41.327]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:41.327]                     next
[16:11:41.327]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:41.327]                 }
[16:11:41.327]                 NAMES <- toupper(added)
[16:11:41.327]                 for (kk in seq_along(NAMES)) {
[16:11:41.327]                   name <- added[[kk]]
[16:11:41.327]                   NAME <- NAMES[[kk]]
[16:11:41.327]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:41.327]                     next
[16:11:41.327]                   args[[name]] <- ""
[16:11:41.327]                 }
[16:11:41.327]                 NAMES <- toupper(removed)
[16:11:41.327]                 for (kk in seq_along(NAMES)) {
[16:11:41.327]                   name <- removed[[kk]]
[16:11:41.327]                   NAME <- NAMES[[kk]]
[16:11:41.327]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:41.327]                     next
[16:11:41.327]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:41.327]                 }
[16:11:41.327]                 if (length(args) > 0) 
[16:11:41.327]                   base::do.call(base::Sys.setenv, args = args)
[16:11:41.327]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:11:41.327]             }
[16:11:41.327]             else {
[16:11:41.327]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:11:41.327]             }
[16:11:41.327]             {
[16:11:41.327]                 if (base::length(...future.futureOptionsAdded) > 
[16:11:41.327]                   0L) {
[16:11:41.327]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:11:41.327]                   base::names(opts) <- ...future.futureOptionsAdded
[16:11:41.327]                   base::options(opts)
[16:11:41.327]                 }
[16:11:41.327]                 {
[16:11:41.327]                   {
[16:11:41.327]                     base::options(mc.cores = ...future.mc.cores.old)
[16:11:41.327]                     NULL
[16:11:41.327]                   }
[16:11:41.327]                   options(future.plan = NULL)
[16:11:41.327]                   if (is.na(NA_character_)) 
[16:11:41.327]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:11:41.327]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:11:41.327]                   future::plan(list(function (..., workers = 2L, 
[16:11:41.327]                     envir = parent.frame()) 
[16:11:41.327]                   strategy(..., workers = workers, envir = envir)), 
[16:11:41.327]                     .cleanup = FALSE, .init = FALSE)
[16:11:41.327]                 }
[16:11:41.327]             }
[16:11:41.327]         }
[16:11:41.327]     })
[16:11:41.327]     if (TRUE) {
[16:11:41.327]         base::sink(type = "output", split = FALSE)
[16:11:41.327]         if (TRUE) {
[16:11:41.327]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:11:41.327]         }
[16:11:41.327]         else {
[16:11:41.327]             ...future.result["stdout"] <- base::list(NULL)
[16:11:41.327]         }
[16:11:41.327]         base::close(...future.stdout)
[16:11:41.327]         ...future.stdout <- NULL
[16:11:41.327]     }
[16:11:41.327]     ...future.result$conditions <- ...future.conditions
[16:11:41.327]     ...future.result$finished <- base::Sys.time()
[16:11:41.327]     ...future.result
[16:11:41.327] }
[16:11:41.398] MultisessionFuture started
[16:11:41.398] result() for ClusterFuture ...
[16:11:41.399] receiveMessageFromWorker() for ClusterFuture ...
[16:11:41.399] - Validating connection of MultisessionFuture
[16:11:41.422] - received message: FutureResult
[16:11:41.422] - Received FutureResult
[16:11:41.425] - Erased future from FutureRegistry
[16:11:41.426] result() for ClusterFuture ...
[16:11:41.426] - result already collected: FutureResult
[16:11:41.426] result() for ClusterFuture ... done
[16:11:41.426] receiveMessageFromWorker() for ClusterFuture ... done
[16:11:41.426] result() for ClusterFuture ... done
[16:11:41.426] result() for ClusterFuture ...
[16:11:41.426] - result already collected: FutureResult
[16:11:41.426] result() for ClusterFuture ... done
[16:11:41.427] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:11:41.427] plan(): nbrOfWorkers() = 2
[16:11:41.427] getGlobalsAndPackages() ...
[16:11:41.427] Searching for globals...
[16:11:41.429] - globals found: [3] ‘{’, ‘Sys.sleep’, ‘stop’
[16:11:41.429] Searching for globals ... DONE
[16:11:41.429] Resolving globals: FALSE
[16:11:41.429] 
[16:11:41.430] 
[16:11:41.430] getGlobalsAndPackages() ... DONE
[16:11:41.430] run() for ‘Future’ ...
[16:11:41.430] - state: ‘created’
[16:11:41.430] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:11:41.442] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:11:41.442] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:11:41.442]   - Field: ‘node’
[16:11:41.442]   - Field: ‘label’
[16:11:41.442]   - Field: ‘local’
[16:11:41.443]   - Field: ‘owner’
[16:11:41.443]   - Field: ‘envir’
[16:11:41.443]   - Field: ‘workers’
[16:11:41.443]   - Field: ‘packages’
[16:11:41.443]   - Field: ‘gc’
[16:11:41.443]   - Field: ‘conditions’
[16:11:41.443]   - Field: ‘persistent’
[16:11:41.443]   - Field: ‘expr’
[16:11:41.443]   - Field: ‘uuid’
[16:11:41.443]   - Field: ‘seed’
[16:11:41.444]   - Field: ‘version’
[16:11:41.444]   - Field: ‘result’
[16:11:41.444]   - Field: ‘asynchronous’
[16:11:41.444]   - Field: ‘calls’
[16:11:41.444]   - Field: ‘globals’
[16:11:41.444]   - Field: ‘stdout’
[16:11:41.444]   - Field: ‘earlySignal’
[16:11:41.444]   - Field: ‘lazy’
[16:11:41.445]   - Field: ‘state’
[16:11:41.445] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:11:41.445] - Launch lazy future ...
[16:11:41.445] Packages needed by the future expression (n = 0): <none>
[16:11:41.445] Packages needed by future strategies (n = 0): <none>
[16:11:41.446] {
[16:11:41.446]     {
[16:11:41.446]         {
[16:11:41.446]             ...future.startTime <- base::Sys.time()
[16:11:41.446]             {
[16:11:41.446]                 {
[16:11:41.446]                   {
[16:11:41.446]                     {
[16:11:41.446]                       base::local({
[16:11:41.446]                         has_future <- base::requireNamespace("future", 
[16:11:41.446]                           quietly = TRUE)
[16:11:41.446]                         if (has_future) {
[16:11:41.446]                           ns <- base::getNamespace("future")
[16:11:41.446]                           version <- ns[[".package"]][["version"]]
[16:11:41.446]                           if (is.null(version)) 
[16:11:41.446]                             version <- utils::packageVersion("future")
[16:11:41.446]                         }
[16:11:41.446]                         else {
[16:11:41.446]                           version <- NULL
[16:11:41.446]                         }
[16:11:41.446]                         if (!has_future || version < "1.8.0") {
[16:11:41.446]                           info <- base::c(r_version = base::gsub("R version ", 
[16:11:41.446]                             "", base::R.version$version.string), 
[16:11:41.446]                             platform = base::sprintf("%s (%s-bit)", 
[16:11:41.446]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:11:41.446]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:11:41.446]                               "release", "version")], collapse = " "), 
[16:11:41.446]                             hostname = base::Sys.info()[["nodename"]])
[16:11:41.446]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:11:41.446]                             info)
[16:11:41.446]                           info <- base::paste(info, collapse = "; ")
[16:11:41.446]                           if (!has_future) {
[16:11:41.446]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:11:41.446]                               info)
[16:11:41.446]                           }
[16:11:41.446]                           else {
[16:11:41.446]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:11:41.446]                               info, version)
[16:11:41.446]                           }
[16:11:41.446]                           base::stop(msg)
[16:11:41.446]                         }
[16:11:41.446]                       })
[16:11:41.446]                     }
[16:11:41.446]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:11:41.446]                     base::options(mc.cores = 1L)
[16:11:41.446]                   }
[16:11:41.446]                   options(future.plan = NULL)
[16:11:41.446]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:11:41.446]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:11:41.446]                 }
[16:11:41.446]                 ...future.workdir <- getwd()
[16:11:41.446]             }
[16:11:41.446]             ...future.oldOptions <- base::as.list(base::.Options)
[16:11:41.446]             ...future.oldEnvVars <- base::Sys.getenv()
[16:11:41.446]         }
[16:11:41.446]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:11:41.446]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:11:41.446]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:11:41.446]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:11:41.446]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:11:41.446]             future.stdout.windows.reencode = NULL, width = 80L)
[16:11:41.446]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:11:41.446]             base::names(...future.oldOptions))
[16:11:41.446]     }
[16:11:41.446]     if (FALSE) {
[16:11:41.446]     }
[16:11:41.446]     else {
[16:11:41.446]         if (TRUE) {
[16:11:41.446]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:11:41.446]                 open = "w")
[16:11:41.446]         }
[16:11:41.446]         else {
[16:11:41.446]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:11:41.446]                 windows = "NUL", "/dev/null"), open = "w")
[16:11:41.446]         }
[16:11:41.446]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:11:41.446]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:11:41.446]             base::sink(type = "output", split = FALSE)
[16:11:41.446]             base::close(...future.stdout)
[16:11:41.446]         }, add = TRUE)
[16:11:41.446]     }
[16:11:41.446]     ...future.frame <- base::sys.nframe()
[16:11:41.446]     ...future.conditions <- base::list()
[16:11:41.446]     ...future.rng <- base::globalenv()$.Random.seed
[16:11:41.446]     if (FALSE) {
[16:11:41.446]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:11:41.446]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:11:41.446]     }
[16:11:41.446]     ...future.result <- base::tryCatch({
[16:11:41.446]         base::withCallingHandlers({
[16:11:41.446]             ...future.value <- base::withVisible(base::local({
[16:11:41.446]                 ...future.makeSendCondition <- local({
[16:11:41.446]                   sendCondition <- NULL
[16:11:41.446]                   function(frame = 1L) {
[16:11:41.446]                     if (is.function(sendCondition)) 
[16:11:41.446]                       return(sendCondition)
[16:11:41.446]                     ns <- getNamespace("parallel")
[16:11:41.446]                     if (exists("sendData", mode = "function", 
[16:11:41.446]                       envir = ns)) {
[16:11:41.446]                       parallel_sendData <- get("sendData", mode = "function", 
[16:11:41.446]                         envir = ns)
[16:11:41.446]                       envir <- sys.frame(frame)
[16:11:41.446]                       master <- NULL
[16:11:41.446]                       while (!identical(envir, .GlobalEnv) && 
[16:11:41.446]                         !identical(envir, emptyenv())) {
[16:11:41.446]                         if (exists("master", mode = "list", envir = envir, 
[16:11:41.446]                           inherits = FALSE)) {
[16:11:41.446]                           master <- get("master", mode = "list", 
[16:11:41.446]                             envir = envir, inherits = FALSE)
[16:11:41.446]                           if (inherits(master, c("SOCKnode", 
[16:11:41.446]                             "SOCK0node"))) {
[16:11:41.446]                             sendCondition <<- function(cond) {
[16:11:41.446]                               data <- list(type = "VALUE", value = cond, 
[16:11:41.446]                                 success = TRUE)
[16:11:41.446]                               parallel_sendData(master, data)
[16:11:41.446]                             }
[16:11:41.446]                             return(sendCondition)
[16:11:41.446]                           }
[16:11:41.446]                         }
[16:11:41.446]                         frame <- frame + 1L
[16:11:41.446]                         envir <- sys.frame(frame)
[16:11:41.446]                       }
[16:11:41.446]                     }
[16:11:41.446]                     sendCondition <<- function(cond) NULL
[16:11:41.446]                   }
[16:11:41.446]                 })
[16:11:41.446]                 withCallingHandlers({
[16:11:41.446]                   {
[16:11:41.446]                     Sys.sleep(3)
[16:11:41.446]                     42L
[16:11:41.446]                     stop("Woops")
[16:11:41.446]                   }
[16:11:41.446]                 }, immediateCondition = function(cond) {
[16:11:41.446]                   sendCondition <- ...future.makeSendCondition()
[16:11:41.446]                   sendCondition(cond)
[16:11:41.446]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:41.446]                   {
[16:11:41.446]                     inherits <- base::inherits
[16:11:41.446]                     invokeRestart <- base::invokeRestart
[16:11:41.446]                     is.null <- base::is.null
[16:11:41.446]                     muffled <- FALSE
[16:11:41.446]                     if (inherits(cond, "message")) {
[16:11:41.446]                       muffled <- grepl(pattern, "muffleMessage")
[16:11:41.446]                       if (muffled) 
[16:11:41.446]                         invokeRestart("muffleMessage")
[16:11:41.446]                     }
[16:11:41.446]                     else if (inherits(cond, "warning")) {
[16:11:41.446]                       muffled <- grepl(pattern, "muffleWarning")
[16:11:41.446]                       if (muffled) 
[16:11:41.446]                         invokeRestart("muffleWarning")
[16:11:41.446]                     }
[16:11:41.446]                     else if (inherits(cond, "condition")) {
[16:11:41.446]                       if (!is.null(pattern)) {
[16:11:41.446]                         computeRestarts <- base::computeRestarts
[16:11:41.446]                         grepl <- base::grepl
[16:11:41.446]                         restarts <- computeRestarts(cond)
[16:11:41.446]                         for (restart in restarts) {
[16:11:41.446]                           name <- restart$name
[16:11:41.446]                           if (is.null(name)) 
[16:11:41.446]                             next
[16:11:41.446]                           if (!grepl(pattern, name)) 
[16:11:41.446]                             next
[16:11:41.446]                           invokeRestart(restart)
[16:11:41.446]                           muffled <- TRUE
[16:11:41.446]                           break
[16:11:41.446]                         }
[16:11:41.446]                       }
[16:11:41.446]                     }
[16:11:41.446]                     invisible(muffled)
[16:11:41.446]                   }
[16:11:41.446]                   muffleCondition(cond)
[16:11:41.446]                 })
[16:11:41.446]             }))
[16:11:41.446]             future::FutureResult(value = ...future.value$value, 
[16:11:41.446]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:41.446]                   ...future.rng), globalenv = if (FALSE) 
[16:11:41.446]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:11:41.446]                     ...future.globalenv.names))
[16:11:41.446]                 else NULL, started = ...future.startTime, version = "1.8")
[16:11:41.446]         }, condition = base::local({
[16:11:41.446]             c <- base::c
[16:11:41.446]             inherits <- base::inherits
[16:11:41.446]             invokeRestart <- base::invokeRestart
[16:11:41.446]             length <- base::length
[16:11:41.446]             list <- base::list
[16:11:41.446]             seq.int <- base::seq.int
[16:11:41.446]             signalCondition <- base::signalCondition
[16:11:41.446]             sys.calls <- base::sys.calls
[16:11:41.446]             `[[` <- base::`[[`
[16:11:41.446]             `+` <- base::`+`
[16:11:41.446]             `<<-` <- base::`<<-`
[16:11:41.446]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:11:41.446]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:11:41.446]                   3L)]
[16:11:41.446]             }
[16:11:41.446]             function(cond) {
[16:11:41.446]                 is_error <- inherits(cond, "error")
[16:11:41.446]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:11:41.446]                   NULL)
[16:11:41.446]                 if (is_error) {
[16:11:41.446]                   sessionInformation <- function() {
[16:11:41.446]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:11:41.446]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:11:41.446]                       search = base::search(), system = base::Sys.info())
[16:11:41.446]                   }
[16:11:41.446]                   ...future.conditions[[length(...future.conditions) + 
[16:11:41.446]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:11:41.446]                     cond$call), session = sessionInformation(), 
[16:11:41.446]                     timestamp = base::Sys.time(), signaled = 0L)
[16:11:41.446]                   signalCondition(cond)
[16:11:41.446]                 }
[16:11:41.446]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:11:41.446]                 "immediateCondition"))) {
[16:11:41.446]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:11:41.446]                   ...future.conditions[[length(...future.conditions) + 
[16:11:41.446]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:11:41.446]                   if (TRUE && !signal) {
[16:11:41.446]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:41.446]                     {
[16:11:41.446]                       inherits <- base::inherits
[16:11:41.446]                       invokeRestart <- base::invokeRestart
[16:11:41.446]                       is.null <- base::is.null
[16:11:41.446]                       muffled <- FALSE
[16:11:41.446]                       if (inherits(cond, "message")) {
[16:11:41.446]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:41.446]                         if (muffled) 
[16:11:41.446]                           invokeRestart("muffleMessage")
[16:11:41.446]                       }
[16:11:41.446]                       else if (inherits(cond, "warning")) {
[16:11:41.446]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:41.446]                         if (muffled) 
[16:11:41.446]                           invokeRestart("muffleWarning")
[16:11:41.446]                       }
[16:11:41.446]                       else if (inherits(cond, "condition")) {
[16:11:41.446]                         if (!is.null(pattern)) {
[16:11:41.446]                           computeRestarts <- base::computeRestarts
[16:11:41.446]                           grepl <- base::grepl
[16:11:41.446]                           restarts <- computeRestarts(cond)
[16:11:41.446]                           for (restart in restarts) {
[16:11:41.446]                             name <- restart$name
[16:11:41.446]                             if (is.null(name)) 
[16:11:41.446]                               next
[16:11:41.446]                             if (!grepl(pattern, name)) 
[16:11:41.446]                               next
[16:11:41.446]                             invokeRestart(restart)
[16:11:41.446]                             muffled <- TRUE
[16:11:41.446]                             break
[16:11:41.446]                           }
[16:11:41.446]                         }
[16:11:41.446]                       }
[16:11:41.446]                       invisible(muffled)
[16:11:41.446]                     }
[16:11:41.446]                     muffleCondition(cond, pattern = "^muffle")
[16:11:41.446]                   }
[16:11:41.446]                 }
[16:11:41.446]                 else {
[16:11:41.446]                   if (TRUE) {
[16:11:41.446]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:11:41.446]                     {
[16:11:41.446]                       inherits <- base::inherits
[16:11:41.446]                       invokeRestart <- base::invokeRestart
[16:11:41.446]                       is.null <- base::is.null
[16:11:41.446]                       muffled <- FALSE
[16:11:41.446]                       if (inherits(cond, "message")) {
[16:11:41.446]                         muffled <- grepl(pattern, "muffleMessage")
[16:11:41.446]                         if (muffled) 
[16:11:41.446]                           invokeRestart("muffleMessage")
[16:11:41.446]                       }
[16:11:41.446]                       else if (inherits(cond, "warning")) {
[16:11:41.446]                         muffled <- grepl(pattern, "muffleWarning")
[16:11:41.446]                         if (muffled) 
[16:11:41.446]                           invokeRestart("muffleWarning")
[16:11:41.446]                       }
[16:11:41.446]                       else if (inherits(cond, "condition")) {
[16:11:41.446]                         if (!is.null(pattern)) {
[16:11:41.446]                           computeRestarts <- base::computeRestarts
[16:11:41.446]                           grepl <- base::grepl
[16:11:41.446]                           restarts <- computeRestarts(cond)
[16:11:41.446]                           for (restart in restarts) {
[16:11:41.446]                             name <- restart$name
[16:11:41.446]                             if (is.null(name)) 
[16:11:41.446]                               next
[16:11:41.446]                             if (!grepl(pattern, name)) 
[16:11:41.446]                               next
[16:11:41.446]                             invokeRestart(restart)
[16:11:41.446]                             muffled <- TRUE
[16:11:41.446]                             break
[16:11:41.446]                           }
[16:11:41.446]                         }
[16:11:41.446]                       }
[16:11:41.446]                       invisible(muffled)
[16:11:41.446]                     }
[16:11:41.446]                     muffleCondition(cond, pattern = "^muffle")
[16:11:41.446]                   }
[16:11:41.446]                 }
[16:11:41.446]             }
[16:11:41.446]         }))
[16:11:41.446]     }, error = function(ex) {
[16:11:41.446]         base::structure(base::list(value = NULL, visible = NULL, 
[16:11:41.446]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:11:41.446]                 ...future.rng), started = ...future.startTime, 
[16:11:41.446]             finished = Sys.time(), session_uuid = NA_character_, 
[16:11:41.446]             version = "1.8"), class = "FutureResult")
[16:11:41.446]     }, finally = {
[16:11:41.446]         if (!identical(...future.workdir, getwd())) 
[16:11:41.446]             setwd(...future.workdir)
[16:11:41.446]         {
[16:11:41.446]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:11:41.446]                 ...future.oldOptions$nwarnings <- NULL
[16:11:41.446]             }
[16:11:41.446]             base::options(...future.oldOptions)
[16:11:41.446]             if (.Platform$OS.type == "windows") {
[16:11:41.446]                 old_names <- names(...future.oldEnvVars)
[16:11:41.446]                 envs <- base::Sys.getenv()
[16:11:41.446]                 names <- names(envs)
[16:11:41.446]                 common <- intersect(names, old_names)
[16:11:41.446]                 added <- setdiff(names, old_names)
[16:11:41.446]                 removed <- setdiff(old_names, names)
[16:11:41.446]                 changed <- common[...future.oldEnvVars[common] != 
[16:11:41.446]                   envs[common]]
[16:11:41.446]                 NAMES <- toupper(changed)
[16:11:41.446]                 args <- list()
[16:11:41.446]                 for (kk in seq_along(NAMES)) {
[16:11:41.446]                   name <- changed[[kk]]
[16:11:41.446]                   NAME <- NAMES[[kk]]
[16:11:41.446]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:41.446]                     next
[16:11:41.446]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:41.446]                 }
[16:11:41.446]                 NAMES <- toupper(added)
[16:11:41.446]                 for (kk in seq_along(NAMES)) {
[16:11:41.446]                   name <- added[[kk]]
[16:11:41.446]                   NAME <- NAMES[[kk]]
[16:11:41.446]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:41.446]                     next
[16:11:41.446]                   args[[name]] <- ""
[16:11:41.446]                 }
[16:11:41.446]                 NAMES <- toupper(removed)
[16:11:41.446]                 for (kk in seq_along(NAMES)) {
[16:11:41.446]                   name <- removed[[kk]]
[16:11:41.446]                   NAME <- NAMES[[kk]]
[16:11:41.446]                   if (name != NAME && is.element(NAME, old_names)) 
[16:11:41.446]                     next
[16:11:41.446]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:11:41.446]                 }
[16:11:41.446]                 if (length(args) > 0) 
[16:11:41.446]                   base::do.call(base::Sys.setenv, args = args)
[16:11:41.446]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:11:41.446]             }
[16:11:41.446]             else {
[16:11:41.446]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:11:41.446]             }
[16:11:41.446]             {
[16:11:41.446]                 if (base::length(...future.futureOptionsAdded) > 
[16:11:41.446]                   0L) {
[16:11:41.446]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:11:41.446]                   base::names(opts) <- ...future.futureOptionsAdded
[16:11:41.446]                   base::options(opts)
[16:11:41.446]                 }
[16:11:41.446]                 {
[16:11:41.446]                   {
[16:11:41.446]                     base::options(mc.cores = ...future.mc.cores.old)
[16:11:41.446]                     NULL
[16:11:41.446]                   }
[16:11:41.446]                   options(future.plan = NULL)
[16:11:41.446]                   if (is.na(NA_character_)) 
[16:11:41.446]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:11:41.446]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:11:41.446]                   future::plan(list(function (..., workers = 2L, 
[16:11:41.446]                     envir = parent.frame()) 
[16:11:41.446]                   strategy(..., workers = workers, envir = envir)), 
[16:11:41.446]                     .cleanup = FALSE, .init = FALSE)
[16:11:41.446]                 }
[16:11:41.446]             }
[16:11:41.446]         }
[16:11:41.446]     })
[16:11:41.446]     if (TRUE) {
[16:11:41.446]         base::sink(type = "output", split = FALSE)
[16:11:41.446]         if (TRUE) {
[16:11:41.446]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:11:41.446]         }
[16:11:41.446]         else {
[16:11:41.446]             ...future.result["stdout"] <- base::list(NULL)
[16:11:41.446]         }
[16:11:41.446]         base::close(...future.stdout)
[16:11:41.446]         ...future.stdout <- NULL
[16:11:41.446]     }
[16:11:41.446]     ...future.result$conditions <- ...future.conditions
[16:11:41.446]     ...future.result$finished <- base::Sys.time()
[16:11:41.446]     ...future.result
[16:11:41.446] }
[16:11:41.449] MultisessionFuture started
[16:11:41.449] - Launch lazy future ... done
[16:11:41.449] run() for ‘MultisessionFuture’ ... done
<simpleError: No error has been caught because the future is unresolved: ‘f’>
[16:11:44.503] receiveMessageFromWorker() for ClusterFuture ...
[16:11:44.503] - Validating connection of MultisessionFuture
[16:11:44.504] - received message: FutureResult
[16:11:44.504] - Received FutureResult
[16:11:44.504] - Erased future from FutureRegistry
[16:11:44.504] result() for ClusterFuture ...
[16:11:44.504] - result already collected: FutureResult
[16:11:44.504] result() for ClusterFuture ... done
[16:11:44.504] signalConditions() ...
[16:11:44.504]  - include = ‘immediateCondition’
[16:11:44.504]  - exclude = 
[16:11:44.504]  - resignal = FALSE
[16:11:44.505]  - Number of conditions: 1
[16:11:44.505] signalConditions() ... done
[16:11:44.505] receiveMessageFromWorker() for ClusterFuture ... done
[16:11:44.505] A MultisessionFuture was resolved (result was not collected)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    Sys.sleep(3)
    42L
    stop("Woops")
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: f8d134ae-dd1f-2216-0691-358cf2a5985b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> 
> message("*** backtrace( ) - exceptions ... DONE")
*** backtrace( ) - exceptions ... DONE
> 
> 
> message("*** backtrace( ) ... DONE")
*** backtrace( ) ... DONE
> 
> source("incl/end.R")
[16:11:44.507] plan(): Setting new future strategy stack:
[16:11:44.507] List of future strategies:
[16:11:44.507] 1. FutureStrategy:
[16:11:44.507]    - args: function (..., envir = parent.frame())
[16:11:44.507]    - tweaked: FALSE
[16:11:44.507]    - call: future::plan(oplan)
[16:11:44.507] plan(): nbrOfWorkers() = 1
> 
